import Ps_CustomCva
reload(Ps_CustomCva)

import acm

print('loaded Ps_CustomCva')

class getMappedCvaPdLgdCurve():

    def __init__(self, _mappedValParams):
        self.curve = _mappedValParams.BankCreditCurve()
        self.name = _mappedValParams.BankCreditCurve().Name()
        
    def getCvaNotionalChoiceFromSaCcrNotional(self):
        if hasattr(self.curve.AdditionalInfo(),'CvaNotionalChoiceSa'):
            return str(getattr(self.curve.AdditionalInfo(),'CvaNotionalChoiceSa')())
        else:
            return None
    

trades = acm.FTrade[124]

calcSpace = acm.FCalculationSpaceCollection().GetSpace('FTradeSheet', acm.GetDefaultContext())
val = calcSpace.CalculateValue(trades,"CVA Effective Maturity M")
#print(val)

val = calcSpace.CalculateValue(trades,"CVA Weighted Effective Maturity")

cpyTradesSet = acm.FStoredASQLQuery['PsRvm_CvaTrades_Counterparty1']
val = calcSpace.CalculateValue(cpyTradesSet,"CVA Weighted Effective Maturity")
#print(val)

mappedValParams = acm.FValuationParameters['DEFAULT']
#print(mappedValParams)
mappedCvaPdLgdCurve = getMappedCvaPdLgdCurve(mappedValParams)
#print(mappedCvaPdLgdCurve.name)
#print(mappedCvaPdLgdCurve.curve)
#print(mappedCvaPdLgdCurve.getCvaNotionalChoiceFromSaCcrNotional())
#print(type(mappedCvaPdLgdCurve.curve))
psCurve = mappedCvaPdLgdCurve.curve

valDate = acm.Time().DateToday()
riskFreeYc = acm.FYieldCurve['IDR-SWAP']

creditCurveString = 'SurvivalProb.Counterparty 1,Recovery_Rate=0.4,Curve=[(0.0, 0.0), (3.0027397260273974, 0.08180638498866381), (10.01095890410959, 0.32466326226737546), (4.879452054794521, 0.1582444636284061), (0.019178082191780823, 0.00038234955438713595), (20.013698630136986, 0.6490599701322326), (0.0027397260273972603, 5.462136491247727e-05), (8.005479452054795, 0.25962398805289305), (4.008219178082192, 0.12035163607442538), (9.013698630136986, 0.29232132809514655), (0.4986301369863014, 0.010112654495429734), (7.005479452054795, 0.22719320241315802), (0.038356164383561646, 0.0007646991087741478), (0.2493150684931507, 0.0049705442070322355), (15.016438356164384, 0.4869948934010632), (5.005479452054795, 0.16233163113368773), (6.005479452054795, 0.19476241677342288), (2.0027397260273974, 0.04900520080610018), (0.1643835616438356, 0.0032772818947464886), (0.37534246575342467, 0.007483126993004571), (0.07945205479452055, 0.0015840195824608175), (1.0027397260273974, 0.021745941528375817), (0.0027397260273972603, 5.462136491247727e-05), (0.038356164383561646, 0.0007646991087741478), (0.0958904109589041, 0.0019117477719354597), (0.16712328767123288, 0.0033319032596589786), (0.24383561643835616, 0.004861301477207332), (0.3315068493150685, 0.006609185154405447), (0.4246575342465753, 0.008524763182621142), (0.5260273972602739, 0.010708507016422118), (0.6328767123287671, 0.013072320187307725), (0.7424657534246575, 0.015562845572456315), (0.8602739726027397, 0.018314782762401338), (0.9835616438356164, 0.02127747420114762), (1.1095890410958904, 0.024393438684307774), (1.2410958904109588, 0.027739074736750656), (1.378082191780822, 0.03132635108054074), (1.5178082191780822, 0.03509278785195057), (1.663013698630137, 0.039121803520392455), (1.810958904109589, 0.043347185119044875), (1.9616438356164383, 0.04777560409650166), (2.117808219178082, 0.052497859441394144), (2.276712328767123, 0.05744162416550966), (2.441095890410959, 0.06270295197173452), (2.6082191780821917, 0.06820520612194185), (2.778082191780822, 0.07395587521526381), (2.9506849315068493, 0.0799625617455582), (3.126027397260274, 0.08623298168484468), (3.3068493150684932, 0.09287697560993077), (3.4904109589041097, 0.09980597423346552), (3.673972602739726, 0.10692055641473526), (3.863013698630137, 0.11444134121137865), (4.054794520547945, 0.1222719400833349), (4.252054794520548, 0.13053711501576684), (4.449315068493151, 0.13901593152638897), (4.64931506849315, 0.14783044386970526), (4.852054794520548, 0.15698948510403027), (5.057534246575343, 0.16401980901630409), (5.265753424657534, 0.1707725205467695), (5.476712328767123, 0.17761408354474098), (5.69041095890411, 0.18454449801021866), (5.906849315068493, 0.19156376394320246), (6.126027397260274, 0.1986718813436923), (6.347945205479452, 0.20586885021168827), (6.572602739726028, 0.21315467054719048), (6.7972602739726025, 0.22044049088269255), (7.027397260273973, 0.22790401415320696), (7.257534246575342, 0.2353675374237213), (7.493150684931507, 0.243008763629248), (7.728767123287671, 0.2506499898347746), (7.967123287671233, 0.25838006750780734), (8.208219178082192, 0.26619899664834623), (8.449315068493151, 0.27401792578888506), (8.695890410958905, 0.28201455786443624), (8.942465753424658, 0.29001118993998726), (9.191780821917808, 0.2980966734830445), (9.443835616438356, 0.306271008493608), (9.695890410958905, 0.3144453435041713), (9.953424657534246, 0.32279738144974696), (10.210958904109589, 0.3311494193953225), (10.471232876712328, 0.33959030880840424), (10.734246575342466, 0.34812004968899213), (10.997260273972604, 0.35664979056958007), (11.265753424657534, 0.36535723438518003), (11.534246575342467, 0.3740646782007803), (11.802739726027397, 0.38277212201638033), (12.076712328767123, 0.39165726876699264), (12.35068493150685, 0.4005424155176051), (12.627397260273973, 0.40951641373572356), (12.904109589041095, 0.418490411953842), (13.186301369863013, 0.42764211310697275), (13.468493150684932, 0.43679381426010355), (13.75068493150685, 0.4459455154132342), (14.038356164383561, 0.4552749195013772), (14.326027397260274, 0.46460432358952014), (14.616438356164384, 0.4740225791451692), (14.906849315068493, 0.48344083470081844), (15.2, 0.4929479417239735), (15.495890410958904, 0.5025439002146348), (15.794520547945206, 0.5122287101728025), (16.09315068493151, 0.5219135201309699), (16.394520547945206, 0.5316871815566434), (16.695890410958903, 0.541460842982317), (17.0, 0.5513233558754966), (17.306849315068494, 0.5612747202361826), (17.613698630136987, 0.5712260845968684), (17.923287671232877, 0.5812663004250603), (18.235616438356164, 0.5913953677207585), (18.54794520547945, 0.6015244350164565), (18.863013698630137, 0.6117423537796607), (19.18082191780822, 0.6220491240103712), (19.4986301369863, 0.6323558942410814), (19.81917808219178, 0.6427515159392978), (20.13972602739726, 0.6531471376375144), (20.46301369863014, 0.6636316108032371), (20.786301369863015, 0.6741160839689596), (21.115068493150684, 0.6847782600696943), (21.44109589041096, 0.6953515847029231), (21.77260273972603, 0.706102612271164), (22.104109589041094, 0.716853639839405), (22.435616438356163, 0.727604667407646), (22.77260273972603, 0.7385333979108991)]'
#print(len(creditCurveString))
#print(creditCurveString.find("Recovery_Rate="))
#print(type(creditCurveString.find("Recovery_Rate=")))
#print(creditCurveString.find(",Curve="))
#print(creditCurveString[creditCurveString.find("Recovery_Rate="),creditCurveString.find(",Curve=")])
#print(float(creditCurveString[creditCurveString.find("Recovery_Rate=") + 14:creditCurveString.find(",Curve=")]))
#print(type(creditCurveString).__name__)
#print(Ps_CustomCva.getLGDfromCreditCurveString(creditCurveString))


"""
from: AADataCreator
"""
"""
class SurvivalProbPriceFactor(YCPriceFactor):
    def getRate(self, date):
        survival_prob = self._irCurveInformation.SurvivalProbability(self._valuationDate, date)
        rate = math.fabs(math.log(survival_prob))
        return rate
"""


crb = acm.FCreditBalance['PsRvm_CrB_Cpy1']
ins = acm.FInstrument['Swap Example']

calcSpace = acm.FCalculationSpaceCollection().GetSpace('FTradeSheet', acm.GetDefaultContext())
#calcSpace = acm.FCalculationSpace().GetSpace(acm.FTradeSheet, acm.GetDefaultContext())
#topNode = calcSpace.InsertItem(crb)
#print(type(topNode))

trd = acm.FTrade[136]

#localFIrCurveInformation = calcSpace.CalculateValue(crb,"creditCurve")
CVA_LGD = calcSpace.CalculateValue(trd,"CVA LGD")
print(CVA_LGD)

insName = calcSpace.CalculateValue(trd,"Instrument Name")
print(insName)

creditCurve = calcSpace.CalculateValue(trd,"creditCurve")
print(type(creditCurve))


crb = acm.FCreditBalance['PsRvm_CrB_Cpy1']

print(crb.Trades()[0])
