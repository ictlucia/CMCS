#
# Front Arena exported extension module.
# source          ""
# timestamp (utc) "2024-09-13 03:56:01.5"
# ***** DO NOT EDIT! *****
#
name        "FLongformTradeConfirmationCustom_P2"
description "$Id$"

groups {
}

decls[FColumnDefinition] {
  "LongFormAccountName" ( "sheet columns.confirmationsheet" ) "";
  "LongFormAccountNumber" ( "sheet columns.confirmationsheet" ) "";
  "LongFormAccruedInterest" ( "sheet columns.confirmationsheet" ) "";
  "LongFormAfterTax" ( "sheet columns.confirmationsheet" ) "";
  "LongFormAllInPrice" ( "sheet columns.confirmationsheet" ) "";
  "LongformBeliJual" ( "sheet columns.confirmationsheet" ) "";
  "LongFormBeliJual" ( "sheet columns.confirmationsheet" ) "";
  "LongFormBidPrice" ( "sheet columns.confirmationsheet" ) "";
  "LongFormBoughtSold" ( "sheet columns.confirmationsheet" ) "";
  "LongFormBuyAmount" ( "sheet columns.confirmationsheet" ) "";
  "LongFormCouponInterest" ( "sheet columns.confirmationsheet" ) "";
  "LongFormCouponPayDate" ( "sheet columns.confirmationsheet" ) "";
  "LongFormCurrency" ( "sheet columns.confirmationsheet" "standard groupers.favorite groupers" ) "";
  "LongFormCurrency1" ( "sheet columns.confirmationsheet" ) "";
  "LongFormCurrency2" ( "sheet columns.confirmationsheet" ) "";
  "LongFormCurrencyPair" ( "sheet columns.confirmationsheet" ) "";
  "LongFormDayCount" ( "sheet columns.confirmationsheet" ) "";
  "LongFormDaysCoupon" ( "sheet columns.confirmationsheet" ) "";
  "LongFormDeliveryDate" ( "sheet columns.confirmationsheet" ) "";
  "LongFormDNDF1" ( "sheet columns.confirmationsheet" ) "";
  "LongFormDNDF2" ( "sheet columns.confirmationsheet" ) "";
  "LongFormDNDFAmountIDR" ( "sheet columns.confirmationsheet" ) "";
  "LongFormDNDFAmountUSD" ( "sheet columns.confirmationsheet" ) "";
  "LongFormDomesticCurrency" ( "sheet columns.confirmationsheet" ) "";
  "LongFormEndCashRepo" ( "sheet columns.confirmationsheet" ) "";
  "LongFormEndDate" ( "sheet columns.confirmationsheet" ) "";
  "LongFormEndDate_Eng" ( "sheet columns.confirmationsheet" ) "";
  "LongFormEndInterest" ( "sheet columns.confirmationsheet" ) "";
  "LongFormExpiryDay" ( "sheet columns.confirmationsheet" ) "";
  "LongFormFaceValue" ( "sheet columns.confirmationsheet" ) "";
  "LongFormFarSellAmount" ( "sheet columns.confirmationsheet" ) "";
  "LongFormFixedRate" ( "sheet columns.confirmationsheet" ) "";
  "LongFormFixingSource" ( "sheet columns.confirmationsheet" ) "";
  "LongFormFixingValue" ( "sheet columns.confirmationsheet" ) "";
  "LongFormFloatRate" ( "sheet columns.confirmationsheet" ) "";
  "LongFormFloatRateRef" ( "sheet columns.confirmationsheet" ) "";
  "LongFormFromTo" ( "sheet columns.confirmationsheet" ) "";
  "LongFormFXONominalCall" ( "sheet columns.confirmationsheet" ) "";
  "LongFormFXONominalPut" ( "sheet columns.confirmationsheet" ) "";
  "LongFormHaircut" ( "sheet columns.confirmationsheet" ) "";
  "LongFormHasilPajak" ( "sheet columns.confirmationsheet" ) "";
  "LongFormInstrument" ( "sheet columns.confirmationsheet" ) "";
  "LongFormInterestEndDate" ( "sheet columns.confirmationsheet" ) "";
  "LongFormInterestRateAtTradeTime" ( "sheet columns.confirmationsheet" ) "";
  "LongFormInterestRateFixed" ( "sheet columns.confirmationsheet" ) "";
  "LongFormInterestRateFloat" ( "sheet columns.confirmationsheet" ) "";
  "LongFormInterestStartDate" ( "sheet columns.confirmationsheet" ) "";
  "LongFormIsin" ( "sheet columns.confirmationsheet" ) "";
  "LongFormIssuer" ( "sheet columns.confirmationsheet" ) "";
  "LongFormLastCouponDate" ( "sheet columns.confirmationsheet" ) "";
  "LongFormLowerRange" ( "sheet columns.confirmationsheet" ) "";
  "LongFormMarketPrice" ( "sheet columns.confirmationsheet" ) "";
  "LongFormMMLDMaxYield" ( "sheet columns.confirmationsheet" ) "";
  "LongFormNetConsideration" ( "sheet columns.confirmationsheet" ) "";
  "LongFormNetProceed" ( "sheet columns.confirmationsheet" ) "";
  "LongFormNettingAmount" ( "sheet columns.confirmationsheet" ) "";
  "LongFormNettingAmountDNDF" ( "sheet columns.confirmationsheet" ) "";
  "LongFormNextCouponDate" ( "sheet columns.confirmationsheet" ) "";
  "LongFormNominalAmount" ( "sheet columns.confirmationsheet" ) "";
  "LongFormNominalEqvCCS1" ( "sheet columns.confirmationsheet" ) "";
  "LongFormNominalEqvCCS2" ( "sheet columns.confirmationsheet" ) "";
  "LongFormNominalInterestFixed" ( "sheet columns.confirmationsheet" ) "";
  "LongFormNominalInterestFloat" ( "sheet columns.confirmationsheet" ) "";
  "LongFormNominalLastLeg" ( "sheet columns.confirmationsheet" ) "";
  "LongFormNominalPenempatan" ( "sheet columns.confirmationsheet" ) "";
  "LongFormNominalPrincipalPay" ( "sheet columns.confirmationsheet" ) "";
  "LongFormNominalPrincipalReceive" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccount" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccount_BondRepo" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccount_CCS_CCY1" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccount_CCS_CCY2" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccount_CCS_IDR" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccount_CCS_USD" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccount_CouponBond" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccount_DNDF" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccount_FXCash" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccount_FXOption" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccount_IRS" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccount_Repo" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccountCorrBank_BondRepo" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccountName" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccountName_BondRepo" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccountName_CCS_CCY1" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccountName_CCS_CCY2" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccountName_CouponBond" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccountName_FXCash" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccountName_FXOption" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccountName_Repo" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccountNetworkAlias_CouponBond" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccountNumber" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccountNumber_BondRepo" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccountNumber_CCS_CCY1" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccountNumber_CCS_CCY2" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccountNumber_CCS_IDR" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccountNumber_CCS_USD" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccountNumber_CouponBond" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccountNumber_DNDF" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccountNumber_FXCash" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccountNumber_FXOption" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccountNumber_IRS" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccountNumber_Repo" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurCorrespondentBank" ( "sheet columns.confirmationsheet" ) "";
  "LongFormPayCurrency" ( "sheet columns.confirmationsheet" ) "";
  "LongFormPayCurrencyPrincipal" ( "sheet columns.confirmationsheet" ) "";
  "LongFormPayNominal" ( "sheet columns.confirmationsheet" ) "";
  "LongFormPayOffset" ( "sheet columns.confirmationsheet" ) "";
  "LongFormPayReceive" ( "sheet columns.confirmationsheet" ) "";
  "LongFormPremium" ( "sheet columns.confirmationsheet" ) "";
  "LongFormPrice" ( "sheet columns.confirmationsheet" ) "";
  "LongFormPrincipalAmount" ( "sheet columns.confirmationsheet" ) "";
  "LongFormProceed" ( "sheet columns.confirmationsheet" ) "";
  "LongFormQuantity" ( "sheet columns.confirmationsheet" ) "";
  "LongFormReceiveCurrency" ( "sheet columns.confirmationsheet" ) "";
  "LongFormReceiveCurrencyPrincipal" ( "sheet columns.confirmationsheet" ) "";
  "LongFormReceiveNominal" ( "sheet columns.confirmationsheet" ) "";
  "LongFormRefPrice" ( "sheet columns.confirmationsheet" ) "";
  "LongFormRekeningBeliBic" ( "sheet columns.confirmationsheet" ) "";
  "LongFormRekeningBeliNumber" ( "sheet columns.confirmationsheet" ) "";
  "LongFormRekeningJualBic" ( "sheet columns.confirmationsheet" ) "";
  "LongFormRekeningJualNumber" ( "sheet columns.confirmationsheet" ) "";
  "LongFormRollingPeriod" ( "sheet columns.confirmationsheet" ) "";
  "LongFormRollingPeriodBase" ( "sheet columns.confirmationsheet" ) "";
  "LongFormSecurityId" ( "sheet columns.confirmationsheet" ) "";
  "LongFormSellAmount" ( "sheet columns.confirmationsheet" ) "";
  "LongFormSettleInstruction" ( "sheet columns.confirmationsheet" ) "";
  "LongFormSettlement" ( "sheet columns.confirmationsheet" ) "";
  "LongFormSettlementDate" ( "sheet columns.confirmationsheet" ) "";
  "LongFormStrike" ( "sheet columns.confirmationsheet" ) "";
  "LongFormStrike2" ( "sheet columns.confirmationsheet" ) "";
  "LongFormSwift" ( "sheet columns.confirmationsheet" ) "";
  "LongFormTax" ( "sheet columns.confirmationsheet" ) "";
  "LongFormTest" ( "sheet columns.confirmationsheet" ) "";
  "LongFormTotalNominalPay" ( "sheet columns.confirmationsheet" ) "";
  "LongFormTotalNominalReceive" ( "sheet columns.confirmationsheet" ) "";
  "LongFormTotalProceeds" ( "sheet columns.confirmationsheet" ) "";
  "LongFormTradeDate" ( "sheet columns.confirmationsheet" ) "";
  "LongFormTradeDate_Eng" ( "sheet columns.confirmationsheet" ) "";
  "LongFormTraderSpotPrice" ( "sheet columns.confirmationsheet" ) "";
  "LongFormTradeTime" ( "sheet columns.confirmationsheet" ) "";
  "LongFormUnexecutedNominal" ( "sheet columns.confirmationsheet" ) "";
  "LongFormUpperRange" ( "sheet columns.confirmationsheet" ) "";
  "LongFormUSDRate" ( "sheet columns.confirmationsheet" ) "";
  "LongFormValueDate" ( "sheet columns.confirmationsheet" ) "";
  "LongFormValueDate_Eng" ( "sheet columns.confirmationsheet" ) "";
  "LongFormValueDay" ( "sheet columns.confirmationsheet" ) "";
  "LongFormWHT" ( "sheet columns.confirmationsheet" ) "";
  "LongFormWHTCurrency" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYield" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccount" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccount_BondRepo" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccount_CCS_CCY1" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccount_CCS_CCY2" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccount_CCS_IDR" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccount_CCS_USD" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccount_CouponBond" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccount_DNDF" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccount_FXCash" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccount_FXOption" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccount_IRS" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccount_Repo" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccountCorrBank_BondRepo" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccountName" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccountName_BondRepo" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccountName_CCS_CCY1" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccountName_CCS_CCY2" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccountName_CouponBond" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccountName_FXCash" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccountName_FXOption" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccountName_Repo" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccountNumber" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccountNumber_BondRepo" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccountNumber_CCS_CCY1" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccountNumber_CCS_CCY2" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccountNumber_CCS_IDR" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccountNumber_CCS_USD" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccountNumber_CouponBond" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccountNumber_DNDF" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccountNumber_FXCash" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccountNumber_FXOption" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccountNumber_IRS" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccountNumber_Repo" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourCorrespondentBank" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormAccountName" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormAccountNumber" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormAccruedInterest" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormAfterTax" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormAllInPrice" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormBeliJual" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormBidPrice" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormBoughtSold" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormBuyAmount" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormCouponInterest" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormCouponPayDate" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormCurrency" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormCurrency1" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormCurrency2" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormCurrencyPair" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormCurrencyUnderlying" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormDayCount" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormDaysCoupon" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormDeliveryDate" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormDiary" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormDNDF1" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormDNDF2" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormDNDFAmountIDR" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormDNDFAmountUSD" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormDomesticCurrency" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormEndCashRepo" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormEndDate" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormEndDate_Eng" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormEndInterest" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormExpiryDay" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormFaceValue" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormFarSellAmount" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormFixedRate" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormFixingSource" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormFixingValue" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormFloatRate" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormFloatRateRef" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormFromTo" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormFXONominalCall" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormFXONominalPut" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormHaircut" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormHasilPajak" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormInstrument" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormInterestEndDate" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormInterestRateAtTradeTime" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormInterestRateFixed" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormInterestRateFloat" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormInterestStartDate" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormIsin" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormIssuer" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormLastCouponDate" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormLowerRange" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormMarketPrice" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormMaturityDate" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormMMLDMaxYield" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormNetConsideration" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormNetProceed" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormNettingAmount" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormNettingAmountDNDF" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormNextCouponDate" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormNominalAmount" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormNominalEqvCCS1" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormNominalEqvCCS2" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormNominalInterestFixed" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormNominalInterestFloat" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormNominalLastLeg" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormNominalPenempatan" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormNominalPrincipalPay" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormNominalPrincipalReceive" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormOurAccount" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormOurAccount_BondRepo" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormOurAccount_CCS_CCY1" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormOurAccount_CCS_CCY2" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormOurAccount_CCS_IDR" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormOurAccount_CCS_USD" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormOurAccount_CouponBond" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormOurAccount_DNDF" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormOurAccount_FXCash" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormOurAccount_FXOption" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormOurAccount_IRS" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormOurAccount_Repo" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormOurAccountCorrBank_BondRepo" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormOurAccountName" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormOurAccountName_BondRepo" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormOurAccountName_CCS_CCY1" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormOurAccountName_CCS_CCY2" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormOurAccountName_CouponBond" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormOurAccountName_FXCash" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormOurAccountName_FXOption" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormOurAccountName_Repo" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormOurAccountNetworkAlias_CouponBond" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormOurAccountNumber" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormOurAccountNumber_BondRepo" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormOurAccountNumber_CCS_CCY1" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormOurAccountNumber_CCS_CCY2" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormOurAccountNumber_CCS_IDR" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormOurAccountNumber_CCS_USD" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormOurAccountNumber_CouponBond" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormOurAccountNumber_DNDF" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormOurAccountNumber_FXCash" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormOurAccountNumber_FXOption" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormOurAccountNumber_IRS" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormOurAccountNumber_Repo" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormOurCorrespondentBank" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormOurReference" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormPayCurrency" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormPayCurrencyPrincipal" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormPayNominal" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormPayOffset" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormPayReceive" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormPremium" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormPrice" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormPrincipalAmount" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormProceed" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormPurchasedSold" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormQuantity" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormReceiveCurrency" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormReceiveCurrencyPrincipal" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormReceiveNominal" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormRefPrice" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormRekeningBeliBic" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormRekeningBeliNumber" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormRekeningJualBic" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormRekeningJualNumber" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormRepoCashAmount" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormRepoEndCash" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormRepoInterest" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormRepoRate" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormRollingPeriod" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormRollingPeriodBase" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormSecondNominalNearLeg" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormSecurityId" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormSellAmount" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormSettleInstruction" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormSettlement" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormSettlementDate" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormStrike" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormStrike2" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormSwift" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormTax" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormTest" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormTotalAmount" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormTotalNominalPay" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormTotalNominalReceive" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormTotalProceeds" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormTradeDate" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormTradeDate_Eng" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormTraderSpotPrice" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormTradeTime" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormType" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormUnexecutedNominal" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormUpperRange" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormUSDRate" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormValueDate" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormValueDate_Eng" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormValueDay" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormValueEndDate" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormValueStartDate" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormWHT" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormWHTCurrency" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormYield" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormYourAccount" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormYourAccount_BondRepo" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormYourAccount_CCS_CCY1" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormYourAccount_CCS_CCY2" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormYourAccount_CCS_IDR" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormYourAccount_CCS_USD" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormYourAccount_CouponBond" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormYourAccount_DNDF" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormYourAccount_FXCash" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormYourAccount_FXOption" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormYourAccount_IRS" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormYourAccount_Repo" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormYourAccountCorrBank_BondRepo" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormYourAccountName" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormYourAccountName_BondRepo" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormYourAccountName_CCS_CCY1" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormYourAccountName_CCS_CCY2" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormYourAccountName_CouponBond" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormYourAccountName_FXCash" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormYourAccountName_FXOption" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormYourAccountName_Repo" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormYourAccountNumber" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormYourAccountNumber_BondRepo" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormYourAccountNumber_CCS_CCY1" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormYourAccountNumber_CCS_CCY2" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormYourAccountNumber_CCS_IDR" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormYourAccountNumber_CCS_USD" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormYourAccountNumber_CouponBond" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormYourAccountNumber_DNDF" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormYourAccountNumber_FXCash" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormYourAccountNumber_FXOption" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormYourAccountNumber_IRS" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormYourAccountNumber_Repo" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormYourCorrespondentBank" ( "sheet columns.confirmationsheet" ) "";
}

clx FTradingSheet [FColumnDefinition] {
  P2_LongFormAccountName =
  Description=The Account Name for the counterparty of this confirmation trade.
  ExtensionAttribute=P2_LongFormAccountName
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormAccountName
  Name=P2_LongFormAccountName


  P2_LongFormAccountNumber =
  Description=The Account Number for the counterparty of this confirmation trade.
  ExtensionAttribute=P2_LongFormAccountNumber
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormAccountNumber
  Name=P2_LongFormAccountNumber


  P2_LongFormAccruedInterest =
  Description=The accrued interest for this confirmation trade.
  ExtensionAttribute=P2_LongFormAccruedInterest
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormAccruedInterest
  Name=P2_LongFormAccruedInterest
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormAfterTax =
  Description=The after tax for this confirmation trade.
  ExtensionAttribute=P2_LongFormAfterTax
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormAfterTax
  Name=P2_LongFormAfterTax
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormAllInPrice =
  Description=The all in price for this confirmation trade.
  ExtensionAttribute=P2_LongFormAllInPrice
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormAllInPrice
  Name=P2_LongFormAllInPrice
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormBeliJual =
  Description=The "beli" or "jual" for this confirmation trade.
  ExtensionAttribute=P2_LongFormBeliJual
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormBeliJual
  Name=P2_LongFormBeliJual
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormBidPrice =
  Description=The bid price for this confirmation trade.
  ExtensionAttribute=P2_LongFormBidPrice
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormBidPrice
  Name=P2_LongFormBidPrice
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormBoughtSold =
  Description=The bought or sold for this confirmation trade.
  ExtensionAttribute=P2_LongFormBoughtSold
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormBoughtSold
  Name=P2_LongFormBoughtSold
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormBuyAmount =
  Description=The buy amount for this confirmation trade.
  ExtensionAttribute=P2_LongFormBuyAmount
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormBuyAmount
  Name=P2_LongFormBuyAmount
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormCollateralPrice =
  Description=The Collateral Repo Price of Repo Trx.
  ExtensionAttribute=P2_LongFormCollateralPrice
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormCollateralPrice
  Name=P2_LongFormCollateralPrice
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormCouponInterest =
  Description=The coupon interest for this confirmation trade.
  ExtensionAttribute=P2_LongFormCouponInterest
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormCouponInterest
  Name=P2_LongFormCouponInterest
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormCouponPayDate =
  Description=The coupon pay date for this confirmation trade.
  ExtensionAttribute=P2_LongFormCouponPayDate
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormPayDate
  Name=P2_LongFormPayDate
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormCurrency =
  Description=The currency for this confirmation trade.
  ExtensionAttribute=P2_LongFormCurrency
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormCurrency
  Name=P2_LongFormCurrency
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormCurrency1 =
  Description=The first currency for this confirmation trade.
  ExtensionAttribute=P2_LongFormCurrency1
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormCurrency1
  Name=P2_LongFormCurrency1
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormCurrency2 =
  Description=The second currency for this confirmation trade.
  ExtensionAttribute=P2_LongFormCurrency2
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormCurrency2
  Name=P2_LongFormCurrency2
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormCurrencyPair =
  Description=The currency pair for this confirmation trade.
  ExtensionAttribute=P2_LongFormCurrencyPair
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormCurrencyPair
  Name=P2_LongFormCurrencyPair
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormCurrencyUnderlying =
  Description=The collateral instrument currency from this confirmation trade.
  ExtensionAttribute=P2_LongFormCurrencyUnderlying
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormCurrencyUnderlying
  Name=P2_LongFormCurrencyUnderlying
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormDayCount =
  Description=The day count method for this confirmation instrument trade.
  ExtensionAttribute=P2_LongFormDayCount
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormDayCount
  Name=P2_LongFormDayCount
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormDaysCoupon =
  Description=The days coupon for this confirmation trade.
  ExtensionAttribute=P2_LongFormDaysCoupon
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormDaysCoupon
  Name=P2_LongFormDaysCoupon
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormDeliveryDate =
  Description=The instrument delivery date for this confirmation trade.
  ExtensionAttribute=P2_LongFormDeliveryDate
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormDeliveryDate
  Name=P2_LongFormDeliveryDate
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormDiary =
  Description=The diary for this confirmation trade.
  ExtensionAttribute=P2_LongFormDiary
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormDiary
  Name=P2_LongFormDiary


  P2_LongFormDNDF1 =
  Description=The DNDF 1 for this confirmation trade.
  ExtensionAttribute=P2_LongFormDNDF1
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormDNDF1
  Name=P2_LongFormDNDF1
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormDNDF2 =
  Description=The DNDF 2 for this confirmation trade.
  ExtensionAttribute=P2_LongFormDNDF2
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormDNDF2
  Name=P2_LongFormDNDF2
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormDNDFAmountIDR =
  Description=The DNDF IDR Amount for this confirmation trade.
  ExtensionAttribute=P2_LongFormDNDFAmountIDR
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormDNDFAmountIDR
  Name=P2_LongFormDNDFAmountIDR
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormDNDFAmountUSD =
  Description=The DNDF USD Amount for this confirmation trade.
  ExtensionAttribute=P2_LongFormDNDFAmountUSD
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormDNDFAmountUSD
  Name=P2_LongFormDNDFAmountUSD
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormDomesticCurrency =
  Description=Currency of Domestic
  ExtensionAttribute=P2_LongFormDomesticCurrency
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormDomesticCurrency
  Name=P2_LongFormDomesticCurrency
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormEndCashRepo =
  Description=The end cash for this confirmation trade repo.
  ExtensionAttribute=P2_LongFormEndCashRepo
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormEndCashRepo
  Name=P2_LongFormEndCashRepo
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormEndDate =
  Description=The end date for this confirmation trade.
  ExtensionAttribute=P2_LongFormEndDate
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormEndDate
  Name=P2_LongFormEndDate
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormEndDate_Eng =
  Description=The end date for this confirmation trade in English.
  ExtensionAttribute=P2_LongFormEndDate_Eng
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormEndDate_Eng
  Name=P2_LongFormEndDate_Eng
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormEndInterest =
  Description=
  ExtensionAttribute=P2_LongFormEndInterest
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormEndInterest
  Name=P2_LongFormEndInterest
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormExpiryDay =
  Description=The expiry for this confirmation trade instrument.
  ExtensionAttribute=P2_LongFormExpiryDayExtAttr
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormExpiryDay
  Name=P2_LongFormExpiryDay
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormFaceValue =
  Description=The face value for this confirmation trade.
  ExtensionAttribute=P2_LongFormFaceValue
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormFaceValue
  Name=P2_LongFormFaceValue
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormFarSellAmount =
  Description=The far sell amount for this confirmation trade.
  ExtensionAttribute=P2_LongFormFarSellAmount
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormFarSellAmount
  Name=P2_LongFormFarSellAmount
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormFixedRate =
  Description=The Fixed Rate for this confirmation trade.
  ExtensionAttribute=P2_LongFormFixedRate
  Format=VeryDetailedShowZeroHideNaN
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormFixedRate
  Name=P2_LongFormFixedRate
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormFixingSource =
  Description=The fixing source for this confirmation trade.
  ExtensionAttribute=P2_LongFormFixingSource
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormFixingSource
  Name=P2_LongFormFixingSource
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormFixingValue =
  Description=The fixing value for this confirmation trade.
  ExtensionAttribute=P2_LongFormFixingValue
  Format=SixDecimalDetailed
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormFixingValue
  Name=P2_LongFormFixingValue
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormFloatRate =
  Description=The Float Rate for this confirmation trade.
  ExtensionAttribute=P2_LongFormFloatRate
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormFloatRate
  Name=P2_LongFormFloatRate
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormFloatRateRef =
  Description=The Float Rate Ref for this confirmation trade.
  ExtensionAttribute=P2_LongFormFloatRateRef
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormFloatRateRef
  Name=P2_LongFormFloatRateRef
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormFromTo =
  Description=From or To description for P2_LongForm.
  ExtensionAttribute=P2_LongFormFromTo
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormFromTo
  Name=P2_LongFormFromTo
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormFXONominalCall =
  Description=The FXO Nominal Call (Nominal Amount Foreign) for this confirmation trade.
  ExtensionAttribute=P2_LongFormFXONominalCall
  Format=Imprecise
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormFXONominalCall
  Name=P2_LongFormFXONominalCall
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormFXONominalPut =
  Description=The FXO Nominal Put (Nominal Amount Domestic) for this confirmation trade.
  ExtensionAttribute=P2_LongFormFXONominalPut
  Format=Imprecise
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormFXONominalPut
  Name=P2_LongFormFXONominalPut
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormHaircut =
  Description=The Haircut for this confirmation trade.
  ExtensionAttribute=P2_LongFormHaircut
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormHaircut
  Name=P2_LongFormHaircut
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormHasilPajak =
  Description=LongFormEndInterest - LongFromWHT
  ExtensionAttribute=P2_LongFormHasilPajak
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormHasilPajak
  Name=P2_LongFormHasilPajak
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormInstrument =
  Description=The instrument for this confirmation trade.
  ExtensionAttribute=P2_LongFormInstrument
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormInstrument
  Name=P2_LongFormInstrument
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormInterestEndDate =
  Description=The interest end date for this confirmation trade.
  ExtensionAttribute=P2_LongFormInterestEndDate
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormInterestEndDate
  Name=P2_LongFormInterestEndDate
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormInterestRateAtTradeTime =
  Description=The interest rate at trade time for this confirmation trade.
  ExtensionAttribute=P2_LongFormInterestRateAtTradeTime
  Format=SixDecimalDetailedPercent
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormInterestRateAtTradeTime
  Name=P2_LongFormInterestRateAtTradeTime
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormInterestRateFixed =
  Description=The interest rate fixed for this confirmation trade.
  ExtensionAttribute=P2_LongFormInterestRateFixed
  GroupLabel=LongformTradeConfirmation_P2
  Name=P2_LongFormInterestRateFixed
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormInterestRateFloat =
  Description=The interest rate float for this confirmation trade.
  ExtensionAttribute=P2_LongFormInterestRateFloat
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormInterestRateFloat
  Name=P2_LongFormInterestRateFloat
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormInterestStartDate =
  Description=The interest start date for this confirmation trade.
  ExtensionAttribute=P2_LongFormInterestStartDate
  GroupLabel=LongformTradeConfirmation_P2
  Name=P2_LongFormInterestStartDate
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormIsin =
  Description=The ISIN code of Collateral Repo Instrument of REPO trx.
  ExtensionAttribute=P2_LongFormIsin
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormIsin
  Name=P2_LongFormIsin
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormIssuer =
  Description=The Issuer Name of Collateral Repo Instrument of REPO trx.
  ExtensionAttribute=P2_LongFormIssuer
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormIssuer
  Name=P2_LongFormIssuer
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormLastCouponDate =
  Description=The Last Coupon Date for this confirmation trade.
  ExtensionAttribute=P2_LongFormLastCouponDate
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormLastCouponDate
  Name=P2_LongFormLastCouponDate
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormLowerRange =
  Description=The lower range for this confirmation trade.
  ExtensionAttribute=P2_LongFormLowerRange
  Format=ThreeDecimalDetailedShowZero
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormLowerRange
  Name=P2_LongFormLowerRange
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormMarketPrice =
  Description=The market price for this confirmation trade.
  ExtensionAttribute=P2_LongFormMarketPrice
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormMarketPrice
  Name=P2_LongFormMarketPrice
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormMaturityDate =
  Description=The Maturity or End Date of Collateral Repo Instrument of REPO trx.
  ExtensionAttribute=P2_LongFormMaturityDate
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormMaturityDate
  Name=P2_LongFormMaturityDate
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormMMLDMaxYield =
  Description=The maximum yield for MMLD in this confirmation trade.
  ExtensionAttribute=P2_LongFormMMLDMaxYield
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormMMLDMaxYield
  Name=P2_LongFormMMLDMaxYield
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormNetConsideration =
  Description=The net consideration for this confirmation trade.
  ExtensionAttribute=P2_LongFormNetConsideration
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormNetConsideration
  Name=P2_LongFormNetConsideration
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormNetProceed =
  Description=The net proceed for this confirmation trade.
  ExtensionAttribute=P2_LongFormNetProceed
  Format=Detailed
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormNetProceed
  Name=P2_LongFormNetProceed
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormNettingAmount =
  Description=The Nominal Interest Fixed - Nominal Interest Float for this confirmation trade.
  ExtensionAttribute=P2_LongFormNettingAmount
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormNettingAmount
  Name=P2_LongFormNettingAmount
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormNettingAmountDNDF =
  Description=The DNDF 1 - DNDF 2 for this confirmation trade.
  ExtensionAttribute=P2_LongFormNettingAmountDNDF
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormNettingAmountDNDF
  Name=P2_LongFormNettingAmountDNDF
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormNextCouponDate =
  Description=The Next Coupon Date for this confirmation trade.
  ExtensionAttribute=P2_LongFormNextCouponDate
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormNextCouponDate
  Name=P2_LongFormNextCouponDate
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormNominalAmount =
  Description=The Nominal Amount or Face Value of Collateral Repo Trx.
  ExtensionAttribute=P2_LongFormNominalAmount
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormNominalAmount
  Name=P2_LongFormNominalAmount
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormNominalEqvCCS1 =
  Description=The nominal equivalent 1 for CCS in this confirmation trade.
  ExtensionAttribute=P2_LongFormNominalEqvCCS1
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormNominalEqvCCS1
  Name=P2_LongFormNominalEqvCCS1
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormNominalEqvCCS2 =
  Description=The nominal equivalent 2 for CCS in this confirmation trade.
  ExtensionAttribute=P2_LongFormNominalEqvCCS2
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormNominalEqvCCS2
  Name=P2_LongFormNominalEqvCCS2
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormNominalInterestFixed =
  Description=The nominal interest fixed for this confirmation trade.
  ExtensionAttribute=P2_LongFormNominalInterestFixed
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormNominalInterestFixed
  Name=P2_LongFormNominalInterestFixed
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormNominalInterestFloat =
  Description=The nominal interest float for this confirmation trade.
  ExtensionAttribute=P2_LongFormNominalInterestFloat
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormNominalInterestFloat
  Name=P2_LongFormNominalInterestFloat
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormNominalLastLeg =
  Description=The last leg nominal amount (equals to face value) for this confirmation trade.
  ExtensionAttribute=P2_LongFormNominalLastLeg
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormNominalLastLeg
  Name=P2_LongFormNominalLastLeg
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormNominalPenempatan =
  Description=The plaecement nominal for this confirmation trade.
  ExtensionAttribute=P2_LongFormNominalPenempatan
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormNominalPenempatan
  Name=P2_LongFormNominalPenempatan
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormNominalPrincipalPay =
  Description=Nearest projected value where the type is Fixed Amount.
  ExtensionAttribute=P2_LongFormNominalPrincipalPay
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormNominalPrincipalPay
  Name=P2_LongFormNominalPrincipalPay
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormNominalPrincipalReceive =
  Description=Nearest projected value where the type is Float Amount.
  ExtensionAttribute=P2_LongFormNominalPrincipalReceive
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormNominalPrincipalReceive
  Name=P2_LongFormNominalPrincipalReceive
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormOurAccount =
  Description=Our Account (acq)
  ExtensionAttribute=P2_LongFormOurAccount
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormOurAccount
  Name=P2_LongFormOurAccount
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormOurAccount_BondRepo =
  Description=Our Account (acq) for Bond and Repo
  ExtensionAttribute=P2_LongFormOurAccount_BondRepo
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormOurAccount_BondRepo
  Name=P2_LongFormOurAccount_BondRepo


  P2_LongFormOurAccount_CCS_CCY1 =
  Description=Our Account (acq) for CCY1 CCS
  ExtensionAttribute=P2_LongFormOurAccount_CCS_CCY1
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormOurAccount_CCS_CCY1
  Name=P2_LongFormOurAccount_CCS_CCY1


  P2_LongFormOurAccount_CCS_CCY2 =
  Description=Our Account (acq) for CCY2 CCS
  ExtensionAttribute=P2_LongFormOurAccount_CCS_CCY2
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormOurAccount_CCS_CCY2
  Name=P2_LongFormOurAccount_CCS_CCY2


  P2_LongFormOurAccount_CCS_IDR =
  Description=Our Account (acq) for IDR CCS
  ExtensionAttribute=P2_LongFormOurAccount_CCS_IDR
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormOurAccount_CCS_IDR
  Name=P2_LongFormOurAccount_CCS_IDR


  P2_LongFormOurAccount_CCS_USD =
  Description=Our Account (acq) for USD CCS
  ExtensionAttribute=P2_LongFormOurAccount_CCS_USD
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormOurAccount_CCS_USD
  Name=P2_LongFormOurAccount_CCS_USD


  P2_LongFormOurAccount_CouponBond =
  Description=Our Account (acq) for Coupon Bond
  ExtensionAttribute=P2_LongFormOurAccount_CouponBond
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormOurAccount_CouponBond
  Name=P2_LongFormOurAccount_CouponBond


  P2_LongFormOurAccount_DNDF =
  Description=Our Account (acq) for DNDF
  ExtensionAttribute=P2_LongFormOurAccount_DNDF
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormOurAccount_DNDF
  Name=P2_LongFormOurAccount_DNDF


  P2_LongFormOurAccount_FXCash =
  Description=Our Account (acq) for FX Cash
  ExtensionAttribute=P2_LongFormOurAccount_FXCash
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormOurAccount_FXCash
  Name=P2_LongFormOurAccount_FXCash
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormOurAccount_FXOption =
  Description=Our Account (acq) for FX Option
  ExtensionAttribute=P2_LongFormOurAccount_FXOption
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormOurAccount_FXOption
  Name=P2_LongFormOurAccount_FXOption
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormOurAccount_IRS =
  Description=Our Account (acq) for IRS
  ExtensionAttribute=P2_LongFormOurAccount_IRS
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormOurAccount_IRS
  Name=P2_LongFormOurAccount_IRS


  P2_LongFormOurAccount_Repo =
  Description=Our Account (acq) for Repo
  ExtensionAttribute=P2_LongFormOurAccount_Repo
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=P2_LongFormOurAccount_Repo
  Name=P2_LongFormOurAccount_Repo
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormOurAccountCorrBank_BondRepo =
  Description=Our Account (acq) correspondent bank for Bond and Repo
  ExtensionAttribute=P2_LongFormOurAccountCorrBank_BondRepo
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormOurAccountCorrBank_BondRepo
  Name=P2_LongFormOurAccountCorrBank_BondRepo


  P2_LongFormOurAccountName =
  Description=Our Account (acq) name
  ExtensionAttribute=P2_LongFormOurAccountName
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormOurAccountName
  Name=P2_LongFormOurAccountName
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormOurAccountName_BondRepo =
  Description=Our Account (acq) name for Bond and Repo
  ExtensionAttribute=P2_LongFormOurAccountName_BondRepo
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormOurAccountName_BondRepo
  Name=P2_LongFormOurAccountName_BondRepo


  P2_LongFormOurAccountName_CCS_CCY1 =
  Description=Our Account (acq) name for CCS CCY 1
  ExtensionAttribute=P2_LongFormOurAccountName_CCS_CCY1
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormOurAccountName_CCS_CCY1
  Name=P2_LongFormOurAccountName_CCS_CCY1


  P2_LongFormOurAccountName_CCS_CCY2 =
  Description=Our Account (acq) name for CCS CCY 2
  ExtensionAttribute=P2_LongFormOurAccountName_CCS_CCY2
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormOurAccountName_CCS_CCY2
  Name=P2_LongFormOurAccountName_CCS_CCY2


  P2_LongFormOurAccountName_CouponBond =
  Description=Our Account (acq) name for Coupon Bond
  ExtensionAttribute=P2_LongFormOurAccountName_CouponBond
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormOurAccountName_CouponBond
  Name=P2_LongFormOurAccountName_CouponBond


  P2_LongFormOurAccountName_FXCash =
  Description=Our Account (acq) name for FX Cash
  ExtensionAttribute=P2_LongFormOurAccountName_FXCash
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormOurAccountName_FXCash
  Name=P2_LongFormOurAccountName_FXCash
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormOurAccountName_FXOption =
  Description=Our Account (acq) name for FX Option
  ExtensionAttribute=P2_LongFormOurAccountName_FXOption
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormOurAccountName_FXOption
  Name=P2_LongFormOurAccountName_FXOption
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormOurAccountName_Repo =
  Description=Our Account (acq) name for Repo
  ExtensionAttribute=P2_LongFormOurAccountName_Repo
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormOurAccountName_Repo
  Name=P2_LongFormOurAccountName_Repo
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormOurAccountNetworkAlias_CouponBond =
  Description=Our Account (acq) network alias for Coupon Bond
  ExtensionAttribute=P2_LongFormOurAccountNetworkAlias_CouponBond
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormNetworkAlias
  Name=P2_LongFormNetworkAlias


  P2_LongFormOurAccountNumber =
  Description=Our Account (acq) number
  ExtensionAttribute=P2_LongFormOurAccountNumber
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormOurAccountNumber
  Name=P2_LongFormOurAccountNumber
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormOurAccountNumber_BondRepo =
  Description=Our Account (acq) number for Bond and Repo
  ExtensionAttribute=P2_LongFormOurAccountNumber_BondRepo
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormOurAccountNumber_BondRepo
  Name=P2_LongFormOurAccountNumber_BondRepo


  P2_LongFormOurAccountNumber_CCS_CCY1 =
  Description=Our Account (acq) number for CCY1 CCS
  ExtensionAttribute=P2_LongFormOurAccountNumber_CCS_CCY1
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormOurAccountNumber_CCS_CCY1
  Name=P2_LongFormOurAccountNumber_CCS_CCY1


  P2_LongFormOurAccountNumber_CCS_CCY2 =
  Description=Our Account (acq) number for CCY2 CCS
  ExtensionAttribute=P2_LongFormOurAccountNumber_CCS_CCY2
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormOurAccountNumber_CCS_CCY2
  Name=P2_LongFormOurAccountNumber_CCS_CCY2


  P2_LongFormOurAccountNumber_CCS_IDR =
  Description=Our Account (acq) number for IDR CCS
  ExtensionAttribute=P2_LongFormOurAccountNumber_CCS_IDR
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormOurAccountNumber_CCS_IDR
  Name=P2_LongFormOurAccountNumber_CCS_IDR


  P2_LongFormOurAccountNumber_CCS_USD =
  Description=Our Account (acq) number for USD CCS
  ExtensionAttribute=P2_LongFormOurAccountNumber_CCS_USD
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormOurAccountNumber_CCS_USD
  Name=P2_LongFormOurAccountNumber_CCS_USD


  P2_LongFormOurAccountNumber_CouponBond =
  Description=Our Account (acq) number for Coupon Bond
  ExtensionAttribute=P2_LongFormOurAccountNumber_CouponBond
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormOurAccountNumber_CouponBond
  Name=P2_LongFormOurAccountNumber_CouponBond


  P2_LongFormOurAccountNumber_DNDF =
  Description=Our Account (acq) number for DNDF
  ExtensionAttribute=P2_LongFormOurAccountNumber_DNDF
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormOurAccountNumber_DNDF
  Name=P2_LongFormOurAccountNumber_DNDF


  P2_LongFormOurAccountNumber_FXCash =
  Description=Our Account (acq) number for FX Cash
  ExtensionAttribute=P2_LongFormOurAccountNumber_FXCash
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormOurAccountNumber_FXCash
  Name=P2_LongFormOurAccountNumber_FXCash
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormOurAccountNumber_FXOption =
  Description=Our Account (acq) number for FX Option
  ExtensionAttribute=P2_LongFormOurAccountNumber_FXOption
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormOurAccountNumber_FXOption
  Name=P2_LongFormOurAccountNumber_FXOption
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormOurAccountNumber_IRS =
  Description=Our Account (acq) number for IRS
  ExtensionAttribute=P2_LongFormOurAccountNumber_IRS
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormOurAccountNumber_IRS
  Name=P2_LongFormOurAccountNumber_IRS


  P2_LongFormOurAccountNumber_Repo =
  Description=Our Account (acq) number for Repo
  ExtensionAttribute=P2_LongFormOurAccountNumber_Repo
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormOurAccountNumber_Repo
  Name=P2_LongFormOurAccountNumber_Repo
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormOurCorrespondentBank =
  Description=Your Account (Cpty)
  ExtensionAttribute=P2_LongFormOurCorrespondentBank
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormOurCorrespondentBank
  Name=P2_LongFormOurCorrespondentBank
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormOurReference =
  Description=The Trade ID of Collateral Repo Trx.
  ExtensionAttribute=P2_LongFormOurReference
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormOurReference
  Name=P2_LongFormOurReference
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormPayCurrency =
  Description=The pay currency for CCS in this confirmation trade.
  ExtensionAttribute=P2_LongFormPayCurrency
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormPayCurrency
  Name=P2_LongFormPayCurrency


  P2_LongFormPayCurrencyPrincipal =
  Description=The pay currency for CCS in this confirmation trade.
  ExtensionAttribute=P2_LongFormPayCurrencyPrincipal
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormPayCurrencyP
  Name=P2_LongFormPayCurrencyP


  P2_LongFormPayNominal =
  Description=The pay amount for CCS in this confirmation trade.
  ExtensionAttribute=P2_LongFormPayNominal
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormPayNominal
  Name=P2_LongFormPayNominal


  P2_LongFormPayOffset =
  Description=The pay offset for this confirmation trade.
  ExtensionAttribute=P2_LongFormPayOffset
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormPayOffset
  Name=P2_LongFormPayOffset
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormPayReceive =
  Description=The pay or receive indicator for this confirmation trade.
  ExtensionAttribute=P2_LongFormPayReceive
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormPayReceive
  Name=P2_LongFormPayReceive
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormPremium =
  Description=The premium for this confirmation trade.
  ExtensionAttribute=P2_LongFormPremium
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormPremium
  Name=P2_LongFormPremium
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormPrice =
  Description=The price for this confirmation trade.
  ExtensionAttribute=P2_LongFormPrice
  Format=SixDecimalDetailed
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormPrice
  Name=P2_LongFormPrice
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormPrincipalAmount =
  Description=The face value multiplied by price.
  ExtensionAttribute=P2_LongFormPrincipalAmount
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormPrincipalAmount
  Name=P2_LongFormPrincipalAmount
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormProceed =
  Description=The proceed for this confirmation trade.
  ExtensionAttribute=P2_LongFormProceed
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormProceed
  Name=P2_LongFormProceed
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormPurchasedSold =
  Description=The purchased or sold for this confirmation trade.
  ExtensionAttribute=P2_LongFormPurchasedSold
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormPurchaseSold
  Name=P2_LongFormPurchasedSold
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormQuantity =
  Description=The quantity for this confirmation trade.
  ExtensionAttribute=P2_LongFormQuantity
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormQuantity
  Name=P2_LongFormQuantity
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormReceiveCurrency =
  Description=The receive currency for CCS in this confirmation trade.
  ExtensionAttribute=P2_LongFormReceiveCurrency
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormReceiveCurrency
  Name=P2_LongFormReceiveCurrency


  P2_LongFormReceiveCurrencyPrincipal =
  Description=The pay currency for CCS in this confirmation trade.
  ExtensionAttribute=P2_LongFormReceiveCurrencyPrincipal
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormReceiveCurrencyP
  Name=P2_LongFormReceiveCurrencyP


  P2_LongFormReceiveNominal =
  Description=The receive amount for CCS in this confirmation trade.
  ExtensionAttribute=P2_LongFormReceiveNominal
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormReceiveNominal
  Name=P2_LongFormReceiveNominal


  P2_LongFormRefPrice =
  Description=The reference price for this confirmation trade.
  ExtensionAttribute=P2_LongFormRefPrice
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormRefPrice
  Name=P2_LongFormRefPrice
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormRekeningBeliBic =
  Description=The Bic of counterparty account when the projected value is negative.
  ExtensionAttribute=P2_LongFormRekeningBeliBic
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormRekeningBeliBic
  Name=P2_LongFormRekeningBeliBic
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormRekeningBeliNumber =
  Description=The Number of counterparty account when the projected value is negative.
  ExtensionAttribute=P2_LongFormRekeningBeliNumber
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormRekeningBeliNumber
  Name=P2_LongFormRekeningBeliNumber
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormRekeningJualBic =
  Description=The bic of counterparty account when the projected value is positive.
  ExtensionAttribute=P2_LongFormRekeningJualBic
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormRekeningJualBic
  Name=P2_LongFormRekeningJualBic
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormRekeningJualNumber =
  Description=The number of counterparty account when the projected value is positive.
  ExtensionAttribute=P2_LongFormRekeningJualNumber
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormRekeningJualNumber
  Name=P2_LongFormRekeningJualNumber
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormRepoCashAmount =
  Description=The Cash Amount Price of Repo Trx.
  ExtensionAttribute=P2_LongFormRepoCashAmount
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormRepoCashAmount
  Name=P2_LongFormRepoCashAmount
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormRepoEndCash =
  Description=The End Cash of Repo Trx.
  ExtensionAttribute=P2_LongFormRepoEndCash
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormRepoEndCash
  Name=P2_LongFormRepoEndCash
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormRepoInterest =
  Description=The Repo Interest of Repo Trx.
  ExtensionAttribute=P2_LongFormRepoInterest
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormRepoInterest
  Name=P2_LongFormRepoInterest
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormRepoRate =
  Description=The Repo Rate of Repo Trx.
  ExtensionAttribute=P2_LongFormRepoRate
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormRepoRate
  Name=P2_LongFormRepoRate
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormRollingPeriod =
  Description=The rolling period for this confirmation trade.
  ExtensionAttribute=P2_LongFormRollingPeriod
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormRollingPeriod
  Name=P2_LongFormRollingPeriod
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormRollingPeriodBase =
  Description=The rolling period base for this confirmation trade.
  ExtensionAttribute=P2_LongFormRollingPeriodBase
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormRollingPeriodBase
  Name=P2_LongFormRollingPeriodBase
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormSecondNominalNearLeg =
  Description=The premium amount for this confirmation trade.
  ExtensionAttribute=P2_LongFormSecondNominalNearLeg
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormSecondNominalNearLeg
  Name=P2_LongFormSecondNominalNearLeg
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormSecurityId =
  Description=The collateral instrument from this confirmation trade.
  ExtensionAttribute=P2_LongFormSecurityId
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormSecurityId
  Name=P2_LongFormSecurityId
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormSellAmount =
  Description=The sell amount for this confirmation trade.
  ExtensionAttribute=P2_LongFormSellAmount
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormSellAmount
  Name=P2_LongFormSellAmount
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormSettleInstruction =
  Description=The settle instruction for this confirmation trade.
  ExtensionAttribute=P2_LongFormSettleInstruction
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormSettleInstruction
  Name=P2_LongFormSettleInstruction
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormSettlement =
  Description=The settlement for this confirmation trade.
  ExtensionAttribute=P2_LongFormSettlement
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormSettlement
  Name=P2_LongFormSettlement


  P2_LongFormSettlementDate =
  Description=The settlement date for this confirmation trade.
  ExtensionAttribute=P2_LongFormSettlementDate
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormSettlementDate
  Name=P2_LongFormSettlementDate


  P2_LongFormStrike =
  Description=The instrument strike for this confirmation trade.
  ExtensionAttribute=P2_LongFormStrike
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormStrike
  Name=P2_LongFormStrike
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormStrike2 =
  Description=The instrument leg 02 strike for this confirmation trade.
  ExtensionAttribute=P2_LongFormStrike2
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormStrike2
  Name=P2_LongFormStrike2
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormSwift =
  Description=The counterparty swift for this confirmation trade.
  ExtensionAttribute=P2_LongFormSwift
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormSwift
  Name=P2_LongFormSwift
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormTax =
  Description=The tax for this confirmation trade.
  ExtensionAttribute=P2_LongFormTax
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormTax
  Name=P2_LongFormTax
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormTest =
  Description=Testing Purpose.
  ExtensionAttribute=P2_LongFormTest
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormTest
  Name=P2_LongFormTest
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormTotalAmount =
  Description=.
  ExtensionAttribute=P2_LongFormTotalAmount
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormTotalAmount
  Name=P2_LongFormTotalAmount


  P2_LongFormTotalNominalPay =
  Description=Nominal Principal Pay + Nominal Interest Float.
  ExtensionAttribute=P2_LongFormTotalNominalPay
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormTotalNominalPay
  Name=P2_LongFormTotalNominalPay
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormTotalNominalReceive =
  Description=Nominal Principal Receive + Nominal Interest Fixed.
  ExtensionAttribute=P2_LongFormTotalNominalReceive
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormTotalNominalReceive
  Name=P2_LongFormTotalNominalReceive
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormTotalProceeds =
  Description=The total proceeds (accrued interest + proceed) for this confirmation trade.
  ExtensionAttribute=P2_LongFormTotalProceeds
  Format=Detailed
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormTotalProceeds
  Name=P2_LongFormTotalProceeds
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormTradeDate =
  Description=The Trade Time of Repo Trx.
  ExtensionAttribute=P2_LongFormTradeDate
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormTradeDate
  Name=P2_LongFormTradeDate
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormTradeDate_Eng =
  Description=The trade date for this confirmation trade in English.
  ExtensionAttribute=P2_LongFormTradeDate_Eng
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormTradeDate_Eng
  Name=P2_LongFormTradeDate_Eng


  P2_LongFormTraderSpotPrice =
  Description=The trader spot price for this confirmation trade.
  ExtensionAttribute=P2_LongFormTraderSpotPrice
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormTraderSpotPrice
  Name=P2_LongFormTraderSpotPrice
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormTradeTime =
  Description=The Trade Time of Repo Trx.
  ExtensionAttribute=P2_LongFormTradeTime
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormTradeTime
  Name=P2_LongFormTradeTime
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormType =
  Description=The Type of Repo Trx, REPO or REVERSE REPO.
  ExtensionAttribute=P2_LongFormType
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormType
  Name=P2_LongFormType
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormUnexecutedNominal =
  Description=The unexecuted nominal for this confirmation trade.
  ExtensionAttribute=P2_LongFormUnexecutedNominal
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormUnexecutedNominal
  Name=P2_LongFormUnexecutedNominal
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormUpperRange =
  Description=The upper range for this confirmation trade.
  ExtensionAttribute=P2_LongFormUpperRange
  Format=ThreeDecimalDetailedShowZero
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormUpperRange
  Name=P2_LongFormUpperRange
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormUSDRate =
  Description=The first leg USD Rate for this confirmation trade.
  ExtensionAttribute=P2_LongFormUSDRate
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormUSDRate
  Name=P2_LongFormUSDRate
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormValueDate =
  Description=The value date for this confirmation trade.
  ExtensionAttribute=P2_LongFormValueDate
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormValueDate
  Name=P2_LongFormValueDate
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormValueDate_Eng =
  Description=The value date for this confirmation trade in English.
  ExtensionAttribute=P2_LongFormValueDate_Eng
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormValueDate_Eng
  Name=P2_LongFormValueDate_Eng
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormValueDay =
  Description=The value day for this confirmation trade.
  ExtensionAttribute=P2_LongFormValueDayExtAttr
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormValueDay
  Name=P2_LongFormValueDay
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormValueEndDate =
  Description=The End Date of Repo Trx.
  ExtensionAttribute=P2_LongFormValueEndDate
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormValueEndDate
  Name=P2_LongFormValueEndDate
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormValueStartDate =
  Description=The Start Date of Repo Trx.
  ExtensionAttribute=P2_LongFormValueStartDate
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormValueStartDate
  Name=P2_LongFormValueStartDate
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormWHT =
  Description=The WHT for this confirmation trade.
  ExtensionAttribute=P2_LongFormWHT
  Format=Detailed
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormWHT
  Name=P2_LongFormWHT
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormWHTCurrency =
  Description=The WHT currency for this confirmation trade.
  ExtensionAttribute=P2_LongFormWHTCurrency
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormWHTCurrency
  Name=P2_LongFormWHTCurrency
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormYield =
  Description=The yield for this confirmation trade.
  ExtensionAttribute=P2_LongFormYield
  Format=Percent
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormYield
  Name=P2_LongFormYield
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormYourAccount =
  Description=Your Counterparty (cpty)
  ExtensionAttribute=P2_LongFormYourAccount
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormYourAccount
  Name=P2_LongFormYourAccount
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormYourAccount_BondRepo =
  Description=Your Counterparty (cpty) for Bond and Repo
  ExtensionAttribute=P2_LongFormYourAccount_BondRepo
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormYourAccount_BondRepo
  Name=P2_LongFormYourAccount_BondRepo


  P2_LongFormYourAccount_CCS_CCY1 =
  Description=Your Account (cpty) for CCY1 CCS
  ExtensionAttribute=P2_LongFormYourAccount_CCS_CCY1
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormYourAccount_CCS_CCY1
  Name=P2_LongFormYourAccount_CCS_CCY1


  P2_LongFormYourAccount_CCS_CCY2 =
  Description=Your Account (cpty) for CCY2 CCS
  ExtensionAttribute=P2_LongFormYourAccount_CCS_CCY2
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormYourAccount_CCS_CCY2
  Name=P2_LongFormYourAccount_CCS_CCY2


  P2_LongFormYourAccount_CCS_IDR =
  Description=Your Counterparty (cpty) for IDR CCS
  ExtensionAttribute=P2_LongFormYourAccount_CCS_IDR
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormYourAccount_CCS_IDR
  Name=P2_LongFormYourAccount_CCS_IDR


  P2_LongFormYourAccount_CCS_USD =
  Description=Your Counterparty (cpty) for USD CCS
  ExtensionAttribute=P2_LongFormYourAccount_CCS_USD
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormYourAccount_CCS_USD
  Name=P2_LongFormYourAccount_CCS_USD


  P2_LongFormYourAccount_CouponBond =
  Description=Your Counterparty (cpty) for Coupon Bond
  ExtensionAttribute=P2_LongFormYourAccount_CouponBond
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormYourAccount_CouponBond
  Name=P2_LongFormYourAccount_CouponBond


  P2_LongFormYourAccount_DNDF =
  Description=Your Account (cpty) for DNDF
  ExtensionAttribute=P2_LongFormYourAccount_DNDF
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormYourAccount_DNDF
  Name=P2_LongFormYourAccount_DNDF


  P2_LongFormYourAccount_FXCash =
  Description=Your Counterparty (cpty) for FX Cash
  ExtensionAttribute=P2_LongFormYourAccount_FXCash
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormYourAccount_FXCash
  Name=P2_LongFormYourAccount_FXCash
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormYourAccount_FXOption =
  Description=Your Counterparty (cpty) for FX Option
  ExtensionAttribute=P2_LongFormYourAccount_FXOption
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormYourAccount_FXOption
  Name=P2_LongFormYourAccount_FXOption
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormYourAccount_IRS =
  Description=Your Counterparty (cpty) for IRS
  ExtensionAttribute=P2_LongFormYourAccount_IRS
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormYourAccount_IRS
  Name=P2_LongFormYourAccount_IRS


  P2_LongFormYourAccount_Repo =
  Description=Your Counterparty (cpty) for Repo
  ExtensionAttribute=P2_LongFormYourAccount_Repo
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormYourAccount_Repo
  Name=P2_LongFormYourAccount_Repo
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormYourAccountCorrBank_BondRepo =
  Description=Your Counterparty (cpty) correspondent bank for Bond and Repo
  ExtensionAttribute=P2_LongFormYourAccountCorrBank_BondRepo
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormYourAccountCorrBank_BondRepo
  Name=P2_LongFormYourAccountCorrBank_BondRepo


  P2_LongFormYourAccountName =
  Description=Your Counterparty (cpty) name
  ExtensionAttribute=P2_LongFormYourAccountName
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormYourAccountName
  Name=P2_LongFormYourAccountName
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormYourAccountName_BondRepo =
  Description=Your Counterparty (cpty) name for Bond and Repo
  ExtensionAttribute=P2_LongFormYourAccountName_BondRepo
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormYourAccountName_BondRepo
  Name=P2_LongFormYourAccountName_BondRepo


  P2_LongFormYourAccountName_CCS_CCY1 =
  Description=Your Account (cpty) name for CCY1 CCS
  ExtensionAttribute=P2_LongFormYourAccountName_CCS_CCY1
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormYourAccountName_CCS_CCY1
  Name=P2_LongFormYourAccountName_CCS_CCY1


  P2_LongFormYourAccountName_CCS_CCY2 =
  Description=Your Account (cpty) name for CCY2 CCS
  ExtensionAttribute=P2_LongFormYourAccountName_CCS_CCY2
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormYourAccountName_CCS_CCY2
  Name=P2_LongFormYourAccountName_CCS_CCY2


  P2_LongFormYourAccountName_CouponBond =
  Description=Your Counterparty (cpty) name for Coupon Bond
  ExtensionAttribute=P2_LongFormYourAccountName_CouponBond
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormYourAccountName_CouponBond
  Name=P2_LongFormYourAccountName_CouponBond


  P2_LongFormYourAccountName_FXCash =
  Description=Your Counterparty (cpty) name for FX Cash
  ExtensionAttribute=P2_LongFormYourAccountName_FXCash
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormYourAccountName_FXCash
  Name=P2_LongFormYourAccountName_FXCash
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormYourAccountName_FXOption =
  Description=Your Counterparty (cpty) name for FX Option
  ExtensionAttribute=P2_LongFormYourAccountName_FXOption
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormYourAccountName_FXOption
  Name=P2_LongFormYourAccountName_FXOption'
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormYourAccountName_Repo =
  Description=Your Counterparty (cpty) name for Repo
  ExtensionAttribute=P2_LongFormYourAccountName_Repo
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormYourAccountName_Repo
  Name=P2_LongFormYourAccountName_Repo
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormYourAccountNumber =
  Description=Your Counterparty (cpty) number
  ExtensionAttribute=P2_LongFormYourAccountNumber
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormYourAccountNumber
  Name=P2_LongFormYourAccountNumber
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormYourAccountNumber_BondRepo =
  Description=Your Counterparty (cpty) number for Bond and Repo
  ExtensionAttribute=P2_LongFormYourAccountNumber_BondRepo
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormYourAccountNumber_BondRepo
  Name=P2_LongFormYourAccountNumber_BondRepo


  P2_LongFormYourAccountNumber_CCS_CCY1 =
  Description=Your Account (cpty) number for CCY1 CCS
  ExtensionAttribute=P2_LongFormYourAccountNumber_CCS_CCY1
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormYourAccountNumber_CCS_CCY1
  Name=P2_LongFormYourAccountNumber_CCS_CCY1


  P2_LongFormYourAccountNumber_CCS_CCY2 =
  Description=Your Account (cpty) number for CCY2 CCS
  ExtensionAttribute=P2_LongFormYourAccountNumber_CCS_CCY2
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormYourAccountNumber_CCS_CCY2
  Name=P2_LongFormYourAccountNumber_CCS_CCY2


  P2_LongFormYourAccountNumber_CCS_IDR =
  Description=Your Counterparty (cpty) number for IDR CCS
  ExtensionAttribute=P2_LongFormYourAccountNumber_CCS_IDR
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormYourAccountNumber_CCS_IDR
  Name=P2_LongFormYourAccountNumber_CCS_IDR


  P2_LongFormYourAccountNumber_CCS_USD =
  Description=Your Counterparty (cpty) number for USD CCS
  ExtensionAttribute=P2_LongFormYourAccountNumber_CCS_USD
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormYourAccountNumber_CCS_USD
  Name=P2_LongFormYourAccountNumber_CCS_USD


  P2_LongFormYourAccountNumber_CouponBond =
  Description=Your Counterparty (cpty) number for Coupon Bond
  ExtensionAttribute=P2_LongFormYourAccountNumber_CouponBond
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormYourAccountNumber_CouponBond
  Name=P2_LongFormYourAccountNumber_CouponBond


  P2_LongFormYourAccountNumber_DNDF =
  Description=Your Account (cpty) number for DNDF
  ExtensionAttribute=P2_LongFormYourAccountNumber_DNDF
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormYourAccountNumber_DNDF
  Name=P2_LongFormYourAccountNumber_DNDF


  P2_LongFormYourAccountNumber_FXCash =
  Description=Your Counterparty (cpty) number for FX Cash
  ExtensionAttribute=P2_LongFormYourAccountNumber_FXCash
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormYourAccountNumber_FXCash
  Name=P2_LongFormYourAccountNumber_FXCash
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormYourAccountNumber_FXOption =
  Description=Your Counterparty (cpty) number for FX Option
  ExtensionAttribute=P2_LongFormYourAccountNumber_FXOption
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormYourAccountNumber_FXOption
  Name=P2_LongFormYourAccountNumber_FXOption
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormYourAccountNumber_IRS =
  Description=Your Counterparty (cpty) number for IRS
  ExtensionAttribute=P2_LongFormYourAccountNumber_IRS
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormYourAccountNumber_IRS
  Name=P2_LongFormYourAccountNumber_IRS


  P2_LongFormYourAccountNumber_Repo =
  Description=Your Counterparty (cpty) number for Repo
  ExtensionAttribute=P2_LongFormYourAccountNumber_Repo
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormYourAccountNumber_Repo
  Name=P2_LongFormYourAccountNumber_Repo
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  P2_LongFormYourCorrespondentBank =
  Description=Your Account (Acq)
  ExtensionAttribute=P2_LongFormYourCorrespondentBank
  GroupLabel=LongformTradeConfirmation_P2
  LabelList=LongFormYourCorrespondentBank
  Name=P2_LongFormYourCorrespondentBank
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


}

decls[FCommandExtension] {
  "QuickAccessItems.Back Office" ( "active commands" ) "";
}

decls[FCustomFunction] {
}

clx FObject [FCustomFunction] {
  get_longform_expiry_day =
  Definition=get_longform_expiry_day(FObject acm_object): string
  Function=FLongFormCustomUtils_P2.get_longform_expiry_day


  get_longform_trade_time =
  Definition=get_longform_trade_time(FObject acm_object): string
  Function=FLongFormCustomUtils_P2.get_longform_trade_time


  get_longform_value_day =
  Definition=get_longform_value_day(FObject acm_object): string
  Function=FLongFormCustomUtils_P2.get_longform_value_day


}

decls[FExtensionAttribute] {
  "LongFormOurAccount_CouponBond" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormMaturityDate" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormOurReference" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormRepoCashAmount" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormRepoEndCash" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormRepoInterest" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormRepoRate" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormType" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormValueEndDate" ( "sheet columns.confirmationsheet" ) "";
  "P2_LongFormValueStartDate" ( "sheet columns.confirmationsheet" ) "";
}

clx FAccount [FExtensionAttribute] {
  accountBic = object.Bic;
  accountCorrespondentBank = object.CorrespondentBank;
  accountName = object.Name;
  accountNumber = object.Account;
}

clx FConfirmation [FExtensionAttribute] {
  accountAcquirerConf = object.Trade.Acquirer.Accounts;
  accountCounterpartyConf = object.Trade.Counterparty.Accounts;
  cashflowConf = legConf :* "cashflowSelect";
  instrumentConf = object.Trade.Instrument;
  legConf = object.Trade.Instrument.Legs.At(0);
  legDayCountMethod = object.DayCountMethod;
  legFloatRate = object.FloatRateFactor;
  Nominal1 = object.Trade.DealPackage.Trades.At(0).Nominal;
  Nominal2 = object.Trade.DealPackage.Trades.At(1).Nominal;
  Nominal3 = object.Trade.DealPackage.Trades.At(2).Nominal;
  Nominal4 = object.Trade.DealPackage.Trades.At(3).Nominal;
  Nominal5 = object.Trade.DealPackage.Trades.At(4).Nominal;
  Nominal6 = object.Trade.DealPackage.Trades.At(5).Nominal;
  P2_LongFormAccountName = object.Trade.Settlements.Last.AcquirerAccName;
  P2_LongFormAccountNumber = object.Trade.Settlements.Last.AcquirerAccount;
  P2_LongFormAccruedInterest = abs(py("FLongFormCustomUtils_P2", context).get_TradeLogicDecorator(object).AccruedInterest);
  P2_LongFormAccruedInterestDisp = select(object.Trade.Instrument.DayCountMethod, 
  "None"->select(object.Trade.Instrument.MainLeg.DayCountMethod, 
    "None"->abs(object.Trade.AccruedDays * object.Trade.FaceValue / (366 / (object.Trade.Instrument.Legs.First.FirstRate / 100))), 
    default->abs(object.Trade.AccruedDays * object.Trade.FaceValue / (py("FLongFormCustomUtils_P2", context).get_DayCountMethodNum(object.Trade.Instrument.MainLeg.DayCountMethod) / (object.Trade.Instrument.Legs.First.FirstRate / 100)))), 
  default->abs(object.Trade.AccruedDays * object.Trade.FaceValue / (360 / (object.Trade.Instrument.Legs.First.FirstRate / 100)))) / 10000;
  P2_LongFormAfterTax = P2_LongFormNominalPenempatan - P2_LongFormWHT;
  P2_LongFormAllInPrice = object.Trade.AllInPrice;
  P2_LongFormBeliJual = select(object.Trade.BoughtAsString, 
  "Buy"->"Beli", 
  "Sell"->"Jual");
  P2_LongFormBidPrice = object.Trade.Instrument.Prices.First.Bid;
  P2_LongFormBoughtSold = select(object.Trade.BoughtAsString, 
  "Buy"->"bought from", 
  "Sell"->"sold to");
  P2_LongFormBuyAmount = tradeConf :* "longFormAttrBuyAmount";
  P2_LongFormCouponInterest = py("FLongFormCustomUtils_P2", context).coupon_interest(object.Trade);
  P2_LongFormCouponPayDate = py("FLongFormCustomUtils_P2", context).date_formatter(py("FLongFormCustomUtils_P2", context).coupon_paydate(object.Trade));
  P2_LongFormCurrency = object.Trade.Currency;
  P2_LongFormCurrency1 = select(object.Trade.Instrument.InsType == "Deposit", 
  true->object.Trade.HedgeTrade.CurrencyPair.Currency1, 
  false->object.Trade.CurrencyPair.Currency1);
  P2_LongFormCurrency2 = select(object.Trade.Instrument.InsType == "Deposit", 
  true->object.Trade.HedgeTrade.CurrencyPair.Currency2, 
  false->object.Trade.CurrencyPair.Currency2);
  P2_LongFormCurrencyPair = select(object.Trade.Instrument.InsType == "Deposit", 
  true->object.Trade.HedgeTrade.CurrencyPair, 
  false->object.Trade.CurrencyPair);
  P2_LongFormCurrencyUnderlying = py("FLongFormCustomUtils_P2", context).get_Collateral_Instrument1(object.Trade).Currency.Name;
  P2_LongFormDayCount = object.Trade.Instrument.Legs.At(0).DayCountMethod;
  P2_LongFormDaysCoupon = select(object.Trade.Instrument.InsType, 
  "Bill"->0, 
  default->py("FLongFormCustomUtils_P2", context).get_longform_days_coupon(object.Trade));
  P2_LongFormDeliveryDate = py("FLongFormCustomUtils_P2", context).date_formatter(object.Trade.Instrument.DeliveryDate);
  P2_LongFormDiary = py("FLongFormCustomUtils_P2", context).get_diary(object.Confirmation.Diary.Text);
  P2_LongFormDNDF1 = P2_LongFormNominalAmount * P2_LongFormTraderSpotPrice;
  P2_LongFormDNDF2 = P2_LongFormNominalAmount * P2_LongFormPrice;
  P2_LongFormDNDFAmountIDR = py("FLongFormCustomUtils_P2", context).dndf_amount_idr(object.Trade);
  P2_LongFormDNDFAmountUSD = select(object.Trade.CurrencyPair.Currency1, 
  "USD"->object.Trade.Nominal, 
  default->select(object.Trade.CurrencyPair.Currency2, 
    "USD"->object.Trade.ForwardPremium, 
    default->nil));
  P2_LongFormDomesticCurrency = object.Trade.Nominal * object.Trade.Instrument.StrikePrice;
  P2_LongFormEndCashRepo = object.Trade.FaceValue + (object.Trade.FaceValue * object.Instrument.FirstFixedLeg.FixedRate / 100);
  P2_LongFormEndDate = select(object.ConfTemplateChlItem, 
  "IRSPA"->py("FLongFormCustomUtils_P2", context).date_formatter(py("FLongFormCustomUtils_P2", context).pairs_enddate(object.Trade.MoneyFlows)), 
  default->py("FLongFormCustomUtils_P2", context).date_formatter(py("FLongFormCustomUtils_P2", context).get_longform_end_date(object.Trade)));
  P2_LongFormEndDate_Eng = select(object.ConfTemplateChlItem, 
  "IRSPA"->py("FLongFormCustomUtils_P2", context).date_formatter_eng(py("FLongFormCustomUtils_P2", context).pairs_enddate(object.Trade.MoneyFlows)), 
  default->py("FLongFormCustomUtils_P2", context).date_formatter_eng(dateToYMD(object.Trade.Instrument.EndDate)));
  P2_LongFormEndInterest = object.Trade.EndCash - object.Trade.Nominal;
  P2_LongFormExpiryDayExtAttr = py("FLongFormCustomUtils_P2", context).date_formatter(object.Trade.Instrument.ExpiryDate);
  P2_LongFormFaceValue = abs(object.Trade.FaceValue);
  P2_LongFormFarSellAmount = tradeConf :* "tradeFXAttrFarSellAmount";
  P2_LongFormFixedRate = select(object.Trade.Instrument.InsType, 
  "Swap"->object.Trade.Instrument.Legs.At(1).FixedRate, 
  "Bill"->0, 
  "FRN"->object.Trade.Instrument.CouponRate, 
  default->instrumentConf :* "uniqueCouponInTheoreticalPrice");
  P2_LongFormFixingSource = select(object.Trade.Instrument.InsType == "Deposit", 
  true->object.Trade.HedgeTrade.DealPackage.AllInstruments.At(0).FixingSource, 
  false->object.Trade.DealPackage.AllInstruments.At(0).FixingSource);
  P2_LongFormFixingValue = py("FLongFormCustomUtils_P2", context).fixingvalue(object.Trade.MoneyFlows);
  P2_LongFormFloatRate = object.Trade.Instrument.Legs.At(0).FloatRateFactor;
  P2_LongFormFloatRateRef = select(object.Trade.Instrument.Legs.First.FloatRateReference, 
  nil->object.Trade.Instrument.Legs.Last.FloatRateReference, 
  default->object.Trade.Instrument.Legs.First.FloatRateReference);
  P2_LongFormFromTo = select(object.Trade.BoughtAsString, 
  "Buy"->"from", 
  "Sell"->"to");
  P2_LongFormFXONominalCall = py("FLongFormCustomUtils_P2", context).get_fxo_nominal_call(object.Trade);
  P2_LongFormFXONominalPut = py("FLongFormCustomUtils_P2", context).get_fxo_nominal_put(object.Trade);
  P2_LongFormHaircut = select(object.Trade.Instrument.InsType, 
  "BasketRepo/Reverse"->py("FLongFormCustomUtils_P2", context).get_Collateral_Haircut(object.Trade), 
  default->object.Trade.Haircut);
  P2_LongFormHasilPajak = P2_LongFormEndInterest - P2_LongFormWHT;
  P2_LongFormInstrument = object.Trade.Instrument;
  P2_LongFormInterestEndDate = select(object.Trade.OptKey4, 
  "IRS"->py("FLongFormCustomUtils_P2", context).date_formatter(py("FLongFormCustomUtils_P2", context).get_longform_interest_end_date2(object.Trade)), 
  "CCS"->py("FLongFormCustomUtils_P2", context).date_formatter(py("FLongFormCustomUtils_P2", context).get_longform_interest_end_date2(object.Trade)), 
  "OIS"->py("FLongFormCustomUtils_P2", context).date_formatter(py("FLongFormCustomUtils_P2", context).get_longform_interest_end_date2(object.Trade)), 
  default->py("FLongFormCustomUtils_P2", context).date_formatter(py("FLongFormCustomUtils_P2", context).get_longform_interest_end_date(object.Trade.Instrument.Legs)));
  P2_LongFormInterestRateAtTradeTime = tradeConf :* "interestRateAtTradeTime";
  P2_LongFormInterestRateFixed = py("FLongFormCustomUtils_P2", context).get_longform_interest_rate_fixed(object.Trade.Instrument.Legs);
  P2_LongFormInterestRateFloat = py("FLongFormCustomUtils_P2", context).get_longform_interest_rate_float(object.Trade.Instrument.Legs);
  P2_LongFormInterestStartDate = select(object.Trade.OptKey4, 
  "IRS"->py("FLongFormCustomUtils_P2", context).date_formatter(py("FLongFormCustomUtils_P2", context).get_longform_interest_start_date2(object.Trade)), 
  "CCS"->py("FLongFormCustomUtils_P2", context).date_formatter(py("FLongFormCustomUtils_P2", context).get_longform_interest_start_date2(object.Trade)), 
  default->py("FLongFormCustomUtils_P2", context).date_formatter(py("FLongFormCustomUtils_P2", context).get_longform_interest_start_date(object.Trade.Instrument.Legs)));
  P2_LongFormIsin = select(object.Trade.Instrument.InsType, 
  "Repo/Reverse"->object.Trade.Instrument.Underlying.Isin, 
  "BasketRepo/Reverse"->py("FLongFormCustomUtils_P2", context).get_Collateral_Instrument_Isin(object.Trade), 
  default->object.Trade.Instrument.Isin);
  P2_LongFormIssuer = select(object.Trade.Instrument.InsType, 
  "Repo/Reverse"->object.Trade.Instrument.Underlying.Issuer, 
  "BasketRepo/Reverse"->py("FLongFormCustomUtils_P2", context).get_Collateral_Instrument_Issuer(object.Trade), 
  default->object.Trade.Instrument.Issuer);
  P2_LongFormLastCouponDate = py("FLongFormCustomUtils_P2", context).date_formatter(py("FLongFormCustomUtils_P2", context).get_Last_Coupon_Date(object.Trade));
  P2_LongFormLowerRange = select(object.Trade.Instrument.InsType == "Deposit", 
  true->object.Trade.HedgeTrade.Instrument.Exotic.RangeAccrualFloor, 
  false->object.Trade.Instrument.Exotic.RangeAccrualFloor);
  P2_LongFormMarketPrice = py("FLongFormCustomUtils_P2", context).get_market_price(object.Trade);
  P2_LongFormMaturityDate = select(object.Trade.Instrument.InsType, 
  "Repo/Reverse"->object.Trade.Instrument.Underlying.EndDate, 
  "BasketRepo/Reverse"->py("FLongFormCustomUtils_P2", context).date_formatter_eng(dateToYMD(py("FLongFormCustomUtils_P2", context).get_Collateral_Instrument1(object.Trade).EndDate)), 
  default->object.Trade.Instrument.EndDate);
  P2_LongFormMMLDMaxYield = select(object.Trade.Instrument.InsType == "Deposit", 
  true->object.Trade.HedgeTrade.Instrument.AdditionalInfo.Sp_MLDMaxYield, 
  false->object.Trade.Instrument.AdditionalInfo.Sp_MLDMaxYield);
  P2_LongFormNetConsideration = select(object.Trade.Instrument.InsType, 
  "Bond"->abs(P2_LongFormPrincipalAmount + P2_LongFormAccruedInterest), 
  "Bill"->abs(P2_LongFormPrincipalAmount + P2_LongFormAccruedInterest), 
  "Repo/Reverse"->abs(P2_LongFormNominalAmount * P2_LongFormPrice / 100), 
  "BasketRepo/Reverse"->abs(P2_LongFormNominalAmount * P2_LongFormPrice / 100), 
  "Basket Repo/Reverse Legacy"->abs(P2_LongFormNominalAmount * P2_LongFormPrice / 100), 
  default->abs(P2_LongFormPrincipalAmount + P2_LongFormAccruedInterest));
  P2_LongFormNetProceed = select(LongFormWHT, 
  nil->select(object.Trade.Instrument.InsType, 
    default->abs(float(0) + float(py("FLongFormCustomUtils_P2", context).get_longform_accrued_interest(object.Trade)) + float(object.Trade.FaceValue * object.Trade.Price / 100)), 
    "Repo/Reverse"->LongFormTotalProceeds, 
    "BasketRepo/Reverse"->LongFormTotalProceeds, 
    "Basket Repo/Reverse Legacy"->LongFormTotalProceeds, 
    "FRN"->LongFormTotalProceeds, 
    "Bill"->LongFormTotalProceeds, 
    "Bond"->LongFormPremium), 
  default->select(object.Trade.Instrument.InsType, 
    default->abs(float(0) + float(py("FLongFormCustomUtils_P2", context).get_longform_accrued_interest(object.Trade)) + float(object.Trade.FaceValue * object.Trade.Price / 100)), 
    "Repo/Reverse"->LongFormTotalProceeds - P2_LongFormWHT, 
    "BasketRepo/Reverse"->LongFormTotalProceeds - P2_LongFormWHT, 
    "Basket Repo/Reverse Legacy"->LongFormTotalProceeds - P2_LongFormWHT, 
    "FRN"->LongFormTotalProceeds - P2_LongFormWHT, 
    "Bill"->LongFormTotalProceeds - P2_LongFormWHT, 
    "Bond"->LongFormPremium - P2_LongFormWHT));
  P2_LongFormNettingAmount = select(object.Trade.OptKey4, 
  "OIS"->py("FLongFormCustomUtils_P2", context).get_longform_netting_amount(object.Trade), 
  default->select(object.Trade.Instrument.InsType, 
    "Future/Forward"->py("FLongFormCustomUtils_P2", context).get_longform_netting_dndf(object.Trade.InstrumentPackageOrInstrument.Trades.Last.MoneyFlows), 
    default->py("FLongFormCustomUtils_P2", context).get_longform_netting_amount(object.Trade)));
  P2_LongFormNettingAmountDNDF = P2_LongFormDNDF1 - P2_LongFormDNDF2;
  P2_LongFormNextCouponDate = py("FLongFormCustomUtils_P2", context).date_formatter(py("FLongFormCustomUtils_P2", context).get_Next_Coupon_Date(object.Trade));
  P2_LongFormNominalAmount = select(object.Trade.Instrument.InsType, 
  "BasketRepo/Reverse"->abs(py("FLongFormCustomUtils_P2", context).get_Collateral_Trade_Face_Value(object.Trade)), 
  default->abs(object.Trade.FaceValue));
  P2_LongFormNominalEqvCCS1 = abs(py("FLongFormCustomUtils_P2", context).get_nominal_eqv_ccs_1(object.Trade));
  P2_LongFormNominalEqvCCS2 = abs(py("FLongFormCustomUtils_P2", context).get_nominal_eqv_ccs_2(object.Trade));
  P2_LongFormNominalInterestFixed = py("FLongFormCustomUtils_P2", context).nominal_interest_fixed(object.Trade);
  P2_LongFormNominalInterestFloat = py("FLongFormCustomUtils_P2", context).nominal_interest_float(object.Trade);
  P2_LongFormNominalLastLeg = object.Trade.TradeConnections.At(0).ToTrade.Nominal;
  P2_LongFormNominalPenempatan = P2_LongFormFarSellAmount + (0.34 * dateDifference(object.Trade.Instrument.EndDate, object.Trade.Instrument.StartDate) / 365);
  P2_LongFormNominalPrincipalPay = py("FLongFormCustomUtils_P2", context).get_longForm_Nominal_principal(object.Trade, "pay", "Fixed Amount");
  P2_LongFormNominalPrincipalReceive = py("FLongFormCustomUtils_P2", context).get_longForm_Nominal_principal(object.Trade, "receive", "Fixed Amount");
  P2_LongFormOurAccount = object.Trade.MoneyFlows.Last.AcquirerAccount.Bic;
  P2_LongFormOurAccount_BondRepo = select(object.Trade.Instrument.InsType, 
  "Bond"->py("FLongFormCustomUtils_P2", context).bondrepo_account(object.Trade).AcquirerAccount.Bic, 
  "Bill"->py("FLongFormCustomUtils_P2", context).bondrepo_account(object.Trade).AcquirerAccount.Bic, 
  "FRN"->py("FLongFormCustomUtils_P2", context).bondrepo_account(object.Trade).AcquirerAccount.Bic, 
  "Repo/Reverse"->LongFormOurAccount_Repo, 
  "BasketRepo/Reverse"->LongFormOurAccount_Repo, 
  "Basket Repo/Reverse Legacy"->LongFormOurAccount_Repo);
  P2_LongFormOurAccount_CCS_CCY1 = select(object.Trade.Instrument.InsType, 
  "CurrSwap"->py("FLongFormCustomUtils_P2", context).ccs_ccy1_ouraccount(object.Trade).Bic);
  P2_LongFormOurAccount_CCS_CCY2 = select(object.Trade.Instrument.InsType, 
  "CurrSwap"->py("FLongFormCustomUtils_P2", context).ccs_ccy2_ouraccount(object.Trade).Bic);
  P2_LongFormOurAccount_CCS_IDR = select(object.Trade.Instrument.InsType, 
  "CurrSwap"->py("FLongFormCustomUtils_P2", context).ccs_idr_ouraccount(object.Trade));
  P2_LongFormOurAccount_CCS_USD = select(object.Trade.Instrument.InsType, 
  "CurrSwap"->py("FLongFormCustomUtils_P2", context).ccs_usd_ouraccount(object.Trade));
  P2_LongFormOurAccount_CouponBond = select(object.EventType, 
  "Coupon Advice"->select(object.Trade.Instrument.InsType, 
    "Bond"->py("FLongFormCustomUtils_P2", context).couponbond_ouraccount(object.Trade)));
  P2_LongFormOurAccount_DNDF = py("FLongFormCustomUtils_P2", context).dndf_ouraccount(object.Trade);
  P2_LongFormOurAccount_FXCash = py("FLongFormCustomUtils_P2", context).fx_ouraccount(object.Trade).Bic;
  P2_LongFormOurAccount_FXOption = py("FLongFormCustomUtils_P2", context).fxoption_account(object.Trade).AcquirerAccount.Bic;
  P2_LongFormOurAccount_IRS = select(object.Trade.Instrument.InsType, 
  "Swap"->py("FLongFormCustomUtils_P2", context).irs_ouraccount(object.Trade));
  P2_LongFormOurAccount_Repo = py("FLongFormCustomUtils_P2", context).repo_account(object.Trade).AcquirerAccount.Bic;
  P2_LongFormOurAccountCorrBank_BondRepo = select(object.Trade.Instrument.InsType, 
  "Bond"->py("FLongFormCustomUtils_P2", context).bondrepo_account(object.Trade).AcquirerAccount.CorrespondentBank, 
  "Bill"->py("FLongFormCustomUtils_P2", context).bondrepo_account(object.Trade).AcquirerAccount.CorrespondentBank, 
  "FRN"->py("FLongFormCustomUtils_P2", context).bondrepo_account(object.Trade).AcquirerAccount.CorrespondentBank, 
  "Repo/Reverse"->py("FLongFormCustomUtils_P2", context).repo_account(object.Trade).CounterpartyAccount.CorrespondentBank, 
  "BasketRepo/Reverse"->py("FLongFormCustomUtils_P2", context).repo_account(object.Trade).CounterpartyAccount.CorrespondentBank, 
  "Basket Repo/Reverse Legacy"->py("FLongFormCustomUtils_P2", context).repo_account(object.Trade).CounterpartyAccount.CorrespondentBank);
  P2_LongFormOurAccountName = object.Trade.MoneyFlows.Last.AcquirerAccount;
  P2_LongFormOurAccountName_BondRepo = select(object.Trade.Instrument.InsType, 
  "Bond"->py("FLongFormCustomUtils_P2", context).bondrepo_account(object.Trade).AcquirerAccount, 
  "Bill"->py("FLongFormCustomUtils_P2", context).bondrepo_account(object.Trade).AcquirerAccount, 
  "FRN"->py("FLongFormCustomUtils_P2", context).bondrepo_account(object.Trade).AcquirerAccount, 
  "Repo/Reverse"->LongFormOurAccountNumber_Repo, 
  "BasketRepo/Reverse"->LongFormOurAccountNumber_Repo, 
  "Basket Repo/Reverse Legacy"->LongFormOurAccountNumber_Repo);
  P2_LongFormOurAccountName_CCS_CCY1 = select(object.Trade.Instrument.InsType, 
  "CurrSwap"->py("FLongFormCustomUtils_P2", context).ccs_ccy1_ouraccount(object.Trade));
  P2_LongFormOurAccountName_CCS_CCY2 = select(object.Trade.Instrument.InsType, 
  "CurrSwap"->py("FLongFormCustomUtils_P2", context).ccs_ccy2_ouraccount(object.Trade));
  P2_LongFormOurAccountName_CouponBond = select(object.EventType, 
  "Coupon Advice"->select(object.Trade.Instrument.InsType, 
    "Bond"->py("FLongFormCustomUtils_P2", context).couponbond_ouraccountname(object.Trade)));
  P2_LongFormOurAccountName_FXCash = py("FLongFormCustomUtils_P2", context).fx_ouraccount(object.Trade);
  P2_LongFormOurAccountName_FXOption = py("FLongFormCustomUtils_P2", context).fxoption_account(object.Trade).AcquirerAccount;
  P2_LongFormOurAccountName_Repo = py("FLongFormCustomUtils_P2", context).repo_account(object.Trade).AcquirerAccount;
  P2_LongFormOurAccountNetworkAlias_CouponBond = select(object.EventType, 
  "Coupon Advice"->select(object.Trade.Instrument.InsType, 
    "Bond"->py("FLongFormCustomUtils_P2", context).couponbond_ouraccount_networkalias(object.Trade)));
  P2_LongFormOurAccountNumber = object.Trade.MoneyFlows.Last.AcquirerAccount.Account;
  P2_LongFormOurAccountNumber_BondRepo = select(object.Trade.Instrument.InsType, 
  "Bond"->py("FLongFormCustomUtils_P2", context).bondrepo_account(object.Trade).AcquirerAccount.Account, 
  "Bill"->py("FLongFormCustomUtils_P2", context).bondrepo_account(object.Trade).AcquirerAccount.Account, 
  "FRN"->py("FLongFormCustomUtils_P2", context).bondrepo_account(object.Trade).AcquirerAccount.Account, 
  "Repo/Reverse"->P2_LongFormOurAccountNumber_Repo, 
  "BasketRepo/Reverse"->P2_LongFormOurAccountNumber_Repo, 
  "Basket Repo/Reverse Legacy"->P2_LongFormOurAccountNumber_Repo);
  P2_LongFormOurAccountNumber_CCS_CCY1 = select(object.Trade.Instrument.InsType, 
  "CurrSwap"->py("FLongFormCustomUtils_P2", context).ccs_ccy1_ouraccountnumber(object.Trade));
  P2_LongFormOurAccountNumber_CCS_CCY2 = select(object.Trade.Instrument.InsType, 
  "CurrSwap"->py("FLongFormCustomUtils_P2", context).ccs_ccy2_ouraccountnumber(object.Trade));
  P2_LongFormOurAccountNumber_CCS_IDR = select(object.Trade.Instrument.InsType, 
  "CurrSwap"->py("FLongFormCustomUtils_P2", context).ccs_idr_ouraccountnumber(object.Trade));
  P2_LongFormOurAccountNumber_CCS_USD = select(object.Trade.Instrument.InsType, 
  "CurrSwap"->py("FLongFormCustomUtils_P2", context).ccs_usd_ouraccountnumber(object.Trade));
  P2_LongFormOurAccountNumber_CouponBond = select(object.EventType, 
  "Coupon Advice"->select(object.Trade.Instrument.InsType, 
    "Bond"->py("FLongFormCustomUtils_P2", context).couponbond_ouraccountnumber(object.Trade)));
  P2_LongFormOurAccountNumber_DNDF = py("FLongFormCustomUtils_P2", context).dndf_ouraccountnumber(object.Trade);
  P2_LongFormOurAccountNumber_FXCash = py("FLongFormCustomUtils_P2", context).fx_ouraccount(object.Trade).Account;
  P2_LongFormOurAccountNumber_FXOption = py("FLongFormCustomUtils_P2", context).fxoption_account(object.Trade).AcquirerAccount.Account;
  P2_LongFormOurAccountNumber_IRS = select(object.Trade.Instrument.InsType, 
  "Swap"->py("FLongFormCustomUtils_P2", context).irs_ouraccountnumber(object.Trade));
  P2_LongFormOurAccountNumber_Repo = py("FLongFormCustomUtils_P2", context).repo_account(object.Trade).AcquirerAccount.Account;
  P2_LongFormOurCorrespondentBank = select(count(accountAcquirerConf :* "accountCorrespondentBank") > 0, 
  true->(accountAcquirerConf :* "accountCorrespondentBank").At(0), 
  false->nil);
  P2_LongFormOurReference = select(object.Trade.Instrument.InsType, 
  "Repo/Reverse"->object.Trade.Oid, 
  "BasketRepo/Reverse"->py("FLongFormCustomUtils_P2", context).get_Collateral_Trade_Oid(object.Trade), 
  default->object.Trade.Oid);
  P2_LongFormPayCurrency = select(py("FLongFormCustomUtils_P2", context).get_nominal_eqv_ccs_1(object.Trade), 
  nil->nil, 
  default->select(py("FLongFormCustomUtils_P2", context).get_nominal_eqv_ccs_1(object.Trade) < 0, 
    true->py("FLongFormCustomUtils_P2", context).get_nominal_eqv_ccs_1(object.Trade).Unit, 
    false->py("FLongFormCustomUtils_P2", context).get_nominal_eqv_ccs_2(object.Trade).Unit));
  P2_LongFormPayCurrencyPrincipal = select(py("FLongFormCustomUtils_P2", context).get_longForm_Nominal_principal(object.Trade, "pay", "Float Rate"), 
  nil->nil, 
  default->select(py("FLongFormCustomUtils_P2", context).get_nominal_eqv_ccs_1(object.Trade), 
    nil->nil, 
    default->select(py("FLongFormCustomUtils_P2", context).get_nominal_eqv_ccs_1(object.Trade) < 0, 
      true->py("FLongFormCustomUtils_P2", context).get_nominal_eqv_ccs_1(object.Trade).Unit, 
      false->py("FLongFormCustomUtils_P2", context).get_nominal_eqv_ccs_2(object.Trade).Unit)));
  P2_LongFormPayNominal = select(py("FLongFormCustomUtils_P2", context).get_nominal_eqv_ccs_1(object.Trade) < 0, 
  true->LongFormNominalEqvCCS1, 
  false->LongFormNominalEqvCCS2);
  P2_LongFormPayOffset = string(object.Trade.Instrument.Legs.At(0).PayOffsetCount) + " " + string(object.Trade.Instrument.Legs.At(0).PayOffsetUnit);
  P2_LongFormPayReceive = select(LongFormNettingAmount > 0, 
  true->"Receive", 
  false->"Pay");
  P2_LongFormPremium = abs(py("FLongFormCustomUtils_P2", context).get_premium(object));
  P2_LongFormPrice = select(object.Trade.Instrument.InsType, 
  "BasketRepo/Reverse"->abs(py("FLongFormCustomUtils_P2", context).get_Collateral_Trade_Price(object.Trade)), 
  "Bill"->select(P2_LongFormYield * 100 > 50, 
    true->P2_LongFormYield * 100, 
    false->abs(object.Trade.Premium / object.Trade.Nominal) * 100), 
  default->abs(object.Trade.Price));
  P2_LongFormPrincipalAmount = select(object.Trade.Instrument.InsType, 
  "Bill"->abs(P2_LongFormPrice * (object.Trade.Nominal / 100)), 
  default->abs(object.Trade.Price / 100 * object.Trade.Nominal));
  P2_LongFormProceed = abs(object.Trade.FaceValue * object.Trade.Price / 100);
  P2_LongFormPurchasedSold = select(object.Trade.BoughtAsString, 
  "Buy"->"purchased from", 
  "Sell"->"sold to");
  P2_LongFormPutCallUSD = ;
  P2_LongFormQuantity = select(object.Trade.Instrument.InsType, 
  "Repo/Reverse"->py("FLongFormCustomUtils_P2", context).get_Collateral_Trade_FaceValue(object.Trade), 
  "BasketRepo/Reverse"->py("FLongFormCustomUtils_P2", context).get_Collateral_Trade_FaceValue(object.Trade), 
  "Basket Repo/Reverse Legacy"->py("FLongFormCustomUtils_P2", context).get_Collateral_Trade_FaceValue(object.Trade), 
  default->object.Trade.Quantity);
  P2_LongFormReceiveCurrency = select(py("FLongFormCustomUtils_P2", context).get_nominal_eqv_ccs_1(object.Trade), 
  nil->nil, 
  default->select(py("FLongFormCustomUtils_P2", context).get_nominal_eqv_ccs_1(object.Trade) > 0, 
    true->py("FLongFormCustomUtils_P2", context).get_nominal_eqv_ccs_1(object.Trade).Unit, 
    false->py("FLongFormCustomUtils_P2", context).get_nominal_eqv_ccs_2(object.Trade).Unit));
  P2_LongFormReceiveCurrencyPrincipal = select(LongFormNominalPrincipalReceive, 
  nil->nil, 
  default->select(py("FLongFormCustomUtils_P2", context).get_nominal_eqv_ccs_1(object.Trade), 
    nil->nil, 
    default->select(py("FLongFormCustomUtils_P2", context).get_nominal_eqv_ccs_1(object.Trade) < 0, 
      true->py("FLongFormCustomUtils_P2", context).get_nominal_eqv_ccs_1(object.Trade).Unit, 
      false->py("FLongFormCustomUtils_P2", context).get_nominal_eqv_ccs_2(object.Trade).Unit)));
  P2_LongFormReceiveNominal = select(py("FLongFormCustomUtils_P2", context).get_nominal_eqv_ccs_1(object.Trade) > 0, 
  true->LongFormNominalEqvCCS1, 
  false->LongFormNominalEqvCCS2);
  P2_LongFormRefPrice = object.Trade.RefPrice;
  P2_LongFormRekeningBeliBic = py("FLongFormCustomUtils_P2", context).rekeningbeli_bic(object.Trade);
  P2_LongFormRekeningBeliNumber = py("FLongFormCustomUtils_P2", context).rekeningbeli_number(object.Trade);
  P2_LongFormRekeningJualBic = py("FLongFormCustomUtils_P2", context).rekeningjual_bic(object.Trade);
  P2_LongFormRekeningJualNumber = py("FLongFormCustomUtils_P2", context).rekeningjual_number(object.Trade);
  P2_LongFormRepoCashAmount = abs(object.Trade.StartCash);
  P2_LongFormRepoEndCash = abs(py("FLongFormCustomUtils_P2", context).get_longform_repo_end_cash(object.Trade));
  P2_LongFormRepoInterest = py("FLongFormCustomUtils_P2", context).get_longform_repo_interest(object.Trade);
  P2_LongFormRepoRate = P2_LongFormFixedRate;
  P2_LongFormRollingPeriod = object.Trade.Instrument.Legs.At(0).RollingPeriod;
  P2_LongFormRollingPeriodBase = object.Trade.Instrument.Legs.At(0).RollingPeriodBase;
  P2_LongFormSecondNominalNearLeg = object.Trade.Premium;
  P2_LongFormSecurityId = py("FLongFormCustomUtils_P2", context).get_Collateral_Instrument(object.Trade);
  P2_LongFormSellAmount = tradeConf :* "longFormAttrSellAmount";
  P2_LongFormSettleInstruction = select(object.Trade.Instrument.InsType, 
  "BasketRepo/Reverse"->py("FLongFormCustomUtils_P2", context).bondrepo_ouraccountaccounttype(py("FLongFormCustomUtils_P2", context).get_Collateral_Trade(object.Trade)), 
  default->py("FLongFormCustomUtils_P2", context).bondrepo_ouraccountaccounttype(object.Trade));
  P2_LongFormSettlement = P2_LongFormAccruedInterest + P2_LongFormNominalAmount;
  P2_LongFormSettlementDate = select(object.Trade.OptKey4, 
  "IRS"->py("FLongFormCustomUtils_P2", context).date_formatter(py("FLongFormCustomUtils_P2", context).interest_pay_date(object.Trade)), 
  "CCS"->py("FLongFormCustomUtils_P2", context).date_formatter(py("FLongFormCustomUtils_P2", context).interest_pay_date(object.Trade)), 
  "OIS"->py("FLongFormCustomUtils_P2", context).date_formatter(object.Trade.Instrument.PayLeg.RollingPeriodBase), 
  default->py("FLongFormCustomUtils_P2", context).date_formatter(py("FLongFormCustomUtils_P2", context).get_longform_settlement_date(object.Trade)));
  P2_LongFormStrike = select(object.Trade.Instrument.InsType == "Deposit", 
  true->object.Trade.HedgeTrade.Instrument.StrikePrice, 
  false->object.Trade.Instrument.StrikePrice);
  P2_LongFormStrike2 = select(object.Trade.Instrument.InsType == "Deposit", 
  true->object.Trade.HedgeTrade.Instrument.StrikePrice, 
  false->object.Trade.HedgeTrade.Instrument.StrikePrice);
  P2_LongFormSwift = object.Trade.Counterparty.Swift;
  P2_LongFormTax = 0;
  P2_LongFormTest = py("FLongFormCustomUtils_P2", context).longformtest(object.Trade);
  P2_LongFormTotalAmount = py("FLongFormCustomUtils_P2", context).coupon_total(object.Trade);
  P2_LongFormTotalNominalPay = select(LongFormNominalPrincipalPay, 
  nil->LongFormNominalInterestFloat, 
  default->LongFormNominalPrincipalPay + P2_LongFormNominalInterestFloat);
  P2_LongFormTotalNominalReceive = select(LongFormNominalPrincipalReceive, 
  nil->LongFormNominalInterestFixed, 
  default->LongFormNominalPrincipalReceive + P2_LongFormNominalInterestFixed);
  P2_LongFormTotalProceeds = select(object.Trade.InstrumentSubType == "Bill", 
  true->abs(object.Trade.Premium), 
  false->abs(float(py("FLongFormCustomUtils_P2", context).get_longform_accrued_interest(object.Trade)) + float(object.Trade.FaceValue * object.Trade.Price / 100)));
  P2_LongFormTradeDate = py("FLongFormCustomUtils_P2", context).date_formatter(object.Trade.TradeTime);
  P2_LongFormTradeDate_Eng = py("FLongFormCustomUtils_P2", context).date_formatter_eng(dateToYMD(object.Trade.TradeTime));
  P2_LongFormTraderSpotPrice = object.Trade.Price - object.Trade.SalesMargin + object.Trade.PointsSalesMargin;
  P2_LongFormTradeTimeExtAttr = get_longform_trade_time(object);
  P2_LongFormType = select(py("FLongFormCustomUtils_P2", context).get_Collateral_Trade_Face_Value(object.Trade) > 0, 
  true->"REVERSE REPO", 
  false->"REPO");
  P2_LongFormUnexecutedNominal = select(py("FLongFormCustomUtils_P2", context).get_longform_unexecuted_nominal(object.Trade), 
  nil->nil, 
  default->LongFormNominalAmount + P2_LongFormEndInterest);
  P2_LongFormUpperRange = select(object.Trade.Instrument.InsType == "Deposit", 
  true->object.Trade.HedgeTrade.Instrument.Exotic.RangeAccrualCap, 
  false->object.Trade.Instrument.Exotic.RangeAccrualCap);
  P2_LongFormUSDRate = py("FLongFormCustomUtils_P2", context).get_USD_Rate(object.Trade);
  P2_LongFormValueDate = py("FLongFormCustomUtils_P2", context).date_formatter(py("FLongFormCustomUtils_P2", context).get_longform_value_date(object.Trade));
  P2_LongFormValueDate_Eng = py("FLongFormCustomUtils_P2", context).date_formatter_eng(dateToYMD(object.Trade.ValueDay));
  P2_LongFormValueDayExtAttr = py("FLongFormCustomUtils_P2", context).date_formatter(get_longform_value_day(object));
  P2_LongFormValueEndDate = py("FLongFormCustomUtils_P2", context).date_formatter_eng(dateToYMD(object.Trade.Instrument.EndDate));
  P2_LongFormValueStartDate = py("FLongFormCustomUtils_P2", context).date_formatter_eng(dateToYMD(object.Trade.Instrument.StartDate));
  P2_LongFormWHT = tradeConf:WHT;
  P2_LongFormWHTCurrency = tradeConf:WHTCurrency;
  P2_LongFormYield = select(tradeConf :* "tradeYieldToMaturity", 
  nil->0, 
  default->tradeConf :* "tradeYieldToMaturity");
  P2_LongFormYourAccount = object.Trade.MoneyFlows.Last.CounterpartyAccount.Bic;
  P2_LongFormYourAccount_BondRepo = select(object.Trade.Instrument.InsType, 
  "Bond"->py("FLongFormCustomUtils_P2", context).bondrepo_account(object.Trade).CounterpartyAccount.Bic, 
  "Bill"->py("FLongFormCustomUtils_P2", context).bondrepo_account(object.Trade).CounterpartyAccount.Bic, 
  "FRN"->py("FLongFormCustomUtils_P2", context).bondrepo_account(object.Trade).CounterpartyAccount.Bic, 
  "Repo/Reverse"->LongFormYourAccount_Repo, 
  "BasketRepo/Reverse"->LongFormYourAccount_Repo, 
  "Basket Repo/Reverse Legacy"->LongFormYourAccount_Repo);
  P2_LongFormYourAccount_CCS_CCY1 = select(object.Trade.Instrument.InsType, 
  "CurrSwap"->py("FLongFormCustomUtils_P2", context).ccs_ccy1_youraccount(object.Trade).Bic);
  P2_LongFormYourAccount_CCS_CCY2 = select(object.Trade.Instrument.InsType, 
  "CurrSwap"->py("FLongFormCustomUtils_P2", context).ccs_ccy2_youraccount(object.Trade).Bic);
  P2_LongFormYourAccount_CCS_IDR = select(object.Trade.Instrument.InsType, 
  "CurrSwap"->py("FLongFormCustomUtils_P2", context).ccs_idr_youraccount(object.Trade));
  P2_LongFormYourAccount_CCS_USD = select(object.Trade.Instrument.InsType, 
  "CurrSwap"->py("FLongFormCustomUtils_P2", context).ccs_usd_youraccount(object.Trade));
  P2_LongFormYourAccount_CouponBond = select(object.EventType, 
  "Coupon Advice"->select(object.Trade.Instrument.InsType, 
    "Bond"->py("FLongFormCustomUtils_P2", context).couponbond_youraccount(object.Trade)));
  P2_LongFormYourAccount_DNDF = py("FLongFormCustomUtils_P2", context).dndf_youraccount(object.Trade);
  P2_LongFormYourAccount_FXCash = py("FLongFormCustomUtils_P2", context).fx_youraccount(object.Trade).Bic;
  P2_LongFormYourAccount_FXOption = py("FLongFormCustomUtils_P2", context).fxoption_account(object.Trade).CounterpartyAccount.Bic;
  P2_LongFormYourAccount_IRS = select(object.Trade.Instrument.InsType, 
  "Swap"->py("FLongFormCustomUtils_P2", context).irs_youraccount(object.Trade));
  P2_LongFormYourAccount_Repo = py("FLongFormCustomUtils_P2", context).repo_account(object.Trade).CounterpartyAccount.Bic;
  P2_LongFormYourAccountCorrBank_BondRepo = select(object.Trade.Instrument.InsType, 
  "Bond"->py("FLongFormCustomUtils_P2", context).bondrepo_account(object.Trade).CounterpartyAccount.CorrespondentBank, 
  "Bill"->py("FLongFormCustomUtils_P2", context).bondrepo_account(object.Trade).CounterpartyAccount.CorrespondentBank, 
  "FRN"->py("FLongFormCustomUtils_P2", context).bondrepo_account(object.Trade).CounterpartyAccount.CorrespondentBank, 
  "Repo/Reverse"->py("FLongFormCustomUtils_P2", context).repo_account(object.Trade).CounterpartyAccount.CorrespondentBank, 
  "BasketRepo/Reverse"->py("FLongFormCustomUtils_P2", context).repo_account(object.Trade).CounterpartyAccount.CorrespondentBank, 
  "Basket Repo/Reverse Legacy"->py("FLongFormCustomUtils_P2", context).repo_account(object.Trade).CounterpartyAccount.CorrespondentBank);
  P2_LongFormYourAccountName = object.Trade.MoneyFlows.Last.CounterpartyAccount;
  P2_LongFormYourAccountName_BondRepo = select(object.Trade.Instrument.InsType, 
  "Bond"->py("FLongFormCustomUtils_P2", context).bondrepo_account(object.Trade).CounterpartyAccount, 
  "Bill"->py("FLongFormCustomUtils_P2", context).bondrepo_account(object.Trade).CounterpartyAccount, 
  "FRN"->py("FLongFormCustomUtils_P2", context).bondrepo_account(object.Trade).CounterpartyAccount, 
  "Repo/Reverse"->LongFormYourAccountNumber_Repo, 
  "BasketRepo/Reverse"->LongFormYourAccountNumber_Repo, 
  "Basket Repo/Reverse Legacy"->LongFormYourAccountNumber_Repo);
  P2_LongFormYourAccountName_CCS_CCY1 = select(object.Trade.Instrument.InsType, 
  "CurrSwap"->py("FLongFormCustomUtils_P2", context).ccs_ccy1_youraccount(object.Trade));
  P2_LongFormYourAccountName_CCS_CCY2 = select(object.Trade.Instrument.InsType, 
  "CurrSwap"->py("FLongFormCustomUtils_P2", context).ccs_ccy2_youraccount(object.Trade));
  P2_LongFormYourAccountName_CouponBond = select(object.EventType, 
  "Coupon Advice"->select(object.Trade.Instrument.InsType, 
    "Bond"->py("FLongFormCustomUtils_P2", context).couponbond_youraccountname(object.Trade)));
  P2_LongFormYourAccountName_FXCash = py("FLongFormCustomUtils_P2", context).fx_youraccount(object.Trade);
  P2_LongFormYourAccountName_FXOption = py("FLongFormCustomUtils_P2", context).fxoption_account(object.Trade).CounterpartyAccount;
  P2_LongFormYourAccountName_Repo = py("FLongFormCustomUtils_P2", context).repo_account(object.Trade).CounterpartyAccount;
  P2_LongFormYourAccountNumber = object.Trade.MoneyFlows.Last.CounterpartyAccount.Account;
  P2_LongFormYourAccountNumber_BondRepo = select(object.Trade.Instrument.InsType, 
  "Bond"->py("FLongFormCustomUtils_P2", context).bondrepo_account(object.Trade).CounterpartyAccount.Account, 
  "Bill"->py("FLongFormCustomUtils_P2", context).bondrepo_account(object.Trade).CounterpartyAccount.Account, 
  "FRN"->py("FLongFormCustomUtils_P2", context).bondrepo_account(object.Trade).CounterpartyAccount.Account, 
  "Repo/Reverse"->P2_LongFormYourAccountNumber_Repo, 
  "BasketRepo/Reverse"->P2_LongFormYourAccountNumber_Repo, 
  "Basket Repo/Reverse Legacy"->P2_LongFormYourAccountNumber_Repo);
  P2_LongFormYourAccountNumber_CCS_CCY1 = select(object.Trade.Instrument.InsType, 
  "CurrSwap"->py("FLongFormCustomUtils_P2", context).ccs_ccy1_youraccountnumber(object.Trade));
  P2_LongFormYourAccountNumber_CCS_CCY2 = select(object.Trade.Instrument.InsType, 
  "CurrSwap"->py("FLongFormCustomUtils_P2", context).ccs_ccy2_youraccountnumber(object.Trade));
  P2_LongFormYourAccountNumber_CCS_IDR = select(object.Trade.Instrument.InsType, 
  "CurrSwap"->py("FLongFormCustomUtils_P2", context).ccs_idr_youraccountnumber(object.Trade));
  P2_LongFormYourAccountNumber_CCS_USD = select(object.Trade.Instrument.InsType, 
  "CurrSwap"->py("FLongFormCustomUtils_P2", context).ccs_usd_youraccountnumber(object.Trade));
  P2_LongFormYourAccountNumber_CouponBond = select(object.EventType, 
  "Coupon Advice"->select(object.Trade.Instrument.InsType, 
    "Bond"->py("FLongFormCustomUtils_P2", context).couponbond_youraccountnumber(object.Trade)));
  P2_LongFormYourAccountNumber_DNDF = py("FLongFormCustomUtils_P2", context).dndf_youraccountnumber(object.Trade);
  P2_LongFormYourAccountNumber_FXCash = py("FLongFormCustomUtils_P2", context).fx_youraccount(object.Trade).Account;
  P2_LongFormYourAccountNumber_FXOption = py("FLongFormCustomUtils_P2", context).fxoption_account(object.Trade).CounterpartyAccount.Account;
  P2_LongFormYourAccountNumber_IRS = select(object.Trade.Instrument.InsType, 
  "Swap"->py("FLongFormCustomUtils_P2", context).irs_youraccountnumber(object.Trade));
  P2_LongFormYourAccountNumber_Repo = py("FLongFormCustomUtils_P2", context).repo_account(object.Trade).CounterpartyAccount.Account;
  P2_LongFormYourCorrespondentBank = select(count(accountCounterpartyConf :* "accountCorrespondentBank") > 0, 
  true->(accountCounterpartyConf :* "accountCorrespondentBank").At(0), 
  false->nil);
  Premium1 = object.Trade.DealPackage.Trades.At(0).Premium;
  Premium2 = object.Trade.DealPackage.Trades.At(1).Premium;
  Premium3 = object.Trade.DealPackage.Trades.At(2).Premium;
  Premium4 = object.Trade.DealPackage.Trades.At(3).Premium;
  Premium5 = object.Trade.DealPackage.Trades.At(4).Premium;
  Premium6 = object.Trade.DealPackage.Trades.At(5).Premium;
  priceConf = object.Trade.Instrument.Prices;
  tradeConf = object.Trade;
  Valuedate1 = object.Trade.DealPackage.Trades.At(0).ValueDay;
  Valuedate2 = object.Trade.DealPackage.Trades.At(1).ValueDay;
  Valuedate3 = object.Trade.DealPackage.Trades.At(2).ValueDay;
  Valuedate4 = object.Trade.DealPackage.Trades.At(3).ValueDay;
  Valuedate5 = object.Trade.DealPackage.Trades.At(4).ValueDay;
  Valuedate6 = object.Trade.DealPackage.Trades.At(5).ValueDay;
}

clx FInstrumentAndTrades [FExtensionAttribute] {
  presentValueBucketsLongForm = select(timeBucketsSetExternally, 
  nil->presentValue, 
  default->scenarioaxis(presentValue, timeDistributionPerimeterNames, <["timeDistributionBucket"], , , timeBucketsSetExternally>, <["timeApportionmentType"], , , timeApportionmentTypeSelected>, <"timeDistributionDateRule", , "fixedvariant", "TheoreticalValueProjectionDate">));
}

clx FLeg [FExtensionAttribute] {
  cashflowSelect = object.CashFlows;
}

clx FPrice [FExtensionAttribute] {
  priceBid = object.Bid;
}

clx FSingleInstrumentAndTrades [FExtensionAttribute] {
  Nominal1 = object.Trades.DealPackage.Trades.At(0).Nominal;
  Nominal2 = object.Trades.DealPackage.Trades.At(1).Nominal;
  Nominal3 = object.Trades.DealPackage.Trades.At(2).Nominal;
  Nominal4 = object.Trades.DealPackage.Trades.At(3).Nominal;
  Nominal5 = object.Trades.DealPackage.Trades.At(4).Nominal;
  Nominal6 = object.Trades.DealPackage.Trades.At(5).Nominal;
  P2_LongFormEndInterest = object.Trade.Amount;
  Premium1 = object.Trades.DealPackage.Trades.At(0).Premium;
  Premium2 = object.Trades.DealPackage.Trades.At(1).Premium;
  Premium3 = object.Trades.DealPackage.Trades.At(2).Premium;
  Premium4 = object.Trades.DealPackage.Trades.At(3).Premium;
  Premium5 = object.Trades.DealPackage.Trades.At(4).Premium;
  Premium6 = object.Trades.DealPackage.Trades.At(5).Premium;
  Valuedate1 = object.Trades.DealPackage.Trades.At(0).Valueday;
  Valuedate2 = object.Trades.DealPackage.Trades.At(1).Valueday;
  Valuedate3 = object.Trades.DealPackage.Trades.At(2).Valueday;
  Valuedate4 = object.Trades.DealPackage.Trades.At(3).Valueday;
  Valuedate5 = object.Trades.DealPackage.Trades.At(4).Valueday;
  Valuedate6 = object.Trades.DealPackage.Trades.At(5).Valueday;
}

decls[FParameters] {
}

clx FObject [FParameters] {
  FLongFormConfirmationOut_Config =
  AppendOriginalReport=0
  ApplicationName=LongformTradeConfirmation
  BPRCommitRetry=5
  builddate=15-Mar-2023
  ConfirmationStates=[]
  CustomColumnsModule=LongFormColumns
  DefaultMergeFieldsTag=<M>
  DefaultTransportTypes=['File','Email']
  EmailPassword=0yGtl2v8
  EmailUserName=ntcsovb_uat
  FAXServer=
  LibreExePath=C:\Program Files\LibreOffice\program\soffice.exe
  LibreOffice=True
  LibrePdfTimeout=10
  LongformPath=C:\Longform\outgoing_messages
  ReportAsPDF=1
  SecureSMTPConnection=False
  SMTPServer=webmail.supporting.devmandiri.co.id
  StateChart=FLongformTradeConfirmationOut
  TemplateAndReportAccessOpsName=TemplateAndReportPermission
  TemplatePassword=
  TempPath=
  UpdateWordUponOpen=False
  version=1.0.9.757


  FLongFormConfirmationOutNotify_Config =
  LogLevel=DEBUG  # INFO, DEBUG, ERROR, WARN
  NotificationLevel=TRACK  # TRACK, DEBUG, WARNING, ERROR, SUCCESS
  NotificationMedia=OFF  # OFF, PRIME_LOG, PRIME_LOG_TRANSIENT
  NotifyUser=


}

decls[FPythonCode] {
}

clx FObject [FPythonCode] {
  FLongFormConfirmationHooks
"""----------------------------------------------------------------------------
MODULE
    FLongFormConfirmationHooks
CLASS
    GenerateLongFormControl
    LongformChecksumControl
    LongformEmailHook
    LongformFaxHook
    TransportType
    LongformStateChartAndProcessingClass

VERSION: 1.0.9-0.5.757

DESCRIPTION
    This module provides the customizable class for deciding if the Longform message is
    generated or not.
----------------------------------------------------------------------------"""
import FLongFormConfirmationHooksBase
import FLongFormConfig

class GenerateLongFormControl(FLongFormConfirmationHooksBase.GenerateLongFormControlBase):
    """ Class to control generation of confirmation reports """
    def generate_message(self):
        """
        This function decides whether the message is generated or not.
        Return True to generate the message from LongformTradeConfirmation, False to generate
        message from Adaptive.
        @return: boolean
        """
        return super().generate_message()


class LongformChecksumControl(FLongFormConfirmationHooksBase.LongformChecksumControlBase):
    """ Class to control and calculate the checksum for the confirmation """
    def calculate_checksum(self):
        """
        This function calculates the checksum for the confirmation
        @return: string
        """
        return super().calculate_checksum()


class LongFormReport(FLongFormConfirmationHooksBase.LongFormReportBase):
    ''' Class to configure report name, route path for "File" transport type'''
    def get_longform_report_name(self, default_name):
        """
        This function is for customizing the report name while generating the report.
        self.confirmation_obj : holds reference to confirmation object
        @param confirmation_obj: acm.FConfirmation object
        @return: string
        By default name of report would be in format: <conf_Id>_<reportform_name>_Msg
        Example:
            return "conf_report_for_conterparty"
        """
        return super().get_longform_report_name(default_name)

    def get_longform_route_path(self, longform_path):
        """
        This function is for customizing the longform path while routing the report.
        self.confirmation_obj : holds reference to confirmation object
        @param confirmation_obj: acm.FConfirmation object
        @return: string
        """
        return super().get_longform_route_path(longform_path)

class LongformEmailHook(FLongFormConfirmationHooksBase.LongformEmailHookBase):
    ''' Class to provide hooks for Email transport type.'''
    
    def __is_valid_repo(self):
        return self.confirmation_obj.Trade().TradeInstrumentType() == "BasketRepo/Reverse"
        
    def create_email_body_template(self, body="", footer=""):
        """This wraps body and footer contents under HMTL template.
        @param body: string type
        @param footer: string type
        @return : HTML string type
        """
        return super().create_email_body_template(body, footer)

    def get_email_body(self):
        '''
        This function returns email body content in string format.
        @return: string
        Plain text or HTML enabled text both can be return as string.
        NOTE: Don't provide <html> <body> root tags.
              as whatever return by this function will be wrapped under <body> tag.
        Example:
            Plain text:
                return "This is email body as plan text content."

            HTML text:
                return """<h2> This is email body with HTML Content</h2>
                            <p style="color:red">This paragraph is in red forecolor.</p>
                        """
        '''
        
        return "Dear Sir / Madam,<br><br>This is an auto-generated E-mail<br>Please find attached confirmation for subject transaction.<br>If there is any discrepancy with this trade, please advise us immediately.<br><br>Our contact number : +6221 -5245513/5245521/5245517<br>email address : stl@bankmandiri.co.id"

    def get_email_footer(self):
        '''
        This function returns email footer which will be included at end of every message.
        Must return footer content as string type.
        @return: string
        Plain text or HTML enabled text both can be return as string.

        NOTE: Don't provide <html> <body> root tags.
              as whatever return by this function will be wrapped under <body> tag.
        Ex:
            Plain text:
                return "This is email footer."

            HTML text:
                return """<h2> This is email footer</h2>
                            <p style="color:red">footer in red color</p>
                        """
        '''
        return super().get_email_footer()

    def get_email_subject(self):
        """
        This function returns subject for email. Must be in string format.
        @return: email subject content as string type
        Example:
          return "new email subject for every email"
        """
        if self.__is_valid_repo():
            return f"Repo Trade Confirmation Bank Mandiri - {self.confirmation_obj.Counterparty().Name()}, {self.confirmation_obj.Trade().TradeTimeDateOnly()}"
            
        elif self.confirmation_obj.EventType() == "Payment Advice" or self.confirmation_obj.EventType() == "Rate Fixing":
            return f"Bank Mandiri Payment Confirmation - {self.confirmation_obj.Trade().OptKey3().Name()}, {self.confirmation_obj.Trade().Oid()},{self.confirmation_obj.Trade().TradeTimeDateOnly()}"
        else:
            return f"Bank Mandiri Trade Confirmation - {self.confirmation_obj.Trade().OptKey3().Name()}, {self.confirmation_obj.Trade().Oid()},{self.confirmation_obj.Trade().TradeTimeDateOnly()}"

    def get_sender_email(self, sender_email):
        """
        This function returns sender email address. Must return email as string.
        @return: string
        Example:
            return "sender_email@fisglobal.com"
        """
        return super().get_sender_email(sender_email)

    def get_receiver_emails(self, receiver_email):
        """
        This function returns reciever(TO:) email addresses. Must return emails as list.
        @return: List of email id's
        Example:
            return ["abc@fisglobal.com", "xyz@fisglobal.com"]
        """
        return super().get_receiver_emails(receiver_email)

    def get_CC_emails(self):
        """
        This function returns reciever(CC:) email addresses. Must return emails as list.
        @return: List of email id's
        Example:
            return ["abc_cc@fisglobal.com", "xyz_cc@fisglobal.com"]
        """
        return super().get_CC_emails()

    def get_BCC_emails(self):
        """
        This function returns reciever(BCC:) email addresses. Must return emails as list.
        @return: List of email id's
        Example:
            return ["abc_bcc@fisglobal.com", "xyz_bcc@fisglobal.com"]
        """
        return super().get_BCC_emails()

    def get_attachment_list(self):
        """
        This function returns list of all files with absolute path which needs to be attached
        in email.
        @return: List of files with absolute path.
        Example:
            return ["c:\\longform\\legal_notice.pdf"]
        """
        return super().get_attachment_list()

    def get_report_name(self):
        """
        This function returns name of report while sending email.
        @return: string
        Example:
           return "new_name_of_report"
        """
        return super().get_report_name()
    
    def get_email_password(self):
        """ Function to get email address password or username for SMTP Server login """
        return getattr(FLongFormConfig.CONFIG_PARAM_OBJ, 'EmailPassword', '')


class LongformFaxHook(FLongFormConfirmationHooksBase.LongformFaxHookBase):
    """Class to provide customization for Fax transport type.
    """

    def create_fax_body_template(self, body="", footer=""):
        """This wraps/attach body and footer contents in sigle string.
        @param body: string type
        @param footer: string type
        @return : Plain string type
        """
        return super().create_fax_body_template(body, footer)

    def get_fax_body(self):
        '''
        This function returns Fax body content in string format.
        Must return footer content as string type.
        @return: string
        '''

        return super().get_fax_body()

    def get_fax_footer(self):
        '''
        This function returns Fax footer which will be included at end of every message.
        Must return footer content as string type.
        @return: string
        '''
        return super().get_fax_footer()

    def get_fax_subject(self):
        """
        This function returns subject for Fax. Must be in string format.
        @return: fax subject content as string type
        Example:
          return "new fax subject for every fax"
        """
        return super().get_fax_subject()

    def get_fax_sender_id(self):
        """
        This function returns sender fax address. Must return sender id as string type.
        @return: string
        Example:
            return "1235_fax@fisglobal.com"
        """
        return super().get_fax_sender_id()

    def get_fax_reciever_ids(self):
        """
        This function returns reciever(TO:) fax addresses. Must return fax id's as a list.
        @return: List of Fax id's
        Example:
            return ["1235_fax@fisglobal.com", "1235_fax@fisglobal.com"]
        """
        return super().get_fax_reciever_ids()

    def get_attachment_list(self):
        """
        This function returns list of all files with absolute path which needs to be attached
        in email.
        @return: List of files with absolute path.
        Example:
            return ["c:\\longform\\legal_notice.pdf"]
        """
        return super().get_attachment_list()

    def get_report_name(self):
        """
        This function returns name of report while sending email.
        @return: string
        Example:
           return "new_name_of_report"
        """
        return super().get_report_name()


class TransportType(FLongFormConfirmationHooksBase.TransportTypeBase):
    '''Class to configure multiple transport types and file_type'''
    def get_other_transports(self, confirmation_obj):
        """
        This extension point is provided for configuring transport types when TransportType="Other"
        in Confirmation Instruction of counter party.

        This executes only if ConfirmationInstruction.TransportType set to "Other"

        Supported transport type : File, Email, Mail, Fax, Custom.

        @param confirmation_obj: acm.FConfirmation object
        @return: List of transport type

        Example:
        return ["File", "Email"]
        """
        return super().get_other_transports(confirmation_obj)

    def get_file_type(self, confirmation_obj):
        """
        This extension point is provided for configuring file types(pdf or docx)
        @param confirmation_obj: acm.FConfirmation object
        @return: File type (pdf or docx)
        Example:
        return "pdf"
        """
        return super().get_file_type(confirmation_obj)

class LongformStateChartAndProcessingClass(FLongFormConfirmationHooksBase.\
                                           LongformStateChartAndProcessingClassBase):
    '''This class provides hooks/function for modify/add transport type mapping with
       it's associated statechart name and processing class type object.
       Mapping is defined as below format:
        {<TransportType> : (<StateChartName> , <ProcessingClassName>)}

      ex:
       {'file'  : ['FLongFormSimpleFileRouting', FLongFormConfFileRoutingProcessing],
        'email' : ['FLongFormSimpleEmailRouting', FLongFormConfEmailRoutingProcessing],
        'fax' :   ['FLongFormSimpleFaxRouting', FLongFormConfFaxRoutingProcessing],
        'mail' : ['FLongFormSimpleMailRouting', FLongFormConfMailRoutingProcessing]
        }

    '''
    def get_transportType_stateChart_processingCls_map(self):
        '''This returns dictionay object which holds mapping of every transport type with
           it's associated statechart name and processing class.

           {'file'  : ['FLongFormSimpleFileRouting', FLongFormConfFileRoutingProcessing],
            'email' : ['FLongFormSimpleEmailRouting', FLongFormConfEmailRoutingProcessing],
            'fax' :   ['FLongFormSimpleFaxRouting', FLongFormConfFaxRoutingProcessing],
            'mail' : ['FLongFormSimpleMailRouting', FLongFormConfMailRoutingProcessing]
            }

         example:
          To add new transport type:
              import NewProcessingCls
              new_ttype = {'New_Transport_Type' : ['State_Chart_Name', NewProcessingCls]}
              self.transportType_stateChart_processingCls.update(new_ttype)
              return self.transportType_stateChart_processingCls

         example:
            To add new transport type Archival:

            from FLongFormConfirmationRoutingProcessing import FLongFormConfArchiveRoutingProcessing
            new_ttype = {'Archival': ['FLongFormSimpleArchivalRouting',
                                        FLongFormConfArchiveRoutingProcessing]}
            self.transportType_stateChart_processingCls.update(new_ttype)
            return self.transportType_stateChart_processingCls

         To modify existing transport type:
             st_name_pc_list = self.transportType_stateChart_processingCls.get('file')
             st_name_pc_list[0] = 'New_statchart_name'
             self.transportType_stateChart_processingCls['file'] = st_name_pc_list
             return self.transportType_stateChart_processingCls

        '''
        return super().get_transportType_stateChart_processingCls_map()

class LongformDocumentData(FLongFormConfirmationHooksBase.LongformDocumentDataBase):
    """class to customise docx data and manage access rights on external and text objects"""
    def __init__(self, confirmation_obj):
        """
        Initialization function of the class
        @param confirmation_obj: acm.FConfirmation object
        self.confirmation_obj : holds reference to confirmation object
        """
        self.conf = confirmation_obj
        super().__init__(confirmation_obj)

    def get_longform_docx_data(self, data, report_name):
        """
        This function is for customizing the Docx Data.
        @param: data : Default Data.
        @param: data : report name for Pdf generation.
        @return: string
        """
        return super().get_longform_docx_data(data, report_name)

    def update_access_rights_on_external_object(self, external_obj):
        """
        This function is for giving rights for external object.
        """
        return super().update_access_rights_on_external_object(external_obj)

    def update_access_rights_on_text_object(self,text_object, external_object):
        """
        This function is for giving rights for external object and CustomTextObject.
        If we change external object rights it is mandatory to give rights to CustomTextObject also.
        """
        return super().update_access_rights_on_text_object(text_object, external_object)


class LongFormSourceData(FLongFormConfirmationHooksBase.LongFormSourceData):
    """ Class Represent Source Data """
    def get_source_data_dict(self, confirmation_obj, field_map = None):
        """ Returns dict for confirmation column data
        """
        return super().get_source_data_dict(confirmation_obj, field_map)

class LongFormPDFSettings(FLongFormConfirmationHooksBase.LongFormPDFSettings):
    """ Class Represent PDF related settings """
    def get_password_for_pdf_encryption(self):
        """ Function can be modified to write custom logic to get password for PDF
        """
        return super().get_password_for_pdf_encryption()

class LongFormDealPackageDataExtPoint(FLongFormConfirmationHooksBase.\
                                      LongFormDealPackageDataExtPoint):
    """ Class Represent Data and Template modification settings for Deal Package """
    def get_dictionary_deal_package(self):
        """ Templates fields can be customised, for example:
        deal_package_dict.update({'currency': 'currency.Name'}),
        currency.Name value will be fetched from acm and currency field in template
        will be populated"""
        deal_package_params = {
            'deal_package_trades' : 'Trades',
        }

        deal_package_dict = {}
        deal_package_dict.update(deal_package_params)
        return deal_package_dict
        #return super().get_dictionary_deal_package()
        
    def get_non_loop_dict(self, acm_obj, non_loop_dict):
        """ User has access to dictionary containing non loop fields and values,
        user can make modification to these field values as per requirement"""
        import acm
        
        for trade in acm_obj.Trades():
            for payment in trade.Payments():
                if payment.Type() == "WHT":
                    wht_amount = payment.Amount()
                    wht_curr = payment.Currency().Name()
                
                if payment.Type() == "Premium":
                    add_premium_amount = payment.Amount()
                    add_premium_curr = payment.Currency().Name()
                
        if non_loop_dict is None:
            non_loop_dict = {}
        
        # Get the Deal Package Type first
        
        dp_type = acm_obj.Definition().Name()
        if "FXRatioParForward" in dp_type:
            conf_trade = acm_obj.Trades().First()
            
            for mf in conf_trade.MoneyFlows():
                if mf.Type() == "Premium":
                    our_account = mf.CounterpartyAccount().Bic()
                    if our_account == None:
                        our_account = mf.CounterpartyAccount().Account()
                    else:
                        our_account = f"{mf.CounterpartyAccount().Bic().Name()}/{mf.CounterpartyAccount().Account()}"
                    
                if mf.Type() == "Premium 2":
                    your_account = mf.CounterpartyAccount().Bic()
                    if your_account == None:
                        your_account = mf.CounterpartyAccount().Account()
                    else:
                        your_account = f"{mf.CounterpartyAccount().Bic().Name()}/{mf.CounterpartyAccount().Account()}"
                    
            non_loop_dict_params = {
                'our_account' : str(our_account),
                'your_account' : str(your_account),
                'dp_nbr': str(acm_obj.Original().Oid())
            }
            non_loop_dict.update(non_loop_dict_params)
            return non_loop_dict

        if "DepositSwap" in dp_type:
            fx_near_trade = None
            fx_far_trade = None
            deposit_trade = None
            
            # FX Trade is taken from the FX Trade with furthest Acquire Day
            for trade in acm_obj.Trades():
                if trade.Instrument().Cid() == "Curr":
                    if trade.DealPackageTradeLinkName() == "FXSwapNear":
                        fx_near_trade = trade
                    
                    if trade.DealPackageTradeLinkName() == "FXSwapFar":
                        fx_far_trade = trade
                
                if trade.Instrument().Cid() == "Deposit":
                    deposit_trade = trade
            
            for mf in fx_far_trade.MoneyFlows():
                if mf.Type() == "Premium":
                    our_account = mf.CounterpartyAccount().Bic()
                    if our_account == None:
                        our_account = mf.CounterpartyAccount().Account()
                    else:
                        our_account = f"{mf.CounterpartyAccount().Bic().Name()}/{mf.CounterpartyAccount().Account()}"
                    
                if mf.Type() == "Premium 2":
                    your_account = mf.CounterpartyAccount().Bic()
                    if your_account == None:
                        your_account = mf.CounterpartyAccount().Account()
                    else:
                        your_account = f"{mf.CounterpartyAccount().Bic().Name()}/{mf.CounterpartyAccount().Account()}"
                    
            aftertax = ' '
            aftertax_curr = ' '
            wht = None
            for settlement in acm_obj.Settlements():
                if str(settlement.SettlementType()) == "None":
                    aftertax = abs(settlement.Amount())
                    aftertax_curr = settlement.Currency().Name()
            end_interest = deposit_trade.EndCash() - deposit_trade.Nominal()
            hasil_pajak = end_interest - wht_amount
            
            non_loop_dict_params = {
                'nasabah': str(fx_near_trade.Counterparty().Fullname()),
                'dp_nbr': str(acm_obj.Original().Oid()),
                'curr_pair': str(fx_near_trade.CurrencyPair().Name()),
                'near_spot': str(abs(round(fx_near_trade.Price(),5))),
                'far_spot': str(abs(round(fx_far_trade.Price(),5))),
                'far_valueday': str(fx_far_trade.ValueDay()),
                'near_valueday': str(fx_near_trade.ValueDay()),
                'near_amount': str(abs(fx_near_trade.Nominal())),
                'far_amount': str(abs(fx_far_trade.Nominal())),
                'near_premium': str(fx_near_trade.Quantity()),
                'far_premium': str(abs(fx_far_trade.Nominal())),
                'orig_currency': str(fx_near_trade.CurrencyPair().Currency1().Name()),
                'subs_currency': str(fx_near_trade.CurrencyPair().Currency2().Name()),
                'our_account' : str(our_account),
                'your_account' : str(your_account),
                'wht_amount': str(wht_amount),
                'wht_curr': str(wht_curr),
                'after_tax': str(aftertax),
                'after_tax_curr': str(aftertax_curr),
                'trade_time' : str(fx_near_trade.TradeTimeDateOnly())
            }
            non_loop_dict.update(non_loop_dict_params)
            return non_loop_dict
        
        if "DualCurrencyDeposit" in dp_type:
            deposit_trade = None
            option_trade = None
            
            for trade in acm_obj.Trades():
                if trade.Instrument().Cid() == "Option":
                    option_trade = trade
                
                if trade.Instrument().Cid() == "Deposit":
                    deposit_trade = trade
            
            for mf in deposit_trade.MoneyFlows():
                if mf.Type() == "Premium":
                    our_account = mf.AcquirerAccount().Bic()
                    your_account = mf.CounterpartyAccount().Bic()
                    
                    if our_account == None:
                        our_account = mf.AcquirerAccount().Account()
                    else:
                        our_account = f"{mf.AcquirerAccount().Bic().Name()}/{mf.AcquirerAccount().Account()}"
                        
                    if your_account == None:
                        your_account = mf.CounterpartyAccount().Account()
                    else:
                        your_account = f"{mf.CounterpartyAccount().Bic().Name()}/{mf.CounterpartyAccount().Account()}"
                        
                        
                    
            end_interest = option_trade.EndCash() - option_trade.Nominal()
            
            hasil_pajak = deposit_trade.Premium() - wht_amount
            
            cash_amount = option_trade.Price()
            
            unexpected_nominal = cash_amount + hasil_pajak 
            
            fixing_date = acm.FCalendar["Jakarta"].AdjustBankingDays(option_trade.Instrument().ExpiryDate(), 2)
            
            non_loop_dict_params = {
                'nasabah': str(option_trade.Counterparty().Fullname()),
                'dp_nbr': str(acm_obj.Original().Oid()),
                'curr_pair': str(option_trade.CurrencyPair().Name()),
                'near_spot': str(acm_obj.Trades().Last().Price()),
                'far_spot': str(acm_obj.Trades().Mid().Price()),
                'trade_time': str(option_trade.TradeTime()),
                'fixed_rate': str(deposit_trade.Instrument().FirstReceiveLeg().FixedRate()),
                'start_date': str(deposit_trade.Instrument().StartDate()),
                'fixing_date': str(fixing_date),
                'value_day': str(option_trade.ValueDay()),
                'near_amount': str(acm_obj.Trades().Last().Quantity()),
                'orig_currency': str(option_trade.CurrencyPair().Currency1().Name()),
                'subs_currency': str(option_trade.CurrencyPair().Currency2().Name()),
                'ip_name': str(acm_obj.InstrumentPackage().Name()),
                'conversion_rate': str(option_trade.Instrument().StrikePrice()),
                'cashamount_value': str(deposit_trade.Premium()),
                'our_account' : str(our_account),
                'your_account' : str(your_account),
                'wht_amount': str(wht_amount),
                'wht_curr': str(wht_curr),
                'end_interest': str(end_interest),
                'hasil_pajak': str(hasil_pajak),
                'unexpected_nominal': str(unexpected_nominal),
            }
            non_loop_dict.update(non_loop_dict_params)
            return non_loop_dict

        if "MarketLinkedDeposit" in dp_type:
            deposit_trade = None
            option_trade = None
            
            tenor = acm.Time.DateDifference(trade.Instrument().ExpiryDateOnly(),trade.Instrument().StartDate())
            
            for trade in acm_obj.Trades():
                if trade.Instrument().Cid() == "Option":
                    option_trade = trade
                    non_loop_dict.update({
                        'fixing_source': str(option_trade.Instrument().FixingSource().Name()),
                        'mld_reference':str(option_trade.Instrument().AddInfoValue('sp_MLDReference').Name())
                    })
                    
                if trade.Instrument().Cid() == "Deposit":
                    deposit_trade = trade
                
                if trade.Instrument().Cid() == "Swap":
                    option_trade = trade # FOR MLD IR the 'option' trade is a SWAP
                    non_loop_dict.update({
                    'fixing_source': '-', 
                    'mld_reference':str(option_trade.Instrument().AddInfoValue('sp_MLDIRReference').Name())
                    })
            
            for mf in option_trade.MoneyFlows():
                if mf.Type() == "Premium" and option_trade.Instrument().Cid() == "Option":
                    our_account = mf.AcquirerAccount().Bic()
                    your_account = mf.CounterpartyAccount().Bic()
                    
                    if our_account == None:
                        our_account = mf.AcquirerAccount().Account()
                    else:
                        our_account = f"{mf.AcquirerAccount().Bic().Name()}/{mf.AcquirerAccount().Account()}"
                        
                    if your_account == None:
                        your_account = mf.CounterpartyAccount().Account()
                    else:
                        your_account = f"{mf.CounterpartyAccount().Bic().Name()}/{mf.CounterpartyAccount().Account()}"
                        
                if option_trade.Instrument().Cid() == "Swap" and mf.Type() == "Digital Caplet":
                    our_account = mf.AcquirerAccount().Bic()
                    your_account = mf.CounterpartyAccount().Bic()
                    
                    if our_account == None:
                        our_account = mf.AcquirerAccount().Account()
                    else:
                        our_account = f"{mf.AcquirerAccount().Bic().Name()}/{mf.AcquirerAccount().Account()}"
                        
                    if your_account == None:
                        your_account = mf.CounterpartyAccount().Account()
                    else:
                        your_account = f"{mf.CounterpartyAccount().Bic().Name()}/{mf.CounterpartyAccount().Account()}"
                        
            end_interest = deposit_trade.EndCash() + deposit_trade.Premium()
            non_loop_dict.update({'end_interest': str(end_interest)})    
        
            wht_amount = None
            wht_curr = None
            gross_interest = None
            for trade in acm_obj.Trades():
                for payment in trade.Payments():
                    if payment.Type() == "WHT":
                        wht_amount = payment.Amount()
                        wht_curr = payment.Currency().Name()
                        non_loop_dict.update({
                            'wht_amount': str(wht_amount),
                            'wht_curr': str(wht_curr),
                            }
                        )
                    if payment.Type() == "Premium":
                        add_premium_amount = payment.Amount()
                        add_premium_date = payment.PayDay()
                        add_premium_curr = payment.Currency().Name()
                        non_loop_dict.update({
                            'premium_amount' : str(round(add_premium_amount, 2)),
                            'premium_curr': str(add_premium_curr),
                            'premium_date': str(add_premium_date),
                            }
                        )
                    if payment.Type() == "MMLD Payment":
                        gross_interest = payment.Amount()
                        pay_date = payment.PayDay()
                        mmld_curr = payment.Currency().Name()
                        non_loop_dict.update({
                            'gross_interest': str(round(gross_interest, 2)),
                            'pay_date': str(pay_date),
                            'mmld_curr': str(mmld_curr),
                        })
            
            if gross_interest is not None and wht_amount is not None:
                net_interest = gross_interest - wht_amount
                non_loop_dict.update({'net_interest': str(net_interest)})
            
            cpty_contact = option_trade.Counterparty().Contacts().First()
            
            non_loop_dict_params = {
                'trade_number': str(acm_obj.Original().Oid()),
                'trade_cpty': str(option_trade.Counterparty().Fullname()),
                'trade_time': str(option_trade.TradeTimeDateOnly()),
                'start_date': str(deposit_trade.Instrument().StartDate()),
                'cash_amount':str(deposit_trade.Premium()),
                'buy_sell': str(option_trade.BoughtAsString()),
                'expiry_date': str(deposit_trade.Instrument().ExpiryDate()),
                'max_yield':str(option_trade.Instrument().AddInfoValue('sp_MLDMaxYield')),
                'premium_option':str(option_trade.Instrument().AddInfoValue('sp_MLDPremiumOption')),
                'rolling_period':str(option_trade.Instrument().AddInfoValue('sp_RollingPeriod')),
                'dp_nbr': str(acm_obj.Original().Oid()),
                'value_day':str(deposit_trade.ValueDay()),
                'ceiling':str(option_trade.Instrument().AddInfoValue('sp_MLDCeiling')),
                'floor':str(option_trade.Instrument().AddInfoValue('sp_MLDFloor')),
                'expiry':str(option_trade.Instrument().ExpiryDateOnly()),
                'domestic_currency': str(option_trade.Currency().Name()),
                'trade_acquirer': str(option_trade.Acquirer().Fullname()),
                'our_account': str(our_account),
                'your_account': str(your_account),
                'acq_email': str(option_trade.Acquirer().Email()),
                'acq_address': str(option_trade.Acquirer().Address()),
                'counterparty_b': str(option_trade.Counterparty().Fullname()),
                'cpty_email': str(cpty_contact.Email()),
                'cpty_address': str(cpty_contact.Address()),
                'cpty_address2': str(cpty_contact.Address2()),
                'cpty_city': str(cpty_contact.City()),
                'cpty_country': str(cpty_contact.Country()),
                'tenor': str(tenor),
                'maturity_date': str(deposit_trade.maturity_date())
            }
            non_loop_dict.update(non_loop_dict_params)
            return non_loop_dict
  
        return super().get_non_loop_dict(acm_obj, non_loop_dict)
    
    def get_loop_fields_list(self, acm_obj, loop_name, loop_fields_list):
        """ User has access to list of dictionary containing loop fields and values,
        user can make modification to these field values as per requirement"""
        return super().get_loop_fields_list(acm_obj, loop_name, loop_fields_list)

class LongFormDigitalSignSettings(FLongFormConfirmationHooksBase.LongFormDigitalSignSettings):
    """ Class Represent Image Path Settings to be used for ESign """
    def get_sign_image_settings(self):
        """ Returns dictionary containing settings related to Image"""
        return super().get_sign_image_settings()

    def get_sign_image_path(self):
        """ Returns dictionary containing PRIME username and the path where image
        of digital sign is present """
        return super().get_sign_image_path()

...

  FLongFormCustomUtils_P2
"""----------------------------------------------------------------------------
MODULE
    FLongFormCustomUtils_P2:
Description
    Utility functions for Longform modules
----------------------------------------------------------------------------"""

import acm, time, ael

def get_longform_value_day(conf):
    return str(conf.Trade().ValueDay())
    
def get_longform_expiry_day(conf):
    return str(conf.Trade().Instrument().ExpiryDate())
    
def get_longform_trade_time(conf):
    return str(conf.Trade().TradeTime())
    
def get_Last_Coupon_Date(trade):
    for each_leg in trade.Instrument().Legs():
        for cf in each_leg.CashFlows():
            if trade.ValueDay() >= cf.StartDate() and trade.ValueDay() <= cf.EndDate():
                return cf.StartDate()

def get_Next_Coupon_Date(trade):
    for each_leg in trade.Instrument().Legs():
        for cf in each_leg.CashFlows():
            if trade.ValueDay() >= cf.StartDate() and trade.ValueDay() <= cf.EndDate():
                return cf.EndDate()
    
def get_premium(conf):
    return conf.Trade().Premium()
    
def get_longform_trade_date(trade):
    tradeno = trade.Oid()
    x = acm.FTrade[tradeno]
    try:
        tempdate = x.TradeTime()
        resdate = time.strftime('%d-%b-%y', time.strptime( tempdate, '%Y-%m-%d %H:%M:%S' ) )
        return resdate
    except:
        return '01-Jan-0001'

def get_longform_value_date(trade):
    tradeno = trade.Oid()
    x = acm.FTrade[tradeno]
    try:
        tempdate = x.ValueDay()
        resdate = time.strftime('%d-%b-%y', time.strptime( tempdate, '%Y-%m-%d' ) )
        return resdate
    except:
        return '01-Jan-0001'
        
def get_longform_end_date(trade):
    tradeno = trade.Oid()
    x = acm.FTrade[tradeno]
    try:
        tempdate = x.Instrument().ExpiryDate()
        if tempdate == '':
            tempdate = x.Instrument().ExpiryTime()
            resdate = time.strftime('%d-%b-%y', time.strptime( time.ctime(tempdate) ) )
        else:
            resdate = time.strftime('%d-%b-%y', time.strptime( tempdate, '%Y-%m-%d %H:%M:%S' ) )
        return resdate
    except:
        return '01-Jan-0001'    

def get_longform_days_coupon(trade):
    tradeno = trade.Oid()
    x = acm.FTrade[tradeno]
    valday = acm.FTrade[tradeno].ValueDay()
    try:
        cashflows = x.Instrument().Legs()[0].CashFlows()
        for c in cashflows:
            if (valday >= c.StartDate()) and (valday <= c.EndDate()):
                return acm.Time.DateDifference(c.EndDate(), c.StartDate())
    except:
        return None

def get_longform_accrued_interest(trade):
    #tradeno = trade.Oid()
    #x = acm.FTrade[tradeno]
    try:
        calc_space = acm.Calculations().CreateStandardCalculationsSpaceCollection()
        trade_calc = trade.Calculation()
        accrued_interest = trade_calc.AccruedInterestSpotOverride(calc_space, acm.Time().SmallDate(), x.ValueDay(), 2).Value()
        accrued_interest = abs(accrued_interest.Number())
        accrued_interest = "{:,.5f}".format(accrued_interest)
        return abs(float(accrued_interest.replace(",","")))
    except:
        return None
    
def get_our_your_account(trade, tipe_acc, tipe_field):
    moneyflows = trade.MoneyFlows()
    for i in moneyflows:
        if 'Security' in i.Type() :
            if tipe_acc == 'Your' :
                pty_acc = i.AcquirerAccount()
            else:
                pty_acc = i.CounterpartyAccount()
                
            if tipe_field == 'Account' :
                return pty_acc.Account()
            else:
                return pty_acc.CorrespondentBank().Name()

    return ''
    
def get_longform_next_coupon_date(legs):

    if legs.Size()==1:
        for i in legs:
            if i.RollingPeriodUnit()=="Days":
                return acm.Time.DateAddDelta(i.RollingPeriodBase(), 0, 0, i.RollingPeriodCount())
            elif i.RollingPeriodUnit()=="Months":
                return acm.Time.DateAddDelta(i.RollingPeriodBase(), 0, i.RollingPeriodCount(), 0)
            elif i.RollingPeriodUnit()=="Years":
                return acm.Time.DateAddDelta(i.RollingPeriodBase(), i.RollingPeriodCount(), 0, 0)

def get_longform_interest_start_date(legs):
    
    if legs.Size()==2:
        if "receive" in legs[0].Description().lower():
            return legs[0].StartDate()
        elif "receive" in legs[1].Description().lower():
            return legs[1].StartDate()

def get_longform_interest_start_date2(trade):
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    legs = trade.Instrument().Legs()
    columnId = "Cash Analysis Projected"
    list=[]
    listdate=[]
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    for mf in trade.MoneyFlows():
        if mf.Type() == "Float Rate" and mf.PayDate() == acm.Time.DateToday():
            proj = calcSpace.CreateCalculation(mf, columnId).Value().Number()
            list.append(proj)
            listdate.append(mf.StartDate())
    listdate.sort()
    calcSpace.Clear()
    return listdate[0]

def get_longform_interest_end_date(legs):
    
    if legs.Size()==2:
        if "pay" in legs[0].Description().lower():
            return legs[0].EndDate()
        elif "pay" in legs[1].Description().lower():
            return legs[1].EndDate()

def get_longform_interest_end_date2(trade):
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    legs = trade.Instrument().Legs()
    columnId = "Cash Analysis Projected"
    list=[]
    listdate=[]
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    for mf in trade.MoneyFlows():
        if mf.Type() == "Float Rate" and mf.PayDate() == acm.Time.DateToday():
            proj = calcSpace.CreateCalculation(mf, columnId).Value().Number()
            list.append(proj)
            listdate.append(mf.EndDate())
    listdate.sort()
    calcSpace.Clear()
    return listdate[0]

def interest_pay_date(trade):
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    legs = trade.Instrument().Legs()
    columnId = "Cash Analysis Projected"
    list=[]
    listdate=[]
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    for mf in trade.MoneyFlows():
        if mf.PayDate() == acm.Time.DateToday():
            listdate.append(mf.PayDate())
    listdate.sort()
    calcSpace.Clear()
    return listdate[0]

def get_longform_interest_rate_fixed(legs):
    
    
    if legs.Size()==2:
        if "receive" in legs[0].Description().lower():
            return legs[0].FixedRate()
        elif "receive" in legs[1].Description().lower():
            return legs[1].FixedRate()
    else: return "-"

def get_longform_interest_rate_float(legs):
    
    if legs.Size()==2:
        if "pay" in legs[0].Description().lower():
            return legs[0].FixedRate()
        elif "pay" in legs[1].Description().lower():
            return legs[1].FixedRate()
    else: return "-"

def get_longform_nominal_interest_fixed(trade):
    
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    legs = trade.Instrument().Legs()
    columnId = "Cash Analysis Projected"

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)

    date_list=[]
    int_list=[]
    
    if legs.Size()==2:
        if "receive" in legs[0].Description().lower():
            for i in legs[0].CashFlows():
                if i.PayDate() > acm.DateToday():
                    date_list.append(i.PayDate())
                    int_list.append(calcSpace.CreateCalculation(i, columnId).Value().Number())
        elif "receive" in legs[1].Description().lower():
            for i in legs[1].CashFlows():
                if i.PayDate() > acm.DateToday():
                    date_list.append(i.PayDate())
                    int_list.append(calcSpace.CreateCalculation(i, columnId).Value().Number())
        calcSpace.Clear()
        return int_list



def get_longform_nominal_interest_float(trade):
    
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    legs = trade.Instrument().Legs()
    columnId = "Cash Analysis Projected"

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)

    date_list=[]
    int_list=[]
    
    if legs.Size()==2:
        if "pay" in legs[0].Description().lower():
            for i in legs[0].CashFlows():
                if i.PayDate() > acm.DateToday():
                    date_list.append(i.PayDate())
                    int_list.append(calcSpace.CreateCalculation(i, columnId).Value().Number())
        elif "pay" in legs[1].Description().lower():
            for i in legs[1].CashFlows():
                if i.PayDate() > acm.DateToday():
                    date_list.append(i.PayDate())
                    int_list.append(calcSpace.CreateCalculation(i, columnId).Value().Number())
        calcSpace.Clear()
        return int_list[date_list.index(min(date_list))]

def get_longform_unexecuted_nominal(trade):
    if 'MDCI' in trade.Instrument().Name():
        return trade.Instrument()

def get_longform_wht(trade):
    
    context = acm.GetDefaultContext()
    sheetType = 'FTradeSheet'
    ins = trade
    columnId = 'WHT'

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    calculation = calcSpace.CreateCalculation(ins, columnId)
    indicator = calculation.FormattedValue().replace(",","")
    if indicator == "":
        return 0
    else: return float(indicator)


def get_nominal_eqv_ccs_1(trade):
    
    context = acm.GetDefaultContext()
    sheetType = 'FTradeSheet'
    ins = trade
    columnId = 'Nominal Amount CCS Curr One'

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    calculation = calcSpace.CreateCalculation(ins, columnId)
    val = calculation.Value()
    if val:
        calcSpace.Clear()
        return val
        
    calcSpace.Clear()
    return None

def get_nominal_eqv_ccs_2(trade):
    
    context = acm.GetDefaultContext()
    sheetType = 'FTradeSheet'
    ins = trade
    columnId = 'Nominal Amount CCS Curr Two'

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    calculation = calcSpace.CreateCalculation(ins, columnId)
    val = calculation.Value()
    if val:
        calcSpace.Clear()
        return val
    
    calcSpace.Clear()
    return None
    
def get_market_price(trade):
    
   
    if trade.Instrument().InsType()=='Future/Forward':
        return trade.Price()
    else:
        context = acm.GetDefaultContext()
        sheetType = 'FTradeSheet'
        ins = trade
        columnId = 'Instrument Market Price'
        calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
        calculation = calcSpace.CreateCalculation(ins, columnId)
        indicator = calculation.FormattedValue()
        calcSpace.Clear()
        return indicator
    
def get_fxo_nominal_call(trade):
    
    context = acm.GetDefaultContext()
    sheetType = 'FTradeSheet'
    ins = trade
    columnId = 'Nominal Amount FXO Call'

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    calculation = calcSpace.CreateCalculation(ins, columnId)
    indicator = calculation.FormattedValue()
    calcSpace.Clear()
    return indicator

def get_fxo_nominal_put(trade):
    
    context = acm.GetDefaultContext()
    sheetType = 'FTradeSheet'
    ins = trade
    columnId = 'Nominal Amount FXO Put'

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    calculation = calcSpace.CreateCalculation(ins, columnId)
    indicator = calculation.FormattedValue()
    calcSpace.Clear()
    return indicator
    
def get_USD_Rate(trade):
    
    context = acm.GetDefaultContext()
    sheetType = 'FTradeSheet'
    ins = trade
    columnId = 'Foreign Repo Rate'

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    calculation = calcSpace.CreateCalculation(ins, columnId)
    indicator = calculation.FormattedValue()
    
    return indicator

def date_formatter(date):
    if date:
        createYMD = acm.Time.DateToYMD(date)
        monthArray = [""," January ", " February ", " March ", " April ", " May ", " June ", " July ", " August ", " September ", " October ", " November ", " December "]
        return str(createYMD[2]) + monthArray[createYMD[1]] + str(createYMD[0])

def get_Collateral(trade):
    try:
        agl = trade.AgreementLinks()[0]
        mag = agl.MasterAgreement().Name()
        ms = agl.MarginingSet().Name()
        query = """
            select al.trdnbr, mag.name, ms.name 
            from TradeAgreementLink al, MarginingSet ms, MasterAgreement mag
            where al.margining_set_seqnbr = ms.seqnbr
            and al.master_agreement_seqnbr = mag.seqnbr
            and mag.name = '{master_agreement}'
            and ms.name = '{margining_set}'
            """.format(master_agreement = mag, margining_set = ms)
        for i in ael.asql(query)[1][0]:
            trd_no = i[0]
            t = acm.FTrade[trd_no]
            if (trd_no != trade.Oid()) & (t.Instrument().InsType().lower() in ('collateral', 'bond', 'bill', 'frn', 'mbs/abs')):
                return t, t.Instrument().Name()
    except Exception as e:
        print(get_Collateral.__name__, str(trade.Oid()), str(e))
        #logger.LOG("%s of %s : %s" %(get_Collateral.__name__, str(trade.Oid()), str(e)))
        return None

def get_Collateral_Trade(trade):
    coll = get_Collateral(trade)
    if coll != None:
        return coll[0]
    else:
        return None
        
def get_Collateral_Trade_Face_Value(trade):
    coll = get_Collateral(trade)
    if coll != None:
        return coll[0].FaceValue()
    else:
        return None

def get_Collateral_Instrument(trade):
    coll = get_Collateral(trade)
    if coll != None:
        return coll[1]
    else:
        return None

def get_Collateral_Instrument1(trade):
    coll = get_Collateral(trade)
    if coll != None:
        return acm.FInstrument[coll[1]]
    else:
        return None
        
def get_Collateral_Trade_Oid(trade):
    coll = get_Collateral(trade)
    if coll != None:
        return coll[0].Oid()
    else:
        return None

def get_Collateral_Instrument_EndDate(trade):
    coll = get_Collateral(trade)
    if coll != None:
        ins = acm.FInstrument[coll[1]]
        try:
            return ins.EndDate()
        except:
            return None
    else:
        return None
        
def get_Collateral_Instrument_Issuer(trade):
    coll = get_Collateral(trade)
    if coll != None:
        ins = acm.FInstrument[coll[1]]
        return ins.Issuer()
    else:
        return None

def get_Collateral_Instrument_Isin(trade):
    coll = get_Collateral(trade)
    if coll != None:
        ins = acm.FInstrument[coll[1]]
        return ins.Isin()
    else:
        return None

def get_Collateral_Trade_Price(trade):
    coll = get_Collateral(trade)
    if coll != None:
        return coll[0].Price()
    else:
        return None

def get_Collateral_Trade_FaceValue(trade):
    coll = get_Collateral(trade)
    if coll != None:
        return coll[0].FaceValue()
    else:
        return None

def get_longform_netting(trade):
    amt_list=[]
    setts = trade.Settlements()
    for sett in setts:
        if "premium" in sett.Type().lower():
            amt_list.append(sett.Amount())
    return amt_list[-1]

def get_longform_nominal_interest_fixed_OIS(trade):
    amt_list=[]
    setts = trade.Settlements()
    for sett in setts:
        if "fixed" in sett.Type().lower():
            amt_list.append(sett.Amount())
    return amt_list[-1]

def get_longform_nominal_interest_float_OIS(trade):
    amt_list=[]
    setts = trade.Settlements()
    for sett in setts:
        if "float" in sett.Type().lower():
            amt_list.append(sett.Amount())
    return amt_list[-1]

def get_longform_netting_amount(trade):
    amt_list=[]
    setts = trade.Settlements()
    for sett in setts:
        if "none" in sett.Type().lower():
            amt_list.append(sett.Amount())
    return amt_list[-1]

def get_Collateral_Haircut(trade):
    collateral_name = get_Collateral_Instrument(trade)
    trade = get_Collateral_Trade(trade)
    if (trade != None) & (collateral_name != None):
        try:
            haircutRules = trade.MarginingSet().HaircutRules()
            hr_FilterTypes = set([i.ProductFilterType().lower() for i in haircutRules])
            if 'single instrument' in hr_FilterTypes:
                for hr in haircutRules:
                    if (hr.ProductFilterType().lower() == 'single instrument') & (hr.EligibleProducts() != None):
                        if collateral_name.lower() in hr.EligibleProducts().Name().lower(): 
                            return hr.Haircut()
                        else: 
                            continue
                    else:
                        continue
            elif 'multi instrument' in hr_FilterTypes:
                return haircutRules[0].Haircut()
        except Exception as e:
            logger.LOG("%s of %s : %s" %(get_Collateral_Haircut.__name__, str(trade.Oid()), str(e)))
            return None

def get_account_name(trade):
    cpty = acm.FParty[trade.Counterparty().Name()]
    for acc in cpty.Accounts():
        if acc.AccountType()=="Cash and Security" | acc.AccountType()=="Security and Cash":
            return acc.Name()

def get_account_number(trade):
    cpty = acm.FParty[trade.Counterparty().Name()]
    for acc in cpty.Accounts():
        if acc.AccountType()=="Cash and Security" | acc.AccountType()=="Security and Cash":
            return acc.Account()

def capitalize(object):
    return object.upper()

def bondrepo_account(trade):
    for mf in trade.MoneyFlows():
        if mf.Type() == "Security Nominal":
            return mf

def bondrepo_ouraccountaccounttype(trade):
    for mf in trade.MoneyFlows():
        if mf.Type() == "Security Nominal":
            return mf.AcquirerSettleInstruction().Type()

def ccs_idr_ouraccount(trade):
    for mf in trade.MoneyFlows():
        if mf.Currency().Name()=="IDR":
            return mf.AcquirerAccount().Bic()

def ccs_idr_ouraccountnumber(trade):
    for mf in trade.MoneyFlows():
        if mf.Currency().Name()=="IDR":
            return mf.AcquirerAccount().Account()

def ccs_idr_youraccount(trade):
    for mf in trade.MoneyFlows():
        if mf.Currency().Name()=="IDR":
            return mf.CounterpartyAccount().Bic()

def ccs_idr_youraccountnumber(trade):
    for mf in trade.MoneyFlows():
        if mf.Currency().Name()=="IDR":
            return mf.CounterpartyAccount().Account()

def ccs_usd_ouraccount(trade):
    for mf in trade.MoneyFlows():
        if mf.Currency().Name()=="USD":
            return mf.AcquirerAccount().Bic()

def ccs_usd_ouraccountnumber(trade):
    for mf in trade.MoneyFlows():
        if mf.Currency().Name()=="USD":
            return mf.AcquirerAccount().Account()

def ccs_usd_youraccount(trade):
    for mf in trade.MoneyFlows():
        if mf.Currency().Name()=="USD":
            return mf.CounterpartyAccount().Bic()

def ccs_usd_youraccountnumber(trade):
    for mf in trade.MoneyFlows():
        if mf.Currency().Name()=="USD":
            return mf.CounterpartyAccount().Account()
'''
def couponbond_ouraccount_networkalias(trade):
    valuedate = trade.ValueDay()
    for mf in trade.MoneyFlows():
        recdate = acm.Time.DateAddDelta(mf.PayDate(),0,0,-1)
        if mf.Type() == "Coupon":
            if recdate == valuedate:
                return mf.AcquirerAccount().NetworkAlias()
            else:
                continue
        else:
            continue

def couponbond_ouraccount(trade):
    valuedate = trade.ValueDay()
    for mf in trade.MoneyFlows():
        recdate = acm.Time.DateAddDelta(mf.PayDate(),0,0,-1)
        if mf.Type() == "Coupon":
            if recdate == valuedate:
                return mf.AcquirerAccount().Bic().Name()
            else:
                continue
        else:
            continue

def couponbond_ouraccountnumber(trade):
    valuedate = trade.ValueDay()
    for mf in trade.MoneyFlows():
        recdate = acm.Time.DateAddDelta(mf.PayDate(),0,0,-1)
        if mf.Type() == "Coupon":
            if recdate == valuedate:
                return mf.AcquirerAccount().Account()
            else:
                continue
        else:
            continue
'''
def couponbond_youraccount(trade):
    valuedate = trade.ValueDay()
    for mf in trade.MoneyFlows():
        recdate = acm.Time.DateAddDelta(mf.PayDate(),0,0,-1)
        if mf.Type() == "Coupon":
            if recdate == valuedate:
                return mf.CounterpartyAccount().Bic().Name()
            else:
                continue
        else:
            continue


def couponbond_youraccountnumber(trade):
    valuedate = trade.ValueDay()
    for mf in trade.MoneyFlows():
        recdate = acm.Time.DateAddDelta(mf.PayDate(),0,0,-1)
        if mf.Type() == "Coupon":
            if recdate == valuedate:
                return mf.CounterpartyAccount().Account()
            else:
                continue
        else:
            continue

def dndf_ouraccount(trade):
    for mf in trade.MoneyFlows():
        if mf.Type()=="Payout":
            return mf.AcquirerAccount().Bic()

def dndf_ouraccountnumber(trade):
    for mf in trade.MoneyFlows():
        if mf.Type()=="Payout":
            return mf.AcquirerAccount().Account()

def dndf_youraccount(trade):
    for mf in trade.MoneyFlows():
        if mf.Type()=="Payout":
            return mf.CounterpartyAccount().Bic()

def dndf_youraccountnumber(trade):
    for mf in trade.MoneyFlows():
        if mf.Type()=="Payout":
            return mf.CounterpartyAccount().Account()

def irs_ouraccount(trade):
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    columnId = 'Cash Analysis Projected'

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    
    for mf in trade.MoneyFlows():
        proj = calcSpace.CreateCalculation(mf, columnId).Value()
        if proj > 0:
            calcSpace.Clear()
            return mf.AcquirerAccount().Bic()
    
    calcSpace.Clear()
    return None

def irs_ouraccountnumber(trade):
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    columnId = 'Cash Analysis Projected'

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    
    for mf in trade.MoneyFlows():
        proj = calcSpace.CreateCalculation(mf, columnId).Value()
        if proj > 0:
            calcSpace.Clear()
            return mf.AcquirerAccount().Account()
    
    calcSpace.Clear()
    return None
    
    
def irs_youraccount(trade):
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    columnId = 'Cash Analysis Projected'

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    
    for mf in trade.MoneyFlows():
        proj = calcSpace.CreateCalculation(mf, columnId).Value()
        if proj > 0:
            calcSpace.Clear()
            return mf.CounterpartyAccount().Bic()

    calcSpace.Clear()
    return None

def irs_youraccountnumber(trade):
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    columnId = 'Cash Analysis Projected'

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    
    for mf in trade.MoneyFlows():
        proj = calcSpace.CreateCalculation(mf, columnId).Value()
        if proj > 0:
            calcSpace.Clear()
            return mf.CounterpartyAccount().Account()
    
    calcSpace.Clear()
    return None

def rekeningjual_bic(trade):
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    columnId = 'Cash Analysis Projected'
    
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    
    for mf in trade.MoneyFlows():
        proj = calcSpace.CreateCalculation(mf, columnId).Value()
        if proj > 0 and mf.Type()=="Premium 2":
            calcSpace.Clear()
            return mf.CounterpartyAccount().Bic()
            
    calcSpace.Clear()
    return None

def rekeningjual_number(trade):
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    columnId = 'Cash Analysis Projected'
    
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    
    for mf in trade.MoneyFlows():
        proj = calcSpace.CreateCalculation(mf, columnId).Value()
        if proj > 0 and mf.Type()=="Premium 2":
            calcSpace.Clear()
            return mf.CounterpartyAccount().Account()
            
    calcSpace.Clear()
    return None

def rekeningbeli_bic(trade):
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    columnId = 'Cash Analysis Projected'
    
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    
    for mf in trade.MoneyFlows():
        proj = calcSpace.CreateCalculation(mf, columnId).Value()
        if proj < 0 and mf.Type()=="Premium":
            calcSpace.Clear()
            return mf.CounterpartyAccount().Bic()
            
    calcSpace.Clear()
    return None

def rekeningbeli_number(trade):
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    columnId = 'Cash Analysis Projected'
    
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    
    for mf in trade.MoneyFlows():
        proj = calcSpace.CreateCalculation(mf, columnId).Value()
        if proj < 0 and mf.Type()=="Premium":
            calcSpace.Clear()
            return mf.CounterpartyAccount().Account()

    calcSpace.Clear()
    return None
    

def ccs_ccy1_ouraccount(trade):
    context = acm.GetDefaultContext()
    sheetType = 'FTradeSheet'
    ins = trade
    columnId = 'Nominal Amount CCS Curr One'

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    curr1 = calcSpace.CreateCalculation(ins, columnId).Value().Unit()

    for mf in trade.MoneyFlows():
        if mf.Currency().Name()==str(curr1):
            calcSpace.Clear()
            return mf.AcquirerAccount()
            
    calcSpace.Clear()
    return None

def ccs_ccy1_ouraccountnumber(trade):
    context = acm.GetDefaultContext()
    sheetType = 'FTradeSheet'
    ins = trade
    columnId = 'Nominal Amount CCS Curr One'

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    curr1 = calcSpace.CreateCalculation(ins, columnId).Value().Unit()

    for mf in trade.MoneyFlows():
        if mf.Currency().Name()==str(curr1):
            calcSpace.Clear()
            return mf.AcquirerAccount().Account()
            
    calcSpace.Clear()
    return None

def ccs_ccy2_ouraccount(trade):
    context = acm.GetDefaultContext()
    sheetType = 'FTradeSheet'
    ins = trade
    columnId = 'Nominal Amount CCS Curr Two'

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    curr2 = calcSpace.CreateCalculation(ins, columnId).Value().Unit()

    for mf in trade.MoneyFlows():
        if mf.Currency().Name()==str(curr2):
            calcSpace.Clear()
            return mf.AcquirerAccount()
            
    calcSpace.Clear()
    return None
    

def ccs_ccy2_ouraccountnumber(trade):
    context = acm.GetDefaultContext()
    sheetType = 'FTradeSheet'
    ins = trade
    columnId = 'Nominal Amount CCS Curr Two'

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    curr2 = calcSpace.CreateCalculation(ins, columnId).Value().Unit()

    for mf in trade.MoneyFlows():
        if mf.Currency().Name()==str(curr2):
            calcSpace.Clear()
            return mf.AcquirerAccount().Account()
            
    calcSpace.Clear()
    return None
    
    
def ccs_ccy1_youraccount(trade):
    context = acm.GetDefaultContext()
    sheetType = 'FTradeSheet'
    ins = trade
    columnId = 'Nominal Amount CCS Curr One'

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    curr1 = calcSpace.CreateCalculation(ins, columnId).Value().Unit()

    for mf in trade.MoneyFlows():
        if mf.Currency().Name()==str(curr1):
            calcSpace.Clear()
            return mf.CounterpartyAccount()
            
    calcSpace.Clear()
    return None

def ccs_ccy1_youraccountnumber(trade):
    context = acm.GetDefaultContext()
    sheetType = 'FTradeSheet'
    ins = trade
    columnId = 'Nominal Amount CCS Curr One'

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    curr1 = calcSpace.CreateCalculation(ins, columnId).Value().Unit()

    for mf in trade.MoneyFlows():
        if mf.Currency().Name()==str(curr1):
            calcSpace.Clear()
            return mf.CounterpartyAccount().Account()
            
    calcSpace.Clear()
    return None

def ccs_ccy2_youraccount(trade):
    context = acm.GetDefaultContext()
    sheetType = 'FTradeSheet'
    ins = trade
    columnId = 'Nominal Amount CCS Curr Two'

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    curr2 = calcSpace.CreateCalculation(ins, columnId).Value().Unit()

    for mf in trade.MoneyFlows():
        if mf.Currency().Name()==str(curr2):
            calcSpace.Clear()
            return mf.CounterpartyAccount()
            
    calcSpace.Clear()
    return None

def ccs_ccy2_youraccountnumber(trade):
    context = acm.GetDefaultContext()
    sheetType = 'FTradeSheet'
    ins = trade
    columnId = 'Nominal Amount CCS Curr Two'

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    curr2 = calcSpace.CreateCalculation(ins, columnId).Value().Unit()

    for mf in trade.MoneyFlows():
        if mf.Currency().Name()==str(curr2):
            calcSpace.Clear()
            return mf.CounterpartyAccount().Account()
            
    calcSpace.Clear()
    return None
    
def couponbond_ouraccountname(trade):
    for mf in trade.MoneyFlows():
        if mf.Type() == "Coupon":
            return mf.AcquirerAccount().Name()

def couponbond_ouraccountnumber(trade):
    for mf in trade.MoneyFlows():
        if mf.Type() == "Coupon":
            return mf.AcquirerAccount().Account()

def couponbond_ouraccount(trade):
    for mf in trade.MoneyFlows():
        if mf.Type() == "Coupon":
            return mf.AcquirerAccount().Bic()

def couponbond_ouraccount_networkalias(trade):
    for mf in trade.MoneyFlows():
        if mf.Type() == "Coupon":
            return mf.AcquirerAccount().NetworkAlias()

def couponbond_youraccountname(trade):
    for mf in trade.MoneyFlows():
        if mf.Type() == "Coupon":
            return mf.CounterpartyAccount().Name()

def couponbond_youraccountnumber(trade):
    for mf in trade.MoneyFlows():
        if mf.Type() == "Coupon":
            return mf.CounterpartyAccount().Account()

def repo_account(trade):
    coll = get_Collateral(trade)
    if coll != None:
        for mf in coll[0].MoneyFlows():
            if mf.Type()=="Security Nominal":
                return mf
    else:
        return None

def dndf_amount_idr(trade):
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    columnId = 'Cash Analysis Projected'

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    
    for mf in trade.MoneyFlows():
        if mf.Currency().Name()=="IDR":
            proj = calcSpace.CreateCalculation(mf, columnId).Value()
            calcSpace.Clear()
            return proj
            
    calcSpace.Clear()
    return None
    
def fx_ouraccount(trade):
    for mf in trade.MoneyFlows():
        if mf.Type() == "Premium 2":
            return mf.CounterpartyAccount()

def fx_youraccount(trade):
    for mf in trade.MoneyFlows():
        if mf.Type() == "Premium":
            return mf.CounterpartyAccount()

def fxoption_account(trade):
    for mf in trade.MoneyFlows():
        if mf.Type() == "Premium":
            return mf

def nominal_interest_float(trade):
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    legs = trade.Instrument().Legs()
    columnId = "Cash Analysis Projected"
    list=[]
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    for mf in trade.MoneyFlows():
        if mf.Type() == "Float Rate" and mf.PayDate() == acm.Time.DateToday():
            proj = calcSpace.CreateCalculation(mf, columnId).Value().Number()
            list.append(proj)
            
    calcSpace.Clear()
    return list[0]

def nominal_interest_fixed(trade):
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    legs = trade.Instrument().Legs()
    columnId = "Cash Analysis Projected"
    list=[]
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    for mf in trade.MoneyFlows():
        if mf.Type() == "Fixed Rate" and mf.PayDate() == acm.Time.DateToday():
            proj = calcSpace.CreateCalculation(mf, columnId).Value().Number()
            list.append(proj)
            
    calcSpace.Clear()
    return list[0]
    
def to_number(ext):
    ext = ext.replace(".","")
    return float(ext)

def coupon_interest(trade):
    list=[]
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    columnId_proj = "Cash Analysis Projected"
    columnId_type = "Money Flow Type"
    today = acm.Time.DateToday()
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)

    for mf in trade.MoneyFlows():
        if mf.Type()=='Coupon':
            result_proj = calcSpace.CreateCalculation(mf, columnId_proj).Value().Number()
            if result_proj!=0:
                calcSpace.Clear()
                return result_proj
    calcSpace.Clear()
    return None
    
    
def coupon_paydate(trade):
    list = []
    for mf in trade.MoneyFlows():
        if mf.Type()=='Coupon':
            list.append(mf.PayDate())
    return list[-1]

def coupon_total(trade):
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    columnId_proj = "Cash Analysis Projected"
    columnId_type = "Money Flow Type"
    today = acm.Time.DateToday()
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    for mf in trade.MoneyFlows():
        if today >= mf.StartDate() and today <= mf.EndDate():
            result_type = calcSpace.CreateCalculation(mf, columnId_type).FormattedValue()
            if str(result_type) == "Fixed Rate" or str(result_type) == "Float Rate":
                result_proj = calcSpace.CreateCalculation(mf, columnId_proj)
                if result_proj.FormattedValue()=="NaN":
                    calcSpace.Clear()
                    return 0
                else:
                    accr = result_proj.Value().Number()
                    calcSpace.Clear()
                    return accr
            else:
                continue
                
    calcSpace.Clear()
    return None

def get_longform_settlement_date(trade):
    return trade.LongFormGetSettlementDate()
    
def fixingvalue(mfs):
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    columnId = "Cash Analysis Fixing Value"

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    
    for mf in mfs:
        if mf.Type()=="Float Rate" and mf.PayDate()==acm.Time.DateToday():
            fv = calcSpace.CreateCalculation(mf, columnId).Value()
            calcSpace.Clear()
            return fv
    
    calcSpace.Clear()
    return None

def pairs_enddate(mfs):
    for mf in mfs:
        if mf.Type()=="Float Rate" and mf.PayDate()==acm.Time.DateToday():
            return mf.MoneyFlowEndDate()

def pairs_paydate(mfs):
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    columnId = "Cash Analysis Pay Day"

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    for mf in mfs:
        if mf.Type()=="Float Rate" and mf.PayDate()==acm.Time.DateToday():
            sd = calcSpace.CreateCalculation(mf, columnId).Value()
            calcSpace.Clear()
            return sd
    
    calcSpace.Clear()
    return None

def get_longform_netting_dndf(mfs):
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    columnId = "Cash Analysis Projected"

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    for mf in mfs:
        if mf.Type()=="Payout":
            proj = calcSpace.CreateCalculation(mf, columnId).Value()
            calcSpace.Clear()
            return proj
            
    calcSpace.Clear()
    return None

def proj_type(trade, type):
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    columnId = 'Portfolio Present Value'
    
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    for mf in trade.MoneyFlows():
        if mf.Type()==type and mf.PayDate()==interest_pay_date(trade):
            proj = calcSpace.CreateCalculation(mf, columnId).Value().Number()
            calcSpace.Clear()
            return proj
            
    calcSpace.Clear()
    return None

def get_longform_repo_end_cash(trade):
    stand_calc = acm.FStandardCalculationsSpaceCollection()
    facevalue = trade.FaceValue()
    mfs = trade.MoneyFlows()
    try:
        total_proj = 0.0
        for mf in mfs:
            if mf.Type() in ['Fixed Rate', 'Float Rate']:
                proj = float( mf.Calculation().Projected(stand_calc) )
                total_proj += proj 
        total_proj += facevalue
        return total_proj
    except:
        return None
        
def get_longform_repo_interest(trade):
    today = acm.Time.DateToday()    
    context = acm.GetDefaultContext()
    calc_space = acm.Calculations().CreateCalculationSpace(context, 'FMoneyFlowSheet')
    t_n = calc_space.InsertItem(trade)
    calc_space.Refresh()
    
    child = t_n.Iterator().FirstChild()
    
    while child:
        type_child = child.Tree().Item().MoneyFlow().Type()
        if type_child == "Fixed Rate":
            pv_val = calc_space.CreateCalculation(child.Tree(), 'Cash Analysis Projected').Value().Number()
            calc_space.Clear()
            return abs(pv_val)
        child = child.NextSibling()
    
    return None

def get_longForm_Nominal_principal(trade, mode, type):
    if mode == "pay":
        cashflow_used = trade.Instrument().FirstPayLeg().CashFlows()
    elif mode == "receive":
        cashflow_used = trade.Instrument().FirstReceiveLeg().CashFlows()
    else :
        return None
    
    cashflow_oids = [cashflow.Oid() for cashflow in cashflow_used]
    
    today = acm.Time.DateToday()
    
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    
    calc_space = acm.Calculations().CreateCalculationSpace(context, sheetType)
    t_n = calc_space.InsertItem(trade)
    calc_space.Refresh()
    
    child = t_n.Iterator().FirstChild()
    
    while child:
        cash_oid = child.Tree().Item().MoneyFlow().CashFlow().Oid()
        type_child = child.Tree().Item().MoneyFlow().Type()
        payDate = child.Tree().Item().MoneyFlow().PayDate()
        dateDiff = acm.Time().DateDifference(payDate, today)
        if cash_oid in cashflow_oids and type_child == type and dateDiff > 0:
            pv_val = calc_space.CreateCalculation(child.Tree(), 'Portfolio Theoretical Value').Value().Number()
            calc_space.Clear()
            
            return abs(pv_val)
        child = child.NextSibling()
    
    return None
    
def date_formatter_eng(date):
    if len(date)==3:
        monthArray = ['',' January ',' February ',' March ',' April ',' May ',' June ',' July ',' August ',' September ',' October ',' November ',' December ']
        return str(date[2]) + monthArray[date[1]] + str(date[0])

def get_diary(diaryText):
    list_diarytext = diaryText.split("\n")
    list_index = []
    list_text = []

    for dt in list_diarytext:
        if "<DateTime><Date><Year>" in dt:
            list_index.append(list_diarytext.index(dt))

    for dt in list_diarytext:
        if list_diarytext.index(dt) > list_index[-1]:
            list_text.append(dt)
    
    result_text = '\n'.join(list_text)
    
    return result_text

def get_TradeLogicDecorator(object):
    trade = acm.FTradeLogicDecorator(object.Trade(), None)
    return trade

...

  TransporterHooks
"""-------------------------------------------------------------------------------------------
MODULE
    TransporterHooks

    (c) Copyright 2010-2018 by FIS Front Arena. All rights reserved.

VERSION
    3.5.0
DESCRIPTION
    Used to dynamically fill the RunScriptCMD parameters

    uses the fnmatch module for the name and excludename parameter, this allows for neat pattern matching:

    Pattern     Meaning
    *           matches everything
    ?           matches any single character
    [seq]       matches any character in seq
    [!seq]      matches any character not in seq

USAGE
    <?xml version='1.0' encoding='iso-8859-1'?>
    <RunScriptCMD>
        <Command module=TransporterExport"" hook=""TransporterHooks.ExtensionModules(context='Standard',empty=True)"">"
            <basepath>.</basepath>
        </Command>

        <Command module="TransporterExport" hook="TransporterHooks.UserNames(tag='Extension_Module', group='ADMIN')" >
            <basepath>.</basepath>
        </Command>

        <Command module="TransporterExport" hook="TransporterHooks.Objects(tag='Trade_Filter', owner='${USERNAME}', name='*')" >
            <basepath>.</basepath>
        </Command>

        <Command module="TransporterImport" hook="TransporterHooks.FileNames(tag='Extension_Module', name='*.txt')" >
            <basepath>.</basepath>
        </Command>







             Does NOT support ALL different kind of inputfiles and file sizes! -->

        <Command callback="False" exitOnError="False" module="TransporterUpdate"
                    hook="TransporterHooks.ReadTextFile(tag='extensioncontent', name='TestPython.py')">
            <moduleupdate>TestModule</moduleupdate>
            <extensiontype>FPythonCode</extensiontype>
            <extensionclass>FObject</extensionclass>
            <extensionname>testPython</extensionname>


    </RunScriptCMD>

MAJOR REVISIONS

    2010-12-17  RL  Initial implementation
    2011-02-01  RL  Added more options
    2011-08-22  RL  Support for ',' in names
    2013-01-16  RL  Add parameter excludename to exclude ExtensionModules names
    2014-05-27  RL  Extract extension names from files
-------------------------------------------------------------------------------------------"""

  # This isn't required in Python 2.6
import acm
import ael
import amb

import re
import os
import fnmatch
from string import Template



import FLogger

logger = FLogger.FLogger('Transporter.' + __name__)

def TransporterExportCustomHook(file_path, output_file_data):
    """Use to override the exported file data"""
    return file_path, output_file_data

def AMBAExportEntryHook(acm_object):
    '''
    Hook to customize acm object before converting to AMBA message while exporting
    :param amba_message: FObject type
    :return: acm_object : FObject type
    '''
    return acm_object

def TransporterImportCustomHook(object_to_import):
    '''
    Hook to customize the object created from file
    :param object_to_import: The object created from file provided in Transporter Import may be of type -
    TradeFilter, FSQL, FStoredASQLQuery, FAelTask, FAel(PythonCode), FExtensionModule, TradingSheetTemplate, FWorkbook,
    FWorkspace, AsqlReport, AsqlReport
    :return: same object type as received in function
    '''
    return  object_to_import

def _users(name='*', group=None, hasProfile=None, inactive=False, active=False):
    """Extract User names"""
    if group:
        users = [str(user.Name()) for user in acm.FUser.Select('userGroup="%s"' % group)
                 if (not inactive or (inactive and user.Inactive())) and
                 (not active or (active and not user.Inactive()))]
    else:
        users = [str(user.Name()) for user in acm.FUser.Select('')
                 if (not inactive or (inactive and user.Inactive())) and
                 (not active or (active and not user.Inactive()))]

    if hasProfile:
        inprofile = [str(prof.User().Name()) for prof in acm.FUserProfileLink.Select('userProfile="%s"' % hasProfile)]
        users = [user for user in users if user in inprofile]

    users = fnmatch.filter(users, name)
    return users


def _groups(name='*', hasProfile=None):
    """Extract Group names"""
    groups = [str(group.Name()) for group in acm.FUserGroup.Select('')]

    if hasProfile:
        inprofile = [str(prof.UserGroup().Name()) for prof in
                     acm.FGroupProfileLink.Select('''userProfile=%r''' % hasProfile)]
        groups = [group for group in groups if group in inprofile]

    groups = fnmatch.filter(groups, name)
    return groups


def _JoinCommaSpace(lst):
    return ['"%s"' % name if (',' in name or ' ' in name) else name for name in lst]


def ExcludeFromList(objectlist, excludename=''):
    if excludename != '':
        for exclude in excludename.split(','):
            objectlist = [n for n in objectlist if not fnmatch.fnmatch(n, exclude)]
    return objectlist


def ExtensionModules(tag='Extension_Module', context=None, name='*', owner=None, empty=False, notempty=False,
                     usermodule=False, group=None, hasProfile=None, inactive=False, active=False, excludename=''):
    """Extract Extension Module names

    excludename can have many strings split by "," e.g.

    TransporterHooks.ExtensionModules(name='T*', excludename='Tran*,TRAD*,TAB*')

    """
    if context:
        context = list(acm.FExtensionContext[context].ModuleNames())

    if usermodule:
        users = _users(group=group, hasProfile=hasProfile, inactive=inactive, active=active)
    else:
        users = None

    if owner:
        owner = owner.upper()

    em = [str(em.Name()) for em in acm.FExtensionModule.Select('') \
          if (not context or (context and str(em.Name()) in context)) and \
          (not owner or (owner and str(em.Owner().Name()) == owner)) and \
          (not empty or (empty and len(em.Types()) == 0)) and \
          (not notempty or (notempty and len(em.Types()) > 0)) and \
          (not users or (users and (str(em.Name()) in users)))]
    em = fnmatch.filter(em, name)

    em = ExcludeFromList(em, excludename)

    return {tag: ",".join(_JoinCommaSpace(em))}


def ContextExtensionModules(tag='Extension_Module', contextname='Standard', name='*', excludename=''):
    """Extract Extension Module names from a Context"""
    context = acm.FExtensionContext[contextname]

    if context:
        em = [str(ext) for ext in context.ModuleNames()]
    else:
        em = []

    em = fnmatch.filter(em, name)

    em = ExcludeFromList(em, excludename)

    return {tag: ",".join(_JoinCommaSpace(em))}


def BrokenExtensionModules(tag='Extension_Module'):
    """Extract "broken" Extension Module names"""
    col, res = ael.asql("select o.seqnbr from TextObject o where o.type = 'Extension Module' and o.usrnbr > 0")

    em = [str(row[0]) for row in res[0]]

    return {tag: ",".join(_JoinCommaSpace(em))}


def UserNames(tag='usernames', name='*', group=None, hasProfile=None, inactive=False, active=False, excludename=''):
    """Extract User names"""
    users = _users(name, group, hasProfile, inactive, active)

    users = ExcludeFromList(users, excludename)
    return {tag: ",".join(_JoinCommaSpace(users))}


class TemplateEnv(Template):
    idpattern = "[_A-Za-z][\._A-Za-z0-9]*"


def ReadTextFile(tag='File', name='file.txt', search=None, replace=None, parseenv=False):
    """Extract File without stripping"""
    with open(name, 'r') as inputfile:
        text = inputfile.read()
        if parseenv:
            text = TemplateEnv(text).safe_substitute(os.environ)
        if search and replace:
            if type(search) != type(replace):
                raise Exception("Expecting search and replace to be of same type")

            if type(search) in (str, str):
                search = (search,)
                replace = (replace,)

            for (search, replace) in zip(search, replace):
                print(("Replace %s with %s" % (search, replace)))
                text = text.replace(search, replace)

    return {tag: text}


def ReadFile(tag='File', name='file.txt', separator=','):
    """Extract File"""
    with open(name, 'r') as inputfile:
        text = separator.join([line.strip() for line in inputfile])

    return {tag: text}


def FileNameList(basepath='.', name='*.*', extension=True, excludename=''):
    """Extract File names as list"""
    files = fnmatch.filter(os.listdir(basepath), name)

    if not extension:
        files = [file.split('.')[0] for file in files]

    files = ExcludeFromList(files, excludename)

    return sorted(files)


def FileNames(tag='Files', basepath='.', name='*.*', extension=True, separator=',', excludename='', addfilepath=False):
    """Extract File names"""

    if addfilepath:
        basepath = os.path.join(basepath, tag)

    files = FileNameList(basepath, name, extension, excludename)

    return {tag: separator.join(_JoinCommaSpace(files)), 'basepath': basepath}


def ReContext(tag='reContext', basepath='.', reContext='', nameContext="+%s"):
    """   reContext is a regular expression to extract a Context Name from the current directory r"\w+\\([A-Za-z]+)$" """
    if reContext:
        currentDir = os.path.abspath(basepath)
        logger.LOG("ReContext: %r basepath: %s" % (reContext, currentDir))
        found = re.search(reContext, currentDir)

        if found:
            context = nameContext % found.group(1)
            logger.LOG("ReContext CONTEXT: %s" % (context))
        else:
            logger.ELOG("FileExtensionNames could not extract context")
            raise Exception("FileExtensionNames could not extract context")

    return {tag: context}


def FileExtensionNames(tag='add_module', basepath='.', name='*.*', separator=',', excludename='',
                       tagContext='destination', reContext='', nameContext="+%s"):
    """Extract Extension module names from files. """

    if reContext:
        context = ReContext(tag='reContext', basepath=basepath, reContext=reContext, nameContext=nameContext)[
            'reContext']
    else:
        context = ''

    files = FileNameList(basepath, name)

    modules = []
    for filename in files:
        with open(os.path.join(basepath, filename), 'rU') as file:
            for lineno, line in enumerate(file):
                if line.startswith("name "):
                    modules.append(line[13:-2])
                    break
                elif lineno > 6:
                    break

    modules = ExcludeFromList(modules, excludename)

    returnDict = {tag: separator.join(_JoinCommaSpace(modules)), 'basepath': basepath}
    if tagContext and context:
        returnDict[tagContext] = context

    return returnDict


def ObjectList(objectname, owner=None, name='*', group=None, hasProfile=None, excludename=''):
    # ObjectNames
    from Transporters import SelectObjects
    if owner:
        owner = owner.upper()

    if group or hasProfile:
        objects = set()
        users = _users(group=group, hasProfile=hasProfile)
        for owner in users:
            objects.update(SelectObjects(objectname, owner, name))
    else:
        objects = SelectObjects(objectname, owner, name)
    objects = ExcludeFromList(objects, excludename)

    return objects


def Objects(tag='Objects', objectname=None, owner=None, name='*', group=None, hasProfile=None, excludename=''):
    """ The Objects function extracts object names based on different criterias,
        to be used with Transporter:Export, Transporter:Delete"""

    if not objectname:
        objectname = tag

    objects = ObjectList(objectname, owner, name, group, hasProfile, excludename)

    return {tag: ",".join(_JoinCommaSpace(objects))}


def CompareObjectsToFiles(tag='Objects', objectname=None, owner=None, name='*', group=None, hasProfile=None,
                          excludename='', basepath='.', filename='*.*', separator=',', excludefile=''):
    """ The CompareObjectsToFiles function extracts object names based on different criterias,
        as well as filenames and generates an list of objectnames only existing in the database.
        To Archive call with Transporter:Export and then Transporter:Delete"""

    if not objectname:
        objectname = tag

    # Object names
    objects = ObjectList(objectname, owner, name, group, hasProfile, excludename)
    # File names
    # if objectname == 'ExtensionModule':
    #    files = FileExtensionNames(tag='ExtensionModule', basepath=basepath, name=filename, separator=separator,
    #            excludename='')['ExtensionModule']
    files = FileNameList(basepath, filename, extension=False, excludename=excludefile)

    return {tag: separator.join(_JoinCommaSpace(set(objects) - set(files)))}


def UserProfiles(tag='UserProfiles', name='*', user=None, group=None, excludename=''):
    """ Extract UserProfiles for either group, user or just name """
    userProfiles = []
    if user:
        userProfiles = [pl.UserProfile().Name() for pl in acm.FUserProfileLink.Select('''user=%r''' % user)]
    elif group:
        userProfiles = [pl.UserProfile().Name() for pl in acm.FGroupProfileLink.Select('''userGroup=%r''' % group)]
    else:
        userProfiles = [profile.Name() for profile in acm.FUserProfile.Select('')]

    userProfiles = fnmatch.filter(userProfiles, name)

    userProfiles = ExcludeFromList(userProfiles, excludename)

    return {tag: ",".join(_JoinCommaSpace(userProfiles))}
    
    
# These functions are required for LongformTradeConfirmation

def AMBAExportExitHook(amba_message):
    if amba_message:
        try:
            _type = amba_message.At('TYPE')
            if str(_type) in ['INSERT_EXTERNALOBJECT', "UPDATE_EXTERNALOBJECT"]:
                _external_obj = amba_message.FindMessages('EXTERNALOBJECT')
                if _external_obj:
                    _external_obj = _external_obj[0]
                    if str(_external_obj.At('INTEGRATION_TYPE')) in ['LongForm'] and str(_external_obj.At('INTEGRATION_SUBTYPE')) in ['TPLVersion']:
                        parent_id = str(_external_obj.At('PARENT_SEQNBR', 0))
                        if int(parent_id):
                            acm_ext_obj = acm.FExternalObject[int(parent_id)]
                            parent_data_name = str(acm_ext_obj.Data().Name())
                            _external_obj.AtPut('PARENT_DATA_SEQNBR.NAME', parent_data_name)
                            logger.LOG("Successfully applied LTC export customization for message:%s" % amba_message)
        except Exception as err:
            logger.ELOG("Error occurred while applying AMBAExportExitHook for Longform. Error %r" % err)
            logger.ELOG("Hence, ignoring customization for amba_message.%s" % amba_message)
            logger.ELOG("Do not use this exported AMBA file for importing LTC component.")
    return amba_message



def AMBAImportEntryHook(amba_message):
    if amba_message:
        try:
            parent_data_name = ''
            try:
                buffer = amb.mbf_create_buffer_from_data(amba_message)
                mbf_obj = buffer.mbf_read()
            except Exception as err:
                return amba_message  
            type_att = mbf_obj.mbf_find_object("TYPE", "MBFE_BEGINNING")
            if type_att and type_att.mbf_get_value() in ['INSERT_EXTERNALOBJECT', 'UPDATE_EXTERNALOBJECT']:
                extenal_mbf_obj = mbf_obj.mbf_find_object("EXTERNALOBJECT", "MBFE_BEGINNING")
                if extenal_mbf_obj:
                    parent_data_name = extenal_mbf_obj.mbf_find_object("PARENT_DATA_SEQNBR.NAME")
                    if parent_data_name:
                        parent_data_name = str(parent_data_name.mbf_get_value())
                        def _delete_attribute_from_AMBA(extenal_mbf_obj):
                            if extenal_mbf_obj:
                                try:
                                    extenal_mbf_obj.mbf_remove_object() # delete current object which is "PARENT_DATA_SEQNBR.NAME"
                                except:
                                    pass
                        _delete_attribute_from_AMBA(extenal_mbf_obj)
                        def _find_parent_extenal_object():
                            query = acm.CreateFASQLQuery(acm.FExternalObject, 'AND')
                            query.AddOpNode('OR')
                            query.AddAttrNode('Data.Name','EQUAL', parent_data_name)
                            return query.Select()
                        result = _find_parent_extenal_object()
                        if result:
                            parent_id = str(result[-1].Oid())
                            if extenal_mbf_obj.mbf_find_object("PARENT_SEQNBR"):  # to make "PARAENT_SEQNBR" as current object 
                                extenal_mbf_obj.mbf_replace_string('PARENT_SEQNBR', parent_id)
                                amba_message = mbf_obj.mbf_object_to_string()
                                logger.LOG("Successfully applied LTC import customization for message:%s" % amba_message)
        except Exception as err:
            logger.ELOG("Error occurred while applying AMBAImportEntryHook for Longform. Error %r" % err)
            logger.ELOG("Hence, ignoring the customization for amba_message.%s" % str(amba_message))       
    return amba_message


def AMBAImportExitHook(acm_object):
    if acm_object:
        
        def is_template_already_present(acm_object):
            if acm_object.IsKindOf(acm.FExternalObject) and str(acm_object.IntegrationSubtype()) in ['LongFormTPL', 'TPLVersion']:
                template_name = str(acm_object.Data().Name())
                query = acm.CreateFASQLQuery(acm.FExternalObject, 'AND')
                query.AddAttrNode('IntegrationSubtype', 'EQUAL', str(acm_object.IntegrationSubtype()))
                query.AddAttrNode('Data.Name', 'EQUAL', template_name)
                if query.Select():
                    return True
            return False
        
        if is_template_already_present(acm_object):
            raise Exception("Template < {0} > already present in ADS".format(acm_object.Data().Name()))
                
        try:
            reportform_name = ""
            if acm_object and acm_object.IsKindOf(acm.FCustomTextObject):
                if acm_object.SubType() in ['ReportForm']:
                    from FIntegrationUtils import FIntegrationUtils, ChoiceListAlreadyExist
                    reportform_name = str(acm_object.Name())
                    intergration_obj = FIntegrationUtils()
                    try:
                        intergration_obj.insert_element_in_choice_list('Conf Template',reportform_name , 'LongForm Message Template')
                    except ChoiceListAlreadyExist as err:
                        logger.LOG(str(err))
                    except Exception as err:
                        err_msg = 'Error occurred while creating choice list entry in "Conf Template".Please add ReportForm <{0} > manually in choice list.'.format(reportform_name)
                        logger.ELOG(err_msg)
                        logger.ELOG("Error is %r" % err)
        except Exception as err:
            err_msg = 'Error occurred while applying AMBAImportExitHook on {0}'.format(reportform_name)
            logger.ELOG(err_msg)
            logger.ELOG('Please add Reportform <{0}> manually in choice list("Conf Template").'.format(reportform_name))

    return acm_object

...

}

