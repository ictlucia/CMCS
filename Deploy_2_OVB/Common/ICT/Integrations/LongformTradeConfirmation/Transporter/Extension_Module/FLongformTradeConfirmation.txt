#
# Front Arena exported extension module.
# source          ""
# timestamp (utc) "2024-02-16 07:28:46.6"
# ***** DO NOT EDIT! *****
#
name        "FLongformTradeConfirmation"
description "FLongformTradeConfirmation"

groups {
}

decls[FColumnDefinition] {
  "BusinessProcessCurrentState" ( "sheet columns.confirmationsheet" ) "";
  "BusinessProcessError" ( "sheet columns.confirmationsheet" ) "";
  "ESignUsersList" ( "sheet columns.confirmationsheet" ) "";
  "FailedTransportType" ( "sheet columns.confirmationsheet" ) "";
  "InProgressTransportType" ( "sheet columns.confirmationsheet" ) "";
  "LongFormTransport" ( "sheet columns.confirmationsheet" ) "";
  "NumESignPending" ( "sheet columns.confirmationsheet" ) "";
  "ReportUpdateBy" ( "sheet columns.confirmationsheet" ) "";
  "SuccessTransportType" ( "sheet columns.confirmationsheet" ) "";
}

clx FTradingSheet [FColumnDefinition] {
  BusinessProcessCurrentState =
  Description=LongFormTradeConfirmation business process current state
  ExtensionAttribute=BusinessProcessCurrentStateExtAttr
  GroupLabel=LongformTradeConfirmation
  Name=Current State
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  BusinessProcessError =
  Description=Shows error from LongFormTradeConfirmation business process current state.
  ExtensionAttribute=BusinessProcessErrorExtAttr
  GroupLabel=LongformTradeConfirmation
  Name=Error
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  ESignUsersList =
  Description=LongFormTradeConfirmation Report ESigned By
  ExtensionAttribute=ESignUsersList
  GroupLabel=LongformTradeConfirmation
  Name=ESigned By
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  FailedTransportType =
  Description=All failed tansport types
  ExtensionAttribute=FailedTransportTypesExtAttr
  GroupLabel=LongformTradeConfirmation
  Name=Failed Transport
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  InProgressTransportType =
  Description=All InProgress tansport types.
  ExtensionAttribute=InProgressTransportTypesExtAttr
  GroupLabel=LongformTradeConfirmation
  Name=InProgress Transport
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormTransport =
  Description=The Transport type selected for this confirmation .
  ExtensionAttribute=TransportTypesExtAttr
  GroupLabel=LongformTradeConfirmation
  Name=LongForm Transport
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  NumESignPending =
  Description=LongFormTradeConfirmation Number of ESign Pending
  ExtensionAttribute=NumESignPending
  GroupLabel=LongformTradeConfirmation
  Name=Number of ESign Pending
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  ReportUpdateBy =
  Description=LongFormTradeConfirmation Report Updated By
  ExtensionAttribute=ReportUpdateByExtAttr
  GroupLabel=LongformTradeConfirmation
  Name=UpdatedBy
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  SuccessTransportType =
  Description=All successfully delivered tansport types.
  ExtensionAttribute=SuccessTransportTypesExtAttr
  GroupLabel=LongformTradeConfirmation
  Name=Successful Transport
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


}

decls[FCommandExtension] {
  "Manage Messages" ( "active commands" ) "";
  "Manage Templates" ( "active commands" ) "";
}

clx FBackOfficeManagerFrame [FCommandExtension] {
  Manage Messages =
  icon=Details
  LargeIcon=Yes
  ToolTip=Application for managing Longform messages.


  Manage Templates =
  icon=Report
  LargeIcon=Yes
  ToolTip=Application for managing Longform templates.


}

decls[FCustomApplicationDefinition] {
}

clx FObject [FCustomApplicationDefinition] {
  ManageTemplatesApplication =
  CreationFunction=FLongFormTemplateManagerMain.create_application_instance
  HostApplication=
  HostObjectType=
  HostPath=
  Name=Longform Template Manager
  ObjectTypes=
  ProfileComponent=


}

decls[FCustomFunction] {
}

clx FObject [FCustomFunction] {
  get_bpr_current_state_error_from_acm_object =
  Definition=get_bpr_current_state_error_from_acm_object(FObject acm_object): string
  Function=FLongFormUtils.get_bpr_current_state_error


  get_bpr_current_state_name_from_acm_object =
  Definition=get_bpr_current_state_name_from_acm_object(FObject acm_object): string
  Function=FLongFormUtils.get_current_bpr_state_name


  get_ext_obj_seqnbr =
  Definition=get_ext_obj_seqnbr(FObject conf): string
  Function=FIntegrationUtils.get_ext_obj_seqnbr


  get_other_transports_type =
  Definition=get_other_transports_type(FObject acm_object): string
  Function=FLongFormUtils.get_other_transports_type


  get_report_updated_by_from_acm_object =
  Definition=get_report_updated_by_from_acm_object(FObject acm_object): string
  Function=FLongFormUtils.get_report_updated_by_user_name


  get_transport_types_of_status =
  Definition=get_transport_types_of_status(FObject acm_object, FArray status ): string
  Function=FLongFormUtils.get_transport_types_of_status


}

decls[FCustomMethod] {
}

clx FBillingInformation [FCustomMethod] {
  GetReportFormName =
  Definition=ReportFormName:string read
  Function=FLongFormUtils.GetReportFormName


  SetReportFormName =
  Definition=ReportFormName(string reportform_name)
  Function=FLongFormUtils.SetReportFormName


}

decls[FExtensionAttribute] {
}

clx FBusinessProcess [FExtensionAttribute] {
  ESignUsersList = py("FLongFormUtils", context).esign_users_list(object, object.Diary);
  NumESignPending = py("FLongFormUtils", context).num_esign_pending(object, object.Diary);
}

clx FConfirmation [FExtensionAttribute] {
  BusinessProcessCurrentStateExtAttr = get_bpr_current_state_name_from_acm_object(FindBPRFromSubject);
  BusinessProcessErrorExtAttr = get_bpr_current_state_error_from_acm_object(FindBPRFromSubject);
  ESignUsersList = GetBusinessProcess:ESignUsersList;
  FailedTransportTypesExtAttr = get_transport_types_of_status(FindBPRFromSubject, ["Failed", "NotStarted"]);
  FindBPRFromSubject = getObject("FClass", "FBusinessProcess").Select(FindBPRFromSubjectQuery);
  FindBPRFromSubjectQuery = "subject_seqnbr in " + get_ext_obj_seqnbr(FindExtObjFromQuery) + " and subject_type = " + getObject("FEnumeration", "enum(B92RecordType)").Enumeration("ExternalObject");
  FindExtObjFromConfirmationQuery = "confirmation = " + object.Oid + " and integrationSubtype = \'LongFormMsg\' and parent=\'\' ";
  FindExtObjFromQuery = getObject("FClass", "FExternalObject").Select(FindExtObjFromConfirmationQuery);
  GetBusinessProcess = py("FLongFormUtils", context).get_business_process(object);
  InProgressTransportTypesExtAttr = get_transport_types_of_status(FindBPRFromSubject, ["InProgress"]);
  NumESignPending = GetBusinessProcess:NumESignPending;
  ReportUpdateByExtAttr = get_report_updated_by_from_acm_object(FindBPRFromSubject);
  SuccessTransportTypesExtAttr = get_transport_types_of_status(FindBPRFromSubject, ["Success"]);
  TransportTypesExtAttr = get_other_transports_type(object);
}

decls[FMenuExtension] {
}

clx FBackOfficeManagerFrame [FMenuExtension] {
  FLongFormMessageManager =
  CreateFunction=FLongFormRibbonMenus.create_ribbon_menu_longform_message_manager
  DisplayName=Manage Messages
  MenuType=Application
  ParentMenu=Tools/Actions
  RibbonPosition=Actions/Longform Confirmations


  FLongFormTemplateManager =
  CreateFunction=FLongFormRibbonMenus.create_ribbon_menu_longform_template_manager
  DisplayName=Manage Templates
  MenuType=Application
  ParentMenu=Tools/Actions
  RibbonPosition=Actions/Longform Confirmations


}

clx FBusinessProcessSheet [FMenuExtension] {
  ViewLongFormMessageonBPR =
  DisplayName=Outgoing Longform Messages
  MenuType=GridRowHeader
  SubMenuCreateFunction=FLongFormSubMenuView.LongFormBPRSubMenuItemCreate


}

clx FObject [FMenuExtension] {
  ViewLongFormChildBusinessProcessForOperationView =
  CreateFunction=FLongFormSubMenuOperationsViewer.ViewLongFormChildBusinessProcesses
  DisplayName=View Child BPR
  MenuType=HgcViewRowSingleObject
  ParentMenu=Outgoing Longform Messages
  ViewFilter=TradingSheet:FConfirmationSheet;TradingSheet:FSettlementSheet


  ViewLongFormConfirmationObjectForOperationView =
  CreateFunction=FLongFormSubMenuOperationsViewer.ViewLongFormConfirmationObject
  DisplayName=View Confirmation Object
  MenuType=HgcViewRowSingleObject
  ParentMenu=Outgoing Longform Messages
  ViewFilter=TradingSheet:FBusinessProcessSheet


  ViewLongFormDeliverReportForOperationView =
  CreateFunction=FLongFormSubMenuOperationsViewer.ViewLongFormSettlementDeliverReport
  DisplayName=Deliver report
  MenuType=HgcViewRowSingleObject
  ParentMenu=Outgoing Longform Messages
  ViewFilter=TradingSheet:FSettlementSheet


  ViewLongFormESignReportForOperationView =
  CreateFunction=FLongFormSubMenuOperationsViewer.ViewLongFormESignReport
  DisplayName=ESign Report
  MenuType=HgcViewRowSingleObject
  ParentMenu=Outgoing Longform Messages
  ViewFilter=TradingSheet:FConfirmationSheet


  ViewLongFormMessageForOperationView =
  CreateFunction=FLongFormSubMenuOperationsViewer.ViewLongFormMessages
  DisplayName=View Longform Message
  MenuType=HgcViewRowSingleObject
  ParentMenu=Outgoing Longform Messages
  ViewFilter=TradingSheet:FConfirmationSheet;TradingSheet:FSettlementSheet;TradingSheet:FBusinessProcessSheet


  ViewLongFormParentBPRForOperationView =
  CreateFunction=FLongFormSubMenuOperationsViewer.ViewLongFormParentBPRSheet
  DisplayName=View Parent BPR
  MenuType=HgcViewRowSingleObject
  ParentMenu=Outgoing Longform Messages
  ViewFilter=TradingSheet:FBusinessProcessSheet


  ViewLongFormParentBusinessProcessForOperationView =
  CreateFunction=FLongFormSubMenuOperationsViewer.ViewLongFormParentBPR
  DisplayName=View Parent BPR
  MenuType=HgcViewRowSingleObject
  ParentMenu=Outgoing Longform Messages
  ViewFilter=TradingSheet:FConfirmationSheet;TradingSheet:FSettlementSheet


  ViewLongFormRedeliverForOperationView =
  CreateFunction=FLongFormSubMenuOperationsViewer.ViewLongFormRedeliver
  DisplayName=Redeliver confirmation
  MenuType=HgcViewRowSingleObject
  ParentMenu=Outgoing Longform Messages
  ViewFilter=TradingSheet:FConfirmationSheet;TradingSheet:FSettlementSheet


  ViewLongFormReportFormForOperationView =
  CreateFunction=FLongFormSubMenuOperationsViewer.ViewLongFormReportForm
  DisplayName=View ReportForm
  MenuType=HgcViewRowSingleObject
  ParentMenu=Outgoing Longform Messages
  ViewFilter=TradingSheet:FConfirmationSheet;TradingSheet:FSettlementSheet


  ViewLongFormRoutingBusinessProcessForOperationView =
  CreateFunction=FLongFormSubMenuOperationsViewer.ViewLongFormRoutingBusinessProcesses
  DisplayName=View Routing BPR
  MenuType=HgcViewRowSingleObject
  ParentMenu=Outgoing Longform Messages
  ViewFilter=TradingSheet:FBusinessProcessSheet


  ViewLongFormSourceDataForOperationView =
  CreateFunction=FLongFormSubMenuOperationsViewer.ViewLongFormSourceData
  DisplayName=View Source Data (.xml)
  MenuType=HgcViewRowSingleObject
  ParentMenu=Outgoing Longform Messages
  ViewFilter=TradingSheet:FConfirmationSheet;TradingSheet:FSettlementSheet;TradingSheet:FBusinessProcessSheet


  ViewLongFormTreatConfAcceptForOperationView =
  CreateFunction=FLongFormSubMenuOperationsViewer.ViewLongFormConfirmationAccept
  DisplayName=Treat Confirmation Accepted
  MenuType=HgcViewRowSingleObject
  ParentMenu=Outgoing Longform Messages
  ViewFilter=TradingSheet:FConfirmationSheet


  ViewLongFormTreatConfRejectForOperationView =
  CreateFunction=FLongFormSubMenuOperationsViewer.ViewLongFormConfirmationRejected
  DisplayName=Treat Confirmation Rejected
  MenuType=HgcViewRowSingleObject
  ParentMenu=Outgoing Longform Messages
  ViewFilter=TradingSheet:FConfirmationSheet


  ViewLongFormTreatSettlementAcceptForOperationView =
  CreateFunction=FLongFormSubMenuOperationsViewer.ViewLongFormSettlementAccept
  DisplayName=Treat Settlement Accepted
  MenuType=HgcViewRowSingleObject
  ParentMenu=Outgoing Longform Messages
  ViewFilter=TradingSheet:FSettlementSheet


  ViewLongFormTreatSettlementRejectForOperationView =
  CreateFunction=FLongFormSubMenuOperationsViewer.ViewLongFormSettlementReject
  DisplayName=Treat Settlement Rejected
  MenuType=HgcViewRowSingleObject
  ParentMenu=Outgoing Longform Messages
  ViewFilter=TradingSheet:FSettlementSheet


}

clx FTradingSheet [FMenuExtension] {
  ViewLongFormMessage =
  DisplayName=Outgoing Longform Messages
  MenuType=GridRowHeader
  SubMenuCreateFunction=FLongFormSubMenuView.LongFormSubMenuItemCreate


}

decls[FParameters] {
}

clx FObject [FParameters] {
  FLongFormAMBConfig =
  AMBAddress=INTICORP-VM-01:9100/mb
  AMBASenderSource=BO
  FLF_Docx_Pdf_Reader_Writer=FLF_DOCX_READER_WRITER
  FLFConfirmationOut_AMBReceiver=FLF_OUT_MSG_READER


  FLongFormConfirmationOut_Config =
  AddinJsonPath=
  AppendOriginalReport=0
  ApplicationName=LongformTradeConfirmation
  BPRCommitRetry=5
  builddate=06-Jul-2023
  ConfirmationStates=[]
  CustomColumnsModule=LongFormColumns
  DefaultMergeFieldsTag=<M>
  DefaultTransportTypes=['File']
  EmailUserName=
  FAXServer=
  LibreExePath=
  LibreOffice=False
  LibrePdfTimeout=10
  LongformPath=C:\Longform\outgoing_messages
  ReportAsPDF=0
  SecureSMTPConnection=True
  SMTPServer=
  StateChart=FLongformTradeConfirmationOut
  TemplateAndReportAccessOpsName=TemplateAndReportPermission
  TemplatePassword=
  TempPath=
  UpdateWordUponOpen=False
  version=1.0.9-0.5.757


  FLongFormConfirmationOutNotify_Config =
  LogLevel=INFO  # INFO, DEBUG, ERROR, WARN
  NotificationLevel=TRACK  # TRACK, DEBUG, WARNING, ERROR, SUCCESS
  NotificationMedia=OFF  # OFF, PRIME_LOG, PRIME_LOG_TRANSIENT
  NotifyUser=


}

decls[FPythonCode] {
  "FLongFormConfirmationInstalledComponent" ( "installed component" ) "";
}

clx FObject [FPythonCode] {
  FEvaluateCondition
"""----------------------------------------------------------------------------
MODULE
    FEvaluateCondition : Module containing processing of evaluating the string used in condition logic
CLASS
    EvaluateStringCondition - Deals with evaluating the string.

VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
eNqtWM1v28gV5wwpiqJlO1+7bYo2ZZymqYpGyWYXBeq13U1jZxPAcQLLu0CF3RI0h5JpS6QyHGXXKgUUdVrspUXb82JhAz00wJ57
6t/QQ9ETb0WDAj4X6MGHpu8NSVmSV4iDRgYfh48zb96893sf9D+VsZ8K13twRZeAMKWuMMJoi9TJ+wpTmfZUYdoerVNGa0ql8I+A
Ksr11/gzHzxc/mB1xbTgd3flidPqOsK7EwbMF34YWPPWg5B1W57lhoFw/MAPmlaHh64XRTgMG5aXrsEnseVZkeA47EYes/wAl2WS
WmHTd807q7drNblZvldNLjje8bq17DmtyPrEF1tfLbxqmh+urNfuP1ybt66uXzXN9ZXaxvr9OxvAqd1Yvf/g/sZtOZ6XG71VtW4H
u1Y7ZH7Ddx3cJLJEmAp0ud8RN7zA5bsdASq35WlvuC3P4ZbwPhVwAuZJZeA0uMQNuWf5kRWEwoq6nU7IYV1V7nSram1swatUSD7J
7UYibPs9Z7PlpfPexnkoqd0JAy8QVtvZlVM/CfmO5USW92nHc1EdaQTnhPYMlqVHON7NEWh0bnkBaPM6EXKIIF1zx2FLc9iuAvGU
OgHoUkbqKqN1jan1AtPqOisw/alSL7IiM+BusBIz4V5iU6wMd5NNsxm4T7FZdgbuZXYWQH4u+doEcPTelfaTRnZbTgSWOMZKhryw
43FppgF4wkCuqk+vPHi08VP74aOV9dtry8nZtZX3AScfrqScjYfrSSmdsX6v5tKxoxbhuoPHnccohQh9itGJVJO0IKkuaVFS43M9
VmwlVvZJTA4IUVgJDmf2fiG1wd/9AE7ltPwo1bfRDVw5gKiSSMMTDibPdxzutC1Jbea7Yt5a9uV8h+8OhycufeJwH/GGIMnM4A0k
nTgbXjU8mwEkVmKyA7nmGVl7pjyjidraihKVb0UcTSDJ0RsnM0W1s5sYCy2nvcmcpW/DpH+j9N6tCZ6s2jZoK2y7utAKXfDhUjVf
fAr11JrC9VwbbgxGkkwhKQOxcDAN5BQSC6eSePkVJJJTSZx7BYnaqSReeQWJyqkkfieXWNF7dHGxRy/DtQTXwuIRWToiC2sVmpwf
5EI7jcCQR8k1e4L7bTvyhJ2jNIL1WuS1Gol5DO8xTRIjR8xFPMIZPJSuk8HfkWH0rJeBbcQkGlyFPKrRDzHZVw6UZeXjCx/RPu2r
goCRaKzuqUR5bDBwaIX2Ph+EkcxCg5iF80QjoRdZDhSKttfehKQ8YP5/4Ty0nHuiy4N5aw1KwYCLjij4wmtHSREUcoTgFY2fQxue
B1IvyO3qU+muaCxvzMz12THXfA+to0lrnyG9a5MtPLLqBPbU3NBfZoZmkBL5HIxIPmKUqb+iF5U+CX4tZ2jAX5YzshFWk2wGkzOK
wG/IGdloSMZPBjM+G8z4bGSGJWcYwP+TnJGNjneJ0eWl3m8nuLyZuzyrPGBVAaXb9TpCsqGHYMh3Ama1nGYTx9fk09w4DMCq85mY
ky4e4x+Ra4cErHj4An49+tG1QzTw4X/h6YjMAWMOUGBGArSJsDAmBrQEclShEguJCtuN+33attvOjmenm72FrnpTev0CmSGjV5n2
rk7GwZCUERTow+H2HyACcLAHdj8ASzeVPvQOfTVWtum+KoPwHQhCrV8Az2gxlNgDCElRiOkeeHBH45diug/FNtYOKBRWtY8huvH4
UqxGz+FN8UAhiDIDkcMKO5T/AbiltAzjSJjbU0PjMo6DdVgxzXRAwXPcFcs47EoQMxeVVM8Rmc9PyJwZl8mg43kKnGVlj/RpTGUD
8JsJeIJukztuhqnVe7UfWHkmlaBBLnQmVoOH7ZFueAxLWO/RAZMBBR2HGHDv8q+DMzaOiMUxs0J2B4RddslYAGt58bgApAnl4+Oy
NAdkzN/Tx1iaEEsVkhRw1w5AkFZvJhomo/FMbi6gAtj9Lrl5aektTkaUCHe8wO/lqBruGHI5ldlEhbdcllOsDfwN3KkQdVq+gBbG
CxLdD6A9FklB9vaJ1vADluhOpwPRwTE9JTND/SF0gxzRyr+FRJPFLw0eI7dvokvFovpM7ia7EXZBqJE/J8QeD7OzJ46zjEa9KSOk
TDT4O0fK8k8jOtWIQWeICU8pHdzpDO1VTm2ykUAsZN6UgfhItgL7CsIYAcoIJD7oa/sajNWLiiDbdEfl94S6n3EOSIRPheOndAQr
1FhrIMS13peTIJ5pHGWfUvlHX4d7EX4IZd9YWUKF5hWaTwl+6D9fCvQheUNtb/WlCZWjddb4N6STk8rknmXMqhI1EiXJzN3VMGje
DXn7A+G3orrhR3ajFTqirsPID0SlkJbhKpIbSEpIzJMtVzIFdcWGc9tw5mYecYpuEgMgMUPKLyhe1KC9K5MAMCRhxPWlYdf/kOCH
DDid/I7wWwMQYNujyiyr8qoA1+6ryN8jvwQ+01JHswLcC3DX4a4LDRolyJd7ar8Yw7deV0qUXF1yjdgQhW0dcubfRXHfiNNarED2
hFG/GHwTuKaYiot72Av8EZ7K+RNILMDaaVj7l7jI/8xIQJnRp8Gbkj8D/L8B/6/MCLCC0OBnsQEaKPxfUj5k874xLB0000blZ2+N
7O1c9lY+g+bK9mwMp42LwKFZDi/1vngdAH99iN4MQ8hqwXFSP0Rs9uobI0pEW2G3xaxNL/3PDOeeK6wGgNaBvqXarMpoW1zEYLOg
6Gx3I4Gs6qCvZrleP+/LoJGlQwbO2kblDL+FT9gwwoe0bINg00RPN0iKzbQhPY4a/jZmxBIESCo1uTo59Ia6iroJK4Ju2+O+y78r
kyoc8QlAXoQ281y/Dd0Nopxfz6tBpXQcfYkedkWnK2QU1k0Mkyycb0oGHzDqJXwpu+R6iefD8XA9l7vFHhj6CYbXezJqIYkTk5YJ
hdilL+gLTTMgjg3gYBo3qYmpXCZ1eVEDeGfgLi/a+/6kCD+56VplGr+RAqft2XZigsnk/4VgXLbtx12nlb0p2jYLXdtOraMNnIFZ
hp9F8iMk0pfvIHl3NEcdfxuiI8/mCQqSk4rVS6PGrFEyzhtXjFk5o6LyH+fOTn3/FbISYyFVd4nk3xvatKH+DyCpa3Y=""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongFormChooseTemplatesModal
"""----------------------------------------------------------------------------
MODULE
    FLongFormChooseTemplatesModal
FUNCTION

UNITTEST:

VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code
    within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done
    to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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
QsW0rCH3/8SKSlb9f8sBzxM=""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongFormChooseTemplatesView
"""----------------------------------------------------------------------------
MODULE
    FLongFormChooseTemplatesView
FUNCTION

UNITTEST:

VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code
       within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done
       to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
eNqtWUtz48YRJh4kQYiiKGm12pfXsNebmC6v1l7bieNKOdZS0q5iWXLp4Uoh5UJBnJEELQjQQ3BXYsm52If8gFSqcpOOvuUv5Jbf
gFsqp/0LPsTp7gHA5+rhslgcNIY9PdOP+bpn9N/c0J8O38/g234EDcvZOaYw1VdshZ6qrdJTs7UnOaYx/fsc07lyqH+n2XmmbuVq
+f/oai734Bf8M7/YWNpZWzYt+FtZC4P9lVA06wdh2ObbvNny3Yi3v/L4C3NlZ72+vbqxbpo766vb28tb25+Y5lfLm1vQ94l1f/O+
aW5C5+YqcW09XFv9YnV7kehPSPr7C9ZicGw1Q+bteQ038sKgbUWhFR1wq90QXit6yIOGOG5FnCFXx+cPGz53hRXxo8hqhIyTHPh7
4UUHXkAjG6Hglte2gjCy2p1WKxQwfIEYHy1Y2wfwk5SVMjU67Shsel131+eS7wPkQ0nNVhjwILKa7jGxvgjFM8ttW/yoxRu4KpzX
ckeUYDAsXRop1JvUjaxOmwuLB7CoX9JvLzGc1hvDAaalAfZPaHgOAiuHQWVrTGXa9zlbZzrLwzPPCqwIzwIzWAmeRW4wk018n/tO
sUtAl9kk0SbQFTZF9ATQVTZNdBnoGTZL9CTQ19gc0RWgr7N5oqeAvsFuEl1lt9htmGea3WGvwXOG3WWvw3OWWewNeF5jb0J434vv
nBeD3bcERwc7e/D7u1ab+9ItUcpETmhoQ/bAbx1tskmb7iTnQKvjU4GvSj0atfoJ9uSJLlBbpNY4UaEtMfzVpJ4JasssB6tW17dr
k/FU03F938nWEutNJ3wWG02n4QYN7tvXmk664j6uyaaz53GftR3fa0dxselA5Lh+XIL+zpHD/H1kaUdu1Gk7uBHiaiqH5tsNj+KJ
lisgbp3nYCPkdlst/9h57vodHs+OmTWeaTp+GLb6Z65psQ6Me3ae5hdlsNUPOTENjx9fP88pC63j2HAcL/Aix7mJZr6BhlcKShm+
w5/u/XNlpXIaSp8PleRLPixAc5I7RLsr3bvprrMWUWXrqRswP9uKVk0Rk6iGIqrwIF1kMwNNPCG5aeSvUbRKCN19+9wV9g0aWaSa
LrKSLPJUOYMfmIJB0t3K1kWotNcJGggfFgP3gHRCsz3PByps8QDCmnWEF+xTP3Mj12qFrY5PkJNJWq+pwoDJ7DkpJXOxQ5LEtTF6
T0oVlng7EuHxgz7N37mE5smwEd2zTVbNdD/JnSmZ9k9foX2iVKI/6ZnkhFQVC8NzYVTl8pfJ0CUYNF7TVLiDcj+4tKYDwxpqn6bq
JTRtvkLTA7Kf1LPhe41nVihT2Mbn1m4niuANOIYMgrqnfHKXv8Ic8cRGsPF5HeVy9oNKER8X5JxDdhG4QX+XWSN/QcT3yb2yLZ5c
xhYEj6kJpGVcYhuj5dRGUCf+ZEXi5qjfxe00CSb6vXuBfgMSr6zjn1+hI9ANQGgsGw649CCVAqShVF3wffC1sAiHpa89CPv2WO9u
8WiF8HqsznegeXIFn2bSrqzvn66or0w/UmHUzoLKTSaeV4XyNC4PB4HYc1R+DSugPpUXLlR5QOaVFf/rz3N0snsx4WYCEv1hO4tj
2vWdFkOoSzEQMLbTiDpQ2gIY7kJ97D7nbOxuAD+ugeRzzHQXmp3MTIULd8OAxAEjoYHyqZEeQxOhmZRT9QxKvG+hRDrUTvUTFU12
orbfofc8U+g9d1g4LZ5k/GcqmBVPNFqX/xyzZtGU2jcT8oq0sbJeM2J9Nwx9gdnZLj7hESWOCTRkcTnA8wCLi/UDTrhCKWYqywTS
YTWNcNU2GhLAmG0cuG1KE8O5Zy4MelVeVoJ9jZYzyQ8VqI90+HYfneuPsWIGvKInX/LKGpa40hdUfTD1mSpuYE8wk/Vp0PcO04lL
PdXOcqf6WW4p93XlW+0EPCY9+M3HLA/+KXTty/mngYaDapT6JZRaUKcn258KmYEynQSKN9CcpZ2gIc0OXiqQR2wD/EO+EEV8nYDX
zTCMVkGIbdQPPJ9BMrTzxFLTZYF3i4SRKKyN7RKGgINRMuydWTBrumAnWa2XVm65vK5UlIJaUXR1Rum+d5F/hgVdGVg2yZC7LqJF
Zl4Z9GkwS6TAsNsHuwKCpquwmAhbcAJ9EViwhFGImIcF9p9LnETGWKh4C5qjvjLpw4tUHyd5pDTMIONvmfpMidRDDYygETToSU8+
6ylAjwo9xazHSHpKAz0a9JhZz0TCU856JqFHh55K1jOVzFWVPUmQP8gst8n3IWoAZ+qJT6yVxCW9uLWNReh5DkrbcxiRFIVbcEbj
dWkDu5olm7SnmBDrtWmRp5BeZCydQ2hpXSYKaQUj9NQltAUow1POE1MprBOUiTexwU0j7mEzrhKeEYlWThZpf0GPLJCfZyDMDQAj
9X+6ZiiFn4Zb+kWXz+7Dc2NidJ6R43gWDicQHHTgzoJCZo5TlQEC4aGcaI1oncIkD84sHBYPDcwflF9KLJ/kF+3U7KMn8ORFVBmv
OpiRuB/fS3jV0fdehvdJesf5KjTfJNFTREPwHFaAr8qm2UwyDt9n8doje09nrPStowLru57RU2w+0/AGSYYgPKz28VT7xlZPp/v6
p9jNbOwtGot4PpPxYP9t6p8l+g7R18hqc+y1RM5sys/uQti/3j24ENsRwvFM7rm+10UUl17vgTmVL26TB6yJpxPRwbqeAXu43+ll
5e5blxkXlxd9Pwuo2Nyia49tfhS9RETajvV1GPGSAd2dQ9IK9wbOiu1Y3z5u8Zc/wV93DskRDrv4FRdtULI7nxDDLHGyeTlLlxLP
LqYLlWXRGgR51yTaoiX9HZc03b8kqhhSHlrUCvH0L4p4VrpMQoOVXGnSxQ2y4E2j5GzztGRkcMoXTS/gmCDgF0FDenZshMGeJ5pu
JL24zwMuXLwSjeczHXrlHemxJWm8ShW83QoDRtk6zMrW9oIlLZL1pKtJa1u+F+EAmnwfytaFeEqOAH9K6bEaPosL8qzX/SgRF4Ia
Tdfry3N0w9rs+JHX8qHs7ez2HLewXrsuSlS71d0WhqltYpEQQmqEqo7Q0qTSYQt7/VDE0xlWPdlZ3Yk8v22X6Bd0gq1tLi/Z07Ly
+wKnlKuyK1sH4Yt6ktQhYKbpPfQ7zeApdxkEjV1C7KYeCcFUoxS3obrc9loSn60MlfMprNv5NXeX+z8kVaTG/H274LvHYScaBuyq
F8gtxx3J8A9EzCWCa7xZw88MtaZSpQ/S+DSJKigqQHc54czeVPnefXAuiA/PPQLhWblpUUY/RRhXJSTLKy94qr2rrx/vWHXBMQot
8IMlhfaVKpr4LSo+j819bH4zJoWV5f2TFPSv9CowB1oZSrd2iZsrOXKgOkFQKaa6/FHBAw2u/1vlBA4pSTpSTrU+CtORSjTdpFNq
KZzlqSdPmksuI+HqSSlg2kl6i2wCb9gpdSindMOe/NKbq38kJJ5s1hmadfJMH5iznxvSUsY9B+lEHeC86NlbQQlv8pPRJbzJT2gz
4SywW6w8Xjp4/bb4GN2mr8Mmt43lCKpkthp0Zxefu56PWy4rYdviV8D5Em+cxbvYvIdAeS/BiOHUggkpxQTbSGV0J7/EU2H6KvBa
M869fBvFPSLcTcQBIFkSkeypIVDvzo9MKWFOYJlkz47Bz+6dZAiB4si493F6vHe01Y3PxYdIFORlk8Ab59pErLmNpl1d2Tlao03x
uAMHGy7s8mOoowLIT9Hj8Ch5exqKLr4VAXsQt+3CcsCww8AOBBaCpQ0JjVRdJhhG/Y/pfo1Gr3i+X5NXhLbZOXJ25awj16cN2jEJ
CPwb98hntOUMABmTAMggACrDcamsmqpJEGSoEoIMFT7YJpBk0Bc26/mXrwOTrtfm8J8LAVjWcWLTceS/1YAuO843HddPfik6Dgsb
jiNmcfVz2FxPISUu439PvEYT0mXIZJF9e7CgvpuV0feympuAiHAJr0rFHwYhqXdmQjy8nv5LF2pk1agYBfyoijn8LcJ3Ar4V+OaN
28bbRpHGw6G3ThkEAqEeCi4+Rckf0S23DIwlKqjkMWHMKmLj99IynyK8tfHkp1fR2Ib2f+YfBhM=""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongFormColumnCreatorGridModal
"""----------------------------------------------------------------------------
MODULE
    FLongFormColumnCreatorGridModal
FUNCTION

UNITTEST:

VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code
       within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications
       done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongFormColumnCreatorGridView
"""----------------------------------------------------------------------------
MODULE
    FLongFormColumnCreatorGridView
FUNCTION

UNITTEST:

VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core
       is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module
       at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongFormColumnDefinitionModal
"""----------------------------------------------------------------------------
MODULE
    FLongFormColumnDefinitionModal
FUNCTION

UNITTEST:

VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text
       code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications
       done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongFormColumnDefinitionView
"""----------------------------------------------------------------------------
MODULE
    FLongFormColumnDefinitionView
FUNCTION

UNITTEST:

VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code
       within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications
       done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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
/AfIcyVs""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongFormCompareDocFiles
"""----------------------------------------------------------------------------
MODULE
    FLongFormCompareDocFiles
FUNCTION

UNITTEST:

VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text
       code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications
       done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongFormConfig
"""----------------------------------------------------------------------------
MODULE:
    FLongFormConfig : This module defined all global variables which used across application

DESCRIPTION:
    This module intialize configuration parameter object , logger object.
VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
eNqtVE1vm0AQBew4lDaqm0MuPXQuOURqHbW9RVVVYoNFZIOLcQ97QQTWeFNg0bJO4lzzR9pj/5JvVU/9F90FN19Vb1lpF5h9M/OG
ebu/lAejLeYnMasTsSQKUhI10TIVqeLZyrRcQ1reQi1Vwa2kfa2iNla/bSVbSee7hjrCti1s21i7VpCeKuiJmEaiTZUD/ee5pihv
HnEYY28wG1lHBohhj2iR2pTlfVrMSQpHECxIBTlNlhmGBM9JgROIsgzSjJ5GGZxHjESnGa7gYkHiBSwruR8zWlUQlWVG4ogTWhjG
wJr2fWcSOJ7bpLobmBScRBm5whDXeZes9oIyYlGOOWZAT89wzOE1ZDRNb757xhfLn8qQsO/vG4ZvTQPf6csk08ORM3YCs35vMr7t
gVmsZE4y3/CqgFPgCwxVzEjJD3ERs1XJRQ0Ns8M4wxEDji+5oJZguCB8QYraJaZMMK+goByqZVlSJvx6daZ3vfvlNaB4WXGakyv5
vxrce4mTkfKSFrjgkEerGnpB2VeIKsCXpShT0JF5IfqHfSLcmhJus0VcdoEBLgSbx1TKbyls90Bbv7CdguO0adKMk6xaG5O/rarQ
7o2KzPFxIySkS9NcmND+fY2xvI7iLblLOZmvwo3Dq//BNoCDp+vtMExoHIbo+Q12VKuDtQRRJo8g2hEUwonpm+PQOz5B3Xm24RE2
QkK66wWO7Vg+6vY913aGd9B7jhtY/tCvRRTOAmc0re0v7ZEdSnTozYKh57jDcDwdhp9n1sxCe3JzMrDDgRmYt/YfCutIVnK52n1w
znrlaq1/aPr3UZXXRlfeITu62tV09Zmqqx21rf4BJV5HPw==""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongFormConfirmationAPIs
"""----------------------------------------------------------------------------
MODULE
    FLongFormConfirmationAPIs
FUNCTION
    should_adaptiv_create_longform
    get_checksum_for
    get_report_from_acm_obj
CLASS
    LongFormSourceData

UNITTEST:

VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core
       is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module
       at user end.
----------------------------------------------------------------------------"""
import FLongFormConfirmationHooks
import FLongFormUtils

def should_adaptiv_create_longform(confirmation_obj):
    """
    This function controls the generation of Longform confirmation.
    Return True to generate the Longform confirmation using FrontArena module FLongFormConfirmation.
    Return False to generated the Longform using Adaptiv.
    Make use of confirmation obj to define filter criteria.
    """
    generate_longform_ctrl = FLongFormConfirmationHooks.GenerateLongFormControl(confirmation_obj)
    return not generate_longform_ctrl.generate_message()


def get_checksum_for(confirmation_obj):
    """Input:
        confirmation_obj : acm.FConfirmation object for which the checksum needs to be calculated.

       Output:
        Checksum string generated from source XML generated from FWorkbook.
    """
    checksum_ctrl = FLongFormConfirmationHooks.LongformChecksumControl(confirmation_obj)
    return checksum_ctrl.calculate_checksum()

def get_report_from_acm_obj(acm_obj, doc_type='', doc_path=''):
    """Input:
        acm_obj : acm object for which docx/pdf report needs to be fetched.
        doc_type: docx/pdf
        doc_path: path where docx/pdf report is to be generated

       Output:
        Document file path for report generated from acm object.
    """
    template_file_name = FLongFormUtils.get_report_from_acm_obj(acm_obj, doc_type, doc_path)
    return template_file_name

def set_user_esign_on_external_object(path_of_image, user_name):
    """
    Input:
    path_of_image: Image which needs to be uploaded to external object
    user_name: User name that is configured in PRIME
    Output:
    external object
    """
    external_obj = FLongFormUtils.set_user_esign_on_external_object(path_of_image, user_name)
    return external_obj

class LongFormSourceData():
    """ Class Represent Source Data """
    def get_source_data_dict(self, confirmation_obj):
        """ Returns dict for confirmation column data
        """
        sourcedata_obj = FLongFormConfirmationHooks.LongFormSourceData()
        formatted_dict = sourcedata_obj.get_source_data_dict(confirmation_obj)
        return formatted_dict


...

  FLongFormConfirmationHooks
"""----------------------------------------------------------------------------
MODULE
    FLongFormConfirmationHooks
CLASS
    GenerateLongFormControl
    LongformChecksumControl
    LongformEmailHook
    LongformFaxHook
    TransportType
    LongformStateChartAndProcessingClass

VERSION: 1.0.9-0.5.757

DESCRIPTION
    This module provides the customizable class for deciding if the Longform message is
    generated or not.
----------------------------------------------------------------------------"""
import FLongFormConfirmationHooksBase


class GenerateLongFormControl(FLongFormConfirmationHooksBase.GenerateLongFormControlBase):
    """ Class to control generation of confirmation reports """
    def generate_message(self):
        """
        This function decides whether the message is generated or not.
        Return True to generate the message from LongformTradeConfirmation, False to generate
        message from Adaptive.
        @return: boolean
        """
        return super().generate_message()


class LongformChecksumControl(FLongFormConfirmationHooksBase.LongformChecksumControlBase):
    """ Class to control and calculate the checksum for the confirmation """
    def calculate_checksum(self):
        """
        This function calculates the checksum for the confirmation
        @return: string
        """
        return super().calculate_checksum()


class LongFormReport(FLongFormConfirmationHooksBase.LongFormReportBase):
    ''' Class to configure report name, route path for "File" transport type'''
    def get_longform_report_name(self, default_name):
        """
        This function is for customizing the report name while generating the report.
        self.confirmation_obj : holds reference to confirmation object
        @param confirmation_obj: acm.FConfirmation object
        @return: string
        By default name of report would be in format: <conf_Id>_<reportform_name>_Msg
        Example:
            return "conf_report_for_conterparty"
        """
        return super().get_longform_report_name(default_name)

    def get_longform_route_path(self, longform_path):
        """
        This function is for customizing the longform path while routing the report.
        self.confirmation_obj : holds reference to confirmation object
        @param confirmation_obj: acm.FConfirmation object
        @return: string
        """
        return super().get_longform_route_path(longform_path)

class LongformEmailHook(FLongFormConfirmationHooksBase.LongformEmailHookBase):
    ''' Class to provide hooks for Email transport type.'''
    def create_email_body_template(self, body="", footer=""):
        """This wraps body and footer contents under HMTL template.
        @param body: string type
        @param footer: string type
        @return : HTML string type
        """
        return super().create_email_body_template(body, footer)

    def get_email_body(self):
        '''
        This function returns email body content in string format.
        @return: string
        Plain text or HTML enabled text both can be return as string.
        NOTE: Don't provide <html> <body> root tags.
              as whatever return by this function will be wrapped under <body> tag.
        Example:
            Plain text:
                return "This is email body as plan text content."

            HTML text:
                return """<h2> This is email body with HTML Content</h2>
                            <p style="color:red">This paragraph is in red forecolor.</p>
                        """
        '''
        return super().get_email_body()

    def get_email_footer(self):
        '''
        This function returns email footer which will be included at end of every message.
        Must return footer content as string type.
        @return: string
        Plain text or HTML enabled text both can be return as string.

        NOTE: Don't provide <html> <body> root tags.
              as whatever return by this function will be wrapped under <body> tag.
        Ex:
            Plain text:
                return "This is email footer."

            HTML text:
                return """<h2> This is email footer</h2>
                            <p style="color:red">footer in red color</p>
                        """
        '''
        return super().get_email_footer()

    def get_email_subject(self):
        """
        This function returns subject for email. Must be in string format.
        @return: email subject content as string type
        Example:
          return "new email subject for every email"
        """
        return super().get_email_subject()

    def get_sender_email(self, sender_email):
        """
        This function returns sender email address. Must return email as string.
        @return: string
        Example:
            return "sender_email@fisglobal.com"
        """
        return super().get_sender_email(sender_email)

    def get_receiver_emails(self, receiver_email):
        """
        This function returns reciever(TO:) email addresses. Must return emails as list.
        @return: List of email id's
        Example:
            return ["abc@fisglobal.com", "xyz@fisglobal.com"]
        """
        return super().get_receiver_emails(receiver_email)

    def get_CC_emails(self):
        """
        This function returns reciever(CC:) email addresses. Must return emails as list.
        @return: List of email id's
        Example:
            return ["abc_cc@fisglobal.com", "xyz_cc@fisglobal.com"]
        """
        return super().get_CC_emails()

    def get_BCC_emails(self):
        """
        This function returns reciever(BCC:) email addresses. Must return emails as list.
        @return: List of email id's
        Example:
            return ["abc_bcc@fisglobal.com", "xyz_bcc@fisglobal.com"]
        """
        return super().get_BCC_emails()

    def get_attachment_list(self):
        """
        This function returns list of all files with absolute path which needs to be attached
        in email.
        @return: List of files with absolute path.
        Example:
            return ["c:\\longform\\legal_notice.pdf"]
        """
        return super().get_attachment_list()

    def get_report_name(self):
        """
        This function returns name of report while sending email.
        @return: string
        Example:
           return "new_name_of_report"
        """
        return super().get_report_name()
    
    def get_email_password(self):
        """ Function to get email address password or username for SMTP Server login """
        return super().get_email_password()


class LongformFaxHook(FLongFormConfirmationHooksBase.LongformFaxHookBase):
    """Class to provide customization for Fax transport type.
    """

    def create_fax_body_template(self, body="", footer=""):
        """This wraps/attach body and footer contents in sigle string.
        @param body: string type
        @param footer: string type
        @return : Plain string type
        """
        return super().create_fax_body_template(body, footer)

    def get_fax_body(self):
        '''
        This function returns Fax body content in string format.
        Must return footer content as string type.
        @return: string
        '''

        return super().get_fax_body()

    def get_fax_footer(self):
        '''
        This function returns Fax footer which will be included at end of every message.
        Must return footer content as string type.
        @return: string
        '''
        return super().get_fax_footer()

    def get_fax_subject(self):
        """
        This function returns subject for Fax. Must be in string format.
        @return: fax subject content as string type
        Example:
          return "new fax subject for every fax"
        """
        return super().get_fax_subject()

    def get_fax_sender_id(self):
        """
        This function returns sender fax address. Must return sender id as string type.
        @return: string
        Example:
            return "1235_fax@fisglobal.com"
        """
        return super().get_fax_sender_id()

    def get_fax_reciever_ids(self):
        """
        This function returns reciever(TO:) fax addresses. Must return fax id's as a list.
        @return: List of Fax id's
        Example:
            return ["1235_fax@fisglobal.com", "1235_fax@fisglobal.com"]
        """
        return super().get_fax_reciever_ids()

    def get_attachment_list(self):
        """
        This function returns list of all files with absolute path which needs to be attached
        in email.
        @return: List of files with absolute path.
        Example:
            return ["c:\\longform\\legal_notice.pdf"]
        """
        return super().get_attachment_list()

    def get_report_name(self):
        """
        This function returns name of report while sending email.
        @return: string
        Example:
           return "new_name_of_report"
        """
        return super().get_report_name()


class TransportType(FLongFormConfirmationHooksBase.TransportTypeBase):
    '''Class to configure multiple transport types and file_type'''
    def get_other_transports(self, confirmation_obj):
        """
        This extension point is provided for configuring transport types when TransportType="Other"
        in Confirmation Instruction of counter party.

        This executes only if ConfirmationInstruction.TransportType set to "Other"

        Supported transport type : File, Email, Mail, Fax, Custom.

        @param confirmation_obj: acm.FConfirmation object
        @return: List of transport type

        Example:
        return ["File", "Email"]
        """
        return super().get_other_transports(confirmation_obj)

    def get_file_type(self, confirmation_obj):
        """
        This extension point is provided for configuring file types(pdf or docx)
        @param confirmation_obj: acm.FConfirmation object
        @return: File type (pdf or docx)
        Example:
        return "pdf"
        """
        return super().get_file_type(confirmation_obj)

class LongformStateChartAndProcessingClass(FLongFormConfirmationHooksBase.\
                                           LongformStateChartAndProcessingClassBase):
    '''This class provides hooks/function for modify/add transport type mapping with
       it's associated statechart name and processing class type object.
       Mapping is defined as below format:
        {<TransportType> : (<StateChartName> , <ProcessingClassName>)}

      ex:
       {'file'  : ['FLongFormSimpleFileRouting', FLongFormConfFileRoutingProcessing],
        'email' : ['FLongFormSimpleEmailRouting', FLongFormConfEmailRoutingProcessing],
        'fax' :   ['FLongFormSimpleFaxRouting', FLongFormConfFaxRoutingProcessing],
        'mail' : ['FLongFormSimpleMailRouting', FLongFormConfMailRoutingProcessing]
        }

    '''
    def get_transportType_stateChart_processingCls_map(self):
        '''This returns dictionay object which holds mapping of every transport type with
           it's associated statechart name and processing class.

           {'file'  : ['FLongFormSimpleFileRouting', FLongFormConfFileRoutingProcessing],
            'email' : ['FLongFormSimpleEmailRouting', FLongFormConfEmailRoutingProcessing],
            'fax' :   ['FLongFormSimpleFaxRouting', FLongFormConfFaxRoutingProcessing],
            'mail' : ['FLongFormSimpleMailRouting', FLongFormConfMailRoutingProcessing]
            }

         example:
          To add new transport type:
              import NewProcessingCls
              new_ttype = {'New_Transport_Type' : ['State_Chart_Name', NewProcessingCls]}
              self.transportType_stateChart_processingCls.update(new_ttype)
              return self.transportType_stateChart_processingCls

         example:
            To add new transport type Archival:

            from FLongFormConfirmationRoutingProcessing import FLongFormConfArchiveRoutingProcessing
            new_ttype = {'Archival': ['FLongFormSimpleArchivalRouting',
                                        FLongFormConfArchiveRoutingProcessing]}
            self.transportType_stateChart_processingCls.update(new_ttype)
            return self.transportType_stateChart_processingCls

         To modify existing transport type:
             st_name_pc_list = self.transportType_stateChart_processingCls.get('file')
             st_name_pc_list[0] = 'New_statchart_name'
             self.transportType_stateChart_processingCls['file'] = st_name_pc_list
             return self.transportType_stateChart_processingCls

        '''
        return super().get_transportType_stateChart_processingCls_map()

class LongformDocumentData(FLongFormConfirmationHooksBase.LongformDocumentDataBase):
    """class to customise docx data and manage access rights on external and text objects"""
    def __init__(self, confirmation_obj):
        """
        Initialization function of the class
        @param confirmation_obj: acm.FConfirmation object
        self.confirmation_obj : holds reference to confirmation object
        """
        self.conf = confirmation_obj
        super().__init__(confirmation_obj)

    def get_longform_docx_data(self, data, report_name):
        """
        This function is for customizing the Docx Data.
        @param: data : Default Data.
        @param: data : report name for Pdf generation.
        @return: string
        """
        return super().get_longform_docx_data(data, report_name)

    def update_access_rights_on_external_object(self, external_obj):
        """
        This function is for giving rights for external object.
        """
        return super().update_access_rights_on_external_object(external_obj)

    def update_access_rights_on_text_object(self,text_object, external_object):
        """
        This function is for giving rights for external object and CustomTextObject.
        If we change external object rights it is mandatory to give rights to CustomTextObject also.
        """
        return super().update_access_rights_on_text_object(text_object, external_object)


class LongFormSourceData(FLongFormConfirmationHooksBase.LongFormSourceData):
    """ Class Represent Source Data """
    def get_source_data_dict(self, confirmation_obj, field_map = None):
        """ Returns dict for confirmation column data
        """
        return super().get_source_data_dict(confirmation_obj, field_map)

class LongFormPDFSettings(FLongFormConfirmationHooksBase.LongFormPDFSettings):
    """ Class Represent PDF related settings """
    def get_password_for_pdf_encryption(self):
        """ Function can be modified to write custom logic to get password for PDF
        """
        return super().get_password_for_pdf_encryption()

class LongFormDealPackageDataExtPoint(FLongFormConfirmationHooksBase.\
                                      LongFormDealPackageDataExtPoint):
    """ Class Represent Data and Template modification settings for Deal Package """
    def get_dictionary_deal_package(self):
        """ Templates fields can be customised, for example:
        deal_package_dict.update({'currency': 'currency.Name'}),
        currency.Name value will be fetched from acm and currency field in template
        will be populated"""
        return super().get_dictionary_deal_package()

    def get_non_loop_dict(self, acm_obj, non_loop_dict):
        """ User has access to dictionary containing non loop fields and values,
            user can make modification to these field values as per requirement"""
        return super().get_non_loop_dict(acm_obj, non_loop_dict)

    def get_loop_fields_list(self, acm_obj, loop_name, loop_fields_list):
        """ User has access to list of dictionary containing loop fields and values,
            user can make modification to these field values as per requirement"""
        return super().get_loop_fields_list(acm_obj, loop_name, loop_fields_list)

class LongFormDigitalSignSettings(FLongFormConfirmationHooksBase.LongFormDigitalSignSettings):
    """ Class Represent Image Path Settings to be used for ESign """
    def get_sign_image_settings(self):
        """ Returns dictionary containing settings related to Image"""
        return super().get_sign_image_settings()

    def get_sign_image_path(self):
        """ Returns dictionary containing PRIME username and the path where image
        of digital sign is present """
        return super().get_sign_image_path()

...

  FLongFormConfirmationHooksBase
"""----------------------------------------------------------------------------
MODULE
    FLongFormConfirmationHooksBase
CLASS
    GenerateLongFormControlBase
    LongformChecksumControlBase
    LongformEmailHookBase

VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is not
    supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user
    end.
----------------------------------------------------------------------------"""
from hashlib import blake2b
import FLongFormUtils
import FLongFormSourceDataGenerator
import FReportFormData
import acm
import FLongFormConfig


class GenerateLongFormControlBase():
    """ Class to control generation of confirmation reports """
    def __init__(self, confirmation_obj):
        """
        Initialization function of the class
        @param confirmation_obj: acm.FConfirmation object
        """
        self.confirmation_obj = confirmation_obj

    def generate_message(self):
        """
        This function decides whether the message is generated or not by
        LongformTradeConfirmation.
        Return True to generate the message from LongformTradeConfirmation,
        False to generate message from Adaptive..
        @return: boolean
        """
        return True


class LongformChecksumControlBase():
    """ Class to control and calculate the checksum for the confirmation """
    def __init__(self, confirmation_obj):
        """
        Initialization function of the class
        @param confirmation_obj: acm.FConfirmation object
        """
        self.confirmation_obj = confirmation_obj

    def calculate_checksum(self):
        """
        This function calculates the checksum for the confirmation
        @return: string

        Other hashing algo which generates hexdigest of 32 character long.
            blake2s, shake_128 :- these two can be used instead of blake2b
        """
        template_field_values = FLongFormUtils.get_checksum_datastructure(self.confirmation_obj)
        checksum_string = FLongFormUtils.convert_checksum_datastructure_to_string(
                                                            template_field_values)
        blake_2b = blake2b(checksum_string.encode(), digest_size=16)
        return blake_2b.hexdigest()


class TransportTypeBase():
    '''class to configure multiple transport types and file_type .'''
    def get_other_transports(self, _confirmation_obj):
        """
        @return: List
        """
        return []

    def get_file_type(self, _confirmation_obj):
        """
        @return: None
        """
        default_file_type = None
        return default_file_type

class LongFormReportBase():
    ''' class to configure report name, route path for "File" transport type'''
    def __init__(self, confirmation_obj):
        """
        Initialization function of the class
        @param confirmation_obj: acm.FConfirmation object
        self.confirmation_obj : holds reference to confirmation object
        """
        self.confirmation_obj = confirmation_obj

    def get_longform_report_name(self, default_name):
        """
        This function is for customizing the report name.
        @param: default_name : Default name of report.
        @return: string
        """
        return default_name

    def get_longform_route_path(self, longform_path):
        """
        This function is for customizing the longform path for routing.
        @param: longform_path : Default name of path.
        @return: string
        """
        return longform_path


class LongformEmailHookBase():
    ''' Base class to provide hooks for Email transport type.'''
    def __init__(self, confirmation_obj):
        """
        Initialization function of the class
        @param confirmation_obj: acm.FConfirmation object
        """
        self.confirmation_obj = confirmation_obj

    def create_email_body_template(self, body="", footer=""):
        """This wraps body and footer content under HMTL template.
        @param body: string type : This holds return value of get_email_body()
        @param footer: string type : This holds return value of get_email_footer()
        @return : string type
        """

        return """
                <html>
                <head>
                <style>
                table {{
                  font-family: arial, sans-serif;
                  border-collapse: collapse;
                  width: 100%;
                }}
                td {{
                  border: 0px;
                  text-align: left;
                  padding: 2px;
                }}
                </style>
                </head>
                <body>
                <table>
                   <tr>
                    <td style="padding:20px;">
                    {body}
                    </td>
                  </tr>
                  <tr>
                  <td style="padding:5px;color:black;font-size:80%;background-color: #dddddd">
                   {footer}
                  </td>
                  </tr>
                </table>

                </body>
                </html>
                """.format(body=str(body) + "<br>"*4, footer=str(footer))

    def get_email_body(self):
        """
        This function returns email body content.
        Must return body content in string format.
        @return: string
        """
        return ""

    def get_email_footer(self):
        """
        This function returns email footer which will be included at end of every message.
        Must return footer as string type.
        @return: string
        """
        return ""

    def get_email_subject(self):
        """
        This function returns subject for email. Must return subject as string.
        @return: string
        """
        sender_name = ''
        if self.confirmation_obj.Acquirer().Name():
            sender_name = str(self.confirmation_obj.Acquirer().Name())
        return f"Trade confirmation report from {sender_name}"

    def get_sender_email(self, sender_email):
        """
        This function returns sender email address. Must return email as string.
        @return: string
        """
        return sender_email

    def get_receiver_emails(self, receiver_conf_list):
        """
        This function returns reciever(TO:) email addresses. Must return emails as list.
        @return: List
        """
        return receiver_conf_list

    def get_CC_emails(self):
        """
        This function returns reciever(CC:) email addresses. Must return emails as list.
        @return: List
        """
        return []

    def get_BCC_emails(self):
        """
        This function returns reciever(BCC:) email addresses. Must return emails as list.
        @return: List
        """
        return []

    def get_attachment_list(self):
        """
        This function returns list of all files with absolute path which needs to be attached
        in email.
        @return: List
        """
        return []

    def get_report_name(self):
        """
        This function returns name of report while sending email.
        @return: string
        """
        return ''
    
    def get_email_password(self):
        """ Function to get email address or username password for SMTP Server login """
        password = ""
        try:
            import FPassword
            user_name = getattr(FLongFormConfig.CONFIG_PARAM_OBJ, 'EmailUserName', '')
            password = FPassword.get_external_password(user_name)
        except Exception as err:
            print("Please import FPassword if you want to use it for the email password "
                  f"authentication. Error {err}")
        return password


class LongformFaxHookBase():
    """Base class to provide hooks for Fax transport type.
    """

    def __init__(self, confirmation_obj):
        """
        Initialization function of the class
        @param confirmation_obj: acm.FConfirmation object
        """
        self.confirmation_obj = confirmation_obj

    def create_fax_body_template(self, body="", footer=""):
        """ create body template for fax"""
        return f'{body}\n\n\n\n{footer}'

    def get_fax_body(self):
        """ customising the body of the fax while sending reports over fax"""
        return ''

    def get_fax_footer(self):
        """ add a footer at end of the fax body"""
        return ''

    def get_fax_sender_id(self):
        """ customising the fax number of the sender"""
        return ''

    def get_fax_reciever_ids(self):
        """ customising the receiver's (TO:) fax number for sending reports over fax"""
        return []

    def get_attachment_list(self):
        """
        This function returns list of all files with absolute path which needs to be attached
        in FAX.
        @return: List
        """
        return []

    def get_report_name(self):
        """ rename the generated report while attaching a report in the fax"""
        return ''

    def get_fax_subject(self):
        """ customising the subject of the fax while sending reports over fax"""
        return ''


class LongformStateChartAndProcessingClassBase():
    """ customise the return values of member functions of class
    LongformStateChartAndProcessingClass"""
    def __init__(self):
        '''Initialization function of the class
           This creates mapping/dictionary object for every transoprt type with associated
           StateChart and Processing class.
           Initialization function of the class
           Member Variable :
           self.transportType_stateChart_processingCls :
            Type: dict
            Description: Holds mapping for every transport type with
                        it's associated statechart name and processing class
            ex:
            {<TransportType> : [<StateChartName> , <ProcessingClassName>]}

        '''
        from FLongFormConfirmationRoutingProcessing import FLongFormConfFileRoutingProcessing as\
        FileRouteProcessingCls
        from FLongFormConfirmationRoutingProcessing import FLongFormConfEmailRoutingProcessing as\
        EmailRouteProcessingCls
        from FLongFormConfirmationRoutingProcessing import FLongFormConfFaxRoutingProcessing as\
        FaxRouteProcessingCls
        from FLongFormConfirmationRoutingProcessing import FLongFormConfMailRoutingProcessing as\
        MailRouteProcessingCls

        self.transportType_stateChart_processingCls = {'file'  : ['FLongFormSimpleFileRouting',
                                                                  FileRouteProcessingCls],
                                                       'email' : ['FLongFormSimpleEmailRouting',
                                                                  EmailRouteProcessingCls],
                                                       'fax' :   ['FLongFormSimpleFaxRouting',
                                                                  FaxRouteProcessingCls],
                                                       'mail' : ['FLongFormSimpleMailRouting',
                                                                 MailRouteProcessingCls]
                                                       }

    def get_transportType_stateChart_processingCls_map(self):
        '''This returns mapping of transport type with associated statechart name and processing
        class type object
        '''
        return self.transportType_stateChart_processingCls

class LongformDocumentDataBase():
    """class to customise docx data and manage access rights on external and text objects"""
    def __init__(self, confirmation_obj):
        """
        Initialization function of the class
        @param confirmation_obj: acm.FConfirmation object
        self.confirmation_obj : holds reference to confirmation object
        """
        self.confirmation_obj = confirmation_obj

    def get_longform_docx_data(self, data, report_name):
        """
        This function is for customizing the Docx Data.
        @param: data : Default Data.
        @param: data : report name for Pdf generation.
        @return: string
        """
        return data, report_name

    def update_access_rights_on_external_object(self, external_obj):
        """
        This function is for giving rights for external object.
        """
        return external_obj

    def update_access_rights_on_text_object(self,text_object, external_object):
        """
        This function is for giving rights for external object and CustomTextObject.
        If we change external object rights it is mandatory to give rights to CustomTextObject also.
        """
        return text_object, external_object

class LongFormSourceData():
    """ Class Represent Source Data """
    def get_source_data_dict(self, confirmation_obj, _field_map=None):
        """ Returns dict for confirmation column data
        """
        reportform_name = FLongFormUtils.get_reportform_name_from_acm(confirmation_obj)
        reportform_obj = FReportFormData.get_serialize_reportform_object_from_name(reportform_name)
        FLongFormUtils.validate_reportform(reportform_obj)
        data_source = FLongFormSourceDataGenerator.FLongFormSourceDataGenerator(confirmation_obj,
                                                                                reportform_obj)
        field_dict = data_source.get_source_data_as_dict()
        field_dict = FLongFormUtils.get_raw_formatted_data(field_dict)
        #formatted_dict = field_dict.get('formatted_data', {})
        return field_dict

class LongFormPDFSettings():
    """ Class Represent PDF related settings """
    def get_password_for_pdf_encryption(self):
        """ Function can be modified to write custom logic to get password for PDF """
        _user_name = acm.UserName()
        pass_key = ""
        application_name = getattr(FLongFormConfig.CONFIG_PARAM_OBJ, 'ApplicationName', '')
        try:
            import FPassword
            pass_key = FPassword.get_external_password(application_name)
            #In case user wants to have a password for each user, please introduce custom
            #function to get password to that effect"""
        except Exception:
            print("Please import FPassword if you want to use it for the password encryption")
        return pass_key

class LongFormDealPackageDataExtPoint():
    """ Class Represent Data and Template modification settings for Deal Package """
    def get_dictionary_deal_package(self):
        """ Templates fields can be customised, for example:
        deal_package_dict.update({'currency': 'currency.Name'}),
        currency.Name value will be fetched from acm and currency field in template
        will be populated"""
        deal_package_dict = {}
        return deal_package_dict

    def get_non_loop_dict(self, _acm_obj, non_loop_dict):
        """ User has access to dictionary containing non loop fields and values,
            user can make modification to these field values as per requirement"""
        if not non_loop_dict:
            non_loop_dict = {}
        return non_loop_dict

    def get_loop_fields_list(self, _acm_obj, _loop_name, loop_fields_list):
        """ User has access to list of dictionary containing loop fields and values,
            user can make modification to these field values as per requirement"""
        if not loop_fields_list:
            loop_fields_list = []
        return loop_fields_list

class LongFormDigitalSignSettings():
    """ Class Represent Image Path Settings to be used for ESign """
    
    def __init__(self, confirmation_obj):
        """
        Initialization function of the class
        @param confirmation_obj: acm.FConfirmation object
        """
        self.confirmation_obj = confirmation_obj

    def get_sign_image_settings(self):
        """ Returns dictionary containing settings related to Image
            Following are settings related to Image size and positioning in Document:
                ImageHeight: Height of Image in inches
                ImageWidth: Width of Image in inches
            Following are settings related to workflow:
                ReleaseAfterSign: True - Release button will be disabled until document has signs
                set up in NumberOfSignsForReleaseOrDelivery
                                  False: No change in existing workflow
                NumberOfSignsForReleaseOrDelivery: If ReleaseAfterSign is True, minimum number of
                signs required in document to enable Release, this will not apply for STP
                                   : If ReleaseAfterSign is False, Minimum number of signs in
                                    document to trigger delivery
                                   : If 0, ESign will be disabled
                AutoReleaseSignedDocument: True, will release signed document once document has
                ESign defined in NumberOfSignsForReleaseOrDelivery
                                            False, release of signed document can be done through
                                            Deliver Signed Report menu.
        """
        sign_image_settings = {}
        sign_image_settings.update({'ImageHeight':1})
        sign_image_settings.update({'ImageWidth':2})
        sign_image_settings.update({'NumberOfSignsForReleaseOrDelivery': 0})
        sign_image_settings.update({'ReleaseAfterSign': False})
        sign_image_settings.update({'AutoReleaseSignedDocument': False})
        return sign_image_settings

    def get_sign_image_path(self):
        """ Dictionary of dictionary containing PRIME username and the following:
            'PATH': path where image of digital sign is present, if PATH is empty, image will be
            get from external object, provided external object with image is present in ADS.
            'TEXT': List of text user wants to add below image, each string in list will start from
            new line
            'BOLD': Font to be Bold, True/False
            'ITALIC': Font to be Italic, True/False
            'Underline': Apply underline to text and image, True/False
            'FONT_SIZE': Font size, if set to 0, it will be default to the existing in report
            'FONT_NAME': Font Name, if not specified, it will be default to existing in report
            eg. Arial, Times New Roman etc.
        To Add ARENASYS user with image path, text, text settings:
        user_sign_dict.update({'ARENASYS':{'PATH': 'C:\data\SampleSign1.png',
                                           'TEXT': ['Name: ARENASYS', 'Email: ARENASYS@FISGLOBAL.COM'],
                                           'BOLD': False,
                                           'ITALIC': False,
                                           'UNDERLINE': False,
                                           'FONT_SIZE': 10,
                                           'FONT_NAME': 'Arial'}})
        """
        user_sign_dict = {}
        return user_sign_dict


...

  FLongFormConfirmationInstalledComponent
"""------------------------------------------------------------------------
MODULE
    FLongFormConfirmationInstalledComponent -
DESCRIPTION:
    The module that validates whether the installation
    has all the basic setup required for the expected functioning
     of the component
VERSION: 1.0.9-0.5.757
RESTRICTIONS/ LIMITATIONS:
    1. Any modifications to the scripts/ encrypted modules/ clear text code
     within the core is not supported.
    2. This module is not customizable
    3. The component may not work as expected with any modifications done to
     this module at user end
--------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongFormConfirmationOutCallbacks
"""----------------------------------------------------------------------------
MODULE:
    FLongFormConfirmationOutCallbacks

DESCRIPTION:
    OPEN EXTENSION MODULE
    FLongFormConfirmationOutCallbacks class for user customization.
    Business process conditional_entry/exit and on_entry/exit callbacks.
    User can override the logic written in the base class FLongFormConfirmationOutCallbacksBase

    If user wishes to add some extra processing for conditional entry state
     e.g. 'ready' he can implement method as
    def condition_entry_state_ready(self):
        # Custom logic before core logic
        super(FLongFormConfirmationOutCallbacks, self).condition_entry_state_ready()
        # Custom logic after core logic

FUNCTIONS:
    For sample state xxx there are always the four standard extension points:
        condition_entry_state_xxx():
            To control if all the pre-requisites to performing the action and
            entering the state are defined.
        on_entry_state_xxx():
            Is the place to perform the action.
            For example, the on_ entry_state_matched is the place to set the
            confirmation status to Matched
        condition_exit_state_xxx():
            To control that all pre-requisites for performing the next action
            are fulfilled.
        on_exit_state_xxx():
             Is the place to reset values that you set in the state entry, if
             you are leaving the state to go backwards in the workflow.
             For example if you exit from the ?Matched? state to go and re-pair,
             or to manually cancel, then you would want to remove the
             confirmation Matched status

VERSION: 1.0.9-0.5.757
----------------------------------------------------------------------------"""
# The context parameter is an instance of FBusinessProcessCallbackContext
import FLongFormConfirmationOutCallbacksBase
from FLongFormConfig import NOTIFIER

class FLongFormConfirmationOutCallbacks(FLongFormConfirmationOutCallbacksBase.FLongFormConfirmationOutCallbacksBase):
    def __init__(self):
        super(FLongFormConfirmationOutCallbacks, self).__init__()

    def condition_entry_state_ready(self, context):
        """ Overriden function to stop bpr state process when it is in "BeingEdited" state or
        Auto generation of confirmation """
        ret_val = True
        if context.CurrentState().Name() == 'BeingEdited':
            ret_val=False
            NOTIFIER.INFO('Cannot move from BeingEdited to Ready state.')
            return ret_val
        else: 
            return super(FLongFormConfirmationOutCallbacks, self).condition_entry_state_ready(context)    


...

  FLongFormConfirmationOutCallbacksBase
"""----------------------------------------------------------------------------
MODULE:
    FLongFormConfirmationOutCallbacksBase

DESCRIPTION:
    OPEN EXTENSION MODULE
    This is a READ ONLY module. User can override the default logic in derived
    class FLongFormConfirmationOutCallbacks
    Business process conditional_entry/exit and on_entry/exit callbacks.

FUNCTIONS:
    For sample state xxx there are always the four standard extension points:
        condition_entry_state_xxx():
            To control if all the pre-requisites to performing the action and
            entering the state are defined.
        on_entry_state_xxx():
            Is the place to perform the action.
            For example, the on_ entry_state_matched is the place to set the
            confirmation status to Matched
        condition_exit_state_xxx():
            To control that all pre-requisites for performing the next action
            are fulfilled.
        on_exit_state_xxx():
             Is the place to reset values that you set in the state entry, if
             you are leaving the state to go backwards in the workflow.
             For example if you exit from the "Matched" state to go and re-pair,
             or to manually cancel, then you would want to remove the
             confirmation Matched status

MAPPING:
    Below is the mapping of Confirmation status against its corresponding document status.
    Confirmation Status                 Document Status
    -------------------                 ---------------
    NEW                                 NEW
    EXCEPTION                           EXCEPTION
    PENDING_DOCUMENT_GENERATION         PENDING_GENERATION
    PENDING_APPROVAL                    GENERATED
    AUTHORISED                          GENERATED
    RELEASED                            GENERATED
    ACKNOWLEDGED                        SENT_SUCCESSFULLY
    NOT_ACKNOWLEDGED                    SEND_FAILED
    PENDING_CLOSURE                     SENT_SUCCESSFULLY
    PENDING_CANCELLATION                SENT_SUCCESSFULLY
    PENDING_MATCHING                    SENT_SUCCESSFULLY

VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not
	supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
# The context parameter is an instance of FBusinessProcessCallbackContext
import time
import FLongFormUtils, acm
from FLongFormConfig import NOTIFIER, CONFIG_PARAM_OBJ
from FIntegrationUtils import FManageOperation, ConfirmationEnum


def exception_handler(func):
    def wrapper_func(*args, **kwargs):
        NOTIFIER.DEBUG("Process {}".format(func.__name__))
        try:
            func(*args, **kwargs)
        except Exception as err:
            NOTIFIER.ERROR('Exception caught in {}'.format(str(err)))
            NOTIFIER.DEBUG(str(err), exc_info=1)
        finally:
            NOTIFIER.DEBUG("Done processing {}".format(func.__name__))

    return wrapper_func

def confirmation_only(func):
    def wrapper(*args, **kwargs):
        context = args[1]
        acm_obj = FLongFormUtils.get_acm_object_from_bpr(context.CurrentStep().BusinessProcess())
        if acm_obj and acm_obj.IsKindOf(acm.FConfirmation):
            func(*args, **kwargs)
    return wrapper


class FLongFormConfirmationOutCallbacksBase(object):
    def __init__(self):
        self.max_retries = int(getattr(CONFIG_PARAM_OBJ, 'BPRCommitRetry', 3))

    def set_document_status(self, context, doc_status):
        counter = 1
        acm_obj = FLongFormUtils.get_acm_object_from_bpr(context.CurrentStep().BusinessProcess())
        while counter <= self.max_retries:
            try:
                FLongFormUtils.set_document_status_on_acm_object(acm_obj, doc_status)
            except Exception as err:
                if 'Update collision' in str(err):
                    counter = counter + 1
                    NOTIFIER.ERROR("Retrying after 8 seconds due to update collision")
                    time.sleep(8)
                    continue
                NOTIFIER.ERROR('Exception in set_document_status. %r' % err)
                NOTIFIER.DEBUG(str(err), exc_info=1)
            break

    def set_confirmation_status(self, acm_obj, conf_status):
        counter = 1
        while counter <= self.max_retries:
            try:
                acm_obj.Status(conf_status)
                acm_obj.Commit()
            except Exception as err:
                if 'Update collision' in str(err):
                    counter = counter + 1
                    NOTIFIER.ERROR("Retrying after 8 seconds due to update collision")
                    time.sleep(8)
                    continue
                NOTIFIER.ERROR('Exception in set_confirmation_status. %r' % err)
                NOTIFIER.DEBUG(str(err), exc_info=1)
            break

    # Conditions return True or False
    # Name convention is
    # 'condition_' + 'entry_'/'exit_' + state name in lowercase and underscore
    def condition_entry_state_accepted(self, context):
        """
        This function checks the permission to enter the state Accepted.
        """
        return FManageOperation.HasUserRights(FLongFormUtils.get_operation_name_from_bpr_context(
                                                                                        context))

    def condition_entry_state_approved(self, context):
        """
        This function checks the permission to enter the state ApProved.
        If the BPR is entering in this state from a state Edited a check needs to be performed
        if approval is required.
        @param context:Businessprocess Context
        @return:boolean
        """
        auto_approval = False
        try:
            current_state = context.CurrentState().Name()
            if current_state == FLongFormUtils.BusinessProcessStates.EDITED:
                target_state = context.TargetState().Name()
                sc_name = context.CurrentState().StateChart().Name()
                operation_name = "BPR_{}_{}_{}".format(sc_name, current_state, target_state)
                auto_approval = FManageOperation.HasUserRights(operation_name)
            elif current_state == FLongFormUtils.BusinessProcessStates.BEING_EDITED:
                auto_approval = True  # This is event IgnoreApprovedEdit
            else:
                auto_approval = FManageOperation.HasUserRights(
                    FLongFormUtils.get_operation_name_from_bpr_context(context))
        except Exception as err:
            NOTIFIER.ERROR('Exception in condition_entry_state_approved. %r' % err)
            NOTIFIER.DEBUG(str(err), exc_info=1)
        return auto_approval

    def condition_entry_state_beingedited(self, context):
        """
        This function checks the permission to enter the state BeingEdited.
        """
        return FManageOperation.HasUserRights(FLongFormUtils.get_operation_name_from_bpr_context(
                                                                                        context))

    def condition_entry_state_delivered(self, context):
        """
        This function checks the permission to enter the state Delivered.
        """
        return FManageOperation.HasUserRights(FLongFormUtils.get_operation_name_from_bpr_context(
                                                                                        context))

    def condition_entry_state_disapproved(self, context):
        """
        This function checks the permission to enter the state Disapproved.
        """
        approval_level = False
        try:
            current_state = context.CurrentState().Name()
            if current_state == FLongFormUtils.BusinessProcessStates.BEING_EDITED:
                approval_level = True  # This is event IgnoreDisapprovedEdit
            else:
                approval_level = FManageOperation.HasUserRights(
                    FLongFormUtils.get_operation_name_from_bpr_context(context))
        except Exception as err:
            NOTIFIER.ERROR('Exception in condition_entry_state_disapproved. %r' % err)
            NOTIFIER.DEBUG(str(err), exc_info=1)
        return approval_level

    def condition_entry_state_edited(self, context):
        """
        This function checks the permission to enter the state Edited.
        """
        return FManageOperation.HasUserRights(FLongFormUtils.get_operation_name_from_bpr_context(
                                                                                        context))

    def condition_entry_state_error(self, context):
        """
        This function checks the permission to enter the state Error.
        """
        return FManageOperation.HasUserRights(FLongFormUtils.get_operation_name_from_bpr_context(
                                                                                        context))

    def condition_entry_state_generated(self, context):
        """
        This function checks the permission to enter the state Generated.
        """
        ret_val = True
        if context.CurrentState().Name() == 'Disapproved':
            target_state = 'BeingEdited'
            sc_name = context.CurrentState().StateChart().Name()
            operation_name = "BPR_{}_{}".format(sc_name, target_state)
            ret_val = FManageOperation.HasUserRights(operation_name)
        else:
            ret_val = FManageOperation.HasUserRights(FLongFormUtils.\
                                                     get_operation_name_from_bpr_context(context))
        return ret_val

    def condition_entry_state_generationfailed(self, context):
        """
        This function checks the permission to enter the state GenerationFailed.
        """
        return FManageOperation.HasUserRights(FLongFormUtils.\
                                              get_operation_name_from_bpr_context(context))

    def condition_entry_state_pendingapproval(self, context):
        """
        This function checks the permission to enter the state PendingApproval.
        If the BPR is entering in this state from a state other then itself, no check should be
        done.
        Check needs to be performed if a signoff group 1 approval is provided.
        @param context:Businessprocess Context
        @return:boolean
        """
        permission_allowed = True
        if context.CurrentState().Name() == context.TargetState().Name():
            permission_allowed = FManageOperation.HasUserRights(
                FLongFormUtils.get_operation_name_from_bpr_context(context))
        return permission_allowed

    def condition_entry_state_ready(self, context):
        """
        This function checks the permission to enter the state Ready.
        """
        return FManageOperation.HasUserRights(FLongFormUtils.get_operation_name_from_bpr_context(
                                                                                        context))

    def condition_entry_state_rejected(self, context):
        """
        This function checks the permission to enter the state Rejected.
        """
        return FManageOperation.HasUserRights(FLongFormUtils.get_operation_name_from_bpr_context(
                                                                                        context))

    def condition_entry_state_undelivered(self, context):
        """
        This function checks the permission to enter the state Undelivered.
        """
        return FManageOperation.HasUserRights(FLongFormUtils.get_operation_name_from_bpr_context(
                                                                                        context))

    def condition_entry_state_esigned(self, context):
        """
        This function checks the permission to enter the state ESigned.
        """
        return True

    def condition_entry_state_esignfailed(self, context):
        """
        This function checks the permission to enter the state ESignFailed.
        """
        return True
    
    def condition_entry_state_esignrejected(self, context):
        """
        This function checks the permission to enter the state ESignRejected.
        """
        return True
    # ------------------------------------------------------------------------------
    def condition_exit_state_accepted(self, context):
        """
        This function checks the condition to exit the state Accepted.
        """
        return True

    def condition_exit_state_approved(self, context):
        """
        This function checks the condition to exit the state Approved.
        """
        return True

    def condition_exit_state_beingedited(self, context):
        """
        This function checks the condition to exit the state BeingEdited.
        """
        return True

    def condition_exit_state_delivered(self, context):
        """
        This function checks the condition to exit the state Delivered.
        """
        return True

    def condition_exit_state_disapproved(self, context):
        """
        This function checks the condition to exit the state Disapproved.
        """
        return True

    def condition_exit_state_edited(self, context):
        """
        This function checks the condition to exit the state Edited.
        """
        return True

    def condition_exit_state_error(self, context):
        """
        This function checks the condition to exit the state Error.
        """
        return True

    def condition_exit_state_generated(self, context):
        """
        This function checks the condition to exit the state Generated.
        """
        return True

    def condition_exit_state_generationfailed(self, context):
        """
        This function checks the condition to exit the state GenerationFailed.
        """
        return True

    def condition_exit_state_pendingapproval(self, context):
        """
        This function checks the condition to exit the state PendingApproval.
        """
        return True

    def condition_exit_state_ready(self, context):
        """
        This function checks the condition to exit the state Ready.
        """
        return True

    def condition_exit_state_rejected(self, context):
        """
        This function checks the condition to exit the state Rejected.
        """
        return True

    def condition_exit_state_undelivered(self, context):
        """
        This function checks the condition to exit the state Undelivered.
        """
        return True

    def condition_exit_state_esigned(self, context):
        """
        This function checks the condition to exit the state ESigned.
        """
        return True

    def condition_exit_state_esignfailed(self, context):
        """
        This function checks the condition to exit the state ESignFailed.
        """
        return True
    
    def condition_exit_state_esignrejected(self, context):
        """
        This function checks the condition to exit the state ESignRejected.
        """
        return True

    # ------------------------------------------------------------------------------
    # Entry/Exit callbacks do not return anything
    # Name convention is
    # 'on_' + 'entry_'/'exit_' + state name in lowercase and underscore
    @confirmation_only
    def on_entry_state_ready(self, context):
        """ On entry state ready"""
        pass

    @confirmation_only
    @FLongFormUtils.ignore_migrated_callback
    def on_entry_state_generated(self, context):
        """ On entry state generated"""
        NOTIFIER.DEBUG("FLongFormConfirmationOutCallbacksBase: Process on_entry_state_generated")
        try:
            #acm_obj = FLongFormUtils.get_acm_object_from_bpr(context.CurrentStep().BusinessProcess())
            self.set_document_status(context, 'GENERATED')
        except Exception as err:
            NOTIFIER.ERROR('Exception caught in on_entry_state_generated %r' % err)
            NOTIFIER.DEBUG(str(err), exc_info=1)
        finally:
            NOTIFIER.DEBUG("FLongFormConfirmationOutCallbacksBase: Done processing "
                           "on_entry_state_generated")

    @confirmation_only
    @FLongFormUtils.ignore_migrated_callback
    def on_entry_state_generationfailed(self, context):
        """ On entry state generationfailed"""
        NOTIFIER.DEBUG("FLongFormConfirmationOutCallbacksBase: Process "
                       "on_entry_state_generationfailed")
        try:
            self.set_document_status(context, 'EXCEPTION')
        except Exception as err:
            NOTIFIER.ERROR('Exception caught in on_entry_state_generationfailed.Error %r' % err)
            NOTIFIER.DEBUG(str(err), exc_info=1)
        finally:
            NOTIFIER.DEBUG(" FLongFormConfirmationOutCallbacksBase: Done processing "
                           "on_entry_state_generationfailed ")

    @confirmation_only
    @FLongFormUtils.ignore_migrated_callback
    def on_entry_state_delivered(self, context):
        """ On entry state delivered"""
        NOTIFIER.DEBUG("FLongFormConfirmationOutCallbacksBase: Process on_entry_state_delivered")
        try:

            acm_obj = FLongFormUtils.get_acm_object_from_bpr(context.CurrentStep().\
                                                             BusinessProcess())
            if acm_obj.Status() == ConfirmationEnum.GetConfirmationStatusEnum().RELEASED:
                self.set_document_status(context, 'SENT_SUCCESSFULLY')

        except Exception as err:
            NOTIFIER.ERROR('Exception caught in on_entry_state_delivered.Error %r' % err)
            NOTIFIER.DEBUG(str(err), exc_info=1)
        finally:
            NOTIFIER.DEBUG("FLongFormConfirmationOutCallbacksBase: Done processing "
                           "on_entry_state_delivered")

    def on_entry_state_undelivered(self, context):
        """ On entry state undelivered"""
        NOTIFIER.DEBUG("FLongFormConfirmationOutCallbacksBase: Process "
                       "on_entry_state_undelivered ")

    @confirmation_only
    @exception_handler
    def on_entry_state_accepted(self, context):
        """ On entry state delivered"""
        acm_obj = FLongFormUtils.get_acm_object_from_bpr(context.CurrentStep().BusinessProcess())
        ops_enum = ConfirmationEnum.GetConfirmationStatusEnum()
        if acm_obj.Status() in [ops_enum.PENDING_MATCHING,
                                ops_enum.MATCHING_FAILED]:
            self.set_confirmation_status(acm_obj, ops_enum.MATCHED)

    @confirmation_only
    @exception_handler
    def on_entry_state_rejected(self, context):
        """ On entry state delivered"""
        acm_obj = FLongFormUtils.get_acm_object_from_bpr(context.CurrentStep().BusinessProcess())
        ops_enum = ConfirmationEnum.GetConfirmationStatusEnum()
        if acm_obj.Status() == ops_enum.PENDING_MATCHING:
            self.set_confirmation_status(acm_obj, ops_enum.MATCHING_FAILED)

    @exception_handler
    def on_entry_state_approved(self, context):
        """ On entry state approved"""
        pass

    @exception_handler
    def on_entry_state_beingedited(self, context):
        """ On entry state beingedited"""
        pass

    @exception_handler
    def on_entry_state_disapproved(self, context):
        """ On entry state disapproved"""
        pass

    @exception_handler
    def on_entry_state_edited(self, context):
        """ On entry state edited"""
        pass

    @exception_handler
    def on_entry_state_error(self, context):
        """ On entry state error"""
        pass

    @exception_handler
    def on_entry_state_pendingapproval(self, context):
        """ On entry state pendingapproval"""
        pass

    @exception_handler
    def on_entry_state_esigned(self, context):
        """ On entry state esigned"""
        pass

    @exception_handler
    def on_entry_state_esignfailed(self, context):
        """ On entry state esignfailed"""
        pass
    
    @exception_handler
    def on_entry_state_esignrejected(self, context):
        """ On entry state esignrejected"""
        pass

    # ------------------------------------------------------------------------------
    def on_exit_state_ready(self, context):
        """ On exit state ready"""
        pass

    def on_exit_state_generated(self, context):
        """ On exit state generated"""
        pass

    def on_exit_state_generationfailed(self, context):
        """ On exit state generationfailed"""
        pass

    def on_exit_state_undelivered(self, context):
        """ On exit state undelivered"""
        pass

    def on_exit_state_delivered(self, context):
        """ On exit state delivered"""
        pass

    def on_exit_state_acknowledged(self, context):
        """ On exit state acknowledged"""
        pass

    @exception_handler
    def on_exit_state_accepted(self, context):
        """ On exit state accepted"""
        pass

    @exception_handler
    def on_exit_state_approved(self, context):
        """ On exit state approved"""
        pass

    @exception_handler
    def on_exit_state_beingedited(self, context):
        """ On exit state beingedited"""
        pass

    @exception_handler
    def on_exit_state_disapproved(self, context):
        """ On exit state disapproved"""
        pass

    @exception_handler
    def on_exit_state_edited(self, context):
        """ On exit state edited"""
        pass

    @exception_handler
    def on_exit_state_error(self, context):
        """ On exit state error"""
        pass

    @exception_handler
    def on_exit_state_pendingapproval(self, context):
        """ On exit state pendingapproval"""
        pass

    @exception_handler
    def on_exit_state_rejected(self, context):
        """ On exit state rejected"""
        pass

    @exception_handler
    def on_exit_state_esigned(self, context):
        """ On exit state esigned"""
        pass

    @exception_handler
    def on_exit_state_esignfailed(self, context):
        """ On exit state esignfailed"""
        pass
    
    @exception_handler
    def on_exit_state_esignrejected(self, context):
        """ On exit state esignrejected"""
        pass
    


...

  FLongFormConfirmationOutHooks
"""----------------------------------------------------------------------------
MODULE:
    FLongFormConfirmationOutHooks

DESCRIPTION:
    A module for providing customizations for last minute changes in Longform message
    User can customize the AMB message using provided methods

FUNCTIONS:
    export_entry_hook
    export_exit_hook

VERSION: 1.0.9-0.5.757
----------------------------------------------------------------------------"""


class FLongFormConfirmationOutHooks(object):
    """ Class implemented for all hooks require for LongFrom messages
    """
    @staticmethod
    def export_entry_hook(amb_msg_obj):
        """ Customization for amb message before starts processing.
            This hook is called right after message is read from amb
            :param: amb_msg_obj: mb_message type containing AMB message
            :return :  updated mbf_buffer type object

            Sample implementation
            To filter out even messages :
                if amb_msg_obj.id % 2 == 0:
                   amb_buffer = amb.mbf_create_buffer_from_data( amb_msg_obj.data_p)
                   make changes to mbf_buffer object
                   return mbf_buffer object

        """
        pass






...

  FLongFormConfirmationOutMain
"""----------------------------------------------------------------------------
MODULE
    FLongFormConfirmationOutMain : FLongFormConfirmationOutMain for listening business process
     updates and confirmation updates.
FUNCTION
    process_bpr_step_update()
        Handles the business process updates
    process_confirmations_update()
        Handles the confirmation updates

VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is not
     supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user
     end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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
+n8j35yw""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongFormConfirmationOutProcessing
"""----------------------------------------------------------------------------
MODULE:
    FLongFormConfirmationOutProcessing

DESCRIPTION:
    OPEN EXTENSION MODULE
    User can write custom logic to be executed in each state of the
    FLongFormConfirmaiton business process. It is derived from
    FLongFormConfirmationOutProcessingBase

    The function prototype should be : process_state_xxx(business_process)
    where xxx is state name e.g. process_state_ready


    If user wishes to add some extra processing for conditional entry state
     e.g. 'ready' he can implement method as
    def process_state_ready(self):
        # Custom logic before core logic
        super(FLFConfirmationOutProcessing, self).process_state_ready()
        # Custom logic after core logic

VERSION: 1.0.9-0.5.757
----------------------------------------------------------------------------"""
from FLongFormConfig import NOTIFIER
from FLongFormConfirmationOutProcessingBase import FLongFormConfirmationOutProcessingBase


class FLongFormConfirmationOutProcessing(FLongFormConfirmationOutProcessingBase):
    """  Class to process Longform messages.
    """

    # def process_state_generated(self):
    #     """
    #     This function gets called when BPR goes to Generated state.
    #     It triggers BPR to Pending Approval, if the trade is a high value trade.
    #     """
    #     try:
    #         if self.acm_obj.Trade().Nominal() > 100000:
    #             Trigger business process to Pending Approval
    #         else:
    #             super(FLongFormConfirmationOutProcessing, self).process_state_generated()
    #
    #     except Exception as err:
    #         pass

    def process_state_xxx(self):
        """ process bpr state xxx"""
        try:
            NOTIFIER.INFO("Processing BPR step xxx")

            NOTIFIER.INFO("Completed processing BPR step xxx")
        except Exception:
            pass


...

  FLongFormConfirmationOutProcessingBase
"""----------------------------------------------------------------------------
MODULE:
    FLongFormConfirmationOutProcessingBase

DESCRIPTION:
    Base class for logic to be executed in each state. User can override/extend
    the default behavior in FLongFormConfirmationOutProcessing class derived from this
    class.

FUNCTIONS:
    process_state_ready():

VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is
       not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user
    end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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
sXFlx4fF/Wnh34x0UA1/58gFDjiqrCX/P7npuxg=""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongFormConfirmationOutSC
"""----------------------------------------------------------------------------
MODULE:
    FLongFormConfirmationOutSC

DESCRIPTION:
    OPEN EXTENSION MODULE
    State chart creation for long form confirmation.
    The definition parameter must completely define the content of the business
    process state chart, including all states and transitions between them. Its
    format is a dictionary of states mapped to a dictionary of transitions as
    event->next_state items, e.g.:
      {'state a':  {'event to go to b': 'state b', 'event to go to c': 'state c'}}

FUNCTIONS:
    define_state_transition():
        Defines the state transition for state chart
    create_longform_conf_sc():
        Creates the state chart

VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
from FLongFormConfig import NOTIFIER
from FIntegrationUtils import StateChartCreator


def define_state_transition():
    """
    Creates a state chart with the given name, if required.
    The definition parameter must completely define the content of the business
    process state chart, including all states and transitions between them. Its
    format is a dictionary of states mapped to a dictionary of transitions as
    event->next_state items, e.g.:

    {'state a':  [{'event to go to b': 'state b', 'event to go to c': 'state c'},
     flag (0/1) creates the operations object]}

    All defined next_states values must be unique within a state's transitions
    (i.e. multiple events cannot lead to the same next_state).
    """

    state_chart = {
        'Ready': [{'Generate': 'Generated',
                   'Fail': 'GenerationFailed'}, 0],
        'Generated': [{'Deliver': 'BeingDelivered',
                       'Regenerate': 'Ready',
                       'Edit': 'BeingEdited',
                       'RequestApproval': 'PendingApproval',
                        'ESign': 'ESigned'}, 0],

        'BeingDelivered': [{'Success': 'Delivered',
                            'Fail': 'Undelivered'},
                           0],
        'BeingEdited': [{'EditDone': 'Edited',
                         'IgnoreGeneratedEdit': 'Generated',
                         'IgnoreApprovalEdit': 'PendingApproval',
                         'IgnoreDisapprovedEdit': 'Disapproved',
                         'IgnoreApprovedEdit': 'Approved',
                         'Regenerate': 'Ready'}, 1],
        'GenerationFailed': [{'Regenerate': 'Ready',
                              'Edit': 'BeingEdited'}, 0],
        'Disapproved': [{'Regenerate': 'Ready',
                         'Edit': 'BeingEdited',
                         'Revert': 'Generated', }, 1],
        'PendingApproval': [{'Regenerate': 'Ready',
                             'Edit': 'BeingEdited',
                             'Disapprove': 'Disapproved',
                             'Approve': 'PendingApproval',
                             'FullyApprove': 'Approved', }, 1],
        'Edited': [{'RequestApproval': 'PendingApproval',
                    'AutoApprove': 'Approved'}, 0],
        'Approved': [{'Regenerate': 'Ready',
                      'Deliver': 'BeingDelivered',
                      'Edit': 'BeingEdited',
                      'ESign': 'ESigned'}, 1],


        'Delivered': [{'Accept': 'Accepted',
                       'Reject': 'Rejected',
                       'Resend': 'BeingDelivered',
                        'ESign': 'ESigned'}, 0],
        'Undelivered': [{'Regenerate': 'Ready',
                         'Redeliver': 'BeingDelivered'}, 0],

        'Rejected': [{'Accept': 'Accepted'}, 0],

        'Accepted': [{'DeliveredBack': 'Delivered'}, 0],
        'ESigned' : [{'ESign': 'ESigned',
                      'Deliver': 'BeingDelivered',
                      'ESignFail': 'ESignFailed',
                      'Regenerate': 'Ready',
                      'ESignReject': 'ESignRejected'},0],
        'ESignFailed': [{'ESign': 'ESigned',
                         'Regenerate': 'Ready',
                         'ESignReject': 'ESignRejected'}, 0],
        'ESignRejected': [{'ESign': 'ESigned',
                         'Regenerate': 'Ready',
                         'Edit': 'BeingEdited'}, 0],
    }
    return state_chart


def define_state_transition_for_file_routing():
    """
    {'state a':  [{'event to go to b': 'state b', 'event to go to c': 'state c'},
     flag (0/1) creates the operations object]}

    All defined next_states values must be unique within a state's transitions
    (i.e. multiple events cannot lead to the same next_state).
    """

    state_chart_name = "FLongFormSimpleFileRouting"
    state_chart = {
        'Ready': [{'Deliver': 'Delivered',
                   'Fail': 'UnDelivered'}, 0],

        'UnDelivered': [{'Redeliver': 'Ready'}, 0],
        'Delivered': [{'Redeliver': 'Ready'}, 0]
        }
    return state_chart_name, state_chart


def define_state_transition_for_email_routing():
    """
    {'state a':  [{'event to go to b': 'state b', 'event to go to c': 'state c'},
     flag (0/1) creates the operations object]}

    All defined next_states values must be unique within a state's transitions
    (i.e. multiple events cannot lead to the same next_state).
    """
    state_chart_name = "FLongFormSimpleEmailRouting"
    state_chart = {
        'Ready': [{'Send': 'Sent',
                   'Fail': 'Failed'}, 0],

        'Failed': [{'Resend': 'Ready'}, 0],
        'Sent': [{'Resend': 'Ready'}, 0]
                }
    return state_chart_name, state_chart


def define_state_transition_for_mail_routing():
    """
    {'state a':  [{'event to go to b': 'state b', 'event to go to c': 'state c'},
     flag (0/1) creates the operations object]}

    All defined next_states values must be unique within a state's transitions
    (i.e. multiple events cannot lead to the same next_state).
    """
    state_chart_name = "FLongFormSimpleMailRouting"
    state_chart = {
        'Ready': [{'Send': 'Mailed',
                   'Fail': 'MailFailed'}, 0],

        'MailFailed': [{'Resend': 'Ready'}, 0],
        'Mailed': [{'Resend': 'Ready'}, 0],
                }
    return state_chart_name, state_chart


def define_state_transition_for_fax_routing():
    """
    {'state a':  [{'event to go to b': 'state b', 'event to go to c': 'state c'},
     flag (0/1) creates the operations object]}

    All defined next_states values must be unique within a state's transitions
    (i.e. multiple events cannot lead to the same next_state).
    """
    state_chart_name = "FLongFormSimpleFaxRouting"
    state_chart = {
        'Ready': [{'Send': 'Sent',
                   'Fail': 'Failed'}, 0],

        'Failed': [{'Resend': 'Ready'}, 0],
        'Sent': [{'Resend': 'Ready'}, 0]
                }
    return state_chart_name, state_chart

def define_state_transition_for_Archival_routing():
    """
    {'state a':  [{'event to go to b': 'state b', 'event to go to c': 'state c'},
     flag (0/1) creates the operations object]}

    All defined next_states values must be unique within a state's transitions
    (i.e. multiple events cannot lead to the same next_state).
    """

    state_chart_name = "FLongFormSimpleArchivalRouting"
    state_chart = {
        'Ready': [{'Archive': 'Archived',
                   'Fail': 'ArchivalFail'}, 0],

        'Archived': [{'Redeliver': 'Ready'}, 0],
        'ArchivalFail': [{'Redeliver': 'Ready'}, 0]
        }
    return state_chart_name, state_chart


def get_dict_and_states_to_control(state_chart_dict):
    """
    Function returns dict {state:event transitions} and state list
    """
    ret_state_chart_dict = {}
    generate_ops_for_state = []
    for state, transitions in state_chart_dict.items():
        event_transitions = transitions[0]
        generate_ops_object = transitions[1]
        if generate_ops_object == 1:
            generate_ops_for_state.append(state)

        ret_state_chart_dict.update({state: event_transitions})

    return ret_state_chart_dict, generate_ops_for_state


def create_longform_conf_sc(state_chart_name, state_chart_dict):
    """
    create longform confirmation state chart
    """
    try:
        state_chart = StateChartCreator.create_state_chart(state_chart_name, state_chart_dict)
        # EDIT 'coordinate string' ONLY IF STATE CHART MENTIONED ABOVE IS CHANGED.
        co_string = "BeingDelivered,107,423;Editing,250,-139;BeingEdited,-926,-196;DeliveryFailed,477,-103;Approved,73,224;GenerationFailed,-1202,-78;Accepted,456,358;Disapproved,43,-218;Undelivered,172,623;Delivered,272,421;Rejected,457,569;Generated,-947,441;PendingApproval,-436,234;Ready,-1241,444;Edited,-618,-289;"
        StateChartCreator.layout_state_chart(state_chart_name, co_string)

        state_chart_name, state_chart_dict = define_state_transition_for_file_routing()
        state_chart_dict, _ = get_dict_and_states_to_control(state_chart_dict)
        state_chart = StateChartCreator.create_state_chart(state_chart_name, state_chart_dict)

        # EDIT 'coordinate string' ONLY IF STATE CHART MENTIONED ABOVE IS CHANGED.
        co_string = "Delivered,-777,439;Ready,-1241,444;UnDelivered,-774,619;"
        StateChartCreator.layout_state_chart(state_chart_name, co_string)

        state_chart_name, state_chart_dict = define_state_transition_for_email_routing()
        state_chart_dict, _ = get_dict_and_states_to_control(state_chart_dict)
        state_chart = StateChartCreator.create_state_chart(state_chart_name, state_chart_dict)

        # EDIT 'coordinate string' ONLY IF STATE CHART MENTIONED ABOVE IS CHANGED.
        co_string = "Failed,-745,649;Sent,-749,437;Ready,-1241,444;"
        StateChartCreator.layout_state_chart(state_chart_name, co_string)

        state_chart_name, state_chart_dict = define_state_transition_for_mail_routing()
        state_chart_dict, _ = get_dict_and_states_to_control(state_chart_dict)
        state_chart = StateChartCreator.create_state_chart(state_chart_name, state_chart_dict)

        # EDIT 'coordinate string' ONLY IF STATE CHART MENTIONED ABOVE IS CHANGED.
        co_string = "Ready,-1229,121;MailFailed,-600,235;Mailed,-609,28;"
        StateChartCreator.layout_state_chart(state_chart_name, co_string)

        state_chart_name, state_chart_dict = define_state_transition_for_fax_routing()
        state_chart_dict, _ = get_dict_and_states_to_control(state_chart_dict)
        state_chart = StateChartCreator.create_state_chart(state_chart_name, state_chart_dict)

        state_chart_name, state_chart_dict = define_state_transition_for_Archival_routing()
        state_chart_dict, _ = get_dict_and_states_to_control(state_chart_dict)
        state_chart = StateChartCreator.create_state_chart(state_chart_name, state_chart_dict)

        # EDIT 'coordinate string' ONLY IF STATE CHART MENTIONED ABOVE IS CHANGED.
        co_string = "Sent,-647,429;Ready,-1241,444;Failed,-641,679;"
        StateChartCreator.layout_state_chart(state_chart_name, co_string)

    except Exception as err:
        NOTIFIER.ERROR(f"Exception in create_longform_conf_sc : {str(err)}")
        NOTIFIER.DEBUG(str(err), exc_info=1)


...

  FLongFormConfirmationRoutingProcessing
"""----------------------------------------------------------------------------
MODULE
    FLongFormConfirmationRoutingProcessing
FUNCTION

Description:
    OPEN EXTENSION MODULE
    User can write custom logic to be executed in each state of the
    Routing/child business process. It is derived from
    FLongFormConfirmationRoutingProcessingBase

    The function prototype should be : process_state_xxx(business_process)
    where xxx is state name e.g. process_state_ready


    If user wishes to add some extra processing for conditional entry state
     e.g. 'ready' he can implement method as
    def process_state_ready(self):
        # Custom logic before core logic
        super(FLongFormConfFileRoutingProcessing, self).process_state_ready()
        # Custom logic after core logic

VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:

----------------------------------------------------------------------------"""
from FLongFormConfig import NOTIFIER
from FIntegrationUtils import FIntegrationUtils
import FLongFormUtils
from FLongFormConfirmationRoutingProcessingBase import (FLongFormConfFileRoutingProcessingBase,
                                                        FLongFormConfEmailRoutingProcessingBase,
                                                        FLongFormConfFaxRoutingProcessingBase,
                                                        FLongFormConfMailRoutingProcessingBase,
                                                        FLongFormData
                                                        )


class FLongFormConfFileRoutingProcessing(FLongFormConfFileRoutingProcessingBase, FLongFormData):
    '''
    Processing class to process routing business process update for File transport type.
    '''
    def __init__(self, child_bpr):
        """
        :Param: child_bpr : Handle to BusinessProcess
        Attributes
        ----------
        self.child_business_process : acm.FBusinessProcess
                            Handle to Business Process

        self.parent_business_process : acm.FBusinessProcess
                   Handle to parent business process.

        self.report_file_name : str
                            name of the generated report
        self.report_data_binary : binary
                            generated data as binary type (b'abcd')

        self.parent_state_chart_name : str
                           name of state chart ('FLongformTradeConfirmationOut')

        self.acm_obj : acm.FConfirmation
                         Handle to confirmation object

        self.state_to_process : str
                       current state name which needs to be processed.
                    ex: child_bpr.CurrentStep().State().Name()

        self.file_ext : str
                    report file extension ('docx' or 'pdf')
                    this is decided by FParameter ReportAsPDF.
        """
        super(FLongFormConfFileRoutingProcessing, self).__init__(child_bpr)

    def process_state_xxx(self):
        """ process bpr state xxx
            xxx : name of the state
        """
        try:
            NOTIFIER.INFO("Processing BPR step xxx")

            NOTIFIER.INFO("Completed processing BPR step xxx")
        except Exception:
            pass


class FLongFormConfEmailRoutingProcessing(FLongFormConfEmailRoutingProcessingBase, FLongFormData):
    '''Processing class to process routing business process update for Email transport type.
    '''
    def __init__(self, child_bpr):
        """
        :Param: child_bpr : Handle to BusinessProcess
        Attributes
        ----------
        self.child_business_process : acm.FBusinessProcess
                            Handle to Business Process

        self.parent_business_process : acm.FBusinessProcess
                   Handle to parent business process.

        self.report_file_name : str
                            name of the generated report
        self.report_data_binary : binary
                            generated data as binary type (b'abcd')

        self.parent_state_chart_name : str
                           name of state chart ('FLongformTradeConfirmationOut')

        self.acm_obj : acm.FConfirmation
                         Handle to confirmation object

        self.state_to_process : str
                       current state name which needs to be processed.
                    ex: child_bpr.CurrentStep().State().Name()

        self.file_ext : str
                    report file extension ('docx' or 'pdf')
                    this is decided by FParameter ReportAsPDF.
        """
        super(FLongFormConfEmailRoutingProcessing, self).__init__(child_bpr)

    def process_state_xxx(self):
        """ process bpr state xxx
            xxx : name of the state
        """
        try:
            NOTIFIER.INFO("Processing BPR step xxx")

            NOTIFIER.INFO("Completed processing BPR step xxx")
        except Exception:
            pass


class FLongFormConfFaxRoutingProcessing(FLongFormConfFaxRoutingProcessingBase, FLongFormData):
    '''Processing class to process routing business process update for Fax transport type
    '''
    def __init__(self, child_bpr):
        """
        :Param: child_bpr : Handle to BusinessProcess
        Attributes
        ----------
        self.child_business_process : acm.FBusinessProcess
                            Handle to Business Process

        self.parent_business_process : acm.FBusinessProcess
                   Handle to parent business process.

        self.report_file_name : str
                            name of the generated report
        self.report_data_binary : binary
                            generated data as binary type (b'abcd')

        self.parent_state_chart_name : str
                           name of state chart ('FLongformTradeConfirmationOut')

        self.acm_obj : acm.FConfirmation
                         Handle to confirmation object

        self.state_to_process : str
                       current state name which needs to be processed.
                    ex: child_bpr.CurrentStep().State().Name()

        self.file_ext : str
                    report file extension ('docx' or 'pdf')
                    this is decided by FParameter ReportAsPDF.
        """
        super(FLongFormConfFaxRoutingProcessing, self).__init__(child_bpr)

    def process_state_xxx(self):
        """ process bpr state xxx
            xxx : name of the state
        """
        try:
            NOTIFIER.INFO("Processing BPR step xxx")

            NOTIFIER.INFO("Completed processing BPR step xxx")
        except Exception:
            pass


class FLongFormConfMailRoutingProcessing(FLongFormConfMailRoutingProcessingBase, FLongFormData):
    '''Processing class to process routing business process update for Mail/Printer transport type
    '''
    def __init__(self, child_bpr):
        """
        :Param: child_bpr : Handle to BusinessProcess
        Attributes
        ----------
        self.child_business_process : acm.FBusinessProcess
                            Handle to Business Process

        self.parent_business_process : acm.FBusinessProcess
                   Handle to parent business process.

        self.report_file_name : str
                            name of the generated report
        self.report_data_binary : binary
                            generated data as binary type (b'abcd')

        self.parent_state_chart_name : str
                           name of state chart ('FLongformTradeConfirmationOut')

        self.acm_obj : acm.FConfirmation
                         Handle to confirmation object

        self.state_to_process : str
                       current state name which needs to be processed.
                    ex: child_bpr.CurrentStep().State().Name()

        self.file_ext : str
                    report file extension ('docx' or 'pdf')
                    this is decided by FParameter ReportAsPDF.
        """
        super(FLongFormConfMailRoutingProcessing, self).__init__(child_bpr)

    def process_state_xxx(self):
        """ process bpr state xxx
            xxx : name of the state
        """
        try:
            NOTIFIER.INFO("Processing BPR step xxx")

            NOTIFIER.INFO("Completed processing BPR step xxx")
        except Exception:
            pass

    def process_state_ready(self):
        """ process bpr state
            By default, Mail BPR will move to failed state.
            add your logic here to mail report and trigger event accordingly.
        """
        super().process_state_ready()
        
class FLongFormConfArchiveRoutingProcessing(FLongFormData):
    '''
    Processing class to process routing business process update for File transport type.
    '''
    def __init__(self, child_bpr):
        """
        :Param: child_bpr : Handle to BusinessProcess
        Attributes
        ----------
        self.child_business_process : acm.FBusinessProcess
                            Handle to Business Process

        self.parent_business_process : acm.FBusinessProcess
                   Handle to parent business process.

        self.report_file_name : str
                            name of the generated report
        self.report_data_binary : binary
                            generated data as binary type (b'abcd')

        self.parent_state_chart_name : str
                           name of state chart ('FLongformTradeConfirmationOut')

        self.acm_obj : acm.FConfirmation
                         Handle to confirmation object

        self.state_to_process : str
                       current state name which needs to be processed.
                    ex: child_bpr.CurrentStep().State().Name()

        self.file_ext : str
                    report file extension ('docx' or 'pdf')
                    this is decided by FParameter ReportAsPDF.
        """
        super(FLongFormConfArchiveRoutingProcessing, self).__init__(child_bpr)

    def process_state(self):
        call_func_name = "process_state_{}".format(str(self.state_to_process).lower())
        call_member_func = getattr(self, call_func_name, None)
        if call_member_func:
            call_member_func()

    def process_state_ready(self):
        """process bpr state ready"""   
        NOTIFIER.DEBUG("FLongFormConfArchiveRoutingProcessing: Processing State Ready")       
        result_string = "Longform message generated for confirmation id={0} Archive".format(self.acm_obj.Oid())
        event_to_trigger = "Archive"
        FIntegrationUtils().trigger_event(self.child_business_process, event_to_trigger, result_string)
        NOTIFIER.INFO("Done Processing State Ready for {0}".format(self.acm_obj.Oid()))
        
    def  process_state_archived(self):
        NOTIFIER.DEBUG("FLongFormConfArchiveRoutingProcessing: Processing state state_archived")
        
        transport_type = "ARCHIVAL"
        status = {str(transport_type).upper(): FLongFormUtils.RouteReportBPRStatus.SUCCESS}
        f_notes = "Successfully created business workflow for transport type"
        FLongFormUtils.update_parent_bpr_diary(self.parent_business_process, parameters=status, notes=f_notes,state=FLongFormUtils.BusinessProcessStates.BEING_DELIVERED)
        
        
        err_msg = ''
        notes = FLongFormUtils.get_bpr_notes(self.child_business_process)
        FLongFormUtils.update_parent_bpr_diary(self.parent_business_process, notes=notes)

        notify_parent, status = FLongFormUtils.should_parent_bpr_trigger_event(self.parent_business_process)
        if notify_parent:
            notes, params = FLongFormUtils.collect_status_from_child_bpr(self.parent_business_process)
            err_msg = FLongFormUtils.trigger_parent_bpr(self.parent_business_process, status, notes=notes, parameters=params)
            if err_msg:
                NOTIFIER.ERROR(err_msg)

        NOTIFIER.DEBUG("FLongFormConfArchiveRoutingProcessing: Processing state state_archived Done")
    

    def process_state_archivalFail(self):
        NOTIFIER.DEBUG("FLongFormConfArchiveRoutingProcessing: Processing state archivalFail")
        NOTIFIER.DEBUG("FLongFormConfArchiveRoutingProcessing: Processing state archivalFail Done")


...

  FLongFormConfirmationRoutingProcessingBase
"""----------------------------------------------------------------------------
MODULE
    FLongFormConfirmationRoutingProcessingBase
FUNCTION

UNITTEST:

VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is not
    supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at
    user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
eNrNW0tsHFd2rV9XV1d/2PyIpCQ7rthjj+nItPzTaGiNbH5lTkSKISl/epxpt7qKZLe6u3peFSWyptpjhN4aMIJBNgMDzQESQFkF
WSRAkEWQ2WRhIEBWQa0SzGqCrBIgC2Fs5977qor9I03RNmAR/areq/fu+9173zm3Sr8Vev4p8HsDfs6vITGFgmCKplQT61JBEvFe
rsl1paDUE4UE5ZWaWlcLKt0naslCkq5yQaarVtDgqtZSdb2gi8INwUya2keCqR1IhTTkUqYOOd1KH8iFDOTTZgbyGcpnIZ81c5DP
UT4H+SEzD/k85YfMxIYwNfyfGUkQnv8G/+krtxZu31zUDfi3dNNubC/ZrD5vN7YqrF5yK3Zj3d51K43tNWaXLceBu7mSY+lLt1fn
N5dvrer67dXlzc3Fjc0ZXX9rcX0DymaMp9ef1vV1KFxfplobL9xcXlnenKX7GerrxWljtrFv1G2zslUpU0+O4dqGu2MZTplVmu4L
VqPM9puuZWKt3Zr1QrlmlZjhWnuuUbZNy7hfcXcqDWpStpllVByjYbsk3tltNm0Gbacp+9K0sbkDj7mgsKJR3nVcu17xSndqFq/3
MtZDafWm3bAarlEv7VPV+za7a5Qcw9prWmUcEvZtlPpmYEIzPo2j3kp8SLuOxQyrASP6Jvfvd6jGU2KgmZbVLNvN/Skp0FZvbS4v
LS+uB/n5W6tLyzeKa7PrsyvFW3M/hprDS8sN19pmNOLbbqXmrEJpLtr7dQsXrtxrKVJkKQYkllAQwVokUwTNl0z5I6GgmIqZgGvC
VEFPk0E2VqaFklvyXqXlX6nswX6VayXHMSqNilsp1SqeRRtYt+p3YH3ulVjlaDvKUs8I0F7ncRR/BYkv+kIRLBFSsFpIJVd2FRNs
8UCGXMJV20lfPMTnmi+2U4dCW4df+lCAkoybbefobgjq5d3hqkI1RyA3CrXHoOY5fF5NHKLscSifgNy4qVAe7tuTh8J7eI/t4Fqd
cNXq+eqFuxL7tZlAWaYAa6GuBsL/4gQK+oZbcq35nRJzC6kbVsOCPbDMQG6aW1MXg/HyTqVmFu/sgpGBpRWb3OKCPKMdKW5Valax
UapbwUhYYsLKFu9UGiW2HyS3LRDuMpbAniaaJQbqW3Sww2IZe+RNc/G20M4XJqBZsVSuF+07VVDs4haz68U7TRYkw8JCen6XoawN
12oGCZpBoKyirDyX7trxULNL6C2sFbgvbVuFTGcuSDPuSUjqOdOqVe5ZrBhNzkZ3Ewx1u6DtQKNZg8UXnsCRwsj4EJ1dPl4aAs0v
SG7wsoK6RpMPokXoW9GhikOS6pVtvgOPoeyOZcalKpYaJq1wMLpSCa1liUa5ud+0AnltYQlMTXGs2lYhFW5dkz0QGBrIw+dP70un
m/uBViyiPRSLj6Fyfw+1RVTpLydmxBFRh6sCqfKFqmii9KUq5aWc6I13Gdl0JKQsdphNCn5aZDb/h8ec2AJzaYHZtsBMqkJbPBRa
iq+w/4GcZCr3BHbZldtQcgg1GwtUmoBS15WriaraAtWuJuFeq6ZA1d+hUr2VgGsanmR8cAEfSy3VV5nrq2byvNASfdH50M3CQSj+
Gdyj4TmfQD6FeXeIl7Tzh8KBCOOSWknPcIdRFuQ1X2uP+BKMJeknnX/24enbQmNcEdzsfiAK+Idl7woN6bIA4x7l0qC+7Cd9eUva
gBmDGere47DLBu6ogSoErty1WKNUM7jqrzJcKaaTOwV3Zpf3pkSWxqzEhtGoxipHfhMVsOiCIjB0S56/2C3MqFUad6NTYjuydIOr
GB0oW/ZuwwQnaMwubBi9/yJpt0jYtPEmHIXWJaNcamBTUmOQtrXLwHOyaa90o7cHmmVfN5sw5R6Rvf+O6WJqjF3A1TmPySQmeVyR
C2g3NejYcYt1buZoq2ThmUg10VwKGTCX4srGjeLmu2uL7CJKeByTP0AxWvSgMIoCo40JfRItfpBa3CtbTVz6goLKHsgOOLtRlJFE
GZM0FOgSPUlky2jHhWfJcZCX5B6THMgWP/yLbjhe6GgqxZ5AUSPRjJzteDb5aHqReyiM3gHbvfJK0bQQi3BXUciFLidqpqEMVJNC
Mpa0Y9t3OwcYaFQCz8h18OQPMUFncBnNdo7OP0VUuBOAX0bSRQ2cgiZxd6DAHfxkDX55qCFBHaypgfvQ4Yn6pSJ7z3W7i5Oc3uqU
ik6JyoqBXixyLAP3mWLxZ7ulWvgkWSyCpRSL7MlowB2TOJoJOiDUHUdFbyQqkjZGZcfDjMtfCTPMJFxVUzNTcE2aOth4Onimy+8u
wbQG+lzvZcIXWBiWhqgEtMfAVsYmKzUcsiXcPo5GOt2q3IlGpsmtuogWxAOxLR0KvxI+lVqiCw7WB2d7ILckX2LP+dIBuCsTXNID
2RsOjyMDjg2DzrEgFxaF5/bqA4XhWcDG0AISNfu+xdgQ3D+QuabmyqVarbi12yhzVc9TnkMpKu7ZhyDb1UEJx67Rso+Bniii98rp
lm+6S0zXuqD/zETr8nfwxIUDxgQUhvOGFZGqclVpSRWhJX8ielvev7uA06pJQG24Soqr+cqB6Mumck2Ae6GaolwCcjrk0nAgJPxE
O0OHExwxjukrcBWqgOYgHYJf3sd86lChA+NvTczlfwVcDEvhCgoDqe6rkKY/TeEBA+MS2sO+hqNszNEYR+Ag6m2ZoZZZPwm7q4Xt
ND9JI8xdw5mOchlwQL0HB9TYJ+L+uii0UqLgxVKhBcyJWqY6Wx6CZrigP7wcud/HEkp6VzCHW6kPUg2dXy+DS3hbcM8dABZFzOlL
PkoZ+VjB9u1hc7Q9iSvVPo+HIM1o+lFqX4b+wJTGHk706SecLiVz37t+OiWZMY7yBuFGYx3b0znLjwf01Wsld8cbWgCHCy4a/bux
UGFeltMQgyOuh8NRbSP0w0YgTnvPGyGKtMxLet9RFsJNaOHu2KZxraDgUD3ZmDEeite9K1Hj/f6mWyWoaZIz6JXyMHV9epExm80Y
QWJxff3W+u9Q/R8AA7P2ygDAtuzVB1KQgFPUcoIEnAeluvfUAtLCwctBvfz8cmvqAlPIzBcW527foPM1ODcXQtew6eI9OFycQnJh
8eYykG3yBWwCE0T93FdMRkciBy0T3eciAvJiE5acjZMDcYCQIoLfsmsmOJcctsti18ry6tKtQFmaXb7JrmDpU5io5ERcVtneBg9j
4XAYWnugcgBfkG9VzCmdvFOQsHCdgmxME+r2PStQaUmcQjYeFA3naTp56STsehCkGEzgXqm2C5gbTtNABqm9bm2022+Smu6gA3qf
nBs/CJUQTefCo5EfpZKofK6oCmBs6UvIfYnHaAYO1SiPRyu0kfIgAQ9TTXxOAlcJ5ZNf8Ks3cxanyQfZ5TrV8Eeu0xX6XWcb8To6
PgmcCaJw1YdTEd0EPEMnpR6K70ktcKO+zJpQpsVlEuBzqZqiNgo4gYSpfKwgLod6QIt93guGmFTvYr/hx3bmzZ3B+HtkkAN4ILLX
8CLRJdBJKywAfs7qgzRZAvtRhDODbMT9yKq4xk3sNs0SKTMnefDUrADGI6AaPOHs2LtAyTqedmlt8HjZrtUiBrnrcFAY07hgJKp9
JIDM4IHKdTsJWogAkY8+C+OqbO2HlQOVy2SL/UgomOjWgnhRfhnFVri6ZsQ84j1SR37VSdngjL5+JnWLO/pOqtzj/SoHvCVWuoUz
K12HFM7vfozJH0OyylbwdmPAHp3vXroOGX956l1640y71NHV6pTGnsEhfR+TZzGZwgSBMVvG5G1M3jkOcj8HyXs4XJ1DbkVLape0
YSo/HnZffWTYbabhqpkZ2Mds8P2uWS/W4RwdjL9fOQF/U7NvG4CzP8JFeh6TFwasHq7yP/bB41dPOb0efKx0DDsTYmQa9nWYUAWD
L6KTwbCM9x9ofxhwAYtLYDSzmoDBUzDFV0z5mgDYVz0U4F6h+yTdJ+heo3uV7lN0n6R7ne41uk8fCoCKAT/DVYNr1s0hfoVUOxAP
pVbKT0HdFNSV4KpTmyGoq4djSZuZAxmeZOlJniQDfvV15zNfbOnmEKBo3Ze3YfzwJE+1RqjW8DVExTcBFY8CKr4KqDgNqPgld6x9
zhyB/gHZ45ahT3DHquO8xBw1x2IUfK6V/iANKJiuiIJ9BXRu/OGza0BiwfE6YWwHNMgiDQqhWwzvghwHlcVVu4gBzIK+sbK5tmEx
sLdAc+puc8d23EDBoyCQXDuQ75TLgQS/ZBhuDJQ7trkfpDvir4UsqcFtx2Iok4PbIRpAESP+nJjleEETVPy+zUz2MrqZdGcQYLxk
mhWEv6VaseS6pfJOHbGe9wMCmwbYCYZhTeP+DrLTJk0ZzaZ7zhya4vsN9gNUYzTn1akJHq1J00jftGpNOLwQHPbgx0Iej1lEhHhK
Yl0ej2FW2aJYLZU5hRwWzs3PR3k6nY+ywxTDofmGy8Zb8CJcQN4Rz2/ZcKSzwoUy4CFwgEeViq5Vb2IkhmBtMNQRraAlHTmSES1r
oFTtSiOgQR+tYbFWcVwOXwlWXImwxVSGn+VaFP0IFIr3ytaeG2S5aNNyaVIZnt3hi4d+ld0JcS+OP0hDRxVm0ciZiY/fHHCwjBf5
xkXzDKX/JvK8gsxjPBK4mwzBzegPwecYpQhNM1RrRMzD35j4bC8mOMExDR5Al2NFj5eNPJQuncTg0XcBi/8Mfj+lWnJYC7wWsvI2
RwxCFZGCdkgooZ0CJg8cH2t6k5BPmwre010iZM8j4Ccy+x/x8G4Y2pXaWZ/XFKq59hBgCuT6XLZK8hMYG/hEdHLA3BXgtklTOpSQ
8VMuFeZ0yqXDXIZy2TCXo9xQmMt/mkbPS9GBEV8lLs1o/qMUHejsY7irj5GuPka7+hjr6uOcnwC/lwn7GfMTFBMYp5jAOd4nrMca
rgf4zX8Dv5mEdbsSjcJPxi2TRy2roq+aE+Zk7DvPt5IfJMF30jWMIIwfYDxAqE6GMYELGBNoTA4uvwwywNteZC9iuPuNU6rbAEDG
OS+5Se+xjqfcZXeGCcqRkbGXMEGj8l7rYPw91Hymj8bTuKaNa8YSOPQZg/0pvphRLxmbNmR+iuImBoQN5svwFHmjl7xkzJUxV8T+
X8GiuThoMCBG0CcrHBgfRzQM6JRG0Ffbg6Fh54NGxcfxauy+jpw7m0FPdr6HMbHrxOE3FlcXmB1xes7uJ8ltcfLEEEQFctNukn8M
xoFnV8wjPxy6Bx4ryEaxAnrGo/IyuFr2Oop9Iw5AXIkCBWwWEwQ8AGXR0zJ0KWwBE6JGNUyWMLlxjMckoPtbdEQfdjF5TInDS5T7
QlFykkRvyTKiSqFx7kiV3yuqCk5SBy4PP0n/An+azDl+vqNMkfXPFVn6XFWI74v5UEZGfIb4/hj8vNfOhP++DtUnHiVDPsF5VUsB
y0ePpyAeRPsGWBvxLl5fiXkXeFvwkifxrsg+DQc/dkDyxRUjVkDv9bOb+gbK7GVdU73knq1hQm+XViN9Ybcw+RNM1iOVmuLMm21i
chuTtzB5LdamnrN2pHsPcIIXxYi9yTwAhIwt5HDd7G3mbBuNnXwn+fVkP7/m/uvruPIlknB6Wj3WvVh8AM+Lp2XU1862J7yb1anU
8Wzajin1PUzuH0ep34Xk73EnM0eU2tCuaiP05Fsj1U93hxJKe4Mp9Ysxpe5/o1XaM9wBfPpYYqr1EtO/dgVXrEpERgFkcTJKXwng
BzL0KqaDmKodxFTtIKYqElMgoCqSUiCgajvtZoiAZroIaDIkoBq1ySIBBYr5F0QxU+1cB8XUqcYQ9ZCOKWYeoJIUU8zh9oiZgR46
KeZwdZSX4Ed3MUwaCinmUBfFzLMC7v5P8BBMLc2+wxljIbVV2nPolpAFIQpWikELwZeXI+TCLIQPr56WzIHowVRurDfmn49G1cHr
OAUDGRGZq5iFsagI2FzFukeFTmEorhgytUxUQDwtF+VCljYZsrSoQjdHY1uYbGOyE78xGEi5WAWTKiZ3iQmjwAhsvEefSmFJyLZo
OeuYNOLlHMSuxmJy0yFuQQxfJndyK20gr+rhVDOnMrvpQZ1+k4GqKdmL38TF8WnugdklcrgnBrHeF3uDWC+fbl7Hv+LVOl/xftb1
ijckhyL4jugV75/D73tUgyzPhKMMfokB5FD2JSKHckwOpZgcSn3k8MM+cih3kEN5ADkEyOT8N9A2mWibHFJDmWibHFJDmWgbz2U+
TaKva6lE/6j3xlsh8RJ75GRPkAOkkl4Yc1lj9IJbModCipfooXi/7KF4op+MWyaPWgLFS5h5czj2XSMhxRsZSPGAEELL0T6K11EO
FG8EX/weBeN71C18/fujU+nPcdTPu9BRjudS75vhgbzv6qPwPpTaRfpYM/LPnmRc92YficRF3XRK9R7rr3Z9Wg/fCz8CRWM/w8Tr
Z2iMYYKugzmxL0UAyblYOn5vW9rjobxdTE7PxI5I2H43CZs/iYltozO5F4K1Lh4mhjwskROP42FKzMOid6xHvEz6QpX7eZcOsuDv
85Hw6v3wDK7rO/yidaFLi+ZLtRphAqth4CF9DzKzK3OzISUjJSWaRtM6YmjXzmqPyM9Ojd4JGn8ag3XlK8D61bPs1HeWPr3YszfW
wM3hfIgvbu9b2tPvyiOyKmIrf9NBoqQT92XmLPtyMoXyut9Knkyh9iB5XeykUI8BibqijdKTb/lzwJVjX0e+dDx3wkYDydM3i/GG
13oZ+mnQ3b+IJ3/Bt3LKN5Sdc0l0EsF/6jI67yqAuvDjcZgJfqMHc6iSEbqJqgpwS4LyRPh1mWZG8es9ADep/X8AaCODlPfNJId5
tC4Kvx8sj78r6JCZ5u8A6Es5aoc7HoMgvSV/IAMIoiuCIK4H3sTaqb5lW3nUQLZXWrUNGylgxUQiZ9+DK31v/eSAQ+hJUigKdKMa
TRv3KzXULfrSpBvCzC7fNOhDlWnviT61xC+0w05Nq8GPecQY3lPzNvAxCz8Ebx41mltbhzFbzWjIPSQUBnvKReg6rgbMb9qgL766
CGumA/Z0Q5EOFPRGDF6e6gIvUwmOVq7Fkb75GKgMgCf/KobWJxB04OFhXVQJPKhqTkRwooIjzFCpiqUJvdcprnz7Ud1v+bj64Wmg
xErHaXVcuPdR7GHl60UD69T8v7ojtCccZK+dac94L9/JTbt+aowxeOfmz7xzuChbj7h7k/3rykX8/tQ7+PqZdzDCI1/1gZSPSes4
KPJzSH4jdn8gdVEbofKpPMkKFPwflZyGTcTRrETsy8iDnaP/CTPw/3u9adt3Hf4xrhZ9k0WxYkI71NOgoQXaNf7fLfD7IMHB/1Wh
5GElw3iVBuQpN5//Sf4XQgp+if8H77ngOw==""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongFormConfirmationSetupUtils
"""----------------------------------------------------------------------------
MODULE
    FLongFormConfirmationSetupUtils
FUNCTION
    check_executable_path_is_set : verify the MS word path.

UNITTEST:

VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
eNqtVc9v1EYUnvGvbAwKbUqrQKk6RUJiK2XT0iJVEUKNQigRZEmzm6a1VFmOZ5Z14rXNzCxkt94THHvuOTn2X/Kt6ol/gVPfG28I
BEQOxdaMx2/ee/Pem++b+ZecehxoP0JT16HjJCCcciulATVfK7B+ItzmznPCHWE/swOHWx3SdP+5aRGy+AEff+Phne0Haz6D5+6D
PHt0N5eD1TzrJXIQ6STPOkIPi22dpMq/u91e7a4/bBvluC/i/VAciHioo91UhEWk+2GiQiU0W2ZPhEx6I6b7gm102NNccoYKLd/f
bq93u2ud7rLv/7K21QF/y+za1jXf3wLh1rpZobP0YH1jvbtixstmvW9bbCUbsUHOk14Sm9AU07lZQcUyKfSSyGI5KrTgqDVMxVKc
ikgyLQ40i3Mu2NNE95PMmMS5FCxRLMs1U8OiyCXYtcxKN1qs24ep2smxUjxUOh8kY8y11vsO9dDToMgzkWk2iEZGFbLdZ5Fi4qAQ
MYaD67Loreg5mNUpnKwWaTZUQjKRQTQfcqNfIOra8Wkc2q/jUBDAHwksTgNbAOK4/Zw8o4ELY4e7ZuxxD3A4U315BljGi6ZGq/lg
kGdsZXOd9XLJukLpDcF6wyxG9ShN9KhGEz3FjQa0VYwrRX7QCbBiYo3vlUS2x3OaHNKSHIF0h2RXHaKt0W1K8K05M7FLu4RoJ/Q3
klnfkJKqNncPbWNjgc082Dij3drmWKe0esgxb/wzW0Vws6THdpJsB7DbApyz6xudRfxhTXYCe4QHIh5gtbnSvQf79oQ9iWRyAhN8
2hV5I0OsugutgxluQYcZcYoZlfTQ0mTP3nOO6B3y+/cT83folhZEb03/vNI6onIBrGZKlDSOLLlQWhZk0yGPFzj0TatdORhSc7ay
clV5j4SG4CpXFVD1ykE2VjPYK1FUzl6eZJUnDhKlQTeKY6FU5fwaPrzftKsLr9E8iwYiaERpaggfeDXx/ybyI0jj5dUzYNEqRpX7
tJ/E/WuYuo/FoD6dp3P0Mh3fP8v6fYdO61aax1GqbreM//HXf0zMtqGKoWUvH2b8nRvVdCtP9YewhJyHgKq5Fa1lsjvUYk3KXFYe
YBdiqWbXDmJRYExNR14AzeAcrJ1kcTrkglczQspwoB4ZJ6Yedfcx+rzyvtgXsBhXDPYd6lALmzVHz1sNbw7GMKIeHd/6P+V5A3/u
6wz7C7qxNBwDdkADnsiiJIeEA8omjqal84xye9+RP5QOty+R4++ETuccmOuCzIG56ReQWs+5MFeAzL1Ejr8TGzh42fD2zylvp6u/
xcXPmYT8JJyW/VzpZTynX7FK4kHxki5JuBPJC8zvBY6atsTcKjsVmfwMBW5wLhrshhHnEmAdzKKrEF0FMyDfhvPWKGxGSuFNVWtz
oSMo6ul9/BRuExnFOjROoowbRzewkMxsIG5e/fr0Im1M23l4UTK+edYmvtN/G47cRmjIF4aVH4b1dQHj82H4eBil05mZMOR5jGKl
wXE8ELqfc4n4kl+8icpXKUk8jS4e07FBHdui/iWLGnnTlV+hzifYeVgAL9/dg2vNzL7LXdW4VQd3G3dEoY1zoUEb9n865GY5""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongFormConfirmationValidateSetup
"""------------------------------------------------------------------------
MODULE
    FLongFormConfirmationValidateSetup -
DESCRIPTION:
    The module that validates whether the installation
    has all the basic setup required for the expected functioning
     of the component
VERSION: 1.0.9-0.5.757
RESTRICTIONS/ LIMITATIONS:
    1. Any modifications to the scripts/ encrypted modules/ clear text code
         within the core is not supported.
    2. This module is not customizable
    3. The component may not work as expected with any modifications done
     to this module at user end
--------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongFormCreateTemplateModal
"""----------------------------------------------------------------------------
MODULE
    FLongFormCreateTemplateModal
FUNCTION

UNITTEST:

VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
eNqtVktv20YQ3iUpiqIfsdO8U6DbIgGqolGSBgWKNA2ayo+6TZTCVhqUQLGguCuLDkUqy2VsC3IvyS/oqUf7mL/EW9FT/0APPXV2
KcqWk9g9hMLuUrszs9/MfDPSX+jYY8H4FkZ6CSaGPLSKGGbGK8QMjl+ansHMDVS3/vwHI3TjPT7uo8dLTx4uuwSelYdJvLmSiH5T
cF/yNu8PIlgfJcyP3JUnrWZ77XHLdZ+01trt5Y32Xdf9eXl9A/bukuvr1113HTbX17TUxs2Ha4/W2g/0+11t/XaDPIh3ST9hYTcM
fBkmcUpkQmSPkzQQ4UDe5HEgdgeSMyWVRfxmEHFfEMl3JAkSxsl2KHthrFWCRHASpiROJEmzwSARoNfQN33RIO0eHBVGSqEgS2XS
D4d+J+KF3B0lpyz1B0nMY0n6/q4W3U7EM+KnhO8MeKDgqHuJ/wZ6BmqFC4e3+ZJkKReEx4DmfWYqOE4Zs6TMDzBx5GGgjcGwZ7JF
ZjLrFfYsVmH2K+RVWJU5sNqsxlxYq2yGzcLqsDk2D2uNnWELsLrMAJKdza9OmLDOX4R8e4lLP4xSTYThfR2777I0jHmakijZDAMS
RD68dxNBYr4NCSuYQ4RWJ6zQ14qtwDzmgwGjqfxowDQCDzIkZjfRnjHCI0RhB2YoBZiNEMFs6neLYcBqDi9oq+ppykRMvrRW6pV8
npZIaOz3eT5D0x7nMqVRKvPZMKVBEndD0ecsn6NjkJSFARzSNOuUynUzt1Iedb25KXOee2jtNRI1QP/vRyfVUGOwmzuUhnEoKT2v
PJ7Xpe9gy7Bx8RleOyH2jVI5MI7EsArDLWP4B0whxG7YHaEtHc17aIS38L5xgPZMaY7MfesAmspltF85QC8xSJhawi4kIO5WIbOE
fr2wVxlZ+1XQqhTSBxij59+PLNCy7qGnKP7UQtLZ/R2jPRuj4YK6+Sn6BbHKnv2bHbvFegvdAiSQLXv45U+CD3zB02meMIgVOKlq
ToVfEanvy0kyvZmNrFOG8m/ls3emxbfLnZZKhr2hk9Gq14QKiHe5T+GKaQLQF36UcW9mlcv1JJFrcJibqRSe0+yFERM89qpwtuRL
37vYp5BzXf4la7R2bvuDARR3XlveCfhANYJ6VThwZe6ofNGks+XNHSVT6tUE3EZDuM6zC1tejftBT2/lJhdCs6eYVCrz83RQBGqK
lp+oDF/RdWNhA7vwuQTDwrP4HIx5fAUPb5/In7dZnSKTcbQgFZSiCHWxGcPPoYWqttslQY8HzzrJjuqu+h26pKr+5DBrrTrWqagb
RXiqY7njvn6cxKraDlOl5SgYp0EUKo07CoxGaQ6/Ocm/Uy294atZ+npN+yrICO3DeoB108FQGMaWAS0H65Zj6JbzddOPoo4fPCPd
LA4UA8h2j8dk3E1IJ5MS9jYhz2R87yQo7Va9Is4q320dE6rSEcv8IpAsySJ2BLtuIKICYq+LCIqFSeAOo3cWfB5fXDr5lfLHGdNk
FggybJwStGMG3s2IS0WUzrExK1Rr2cLUOCUyLEwDX7ATI7PSqpvaW6Fao7igpovvcHhsr8SrfwXtscP26e4eUw/wEXfxeDRLm6qP
gnN4+MGqgj3pWaqhEKC4YtBrXCToGNRFcHS6A61OmGwMb5yE8g3N/wnyqgap87mZCShK3W9IFKZSgVV/M8WVt0CdVxdqWapkfzyC
87PTcB6q1XGrPqN+43S3pblLafG3CN5nKX2e+dH4pEopSwJKxYyCoAvinJoUwcRlNV1V04fTUCd4hcK2qECqmoAfUNOdcxadiuM4
VcfSp4pORLlmQ0eGPq4332Yrd+4VIO/j0mtr4T8+exAf""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongFormCreateTemplateUtils
"""----------------------------------------------------------------------------
MODULE
    FLongFormCreateTemplateUtils
FUNCTION

UNITTEST:

VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code
       within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done
       to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
eNqtVEFv5DQUtp1MJs0Oq0qgRUIIjFAPc2C625X2UCHEqjtFI7WzUmdKRS5RNvZ0MmTiYHtoJ5pyoPsvEFJ75C/lhjjxF7gs7yWd
LRTR01rys2M/P3/vfZ/zB7nTHOhfQzc7YAQJiaCCZTSk9chCBqOTOXM3dCn5hghXtF4T0bpkYUuwEel6v7uMkC/eYQsOX744PugH
HNr+gcpP95We72kZWzmW8yKD8dimmQn2j4d748HLYRAcDwfjcX803g2Cb/tHI1jb5VtHW0FwBItHg9prtH0wOByMn9fz3Tr6kx5/
ni/5XIl0kiaxTVVuuFXcTiU3iU4Luy3zRC8LKwV6LTK5nWQy1tzKc8sTJWQdB9pZaqdpXp9MlJY8NTxXlptFUSgNx3u1406Pj6ew
1cRaOyULY9U8LeNXmWz8nqIfRpoXKpe55fN4WbueKf09jw2X54VMEBXey+P/JCHg2BpandDtpbHlCyM1lzmAepe8/YlyGnZp5b9Q
yWIOsJO7YmNrsXEwkoDICAosdAQTzmsSuo28QFoeSKtdfXwf/+VOnSHOeZLFxvCJ0jxBxzQ/5bk844cjfqK04JM0a8qRsDtosO8h
ok0wK7oiETwAsCB/QMDKR+sq8j2r9NuPYZdV70X2Bk4ez2W1GYmbtCP1agbsgItrZDYJO//0+41oH67669P7UusVy8qPojRPbRR9
hPBcBOx6tNy699z6TELvPPFgnWcGpuxZckkwS8tmzpVrW1feNXzP2tfsArKf0St/Ra8phYqckBFxid1YTii5YJSU3G4IaoMVu6S/
kF/BrtjP7IR8RwS7YD+xPGjGx+QxqX8QTvlJg9TUlECRzm/5wFY+62sNzKkkWWiNmp7C9i2RQOIZkrgub483/sPuA42paQ9MxZSp
3CK208qdqTSvfCw63lMFp9Lih0i1boFr6Jr4R1lt9M8TWeBzqRxjddfRbQzWwWCO1LqmqTEbuObVgORnWMRHdVkZ9ekHtEM9+pC6
1HvjUfam/PxefpoYw66H9KIcoqgKoqh5mjDvRNEPizi72WlHqKko0siefv8tnn8j06gNRGSwED51Hb9dr3U9/SHuP0TzoM4cq98U
zf2faJX/ZYPmK5SQwXV304dMO87fKsqVvQ==""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongFormCreateTemplateView
"""----------------------------------------------------------------------------
MODULE
    FLongFormCreateTemplateView
FUNCTION

UNITTEST:

VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within
       the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this
       module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongFormException
"""----------------------------------------------------------------------------
MODULE
    FLongFormException
FUNCTION

VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the
    core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this
    module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
eNqtVc1uGzcQJndXf+s6dX/SFghSEG1TVAfLaHsLiqJGIhUGbLmQ5ATYC8GQlLXKitySq9oyfGoC5DXao19pb0VPeYWeOuRKimIH
AVqEwg5IznA4M9/H0d/o2ojg+wk+2wMhUIIEFkGGE/wzEqGIniMRyeBZmISwrok6rOt+HcG6IZqwbko8rU3r0wbsNkUwRO3WXy8x
QrvvcMRHxw9PDrsxgdE71Oq0p82se85lXqRaxb2T/oPRwXE/jh91B0OY3Cf3BvfieNAdjgYHXjXcOzw4Ohjt+/l97+jbDtlXCzLT
Ih2nnDlPlhSaFBNJLDdpXuxJxc0iL6RwVvNM7vFMMkMKeV4QroUkZ2kxSZU74l1ybSRJLVG6IHae59rA2Y5XfdchowmoKkcrIz63
hZ6lF+xJJiu7752dBE+zXCupCjJjC296ps1TwiyR57nkLiR3N2E3MhBwrEojtd7j8kZWkLmVhkgFEb1LcF46HvX5m5jlhv0ChEQJ
BnYFAiehqL9AYywiUXveSqIXYJjUgDWN8u5IzvKMFfIRy1Lh0+mxNJOia4w2F2INODEstVCBsYZ0nM6SswkYkpwZm6pTAKhyVJXU
F0Fay04l2d11BcyY8u6JHnu4vRNv2y8RDzeyCDc++zmIS3yJKLoMQOIieIb+CC/RFP+JMbyeIbrC/XZU1sapzETZWF5a1oAL0pRN
SlOVFpS2wzKyMhubOjg0DRBXuGxRyjNmLaVX6J/bN1neyRemBaafukjcQYTr8Lv4+q1V66zvDPrGQXJVd3EoNpOUljGlFTtg/h6l
v85ZttQ0KBWaU+qvLLeXsXGZZbC37cL2YsuJW064An3oQnOXNHEU+Z3/wIqaZ4XrOZusqJd3TtQ+dzWQ4sGEqVNpe3qulpz4/QYn
zibSv8fqIc4VW54lRv6WWjDc45UXYA+4IanyuP9/xviq8mAjx2CTM5+tOVNgYAvwZopWbDE1ULZDzwDTdMJVux2YeMWLqsDb6yo7
/ZerKjsCXHz1lvK8Ah/7KM37a2/X0LsN4u4GejW/cwM9vPq32LmOnuv7YXnnaPhYG/FQ8/kMeldfFxtYHQ82EGLkaEicLRm7h8uZ
cj3uiVyiAs3Kt2FoddDa4FDOoNm55z7Li0UFErw04+IwHzjhuGc+ej2/V3X7BMQ3LvDA5+fX7Za3TyIg+nnZWjPJE9fnn4Q652Us
VxqbfPwL40+BFa9l5r296dqy+UP1vH50hbMO4ehWM9zZ2tn6F9tP2/E=""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongFormFieldsMerge
"""----------------------------------------------------------------------------
MODULE
    FLongFormFieldsMerge : Module containing processing of merging of the fields
CLASS
    MergeFields - Deals with merging fields and writing back the file to disk

VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the
    core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this
    module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongFormFormattedSetCommonModal
"""----------------------------------------------------------------------------
MODULE
    FLongFormFormattedSetCommonModal
FUNCTION

UNITTEST:

VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code
    within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done
    to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
eNqtWktz3FZ2xgXQaDTYpCiKoh5+wWPJcdsRrXnY0WgUjSk+ZM5IFEM2rTGqZjBgX5AE1Q2QF2hR7Go6qZIXs5mq1OxSKU+RS/+B
/IJUZZlNVqhsUlm5sswuizjnnAugX+SQlRqq8OyLi3u+c853HtB/KkN/GmyfwRbXYccVR+GMq03mMDqqjkpHzdHgqDX1VskpMRyj
N41W2Skz5bHCS9z4WuHGa9Ux4arMTbgy4arC1XWlVvkPVVWUO3/GP+vps4WNJ4uWDX9LT6JweykSLdy8JPH5up/MR61WFD6NuNe0
ljZW5uvLz1Ysa2NluV5fXK/ft6wvFtfW4d59+/babctag5tryzRq/eMny0+X63N0fp/e8MNZey48tFsRD7aChpcEURjbSWQnO74d
N0Swl3zshw1xuAfvxlHtpv9xo+l7wk78V4ndiLhP8xwEyU4Q0mONSPh2ENthlNhxe28vEvDsLI360axd34Gf5ET5oEY7TqJW0PE2
m74c92MchzO19qLQDxO75R3S0INIvLC92PZf7fkNXBK+1/ZGJODwGM1EovTe6CV2O/aF7Yewoj+n1r5Dc1upsdRceVZfXlpeXIPz
987QX7PdChd5kHwR+AeNYZtVc5v9Hex8BWxVQTsFG1W5FjBH5zovfa04YJe8DEeDm7wCxzK3+BgcTV7l43Cs8Al+CY4Wn+SX4TjG
p/gVOFb5NL8Kx3E+w6/BcYJf5zfgeInf5G/AcZK/yd+C42X+Nn8HjlPcBjt/Nz3XGDv3CHF5BwH3mnaj6cWxvRUJu3hIig+P2i9B
fHrEMeSvjvFsFW2zwfrwYBkm84jJJPox6yqusq3AnqEPfqt13qJp5NvDOBHtRhKJ4t7SSk1Ny0Hsxt5LPy253Eu8b1mqx35z61tF
jMGc//PeedLN7h2mpusGYZC47tu4Fh1XpxusUzv32fy5htonmAlbORcMCWpbOVK7bFc5ZifKkdbVjtUTZUH59b0jPVCOSl39WIP7
RteAe9ePyoneNY5L3TJnJ+pr1oWzB8r+h1312OiWThhT9me6SFBq5/Gq8Pc88EmvCQoh9GPbg2WKYLOd+PaWiFr2441lG/y3GcSJ
HW3ZPGgkqDaQpoAxVWrldLzlyincRPh+OvbYT9aiKFlO/FZqzu8ETS78MC3D7QVAOdVAGak6l6SGt7cHTlczhQWSpibq3o02d53L
WxlmAid2m3HiVATM6AY0pe81dvCHtMz9xAuacaqj+hz5wwv/kNQnd1Wc+Q13T4rr5hNzN/YTFyW6jUhPUWDQmcWqTGcm/JuBs86D
85V49sQDetWyjfSKltJl4maXHSukzSroWEUNg4aqnJGGbi/4TT/x4z4N2YV+CvzBisVlFNFY81vRS7+mSSw1ER04lgSKFDCEyCVO
s7txe9OFofGPcF1GhgJIfvdcyYcmGJG2cM9ZkjazYJBToD2CFYu35TGEeyS/hvJn0n8upbfBHSWnwzs+AKiFHyP1Ix6hzf0tdCEg
9xraKRofcD/f9pO4DyBdXCKJwfzWs9nIMo1V0FuYiDfg1ww2MYMjdbSyYcCsTF5Yx09RKpPktMBaplnno4uiBU83tD6gjMzlCai/
k2bRBYhgA7MIweHJRI70hCFU4PClYw2cXAPnVsHRNXT0E5UpQAQGV9HF4QxpoHRsnihcu6G8ZgN3s2deQz6TPVfJqKHKSwC90blv
z3Ee90ih4AQIsaBt1MQQ2gXYYgJEcMxHzbb/CMxWoA18xygIWqkJ0xIZpJrXaKVTS194IvDCZAF8BVToicO0OpestpPsvriC4E/j
jPpyIwrT0hNv02+m+i/9wzgtr0s2qRlSc2/i7ga9HikDV+1UyPQRdGeiOCWmH9buuOtxXtjyHGpjhhRsMvnPYtb3Oqh7hl1nndnz
aaF/ugGNl/oJ/pHU+EPS9k962gatMKR6zERPcq0C+dOZcgy/wzlob9/kGuhM79jwPlRMfJZmUn3Fa/mkn5VaSbyHkv9Fjq+o4e5D
9IOSpA8d2TY1wNvazURcKwAegs1EMfG1qyhNNaMPxGsKELtADMyfH4Co3A8RlxD9FpzitwjH1wqC9ZodaYnyGqFiyCsA3yw5hyqj
obgFcVDjABic6cd6UoJrA6+lO+zfSspdrat/BjOtK1wHEEudT5aCkFO2ytt7TUwbIRsFKuiBSpFwCNmBvETNfHodl34ddjugr19P
HjHULFfQ8/6g7uPrVPERwogKqTHSAuQj6uxdYZ+Cc+UBBBVMfB/+Bi7/G9/U+fx8IwR25G4hCwXP2QfNqOE144ezxZS0kJWaCXHZ
TyiYCAyHjvG5F4Orgbdy3vPFVEcQamXpdX+Jd0oEkmOGEL3B92Jn3H8FY4JwW15WKAwRqd44Rbjp09bp5IkduuAEMyAm4XFGBS39
f+QeYd3SaQYGvgXmdcIo5ZKMq8E98Dy4q6JfijpnwKP6a/aPCle/0Y5KSQmSK7ZblnwLXKoxMih4riKfY7mB3QUGLHh10FGRXJFY
kZxmC9vqfDTvhVjieL0HZ62FIevcitohv2+nzMr820p/AFMSB7ovPSDj2I22KJPqRcyYoqJAiMWnuEMNp5cLcCH320gwtaqu70QH
i0JE4lH0Kq203K32K5c3t9PS+o4PHI/hPSdhCp/Ev2gkWc6GUkJB0e7TBtD3djtwW/H2sDFcQ0ZAq3GTiJ50JT7buUOhPVhZnjYJ
e5Wp/6sD6XTuXYhsTpl6IHOpwGYVhQW4duc4UXJjeC0NQ4vriQ6BFAxF1OFXlYyBfaMCJ+l9xqACSWsQuvXdyq7V1V+oov5cQcIG
0xjrAg9BsVLtKrtV8cdkfHdi9xIY0/jxZFeFOeEu5u/SmGDc5WTq+AovFW8zvqFg8FwJd3Ulmf57dmgxYD6mdFZ5GUYZOApWVE6m
dq/AdRkCPpSEv0djtLoqzDAGxmvCeq/21gvjTOBHDef9ElZ6ZHxlhJY83lXu0tpr1c7P5iG2b3qNFzZmWmDFwfY2lM8HO35oYzVl
Q7aQQLUHFXYDlP4iL/TJou9APit8jx/aRBJgzvZCZB9GbfsAYj6W5pDFChFwtO6fS4Oud6ZPqRQfdKYfomNAchi3Gw0/jrfazeZh
52ObrBXWE2BxzzkQ0SmV5qwcdt8WP4B3QOln+q8aUJJtRZ3xzOtImAcd9eFsbYb8w5luub3SBBP9EKMq0eW4C8WkDwW8C1WuLzBJ
dG42dvzGCzfYcrExgqUNpJ8uCe5cQb96Cqv2tn3wrC/9eCUSP0NHeICPVunGI0ISKHTlmftoo15/tiJu4hDMGdOJwuLJU51qflk/
3POdmaVna0/n6vXFNXf+2RN3fbHu1r9cXXSmGgA/+GHfigRGW6ERly8sPtp4nFYWXzX8PeQJcR/9u9Lzb2eihwBJ/xBvjmEHBUqN
KGj4ThkynwTWkGqgybTkI85pBT2eTkdqEcQ5ryAB1Jd51aBoKptQDWZ+r6oTua/rVWaosEE8mIb9TWCBCUg3LlSzDL1owPPV/gpt
SgaFiQSqFvTUdajDwfZZZ3XNT9oijPsqsiI5hqIvK49l+Tw3/9Rekva2UPCuLSEvHAISAcwCnVvDjI1TDHM2DCY9/PVoGBX3YPeH
/ioOErD5cxE5P06cDRIupQcQgPN+Dg6WrCR5n+CzIyLfppc3m7lGei+Vwsv2XCazY8KlNLgh87mK04xM8Q+4Qlq61vn0QjCMTDGS
t+u55L+Q5rHUVXuNGbii5gxnQPR4rmWZvN5lWd5e6urZmdHFu0jG2I7ROp9gZiC7lT7v2ZbIKq+zyi2Vwn1ZhvK3iYXydss8JAWJ
eKfI7t8aSvFlKoYOTRmnrJowXg/DewPDZr40Kp7y+PlHhGKisLZJWSaxzv0LReJTpxypA0r9vTCAfBWjMWX/DItgApgK40Q71k8A
4hMEV5URrYuAQzQDZVSyumAVwLe6RpaWyV7DD+eJEWPqd2FbEllcNrvz7oPUSF9TYSy9dU4flyQVOiklo9ymB3EuEbfwnrrxK6e8
EHjNaDt2rmIsmKeOt7wlHy6iQXoZDXQAMYE2mKfhhS6dErVYnTEKRJzmcsqbbbAJX0BeDnd9nln6sKJnslXSo2gNB5BGRwffIvrT
faUd8q7+va6akIF1/upcXZ8+64CiK1lOTorelE1PqIXFbyAnh61XE1Oh9xNqe6rYtTgyEsi4wQzKkDDpeePzyASFG12zW+4aW5Qm
7b8JaseCr9/nPrSjPV9+nehXPGYLWapd6NspLa+sbtShSKJYLz4oKmfKmq9jgIVQu+Y+X154nAVa9+ncaqqB3sRVHPh0KIxS6eRY
QbjXTqRCqXkhayXqXlSlt0tmdsayK2TA4gKD7LAar6NUEm4JNWYsiPw/9Tc6UY1VcFaTgmfnp+eq8axZV2pXsAWOy3Ld1HIz1obz
quvut71m9kvZdXnUcF2xgisdx93NgpfezcmJqglZj/wcd5/nkU0s4+4XOZJidTAC9sIgEgbWCTGyGpioZqpm2RyHzTQvmRacXTLf
hKuSOWaO0+izP7bcO+Vjy9fKRT62gIGNi19imf4ZwWfP0zePXgNzsx0HISR/NjioTBsk62TULzEm+xuJv0Vjdab47tHFPQvw64eK
1i0M2dMsU3qVGQumtthKTycGmSQPsGN944ZRRX39S5Fc6AYkXp07FyHA3leO4c83LBcDpwT3lfnVLUwhwngkFuJCewkEE1/gqiqn
6P8J7P71ArF/cJUj9DqwXK0/ECF7B8oRwyUDG01j65qzG6gDwP6G8kDZt7qMGOajoWQRJ84SxZEPKd/heqkUAek2+lrSd6gBirQw
0jjJshYZQb2Yvjr8W685jUH5T/j2KALDcw2YHqpprL9VneQdfbZLVfE1hGPrSOvYQNnYcQMSxpqZzsp4huT7XNmfhorVPHwF9aoO
9eoHHEfoWb1aSrBWLqGn/V7N6lD9SP9K35+WR6xD96fpK1aps5R/xcqbKtn3IEyYRtvLA8k5UH6vKP2xrBijRqMtBH5AptJxCyqE
Hak0ekT6R1Y3yrJRfEYZ2BjFdHE7KxEjqpyycO9CfdV0rrRcSfV9N8X7eQSRrVgKLQt5KSbmhxor0hLG+idYlCED1+PGyUhhda34
OlXktgTPv/dCuglpGxRZzPre1Cbg+L565kevIb8+feoBkyn1N1OETODCzk3qsjHqsqn0vRbZS32uhCtgGNphEwwDkrbOp1yl5kkp
MTDV4xrX0SQSSO3A3CrHFuTaWYJHZmIcaV9poSWP1K4wwEjKnU/WsYw/jVBsamIkEcX/ody63nl3I8T/fDDQksgeftn0oFia7ZlA
1ngbE1/iBZFTeVSbUtfYGaCqupff5Tn5TJHMoWbF41O6pZP9NSwK8V+9zpgOqrSAmi1QpE41MVbMZ3ZMBxU6PO8KZCt/g69dwx02
tEW9CN3IsuJXuCOBnbOiMYbAf86/DUA0ViEKlzAS0y81S05JzvMox8a5VKx3Pgq3gm0C0HnnT6Qo+H8mKNWmgE5zn7ac1Hwgs5OH
LG8v65NmlgtVtYm/Ve78HyJvfR4=""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongFormFormattedSetCommonView
"""----------------------------------------------------------------------------
MODULE
    FLongFormFormattedSetCommonView
FUNCTION

UNITTEST:

VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code
    within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done
    to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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
""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongFormFormattedSetCreateModal
"""----------------------------------------------------------------------------
MODULE
    FLongFormFormattedSetCreateModal
FUNCTION

UNITTEST:

VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code
    within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done
    to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
eNqtU89rFDEUTmamdR0rinjwIgS0hz24RT1ZRCxrWxbaLewPD3MJMcm2gzPJmGRod/HWQv8NPfZfmpt48l/w5Et2t5aK9NLAexNe
vu+9701efqJrKwF7D2afgxMoQwKLqMAlzjBGu0jEIjlDIpH4NM4isTJE7dUfUYTQi1tc6f7Bh/Hedkpg7expdbijTemNOSfFULqu
kczJfS1Yke6M+91R76CfpuN+bzTaHo420/Tj9mAIsU2yPlhP0wEEB72AGm7s9fZ7o62w3wwVXnbIlpqSUot8knPmcq0scZq4I0ks
N3nlNqTiZlpBbY+qC7nBC8kMcfLEEa6FDHmOc3eUq0Dj2kiSW6K0I7auKm2A2wmoVx0yOoKjeaIliNfW6TKfsU+FnONee5zPVFZa
SeVIyaYBeqzNZ8IskSeV5F6Sr0vYPx0IoIVMoZW/FZkjtZWGSAWKbvPWfvnxaePmP1emy1KrcGX8+szFi68l4CTKMMxdJHAWn6MJ
TJ+Iz1pZcg6jmfl5S5obh2L2JnQe9oQXzFoy0YZwj8jVIbmkdXVRlwrIZHfcCxyOrwjDC3He7CNwDjn8FZ1G36LvcCgwyIlmTwPR
ry78eGdq7rS5jPXbcbMCQyCN8W+raVGaq9xRCr8qsbKYXODmLqVBJaUX6Pezm7rrVFOzCqmeeFVReLSz9o2ky7KrXoJipaS0SSmd
jwXs1yj9UrNicXKHUqE5paFSc38hkMuigFgKsblreXfPO9/cY6/Ib1o4iUMEujcP/HG8xFwhp0ty03o7l/EOLzMkD9fiP5nSMtE=
""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongFormFormattedSetCreateView
"""----------------------------------------------------------------------------
MODULE
    FLongFormFormattedSetCreateView
FUNCTION

UNITTEST:

VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear
    text code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications
    done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
eNqtVk1v20YQ5ZLUF62kSZoAKYIg2wIpLLS1k/TQwmiLCrLkCrBlw5bSlpcFzV3LtPmhLle1JfhmA/kb9tF/Sbeip/yFnjqzFBVb
ceMeQoBLmjOzO+/Nm5H/NuauAtw/w52+gIUbrsEJN0PiEnhaoRmZrkmMNYPbvHBm8IIgB5YwT23X5uaOUSv+RUzD+OYjXs7G5mpv
velQuFrrSdxvJTLC21NK8B2hGlJ4SrwOxJHT6nUa3fZmx3F6nXa329zprjjO6+b2Dnxboc+3nzvONnzcbmuvneX19ka7W9fvK/qA
l0u0Ho9olPBgL/A9FSRxSlVC1b6gqS+DgVoWsS9HAzgavYahWPZD4UkdrcSxon7CBT0K1H4Q6zA/kYIGKY0TRdPhYJBIiF3S/q+W
aHcfTNlGuZM/TFUSBWNvNxSZ37fohztFgyQWsaKRN9KuR4k8pF5KxfFA+JgSnku9eQR6Ew6hGZR3J3qKDlMhqYgho49ZtLeopE6N
TJ7dXLIkipIYS+bPy8+aPtMtWIQBsjNckxPX4ia3AuLab4w9osVXdgu8yEtnhlsUJV7mlTPjlLhlbXf4AtgrvMrvgN15Y9iGuwDy
vPtfCc00NP5es4Wv1A+9NKV7iaQ+2oO4T2dBjSQcRjGE0rVeW4e4xczoFje3UFK+eQWWOYWGd3oPFmWcGufkhFwQAh0GqZnjp3ob
vBpQNCWHvkrk7FunZk4KICAhJ2XGgjhQjMEnOxXh3qQABfXCSzKpMKazZuzS+OeLW7AuDUayCLk8waR0tvZ48baY/GyfXIFHpncj
h3diHBgHRFYRmh4M1niV+l4Ygkh3R7RV7/2GxNE96UVCy/hoX8Q09f4UdHeoVBLTvlAplCDwDwWfsfAWT5GYa82UZXi4pSBlGHZJ
ZAltC7OlCstk4Rcv5qGoDwbh6HPMrqhVViY2GX91G9YrsTdWU8NdnMI9JxeGfAxv5rnFdV3j6vQvU1fZAhrscbsBLOx6/mEGUMmg
34cW1PD38jSYr+XFUtBXDAzhbPD3vbifjw68uq1OzZ48jFgeJtGfob9bWhNq1VPexIk0O2xXxZNSM8ahwoE6pMqtYEEY5jLP2tMk
vmFXNk1hccaj7ZC75vjH23j84G7vCamQ9wmd9ckFGHJm4WmfGBcWyYX1ZFv0gxS21gJDOOmMI7fUyE7p1AoSN548kFNvNvOWqFh3
oc55Xhv5KVJxF5fKNWbkQ1heYnK21pFDxq9uQ//+gb41N/HsXEwvtJjOjRNyYl6YCPo6eBQSEnBeuCaqLz/YWzM2xs+ytGgHptvc
KKOoNVBU0b2PDR54YTAWLPRGyVBp1G4FlDY8ZjzsA6veAH9a5H3k5AG2o5VpykJzcRo2p6pq1k9ZDt8h3LImoErKpErGX/+/dsw+
1Ko4BrWO2MRhLPtFg/cqY38MvXBqKTHGE58x93Fjc53Vu91t9mt7da3ZZd3ft5pso76lJ6D8ROeXKpjyfiTUfsIzCSBw+QiNd6aT
1RfQM+wKtMpMG1jFR/kEhAljlc1qsVwyiVOuFrUVRPiZHlqt3nED/jGQWHy3uq7pWgXOk772u7L9O/rKP2QgfyJ5/9n3gDjrX4/7
jFw=""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongFormFormattedSetEditModal
"""----------------------------------------------------------------------------
MODULE
    FLongFormFormattedSetEditModal
FUNCTION

UNITTEST:

VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text
    code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications
    done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
eNqtVV1v2zYUJSXZlrWkLYKh69p9cFu7wgOWdN1WdMFQNEvswEDiDI6zYnohFJFOlEmiR9FNYjh7SYD+jfixf0lvw572F/a0S8p2
UqNNN6ACRFEieT/OOffqLzRzOXA/hTt7DANDPmKYWTFOLN/Cem7HdmL7tpk7seM764iVWPkMsTK3T22/xJxtVKv8iSyEvn6Hl7e5
tbazUfcIXI0Nke41hEz0HSjF2TZXdRapTcGC2GvstFY7za2W5+20mp1Ofbuz7Hm/1Nvb8G2Z3Gvf87w2fGw3za7tpY3mZrOzYubL
xv43i2QlPSaJYFE3CgMViTQjShC1z0kWyqinlngayuMeeNa7+jFfCmMeSKL4kTImQsE4OYzUfpSaY6GQnEQZSYUiWb/XExLOLpqt
DxdJZx+WCkOTTWE/UyKJBsFuzIt93+p92lLSEylPFUmCY7P1UMjfSJARftTjoQ5J+yXBbAbGCIOjRSoXHgNF+hmXhKcQ0bvk7G8t
qBrO3dZWp9lo1tswfz15qyJJRGroa4WzkrTHTyNJjnwMsrQY9u0XqAviZPaZ6zvMYaUzBPIrswo8y8xlVXhWXoCifRck6eWfXK2b
wWODkJmTMA6yjHQFoALrUbpHpmdWRdxPUjhJ1neaBdn2TLTW+JndhkGhU3SORwijIR4iag0tGG2GISZr8LExoK9VoEjJfqiEnH5r
1Zy8BHLhMncpjdJIUZrfTWjGY8M07U6CoqGJClYUTYOE59coP4oyHTmV4jCr2bkDp7q5Y1YdFqjgJc6rlJpMKX2J/vnsanwWe8ey
Avnc0YmVTa/wcBkP7r/l2CTw0JppMx7cq9rYPgx76MQakCGWnw/xORohwAgr69yGN2eERvjEeobSJw5SpeNdjE6gAQ2+VOXzCsND
ewStCeauqg7tUzzCGD1DvyJmndh/2KlXPB+gB2hoAeb2YIU0uAr3eVYU9BhLIrmuSs15QjQ8pCtFQjpQ0UTsHsCexSkvg6d1KUEb
h/sR1E9XW9MSKSzMGFCXDJDi2PI92QI9Oi2gQrqQfG4HmfLn4khxGcSUPw/i3NGe82r9KOQ9Xb9SC8ov1dvtrXZeWqv/tLOe26CY
miM1kH5FHSkKfvyqgVsHkNtcSnkdVovhhnZ134T7ZglpBenDX2hmFoyiHWxhB3t4AV/Dc/guHjTeQvl/dPGKIuzxbRTxCAbQwsMh
PoDaGaIDS7Nq3qByxnPnvDQC1QzReXlo1lnB71c/i14/DhQQDBVadENdDJECjrTfCyIbrVrFfz+ZRiinBeRXIKM12GwI8l2dnO7F
/nwyqTUlOfffW+eqLYRqKp7kH/TGnmnh76L6Co7c5xE/1CTlVQlnjIVZfm6+YsOY0DE/0LB4Yzo0DR4efP+2gn2tpVdQt8a1aFD/
qED9FuCN9AjIa+zRyPz6Tb/6boVBpUBK5icC4QO8bA964VUot2qWrJr8A8YKQCwDiLw9zX0KgPwQhh90OI7JFvJ89H/yvIR6VXdN
TSZ0TY/S4ncH8zlKf+8H8XilQikTIaWmuclbergziSOfHzfIkMcxbLkIdX4abwmGmxN2XOw4c64771bN91pZfqoTvz7NANp8N9oz
xSx1gnJhYuOS8Qs1uD8WUT/B2oOWonNjDth37X8B/DOiFQ==""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongFormFormattedSetEditView
"""----------------------------------------------------------------------------
MODULE
    FLongFormFormattedSetEditView
FUNCTION

UNITTEST:

VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text
    code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done
    to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
eNqtVktv20YQ5pKURNFK4wRtiqZNuocmgFLEbtpDkSAoqipWosKWDD2CgpcFzV3JdPjq7qq2BN8cID+iKGAf85d0K3rKX+ih7c5S
kuVH3R5CgVxyd2Zn5ptvZvWHce4qqPt7dYueelDDMyiiZoQ8pEYrMmPLsxDM2ZEdF7yCfi9ExbjoFZHBSsyiRVo6sjznuUEdWn5t
0DJDe2VWPLI9l5pdo+r+/jcyjIfv8XK32s/6mxsuVldjM02GjZTHcPtSMtplcoOG8mXI9t1Gv1XvNdst1+23mr3eRrf3xHVfbnS6
au4Jvte557odNdlpaqnu+mZzq9mr6fcnevtHa7iWjHGc0nAQBr4M00RgmWK5y7AIeJjJdZYEfJwpwyA1ith6EDGfY8kOpN4iSCnD
+6HcDROtFqSc4VDgJJVYjLIs5Up3TYt+vYZ7u2op32guFIyETONw4u9ELJf7BuRgpzhLE5ZIHPtjLbqf8lfYF5gdZCwAl8Au9i9E
QJWa3kmHcmrRl3gkGMcsUR69z5S9A661qmi6Wm+3Gs3nZLvWqW2R9g8/wlxjy0/8IWtnjGsH1dznlya2nsZxmkBqvbs9FmeRL1kt
oR0GKNaCgAnRzkTLj5n36YX1bcbjUAi1f3C+CqzZKKAUmKHYb3gmRZ71xhioeqDWa8ezqU0Lrw2vAIxXYzHnu1eiLl1Ro/PGsA2v
rBhfmd65kpaTbzX28IqDyBcCD1KFuVoNkyFeaNTTaBQnSg8/7zdzKplLPpszv+EWn6mHNI6MY3SIThAypHlsSfsEHRqkQJHyyZzc
0VvAVVcUkHwUyJQv5lrV4rSg6Mj41CEkTEJJCLfVrt61F77oK1J0wuGuFNNb7e0u2d7obDW73XYLMkhata2N6SqBAEi2ALlqTm3B
osG0oMjlR2/RtEyIDpeQt8afV1fuWjbmjrJ+F4IDNwy7gib3r9aZ+x2gJZjQDKI67LSqHofGHsBkAExzaLbTbARcwdSXPhTFHPEc
GpNXAIlb2UyMsINQQLIIyL9FfEUt8+uLB5iZXltIg9A9MK/TZ02+/I/Ql/UuxILOx7KHeAXi0M3WmjzDgR9FqvR3xrhRGx1AKHjA
VUno5rC/yxIs/F8Y3hlJmSZ4yKRQLAyDV4wuQn4HVji4O4+9FAoCavzGJaGuvPATGrFalkXjB+BbUQfqIBtNqlcHu6T572l7upS2
PRMSp0brzJd95qtw+jVL8eO8sw5GSQAdBnqrLroEuuo6DQWMGqscF3GmMtxYB092ZDItbWgdyl1dHTHxKSVBGsGiV44JZfmrWgl0
BRPJ2eW43czNk5l5MhyFjyBeR8P3AYLf5KurAby4RWCd62yFOY49jeOxcYgOzRMTkDpGJ4ZGTPULiqQN2O0Vj9Cvxm9zLEvHDs2R
NFU3KSsdN9c5XoGRWgpfe3If15do1//pLO0WYE5ug+OX9biHuNeqVrwbUMKhH4UTRiJ/nI6kd5OzoSo3xgkwe8cPXgnAeTA6IDQa
eqW6n0FKp5ZqajlZv1DpYpE+AclgbmqeDcEkSZRf/CPIwy2dRKLYrduXalWM34SFj4H8lq5szwI7xdyd8zms5Ayuc6ZK9jGg/IHG
vYIcdBtVUFGNkwf/pwjyLaouNGBwkJCpS0h+Mqv3CiE/j/xotlIihKaB6tHAldzjD+du8090/5l124BFkZI7dfva3HcOZXobXAbU
VLValZJTcEqOo1eqK/yOLv1G/6Cu/rR41xdRqBNkEA45kMu70Wgmkg3zk7svw0joc4MD66Yl1V5UuJyXQbSyqSF8pvKbDrWNJbdO
IXWe5kF/B01AQGz2qqOghJ+NTGT+ZRf+AR1X28c=""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongFormGUIUtils
"""----------------------------------------------------------------------------
MODULE
    FLongFormGUIUtils
FUNCTION
ChoiceListManipulator
        Responsible to add/delete template name in ChoiceListEditor


UNITTEST:

VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code
    within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done
    to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
eNrNfQuQHMd12M5nd2dn9/b2PjgcQBAcgiCABckjwA9IwRDMw33Ak4C9890BFCeyxnvbc3d72B9mZgHccI52BFlSXKJNK44iy5Jz
cJzEVBxXIicuVz5O4iguVspJXE4qlWyl5NhO2WbifCq2E5lWhLz3umd2dm8PFG3FCcGdT09Pd0/3+/d7734z0fefAr+X4Of+hpRI
sISZYBKTa5Ip0Vk2ZTorpkJn1VTpnDSTcFZqqXraTEv8Hc3U4KzWMnXd1OtZM0vlyVqunjNz9SFzqJ438/Vhc7heMAvinRFzBM6p
2kh91Bytj5lj9XFznJ6lawfqB8wDdK3VJuoT5gRdZ2oH65PmIfH+YfMwnQ+aBy8nmM6yn0iw7F3ZfAjucmwI7obg7gjc5dkw3A3D
3cOswEY+kTCPslE2BudH2Dg7AGeDTbCDcH6UTbJDcD7GDrOH4PwYm2MPs6OfkMzjbJ49wgy4epw9yo7BsxPQ8mPsOLR8HFo+CXeP
sxNwdwLuTsHdSXYK7k7BXRHuiuw03J2Gu9Nw9wR7Eu6ehLsn2FNsClp7kj3NzsD5KXaWPQPnKfYsew7OT7Pn2Tk4n2EvsBfhfJZ9
gJ2H8zPsO9gFOD/LPsguwvk59p3sJTg/z6bZJTifg15m2Cz0Mgu9vMDklUTx8q+X5ETiqW/jf/rVxdlrV+Z0A/6bv9JsbMw3nfrl
awvXvGrN1eevlWZWFxZL+sxms1qxr1Rd72q5UW21a2Wv6dBL+N+y7baaDbe6VrMNr2mUGUyFXbM9uLPrLahrG41y3TaqDaPb0Byr
Yhu6fq20sLo6t7J6Xtevzy2vQHfnjceXH9f1ZShcXqABrDx9ZeHqwuo0XZ+njs9OGdONbaPeZNX1aqXsVWEE2Lu3aRtuxam2vKft
RsXZbnk2w1rtmv10pWaXHRjUHc+oNJlN7dyuepswMHyt0nRgkK7RaHqG2261mg68O0W1npkyVjfhEW8orFRpu16zXvXL8OW83rNY
D1uqw4zYDc+ol7ep6u2mc8Mou4Z9p2VXcEjYr1He8wUMXqOW6FO6PZY9o+3ajmE3YETfTgh4BwlJ6S2pk7ztlFtuUe5opcXVhfmF
ueVOYWaxNL9w2VqaXp6+ai1e+lAx2RmZX2h49oZD4yUw6Yx2V7XU9Oab7QbrFOYBUsob9mLL5lU7uuuVHc9ar9ZsaLjZWK86dXoy
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""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongFormLogger
"""---------------------------------------------------------------------------
MODULE
    FLongFormLogger - Creates an instance of FANotification

VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code
    within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done
    to this module at user end.
---------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
eNqtVs1vG0UUn9lvrz+allLaHmAEVMJITVIQHCKEcNOkCuSjStJWrIRWG+/Y3XS9686O29ha90ByBXFHSPaRK2f+kr0hTtw55VLe
G9tJanrsWjsz7+2b9968ee/3/DeZe3R4v4E3W4YhJB4JaajF1KNq1jwtdEIjNE+op98noRXaJyS0jzXPCLU9Ui/9pWuE3H57j7u1
c+/h5prL4FnfTJP2eio6m2m7zQW7zVYFDyTPWJCwKMlkkDQ5S1tsvbGdyqgVNQMZpYnrPlrb3dvY2V5ht3Zvue7u2t7+7sbqPnD2
ljY3tjb2G2q9oozcWWSNpM86aXimIGMyZfIJZ1lTRF25xJOm6HclD1GqF/OlZswDwSQ/kqyZhlzpeRHJJ1GitjVTwVmUsSSVLOt1
u6mAvYtK6rNFtv8EPk0UzYSavUymnWgQHMR8Ivc5yqGmTjdNeCJZJ+gr0RepeMqCjPGjLm+iS2gX4jF/ghC2KU3qKOcWA8l6GcSS
J+DRW7y3fzCXtgvS1C7kVhVeF95VzK9TzC/MKdKhQ42SUB/qUsvpMR0aUpdGbmCeHetAm1PamtLWlLantD2lnSntTOnSlC5NaXdK
u7mb/SLNQ0uaI3tMbpCRMyZt4Cs5LSyHupIrD96XpcNSTnIzt3MrL+duXsqdsPKTM9Qfk+RLg0i3/y8lwwolIFsOq1LPK8f0V/Kb
dkwpeUy+x3NVXlYSdzIvk2WS61AptcEjtstlTyRz6XqWyZObx2cil7G9KGnHXF6QYQdBBpcOnCToTC5YYMTrtKg2tu76Dxq7jS1/
5+63254DVbPJn/NYYIl7ly/aVPzXWVs8jALP3dvaf7DHxXMuPPchJMpaJ4jizHOVaB85nguGGmEoeJbVncJAR7xqDCUK3voxai6u
JBc0+x1UXVQUrz+VqHVge9Dm/oFIn3JRGJiVXhlHnyubRTnryK6fKWcGH6wdNXl3Gq//IcMKq1e8S2fc1TRpRW1hwLmLhYnnDwIB
fkouskLPpCjsNpeBhIUeNDueua5O5uC4DXKFocba6zdVlM6cKMyuiBJZrwoTg1tudVG/j7FQZj1nEgEMF4TGV58zr4RrFQBhg5Sw
cMAK8dzzk3su6O5wHznCwTOYsEjF70RcBer0ytzpF7v9YqEVA68FPD9WzMszSCdGhRrUoQvnP82gV2HWgKud/05du0Y/oeIa7GnO
dwlt1iUYDJxAdyDQGaAnhFqonxBP1S7MZmhBrtuiDGKDm2w1DjKFpoDbIVs/v4QmnVOO7300UIMhJ4ckpz8TAAkC6ug2pLcDF+aH
gQzqWmFkPG4VJkY7UzGZDO9irBzfj5JI+v4d1KbQSBvcmE+CxZnUa45gsMszR/5ER+g98sMfQ02SQyrJSBuTkY74MdRzfWQgmuXa
WB8C1ghjUMmNkTkmQxOQ4i4ghdUfAFJYgBSfSjvUpZNriBShAStLYYZxTHPrR02hhjm0XlqAGmpWqGGOSmMC9pcB75zcVrjnAjYh
ZY7KuT0G7BxVQmtMQxswrTomxzolz06ewV1A2JzB0i6GHVvShdCzlkg7irl2JHmSYUltBQnUItTfBTnPXt85OIQmM/j4YYKdCe8R
LgGaUiKxJWHjPRNng+rieYmusO1T+tEEmWqipvBn/czcKio4kt7l+1ze462gF8spS1xC0Qrwz4Q981EQ96AWG1Ct0UFP8jUsBpXg
ooLixne8nxV2NiloT2vIwsy6cYQTbOnWHXEdhW+gsDWpVK8M1vzm1JHKpHpTddzCkbzTjeF/hngHE4o+nUsx8R4MX2CKfKiyy6FX
qEWNVwbUlUYrtAY/65VFtVfXtQrU2Buyb5bL23ULExYT2fcL1/cnXRrWFd9/1gvi6Rfb98O06fvi5sz+BZ/OHcPcXULHEFccLHtD
8eqa6gFqqJviFq7xUsQCDtdmW9+ks3C+mvj0NRZKhhViVB3qaO77/wF+wb+L""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongFormMain
"""----------------------------------------------------------------------------
MODULE:
    FLongFormMain : Main module for ATS

DESCRIPTION:
    The FLongForm ATS main module.
    This module connects to AMB and subscribes to Longform messages according to
    FParameters set in FLongFormAMBConfig.
    It invokes work() method

VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text
    code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications
    done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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
D8X2BJc=""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongFormMessageGenerator
"""----------------------------------------------------------------------------
MODULE
    FLongFormMessageGenerator : Module to process the merging of template with the input data.
FUNCTION
    extract_template()
        Extract the template from ADS
    process_template()
        Merge template with the data

VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is
    not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at
    user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongFormMessageGeneratorDealPackage
"""----------------------------------------------------------------------------
MODULE
    FLongFormMessageGeneratorDealPackage : Module to generate Report for Deal Package.
FUNCTION
    process_template()
        process data for Deal Package object
VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core
    is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module
    at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongFormMessageGeneratorFromXML
"""----------------------------------------------------------------------------
MODULE
    FLongFormMessageGeneratorFromXML : Module to generate Report from input XML and template.
FUNCTION
    process_data_from_ext_obj()
        process data from BillingInformation object
    

VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
eNq1W1tsHNd5ntvuzl64XC4vInXzWlevYlOSkzi2qqiWLdFRIlGqSN+mTrfLPUNqqeUueWYoi5tZN7HU1E0bQCgKtMhDsASKAi6K
FCjyEBToBUXRhz7koSjyMA2CtH1p0LcU7YNRoP3+/8zM7lJ05RSp5Z3LmXP9r9//n8N/0fb8Z+H3Mn7eGV3ThOZoQhdGS3d0vhuO
wXfTMfluOSnczVZ6I+NkdFXXdmy+Z50s33NOju95J4+71SpsjDljXDfVKm6MO+P8nG6VNiaciY2yU+b3TGtyY9KZjPqccqb4Pu1M
C1tkH2rOjKiKvCg81J0DYkwUUTIrxkUJ9zkxIcq4HxSTYgr3Q2JazOB+WBwQs7gfEXPiIO5HxSFxGPenxBlxRBxFTxXxKfGUqODp
afG0OIZvx8Sz4rg4gZLj4qQ4hZITr2nitHjmoSaecafXpx+YzklhLGnV5/7pa4amPfdz/C934+aV169fzVXw38L1TnttoSM3brie
V19zX3Pbrqz7HbkgOxtv3bheuVC50RHbLbfidypr6qNbue1udqRfWUWdSrO9ue1XqGq9LSq+u7HZQpX53MLri68uX7u5yMNsyk4D
A9RE3a/XqFnNve/XOivrz1T5+1CdCtVRXb/SbLWa7bVr7VVMsO43O+0KmrgNn9vkcm9cvb2EES5UTt4+mcvdvrq0fPsaj7l09vq1
G9eWL/PzBa59fr5yub1T2eiI5mqzwZ15tCb/jlvxGrK56Z912w25s+m7gmphyWcbLbcusaT7fqXREW7l3aZ/p9nmJo2OdCtNr9Lu
+BVve5PI4Yp5Hun5+cryHXxSncSVGtue39lodusrLVfV+zTVo542Njttt+1XNuo7XPXdjrxbqXsV9/4m1orp0Lig7t7ZCzRTSxiM
Vvcr254rK24bs/l5Cs1PSIcXq3qYvVFvtm64cs3FS3XN9WsYr1lvNbtuTbJcELdqilGK1+36BlU+dGPpzY4UVzqN7Q2sd7HjL3S2
2+KqlB1ZNUJ78ebytYVrV2+HpVdvLi5ce6126/LtyzdqN1/5IhpPLFxr++6a5LW/7jdbXsMYsi4mfhn8XiUL8zwu3XJT6xm+FmgP
9J4RGG9qS5rO/3y9D1sT6DParq5rb2tt45zGmmZ2Pytdf1uCtPWKaDZopLrcqTSkWyc2sEwS8yGp95oCJZ4vIZ/dW1fb3jbkwb8D
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
U/T7H4haBRU=""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongFormMessageManageMain
"""----------------------------------------------------------------------------
MODULE
    FLongFormMessageManageMain
FUNCTION

UNITTEST:

VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code
    within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done
    to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
eNqtU0tvEzEQ3meSblOpQuoBAZIvPeRAyuNWEKLqA0VKUimbVMgHVpu1m7jdXUe2Q5pqe4Ifkhz5S7khTv0LiANjbysqoLfamvHs
zOeZ8czsD+uv5QC9B5IvgBELW8QmTmpjG043dTIHO7bWeambudgF2SeVrxb2iBNajer3X7ZlPX/AFXSODwbtwwDBOmrzfHTERdah
UsYj2olzw1keHA26+/3WcTcIBt1Wv38Y9neD4OSwF4JuF233toOgB8pey6DCnXar0+rvGXnX+H7ZRHv5HGWcsFOWxIrxXCLFkRpT
JBPBJmqH5omYTxQlGjVN6U6S0lggRS8USjihxs+MqTHLzbWEC4qYRDlXSE4nEy7gbtOgXjVRfwym0tEtKJlKxTN2GQ9TWuJea5z2
lE14TnOFsnhuoDMuzlEsEb2Y0ESnpOOi+J8XELhmPJmn/IkYKzSVVCCaQ0YP2a9rPUTdhr168v9uiRNGZ2B+eo+5w0mcJvadiawC
+UD7eiqHwAprYS2tKxtOe2ktHCAXvp3CEZ8KZ+EtYT7PjUycx9aVq/zC/WJfeapSeHD6hb+oAr6iaos1uBsArRd2USn8pZ5nF+bY
u3xTNuh0mie6kkiqWCiJEkFjRdGHQQu14zmfKqg5uTUyVXbtWqcvHFOIOvbDMU1TvL4Hjj5T+KAKr4U0pcYxflSKlPT47Hh4BqLE
XsguqfC0FxcY3ijDRqkJuXLjJMPO4COuHrA45SOJt8Ixn+2b8SlVpoyNKnYpYytfmgw25E2kSPCZxLWE56cRH55hP9NoHGQjcRMC
V4dTlhIqvlmiBhn8fHb/v9eczFd1U4GImNhbulGbunVuzd6EXbvZIgBdw19Vo4jwJIpE5faF5Vu12YS7w9aArWpvy7F9pwsrtd7b
rNl1u+78BmkvSfY=""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongFormMessageManagerModal
"""----------------------------------------------------------------------------
MODULE
    FLongFormMessageManagerModal : Module to Modal class of FLongFormTemplateManagerView
FUNCTION
    start_longform_templateManager_gui()
        Entry point to start GUI
CLASS
    LongformTemplateManagerStarter
        starts the actually GUI after binding with Modal class

VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the
       core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this
       module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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
r8v/H9M35NE=""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongFormMessageManagerView
"""----------------------------------------------------------------------------
MODULE
    FLongFormMessageManagerView : Module to display GUI interface for editing Message
FUNCTION

CLASS
    FLongFormMessageManagerView
        Repesent GUI layout for Manage Manager Dialog

VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core
       is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module
       at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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
v9tIA+OCWOGLSniDSR+lYyb6onHyfwDIFYlw""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongFormPDFGenerator
"""----------------------------------------------------------------------------
MODULE
    FLongFormPDFGenerator
FUNCTION

UNITTEST:

VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the
      core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this
       module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongFormPOC
"""----------------------------------------------------------------------------
MODULE
    FLongFormPOC
FUNCTION

UNITTEST:
    
VERSION: 1.0.1-0.5.4168

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongFormProcessBillingInformation
"""----------------------------------------------------------------------------
MODULE
    FLongFormProcessBillingInformation
DESCRIPTION:
    Process for FBillingInformation Object.

VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
eNqtVs1vE0cUn9kvbza2k9JCA/SwIFHJahug7aEqHypJ7MgScZAdaBkhjTa7E2fDetedHZfErHuBKxJ/gn3svX9LD3ureuJf6KHq
m1nbhJAKKrHyfL/35vfe/OaN/0InPgPKD1DSm1AFiKAAB1qECYZWj7SeTnRczBnEUK1JzE0UGIH5HAUms57ppBRoHVSz/rykIfTV
B/ycre2N+3frjgtf424SdxsJ793jic/SdC2MojDuNuM9mPNEmMTORr2z3m7e22lut75XOlNRF0TcxtsK7vbuAfPFquM8qLc7Usu9
0r7iOO16Z6fdXJd2OlfvNreaO3dUvzB6fdW9Ex+5vSQI90JfGUpdkbhin7mpz8O+uMpinx/1BQuk1CBiV/2IedwV7FC4fhIw90ko
9sNYqfgJZ26YunEi3HTQ7ycc9FbVTl+vujv7sFQYmQn5g1QkvXDo7UaskPtGyklLvX4Ss1i4Pe9IiT5J+GPXS1122Ac/AY7c1/Xe
Qh+AWuHC69084Q5Sxl0WA5oPeaivJOtaNZzbre2dZqNZb/snOanNOOlCxRBwEREtwEQPtEB/joCHin3EDCzgXSm//G5yDG/N2bBb
LLrhMSbAb3eQpmEsBfpTwUE/8ARTIfa1E/BkWZcQHagynCEKlwfAYOmZs9vnNFHkqmm5kbJoj5sg9xviJWj+vvJuvKv9o9ymNIxD
QemK3EghwMMv3kN3pufjY6grUJwZ6kewItAYLvkEY/QSD40MHWhjfYIC7bH2EvOqGhsTNMIZHpvQamrGmqBxSfbUyJ6giTZeAC39
PBrpmS41hTN2Mj3TMjzRR0ZmjBcn6JE2MkcW9MtgqZSZ/A9ROahmGOqlg2V5nPP9rRfmyM5s/ntmjz8C6QVRGZ/JFrLSRBstBKXx
xzNJwPWJ3H/kgCdnM0d6En8X2KdJBAvjc5k1/hRGeLQI8itqxskWu9pExeBHFDcMJM6/xEcPMBqVMRp+qeScrHwOSQmBDs6KC1n5
GQ4Wg/ILTeo8REFlVP61HDtFew1dgxngQXV4fca3tVP4BpeNM3nX3S6LGS8mh5dOqqzNOTldIWfePm4umUHsGS2ItRbGHj+qYVJO
B4qEVBz12fCGlJBap96AHlj3umyGB5KFzJpPR24Y3Ho6Gjb+p7LKNIxzsHHcTo6d4Y36oc/6xbXz/QHnUnw/hJwzvXjS+im7QHbm
rySjZe5ghz6Va63aRa7DXG5u1Nfub6prRsqdY36T0nREqm0VchmkltdjxNwIIU7E3mSiHgvoLa5LNLHoCNYnZisRLM1fPzxbhZOb
hY8Jb/Ck99PWXbI8hU0F6/Uj8J6c6TJBp7MsoJBFvLw6t3NfhFFKPpcyCac+Z6BC4WlgPPYi6sUBlQ/FNH+Q8kxtR/pib3U26c7D
e3VibIBVciEFK9Po0yQ+rplbReSIvh0GudFsNbZz4yAJ49z6xYsGLCVmvd3ebucL8/PI9VTwWoVbMoiL0yOQ5shSwVZpkcYydsuz
1cNepBwklV7apd1ZcEglTGk68GUI9gYRsYELNAgBlqGky3OHlXkv6L3hdYWzdBAJCnhgE+JI7aKfm4pVKpEWlS2P/+LsEGa4jhHn
M5nxvlWZ28EGXsYOtvFlbOEqLkPPgJ6Fy/9YhgGjsnZOlSpe0ZahHt5+n2T935u3apZM5DJolOYOpcX7Cv0ypT8PvGi6UqI0SHxK
+YL0aWXu3Zt+cvl37az0R54RYNdsQ83VbC7dJLrn98jSHPJ6Eu+FXXVD+JKsqjJYVhFlpXjaLrl9s0B5G8+eOKNiq2DZxr8yjwOk
""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongFormPyWin32Env
"""----------------------------------------------------------------------------
MODULE
    FLongFormPyWin32Env
FUNCTION
    set_pywin32_env
        This adds neccessay path to PATH env for pywin32 module.

UNITTEST:

VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text
       code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications
       done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
eNqtVEtPGzEQ9j4SwgrRF63US+ULhxwaWjiAKKqKIKiRICAIRY1aRcvaENPEXmyHsGly4wf01DMc+5f2VvXUv9BLO7MhlFKO2PKs
dzzv+ewf5MZwYb2BZe4DYaROmMPcM1J3mLdDiv73LRB4focj2Nhc3V0vBxTG2rqSh2tKt7eSPSHnZsvyJFjbra7UKpvVTMBw24iT
Lp41OBzSy1FrCkNDxgyVPIq4MWFC49A2qVV0a7n2loIwPVCaXirTtmKdFi8FwW61UquVd2qLQfCuvL0Djhbp9PZ0EGwDc7uSud6Z
Wa9sVGrL2X4xc/qyRJdlgmbEgYhCK5Q06Mw2OTWRFrGd4TLSSWw5u3Q2E7V4qKnlp3YUd6QYp11hm0JmmpHSnEImUllqOnGsNKiX
MunZ0jDJoa2RUNQxVrVFL9zHZFBuDuXQUjtWkktL21AKFO0q/YmGhvLTmEcYFfql4c0kRqEx0B4m9NdpaGnHcA3FhKDuEgPRdQDm
YY3DWkEQfgXSm0AItsiA7BF55hPrJF8cgjPjuwMn+3oD95AMPOYN/L575K+Sj4uDXD93nmP+haMX+jngO0f+eb6fY7kL92qfv3AP
3YGHOudjfe/CccjxApwW2FiOPCWscD7eBwvzxCNL5D2R7gvCXLgK4z31L+4QdvoW3J2EWmCDrtDabYqoSTU/7ggNjfgfl6ie9SvW
Kua6lQx7+xPLU01JfWorsU0ly6eWSwNdWxf7c/NpLjPRG88+H1piP/Uxht7Uq8+DD6NbYxJjeXtuthikhYwDSEkfbWRuq8quqY5k
Za2VTl1lUg/EUx8zSgvQdYOYSf0jJWSa5+idpWOQotAKGJBHO7TFvMYO6gIS7GN9Qsio1WG8gXbqk3wU9fC/AC6y3Tei8cn59eSW
V6AUJ+m9G5f/MeLjGZbEd50JmAWYPswApo+c37436eiHWLSim441GkxFjUbGyFxdIw+ApIWlYflfO2gaH0J/6g9WumVP""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongFormReportFormCommonModal
"""----------------------------------------------------------------------------
MODULE
    FLongFormReportFormCommonModal
FUNCTION

UNITTEST:

VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code
       within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done
       to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongFormReportFormCommonView
"""----------------------------------------------------------------------------
MODULE
    FLongFormReportFormCommonView
FUNCTION

UNITTEST:
VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text
       code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications
       done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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
dg==""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongFormReportFormEditModal
"""----------------------------------------------------------------------------
MODULE
    FLongFormReportFormEditModal
FUNCTION

UNITTEST:

VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code
       within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done
       to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
eNqtWFtvG8cV3iu5XJEULd9ix7E3jp1GbiM7lyat6qqWdTHUyrJNSgmyQLBY7yylZZZcanZoS8SyKGADeU2fgxZUn5q/0p+wb0Wf
8tKXvhQBivSc2QsvUhQ/RAJnZ2Znzsx855xvztl/CVN/CvzuwS/chIIIpkBEIvmiKfKnZErwlH25rZiKiO8UX22rpsrrql9oF82i
KDwQSIEUXwqk6KovZFMjUkOY1/6pSILw7k/4pz98tLqzuaYb8Le+GXR21wParrvdgDKsrRGPPQyI7evrO1sr2xuPtnR9Z2tje3ut
sb2o65+s1RvQt2jcrN/U9Tp01jf4qMbtzY2HG9vLvL7Ipb+3YCx3Do12QLym59jMCzqhwQKD7blG6FCvy267HYcedplLcFTPd287
vmtTg7kHzHAC4nI58PfcY3teh890AuoaXmh0AmaEvS7u2yULfOD7C8b2HrxKZGWDnF7IgrbXt5/6bjLuAxyHktrdoON2mNG2D/nQ
5wH9wrBDwz3oug7uCtc17GOHIDAt2xo/0GhRmxm90KWG24FN/ZR6+xYNbWtejLWtR9sb6xtrdahfPUGDK0G7HXS4DmHEtV2XWbAh
z/a9vmtRPqwJw6zgaQsO6Uzbspw+wwgKVwAbFtB+TflLoQnWTOSXmqkQhagvBVNNLNYsEI2U4FkkOpmBp0bKpALPEqmSWXjqfG6N
nIG5M7w+R85CvUzOkfPwvsL7LpCL0Ff9EtzJnAXbfy2+cpqB9m+n2rY79q4bGk97oddxw9Dwg13PMYKmMZrEleVIY8eU0h8eN1yA
ggkvhKF4JKBTRoIlRVjKkThUjgSoqZEwLPBakTum3L+10fEYwhrC4miZI2yNBNvMRAwqcd1psQoW69JYsywPJltWXPVt5obMeubS
EEwrPjeuIXQDVFOsbNltN77cBkX63DDHR3X4Oy/dzKSOic3seHZK6/NSrICgpnn2hLW+EeOSZTm+HYaW9Y3w3bXTVLDQPaQaHO0K
gqhz69HFAvzrYv/mqRMzABxxikZRygqK20MqFQdi34iElkCvMxGfQ+lIeCEOJCZHEjzFT4XOkiIw5fCpKAxkUei/zdRhgUiRfCSJ
AtSLME9+IR6JovCp8BlKlP8od/TkeUe4I0Qi1+ayse4yZy9VZYZzqlODKxXBNJo0aBvbyE+JjhdyJW/1761RGlDj+Z4HRNBEcV5n
d9wsRhLYmAQjmbZ4k85rFM8fyyGjsYKrUBXbpbUDx+0i91C011hdq9cf1WN1de3+zoN5hc5Cp1niiOISZnVMsShKdimlczAoKc5i
UYHiJgI9x/WmiBLorSqW+e+G2P/4VP39sLkd8zI50+hHUIAXAeKoDaiJeU3Ka3JeU5IaQf1I/Y+MZUIM2/dHuuFoAv3irlKUcZPG
g52NkVLm1fi8TcjIc5jb7qLTxXPY3aVe26aHVrjnui5Lh8Kt4rttuBh4NwuTbjyhzVCEE/ggj8VnsXvKE7+RuDZi7ZnnPkeHmsI9
PjOxGzzD++Pek/z3F05F/5gIRx4DvZC6Egd9EUGXWpza0HlWhc/fHsiRPJSPhIESKUS8JAzUSI3EZwKtQr9CJIR9v0pkAF7p/yPH
krNts9dx0BBBDSzxFffACxkaeoZsaHSpG+K9ml7ZQJEsV9vIYe51bWq382kcvnDRQK4Lkb5xai5zelYG76LxCdSmCfcedVmPdkDY
2E2d0PA2moTeHtnBzAOX1YOAbUCPqa2A8xLqduIidK8ifRYafOfzhcTNqpP7pQb3PTyi5aGEyxPvLXbYdTN2NwuMd06bxAXAMt9P
mGv2N7ld6HOixv/7H5xqFyfLmfBIPIOWGUcE7BuJrfTe2xUGEnCs9JVID/DZksFY/j2QPTAUDGRfCpHcUlrqKjKwyusFGHFjUIiU
YTEqtLRdAVk3UrB+SRiW4KlzY7rHZlrlViVS+bMaKZ40KLLZYY3Nts4Q4OqBFmnDOQwr2FmQfA4YG9ic9xWISop5SyO48vm0fQGM
uBSV6H+jEimBIeuRBKvqw4tg7K/Bba0PLx0JbGZ4OYJ9gOTiC7Gp8B1dZa8PrxAdZX0tkJm/yElvlJweMXkDZM9EEpxwe1COZoZX
oV2JKsNrUZkzVGVoRGVcFVtwrjdb14dvQU8ZewZV/r5KyhyRZGzlkkAq2P5K3L9OquBes99deRx0e6iv3NTRazbBnO4HBxO3o5S6
dQM1dwGKXWDJz6sDMdPgn6V9pZHYFVzxpabn+oQHDircAV4X+qSFO6bi2s7etAXqd9GAMSBeqkP7P7hef+n0qz/dN+efhbt+4Nh+
uLQwEmTKy1ur8dxGh7m7lAfOjd5TdAe4vp7sLG+as2OvtqHf1LL1+iX0vAXcPPfZvr6dgXO3f34pi+ybQa9DEK7l1ca3CNW3SZx1
g17nt+QKJhO0ivXZh41PA0oyMaFZhbve+SLstdcRptCs1N1dOA9Nm/pmEHSTeqyDWxG3afd8Zmo+9HNQC3a3C0E+fQfFV3Oodpjn
h+b5bKFERIMFFGJUs1pfe7CzuVy3IHzfXG2YM5uPHj1OG7FsO22ztkJdnLbceLL5pOfSQ3N2fe2AubRj+484x5kzcBEuM0a3ID+i
53B1haOqcGrBK91UED46g+p9F9uvYxKQRpo5PaWkxCMKehGLt/jFBeI5CcbFRsqA6qb91PXNcnZGriw4y/Lq8v3NNWtr+eEabB/W
mJ/lHJlw4kX7me35mHWN1kTjiCtogXmfWUZIraZPLD9kZpnu+jRvadk7s5bpyyIusxFjdZ/jo9AQ9FLMQuWEiSnwuVnLl02nxDp/
6eDpzAoATZLdwXGmHaIyYd5/yHJ7QdJFBXi4DCXEud8XJIyXzknAzd8rCtSgVYP3OKYKIzSx8D9NvSBhRIz8rUMv9H2vwLz+rVf3
rwkKV8bv9/vCOIWPQqmUzIGkgcBqcONLQyTOAqc5CKmBsHGklAVY9GdJisJdh76HBX7R4N5DMUKhH2LxKyzeRoZRxlRdmbjz6G9z
LEfh5mUoerjhcgojAgngSf33Xz3UyZaZgKMIPzWDo5VkDRLG95gvtETO3xDotCBnwNuriYFODdoFAEhpFWGc2NKGJQ4f1vQjHhAN
Z+BZiArDcsQDIqhVADK5mYRHtTQLvI1haRpFGjxcNFJrw9DU63R7zHgaHOQxSAwgVxNOOvsYprkNnJPzEv0YwfolDzQe1zfAsfhr
dLgitpfrn3EdmCWeovEXs+2JMJYl2kNnpr/GAuMIinHgfHFMZ+VuMpqrbNTiVKJzD02ELeGM352g0deh+FN2F2ECgfqspemfzo29
f/tHdTsZgE8oVk1/PEVf5xcet+lEqVcwim2BokGdoKKhzJQs0dsv82t7bqAwFZL6AqTyClr6/kKmNEwmwiSbyIP9RHtcbUgT40qb
F029kQ/cAhy5W6DvJQr7kNPwM5uGFM3RPHdSHjGvjsF/5liWQVe4KyVqSG2I1iYxx0T7q9yLZERcF2tAP6/iRdMLToAtp6TCwX6H
exGP+FK4MeeOJHqDSS94jgY+gdSRpAjXOZp5fmRAftRr8wwhR/BYJCNnkcxcFsnoSSQzHsWI3NaBnG7xrPh4NkV/DsVfsfILDBPW
fxSEY0ncSZHLFpAbKticW8+Gr/AjwYWY6PfSpCwedwf8dpuXx5V8bLlphb4BxdcIQ4ErYQ6c6BVUeUzsDyfdV/P7AUN6TmTYkkmS
XCf+cDXxh7EvFUgKufLWARDzTHs61eWcQtESTQ33h5cpvXYCU+Ae/oabUfghq2L/zo8ecWqtEw/IbfVK/u0u/XIgtiRMbiPBUtJv
B0+MB+jYXudZ8AV+1N1zO6No29kLPId/LHb27M6uywPK0a4MBwMyTHinPitwQ4jfCDqj6Ca5p2CslYoyS+08zLqBSJSw4BBN2QHS
299HEEF0sHgqRKcuO1/DL4w8/bRi3bKST9NQL1vWfs/20zdFyyKBY1n8Ex7/HkTfzK735PK/nPE8Jx5urFyZfLtxJf1O6Li+D1JG
Sq/lx0Krfg2PhQWERXK5pFW0klbTbmkzWq08Uy5qBT5qvkR/jzM+yu+/2RyAlaDT9HaTQFVJXo0w4aGumi02totRMKfdTRBYEjPq
VGoaj+LgX/4/JBvxfw==""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongFormReportFormEditView
"""----------------------------------------------------------------------------
MODULE
    FLongFormReportFormEditView
FUNCTION

UNITTEST:

VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code
       within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done
       to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongFormReportFormModal
"""----------------------------------------------------------------------------
MODULE
    FLongFormReportFormModal : Module contains business logic to display context menus
FUNCTION
    LongFormSubMenuItemCreate()
        Entry point to start menu
CLASS
    FLongFormSubMenuModal
        Class to implement business logic of sub menus
VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within
       the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this
       module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
eNqtVEFvEzkUtmeSNmTLCjjsokVifVhWRIhWCxdUrVZU2XYVqS0oKXuYi+WMndZbjz3YHkoqblTib8Cxv4T/MDe0J/4CJ56dSQml
vWHJb6z4e9/73vN7+R+dWy3Yj2G738BwlCGOeaJwgTOM0T+Ip7x1gnhL4NdplvD2CPWWPrxPELr/HVd358nfz7Y3uwTW1rbR+1vG
FkNRGuvDacdwpsg6gW+lBMmN9kxqR8aVk1o4R5TZlznxhnDpSsWmESJeelIIXbnu1rPd/t7gyW7kn9OPqvEO3A68KPpWMC/u9uJ9
WJva2ykpjdQ+sDrP7Iyr29/eGI2+1tkQRZFnDH3FQBf4yqJUAlz9ebVmQlw1bhT+uzkcgcB1cmd4p9sdbo72hoMoebS2PdgZ7G3E
83qk/2OVbOgpKQyXE5kzL42OkfyBIC63svRrQud2WnrBAwpKtpYrwSyJJckNF+RI+gOp52qDZ26sINIRbTzoKkPpBV+NiAerZO8A
rmZcc1BeOW8KeczGSsxwDwMuMBWl0SHjAl4iQI+MPSTMEfGyFHlQFcIT9k0SHNxmmUg319YEZZ5UTlgiNIj6nq33McxAD9e3L+i7
vikKo+PD5ufHJm2+7i4YgTIMo5NwnKU84ekJylpv0ATzFm+fdLL2G5iybCmMTn3zsv4+XmuqzDTbF+6CdvniEIuTJwtykkZSP0j6
Ecwr9Ba9wu9ghjmGwMnxoxn9vvCO5Eyp8AwHQpMReyEgmPdGN5dK5oeCn7Xybg9nN4ymDoDURg0T0HCa1C0n1CTrvJDiiJrxf6fI
LkPkT7cuS3G1nNZzprHXtIn0S9Ack0mP713q+63fhQUI210D49Fr9BZ/VYKfyVNTVgpmnXDm2UKGSd2Gphe2vlo2CBoQtg1Ep7i+
QiEmDDSlMUPbCeYHML8uSP/98rQXOXvLdYdSzQpBad2ldNbgcF6h9HnFVHOzTCk3OQS8Mo9VX21U5EKpuZJoVs40hT/zn4KmJTAd
3Eo77fjbbi+11wMgnaMW3M9Sqjt/ztT8hQNHgLVurKSfAaFYros=""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongFormReportFormView
"""----------------------------------------------------------------------------
MODULE
    FLongFormReportFormView
FUNCTION

UNITTEST:

VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within
       the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this
       module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
eNqtVU1v20YQ5ZLUh2m5ddKmLQKkWKBJAaWo3aSXwiiKGoqVCHAUQJaCgpcFxV1JtPnV5TK2BN1sIH9DPvov8Vb0lL/QSzu7JGVH
tnoKDa7Wu7Oz8968Gf6trTwVeH+HN/kJBqrZGkVU95GN4Nfw9UC3daS91KhJKxcarTCdoWPj3LRNqh9pzepf/yJN+/ETPtbrNy8G
hwcWhqd9GIXjdsSDHosjLuTsrcdOrfag2+p33nQta9Dt9PsHR/09y3p70DuCtT38pPfEsnqw2Osoq6Pdw87rTn9fzfeU42c7eD+c
4iCi3shzHeFFYYJFhMWE4cTlXix2WejyaSwYlVapz3ZdnzkcC3YmsBtRhk89MfFC5Q4eedKNOMNegsNI4CSNZciM7iiL5zu4P4Gt
3Fdp5KaJiAJv5gx9ltv9LO2kpyCOQhYKHDhTZXoa8RPsJJidxcyVUcnrsXMLBIVjORIvKWMrLnUEThPGMQshqE+Zsg9SR90myh7d
kbBWFARRKNPmrkrPKH6TVzAwDSSn2TpFtvFeG4EIqXFRt01WyaV3juwqrdLahWbX1H6dbsB+nVp0E9Y23mumZlsgyUb29RrdzL7H
ru8kCeYs5iyR9F4b4HdgkSfB1W8EqReByjf5CgahnWsLNEeXCEGtzDWiq0owZk9xS0Qcj+BdJ9wiIbjdbRpZBTTCeFYnxAs9QYi9
RbyEMApzyBhr6pmZMH9kV+R//hXKNghR8RNypf3zcM0dO/GUVyHMb2S8pqK5gWbrItopL78Tc0v62IZhrh0DZppjztE6uaBdx/eH
jnuCR2noSgniMRP5shTphIVKpKpswBw4Z5xiL5Q5gDhGkvnQCaAkwjgVeBidLUnqd4ECKyCJ846RoQiz2kEoK4U2dV6DoDLdHXIL
JvmwKZceRiG59kykZ+JOnHDM6LcSjEJpzp6vo2P9cRfdIAgV70cEHSPeoOioJOigJGE4xe39wR/45aCDR5yBT1XMihuJDQ9TIZbE
+Z57wuiShA9I1ZauVOD4dg0kIg9dIcXBKv7NV05IfbYfx/70sQyuqhRQRyaafbcO9I0zt1BWSunjpfQvYQPw6gtDyv/YnGuXxlIW
j3ps7CWQZABeamPZiLBda+VsdpsVLl1n93lhT5bW9r1gNQn25j6lrcKAfy7h3pND/SP0/AsYfrjWvYVmT9dhvn2ta6y0JrNM8C8q
wQttjub6pS7BlyQs9IIMY2Hm1QHzyqJKdVUpBlBiyq5zlxAKHSy5mT1ogTgEw112eqMvQauo2dteKDzH92aM+M40SoWCam/FUZz6
cIZQRzj2RkBG6Rmh/hh4dmJZjbwhedmCoWkowdiG3K4WXlbU08iVkMfxTEK3igZShz9oI4//X0L5weam7GmqdkhmEZJ/fmDeIOTP
1PGLnRohNHIJUd0qayQCvmBuwMQkonmG75cp5V9Ki62i+7nM9+HUdej1Zf5lxh7IsD+DATSvN6o6sir1WqOq9kB0si3atfbgrAUf
ay7TbDcOFRkvgOBorOxuOL8mp/5rDuQ3VNaVuQ2kGP8B+nlsrw==""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongFormReportFormViewerModal
"""----------------------------------------------------------------------------
MODULE
    FLongFormReportFormViewerModal
FUNCTION

UNITTEST:

VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is
       not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at
       user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
eNqtUk1PGzEQtb1Lkq6qfoCKemnrHlCVQ4NKb6iqivioIkGQksBhL5axDSzdXW+9TiFRbuWHtMf+pb1V/Rc9dewQECmCC5Y89s6+
mXlvPH/QzApgf4JdLoKRKEafkcSSnCNJvpMYy6CHmuHvGkHo7T2uaGd3Y297M6KwtrZ1frSlTdZVhTbW3fYTdarMjpY8jbb2Ouv9
9m4nivY67X5/s9dfjaL9zW4PfKt0qbsURV1wdtse1Vvebu+0+2v+vurzv2vRtXxIMy2Tw0Rwm+i8pFZTe6xoKUxS2GWVCzMsrJIO
NUjVskgVN9SqM0uFloqeJvY4yX2I0EbRpPSpYeXa0nJQOOZKtrx3pUX7x0l5kQuwHiQGpdVZMuIHqZrg3jucS5gVOle5pRkfeuip
Nl8oL6k6K5RwrFx5yv8TISFsouSqGrdTZoNSGapyIHWfLydmB4hMB4iCUQhGBsVE4jiQRAbnKA5lKOfgnJM1GKV69fL29x4teP4i
5WUptZj0WQQzE+uKrruiT8CM8RgxNCZgscRQhIxeTJtA16FR1gyE1ebS12mS6rHx1Q+hOst5pq45JLe8GVRhqdJD4+pVoXP9QqYO
H39f3y6hVQyrBmNJnljGnjuWoeMd1vDozR2R0yhBZjocTAUvesFmfoxP0A8QfkJ+YowuZD+jpbL0Sgh1rEFuED/N2Iy+uN5TdgMu
xrFrEjMHR9z4BmyYPjjxSiem4RqwwKWcTfHqUhsJ8WjlDm03JOg0a65Trv+MVRFjkyGG+0PGvg54evGnzhjMAmPmgeMTXTK7ztG4
Ri04TjUwDRyGjbr3wXubR1PATZFV48Ok8kfswh0snP8HdZhSzw==""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongFormReportFormViewerView
"""----------------------------------------------------------------------------
MODULE
    FLongFormReportFormViewer
FUNCTION

UNITTEST:

VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is
       not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at
       user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongFormRibbonMenus
"""----------------------------------------------------------------------------
MODULE
    FLongFormRibbonMenus
FUNCTION

UNITTEST:

VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code
       within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done
       to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongFormSampleCustomTransportType
"""----------------------------------------------------------------------------
MODULE
    FLongFormSampleCustomTransportType


DESCRIPTION:
    OPEN EXTENSION MODULE
    Business process state callbacks.

FUNCTIONS:
    For sample state xxx there are always the four standard extension points:
        condition_entry_state_xxx():
            To control if all the pre-requisites to performing the action and
            entering the state are defined.
        on_entry_state_xxx():
            Is the place to perform the action before getting into XXX state.
        condition_exit_state_xxx():
            To control that all pre-requisites for performing the next action
            are fulfilled.
        on_exit_state_xxx():
            Is the place to reset values or perform action just before leaving the XXX
            state.


VERSION: 1.0.9-0.5.757
----------------------------------------------------------------------------"""
import FLongFormUtils
from FIntegrationUtils import FManageOperation
from FLongFormConfig import NOTIFIER


# The context parameter is an instance of FBusinessProcessCallbackContext
# Conditions return True or False
# Name convention is
# 'condition_' + 'entry_'/'exit_' + state name in lowercase and underscore

def condition_entry_state_ready(context):
    return FManageOperation.HasUserRights(FLongFormUtils.\
                                          get_operation_name_from_bpr_context(context))

def condition_entry_state_delivered(context):
    return FManageOperation.HasUserRights(FLongFormUtils.\
                                          get_operation_name_from_bpr_context(context))

def condition_entry_state_undelivered(context):
    return FManageOperation.HasUserRights(FLongFormUtils.\
                                          get_operation_name_from_bpr_context(context))

def condition_exit_state_delivered(context):
    return FManageOperation.HasUserRights(FLongFormUtils.\
                                          get_operation_name_from_bpr_context(context))

def condition_exit_state_ready(context):
    return FManageOperation.HasUserRights(FLongFormUtils.\
                                          get_operation_name_from_bpr_context(context))

def condition_exit_state_undelivered(context):
    return FManageOperation.HasUserRights(FLongFormUtils.\
                                          get_operation_name_from_bpr_context(context))

# Entry/Exit callbacks do not return anything
#
# Name convention is
# 'on_' + 'entry_'/'exit_' + state name in lowercase and underscore
#
def on_entry_state_ready(context):
    NOTIFIER.DEBUG("FLongFormSampleCustomTransportType : on_entry_state_ready")
    # ------------------------------------------------------------------------------

def on_exit_state_delivered(context):
    pass

def on_exit_state_ready(context):
    pass

def on_exit_state_undelivered(context):
    pass


...

  FLongFormSheetConfigModal
"""----------------------------------------------------------------------------
MODULE
    FLongFormSheetConfigModal
FUNCTION

UNITTEST:

VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code
       within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done
       to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
eNqtVUtv20YQ5ksSTT/qpGkbB22xaWGgKlq5TW5GUTSNHxBgK6klFwUvC5q7tuhQXHW5iixBPiU/owf5mL/EW9FT/kJRoJ1ZirSj
RD1lAc4uZ+e1M9/O/mXMDRu+n+BLG0CY4RvMZFZs+qaeLd/Ss+3b+wazmfPSYM4Ly3eY1TbqlT9NyzC+fY/DO3yyc3yw6xEYewci
OdsTstfucq4ei+Q0OjsULIi9vePW407zScvzjlvNTme33dn2vF93j9rA2yabR5uedwTMo6aWam8dNA+bnUd6va1Nf98gj5IR6QkW
nUZhoCKRpEQJorqcpKGM+mqLJ6Ec9RVnKDWI+VYY80ASxS8UCQXj2g6MYaS6UaI1QyE5iVKSCEXSQb8vJKg3tOCDBul0YSu3VQiF
g1SJXjQOTmKeyz1EObTU64uEJ4r0gpEWHQr5jAQp4Rd9HmJU6JcEbx2CgVoRmj7QtdNAkUHKJeEJBPU+i/YacdQK55FlFcj6Dgg3
AFEGosm3mcXslwZgyGEVmCusymowV5nLlmCuMQ+wtZxtLATA+JPiiCSMgzRlIkw1JzRv+DdnMTzGGNYR3ebEoDkFdIMPa3y/NIQD
XKRKDkIlZMlv1a1slUquBjKhz4N4wLNqlNKAsVdm5qQ8Pn1lSBes//3pwngb/VHmUholkaL0HobjYIBO1Rx/sVipUAitG4eqoV5x
qN+AKGNinptT68p4YV5ayj53JtaGcWlP7Gnlyrh0YLc6rYGU88K8Mk0D+C7wK2rp3JsuA7+C/MsqyK1MVydVlJklZ79MwrDLAeK8
148DxQFASo5I2A2SMwAigL9T7DAp+gDBYUJOxMWNFK5lNiQ2W+/RFE9JC1NZbZ+rnUAFmR2EPf+jvY4MWJSc6VwUVv07+e+oz3ei
FFijVtDj2UppDDb8Wjs35Ht5HhEW2VqZ3GMVxam/qvea4D09DPr+xhloR/hHE7BIT6WY2dSRFjdYi/juU9EfYDj1msQiZO7ziA+p
ODn3vTwOtOEv5Wtk386XLI853/ZuhHxr5mEWQgwZQhzlZAldbIhkLmF0lvX7WP41BERlzfRM11zX3/jhYjgttPUGvvA5qBb4egkk
Mi6tiSkV4MOYmldG+rWypjb8OYgvfByubECM3TY00lDiYE7CuSGhbcBcw5lVCh2YXc2p/lEBfxZc0SVWA+qhXt0d75Ro2hskIfY6
EgZxjI0QsZlwWEG/g2upW2/Me9g99YHTUjUzxl8+hTaeQpfnMfRR8vSoebibi5X4brTGn70pVUKBYKkagLHSRb2SOXnhdSdCkGaO
Lq8XJdBtNdr85Xz9y4DL0WvsS/VluYJlXsUy3yqLtn/czJG60u6K4a6UQv4sLvylHj0dXFAWn/kVqGscy1uo/AEQf7W4Br+jcYm9
QVbQg61hKm+j0J3rnMykpRjOo+02IATyR09UQsM4Cp/B44Uo+Er3Ksd0AGhrpvWvY91YWS4Az4LP/adahX72zf8CcM78W+3aLJCH
EJwY5wbU3hxvXtccbmxK2nMFJgwuPqmb+eGr5amuj3YXb/q7crCHzjT+rfGDxaEvUm/VXWzsunvQzKM0f2phvUKhIEE826lRCm8U
pdLDkD5EsoHk3puxlgFLvIYfY2yo4JqO7dbcVfeu5tcr8nOUwesv8V2TdwuVd9nK3B/yqH7E7KbId9axaq79H87OuI0=""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongFormSheetConfigView
"""----------------------------------------------------------------------------
MODULE
    FLongFormSheetConfigView
FUNCTION

UNITTEST:
VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code
       within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done
       to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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
XQ==""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongFormSimpleEmailRouting
"""----------------------------------------------------------------------------
MODULE
    FLongFormSimpleEmailRouting

DESCRIPTION:
    OPEN EXTENSION MODULE
    Business process state callbacks.

FUNCTIONS:
    For sample state xxx there are always the four standard extension points:
        condition_entry_state_xxx():
            To control if all the pre-requisites to performing the action and
            entering the state are defined.
        on_entry_state_xxx():
            Is the place to perform the action before getting into XXX state.
        condition_exit_state_xxx():
            To control that all pre-requisites for performing the next action
            are fulfilled.
        on_exit_state_xxx():
            Is the place to reset values or perform action just before leaving the XXX
            state.

VERSION: 1.0.9-0.5.757
----------------------------------------------------------------------------"""
from FLongFormSimpleEmailRoutingCallbacks import LongFormSimpleEmailRoutingCallbacks

LongFormSimpleEmailRoutingCallbacks_Obj = LongFormSimpleEmailRoutingCallbacks()


# The context parameter is an instance of FBusinessProcessCallbackContext
# Conditions return True or False
# Name convention is
# 'condition_' + 'entry_'/'exit_' + state name in lowercase and underscore

def condition_entry_state_sent(context):
    return LongFormSimpleEmailRoutingCallbacks_Obj.condition_entry_state_sent(context)


def condition_entry_state_ready(context):
    return LongFormSimpleEmailRoutingCallbacks_Obj.condition_entry_state_ready(context)


def condition_entry_state_failed(context):
    return LongFormSimpleEmailRoutingCallbacks_Obj.condition_entry_state_failed(context)


# ------------------------------------------------------------------------------


def condition_exit_state_sent(context):
    return LongFormSimpleEmailRoutingCallbacks_Obj.condition_exit_state_sent(context)


def condition_exit_state_ready(context):
    return LongFormSimpleEmailRoutingCallbacks_Obj.condition_exit_state_ready(context)


def condition_exit_state_failed(context):
    return LongFormSimpleEmailRoutingCallbacks_Obj.condition_exit_state_failed(context)


# Entry/Exit callbacks do not return anything
#
# Name convention is
# 'on_' + 'entry_'/'exit_' + state name in lowercase and underscore
#


def on_entry_state_sent(context):
    return LongFormSimpleEmailRoutingCallbacks_Obj.on_entry_state_sent(context)


def on_entry_state_ready(context):
    return LongFormSimpleEmailRoutingCallbacks_Obj.on_entry_state_ready(context)


def on_entry_state_failed(context):
    return LongFormSimpleEmailRoutingCallbacks_Obj.on_entry_state_failed(context)


# ------------------------------------------------------------------------------

def on_exit_state_sent(context):
    return LongFormSimpleEmailRoutingCallbacks_Obj.on_exit_state_sent(context)


def on_exit_state_ready(context):
    return LongFormSimpleEmailRoutingCallbacks_Obj.on_exit_state_ready(context)


def on_exit_state_failed(context):
    return LongFormSimpleEmailRoutingCallbacks_Obj.on_exit_state_failed(context)


...

  FLongFormSimpleEmailRoutingCallbacks
"""----------------------------------------------------------------------------
MODULE:
    FLongFormSimpleEmailRoutingCallbacks

DESCRIPTION:
    OPEN EXTENSION MODULE

    FLongFormSimpleEmailRouting Business process conditional_entry/exit and on_entry/exit callbacks.
    User can override the logic written in the base class LongFormSimpleEmailRoutingCallbacksBase

    If user wishes to add some extra processing for conditional entry state
     e.g. 'ready' he can implement method as
    def condition_entry_state_ready(self):
        # Custom logic before core logic
        super(LongFormSimpleEmailRoutingCallbacks, self).condition_entry_state_ready()
        # Custom logic after core logic

FUNCTIONS:
    For sample state xxx there are always the four standard extension points:
        condition_entry_state_xxx():
            To control if all the pre-requisites to performing the action and
            entering the state are defined.
        on_entry_state_xxx():
            Is the place to perform the action before getting into XXX state.
        condition_exit_state_xxx():
            To control that all pre-requisites for performing the next action
            are fulfilled.
        on_exit_state_xxx():
            Is the place to reset values or perform action just before leaving the XXX
            state.

VERSION: 1.0.9-0.5.757
----------------------------------------------------------------------------"""
# The context parameter is an instance of FBusinessProcessCallbackContext
import FLongFormSimpleEmailRoutingCallbacksBase


class LongFormSimpleEmailRoutingCallbacks(FLongFormSimpleEmailRoutingCallbacksBase.
                                                        LongFormSimpleEmailRoutingCallbacksBase):
    def __init__(self):
        super(LongFormSimpleEmailRoutingCallbacks, self).__init__()


...

  FLongFormSimpleEmailRoutingCallbacksBase
"""----------------------------------------------------------------------------
MODULE
    FLongFormSimpleEmailRoutingCallbacksBase

DESCRIPTION:
    OPEN EXTENSION MODULE
    This is a READ ONLY module. User can override the default logic in derived
    class LongFormSimpleEmailRoutingCallbacks
    Business process conditional_entry/exit and on_entry/exit callbacks.


FUNCTION:
For sample state xxx there are always the four standard extension points:
        condition_entry_state_xxx():
            To control if all the pre-requisites to performing the action and
            entering the state are defined.
        on_entry_state_xxx():
            Is the place to perform the action before getting into XXX state.
        condition_exit_state_xxx():
            To control that all pre-requisites for performing the next action
            are fulfilled.
        on_exit_state_xxx():
            Is the place to reset values or perform action just before leaving the XXX
            state.

VERSION: 1.0.9-0.5.757

ENUM Values:
Enum values for child bpr( worksflows for routing type).
Child BPR notify(update) its status to parent bpr with one of below statuses.

if child bpr failed then update parent with FAILED status. i.e {<TRANSPORT_TYPE: FAILED>}

see "on_entry_state_undelivered" callback for usage.
class RouteReportBPRStatus(object):
    NOT_STARTED = 'NotStarted'
    FAILED = 'Failed'
    SUCCESS = "Success"
    FAILED_TO_START = 'FailedToStart'
    IN_PROGRESS = 'InProgress'

----------------------------------------------------------------------------"""
from FLongFormConfig import NOTIFIER, CONFIG_PARAM_OBJ
from FIntegrationUtils import FManageOperation, ConfirmationEnum, FIntegrationUtils
import FLongFormUtils


def exception_handler(func):
    def wrapper_func(*args, **kwargs):
        NOTIFIER.DEBUG(f"Process {func.__name__}")
        try:
            func(*args, **kwargs)
        except Exception as err:
            NOTIFIER.ERROR(f'Exception caught in {str(err)}')
            NOTIFIER.DEBUG(str(err), exc_info=1)
        finally:
            NOTIFIER.DEBUG(f"Done processing {func.__name__}")

    return wrapper_func


class LongFormSimpleEmailRoutingCallbacksBase(object):
    """ Process Email transport type states
    """
    def __init__(self):
        self.max_retries = int(getattr(CONFIG_PARAM_OBJ, 'BPRCommitRetry', 3))
        self.parent_state_chart_name = getattr(CONFIG_PARAM_OBJ, 'StateChart', '')

    # Conditions return True or False
    # Name convention is
    # 'condition_' + 'entry_'/'exit_' + state name in lowercase and underscore
    def condition_entry_state_ready(self, context):
        return FManageOperation.HasUserRights(FLongFormUtils.
                                              get_operation_name_from_bpr_context(context))

    def condition_entry_state_sent(self, context):
        return FManageOperation.HasUserRights(FLongFormUtils.
                                              get_operation_name_from_bpr_context(context))

    def condition_entry_state_failed(self, context):
        return FManageOperation.HasUserRights(FLongFormUtils.
                                              get_operation_name_from_bpr_context(context))

    def condition_exit_state_sent(self, context):
        return FManageOperation.HasUserRights(FLongFormUtils.
                                              get_operation_name_from_bpr_context(context))

    def condition_exit_state_ready(self, context):
        return FManageOperation.HasUserRights(FLongFormUtils.
                                              get_operation_name_from_bpr_context(context))

    def condition_exit_state_failed(self, context):
        return FManageOperation.HasUserRights(FLongFormUtils.
                                              get_operation_name_from_bpr_context(context))

    # Entry/Exit callbacks do not return anything
    #
    # Name convention is
    # 'on_' + 'entry_'/'exit_' + state name in lowercase and underscore
    #

    def on_entry_state_sent(self, context):
        NOTIFIER.DEBUG("LongFormSimpleEmailRoutingCallbacksBase: on_entry_state_sent")
        ext_obj = context.CurrentStep().BusinessProcess().Subject()
        if ext_obj:
            parent_ext_obj = ext_obj.Parent()
            parent_bpr = FLongFormUtils.get_bpr_from_subject_statechart(parent_ext_obj,
                                                                       self.parent_state_chart_name
                                                                        )
            if parent_bpr:
                notes = ['Successfully sent LongForm Report for transport type: EMAIL.']
                params = {'EMAIL': FLongFormUtils.RouteReportBPRStatus.SUCCESS}
                FLongFormUtils.update_parent_bpr_diary(parent_bpr,
                                                       parameters=params,
                                                       notes=notes,
                                                       state=FLongFormUtils.BusinessProcessStates.BEING_DELIVERED)

    def on_entry_state_ready(self, context):
        pass

    def on_entry_state_failed(self, context):
        NOTIFIER.DEBUG("LongFormSimpleEmailRoutingCallbacksBase:on_entry_state_failed")
        ext_obj = context.CurrentStep().BusinessProcess().Subject()
        if ext_obj:
            parent_ext_obj = ext_obj.Parent()
            parent_bpr = FLongFormUtils.get_bpr_from_subject_statechart(parent_ext_obj,
                                                                       self.parent_state_chart_name
                                                                        )
            if parent_bpr:
                notes = ['Failed to send LongForm Report for transport type : EMAIL.']
                params = {'EMAIL': FLongFormUtils.RouteReportBPRStatus.FAILED}
                FLongFormUtils.update_parent_bpr_diary(parent_bpr,
                                                       parameters=params,
                                                       notes=notes,
                                                       state=FLongFormUtils.BusinessProcessStates.BEING_DELIVERED
                                                       )


    # ------------------------------------------------------------------------------

    @exception_handler
    def on_exit_state_sent(self, context):
        NOTIFIER.DEBUG("email: on_exit_state_sent")

    @exception_handler
    def on_exit_state_ready(self, context):
        NOTIFIER.DEBUG("email: on_exit_state_ready")

    @exception_handler
    def on_exit_state_failed(self, context):
        NOTIFIER.DEBUG("email : on_exit_state_failed")
  

...

  FLongFormSimpleFaxRouting
"""----------------------------------------------------------------------------
MODULE
    FLongFormSimpleFaxRouting

DESCRIPTION:
    OPEN EXTENSION MODULE
    Business process state callbacks.

FUNCTIONS:
    For sample state xxx there are always the four standard extension points:
        condition_entry_state_xxx():
            To control if all the pre-requisites to performing the action and
            entering the state are defined.
        on_entry_state_xxx():
            Is the place to perform the action before getting into XXX state.
        condition_exit_state_xxx():
            To control that all pre-requisites for performing the next action
            are fulfilled.
        on_exit_state_xxx():
            Is the place to reset values or perform action just before leaving the XXX
            state.

VERSION: 1.0.9-0.5.757
----------------------------------------------------------------------------"""
from FLongFormSimpleFaxRoutingCallbacks import LongFormSimpleFaxRoutingCallbacks

LongFormSimpleFaxRoutingCallbacks_Obj = LongFormSimpleFaxRoutingCallbacks()


# The context parameter is an instance of FBusinessProcessCallbackContext
# Conditions return True or False
# Name convention is
# 'condition_' + 'entry_'/'exit_' + state name in lowercase and underscore

def condition_entry_state_sent(context):
    return LongFormSimpleFaxRoutingCallbacks_Obj.condition_entry_state_sent(context)


def condition_entry_state_ready(context):
    return LongFormSimpleFaxRoutingCallbacks_Obj.condition_entry_state_ready(context)


def condition_entry_state_failed(context):
    return LongFormSimpleFaxRoutingCallbacks_Obj.condition_entry_state_failed(context)


# ------------------------------------------------------------------------------


def condition_exit_state_sent(context):
    return LongFormSimpleFaxRoutingCallbacks_Obj.condition_exit_state_sent(context)


def condition_exit_state_ready(context):
    return LongFormSimpleFaxRoutingCallbacks_Obj.condition_exit_state_ready(context)


def condition_exit_state_failed(context):
    return LongFormSimpleFaxRoutingCallbacks_Obj.condition_exit_state_failed(context)


# Entry/Exit callbacks do not return anything
#
# Name convention is
# 'on_' + 'entry_'/'exit_' + state name in lowercase and underscore
#


def on_entry_state_sent(context):
    return LongFormSimpleFaxRoutingCallbacks_Obj.on_entry_state_sent(context)


def on_entry_state_ready(context):
    return LongFormSimpleFaxRoutingCallbacks_Obj.on_entry_state_ready(context)


def on_entry_state_failed(context):
    return LongFormSimpleFaxRoutingCallbacks_Obj.on_entry_state_failed(context)


# ------------------------------------------------------------------------------

def on_exit_state_sent(context):
    return LongFormSimpleFaxRoutingCallbacks_Obj.on_exit_state_sent(context)


def on_exit_state_ready(context):
    return LongFormSimpleFaxRoutingCallbacks_Obj.on_exit_state_ready(context)


def on_exit_state_failed(context):
    return LongFormSimpleFaxRoutingCallbacks_Obj.on_exit_state_failed(context)


...

  FLongFormSimpleFaxRoutingCallbacks
"""----------------------------------------------------------------------------
MODULE:
    FLongFormSimpleFaxRoutingCallbacks

DESCRIPTION:
    OPEN EXTENSION MODULE

    FLongFormSimpleFaxRouting Business process conditional_entry/exit and on_entry/exit callbacks.
    User can override the logic written in the base class LongFormSimpleFaxRoutingCallbacksBase

    If user wishes to add some extra processing for conditional entry state
     e.g. 'ready' he can implement method as
    def condition_entry_state_ready(self):
        # Custom logic before core logic
        super(LongFormSimpleFaxRoutingCallbacks, self).condition_entry_state_ready()
        # Custom logic after core logic

FUNCTIONS:
    For sample state xxx there are always the four standard extension points:
        condition_entry_state_xxx():
            To control if all the pre-requisites to performing the action and
            entering the state are defined.
        on_entry_state_xxx():
            Is the place to perform the action before getting into XXX state.
        condition_exit_state_xxx():
            To control that all pre-requisites for performing the next action
            are fulfilled.
        on_exit_state_xxx():
            Is the place to reset values or perform action just before leaving the XXX
            state.

VERSION: 1.0.9-0.5.757
----------------------------------------------------------------------------"""
# The context parameter is an instance of FBusinessProcessCallbackContext
import FLongFormSimpleFaxRoutingCallbacksBase


class LongFormSimpleFaxRoutingCallbacks(FLongFormSimpleFaxRoutingCallbacksBase.LongFormSimpleFaxRoutingCallbacksBase):
    def __init__(self):
        super(LongFormSimpleFaxRoutingCallbacks, self).__init__()


...

  FLongFormSimpleFaxRoutingCallbacksBase
"""----------------------------------------------------------------------------
MODULE
    FLongFormSimpleFaxRoutingCallbacksBase

DESCRIPTION:
    OPEN EXTENSION MODULE
    This is a READ ONLY module. User can override the default logic in derived
    class LongFormSimpleFaxRoutingCallbacks
    Business process conditional_entry/exit and on_entry/exit callbacks.


FUNCTION:
For sample state xxx there are always the four standard extension points:
        condition_entry_state_xxx():
            To control if all the pre-requisites to performing the action and
            entering the state are defined.
        on_entry_state_xxx():
            Is the place to perform the action before getting into XXX state.
        condition_exit_state_xxx():
            To control that all pre-requisites for performing the next action
            are fulfilled.
        on_exit_state_xxx():
            Is the place to reset values or perform action just before leaving the XXX
            state.
VERSION: 1.0.9-0.5.757

ENUM Values:
Enum values for child bpr( worksflows for routing type).
Child BPR notify(update) its status to parent bpr with one of below statuses.

if child bpr failed then update parent with FAILED status. i.e {<TRANSPORT_TYPE: FAILED>}

see "on_entry_state_undelivered" callback for usage.
class RouteReportBPRStatus(object):
    NOT_STARTED = 'NotStarted'
    FAILED = 'Failed'
    SUCCESS = "Success"
    FAILED_TO_START = 'FailedToStart'
    IN_PROGRESS = 'InProgress'

----------------------------------------------------------------------------"""
from FLongFormConfig import NOTIFIER, CONFIG_PARAM_OBJ
from FIntegrationUtils import FManageOperation, ConfirmationEnum, FIntegrationUtils
import FLongFormUtils


def exception_handler(func):
    def wrapper_func(*args, **kwargs):
        NOTIFIER.DEBUG("Process {}".format(func.__name__))
        try:
            func(*args, **kwargs)
        except Exception as err:
            NOTIFIER.ERROR('Exception caught in {}'.format(str(err)))
            NOTIFIER.DEBUG(str(err), exc_info=1)
        finally:
            NOTIFIER.DEBUG("Done processing {}".format(func.__name__))

    return wrapper_func


class LongFormSimpleFaxRoutingCallbacksBase(object):
    def __init__(self):
        self.max_retries = int(getattr(CONFIG_PARAM_OBJ, 'BPRCommitRetry', 3))
        self.parent_state_chart_name = getattr(CONFIG_PARAM_OBJ, 'StateChart', '')

    # Conditions return True or False
    # Name convention is
    # 'condition_' + 'entry_'/'exit_' + state name in lowercase and underscore
    def condition_entry_state_ready(self, context):
        return FManageOperation.HasUserRights(FLongFormUtils.get_operation_name_from_bpr_context(context))

    def condition_entry_state_sent(self, context):
        return FManageOperation.HasUserRights(FLongFormUtils.get_operation_name_from_bpr_context(context))

    def condition_entry_state_failed(self, context):
        return FManageOperation.HasUserRights(FLongFormUtils.get_operation_name_from_bpr_context(context))

    def condition_exit_state_sent(self, context):
        return FManageOperation.HasUserRights(FLongFormUtils.get_operation_name_from_bpr_context(context))

    def condition_exit_state_ready(self, context):
        return FManageOperation.HasUserRights(FLongFormUtils.get_operation_name_from_bpr_context(context))

    def condition_exit_state_failed(self, context):
        return FManageOperation.HasUserRights(FLongFormUtils.get_operation_name_from_bpr_context(context))

    # Entry/Exit callbacks do not return anything
    #
    # Name convention is
    # 'on_' + 'entry_'/'exit_' + state name in lowercase and underscore
    #

    def on_entry_state_sent(self, context):
        NOTIFIER.DEBUG("LongFormSimpleFaxRoutingCallbacksBase: on_entry_state_sent")
        ext_obj = context.CurrentStep().BusinessProcess().Subject()
        if ext_obj:
            parent_ext_obj = ext_obj.Parent()
            parent_bpr = FLongFormUtils.get_bpr_from_subject_statechart(parent_ext_obj,
                                                                        self.parent_state_chart_name
                                                                        )
            if parent_bpr:
                notes = ['Successfully sent LongForm Report for transport type: FAX.']
                params = {'FAX': FLongFormUtils.RouteReportBPRStatus.SUCCESS}
                FLongFormUtils.update_parent_bpr_diary(parent_bpr,
                                                       parameters=params,
                                                       notes=notes,
                                                       state=FLongFormUtils.BusinessProcessStates.BEING_DELIVERED
                                                       )

    def on_entry_state_ready(self, context):
        pass

    def on_entry_state_failed(self, context):
        NOTIFIER.DEBUG("LongFormSimpleFaxRoutingCallbacksBase: on_entry_state_failed")
        ext_obj = context.CurrentStep().BusinessProcess().Subject()
        if ext_obj:
            parent_ext_obj = ext_obj.Parent()
            parent_bpr = FLongFormUtils.get_bpr_from_subject_statechart(parent_ext_obj,
                                                                        self.parent_state_chart_name
                                                                        )
            if parent_bpr:
                notes = ['Failed to send LongForm Report for transport type : FAX.']
                params = {'FAX': FLongFormUtils.RouteReportBPRStatus.FAILED}
                FLongFormUtils.update_parent_bpr_diary(parent_bpr,
                                                       parameters=params,
                                                       notes=notes,
                                                       state=FLongFormUtils.BusinessProcessStates.BEING_DELIVERED
                                                       )


    # ------------------------------------------------------------------------------

    @exception_handler
    def on_exit_state_sent(self, context):
        pass

    @exception_handler
    def on_exit_state_ready(self, context):
        pass

    @exception_handler
    def on_exit_state_failed(self, context):
        pass

...

  FLongFormSimpleFileRouting
"""----------------------------------------------------------------------------
MODULE:
    FLongFormSimpleFileRouting

DESCRIPTION:
    OPEN EXTENSION MODULE
    Business process state callbacks.

FUNCTIONS:
    For sample state xxx there are always the four standard extension points:
        condition_entry_state_xxx():
            To control if all the pre-requisites to performing the action and
            entering the state are defined.
        on_entry_state_xxx():
            Is the place to perform the action before getting into XXX state.
        condition_exit_state_xxx():
            To control that all pre-requisites for performing the next action
            are fulfilled.
        on_exit_state_xxx():
            Is the place to reset values or perform action just before leaving the XXX
            state.


VERSION: 1.0.9-0.5.757
----------------------------------------------------------------------------"""
from FLongFormSimpleFileRoutingCallbacks import LongFormSimpleFileRoutingCallbacks

LongFormSimpleFileRoutingCallbacks_Obj = LongFormSimpleFileRoutingCallbacks()


# The context parameter is an instance of FBusinessProcessCallbackContext
# Conditions return True or False
# Name convention is
# 'condition_' + 'entry_'/'exit_' + state name in lowercase and underscore

def condition_entry_state_delivered(context):
    return LongFormSimpleFileRoutingCallbacks_Obj.condition_entry_state_delivered(context)


def condition_entry_state_ready(context):
    return LongFormSimpleFileRoutingCallbacks_Obj.condition_entry_state_ready(context)


def condition_entry_state_undelivered(context):
    return LongFormSimpleFileRoutingCallbacks_Obj.condition_entry_state_undelivered(context)


# ------------------------------------------------------------------------------


def condition_exit_state_delivered(context):
    return LongFormSimpleFileRoutingCallbacks_Obj.condition_exit_state_delivered(context)


def condition_exit_state_ready(context):
    return LongFormSimpleFileRoutingCallbacks_Obj.condition_exit_state_ready(context)


def condition_exit_state_undelivered(context):
    return LongFormSimpleFileRoutingCallbacks_Obj.condition_exit_state_undelivered(context)


# Entry/Exit callbacks do not return anything
#
# Name convention is
# 'on_' + 'entry_'/'exit_' + state name in lowercase and underscore
#


def on_entry_state_delivered(context):
    return LongFormSimpleFileRoutingCallbacks_Obj.on_entry_state_delivered(context)


def on_entry_state_ready(context):
    return LongFormSimpleFileRoutingCallbacks_Obj.on_entry_state_ready(context)


def on_entry_state_undelivered(context):
    return LongFormSimpleFileRoutingCallbacks_Obj.on_entry_state_undelivered(context)


# ------------------------------------------------------------------------------

def on_exit_state_delivered(context):
    return LongFormSimpleFileRoutingCallbacks_Obj.on_exit_state_delivered(context)


def on_exit_state_ready(context):
    return LongFormSimpleFileRoutingCallbacks_Obj.on_exit_state_ready(context)


def on_exit_state_undelivered(context):
    return LongFormSimpleFileRoutingCallbacks_Obj.on_exit_state_undelivered(context)


...

  FLongFormSimpleFileRoutingCallbacks
"""----------------------------------------------------------------------------
MODULE:
    LongFormSimpleFileRoutingCallbacks

DESCRIPTION:
    OPEN EXTENSION MODULE

    FLongFormSimpleFileRouting Business process conditional_entry/exit and on_entry/exit callbacks.
    User can override the logic written in the base class LongFormSimpleFileRoutingCallbacksBase

    If user wishes to add some extra processing for conditional entry state
     e.g. 'ready' he can implement method as
    def condition_entry_state_ready(self):
        # Custom logic before core logic
        super(LongFormSimpleFileRoutingCallbacks, self).condition_entry_state_ready()
        # Custom logic after core logic

FUNCTIONS:
    For sample state xxx there are always the four standard extension points:
        condition_entry_state_xxx():
            To control if all the pre-requisites to performing the action and
            entering the state are defined.
        on_entry_state_xxx():
            Is the place to perform the action before getting into XXX state.
        condition_exit_state_xxx():
            To control that all pre-requisites for performing the next action
            are fulfilled.
        on_exit_state_xxx():
            Is the place to reset values or perform action just before leaving the XXX
            state.

VERSION: 1.0.9-0.5.757
----------------------------------------------------------------------------"""
# The context parameter is an instance of FBusinessProcessCallbackContext
import FLongFormSimpleFileRoutingCallbacksBase


class LongFormSimpleFileRoutingCallbacks(FLongFormSimpleFileRoutingCallbacksBase.LongFormSimpleFileRoutingCallbacksBase):
    def __init__(self):
        super(LongFormSimpleFileRoutingCallbacks, self).__init__()


...

  FLongFormSimpleFileRoutingCallbacksBase
"""----------------------------------------------------------------------------
MODULE
    FLongFormSimpleFileRoutingCallbacksBase

DESCRIPTION:
    OPEN EXTENSION MODULE
    This is a READ ONLY module. User can override the default logic in derived
    class LongFormSimpleFileRoutingCallbacks
    Business process conditional_entry/exit and on_entry/exit callbacks.


FUNCTION:
For sample state xxx there are always the four standard extension points:
        condition_entry_state_xxx():
            To control if all the pre-requisites to performing the action and
            entering the state are defined.
        on_entry_state_xxx():
            Is the place to perform the action before getting into XXX state.
        condition_exit_state_xxx():
            To control that all pre-requisites for performing the next action
            are fulfilled.
        on_exit_state_xxx():
            Is the place to reset values or perform action just before leaving the XXX
            state.
VERSION: 1.0.9-0.5.757

ENUM Values:
Enum values for child bpr( worksflows for routing type).
Child BPR notify(update) its status to parent bpr with one of below statuses.

if child bpr failed then update parent with FAILED status. i.e {<TRANSPORT_TYPE: FAILED>}

see "on_entry_state_undelivered" callback for usage.
class RouteReportBPRStatus(object):
    NOT_STARTED = 'NotStarted'
    FAILED = 'Failed'
    SUCCESS = "Success"
    FAILED_TO_START = 'FailedToStart'
    IN_PROGRESS = 'InProgress'

----------------------------------------------------------------------------"""

import time
import FLongFormUtils
from FLongFormConfig import NOTIFIER, CONFIG_PARAM_OBJ
from FIntegrationUtils import FManageOperation


def exception_handler(func):
    def wrapper_func(*args, **kwargs):
        NOTIFIER.DEBUG(f"Process {func.__name__}")
        try:
            func(*args, **kwargs)
        except Exception as err:
            NOTIFIER.ERROR(f'Exception caught in {str(err)}')
            NOTIFIER.DEBUG(str(err), exc_info=1)
        finally:
            NOTIFIER.DEBUG(f"Done processing {func.__name__}")

    return wrapper_func


class LongFormSimpleFileRoutingCallbacksBase(object):
    def __init__(self):
        self.max_retries = int(getattr(CONFIG_PARAM_OBJ, 'BPRCommitRetry', 3))
        self.parent_state_chart_name = getattr(CONFIG_PARAM_OBJ, 'StateChart', '')

    # Conditions return True or False
    # Name convention is
    # 'condition_' + 'entry_'/'exit_' + state name in lowercase and underscore
    def condition_entry_state_ready(self, context):
        return FManageOperation.HasUserRights(FLongFormUtils.
                                              get_operation_name_from_bpr_context(context))

    def condition_entry_state_delivered(self, context):
        return FManageOperation.HasUserRights(FLongFormUtils.
                                              get_operation_name_from_bpr_context(context))

    def condition_entry_state_undelivered(self, context):
        return FManageOperation.HasUserRights(FLongFormUtils.
                                              get_operation_name_from_bpr_context(context))

    def condition_exit_state_delivered(self, context):
        return FManageOperation.HasUserRights(FLongFormUtils.
                                              get_operation_name_from_bpr_context(context))

    def condition_exit_state_ready(self, context):
        return FManageOperation.HasUserRights(FLongFormUtils.
                                              get_operation_name_from_bpr_context(context))

    def condition_exit_state_undelivered(self, context):
        return FManageOperation.HasUserRights(FLongFormUtils.
                                              get_operation_name_from_bpr_context(context))

    # Entry/Exit callbacks do not return anything
    #
    # Name convention is
    # 'on_' + 'entry_'/'exit_' + state name in lowercase and underscore
    #

    def on_entry_state_delivered(self, context):
        NOTIFIER.DEBUG("LongFormSimpleFileRoutingCallbacksBase : on_entry_state_delivered")
        ext_obj = context.CurrentStep().BusinessProcess().Subject()
        if ext_obj:
            parent_ext_obj = ext_obj.Parent()
            parent_bpr = FLongFormUtils.get_bpr_from_subject_statechart(parent_ext_obj,
                                                                       self.parent_state_chart_name
                                                                        )
            if parent_bpr:
                notes = ['Successfully deliver LongForm Report for transport type : FILE.']
                params = {'FILE': FLongFormUtils.RouteReportBPRStatus.SUCCESS}
                FLongFormUtils.update_parent_bpr_diary(parent_bpr,
                                                       parameters=params,
                                                       notes=notes,
                                                       state=FLongFormUtils.BusinessProcessStates.BEING_DELIVERED
                                                       )

        NOTIFIER.DEBUG("LongFormSimpleFileRoutingCallbacksBase: Done "
                       "processing on_entry_state_delivered")

    def on_entry_state_ready(self, context):
        NOTIFIER.DEBUG("LongFormSimpleFileRoutingCallbacksBase : on_entry_state_ready")

    def on_entry_state_undelivered(self, context):
        NOTIFIER.DEBUG("LongFormSimpleFileRoutingCallbacksBase : on_entry_state_undelivered")
        ext_obj = context.CurrentStep().BusinessProcess().Subject()
        if ext_obj:
            parent_ext_obj = ext_obj.Parent()
            parent_bpr = FLongFormUtils.get_bpr_from_subject_statechart(parent_ext_obj,
                                                                       self.parent_state_chart_name
                                                                        )
            if parent_bpr:
                notes = ['Unable to deliver LongForm Report for transport type: FILE.']
                params = {'FILE': FLongFormUtils.RouteReportBPRStatus.FAILED}
                FLongFormUtils.update_parent_bpr_diary(parent_bpr,
                                                       parameters=params,
                                                       notes=notes,
                                                       state=FLongFormUtils.BusinessProcessStates.BEING_DELIVERED
                                                       )

        NOTIFIER.DEBUG("LongFormSimpleFileRoutingCallbacksBase : Done "
                       "processing on_entry_state_undelivered")
    # ------------------------------------------------------------------------------

    def on_exit_state_delivered(self, context):
        pass

    def on_exit_state_ready(self, context):
        pass

    def on_exit_state_undelivered(self, context):
        pass


...

  FLongFormSimpleMailRouting
"""----------------------------------------------------------------------------
MODULE
    FLongFormSimpleMailRouting

DESCRIPTION:
    OPEN EXTENSION MODULE
    Business process state callbacks.

FUNCTIONS:
    For sample state xxx there are always the four standard extension points:
        condition_entry_state_xxx():
            To control if all the pre-requisites to performing the action and
            entering the state are defined.
        on_entry_state_xxx():
            Is the place to perform the action before getting into XXX state.
        condition_exit_state_xxx():
            To control that all pre-requisites for performing the next action
            are fulfilled.
        on_exit_state_xxx():
            Is the place to reset values or perform action just before leaving the XXX
            state.


VERSION: 1.0.9-0.5.757
----------------------------------------------------------------------------"""
from FLongFormSimpleMailRoutingCallbacks import LongFormSimpleMailRoutingCallbacks
LongFormSimpleMailRoutingCallbacks_Obj = LongFormSimpleMailRoutingCallbacks()


# The context parameter is an instance of FBusinessProcessCallbackContext
# Conditions return True or False
# Name convention is
# 'condition_' + 'entry_'/'exit_' + state name in lowercase and underscore

def condition_entry_state_mailed(context):
    return LongFormSimpleMailRoutingCallbacks_Obj.condition_entry_state_mailed(context)


def condition_entry_state_ready(context):
    return LongFormSimpleMailRoutingCallbacks_Obj.condition_entry_state_ready(context)


def condition_entry_state_mailfailed(context):
    return LongFormSimpleMailRoutingCallbacks_Obj.condition_entry_state_mailfailed(context)


# ------------------------------------------------------------------------------


def condition_exit_state_mailed(context):
    return LongFormSimpleMailRoutingCallbacks_Obj.condition_exit_state_mailed(context)


def condition_exit_state_ready(context):
    return LongFormSimpleMailRoutingCallbacks_Obj.condition_exit_state_ready(context)


def condition_exit_state_mailfailed(context):
    return LongFormSimpleMailRoutingCallbacks_Obj.condition_exit_state_mailfailed(context)


# Entry/Exit callbacks do not return anything
#
# Name convention is
# 'on_' + 'entry_'/'exit_' + state name in lowercase and underscore
#


def on_entry_state_mailed(context):
    return LongFormSimpleMailRoutingCallbacks_Obj.on_entry_state_mailed(context)


def on_entry_state_ready(context):
    return LongFormSimpleMailRoutingCallbacks_Obj.on_entry_state_ready(context)


def on_entry_state_mailfailed(context):
    return LongFormSimpleMailRoutingCallbacks_Obj.on_entry_state_mailfailed(context)


# ------------------------------------------------------------------------------

def on_exit_state_mailed(context):
    return LongFormSimpleMailRoutingCallbacks_Obj.on_exit_state_mailed(context)


def on_exit_state_ready(context):
    return LongFormSimpleMailRoutingCallbacks_Obj.on_exit_state_ready(context)


def on_exit_state_mailfailed(context):
    return LongFormSimpleMailRoutingCallbacks_Obj.on_exit_state_mailfailed(context)


...

  FLongFormSimpleMailRoutingCallbacks
"""----------------------------------------------------------------------------
MODULE:
    FLongFormSimpleMailRoutingCallbacks

DESCRIPTION:
    OPEN EXTENSION MODULE

    FLongFormSimpleMailRouting Business process conditional_entry/exit and on_entry/exit callbacks.
    User can override the logic written in the base class LongFormSimpleMailRoutingCallbacksBase

    If user wishes to add some extra processing for conditional entry state
     e.g. 'ready' he can implement method as
    def condition_entry_state_ready(self):
        # Custom logic before core logic
        super(LongFormSimpleMailRoutingCallbacks, self).condition_entry_state_ready()
        # Custom logic after core logic

FUNCTIONS:
    For sample state xxx there are always the four standard extension points:
        condition_entry_state_xxx():
            To control if all the pre-requisites to performing the action and
            entering the state are defined.
        on_entry_state_xxx():
            Is the place to perform the action before getting into XXX state.
        condition_exit_state_xxx():
            To control that all pre-requisites for performing the next action
            are fulfilled.
        on_exit_state_xxx():
            Is the place to reset values or perform action just before leaving the XXX
            state.

VERSION: 1.0.9-0.5.757
----------------------------------------------------------------------------"""
# The context parameter is an instance of FBusinessProcessCallbackContext
import FLongFormSimpleMailRoutingCallbacksBase


class LongFormSimpleMailRoutingCallbacks(FLongFormSimpleMailRoutingCallbacksBase.
                                         LongFormSimpleMailRoutingCallbacksBase):
    def __init__(self):
        super().__init__()


...

  FLongFormSimpleMailRoutingCallbacksBase
"""----------------------------------------------------------------------------
MODULE
    FLongFormSimpleMailRoutingCallbacksBase

DESCRIPTION:
    OPEN EXTENSION MODULE
    This is a READ ONLY module. User can override the default logic in derived
    class LongFormSimpleMailRoutingCallbacks
    Business process conditional_entry/exit and on_entry/exit callbacks.


FUNCTION:
For sample state xxx there are always the four standard extension points:
        condition_entry_state_xxx():
            To control if all the pre-requisites to performing the action and
            entering the state are defined.
        on_entry_state_xxx():
            Is the place to perform the action before getting into XXX state.
        condition_exit_state_xxx():
            To control that all pre-requisites for performing the next action
            are fulfilled.
        on_exit_state_xxx():
            Is the place to reset values or perform action just before leaving the XXX
            state.

VERSION: 1.0.9-0.5.757

ENUM Values:
Enum values for child bpr( worksflows for routing type).
Child BPR notify(update) its status to parent bpr with one of below statuses.

if child bpr failed then update parent with FAILED status. i.e {<TRANSPORT_TYPE: FAILED>}

see "on_entry_state_undelivered" callback for usage.
class RouteReportBPRStatus(object):
    NOT_STARTED = 'NotStarted'
    FAILED = 'Failed'
    SUCCESS = "Success"
    FAILED_TO_START = 'FailedToStart'
    IN_PROGRESS = 'InProgress'

----------------------------------------------------------------------------"""
import time
import FLongFormUtils
from FLongFormConfig import NOTIFIER, CONFIG_PARAM_OBJ
from FIntegrationUtils import FManageOperation, ConfirmationEnum


def exception_handler(func):
    def wrapper_func(*args, **kwargs):
        NOTIFIER.DEBUG(f"Process {func.__name__}")
        try:
            func(*args, **kwargs)
        except Exception as err:
            NOTIFIER.ERROR(f'Exception caught in {str(err)}')
            NOTIFIER.DEBUG(str(err), exc_info=1)
        finally:
            NOTIFIER.DEBUG(f"Done processing {func.__name__}")

    return wrapper_func


class LongFormSimpleMailRoutingCallbacksBase:
    def __init__(self):
        self.max_retries = int(getattr(CONFIG_PARAM_OBJ, 'BPRCommitRetry', 3))
        self.parent_state_chart_name = getattr(CONFIG_PARAM_OBJ, 'StateChart', '')

    # Conditions return True or False
    # Name convention is
    # 'condition_' + 'entry_'/'exit_' + state name in lowercase and underscore
    def condition_entry_state_ready(self, context):
        return FManageOperation.HasUserRights(FLongFormUtils.
                                              get_operation_name_from_bpr_context(context))

    def condition_entry_state_mailed(self, context):
        return FManageOperation.HasUserRights(FLongFormUtils.
                                              get_operation_name_from_bpr_context(context))

    def condition_entry_state_mailfailed(self, context):
        return FManageOperation.HasUserRights(FLongFormUtils.
                                              get_operation_name_from_bpr_context(context))

    def condition_exit_state_mailed(self, context):
        return FManageOperation.HasUserRights(FLongFormUtils.
                                              get_operation_name_from_bpr_context(context))

    def condition_exit_state_ready(self, context):
        return FManageOperation.HasUserRights(FLongFormUtils.
                                              get_operation_name_from_bpr_context(context))

    def condition_exit_state_mailfailed(self, context):
        return FManageOperation.HasUserRights(FLongFormUtils.
                                              get_operation_name_from_bpr_context(context))

    # Entry/Exit callbacks do not return anything
    #
    # Name convention is
    # 'on_' + 'entry_'/'exit_' + state name in lowercase and underscore
    #

    def on_entry_state_mailed(self, context):
        NOTIFIER.DEBUG("LongFormSimpleMailRoutingCallbacksBase: on_entry_state_mailed")
        ext_obj = context.CurrentStep().BusinessProcess().Subject()
        if ext_obj:
            parent_ext_obj = ext_obj.Parent()
            parent_bpr = FLongFormUtils.get_bpr_from_subject_statechart(parent_ext_obj,
                                                                       self.parent_state_chart_name
                                                                        )
            if parent_bpr:
                notes = ['Successfully mailed LongForm Report for transport type: Mail.']
                params = {'MAIL': FLongFormUtils.RouteReportBPRStatus.SUCCESS}
                FLongFormUtils.update_parent_bpr_diary(parent_bpr,
                                                       parameters=params,
                                                       notes=notes,
                                                       state=FLongFormUtils.BusinessProcessStates.BEING_DELIVERED
                                                       )

    def on_entry_state_ready(self, context):
        pass

    def on_entry_state_mailfailed(self, context):
        NOTIFIER.DEBUG("LongFormSimpleMailRoutingCallbacksBase: on_entry_state_mailfailed")
        ext_obj = context.CurrentStep().BusinessProcess().Subject()
        if ext_obj:
            parent_ext_obj = ext_obj.Parent()
            parent_bpr = FLongFormUtils.get_bpr_from_subject_statechart(parent_ext_obj,
                                                                       self.parent_state_chart_name
                                                                        )
            if parent_bpr:
                notes = ['Fail to mailed LongForm Report for transport type: Mail.']
                params = {'MAIL': FLongFormUtils.RouteReportBPRStatus.FAILED}
                FLongFormUtils.update_parent_bpr_diary(parent_bpr,
                                                       parameters=params,
                                                       notes=notes,
                                                       state=FLongFormUtils.BusinessProcessStates.BEING_DELIVERED
                                                       )

    # ------------------------------------------------------------------------------

    def on_exit_state_mailed(self, context):
        pass

    def on_exit_state_ready(self, context):
        pass

    def on_exit_state_mailfailed(self, context):
        pass


...

  FLongFormSourceData
"""----------------------------------------------------------------------------
MODULE
    FLongFormSourceData:
FUNCTION

VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core
       is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module
       at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongFormSourceDataGenerator
"""----------------------------------------------------------------------------
MODULE
    FLongFormSourceDataGenerator:
FUNCTION
    get_xml_tags_values :
    getter function for customization

VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core
       is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module
       at user end.
----------------------------------------------------------------------------"""
from FLongFormSourceDataGeneratorBase import FLongFormSourceDataGeneratorBase


class FLongFormSourceDataGenerator(FLongFormSourceDataGeneratorBase):
    '''
    Class for generating data from multiple sources.
    '''
    def __init__(self, acm_obj, reportform):
        super().__init__(acm_obj, reportform)
        '''
        generate data from different sources
        self.acm_obj : Handle for Confirmation object

        1# To override or add new tags ,use below method to write your own logic:-
        methods:-
         get_tag_values

        For example:
        def get_tags_values(self):
            return {'new_tag':'new_value' ,
                    'existing_tag : 'new_value'
                    }

        2# . To add multiple rows data, use below method to write your own logic:-
             method:-
                get_mutliple_row_data_xxx

        For example:
        def get_mutliple_row_data_cashflows(self):
            return {'cashflows': [{'Currency' : 'USD',
                                  'NominalValue':'10,000',
                                  'StartDate':'22/03/2034'},
                                  {'Currency':'USD',
                                  'NominalValue':'10,000',
                                  'StartDate' : '22/06/2034'}
                                  ]
                    }

        def get_mutliple_row_data_account(self):
        """ returns accounts details
        """
        money_flows = self.acm_obj.Trade().MoneyFlows()
        account_details = []
        for mflow in money_flows:
            account_detail={}
            try:
                account_detail['Currency'] = str(mflow.Currency().Name())
                account_detail['PayDate'] = str(mflow.PayDate())
                account_detail['AcqAcc'] = str(mflow.AcquirerAccount().Account2())
                account_detail['CParyAcc'] = str(mflow.CounterpartyAccount().Account2())
                account_detail['CPType'] = str(mflow.CounterpartyType())
            except Exception as error:
                pass
            else:
                account_details.append(account_detail)
        return account_details
        '''

    def get_tags_value(self):
        ''' This is getter to provide customaization.
            Return tag-value pair as dict format
        '''
        return {}


...

  FLongFormSourceDataGeneratorBase
"""----------------------------------------------------------------------------
MODULE
    FLongFormSoureDataGeneratorBase
FUNCTION

UNITTEST:

VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code
       within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done
       to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongFormSubMenuModal
"""----------------------------------------------------------------------------
MODULE
    FLongFormSubMenuModal : Module contains business logic to display context menus
FUNCTION
    LongFormSubMenuItemCreate()
        Entry point to start menu
CLASS
    FLongFormSubMenuModal
        Class to implement business logic of sub menus
VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is
       not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at
       user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
eNqtWd1yG0d2xvxiMARBivqjvFrvWFmXjV0tLTuO7TCS16IIKlyLoAog7dJkqyZDdJMceDCD9DQocTxQpaKt3G2tc5OLXbsKdOVi
Nw+QJ0hVHiFVc5fKlW/2AVypUs7pGQxBGpDtZMlC96Cnf06f8/V3zmn8d+ncnwKfD+ATPYWClOwSkYjsS7YkatmWRa3YiqhVW4Va
8bWebutS1lezNVGX7bKoDdsQdcWuiNq0TVHP2XNQq361N2/PS6X7JaIR/Vcloj+T7RqR26V6+b/+XS6VfvYn/DO3ttd3HzRMC/42
HoTBwUbIeu3B3hYNBlshcX1r1YJ64FOrEwbc9YLI2htEXkCjyPLDA69j8dAiXtT33WPRhT7hVg9GR+bGbvPezuZ2U0x+bu5NTnv3
GHU5fb0u3uNfI+Ds2OqHXsBx1oi7LJvLvPfgbrs9W8hihnu+C3LBWK/X9ykM5eelDfetaLCXS/hRo9UGAVetV1uvmmar0d5pbQqR
22882Nza3LkrnlfF9G+uWHeDY6sXEm/f67jcCwOxEj+kVtRhXp+/QYMOO+5zSrAXqOyNjk9dZgmVdEJCrcceP/QCMaQTMmp50Vjy
IOQgV78fMhi+IlrfWrF2Dr0onwv6ik6dQcTDnhe7ez7N+v059sMJe/0wwB33wBLY9XHIPrHcyKJP+rSDUuHylvuNTRAYlu3kdDWX
jyUbRJRZNACh/pS4+wqPVrMupUZze2dzY7PRguf6AeUOLOe5vhdTh1FUxz7Y2gn3urAFZ5+FPSdwe7Rz/pTK41P6t1DQEpzOEp5M
OJUyUX5VglOpEg1qOFGkDLVODFKBukxMMge1QapkHuoKqZEFqE2ySC5APUeWyEWoq+QSuQz1PLkC5/BqenkqDuMPCyQK03UEHA/d
gPg0ys1+ekKscAyFYN9jPWENKzqkNNN9R57YXxk+Jnzu4R5LEjCRNJQTif1P/GUijUpc6sonErtO5KESNPMWBVpWiAItt/MWFVoI
10Y6gSdgJ22owJvySWmociNRn0lDjVdGZqLh20D/GFZp47i5UZXoo/kEe9dOSrzSXegunsD8IIPMfp/IpHytNLpwUmK/h9mXiIHj
YXSlDWXwUC3xi8dfS6UhMGL8HvS4RMxspt+VyFyi/670hZCHa90lfjnRn0lojV/LOMejEqkN9ad6YGb1rdKtUoJcuBB/eVbZ+4Og
I1SIind9HwCPeLGOPPoY4d05pJ1PhMLdft8H9O95Pj9GQpg0SjHnat9lbs9yOwJ9q9bGvfDUShkeT/syygcsWLX2whCOfFC82LDN
iHKeUZFdnbR0fKed8xAKPBYJjh4AXrAlAt8KB/wA+PDA6kUH4s2a5/vwfcVe2sueNgPsmE35yqfDO58O4YgTCziUHjDRDOvw4z69
89qnw9e+eg5/8Zvfd+mVnfhRgzF4HXY6A8aQTA49dAqoVNEJZztVrAeanTEbcLF7kK2F+rBux5X3V6xs9q8A2aU/ACvQJx3Hg501
61dsYzP60AvI9n6qgDXsuY32qUrnwSynOrUvbqx9QysMPXiqbjY3tu1aS3AKntsm0AhT8VWtOMu73PMj++IR8A8B1zTBQPbCRuMJ
pyxw/W1he1tvUx/qVM8WspVtj9jV8Uw7oHDb2Grfd3YePWyk6rrL3VRbb6zt3k8rjScd2kfRUq3Ram23UiXirF5O1Yj6+2k5h5xd
BlQ5IItdzVscNKNdO5UKqXDyO3ZKFcrYH0rsCmzt6+WpNLXSP05vevvO2CaOn1vJyY3joDWdU2C8iqxzG3lIVyVVkqWqpOcfE74b
8F+VdVm0PZefq8oitJtSDXroz6H/c0N+XYrXpgvzfQTpKBOcWJvkxH8E5HwmxcCJn0lMRr47KY0kYDYlf5YFyykjNUHeUpAFoUXj
5a4xqiQQoUGpJvIB8OiJPNS5mehEfib/5qVhOSmP5nCU4DRFLamlZwrw4+KbpejoFpAx/j+CD1GHBq/y+W4NI7dnyrDCF0YLsPZi
UoE1K0mF/TExEv2oxP7IL4yWEh1aTX6xe2l0OTG7V7pX+XL3GnBi+QsZZJhL5kYv5S3GFzKpnAAjJuboBzgO2HJhdD1/+uHoZWJm
8gUJsO2PPpOOV4Fvq8C31+GtBSxbBZaVsz7Aqcqw+rQaPMzqW7Aj/gqM+XsYA5FnvCLGVJP58Rj+w+7L/EYyD8w8T2oFMyvD+afz
wMyiRmYmimDmf5rBzGGfBpkfHLMANGKA8RrQUN4lyN+/mIqDb+fiJoQ1RWsqraTy471mrK2QsPPEXtrt4wn/OGRkF8KmbRAsBS8/
EK0bHvVJlCpw9lKVswGNl7fP0xduBVgwrk+lRXyLvffhy5jb4g+mdkX3hF1nMuV4/KrFMApgBhT1P2M1wWo74LdSVXBZFRrsJUIx
0nQw1HP23Ii+83ZqQKzdR0lSEwIs/EI8lsphlKp9lx+maheWS1WUOdUeM4/TtAwdXc5ZulCcWaHzg3Tx3nZzY/O+8/Bu6+6Ws732
i/TCxuapr8kYVPeiNfCEqSp0bayHnQGydar6T3q+rVHOKLVNYIFGTuMGeknYc5SWadYErLwDkvpgjmzO8tbdzabTbANZUm6rkXsE
+xEpgoN7EyzPFlApCw8p63lRBOIIzbEL+GoRiyXUXY1dRFWZoLo8sLS1fUGtVYjgQXvEARS4dnVMQoJmhRYd1NwSzwUTC4u3qYqP
EE2GHQemtS9nQHIgBCfOAADmCO0q8N6+lO/QyfrsZ2DT+1TIehnFvFIUV3FDLyNGZpPkfeS/D3J2Rg5GVjakZahfl7FFfa7KBrCw
KuMb+MDTJcmUkaEXpR/DRxccHb89naFfvPwZTlbzjFlw8jIUHFg4kZBxE2UE0aKIOyGqrMvxb7+VJbygP4C8KBywDrXQJv9nvvie
dNGsK4DrsTLu725mGLx6qh8hE3p1VFN6Taio0EwmsUBRXRVoY5cQcgamZBAjfmIvQJcOxQ5OD3V8zuTsPSh81KEqon9Tit94gW2m
LXzGLPqkqzyCIn6PSFw4SKR4cIfiGZOlz2VwkzK6y5GSyFztal0dAn/1RBXu5T1wFeXjPjgKDRyFRdREy2coJ8ozKdH+QRauQRtq
TzVwDaIWrkEDo+vx7gyjc+YdHFCW2b3R9g4Cix5hNvudLB6bOAI4de/Y2qjLqbrbbrQgRNu832ysf/2TIuA6T74RjEKqJTlDgeEN
hopKjV1YVPDqT/DrfC6fI4QSXJteXsuvFh6ysANVA19FttbAZQXf1HVh/NRwciym5b0+Ew/zjEYDH9JdmDg4SE0BWaCXDp9KAdco
iprRutdDUhqLjNaMlsTZk+E844lW4SzXpNmYmTlXR53ATGUSM/+KmPEh6VQTlcjvlkStYC0OuAI4UE+UoZZovNSVu8onMnvnY2Fz
onN1pOU4y59JmRiAszLXMQgblQFnRrfShZArKU/gbO74XwBnhsBZJTHyGeYwQUyMAmfGU0PgDOoCZ2b8N98ZZy2KhPC90HbjUQjJ
DoNMcg9oUdyAhTlos9lWzPiWWPcxpCMWo73wiFp9Ro+8cBBlPaPx1Fn4DiOW10PrGCZ+7Gb3X5iWesGA/pz9AC9L4mo2d4Fy9peC
U1qNXzTu7TTW2SoirsrexdaL7cPw8VZG0Gvhk0c0aoZ2VVRrA87DILIrzW1nbXdnZ7spEM/+CgsEO8NIX0Cc3cG5qgLQTrZOhutK
RmrvY/Fz7FOhnudEh9T37fLBwHMgZ7TnUJNO5zD0OpShf2J3sZgG78sZJJnYYAHHZ4i8l3NoZ2lGTaQd52D+0xfB/Nycs2nxlwjx
l4kkyFBkDwBLgHIXMwalAKV2/BGAUhWglBNVgFLjAHwApZqDUhmqT1URF0NdxMVq/GgGKBmEBBCrZaCMMiYrKOm7QfLDLS/weoOe
1Rz09ijDa40MZQhTL4AJADg3x/AXnEd97yjreW7J+O2ZhJkPwvHn5WwC202DT3m98WDzo0ZrkhEnkKMFIadRhooPpkDjar6kk61X
GPKf0WaLBTgWRQQj4PCz6XCYMc8ZQJiTgBghIPZ4nkaCT1QwfBHeUcWnXwLfDXVID3UiXQHfCZy3DoDRMI0ERgRO/LU6VIOliTYt
awPeKydqnrAhqIzj3xZMp+dMV+FGUplgunLOdOWC6coAKmMmqATd0Mf/D1B9hTeQDIudumRXAWDcc32hwI34rSkYIQOBjHzlKQip
TFCNyFeu4pXvuIMDMUweFds3osNw4BNn7Hdz6x077j7PjWhf62eON/diEGWPZ8qAeGsc99fNb/CV4CYM3dlb+H3ZmbGeXc3x0gkH
eN/k0Pw7TjAbta/kOnBm+tovEWI3cvwa4h5Ffm7KVXFnYihY6jISHSD63RnXON+2RkeaQnb3x9hOJPY5hxKSegmw+3m8nkhEvlbC
i2WiQK3gpTl69xPJE7jvwgkAv6/jBQB4chVIUhMkqXfLJ+JSINgo0KyJiwTw6uCxgRzhPJTFuMqoSowsaiyuIyp5tFgposWK8OJv
AqpymjpzS46XhwxcL6INM7fidxSLNcaYFdmyvdxq5Pzj7LTuNtsPt1s74k7ua+lmXcrjLgqQikRiHd+ZmqQXYogFz93ZjxN0OHzN
+nyq+DRgPz5FeJ4KwkIIcYz/iOey4wmuFDRZKQTNUtUinxVJq8hhi3DSZZCGeRFPFZjO1rlQga2JvUz1r1eKDTiTkv8bQuG6+JUT
+DN3sIg4RGBNWhJ5YXxzOvqmT3nmV4sz/jVG9d4G0K1O3M4BeDh4WPz985mS3cohUZ7IGGBCz9I3iJKPUw/8pYIoGbjOgEnNwaQW
YFIBTFq8jLc8VmYHa+1hq8CMbbY5mOjeocu4iLXiv5hCbl4g7moKQ+bBv4MkBCxkQQpZr9pl0FF2P/xQ9GOvoRFex6JeYOJHyHqI
BPGDVpSNgFQAhOigEOllsdKZJaCeAMaF4jYjw4Rd6QBQCU5q13IJ8/sN+2r+XczviAWyKw3zFJNTUXP9Rfv9D7TpFYEd9L9VcduL
d7+qVAPeit96Qb46Y8oz2FEmsdNEoyyiKyZ4myAXeJCP/xrwIAs8KCNITSASk8/hQRnKT2URjUE9EY1dwIuGM0CIl8cpnZXndNY6
5S6k/vHKCxBx3k4CCrpwdfZiG6+o7mY32OLniGlGVDL/9OGM+JhtQfGfqAgjV/giqHtW3DtVpma9BmmosLvjpKbjZD/0wnPVcf5u
4Pr5m7KD3sNxGF7esHfGdxFsDQu0BVvHYgOLB1g0x/JNyHwquAaFNUaKIamqccN41TCNeeOiUTUuGReMRdGnvsBa2B8dIsMBWaBQ
LQ6PUBimNuynWNzEYmWcsdgLG6c/7OCljPhhR0w8TarUuJ3t/n30j9FL6IOXDCn7r0rGxH9V/l+3n5tl""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongFormSubMenuOperationsViewer
"""----------------------------------------------------------------------------
MODULE
    FLongFormSubMenuOperationsViewer : Module to display context menus
FUNCTION
    LongFormSubMenuWordCreate()
        Entry point to start menu
CLASS
    FLongFormSubMenuOperationsViewer
        Class to implement the sub menus view for Operation Viewer
VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code
       within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done
       to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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
e3XgpiL/H17pZSM=""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongFormSubMenuView
"""----------------------------------------------------------------------------
MODULE
    FLongFormSubMenuView : Module to display context menus
FUNCTION
    LongFormSubMenuItemCreate()
        Entry point to start menu
CLASS
    FLongFormSubMenuView
        Class to implement the sub menus view
VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code
       within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done
       to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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
1FEtyPvHT17W9NGvJ76eMDX9fwHlHOOI""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongFormTemplateManagerMain
"""----------------------------------------------------------------------------
MODULE
    FLongFormTemplateManagerMain
FUNCTION

UNITTEST:

VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within
       the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this
       module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
eNqtU8GKE0EQnZ5MEhkW8eJJF+uyYA4mqLcgsktMYCDJQjLZQy5D291uGme6h+4O2Sx6Wn/GX8pNPPkLnqyeSSAo62kLuqam69Wr
Kqr6Z/CXhHjO8diXqHiwDDjhYU4KsiTE2408LMJliHbEm9+CZYO35kGn/SPCwFcPKPHk8sNiPIwBZTTW6nqkTZGKosypExOq6LUw
EypVPFpMB2lyOY3jxTRJ0+E87cfx1XA2x7s+nM3O4niGl7OkQs1742SSpBeV3a/YX3fhQm2h0Fx+kow6qZUFp8GtBFhmZOl6QjGz
LZ3gHrXORY/lghpw4sYB01zARroV1gK1+EimjQBpQWkHdl2W2mB4t0K86UK6QlfNdQCxtXW6kLf0Yy5q3FuP80xFqZVQDgq6raAb
bT4DtSBuSsF8VT490H+a4BhWdyLtobZ9UupgbYUBobCoh5zbL79EHbJ7ft/QrqTYoP/03qFqTnN2vJJkv5YDv5aPUbngLvgaOPIl
uCO4fOT2FAZGIIUFWpb5vn+QyjqqmOiEJsIo06gqWzYLn+F7YJr4//vF/5arW253z1hFnR0xZwfmp76iqHo2LWLa+J12ol07y7hm
WVYlrFN7V5XvSLVQ7R69qwfy3jdp/VX05IScNP4AoOrulg==""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongFormTemplateManagerModal
"""----------------------------------------------------------------------------
MODULE
    FLongFormTemplateManagerModal : Module to Modal class of FLongFormTemplateManagerView
FUNCTION

CLASS
    LongformTemplateManagerStarter
        starts the actually GUI after binding with Modal class

VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core
       is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module
       at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
eNq1fQt0HNd12M7s7O7s7AeLBQiC/yElkYREQaAkSzIFQSIJQqZMgjQBStZG8nq5bwAsuNgF3w74GQ/o1FRT140axnFVt7bcRRqn
UU6Tnrppml/d9HMSN21SN6efdOOm+ZzTYydxP0mbtEgi9t773vwWC4D0SSlhZnbmzXtv3tz/b34n1vUvDn8vwV/rB2HDYqUYU5ha
V0oK7dWSSvt4KQ77eF1bSpQSimiTLCVpnyqlYK/V9aV0Kb1klAy6nqhnljKlDB0n69mlXCkn78uWsrTPl/KwT9X7lvpKfXRNrxeW
+kv9sl2xVHw5xtLMeCvGjDtqaYCpM7GRzG99QY3FHv9z/GecvzB5+dwZw4R/U+eajfmpJl+atZaW6xXbOl9pVOYtfr7JKnXzhAn7
lbpl2k1TnKnWK62W2Zzb9MZXa9YNY+ry9OnZsxemDeP0uZMzMzQStp/b2H7GrnDb4tQE/7Xwd8u0FyyzUrVXKvX6LfPly2fNyhy0
Mq/UGqzWmDdv1OyF8IwM49Uzl2ZgxBPmI5ceMYxLZ2ZmL52lOcw8ce7s+bOzJ+n4BI1zfNQ82bhlLjVZba5Wrdi1ZqOFj4iDtqq8
tmw/YTWq/NaybTFsBSvwRLVuVbhpWzdts9pkFs2g1qBbqk1uefOvtcxG0zZbK8vLTXguNkoXnhw1ZxfgkujLa1RdadnNpZpTuVK3
RLunsB12uLTcbFgN21yq3KKmN5r8qllpmdbNZauKs6IFqGx4CAa3iSfxR/NmVrHNlRYsodWASf15gtO3EKumR5ROtl6Dd1Spl63r
lfqI2tGnL8yenTp75lKncPrC9NTZl8sXT146eb584dQr0PqAD0Gnm425Gl+iR5ix7JXly3at3sIOX7da081TK7YNzwa/9wa3cAtA
yAMlr/2BecsuwzPWKvWaY5W5he8AYa7cvLII61bdlBYsK7GYFQMaEEP8B9xXSxqLM+2tWCnBEiwJ+yRLMR32KYGhJZ1lWBb2aZZj
edgbrI8VYJ9h/awI+ywbYIOwz7EdbAj2ebaTDcO+j+1iu2FfYCW2l+17Syn1s/3sAJwpMpMdhP0AO8Qegv0ge5g9Avsd7DA7Avsh
dpSNwH4ne5Q9Bvthdow9DvtdbJQ9AfvdbIwdh/0e9iR7CvZ72dPsA7Dfx55hz8J+P3uOfRD2B9gJ9jzsTTbOXoD9QTbBXoT9IfYS
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""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongFormTemplateManagerView
"""----------------------------------------------------------------------------
MODULE
    FLongFormTemplateManagerView : Module to display GUI interface for managing Template
FUNCTION
    start_longform_template_manager_gui()
        Entry point to start GUI
CLASS
    FLongFormTemplateManagerView
        starts the actually GUI after binding with Modal class

VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is
       not supported.
    2. This module is not customizable.
    3. The component mon_list_existing_reportform_click,ay not work as expected with any
       modifications done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongFormThirdPartyDependentLib
"""----------------------------------------------------------------------------
MODULE
    FLongFormThirdPartyDependentLib
FUNCTION

UNITTEST:
VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the
       core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this
       module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
eNqtVl9v29YV5+U/UZTsxPa6vqTDrdcM1dYwcpMBrRcETWw5EGbLgS23GNeBkHmvZSYUqVxSiUXIfXG/RRdAedwX2WcY+DBg2NO+
QB9SYN05l6TgeMn2Ugq8vDy859zz5/c7V/9Urlw1uL+AO3kCA1NchRGmhsQl8qm6Kjy1UBvprk7wmx4aI8M1YG4wk9WYxerMZo0/
m67JmmyJLbNr7DpbkZLaI4WtsrVvFbZ2oboWt+b1V4prM/VQaf3sH6aqKLd+wsve298+2u3YFK6d3Tga7sRi1D8NBHs8EOl0m495
xHiU7gbH9s5Rb6vf3e/Z9lGv2+93Dvub9pedg0MQbdKbBzdt+wBkB1256PD2bnev238g55vS/oZDH0RTOopZcBL4gzSIo4SmMU1P
OU18EYzT2zzyxXSccoarJiG/7Yd8IGjKz1Lqx4zTF0F6GkSoIk3C5ceC0yChUZzSZDIexwLUHfn1U4dCKElpq1rkT5I0HgXZ4Djk
xbo7uI6DpdE4jiBYOhpM5dIXsXhKBwnlZ2Puo1e4PR38VxAM1IpIgqTyq9x0kNJJwgWFNDr2T1m5fyEQey2SW739fnen2zmA+cpO
N0r5UEi/jtIgTNz6aBCEIy6GPNfDs1GYN1jsn8lYE+7q+JJb8JpOxzwROhhtmdkyim8tNIUBYmHCkDXG0/Q0jm7hAoE8kCqZ0XZ+
67Qz467zufNpZmw4d5yNzGw7nzkbbXzdcD7PzA2n7dxp+1fZpFVsugsDV4BFCjLI1bjOVKZ9q1wQ14C5zgw5N2EOLJJz4BLwop6/
twDvZchmrqzGVjhIEir4WPAEyzsIQyyVYHSMIKdhcExfnAY+lBawdMyDaAhgiJLJCEp+PKVo+gRMlzUtQOOrl0Kw4F6CewvDeI1N
gZyrMyK+z66nypzMyCvyRD1Xv1Kiv+pKqk3/ThT8ZV/AOi3V5wauONdnuthOzXltpr9CuTXTLsi28qefnxszg6nPFbGb1mfazLgA
W892wRokP7Wnc6Kcm2BtPW3Mm0ybke8Ups/M75SXYIcoXyl/gMZzbn5jRg+LZ1uRXvwN9GoLPVPq1Wa1K3q1b2qRXTzbShtkkdpW
ZmryvdSypFb9pYYaM2xSdvZresDTiQBiPOciASRSyB4dBs95VKawIgnNlZaWNzyvXOh5ea1sKXmtlGW0IwTox74/EQJJeBogm0dI
dSzVveyT+1Vp6O+DiIVT6p9y/ymdxhNBE/BlDDUrrGzSXvabYnrVToHsirjRAKt/L2vcd+xKNfvlUYRtA7l+Ahu9EV+pt56p605r
KV8aPx16ADhwweeJe33IU48FSSqC4wmyUzQBJnm9c+bzMb7nN4pW7PUe7HW8/r7X3Xu8f9D3sKP2HuUa6Of1wlnAa75UTL1i11xj
gchrsGaQpiJf25PSXpzuxJOISfcF0iw3tjsPjx61rFzzwyRvFNoexlr4o4HErWyjs9HQrfOBf+pJwyZHU0mu8TP/L4q4ASqv1//P
ueGMp3kDoy+T9SvkSBtZo+tEJyq5Tpow6sSWd5NYIFlG2Y831OL5kaaTVTX78K0kdy7Z9smVU9qqSHkGQ6Cck+xrJOQrBWjV+xpo
dK4xJJ7K1KequJuqFwqSba7NVCRkZM+UuV7MgZzLQC5NkkuH0XgJZJoBbWbqPeXZMtBxFWhlTEVB7pIo5BAb6u8qRuyVxwKA58tL
4MGWxKqgsCElzoIjor5os6uH1QlXaW9mKx9vIS9ArRK9Jq2Wmb+3sFeCxAsBfrkRpHxUNHp3DVPnF9pVCsUvcLdlPAdq4n3EhAko
noRpbhZmJFDclSBKUvCas0rRtSZ44MTHT/JmRecgguAQJcXwAZpbl0y46huerJWlRFaMlhBBgOgACpM0VVvFmfqjpS6rTWKq2Wfv
hsT/3uINpOjlLff9CIYhIGWBk9UCJzMyVxEJRHnWlFUl2e2qqkggGp9cKWOx76VKtjRxDfPwoUzrYIwLW7rMsljHrDYk1UpOE+9q
6j7AuGAP762l/SN6b5VZQ1Jld96dnXda6UFzsDzZEqAb2171zcubnvdsMgjLLzXPg/8AMGn4eLyOODRPVoDnJg4fL1x/MwiBHmKw
CWLMIrqmEvsG3O+rRH5rNcQnuG4FBzxU3WuLMLbi6CQYylYmEVykk1Zm5c7u2nbnsVc20/IwOXybJ7l1r4jtPmIhQZ/0axbgqwlI
U8ni94Npmdio/m0ayw//A8LWSe8=""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongformTradeConfirmationOut
"""----------------------------------------------------------------------------
MODULE:
    FLongformTradeConfirmationOut

DESCRIPTION:
    OPEN EXTENSION MODULE
    Business process state callbacks.

FUNCTIONS:
    For sample state xxx there are always the four standard extension points:
        condition_entry_state_xxx():
            To control if all the pre-requisites to performing the action and
            entering the state are defined.
        on_entry_state_xxx():
            Is the place to perform the action.
            For example, the on_ entry_state_matched is the place to set the
            confirmation status to Matched
        condition_exit_state_xxx():
            To control that all pre-requisites for performing the next action
            are fulfilled.
        on_exit_state_xxx():
             Is the place to reset values that you set in the state entry, if
             you are leaving the state to go backwards in the workflow.
             For example if you exit from the "Matched" state to go and re-pair,
             or to manually cancel, then you would want to remove the
             confirmation Matched status

VERSION: 1.0.9-0.5.757
----------------------------------------------------------------------------"""
from FLongFormConfirmationOutCallbacks import FLongFormConfirmationOutCallbacks

fLongFormConfirmationOutCallbacks = FLongFormConfirmationOutCallbacks()


# The context parameter is an instance of FBusinessProcessCallbackContext
# Conditions return True or False
# Name convention is
# 'condition_' + 'entry_'/'exit_' + state name in lowercase and underscore
def condition_entry_state_accepted(context):
    """ This function used to control if all the pre-requisites to performing the action and
            entering the Accepted state are defined."""
    return fLongFormConfirmationOutCallbacks.condition_entry_state_accepted(context)


def condition_entry_state_approved(context):
    """ This function used to control if all the pre-requisites to performing the action and
            entering the Approved state are defined."""
    return fLongFormConfirmationOutCallbacks.condition_entry_state_approved(context)


def condition_entry_state_beingedited(context):
    """ This function used to control if all the pre-requisites to performing the action and
            entering the BeingEdited state are defined."""
    return fLongFormConfirmationOutCallbacks.condition_entry_state_beingedited(context)


def condition_entry_state_delivered(context):
    """ This function used to control if all the pre-requisites to performing the action and
            entering the Delivered state are defined."""
    return fLongFormConfirmationOutCallbacks.condition_entry_state_delivered(context)


def condition_entry_state_disapproved(context):
    """ This function used to control if all the pre-requisites to performing the action and
            entering the Disapproved state are defined."""
    return fLongFormConfirmationOutCallbacks.condition_entry_state_disapproved(context)


def condition_entry_state_edited(context):
    """ This function used to control if all the pre-requisites to performing the action and
            entering the Edited state are defined."""
    return fLongFormConfirmationOutCallbacks.condition_entry_state_edited(context)


def condition_entry_state_error(context):
    """ This function used to control if all the pre-requisites to performing the action and
            entering the error state are defined."""
    return fLongFormConfirmationOutCallbacks.condition_entry_state_error(context)


def condition_entry_state_generated(context):
    """ This function used to control if all the pre-requisites to performing the action and
            entering the Generated state are defined."""
    return fLongFormConfirmationOutCallbacks.condition_entry_state_generated(context)


def condition_entry_state_generationfailed(context):
    """ This function used to control if all the pre-requisites to performing the action and
            entering the GenerationFailed state are defined."""
    return fLongFormConfirmationOutCallbacks.condition_entry_state_generationfailed(context)


def condition_entry_state_pendingapproval(context):
    """ This function used to control if all the pre-requisites to performing the action and
            entering the PendingApproval state are defined."""
    return fLongFormConfirmationOutCallbacks.condition_entry_state_pendingapproval(context)


def condition_entry_state_ready(context):
    """ This function used to control if all the pre-requisites to performing the action and
            entering the Ready state are defined."""
    return fLongFormConfirmationOutCallbacks.condition_entry_state_ready(context)


def condition_entry_state_rejected(context):
    """ This function used to control if all the pre-requisites to performing the action and
            entering the Rejected state are defined."""
    return fLongFormConfirmationOutCallbacks.condition_entry_state_rejected(context)


def condition_entry_state_undelivered(context):
    """ This function used to control if all the pre-requisites to performing the action and
            entering the Undelivered state are defined."""
    return fLongFormConfirmationOutCallbacks.condition_entry_state_undelivered(context)

def condition_entry_state_esigned(context):
    """ This function used to control if all the pre-requisites to performing the action and
            entering the ESigned state are defined."""
    return fLongFormConfirmationOutCallbacks.condition_entry_state_esigned(context)

def condition_entry_state_esignfailed(context):
    """ This function used to control if all the pre-requisites to performing the action and
            entering the ESignFailed state are defined."""
    return fLongFormConfirmationOutCallbacks.condition_entry_state_esignfailed(context)

def condition_entry_state_esignrejected(context):
    """ This function used to control if all the pre-requisites to performing the action and
            entering the ESignRejected state are defined."""
    return fLongFormConfirmationOutCallbacks.condition_entry_state_esignrejected(context)


# ------------------------------------------------------------------------------
def condition_exit_state_accepted(context):
    """ This function used to control that all pre-requisites for performing the next action
            are fulfilled."""
    return fLongFormConfirmationOutCallbacks.condition_exit_state_accepted(context)


def condition_exit_state_approved(context):
    """ This function used to control that all pre-requisites for performing the next action
            are fulfilled."""
    return fLongFormConfirmationOutCallbacks.condition_exit_state_approved(context)


def condition_exit_state_beingedited(context):
    """ This function used to control that all pre-requisites for performing the next action
            are fulfilled."""
    return fLongFormConfirmationOutCallbacks.condition_exit_state_beingedited(context)


def condition_exit_state_delivered(context):
    """ This function used to control that all pre-requisites for performing the next action
            are fulfilled."""
    return fLongFormConfirmationOutCallbacks.condition_exit_state_delivered(context)


def condition_exit_state_disapproved(context):
    """ This function used to control that all pre-requisites for performing the next action
            are fulfilled."""
    return fLongFormConfirmationOutCallbacks.condition_exit_state_disapproved(context)


def condition_exit_state_edited(context):
    """ This function used to control that all pre-requisites for performing the next action
            are fulfilled."""
    return fLongFormConfirmationOutCallbacks.condition_exit_state_edited(context)


def condition_exit_state_error(context):
    """ This function used to control that all pre-requisites for performing the next action
            are fulfilled."""
    return fLongFormConfirmationOutCallbacks.condition_exit_state_error(context)


def condition_exit_state_generated(context):
    """ This function used to control that all pre-requisites for performing the next action
            are fulfilled."""
    return fLongFormConfirmationOutCallbacks.condition_exit_state_generated(context)


def condition_exit_state_generationfailed(context):
    """ This function used to control that all pre-requisites for performing the next action
            are fulfilled."""
    return fLongFormConfirmationOutCallbacks.condition_exit_state_generationfailed(context)


def condition_exit_state_pendingapproval(context):
    """ This function used to control that all pre-requisites for performing the next action
            are fulfilled."""
    return fLongFormConfirmationOutCallbacks.condition_exit_state_pendingapproval(context)


def condition_exit_state_ready(context):
    """ This function used to control that all pre-requisites for performing the next action
            are fulfilled."""
    return fLongFormConfirmationOutCallbacks.condition_exit_state_ready(context)


def condition_exit_state_rejected(context):
    """ This function used to control that all pre-requisites for performing the next action
            are fulfilled."""
    return fLongFormConfirmationOutCallbacks.condition_exit_state_rejected(context)


def condition_exit_state_undelivered(context):
    """ This function used to control that all pre-requisites for performing the next action
            are fulfilled."""
    return fLongFormConfirmationOutCallbacks.condition_exit_state_undelivered(context)

def condition_exit_state_esigned(context):
    """ This function used to control that all pre-requisites for performing the next action
            are fulfilled."""
    return fLongFormConfirmationOutCallbacks.condition_exit_state_esigned(context)

def condition_exit_state_esignfailed(context):
    """ This function used to control that all pre-requisites for performing the next action
            are fulfilled."""
    return fLongFormConfirmationOutCallbacks.condition_exit_state_esignfailed(context)

def condition_exit_state_esignrejected(context):
    """ This function used to control that all pre-requisites for performing the next action
            are fulfilled."""
    return fLongFormConfirmationOutCallbacks.condition_exit_state_esignrejected(context)


# Entry/Exit callbacks do not return anything
#
# Name convention is
# 'on_' + 'entry_'/'exit_' + state name in lowercase and underscore
#


def on_entry_state_accepted(context):
    """ This function is used to define any action while enter into state accepted """
    return fLongFormConfirmationOutCallbacks.on_entry_state_accepted(context)


def on_entry_state_approved(context):
    """ This function is used to define any action while enter into state approved """
    return fLongFormConfirmationOutCallbacks.on_entry_state_approved(context)


def on_entry_state_beingedited(context):
    """ This function is used to define any action while enter into state beingedited """
    return fLongFormConfirmationOutCallbacks.on_entry_state_beingedited(context)


def on_entry_state_delivered(context):
    """ This function is used to define any action while enter into state delivered """
    return fLongFormConfirmationOutCallbacks.on_entry_state_delivered(context)


def on_entry_state_disapproved(context):
    """ This function is used to define any action while enter into state disapproved """
    return fLongFormConfirmationOutCallbacks.on_entry_state_disapproved(context)


def on_entry_state_edited(context):
    """ This function is used to define any action while enter into state edited """
    return fLongFormConfirmationOutCallbacks.on_entry_state_edited(context)


def on_entry_state_error(context):
    """ This function is used to define any action while enter into state error """
    return fLongFormConfirmationOutCallbacks.on_entry_state_error(context)


def on_entry_state_generated(context):
    """ This function is used to define any action while enter into state generated """
    return fLongFormConfirmationOutCallbacks.on_entry_state_generated(context)


def on_entry_state_generationfailed(context):
    """ This function is used to define any action while enter into state generationfailed """
    return fLongFormConfirmationOutCallbacks.on_entry_state_generationfailed(context)


def on_entry_state_pendingapproval(context):
    """ This function is used to define any action while enter into state pendingapproval """
    return fLongFormConfirmationOutCallbacks.on_entry_state_pendingapproval(context)


def on_entry_state_ready(context):
    """ This function is used to define any action while enter into state ready """
    return fLongFormConfirmationOutCallbacks.on_entry_state_ready(context)


def on_entry_state_rejected(context):
    """ This function is used to define any action while enter into state rejected """
    return fLongFormConfirmationOutCallbacks.on_entry_state_rejected(context)


def on_entry_state_undelivered(context):
    """ This function is used to define any action while enter into state undelivered """
    return fLongFormConfirmationOutCallbacks.on_entry_state_undelivered(context)

def on_entry_state_esigned(context):
    """ This function is used to define any action while enter into state esigned """
    return fLongFormConfirmationOutCallbacks.on_entry_state_esigned(context)

def on_entry_state_esignfailed(context):
    """ This function is used to define any action while enter into state esignfailed """
    return fLongFormConfirmationOutCallbacks.on_entry_state_esignfailed(context)

def on_entry_state_esignrejected(context):
    """ This function is used to define any action while enter into state esignrejected """
    return fLongFormConfirmationOutCallbacks.on_entry_state_esignrejected(context)

# ------------------------------------------------------------------------------
def on_exit_state_accepted(context):
    """ This function is the place to reset values that you set in function
    on_entry_state_accepted """
    return fLongFormConfirmationOutCallbacks.on_exit_state_accepted(context)


def on_exit_state_approved(context):
    """ This function is the place to reset values that you set in function
    on_entry_state_approved """
    return fLongFormConfirmationOutCallbacks.on_exit_state_approved(context)


def on_exit_state_beingedited(context):
    """ This function is the place to reset values that you set in function
    on_entry_state_beingedited """
    return fLongFormConfirmationOutCallbacks.on_exit_state_beingedited(context)


def on_exit_state_delivered(context):
    """ This function is the place to reset values that you set in function
    on_entry_state_delivered """
    return fLongFormConfirmationOutCallbacks.on_exit_state_delivered(context)


def on_exit_state_disapproved(context):
    """ This function is the place to reset values that you set in function
    on_entry_state_disapproved """
    return fLongFormConfirmationOutCallbacks.on_exit_state_disapproved(context)


def on_exit_state_edited(context):
    """ This function is the place to reset values that you set in function
    on_entry_state_edited """
    return fLongFormConfirmationOutCallbacks.on_exit_state_edited(context)


def on_exit_state_error(context):
    """ This function is the place to reset values that you set in function
    on_entry_state_error """
    return fLongFormConfirmationOutCallbacks.on_exit_state_error(context)


def on_exit_state_generated(context):
    """ This function is the place to reset values that you set in function
    on_entry_state_generated """
    return fLongFormConfirmationOutCallbacks.on_exit_state_generated(context)


def on_exit_state_generationfailed(context):
    """ This function is the place to reset values that you set in function
    on_entry_state_generationfailed """
    return fLongFormConfirmationOutCallbacks.on_exit_state_generationfailed(context)


def on_exit_state_pendingapproval(context):
    """ This function is the place to reset values that you set in function
    on_entry_state_pendingapproval """
    return fLongFormConfirmationOutCallbacks.on_exit_state_pendingapproval(context)


def on_exit_state_ready(context):
    """ This function is the place to reset values that you set in function
    on_entry_state_ready """
    return fLongFormConfirmationOutCallbacks.on_exit_state_ready(context)


def on_exit_state_rejected(context):
    """ This function is the place to reset values that you set in function
    on_entry_state_rejected """
    return fLongFormConfirmationOutCallbacks.on_exit_state_rejected(context)


def on_exit_state_undelivered(context):
    """ This function is the place to reset values that you set in function
    on_entry_state_undelivered """
    return fLongFormConfirmationOutCallbacks.on_exit_state_undelivered(context)

def on_exit_state_esigned(context):
    """ This function is the place to reset values that you set in function
    on_entry_state_esigned """
    return fLongFormConfirmationOutCallbacks.on_exit_state_esigned(context)

def on_exit_state_esignfailed(context):
    """ This function is the place to reset values that you set in function
    on_entry_state_esignfailed """
    return fLongFormConfirmationOutCallbacks.on_exit_state_esignfailed(context)

def on_exit_state_esignrejected(context):
    """ This function is the place to reset values that you set in function
    on_entry_state_esignrejected """
    return fLongFormConfirmationOutCallbacks.on_exit_state_esignrejected(context)


...

  FLongFormUploadTemplateModal
"""----------------------------------------------------------------------------
MODULE
    FLongFormUploadTemplateModal
FUNCTION

UNITTEST:

VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within
       the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this
       module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongFormUploadTemplateView
"""----------------------------------------------------------------------------
MODULE
    FLongFormUploadTemplateView
FUNCTION

UNITTEST:

VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the
       core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this
       module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
eNqtWN1z28YRxxdJEKJkSfFH7MbupbHd0B3Jbe1kph7XU0kWHXVkOiNSToKZDgbCnSTIIMAejpaEYZ6c1/4P0qP7J+Gt0yf/C31J
dg8fpEhJns6EHByOi7vD7e7vt7vH/yoTHwOuv8EVP4CGKrZCVaoFqq3Ku2ZrLxSqU+MnhRpMO9Df6bZBtY7SrPxH1xRl6Vf8WC9f
Pd/eXLcIfFqbUbjXinhvux9ELu2yXj9wBXvts0Ortd1e6268alvWdnuj213vdJ9Y1uv1rQ7InpB7W/csawuEWxtyVOfh5sbLje6K
7D+Ri/9pmayEx6QXUX/X91zhR2FMRETEPiOxx/2+eMhCjx/3BaM4ahCwh17AXE4EOxLEiygjh77Y90OcIpeEjxdxRvyYhJEg8aDf
jzhMX5ZP/7xMuvvwKFurGOQNYhH1/MTdCVg27hGOY7BSrx+FLBSk5x7LoYcRf0PcmLCjPvNwV/h64k4pQWFapokfF/vKX+oKMogZ
JyyETf2abvuAKGp7k7jSC1wNoWEK4EmxNaraOtUAQRJRdoVWaBXuVVajNWr+pLxTbRP6dWrJfh36M7Qh+xb0Z+mc7M/QK3Qe5jXo
Al2E+yz9hF6F+xy9Rq/D/Qq9QT+F+zy9CUi9lf7mEjgl94kXuHFMOOtzFqPVtxg6D4eTtzAi801y52Vn6buIU9LyAxaTLx8s08g7
ag6z+9DTxpTX8msNDfAYmqE6VBygFrRAK2g12eqyNWRbkW1VtjVJMT15QNZExMkuXKUKo91JNuReJq1200wr4Gw3sGcdP3YY9YUD
v1n6ac+JBzuOyLV2vH3mvXF2oiN8Ero95sQskLgqx8g5UjiatjMQIgrxyUBacerJrZ7z1g18iqLJZ/Weszs4cmiw19RSA5be5Rh5
3iu8Abf/3bnEQ8v949R0HD8EfZxbaNF5CbCqOv5N7l62RDHdU8e8pObXWrHmUDlQDlTeoGpHyT2wTjw3CIBxO8ektbL9PXmxvUF2
OQOrSVIe7rOQxO5bRjJFyR4TMSDK994wWjrnA76m3dRsdBAL7Br4Bye9V/kMPJE2yJpZaNKZb9yQBmyl3w+O7+PmqlJhUzXU5PeX
qTk2bwqP+qSmJ4DGU1VVUNumltwla6Dpjuu9kXjLfJxrVSoCOki/pQtRWMAgV/a9JnVJ62gwB9eZUIsvQrOEO5BbM5Kly1SZWn9K
IaNQ6PqYQgfaiX46rtbjcu9n1ANCkAKjRBIC+DCmppGp+Tls43zuFNviFRhn19ZQDr8+mXYnvwbNo1LvSvLXj+h9+Qv/b8feO6N4
wdCLPGtfhR1M0fg8vdIb4yN3RFjs8MmYjx99RNfz5p/RELWrFBquQiNAv1PlRw19faAPNccASeVUOanCVQOpeVI/VYbaqcafDZUT
S8wMtZPGKeSNMZssTaBBhroRIKZsM5vqrtez51oY/DtytI9RDSIKJg/HSa3Wxua60/3h2/WObeEouMButrb9vV177rtBtBfbs6s8
OowZmANHcAvtXenssyBIb8VMTMdhGZ5TPRbcbnTyhzi1qWeB4yquUI+LDU166DZYuFxKREVIz+0s07Mp/WSqlnZLTf7yEW9dvNbF
qHw8QqX0QMZRWvSNsX6l6OfBtwmOEbIsKz0Dxc0Oy4PTWIDttptVXpVM7DDx3BUuN+Wv9RDLK8rraBPEUTMLU/bsGRNPUhbTzN9L
8+gNFb/J15eZ52L/TSWdEs9diWeqvsv0V09kWQCoVk713DqZpFJKqrmkVkrMXFLPJFQH2xnJF6Q1CCUo0GYupTKRIeLLypCki5zt
+THA1Ckf2uYKzHoLe283rbTS534oeA0tNrNCacEa/llhTxndpLFlfM8MjRGZz58TCm9Ds4WaL+YZzVSrPxta1i6qyfJlFp7e7MWo
G8qi60RBPGHRVVhXIg3lupTraG2QG6W8IuVGbvtqKa9JeUWiVKNmKa9LeTX3jCXROwMeaCSPs6J/t3ADwRIEAoGfQPkYuMfRAM8S
YN0oWB65ZL5QuRtlhE9uryHFyD7jEv4TsSqd6Qx2ijnJVzIPScpAypBHAahVJjgEBwn3TAJM54vYUi50o3s+49Jq5pjJXeXlQrmi
+ToP7MlS0RvbwJ7rh7EgTzdaz+AUQ8nTzVevvn1GhLvXbtZs6wUTa5lhMuTVulEUdP1+BrhqCbj6iM9pNbPoZAS8OTK6k41wcpv/
A2FydYzeDbxr2ZV8dRkQL1zT0ycyl1ng8Sk0yd2S6zkmT7RhhkgFqxZV+U4JFw1FGMdfqwp+f1BC7Y9FNLx/fimaV6IjBDWyKnAN
HQ8krvA7aA3MNfxewcG0vn7ksT7iMk8lcDAL9vjdcziLFWiEOsxJrTTkrGqpDQPM9OXHq9FsH2diIDK1Xljm36OcDhkCOAQHpFNN
sktHlsqeQQ08K8ovnBRPayg9qOBJEU+I/9LlqCra8My8Wi4x6WwuqdM5OpevD0eu8l2jERU4XV7JpcWK+R38MJ88n+C1JxUsKY31
BBplF8+PJeR7bujuQcYvvGSb6wJKO7oR8t+hP4w2HN3554iShYKMpLDmh5/hA1UE23UHgWjx3+IwfXl5uduEQ3IMOOxGLV98QDRz
gs0XyAyL30DHzre2jzbl3lYHfkChJmmsQiQNXzMuVqOj/Nc3EU/wlwlRfiPsD4Rdh96qLITs6npI8WENRFB+BHJUp+96LMsKef1c
5FYLTno72bsm+TibWSvnzY8IAJKnggaA6ro6r5qaBRCzJCexxSSRNC8D2pk1280FPC7Kcy2UZY6T/QEC/Ybj/HPgBvmTmuPAwd1x
+E3cHGKbL+AOG7Fwhe/1mNiPaJbTrpU57bOiOJAsyviE/OB/OEucEXswCuD8GN0MJzgNsl3DrGmqVYGrmt/rpmnOmIvmnBwPnH2I
c6X7auC+tYgzu5E5Masl5bjzXpiaTzOFn6nFydGYBxPqvwAQtjwS""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongFormUtils
"""----------------------------------------------------------------------------
MODULE
    FLongFormUtils:
Description
    Utility functions for Longform modules
VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within
       the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this
       module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
eNq8vQl8XFd1MD5vmTerRqvlJY7z4iS2ZRzZcRYS47iRJY2tYI8USY6TR9JhpPskjzyake97sq1hFGgcaFgCZi0UAjZtU9LSjdIF
2tJ+0FJoaUsppfDa0tJCW7pQ2vK11ND4f8659y0zGjmBr7+/9Htzl3ffdu65555z7jnn/m2s5S8Nx31wOBOpWIzFrBhTmFpRLIVS
1VIp1SyNUt3SKY1bcUoNy6A0YSUoTVpJSlNWitK0laY0Y2UozVpZSLVKx2LOyin4LL3SudhldVE+Xule7LF6KG9Uehf7rD7KJyob
FvutfsonK/HFjdZGRbznJmsTpKnK5sUt1haqS1euW9xqbaV8pnL94jZrG+WzlRsWTctcvNG6kcodle2LN1k3UT5XuXnxFuuWxR3W
jsWbrZvlvXdaOyHtrOxaHLAGZN0ua5eduLSbdbFu1jOvXlatF1G5NyjvoXIf28D6qXzrfIxtfL9iDVL9Jmi3mer3UnkLnL3u/QqU
99k3X7rtcszaDzVbof3t9T32fnb96dhFhT8Dz95WuWPxTutOJVbtoje5y7rLvuvSi+GKO0/Gqjv0mH33RWXly0rMukeJ1bMnYw/H
mGrd87J7qmmR7ovti8G9b4B7HzgSYya78YkYu/GCar0EStvZTVC6CUoHoXQzuwVKt0DpXijtYDuhtBNKh6C0iw1AaQBKPwCl3exF
UHoRlO6D0h52K5RuhdIQlAbZXijthdJhKO1jt0HpNigNQ2k/ux1Kt0NpBEp3sDuhdCeURqF0F3sxlF4MpTyU7mb3QOkeKB1hB9hL
nohZR9lBdi+kY+wQ+wFI72f3sSFIX8oOs2FIj7ERNgrpcZZnRyAtsKNsDNJxdj97KaQT7Bg7DukDrMDGIZ1kE+wBSKfYJJuCdJpN
sxOQnmAPspOQPsgeYg9DevKiwn6IvYw98oRiPQT5x9mj7Ach/zDkL7AieznkLVZiM9D2ZWyWMUgfYTabg/RRNs9OQfqDrMwWIC3C
NU+wCluEa17OqqwGdSW2xM5AOsM4cyCdZS5bhpSxs+wcpDY7z1YgnYNrX83q7BVw7TxrsFWoO8UeY6+EtAznXgNv+TicW4D8D8Ob
PQH505B/Eq56DeQrUPsktF1kr2Wvg7TKXs/eAGmNPcXeCOkSexO7COkZ9mb2Fkg5eyt7G6QOezt7B6Qu+xH2TkiX4Z6vZe9iPwr3
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
7+cwLx2b61UaJCgDFhMY1fzGALW33OqDd/eht9Oj2LMR197YCiXmxiCXY4wQMB1peGKb34dMBaY29k2+CozF74evhcuvll1rYyvq
ZXXqrTdKEx3pBZXnLrIPAQHjeU6A1JdqS8RFyHj64jTdLqoX5wTlf3jRONo2sk07MN0NUUaNtnMCHwVaJr6RUP6dbyAFos7zSZT6
Uc0Ef1nPmoD/fa/yAw15D5NXDWWPIJMYkuzRAhPl39ec7zdJ10/NR1paTs7TH9ZV4lmKfUTbSV5/SM7Fj5iKbn/QkCuxK3+bHDha
D6vKn0q95k9z0pGBtZ0pQ+XzKtCZ8gdVMQs2waw4pBHNygxtQ0b+5WJyxBR/GXXn7lBgoznet7TkZrmIm5DAxC+c5B4Dl/CzXzPE
3Z69nlhMkhO3iQrt98HQ1nf5mGgGnkHOFR2b2RMLpLQkUkmaKm+mqYKhZxw7xLxJ6fi5GSTmE9UlBDYCLhNknLfWXf7p8v4oXRcl
Asnvq7R5zRtUvlgZno+sDYr2TFSbBRKYkGuFi0dL0om8nD/VoNh+zgSo00YrisbFWxK8rYaYJuYDOX0nz5CbO6YJ8KRCVK40uuzI
A6qagB1L57WbpArHHjQwc0Xq5ZQp/nOcWTkVH2iwTt+HQwHXEfa45NrSYJwEiVMyH2Pu8vzjOLQr7gIbVH+UlBgz5Lc83jg3MUUE
p23BDaMWdV+MKLxziaJfdhDMNM6BZ5v8XmGv6DlvKB/K8owdtA3xXzaNHDkZ6KMn5I6MuugJ2L14Nz7A2SwYncuzF5MLqA3chfsh
7FPSonJ1VxQCNNh9cLqFDB4wJyjt5J9rDWBkg6G95T3sMpMNvl8589iyuIyZjRrlrbIYfZsFphlCfc+PJnqYz8l3XAK3qzpK+VCg
gS1XN2YlEX+1qYPBoWAmHFQyKitJVf7EBSAC4qBr6tCTMRVyQpkQJ9QyQ0P0Egj17lpJZigcU0luUzwutHQytDhIuCG55gIFg/IM
oRXxqzFc3021Bkkg8gUVlQLxArbAVev+1nwoDGXIsF8m54H/GjVNdzFrlD7VpBWASSgsmiAJdJ+mzAqUaYHOgWyLk5Qs1fRt9Axb
tOEsSWVJbacfPqFM9LRvwIZVuygQ56U9cEaeYQao00Cz5tfKaVg3Z6dPv73sTJw98QCewXChLCTQ6V70ERYcIfQQUhxzbJQIMkN7
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""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FLongFormWorkBook
"""----------------------------------------------------------------------------
MODULE
    FLongFormWorkBook:
FUNCTION
    - Import workbook data as xml string
UNITTEST:
    -  test_FLongFormWorkBook
VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is
       not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at
       user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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
0HyLlo3HWMamU6eW/hNiOeMg""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FNodeSetProcessing
"""----------------------------------------------------------------------------
MODULE
    FNodeSetProcessing : Module containing processing of condition and loop nodes
CLASS
    ProcessNodeSet - Deals with simple merge fields
    LoopNodeSet - Deals with loop merge fields
    ConditionNodeSet - Deals with condition merge fields

VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the
       core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this
       module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
eNq9fX2QHMd1387Hzs7Oftze3gcOIAguTySIhckDSEkQeTqCIgEcBQY4IMCRlkYiV4vrOWAPe7u3PXMgsZiVEwGi6LJjIwztOJao
LJRUyrRdqcRRFIV2lMR2KaqUS+VSUv5jy6myK6pKpEolqfyRP5hEzHuvez52dheAY1UO3J6Znu6enp7X7/3eRzf/Yyrxp8PvU/Bz
b0PCUnaKKUxtKrZCR9VW6ajZGhy1pr6dttOKKGPYBh0zdgaOetPcztpZec+Ccjk6Tzfz2wW7sF20i0rqxRQzWOZWimWcqZuaXYJr
k2XhOntTtafhymI5uMrBVZmpF1PV/J//gZpKPfFT/LPOnjv58plTVgX+VtfazLnoeOd5e8Nx3UbrcmW5crbNdptOZaPd8uqNFubt
RLfbm3iDNbxGu1Wpt1il2W7vVFrQjGudOPP8xYvUrmxPtl55onLSqTfdyusN70rFbWzvQPPbDr/sVDYbTpO5VOcMNDS2Aj1hpPiJ
oBdj60R9HKpovXLqwsXT59aWK49eeNSyLpy6uH7h9Il1yLl45Mzps6fXn6fzZXrCk0uV51vXK9tt1thsbNSxNbfitSveFafibvDG
jnfEaW3w6zuew7AUDNqRjaZT5xXPecODLjCHOtNoYRVqEv422typNFwYMq/i7u7stDlUX6K7Ty1V1q/ALdFWUGhj1/Xa241u/VLT
EeU+iuXwA23vtFtOy6ts169T0dfb/Gql7lacN3acDewVjUV95CUYVBNv0nCDfsmH1r3KruvwitOCTv00ye5HONfWqsog7XjcceDk
wXUHKKHuOa/Umw1GXVutN5oOO8V5m1fVgbl2bv306ulTFwalE+fWVk+/WDv//IXnz9bOvfDSRnIWa8Es/t+QOCmYvSmcuTBrjzON
6bcUW2dpZtxK2WmWYSYcDZZlFhwzLMfycDTZc6zAilAyy6ZYCXIsNs3KcMyxGTYLxzybY/NwLLA9bAGORbaX7YPjFHuA7YdjiT3I
DsBxmj3EKnAss4fZIhxn2EfYI3CcZY+yg3CcY4+xQ3CcZ1V2GI572M+wx+G4wJ5gS3Dcy46wo3Dcx55kT8HxAfZR9jE47mcfZ8fg
+CD7BHsajgfYM2wZjg+xT7IVOFbYs8AxPjUoDk+/7jn6xkRa8B+S76W6C/TTrLtuZbPN4/PbI8KSk6feTExxQX/rG5nYyON5Gn4n
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""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FReportFormData
"""----------------------------------------------------------------------------
MODULE
    FReportFormData
FUNCTION

UNITTEST:

VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core
       is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module
       at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FRouteMessage
"""----------------------------------------------------------------------------
MODULE:
    FRouteMessage

DESCRIPTION:
    This module provides the implementation

CLASS:
    RouteMessage

VERSION: 1.0.9-0.5.757
----------------------------------------------------------------------------"""
import FRouteMessageBase


class RouteMessage(FRouteMessageBase.RouteMessageBase):
    """ Class which execute actual logic to deliver report.
        Don't Customize this class
    """

    def __init__(self):
        """
        Init function of the class
        @param routing_method: Name of the routing method
        """
        super().__init__()


...

  FRouteMessageBase
"""----------------------------------------------------------------------------
MODULE
    FRouteMessageBase:
CLASS
    - This class defines the routing methods possible to route the Longform message
UNITTEST:
    -
VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core
       is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module
       at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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
7eUh/oeQGJq95hCHlKy/AQ+EIwQ=""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FSheetDataParser
"""----------------------------------------------------------------------------
MODULE
    FSheetDataParser
FUNCTION

UNITTEST:

VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the
       core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this
       module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FSheetTemplate
"""----------------------------------------------------------------------------
MODULE
    FSheetTemplate
FUNCTION

UNITTEST:
VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code
       within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done
       to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
eNqtVUtv20YQ3uVDomnFdoI8mgAptkUDVC1qp0kPgeEaTR05EJDIgSw3KC8Ey13JdClSXa5qm5B7aHLtLygCOLfmT/SH8Fb0lB/Q
Sw5JZ5aS/MwtFHa43J33fDP6l5x6TFjfwcpWgXDiEU65EVOPwtuMjb7pmRTPrNjq255Ny/uKV3lIuM0rzwmvPDO8Kjc2Sb36z3+U
kK8+4OM+3niw9ajhMnjWN7eFUB3RH8SBEu76Vmut09xoue5Wq9npNDY7y+4PjfYmHC2zW+1brtuGs3ZTM20uPWo+bnbu6/2yVvf1
Iruf7LN+yqNuFAYqSpOMqZSpbcGyUEYDtSSSUO4PlODINYzFUhiLQDIl9hQLUy60Hnh2I7UdJVoyTKVgUcaSVLFsOBikEsQXNeOd
RdbZhqtS14QpHGYq7Ud58FMsSr67yIea+oM0EYli/WBfs+6m8mcWZEzsDUSIXqFdFpwJgoPYxDUd0JHRQLFhJiQTCTj1IQv1GrHU
qtPCaW10muvNRhv2Cz2h/Ayr5g8CCXbD96LvHhBBAHXEMzj1TG5wo0e6Jje59Zx6Vok1z+ZV7sC7wme4C+8Sd7PF3Elw5Pcm8Y9T
HiRBT2RlbZFRjRlZV6Z99qTdfNwok98KrWPuWWMX19DFO0BGdER8MjKAQoMABTcjEuHOVBac02d4Z49MoBVOwTkz/3bqDD5rKpWs
CytKIhUFcZSd59jiVKblzUkxEAqYfxW+THfr1cItk5oEfVFYan8giks8UIEfZP5eP/YzJaOkN+HCG4mRFLXjtSgu+BFYy3yV+gHn
dauwMhF3ZQU4ZRWIN4v34+tXRF6AszcXTyZ6cbBfOL6Pofj+DcxSDfNWrVD8uUaN5tdOSUy4Q3os0bg3Jom+iokmOyRbGJFD+pLo
lMM3JJPmn7K2UEOJMIe4sB0gYtaN4inkWd2QDoZ75Qh+x7Lzikr0UYdTkjlkvto7yTZOYh0dqmioQjw0v3UqmvOlTsRmw3Insf0N
REFUCJ4d40/CjRfmSwpT1Tygytyx8PQ6OTBGRrasbG6NuewX5jP6O81vqMphdWQcOpiVnRm8fQmST0nSsYiy9/+i5ADmdb7CK2PJ
6sjUVuwDC+y6IwutKbJD1ewIdHKHz/xhUPKU/Ig+mL+ZyeXyfZvcLj11UUIDvzZCQM/mN8+rwTT9+Y11oUIYiL3yGrDeL8HNVt7Q
1VZ+uZXqWVaeIYg5W8mdVeAcwlzK7zT2QjHAWcZ2t6GwrDvRh6UudWLbHulYyWdXF1lDSmir5ZXXmH0cRWIvBLB10/zuZjqUoTgm
jxrBbDYMQ5Fl3WEc759SWr8gsfUL+0Hj+62Hui0KMwj73pX1jgw4uHMCCcXM1GuYRo/SpLcOcW+pKM68K9pciRM0UoLSqx3XI2ex
5exGu73RLkyAkcZw3dZg9dwjbHlzJaQnk6KwBcbtVeO05/ez3ilgywUgtxF6X2gUX6YWrcG6RA3As0Wtt445B3vrnUWNd47h0s9h
VWj+2TlIP9NMZ5p4Oi2/Ob+JjexjZXKKYMavQwQ40QCDrx0b4GXkXzKp4aXLVQaNGONRqDSYAnU0HfMlAFM50Er44D+e/j4urSur
nV+sV3Ri5SUk2JbyI13lUscMHlx833g4GT76sz4deXo8VKhD584fEmdl6w6OToS/7xeu75d/0bCv+f4vwyAe31R9n6eh78v5qdtY
UnnzpJdHBcd5gyM0QzaHWqYB5TXeuvNO1bmqb+uO/AQ5ryG05qdgXUuTbtTTqPcWyhAegL9PdGb0P4i8PjFwnuXCWSljWEUkZJhc
a94BtNWoY/4PEf+65Q==""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FTemplateUtils
"""----------------------------------------------------------------------------
MODULE
    FTemplateUtils : Module containing utilities function for MS-Word template parsing
FUNCTION
    collect_all_fields()
        Collects all the Merge fields
CLASS
    SimpleField - Deals with simple merge fields
    ComplexField - Deals with complex merge fields

VERSION: 1.0.9-0.5.757

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the
       core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this
       module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
eNrVfWuQHMd52Dx3Z2f39vYeONzhxQHAB5aPA0jTIg1BFEHgjjoJWEDAkZJGBFd723OHPezt7vXMgcBiVk4IWqJlW2EUOWFiM7lT
HgriSqLISiypnKRSSVVUjmzn4Tj2JFHsOI5FR1VJHFV+oBwp3/f1zOzsCwQkppLguD3Tz+n++uvv1V83f0/q+6fB71n4uXtkSWKS
LTGZKXXZlump2Ao9VVuFp1rXNnRbl7GMVk9tpO30hmEbFNfrmQ3TNmVRPwvvufB9zB6DZ6qe3xi3xzcKdgHS0/YEM+xJlrGnmGlP
s6y9yxlbn7FnnpdYjo29JrExR7+p2rtZno2/Jtmz7CE2wSZfk+05NsWmIWUPlNzFZqDkjLMXSu6D+G42C/FZiu+H+BzbA/E9zn6I
H4D4XrYP4vsofh/bzw5AOxa7j1nwPMgOskPwPMQOs/vheZgdYQ+wB+GL9zPlolQs/u5vKZL02Lv4zzx77vQLZxZMC/4tLjsbrXrF
c17wanXXOm6dbbKtumNVmw2vUmvUGmvWFuTUvJrjWqtbjapXazas1Sa3zl587CNNziwvbMBqVbgL5c3FF0qnlpfOlaj9arNed6pe
uVKvl1drTp25R4qUgf9OiUzXglzLu+xYZx2+5liinHnqzMmLF6nsxRp8wlnEZOsx67RTgZ6+UvMuWy5lWBvJaqJhTL82pEZV5PRW
MV9cuHARenzceuDCA6Z5YeHi8oUlGsPFo2eWzi4tn6T349T24/PWycZ1a6PJaqu1agXh4Vpek/rvVnmt5R11GlV+veU5DEsBNI9W
606FA6SuedAB5lBXag2sEsGi2uSOVXOtRtOz3K1Wq8mh+jzlPjFvLV+GLNFWVKi65XrNjVq7slJ3RLkfwXIOjbDZcBqetVG5TkVf
afIrVsW1nGstgDb0iiBRGRgEg2piJDU36lf40YpnbbkOt5wGdOrdxMW3kRSUinKgLTS2NopKkLZrrcVa3Qly9tL58umFxTMnlxdO
QwHd8bjjQIn9Ecq+WKnXGPV9sQI12ALnTR7sfaFxslp1EPynLlcaa4672NxqiMz2Mzcue17r+NGjbvWys1Fx55stp3Ftow4IvVHx
IMrXjgK4WIs3q46L6LxRP/rEsWPvOboBq6FzV/VbleqVypojqnGnLqB7udZyO+2nK61WPQT40asAzN76j4V153uqPQIF2gt38eXm
Kkymc7pZ3dqA+R/Wgdqzz41L1X5SrEak+AQEjgQkWELyC6RXsTWm2jrT7BTT7TRL2YaTYWlmvCbdlG0T3jPMpPcsywKxygXZU0A5
4OvL11tO+3lCI8Je+K9iXXbqLcCiar3i0pqB+WF1wrmqqGV5UM1qrtJqYs3qNYHa7aV3gJsYOQtHPt8/hfOXnQpzOAHyh21qtdn0
wqbO/5BNxTmIXO9K51zvet0RCHPmh2wKluOKw+EdW6vKCXRRQpQ5hShzCAImd2RP2pZ9aUd29/iSJ60r6+oVhR9gSkf2ZUAMtf3n
YrJP+BDzEkDn6hXADzHna7WrTkNgARQCRBAz96glwG4B48FiCDDEj7jNZ4H7VDasq5X68R5c6hbgjrfFG8etlWYTqHEjzlhcLmo8
A6MICjW3LD5XFl8L1NPnTgU6NLrl3FICFV7sNLRThpdbEh+HSrcnejnofOt6MN3fThl6+gQCy0DwpTV5RtbktpVYKfPDqgwAXYmA
fn8IdAK1vK5cUdx99K7iO7cSYP/0uwH2dxXMqQ8snDy9cIHnKLJ47twyRMYgQgAVQQEDE4JnkmCbRbDtuxPYSkCBjHK5UdlwyuXA
LJcF/4L3XLm8uVWphznpMgK4XOaT+KEpDLLYHf3i8sfOLASZ0gtnn1u4sFR6Psi5Hiyh6objXW4yPhH1K9HXbodxeEeww9MQGLKm
anL4pyiymVVkKtEzrVg5HU3rPEzwmtSR4afAT4WfBj8dfimY7jT8DPhl4GfCFGd96bR06Y87OT+3Le1IvO2nmfqU1En78rbsKX76
pgw56o60quzIsgTvGpS65qeG5W4eg5gO+V/yDWrF8GX+JrSU2pFkqTHjK1TLGFIrDbX+p5+hWhlfpXKZgW8bUOq7vj4sl1rJQP4x
36RWTF99Q+Yz0BZ9HfI1qmcO1JOhnO3LAAfrJaUz1sn7Wab5+Z+TmO6PQZh6S4f2sm/Im0/7CpT91B3KpuOyjL7/ZV/tKWsMbfcN
X4Oy3/K1kWW77f6yr7+hcM3XoeyeuGyGSplvqWGpb/spKPWwn+oplaVSubCUsglpsMDH2g1zcHFfFZIRiOy4uFcqbq2Ky5XVKBeY
rlVvNluWV1kTgt5xsaxJHC7Xa64nRN3j0WJ2PWQElMaRCAXS24jEbW25sma1x1A8bDVd0Xq7EIuo9aaLQmx7L6aImLXirKKoC6tK
SLjtzJmwK1Z715lz587Ta0+D92N1ILLe9XnrPBAVF3QN3rxaA0GaKuCaNttTS4uDVR8fXbULDxA/HKTxALB5s2gGeaAq1L9yc7Vc
Ww1SwElB8A1UAEOg4deCLBShZjE/h5EGC0urrWaLWEncBMI6GItrUDTfrYPx4nhgdqFvz8SdKzsot5Y3Ki1o254blg7NQNYENtNb
erovSRQsdHsh8ux8NJIwblRBYPawhZx4w45CzBQxrGnnuzkUz4jPIIR0GohtRLPArUFSGYxHKBpqhR9C+reKFDEVE00gm92nQX8z
8JulN002ldm+tBSmKSk5J+8ZEU6HIS/ClxaraoISI1XXI0p8GtDbl9aBySLd2ZGBqU4DxVUoTY3TznuqD8JvRwVKpSGl8hVfLeu+
up5i2pbMS0A/076KtKrxG1RXj+oCzbgfUoztDEuJtB25o/kaS0O7X/DMm0D3gVqmfWk7uyMRDcW2dHpTfL2sN16F0kbYkswyc1iD
SndSUDO3g5wg7aeuqPx7wBm0LYn/DjM7hjeGVPxV2U9v58My+vr4VZn/E/pemigrvhfEO7yJsek0Kkl8b3sC07xJHD/QqclOxpvy
M77sKzdVGcpsPso0oE/Z2784hD5xp7rFXZA56tcjC0HCCADKXNIQYK3y5obICU0OHz17Zj5Jt5y6gzLscYuDEBDFRhA2q7nlWZTq
RIJNTOZKoABTym39RsdbqS+3szc6q3Um7A+l2xmKgVbJb4/FryiHBPqKs1ZrBCqsh7e/D//a732hUQm1UBjt1ZqLUnhV6KMgVIFC
ar1yGZRWqytzx5aU4nSgAiULUkJUD9JnTy6VyqWLQTZhCAmmXRBEaw1YcVsE1DKaF4IZMdQVp95srLllr1n20EIQURckXvwACV4V
D4j6SqCuOV6QSxpMggwkAYQAhsEEvIaELAQrR2HMTkN6A79XQKAiFQuz3aCA/QIFr1vjMH5Pw4LB5KA9CAhuOir5ELadjwkndd3O
CSuPKG7nxEBE7+2x0J4TZmaRHoWN2WM0J1E0UDfctUCvAtBZv9yGuu+fxmX/LAmaBSA4hYigALmYhD98z0PMoJ+hGCERMiglp2Bq
DtJzMrVWVfrUay2iLA9CAKtH8mlNe3K4fvIdBeQbxZdvKrD6JhkK7yADkHFEpRnj70cwTg0C8HEocBILIPT4qSFy6WkI/j5+PEXj
M7GXmDbaEPAPRhgCnNR6et2AMEOhuW6sqqD6a0x/TbJzLMXS8BxjBsvAM89MloXnuLCs2oXQpjrBCmwCnpNskk3Bc4pNs13wnGYz
bDc8d7FZNgfPGbaH7YXnbraP7Sdb7AF2HzznmMUOoiWWHWKH4bmX3c8egOc+9iB7CJ772RG0mwbTJceF9RfpZ+dW1gFwtl7bqKw5
JMbUvq0OmaqYCXwBAg9mbl1m8lOgfJVl1LY8ZRomr6x62rq+naIQBG4k30wBEgyTuA0CNNN2FKbPYUkkilLZZPieXcMwR+EYhXkK
xyks1DCc8CZv4nOK0qYp3EU5M0DedxMplrZn8ckkGGiqxPfhLJNgJpffxjHwYxAU5/gCpuXPPffBhVPL5VPnXiiBrhVkz5UWymeX
zpxZOlcKppOZcarSdAOtVfEuB4bbqteItBggRzok/eiUFuhETkDLWt0CZKTSmTKS4PK1jXowVQ4VRNQPywR0F7Qw8VIW1KCctE6J
tBwt+rIwZAQT5Yi+iIXrNKASczxgES6mhsVUoDlRWdTrGlsb5Rpzg9modmUF6GSlGtOkYDzKiYqOs1qVpKQoIYP2bAebC6YwXfQL
ZGfx0aIaaK5TXw0y8ej5+SGCDmijtUbNK5f/RaS4S0BIciC7TAJJ6f0z4md7/zDcnY/a6sHZVFKFvBCSF4biBOKiDCwexROJgYjB
VMBQLY5pJDIo24Cp26qveRoIJDqoWPoOiSwg/KR8KEc4dls+GsjzhGSEbm3jRqd8ozN/o1NM83OYimReUCq0dfD7MPggkf71Zq1R
TPFPEDxWgesR3mQ2HFaroC3FHhevmEU4ZU+LhGajfj2Rmk8UA4zsBzUxqwpb30LIUY3/jCCZJJgDgVbycp4ItfK9lNZ+cCiEB5ro
0dbRUGDERhgVyQOATL6J9i8FQChva4xIAYFeZ4qXmgE6D/T9YZyEddDPMYUmQds2vMy6uSPzI9BGdjsn5MTNI768PgY1nujooJ3q
6/mrEmi40vY4vkPLKShdgNIplMFEWqgN22HN70JNPaz5+ahfoiTUBwlve3IH9XsDepjanvKmMR3qfR209wz0MQ39M71dkGv45g7a
GbL8j1BPnZMaCkiQEAcZ8ADLQl0gSeu7vVk/e1PeDZwM2odc0coJiZ65OQkI4tgOauqfiFLQZgHxZRpXDmqN+WMi7wRCdA7GlyHZ
E9K29zDoORsHufibVCZP9ROlNr+5+XmCdyGC9xvypdcGIQ7w3nsV5dc3KWdC5GzvQz4E5HoKSuUBVvt9hPN4DLlxhA+Q3wPQwn3r
1vpBkLkV/jno+yH4Hd6REJ7EzVGiPwD9mAbIPEAsAWBG/L3UKbBdItUvrD8IvVD4GSj9EIyhQPrBETbTlw94sX1E5CZLgu6POcWQ
ETwcPh8hO81nqI+PUh9Vngr7szvqD/TkfKcAX0izWZE2J7E5Gs+XKXVPlNqZ8Ceg9mO7pc6kP5nMgxkqQM68P3kC+/Llxgx98yh9
E2ErbR/DvoAO8CYzgXjsbT/ZJ//D+xYaA3AfMdw2tNytlcfivURgIFZ76uOhqa+MMrZ7aR7N2uM3HjhS9Ypu57SzWtmqe2RSs3Wi
DO2J2JwNRXETxW3nb3QuJJiMrSyx2+bLfIkdeYk9UryfCFrptg4JNzp2arkCeofXTlFzR21TxM82mWMbC9dAYWhU6u1C1IVzV0Hr
rWHeeZBYSyhbV2P6mJk/evRGZ6XJrt9Wb3Ra/BFMNCmRGEg7BToG6Q7EWdqZMH2JFR/nKC7yD2OQIrMk8aJAQxN+kF6tNRiIf4FZ
Onl24eL5k6cWLvKnsZhJkrOL23uC80+fOgccH/j68sfOL1wsL509+TyUvRgRapuIMXJCjqo3v4zBMpFs7lQYSfnIz4mgB9kLC2do
IxRVEYU7CQqv1kB4fwGjP0ZCau9nz5+8sHyReAS1WGvAtF+I7KVkdxW2YFMQXuK+BkwgyRIk9vIfweBxDD6CJSfDkglZIchHkrFg
4MFYFcbggeTBysDa4yoJ8YDPYoPEtD+KwRw2PRcqZOV4/0PIMde84hRxMNtog6yCgEPtQ+AnziMITJgYaDSpGWJSONTwlRiYhihp
ZzCkwdkqvNppQD5kg4EKL3wNvzHbxxBjnhQoqw1baddsIxKI7FyzHsokMCg713BeiWP9isDLEPwP5F0t2lIw5QJIISCNEF80yUqC
T1R3pileAGlkVjaVSfihdQVUB1CNTKWgTFO9PVQ6D78D4RPbFEpRXp6BvwKlFCDWPjCU48Zi1oBQE3PanydBHHQjpF+fRd66Lm8r
O2j99l5SOiqKNAztMR8ArqruSPwDQpTxUr4m+BLW8NUT0uaMlwZupPggnqN9BTiSjkIR8DWN4jMgCmXi2nrM1SCv2wZQONMXPNcg
K0eq/fUR2yy4Vl2yOUTmjUjktWoMlH/HxS0U4QuAVC9uJrRcIJYcJ3KIb/P92bUBq0bScyP6JOB6omZo7YgTAgUQpRZpECW+jqpD
Vqw7Iis6yP8bbpCuuay2VvO6655fxWALg2Ys913D6qGwp9EKPkUk4opzneexwM0hGipWekoOd06kNOrcBUBGREDc9skp7fuGIk+X
YvTIaXL4OxUpvWh7uyjdkktFmcjfLZk62C9BTqL4RxpKbM/4EPaKMFNuPzRSZOytczd94Z9BOMlEbvlPDbOQdttFMuCWEh25/x06
QhXupRcvjOoFQSTW0gjZPnxXEOmt09MXPVzf1BdOfcH9K1jNDLctUd3eVjyVLKwGydSKiKNc7cE6vAmKzBXFPfFB6VVY2aTGIE1I
wdqlcnOo8kggORooU3dwNWdgxWrhig2VZmTIt8eIIXsr9YtIMruKNFoAgSQXs0EORxMRW8GDnohZUpNQGxQaWimCjSAL5C9GPLao
i6WQoSbKzZX1IJtgW/Z4IkK60Jh4jUxifQulDMEyTkCBJiBHtBUpbgHe20eGTscQ7bWH1upJo8eLsQIZW6UBpgRz3Ga2QpirIcw1
polyBHOEur6bZO1k3glhqNBL/E9F4pFQJN8QtKLZC9TPRZSHeHMIQF7H4PPIHHPONUAp5My0IY8MD176IdWG4GWEVI4gFUHJHIW0
gyLFvSyg8yMWEG1+rCZWzNzQjw9omnLSxyJH2/3bpGuSOq6U2sbhw4dvdCAoKgJ0o3oQmA36In6ilujIcILaLXsvo78wavTXIagn
PjrcrBHJevfyyY+M+iQacpuJTx4cSaKiRT2aOJ1PEqfnkDhtx8RJKPlrEhCpBzcNWBKKWAKA9mpMhkiQ2E7FpAeFBb19ZZRPRrQV
gvuYIH8uDUgIoCR1HS5Zc2uj4RD4RnP320LloNa6i65UTBOg+pcerTqbiFqFsWjp/RnyjkHxYo1XWpcjCTsVPnPiWSY/mf7puIEB
TkeeoJujZajQUmwfHjo1vXJ8z+T0mGefk3rtL0Cl4I1kxAeBZmkagD403IIsh4ZakAOBK+Ae1ZyEchz516rtZ/ungRQHUFEbtc0t
lJ4ecklTBeDHsI+1A4Q+UbRS0RAyE4FP57jVI0gZqWLRpioT4tMlxGI1VCjIFokKyZ8fgs8+BD8uR14wJLODLH1oOOiSKs/drKai
3D41Qjf3mhYsEmsDN78ZjhfFSOE6GgJGwADlWFiPl+4oQYhWIsXrU/HyVO4gQfTW6RlN+s4SxL0vUvR8ARlf83X0OLkq8ZdoL1Qj
e1sqWf5Edxn3Q67iurW1hmsBQwrhhZ5UPUtWeK3FJgrL4n+2hxkiEo1cl2+RSA1ytEsyBizheHXyNzEg9PkLZPLvBV5QQCZ5p2Xa
geAzsQCuJJcpbmyZyp25ZkKr7pkoM2mbtuTIa21dgilSPOXnJKa+pYYGOyFQqJSqvaXEAoUG0zEr6tE0gbIHap6YJhveaIMdpz1Z
+4SEtu/wGzp+o6N7Bip0LAVizE+TGKOTqRMmOKxn0FeRQEAKy4AiSMJLT39N0d9L59GAGtbTqV7GT/sZQLRvQP1EDtU3t7NebnvM
NxAlyZyXD1MUkbL5jc1Z2vTLtk+SulWurKIboODH5dU6mxdeKEeqzdb1eeY4LXw5IqRKrFHs+tWX2ioQfVuFGbF1ovz2WLQDUiJG
0BXB8hHq2dlEkeK44OnNQc5AaMj/Yizpfi7G1I9HMm+gYd8CI+olfwnR1RTouk0iXMR7EWvsya6tJcbPv0TFsEsVXsXt6Eq3g2jn
mEhERBV7V9xonIetzw2UjCw6/YvgkxC8iYvgUWI2mryHBEYtXAIFZTIUIgvkimh8X1MNMqG054ebNkaZkkrFAxwXGt+FwQwGSMX4
BzD4+UHTmLBUoX2Kv4LBSmyteznSnvlPY/AzGHw2UhRIBhbuNz8bSWOCvNyIOIuYzU40+qFujci/fkUKwWKEHjkzirHLGDNOG9OG
Sn+mYYRvKqSnDc3IU83Rm8yfG9hkZuprkq2xw0xnqddkWxee5nZKeJnbaZZlOXgabIzl4Zlh46wAT5OO6AAGh0d0cuKAjj0mDubY
eXEgxx4XB3HsQngEZyI8gjMZHsGZIsJ+f2CcblbJFaL9/q7zinBahxfcBg1jKBUwp1JHY0u/24o4/tLPg5XkRh3DXQWJKRCCRgsh
6LK4tcx0CDWWghBAAGGKSqYpNGhDOEO5JuVmKcwR+TBuPxqTgaVGzetyp9CpnjqeoBR7X7bOLlx4fmFxaeHMaeuRQ+9fWrSOzD9S
fOnQ/MPt/f2Z5G8XZ8/2Zr90KM7Z3Ztz5OMvW5ceKc4/zPei31VxjD9FXCrhZVfmTlDocZmDFHs2ThFuHyh+ADGsrNkzcQ531rbq
FS5KBIV+lxh7vOaGtRko1Z4TjK3WeNc9Jcj1OKu8Dzu2q+tn5zXLkXNgsGvAuQb7yd8zShXBZfo1pCd76MBbSoE/efCvPRHhW7zB
W+pR0Ht8vwukoHOTvAr6lKJfwIcS2t4QTANGpb6+/6oceYXAok4p7dm4J30FRwuTBonhr8qs249gqtT0ltAxB0EaHswZCqEfheBf
JfXD+PvDvJsGZEAtJCdkIf609Gl5lU4NvmZ05DCmMg1iShhDsmJ01DCGxMXoaGEMSYwBQoL0uuzJNxX+5uvyuoLW5J+ElHWNfHRS
r4MI4qeIYX8CU4V/Mugd5PtHoUqhRqGOoTgY035qwAcOWAWwh+gQG+EWCIh0GEYcUqOkHvqJYMqEG9HuawT5HmEXBWENJBVMDQVW
poVPvSbvKDuKLOqk4jqyMLFRajpKxXKiLZ/eXxfvEr3LpNPSlicZdowSbnFxIVAgk+CPYTAf2tH4eY6PlVPurXSgLCwH6YVwscUC
bpCCuXa4WH7CbqbYB2LnLlh0OP/lXo+uLG/xKHJLsfPCZy1eyZ/oRf3pUDnqaeO3Y5GXOD3w+e+lNOTuOTSnvT/GRqAHV6F7uBp6
PM7mT9Sb1UrdfWZ+WOvVfrZnRFP3qSFTR/HQ0ol4i9PVkdGm+bqMHpg7MFFl9PBMAe2X44lMJzUdzKNUIzmRr2OdTDx5aBftTp5Z
4n8btyazNzq03paRZupuC3DTNsj8wK867f1Jen6jY730cJhw7sLZk8ti5r+Ewd+JLHzFDP9FfP9KryZjEW0i6evvYrw74WrvhFNn
xLRHHn25ZIz/Paz5S72TPBVOQ7Lg73fNpQXakMrJYobbz9z7/CYb/n9oZRojVmZGTG7fyrQN10GJGhSMeM7epiJfFivv4MDKiyrc
Efq7QyD1F/6vcuyGg9Jy7vspNV5jz937HPQ3PzAP8TK79g7LLIaxSqnaAIxVP/FOZfS+hUVi2lDYp0PYfymeAIRzGyilx59PAHv/
ALBpx/du0DxZ8HZsZAsVlNwPjOTJZv+/RXJ+tIcmva0lQL5vAOQJx+GhEJ8MQZMopyqjsfp99w70RMulYjoway5SwEqj6vAnsRt/
HYP3RiQzSHFno3nVCXQ6Wx7Zgr6Kwdcx+GUM0OmX/0MMTsbD+aV4TLOj+vabiEoHiGnlc3kzn81n8ll0DCBP51iGbR98x1H2SGz5
5J7+d+XIakfmEGEC+hZhA8hw26qnCZ6G5+Do5NaB0HqHKZrYBSSZTEdjkDgXsfkcncKaRJMOnkoDPidktRcBG6lF5KqdNLo7UiwF
GBe9GdFbTe0YcflMDc/bRTETYqaXYdkwngufY+EzL55rmp/2DT/jm2vaTSU8xZXt5PA8m2duo4dcbkf4D3ybzphNdsaAd+cA28cQ
w9+QN43NPJZk411IAGSwBK2h/8vj2TdqPNDzr44YUbCZZwVYrRPtT47Y/tioXHFIRxWi8EaFX3EYXVyA+sOjFvokoQW12qyD3t1o
WitNKIan2U7yWqUOgnTbsR5/YtDVoXuwgw6TG7QjAlJp1+5qpxYXj8G/tnajU3VtnRpsp290Lp9sQLPwUnGrtZqtPPFkIB/DOHUC
nWD5YrPhuVjRbSNxXyGaUwId9x/H8k2fNff9sacsred/RPst7VorITChbFTMi0V9kk5FiMMgXVkofAkPjAlqUI53RkVpOxfWEi5S
6fDst13gDivTCKKDFNlVGEUUKVAEwRmlTFNKowkieLN7+kIre6CJZzGMkowRG9fBJB5Hvx6eRhP92IsE9KO0LWTIwtUjRYcqgIQq
hlxQ8uiF9H2N/HYVPOP1fUUx/1dOm4bcSQUEub4S5Hn0PUU1/zinz0CZ9t6YQA1+/S63R14YgawCtcQBS+SXkX2FcHcQAxMnKPEf
6OpP3WnH+JwS6cR6eywexNBt2fhkST7mx9B5oBK4T9y+dsfuW6BeO9EZ8O6qC4+NoiqDlq1wZEuL3TOTgwN8ru+8d3vXEMPS/MO3
VPIXClIucK3qZf7FUVDYD8GLCSjsjqHQezrzHuHh/uDwAAb9A4JiuhcURwkS/Bujho5XKlxKDH1XcujxQdN7HPjVux84dO8yUF0x
fnxzmxvDzst6zl2Mfap37O8w9INoFU0Mfbpn6OEx1dGOErPhysWx78itmWjnZkfchfAuLgaxLzNqtQ9AoZAEgnX48OH2eDJFuHHQ
WtgctY+aAQiIr15RIqOdngPq155MAkkUuTfkuH3lXVkVaBy+C1jsHmpUvhNW4KkZN4EVc0NpwVAz5R3Hzf8ZKmQzfavzHbuDR/ja
o0hT4lD3Pa7Qyt1PQnxOHlcnCELIGObvnSa/40gfgOBPJkY6M7gcBwaqJQf6nvCiEjw7zdQOqdB+OOjWkxRTemJqDBBtJEB6ry5p
NJnjAiCu4q0wDVbxmvy6hbbvIQDpv5Skf4Pj44esSw8Do/o4PE6cfaZ937BshFpUYPewApARsjkh+OG6vqUJX4/xuI9iz8Oe6CZE
mx7T3aRob4P3b9jTpQNxudeVyMQVnp7PgzqqKLnv9fKOuPzobSlTig6+z0l3JUAQSeBufOw6IgYolvZ7K0fntAcmJq67sh7nkXAO
ctL7RiEnXlb1szFyptp74qEOHFr+P4Sgn7hXBG22MB9UlbvFz/vugJ/nzi8/0z54RwylInNDcRSz+DcRjr86hNng/RZRZ98aiVw9
3DkqXpRLxen+3e3d8a7134y2fYR69E/jHer9kehDQgD/lYjwE7klSsR/LZp2/uuj9qr/MgRfkcN7qUCX0IxpM2WoxoLxpJEO/4zw
OWYYVH7oDjX+c4/17VB/WlqVaZfasLXw0LMeHnpOfRqQyk7jbgjZa9rv7d86Zt1bCBEtxFn+EdvGypDrtmij62HiHHRsXMEjELj5
pNF5ZNwyDr0NZXF686J0S+F/RXj7Bbq71QL158l4IsiedKvXBC+2Dm0Vls0tOciUy9TzcrlvT/NLsQCi4SGQ9nTiXoLRZ1Rj0w8e
PsErjpDOoHEEDTy4spKGHzKOmD4aG2bQnViY/NB5b0fxtbK++TBdnhGn0QENaT2zbjJFtIF+N3gZBhpLcLXe/omRlAzZp5uQbtCk
EN3VUPNc3JSjk18WUM9KP1EjzypoYEDHG259uJ0n60O81XI7HUZKxVxo2YNUkCL6jQZfw7x0uGsotMcvxvP4dLSq4mO2UbeCXf27
qGQxIKNCoFOencfC3f2WfmKQEhD6aoIOKKY8Cwr2NPrEKO3J5PyLwgMUN3bb/GrIYdZ7DH3o6oDY6z4R5ynJPC+FV6GsG1hmh243
4xd8Os+MzhCNA2G+GeYrvsJbwk0d8zGXaWGe6qvuG5SiJ1K+QCmpbgr/iq9ifcQhcq+gtX17pFBSacFsh2iUALm49TNpHHDfAUP4
b9JJwRsd5tSpIXEgYU+/S8VLhy7NP4Jh8fauoe4Wt3v1zjAVLVNdnPmxXiT7Yu+Bnr+Kwd/A4K8RuiCGtwj3ikKeCca6nhJrvBUY
JMPQG20iwNuwLf9vIipZJFPOyCl5RkHbT45CU8kTi4GfgpfkJVFrmE8AkNuRvObfRd8LxkJSVnXq9YicUfAv434hZfwFJXRoQM6R
M4xpSh3NH569B/4QXoqRDi/FMIhfZNA1gB/HCX/6DvwivJ7lLn2MYmYxOcAskCnwfy58j/FCAvq0ANZPxeDoJfbfiUUsrb0reU9M
l9InO5BNUvrjcvdCuwS1l4dS+7wvu+eHlFJ6Sj1JjlI6XeN2ADiDEnnX+3hThw6cIi1cvjft8GiQ7pPjx08ocxJxE9wcMMTFR9uZ
cIPgs7jufb2c9sxt7Gk2pAOGb/Bf8w1sB2kA0BmRPxbmZ/wM/46fifIxF52xKM/0zTdkN09pRk/aIUrLJNP4e3wTW8ErmfA+EJbC
rXn+73EW/jWixwSxDSAJSxHnIF+q7oUMJf4tfP0PGPwOznBBMPZ/M8QA/cXYAP21Hiu0WPq9q57/LgZPiUOBZI8OyFtUOFMlmImG
XqhEWigztlSboV8G32rw/4j1fw+D/zTCG+iPEN2OE2nQFMFngCjIeK0XHiqdVMglWckpRh/RSAHBEL/2wR40HepJ1H/+KUbZ0rsk
nCCKwXqjEwb8N6JpLBUzo2eF5uK3ImgLdh6ewPjtCO5iI+/fDgEeEruDanTeKcGi21M94Aj5szLqQlcrtqH5ka8yDH0LkIw8zhRx
NVH7xgg+KLyU3X51UAhW4TXZInJPGmIPh8QrkWKhlTDultLdKukHDBZ6XI0k1lQOj4D1gkT0ebTLHSnFwldTDH5lxOAB1YQAgC6F
PReR/QBjlIV0/gdDhoS3or5X7aq++wcQPunTCHRkJIv80ZhPHoga5r/f+8Uui8Rl+QdKiGLEIlPGUaNgmJQzcJFSjFKPEkoREpGX
KqKXj6c79/gSxuiSmvj+K4Lw3xpya5zHQYfmrmNttaythlcTh5vFRgJZw8J7J+l6taH3w0VICXhI9gG6Wi5ZUjSGG1rH44aBXPRe
E9ck7268ijieMcTIxyNSGkzhqW/aFas1yoL6ueElXbbZ/USQEnn9s/ttCE7HKzlNdx2SEzrlDLD7WLLeFx6Iio5u3gTeuSXzWdR/
wiMrvz7MUiHsuCFoUPwQJ8gd2mytWHQict5a8izWdNzujfJAU/EeTZT4uiKtW2tUobEKAI43X8EG6KZRvL6+wmiTrGLhkQDSseL2
hLMpkQf82KPh9AqfQKdrYHeu4ZXWNa9+HVuuefN0iLe0vAjQ/XYPMYXVc3LYoeqaWxb9Fgc9L8aLSON/2A/cnnvb7hd8QfaFEIG+
dnjnrkFiSngXAF65LFxgFWG/EH5t4lq7bPcoh8uPDOkbXV8UFSLxzlZD4iOFN83lUvy/9PdSD4/ZUC8/Q+YsptShp0ztAALgSWj+
anuG+inV4G9HBb6kdZSPSI0XNclTrr8oSx1NltrTWMPXOupHpI8B5+pon9QaT4rnMQCEp17/E3coaUYlj9EtmKsKIdzC4OkydJqP
bv8k1ItPR4V3w2616s0Kw82WWnjjgbiZAK+QDqYXzwCqLDb5BhE7l8RhO0sPkcLTtF2ycA2vX4RvFnV7LPoEnYzn3wm1Wner7tlp
h3M6lq3CS/+c7ImvKUUExY3jctTUmhouOUkNz0TICugtBukusxTukfl/6yeMqeSK/VREGGVeEM4wDeCvYtoYXmshu0fEFYG84StU
roFkklxfnkSbx7rKtG3N0+mw/DLV0zsapafi9KdBkwWpuKNuPu1r7lWkB5hyReOvEm3QUbNtf3ikFZO4GRLIaM2HRMFyLze36nin
ryWkQWbRqaUov0TztkiLdJlfiT1DU0Li/MPYF6L3VH0xZWt04GciuVTJ7Z/j/y/Cnmk0cY8Fy4THpMRNkbsoRRy0DG+/x2S8Pafi
9k/tgci3VfDK/sbaaqSiKtM0uTk5clLQ6AoUfOLE8/9O5GYR/3tAcNadWJT+EAnGTmNrg6tkv2nXWoSC5I2GeGBrdTxBmiLegK/z
9P+5IFcQO7MBCh/9r0rsyRjvY8QmRKf7OIX86BFseu/eie7ssSdOnztFaXESX8JKrfi0UTG6CpPuhgxSgs3RGR4ykwrb4fGIQ4np
Q3JESE5gGGaSDYwT4hL2Z+TofzGhTYnrM3PkjIvXZhaU7n2/KbVw2Fg0HzXGCj8uXYHftcKJwiVjnCy2U/8b/bOo7g==""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

}

