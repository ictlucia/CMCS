#
# Front Arena exported extension module.
# source          ""
# timestamp (utc) "2024-10-17 01:46:18.4"
# ***** DO NOT EDIT! *****
#
name        "ICT_CustomReports_P2"
description ""

groups {
}

decls[FAgentParameterRename] {
}

clx FTradingSheet [FAgentParameterRename] {
  DirAmount1 =
  Access=ReadOnly
  Description=DirAmount1
  ExtensionAttribute=DirAmount1
  Format=
  GroupLabel=FieldCustom
  LabelList=DirAmount1
  Name=DirAmount1


}

decls[FColumnAppearance] {
}

clx FObject [FColumnAppearance] {
  AmountClosing =
  Flashing=Disabled
  Stripes=Disabled
  TextColumn=AmountClosing
  TextIntervals=Txt1;Txt2
  Txt1=Blue:0.1;Blue:100000000000
  Txt2=Red:-0.1;Red:-100000000000
  ValueTruncation=Disabled


  AmountClosingYesterday =
  Flashing=Disabled
  Stripes=Disabled
  TextColumn=AmountClosingYesterday
  TextIntervals=Txt1;Txt2
  Txt1=Blue:0.1;Blue:10000000000000
  Txt2=Red:-0.1;Red:-10000000000000
  ValueTruncation=Disabled


  background_NearLegNominal =
  Bkg1=Green:0.1;Green:1000000000
  Bkg2=Red:-0.1;Red:-100000000000
  BkgColumn=NearLeg Nominal
  BkgIntervals=Bkg1;Bkg2
  Flashing=Disabled
  Stripes=Disabled
  ValueTruncation=Disabled


  dynamic_background =
  Bkg1=Green:0.1;Green:1000000000
  Bkg2=Red:-0.1;Red:-100000000000
  BkgColumn=FTotal
  BkgIntervals=Bkg1;Bkg2
  Flashing=Disabled
  Stripes=Disabled
  ValueTruncation=Disabled


  Movement =
  Flashing=Disabled
  Stripes=Disabled
  TextColumn=Movement
  TextIntervals=Txt1;Txt2
  Txt1=Blue:0.1;Blue:10000000000000000
  Txt2=Red:-0.1;Red:-10000000000000000
  ValueTruncation=Disabled


  MTD =
  Flashing=Disabled
  Stripes=Disabled
  TextColumn=MTD
  TextIntervals=Txt1;Txt2
  Txt1=Blue:0.1;Blue:100000000000
  Txt2=Red:-0.1;Red:-100000000000
  ValueTruncation=Disabled


  StatusBondCutLoss =
  Bkg1=Red:100;Red:100000000000
  Bkg2=Green:-100000000000;Green:84.9999999
  Bkg3=Yellow:85;Yellow:99.9999999
  BkgExtensionAttribute=UtilizationBond
  BkgIntervals=Bkg1;Bkg2;Bkg3
  Flashing=Disabled
  Stripes=Disabled
  ValueTruncation=Disabled


  StatusBondHolding =
  Bkg1=Red:100;Red:100000000000
  Bkg2=Green:-100000000000;Green:84.9999999
  Bkg3=Yellow:85;Yellow:99.9999999
  BkgExtensionAttribute=PercentageHolding
  BkgIntervals=Bkg1;Bkg2;Bkg3
  Flashing=Disabled
  Stripes=Disabled
  ValueTruncation=Disabled


  StatusExpiryBkg =
  Bkg1=Green:1;Green:100000000000
  Bkg2=Red:-100000000000;Red:0
  BkgColumn=StatusExpiry
  BkgIntervals=Bkg1;Bkg2
  Flashing=Disabled
  Stripes=Disabled
  ValueTruncation=Disabled


  StatusUPL =
  Bkg1=Green:0;infinity
  Bkg2=Red:0;-infinity
  BkgExtensionAttribute=uPLColumn
  BkgIntervals=Bkg1;Bkg2


  Test =
  Bkg1=Pink:0.1;Pink:1000000000
  Bkg2=Red:-0.1;Red:-100000000000
  BkgColumn=Test
  BkgIntervals=Bkg1;Bkg2
  Flashing=Disabled
  Stripes=Disabled
  TextColumn=Test
  TextIntervals=Txt1;Txt2
  Txt1=Green:0.1;Green:1000000000
  Txt2=Red:-0.1;Red:-100000000000
  ValueTruncation=Disabled


  Total_background =
  Flashing=Disabled
  Stripes=Disabled
  TextColumn=NearAmount
  TextIntervals=Txt1;Txt2
  Txt1=Blue:0.1;Blue:1000000000
  Txt2=Red:-0.1;Red:-100000000000
  ValueTruncation=Disabled


  Total_background_FaceAmount =
  Flashing=Disabled
  Stripes=Disabled
  TextColumn=FaceAmount
  TextIntervals=Txt1;Txt2
  Txt1=Blue:0.1;Blue:1000000000
  Txt2=Red:-0.1;Red:-100000000000
  ValueTruncation=Disabled


  Total_background_FarAmount =
  Flashing=Disabled
  Stripes=Disabled
  TextColumn=FarAmount
  TextIntervals=Txt1;Txt2
  Txt1=Blue:0.1;Blue:1000000000
  Txt2=Red:-0.1;Red:-100000000000
  ValueTruncation=Disabled


  Total_background_FarAmount1 =
  Flashing=Disabled
  Stripes=Disabled
  TextColumn=FarAmount1
  TextIntervals=Txt1;Txt2
  Txt1=Blue:0.1;Blue:1000000000
  Txt2=Red:-0.1;Red:-100000000000
  ValueTruncation=Disabled


  Total_background_FarAmount2 =
  Flashing=Disabled
  Stripes=Disabled
  TextColumn=FarAmount2
  TextIntervals=Txt1;Txt2
  Txt1=Blue:0.1;Blue:1000000000
  Txt2=Red:-0.1;Red:-100000000000
  ValueTruncation=Disabled


  Total_background_NearAmount =
  Flashing=Disabled
  Stripes=Disabled
  TextColumn=NearAmount
  TextIntervals=Txt1;Txt2
  Txt1=Blue:0.1;Blue:1000000000
  Txt2=Red:-0.1;Red:-100000000000
  ValueTruncation=Disabled


  Total_background_NearAmount1 =
  Flashing=Disabled
  Stripes=Disabled
  TextColumn=NearAmount1
  TextIntervals=Txt1;Txt2
  Txt1=Blue:0.1;Blue:1000000000
  Txt2=Red:-0.1;Red:-100000000000
  ValueTruncation=Disabled


  Total_background_NearAmount2 =
  Flashing=Disabled
  Stripes=Disabled
  TextColumn=NearAmount2
  TextIntervals=Txt1;Txt2
  Txt1=Blue:0.1;Blue:1000000000
  Txt2=Red:-0.1;Red:-100000000000
  ValueTruncation=Disabled


  utilizationAppearancePercentCustom =
  Bkg1=LightRed:0.8;Red:1
  Bkg2=Red:1;infinity
  BkgExtensionAttribute=ruleValueUtilizationPercentCustom
  BkgIntervals=Bkg1;Bkg2


  YTD =
  Flashing=Disabled
  Stripes=Disabled
  TextColumn=YTD
  TextIntervals=Txt1;Txt2
  Txt1=Blue:0.1;Blue:100000000000
  Txt2=Red:-0.1;Red:-100000000000
  ValueTruncation=Disabled


}

decls[FColumnDefinition] {
  "1DayChange_Convexity" ( "sheet columns.portfoliosheet" ) "";
  "1DayChange_Counterparty" ( "sheet columns.breachsheet" "sheet columns.rulevaluehistorysheet" ) "";
  "1DayChange_CreditVaR" ( "sheet columns.portfoliosheet" ) "";
  "1DayChange_CS01" ( "sheet columns.portfoliosheet" ) "";
  "1DayChange_Delta" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "1DayChange_FX" ( "sheet columns.portfoliosheet" ) "";
  "1DayChange_FXVaR" ( "sheet columns.portfoliosheet" ) "";
  "1DayChange_HVaR" ( "sheet columns.portfoliosheet" ) "";
  "1DayChange_IncrementalVaR" ( "sheet columns.portfoliosheet" ) "";
  "1DayChange_IR" ( "sheet columns.portfoliosheet" ) "";
  "1DayChange_IRVaR" ( "sheet columns.portfoliosheet" ) "";
  "1DayChange_Issuer" ( "sheet columns.breachsheet" "sheet columns.rulevaluehistorysheet" ) "";
  "1DayChange_MarginalVaR" ( "sheet columns.portfoliosheet" ) "";
  "1DayChange_PV01" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "1DayChange_ShortfallVaR" ( "sheet columns.portfoliosheet" ) "";
  "1DayChange_Trading" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "ACCINT" ( "sheet columns.tradesheet" ) "";
  "AccountBranch" ( "sheet columns.tradesheet" ) "";
  "AccountID" ( "sheet columns.tradesheet" ) "";
  "ACCROUTSTAMT" ( "sheet columns.tradesheet" ) "";
  "Accrued_Outstanding" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "AccruedInterestValue" ( "sheet columns.tradesheet" ) "";
  "ACCTTYPE" ( "sheet columns.journalsheet" "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "AccumulativeOrPerTransaction" ( "sheet columns.tradesheet" ) "";
  "AcquisitionIDR" ( "sheet columns.tradesheet" ) "";
  "AcquisitionPricePercent" ( "sheet columns.tradesheet" ) "";
  "AcquisitionRecord" ( "sheet columns.tradesheet" ) "";
  "AFS" ( "sheet columns.dealsheet" "sheet columns.tradesheet" ) "";
  "AIP" ( "sheet columns.journalsheet" ) "";
  "AL" ( "sheet columns.tradesheet" ) "";
  "AllInRate2" ( "sheet columns.tradesheet" ) "";
  "AllowanceForLosses" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "Amendment" ( "sheet columns.tradesheet" ) "";
  "AmendmentDate" ( "sheet columns.tradesheet" ) "";
  "Amortized010203" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "Amortized2004" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "AmortizedDiscPrem" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "Amount of Underlying" ( "sheet columns.tradesheet" ) "";
  "AmountAccumulativePerMonth" ( "sheet columns.tradesheet" ) "";
  "AmountClosing" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "AmountClosingYesterday" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "AmountToFund" ( "sheet columns.tradesheet" ) "";
  "ApprovalSystem" ( "sheet columns.tradesheet" ) "";
  "ARGNO" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "ASSETID" ( "sheet columns.journalsheet" ) "";
  "ASSIGNEDQTY" ( "sheet columns.tradesheet" ) "";
  "AveragePrice" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "Balance" ( "sheet columns.journalsheet" ) "";
  "BaseCurrCR" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "BaseCurrDR" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "BasketRepoRate_6" ( "sheet columns.tradesheet" ) "";
  "BeginningBalance" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "BEIND" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "Beneficiary" ( "sheet columns.journalsheet" ) "";
  "BidPrice" ( "sheet columns.tradesheet" ) "";
  "BidPriceBGN" ( "sheet columns.tradesheet" ) "";
  "BidPriceBVAL" ( "sheet columns.tradesheet" ) "";
  "BidPriceEXCH" ( "sheet columns.tradesheet" ) "";
  "BIS4" ( "sheet columns.tradesheet" ) "";
  "Blank1" ( "sheet columns.tradesheet" ) "";
  "Blank2" ( "sheet columns.tradesheet" ) "";
  "BMRISell" ( "sheet columns.journalsheet" ) "";
  "BookFilter" ( "sheet columns.tradesheet" ) "";
  "BOOKVALAMT" ( "sheet columns.tradesheet" ) "";
  "BookValueDeprec" ( "sheet columns.tradesheet" ) "";
  "BookValueIDR" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "BorrowerCode" ( "sheet columns.tradesheet" ) "";
  "BorrowerName" ( "sheet columns.tradesheet" ) "";
  "Bought Amount" ( "sheet columns.tradesheet" ) "";
  "BRANCH" ( "sheet columns.tradesheet" ) "";
  "BreachTenor" ( "sheet columns.tradesheet" ) "";
  "BRPRCINDTE" ( "sheet columns.tradesheet" ) "";
  "BUC" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "BuyAmountCustom" ( "sheet columns.tradesheet" ) "";
  "BuyCurrency_Custom" ( "sheet columns.journalsheet" ) "";
  "BuyerOrSeller" ( "sheet columns.tradesheet" ) "";
  "BuySellJournal" ( "sheet columns.journalsheet" ) "";
  "CancelOrAmendDate" ( "sheet columns.tradesheet" ) "";
  "CapitalGain" ( "sheet columns.tradesheet" ) "";
  "CapitalGainTax" ( "sheet columns.tradesheet" ) "";
  "CasfhlowFarAmount" ( "sheet columns.moneyflowsheet" ) "";
  "CashflowFA" ( "sheet columns.tradesheet" ) "";
  "CashY" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "CAT" ( "sheet columns.tradesheet" ) "";
  "CCS" ( "sheet columns.tradesheet" ) "";
  "CCYRate" ( "sheet columns.tradesheet" ) "";
  "CFCITZ" ( "sheet columns.tradesheet" ) "";
  "CFCOUN" ( "sheet columns.tradesheet" ) "";
  "CFRESD" ( "sheet columns.tradesheet" ) "";
  "ChargesDelay" ( "sheet columns.tradesheet" ) "";
  "Checker" ( "sheet columns.tradesheet" ) "";
  "CIFBICode" ( "sheet columns.tradesheet" ) "";
  "CIFBranch" ( "sheet columns.tradesheet" ) "";
  "ClassificationofSecurities" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "ClosingBalance" ( "sheet columns.journalsheet" "sheet columns.settlementsheet" "sheet columns.tradesheet" ) "";
  "CLOSINGPRICE_8" ( "sheet columns.tradesheet" ) "";
  "closingPriceBond" ( "sheet columns.tradesheet" ) "";
  "Code" ( "sheet columns.tradesheet" ) "";
  "CODE" ( "sheet columns.tradesheet" ) "";
  "CodeDesc" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "Collateral" ( "sheet columns.tradesheet" ) "";
  "CollateralAmount" ( "sheet columns.tradesheet" ) "";
  "CollateralCurrency" ( "sheet columns.tradesheet" ) "";
  "CollateralDueDate" ( "sheet columns.tradesheet" ) "";
  "COMIDB" ( "sheet columns.tradesheet" ) "";
  "COMIDC" ( "sheet columns.tradesheet" ) "";
  "Commission" ( "sheet columns.tradesheet" ) "";
  "COMMPROCAMT" ( "sheet columns.tradesheet" ) "";
  "Conclusion" ( "sheet columns.tradesheet" ) "";
  "ContractValNetAgree" ( "sheet columns.tradesheet" ) "";
  "CONVINTAMT" ( "sheet columns.tradesheet" ) "";
  "CONVINTBAMT" ( "sheet columns.tradesheet" ) "";
  "CorpSpreadAmount" ( "sheet columns.tradesheet" ) "";
  "CorrespondentBank1" ( "sheet columns.tradesheet" ) "";
  "CorrespondentBank2" ( "sheet columns.tradesheet" ) "";
  "COSTAMT" ( "sheet columns.thresholdvaluesheet" "sheet columns.tradesheet" ) "";
  "COSTBAMT" ( "sheet columns.tradesheet" ) "";
  "Counter Currency" ( "sheet columns.tradesheet" ) "";
  "CounterpartyCountryIND" ( "sheet columns.tradesheet" ) "";
  "CountryLimit" ( "sheet columns.tradesheet" ) "";
  "Coupon_SB_Dimiliki" ( "sheet columns.tradesheet" ) "";
  "CPMainCcy" ( "sheet columns.tradesheet" ) "";
  "CPMoneyCcy" ( "sheet columns.tradesheet" ) "";
  "CreditAmount" ( "sheet columns.journalsheet" "sheet columns.settlementsheet" "sheet columns.tradesheet" ) "";
  "CrEquivalent %Utilization" ( "sheet columns.rulesheet" ) "";
  "CrEquivalent 1DayChange" ( "sheet columns.rulesheet" ) "";
  "CrEquivalentLimit" ( "sheet columns.rulesheet" ) "";
  "CrEquivalentUtilization" ( "sheet columns.rulesheet" ) "";
  "CS01" ( "sheet columns.portfoliosheet" ) "";
  "CurrAgainstSGD" ( "sheet columns.tradesheet" ) "";
  "CurrAgainstUSD" ( "sheet columns.tradesheet" ) "";
  "Currency Rate 8" ( "sheet columns.tradesheet" ) "";
  "CurrencyCR" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "CurrencyDR" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "CurrencyUpdateDate" ( "sheet columns.tradesheet" ) "";
  "CustomerCategory" ( "sheet columns.tradesheet" ) "";
  "CustomerName" ( "sheet columns.rulesheet" ) "";
  "DailyInterest" ( "sheet columns.tradesheet" ) "";
  "DataType" ( "sheet columns.tradesheet" ) "";
  "DateNow" ( "sheet columns.tradesheet" ) "";
  "DateRange" ( "sheet columns.tradesheet" ) "";
  "DaysDelay" ( "sheet columns.tradesheet" ) "";
  "DaysToMaturity" ( "sheet columns.tradesheet" ) "";
  "DayToExpired" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "DCIND" ( "sheet columns.tradesheet" ) "";
  "DebitAmount" ( "sheet columns.journalsheet" "sheet columns.settlementsheet" "sheet columns.tradesheet" ) "";
  "Delta_ExchangeRate" ( "sheet columns.tradesheet" ) "";
  "DeltaCheck" ( "sheet columns.tradesheet" ) "";
  "DeltaThresholdValue" ( "sheet columns.portfoliosheet" ) "";
  "DeltaUtilizationPercentage" ( "sheet columns.portfoliosheet" ) "";
  "DENOM" ( "sheet columns.tradesheet" ) "";
  "Dept" ( "sheet columns.tradesheet" ) "";
  "DerivativesPayables" ( "sheet columns.tradesheet" ) "";
  "DerivativesReceivables" ( "sheet columns.tradesheet" ) "";
  "Desc" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "Descr" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "DescriptionUnderlying" ( "sheet columns.tradesheet" ) "";
  "DeskripsiSandi" ( "sheet columns.tradesheet" ) "";
  "Diff1" ( "sheet columns.tradesheet" ) "";
  "Diff2" ( "sheet columns.tradesheet" ) "";
  "Difference" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "Difference_EndCash" ( "sheet columns.tradesheet" ) "";
  "DiffRate" ( "sheet columns.tradesheet" ) "";
  "DiffRate100" ( "sheet columns.tradesheet" ) "";
  "DirAmount1" ( "sheet columns.tradesheet" ) "";
  "DirAmount2" ( "sheet columns.tradesheet" ) "";
  "DRCRIND" ( "sheet columns.journalsheet" "sheet columns.settlementsheet" "sheet columns.tradesheet" ) "";
  "eFx" ( "sheet columns.tradesheet" ) "";
  "EMAS" ( "sheet columns.tradesheet" ) "";
  "EndAccrualFA" ( "sheet columns.tradesheet" ) "";
  "EndCashRepo" ( "sheet columns.tradesheet" ) "";
  "EndInterest" ( "sheet columns.tradesheet" ) "";
  "EndValue" ( "sheet columns.tradesheet" ) "";
  "EquivalentAmountIDR" ( "sheet columns.journalsheet" "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "EquivalentMarketIDR" ( "sheet columns.tradesheet" ) "";
  "EqvUSD" ( "sheet columns.tradesheet" ) "";
  "ExchangeRateNTCS" ( "sheet columns.tradesheet" ) "";
  "ExcRate" ( "sheet columns.tradesheet" ) "";
  "ExcRateAgainstCNY" ( "sheet columns.tradesheet" ) "";
  "ExcRateAgainstUSD" ( "sheet columns.tradesheet" ) "";
  "ExtractDate" ( "sheet columns.journalsheet" ) "";
  "ExtractFlag" ( "sheet columns.journalsheet" ) "";
  "FaceAmount" ( "sheet columns.tradesheet" ) "";
  "Facility" ( "sheet columns.tradesheet" ) "";
  "Far/NearFlag" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "FarAmount" ( "sheet columns.moneyflowsheet" "sheet columns.tradesheet" ) "";
  "FarAmount1" ( "sheet columns.tradesheet" ) "";
  "FarAmount2" ( "sheet columns.tradesheet" ) "";
  "FBIThisYear" ( "sheet columns.tradesheet" ) "";
  "FBIYesteryear" ( "sheet columns.tradesheet" ) "";
  "FDQ" ( "sheet columns.tradesheet" ) "";
  "FeeIDR" ( "sheet columns.tradesheet" ) "";
  "FITCHDataBloomberg" ( "sheet columns.dealsheet" ) "";
  "FITCHDataNTCS" ( "sheet columns.dealsheet" "sheet columns.tradesheet" ) "";
  "FITCHHasilMatch" ( "sheet columns.dealsheet" ) "";
  "FITCHINDODataBloomberg" ( "sheet columns.dealsheet" ) "";
  "FITCHINDODataNTCS" ( "sheet columns.dealsheet" "sheet columns.tradesheet" ) "";
  "FITCHINDOHasilMatch" ( "sheet columns.dealsheet" ) "";
  "FLAG" ( "sheet columns.journalsheet" ) "";
  "Flow" ( "sheet columns.tradesheet" ) "";
  "ForwardRate" ( "sheet columns.tradesheet" ) "";
  "FreeText" ( "sheet columns.tradesheet" ) "";
  "FrekuensiPenjualan_Yesterday" ( "sheet columns.tradesheet" ) "";
  "Frequency" ( "sheet columns.tradesheet" ) "";
  "FTotal" ( "sheet columns.tradesheet" ) "";
  "FullYearAchievement" ( "sheet columns.portfoliosheet" ) "";
  "FVLevel" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "FWDRate" ( "sheet columns.tradesheet" ) "";
  "FXFW" ( "sheet columns.tradesheet" ) "";
  "GainOrLoss" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "GeneralLedger" ( "sheet columns.tradesheet" ) "";
  "GLNO" ( "sheet columns.tradesheet" ) "";
  "GMRAIdentification" ( "sheet columns.tradesheet" ) "";
  "GrandTotal" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "GroupID" ( "sheet columns.rulesheet" ) "";
  "Haircut" ( "sheet columns.rulesheet" "sheet columns.tradesheet" ) "";
  "HedgingFairValue" ( "sheet columns.tradesheet" ) "";
  "HedgingNotAmt" ( "sheet columns.tradesheet" ) "";
  "Holding Period" ( "sheet columns.tradesheet" ) "";
  "Holding Period ESPT" ( "sheet columns.tradesheet" ) "";
  "HoldingInterestAmount" ( "sheet columns.tradesheet" ) "";
  "HTM" ( "sheet columns.dealsheet" "sheet columns.tradesheet" ) "";
  "IBPA" ( "sheet columns.tradesheet" ) "";
  "IDays" ( "sheet columns.tradesheet" ) "";
  "idPelapor" ( "sheet columns.tradesheet" ) "";
  "IDR" ( "sheet columns.tradesheet" ) "";
  "Indicator1" ( "sheet columns.tradesheet" ) "";
  "Indicator1.2" ( "sheet columns.tradesheet" ) "";
  "InOut" ( "sheet columns.journalsheet" "sheet columns.settlementsheet" ) "";
  "InputDate" ( "sheet columns.tradesheet" ) "";
  "InputTime" ( "sheet columns.tradesheet" ) "";
  "Ins_Bond" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "Ins_Commodity" ( "sheet columns.tradesheet" ) "";
  "Ins_Curr" ( "sheet columns.tradesheet" ) "";
  "Ins_CurrSwap" ( "sheet columns" ) "";
  "Ins_Deposit" ( "sheet columns.tradesheet" ) "";
  "Ins_MM_IP" ( "sheet columns.tradesheet" ) "";
  "Ins_MM_IT" ( "sheet columns.tradesheet" ) "";
  "Ins_Option" ( "sheet columns.tradesheet" ) "";
  "Ins_Repo" ( "sheet columns.tradesheet" ) "";
  "Ins_Swap" ( "sheet columns.tradesheet" ) "";
  "InstrumentCode" ( "sheet columns.tradesheet" ) "";
  "IntCalcRule" ( "sheet columns.tradesheet" ) "";
  "INTCCY" ( "sheet columns.tradesheet" ) "";
  "InterestAccrued" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "InterestAmount" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "InterestIncome" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "InterestIncomeTax" ( "sheet columns.tradesheet" ) "";
  "InterestPayment" ( "sheet columns.moneyflowsheet" "sheet columns.tradesheet" ) "";
  "InterestProceed" ( "sheet columns.moneyflowsheet" "sheet columns.tradesheet" ) "";
  "InterestRateAtTradeTime" ( "sheet columns.settlementsheet" ) "";
  "InterestReceived" ( "sheet columns.moneyflowsheet" "sheet columns.tradesheet" ) "";
  "Internalizer" ( "sheet columns.tradesheet" ) "";
  "InterofficeLongTerm" ( "sheet columns.tradesheet" ) "";
  "InterofficeShortTerm" ( "sheet columns.tradesheet" ) "";
  "IntradayLimitAvailable" ( "sheet columns.portfoliosheet" ) "";
  "IntradayLimitGiven" ( "sheet columns.portfoliosheet" ) "";
  "INVSEQ" ( "sheet columns.tradesheet" ) "";
  "Invtype" ( "sheet columns.tradesheet" ) "";
  "IR_1" ( "sheet columns.tradesheet" ) "";
  "IRS" ( "sheet columns.tradesheet" ) "";
  "IssuerLimit" ( "sheet columns.rulesheet" ) "";
  "IssuerPercentUtilization" ( "sheet columns.rulesheet" ) "";
  "IssuerUtilization" ( "sheet columns.rulesheet" ) "";
  "JnsDokumenUnderlying" ( "sheet columns.tradesheet" ) "";
  "JumlahHariTunggakan" ( "sheet columns.settlementsheet" ) "";
  "Keterangan" ( "sheet columns.journalsheet" "sheet columns.settlementsheet" ) "";
  "KeteranganInsDokumenUnderlying" ( "sheet columns.tradesheet" ) "";
  "KodeFormFI" ( "sheet columns.tradesheet" ) "";
  "KodeFormMDS" ( "sheet columns.tradesheet" ) "";
  "KodeFormPasal26" ( "sheet columns.tradesheet" ) "";
  "KodeKondisi" ( "sheet columns.settlementsheet" ) "";
  "KodeOption1" ( "sheet columns.tradesheet" ) "";
  "KodeOption2" ( "sheet columns.tradesheet" ) "";
  "KodeOption3" ( "sheet columns.tradesheet" ) "";
  "KodeOption4" ( "sheet columns.tradesheet" ) "";
  "KodeOption5" ( "sheet columns.tradesheet" ) "";
  "KodeSebabMacet" ( "sheet columns.settlementsheet" ) "";
  "Kolektibilitas" ( "sheet columns.settlementsheet" ) "";
  "Kurs" ( "sheet columns.tradesheet" ) "";
  "KursBeli" ( "sheet columns.tradesheet" ) "";
  "KursJual" ( "sheet columns.tradesheet" ) "";
  "KursTengah" ( "sheet columns.tradesheet" ) "";
  "LastCouponDate" ( "sheet columns.tradesheet" ) "";
  "LastFixingRate" ( "sheet columns.tradesheet" ) "";
  "LastMonthEoDPrice" ( "sheet columns.tradesheet" ) "";
  "LastPaymentPeriod" ( "sheet columns.rulesheet" "sheet columns.tradesheet" ) "";
  "LBU" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "LiabilitiesAmount" ( "sheet columns.tradesheet" ) "";
  "Limit" ( "sheet columns.portfoliosheet" "sheet columns.rulesheet" ) "";
  "Limit Available Alert" ( "sheet columns.alertsheet" "sheet columns.rulesheet" ) "";
  "Limit Holding Days" ( "sheet columns.tradesheet" ) "";
  "Limit_FX" ( "sheet columns.portfoliosheet" ) "";
  "Limit_IR" ( "sheet columns.portfoliosheet" ) "";
  "LimitAmtCurr" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "LimitEquivalenIDRCredit" ( "sheet columns.tradesheet" ) "";
  "LimitEquivalenIDRNotional" ( "sheet columns.tradesheet" ) "";
  "LimitExpiry" ( "sheet columns.appliedrulesheet" "sheet columns.rulesheet" "sheet columns.tradesheet" ) "";
  "LimitExposureCCYCredit" ( "sheet columns.tradesheet" ) "";
  "LimitExposureCCYNotional" ( "sheet columns.tradesheet" ) "";
  "LimitExposureUSDCredit" ( "sheet columns.tradesheet" ) "";
  "LimitExposureUSDNotional" ( "sheet columns.tradesheet" ) "";
  "LimitMO01" ( "sheet columns.tradesheet" ) "";
  "LimitMO10" ( "sheet columns.tradesheet" ) "";
  "Listing" ( "sheet columns.settlementsheet" ) "";
  "LOB" ( "sheet columns.tradesheet" ) "";
  "LongTermFDQ" ( "sheet columns.tradesheet" ) "";
  "LossLimitMonthly" ( "sheet columns.portfoliosheet" ) "";
  "LossLimitYearly" ( "sheet columns.portfoliosheet" ) "";
  "LowerRate" ( "sheet columns.tradesheet" ) "";
  "Main Currency" ( "sheet columns.tradesheet" ) "";
  "MarketValue2" ( "sheet columns.tradesheet" ) "";
  "MarketYield" ( "sheet columns.tradesheet" ) "";
  "MarkToMarket" ( "sheet columns.tradesheet" ) "";
  "MarkToModel" ( "sheet columns.tradesheet" ) "";
  "MATPROCAMT" ( "sheet columns.tradesheet" ) "";
  "MMDF" ( "sheet columns.tradesheet" ) "";
  "MMInterbankPlacement" ( "sheet columns.tradesheet" ) "";
  "MMInterbankTaken" ( "sheet columns.tradesheet" ) "";
  "MMLF" ( "sheet columns.tradesheet" ) "";
  "Money Flow Type" ( "sheet columns.tradesheet" ) "";
  "MoneyAmount" ( "sheet columns.tradesheet" ) "";
  "Month" ( "sheet columns.tradesheet" ) "";
  "MonthlyLossLimitUse" ( "sheet columns.portfoliosheet" ) "";
  "MonthlyLossLimitUse2" ( "sheet columns.portfoliosheet" ) "";
  "MonthNow" ( "sheet columns.tradesheet" ) "";
  "MonthNumber" ( "sheet columns.tradesheet" ) "";
  "MonthToExpired" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "MOODYSDataBloomberg" ( "sheet columns.dealsheet" ) "";
  "MOODYSDataNTCS" ( "sheet columns.dealsheet" "sheet columns.tradesheet" ) "";
  "MOODYSHasilMatch" ( "sheet columns.dealsheet" ) "";
  "Movement" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "MTD" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "MTM" ( "sheet columns.tradesheet" ) "";
  "NasabahBeli" ( "sheet columns.tradesheet" ) "";
  "NasabahJual" ( "sheet columns.tradesheet" ) "";
  "NAV" ( "sheet columns.tradesheet" ) "";
  "NDFFixingPrice" ( "sheet columns.tradesheet" ) "";
  "NearAmount" ( "sheet columns.tradesheet" ) "";
  "NearAmount1" ( "sheet columns.tradesheet" ) "";
  "NearAmount2" ( "sheet columns.tradesheet" ) "";
  "NearFarFXSwap" ( "sheet columns.tradesheet" ) "";
  "NetAmount" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "NetPosition" ( "sheet columns.tradesheet" ) "";
  "NewCTPTYCIF" ( "sheet columns.tradesheet" ) "";
  "NewCTPTYReff" ( "sheet columns.tradesheet" ) "";
  "NEWPLNID" ( "sheet columns.tradesheet" ) "";
  "NextCouponDate" ( "sheet columns.tradesheet" ) "";
  "NextPaymentDate" ( "sheet columns.tradesheet" ) "";
  "NextPaymentPeriod" ( "sheet columns.tradesheet" ) "";
  "NII" ( "sheet columns.tradesheet" ) "";
  "NIIThisYear" ( "sheet columns.tradesheet" ) "";
  "NIIYesteryear" ( "sheet columns.tradesheet" ) "";
  "NilaiBeliKembali" ( "sheet columns.tradesheet" ) "";
  "NilaiPasar" ( "sheet columns.tradesheet" ) "";
  "NilaiPasar2" ( "sheet columns.tradesheet" ) "";
  "NilaiPerolehan" ( "sheet columns.tradesheet" ) "";
  "NilaiPerolehan2" ( "sheet columns.tradesheet" ) "";
  "nisbahBagiHasil" ( "sheet columns.tradesheet" ) "";
  "NominalAbsolute" ( "sheet columns.tradesheet" ) "";
  "NominalCoupon" ( "sheet columns.tradesheet" ) "";
  "NominalCustom" ( "sheet columns.tradesheet" ) "";
  "nominalDokumenUnderlying" ( "sheet columns.tradesheet" ) "";
  "NominalNOP" ( "sheet columns.tradesheet" ) "";
  "NominalNOP_USD" ( "sheet columns.tradesheet" ) "";
  "NominalSGD" ( "sheet columns.tradesheet" ) "";
  "NominalSumUp" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "NominalValutaDasarPerUnderlying" ( "sheet columns.tradesheet" ) "";
  "NominativeList" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "NomorBuktiPotongFI" ( "sheet columns.tradesheet" ) "";
  "NomorBuktiPotongMDS" ( "sheet columns.tradesheet" ) "";
  "NomorBuktiPotongPasal26" ( "sheet columns.tradesheet" ) "";
  "nomorDokumenUnderlying" ( "sheet columns.tradesheet" ) "";
  "NomorIdentifikasi" ( "sheet columns.settlementsheet" "sheet columns.tradesheet" ) "";
  "NOP Overnight" ( "sheet columns.portfoliosheet" ) "";
  "NOP_PV" ( "sheet columns.tradesheet" ) "";
  "NOP_USD" ( "sheet columns.portfoliosheet" ) "";
  "NOPinUSD" ( "sheet columns.tradesheet" ) "";
  "NOPLimit" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "NOPLimitUse" ( "sheet columns.portfoliosheet" ) "";
  "NOPThresholdValue" ( "sheet columns.portfoliosheet" ) "";
  "NOPUtilizationPercentage" ( "sheet columns.portfoliosheet" ) "";
  "NostroMirrorACName" ( "sheet columns.journalsheet" ) "";
  "NostroMirrorACNumber" ( "sheet columns.journalsheet" ) "";
  "Note" ( "sheet columns.settlementsheet" ) "";
  "Notional %Utilization" ( "sheet columns.rulesheet" ) "";
  "Notional 1DayChange" ( "sheet columns.rulesheet" ) "";
  "Notional Limit" ( "sheet columns.rulesheet" ) "";
  "Notional Utilization" ( "sheet columns.rulesheet" ) "";
  "NPV_Journal" ( "sheet columns.journalsheet" ) "";
  "NPWPPotong" ( "sheet columns.tradesheet" ) "";
  "NTR" ( "sheet columns.tradesheet" ) "";
  "O/N" ( "sheet columns.tradesheet" ) "";
  "OBJID" ( "sheet columns.journalsheet" ) "";
  "OffShoreFunding" ( "sheet columns.tradesheet" ) "";
  "OneDayChange" ( "sheet columns.portfoliosheet" "sheet columns.rulesheet" "sheet columns.tradesheet" ) "";
  "OnShoreFunding" ( "sheet columns.tradesheet" ) "";
  "OnShoreLongTerm" ( "sheet columns.tradesheet" ) "";
  "OnShoreShortTerm" ( "sheet columns.tradesheet" ) "";
  "OpeningBalance" ( "sheet columns.journalsheet" "sheet columns.settlementsheet" ) "";
  "ORD" ( "sheet columns.tradesheet" ) "";
  "OriginalCostAmt" ( "sheet columns.settlementsheet" "sheet columns.tradesheet" ) "";
  "OthersFairValue" ( "sheet columns.tradesheet" ) "";
  "OthersNotAmt" ( "sheet columns.tradesheet" ) "";
  "OurAccount" ( "sheet columns.tradesheet" ) "";
  "OutstandingEqvUSD" ( "sheet columns.rulesheet" "sheet columns.tradesheet" ) "";
  "PayDate" ( "sheet columns.tradesheet" ) "";
  "PayDayCustom" ( "sheet columns.moneyflowsheet" "sheet columns.tradesheet" ) "";
  "PayLegEqvUSD" ( "sheet columns.tradesheet" ) "";
  "PaymentSystem" ( "sheet columns.tradesheet" ) "";
  "PayOrReceive" ( "sheet columns.tradesheet" ) "";
  "PBOCRate" ( "sheet columns.tradesheet" ) "";
  "PEFINDODataBloomberg" ( "sheet columns.dealsheet" ) "";
  "PEFINDODataNTCS" ( "sheet columns.dealsheet" "sheet columns.tradesheet" ) "";
  "PEFINDOHasilMatch" ( "sheet columns.dealsheet" ) "";
  "Pemeringkat" ( "sheet columns.tradesheet" ) "";
  "Percentage_FX" ( "sheet columns.portfoliosheet" ) "";
  "Percentage_IR" ( "sheet columns.portfoliosheet" ) "";
  "Percentage_Yesterday" ( "sheet columns.tradesheet" ) "";
  "PercentageChange" ( "sheet columns.tradesheet" ) "";
  "PercentageHolding" ( "sheet columns.tradesheet" ) "";
  "PercentageMO01RPL" ( "sheet columns.tradesheet" ) "";
  "PercentageMO01RPL_Yesterday" ( "sheet columns.tradesheet" ) "";
  "PercentageMO01UPL" ( "sheet columns.tradesheet" ) "";
  "PercentageMO01UPL_Yesterday" ( "sheet columns.tradesheet" ) "";
  "PercentageVolumeYesterday" ( "sheet columns.tradesheet" ) "";
  "PercentNominal" ( "sheet columns.tradesheet" ) "";
  "PercentUtilization" ( "sheet columns.rulesheet" ) "";
  "PercentUtilization__Trading" ( "sheet columns.portfoliosheet" ) "";
  "Peringkat" ( "sheet columns.tradesheet" ) "";
  "Period" ( "sheet columns.settlementsheet" "sheet columns.tradesheet" ) "";
  "Period1" ( "sheet columns.tradesheet" ) "";
  "Period2" ( "sheet columns.tradesheet" ) "";
  "Period3" ( "sheet columns.tradesheet" ) "";
  "Period4" ( "sheet columns.tradesheet" ) "";
  "Period5" ( "sheet columns.tradesheet" ) "";
  "PhysicalForeign" ( "sheet columns.tradesheet" ) "";
  "Placement/Borrowing" ( "sheet columns.tradesheet" ) "";
  "PLNID" ( "sheet columns.tradesheet" ) "";
  "PnLIDR" ( "sheet columns.portfoliosheet" ) "";
  "PnLMonth" ( "sheet columns.portfoliosheet" ) "";
  "PnLYear" ( "sheet columns.portfoliosheet" ) "";
  "PnLYearly" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "Portfolio Total Profit and Loss Yearly" ( "sheet columns.portfoliosheet" ) "";
  "Portfolio Value at Risk From Scenario Custom" ( "sheet columns.portfoliosheet" ) "";
  "PortLimit" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "PortUtilPercent" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "PortUtilStatus" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "PosisiSaldoAkhirBulan" ( "sheet columns.tradesheet" ) "";
  "PositionCCY1" ( "sheet columns.tradesheet" ) "";
  "PositionEOD" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "PostingBySystem" ( "sheet columns.journalsheet" ) "";
  "PPhPotong1" ( "sheet columns.tradesheet" ) "";
  "PPhPotong2" ( "sheet columns.tradesheet" ) "";
  "PPlusI" ( "sheet columns.tradesheet" ) "";
  "PPlusIAboveOneYear" ( "sheet columns.tradesheet" ) "";
  "PPlusICurrent" ( "sheet columns.tradesheet" ) "";
  "PPlusINineMonthToTwelveMonth" ( "sheet columns.tradesheet" ) "";
  "PPlusIOneMonthToTwoMonth" ( "sheet columns.tradesheet" ) "";
  "PPlusIOneWeek" ( "sheet columns.tradesheet" ) "";
  "PPlusIOneWeekToOneMonth" ( "sheet columns.tradesheet" ) "";
  "PPlusISixMonthToNineMonth" ( "sheet columns.tradesheet" ) "";
  "PPlusIThreeMonthToSixMonth" ( "sheet columns.tradesheet" ) "";
  "PPlusITwoMonthToThreeMonth" ( "sheet columns.tradesheet" ) "";
  "premiOption" ( "sheet columns.tradesheet" ) "";
  "premiumCustom" ( "sheet columns.tradesheet" ) "";
  "PrevEffDate" ( "sheet columns.tradesheet" ) "";
  "PrevPrevEffDate" ( "sheet columns.tradesheet" ) "";
  "PrevPrevPrice" ( "sheet columns.tradesheet" ) "";
  "PrevPrice" ( "sheet columns.tradesheet" ) "";
  "PrevYearPrice" ( "sheet columns.tradesheet" ) "";
  "PriceChange" ( "sheet columns.tradesheet" ) "";
  "PriceYield8" ( "sheet columns.tradesheet" ) "";
  "PriceYST" ( "sheet columns.tradesheet" ) "";
  "PRINPAYAMT" ( "sheet columns.tradesheet" ) "";
  "PRINPAYAMT_HKD" ( "sheet columns.tradesheet" ) "";
  "PRINPAYAMT_USD" ( "sheet columns.tradesheet" ) "";
  "ProceedAmount" ( "sheet columns.journalsheet" ) "";
  "ProcessFlag" ( "sheet columns.journalsheet" ) "";
  "ProdType" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "Product" ( "sheet columns.tradesheet" ) "";
  "PV01ThresholdValue" ( "sheet columns.portfoliosheet" ) "";
  "PV01UtilizationPercentage" ( "sheet columns.portfoliosheet" ) "";
  "QuantityCustom" ( "sheet columns.tradesheet" ) "";
  "QuantityUsed" ( "sheet columns.tradesheet" ) "";
  "RATE_8" ( "sheet columns.tradesheet" ) "";
  "RatesOPICS" ( "sheet columns.tradesheet" ) "";
  "Reff" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "Reksadana" ( "sheet columns.tradesheet" ) "";
  "Reksus" ( "sheet columns.tradesheet" ) "";
  "REM" ( "sheet columns.tradesheet" ) "";
  "RemarkOutstanding" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "RemarkSellBuy" ( "sheet columns.tradesheet" ) "";
  "Repo" ( "sheet columns.tradesheet" ) "";
  "RepoBI" ( "sheet columns.tradesheet" ) "";
  "RepoCleanPrice" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "RepoDirtyPrice" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "RepoHaircut" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "RepoInterbank" ( "sheet columns.tradesheet" ) "";
  "RepoUnderlyingName" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "RepoYield" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "RepurchaseAmount" ( "sheet columns.tradesheet" ) "";
  "RevalRate" ( "sheet columns.tradesheet" ) "";
  "RevaluationAmount" ( "sheet columns.tradesheet" ) "";
  "RevRepoBI" ( "sheet columns.tradesheet" ) "";
  "RevRepoInterbank" ( "sheet columns.tradesheet" ) "";
  "RiskWeight" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "RowNumber" ( "sheet columns.tradesheet" ) "";
  "RPL_Yesterday" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "Rule Value Utilization % Custom" ( "sheet columns.rulesheet" ) "";
  "Rule Value Utilization Custom" ( "sheet columns.rulesheet" ) "";
  "S/M" ( "sheet columns.tradesheet" ) "";
  "SA-CCR_RWA" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "SB_Dimiliki" ( "sheet columns.tradesheet" ) "";
  "SB_Terbit" ( "sheet columns.tradesheet" ) "";
  "SCHED_Pay_Freq" ( "sheet columns.settlementsheet" "sheet columns.tradesheet" ) "";
  "Scttype" ( "sheet columns.tradesheet" ) "";
  "SECID" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "SecuritiesRating" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "SecuritiesRatingInstituition" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "SecuritySubtype" ( "sheet columns.tradesheet" ) "";
  "SellAmountCustom" ( "sheet columns.tradesheet" ) "";
  "SellCurrency_Custom" ( "sheet columns.journalsheet" ) "";
  "SEQNUM" ( "sheet columns.journalsheet" ) "";
  "SETTAMT" ( "sheet columns.tradesheet" ) "";
  "SETTAVGCOST" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "SETTBASEAMT" ( "sheet columns.tradesheet" ) "";
  "SETTBASETERMS" ( "sheet columns.tradesheet" ) "";
  "SETTCCY" ( "sheet columns.tradesheet" ) "";
  "Settlement Type" ( "sheet columns.tradesheet" ) "";
  "SettlePriceMTM" ( "sheet columns.tradesheet" ) "";
  "ShortTermFDQ" ( "sheet columns.tradesheet" ) "";
  "SNPDataBloomberg" ( "sheet columns.dealsheet" ) "";
  "SNPDataNTCS" ( "sheet columns.dealsheet" "sheet columns.tradesheet" ) "";
  "SNPHasilMatch" ( "sheet columns.dealsheet" ) "";
  "Sold Amount" ( "sheet columns.tradesheet" ) "";
  "SourceData" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "Sources" ( "sheet columns.tradesheet" ) "";
  "SpotAssets" ( "sheet columns.journalsheet" "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "SpotLiabilities" ( "sheet columns.journalsheet" "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "SRC_STM_ID" ( "sheet columns.journalsheet" ) "";
  "StandardYearlyLossThresholdValue" ( "sheet columns.portfoliosheet" ) "";
  "StandardYearlyLossUtilizationPercentage" ( "sheet columns.portfoliosheet" ) "";
  "StartAccrualFA" ( "sheet columns.tradesheet" ) "";
  "StartValue" ( "sheet columns.tradesheet" ) "";
  "StatusAntasena" ( "sheet columns.tradesheet" ) "";
  "StatusBondCutLoss" ( "sheet columns.tradesheet" ) "";
  "StatusBondHolding" ( "sheet columns.tradesheet" ) "";
  "StatusExpiry" ( "sheet columns.appliedrulesheet" "sheet columns.rulesheet" "sheet columns.rulevaluehistorysheet" ) "";
  "StatusLimit" ( "sheet columns.rulesheet" ) "";
  "StatusLimit_FX" ( "sheet columns.portfoliosheet" ) "";
  "StatusLimit_IR" ( "sheet columns.portfoliosheet" ) "";
  "StatusLimitExpiry" ( "sheet columns.rulesheet" ) "";
  "StatusLimitTrading" ( "sheet columns.portfoliosheet" ) "";
  "StatusMatchUnmatch" ( "sheet columns.journalsheet" ) "";
  "StatusNTCS" ( "sheet columns.tradesheet" ) "";
  "StatusRegistration" ( "sheet columns.tradesheet" ) "";
  "StatusUPL" ( "sheet columns.tradesheet" ) "";
  "STDEV" ( "sheet columns.tradesheet" ) "";
  "strikePrice2" ( "sheet columns.tradesheet" ) "";
  "Structured" ( "sheet columns.tradesheet" ) "";
  "SUBLMTNAME" ( "sheet columns.tradesheet" ) "";
  "SWAP" ( "sheet columns.tradesheet" ) "";
  "TahunPajak" ( "sheet columns.tradesheet" ) "";
  "tanggalJatuhTempoDokumenUnderlying" ( "sheet columns.tradesheet" ) "";
  "TanggalKondisi" ( "sheet columns.settlementsheet" ) "";
  "TargetFullYear" ( "sheet columns.portfoliosheet" ) "";
  "TargetMonth" ( "sheet columns.portfoliosheet" ) "";
  "TargetMonthPercent" ( "sheet columns.portfoliosheet" ) "";
  "TargetMTD" ( "sheet columns.portfoliosheet" ) "";
  "TargetMTDPercent" ( "sheet columns.portfoliosheet" ) "";
  "TargetYear" ( "sheet columns.portfoliosheet" ) "";
  "TargetYearPercent" ( "sheet columns.portfoliosheet" ) "";
  "TargetYTD" ( "sheet columns.portfoliosheet" ) "";
  "TargetYTDPercent" ( "sheet columns.portfoliosheet" ) "";
  "Tarif1" ( "sheet columns.tradesheet" ) "";
  "Tarif2" ( "sheet columns.tradesheet" ) "";
  "TarifPajak" ( "sheet columns.tradesheet" ) "";
  "TaxDifferenceJournal" ( "sheet columns.journalsheet" ) "";
  "Tenor" ( "sheet columns.journalsheet" "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "Term" ( "sheet columns.tradesheet" ) "";
  "Term_Deposit" ( "sheet columns.tradesheet" ) "";
  "TermofPeriod" ( "sheet columns.tradesheet" ) "";
  "TERMS" ( "sheet columns.tradesheet" ) "";
  "TglMacet" ( "sheet columns.settlementsheet" ) "";
  "TheoreticalPnLYearly" ( "sheet columns.portfoliosheet" ) "";
  "ThresholdValue1" ( "sheet columns.tradesheet" ) "";
  "tingkatIndikasiImbalan" ( "sheet columns.tradesheet" ) "";
  "ToleranceLimit" ( "sheet columns.tradesheet" ) "";
  "ToleranceLimit2" ( "sheet columns.tradesheet" ) "";
  "Total" ( "sheet columns.dealsheet" "sheet columns.tradesheet" ) "";
  "Total_Cashflow" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "Total_Coupon" ( "sheet columns.settlementsheet" ) "";
  "Total_EndCash" ( "sheet columns.tradesheet" ) "";
  "TotalACCINT" ( "sheet columns.tradesheet" ) "";
  "TotalAdm" ( "sheet columns.tradesheet" ) "";
  "TotalBorrowing" ( "sheet columns.tradesheet" ) "";
  "TotalINTAMT" ( "sheet columns.tradesheet" ) "";
  "TotalInterest" ( "sheet columns.tradesheet" ) "";
  "TotalNasabah" ( "sheet columns.tradesheet" ) "";
  "TotalPaymentReceive" ( "sheet columns.tradesheet" "sheet columns.tradingactivitysheet" ) "";
  "TotalPlacement" ( "sheet columns.tradesheet" ) "";
  "TotalPrincipal" ( "sheet columns.tradesheet" ) "";
  "TotalRMB" ( "sheet columns.tradesheet" ) "";
  "TotalSpot" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "TotalTaxableIncome" ( "sheet columns.tradesheet" ) "";
  "TotalUSD" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "TOTPAYAMT" ( "sheet columns.settlementsheet" ) "";
  "TPL" ( "sheet columns.journalsheet" ) "";
  "TPL_Yesterday" ( "sheet columns.tradesheet" ) "";
  "TPLD_USD" ( "sheet columns.portfoliosheet" ) "";
  "TPLM_USD" ( "sheet columns.portfoliosheet" ) "";
  "TPLY_USD" ( "sheet columns.portfoliosheet" ) "";
  "TradeNumber" ( "sheet columns.portfoliosheet" ) "";
  "TradeNumberCustom" ( "sheet columns.moneyflowsheet" ) "";
  "TradeNumberInstrument" ( "sheet columns.tradesheet" ) "";
  "TradeTimeDateOnly" ( "sheet columns.journalsheet" "sheet columns.portfoliosheet" "sheet columns.settlementsheet" "sheet columns.tradesheet" ) "";
  "TradeTimeTimeOnly" ( "sheet columns.tradesheet" ) "";
  "TradeTypeDesc" ( "sheet columns.tradesheet" ) "";
  "TranslationAmount" ( "sheet columns.tradesheet" ) "";
  "TRD" ( "sheet columns.dealsheet" "sheet columns.tradesheet" ) "";
  "Trilyun" ( "sheet columns.journalsheet" ) "";
  "TujuanPortfolio" ( "sheet columns.tradesheet" ) "";
  "Tunggakan" ( "sheet columns.settlementsheet" ) "";
  "Type_Placement" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "Type_YC" ( "sheet columns.tradesheet" ) "";
  "TypeofFunding" ( "sheet columns.tradesheet" ) "";
  "TypeOfSecurities" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "TypeUtilization" ( "sheet columns.tradesheet" ) "";
  "Unamortized" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "UnamortizedDiscPrem" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "UnamortizedInterest" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "UnderlyingThreshold" ( "sheet columns.tradesheet" ) "";
  "UnrealizedPlusIncomeToday" ( "sheet columns.tradesheet" ) "";
  "UnrealizedPlusIncomeYesterday" ( "sheet columns.tradesheet" ) "";
  "UPL_Yesterday" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "UpperRate" ( "sheet columns.tradesheet" ) "";
  "UserCancelOrAmendBO" ( "sheet columns.tradesheet" ) "";
  "UserCancelOrAmendFO" ( "sheet columns.tradesheet" ) "";
  "Utilisasi" ( "sheet columns.rulesheet" ) "";
  "UtilisasiCreditEquivalent" ( "sheet columns.rulesheet" ) "";
  "UtilizationBond" ( "sheet columns.tradesheet" ) "";
  "valutaDasarJnsSukuBungaAcuan" ( "sheet columns.tradesheet" ) "";
  "valutaDasarPremiumSukuBungaAcuan" ( "sheet columns.tradesheet" ) "";
  "valutaDasarSukuBungaTetap" ( "sheet columns.tradesheet" ) "";
  "valutaDasarTenorSukuBungaAcuan" ( "sheet columns.tradesheet" ) "";
  "valutaDokumenUnderlying" ( "sheet columns.tradesheet" ) "";
  "variabelMendasari" ( "sheet columns.tradesheet" ) "";
  "VarThresholdValue" ( "sheet columns.portfoliosheet" ) "";
  "VarUtilizationPercentage" ( "sheet columns.portfoliosheet" ) "";
  "VERIND" ( "sheet columns.tradesheet" ) "";
  "Volume Yesterday" ( "sheet columns.tradesheet" ) "";
  "VolumeDaily" ( "sheet columns.portfoliosheet" ) "";
  "VolumeMonthly" ( "sheet columns.portfoliosheet" ) "";
  "VolumePenjualan" ( "sheet columns.tradesheet" ) "";
  "VolumeYearly" ( "sheet columns.portfoliosheet" ) "";
  "WeekNumber" ( "sheet columns.tradesheet" ) "";
  "WHT" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "WHTText" ( "sheet columns.journalsheet" ) "";
  "WithinNOPLimits" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "WITHORIGCOSTAMT" ( "sheet columns.tradesheet" ) "";
  "Year" ( "sheet columns.tradesheet" ) "";
  "YearlyLossLimitUse" ( "sheet columns.portfoliosheet" ) "";
  "YearlyLossLimitUse2" ( "sheet columns.portfoliosheet" ) "";
  "YearNow" ( "sheet columns.tradesheet" ) "";
  "YesterdayPrice" ( "sheet columns.tradesheet" ) "";
  "YieldChange" ( "sheet columns.tradesheet" ) "";
  "YieldYST" ( "sheet columns.tradesheet" ) "";
  "YourAccount" ( "sheet columns.tradesheet" ) "";
  "YTD" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "YTDAchievement" ( "sheet columns.portfoliosheet" ) "";
}

clx FInstrumentAndTrades [FColumnDefinition] {
  MATPROCAMT =
  [ICT_CustomReports]FTradeRow:MATPROCAMT=;


}

clx FTradingSheet [FColumnDefinition] {
  1DayChange_Convexity =
  ColumnAppearance=Total_background
  Description=Utilization today subtracted by utilization previous position
  ExtensionAttribute=DayChangeConvexity
  GroupLabel=FieldCustom
  Label=1 Day Change Convexity
  Name=1 Day Change Convexity


  1DayChange_Counterparty =
  Description=Shows Near/Far if it is a Near/Far leg
  ExtensionAttribute=NearFarFXSwap
  Label=NearFarFXSwap
  Name=NearFarFXSwap


  1DayChange_CreditVaR =
  ColumnAppearance=Total_background
  Description=Utilization today subtracted by utilization previous position
  ExtensionAttribute=DayChangeCreditVaR
  GroupLabel=FieldCustom
  Label=1 Day Change CreditVaR
  Name=1 Day Change CreditVaR


  1DayChange_CS01 =
  ColumnAppearance=Total_background
  Description=Utilization today subtracted by utilization previous position
  ExtensionAttribute=DayChangeCS01
  GroupLabel=FieldCustom
  Label=1 Day Change CS01
  Name=1 Day Change CS01


  1DayChange_Delta =
  Description=Utilization today subtracted by utilization previous position
  ExtensionAttribute=DayChangeDelta
  Format=Imprecise
  GroupLabel=FieldCustom
  LabelList=1 Day Change Delta
  Name=1 Day Change Delta


  1DayChange_FX =
  ColumnAppearance=Total_background
  Description=Utilization today subtracted by utilization previous position (FX)
  ExtensionAttribute=OneDayChange_FX
  GroupLabel=FieldCustom
  Label=1 Day Change FX
  Name=1 Day Change FX


  1DayChange_FXVaR =
  ColumnAppearance=Total_background
  Description=Utilization today subtracted by utilization previous position
  ExtensionAttribute=DayChangeFXVaR
  GroupLabel=FieldCustom
  Label=1 Day Change FXVaR
  Name=1 Day Change FXVaR


  1DayChange_HVaR =
  ColumnAppearance=Total_background
  Description=Utilization today subtracted by utilization previous position
  ExtensionAttribute=DayChangeHVaR
  GroupLabel=FieldCustom
  Label=1 Day Change HVaR
  Name=1 Day Change HVaR


  1DayChange_IncrementalVaR =
  ColumnAppearance=Total_background
  Description=Utilization today subtracted by utilization previous position
  ExtensionAttribute=DayChangeIncrementalVaR
  GroupLabel=FieldCustom
  Label=1 Day Change IncrementalVaR
  Name=1 Day Change IncrementalVaR


  1DayChange_IR =
  ColumnAppearance=Total_background
  Description=Utilization today subtracted by utilization previous position (IR)
  ExtensionAttribute=OneDayChange_IR
  GroupLabel=FieldCustom
  Label=1 Day Change IR
  Name=1 Day Change IR


  1DayChange_IRVaR =
  ColumnAppearance=Total_background
  Description=Utilization today subtracted by utilization previous position
  ExtensionAttribute=DayChangeIRVaR
  GroupLabel=FieldCustom
  Label=1 Day Change IRVaR
  Name=1 Day Change IRVaR


  1DayChange_Issuer =
  ColumnAppearance=Total_background
  Description=Utilization today subtracted by utilization previous position (for Issuer)
  ExtensionAttribute=DayChangeIssuer
  GroupLabel=FieldCustom
  Label=1 Day Change Issuer
  Name=1 Day Change


  1DayChange_MarginalVaR =
  ColumnAppearance=Total_background
  Description=Utilization today subtracted by utilization previous position
  ExtensionAttribute=DayChangeMarginalVaR
  GroupLabel=FieldCustom
  Label=1 Day Change MarginalVaR
  Name=1 Day Change MarginalVaR


  1DayChange_PV01 =
  Description=Utilization today subtracted by utilization previous position
  ExtensionAttribute=DayChangePV01
  Format=Imprecise
  GroupLabel=FieldCustom
  LabelList=1 Day Change PV01
  Name=1 Day Change PV01


  1DayChange_ShortfallVaR =
  ColumnAppearance=Total_background
  Description=Utilization today subtracted by utilization previous position
  ExtensionAttribute=DayChangeShortfallVaR
  GroupLabel=FieldCustom
  Label=1 Day Change ShortfallVaR
  Name=1 Day Change ShortfallVaR


  1DayChange_Trading =
  ColumnAppearance=Total_background
  Description=Utilization today subtracted by utilization previous position
  ExtensionAttribute=DayChangeTrading
  GroupLabel=FieldCustom
  Label=1 Day Change
  Name=1 Day Change


  AbsSettlementAmt =
  Description=
  ExtensionAttribute=AbsSettlementAmt
  Format=
  GroupLabel=FieldCustom
  LabelList=AbsSettlementAmt
  Name=AbsSettlementAmt


  ACCINT =
  Access=ReadOnly
  Description=
  ExtensionAttribute=ACCINT
  Format=
  GroupLabel=FieldCustom
  LabelList=ACCINT
  Name=ACCINT


  AccountBranch =
  ColumnAppearance=Total_background
  Description=Account Branch
  ExtensionAttribute=AccountBranch
  GroupLabel=FieldCustom
  Label=Account Branch
  Name=Account Branch


  AccountID =
  ColumnAppearance=Total_background
  Description=<TradeNumber>_OPT_CON_<Bought/Sold>_<Call/Put>_TR
  ExtensionAttribute=AccountID
  Format=
  GroupLabel=FieldCustom
  Label=Account ID
  Name=Account ID


  ACCROUTSTAMT =
  Description=Shows trade number if buy.
  ExtensionAttribute=ACCROUTSTAMT
  Format=
  GroupLabel=FieldCustom
  LabelList=ACCROUTSTAMT
  Name=ACCROUTSTAMT


  Accrued_Outstanding =
  Description=The sum of amount which hasnÃÂÃÂÃÂÃÂ¢ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂt been received or paid.
  ExtensionAttribute=AccruedOutstanding
  Format=Imprecise
  GroupLabel=FieldCustom
  LabelList=Accrued Outstanding
  Name=Accrued Outstanding


  AccruedInterestValue =
  ColumnAppearance=Total_background
  Description=
  ExtensionAttribute=AccruedInterestValue
  GroupLabel=FieldCustom
  Label=AccruedInterestValue
  Name=AccruedInterestValue


  ACCTTYPE =
  ColumnAppearance=Total_background
  Description=ACCTTYPE
  Label=ACCTTYPE
  Name=ACCTTYPE


  AccumulativeOrPerTransaction =
  ColumnAppearance=Total_background
  Description=Transaction type category (accumulative or per transaction), only spot can be accumulative
  ExtensionAttribute=AccumulativeOrPerTransaction
  GroupLabel=FieldCustom
  Label=Accumulative / Per Transaction
  Name=Accumulative / Per Transaction


  AcquisitionIDR =
  ColumnAppearance=Total_background
  Description=The acquisition cost of transaction (asset) equals in IDR.
  ExtensionAttribute=AcquisitionIDR
  Format=
  GroupLabel=FieldCustom
  Label=Acquisition IDR
  Name=Acquisition IDR


  AcquisitionPricePercent =
  Description=Realized Profit/Loss to Total Profit/Loss in Percentage
  ExtensionAttribute=AcquisitionPricePercent
  Format=
  GroupLabel=FieldCustom
  LabelList=Acquisition Price (%)
  Name=Acquisition Price %


  AcquisitionRecord =
  Description=Acquisition Record of Additional Payment.
  ExtensionAttribute=AcquisitionRecord
  Format=
  GroupLabel=FieldCustom
  LabelList=Acq. Price and Date Record
  Name=Acquisition Record


  AFS =
  Access=ReadOnly
  Description=Available for Sale
  ExtensionAttribute=AFS
  Format=
  GroupLabel=FieldCustom
  LabelList=AFS
  Name=AFS


  AgreedSellingPrice =
  Access=ReadOnly
  Description=Second leg price of reverse repo
  ExtensionAttribute=AgreedSellingPrice
  Format=
  GroupLabel=FieldCustom
  LabelList=Agreed Selling Price
  Name=Agreed Selling Price


  AIP =
  ColumnAppearance=Total_background
  Description=Automatic Investment
  ExtensionAttribute=AIP
  GroupLabel=FieldCustom
  Label=AIP
  Name=AIP


  AL =
  Access=ReadOnly
  Description=Asset or Liability indicator
  ExtensionAttribute=AL
  Format=
  GroupLabel=FieldCustom
  LabelList=AL
  Name=Asset Type


  AllInRate =
  Access=ReadOnly
  Description=Fixing rate + spread
  ExtensionAttribute=AllInRate
  Format=
  GroupLabel=FieldCustom
  LabelList=All In Rate
  Name=All In Rate


  AllInRate2 =
  Access=ReadOnly
  Description=The average of pay leg rate and receive leg rate
  ExtensionAttribute=AllInRate2
  Format=
  GroupLabel=FieldCustom
  LabelList=AllInRate
  Name=All In Rate (average)


  AllowanceForLosses =
  Access=ReadOnly
  Description=1% reserved of outstanding placement
  ExtensionAttribute=AllowanceForLosses
  Format=
  GroupLabel=FieldCustom
  LabelList=Allowance for Possible Losses
  Name=Allowance for Possible Losses


  Amendment =
  ColumnAppearance=Total_background
  Description=Amendment
  ExtensionAttribute=Amendment
  GroupLabel=FieldCustom
  Label=Amendment
  Name=Amendment


  AmendmentDate =
  ColumnAppearance=Total_background
  Description=Amendment Date
  ExtensionAttribute=AmendmentDate
  GroupLabel=FieldCustom
  Label=AmendmentDate
  Name=AmendmentDate


  Amortized010203 =
  Access=ReadOnly
  Description=The paying off debt with fixed repayment schedule prior to 01/02/03 rules
  ExtensionAttribute=Amortized010203
  Format=
  GroupLabel=FieldCustom
  LabelList=Amortized Prior in 01/02/03
  Name=Amortized Prior in 01/02/03


  Amortized2004 =
  Access=ReadOnly
  Description=The paying off debt with fixed repayment schedule prior to 2004
  ExtensionAttribute=Amortized2004
  Format=
  GroupLabel=FieldCustom
  LabelList=Amortized Prior in 2004
  Name=Amortized Prior in 2004


  AmortizedDiscPrem =
  Access=ReadOnly
  Description=Amount of accrue interest from start period of repo transaction until report date generated
  ExtensionAttribute=AmortizedDiscPrem
  Format=
  GroupLabel=FieldCustom
  LabelList=Amortized Disc/Premium
  Name=Amortized Disc/Premium


  Amount of Underlying =
  ColumnAppearance=Total_background
  Description=FIFO underlying used to cover the transaction
  ExtensionAttribute=AmountofUnderlying
  Format=
  GroupLabel=FieldCustom
  Label=Amount of Underlying
  Name=Amount of Underlying


  AmountAccumulativePerMonth =
  ColumnAppearance=Total_background
  Description=Accumulative amount refer to column (amount transaction)
  ExtensionAttribute=AmountAccumulativePerMonth
  GroupLabel=FieldCustom
  Label=Amount Accumulative Per Month
  Name=Amount Accumulative Per Month


  AmountClosing =
  ColumnAppearance=AmountClosing
  Description=Nominal * Rate From Value Day
  ExtensionAttribute=AmountClosing
  GroupLabel=FieldCustom
  Name=AmountClosing


  AmountClosingYesterday =
  ColumnAppearance=AmountClosingYesterday
  Description=Nominal * Rate From Value Day - 1
  ExtensionAttribute=AmountClosingYesterday
  GroupLabel=FieldCustom
  Name=AmountClosingYesterday


  AmountToFund =
  Access=ReadOnly
  Description=AVERAGECOST + PURCHASED INTEREST
  ExtensionAttribute=AmountToFund
  Format=
  GroupLabel=FieldCustom
  LabelList=AMOUNT TO FUND
  Name=Amount to Fund


  ApprovalSystem =
  Access=ReadOnly
  Description=The system where the transaction is approved. (NTCS or not NTCS).
  ExtensionAttribute=ApprovalSystem
  Format=
  GroupLabel=FieldCustom
  LabelList=Approval System
  Name=Approval System


  ARGNO =
  Access=ReadOnly
  Description=1 means Debit, 2 means Credit
  ExtensionAttribute=ARGNO
  Format=
  GroupLabel=FieldCustom
  LabelList=ARGNO
  Name=ARGNO


  ASSETID =
  Access=ReadOnly
  Description=
  ExtensionAttribute=ASSETID
  Format=
  GroupLabel=FieldCustom
  LabelList=ASSETID
  Name=ASSETID


  ASSIGNEDQTY =
  ColumnAppearance=Total_background
  Description=ASSIGNEDQTY
  ExtensionAttribute=ASSIGNEDQTY
  GroupLabel=FieldCustom
  Label=ASSIGNEDQTY
  Name=ASSIGNEDQTY


  AveragePrice =
  Access=ReadOnly
  Description=Average Price per Trader
  ExtensionAttribute=AveragePrice
  Format=
  GroupLabel=FieldCustom
  LabelList=Average Price
  Name=Average Price


  Balance =
  ColumnAppearance=Total_background
  DescriptionThe Balance Amount in Total of Amount + AIP=
  ExtensionAttribute=Balance
  GroupLabel=FieldCustom
  Label=Balance
  Name=Balance


  Banking Unit =
  Description=Banking Unit for ACU (Asian Currency Unit) or DBU (Domestic Banking Unit).
  ExtensionAttribute=BankingUnit
  GroupLabel=FieldCustom
  LabelList=Banking Unit
  Name=Banking Unit


  BaseCurrCR =
  ColumnAppearance=Total_background
  Description=
  ExtensionAttribute=BaseCurrCR
  GroupLabel=FieldCustom
  Label=BaseCurrCR
  Name=BaseCurrCR


  BaseCurrDR =
  ColumnAppearance=Total_background
  Description=
  ExtensionAttribute=BaseCurrDR
  GroupLabel=FieldCustom
  Label=BaseCurrDR
  Name=BaseCurrDR


  BasketRepoRate_6 =
  Description=Showing Repo Rate Field on Basket Repo
  ExtensionAttribute=BasketRepoRate_6
  Format=SixDecimalDetailed
  GroupLabel=FieldCustom
  LabelList=BasketRepoRate_6
  Name=BasketRepoRate_6


  BeginningBalance =
  Description=The amount of capital / asset at the start of new period
  ExtensionAttribute=BeginningBalance
  Format=
  GroupLabel=FieldCustom
  LabelList=Beginning Balance
  Name=Beginning Balance


  BEIND =
  Access=ReadOnly
  Description=Indicator original value or equivalent currency. 0 = IDR, which is Original Currency.
  ExtensionAttribute=BEIND
  Format=
  GroupLabel=FieldCustom
  LabelList=BEIND
  Name=BEIND


  Beneficiary =
  Access=ReadOnly
  Description=
  ExtensionAttribute=Beneficiary
  Format=
  GroupLabel=FieldCustom
  LabelList=Beneficiary
  Name=Beneficiary


  BidPrice =
  Description=Bid Price from Price Entry.
  ExtensionAttribute=BidPrice
  Format=
  GroupLabel=FieldCustom
  Label=Bid Price
  Name=Bid Price


  BidPriceBGN =
  ColumnAppearance=Total_background
  Description=Control Sheet MTM
  ExtensionAttribute=BidPriceBGN
  Format=
  GroupLabel=FieldCustom
  Label=Bid Price BGN
  Name=Bid Price BGN


  BidPriceBVAL =
  ColumnAppearance=Total_background
  Description=Control Sheet MTM
  ExtensionAttribute=BidPriceBVAL
  Format=
  GroupLabel=FieldCustom
  Label=Bid Price BVAL
  Name=Bid Price BVAL


  BidPriceEXCH =
  ColumnAppearance=Total_background
  Description=Control Sheet MTM
  ExtensionAttribute=BidPriceEXCH
  Format=
  GroupLabel=FieldCustom
  Label=Bid Price EXCH
  Name=Bid Price EXCH


  BIS4 =
  Access=ReadOnly
  Description=The source of Mark to Market (bid price).
  ExtensionAttribute=BIS4
  Format=
  GroupLabel=FieldCustom
  LabelList=+BIS4
  Name=+BIS4


  Blank1 =
  ColumnAppearance=Total_background
  Description=Blank Field
  ExtensionAttribute=Blank1
  GroupLabel=FieldCustom
  Label=Blank1
  Name=Blank1


  Blank2 =
  ColumnAppearance=Total_background
  Description=Blank Field
  ExtensionAttribute=Blank2
  GroupLabel=FieldCustom
  Label=Blank2
  Name=Blank2


  BMRISell =
  Description=Bank Mandiri Sell amount
  ExtensionAttribute=BMRISell
  Format=
  GroupLabel=FieldCustom
  LabelList=BMRI Sell
  Name=BMRI Sell


  BondPriceBuy =
  Description=BondPriceBuy
  ExtensionAttribute=BondPriceBuy
  GroupLabel=FieldCustom
  Label=Price Buy
  Name=Bond Price Buy


  BondPriceSell =
  Description=BondPriceSell
  ExtensionAttribute=BondPriceSell
  GroupLabel=FieldCustom
  Label=Price Sale
  Name=Bond Price Sell


  BookFilter =
  Access=ReadOnly
  Description=INLQINLQ, BBRSBBRS, BBCSBBCS
  ExtensionAttribute=BookFilter
  Format=
  GroupLabel=FieldCustom
  LabelList=Book
  Name=Book


  BOOKVALAMT =
  Description=Book Value Amount [(Nominal * Purchase Price) / 100]
  ExtensionAttribute=BOOKVALAMT
  GroupLabel=FieldCustom
  Label=BOOKVALAMT
  Name=BOOKVALAMT


  BookValueDeprec =
  Description=Book value from deprec and original cost
  ExtensionAttribute=BookValueDeprec
  Format=Imprecise
  GroupLabel=FieldCustom
  Label=Book Value
  Name=Book Value Deprec


  BookValueIDR =
  Description=The price of book value that equals to IDR.
  ExtensionAttribute=BookValueIDR
  Format=float
  GroupLabel=FieldCustom
  Label=Book Value IDR
  Name=Book Value IDR


  BorrowerCode =
  Access=ReadOnly
  Description=
  ExtensionAttribute=BorrowerCode
  Format=
  GroupLabel=FieldCustom
  LabelList=Borrower Code
  Name=Borrower Code


  BorrowerName =
  Access=ReadOnly
  Description=
  ExtensionAttribute=BorrowerName
  Format=
  GroupLabel=FieldCustom
  LabelList=Borrower Name
  Name=Borrower Name


  Bought Amount =
  Description=Value of CCY AMT
  ExtensionAttribute=CCYAmount
  Format=PreciseTwoDecimalsHideNaN
  GroupLabel=FieldCustom
  InheritsFrom=Buy Amount
  Label=Bought Amount
  Name=Bought Amount


  BRANCH =
  Description=It is define based on portfolio, where it will define ACU/DBU
  ExtensionAttribute=BRANCH
  GroupLabel=FieldCustom
  LabelList=BRANCH
  Name=BRANCH


  Branch Code =
  Description=Branch Code for Related Region.
  ExtensionAttribute=BranchCode
  GroupLabel=FieldCustom
  LabelList=Branch Code
  Name=Branch Code


  BreachTenor =
  ColumnAppearance=Total_background
  Description=Breach Tenor Yes/No
  ExtensionAttribute=BreachTenor
  GroupLabel=FieldCustom
  Label=BreachTenor
  Name=BreachTenor


  BRPRCINDTE =
  Access=ReadOnly
  Description=Create time date only
  ExtensionAttribute=BRPRCINDTE
  Format=
  GroupLabel=FieldCustom
  LabelList=BRPRCINDTE
  Name=BRPRCINDTE


  BUC =
  ColumnAppearance=Total_background
  Description=(Empty data record, but the fields still needed).
  ExtensionAttribute=BUC
  Format=
  GroupLabel=FieldCustom
  Label=BUC
  Name=BUC


  BuyAmountCustom =
  ColumnAppearance=
  Description=The amount of buy transaction.
  ExtensionAttribute=BuyAmountCustom
  GroupLabel=FieldCustom
  Name=Buy Amount


  BuyCurrency_Custom =
  Description=Buy Currency from trade sheet.
  ExtensionAttribute=BuyCurrency_Custom
  Format=
  GroupLabel=FieldCustom
  Label=Buy Currency
  Name=Buy Currency


  BuyerOrSeller =
  Access=ReadOnly
  Description=Position as Seller/Buyer: Buy: Buyer, Sell: Seller.
  ExtensionAttribute=BuyerOrSeller
  Format=
  GroupLabel=FieldCustom
  LabelList=peranPelapor
  Name=Peran Pelapor


  BuySellJournal =
  Description=Buy or Sell for Journal Sheet.
  ExtensionAttribute=BuySellJournal
  Format=
  GroupLabel=FieldCustom
  LabelList=B/S
  Name=Bought or Sold Journal


  CancelOrAmendDate =
  Access=ReadOnly
  Description=The date of canceling/amending transaction
  ExtensionAttribute=CancelOrAmendDate
  Format=
  GroupLabel=FieldCustom
  LabelList=Cancel/Amend Date
  Name=Cancel/Amend Date


  CapitalGain =
  Description=(Face Value * Trade Price /100) - Acquisition Amount.
  ExtensionAttribute=CapitalGain
  Format=
  GroupLabel=FieldCustom
  LabelList=CapitalGain
  Name=Capital Gain


  CapitalGainTax =
  Description=Capital Gain Tax
  ExtensionAttribute=CapitalGainTax
  Format=
  GroupLabel=FieldCustom
  LabelList=CapitalGainTax
  Name=Capital Gain Tax


  CasfhlowFarAmount =
  ColumnAppearance=Total_background_FarAmount
  Description=Far Amount is the far amount of the transaction (Premium in FA)
  ExtensionAttribute=CashflowFarAmount
  Format=
  GroupLabel=FieldCustom
  Label=CashflowFarAmount
  Name=CashflowFarAmount


  CashflowFA =
  Access=ReadOnly
  Description=Debit or Credit Indicator
  ExtensionAttribute=CashflowFA
  Format=
  GroupLabel=FieldCustom
  LabelList=CashFlow
  Name=CashFlow


  CashflowPresentValue =
  Description=Present Value of Fixed Amount
  ExtensionAttribute=CashflowPresentValue
  GroupLabel=FieldCustom
  LabelList=CashflowPresentValue
  Name=Cashflow Present Value


  CashflowProjectedValue =
  Description=Projected Value of Fixed Rate before Pay Date
  ExtensionAttribute=CashflowProjectedValue
  GroupLabel=FieldCustom
  LabelList=CashflowProjectedValue
  Name=Cashflow Projected Value


  CashY =
  ColumnAppearance=Total_background
  Description=CashY
  ExtensionAttribute=CashY
  GroupLabel=FieldCustom
  Label=CashY
  Name=CashY


  CAT =
  Access=ReadOnly
  Description=
  ExtensionAttribute=CAT
  Format=
  GroupLabel=FieldCustom
  LabelList=CAT
  Name=CAT


  CCS =
  Description=
  ExtensionAttribute=CCS
  GroupLabel=FieldCustom
  Label=CCS
  Name=CCS


  CCYRate =
  ColumnAppearance=Total_background
  Description=CCY Rate
  ExtensionAttribute=CCYRate
  GroupLabel=FieldCustom
  Label=CCYRate
  Name=CCYRate


  CFCITZ =
  Access=ReadOnly
  Description=
  ExtensionAttribute=CFCITZ
  Format=
  GroupLabel=FieldCustom
  LabelList=CFCITZ
  Name=CFCITZ


  CFCOUN =
  Access=ReadOnly
  Description=
  ExtensionAttribute=CFCOUN
  Format=
  GroupLabel=FieldCustom
  LabelList=CFCOUN
  Name=CFCOUN


  CFRESD =
  Access=ReadOnly
  Description=
  ExtensionAttribute=CFRESD
  Format=
  GroupLabel=FieldCustom
  LabelList=CFRESD
  Name=CFRESD


  ChargesDelay =
  ColumnAppearance=Total_background
  Description=The amount charged for the delay
  ExtensionAttribute=ChargesDelay
  GroupLabel=FieldCustom
  Label=Charges
  Name=Charges


  Checker =
  Access=ReadOnly
  Description=Calculation result, where value difference will be shown based on source used, compare to its factor, ex. When using BGN will compare to Price.
  ExtensionAttribute=Checker
  Format=
  GroupLabel=FieldCustom
  LabelList=Checker
  Name=Checker


  CIFBICode =
  ColumnAppearance=Total_background
  Description=CIF BI Code
  ExtensionAttribute=CIFBICode
  GroupLabel=FieldCustom
  Label=CIF BI Code
  Name=CIF BI Code


  CIFBranch =
  ColumnAppearance=Total_background
  Description=CIF Branch
  ExtensionAttribute=CIFBranch
  GroupLabel=FieldCustom
  Label=CIF Branch
  Name=CIF Branch


  ClassificationofSecurities =
  ColumnAppearance=Total_background
  Description=The classification of securities: HTM, AFS, TRD.
  ExtensionAttribute=ClassificationofSecurities
  Format=
  GroupLabel=FieldCustom
  Label=Classification of Securities
  Name=Classification of Securities


  ClosingBalance =
  Description=
  ExtensionAttribute=ClosingBalance
  Format=
  GroupLabel=FieldCustom
  LabelList=Closing Balance
  Name=ClosingBalance


  CLOSINGPRICE_8 =
  Description=Latest Settle Price
  ExtensionAttribute=CLOSINGPRICE_8
  Format=
  GroupLabel=FieldCustom
  LabelList=CLOSINGPRICE_8
  Name=CLOSINGPRICE_8


  closingPriceBond =
  Access=ReadOnly
  Description=
  ExtensionAttribute=closingPriceBond
  Format=SixDecimalDetailed
  GroupLabel=FieldCustom
  LabelList=closingPriceBond
  Name=closingPriceBond


  Code =
  Access=ReadOnly
  Description=The code of the currency. Static data currency code.
  ExtensionAttribute=Code
  Format=
  GroupLabel=FieldCustom
  LabelList=Code
  Name=Code


  CODE =
  Access=ReadOnly
  Description=Accounting event code
  ExtensionAttribute=CODE
  Format=
  GroupLabel=FieldCustom
  LabelList=CODE
  Name=CODE


  CodeDesc =
  Access=ReadOnly
  Description=The description to describe the transaction
  ExtensionAttribute=CodeDesc
  Format=
  GroupLabel=FieldCustom
  LabelList=Code Desc
  Name=Code Desc


  Collateral =
  Access=ReadOnly
  Description=Securities ID of transaction from OPICS
  ExtensionAttribute=Collateral
  Format=
  GroupLabel=FieldCustom
  LabelList=Collateral
  Name=Collateral


  CollateralAmount =
  Access=ReadOnly
  Description=The amount of collateral
  ExtensionAttribute=CollateralAmount
  Format=
  GroupLabel=FieldCustom
  LabelList=Collateral Amount


  CollateralCurrency =
  Access=ReadOnly
  Description=The currency of the collateral
  ExtensionAttribute=CollateralCurrency
  Format=
  GroupLabel=FieldCustom
  LabelList=Collateral Currency
  Name=Collateral Currency


  CollateralDueDate =
  Access=ReadOnly
  Description=The maturity of collateral
  ExtensionAttribute=CollateralDueDate
  Format=
  GroupLabel=FieldCustom
  LabelList=Collateral Due Date
  Name=Collateral Due Date


  COMIDB =
  Access=ReadOnly
  Description=
  ExtensionAttribute=COMIDB
  Format=
  GroupLabel=FieldCustom
  LabelList=COMIDB
  Name=COMIDB


  COMIDC =
  Access=ReadOnly
  Description=
  ExtensionAttribute=COMIDC
  Format=
  GroupLabel=FieldCustom
  LabelList=COMIDC
  Name=COMIDC


  Commission =
  Description=Commission from Additional Payment
  ExtensionAttribute=Commission
  Format=
  GroupLabel=FieldCustom
  LabelList=Commission
  Name=Commission


  COMMPROCAMT =
  Access=ReadOnly
  Description=
  ExtensionAttribute=COMMPROCAMT
  Format=
  GroupLabel=FieldCustom
  LabelList=COMMPROCAMT
  Name=COMMPROCAMT


  Conclusion =
  ColumnAppearance=Total_background
  Description=Compare between rate/price from price entry captured when user book and Trade Price from Front Arena
  ExtensionAttribute=Conclusion
  GroupLabel=FieldCustom
  Label=Conclusion
  Name=Conclusion


  ContractValNetAgree =
  Access=ReadOnly
  Description=Fair value deducts market value
  ExtensionAttribute=ContractValNetAgree
  Format=
  GroupLabel=FieldCustom
  LabelList=Contract Val
  Name=Contract Val


  CONVINTAMT =
  ColumnAppearance=Total_background
  Description=CONVINTAMT
  ExtensionAttribute=CONVINTAMT
  GroupLabel=FieldCustom
  Label=CONVINTAMT
  Name=CONVINTAMT


  CONVINTBAMT =
  ColumnAppearance=Total_background
  Description=CONVINTBAMT
  ExtensionAttribute=CONVINTBAMT
  GroupLabel=FieldCustom
  Label=CONVINTBAMT
  Name=CONVINTBAMT


  CorpSpreadAmount =
  Access=ReadOnly
  Description=Spread that equivalent to IDR.
  ExtensionAttribute=CorpSpreadAmount
  Format=
  GroupLabel=FieldCustom
  LabelList=CorpSpreadAmount
  Name=CorpSpreadAmount


  CorrespondentBank1 =
  ColumnAppearance=Total_background
  Description=Correspondent Bank 1
  ExtensionAttribute=CorrespondentBank1
  GroupLabel=FieldCustom
  Label=Correspondent Bank 1
  Name=Correspondent Bank 1


  CorrespondentBank2 =
  ColumnAppearance=Total_background
  Description=Correspondent Bank 2
  ExtensionAttribute=CorrespondentBank2
  GroupLabel=FieldCustom
  Label=Correspondent Bank 2
  Name=Correspondent Bank 2


  COSTAMT =
  ColumnAppearance=Total_background
  Description=COSTAMT
  ExtensionAttribute=COSTAMT
  GroupLabel=FieldCustom
  Label=COSTAMT
  Name=COSTAMT


  COSTBAMT =
  ColumnAppearance=Total_background
  Description=COSTBAMT
  ExtensionAttribute=COSTBAMT
  GroupLabel=FieldCustom
  Label=COSTBAMT
  Name=COSTBAMT


  Counter Currency =
  Description=Counter Currency of Position Pair
  ExtensionAttribute=CounterCurrency
  GroupLabel=FieldCustom
  Label=Counter Currency
  Name=Counter Currency


  CounterpartyCountryIND =
  Access=ReadOnly
  Description=1 for non-ID, 2 for ID.
  ExtensionAttribute=CounterpartyCountryIND
  Format=
  GroupLabel=FieldCustom
  LabelList=transaksiPihakAsing
  Name=Transaksi Pihak Asing


  CountryLimit =
  Access=ReadOnly
  Description=
  ExtensionAttribute=CountryLimit
  Format=
  GroupLabel=FieldCustom
  LabelList=Country Limit
  Name=Country Limit


  Coupon_SB_Dimiliki =
  Description=
  ExtensionAttribute=Coupon_SB_Dimiliki
  GroupLabel=FieldCustom
  Label=Coupon SB Dimiliki
  Name=Coupon SB Dimiliki


  CPMainCcy =
  ColumnAppearance=Total_background
  Description=Face Call or Put Main Currency.
  ExtensionAttribute=CPMainCcy
  Format=
  GroupLabel=FieldCustom
  Label=C/P MainCcy
  Name=C/P MainCcy


  CPMoneyCcy =
  ColumnAppearance=Total_background
  Description=Face Call or Put Money Currency. Opposite to C/P Main Currency.
  ExtensionAttribute=CPMoneyCcy
  Format=
  GroupLabel=FieldCustom
  Label=C/P MoneyCcy
  Name=C/P MoneyCcy


  CreateDate =
  Access=ReadOnly
  Description=Create Date
  ExtensionAttribute=CreateDate
  Format=
  GroupLabel=FieldCustom
  LabelList=Create Date
  Name=Create Date


  CreditAmount =
  Access=ReadOnly
  Description=
  ExtensionAttribute=CreditAmount
  Format=
  GroupLabel=FieldCustom
  LabelList=Credit Amount
  Name=Credit Amount


  CrEquivalent %Utilization =
  Access=ReadOnly
  Description=The percebtage of utilization of credit equivalent limit
  ExtensionAttribute=CrEquivalentPercentageUtilization
  Format=
  GroupLabel=FieldCustom
  LabelList=Credit Equivalent % Utilization
  Name=Credit Equivalent % Utilization


  CrEquivalent 1DayChange =
  Access=ReadOnly
  Description=Utilization today subtracted by utilization previos position
  ExtensionAttribute=CrEquivalent1DayChange
  Format=
  GroupLabel=FieldCustom
  LabelList=Credit Equivalent 1 Day Change
  Name=Credit Equivalent 1 Day Change


  CrEquivalentLimit =
  Access=ReadOnly
  Description=The credit equivalent limit of customer
  ExtensionAttribute=CrEquivalentLimit
  Format=
  GroupLabel=FieldCustom
  LabelList=Credit Equivalent Limit
  Name=Credit Equivalent Limit


  CrEquivalentUtilization =
  Access=ReadOnly
  Description=The utilization of credit equivalent limit
  ExtensionAttribute=CrEquivalentUtilization
  Format=
  GroupLabel=FieldCustom
  LabelList=Credit Equivalent Utilization
  Name=Credit Equivalent Utilization


  CS01 =
  ColumnAppearance=Total_background
  Description=To inform the utilisation in CS01
  ExtensionAttribute=CS01
  GroupLabel=FieldCustom
  Label=CS01
  Name=CS01


  CurrAgainstSGD =
  ColumnAppearance=Total_background
  Description=All rate in percentage for each currency against SGD
  ExtensionAttribute=CurrAgainstUSD
  GroupLabel=FieldCustom
  Label=Currency Against SGD
  Name=Currency Against SGD


  CurrAgainstUSD =
  ColumnAppearance=Total_background
  Description=All rate in percentage for each currency against USD
  ExtensionAttribute=CurrAgainstUSD
  GroupLabel=FieldCustom
  Label=Currency Against USD
  Name=Currency Against USD


  Currency Rate 8 =
  Description=
  Format=EightDecimalDetailedHideNaN
  GroupLabel=FieldCustom
  InheritsFrom=Exchange Rate
  Label=CCY RATE 8
  Name=CCY RATE 8


  CurrencyCR =
  ColumnAppearance=Total_background
  Description=
  ExtensionAttribute=CurrencyCR
  GroupLabel=FieldCustom
  Label=CurrencyCR
  Name=CurrencyCR


  CurrencyDR =
  ColumnAppearance=Total_background
  Description=
  ExtensionAttribute=CurrencyDR
  GroupLabel=FieldCustom
  Label=CurrencyDR
  Name=CurrencyDR


  CurrencyUpdateDate =
  Access=ReadOnly
  Description=
  ExtensionAttribute=CurrencyUpdateDate
  Format=
  GroupLabel=FieldCustom
  LabelList=Currency Update Date
  Name=Currency Update Date


  CustomerCategory =
  Access=ReadOnly
  Description=The name of customer category of transaction
  ExtensionAttribute=CustomerCategory
  Format=
  GroupLabel=FieldCustom
  LabelList=Customer Category
  Name=Customer Category


  CustomerName =
  Access=ReadOnly
  Description=The customerÃÂÃÂÃÂÃÂ¢ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂs name of transaction
  ExtensionAttribute=CustomerName
  Format=
  GroupLabel=FieldCustom
  LabelList=Customer Name
  Name=Customer Name


  DailyInterest =
  Description=If Days to Maturity is negative then 0. Else, return Face Value times Interest Rate at Trade Time divided by 100 and divided by 360.
  ExtensionAttribute=DailyInterest
  Format=SixDecimalDetailedPercent
  GroupLabel=FieldCustom
  LabelList=Daily Int
  Name=Daily Interest


  DataType =
  Description=If Buy, then Blank. If Sell, then 2.
  ExtensionAttribute=DataType
  Format=
  GroupLabel=FieldCustom
  LabelList=DataType
  Name=Data Type


  DateNow =
  Access=ReadOnly
  Description=
  ExtensionAttribute=DateNow
  Format=
  GroupLabel=FieldCustom
  LabelList=DateNow
  Name=DateNow


  DateRange =
  ColumnAppearance=Total_background
  Description=Date Range
  ExtensionAttribute=DateRange
  GroupLabel=FieldCustom
  Label=DateRange
  Name=Date


  DaysDelay =
  Description=SettlementDate - TradeDate
  ExtensionAttribute=DaysDelay
  Format=
  GroupLabel=FieldCustom
  LabelList=Days Delay
  Name=Days Delay


  DaysToMaturity =
  Description=Date difference between End Date (Maturity Date) and Today.
  ExtensionAttribute=DaysToMaturity
  GroupLabel=FieldCustom
  LabelList=Days to Maturity
  Name=Days to Maturity


  DayToExpired =
  Access=ReadOnly
  Description=The length of time remaining before the transaction expires in days
  ExtensionAttribute=DayToExpired
  Format=
  GroupLabel=FieldCustom
  LabelList=Days to Expiration
  Name=Days to Expiration


  DCIND =
  Access=ReadOnly
  Description=Debet/Credit transaction: Default 'D'
  ExtensionAttribute=DCIND
  Format=
  GroupLabel=FieldCustom
  LabelList=periodeLaporan
  Name=Periode Laporan


  DebitAmount =
  Access=ReadOnly
  Description=
  ExtensionAttribute=DebitAmount
  Format=
  GroupLabel=FieldCustom
  LabelList=Debit Amount
  Name=Debit Amount


  Delta_ExchangeRate =
  Access=ReadOnly
  Description=The delta compared to previous exchange rate.
  ExtensionAttribute=Delta_ExchangeRate
  Format=
  GroupLabel=FieldCustom
  LabelList=Delta Exchange Rate
  Name=Delta Exchange Rate


  DeltaCheck =
  ColumnAppearance=Total_background
  Description=Check whether YDelta% has value or not.
  ExtensionAttribute=DeltaCheck
  Format=
  GroupLabel=FieldCustom
  Label=Delta Check
  Name=Delta Check


  DeltaThresholdValue =
  Access=ReadOnly
  Description=Delta Threshold Value
  ExtensionAttribute=DeltaThresholdValue
  Format=
  GroupLabel=FieldCustom
  LabelList=DeltaThresholdValue
  Name=DeltaThresholdValue


  DeltaUtilizationPercentage =
  Description=Standard Delta Utilization Percentage
  ExtensionAttribute=DeltaUtilizationPercentage
  Format=
  GroupLabel=FieldCustom
  LabelList=DeltaUtilizationPercentage
  Name=DeltaUtilizationPercentage


  DENOM =
  Access=ReadOnly
  Description=
  ExtensionAttribute=DENOM
  Format=
  GroupLabel=FieldCustom
  LabelList=DENOM
  Name=DENOM


  Dept =
  Access=ReadOnly
  Description=Treasury Department
  ExtensionAttribute=Dept
  Format=
  GroupLabel=FieldCustom
  LabelList=Dept
  Name=Dept


  DerivativesPayables =
  Access=ReadOnly
  Description=Type of Securities: The sum of the negative values
  ExtensionAttribute=DerivativesPayables
  Format=
  GroupLabel=FieldCustom
  LabelList=Derivatives Payables
  Name=Derivatives Payables


  DerivativesReceivables =
  Access=ReadOnly
  Description=Type of Securities: The sum of the positive replacement values of all itÃÂÃÂÃÂÃÂ¢ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂs over the-counter derivatives contracts
  ExtensionAttribute=DerivativesReceivables
  Format=
  GroupLabel=FieldCustom
  LabelList=Derivatives Receivables
  Name=Derivatives Receivables


  Desc =
  Access=ReadOnly
  Description=Combination of <product><.><Trade Id></><Product Type>/
  ExtensionAttribute=Desc
  Format=
  GroupLabel=FieldCustom
  LabelList=Desc
  Name=Desc


  Descr =
  Access=ReadOnly
  Description=BUNGA PINJAMAN LAINNYA DITM LAINNYA
  ExtensionAttribute=Descr
  Format=
  GroupLabel=FieldCustom
  LabelList=Descr
  Name=Descr


  DescriptionUnderlying =
  ColumnAppearance=Total_background
  Description=Field custom to define underlying condition
  ExtensionAttribute=DescriptionUnderlying
  GroupLabel=FieldCustom
  Label=Description Underlying
  Name=Description Underlying


  DeskripsiSandi =
  Description=Deskripsi Sandi
  ExtensionAttribute=DeskripsiSandi
  Format=
  GroupLabel=FieldCustom
  LabelList=Deskripsi Sandi
  Name=Deskripsi Sandi


  Diff1 =
  Access=ReadOnly
  Description=The difference from NTCS and Market Data Source.
  ExtensionAttribute=Diff1
  Format=
  GroupLabel=FieldCustom
  LabelList=Diff Exchange Rate 1
  Name=Diff Exchange Rate 1


  Diff2 =
  Access=ReadOnly
  Description=The difference from NTCS and EMAS Data Source.
  ExtensionAttribute=Diff2
  Format=
  GroupLabel=FieldCustom
  LabelList=Diff Exchange Rate 2
  Name=Diff Exchange Rate 2


  Difference =
  ColumnAppearance=Total_background
  Description=Premium - far sell amount
  ExtensionAttribute=Difference
  Format=
  GroupLabel=FieldCustom
  Label=Difference
  Name=Difference


  Difference_EndCash =
  Description=Difference of End Cash Buy + End Cash Sell
  ExtensionAttribute=Difference_EndCash
  GroupLabel=FieldCustom
  LabelList=Difference_EndCash
  Name=Difference End Cash


  DiffRate =
  ColumnAppearance=Total_background
  Description=The difference between CcyRate and Reval Rate
  ExtensionAttribute=DiffRate
  GroupLabel=FieldCustom
  Label=DiffRate
  Name=DiffRate


  DiffRate100 =
  ColumnAppearance=Total_background
  Description=The difference between CcyRate and Reval Rate in Percentage
  ExtensionAttribute=DiffRate100
  GroupLabel=FieldCustom
  Label=DiffRate100
  Name=DiffRate100


  DirAmount1 =
  Access=ReadOnly
  Description=DirAmount1
  ExtensionAttribute=DirAmount1
  Format=
  GroupLabel=FieldCustom
  LabelList=DirAmount1
  Name=DirAmount1


  DirAmount2 =
  Access=ReadOnly
  Description=DirAmount2
  ExtensionAttribute=DirAmount2
  Format=
  GroupLabel=FieldCustom
  LabelList=DirAmount2
  Name=DirAmount2


  DRCRIND =
  Access=ReadOnly
  Description=Debit or Credit Indicator
  ExtensionAttribute=DRCRIND
  Format=
  GroupLabel=FieldCustom
  LabelList=DRCRIND
  Name=DRCRIND


  eFx =
  Access=ReadOnly
  Description=Transaction Sources
  ExtensionAttribute=eFx
  Format=
  GroupLabel=FieldCustom
  LabelList=e-Fx
  Name=e-Fx


  EMAS =
  Access=ReadOnly
  Description=The exchange rate registered in EMAS.
  ExtensionAttribute=EMAS
  Format=
  GroupLabel=FieldCustom
  LabelList=EMAS
  Name=EMAS


  EndAccrualFA =
  Description=PV Value for Fixed Rate type
  ExtensionAttribute=EndAccrualFA
  Format=
  GroupLabel=FieldCustom
  LabelList=End Accrual
  Name=End Accrual


  EndCashRepo =
  Description=End Cash of Repo
  ExtensionAttribute=EndCashRepo
  GroupLabel=FieldCustom
  Name=End Cash Repo


  EndInterest =
  Description=The end interest of the transaction.
  ExtensionAttribute=EndInterest
  Format=
  GroupLabel=FieldCustom
  LabelList=EndInterest
  Name=End Interest


  EndValue =
  Access=ReadOnly
  Description=Notional + Accrual
  ExtensionAttribute=EndValue
  Format=
  GroupLabel=FieldCustom
  LabelList=EndValue
  Name=End Value


  EquivalentAmountIDR =
  Access=ReadOnly
  Description=The amount that equivalent to IDR
  ExtensionAttribute=EquivalentAmountIDR
  Format=Imprecise
  GroupLabel=FieldCustom
  LabelList=Equivalent Amount IDR
  Name=Equivalent Amount IDR


  EquivalentMarketIDR =
  Access=ReadOnly
  Description=Market value equivalent to IDR
  ExtensionAttribute=EquivalentMarketIDR
  Format=Imprecise
  GroupLabel=FieldCustom
  LabelList=Equivalent Market IDR
  Name=Equivalent Market IDR


  EqvUSD =
  Description=Equivalent in USD.
  ExtensionAttribute=EqvUSD
  Format=FiveDecimalDetailed
  GroupLabel=FieldCustom
  LabelList=EqvUSD
  Name=EqvUSD


  ExchangeRateNTCS =
  Access=ReadOnly
  Description=The exchange rate in NTCS.
  ExtensionAttribute=ExchangeRateNTCS
  Format=
  GroupLabel=FieldCustom
  LabelList=Exchange Rate NTCS
  Name=Exchange Rate NTCS


  ExcRate =
  Description=NTR
  ExtensionAttribute=ExcRate
  GroupLabel=FieldCustom
  Label=ExcRate
  Name=ExcRate


  ExcRateAgainstCNY =
  Description=ExcRateAgainstCNY
  ExtensionAttribute=ExcRateAgainstCNY
  GroupLabel=FieldCustom
  Label=Against CNY
  Name=Against CNY


  ExcRateAgainstUSD =
  Description=ExcRateAgainstUSD
  ExtensionAttribute=ExcRateAgainstUSD
  GroupLabel=FieldCustom
  Label=Against USD*
  Name=Against USD*


  ExtractDate =
  Access=ReadOnly
  Description=
  ExtensionAttribute=ExtractDate
  Format=
  GroupLabel=FieldCustom
  LabelList=Extract Date
  Name=Extract Date


  ExtractFlag =
  Access=ReadOnly
  Description=
  ExtensionAttribute=ExtractFlag
  Format=
  GroupLabel=FieldCustom
  LabelList=Extract Flag
  Name=Extract Flag


  FaceAmount =
  ColumnAppearance=Total_background_FaceAmount
  Description=Face Amount is the original amount of the transaction prior to discount.
  ExtensionAttribute=FaceAmount
  Format=
  GroupLabel=FieldCustom
  Label=Face Amount
  Name=Face Amount


  Facility =
  Access=ReadOnly
  Description=The type of facility (bilateral loan/repo, etc)
  ExtensionAttribute=Facility
  Format=
  GroupLabel=FieldCustom
  LabelList=Facility
  Name=Facility


  Far/NearFlag =
  Access=ReadOnly
  Description=
  ExtensionAttribute=Far/NearFlag
  Format=
  GroupLabel=FieldCustom
  LabelList=F/N
  Name=F/N


  FarAmount =
  ColumnAppearance=Total_background_FarAmount
  Description=Far Amount is the far amount of the transaction (Premium in FA)
  ExtensionAttribute=FarAmount
  Format=
  GroupLabel=FieldCustom
  Label=Far Amount
  Name=Far Amount


  FarAmount1 =
  ColumnAppearance=Total_background
  Description=Far Amount is the far amount of the transaction
  ExtensionAttribute=FarAmount1
  Format=
  GroupLabel=FieldCustom
  Label=Far Amount 1
  Name=Far Amount 1


  FarAmount2 =
  ColumnAppearance=Total_background_FarAmount2
  Description=The total of Far Amount 1 * Far Rate.
  ExtensionAttribute=FarAmount2
  Format=
  GroupLabel=FieldCustom
  Label=Far Amount 2
  Name=Far Amount 2


  FBI =
  ColumnAppearance=Total_background
  Description=Fee Based Income
  ExtensionAttribute=FBI
  Format=
  GroupLabel=FieldCustom
  Label=FBI
  Name=FBI


  FBIThisYear =
  Description=Fee Based Income in this year (0y).
  ExtensionAttribute=FBIThisYear
  Format=Imprecise
  GroupLabel=Profit & loss (fee based income & net interest income)
  Name=FBI 0y


  FBIYesteryear =
  Description=Fee Based Income a year before (-1y).
  ExtensionAttribute=FBIYesteryear
  Format=Imprecise
  GroupLabel=Profit & loss (fee based income & net interest income)
  Name=FBI -1y


  FDQ =
  Description=If China, then No FDQ. If not China and Long Term, then Long term FDQ. If not China and Short Term, then Short term FDQ.
  ExtensionAttribute=FDQ
  GroupLabel=FieldCustom
  LabelList=FDQ
  Name=FDQ


  FeeIDR =
  ColumnAppearance=Total_background
  Description=The broker fee of transaction equals in IDR.
  ExtensionAttribute=FeeIDR
  Format=
  GroupLabel=FieldCustom
  Label=Fee IDR
  Name=Fee IDR


  FITCHDataBloomberg =
  Access=ReadOnly
  Description=The rating of FITCH in Bloomberg
  ExtensionAttribute=FITCHDataBloomberg
  Format=
  GroupLabel=FieldCustom
  LabelList=FITCH Data Bloomberg
  Name=FITCH Data Bloomberg


  FITCHDataNTCS =
  Access=ReadOnly
  Description=The rating of FITCH in NTCS
  ExtensionAttribute=FITCHDataNTCS
  Format=
  GroupLabel=FieldCustom
  LabelList=FITCH Data NTCS
  Name=FITCH Data NTCS


  FITCHHasilMatch =
  Access=ReadOnly
  Description=The match result of FITCH between NTCS and other sources
  ExtensionAttribute=FITCHHasilMatch
  Format=
  GroupLabel=FieldCustom
  LabelList=FITCH Hasil Match
  Name=FITCH Hasil Match


  FITCHINDODataBloomberg =
  Access=ReadOnly
  Description=The rating of FITCHINDO in Bloomberg
  ExtensionAttribute=FITCHINDODataBloomberg
  Format=
  GroupLabel=FieldCustom
  LabelList=FITCHINDO Data Bloomberg
  Name=FITCHINDO Data Bloomberg


  FITCHINDODataNTCS =
  Access=ReadOnly
  Description=The rating of FITCHINDO in NTCS
  ExtensionAttribute=FITCHINDODataNTCS
  Format=
  GroupLabel=FieldCustom
  LabelList=FITCHINDO Data NTCS
  Name=FITCHINDO Data NTCS


  FITCHINDOHasilMatch =
  Access=ReadOnly
  Description=The match result of FITCHINDO between NTCS and other sources
  ExtensionAttribute=FITCHINDOHasilMatch
  Format=
  GroupLabel=FieldCustom
  LabelList=FITCHINDO Hasil Match
  Name=FITCHINDO Hasil Match


  FLAG =
  Access=ReadOnly
  Description=Indicator if amount is more than 1 trillion in IDR.
  ExtensionAttribute=FLAG
  Format=
  GroupLabel=FieldCustom
  LabelList=FLAG
  Name=FLAG


  Flow =
  Description=Shows Second Leg Rate if Transaction Type = "R".
  ExtensionAttribute=Flow
  GroupLabel=FieldCustom
  LabelList=Flow
  Name=Flow


  ForwardRate =
  Access=ReadOnly
  Description=
  ExtensionAttribute=ForwardRate
  Format=
  GroupLabel=FieldCustom
  LabelList=Forward Rate
  Name=Forward Rate


  FreeText =
  ColumnAppearance=Total_background
  Description=free text for column
  ExtensionAttribute=AtributText
  GroupLabel=FieldCustom
  Label=FreeText
  Name=FreeText


  FrekuensiPenjualan_Yesterday =
  ColumnAppearance=Total_background
  Description=The amount of all transaction where sale date minus buys date are less than 186 days.
  ExtensionAttribute=FrekuensiPenjualan_Yesterday
  GroupLabel=FieldCustom
  Label=Frekuensi Penjaualn Yesterday
  Name=Frekuensi Penjaualn Yesterday


  Frequency =
  Access=ReadOnly
  Description=Frequency
  ExtensionAttribute=Frequency
  Format=
  GroupLabel=FieldCustom
  LabelList=Frequency
  Name=Frequency


  FTotal =
  ColumnAppearance=dynamic_background
  ExtensionAttribute=FTotal
  GroupLabel=FieldCustom
  Name=FTotal


  FullYearAchievement =
  Access=ReadOnly
  Description=YTD Target - Full Year Target (in %).
  ExtensionAttribute=FullYearAchievement
  Format=
  GroupLabel=FieldCustom
  LabelList=FullYearAchievement
  Name=FullYearAchievement


  FVLevel =
  ColumnAppearance=Total_background
  Description=FVLevel
  ExtensionAttribute=FVLevel
  GroupLabel=FieldCustom
  Label=FVLevel
  Name=FVLevel


  FWDRate =
  ColumnAppearance=Total_background
  Description=FWDRate
  ExtensionAttribute=FWDRate
  GroupLabel=FieldCustom
  Label=FWDRate
  Name=FWDRate


  FXFW =
  Description=
  ExtensionAttribute=FXFW
  GroupLabel=FieldCustom
  Label=FX/FW
  Name=FX/FW


  GainOrLoss =
  ColumnAppearance=Total_background
  Description=Gain/Loss Amount
  ExtensionAttribute=GainOrLoss
  Format=
  GroupLabel=FieldCustom
  Label=Gain/Loss
  Name=Gain/Loss


  GeneralLedger =
  Access=ReadOnly
  Description=
  ExtensionAttribute=GeneralLedger
  Format=
  GroupLabel=FieldCustom
  LabelList=GeneralLedger
  Name=GeneralLedger


  GLNO =
  Description=GL number of the transaction.
  ExtensionAttribute=GLNO
  Format=
  GroupLabel=FieldCustom
  LabelList=GLNO
  Name=GLNO


  GMRAIdentification =
  ColumnAppearance=Total_background
  Description=The identify which Rate will be used on transaction (Domestic or International)
  ExtensionAttribute=GMRAIdentification
  Format=
  GroupLabel=FieldCustom
  Label=GMRA Identification
  Name=GMRA Identification


  GrandTotal =
  ColumnAppearance=Total_background
  Description=The Grand Total of Buy Amount and Sell Amount.
  ExtensionAttribute=GrandTotal
  Format=
  GroupLabel=FieldCustom
  Label=Grand Total
  Name=Grand Total


  GroupID =
  ColumnAppearance=Total_background
  Description=The ID of customer (by SWIFT Code)
  ExtensionAttribute=GroupID
  GroupLabel=FieldCustom
  Label=Group ID
  Name=Group ID


  Haircut =
  Access=ReadOnly
  Description=The haircut is accessed from the core system
  ExtensionAttribute=Haircut
  Format=
  GroupLabel=FieldCustom
  LabelList=Haircut
  Name=Haircut


  HedgingFairValue =
  Access=ReadOnly
  Description=Hedged Fair Value
  ExtensionAttribute=HedgingFairValue
  Format=
  GroupLabel=FieldCustom
  LabelList=Hedging (Fair Value)
  Name=Hedging (Fair Value)


  HedgingNotAmt =
  Access=ReadOnly
  Description=Unamortized hedging
  ExtensionAttribute=HedgingNotAmt
  Format=
  GroupLabel=FieldCustom
  LabelList=Hedging (Not Amortized)
  Name=Hedging (Not Amortized)


  Holding Period =
  Access=ReadOnly
  Description=Remaining Position for Holding Period Limits
  ExtensionAttribute=holdingPeriod
  GroupLabel=FieldCustom
  LabelList=Holding Period
  Name=Holding Period


  Holding Period ESPT =
  Access=ReadOnly
  Description=Remaining Position for Holding Period Limits for ESPT.
  ExtensionAttribute=HoldingPeriodESPT
  GroupLabel=FieldCustom
  LabelList=Holding Period
  Name=Holding Period ESPT


  HoldingInterestAmount =
  Description=Holding Interest Amount
  ExtensionAttribute=HoldingInterestAmount
  Format=
  GroupLabel=FieldCustom
  LabelList=HoldingInterestAmount
  Name=Holding Interest Amount


  HTM =
  Access=ReadOnly
  Description=Holding to Maturity
  ExtensionAttribute=HTM
  Format=
  GroupLabel=FieldCustom
  LabelList=HTM
  Name=HTM


  IBPA =
  Access=ReadOnly
  Description=The source of Mark to Market (bid price).
  ExtensionAttribute=IBPA
  Format=
  GroupLabel=FieldCustom
  LabelList=IBPA
  Name=IBPA


  IDays =
  Description=The day difference of start date and end date
  ExtensionAttribute=IDays
  GroupLabel=FieldCustom
  LabelList=IDays
  Name=IDays


  idPelapor =
  ColumnAppearance=Total_background
  Description=The ID of Pelapor (Bank Mandiri): Default ÃÂÃÂÃÂÃÂ¢ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ008000000ÃÂÃÂÃÂÃÂ¢ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ
  ExtensionAttribute=ID
  Format=
  GroupLabel=FieldCustom
  Label=ID Pelapor
  Name=ID Pelapor


  IDR =
  Access=ReadOnly
  Description=Result amount calculation to NTR rate for non IDR
  ExtensionAttribute=
  Format=
  GroupLabel=FieldCustom
  LabelList=IDR
  Name=IDR


  Indicator1 =
  ColumnAppearance=Total_background
  Description=Indicator 1
  ExtensionAttribute=Indicator1
  GroupLabel=FieldCustom
  Label=Indicator1
  Name=Indicator1


  Indicator1.2 =
  ColumnAppearance=Total_background
  Description=Indicator 1 part 2
  ExtensionAttribute=Indicator1
  GroupLabel=FieldCustom
  Label=Indicator1.2
  Name=Indicator1.2


  InOut =
  Access=ReadOnly
  Description=In or Out
  ExtensionAttribute=InOut
  Format=
  GroupLabel=FieldCustom
  LabelList=InOut
  Name=InOut


  InputDate =
  ColumnAppearance=Total_background
  Description=Input Date
  ExtensionAttribute=InputDate
  GroupLabel=FieldCustom
  Label=INPUTDATE
  Name=Input Date


  InputTime =
  ColumnAppearance=Total_background
  Description=Input Time
  ExtensionAttribute=InputTime
  GroupLabel=FieldCustom
  Label=INPUTTIME
  Name=Input Time


  Ins_Bond =
  Description=Untuk Report Cashflow Instrument, yang pertanggal
  ExtensionAttribute=Ins_Bond
  Format=
  GroupLabel=FieldCustom
  Label=Bond
  Name=Bond


  Ins_Commodity =
  Description=Untuk Report Cashflow Instrument, yang pertanggal
  ExtensionAttribute=Ins_Commodity
  Format=
  GroupLabel=FieldCustom
  Label=BANK NOTES
  Name=BANK NOTES


  Ins_Curr =
  Description=Untuk Report Cashflow Instrument, yang pertanggal
  ExtensionAttribute=Ins_Curr
  Format=
  GroupLabel=FieldCustom
  Label=FX
  Name=FX


  Ins_CurrSwap =
  Description=Untuk Report Cashflow Instrument, yang pertanggal
  ExtensionAttribute=Ins_CurrSwap
  Format=
  GroupLabel=FieldCustom
  Label=CCS
  Name=CCS


  Ins_Deposit =
  Description=Untuk Report Cashflow Instrument, yang pertanggal
  ExtensionAttribute=Ins_Deposit
  Format=
  GroupLabel=FieldCustom
  Label=Deposit
  Name=Deposit


  Ins_MM_IP =
  Description=Untuk Report Cashflow Instrument, yang pertanggal
  ExtensionAttribute=Ins_MM_IP
  Format=
  GroupLabel=FieldCustom
  Label=IP
  Name=IP


  Ins_MM_IT =
  Description=Untuk Report Cashflow Instrument, yang pertanggal
  ExtensionAttribute=Ins_MM_IT
  Format=
  GroupLabel=FieldCustom
  Label=IT
  Name=IT


  Ins_Option =
  Description=Untuk Report Cashflow Instrument, yang pertanggal
  ExtensionAttribute=Ins_Option
  Format=
  GroupLabel=FieldCustom
  Label=Option
  Name=Option


  Ins_Repo =
  Description=Untuk Report Cashflow Instrument, yang pertanggal
  ExtensionAttribute=Ins_Repo
  Format=
  GroupLabel=FieldCustom
  Label=Repo/Reverse
  Name=Repo/Reverse


  Ins_Swap =
  Description=Untuk Report Cashflow Instrument, yang pertanggal
  ExtensionAttribute=Ins_Swap
  Format=
  GroupLabel=FieldCustom
  Label=Swap
  Name=Swap


  InstrumentCode =
  Description=Display First Word of the Instrument Name.
  ExtensionAttribute=InstrumentCode
  GroupLabel=FieldCustom
  LabelList=Ins Code;Instrument Code;InstrumentCode
  Name=InstrumentCode


  IntCalcRule =
  Description=Interest Calculation Rule
  ExtensionAttribute=IntCalcRule
  GroupLabel=Calc
  Name=IntCalcRule


  INTCCY =
  ColumnAppearance=Total_background
  Description=INTCCY
  ExtensionAttribute=INTCCY
  GroupLabel=FieldCustom
  Label=INTCCY
  Name=INTCCY


  InterestAccrued =
  Access=ReadOnly
  Description=The part of the interest that has been recognized and recorded but not paid since the as of a specific date
  ExtensionAttribute=InterestAccrued
  Format=
  GroupLabel=FieldCustom
  LabelList=Interest Accrued
  Name=Interest Accrued


  InterestAmount =
  Access=ReadOnly
  Description=The interest amount of transaction
  ExtensionAttribute=InterestAmount
  Format=
  GroupLabel=FieldCustom
  LabelList=Interest Amount
  Name=Interest Amount


  InterestIncome =
  Access=ReadOnly
  Description=The amount paid to an entity for lending its money or letting another entity use its asset
  ExtensionAttribute=InterestIncome
  Format=
  GroupLabel=FieldCustom
  LabelList=Interest Income
  Name=Interest Income


  InterestIncomeTax =
  Description=Interest Income Tax
  ExtensionAttribute=InterestIncomeTax
  Format=
  GroupLabel=FieldCustom
  LabelList=InterestIncomeTax
  Name=Interest Income Tax


  InterestPayment =
  Access=ReadOnly
  Description=The amount of interest that must be paid
  ExtensionAttribute=InterestPayment
  Format=
  GroupLabel=FieldCustom
  LabelList=Interest Payment
  Name=Interest Payment


  InterestProceed =
  Access=ReadOnly
  Description=Projection Receive + Projection Payment
  ExtensionAttribute=InterestProceed
  GroupLabel=FieldCustom
  LabelList=InterestProceed
  Name=InterestProceed


  InterestRateAtTradeTime =
  Description=Interest rate of the instrument at trade time
  ExtensionAttribute=interestRateAtTradeTime
  Format=SixDecimalDetailedPercent
  GroupLabel=FieldCustom
  LabelList=InterestRateAtTradeTime
  Name=InterestRateAtTradeTime


  InterestReceived =
  Access=ReadOnly
  Description=The amount of interest that BM received
  ExtensionAttribute=InterestReceived
  Format=
  GroupLabel=FieldCustom
  LabelList=Interest Received
  Name=Interest Received


  Internalizer =
  Description=Trader Price
  ExtensionAttribute=Internalizer
  Format=Imprecise
  GroupLabel=FieldCustom
  LabelList=Internalizer
  Name=Internalizer


  InterofficeLongTerm =
  Description=Shows Face Value if Counterparty Type is "Interbranch" and Term is "Long".
  ExtensionAttribute=InterofficeLongTerm
  GroupLabel=FieldCustom
  LabelList=Interoffice Long Term
  Name=Interoffice Long Term


  InterofficeShortTerm =
  Description=Shows Face Value if Counterparty Type is "Interbranch" and Term is "Short".
  ExtensionAttribute=InterofficeShortTerm
  GroupLabel=FieldCustom
  LabelList=Interoffice Short Term
  Name=Interoffice Short Term


  IntradayLimitAvailable =
  ColumnAppearance=Total_background
  Description=Intraday Limit Available
  ExtensionAttribute=IntradayLimitAvailable
  GroupLabel=FieldCustom
  Label=Intraday Limit Available
  Name=Intraday Limit Available


  IntradayLimitGiven =
  ColumnAppearance=Total_background
  Description=Intraday Limit Given
  ExtensionAttribute=IntradayLimitGiven
  GroupLabel=FieldCustom
  Label=Intraday Limit Given
  Name=Intraday Limit Given


  INVSEQ =
  Description=Number of Instrument Alias
  ExtensionAttribute=INVSEQ
  Format=
  GroupLabel=FieldCustom
  LabelList=INVSEQ
  Name=INVSEQ


  Invtype =
  Access=ReadOnly
  Description=A, H, T indicator
  ExtensionAttribute=Invtype
  Format=
  GroupLabel=FieldCustom
  LabelList=InvType
  Name=InvType


  IR_1 =
  Description=
  ExtensionAttribute=IR_1
  Format=Imprecise
  GroupLabel=FieldCustom
  LabelList=IR
  Name=IR


  IRS =
  Description=
  ExtensionAttribute=IRS
  GroupLabel=FieldCustom
  Label=IRS
  Name=IRS


  IssuerLimit =
  Access=ReadOnly
  Description=The issuer limit of the customer
  ExtensionAttribute=IssuerLimit
  Format=
  GroupLabel=FieldCustom
  LabelList=Issuer Limit
  Name=Issuer Limit


  IssuerPercentUtilization =
  Access=ReadOnly
  Description=The percentage of issuer limit utilization
  ExtensionAttribute=ruleValueUtilizationPercent
  Format=
  GroupLabel=FieldCustom
  LabelList=Issuer % Utilization
  Name=Issuer % Utilization


  IssuerUtilization =
  Access=ReadOnly
  Description=The utilization of issuer limit
  ExtensionAttribute=IssuerUtilization
  Format=
  GroupLabel=FieldCustom
  LabelList=Issuer Utilization
  Name=Issuer Utilization


  JnsDokumenUnderlying =
  Access=ReadOnly
  Description=-
  ExtensionAttribute=JnsDokumenUnderlying
  Format=
  GroupLabel=FieldCustom
  LabelList=JnsDokumenUnderlying
  Name=JnsDokumenUnderlying


  JumlahHariTunggakan =
  ColumnAppearance=Total_background
  Description=Jumlah Hari Tunggakan
  ExtensionAttribute=JumlahHariTunggakan
  GroupLabel=FieldCustom
  Label=Jumlah Hari Tunggakan
  Name=Jumlah Hari Tunggakan


  Keterangan =
  Description=Keterangan
  Format=Imprecise
  LabelList=Keterangan
  Name=Keterangan


  KeteranganInsDokumenUnderlying =
  Access=ReadOnly
  Description=-
  ExtensionAttribute=KeteranganInsDokumenUnderlying
  Format=
  GroupLabel=FieldCustom
  LabelList=KeteranganInsDokumenUnderlying
  Name=KeteranganInsDokumenUnderlying


  KodeFormFI =
  Description=Kode Form Bukti Potong / Kode Form Input PPh Yang Dibayar Sendiri FI
  ExtensionAttribute=KodeFormFI
  Format=
  GroupLabel=FieldCustom
  LabelList=Kode Form Bukti Potong
  Name=Kode Form FI


  KodeFormMDS =
  Description=Kode Form Bukti Potong / Kode Form Input PPh Yang Dibayar Sendiri MDS
  ExtensionAttribute=KodeFormMDS
  Format=
  GroupLabel=FieldCustom
  LabelList=Kode Form Bukti Potong
  Name=Kode Form MDS


  KodeFormPasal26 =
  Description=Kode Form Bukti Potong / Kode Form Input PPh Yang Dibayar Sendiri Pasal 26
  ExtensionAttribute=KodeFormPasal26
  Format=
  GroupLabel=FieldCustom
  LabelList=Kode Form Bukti Potong
  Name=Kode Form Pasal 26


  KodeKondisi =
  Description=Kode Kondisi
  ExtensionAttribute=KodeKondisi
  Format=Imprecise
  GroupLabel=FieldCustom
  LabelList=Kode Kondisi
  Name=Kode Kondisi


  KodeOption1 =
  Description=Kode Option Tempat Penyimpanan 1 (Khusus F113310)
  ExtensionAttribute=One
  Format=
  GroupLabel=FieldCustom
  LabelList=Kode Option Tempat Penyimpanan 1 (Khusus F113310)
  Name=Kode Option 1


  KodeOption2 =
  Description=Kode Option Tempat Penyimpanan 2
  ExtensionAttribute=One
  Format=
  GroupLabel=FieldCustom
  LabelList=Kode Option Tempat Penyimpanan 2
  Name=Kode Option 2


  KodeOption3 =
  Description=Kode Option Tempat Penyimpanan 3
  ExtensionAttribute=One
  Format=
  GroupLabel=FieldCustom
  LabelList=Kode Option Tempat Penyimpanan 3
  Name=Kode Option 3


  KodeOption4 =
  Description=Kode Option Tempat Penyimpanan 4 / Kode Option Perencanaan (1) atau Pengawasan (2) atau selainnya (0) untuk BP Jasa Konstruksi poin 4
  ExtensionAttribute=One
  Format=
  GroupLabel=FieldCustom
  LabelList=Kode Option Tempat Penyimpanan 4 / Kode Option Perencanaan (1) atau Pengawasan (2) atau selainnya (0) untuk BP Jasa Konstruksi poin 4
  Name=Kode Option 4


  KodeOption5 =
  Description=Kode Option Tempat Penyimpanan 5 / Kode Option Perencanaan (1) atau Pengawasan (2) atau selainnya (0) untuk BP Jasa Konstruksi poin 5
  ExtensionAttribute=One
  Format=
  GroupLabel=FieldCustom
  LabelList=Kode Option Tempat Penyimpanan 5 / Kode Option Perencanaan (1) atau Pengawasan (2) atau selainnya (0) untuk BP Jasa Konstruksi poin 5
  Name=Kode Option 5


  KodeSebabMacet =
  Description=Kode Sebab Macet
  ExtensionAttribute=KodeSebabMacet
  Format=Imprecise
  GroupLabel=FieldCustom
  LabelList=Kode Sebab Macet
  Name=Kode Sebab Macet


  Kolektibilitas =
  ColumnAppearance=Total_background
  Description=Kolektibilitas
  ExtensionAttribute=Kolektibilitas
  GroupLabel=FieldCustom
  Label=Kolektibilitas
  Name=Kolektibilitas


  Kurs =
  Access=ReadOnly
  Description=Foreign exchange rate against IDR used to calculate of "eqv amount Rupiah". Rate that used is closing rate a day before the report generated.
  ExtensionAttribute=Kurs
  Format=
  GroupLabel=FieldCustom
  LabelList=Kurs
  Name=Kurs


  KursBeli =
  ColumnAppearance=
  Description=Total jumlah kurs beli /buy
  ExtensionAttribute=KursBeli
  GroupLabel=FieldCustom
  Name=KursBeli


  KursJual =
  ColumnAppearance=
  Description=Total jumlah kurs jual /sell
  ExtensionAttribute=KursJual
  GroupLabel=FieldCustom
  Name=KursJual


  KursTengah =
  Access=ReadOnly
  Description=The exchange rate that is halfway between a currency's bid and ask rates.
  ExtensionAttribute=KursTengah
  Format=
  GroupLabel=FieldCustom
  LabelList=KursTengah
  Name=KursTengah


  LastCouponDate =
  Access=ReadOnly
  Description=
  ExtensionAttribute=LastCouponDate
  Format=
  GroupLabel=FieldCustom
  LabelList=Last Coupon Date
  Name=Last Coupon Date


  LastFixingRate =
  Access=ReadOnly
  Description=The last reference rate which is used for the last payment period
  ExtensionAttribute=LastFixingRate
  Format=
  GroupLabel=FieldCustom
  LabelList=Last Fixing Rate
  Name=Last Fixing Rate


  LastMonthEoDPrice =
  Description=SGD pair settle price at Market EOD in Previous Month.
  ExtensionAttribute=getLastMonthEoDPrice
  Format=FiveDecimalDetailed
  GroupLabel=FieldCustom
  LabelList=Last Month EoD Price
  Name=Last Month EoD Price


  LastPaymentPeriod =
  Access=ReadOnly
  Description=The day period starting with the date the first payment is issued and ended
  ExtensionAttribute=LastPaymentPeriod
  Format=
  GroupLabel=FieldCustom
  LabelList=Last Payment Period
  Name=Last Payment Period


  LBU =
  ExtensionAttribute=LBU


  LiabilitiesAmount =
  ColumnAppearance=Total_background
  Description=LiabilitiesAmount
  ExtensionAttribute=LiabilitiesAmount
  GroupLabel=FieldCustom
  Label=LiabilitiesAmount
  Name=LiabilitiesAmount


  Limit =
  Access=ReadOnly
  Description=The Credit Equivalent Limit of customer
  ExtensionAttribute=Limit
  Format=
  GroupLabel=FieldCustom
  LabelList=Limit
  Name=Limit


  Limit Available Alert =
  Description=Threshold - currentValue.
  ExtensionAttribute=alertAvailableLimit
  GroupLabel=Mandiri Custome Colums
  LabelList=AVAILABLE LIMIT
  Name=Limit Available Alert


  Limit Holding Days =
  Access=ReadOnly
  Description=How long the position has been open (in days)
  ExtensionAttribute=LimitHolding
  Format=Imprecise
  GroupLabel=FieldCustom
  LabelList=Limit Holding;Limit Holding Days
  Name=Limit Holding


  Limit_FX =
  ColumnAppearance=Total_background
  Description=The value of PV01 limit (FX)
  ExtensionAttribute=Limit_FX
  GroupLabel=FieldCustom
  Label=Limit FX
  Name=Limit FX


  Limit_IR =
  ColumnAppearance=Total_background
  Description=The value of PV01 limit (IR)
  ExtensionAttribute=Limit_IR
  GroupLabel=FieldCustom
  Label=Limit IR
  Name=Limit IR


  LimitAmtCurr =
  Description=Limit Amount for Counterparty.Country
  ExtensionAttribute=LimitAmtCurr
  GroupLabel=FieldCustom
  Label=LimitAmtCurr
  Name=LimitAmtCurr


  LimitEquivalenIDRCredit =
  Description=The FComplianceRule Threshold Value of the Portfolio
  ExtensionAttribute=WCOLimitIDRCredit
  GroupLabel=FieldCustom
  LabelList=Limit Equivalen IDR Credit
  Name=Limit Equivalen IDR Credit


  LimitEquivalenIDRNotional =
  Description=The FComplianceRule Threshold Value of the Portfolio
  ExtensionAttribute=WCOLimitIDRNotional
  GroupLabel=FieldCustom
  LabelList=Limit Equivalen IDR Notional
  Name=Limit Equivalen IDR Notional


  LimitExpiry =
  ColumnAppearance=Total_background
  Description=The date of limit expiry
  ExtensionAttribute=LimitExpiry
  GroupLabel=FieldCustom
  Label=Limit Expiry
  Name=Limit Expiry


  LimitExposureCCYCredit =
  Description=The FComplianceRule Threshold Value of the Portfolio
  ExtensionAttribute=WCOLimitCCYCredit
  GroupLabel=FieldCustom
  LabelList=Limit CCY Credit
  Name=Limit CCY Credit


  LimitExposureCCYNotional =
  Description=The FComplianceRule Threshold Value of the Portfolio
  ExtensionAttribute=WCOLimitCCYNotional
  GroupLabel=FieldCustom
  LabelList=Limit CCY Notional
  Name=Limit CCY Notional


  LimitExposureUSDCredit =
  Description=The FComplianceRule Threshold Value of the Portfolio
  ExtensionAttribute=WCOLimitUSDCredit
  GroupLabel=FieldCustom
  LabelList=Limit USD Credit
  Name=Limit USD Credit


  LimitExposureUSDNotional =
  Description=The FComplianceRule Threshold Value of the Portfolio
  ExtensionAttribute=WCOLimitUSDNotional
  GroupLabel=FieldCustom
  LabelList=Limit USD Notional
  Name=Limit USD Notional


  LimitMO01 =
  Access=ReadOnly
  Description=The limit of unrelaized and relaized
  ExtensionAttribute=LimitMO01
  Format=
  GroupLabel=FieldCustom
  LabelList=Limit MO01
  Name=Limit MO01


  LimitMO10 =
  Access=ReadOnly
  Description=The limit on Bond Cut Loss
  ExtensionAttribute=LimitMO10
  Format=
  GroupLabel=FieldCustom
  LabelList=LimitMO10
  Name=LimitMO10


  Listing =
  ColumnAppearance=Total_background
  Description=Listing
  ExtensionAttribute=Listing
  GroupLabel=FieldCustom
  Label=Listing
  Name=Listing


  LOB =
  ColumnAppearance=Total_background
  Description=LOB
  ExtensionAttribute=LOB
  GroupLabel=FieldCustom
  Label=LOB
  Name=LOB


  LongTermFDQ =
  Description=Face Value for Long term FDQ.
  ExtensionAttribute=LongTermFDQ
  GroupLabel=FieldCustom
  LabelList=Long Term FDQ
  Name=Long Term FDQ


  LossLimitMonthly =
  Description=Default 500000000/12
  ExtensionAttribute=LossLimitMonthly
  Format=
  GroupLabel=FieldCustom
  LabelList=Loss Limit Monthly
  Name=Loss Limit Monthly


  LossLimitYearly =
  Description=Default 500000000
  ExtensionAttribute=LossLimitYearly
  Format=
  GroupLabel=FieldCustom
  LabelList=Loss Limit Yearly
  Name=Loss Limit Yearly


  LowerRate =
  ColumnAppearance=Total_background
  Description=The Lower Rate
  ExtensionAttribute=LowerRate
  Format=
  GroupLabel=FieldCustom
  Label=Lower Rate
  Name=Lower Rate


  Main Currency =
  Description=Main Currency of Position Pair
  ExtensionAttribute=MainCurrency
  GroupLabel=FieldCustom
  Label=Main Currency
  Name=Main Currency


  MarketValue2 =
  Description=Market Value Amount [(Nominal * Market Price) / 100]
  ExtensionAttribute=MarketValue2
  GroupLabel=FieldCustom
  Label=Market Value
  Name=Market Value


  MarketYield =
  Access=ReadOnly
  Description=
  ExtensionAttribute=MarketYield
  Format=
  GroupLabel=FieldCustom
  LabelList=Market Yield
  Name=Market Yield


  MarkToMarket =
  Access=ReadOnly
  Description=The mark to market of collateral
  ExtensionAttribute=MarkToMarket
  Format=
  GroupLabel=FieldCustom
  LabelList=Mark To Market
  Name=Mark To Market


  MarkToModel =
  Access=ReadOnly
  Description=The source of Mark to Market (bid price).
  ExtensionAttribute=MarkToModel
  Format=
  GroupLabel=FieldCustom
  LabelList=Mark To Model
  Name=Mark To Model


  MATPROCAMT =
  Access=ReadOnly
  Description=
  ExtensionAttribute=MATPROCAMT
  Format=PreciseTwoDecimalsHideNaN
  GroupLabel=FieldCustom
  LabelList=MATPROCAMT
  Name=MATPROCAMT


  MMDF =
  Description=FASBI
  ExtensionAttribute=MMDF
  GroupLabel=FieldCustom
  Label=DF
  Name=DF


  MMInterbank =
  Description=CL, MD, CMP, CMT, OVP, OVT, BLT, SHARI, BA
  ExtensionAttribute=MMInterbank
  GroupLabel=FieldCustom
  Label=MM - Interbank Placement & Taken
  Name=MM - Interbank Placement & Taken


  MMInterbankPlacement =
  Description=CL, MD, CMP, CMT, OVP, OVT, BLT, SHARI, BA
  ExtensionAttribute=MMInterbankPlacement
  GroupLabel=FieldCustom
  Label=MM - Interbank Placement
  Name=MM - Interbank Placement


  MMInterbankTaken =
  Description=CL, MD, CMP, CMT, OVP, OVT, BLT, SHARI, BA
  ExtensionAttribute=MMInterbankTaken
  GroupLabel=FieldCustom
  Label=MM - Interbank Taken
  Name=MM - Interbank Taken


  MMLF =
  Description=LF-FASBI
  ExtensionAttribute=MMLF
  GroupLabel=FieldCustom
  Label=LF
  Name=LF


  MoneyAmount =
  ColumnAppearance=Total_background
  Description=The amount conversed. Calculation: Nominal * Exchange Rate
  ExtensionAttribute=MoneyAmount
  Format=
  GroupLabel=FieldCustom
  Label=Money Amount
  Name=Money Amount


  Month =
  ColumnAppearance=Total_background
  Description=Month
  ExtensionAttribute=Month
  Format=
  GroupLabel=FieldCustom
  Label=Month
  Name=Month


  MonthlyLossLimitUse =
  Description=theoretical p/l monthly * close rate IDR
  ExtensionAttribute=MonthlyLossLimitUse
  Format=
  GroupLabel=FieldCustom
  LabelList=MonthlyLossLimitUse
  Name=Monthly Loss Limit Use


  MonthlyLossLimitUse2 =
  Description=PnL Monthly / Loss Limit Monthly
  ExtensionAttribute=MonthlyLossLimitUse2
  Format=
  GroupLabel=FieldCustom
  LabelList=Monthly Loss Limit Use
  Name=Monthly Loss Limit Use 2


  MonthNow =
  Access=ReadOnly
  Description=
  ExtensionAttribute=MonthNow
  Format=
  GroupLabel=FieldCustom
  LabelList=MonthNow
  Name=MonthNow


  MonthNumber =
  ColumnAppearance=Total_background
  Description=Month in number.
  ExtensionAttribute=MonthNumber
  Format=
  GroupLabel=FieldCustom
  Label=Month Number
  Name=Month Number


  MonthToExpired =
  Access=ReadOnly
  Description=The length of time remaining before the transaction expires in month
  ExtensionAttribute=MonthToExpired
  Format=
  GroupLabel=FieldCustom
  LabelList=Month to Expired
  Name=Month to Expired


  MOODYSDataBloomberg =
  Access=ReadOnly
  Description=The rating of MOODYS in Bloomberg
  ExtensionAttribute=MOODYSDataBloomberg
  Format=
  GroupLabel=FieldCustom
  LabelList=MOODYS Data Bloomberg
  Name=MOODYS Data Bloomberg


  MOODYSDataNTCS =
  Access=ReadOnly
  Description=The rating of MOODYS in NTCS
  ExtensionAttribute=MOODYSDataNTCS
  Format=
  GroupLabel=FieldCustom
  LabelList=MOODYS Data NTCS
  Name=MOODYS Data NTCS


  MOODYSHasilMatch =
  Access=ReadOnly
  Description=The match result of MOODYS between NTCS and other sources
  ExtensionAttribute=MOODYSHasilMatch
  Format=
  GroupLabel=FieldCustom
  LabelList=MOODYS Hasil Match
  Name=MOODYS Hasil Match


  Movement =
  ColumnAppearance=Movement
  Description=The balance movement, obtained from the difference between Today's balance and the previouos day's difference
  ExtensionAttribute=Movement
  Format=Impercise
  GroupLabel=FieldCustom
  LabelList=Movement
  Name=Movement


  MTD =
  Access=ReadOnly
  ColumnAppearance=MTD
  Description=Get MTD Value from Hierarchy
  ExtensionAttribute=MTD
  GroupLabel=FieldCustom
  Name=MTD


  MTM =
  Access=ReadOnly
  Description=The mark to market price of Bond transaction
  ExtensionAttribute=MTM
  Format=
  GroupLabel=FieldCustom
  LabelList=MTM
  Name=MTM


  NasabahBeli =
  Access=ReadOnly
  Description=Equals to buy amount
  ExtensionAttribute=NasabahBeli
  Format=
  GroupLabel=FieldCustom
  LabelList=Nasabah Beli
  Name=Nasabah Beli


  NasabahJual =
  Access=ReadOnly
  Description=Equals to sell amount
  ExtensionAttribute=NasabahJual
  Format=
  GroupLabel=FieldCustom
  LabelList=Nasabah Jual
  Name=Nasabah Jual


  NAV =
  Access=ReadOnly
  Description=The source of Mark to Market (bid price).
  ExtensionAttribute=NAV
  Format=
  GroupLabel=FieldCustom
  LabelList=NAV
  Name=NAV


  NDFFixingPrice =
  Description=Price of NDF at Fixing Date
  ExtensionAttribute=NDFFixingPrice
  Format=
  GroupLabel=FieldCustom
  LabelList=NDFFixingPrice
  Name=NDF Fixing Price


  NearAmount =
  ColumnAppearance=Total_background_NearAmount
  Description=Near Amount is the near money of the transaction (from Premium in FA).
  ExtensionAttribute=NearAmount
  Format=PreciseTwoDecimalsHideNaN
  GroupLabel=FieldCustom
  Label=Near Amount
  Name=Near Amount


  NearAmount1 =
  ColumnAppearance=Total_background_NearAmount1
  Description=Near Amount is the near money of the transaction.
  ExtensionAttribute=NearAmount1
  Format=PreciseTwoDecimalsHideNaN
  GroupLabel=FieldCustom
  Label=Near Amount 1
  Name=Near Amount 1


  NearAmount2 =
  ColumnAppearance=Total_background_NearAmount2
  Description=The total of Near Amount 1 * Near Rate.
  ExtensionAttribute=NearAmount2
  Format=PreciseTwoDecimalsHideNaN
  GroupLabel=FieldCustom
  Label=Near Amount 2
  Name=Near Amount 2


  NearFarFXSwap =
  Description=Shows Near/Far if it is a Near/Far leg
  ExtensionAttribute=NearFarFXSwap
  GroupLabel=FieldCustom
  Label=NearFarFXSwap
  Name=NearFarFXSwap


  NetAmount =
  Access=ReadOnly
  Description=Amount of transaction deduct with allowance for possible losses.
  ExtensionAttribute=NetAmount
  Format=Imprecise
  GroupLabel=FieldCustom
  LabelList=Net Amount
  Name=Net Amount


  NetPosition =
  Description=Net Position
  ExtensionAttribute=NetPosition
  Format=
  GroupLabel=FieldCustom
  LabelList=Net Position
  Name=Net Position


  NewCTPTYCIF =
  ColumnAppearance=Total_background
  Description=New counterparty CIF/Host ID. Update time is today.
  ExtensionAttribute=NewCTPTYCIF
  Format=
  GroupLabel=FieldCustom
  Label=New CTPTY CIF
  Name=New CTPTY CIF


  NewCTPTYReff =
  ColumnAppearance=Total_background
  Description=New counterparty reff. Update time is today.
  ExtensionAttribute=NewCTPTYReff
  Format=
  GroupLabel=FieldCustom
  Label=New CTPTY Reff
  Name=New CTPTY Reff


  NEWPLNID =
  Description=showing PLN ID
  ExtensionAttribute=NEWPLNID
  GroupLabel=FieldCustom
  LabelList=NEW PLN ID
  Name=NEW PLN ID


  NextCouponDate =
  Access=ReadOnly
  Description=
  ExtensionAttribute=NextCouponDate
  Format=
  GroupLabel=FieldCustom
  LabelList=Next Coupon Date
  Name=Next Coupon Date


  NextPaymentDate =
  Access=ReadOnly
  Description=Next Cashflow Payment Date
  ExtensionAttribute=NextPaymentDate
  GroupLabel=FieldCustom
  LabelList=NextPaymentDate
  Name=NextPaymentDate


  NextPaymentPeriod =
  Access=ReadOnly
  Description=The next period of payment
  ExtensionAttribute=NextPaymentPeriod
  Format=
  GroupLabel=FieldCustom
  LabelList=Next Payment Period
  Name=Next Payment Period


  NII =
  ColumnAppearance=Total_background
  Description=Net Interest Income
  ExtensionAttribute=NII
  Format=
  GroupLabel=FieldCustom
  Label=NII
  Name=NII


  NIIThisYear =
  Description=Net Interest Income in this year (0y).
  ExtensionAttribute=NIIThisYear
  Format=Imprecise
  GroupLabel=Profit & loss (fee based income & net interest income)
  Name=NII 0y


  NIIYesteryear =
  Description=Net Interest Income a year before (-1y).
  ExtensionAttribute=NIIYesteryear
  Format=Imprecise
  GroupLabel=Profit & loss (fee based income & net interest income)
  Name=NII -1y


  NilaiBeliKembali =
  Access=ReadOnly
  Description=The re-sale value of transaction. The value of transaction at the end of a lease.
  ExtensionAttribute=NilaiBeliKembali
  Format=
  GroupLabel=FieldCustom
  LabelList=Nilai Beli Kembali
  Name=Nilai Beli Kembali


  NilaiPasar =
  Access=ReadOnly
  Description=Nominal * MTM Monthly
  ExtensionAttribute=NilaiPasar
  Format=
  GroupLabel=FieldCustom
  LabelList=NILAI PASAR (ORIG CURR)
  Name=Nilai Pasar (Orig Curr)


  NilaiPasar2 =
  Access=ReadOnly
  Description=Nominal * MTM Monthly * FX Rate IDR
  ExtensionAttribute=NilaiPasar2
  Format=
  GroupLabel=FieldCustom
  LabelList=NILAI PASAR (RUPIAH)
  Name=Nilai Pasar (Rupiah)


  NilaiPerolehan =
  Access=ReadOnly
  Description=Nominal * Trade Price
  ExtensionAttribute=NilaiPerolehan
  Format=
  GroupLabel=FieldCustom
  LabelList=NILAI PEROLEHAN (ORIG CURR)
  Name=Nilai Perolehan (Orig Curr)


  NilaiPerolehan2 =
  Access=ReadOnly
  Description=Nominal * Trade Price * FX Rate Rupiah
  ExtensionAttribute=NilaiPerolehan2
  Format=
  GroupLabel=FieldCustom
  LabelList=NILAI PEROLEHAN (RUPIAH)
  Name=Nilai Perolehan (Rupiah)


  nisbahBagiHasil =
  ColumnAppearance=Total_background
  Description=The nominal of transaction based on original currency, it is calculation in the beginning, when bank gives loans 65% and party 35%.
  ExtensionAttribute=nisbahBagiHasil
  Format=
  GroupLabel=FieldCustom
  Label=nisbahBagiHasil
  Name=Nisbah Bagi Hasil


  NominalAbsolute =
  Access=ReadOnly
  Description=Nominal Absolute
  ExtensionAttribute=NominalAbsolute
  Format=
  GroupLabel=FieldCustom
  LabelList=Nominal
  Name=Nominal


  NominalCoupon =
  Access=ReadOnly
  Description=The amount before any discount/cut
  ExtensionAttribute=NominalCoupon
  Format=
  GroupLabel=FieldCustom
  LabelList=Nominal Coupon
  Name=Nominal Coupon


  NominalCustom =
  Access=ReadOnly
  Description=Nominal
  ExtensionAttribute=NominalCustom
  Format=
  GroupLabel=FieldCustom
  LabelList=Nominal
  Name=Nominal


  nominalDokumenUnderlying =
  Access=ReadOnly
  Description=-
  ExtensionAttribute=nominalDokumenUnderlying
  Format=
  GroupLabel=FieldCustom
  LabelList=nominalDokumenUnderlying
  Name=nominalDokumenUnderlying


  NominalNOP =
  Description=Display Nominal NOP in Original Currency.
  ExtensionAttribute=NominalNOP
  Format=FiveDecimalDetailed
  GroupLabel=FieldCustom
  LabelList=NominalNOP;Nominal NOP
  Name=NominalNOP


  NominalNOP_USD =
  Description=Display Nominal NOP in USD with EOD_MtM rate.
  ExtensionAttribute=NominalNOP_USD
  Format=FiveDecimalDetailed
  GroupLabel=FieldCustom
  InheritsFrom=NominalNOP
  LabelList=NominalNOP_USD;Nominal NOP (USD)
  Name=NominalNOP_USD


  NominalSGD =
  Description=Nominal for SGD currency
  ExtensionAttribute=NominalSGD
  Format=
  GroupLabel=FieldCustom
  LabelList=Nominal SGD
  Name=Nominal SGD


  NominalSumUp =
  Description=Nominal Sum Up
  ExtensionAttribute=NominalSumUp
  Format=Imprecise
  GroupLabel=FieldCustom
  LabelList=Nominal Sum Up
  Name=Nominal Sum Up


  NominalValutaDasarPerUnderlying =
  Access=ReadOnly
  Description=-
  ExtensionAttribute=NominalValutaDasarPerUnderlying
  Format=
  GroupLabel=FieldCustom
  LabelList=NominalValutaDasarPerUnderlying
  Name=NominalValutaDasarPerUnderlying


  NominativeList =
  Access=ReadOnly
  Description=combination of insid and optkey4
  ExtensionAttribute=NominativeList
  Format=
  GroupLabel=FieldCustom
  LabelList=Nominative List
  Name=Nominative List


  NomorBuktiPotongFI =
  Description=Nomor Bukti Potong / NTPN FI
  ExtensionAttribute=NomorBuktiPotongFI
  Format=
  GroupLabel=FieldCustom
  LabelList=Nomor Bukti Potong / NTPN
  Name=Nomor Bukti Potong FI


  NomorBuktiPotongMDS =
  Description=Nomor Bukti Potong / NTPN MDS
  ExtensionAttribute=NomorBuktiPotongMDS
  Format=
  GroupLabel=FieldCustom
  LabelList=Nomor Bukti Potong / NTPN
  Name=Nomor Bukti Potong MDS


  NomorBuktiPotongPasal26 =
  Description=Nomor Bukti Potong / NTPN Pasal 26
  ExtensionAttribute=NomorBuktiPotongPasal26
  Format=
  GroupLabel=FieldCustom
  LabelList=Nomor Bukti Potong / NTPN
  Name=Nomor Bukti Potong Pasal 26


  nomorDokumenUnderlying =
  Access=ReadOnly
  Description=-
  ExtensionAttribute=nomorDokumenUnderlying
  Format=
  GroupLabel=FieldCustom
  LabelList=nomorDokumenUnderlying
  Name=nomorDokumenUnderlying


  NomorIdentifikasi =
  ColumnAppearance=Total_background
  Description=<InstrumentType>.<OptKey3>.<TradeNumber>
  ExtensionAttribute=NomorIdentifikasi
  Format=
  GroupLabel=FieldCustom
  Label=Nomor Identifikasi
  Name=Nomor Identifikasi


  NOP Overnight =
  ColumnAppearance=Total_background
  Description=NOP Overnight
  ExtensionAttribute=NOP Overnight
  GroupLabel=FieldCustom
  Label=NOP Overnight
  Name=NOP Overnight


  NOP_PV =
  Access=ReadOnly
  Description=Based on Final NOP Portfolio (PV) of trade's portfolio.
  ExtensionAttribute=NOP_PV
  Format=
  GroupLabel=FieldCustom
  LabelList=NOP PV
  Name=NOP PV


  NOP_USD =
  Description=Final NOP after aggregating long and short positions at portfolio level in USD with EOD_MtM rate
  ExtensionAttribute=NOP_USD
  GroupLabel=FieldCustom
  InheritsFrom=Final NOP Portfolio(old)
  LabelList=NOP_USD
  Name=NOP_USD
  ShowErrorHashmark=Disabled


  NOPinUSD =
  Description=QTY equivalent USD.
  ExtensionAttribute=NOPinUSD
  Format=FiveDecimalDetailed
  GroupLabel=FieldCustom
  LabelList=NOPinUSD
  Name=NOPinUSD


  NOPLimit =
  Description=NOP Limit
  ExtensionAttribute=NOPLimit
  Format=
  GroupLabel=FieldCustom
  LabelList=NOP Limit
  Name=NOP Limit


  NOPLimitUse =
  Description=
  ExtensionAttribute=NOPLimitUse
  Format=
  GroupLabel=FieldCustom
  LabelList=NOP Limit Use
  Name=NOP Limit Use


  NOPOvernight =
  ColumnAppearance=Total_background
  Description=NOP Overnight
  ExtensionAttribute=NOPOvernight
  GroupLabel=FieldCustom
  Label=NOP Overnight
  Name=NOP Overnight


  NOPThresholdValue =
  Access=ReadOnly
  Description=NOP Threshold Value
  ExtensionAttribute=NOPThresholdValue
  Format=
  GroupLabel=FieldCustom
  LabelList=NOPThresholdValue
  Name=NOPThresholdValue


  NOPUtilizationPercentage =
  Description=Standard NOP Utilization Percentage
  ExtensionAttribute=NOPUtilizationPercentage
  Format=
  GroupLabel=FieldCustom
  LabelList=NOPUtilizationPercentage
  Name=NOPUtilizationPercentage


  NostroMirrorACName =
  Description=Nostro mirror a/c name form Party Definition Accounts
  ExtensionAttribute=NostroMirrorACName
  Format=
  GroupLabel=FieldCustom
  LabelList=Nostro Mirror A/C Name
  Name=Nostro Mirror A/C Name


  NostroMirrorACNumber =
  Description=Nostro mirror a/c number form Party Definition Accounts
  ExtensionAttribute=NostroMirrorACNumber
  Format=
  GroupLabel=FieldCustom
  LabelList=Nostro Mirror A/C Number
  Name=Nostro Mirror A/C Number


  Note =
  Description=
  ExtensionAttribute=
  GroupLabel=FieldCustom
  LabelList=Note
  Name=Note


  Notional %Utilization =
  Access=ReadOnly
  Description=The Percentage of utilization of Notional Limit
  ExtensionAttribute=NotionalPercentageUtilization
  Format=
  GroupLabel=FieldCustom
  LabelList=Notional % Utilization
  Name=Notional % Utilization


  Notional 1DayChange =
  Access=ReadOnly
  Description=Uti
  ExtensionAttribute=Notional1DayChange
  Format=
  GroupLabel=FieldCustom
  LabelList=Notional 1 Day Change
  Name=Notional 1 Day Change


  Notional Limit =
  Access=ReadOnly
  Description=The Notional Limit of Customer
  ExtensionAttribute=NotionalLimit
  Format=
  GroupLabel=FieldCustom
  LabelList=Notional Limit
  Name=Notional Limit


  Notional Utilization =
  Access=ReadOnly
  Description=The utilzation of Notional Limit
  ExtensionAttribute=NotionalUtilization
  Format=
  GroupLabel=FieldCustom
  LabelList=Notional Utilization
  Name=Notional Utilization


  NPV_Journal =
  Description=Net present value from trade sheet.
  ExtensionAttribute=NPV_Journal
  Format=
  GroupLabel=FieldCustom
  LabelList=NPV Journal
  Name=NPV Journal


  NPWPPotong =
  Description=NPWP WP yang Dipotong
  ExtensionAttribute=NPWPPotong
  Format=
  GroupLabel=FieldCustom
  LabelList=NPWP WP yang Dipotong
  Name=NPWP WP yang Dipotong


  NTR =
  Access=ReadOnly
  Description=Non Tax Revenue (NTR) Rate
  ExtensionAttribute=AmountClosing
  Format=
  GroupLabel=FieldCustom
  LabelList=NTR
  Name=NTR


  O/N =
  Access=ReadOnly
  Description=
  ExtensionAttribute=O/N
  Format=
  GroupLabel=FieldCustom
  LabelList=O/N
  Name=O/N


  OBJID =
  Access=ReadOnly
  Description=
  ExtensionAttribute=OBJID
  Format=
  GroupLabel=FieldCustom
  LabelList=OBJID
  Name=OBJID


  OffShoreFunding =
  Description=Shows Face Value if Product is "IT/FB".
  ExtensionAttribute=OffShoreFunding
  GroupLabel=FieldCustom
  LabelList=Off Shore BA Funding
  Name=Off Shore BA Funding


  OneDayChange =
  Description=Utilization today subtracted by utilization yesterday
  ExtensionAttribute=DayChangeTrading
  Format=
  GroupLabel=FieldCustom
  InheritsFrom=Portfolio Position
  Label=1 Day Change
  Name=1 Day Change
  Parameters=TimeApportionmentType;PosCurrChoice;AggCurrChoice;FixedCurr
  Type=Bucket
  Vector=timeBucketsSetExternally


  OnShoreFunding =
  Description=Shows Face Value if Sources column is "On Shore" and Trade Key 4 is "IT".
  ExtensionAttribute=OnShoreFunding
  GroupLabel=FieldCustom
  LabelList=On Shore Funding
  Name=On Shore Funding


  OnShoreLongTerm =
  Description=Face Value for On Shore Long term.
  ExtensionAttribute=OnShoreLongTerm
  GroupLabel=FieldCustom
  LabelList=On Shore Long Term
  Name=On Shore Long Term


  OnShoreShortTerm =
  Description=Face Value for On Shore Short term.
  ExtensionAttribute=OnShoreShortTerm
  GroupLabel=FieldCustom
  LabelList=On Shore Short Term
  Name=On Shore Short Term


  OpeningBalance =
  Access=ReadOnly
  Description=
  ExtensionAttribute=OpeningBalance
  Format=
  GroupLabel=FieldCustom
  LabelList=Opening Balance
  Name=Opening Balance


  ORD =
  Access=ReadOnly
  Description=
  ExtensionAttribute=ORD
  Format=
  GroupLabel=FieldCustom
  LabelList=ORD
  Name=ORD


  OriginalCostAmt =
  Access=ReadOnly
  Description=
  ExtensionAttribute=OriginalCostAmt
  Format=
  GroupLabel=FieldCustom
  LabelList=OriginalCostAmt
  Name=OriginalCostAmt


  OthersFairValue =
  Access=ReadOnly
  Description=The fair value of transaction
  ExtensionAttribute=OthersFairValue
  Format=
  GroupLabel=FieldCustom
  LabelList=Others (Fair Value)
  Name=Others (Fair Value)


  OthersNotAmt =
  Access=ReadOnly
  Description=The unamortized of other to lend
  ExtensionAttribute=OthersNotAmt
  Format=
  GroupLabel=FieldCustom
  LabelList=Others (Not Amortized)
  Name=Others (Not Amortized)


  OurAccount =
  Access=ReadOnly
  Description=Our Account (acq)
  ExtensionAttribute=OurAccount
  Format=
  GroupLabel=FieldCustom
  LabelList=Our Account
  Name=Our Account


  OutstandingEqvUSD =
  ColumnAppearance=Total_background
  Description=The amount of transaction that equals to USD.
  ExtensionAttribute=OutstandingEqvUSD
  GroupLabel=FieldCustom
  Label=Outstanding Eqv USD
  Name=Outstanding Eqv USD


  P2_RepoRate =
  Description=The Repo Rate of Repo Trx.
  ExtensionAttribute=P2_RepoRate
  Format=EightDecimalDetailedHideNaN
  GroupLabel=FieldCustom
  LabelList=P2_RepoRate
  Name=P2_RepoRate
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  PayDate =
  Access=ReadOnly
  Description=The date the payment is due
  ExtensionAttribute=PayDate
  Format=
  GroupLabel=FieldCustom
  LabelList=Pay Date
  Name=Pay Date


  PayDayCustom =
  Access=ReadOnly
  Description=Pay Day Custom
  ExtensionAttribute=PayDayCustom
  Format=
  GroupLabel=FieldCustom
  LabelList=Pay Day
  Name=Pay Day


  PayLegEqvUSD =
  ColumnAppearance=Total_background
  Description=PayLeg Eqv USD
  ExtensionAttribute=PayLegEqvUSD
  GroupLabel=FieldCustom
  Label=PayLegEqvUSD
  Name=PayLegEqvUSD


  PaymentSystem =
  Access=ReadOnly
  Description=The payment system of the transaction
  ExtensionAttribute=PaymentSystem
  Format=
  GroupLabel=FieldCustom
  LabelList=Payment System
  Name=Payment System


  PayOrReceive =
  Access=ReadOnly
  Description=Pay or receive bank's perspective
  ExtensionAttribute=PayOrReceive
  Format=
  GroupLabel=FieldCustom
  LabelList=PAY/RECEIVE (BANK PERSPECTIVE)
  Name=Pay or Receive


  PBOCRate =
  Description=PBOCRate
  ExtensionAttribute=PBOCRate
  GroupLabel=FieldCustom
  Label=PBOCRate
  Name=PBOCRate


  PEFINDODataBloomberg =
  Access=ReadOnly
  Description=The rating of PEFINDO in Bloomberg
  ExtensionAttribute=PEFINDODataBloomberg
  Format=
  GroupLabel=FieldCustom
  LabelList=PEFINDO Data Bloomberg
  Name=PEFINDO Data Bloomberg


  PEFINDODataNTCS =
  Access=ReadOnly
  Description=The rating of PEFINDO in NTCS
  ExtensionAttribute=PEFINDODataNTCS
  Format=
  GroupLabel=FieldCustom
  LabelList=PEFINDO Data NTCS
  Name=PEFINDO Data NTCS


  PEFINDOHasilMatch =
  Access=ReadOnly
  Description=The match result of PEFINDO between NTCS and other sources
  ExtensionAttribute=PEFINDOHasilMatch
  Format=
  GroupLabel=FieldCustom
  LabelList=PEFINDO Hasil Match
  Name=PEFINDO Hasil Match


  Pemeringkat =
  Access=ReadOnly
  Description=Institution Name who gives rating
  ExtensionAttribute=Pemeringkat
  Format=
  GroupLabel=FieldCustom
  LabelList=Pemeringkat
  Name=Pemeringkat


  Percentage_FX =
  ColumnAppearance=Total_background
  Description=The value of total divided by limit in percentage (FX)
  ExtensionAttribute=Percentage_FX
  GroupLabel=FieldCustom
  Label=%
  Name=%


  Percentage_IR =
  ColumnAppearance=Total_background
  Description=The value of total divided by limit in percentage (IR)
  ExtensionAttribute=Percentage_IR
  GroupLabel=FieldCustom
  Label=%
  Name=%


  Percentage_Yesterday =
  ColumnAppearance=Total_background
  Description=The number of times the transaction has been done (yesterday)
  ExtensionAttribute=Percentage_Yesterday
  GroupLabel=FieldCustom
  Label=Percentage Yesterday
  Name=Percentage Yesterday


  PercentageChange =
  Description=(SettlePriceMTM - Book Price)/ Book Price.
  ExtensionAttribute=PercentageChange
  Format=DecimalsFormatter
  GroupLabel=FieldCustom
  Label=Percentage Change
  Name=Percentage Change


  PercentageHolding =
  Description=The percentage of the existing holding period with the limit.
  ExtensionAttribute=PercentageHolding
  GroupLabel=FieldCustom
  Label=% Holding Status
  Name=% Holding Status


  PercentageMO01RPL =
  ColumnAppearance=Total_background
  Description=Percentage calculation for RPL Today
  ExtensionAttribute=PercentageMO01RPL
  GroupLabel=FieldCustom
  Label=Percentage MO01 RPL
  Name=Percentage MO01 RPL


  PercentageMO01RPL_Yesterday =
  ColumnAppearance=Total_background
  Description=Percentage calculation for RPL Yesterday
  ExtensionAttribute=PercentageMO01RPL_Yesterday
  GroupLabel=FieldCustom
  Label=Percentage MO01 RPL Yesterday
  Name=Percentage MO01 RPL Yesterday


  PercentageMO01UPL =
  Access=ReadOnly
  Description=Percentage calculation for UPL Today
  ExtensionAttribute=PercentageMO01UPL
  Format=
  GroupLabel=FieldCustom
  LabelList=Percentage MO01 UPL
  Name=Percentage MO01 UPL


  PercentageMO01UPL_Yesterday =
  Access=ReadOnly
  Description=Percentage calculation for UPL Yesterday
  ExtensionAttribute=PercentageMO01UPL_Yesterday
  Format=
  GroupLabel=FieldCustom
  LabelList=Percentage MO01 UPL Yesterday
  Name=Percentage MO01 UPL Yesterday


  PercentageVolumeYesterday =
  ColumnAppearance=Total_background
  Description=Percentage calculation of volume yeseterday in MO Reports
  ExtensionAttribute=PercentageVolumeYesterday
  GroupLabel=FieldCustom
  Label=Percentage Volume Yesterday
  Name=Percentage Volume Yesterday


  PercentNominal =
  Description=Percentage nominal per group
  ExtensionAttribute=PercentNominal
  Format=
  GroupLabel=FieldCustom
  LabelList=PercentNominal
  Name=Percent Nominal


  PercentUtilization =
  Access=ReadOnly
  Description=The percentage of utilization of credit equivalent limit
  ExtensionAttribute=PercentUtilization
  Format=
  GroupLabel=FieldCustom
  LabelList=% Utilization
  Name=% Utilization


  PercentUtilization__Trading =
  Access=ReadOnly
  Description=The percentage of utilization of credit equivalent limit
  ExtensionAttribute=PercentUtilizationTrading
  Format=
  GroupLabel=FieldCustom
  LabelList=% Utilization
  Name=% Utilization


  Peringkat =
  Access=ReadOnly
  Description=Rating
  ExtensionAttribute=Peringkat
  Format=
  GroupLabel=FieldCustom
  LabelList=Peringkat
  Name=Peringkat


  Period =
  ColumnAppearance=Total_background
  Description=Period of interest coupon calculation.
  ExtensionAttribute=Period
  Format=
  GroupLabel=FieldCustom
  Label=Period
  Name=Period


  Period1 =
  Access=ReadOnly
  Description=Period1
  ExtensionAttribute=Period1
  Format=
  GroupLabel=FieldCustom
  LabelList=PERIOD1
  Name=PERIOD1


  Period2 =
  Access=ReadOnly
  Description=Period2
  ExtensionAttribute=Period2
  Format=
  GroupLabel=FieldCustom
  LabelList=PERIOD2
  Name=PERIOD2


  Period3 =
  Access=ReadOnly
  Description=Period3
  ExtensionAttribute=Period3
  Format=
  GroupLabel=FieldCustom
  LabelList=PERIOD3
  Name=PERIOD3


  Period4 =
  Access=ReadOnly
  Description=Period4
  ExtensionAttribute=Period4
  Format=
  GroupLabel=FieldCustom
  LabelList=PERIOD4
  Name=PERIOD4


  Period5 =
  Access=ReadOnly
  Description=Period5
  ExtensionAttribute=Period5
  Format=
  GroupLabel=FieldCustom
  LabelList=PERIOD5
  Name=PERIOD5


  PhysicalForeign =
  Access=ReadOnly
  Description=Indicator, N for Not Foreign (Indonesia), Y for Foreign
  ExtensionAttribute=PhysicalForeign
  Format=
  GroupLabel=FieldCustom
  LabelList=PhysicalForeign
  Name=Physical Foreign


  Placement/Borrowing =
  Access=ReadOnly
  Description=
  ExtensionAttribute=Placement/Borrowing
  Format=
  GroupLabel=FieldCustom
  LabelList=Placement/Borrowing
  Name=Placement/Borrowing


  PLNID =
  Description=showing PLN ID
  ExtensionAttribute=PLNID
  GroupLabel=FieldCustom
  LabelList=PLN ID
  Name=PLN ID


  PnLIDR =
  Description=PnL In IDR
  ExtensionAttribute=PnLIDR
  GroupLabel=FieldCustom
  Name=PnLIDR


  PnLMonth =
  Description=PnL Monthly
  ExtensionAttribute=PnLMonth
  Format=
  GroupLabel=P&L
  LabelList=P&L Monthly
  Name=PnLMonth


  PnLYear =
  Description=PnL Year
  ExtensionAttribute=PnLYear
  Format=
  GroupLabel=P&L
  LabelList=P&L Yearly
  Name=PnLYear


  PnLYearly =
  Description=ICT Custom. Change in the monetary value gained or lost for the position since the beginning of the current report year.
  GroupLabel=FieldCustom
  InheritsFrom=Portfolio Total Profit and Loss
  LabelList=TPLY;Total P/L Year;Total Profit and Loss Yearly
  Name=PnLYearly
  ParametersFixedValues=PortfolioProfitLossStartDate=First Of Year;PortfolioProfitLossStartDateCustom=1970-01-01


  Portfolio Total Profit and Loss Yearly =
  Description=ICT Custom. Change in the monetary value gained or lost for the position since the beginning of the current report year.
  GroupLabel=FieldCustom
  InheritsFrom=Portfolio Total Profit and Loss
  LabelList=TPLY;Total P/L Year;Total Profit and Loss Yearly
  ParametersFixedValues=PortfolioProfitLossStartDate=First Of Year;PortfolioProfitLossStartDateCustom=1970-01-01


  Portfolio Value at Risk From Scenario Custom =
  Description=Scenario Value at Risk based on a stored scenario. The stored scenario will be executed and the VaR will be calculated for the given percentile, and the given decay factor.
  ExtensionAttribute=valueAtRiskFromScenario
  GroupLabel=FieldCustom
  InheritsFrom=Portfolio Value at Risk Column
  InputColumnDefinition=Portfolio Value at Risk Base Scenario
  LabelList=VaR Custom;SVaR Custom
  Name=Scenario Value at Risk Custom
  Parameters=PortfolioValueAtRiskConfidenceInterval;PortfolioValueAtRiskDecayFactor


  PortLimit =
  Description=The FComplianceRule Threshold Value of the Portfolio
  ExtensionAttribute=PortLimit
  GroupLabel=FieldCustom
  LabelList=Portfolio Limit
  Name=Portfolio Limit


  PortUtilPercent =
  Description=The Utilization Percentage from FRuleValue
  ExtensionAttribute=PortUtilPercent
  GroupLabel=FieldCustom
  LabelList=Portfolio Utilization Percent
  Name=Portfolio Utilization Percent


  PortUtilStatus =
  Description=The Utilization Status from FRuleValue
  ExtensionAttribute=PortUtilStatus
  GroupLabel=FieldCustom
  LabelList=Portfolio Utilization Status
  Name=Portfolio Utilization Status


  PosisiSaldoAkhirBulan =
  Description=Posisi Saldo Akhir Bulan
  ExtensionAttribute=PosisiSaldoAkhirBulan
  Format=
  GroupLabel=FieldCustom
  LabelList=Posisi Saldo Akhir Bulan
  Name=Posisi Saldo Akhir Bulan


  PositionCCY1 =
  Description=
  ExtensionAttribute=PositionCCY1
  GroupLabel=FieldCustom
  LabelList=Position in CCY 1 (Purchase / Sell)
  Name=Position CCY 1


  PositionEOD =
  Description=The date of daily reporting as the position of EOD of data transaction.
  ExtensionAttribute=PositionEOD
  Format=
  GroupLabel=FieldCustom
  LabelList=Position
  Name=Position


  PostingBySystem =
  Description=
  ExtensionAttribute=PostingBySystem
  GroupLabel=FieldCustom
  Label=PostingBySystem
  Name=PostingBySystem


  PPhPotong1 =
  Description=Jumlah PPh Yang Dipotong
  ExtensionAttribute=WHT
  Format=
  GroupLabel=FieldCustom
  LabelList=Jumlah PPh Yang Dipotong
  Name=Jumlah PPh Yang Dipotong


  PPhPotong2 =
  Description=Jumlah PPh Yang Dipotong 2
  ExtensionAttribute=WHT
  Format=
  GroupLabel=FieldCustom
  LabelList=PPh Yang Dipotong 2
  Name=Jumlah PPh Yang Dipotong 2


  PPlusI =
  Description=Face Value plus Total Interest.
  ExtensionAttribute=PPlusI
  Format=SixDecimalDetailedPercent
  GroupLabel=FieldCustom
  LabelList=P+i
  Name=P+i


  PPlusIAboveOneYear =
  Description=P+i value with Days to Maturity > 360.
  ExtensionAttribute=PPlusIAboveOneYear
  Format=
  GroupLabel=P+i
  LabelList=Above 1 Year
  Name=Above 1 Year


  PPlusICurrent =
  Description=P+i value with Days to Maturity between > 0 and < 2.
  ExtensionAttribute=PPlusICurrent
  Format=
  GroupLabel=P+i
  LabelList=Current
  Name=Current


  PPlusINineMonthToTwelveMonth =
  Description=P+i value with Days to Maturity between > 274 and < 361.
  ExtensionAttribute=PPlusINineMonthToTwelveMonth
  Format=
  GroupLabel=P+i
  LabelList=9-12 Month
  Name=9-12 Month


  PPlusIOneMonthToTwoMonth =
  Description=P+i value with Days to Maturity between > 30 and < 62.
  ExtensionAttribute=PPlusIOneMonthToTwoMonth
  Format=
  GroupLabel=P+i
  LabelList=1-2 Month
  Name=1-2 Month


  PPlusIOneWeek =
  Description=P+i value with Days to Maturity between > 1 and < 8.
  ExtensionAttribute=PPlusIOneWeek
  Format=
  GroupLabel=P+i
  LabelList=in 1 week
  Name=in 1 week


  PPlusIOneWeekToOneMonth =
  Description=P+i value with Days to Maturity between > 7 and < 31.
  ExtensionAttribute=PPlusIOneWeekToOneMonth
  Format=
  GroupLabel=P+i
  LabelList=1wk - 1 month
  Name=1wk - 1 month


  PPlusISixMonthToNineMonth =
  Description=P+i value with Days to Maturity between > 183 and < 275.
  ExtensionAttribute=PPlusISixMonthToNineMonth
  Format=
  GroupLabel=P+i
  LabelList=6-9 Month
  Name=6-9 Month


  PPlusIThreeMonthToSixMonth =
  Description=P+i value with Days to Maturity between > 91 and < 184.
  ExtensionAttribute=PPlusIThreeMonthToSixMonth
  Format=
  GroupLabel=P+i
  LabelList=3-6 Month
  Name=3-6 Month


  PPlusITwoMonthToThreeMonth =
  Description=P+i value with Days to Maturity between > 61 and < 92.
  ExtensionAttribute=PPlusITwoMonthToThreeMonth
  Format=
  GroupLabel=P+i
  LabelList=2-3 Month
  Name=2-3 Month


  premiOption =
  Access=ReadOnly
  Description=-
  ExtensionAttribute=premiOption
  Format=
  GroupLabel=FieldCustom
  LabelList=premiOption
  Name=premiOption


  premiumCustom =
  Access=ReadOnly
  Description=Premium
  ExtensionAttribute=premiumCustom
  Format=
  GroupLabel=FieldCustom
  LabelList=Premium
  Name=Premium


  PrevEffDate =
  ColumnAppearance=Total_background
  Description=Effective Date - 1
  ExtensionAttribute=PrevEffDate
  Format=
  GroupLabel=FieldCustom
  Label=Previous Effective Date
  Name=Previous Effective Date


  PrevPrevEffDate =
  ColumnAppearance=Total_background
  Description=Effective Date - 2
  ExtensionAttribute=PrevPrevEffDate
  Format=
  GroupLabel=FieldCustom
  Label=Previous Previous Effective Date
  Name=Previous Previous Effective Date


  PrevPrevPrice =
  ColumnAppearance=Total_background
  Description=Price on two days ago. Calculation: Price(Value Day - 2).
  ExtensionAttribute=PrevPrevPrice
  Format=
  GroupLabel=FieldCustom
  Label=Previous Previous Price
  Name=Previous Previous Price


  PrevPrice =
  ColumnAppearance=Total_background
  Description=Price on yesterday. Calculation: Price(Value Day - 1).
  ExtensionAttribute=PrevPrice
  Format=
  GroupLabel=FieldCustom
  Label=Previous Price
  Name=Previous Price


  PrevYearPrice =
  ColumnAppearance=Total_background
  Description=
  ExtensionAttribute=PrevYearPrice
  Format=
  GroupLabel=FieldCustom
  Label=Previous Year Price
  Name=Previous Year Price


  PriceChange =
  Description=Price Change [((Market Value - Book Value) / Book Value) * 100]
  ExtensionAttribute=PriceChange
  Format=PreciseTwoDecimalsHideNaN
  GroupLabel=FieldCustom
  Label=Price Change
  Name=Price Change


  PriceYield8 =
  Description=Showing Price on the left side field or Yield on the right side field on Bill Menu.
  ExtensionAttribute=PriceYield8
  Format=EightDecimalDetailedHideNaN
  GroupLabel=FieldCustom
  LabelList=PRICE_8
  Name=Price_8


  PriceYST =
  Access=ReadOnly
  Description=Market price difference between today and tomorrow value
  ExtensionAttribute=PriceYST
  Format=
  GroupLabel=FieldCustom
  LabelList=PriceYST
  Name=PriceYST


  PRINPAYAMT =
  Description=Face value multiplied by price.
  ExtensionAttribute=PRINPAYAMT
  Format=
  GroupLabel=FieldCustom
  LabelList=PRINPAYAMT
  Name=PRINPAYAMT


  PRINPAYAMT_HKD =
  Description=Face value multiplied by price.
  ExtensionAttribute=PRINPAYAMT_HKD
  Format=
  GroupLabel=FieldCustom
  LabelList=PRINPAYAMT_HKD
  Name=PRINPAYAMT_HKD


  PRINPAYAMT_USD =
  Description=Face value multiplied by price.
  ExtensionAttribute=PRINPAYAMT_USD
  Format=
  GroupLabel=FieldCustom
  LabelList=PRINPAYAMT_USD
  Name=PRINPAYAMT_USD


  ProceedAmount =
  Access=ReadOnly
  Description=The proceed amount of transaction
  ExtensionAttribute=ProceedAmount
  Format=
  GroupLabel=FieldCustom
  LabelList=Proceed Amount
  Name=Proceed Amount


  ProcessFlag =
  Access=ReadOnly
  Description=
  ExtensionAttribute=ProcessFlag
  Format=
  GroupLabel=FieldCustom
  LabelList=Process Flag
  Name=Process Flag


  ProdType =
  Access=ReadOnly
  Description=Optional Key 3 / Optional Key 4
  ExtensionAttribute=ProdType
  Format=
  GroupLabel=FieldCustom
  LabelList=ProdType
  Name=Product Type


  Product =
  Access=ReadOnly
  Description=Product
  ExtensionAttribute=Product
  Format=
  GroupLabel=FieldCustom
  LabelList=Product
  Name=Product


  PV01ThresholdValue =
  Access=ReadOnly
  Description=PV01 Threshold Value
  ExtensionAttribute=PV01ThresholdValue
  Format=
  GroupLabel=FieldCustom
  LabelList=PV01ThresholdValue
  Name=PV01ThresholdValue


  PV01UtilizationPercentage =
  Description=Standard PV01 Utilization Percentage
  ExtensionAttribute=PV01UtilizationPercentage
  Format=
  GroupLabel=FieldCustom
  LabelList=PV01UtilizationPercentage
  Name=PV01UtilizationPercentage


  QuantityCustom =
  Access=ReadOnly
  Description=Quantity
  ExtensionAttribute=QuantityCustom
  Format=
  GroupLabel=FieldCustom
  LabelList=Quantity
  Name=Quantity


  QuantityUsed =
  Description=Quantity of this Instrument is used in a Trade
  ExtensionAttribute=QuantityUsed
  GroupLabel=FieldCustom
  Name=QuantityUsed


  RATE_8 =
  Access=ReadOnly
  Description=1 for IDR
  ExtensionAttribute=RATE_8
  Format=
  GroupLabel=FieldCustom
  LabelList=RATE_8
  Name=RATE_8


  RatesOPICS =
  ColumnAppearance=Total_background
  Description=Shows the rate/price from price entry captured when user book this trade and the price/rate will fixed
  ExtensionAttribute=RatesOPICS
  Format=FiveDecimalDetailed
  GroupLabel=FieldCustom
  Label=RatesOPICS
  Name=RatesOPICS


  Reff =
  <ProdType>.=
  ColumnAppearance=Total_background
  Description=The combining number between TradeNo, Type and Prodcode. Format: <trx_trdnbr></><insType></><ProdType>.
  ExtensionAttribute=Reff
  Format=
  GroupLabel=FieldCustom
  Label=Reff
  Name=Reff


  Reksadana =
  Description=
  ExtensionAttribute=Reksadana
  GroupLabel=FieldCustom
  Label=Reksadana
  Name=Reksadana


  Reksus =
  Description=Reksus
  ExtensionAttribute=Reksus
  Format=
  GroupLabel=FieldCustom
  LabelList=Reksus
  Name=Reksus


  REM =
  ColumnAppearance=Total_background
  Description=
  ExtensionAttribute=REM
  GroupLabel=FieldCustom
  Label=REM
  Name=REM


  RemarkOutstanding =
  ColumnAppearance=Total_background
  Description=The description of transaction (outstanding or not).
  ExtensionAttribute=RemarkOutstanding
  Format=
  GroupLabel=FieldCustom
  Label=Remark Outstanding
  Name=Remark Outstanding


  RemarkSellBuy =
  ColumnAppearance=Total_background
  Description=The description of the transaction (Sell/Buy from CCY to CCY).
  ExtensionAttribute=RemarkSellBuy
  Format=
  GroupLabel=FieldCustom
  Label=Remark Sell Buy
  Name=Remark Sell Buy


  Repo =
  Description=
  ExtensionAttribute=Repo
  GroupLabel=FieldCustom
  LabelList=REPO
  Name=Repo


  RepoBI =
  Description=
  ExtensionAttribute=RepoBI
  GroupLabel=FieldCustom
  Label=Repo BI
  Name=Repo BI


  RepoCleanPrice =
  Description=Display Clean Price of Repo Instrument
  ExtensionAttribute=RepoCleanPrice
  GroupLabel=FieldCustom
  LabelList=CleanPrice
  Name=Repo Clean Price


  RepoDirtyPrice =
  Description=Display Dirty Price of Repo Instrument
  ExtensionAttribute=RepoDirtyPrice
  GroupLabel=FieldCustom
  LabelList=DirtyPrice
  Name=Repo Dirty Price


  RepoHaircut =
  Description=Display the haircut value of Repo Transaction
  ExtensionAttribute=RepoHaircut
  GroupLabel=FieldCustom
  LabelList=Haircut
  Name=Repo Haircut


  RepoInterbank =
  Description=
  ExtensionAttribute=RepoInterbank
  GroupLabel=FieldCustom
  Label=Repo Interbank
  Name=Repo Interbank


  RepoUnderlyingName =
  Description=Display the underlying name of Repo Transaction
  ExtensionAttribute=RepoUnderlyingName
  GroupLabel=FieldCustom
  LabelList=RepoUnderlyingName
  Name=Repo Underlying Name


  RepoYield =
  Description=Display Trade Yield of Repo Transaction
  ExtensionAttribute=RepoYield
  GroupLabel=FieldCustom
  LabelList=Repo Trade Yield
  Name=Repo Trade Yield


  RepurchaseAmount =
  Description=Start Cash + Interest
  ExtensionAttribute=RepurchaseAmount
  GroupLabel=FieldCustom
  LabelList=RepurchaseAmount
  Name=Repurchase Amount


  RevalRate =
  ColumnAppearance=Total_background
  Description=Reval Rate
  ExtensionAttribute=RevalRate
  GroupLabel=FieldCustom
  Label=Reval Rate
  Name=Reval Rate


  RevaluationAmount =
  ColumnAppearance=Total_background
  Description=
  ExtensionAttribute=RevaluationAmount
  GroupLabel=FieldCustom
  Label=RevaluationAmount
  Name=RevaluationAmount


  RevRepoBI =
  Description=
  ExtensionAttribute=RevRepoBI
  GroupLabel=FieldCustom
  Label=RevRepo BI
  Name=RevRepo BI


  RevRepoInterbank =
  Description=IBBI, IBOB, OVBSBI, OVBGOV, OVBOTH, CCSBI, CCGOV, CCOTH
  ExtensionAttribute=RevRepoInterbank
  GroupLabel=FieldCustom
  Label=RevRepo Interbank
  Name=RevRepo Interbank


  RiskWeight =
  ColumnAppearance=Total_background
  Description=The value of Risk Weight and could be parameterized
  ExtensionAttribute=RiskWeight
  GroupLabel=FieldCustom
  Label=SA-CCR Risk Weight
  Name=SA-CCR Risk Weight


  RowNumber =
  Description=Nomor di baris report
  ExtensionAttribute=RowNumber
  GroupLabel=FieldCustom
  Label=No
  Name=No


  RPL_Yesterday =
  Description=Realized Profit Loss Yesterday
  ExtensionAttribute=RPL_Yesterday
  Format=
  GroupLabel=FieldCustom
  Label=RPL_Yesterday
  Name=RPL_Yesterday


  Rule Value Utilization % Custom =
  ColumnAppearance=utilizationAppearancePercentCustom
  ExtensionAttribute=ruleValueUtilizationPercentCustom
  Format=Percent
  GroupLabel=FieldCustom
  InitialWidth=70
  LabelList=Utilization %


  Rule Value Utilization Custom =
  ColumnAppearance=utilizationAppearanceCustom
  ExtensionAttribute=ruleValueUtilizationCustom
  GroupLabel=Rule
  LabelList=Utilization


  S/M =
  Access=ReadOnly
  Description=
  ExtensionAttribute=S/M
  Format=
  GroupLabel=FieldCustom
  LabelList=S/M
  Name=S/M


  SA-CCR_RWA =
  ColumnAppearance=Total_background
  Description=The value of Risk Weighted Asset. The multiplication of Risk Weight and EAD.
  ExtensionAttribute=SACCR_RWA
  GroupLabel=FieldCustom
  Label=SA-CCR RWA
  Name=SA-CCR RWA


  SB_Dimiliki =
  Description=
  ExtensionAttribute=SB_Dimiliki
  GroupLabel=FieldCustom
  Label=Surat Berharga Dimiliki
  Name=Surat Berharga Dimiliki


  SB_Terbit =
  Description=
  ExtensionAttribute=SB_Terbit
  GroupLabel=FieldCustom
  Label=SB Terbit
  Name=SB Terbit


  SCHED_Pay_Freq =
  ColumnAppearance=Total_background
  Description=
  ExtensionAttribute=SCHED_Pay_Freq
  GroupLabel=FieldCustom
  Label=SCHED_Pay_Freq
  Name=SCHED_Pay_Freq


  Scttype =
  Access=ReadOnly
  Description=AFS, HTM, TRD indicator
  ExtensionAttribute=Scttype
  Format=
  GroupLabel=FieldCustom
  LabelList=SctType
  Name=SctType


  SECID =
  Access=ReadOnly
  Description=Security ID for instrument
  ExtensionAttribute=SECID
  Format=
  GroupLabel=FieldCustom
  LabelList=SECID
  Name=Security ID


  SECIDPrice =
  Access=ReadOnly
  Description=The price of securities
  ExtensionAttribute=SECIDPrice
  Format=
  GroupLabel=FieldCustom
  LabelList=SECID Price
  Name=SECID Price


  SecuritiesRating =
  ColumnAppearance=Total_background
  Description=The rating of securities.
  ExtensionAttribute=SecuritiesRating
  Format=
  GroupLabel=FieldCustom
  Label=Securities Rating
  Name=Securities Rating


  SecuritiesRatingInstituition =
  ColumnAppearance=Total_background
  Description=The rating of securities.
  ExtensionAttribute=SecuritiesRatingInstituition
  Format=
  GroupLabel=FieldCustom
  Label=SSecurities Rating Instituition
  Name=Securities Rating Instituition


  SecuritySubtype =
  ColumnAppearance=
  Description=
  ExtensionAttribute=SecuritySubtype
  GroupLabel=FieldCustom
  Label=Security sub type
  Name=Security sub type


  SellAmountCustom =
  ColumnAppearance=
  Description=The amount of sell transaction.
  ExtensionAttribute=SellAmountCustom
  GroupLabel=FieldCustom
  Name=Sell Amount


  SellCurrency_Custom =
  Description=Sell Currency from trade sheet.
  ExtensionAttribute=SellCurrency_Custom
  Format=
  GroupLabel=FieldCustom
  Label=Sell Currency
  Name=Sell Currency


  SEQNUM =
  Access=ReadOnly
  Description=
  ExtensionAttribute=SEQNUM
  Format=
  GroupLabel=FieldCustom
  LabelList=SEQNUM
  Name=SEQNUM


  SETCCY =
  ColumnAppearance=Total_background
  Description=SETCCY
  ExtensionAttribute=SETCCY
  GroupLabel=FieldCustom
  Label=SETCCY
  Name=SETCCY


  SETTAMT =
  ColumnAppearance=Total_background
  Description=SETTAMT
  ExtensionAttribute=SETTAMT
  GroupLabel=FieldCustom
  Label=SETTAMT
  Name=SETTAMT


  SETTAVGCOST =
  Access=ReadOnly
  Description=
  ExtensionAttribute=SETTAVGCOST
  Format=
  GroupLabel=FieldCustom
  LabelList=SETTAVGCOST
  Name=SETTAVGCOST


  SETTBASEAMT =
  ColumnAppearance=Total_background
  Description=SETTBASEAMT
  ExtensionAttribute=SETTBASEAMT
  GroupLabel=FieldCustom
  Label=SETTBASEAMT
  Name=SETTBASEAMT


  SETTBASETERMS =
  ColumnAppearance=Total_background
  Description=SETTBASETERMS
  ExtensionAttribute=SETTBASETERMS
  GroupLabel=FieldCustom
  Label=SETTBASETERMS
  Name=SETTBASETERMS


  SETTCCY =
  ColumnAppearance=Total_background
  Description=SETTCCY
  ExtensionAttribute=SETTCCY
  GroupLabel=FieldCustom
  Label=SETTCCY
  Name=SETTCCY


  SettlePriceMTM =
  Description=Settle Price from Price Entry.
  ExtensionAttribute=SettlePriceMTM
  Format=DecimalsFormatter
  GroupLabel=FieldCustom
  Label=SettlePriceMTM
  Name=SettlePriceMTM


  ShortTermFDQ =
  Description=Face Value for Short term FDQ.
  ExtensionAttribute=ShortTermFDQ
  GroupLabel=FieldCustom
  LabelList=Short Term FDQ
  Name=Short Term FDQ


  SNPDataBloomberg =
  Access=ReadOnly
  Description=The rating of SNP in Bloomberg
  ExtensionAttribute=SNPDataBloomberg
  Format=
  GroupLabel=FieldCustom
  LabelList=SNP Data Bloomberg
  Name=SNP Data Bloomberg


  SNPDataNTCS =
  Access=ReadOnly
  Description=The rating of SNP in NTCS
  ExtensionAttribute=SNPDataNTCS
  Format=
  GroupLabel=FieldCustom
  LabelList=SNP Data NTCS
  Name=SNP Data NTCS


  SNPHasilMatch =
  Access=ReadOnly
  Description=The match result of SNP between NTCS and other sources
  ExtensionAttribute=SNPHasilMatch
  Format=
  GroupLabel=FieldCustom
  LabelList=SNP Hasil Match
  Name=SNP Hasil Match


  Sold Amount =
  Description=Negative Value of CTR AMT
  ExtensionAttribute=CTRCCYAmount
  Format=PreciseTwoDecimalsHideNaN
  GroupLabel=FieldCustom
  InheritsFrom=Sell Amount
  Label=Sold Amount
  Name=Sold Amount


  SourceData =
  Access=ReadOnly
  Description=The source data used for this transaction
  ExtensionAttribute=SourceData
  Format=
  GroupLabel=FieldCustom
  LabelList=Source Data
  Name=Source Data


  Sources =
  Description=If China, then On Shore. Else, Off Shore.
  ExtensionAttribute=Sources
  GroupLabel=FieldCustom
  LabelList=Sources
  Name=Sources


  SpotAssets =
  Description=Trade Nominal for trades categorized as Assets
  ExtensionAttribute=SpotAssets
  Format=Imprecise
  GroupLabel=FieldCustom
  LabelList=SPOT ASSETS
  Name=Spot Assets


  SpotLiabilities =
  Description=Trade Nominal for trades categorized as Liabilities
  ExtensionAttribute=SpotLiabilities
  Format=Imprecise
  GroupLabel=FieldCustom
  LabelList=SPOT LIABILITIES
  Name=Spot Liabilities


  SRC_STM_ID =
  Access=ReadOnly
  Description=
  ExtensionAttribute=SRC_STM_ID
  Format=
  GroupLabel=FieldCustom
  LabelList=SRC_STM_ID
  Name=SRC_STM_ID


  StandardYearlyLossThresholdValue =
  Access=ReadOnly
  Description=Standard Yearly Loss Threshold Value
  ExtensionAttribute=StandardYearlyLossThresholdValue
  Format=
  GroupLabel=FieldCustom
  LabelList=StandardYearlyLossThresholdValue
  Name=StandardYearlyLossThresholdValue


  StandardYearlyLossUtilizationPercentage =
  Description=Standard Yearly Loss Utilization Percentage
  ExtensionAttribute=StandardYearlyLossUtilizationPercentage
  Format=
  GroupLabel=FieldCustom
  LabelList=StandardYearlyLossUtilizationPercentage
  Name=StandardYearlyLossUtilizationPercentage


  StartAccrualFA =
  Description=PV Value for Fixed Rate type
  ExtensionAttribute=StartAccrualFA
  Format=
  GroupLabel=FieldCustom
  LabelList=Start Accrual
  Name=Start Accrual


  StartValue =
  Access=ReadOnly
  Description=Notional * Rate
  ExtensionAttribute=StartValue
  Format=
  GroupLabel=FieldCustom
  LabelList=StartValue
  Name=Start Value


  StatusAntasena =
  Access=ReadOnly
  Description=The status that explained if the report already generated or not
  ExtensionAttribute=StatusAntasena
  Format=
  GroupLabel=FieldCustom
  LabelList=Status Antasena
  Name=Status Antasena


  StatusBondCutLoss =
  ColumnAppearance=StatusBondCutLoss
  Description=Status of Bond Cut Loss Limit
  ExtensionAttribute=StatusBondCutLoss
  GroupLabel=FieldCustom
  Label=Status Bond Cut Loss
  Name=Status Bond Cut Loss


  StatusBondHolding =
  Access=ReadOnly
  ColumnAppearance=StatusBondHolding
  Description=To inform the status of the percentage of Bon Holding Period
  ExtensionAttribute=StatusBondHolding
  Format=
  GroupLabel=FieldCustom
  LabelList=Status Bond Holding
  Name=Status Bond Holding


  StatusExpiry =
  Access=ReadOnly
  ColumnAppearance=StatusExpiryBkg
  Description=End date - Date Today. If <0 days, then green. If >0 days then red.
  ExtensionAttribute=StatusExpiry
  Format=
  GroupLabel=FieldCustom
  LabelList=Status Expiry
  Name=Status Expiry


  StatusLimit =
  Access=ReadOnly
  Description=To inform the status of the percentage of issuer limit utilization
  ExtensionAttribute=StatusLimit
  Format=
  GroupLabel=FieldCustom
  LabelList=Status Limit
  Name=Status Limit


  StatusLimit_FX =
  ColumnAppearance=Total_background
  Description=To inform the status limit (FX)
  ExtensionAttribute=StatusLimit_FX
  GroupLabel=FieldCustom
  Label=Status Limit FX
  Name=Status Limit FX


  StatusLimit_IR =
  ColumnAppearance=Total_background
  Description=To inform the status limit (IR)
  ExtensionAttribute=StatusLimit_IR
  GroupLabel=FieldCustom
  Label=Status Limit IR
  Name=Status Limit IR


  StatusLimitExpiry =
  Access=ReadOnly
  Description=The status of limit expiry
  ExtensionAttribute=StatusLimitExpiry
  Format=
  GroupLabel=FieldCustom
  LabelList=Status Limit Expiry
  Name=Status Limit Expiry


  StatusLimitTrading =
  Access=ReadOnly
  Description=To inform the status of the percentage of issuer limit utilization
  ExtensionAttribute=StatusLimitTrading
  Format=
  GroupLabel=FieldCustom
  LabelList=Status Limit
  Name=Status Limit


  StatusMatchUnmatch =
  ColumnAppearance=Total_background
  Description=FO-13 The information of status of each transaction, whether it matches, or not, and can give reasons for the dissimilarity.
  ExtensionAttribute=StatusMatchUnmatch
  GroupLabel=FieldCustom
  Label=Status
  Name=StatusMatchUnmatch


  StatusNTCS =
  Access=ReadOnly
  Description=The status of list coustomer whether has succeed sent to NTCS from eMAS or not.
  ExtensionAttribute=StatusNTCS
  Format=
  GroupLabel=FieldCustom
  LabelList=Status NTCS
  Name=Status NTCS


  StatusRegistration =
  Access=ReadOnly
  Description=The status that described whether the counterparty has registered or not.
  ExtensionAttribute=StatusRegistration
  Format=
  GroupLabel=FieldCustom
  LabelList=Registration Status;Status Registrasi
  Name=Registration Status


  StatusUPL =
  ColumnAppearance=StatusUPL
  Description=Green if Unrealized P/L > 0 and Red if Unrealized P/l < 0
  ExtensionAttribute=StatusUPL
  GroupLabel=FieldCustom
  LabelList=Status UPL
  Name=Status UPL


  STDEV =
  Access=ReadOnly
  Description=Standard Deviation
  ExtensionAttribute=STDEV
  Format=
  GroupLabel=FieldCustom
  LabelList=STDEV
  Name=STDEV


  strikePrice2 =
  Access=ReadOnly
  Description=-
  ExtensionAttribute=strikePrice2
  Format=
  GroupLabel=FieldCustom
  LabelList=strikePrice2
  Name=strikePrice2


  Structured =
  Description=Structured
  ExtensionAttribute=Structured
  Format=Imprecise
  GroupLabel=FieldCustom
  LabelList=Structured
  Name=Structured


  SUBLMTNAME =
  Access=ReadOnly
  Description=
  ExtensionAttribute=SUBLMTNAME
  Format=
  GroupLabel=FieldCustom
  LabelList=SUBLMTNAME
  Name=SUBLMTNAME


  SWAP =
  Description=
  ExtensionAttribute=SWAP
  GroupLabel=FieldCustom
  Label=SWAP
  Name=SWAP


  TahunPajak =
  Description=Year based on Value Day
  ExtensionAttribute=TahunPajak
  Format=
  GroupLabel=FieldCustom
  LabelList=Tahun Pajak
  Name=Tahun Pajak


  tanggalJatuhTempoDokumenUnderlying =
  Access=ReadOnly
  Description=-
  ExtensionAttribute=tanggalJatuhTempoDokumenUnderlying
  Format=
  GroupLabel=FieldCustom
  LabelList=tanggalJatuhTempoDokumenUnderlying
  Name=tanggalJatuhTempoDokumenUnderlying


  TanggalKondisi =
  Description=
  ExtensionAttribute=
  GroupLabel=FieldCustom
  LabelList=Tgl Kondisi
  Name=Tanggal Kondisi


  TanggalMacet =
  Description=
  ExtensionAttribute=
  GroupLabel=FieldCustom
  LabelList=Tgl Macet
  Name=Tanggal Macet


  TargetFullYear =
  Access=ReadOnly
  Description=Target PnL on Full Year in IDR.
  ExtensionAttribute=TargetFullYear
  Format=
  GroupLabel=FieldCustom
  LabelList=TargetFullYear
  Name=TargetFullYear


  TargetMonth =
  Description=Target PnL on Month to Date in IDR.
  ExtensionAttribute=TargetMonth
  Format=
  GroupLabel=P&L
  LabelList=TargetMonth
  Name=TargetMonth


  TargetMonthPercent =
  Description=Target PnL on Month to Date in IDR.
  ExtensionAttribute=TargetMonthPercent
  Format=
  GroupLabel=P&L
  LabelList=TargetMonthPercent
  Name=TargetMonthPercent


  TargetMTD =
  Access=ReadOnly
  Description=Target PnL on Month to Date in IDR.
  ExtensionAttribute=TargetMTD
  Format=
  GroupLabel=FieldCustom
  LabelList=TargetMTD
  Name=TargetMTD


  TargetMTDPercent =
  Description=Target MTD %
  ExtensionAttribute=TargetMTDPercent
  Format=
  GroupLabel=FieldCustom
  Label=TargetMTD%
  Name=TargetMTD%


  TargetYear =
  Description=Target PnL on Year to Date in IDR.
  ExtensionAttribute=TargetYear
  Format=
  GroupLabel=P&L
  LabelList=TargetYear
  Name=TargetYear


  TargetYearPercent =
  Description=Target PnL on Year to Date in IDR.
  ExtensionAttribute=TargetYearPercent
  Format=
  GroupLabel=P&L
  LabelList=TargetYearPercent
  Name=TargetYearPercent


  TargetYTD =
  Access=ReadOnly
  Description=Target PnL on Year to Date in IDR.
  ExtensionAttribute=TargetYTD
  Format=
  GroupLabel=FieldCustom
  LabelList=TargetYTD
  Name=TargetYTD


  TargetYTDPercent =
  Description=Target YTD %
  ExtensionAttribute=TargetYTDPercent
  Format=
  GroupLabel=FieldCustom
  Label=TargetYTD%
  Name=TargetYTD%


  Tarif1 =
  Access=ReadOnly
  Description=Accrued Interest / Holding Period ESPT.
  ExtensionAttribute=Tarif1
  GroupLabel=FieldCustom
  LabelList=Tarif 1 / Tingkat Bunga per Tahun
  Name=Tarif 1


  Tarif2 =
  Access=ReadOnly
  Description=Accrued Interest / Holding Period ESPT.
  ExtensionAttribute=Tarif2
  GroupLabel=FieldCustom
  LabelList=Tarif 2 / Tingkat Bunga per Tahun
  Name=Tarif 2


  TarifPajak =
  Description=Tarif Pajak 20%
  ExtensionAttribute=TarifPajak
  Format=
  GroupLabel=FieldCustom
  LabelList=Tarif Pajak
  Name=Tarif Pajak


  TaxDifferenceJournal =
  Description=Journal Trade Tax - Trade Tax in Absolute
  ExtensionAttribute=TaxDifferenceJournal
  Format=
  GroupLabel=FieldCustom
  Label=Tax Difference
  Name=Tax Difference


  Tenor =
  Description=EndDate - ValueDay
  ExtensionAttribute=Tenor
  Format=
  GroupLabel=FieldCustom
  LabelList=Tenor
  Name=Tenor


  TenorTahun =
  Description=EndDate - ValueDay
  ExtensionAttribute=TenorTahun
  Format=
  GroupLabel=FieldCustom
  LabelList=Tenor
  Name=TenorTahun


  Term =
  Description=Short or Long
  ExtensionAttribute=Term
  GroupLabel=FieldCustom
  LabelList=Term
  Name=Term


  Term_Deposit =
  Description=
  ExtensionAttribute=Term_Deposit
  GroupLabel=FieldCustom
  Label=Term Deposit
  Name=Term Deposit


  TermofPeriod =
  ColumnAppearance=
  Description=Transaction term of period. Internal Code not feed from FA
  ExtensionAttribute=TermofPeriod
  Format=
  GroupLabel=FieldCustom
  Label=Term of Period
  Name=Term of Period


  TERMS =
  Access=ReadOnly
  Description=
  ExtensionAttribute=TERMS
  Format=
  GroupLabel=FieldCustom
  LabelList=TERMS
  Name=TERMS


  TglKondisi =
  Description=Tgl Kondisi
  ExtensionAttribute=TglKondisi
  Format=Imprecise
  GroupLabel=FieldCustom
  LabelList=Tgl Kondisi
  Name=Tgl Kondisi


  TglMacet =
  ColumnAppearance=Total_background
  Description=Tgl Macet
  ExtensionAttribute=TglMacet
  GroupLabel=FieldCustom
  Label=TglMacet
  Name=Tgl Macet


  TheoreticalPnLYearly =
  Description=ICT Custom. Change in the monetary value gained or lost for the position since the beginning of the current report year.
  GroupLabel=FieldCustom
  InheritsFrom=Portfolio Theoretical Total Profit and Loss
  LabelList=ThTPLY;Th Total P/L Year;Theoretical Total Profit and Loss Yearly
  Name=TheoreticalPnLYearly
  ParametersFixedValues=PortfolioProfitLossStartDate=First Of Year;PortfolioProfitLossStartDateCustom=1970-01-01


  ThresholdValue1 =
  ColumnAppearance=Total_background
  Description=Threshold Value
  ExtensionAttribute=thresholdValue1
  Format=
  GroupLabel=FieldCustom
  Label=Threshold Value
  Name=Threshold Value


  tingkatIndikasiImbalan =
  ColumnAppearance=Total_background
  Description=
  ExtensionAttribute=tingkatIndikasiImbalan
  GroupLabel=FieldCustom
  Label=tingkatIndikasiImbalan
  Name=tingkatIndikasiImbalan


  Today =
  ColumnAppearance=
  Description=Field Today equals to date system today, for cashflow projection (LIQ)
  ExtensionAttribute=Today
  Format=
  GroupLabel=FieldCustom
  Label=Today
  Name=Today


  ToleranceLimit =
  ColumnAppearance=Total_background
  Description=Tolerance Limit
  ExtensionAttribute=ToleranceLimit
  GroupLabel=FieldCustom
  Label=Tolerance Limit
  Name=Tolerance Limit


  ToleranceLimit2 =
  ColumnAppearance=Total_background
  Description=Tolerance Limit 2
  ExtensionAttribute=ToleranceLimit2
  GroupLabel=FieldCustom
  Label=Tolerance Limit 2
  Name=Tolerance Limit 2


  Total =
  Access=ReadOnly
  Description=The total amount of the transaction
  ExtensionAttribute=Total
  Format=
  GroupLabel=FieldCustom
  LabelList=Total
  Name=Total


  Total_Cashflow =
  ColumnAppearance=
  ExtensionAttribute=Total_Cashflow
  GroupLabel=FieldCustom
  Name=Sub Total


  Total_Coupon =
  ColumnAppearance=
  ExtensionAttribute=Total_coupon
  GroupLabel=FieldCustom
  Name=Nominal Coupon


  Total_EndCash =
  Description=Sum of End Cash Buy + End Cash Sell
  ExtensionAttribute=Total_EndCashDisplay
  GroupLabel=FieldCustom
  LabelList=Total_EndCash
  Name=Total End Cash


  TotalACCINT =
  Access=ReadOnly
  Description=
  ExtensionAttribute=TotalACCINT
  Format=
  GroupLabel=FieldCustom
  LabelList=Total ACCINT
  Name=Total ACCINT


  TotalAdm =
  Description=Total Adm
  ExtensionAttribute=TotalAdm
  Format=
  GroupLabel=FieldCustom
  LabelList=Total Adm
  Name=Total Adm


  TotalBorrowing =
  Description=Shows Face Value if Trade Key 3 is "IT".
  ExtensionAttribute=TotalBorrowing
  GroupLabel=FieldCustom
  LabelList=Total Borrowing
  Name=Total Borrowing


  TotalINTAMT =
  Access=ReadOnly
  Description=
  ExtensionAttribute=TotalINTAMT
  Format=
  GroupLabel=FieldCustom
  LabelList=Total INTAMT
  Name=Total INTAMT


  TotalInterest =
  Description=Face Value times Interest Rate at Trade Time divided by 100. Then the value multiplied by IDays divided by 360.
  ExtensionAttribute=TotalInterest
  Format=SixDecimalDetailedPercent
  GroupLabel=FieldCustom
  LabelList=Tot Int
  Name=Total Interest


  TotalNasabah =
  Access=ReadOnly
  Description=Nasabah Jual + Nasabah Beli
  ExtensionAttribute=TotalNasabah
  Format=
  GroupLabel=FieldCustom
  LabelList=TOTAL
  Name=Total Nasabah


  TotalPaymentReceive =
  Access=ReadOnly
  Description=
  ExtensionAttribute=TotalPayment/Receive
  Format=
  GroupLabel=FieldCustom
  LabelList=Total Payment/Receive
  Name=Total Payment/Receive


  TotalPlacement =
  Description=Shows Face Value if Trade Key 3 is "IP".
  ExtensionAttribute=TotalPlacement
  GroupLabel=FieldCustom
  LabelList=Total Placement
  Name=Total Placement


  TotalPrincipal =
  Access=ReadOnly
  Description=
  ExtensionAttribute=TotalPrincipal
  Format=
  GroupLabel=FieldCustom
  LabelList=Total Principal
  Name=Total Principal


  TotalRMB =
  Access=ReadOnly
  Description=The total amount of the transaction in RMB
  ExtensionAttribute=TotalRMB
  Format=
  GroupLabel=FieldCustom
  LabelList=Total RMB
  Name=Total RMB


  TotalSpot =
  Description=Sum of Spot Assets and Spot Liabilities
  ExtensionAttribute=TotalSpot
  GroupLabel=FieldCustom
  LabelList=GRAND TOTAL
  Name=Total Spot


  TotalTaxableIncome =
  Description=Total Taxable Income
  ExtensionAttribute=TotalTaxableIncome
  Format=
  GroupLabel=FieldCustom
  LabelList=TotalTaxableIncome
  Name=Total Taxable Income


  TotalUSD =
  Access=ReadOnly
  Description=The total amount of the transaction in USD
  ExtensionAttribute=TotalUSD
  Format=
  GroupLabel=FieldCustom
  LabelList=Total USD
  Name=Total USD


  TOTPAYAMT =
  Description=Sell Nominal from trade.
  ExtensionAttribute=TOTPAYAMT
  Format=
  GroupLabel=FieldCustom
  LabelList=TOTPAYAMT
  Name=TOTPAYAMT


  TPL =
  ColumnAppearance=Total_background
  Description=TPL
  ExtensionAttribute=TPL
  Format=
  GroupLabel=FieldCustom
  Label=TPL
  Name=TPL


  TPL_Yesterday =
  Description=Total Profit Loss Yesterday
  ExtensionAttribute=TPL_Yesterday
  Format=
  GroupLabel=FieldCustom
  Label=TPL_Yesterday
  Name=TPL_Yesterday


  TPLD_USD =
  Description=Change in the monetary value gained or lost for the position for the current report date in USD with EOD_MtM rate
  ExtensionAttribute=TPL_USD
  GroupLabel=FieldCustom
  InheritsFrom=Portfolio Total Profit and Loss Daily
  LabelList=TPLD_USD
  Name=TPLD_USD
  ParametersFixedValues=PortfolioProfitLossStartDate=Yesterday;PortfolioProfitLossStartDateCustom=1970-01-01


  TPLM_USD =
  Description=Change in the monetary value gained or lost for the position since the beginning of the current report month in USD with EOD_MtM rate.
  ExtensionAttribute=TPL_USD
  GroupLabel=FieldCustom
  InheritsFrom=Portfolio Total Profit and Loss Monthly
  LabelList=TPLM_USD
  Name=TPLM_USD
  ParametersFixedValues=PortfolioProfitLossStartDate=First Of Month;PortfolioProfitLossStartDateCustom=1970-01-01


  TPLY_USD =
  Description=Change in the monetary value gained or lost for the position since the beginning of the current report year in USD with EOD_MtM rate.
  ExtensionAttribute=TPL_USD
  GroupLabel=FieldCustom
  InheritsFrom=Portfolio Total Profit and Loss Yearly PS
  LabelList=TPLY_USD
  Name=TPLY_USD
  ParametersFixedValues=PortfolioProfitLossStartDate=First Of Year;PortfolioProfitLossStartDateCustom=1970-01-01


  TradeNumber =
  ColumnAppearance=Total_background
  Description=Trade Number in Portofolio Sheet
  ExtensionAttribute=TradeNumber
  GroupLabel=FieldCustom
  Label=TradeNumber
  Name=TradeNumber


  TradeNumberCustom =
  Access=ReadOnly
  Description=Trade Number Custom
  ExtensionAttribute=TradeNumberCustom
  Format=
  GroupLabel=FieldCustom
  LabelList=Trade Number
  Name=Trade Number


  TradeNumberInstrument =
  ExtensionAttribute=TradeNumberInstrument
  GroupLabel=FieldCustom
  Name=TradeNumberInstrument


  TradeTimeDateOnly =
  Access=ReadOnly
  Description=Trade Time Date Only
  ExtensionAttribute=TradeTimeDateOnly
  Format=
  GroupLabel=FieldCustom
  LabelList=Trade Date
  Name=Trade Date


  TradeTimeTimeOnly =
  Description=Trade Time Time Only
  ExtensionAttribute=TradeTimeTimeOnly
  Format=DateTimeNoDate
  GroupLabel=FieldCustom
  LabelList=Trade Time
  Name=Trade Time


  TradeTypeDesc =
  ColumnAppearance=Total_background
  Description=Description of Trade Type
  ExtensionAttribute=TradeTypeDesc
  GroupLabel=FieldCustom
  Label=TradeTypeDesc
  Name=TradeTypeDesc


  TranslationAmount =
  Access=ReadOnly
  Description=The difference between Prior Balance and Current Value of Balance
  ExtensionAttribute=TranslationAmount
  Format=
  GroupLabel=FieldCustom
  LabelList=Translation Amount
  Name=Translation Amount


  TRD =
  Access=ReadOnly
  Description=Trading
  ExtensionAttribute=TRD
  Format=
  GroupLabel=FieldCustom
  LabelList=TRD
  Name=TRD


  Trilyun =
  Access=ReadOnly
  Description=Trilyun
  ExtensionAttribute=Trilyun
  Format=
  GroupLabel=FieldCustom
  LabelList=TRILYUN
  Name=Trilyun


  TujuanPortfolio =
  Description=TujuanPortfolio
  ExtensionAttribute=TujuanPortfolio
  Format=
  GroupLabel=FieldCustom
  LabelList=Tujuan Portfolio
  Name=Tujuan Portfolio


  Tunggakan =
  ColumnAppearance=Total_background
  Description=Tunggakan
  ExtensionAttribute=Tunggakan
  GroupLabel=FieldCustom
  Label=Tunggakan
  Name=Tunggakan


  Type_Placement =
  ExtensionAttribute=Type_Placement
  GroupLabel=FieldCustom
  Name=Type of Placement


  Type_YC =
  Description=
  ExtensionAttribute=Type_YC
  Format=Imprecise
  GroupLabel=FieldCustom
  LabelList=Type
  Name=Type


  TypeofFunding =
  Access=ReadOnly
  Description=The type of contractual used on transaction (Internation as Offshore and Domestic as Onshore)
  ExtensionAttribute=TypeofFunding
  Format=
  GroupLabel=FieldCustom
  LabelList=Type of Funding
  Name=Type of Funding


  TypeOfSecurities =
  Access=ReadOnly
  Description=Type of Securities: Securities classification (TRD/AFS/HTM)
  ExtensionAttribute=TypeOfSecurities
  Format=
  GroupLabel=FieldCustom
  LabelList=Type of Securities
  Name=Type of Securities


  TypeUtilization =
  Access=ReadOnly
  Description=
  ExtensionAttribute=TypeUtilization
  Format=
  GroupLabel=FieldCustom
  LabelList=Type Utilization
  Name=Type Utilization


  Unamortized =
  Access=ReadOnly
  Description=The historical cost of an asset (less its total depreciation) up to that point
  ExtensionAttribute=Unamortized
  Format=
  GroupLabel=FieldCustom
  LabelList=Unamortized
  Name=Unamortized


  UnamortizedDiscPrem =
  Access=ReadOnly
  Description=Amount that havenÃÂÃÂÃÂÃÂ¢ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂt been accrued yet of interest of repo
  ExtensionAttribute=UnamortizedDiscPrem
  Format=
  GroupLabel=FieldCustom
  LabelList=Unamortized Disc/Premium
  Name=Unamortized Disc/Premium


  UnamortizedInterest =
  Access=ReadOnly
  Description=The rest of interest amount that not yet accrued
  ExtensionAttribute=UnamortizedInterest
  Format=
  GroupLabel=FieldCustom
  LabelList=Unamortized Interest
  Name=Unamortized Interest


  UnderlyingThreshold =
  ColumnAppearance=Total_background
  Description=Hardcode on threshold based on buy or sell
  ExtensionAttribute=UnderlyingThreshold
  GroupLabel=FieldCustom
  Label=Underlying Threshold
  Name=Underlying Threshold


  UnrealizedPlusIncomeToday =
  ColumnAppearance=Total_background
  Description=Unrealized Today + Income Today
  ExtensionAttribute=UnrealizedPlusIncomeToday
  Format=
  GroupLabel=FieldCustom
  Label=Unrealized + Income Today
  Name=Unrealized + Income Today


  UnrealizedPlusIncomeYesterday =
  ColumnAppearance=Total_background
  Description=Unrealized Yesterday + Income Yesterday
  ExtensionAttribute=UnrealizedPlusIncomeYesterday
  Format=
  GroupLabel=FieldCustom
  Label=Unrealized + Income Yesterday
  Name=Unrealized + Income Yesterday


  UPL_Yesterday =
  Description=Unrealized Profit Loss Yesterday
  ExtensionAttribute=UPL_Yesterday
  Format=
  GroupLabel=FieldCustom
  Label=UPL_Yesterday
  Name=UPL_Yesterday


  UpperRate =
  ColumnAppearance=Total_background
  Description=The upper rate
  ExtensionAttribute=UpperRate
  Format=
  GroupLabel=FieldCustom
  Label=Upper Rate
  Name=Upper Rate


  UserCancelOrAmendBO =
  Access=ReadOnly
  Description=Name of the user
  ExtensionAttribute=UserCancelOrAmendBO
  Format=
  GroupLabel=FieldCustom
  LabelList=User Cancel/Amend (BO)
  Name=User Cancel/Amend (BO)


  UserCancelOrAmendFO =
  Access=ReadOnly
  Description=Name of the user
  ExtensionAttribute=UserCancelOrAmendFO
  Format=
  GroupLabel=FieldCustom
  LabelList=User Cancel/Amend (FO)
  Name=User Cancel/Amend (FO)


  Utilisasi =
  ColumnAppearance=Total_background
  Description=The utilization of issuer limit
  ExtensionAttribute=Utilisasi
  GroupLabel=FieldCustom
  Label=Utilisasi
  Name=Utilisasi


  UtilisasiCreditEquivalent =
  Access=ReadOnly
  Description=The utilization of credit equivalent limit
  ExtensionAttribute=UtilisasiCreditEquivalent
  Format=
  GroupLabel=FieldCustom
  LabelList=Utilisasi Credit Equivalent
  Name=Utilisasi Credit Equivalent


  UtilizationBond =
  ColumnAppearance=Total_background
  Description=Utilization for bond cut loss limit
  ExtensionAttribute=UtilizationBond
  GroupLabel=FieldCustom
  Label=Utilization Bond
  Name=Utilization Bond


  valutaDasarJnsSukuBungaAcuan =
  Access=ReadOnly
  Description=-
  ExtensionAttribute=valutaDasarJnsSukuBungaAcuan
  Format=
  GroupLabel=FieldCustom
  LabelList=valutaDasarJnsSukuBungaAcuan
  Name=valutaDasarJnsSukuBungaAcuan


  valutaDasarPremiumSukuBungaAcuan =
  Access=ReadOnly
  Description=-
  ExtensionAttribute=valutaDasarPremiumSukuBungaAcuan
  Format=
  GroupLabel=FieldCustom
  LabelList=valutaDasarPremiumSukuBungaAcuan
  Name=valutaDasarPremiumSukuBungaAcuan


  valutaDasarSukuBungaTetap =
  Access=ReadOnly
  Description=-
  ExtensionAttribute=valutaDasarSukuBungaTetap
  Format=
  GroupLabel=FieldCustom
  LabelList=valutaDasarSukuBungaTetap
  Name=valutaDasarSukuBungaTetap


  valutaDasarTenorSukuBungaAcuan =
  Access=ReadOnly
  Description=-
  ExtensionAttribute=valutaDasarTenorSukuBungaAcuan
  Format=
  GroupLabel=FieldCustom
  LabelList=valutaDasarTenorSukuBungaAcuan
  Name=valutaDasarTenorSukuBungaAcuan


  valutaDokumenUnderlying =
  Access=ReadOnly
  Description=-
  ExtensionAttribute=valutaDokumenUnderlying
  Format=
  GroupLabel=FieldCustom
  LabelList=valutaDokumenUnderlying
  Name=valutaDokumenUnderlying


  variabelMendasari =
  Access=ReadOnly
  Description=-
  ExtensionAttribute=variabelMendasari
  Format=
  GroupLabel=FieldCustom
  LabelList=variabelMendasari
  Name=variabelMendasari


  VarThresholdValue =
  Access=ReadOnly
  Description=Var Threshold Value
  ExtensionAttribute=VarThresholdValue
  Format=
  GroupLabel=FieldCustom
  LabelList=VarThresholdValue
  Name=VarThresholdValue


  VarUtilizationPercentage =
  Description=Standard Var Utilization Percentage
  ExtensionAttribute=VarUtilizationPercentage
  Format=
  GroupLabel=FieldCustom
  LabelList=VarUtilizationPercentage
  Name=VarUtilizationPercentage


  VERIND =
  Description=Verification Indicator. Shows 1 if BO Confirmed, shows 0 if not BO Confirmed.
  ExtensionAttribute=VERIND
  Format=
  GroupLabel=FieldCustom
  LabelList=VERIND
  Name=VERIND


  Volume Yesterday =
  ColumnAppearance=Total_background
  Description=The amount of all transaction where sale date minus buys date are less than 186 days
  ExtensionAttribute=VolumeYesterday
  GroupLabel=FieldCustom
  Label=Volume Yesterday
  Name=Volume Yesterday


  VolumeDaily =
  Description=Volume in a Day (USD)
  ExtensionAttribute=VolumeDaily
  Format=
  GroupLabel=Volume in USD
  LabelList=Volume Daily
  Name=VolumeDaily


  VolumeMonthly =
  Description=Volume in a Month (USD)
  ExtensionAttribute=VolumeMonthly
  Format=
  GroupLabel=Volume in USD
  LabelList=Volume Monthly
  Name=VolumeMonthly


  VolumePenjualan =
  Access=ReadOnly
  Description=The amount of all transaction where sale date minus buys date are less than 186 days
  ExtensionAttribute=VolumePenjualan
  Format=
  GroupLabel=FieldCustom
  LabelList=Volume Penjualan
  Name=Volume Penjualan


  VolumeYearly =
  Description=Volume in a Year (USD)
  ExtensionAttribute=VolumeYearly
  Format=
  GroupLabel=Volume in USD
  LabelList=Volume Yearly
  Name=VolumeYearly


  WeekNumber =
  ColumnAppearance=Total_background
  Description=Week in number.
  ExtensionAttribute=WeekNumber
  Format=
  GroupLabel=FieldCustom
  Label=Week Number
  Name=Week Number


  WHT =
  Description=Witholding Tax
  ExtensionAttribute=WHT
  Format=
  GroupLabel=FieldCustom
  LabelList=WHT
  Name=WHT


  WHTText =
  Description=Witholding Tax Text
  ExtensionAttribute=WHTText
  Format=
  GroupLabel=FieldCustom
  LabelList=WHT Text
  Name=WHT Text


  WithinNOPLimits =
  Access=ReadOnly
  Description=
  ExtensionAttribute=WithinNOPLimits
  Format=
  GroupLabel=FieldCustom
  LabelList=Within NOP Limits
  Name=Within NOP Limits


  WITHORIGCOSTAMT =
  Description=Premium plus Witholding Tax
  ExtensionAttribute=WITHORIGCOSTAMT
  Format=
  GroupLabel=FieldCustom
  LabelList=WITHORIGCOSTAMT
  Name=WITHORIGCOSTAMT


  Year =
  ColumnAppearance=Total_background
  Description=Year
  ExtensionAttribute=Year
  Format=
  GroupLabel=FieldCustom
  Label=Year
  Name=Year


  YearlyLossLimitUse =
  Description=theoretical p/l yearly * close rate IDR
  ExtensionAttribute=YearlyLossLimitUse
  Format=
  GroupLabel=FieldCustom
  LabelList=YearlyLossLimitUse
  Name=Yearly Loss Limit Use


  YearlyLossLimitUse2 =
  Description=Default 500000000.
  ExtensionAttribute=YearlyLossLimitUse2
  Format=
  GroupLabel=FieldCustom
  LabelList=Yearly Loss Limit Use
  Name=Yearly Loss Limit Use 2


  YearNow =
  Access=ReadOnly
  Description=
  ExtensionAttribute=YearNow
  Format=
  GroupLabel=FieldCustom
  LabelList=YearNow
  Name=YearNow


  YesterdayPrice =
  Access=ReadOnly
  Description=
  ExtensionAttribute=YesterdayPrice
  Format=
  GroupLabel=FieldCustom
  LabelList=Yesterday Price
  Name=Yesterday Price


  YieldChange =
  Access=ReadOnly
  Description=
  ExtensionAttribute=YieldChange
  Format=
  GroupLabel=FieldCustom
  LabelList=Yield Change
  Name=Yield Change


  YieldYST =
  Access=ReadOnly
  Description=Yesterday yield of transaction, if provided from the securities info
  ExtensionAttribute=YieldYST
  Format=
  GroupLabel=FieldCustom
  LabelList=YieldYST
  Name=YieldYST


  YourAccount =
  Access=ReadOnly
  Description=Your Account (cpty)
  ExtensionAttribute=YourAccount
  Format=
  GroupLabel=FieldCustom
  LabelList=Your Account
  Name=Your Account


  YTD =
  Access=ReadOnly
  ColumnAppearance=YTD
  Description=Get YTD Value from Hierarchy
  ExtensionAttribute=YTD
  GroupLabel=FieldCustom
  Name=YTD


  YTDAchievement =
  Access=ReadOnly
  Description=YTD Target - PnL Yearly (in %).
  ExtensionAttribute=YTDAchievement
  Format=
  GroupLabel=FieldCustom
  LabelList=YTDAchievement
  Name=YTDAchievement


}

decls[FCustomMethod] {
}

clx FTrade [FCustomMethod] {
  AssetOrLiabilityGrouper =
  Definition=AssetOrLiabilityGrouper:string read
  Function=CustomizedGrouper.AssetOrLiability1


  BranchGrouper =
  Definition=BranchGrouper:string read
  Function=Customized_Grouper_P2.Branch_Grouper


  BuySellGrouper =
  Definition=BuySellGrouper:string read
  Function=CustomizedGrouper.tradeGrouper


  InvtypeGrouper =
  Definition=InvtypeGrouper:string read
  Function=CustomizedGrouper.invtype


  MonthDealDoneGrouper =
  Definition=MonthDealDoneGrouper:string read
  Function=CustomizedGrouper.monthDealDone


  MonthGrouper =
  Definition=MonthGrouper:string read
  Function=CustomizedGrouper.month


  OptKey3_4_Grouper =
  Definition=OptKey3_4_Grouper:string read
  Function=Customized_Grouper_P2.OptKey3_4_Grouper


  PayDateGrouper =
  Definition=PayDateGrouper:string read
  Function=Customized_Grouper_P2.PayDateGrouper


  YearDealDoneGrouper =
  Definition=YearDealDoneGrouper:string read
  Function=CustomizedGrouper.yearDealDone


}

decls[FDateTimeFormatter] {
}

clx FObject [FDateTimeFormatter] {
  DateTimeNoDate =
  DateType=
  Format=%H:%M:%S
  Option=
  ParsePeriodAs=
  ShowFractionOfSeconds=


}

decls[FDocString] {
  "FXSLTemplate:NFTABTemplate" ( "aef.public" ) "";
}

clx FExtensionDefinition [FDocString] {
  FXSLTemplate:NFTABTemplate
Secondary report template, tab separated.
...

}

decls[FExpressionTransform] {
}

clx FInstrumentAndTrades [FExpressionTransform] {
  SETTBASETERMS = ; =
  [ICT_CustomReports_P2]FTradeRow:SETTBASETERMS=;


}

decls[FExtensionAttribute] {
  "AcquisitionIDR" ( "sheet columns.tradesheet" ) "";
  "AmountAccumulativePerMonth" ( "sheet columns.tradesheet" ) "";
  "BeginningBalance" ( "sheet columns.tradesheet" ) "";
  "BookValueDeprec" ( "sheet columns.tradesheet" ) "";
  "BUC" ( "sheet columns.tradesheet" ) "";
  "CashflowFA" ( "sheet columns.tradesheet" ) "";
  "CashflowFarAmount" ( "sheet columns.moneyflowsheet" ) "";
  "DayToExpired" ( "sheet columns.journalsheet" ) "";
  "DeltaCheck" ( "sheet columns.tradesheet" ) "";
  "DirAmount1" ( "sheet columns.tradesheet" ) "";
  "DirAmount2" ( "sheet columns.tradesheet" ) "";
  "EndAccrualFA" ( "sheet columns.tradesheet" ) "";
  "KodeKondisi" ( "sheet columns.settlementsheet" ) "";
  "LBU" ( "sheet columns.journalsheet" ) "";
  "Listing" ( "sheet columns.settlementsheet" ) "";
  "MonthToExpired" ( "sheet columns.journalsheet" ) "";
  "NetAmount" ( "sheet columns.tradesheet" ) "";
  "NominalSumUp" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "NomorIdentifikasi" ( "sheet columns.settlementsheet" ) "";
  "OnShoreShortTerm" ( "sheet columns.tradesheet" ) "";
  "PercentageMO01RPL" ( "sheet columns.tradesheet" ) "";
  "RemarkOutstanding" ( "sheet columns.journalsheet" ) "";
  "SECID" ( "sheet columns.journalsheet" ) "";
  "TenorTahun" ( "sheet columns.tradesheet" ) "";
  "TglKondisi" ( "sheet columns.settlementsheet" ) "";
  "WHTText" ( "sheet columns.journalsheet" ) "";
}

clx FAccount [FExtensionAttribute] {
  Depository1 = object.Depository;
  Depository2 = object.Depository2;
}

clx FAlert [FExtensionAttribute] {
  alertAvailableLimit = py("Total_Trade", context).count_available_limit(object, ["Alert Threshold Value", "Current Value"]);
}

clx FAppliedRule [FExtensionAttribute] {
  StatusExpiry = dateDifference(object.EndDate, dateToday);
}

clx FASQLQueryFolder [FExtensionAttribute] {
  Total_coupon = py("Total_Trade", context).total_coupon(object.Query);
}

clx FBreach [FExtensionAttribute] {
  breachValue = object.WatermarkValue;
  DayChangeCounterparty = scenarioaxis(breachValue, <["valuationBaseDateTime"], , , dateToday() - 1>) - breachValue;
  DayChangeIssuer = scenarioaxis(breachValue, <["valuationBaseDateTime"], , , dateToday() - 1>) - breachValue;
}

clx FColumnAppearance [FExtensionAttribute] {
  StatusBondHolding = StatusBondHolding;
}

clx FComplianceRule [FExtensionAttribute] {
  IssuerPercentUtilization = ruleValue;
  LimitExpiry = py("Total_Trade", context).limitexpiry(object.AppliedRules);
  StatusExpiry = dateDifference(LimitExpiry, dateToday);
  thresholdValue = switch(object.Thresholds.Size == 1, 
  true->object.Thresholds.First.Value, 
  false->nil);
}

clx FGridCellInfo [FExtensionAttribute] {
  ColumnValue = object.Value;
  Difference = object.Trade.Premium - tradeFXAttrFarSellAmount;
}

clx FInstrument [FExtensionAttribute] {
  Tenor = Object.EndDate;
  TenorTahun = Object.EndDate;
}

clx FInstrumentAndTrades [FExtensionAttribute] {
  ACCINT = ;
  AccountBranch = 60700;
  AccountID = ;
  ACCTTYPE = ;
  AccumulativeOrPerTransaction = ;
  AcquisitionIDR = 1;
  AFS = ;
  AgreedSellingPrice = ;
  AIP = ;
  AllInRate = ;
  AllowanceForLosses = ;
  Amortized010203 = ;
  Amortized2004 = ;
  AmortizedDiscPrem = ;
  AmountAccumulativePerMonth = ;
  AmountClosing = ;
  AmountClosingYesterday = ;
  AmountToFund = ;
  ApprovalSystem = ;
  ARGNO = ;
  ASSETID = ;
  ASSIGNEDQTY = ;
  AveragePrice = ;
  Balance = ;
  BaseCurrCR = ;
  BaseCurrDR = ;
  BeginningBalance = ;
  BEIND = ;
  Beneficiary = ;
  BidPriceBGN = ;
  BidPriceBVAL = ;
  BidPriceEXCH = ;
  BIS4 = ;
  blank = ;
  BondPriceBuy = sumOf(children :* "BondPriceBuy");
  BondPriceSell = sumOf(children :* "BondPriceSell");
  BookFilter = ;
  BookValueIDR = py("Total_Trade", context).calculate_bookvalueidr(object.Trades);
  BorrowerCode = ;
  BorrowerName = ;
  BUC = 1;
  BuyAmountCustom = ;
  BuyerOrSeller = ;
  CancelOrAmendDate = ;
  CAT = ;
  CCYRate = ;
  CFCITZ = ;
  CFCOUN = ;
  CFRESD = ;
  ChargersDelay = ;
  Checker = ;
  CIFBICode = 795;
  CIFBranch = 60700;
  ClassificationofSecurities = ;
  ClosingBalance = ;
  Code = ;
  CODE = ;
  CodeDesc = ;
  Collateral = ;
  CollateralAmount = ;
  CollateralCurrency = ;
  CollateralDueDate = ;
  COMIDB = ;
  COMIDC = ;
  COMMPROCAMT = ;
  Conclusion = ;
  ContractValNetAgree = ;
  CONVINTAMT = ;
  CONVINTBAMT = ;
  CorrespondentBank1 = ;
  CorrespondentBank2 = ;
  COSTAMT = ;
  CounterpartyCountryIND = ;
  CountryLimit = ;
  CPMainCcy = ;
  CPMoneyCcy = ;
  CreateDate = ;
  CreditAmount = ;
  CrEquivalent1DayChange = ;
  CrEquivalentLimit = ;
  CrEquivalentPercentageUtilization = ;
  CrEquivalentUtilization = ;
  CS01 = ;
  CurrAgainstSGD = ;
  CurrAgainstUSD = ;
  CurrencyCR = ;
  CurrencyDR = ;
  CurrencyUpdateDate = ;
  CustomerCategory = ;
  CustomerName = ;
  DateNow = ;
  DateRange = ;
  DayChange = scenarioaxis(aggregateRiskPosition, <["timeDistributionBucket"], , , timeBucketsSetExternally>) - riskPositionDisplay;
  DayChangeConvexity = ;
  DayChangeCounterparty = riskPositionDisplay - scenarioaxis(riskPositionDisplay, <["valuationBaseDateTime"], , , dateToday() + 1>);
  DayChangeCountry = createAggregateSubResults(array(variant), cemLimitSubResultsInput) :* "counterpartyCEMDisplay" - scenarioaxis(createAggregateSubResults(array(variant), cemLimitSubResultsInput) :* "counterpartyCEMDisplay", <["valuationBaseDateTime"], , , dateToday() + 1>);
  DayChangeCreditVaR = ;
  DayChangeCS01 = ;
  DayChangeFXVaR = ;
  DayChangeHVaR = py("Total_Trade", context).daychangehvar(object);
  DayChangeIncrementalVaR = ;
  DayChangeIRVaR = ;
  DayChangeIssuer = creditPositionExposure - scenarioaxis(creditPositionExposure, <["valuationBaseDateTime"], , , dateToday() + 1>);
  DayChangeMarginalVaR = ;
  DayChangeShortfallVaR = ;
  DayChangeTrading = scenarioaxis(aggregateRiskPosition, <["timeDistributionBucket"], , , timeBucketsSetExternally>) - riskPositionDisplay;
  DayToExpired = ;
  DCIND = ;
  DebitAmount = ;
  Delta_ExchangeRate = ;
  DeltaCheck = ;
  DeltaThresholdValue = ;
  DeltaUtilizationPercentage = ;
  DENOM = ;
  Dept = ;
  DerivativesPayables = ;
  DerivativesReceivables = ;
  DescriptionUnderlying = ;
  Diff1 = ;
  Diff2 = ;
  Difference = 1;
  DiffRate = ;
  DiffRate100 = ;
  DirAmount1 = ;
  DirAmount2 = ;
  DRCRIND = ;
  eFx = ;
  EMAS = ;
  EndValue = ;
  EquivalentAmountIDR = object.trade.nominal * object.trade.instrument.FxRate;
  EquivalentMarketIDR = marketPeriodValue * object.trade.instrument.FxRate;
  EqvUSD = sumOf(children :* "EqvUSD");
  ExchangeRateNTCS = ;
  ExtractDate = ;
  ExtractFlag = ;
  FaceAmount = py("Total_Trade", context).remove_bg(object.Trade.FaceValue);
  Facility = object.Instrument.Type;
  FarAmount = py("Total_Trade", context).remove_bg(object.Trade.Nominal);
  FarAmount1 = py("Total_Trade", context).remove_FarAmount1(object.Trade.FarAmount1);
  FarAmount2 = py("Total_Trade", context).remove_FarAmount2(object.Trade.FarAmount2);
  FBI = "Hello Luci";
  FeeIDR = 1;
  FITCHDataBloomberg = ;
  FITCHDataNTCS = ;
  FITCHHasilMatch = ;
  FITCHINDODataBloomberg = ;
  FITCHINDODataNTCS = ;
  FITCHINDOHasilMatch = ;
  FLAG = ;
  ForwardRate = ;
  FrekuensiPenjualan = ;
  FrekuensiPenjualan_Yesterday = ;
  Frequency = object.Trades.Size;
  FTotal = py("Report_Python", context).remove_bg(object.Trade.Premium);
  FTotal_Premium = py("Total_Trade", context).remove_bg(object.Trade.Premium);
  GainOrLoss = ;
  GMRAIdentification = ;
  GrandTotal = ;
  GroupID = ;
  Haircut = ;
  HedgingFairValue = ;
  HedgingNotAmt = ;
  holdingPeriod = ;
  HTM = ;
  IBPA = ;
  ID = ;
  Indicator1 = ;
  InOut = ;
  InputDate = ;
  InputTime = ;
  Ins_Bond = ;
  Ins_Commodity = ;
  Ins_Curr = ;
  Ins_CurrSwap = ;
  Ins_Deposit = ;
  Ins_MM_IP = ;
  Ins_MM_IT = ;
  Ins_Option = ;
  Ins_Repo = ;
  Ins_Swap = ;
  INTCCY = ;
  InterestAccrued = ;
  InterestAmount = ;
  InterestIncome = ;
  InterestPayment = ;
  InterestProceed = ;
  InterestReceived = ;
  IntradayLimitAvailable = ;
  IntradayLimitGiven = ;
  IR_1 = "Ir";
  IssuerLimit = ;
  IssuerPercentUtilization = ;
  IssuerUtilization = ;
  JumlahHariTunggakan = ;
  Keterangan = ;
  KETERANGAN = ;
  KodeKondisi = ;
  KodeSebabMacet = ;
  Kolektibilitas = ;
  Kurs = ;
  KursBeli = ;
  KursJual = ;
  KursTengah = ;
  LastCouponDate = ;
  LastFixingRate = ;
  LastPaymentPeriod = py("Report_Python", context).get_start_date_cashflow(object.Trade);
  Limit = 500000000;
  Limit_FX = ;
  Limit_IR = ;
  LimitHolding = shunt(holdingPeriodGrouperReference, 
  nil->nil, 
  default->dateToday - holdingPeriodGrouperReference);
  LimitMO01 = ;
  LimitMO10 = 1;
  Listing = ;
  LowerRate = ;
  MarketYield = ;
  MarkToMarket = ;
  MarkToModel = ;
  MATPROCAMT = ;
  MoneyAmount = ;
  Month = 1;
  MonthNow = ;
  MonthNumber = 1;
  MonthToExpired = ;
  MOODYSDataBloomberg = ;
  MOODYSDataNTCS = ;
  MOODYSHasilMatch = ;
  MTD = ;
  MTM = ;
  NasabahBeli = sumOf(children :* "NasabahBeli");
  NasabahJual = sumOf(children :* "NasabahJual");
  NAV = ;
  NearAmount = py("Total_Trade", context).remove_bg(object.Trade.Premium);
  NearAmount1 = py("Total_Trade", context).remove_NearAmount1(object.Trade.Nominal);
  NearAmount2 = py("Total_Trade", context).remove_NearAmount2(object.Trade.NearAmount2);
  NetAmount = object.trade.EquivalentAmountIDR * object.trade.instrument.FxRate;
  NextCouponDate = ;
  NextPaymentPeriod = py("Report_Python", contex).get_end_date_cashflow(object.Trade);
  NII = ;
  NilaiBeliKembali = ;
  NilaiPasar = ;
  NilaiPasar2 = ;
  NilaiPerolehan = ;
  NilaiPerolehan2 = ;
  nisbahBagiHasil = ;
  NominalAbsolute = select(object.GrouperOnLevel.DisplayName, 
  "Currency"->sumOf(children :* "NominalAbsolute"), 
  "Trade Currency"->sumOf(children :* "NominalAbsolute"), 
  "Trade: Instrument.RecLeg.Currency"->sumOf(children :* "NominalAbsolute"));
  NominalCoupon = ;
  NominalNOP_USD = ;
  NominativeList = ;
  NomorIdentifikasi = 1;
  NOP_USD = ;
  NOPinUSD = sumOf(children :* "NOPinUSD");
  NOPOvernight = ;
  NOPThresholdValue = ;
  NOPUtilizationPercentage = ;
  Notional1DayChange = ;
  NotionalLimit = ;
  NotionalPercentageUtilization = ;
  NotionalUtilization = ;
  OBJID = ;
  OneDayChange = ;
  OneDayChange_FX = ;
  OneDayChange_IR = ;
  OpeningBalance = ;
  ORD = ;
  OthersFairValue = ;
  OthersNotAmt = ;
  OutstandingEqvUSD = ;
  PayDate = ;
  PaymentSystem = ;
  PayOrReceive = ;
  PEFINDODataBloomberg = ;
  PEFINDODataNTCS = ;
  PEFINDOHasilMatch = ;
  Pemeringkat = ;
  Percentage_FX = ;
  Percentage_Yesterday = ;
  PercentageHolding = ;
  PercentageMO01RPL = ;
  PercentageMO01RPL_Yesterday = ;
  PercentageMO01UPL = ;
  PercentageMO01UPL_Yesterday = ;
  PercentageVolumeYesterday = ;
  PercentUtilization = ;
  PercentUtilizationTrading = ;
  Peringkat = ;
  Period = 1;
  Period1 = "1W";
  Period2 = "1M";
  Period3 = "3M";
  Period4 = "6M";
  Period5 = "1Y";
  PhysicalForeign = ;
  PositionEOD = py("Total_Trade", context).positionEOD;
  PrevEffDate = 1;
  PrevPrevEffDate = 1;
  PrevPrevPrice = 1;
  PrevPrice = 1;
  PrevYearPrice = ;
  PriceYST = ;
  ProceedAmount = ;
  ProcessFlag = ;
  Product = ;
  PV01ThresholdValue = ;
  PV01UtilizationPercentage = ;
  RATE_8 = ;
  RatesOPICS = ;
  Reff = ;
  REM = ;
  RemarkOutstanding = ;
  RemarkSellBuy = 1;
  RevalRate = ;
  RevaluationAmount = ;
  RiskWeight = ;
  SACCR_RWA = ;
  SECID = ;
  SECIDPrice = ;
  SecuritiesRating = ;
  SecuritiesRatingInstituition = ;
  SellAmountCustom = ;
  SEQNUM = ;
  SETTAMT = ;
  SETTAVGCOST = ;
  SETTBASEAMT = ;
  SETTBASETERMS = 
# <ERROR> unrecognized character ';' (at pos 0)
; =
  [ICT_CustomReports_P2]FTradeRow:SETTBASETERMS=;
  SETTCCY = ;
  SNPDataBloomberg = ;
  SNPDataNTCS = ;
  SNPHasilMatch = ;
  SourceData = ;
  SRC_STM_ID = ;
  StandardYearlyLossThresholdValue = ;
  StandardYearlyLossUtilizationPercentage = ;
  StartValue = ;
  StatusAntasena = ;
  StatusBondCutLoss = ;
  StatusBondHolding = ;
  StatusExpiry = ;
  StatusLimit = ;
  StatusLimit_FX = ;
  StatusLimit_IR = ;
  StatusLimitExpiry = ;
  StatusLimitTrading = ;
  StatusMatchUnmatch = ;
  StatusNTCS = ;
  StatusRegistration = ;
  StatusUPL = ;
  STDEV = ;
  Structured = ;
  SUBLMTNAME = ;
  Tenor = Object.Trade.EndDate;
  TenorTahun = Object.Trade.EndDate;
  TermofPeriod = ;
  TERMS = ;
  TglKondisi = ;
  TglMacet = ;
  tingkatIndikasiImbalan = ;
  ToleranceLimit = ;
  ToleranceLimit2 = ;
  Total = ;
  Total_Cashflow = ;
  Total_coupon = ;
  TotalACCINT = ;
  TotalINTAMT = ;
  TotalNasabah = sumOf(children :* "TotalNasabah");
  TotalPaymentReceive = ;
  TotalPrincipal = ;
  TotalRMB = float(convertProjectedPaymentsToInstrumentAndQuotation(projectedCashInventoryFlatNonNormalized, displayInstrumentRatesForProjectedCashInventory, displayInstrumentsForVectorColumn = "RMB", instrumentsForVectorColumn = "RMB", selectedQuotation = "Per Unit")) + (float(fxDisplayToBase) * (float(convertProjectedPaymentsToInstrumentAndQuotation(projectedCashInventoryFlatNonNormalized, displayInstrumentRatesForProjectedCashInventory, displayInstrumentsForVectorColumn = "SGD", instrumentsForVectorColumn = "SGD", selectedQuotation = "Per Unit")) + float(convertProjectedPaymentsToInstrumentAndQuotation(projectedCashInventoryFlatNonNormalized, displayInstrumentRatesForProjectedCashInventory, displayInstrumentsForVectorColumn = "EUR", instrumentsForVectorColumn = "EUR", selectedQuotation = "Per Unit")) + float(convertProjectedPaymentsToInstrumentAndQuotation(projectedCashInventoryFlatNonNormalized, displayInstrumentRatesForProjectedCashInventory, displayInstrumentsForVectorColumn = "IDR", instrumentsForVectorColumn = "IDR", selectedQuotation = "Per Unit"))));
  TotalUSD = float(convertProjectedPaymentsToInstrumentAndQuotation(projectedCashInventoryFlatNonNormalized, displayInstrumentRatesForProjectedCashInventory, displayInstrumentsForVectorColumn = "USD", instrumentsForVectorColumn = "USD", selectedQuotation = "Per Unit")) + (float(fxDisplayToBase) * (float(convertProjectedPaymentsToInstrumentAndQuotation(projectedCashInventoryFlatNonNormalized, displayInstrumentRatesForProjectedCashInventory, displayInstrumentsForVectorColumn = "SGD", instrumentsForVectorColumn = "SGD", selectedQuotation = "Per Unit")) + float(convertProjectedPaymentsToInstrumentAndQuotation(projectedCashInventoryFlatNonNormalized, displayInstrumentRatesForProjectedCashInventory, displayInstrumentsForVectorColumn = "EUR", instrumentsForVectorColumn = "EUR", selectedQuotation = "Per Unit")) + float(convertProjectedPaymentsToInstrumentAndQuotation(projectedCashInventoryFlatNonNormalized, displayInstrumentRatesForProjectedCashInventory, displayInstrumentsForVectorColumn = "IDR", instrumentsForVectorColumn = "IDR", selectedQuotation = "Per Unit"))));
  TPL = ;
  TPL_USD = select(string(displayCurrency), 
  "USD"->tPL.Value.Number, 
  default->tPL.Value.Number * py("Python_Price_Calc", context).UpdatedUSDEoDPrice(string(displayCurrency)));
  TradeNumberInstrument = ;
  TradeTimeDateOnly = ;
  TranslationAmount = ;
  TRD = ;
  Trilyun = ;
  Type_Placement = ;
  Type_YC = YC;
  TypeofFunding = "Onshore/OffShore";
  TypeOfSecurities = ;
  TypeUtilization = ;
  Unamortized = ;
  UnamortizedDiscPrem = ;
  UnamortizedInterest = ;
  UnderlyingThreshold = ;
  UnrealizedPlusIncomeToday = ;
  UnrealizedPlusIncomeYesterday = ;
  UpperRate = ;
  UserCancelOrAmendBO = ;
  UserCancelOrAmendFO = ;
  Utilisasi = ;
  UtilisasiCreditEquivalent = ;
  UtilizationBond = ;
  VarThresholdValue = ;
  VarUtilizationPercentage = ;
  VolumePenjualan = ;
  VolumeYesterday = ;
  WeekNumber = ;
  WithinNOPLimits = ;
  Year = 1;
  YearNow = ;
  YesterdayPrice = ;
  YieldChange = ;
  YieldYST = ;
  YTD = ;
}

clx FJournal [FExtensionAttribute] {
  AccruedInterestValue = select(object.Trade, 
  default->py("Report_Python", context).trd_accruedinterest(object.Trade).Number, 
  nil->nil);
  AmountClosing = py("Report_Python", context).calculate_amount_closing(object.Trade, true);
  AmountClosingYesterday = py("Report_Python", context).calculate_amount_closing(object.Trade, true);
  ARGNO = select(journalDebitOrCredit, 
  "Debit"->"1", 
  "Credit"->"2");
  BMRISell = select(journalAmount > 0, 
  true->nil, 
  default->journalAmount);
  BuyAmountCustom = ;
  BuyCurrency_Custom = py("Report_Python_P2", context).buycurrency_custom(object.Trade);
  BuySellJournal = select(journalAmount > 0, 
  true->"Buy", 
  default->"Sell");
  CODE = select(journalDebitOrCredit, 
  "Debit"->"3350", 
  "Credit"->"3335");
  CreditAmount = select(journalDebitOrCredit, 
  "Credit"->journalAmount);
  CurrencyCR = ;
  DayToExpired = int(dateDifference(object.Instrument.EndDate, journalValueDate) - 30 * MonthToExpired);
  DCIND = select(journalDebitOrCredit, 
  "Debit"->"D", 
  "Credit"->"C");
  DebitAmount = select(journalDebitOrCredit, 
  "Debit"->journalAmount);
  Descr = "BUNGA PINJAMAN LAINNYA DITM LAINNYA";
  dictPaymentTypeText = createDictionary(paymentTypeArray, paymentTextArray);
  DRCRIND = select(journalDebitOrCredit, 
  "Debit"->"DR", 
  "Credit"->"CR");
  EquivalentAmountIDR = journalAmount * object.Trade.Price;
  FLAG = select(EquivalentAmountIDR > 1000000000000.0, 
  true->"Y", 
  false->"NOK");
  GrandTotal = ;
  InOut = select(journalDebitOrCredit, 
  "Debit"->"IN", 
  "Credit"->"OUT");
  KETERANGAN = "Journal AIP";
  KursBeli = ;
  KursJual = ;
  LBU = ;
  MonthToExpired = int(dateDifference(object.Instrument.EndDate, journalValueDate) / 30);
  Movement = py("Report_Python", context).calculate_amount_movement(object.Trade);
  NominativeList = 1234;
  NostroMirrorACName = select(object.Counterparty.Accounts.Size > 0, 
  true->select(object.Counterparty.Accounts.First.Depository <> "", 
    true->(object.Counterparty.Accounts) :* "Depository1"), 
  false->nil);
  NostroMirrorACNumber = select(object.Counterparty.Accounts.Size > 0, 
  true->select(object.Counterparty.Accounts.First.Depository2 <> "", 
    true->(object.Counterparty.Accounts) :* "Depository2"), 
  false->nil);
  NPV_Journal = py("Report_Python_P2", context).npv_journal(object.Trade);
  Payment = object.Trade.Payments;
  paymentTextArray = Payment :* "paymentText";
  paymentTypeArray = string(Payment :* "paymentType");
  PayOrReceive = select(journalDebitOrCredit, 
  "Debit"->"RECEIVE", 
  "Credit"->"PAY");
  PositionEOD = py("Total_Trade", context).positionEOD;
  PostingBySystem = "System";
  Reff = py("Total_Trade", context).reffjournal(object.Trade, ["Trade Number", "Trade Instrument", "Trade Optional Key 3", "Trade Optional Key 4"]);
  SellAmountCustom = ;
  SellCurrency_Custom = py("Report_Python_P2", context).sellcurrency_custom(object.Trade);
  TaxDifferenceJournal = select(object.Trade.Tax.IsNumber, 
  true->abs(object.JournalTrade.Tax - object.Trade.Tax), 
  default->abs(object.JournalTrade.Tax - 0));
  Tenor = int(object.Instrument.EndDate - journalValueDate);
  trade = object.Trade;
  Trilyun = int(EquivalentAmountIDR / 1000000000000.0);
  WHT = trade:WHT;
  WHTText = dictPaymentTypeText.At("WHT");
}

clx FLeg [FExtensionAttribute] {
  fixedRateCustom = object.FixedRate;
}

clx FMoneyFlowAndTrades [FExtensionAttribute] {
  InterestProceed = InterestProceed = projectedMoneyFlow;
  PayDayCustom = payDate;
}

clx FMultiInstrumentAndTrades [FExtensionAttribute] {
  AccountID = ;
  AccumulativeOrPerTransaction = ;
  AcquisitionIDR = 1;
  AIP = ;
  AL = py("Total_Trade", context).totalMultiInstrumentAndTradesClass(object.Trades);
  AmountAccumulativePerMonth = ;
  AveragePrice = averageOf(trades :* "price");
  Balance = ;
  BidPriceBGN = ;
  BidPriceBVAL = ;
  BidPriceEXCH = ;
  BondPriceBuy = sumOf(children :* "BondPriceBuy");
  BondPriceSell = sumOf(children :* "BondPriceSell");
  BookValueIDR = py("Total_Trade", context).calculate_bookvalueidr(object.Trades);
  BUC = 1;
  BuyAmountCustom = sumOf((object.Children) :* "BuyAmountCustom");
  CCS = py("Report_Python", context).TotalMMInterbankLIQ19(object.Trades, "ALL", ["CCS"]);
  ClassificationofSecurities = ;
  Coupon_SB_Dimiliki = py("Report_Python", context).TotalMMInterbankLIQ19(object.Trades, "ALL", ["CBIDR", "CBUSD", "CBVALAS", "UST", "BILLS", "ROI", "ORI", "SR", "SBBI", "SBK", "SPN", "SPNS", "FR", "VR", "INDOIS", "PBS", "NCD"]);
  CPMainCcy = ;
  CPMoneyCcy = ;
  CrEquivalent1DayChange = ;
  CrEquivalentLimit = ;
  CrEquivalentPercentageUtilization = ;
  CrEquivalentUtilization = ;
  CS01 = ;
  DayChangeConvexity = ;
  DayChangeCounterparty = riskPositionDisplay - scenarioaxis(riskPositionDisplay, <["valuationBaseDateTime"], , , dateToday() + 1>);
  DayChangeCountry = createAggregateSubResults(array(variant), cemLimitSubResultsInput) :* "counterpartyCEMDisplay" - scenarioaxis(createAggregateSubResults(array(variant), cemLimitSubResultsInput) :* "counterpartyCEMDisplay", <["valuationBaseDateTime"], , , dateToday() + 1>);
  DayChangeCS01 = ;
  DayChangeDelta = priceDeltaCash - scenarioaxis(priceDeltaCash, <["valuationBaseDateTime"], , , dateToday() + 1>);
  DayChangeIssuer = creditPositionExposure - scenarioaxis(creditPositionExposure, <["valuationBaseDateTime"], , , dateToday() + 1>);
  DayChangePV01 = interestRateDelta - scenarioaxis(interestRateDelta, <["valuationBaseDateTime"], , , dateToday() + 1>);
  DeltaCheck = ;
  DeltaThresholdValue = ;
  DeltaUtilizationPercentage = ;
  Difference = 1;
  Difference_EndCash = select(object.GrouperOnLevel, 
  "Trade Currency"->py("Total_Trade", context).sumEndCash(object.Trades));
  Difference_EndCashDisplay = select(object.GrouperOnLevel, 
  "Asset or Liability Grouper"->nil, 
  default->Difference_EndCash);
  EquivalentAmountIDR = sumOf(children :* "EquivalentAmountIDR");
  FaceAmount = py("Total_Trade", context).sum_FaceValue(object.Trades);
  FarAmount = py("Total_Trade", context).sum_FarAmount(object.Trades);
  FarAmount1 = py("Total_Trade", context).sum_FarAmount1(object.Trades);
  FarAmount2 = py("Total_Trade", context).sum_FarAmount2(object.Trades);
  FBIThisYear = sumOf(children :* "FBIThisYear");
  FBIYesteryear = sumOf(children :* "FBIYesteryear");
  FeeIDR = 1;
  FrekuensiPenjualan_Yesterday = ;
  FTotal = py("Report_Python", context).sum_column(object.Trades);
  FTotal_Premium = py("Total_Trade", context).sum_column(object.Trades);
  FXFW = py("Report_Python", context).TotalMMInterbankLIQ19(object.Trades, "ALL", ["TOD", "TOM", "SPOT", "FWD"]);
  GainOrLoss = ;
  GMRAIdentification = ;
  GroupID = ;
  ID = ;
  Ins_Bond = py("Report_Python", context).Instrument_Total_Cashflow("Bond", object.Trades);
  Ins_Commodity = py("Report_Python", context).Instrument_Total_Cashflow("Commodity", object.Trades);
  Ins_Curr = py("Report_Python", context).Instrument_Total_Cashflow("Curr", object.Trades);
  Ins_CurrSwap = py("Report_Python", context).Instrument_Total_Cashflow("CurrSwap", object.Trades);
  Ins_Deposit = py("Report_Python", context).Instrument_Total_Cashflow("Deposit", object.Trades);
  Ins_MM_IP = py("Report_Python", context).Product_Total_Cashflow("IP", object.Trades);
  Ins_MM_IT = py("Report_Python", context).Product_Total_Cashflow("IT", object.Trades);
  Ins_Option = py("Report_Python", context).Instrument_Total_Cashflow("Option", object.Trades);
  Ins_Repo = py("Report_Python", context).Instrument_Total_Cashflow("Repo", object.Trades);
  Ins_Swap = py("Report_Python", context).Instrument_Total_Cashflow("Swap", object.Trades);
  IRS = py("Report_Python", context).TotalMMInterbankLIQ19(object.Trades, "ALL", ["IRS"]);
  KETERANGAN = ;
  LimitMO01 = ;
  LimitMO10 = 1;
  LossLimitMonthly = var(0);
  LossLimitYearly = var(2e+15);
  LowerRate = ;
  MMDF = py("Report_Python", context).TotalMMInterbankLIQ19(object.Trades, "Sell", ["FASBI"]);
  MMInterbankPlacement = py("Report_Python", context).TotalMMInterbankLIQ19(object.Trades, "Sell", ["CL", "MD", "CMP", "CMT", "OVP", "OVT", "BLT", "SHARI", "BA"]);
  MMInterbankTaken = py("Report_Python", context).TotalMMInterbankLIQ19(object.Trades, "Buy", ["CL", "MD", "CMP", "CMT", "OVP", "OVT", "BLT", "SHARI", "BA"]);
  MMLF = py("Report_Python", context).TotalMMInterbankLIQ19(object.Trades, "Buy", ["FASBI"]);
  MoneyAmount = ;
  Month = 1;
  MonthlyLossLimitUse2 = py("Total_Trade", context).PnLMonthly(object.InstrumentAndTrades) / LossLimitMonthly * 100;
  MonthNumber = 1;
  MTD = py("Report_Python", context).get_value_from_hierarchy("Target", "MTD", object.InstrumentAndTrades.AsString);
  mtmPriceBond = select(object.GrouperOnLevel.DisplayName, 
  "Currency"->sumOf(children :* "mtmPriceBond"));
  NearAmount = py("Total_Trade", context).sum_NearAmount(object.Trades);
  NearAmount1 = py("Total_Trade", context).sum_NearAmount1(object.Trades);
  NearAmount2 = py("Total_Trade", context).sum_NearAmount2(object.Trades);
  NII = ;
  NIIThisYear = sumOf(children :* "NIIThisYear");
  NIIYesteryear = sumOf(children :* "NIIYesteryear");
  nisbahBagiHasil = ;
  NominalCustom = select(object.GrouperOnLevel.DisplayName, 
  "Currency"->abs(sumOf(children :* "NominalCustom")));
  NominalNOP = select(object.GrouperOnLevel.DisplayName, 
  "Instrument: Name"->sumOf(children :* "NominalNOP"), 
  "Trade: Currency"->abs(sumOf(children :* "NominalNOP")), 
  default->nil);
  NominalNOP_USD = select(object.GrouperOnLevel.DisplayName, 
  "Trade: Currency"->select(string(displayCurrency), 
    "USD"->NominalNOP.Value.Number, 
    default->NominalNOP.Value.Number * py("Python_Price_Calc", context).UpdatedUSDEoDPrice(string(displayCurrency))), 
  "Trade: Trader"->sumOf(children :* "NominalNOP_USD"), 
  default->nil);
  NominalSGD = sumOf(children :* "NominalSGD");
  NominalSumUp = sumOf(children :* "NominalSumUp");
  NomorIdentifikasi = 1;
  NOP_USD = select(string(displayCurrency), 
  "USD"->finalNOP3.Value.Number, 
  default->finalNOP3.Value.Number * py("Python_Price_Calc", context).UpdatedUSDEoDPrice(string(displayCurrency)));
  NOPLimit = var(LossLimitYearly - LossLimitMonthly);
  NOPLimitUse = finalNOP2 / NOPLimit * 100;
  NOPThresholdValue = ;
  NOPUtilizationPercentage = ;
  Notional1DayChange = ;
  NotionalLimit = ;
  NotionalPercentageUtilization = ;
  NotionalUtilization = ;
  OriginalCostAmt = select(object.GrouperOnLevel.DisplayName, 
  "Currency"->sumOf(children :* "OriginalCostAmt"));
  OutstandingEqvUSD = ;
  parent = object.Parent;
  Percentage_Yesterday = ;
  PercentageHolding = ;
  PercentageVolumeYesterday = ;
  PercentNominal = NominalCustom / parent:NominalCustom * 100;
  Period = 1;
  portfolio = object.Portfolio;
  PositionEOD = py("Total_Trade", context).positionEOD;
  premiumCustom = select(object.GrouperOnLevel.DisplayName, 
  "Currency"->sumOf(children :* "premiumCustom"));
  PrevEffDate = 1;
  PrevPrevEffDate = 1;
  PrevPrevPrice = 1;
  PrevPrice = 1;
  PV01ThresholdValue = ;
  PV01UtilizationPercentage = ;
  QuantityCustom = sumOf(children :* "QuantityCustom");
  Reff = object.Trade.Oid + "/" + object.Trade.Instrument.Name + "/" + object.Trade.OptKey3 + object.Trade.OptKey4;
  Reksadana = py("Report_Python", context).TotalMMInterbankLIQ19(object.Trades, "ALL", ["RDPU", "RDPT"]);
  RemarkOutstanding = ;
  RemarkSellBuy = 1;
  RepoBI = py("Report_Python", context).TotalMMInterbankLIQ19(object.Trades, "Sell", ["BISBI", "BIGOV", "BIDIS", "BINON", "BIOTH"]);
  RepoInterbank = py("Report_Python", context).TotalMMInterbankLIQ19(object.Trades, "Sell", ["IWFSBI", "IWFGOV", "IWFDIS", "IWFNON", "IWFOTH", "CWFSBI", "CWFGOV", "CWFDIS", "CWFNON", "CWFOTH", "IBSBI", "IBGOV", "IBDIS", "IBNON", "IBOTH", "CCBI", "CCGV", "CCDC", "CCOH", "OVBSBI", "OVBGOV", "OVBDIS", "OVBNON", "OVBOTH", "NEGSBI", "NEGGOV", "NEGDIS", "NEGNON", "NEGOTH"]);
  RevaluationAmount = presentValue;
  RevRepoBI = py("Report_Python", context).TotalMMInterbankLIQ19(object.Trades, "Buy", ["BISBI", "BIOB", "BIOH"]);
  RevRepoInterbank = py("Report_Python", context).TotalMMInterbankLIQ19(object.Trades, "Buy", ["IBBI", "IBOB", "OVBSBI", "OVBGOV", "OVBOTH", "CCSBI", "CCGOV", "CCOTH"]);
  RiskWeight = ;
  SACCR_RWA = ;
  SB_Dimiliki = py("Report_Python", context).TotalMMInterbankLIQ19(object.Trades, "ALL", ["IDBI", "SUKBI"]);
  SB_Terbit = py("Report_Python", context).TotalMMInterbankLIQ19(object.Trades, "ALL", ["BOND", "ZCO", "NCD"]);
  SecuritiesRating = ;
  SecuritiesRatingInstituition = ;
  SellAmountCustom = sumOf((object.Children) :* "SellAmountCustom");
  StandardYearlyLossThresholdValue = ;
  StandardYearlyLossUtilizationPercentage = ;
  StatusBondCutLoss = ;
  StatusMatchUnmatch = ;
  SWAP = py("Report_Python", context).TotalMMInterbankLIQ19(object.Trades, "ALL", ["SWAP"]);
  TargetMonth = TargetMonth;
  TargetYear = TargetYear;
  Term_Deposit = py("Report_Python", context).TotalMMInterbankLIQ19(object.Trades, "ALL", ["FASBI", "BI"]);
  TermofPeriod = ;
  tingkatIndikasiImbalan = ;
  Total_Cashflow = py("Report_Python", context).Total_Cashflow(object.Trades);
  Total_coupon = ;
  Total_EndCash = sumOf(children :* "Total_EndCash");
  Total_EndCashDisplay = select(object.GrouperOnLevel, 
  "Asset or Liability Grouper"->nil, 
  default->Total_EndCash);
  TPL_USD = select(string(displayCurrency), 
  "USD"->tPL.Value.Number, 
  default->tPL.Value.Number * py("Python_Price_Calc", context).UpdatedUSDEoDPrice(string(displayCurrency)));
  trades = object.Trades;
  UnderlyingThreshold = ;
  UpperRate = ;
  Utilisasi = ;
  UtilizationBond = ;
  VarThresholdValue = ;
  VarUtilizationPercentage = ;
  VolumeYesterday = ;
  WeekNumber = ;
  Year = 1;
  YearlyLossLimitUse2 = py("Total_Trade", context).PnLYearly(object.InstrumentAndTrades) / LossLimitYearly * 100;
  YTD = py("Report_Python", context).get_value_from_hierarchy("Target", "YTD", object.InstrumentAndTrades.AsString);
}

clx FMultiMoneyFlowAndTrades [FExtensionAttribute] {
  CashflowFarAmount = ;
  InterestProceed = py("Total_Trade", context).interestproceed2(object.Trades);
  PayDayCustom = py("Total_Trade", context).payday(object.Trades);
  TradeNumberCustom = averageOf([1, 2, 3, 4]);
}

clx FPayment [FExtensionAttribute] {
  paymentAmount = object.Amount;
  paymentText = object.Text;
  paymentType = object.Type;
}

clx FPortfolioInstrumentAndTrades [FExtensionAttribute] {
  AccountID = ;
  AccumulativeOrPerTransaction = ;
  AcquisitionIDR = 1;
  AcquisitionPricePercent = notANumberIsZero(rPLColumn / tPL * 100);
  AIP = ;
  AL = py("Total_Trade", context).totalPortfolioInstrumentAndTradesClass(object.Trades);
  AmountAccumulativePerMonth = ;
  AveragePrice = averageOf(trades :* "price");
  Balance = ;
  BidPriceBGN = ;
  BidPriceBVAL = ;
  BidPriceEXCH = ;
  BookValueDeprec = select(object.Children.Size > 0, 
  true->sumOf(children :* "BookValueDeprec"), 
  false->nil);
  BookValueIDR = py("Total_Trade", context).calculate_bookvalueidr(object.Trades);
  BUC = 1;
  BuyAmountCustom = sumOf((object.Children) :* "BuyAmountCustom");
  CCS = ;
  ClassificationofSecurities = ;
  Coupon_SB_Dimiliki = ;
  CPMainCcy = ;
  CPMoneyCcy = ;
  CrEquivalent1DayChange = ;
  CrEquivalentLimit = ;
  CrEquivalentPercentageUtilization = ;
  CrEquivalentUtilization = ;
  CS01 = ;
  DayChangeConvexity = ;
  DayChangeCounterparty = riskPositionDisplay - scenarioaxis(riskPositionDisplay, <["valuationBaseDateTime"], , , dateToday() + 1>);
  DayChangeCountry = createAggregateSubResults(array(variant), cemLimitSubResultsInput) :* "counterpartyCEMDisplay" - scenarioaxis(createAggregateSubResults(array(variant), cemLimitSubResultsInput) :* "counterpartyCEMDisplay", <["valuationBaseDateTime"], , , dateToday() + 1>);
  DayChangeCS01 = ;
  DayChangeDelta = priceDeltaCash - scenarioaxis(priceDeltaCash, <["valuationBaseDateTime"], , , dateToday() + 1>);
  DayChangeIssuer = creditPositionExposure - scenarioaxis(creditPositionExposure, <["valuationBaseDateTime"], , , dateToday() + 1>);
  DayChangePV01 = interestRateDelta - scenarioaxis(interestRateDelta, <["valuationBaseDateTime"], , , dateToday() + 1>);
  DaysDelay = ;
  DeltaCheck = ;
  DeltaThresholdValue = py("Python_Custom_Fields", context).port_threshold_limit(object.Portfolio, "Portfolio Delta Cash", "Exposure", "Pre-Deal", 1);
  DeltaUtilizationPercentage = py("Python_Custom_Fields", context).port_utilization_percentage(object.Portfolio, "Portfolio Delta Cash", "Exposure", "Pre-Deal", 1);
  Difference = 1;
  Difference_EndCash = py("Total_Trade", context).sumEndCash(object.Trades);
  Difference_EndCashDisplay = ;
  FaceAmount = py("Total_Trade", context).sum_FaceValue(object.Trades);
  FarAmount = py("Total_Trade", context).sum_FarAmount(object.Trades);
  FarAmount1 = py("Total_Trade", context).sum_FarAmount1(object.Trades);
  FarAmount2 = py("Total_Trade", context).sum_FarAmount2(object.Trades);
  FeeIDR = 1;
  FrekuensiPenjualan_Yesterday = ;
  FTotal = py("Report_Python", context).sum_column(object.Trades);
  FTotal_Premium = py("Total_Trade", context).sum_column(object.Trades);
  FullYearAchievement = (TargetYTD - TargetFullYear) / 100;
  FXFW = ;
  GainOrLoss = ;
  GMRAIdentification = ;
  GrandTotal = BuyAmountCustom + SellAmountCustom;
  GroupID = ;
  ID = ;
  Ins_Bond = ;
  Ins_Commodity = ;
  Ins_Curr = ;
  Ins_CurrSwap = ;
  Ins_Deposit = ;
  Ins_MM_IP = ;
  Ins_MM_IT = ;
  Ins_Option = ;
  Ins_Repo = ;
  Ins_Swap = ;
  IRS = ;
  KETERANGAN = ;
  KursBeli = py("Total_Trade", context).sumkursbeli(object.Trades, ["KursBeli"]);
  KursJual = py("Total_Trade", context).sumkursjual(object.Trades, ["KursJual"]);
  LimitMO01 = ;
  LimitMO10 = ;
  LossLimitMonthly = select(object.GrouperOnLevel, 
  "Trade: Trader"->sumOf(children :* "LossLimitMonthly"));
  LossLimitYearly = select(object.GrouperOnLevel, 
  "Trade: Trader"->sumOf(children :* "LossLimitYearly"));
  LowerRate = ;
  MMDF = ;
  MMInterbankPlacement = ;
  MMInterbankTaken = ;
  MMLF = ;
  MoneyAmount = ;
  Month = ;
  MonthlyLossLimitUse = sumOf(children :* "MonthlyLossLimitUse");
  MonthlyLossLimitUse2 = select(object.GrouperOnLevel, 
  "Trade: Trader"->py("Total_Trade", context).PnLMonthly(object.Portfolio) / LossLimitMonthly * 100);
  MonthNumber = ;
  MTD = ;
  NearAmount = py("Total_Trade", context).sum_NearAmount(object.Trades);
  NearAmount1 = py("Total_Trade", context).sum_NearAmount1(object.Trades);
  NearAmount2 = py("Total_Trade", context).sum_NearAmount2(object.Trades);
  NII = ;
  nisbahBagiHasil = ;
  NominalCustom = select(object.Children.Size > 0, 
  true->abs(sumOf(children :* "NominalCustom")), 
  false->nil);
  NominalNOP = ;
  NominalNOP_USD = sumOf(children :* "NominalNOP_USD");
  NominalSGD = sumOf(children :* "NominalSGD");
  NomorIdentifikasi = 1;
  NOP_USD = select(string(displayCurrency), 
  "USD"->finalNOP3.Value.Number, 
  default->finalNOP3.Value.Number * py("Python_Price_Calc", context).UpdatedUSDEoDPrice(string(displayCurrency)));
  NOPLimit = select(object.GrouperOnLevel, 
  "Trade: Trader"->sumOf(children :* "NOPLimit"));
  NOPLimitUse = select(object.GrouperOnLevel, 
  "Trade: Trader"->finalNOP2 / NOPLimit * 100);
  NOPThresholdValue = py("Python_Custom_Fields", context).port_threshold_limit(object.Portfolio, "Final NOP Portfolio(PV)", "Exposure", "Compliance", 2);
  NOPUtilizationPercentage = py("Python_Custom_Fields", context).port_utilization_percentage(object.Portfolio, "Final NOP Portfolio(PV)", "Exposure", "Compliance", 2);
  Notional1DayChange = ;
  NotionalLimit = ;
  NotionalPercentageUtilization = ;
  NotionalUtilization = ;
  OneDayChange = 1;
  OutstandingEqvUSD = ;
  Percentage_Yesterday = ;
  PercentageHolding = ;
  PercentageVolumeYesterday = ;
  Period = 1;
  PnLMonth = thTPL * 30;
  PnLYear = thTPL * 365;
  portfolio = object.Portfolio;
  PortLimit = py("MO_Column_Helpers", context).get_threshold_value_by_port(object.Portfolio);
  PortUtilPercent = py("MO_Column_Helpers", context).get_util_percent_by_port(object.Portfolio);
  PortUtilStatus = py("MO_Column_Helpers", context).get_appropriate_threshold_type_by_port(object.Portfolio);
  PositionCCY1 = py("Report_Python_P2", context).sum_positionccy1(object.Trades);
  PositionEOD = py("Total_Trade", context).positionEOD;
  premiumCustom = select(object.Children.Size > 0, 
  true->sumOf(children :* "premiumCustom"), 
  false->nil);
  PrevEffDate = 1;
  PrevPrevEffDate = 1;
  PrevPrevPrice = 1;
  PrevPrice = 1;
  PV01ThresholdValue = py("Python_MO_Custom_Fields", context).get_threshold_limit_by_rule_name(object.Portfolio, "PV01_Treasury HO");
  PV01UtilizationPercentage = py("Python_MO_Custom_Fields", context).get_utilization_percentage_by_rule_name(object.Portfolio, "PV01_Treasury HO");
  Reff = object.Trade.Oid + "/" + object.Trade.Instrument.Name + "/" + object.Trade.OptKey3 + object.Trade.OptKey4;
  Reksadana = ;
  RemarkOutstanding = ;
  RemarkSellBuy = ;
  RepoBI = ;
  RepoInterbank = ;
  RevaluationAmount = presentValue;
  RevRepoBI = ;
  RiskWeight = ;
  RPL_Yesterday = py("Report_Python", context).sum_PL_yesterday(object.Trades, "RPL");
  RRevRepoInterbank = ;
  SACCR_RWA = ;
  SB_Dimiliki = ;
  SB_Terbit = ;
  SecuritiesRating = ;
  SecuritiesRatingInstituition = ;
  SellAmountCustom = sumOf((object.Children) :* "SellAmountCustom");
  StandardYearlyLossThresholdValue = py("Python_Custom_Fields", context).port_threshold_limit(object.Portfolio, "Portfolio Total Profit and Loss", "Exposure", "Pre-Deal", 0);
  StandardYearlyLossUtilizationPercentage = py("Python_Custom_Fields", context).port_utilization_percentage(object.Portfolio, "Portfolio Total Profit and Loss", "Exposure", "Pre-Deal", 0);
  StatusBondCutLoss = ;
  StatusMatchUnmatch = ;
  SWAP = ;
  TargetFullYear = denominatedvalue(100000000, "IDR", , );
  TargetMonth = 0;
  TargetMonthPercent = (PnLMonth / TargetMonth) * 100;
  TargetMTD = denominatedvalue(100000000, "IDR", , );
  TargetMTDPercent = py("Total_Trade", context).targetmtdpercent(object);
  TargetYear = 0;
  TargetYearPercent = (PnLYear / TargetYear) * 100;
  TargetYTD = denominatedvalue(100000000, "IDR", , );
  TargetYTDPercent = py("Total_Trade", context).targetytdpercent(object);
  Term_Deposit = ;
  TermofPeriod = ;
  tingkatIndikasiImbalan = ;
  Total_Cashflow = ;
  Total_coupon = ;
  Total_EndCashDisplay = ;
  TPL_USD = select(string(displayCurrency), 
  "USD"->tPL.Value.Number, 
  default->tPL.Value.Number * py("Python_Price_Calc", context).UpdatedUSDEoDPrice(string(displayCurrency)));
  TPL_Yesterday = py("Report_Python", context).sum_PL_yesterday(object.Trades, "TPL");
  trades = object.Trades;
  UnderlyingThreshold = ;
  UPL_Yesterday = py("Report_Python", context).sum_PL_yesterday(object.Trades, "UPL");
  UpperRate = ;
  Utilisasi = ;
  UtilizationBond = ;
  VarThresholdValue = py("Python_Custom_Fields", context).port_threshold_limit(object.Portfolio, "Portfolio Value at Risk From Scenario", "Exposure", "Periodic", 0);
  VarUtilizationPercentage = py("Python_Custom_Fields", context).port_utilization_percentage(object.Portfolio, "Portfolio Value at Risk From Scenario", "Exposure", "Periodic", 0);
  VolumeDaily = object.Instrument.PriceFeed.ClosePrice;
  VolumeMonthly = Nominal * 30 * 14200;
  VolumeYearly = Nominal * 365 * 14200;
  VolumeYesterday = ;
  WeekNumber = ;
  Year = ;
  YearlyLossLimitUse = sumOf(children :* "YearlyLossLimitUse");
  YearlyLossLimitUse2 = select(object.GrouperOnLevel, 
  "Trade: Trader"->py("Total_Trade", context).PnLYearly(object.Portfolio) / LossLimitYearly * 100);
  YTD = ;
  YTDAchievement = (TargetYTD - PnLYearly) / 100;
}

clx FRuleResult [FExtensionAttribute] {
  DayChangeCounterparty = scenarioaxis(ruleValue, <["valuationBaseDateTime"], , , dateToday() - 1>) - ruleValue;
  DayChangeCountry = ruleValue - scenarioaxis(ruleValue, <["valuationBaseDateTime"], , , dateToday() + 1>);
  DayChangeIssuer = scenarioaxis(ruleValue, <["valuationBaseDateTime"], , , dateToday() - 1>) - ruleValue;
}

clx FRuleValue [FExtensionAttribute] {
  DayChangeCounterparty = scenarioaxis(ruleValue, <["valuationBaseDateTime"], , , dateToday() - 1>) - ruleValue;
  DayChangeCountry = ruleValue - scenarioaxis(ruleValue, <["valuationBaseDateTime"], , , dateToday() + 1>);
  DayChangeIssuer = scenarioaxis(ruleValue, <["valuationBaseDateTime"], , , dateToday() - 1>) - ruleValue;
  ruleValueUtilizationCustom = float(thresholdValue) - float(ruleValue);
  ruleValueUtilizationPercentCustom = float(ruleValue) / float(thresholdValue);
  thresholdValue = select(thresholdValueObj, 
  nil->0, 
  default->thresholdValueObj.Value);
  thresholdValueObj = getThresholdValue(object.AppliedRule, object);
}

clx FRuleValueHistory [FExtensionAttribute] {
  DayChangeCounterparty = scenarioaxis(ruleValue, <["valuationBaseDateTime"], , , dateToday() - 1>) - ruleValue;
  DayChangeCountry = ruleValue - scenarioaxis(ruleValue, <["valuationBaseDateTime"], , , dateToday() + 1>);
  DayChangeIssuer = scenarioaxis(ruleValue, <["valuationBaseDateTime"], , , dateToday() - 1>) - ruleValue;
  StatusExpiry = dateDifference(object.End, dateToday);
}

clx FSettlement [FExtensionAttribute] {
  AbsSettlementAmt = abs(Object.Amount);
  ClosingBalance = py("Report_Python_P2", context).get_balance(object.Settlement.AcquirerAccountRef.AdditionalInfo.ClosingBalance);
  closingPriceBond = py("Report_Python_P2", context).closingPriceBond(object.Trade);
  CreditAmount = select(object.Trade.Bought, 
  false->object.Trade.Nominal, 
  true->nil);
  DebitAmount = select(object.Trade.Bought, 
  true->object.Trade.Nominal, 
  false->nil);
  DRCRIND = select(settlementAmount > 0, 
  true->"DR", 
  false->"CR");
  InOut = select(settlementAmount > 0, 
  true->"IN", 
  false->"OUT");
  interestRateAtTradeTime = trade:interestRateAtTradeTime;
  mtmPriceBond = select(closingPriceBond <> nil, 
  true->select(origprice_8 <> nil, 
    true->(closingPriceBond - origprice_8) * object.Trade.Nominal / 100, 
    false->(closingPriceBond - 0) * object.Trade.Nominal / 100), 
  false->select(origprice_8 <> nil, 
    true->(0 - origprice_8) * object.Trade.Nominal / 100, 
    false->(0 - 0) * object.Trade.Nominal / 100));
  OpeningBalance = py("Report_Python_P2", context).get_balance(object.Settlement.AcquirerAccountRef.AdditionalInfo.OpeningBalance);
  OriginalCostAmt = object.Trade.Nominal + mtmPriceBond;
  SCHED_Pay_Freq = select(object.Trade.Instrument.Legs.First.PayType, 
  "Receive"->select(object.Trade.Instrument.Legs.First.RollingPeriod, 
    "3m"->"Q", 
    "6m"->"S", 
    "12m"->"Y"), 
  "Pay"->select(object.Trade.Instrument.Legs.Last.RollingPeriod, 
    "3m"->"Q", 
    "6m"->"S", 
    "12m"->"Y"));
  Total_coupon = object.Amount;
  TOTPAYAMT = select(object.Trade.OptKey3AsEnum, 
  "FX"->select(object.Currency == object.Trade.Instrument, 
    true->trade:longFormAttrBuyAmount, 
    false->trade:longFormAttrSellAmount), 
  "DL"->object.Trade.Premium);
}

clx FSingleInstrumentAndTrades [FExtensionAttribute] {
  AveragePrice = averageOf(trades :* "price");
  DayChangeDelta = priceDeltaCash - scenarioaxis(priceDeltaCash, <["valuationBaseDateTime"], , , dateToday() + 1>);
  DayChangePV01 = interestRateDelta - scenarioaxis(interestRateDelta, <["valuationBaseDateTime"], , , dateToday() + 1>);
  LossLimitMonthly = ;
  LossLimitYearly = ;
  MonthlyLossLimitUse = py("Total_Trade", context).monthlylosslimituse(object);
  MonthlyLossLimitUse2 = ;
  NominalNOP = ;
  NominalNOP_USD = ;
  NOP_USD = ;
  NOPLimit = ;
  NOPLimitUse = ;
  Tenor = dateDifference(object.Instrument.EndDate, object.Instrument.StartDate);
  TPL_USD = select(string(displayCurrency), 
  "USD"->tPL.Value.Number, 
  default->tPL.Value.Number * py("Python_Price_Calc", context).UpdatedUSDEoDPrice(string(displayCurrency)));
  trades = object.Trades;
  YearlyLossLimitUse = py("Total_Trade", context).yearlylosslimituse(object);
  YearlyLossLimitUse2 = ;
}

clx FTrade [FExtensionAttribute] {
  dictPaymentTypeAmount = createDictionary(paymentTypeArray, paymentAmountArray);
  Movement = 0;
  Payment = object.Trade.Payments;
  paymentAmountArray = Payment :* "paymentAmount";
  paymentTypeArray = string(Payment :* "paymentType");
  PnLMonth = ;
  PnLYear = ;
  price = object.Trade.Price;
  Reff = object.Trade.Oid + "/" + object.Trade.Instrument.Name + "/" + object.Trade.OptKey3 + object.Trade.OptKey4;
  TargetMonth = ;
  TargetMonthPercent = (PnLMonth / TargetMonth) * 100;
  TargetYear = ;
  TradeNumberInstrument = object.Trade.Oid + "_" + object.Trade.Instrument.Name;
  VolumeDaily = object.Instrument.PriceFeed.ClosePrice;
  VolumeMonthly = Nominal * 30 * 14200;
  VolumeYearly = Nominal * 365 * 14200;
  WHT = dictPaymentTypeAmount.At("WHT");
}

clx FTradeRow [FExtensionAttribute] {
  ACCINT = ;
  AccountBranch = 60700;
  AccountID = py("Total_Trade", context).accountid(object.Trade, ["Trade Number", "Bought or Sold", "Call or Put"]);
  ACCROUTSTAMT = select(object.Trade.BoughtAsString, 
  "Buy"->object.Trade.Oid);
  AccruedInterestValue = object.Trade.AccruedDays * object.Trade.FaceValue / (360 / (object.Trade.Instrument.Legs.First.FirstRate / 100));
  AccruedOutstanding = "summ";
  ACCTTYPE = ;
  AccumulativeOrPerTransaction = ;
  AcquisitionIDR = ;
  AcquisitionPricePercent = notANumberIsZero(rPLColumn / tPL * 100);
  AcquisitionRecord = dictPaymentTypeAmount.At("Acq. Price and Date Record");
  AFS = ;
  AgreedSellingPrice = ;
  AIP = ;
  AL = select(object.Trade.OptKey4, 
  "CMP"->"A", 
  "CMT"->"L");
  AllInRate = int(fixedRate);
  AllInRate2 = averageOf(legs :* "fixedRateCustom");
  AllowanceForLosses = object.Trade.StartCash * 0.01;
  Amendment = ;
  AmendmentDate = object.Trade.LastUpdateTime;
  Amortized010203 = 1000000;
  Amortized2004 = 1000000;
  AmortizedDiscPrem = ;
  AmountAccumulativePerMonth = ;
  AmountClosing = py("Report_Python", context).calculate_amount_closing(object.Trade, false);
  AmountClosingYesterday = py("Report_Python", context).calculate_amount_closing(object.Trade, true);
  AmountofUnderlying = ;
  AmountToFund = float(object.Trade.Nominal) + float(accrued);
  ApprovalSystem = ;
  ARGNO = select(object.Trade.Nominal > 0, 
  true->"1", 
  false->"2");
  ASSETID = ;
  ASSIGNEDQTY = ;
  AtributText = ;
  AveragePrice = object.Trade.Price;
  Balance = ;
  BankingUnit = select(object.Trade.TradeInstrumentType, 
  "BasketRepo/Reverse"->select(BranchCode, 
    "P2"->select(object.Trade.Currency, 
      "SGD"->"DBU", 
      default->"ACU"), 
    "SH"->select(object.Trade.Currency, 
      "CNY"->"DBU", 
      default->"ACU"), 
    "HK"->select(object.Trade.Currency, 
      "HKD"->"DBU", 
      default->"ACU")), 
  "Deposit"->select(BranchCode, 
    "P2"->select(object.Trade.Currency, 
      "SGD"->"DBU", 
      default->"ACU"), 
    "SH"->select(object.Trade.Currency, 
      "CNY"->"DBU", 
      default->"ACU"), 
    "HK"->select(object.Trade.Currency, 
      "HKD"->"DBU", 
      default->"ACU")), 
  "Bond"->select(BranchCode, 
    "P2"->select(object.Trade.Currency, 
      "SGD"->"DBU", 
      default->"ACU"), 
    "SH"->select(object.Trade.Currency, 
      "CNY"->"DBU", 
      default->"ACU"), 
    "HK"->select(object.Trade.Currency, 
      "HKD"->"DBU", 
      default->"ACU")), 
  "Bill"->select(BranchCode, 
    "P2"->select(object.Trade.Currency, 
      "SGD"->"DBU", 
      default->"ACU"), 
    "SH"->select(object.Trade.Currency, 
      "CNY"->"DBU", 
      default->"ACU"), 
    "HK"->select(object.Trade.Currency, 
      "HKD"->"DBU", 
      default->"ACU")), 
  "FRN"->select(BranchCode, 
    "P2"->select(object.Trade.Currency, 
      "SGD"->"DBU", 
      default->"ACU"), 
    "SH"->select(object.Trade.Currency, 
      "CNY"->"DBU", 
      default->"ACU"), 
    "HK"->select(object.Trade.Currency, 
      "HKD"->"DBU", 
      default->"ACU")), 
  "Swap"->select(BranchCode, 
    "P2"->select(object.Trade.Currency, 
      "SGD"->"DBU", 
      default->"ACU"), 
    "SH"->select(object.Trade.Currency, 
      "CNY"->"DBU", 
      default->"ACU"), 
    "HK"->select(object.Trade.Currency, 
      "HKD"->"DBU", 
      default->"ACU")), 
  default->nil);
  BaseCurrCR = ;
  BaseCurrDR = ;
  BasketRepoRate_6 = select(object.Trade.TradeInstrumentType, 
  "BasketRepo/Reverse"->object.Trade.Instrument.CouponRate, 
  default->nil);
  BeginningBalance = ;
  BEIND = select(object.Trade.Currency, 
  "IDR"->0);
  Beneficiary = ;
  BidPrice = py("Report_Python_P2", context).get_price_entry(object.Trade.Instrument.Name, object.Trade.Currency.Name, "EOD_MtM", "Settle");
  BidPriceBGN = ;
  BidPriceBVAL = ;
  BidPriceEXCH = ;
  BIS4 = ;
  blank = ;
  Blank1 = ;
  Blank2 = ;
  BondPriceBuy = select(object.Trade.BoughtAsString, 
  "Buy"->object.Trade.Price, 
  default->"");
  BondPriceSell = select(object.Trade.BuySellGrouper, 
  "Sell"->object.Trade.Price, 
  "Buy"->"");
  BookFilter = ;
  BOOKVALAMT = (object.Trade.Price * object.Trade.Nominal) / 100;
  BookValueDeprec = abs(originalCost) - abs(deprecRPLColumn.Value.Number);
  BookValueIDR = object.Trade.Price * bookValue;
  BorrowerCode = object.Trade.Counterparty.Id2;
  BorrowerName = ;
  BRANCH = py("Report_Python_P2", context).get_Branch(trade.Portfolio.Name);
  BranchCode = py("Report_Python_P2", context).BranchCodeByServer;
  BreachTenor = ;
  BRPRCINDTE = asDate(object.Trade.CreateTime);
  BUC = ;
  BuyAmountCustom = select(object.Trade.BoughtAsString, 
  "Buy"->object.Trade.Nominal) / 1000000000;
  BuyerOrSeller = object.Trade.BoughtAsString + "er";
  CancelOrAmendDate = ;
  CapitalGain = (object.Trade.FaceValue * object.Trade.Price / 100) - object.Trade.AllInPrice;
  CapitalGainTax = ;
  CashflowFA = StartAccrualFA - EndAccrualFA;
  CashflowPresentValue = py("Report_Python_P2", context).CashflowPresentValue(object.Trade);
  CashflowProjectedValue = py("Report_Python_P2", context).CashflowProjectedValue(object.Trade);
  CashY = ;
  CAT = ;
  CCS = ;
  CCYAmount = select(object.Trade.InstrumentSubType, 
  "FX Option"->object.Trade.QuantityOrNominalAmount, 
  default->longFormAttrBuyAmount);
  CCYRate = ;
  CFCITZ = ;
  CFCOUN = ;
  CFRESD = ;
  Checker = ;
  CIFBICode = 795;
  CIFBranch = 60700;
  ClassificationofSecurities = ;
  ClosingBalance = ;
  CLOSINGPRICE_8 = object.Trade.Instrument.Prices.Last.Settle;
  closingPriceBond = py("Report_Python_P2", context).closingPriceBond(object.Trade);
  Code = ;
  CODE = select(object.Trade.Nominal > 0, 
  true->"3350", 
  false->"3335");
  CodeDesc = ;
  Collateral = py("Report_Python_P2", context).get_Collateral_Secid(object.Trade);
  CollateralAmount = ;
  CollateralCurrency = ;
  CollateralDueDate = ;
  COMIDB = ;
  COMIDC = ;
  Commission = dictPaymentTypeAmount.At("Commission");
  COMMPROCAMT = ;
  Conclusion = select(float(RatesOPICS) == float(object.Trade.Price), 
  true->"Correct", 
  false->"Not Correct");
  ContractValNetAgree = ;
  CONVINTAMT = ;
  CONVINTBAMT = ;
  CorpSpreadAmount = (legs :* "floatSpread").At(0) * longFormAttrExchangeRate;
  CorrespondentBank1 = ;
  CorrespondentBank2 = ;
  COSTAMT = ;
  CounterCurrency = select(object.Trade.PositionOrInstrumentPair == nil, 
  true->nil, 
  false->object.Trade.PositionOrInstrumentPair.Instrument2.Name);
  CounterpartyCountryIND = select(object.Trade.Counterparty.Country, 
  "Indonesia"->2, 
  default->1);
  CountryLimit = ;
  Coupon_SB_Dimiliki = ;
  CPMainCcy = py("Total_Trade", context).cpmainccy(object.Trade, ["Call or Put"]);
  CPMoneyCcy = py("Total_Trade", context).cpmoneyccy(object.Trade, ["Call or Put"]);
  CreateDate = ;
  CreditAmount = select(object.Trade.Bought, 
  false->object.Trade.Nominal, 
  true->nil);
  CrEquivalent1DayChange = ;
  CrEquivalentLimit = ;
  CrEquivalentPercentageUtilization = ;
  CrEquivalentUtilization = ;
  CS01 = ;
  CTRCCYAmount = select(object.Trade.InstrumentSubType, 
  "FX Option"->-1 * CCYAmount * object.Trade.Instrument.StrikePrice, 
  default->-1 * longFormAttrSellAmount);
  CurrAgainstSGD = ;
  CurrAgainstUSD = ;
  Currency = select(object.Trade.PositionOrInstrumentPair, 
  true->object.Trade.PositionOrInstrumentPair.Instrument1.Name, 
  false->object.Trade.Currency.Name);
  CurrencyCR = ;
  CurrencyDR = ;
  CurrencyUpdateDate = ;
  CustomerCategory = ;
  CustomerName = ;
  DailyInterest = select(DaysToMaturity < 0, 
  true->0, 
  false->object.Trade.FaceValue * trade:interestRateAtTradeTime / 100 / 360);
  DataType = select(object.Trade.BoughtAsString, 
  "Buy"->nil, 
  "Sell"->2);
  DateNow = string(dateToYMD(dateNow()).At(2));
  DateRange = ;
  DayChangeConvexity = ;
  DayChangeCounterparty = ;
  DayChangeCountry = ;
  DayChangeCS01 = ;
  DayChangeIssuer = ;
  DaysDelay = int(date(longFormAttrSettlementDate) - date(object.Trade.Trade.TradeTimeDateOnly));
  DaysToMaturity = dateDifference(endDate, dateToday());
  DayToExpired = int(dateDifference(endDate, startDate) - 30 * MonthToExpired);
  DCIND = select(object.Trade.Nominal > 0, 
  true->"D", 
  false->"C");
  DebitAmount = select(object.Trade.Bought, 
  true->object.Trade.Nominal, 
  false->nil);
  Delta_ExchangeRate = ;
  DeltaCheck = py("Total_Trade", context).deltacheck(object.Trade, ["Portfolio Rho"]);
  DeltaThresholdValue = py("Python_Custom_Fields", context).port_threshold_limit(object.Portfolio, "Portfolio Delta Cash", "Exposure", "Pre-Deal", 1);
  DeltaUtilizationPercentage = py("Python_Custom_Fields", context).port_utilization_percentage(object.Portfolio, "Portfolio Delta Cash", "Exposure", "Pre-Deal", 1);
  DENOM = 1.0;
  Dept = ;
  DerivativesPayables = ;
  DerivativesReceivables = ;
  Desc = 
# <ERROR> unexpected extra input, got 'PINJAMAN' (at pos 6)
BUNGA PINJAMAN LAINNYA DITM LAINNYA;
  Descr = "BUNGA PINJAMAN LAINNYA DITM LAINNYA";
  DescriptionUnderlying = ;
  dictPaymentTypeAmount = createDictionary(paymentTypeArray, paymentAmountArray);
  Diff1 = ;
  Diff2 = ;
  Difference = select(object.Trade.Premium - tradeFXAttrFarSellAmount == nil, 
  true->object.Trade.Premium, 
  false->object.Trade.Premium - tradeFXAttrFarSellAmount);
  Difference_EndCash = ;
  DiffRate = ;
  DiffRate100 = ;
  DirAmount1 = ;
  DirAmount2 = ;
  DRCRIND = select(object.Trade.Nominal > 0, 
  true->"DR", 
  false->"CR");
  eFx = ;
  EMAS = ;
  EndAccrualFA = py("Report_Python", context).EndAccrual(object.Trade);
  EndCashRepo = object.Trade.FaceValue + (object.Trade.FaceValue * object.Instrument.FirstFixedLeg.FixedRate / 100);
  EndInterest = object.Trade.EndCash + object.Trade.StartCash;
  EndValue = float(object.Trade.Nominal) + float(accruedOpenValueColumn);
  EquivalentAmountIDR = object.Trade.Price * object.Trade.Quantity;
  EquivalentMarketIDR = object.Trade.Price * marketPeriodValue;
  EqvUSD = nominalAmountForStandardCalculations * py("Python_Price_Calc", context).UpdatedUSDEoDPrice(object.Trade.Currency.Name);
  ExchangeRateNTCS = ;
  ExcRate = object.Trade.Instrument.Prices.Last.Settle;
  ExcRateAgainstCNY = object.Trade.Instrument.Prices;
  ExcRateAgainstUSD = object.Trade.Instrument.Prices;
  ExtractDate = ;
  ExtractFlag = ;
  FaceAmount = py("Total_Trade", context).remove_bg(object.Trade.FaceValue);
  Facility = object.Instrument.Type;
  FarAmount = py("Total_Trade", context).remove_bg(object.Trade.Nominal);
  FarAmount1 = py("Total_Trade", context).remove_FarAmount1(object.Trade.FarAmount1);
  FarAmount2 = py("Total_Trade", context).remove_FarAmount2(object.Trade.FarAmount2);
  FBIThisYear = select(dateToYMD(object.Trade.ValueDay).At(0) == dateToYMD(dateToday()).At(0), 
  true->fees, 
  false->denominatedvalue(0.0, "IDR", , ));
  FBIYesteryear = select(dateToYMD(object.Trade.ValueDay).At(0) == dateToYMD(dateToday()).At(0) - 1, 
  true->fees, 
  false->denominatedvalue(0.0, "IDR", , ));
  FDQ = select(object.Trade.Counterparty <> nil, 
  true->select(object.Trade.Counterparty.Country, 
    "China"->"No FDQ", 
    default->select(Term, 
      "Short"->"Short Term FDQ", 
      "Long"->"Long Term FDQ")), 
  false->nil);
  FeeIDR = object.Trade.Fee * longFormAttrExchangeRate;
  FITCHDataBloomberg = ;
  FITCHDataNTCS = ;
  FITCHHasilMatch = ;
  FITCHINDODataBloomberg = ;
  FITCHINDODataNTCS = ;
  FITCHINDOHasilMatch = ;
  FLAG = select(object.Journal.Amount > 1000000000000.0, 
  true->"Y", 
  false->"NOK");
  Flow = select(object.Trade.Instrument.InsType, 
  "Repo/Reverse"->uniqueCouponInTheoreticalPrice, 
  "BasketRepo/Reverse"->uniqueCouponInTheoreticalPrice, 
  "Basket Repo/Reverse Legacy"->uniqueCouponInTheoreticalPrice, 
  default->nil);
  ForwardRate = ;
  FrekuensiPenjualan = ;
  FrekuensiPenjualan_Yesterday = ;
  Frequency = object.Trades.Size;
  FTotal = py("Report_Python", context).remove_bg(object.Trade.Premium);
  FTotal_Premium = py("Total_Trade", context).remove_bg(object.Trade.Premium);
  FVLevel = ;
  FWDRate = ;
  FXFW = ;
  GainOrLoss = ;
  GeneralLedger = ;
  getLastMonthEoDPrice = py("Python_Price_Calc", context).SGDEoDPricePrevMonth(object.Trade.Currency.Name);
  GLNO = object.Trade.Journals.Size;
  GMRAIdentification = ;
  GrandTotal = ;
  GroupID = ;
  Haircut = ;
  HedgingFairValue = ;
  HedgingNotAmt = ;
  HoldingInterestAmount = 0;
  holdingPeriod = dateDifference(dateToday, object.Trade.TradeTime);
  HoldingPeriodESPT = dateDifference(TradeTimeDateOnly, object.Trade.AcquireDay);
  HTM = ;
  IBPA = ;
  ID = "008000000";
  IDays = dateDifference(endDate, startDate);
  Indicator1 = 1;
  InOut = select(object.Trade.Nominal > 0, 
  true->"IN", 
  false->"OUT");
  InputDate = asDate(object.Trade.UpdateTime);
  InputTime = acm.Time.DateTimeToTime(object.Trade.UpdateTime);
  Ins_Bond = ;
  Ins_Commodity = ;
  Ins_Curr = ;
  Ins_CurrSwap = ;
  Ins_Deposit = ;
  Ins_MM_IP = ;
  Ins_MM_IT = ;
  Ins_Option = ;
  Ins_Repo = ;
  Ins_Swap = ;
  InstrumentCode = py("Report_Python_P2", context).FirstWordOfInstrument(object.Instrument.Name);
  instrumentConf = object.Trade.Instrument;
  IntCalcRule = "OFC";
  INTCCY = ;
  InterestAccrued = ;
  InterestAmount = ;
  InterestIncome = ;
  InterestIncomeTax = ;
  InterestPayment = ;
  InterestProceed = py("Total_Trade", context).interestproceed2(object.Trades);
  InterestReceived = ;
  Internalizer = object.Trade.Price - object.Trade.SalesMargin;
  InterofficeLongTerm = select(object.Trade.Counterparty.Type, 
  "Interbranch"->select(Term, 
    "Long"->object.Trade.FaceValue), 
  default->"-");
  InterofficeShortTerm = select(object.Trade.Counterparty.Type, 
  "Interbranch"->select(Term, 
    "Short"->object.Trade.FaceValue), 
  default->"-");
  IntradayLimitAvailable = ;
  IntradayLimitGiven = ;
  INVSEQ = py("Total_Trade", context).invseq(parent:trades).At(object.Instrument.InstrumentAlias.SERIES);
  Invtype = select(object.Trade.Portfolio <> nil, 
  true->select(object.Trade.Portfolio.TypeChlItem, 
    "Amortised Cost"->"H", 
    "FVOCI"->"A", 
    "FVTPL"->"T"), 
  false->nil);
  IR_1 = "Ir";
  IRS = ;
  IssuerLimit = ;
  IssuerPercentUtilization = 1;
  IssuerUtilization = ;
  JumlahHariTunggakan = ;
  Keterangan = ;
  KETERANGAN = ;
  KodeFormFI = "F113317";
  KodeFormMDS = "F113310";
  KodeFormPasal26 = "F113308";
  KodeKondisi = ;
  KodeSebabMacet = ;
  Kolektibilitas = ;
  Kurs = ;
  KursBeli = py("Total_Trade", context).calculate_kursbeli(object.Trade, ["Bought or Sold", "Exchange Rate"]);
  KursJual = py("Total_Trade", context).calculate_kursjual(object.Trade, ["Bought or Sold", "Exchange Rate"]);
  KursTengah = ;
  LastCouponDate = ;
  LastFixingRate = ;
  LastPaymentPeriod = py("Report_Python", context).get_start_date_cashflow(object.Trade);
  LBU = py("Total_Trade", context).staticmonth;
  legs = object.Trade.Instrument.Legs;
  Limit = 500000000;
  LimitAmtCurr = 
# <ERROR> expected method name, got '(' (at pos 45)
py("python_module", context).python_function.(input_object);
  LimitHolding = "186";
  LimitMO01 = "Rp 162,85T";
  LimitMO10 = "-5.00%";
  Listing = ;
  LOB = ;
  LongTermFDQ = select(FDQ, 
  "Long Term FDQ"->object.Trade.FaceValue, 
  default->"-");
  LowerRate = ;
  MainCurrency = select(object.Trade.PositionOrInstrumentPair == nil, 
  true->object.Trade.Currency.Name, 
  false->object.Trade.PositionOrInstrumentPair.Instrument1.Name);
  MarketValue2 = (marketPrice * object.Trade.Nominal) / 100;
  MarketYield = ;
  MarkToMarket = ;
  MarkToModel = ;
  MATPROCAMT = ;
  MMDF = ;
  MMInterbank = py("Report_Python", context).MMInterbankLIQ19(object.Trade, ["CL", "MD", "CMP", "CMT", "OVP", "OVT", "BLT", "SHARI", "BA"]);
  MMInterbankPlacement = ;
  MMInterbankTaken = ;
  MMLF = ;
  MoneyAmount = py("Total_Trade", context).moneyamount(object.Trade, ["Trade Nominal", "Exchange Rate"]);
  Month = py("Total_Trade", context).month(object.Trade.ValueDay);
  MonthNow = string(dateToYMD(dateNow()).At(1));
  MonthNumber = py("Total_Trade", context).monthnumber(object.Trade.ValueDay);
  MonthToExpired = int(dateDifference(endDate, startDate) / 30);
  MOODYSDataBloomberg = ;
  MOODYSDataNTCS = ;
  MOODYSHasilMatch = ;
  Movement = py("Report_Python", context).calculate_amount_movement(object.Trade);
  MTD = ;
  MTM = ;
  mtmPriceBond = select(closingPriceBond <> nil, 
  true->select(origprice_8 <> nil, 
    true->(closingPriceBond - origprice_8) * object.Trade.Nominal / 100, 
    false->(closingPriceBond - 0) * object.Trade.Nominal / 100), 
  false->select(origprice_8 <> nil, 
    true->(0 - origprice_8) * object.Trade.Nominal / 100, 
    false->(0 - 0) * object.Trade.Nominal / 100));
  NasabahBeli = longFormAttrBuyAmount;
  NasabahJual = longFormAttrSellAmount;
  NAV = ;
  NDFFixingPrice = select(py("Total_Trade", context).NDFInstrument(object.Trade.Instrument.Name), 
  true->object.Instrument.Trades.Last.Price, 
  false->nil);
  NearAmount = py("Total_Trade", context).remove_bg(object.Trade.Premium);
  NearAmount1 = py("Total_Trade", context).remove_NearAmount1(object.Trade.Nominal);
  NearAmount2 = py("Total_Trade", context).remove_NearAmount2(object.Trade.NearAmount2);
  NearFarFXSwap = select(object.Trade.IsFxSwap, 
  true->select(object.Trade.IsFxSwapFarLeg, 
    true->"FAR", 
    false->"NEAR"), 
  false->nil);
  NetAmount = py("Total_Trade", context).netamount(object.Trade, ["EquivalentAmountIDR", "Trade Price"]);
  NewCTPTYCIF = shunt(acm.Time.DateToday == object.Trade.UpdateTime, 
  true->object.Trade.Counterparty.HostID, 
  false->nil);
  NewCTPTYReff = shunt(acm.Time.DateToday == object.Trade.UpdateTime, 
  true->object.Trade.Counterparty, 
  false->nil);
  NEWPLNID = select(object.Trade.OptKey3, 
  "DL"->select(object.Trade.OptKey4, 
    "BLT"->"01", 
    "MD"->"01", 
    "BA"->"22", 
    "CMT"->"22", 
    "OVT"->"22"), 
  "BOND"->"", 
  "REPO"->"19");
  NextCouponDate = ;
  NextPaymentDate = py("Report_Python", context).get_projected_and_paydate_from_cashflow(object.Trade, "PayDate");
  NextPaymentPeriod = py("Report_Python", context).get_end_date_cashflow(object.Trade);
  NII = ;
  NIIThisYear = select(dateToYMD(object.Trade.ValueDay).At(0) == dateToYMD(dateToday()).At(0), 
  true->interest, 
  false->denominatedvalue(0.0, "IDR", , ));
  NIIYesteryear = select(dateToYMD(object.Trade.ValueDay).At(0) == dateToYMD(dateToday()).At(0) - 1, 
  true->interest, 
  false->denominatedvalue(0.0, "IDR", , ));
  NilaiBeliKembali = ;
  NilaiPasar = object.Trade.Nominal * markToMarketPeriodValue;
  NilaiPasar2 = object.Trade.Nominal * markToMarketPeriodValue * object.Trade.Quantity;
  NilaiPerolehan = object.Trade.Nominal * object.Trade.Price;
  NilaiPerolehan2 = object.Trade.Nominal * object.Trade.Price * object.Trade.Quantity;
  nisbahBagiHasil = ;
  NominalAbsolute = abs(object.Trade.Nominal);
  NominalCoupon = ;
  NominalCustom = abs(object.Trade.Nominal);
  NominalNOP = nominalAmountForStandardCalculations;
  NominalNOP_USD = ;
  NominalSGD = select(object.Trade.Currency.Name, 
  "SGD"->abs(object.Trade.Nominal), 
  default->abs(object.Trade.Nominal * py("Python_Price_Calc", context).RateAmountToSGD(object.Trade.Currency.Name)));
  NominalSumUp = object.Trade.Nominal;
  NominativeList = string(object.Trade.Instrument) + "/" + string(object.Trade.OptKey4AsEnum);
  NomorBuktiPotongFI = "TRO/TAX/" + string(ValueDay_Month_Roman) + "/" + string(object.Trade.Oid) + "/" + string(TahunPajak);
  NomorBuktiPotongMDS = "TRO/TAX/" + string(ValueDay_Month_Roman) + "/TO" + string(object.Trade.Oid) + "MDS/" + string(TahunPajak);
  NomorBuktiPotongPasal26 = "TRO/TAX/" + string(ValueDay_Month_Roman) + "/" + string(object.Instrument) + "/" + string(TahunPajak);
  NomorIdentifikasi = py("Total_Trade", context).noid(object.Trade, ["Instrument Type", "Trade Optional Key 3", "Trade Number"]);
  NOP_PV = py("Report_Python_P2", context).NOP_PV(object.Trade.Portfolio);
  NOPinUSD = select(string(displayCurrency), 
  "USD"->abs(object.Trade.Nominal), 
  default->abs(object.Trade.Nominal * py("Python_Price_Calc", context).UpdatedUSDEoDPrice(string(displayCurrency))));
  NOPOvernight = ;
  NOPThresholdValue = py("Python_Custom_Fields", context).port_threshold_limit(object.Portfolio, "Final NOP Portfolio(PV)", "Exposure", "Compliance", 2);
  NOPUtilizationPercentage = py("Python_Custom_Fields", context).port_utilization_percentage(object.Portfolio, "Final NOP Portfolio(PV)", "Exposure", "Compliance", 2);
  Notional1DayChange = ;
  NotionalLimit = ;
  NotionalPercentageUtilization = ;
  NotionalUtilization = ;
  NPWPPotong = 93000;
  OBJID = ;
  OffShoreFunding = select(ACCTTYPE, 
  "IT/FB"->object.Trade.FaceValue, 
  default->"-");
  One = 1;
  OneDayChange = ;
  OnShoreFunding = select(Sources, 
  "On Shore"->select(object.Trade.OptKey3AsEnum, 
    "IT"->object.Trade.FaceValue), 
  default->"-");
  OnShoreLongTerm = select(Sources, 
  "On Shore"->select(Term, 
    "Long"->object.Trade.FaceValue), 
  default->"-");
  OnShoreShortTerm = select(Sources, 
  "On Shore"->select(Term, 
    "Short"->object.Trade.FaceValue), 
  default->"-");
  OpeningBalance = ;
  ORD = ;
  OriginalCostAmt = object.Trade.Nominal + mtmPriceBond;
  OthersFairValue = ;
  OthersNotAmt = ;
  OurAccount = object.Trade.Settlements.Last.AcquirerAccountRef.Bic;
  OutstandingEqvUSD = ;
  P2_RepoRate = select(object.Trade.Instrument.InsType, 
  "Swap"->object.Trade.Instrument.Legs.At(1).FixedRate, 
  "Bill"->0, 
  "FRN"->object.Trade.Instrument.CouponRate, 
  default->instrumentConf :* "uniqueCouponInTheoreticalPrice");
  parent = object.Parent;
  PayDate = ;
  PayDayCustom = py("Total_Trade", context).payday(object.Trades);
  PayLegEqvUSD = select(currency, 
  "USD"->object.Trade.Nominal, 
  "IDR"->object.Trade.Nominal);
  Payment = object.Trade.Payments;
  paymentAmountArray = Payment :* "paymentAmount";
  PaymentSystem = ;
  paymentTypeArray = string(Payment :* "paymentType");
  PayOrReceive = select(object.Trade.Nominal > 0, 
  true->"RECEIVE", 
  false->"PAY");
  PBOCRate = ;
  PEFINDODataBloomberg = ;
  PEFINDODataNTCS = ;
  PEFINDOHasilMatch = ;
  Pemeringkat = ;
  Percentage_Yesterday = ;
  PercentageChange = ((SettlePriceMTM - object.Trade.Price) / object.Trade.Price);
  PercentageHolding = (holdingPeriod / LimitHolding) * 100;
  PercentageMO01RPL = (rPLColumn / 162850000000000.0) * 100;
  PercentageMO01RPL_Yesterday = (RPL_Yesterday / 162850000000000.0) * 100;
  PercentageMO01UPL = (uPLColumn / 162850000000000.0) * 100;
  PercentageMO01UPL_Yesterday = (UPL_Yesterday / 162850000000000.0) * 100;
  PercentageVolumeYesterday = ;
  PercentUtilization = ;
  PercentUtilizationTrading = ;
  Peringkat = ;
  Period = ;
  Period1 = "1W";
  Period2 = "1M";
  Period3 = "3M";
  Period4 = "6M";
  Period5 = "1Y";
  PhysicalForeign = select(object.Trade.Counterparty.Country, 
  "Indonesia"->"N", 
  default->"Y");
  PLNID = select(object.Trade.OptKey3, 
  "DL"->select(object.Trade.OptKey4, 
    "BLT"->"01", 
    "MD"->"01", 
    "BA"->"22", 
    "CMT"->"14", 
    "OVT"->"14"), 
  "BOND"->"", 
  "REPO"->"19");
  portfolio = object.Trade.Portfolio;
  PortLimit = py("MO_Column_Helpers", context).get_threshold_value_by_port(object.Trade.Portfolio);
  PortUtilPercent = py("MO_Column_Helpers", context).get_util_percent_by_port(object.Trade.Portfolio);
  PortUtilStatus = py("MO_Column_Helpers", context).get_appropriate_threshold_type_by_port(object.Trade.Portfolio);
  PositionCCY1 = select(object.Trade.Bought, 
  true->nil, 
  false->object.Trade.Nominal);
  PositionEOD = py("Total_Trade", context).positionEOD;
  PostingBySystem = "System";
  PPlusI = object.Trade.FaceValue + TotalInterest;
  PPlusIAboveOneYear = select(DaysToMaturity > 360, 
  true->PPlusI, 
  false->"-");
  PPlusICurrent = select(DaysToMaturity > 0, 
  true->select(DaysToMaturity < 2, 
    true->PPlusI, 
    false->"-"), 
  false->"-");
  PPlusINineMonthToTwelveMonth = select(DaysToMaturity > 274, 
  true->select(DaysToMaturity < 361, 
    true->PPlusI, 
    false->"-"), 
  false->"-");
  PPlusIOneMonthToTwoMonth = select(DaysToMaturity > 30, 
  true->select(DaysToMaturity < 62, 
    true->PPlusI, 
    false->"-"), 
  false->"-");
  PPlusIOneWeek = select(DaysToMaturity > 1, 
  true->select(DaysToMaturity < 8, 
    true->PPlusI, 
    false->"-"), 
  false->"-");
  PPlusIOneWeekToOneMonth = select(DaysToMaturity > 7, 
  true->select(DaysToMaturity < 31, 
    true->PPlusI, 
    false->"-"), 
  false->"-");
  PPlusISixMonthToNineMonth = select(DaysToMaturity > 183, 
  true->select(DaysToMaturity < 275, 
    true->PPlusI, 
    false->"-"), 
  false->"-");
  PPlusIThreeMonthToSixMonth = select(DaysToMaturity > 91, 
  true->select(DaysToMaturity < 184, 
    true->PPlusI, 
    false->"-"), 
  false->"-");
  PPlusITwoMonthToThreeMonth = select(DaysToMaturity > 61, 
  true->select(DaysToMaturity < 92, 
    true->PPlusI, 
    false->"-"), 
  false->"-");
  premiumCustom = object.Trade.Premium;
  PrevEffDate = py("Total_Trade", context).yesterdayfunc(object.Trade.ValueDay);
  PrevPrevEffDate = py("Total_Trade", context).yesterdayfunc2(object.Trade.ValueDay);
  PrevPrevPrice = py("Total_Trade", context).prevprice(object.Trade, ["PrevPrevEffDate"]);
  PrevPrice = py("Total_Trade", context).prevprice(object.Trade, ["PrevEffDate"]);
  PrevYearPrice = ;
  PriceChange = py("Python_Price_Calc", context).calcPriceChange(MarketValue2, BOOKVALAMT);
  PriceYield8 = select(object.Instrument.InsType, 
  "Bill"->tradeYieldToMaturity, 
  default->object.Trade.Price);
  PriceYST = ;
  PRINPAYAMT = object.Trade.FaceValue * object.Trade.Price;
  PRINPAYAMT_HKD = object.Trade.FaceValue * object.Trade.Price * py("Report_Python_P2", context).hkd_price(object.Trade);
  PRINPAYAMT_USD = object.Trade.FaceValue * object.Trade.Price * py("Report_Python_P2", context).usd_price(object.Trade);
  ProceedAmount = ;
  ProcessFlag = ;
  ProdType = object.Trade.OptKey3.Name + "/" + object.Trade.OptKey4.Name;
  Product = ;
  PV01ThresholdValue = py("Python_MO_Custom_Fields", context).get_threshold_limit_by_rule_name(object.Portfolio, "PV01_Treasury HO");
  PV01UtilizationPercentage = py("Python_MO_Custom_Fields", context).get_utilization_percentage_by_rule_name(object.Portfolio, "PV01_Treasury HO");
  QuantityCustom = py("Report_Python", context).get_Collateral_Trade(object.Trade).FaceValue;
  QuantityUsed = object.Instrument.Trades.Size;
  RATE_8 = select(object.Trade.Currency, 
  "IDR"->1);
  RatesOPICS = select(py("Python_Price_Calc", context).IsTimeInRange(object.Trade, "TradeTime", "19:02:00", "23:59:59"), 
  true->py("Python_Price_Calc", context).getCurrencyConverter(object.Instrument.Name, object.Instrument.Currency.Name, "EOD_MtM", "SETTLE", "\'" + string(object.Trade.TradeTimeDateOnly) + "\'", "\'" + string(object.Trade.TradeTimeDateOnly) + "\'").At(0).At(2), 
  false->py("Python_Price_Calc", context).getCurrencyConverter(object.Instrument.Name, object.Instrument.Currency.Name, "EOD_MtM", "SETTLE", "\'" + string(py("Python_Price_Calc", context).DateAdjustment(string(object.Trade.TradeTimeDateOnly), "-1d", "Singapore", "Preceding")) + "\'", "\'" + string(py("Python_Price_Calc", context).DateAdjustment(string(object.Trade.TradeTimeDateOnly), "-1d", "Singapore", "Preceding")) + "\'").At(0).At(2));
  Reff = object.Trade.Name + "/" + object.Trade.Instrument.Name + "/" + object.Trade.OptKey3 + object.Trade.OptKey4;
  Reksadana = ;
  REM = ;
  RemarkOutstanding = py("Total_Trade", context).cek_tanggal_outstanding(object.Trade.ValueDay);
  RemarkSellBuy = py("Total_Trade", context).remarksellbuy(object.Trade, ["Bought or Sold", "Call or Put", "Currency1", "CPMoneyCcy", "Currency2"]);
  Repo = instrumentRepoRate * object.Trade.Nominal / 100;
  RepoBI = ;
  RepoCleanPrice = select(object.Instrument.InsType, 
  "Repo/Reverse"->object.Trade.Price - RepoHaircut, 
  "BasketRepo/Reverse"->py("Report_Python", context).get_Collateral_Trade(object.Trade).Price - RepoHaircut, 
  default->nil);
  RepoDirtyPrice = select(object.Instrument.InsType, 
  "Repo/Reverse"->RepoCleanPrice + py("Report_Python", context).get_AccruedInterest(object.Trade), 
  "BasketRepo/Reverse"->RepoCleanPrice + py("Report_Python", context).get_AccruedInterest(object.Trade), 
  default->nil);
  RepoHaircut = select(object.Instrument.InsType, 
  "Repo/Reverse"->object.Trade.Haircut, 
  "BasketRepo/Reverse"->py("Report_Python", context).get_Repo_Haircut(object.Trade), 
  default->nil);
  RepoInterbank = ;
  RepoUnderlyingName = select(object.Instrument.InsType, 
  "Repo/Reverse"->object.Instrument.Underlying.Name, 
  "BasketRepo/Reverse"->py("Report_Python", context).get_Collateral_Instrument(object.Trade), 
  default->nil);
  RepoYield = py("Report_Python", context).Repo_Trade_Yield(object.Trade);
  RepurchaseAmount = py("Report_Python", context).get_Repurchase_Amount(object.Trade);
  RevalRate = ;
  RevaluationAmount = presentValue;
  RevRepoBI = ;
  RevRepoInterbank = ;
  RiskWeight = ;
  RowNumber = py("Report_Python", context).generate_row_number(object.Trade.Oid, "BO46", object.Trade.OptKey2AsEnum);
  RPL_Yesterday = py("Report_Python", context).calculate_PL_yesterday(object.Trade, "RPL");
  SACCR_RWA = ;
  SB_Dimiliki = ;
  SB_Terbit = ;
  SCHED_Pay_Freq = select(object.Trade.Instrument.Legs.First.PayType, 
  "Receive"->select(object.Trade.Instrument.Legs.First.RollingPeriod, 
    "3m"->"Q", 
    "6m"->"S", 
    "12m"->"Y"), 
  "Pay"->select(object.Trade.Instrument.Legs.Last.RollingPeriod, 
    "3m"->"Q", 
    "6m"->"S", 
    "12m"->"Y"));
  Scttype = select(object.Trade.Portfolio <> nil, 
  true->select(object.Trade.Portfolio.TypeChlItem, 
    "Amortised Cost"->"HTM", 
    "FVOCI"->"AFS", 
    "FVTPL"->"TRD"), 
  false->nil);
  SECID = select(object.Trade.OptKey3AsEnum, 
  "BOND"->object.Instrument.Name, 
  default->py("Report_Python", context).get_Collateral_Instrument_ISIN(object.Trade));
  SECIDPrice = ;
  SecuritiesRating = ;
  SecuritiesRatingInstituition = ;
  SecuritySubtype = ;
  SellAmountCustom = select(object.Trade.BoughtAsString, 
  "Sell"->object.Trade.Nominal) / 1000000000;
  SEQNUM = ;
  SETTAMT = ;
  SETTAVGCOST = ;
  SETTBASEAMT = ;
  SETTCCY = ;
  SettlePriceMTM = py("Report_Python_P2", context).get_price_entry(object.Trade.Instrument.Name, object.Trade.Currency.Name, "EOD_MtM");
  ShortTermFDQ = select(FDQ, 
  "Short Term FDQ"->object.Trade.FaceValue, 
  default->"-");
  SNPDataBloomberg = ;
  SNPDataNTCS = ;
  SNPHasilMatch = ;
  SourceData = ;
  Sources = select(object.Trade.Counterparty <> nil, 
  true->select(object.Trade.Counterparty.Country, 
    "China"->"On Shore", 
    default->"Off Shore"), 
  false->nil);
  SpotAssets = select(object.Trade.OptKey4, 
  "TOD"->object.Trade.Nominal, 
  "TOM"->object.Trade.Nominal, 
  "SPOT"->object.Trade.Nominal, 
  default->0);
  SpotLiabilities = select(object.Trade.OptKey4, 
  "FWD"->object.Trade.Nominal, 
  "NDF"->object.Trade.Nominal, 
  "NS"->object.Trade.Nominal, 
  "SWAP"->object.Trade.Nominal, 
  "OPT"->object.Trade.Nominal, 
  default->0);
  SRC_STM_ID = ;
  StandardYearlyLossThresholdValue = py("Python_Custom_Fields", context).port_threshold_limit(object.Portfolio, "Portfolio Total Profit and Loss", "Exposure", "Pre-Deal", 0);
  StandardYearlyLossUtilizationPercentage = py("Python_Custom_Fields", context).port_utilization_percentage(object.Portfolio, "Portfolio Total Profit and Loss", "Exposure", "Pre-Deal", 0);
  StartAccrualFA = py("Report_Python", context).StartAccrual(object.Trade);
  StartValue = float(object.Trade.Nominal) * float(uniqueCouponInTheoreticalPrice);
  StatusAntasena = ;
  StatusBondCutLoss = ;
  StatusBondHolding = ;
  StatusLimit = ;
  StatusLimitExpiry = ;
  StatusLimitTrading = ;
  StatusMatchUnmatch = ;
  StatusNTCS = ;
  StatusRegistration = ;
  StatusUPL = ;
  STDEV = float(object.Trade.Price) - float(marketPrice);
  Structured = ;
  SUBLMTNAME = ;
  SWAP = ;
  TahunPajak = string(dateToYMD(object.Trade.ValueDay)[0]);
  Tarif1 = accrued / HoldingPeriodESPT;
  Tarif2 = accrued / HoldingPeriodESPT / 2;
  TarifPajak = 20;
  Tenor = select(int((endDate - object.Trade.ValueDay) / 365) < 1, 
  true->string(int((endDate - object.Trade.ValueDay) / 30)) + " M", 
  false->string(int((endDate - object.Trade.ValueDay) / 365)) + " Y");
  TenorTahun = py("Report_Python", context).get_year_difference(object.Trade.Instrument.EndDate, object.Trade.ValueDay);
  Term = select(IDays <= 365, 
  true->"Short", 
  default->"Long");
  Term_Deposit = ;
  TermofPeriod = ;
  TERMS = ;
  TglKondisi = ;
  TglMacet = ;
  tingkatIndikasiImbalan = ;
  ToleranceLimit = ;
  ToleranceLimit2 = ;
  Total = ;
  Total_Cashflow = ;
  Total_coupon = ;
  Total_EndCash = select(object.Trade.BoughtAsString, 
  "Buy"->object.Trade.EndCash, 
  "Sell"->-1 * object.Trade.EndCash);
  TotalACCINT = ;
  TotalBorrowing = select(object.Trade.OptKey3AsEnum, 
  "IT"->object.Trade.FaceValue, 
  default->"-");
  TotalINTAMT = ;
  TotalInterest = object.Trade.FaceValue * trade:interestRateAtTradeTime / 100 * IDays / 360;
  TotalNasabah = NasabahJual + NasabahBeli;
  TotalPaymentReceive = ;
  TotalPlacement = select(object.Trade.OptKey3AsEnum, 
  "IP"->object.Trade.FaceValue, 
  default->"-");
  TotalPrincipal = ;
  TotalSpot = SpotAssets + SpotLiabilities;
  TotalTaxableIncome = 0;
  TPL_Yesterday = py("Report_Python", context).calculate_PL_yesterday(object.Trade, "TPL");
  TradeNumber = Trade.No;
  TradeNumberInstrument = object.Trade.Name + " " + object.Trade.Instrument.Name;
  TradeTimeDateOnly = asDate(object.Trade.TradeTime);
  TradeTimeTimeOnly = object.Trade.TradeTime;
  TradeTypeDesc = ;
  TranslationAmount = ;
  TRD = ;
  TujuanPortfolio = select(object.Trade.Portfolio.Name, 
  "BMSH - ACU - BANKING"->"Liquidity/Hedging", 
  "BBM BMSH - ACU"->"Liquidity/Hedging", 
  "Banking Derivatives BMSH - ACU"->"Liquidity/Hedging", 
  "BB Derivatives BMSH - ACU"->"Liquidity/Hedging", 
  "Banking FX BMSH - ACU"->"Liquidity/Hedging", 
  "BB FX BMSH - ACU"->"Liquidity/Hedging", 
  "Banking IR BMSH - ACU"->"Liquidity/Hedging", 
  "BB Bond BU BMSH - ACU"->"Liquidity/Hedging", 
  "Bonds BU Commercial Banking SH - ACU"->"Liquidity/Hedging", 
  "Commercial 1 BMSH - ACU"->"Liquidity/Hedging", 
  "Commercial 2 BMSH - ACU"->"Liquidity/Hedging", 
  "Commercial 3 BMSH - ACU"->"Liquidity/Hedging", 
  "Commercial 4 BMSH - ACU"->"Liquidity/Hedging", 
  "Commercial 5 BMSH - ACU"->"Liquidity/Hedging", 
  "Commercial 6 BMSH - ACU"->"Liquidity/Hedging", 
  "Bonds BU Corporate Banking SH - ACU"->"Liquidity/Hedging", 
  "CB 1 BMSH - ACU"->"Liquidity/Hedging", 
  "CB 2 BMSH - ACU"->"Liquidity/Hedging", 
  "CB 3 BMSH - ACU"->"Liquidity/Hedging", 
  "CB 4 BMSH - ACU"->"Liquidity/Hedging", 
  "CB 5 BMSH - ACU"->"Liquidity/Hedging", 
  "CB 6 BMSH - ACU"->"Liquidity/Hedging", 
  "Bonds BU GVI BMSH - ACU"->"Liquidity/Hedging", 
  "GVI 1 BMSH - ACU"->"Liquidity/Hedging", 
  "GVI 2 BMSH - ACU"->"Liquidity/Hedging", 
  "Bonds BU IBFI BMSH - ACU"->"Liquidity/Hedging", 
  "IBFI 1 BMSH - ACU"->"Liquidity/Hedging", 
  "Bonds BU SAM BMSH - ACU"->"Liquidity/Hedging", 
  "SAM 1 BMSH - ACU"->"Liquidity/Hedging", 
  "SAM 2 BMSH - ACU"->"Liquidity/Hedging", 
  "SAM 3 BMSH - ACU"->"Liquidity/Hedging", 
  "BB Bond Treasury BMSH - ACU"->"Liquidity/Hedging", 
  "BB BOND AC BMSH - ACU"->"Liquidity/Hedging", 
  "BB BOND OCI BMSH - ACU"->"Liquidity/Hedging", 
  "BB BOND PL BMSH - ACU"->"Liquidity/Hedging", 
  "BB Bond Treasury Sharia BMSH - ACU"->"Liquidity/Hedging", 
  "BB BOND SHARIA AC BMSH - ACU"->"Liquidity/Hedging", 
  "BB BOND SHARIA  OCI BMSH - ACU"->"Liquidity/Hedging", 
  "BB BOND SHARIA PL BMSH - ACU"->"Liquidity/Hedging", 
  "LAL BMSH - ACU"->"Liquidity/Hedging", 
  "ALM Bilateral Loans BMSH - ACU"->"Liquidity/Hedging", 
  "ALM Bonds Issued BMSH - ACU"->"Liquidity/Hedging", 
  "LIQ IB BMSH - ACU"->"Liquidity/Hedging", 
  "LIQ MM BMSH - ACU"->"Liquidity/Hedging", 
  "LIQ NOS BMSH - ACU"->"Liquidity/Hedging", 
  "BMSH - ACU - CLIENT"->"Client Flow", 
  "Bonds with Customer BMSH - ACU"->"Client Flow", 
  "Derivative with Customer BMSH - ACU"->"Client Flow", 
  "FX with Customer BMSH - ACU"->"Client Flow", 
  "BMSH - ACU - TRADING"->"Trading", 
  "FXT BMSH - ACU"->"Trading", 
  "FX Derivatives 1 BMSH - ACU"->"Trading", 
  "FX Derivatives 2 BMSH - ACU"->"Trading", 
  "FX Spot 1 BMSH - ACU"->"Trading", 
  "FX Spot 2 BMSH - ACU"->"Trading", 
  "IRT BMSH - ACU"->"Trading", 
  "IRT DCM 1 BMSH - ACU"->"Trading", 
  "IRT DCM 2 BMSH - ACU"->"Trading", 
  "IRT Derivative BMSH - ACU"->"Trading", 
  "IRT Derivative 1 BMSH - ACU"->"Trading", 
  "IRT Derivative 2 BMSH - ACU"->"Trading", 
  "IRT MM BMSH - ACU"->"Trading", 
  "IRT MM Bond RDPU 1 BMSH - ACU"->"Trading", 
  "IRT MM Bond RDPU 2 BMSH - ACU"->"Trading", 
  "IRT MM Depo Loan Repo RR 1 BMSH - ACU"->"Trading", 
  "IRT MM Depo Loan Repo RR 2 BMSH - ACU"->"Trading", 
  "BMSH - DBU - BANKING"->"Liquidity/Hedging", 
  "BBM BMSH - DBU"->"Liquidity/Hedging", 
  "Banking Derivatives BMSH - DBU"->"Liquidity/Hedging", 
  "BB Derivatives BMSH - DBU"->"Liquidity/Hedging", 
  "Banking FX BMSH - DBU"->"Liquidity/Hedging", 
  "BB FX BMSH - DBU"->"Liquidity/Hedging", 
  "Banking IR BMSH - DBU"->"Liquidity/Hedging", 
  "BB Bond BU BMSH - DBU"->"Liquidity/Hedging", 
  "Bonds BU Commercial Banking SH - DBU"->"Liquidity/Hedging", 
  "Commercial 1 BMSH - DBU"->"Liquidity/Hedging", 
  "Commercial 2 BMSH - DBU"->"Liquidity/Hedging", 
  "Commercial 3 BMSH - DBU"->"Liquidity/Hedging", 
  "Commercial 4 BMSH - DBU"->"Liquidity/Hedging", 
  "Commercial 5 BMSH - DBU"->"Liquidity/Hedging", 
  "Commercial 6 BMSH - DBU"->"Liquidity/Hedging", 
  "Bonds BU Corporate Banking SH - DBU"->"Liquidity/Hedging", 
  "CB 1 BMSH - DBU"->"Liquidity/Hedging", 
  "CB 2 BMSH - DBU"->"Liquidity/Hedging", 
  "CB 3 BMSH - DBU"->"Liquidity/Hedging", 
  "CB 4 BMSH - DBU"->"Liquidity/Hedging", 
  "CB 5 BMSH - DBU"->"Liquidity/Hedging", 
  "CB 6 BMSH - DBU"->"Liquidity/Hedging", 
  "Bonds BU GVI BMSH - DBU"->"Liquidity/Hedging", 
  "GVI 1 BMSH - DBU"->"Liquidity/Hedging", 
  "GVI 2 BMSH - DBU"->"Liquidity/Hedging", 
  "Bonds BU IBFI BMSH - DBU"->"Liquidity/Hedging", 
  "IBFI 1 BMSH - DBU"->"Liquidity/Hedging", 
  "Bonds BU SAM BMSH - DBU"->"Liquidity/Hedging", 
  "SAM 1 BMSH - DBU"->"Liquidity/Hedging", 
  "SAM 2 BMSH - DBU"->"Liquidity/Hedging", 
  "SAM 3 BMSH - DBU"->"Liquidity/Hedging", 
  "BB Bond Treasury BMSH - DBU"->"Liquidity/Hedging", 
  "BB BOND AC BMSH - DBU"->"Liquidity/Hedging", 
  "BB BOND OCI BMSH - DBU"->"Liquidity/Hedging", 
  "BB BOND PL BMSH - DBU"->"Liquidity/Hedging", 
  "BB Bond Treasury Sharia BMSH - DBU"->"Liquidity/Hedging", 
  "BB BOND SHARIA AC BMSH - DBU"->"Liquidity/Hedging", 
  "BB BOND SHARIA  OCI BMSH - DBU"->"Liquidity/Hedging", 
  "BB BOND SHARIA PL BMSH - DBU"->"Liquidity/Hedging", 
  "LAL BMSH - DBU"->"Liquidity/Hedging", 
  "ALM Bilateral Loans BMSH - DBU"->"Liquidity/Hedging", 
  "ALM Bonds Issued BMSH - DBU"->"Liquidity/Hedging", 
  "LIQ IB BMSH - DBU"->"Liquidity/Hedging", 
  "LIQ MM BMSH - DBU"->"Liquidity/Hedging", 
  "LIQ NOS BMSH - DBU"->"Liquidity/Hedging", 
  "BMSH - DBU - CLIENT"->"Client Flow", 
  "Bonds with Customer BMSH - DBU"->"Client Flow", 
  "Derivative with Customer BMSH - DBU"->"Client Flow", 
  "FX with Customer BMSH - DBU"->"Client Flow", 
  "BMSH - DBU - TRADING"->"Trading", 
  "FXT BMSH - DBU"->"Trading", 
  "FX Derivatives 1 BMSH - DBU"->"Trading", 
  "FX Derivatives 2 BMSH - DBU"->"Trading", 
  "FX Spot 1 BMSH - DBU"->"Trading", 
  "FX Spot 2 BMSH - DBU"->"Trading", 
  "IRT BMSH - DBU"->"Trading", 
  "IRT DCM 1 BMSH - DBU"->"Trading", 
  "IRT DCM 2 BMSH - DBU"->"Trading", 
  "IRT Derivative BMSH - DBU"->"Trading", 
  "IRT Derivative 1 BMSH - DBU"->"Trading", 
  "IRT Derivative 2 BMSH - DBU"->"Trading", 
  "IRT MM BMSH - DBU"->"Trading", 
  "IRT MM Bond RDPU 1 BMSH - DBU"->"Trading", 
  "IRT MM Bond RDPU 2 BMSH - DBU"->"Trading", 
  "IRT MM Depo Loan Repo RR 1 BMSH - DBU"->"Trading", 
  "IRT MM Depo Loan Repo RR 2 BMSH - DBU"->"Trading");
  Type_Placement = py("Total_Trade", context).get_BoughtorSold(object);
  Type_YC = YC;
  TypeofFunding = "Onshore/OffShore";
  TypeOfSecurities = ;
  TypeUtilization = ;
  Unamortized = ;
  UnamortizedDiscPrem = ;
  UnamortizedInterest = ;
  UnderlyingThreshold = ;
  UnrealizedPlusIncomeToday = uPLColumn + rPLColumn;
  UnrealizedPlusIncomeYesterday = UPL_Yesterday + RPL_Yesterday;
  UPL_Yesterday = py("Report_Python", context).calculate_PL_yesterday(object.Trade, "UPL");
  UpperRate = ;
  UserCancelOrAmendBO = ;
  UserCancelOrAmendFO = ;
  Utilisasi = object.Trade.Amount;
  UtilisasiCreditEquivalent = ;
  UtilizationBond = py("Total_Trade", context).percent(object.Trade, ["Portfolio Average Price", "Mark-to-Market Price"]);
  ValueDay_Month_Roman = select(dateToYMD(object.Trade.ValueDay).At(1), 
  1->"I", 
  2->"II", 
  3->"III", 
  4->"IV", 
  5->"V", 
  6->"VI", 
  7->"VII", 
  8->"VIII", 
  9->"IX", 
  10->"X", 
  11->"XI", 
  12->"XII");
  VarThresholdValue = py("Python_Custom_Fields", context).port_threshold_limit(object.Portfolio, "Portfolio Value at Risk From Scenario", "Exposure", "Periodic", 0);
  VarUtilizationPercentage = py("Python_Custom_Fields", context).port_utilization_percentage(object.Portfolio, "Portfolio Value at Risk From Scenario", "Exposure", "Periodic", 0);
  VERIND = select(object.Trade.Status, 
  "BO Confirmed"->1, 
  default->0);
  VolumeDaily = object.Instrument.PriceFeed.ClosePrice;
  VolumePenjualan = ;
  VolumeYesterday = ;
  WCOLimitCCYCredit = py("WCO_Column_Helpers", context).get_limit_by_port_and_cr(object.Trade.Portfolio, "Exposure Original CCY (credit)");
  WCOLimitCCYNotional = py("WCO_Column_Helpers", context).get_limit_by_port_and_cr(object.Trade.Portfolio, "Exposure Original CCY (notional)");
  WCOLimitIDRCredit = py("WCO_Column_Helpers", context).get_limit_by_port_and_cr(object.Trade.Portfolio, "Exposure EQV IDR (credit)");
  WCOLimitIDRNotional = py("WCO_Column_Helpers", context).get_limit_by_port_and_cr(object.Trade.Portfolio, "Exposure EQV IDR (notional)");
  WCOLimitUSDCredit = py("WCO_Column_Helpers", context).get_limit_by_port_and_cr(object.Trade.Portfolio, "Exposure USD (credit)");
  WCOLimitUSDNotional = py("WCO_Column_Helpers", context).get_limit_by_port_and_cr(object.Trade.Portfolio, "Exposure USD (notional)");
  WeekNumber = py("Total_Trade", context).weeknumber(object.Trade.ValueDay);
  WHT = dictPaymentTypeAmount.At("WHT");
  WithinNOPLimits = ;
  WITHORIGCOSTAMT = select(WHT, 
  nil->object.Trade.Premium, 
  default->object.Trade.Premium + WHT);
  Year = py("Total_Trade", context).year(object.Trade.TradeTime);
  YearNow = string(dateToYMD(dateNow()).At(0));
  YesterdayPrice = ;
  YieldChange = ;
  YieldYST = ;
  YourAccount = object.Trade.Settlements.Last.CounterpartyAccountRef.Bic;
  YTD = ;
}

clx FTradingSheet [FExtensionAttribute] {
  UtilizationBond = ;
}

decls[FExtensionValue] {
  "ACU DBU Grouper" ( "standard groupers.favorite groupers" ) "";
  "ACU DBU SettlementGrouper" ( "standard groupers.favorite groupers" ) "";
  "Asset or Liability Grouper" ( "standard groupers.favorite groupers" ) "";
  "Buy Sell Grouper" ( "standard groupers.favorite groupers" ) "";
  "Invtype / Currency Grouper" ( "standard groupers.favorite groupers" ) "";
  "Invtype Grouper" ( "standard groupers.favorite groupers" ) "";
  "Month Deal Done Grouper" ( "standard groupers.favorite groupers" ) "";
  "Month Grouper" ( "standard groupers.favorite groupers" ) "";
  "Year / Month Deal Done Grouper" ( "standard groupers" ) "";
  "Year Deal Done Grouper" ( "standard groupers.favorite groupers" ) "";
}

clx FInstrumentAndTradesGrouperSubject [FExtensionValue] {
  ACU DBU Grouper
MethodSplit;Trade.BranchGrouper
...

  Asset or Liability Grouper
MethodSplit;Trade.AssetOrLiabilityGrouper
...

  Buy Sell Grouper
MethodSplit;Trade.BuySellGrouper
...

  Invtype / Currency Grouper
Chained;Invtype Grouper, Currency 
...

  Invtype Grouper
MethodSplit;Trade.InvtypeGrouper
...

  Month Deal Done Grouper
MethodSplit;Trade.MonthDealDoneGrouper
...

  Month Grouper
MethodSplit;Trade.MonthGrouper
...

  Optional Key 3 / Optional Key 4 Grouper
MethodSplit;Trade.OptKey3_4_Grouper
...

  Pay Date Grouper
MethodSplit;Trade.PayDateGrouper
...

  Year / Month Deal Done Grouper
MethodSplit;Trade.YearDealDoneGrouper, Trade.MonthDealDoneGrouper
...

  Year Deal Done Grouper
MethodSplit;Trade.YearDealDoneGrouper
...

}

clx FObject [FExtensionValue] {
  NReportingSettings_default
ambAddress=127.0.0.1:9137
ambSender=AMBA_SENDER
ambSubject=AMBA/XMLREPORT
ambXmlMessage=True
clearSheetContent=False
compressXmlOutput=False
createDirectoryWithDate=True
dateFormat=%d%m%y
expiredPositions=True
fileName=
filePath=c:\
function=
gcInterval=10000
grouping=Default
htmlToFile=True
htmlToPrinter=False
htmlToScreen=True
includeFormattedData=True
includeRawData=True
includeFullData=False
includeDefaultData=False
instrumentParts=True
instrumentRows=True
maxNrOfFilesInDir=1000
multiThread=False
numberOfReports=1
orders=
overridePortfolioSheetSettings=
overrideTimeSheetSettings=
overrideTradeSheetSettings=
overwriteIfFileExists=True
param=
performanceStrategy=Periodic full GC to save memory
portfolios=
portfolioReportName=
portfolioRowOnly=False
preProcessXml=
printStyleSheet=FStandardCSS
printTemplate=FStandardTemplateClickable
reportName=
secondaryFileExtension=.csv
secondaryOutput=False
secondaryTemplate=NFTABTemplate
sheetSettings={}
snapshot=True
storedASQLQueries=
template=
timeBuckets=
tradeFilters=
tradeRowsOnly=True
trades=
updateInterval=60
workbook=
xmlToAmb=False
xmlToFile=False
zeroPositions=True
...

}

clx FSettlementGrouperSubject [FExtensionValue] {
  ACU DBU SettlementGrouper
MethodSplit;Settlement.Trade.BranchGrouper
...

}

decls[FNumFormatter] {
}

clx FObject [FNumFormatter] {
  DecimalsFormatter =
  DenominatedValueDateTimeFormatter=
  DigitGrouping=false
  DigitGroupingSymbol=
  Epsilon=
  Expression=
  Format=
  Fractions=
  InputScaleFactor=
  InputScaleFactorLimit=
  Inverse=
  MaximumSignificantDigits=
  MinimumSignificantDigits=
  Mnemonic=
  NumDecimals=5
  ScaleFactor=1.0
  ShowInf=false
  Tick=
  TruncateTrailingZeros=
  USTreasuryInput=


}

decls[FParameters] {
}

clx FObject [FParameters] {
  BranchServerList =
  AWS=43.218.24.238:9000
  CI=10.243.243.55:9003
  DL=10.243.243.55:9004
  HK=10.243.243.55:9001
  P2=10.70.2.12:9000
  SG=10.243.243.55:9000
  SH=10.243.243.55:9002


  CustomReportSMTPParameters =
  EmailSender=ntcsovb_uat@devmandiri.co.id
  EmailUserName=ntcsovb_uat
  SecureSMTPConnection=False
  SMTPPassword=0yGtl2v8
  SMTPPort=25
  SMTPServer=webmail.supporting.devmandiri.co.id


}

decls[FPythonCode] {
}

clx FObject [FPythonCode] {
  Customized_Grouper_P2

import acm

def PayDateGrouper(trade):
    
    for mf in trade.MoneyFlows():
        if mf.PayDate() > acm.Time.DateToday():
            return mf.PayDate()

def OptKey3_4_Grouper(trade):
    
    return str(trade.OptKey3().Name()) + "/" + str(trade.OptKey4().Name())
    
def Branch_Grouper(trade):
    if 'ACU' in trade.Portfolio().Name():
        return 'ACU'
    elif 'DBU' in trade.Portfolio().Name():
        return 'DBU'
    else:
        return 'Non ACU/DBU'

...

  CustomizedGrouper

import acm

def month(trade):
    
    createYMD = acm.Time.DateToYMD(trade.ValueDay())
    monthArray=["", "01. Januari", "02. Februari", "03. Maret", "04. April", "05. Mei", "06. Juni", "07. Juli", "08. Agustus", "09. September", "10. Oktober", "11. November", "12. Desember"]
    return monthArray[createYMD[1]]
    
def invtype(trade):
    
    type = trade.Portfolio().TypeChlItem().Name()
    if type == "FVOCI":
        return "AFS"
    elif type == "Amortised Cost":
        return "HTM"
    elif type == "FVTPL":
        return "TRD"
    else: return type

def monthDealDone(trade):
    
    if trade.Status()=="FO Confirmed":
        createTime = acm.Time.DateTimeFromTime(trade.CreateTime())
        createYMD = acm.Time.DateToYMD(createTime)
        monthArray=["", "01. Januari", "02. Februari", "03. Maret", "04. April", "05. Mei", "06. Juni", "07. Juli", "08. Agustus", "09. September", "10. Oktober", "11. November", "12. Desember"]
        return monthArray[createYMD[1]]
    else: return "Not FO Confirmed"

def yearDealDone(trade):
    
    if trade.Status()=="FO Confirmed":
        createTime = acm.Time.DateTimeFromTime(trade.CreateTime())
        createYMD = acm.Time.DateToYMD(createTime)
        return str(createYMD[0])
    else: return "Not FO Confirmed"

def AssetOrLiability1(trade):
    
    if trade.OptKey4().Name()=="CMP":
        return "Assets"
    elif trade.OptKey4().Name()=="CMT":
        return "Liabilities"

def AssetOrLiability(trade):
    asset_list = ["SUKBI", "SBBI", "REVREPO", "TD", "DF"]
    
    loan_optkey4_list = ["CMT", "OVT"]
    
    if trade.OptKey3().Name() in asset_list:
        return "Assets"
    
    elif trade.OptKey3().Name() == "SBI" and trade.OptKey4().Name() == "IDSV": # SBBI Valas
        return "Assets"
        
    elif trade.OptKey3().Name() == "TD" and trade.OptKey4().Name() == "BI":
        return "Assets"

    elif trade.OptKey3().Name() == "DL" and trade.OptKey4().Name() == "FASBI":
        return "Assets"
    
    elif trade.OptKey4().Name() == "LF":
        return "Liabilities"

    elif trade.OptKey3().Name() == "DL" and trade.OptKey4().Name() in loan_optkey4_list:
        return "Liabilities"
    
    elif trade.OptKey3().Name() == "REPO":
        return "Liabilities"
    elif trade.OptKey3().Name() == "DL":
        return "Assets"
    
    # FASBI --> DL FASBI
    
def tradeGrouper(trade):
    """ 
    Grouping sell trade and buy trades in local language
    """

    if trade.BoughtAsString() == "Buy":
        #Using core method to identify buy/sell
        return "Purchase"
    else: return "Sell"


...

  HoldingPeriodCalculation

import acm
from FLogger import FLogger
from collections import deque

configNotification = (
    acm.GetDefaultContext()
    .GetExtension(acm.FParameters, acm.FObject, "NotificationSettings")
    .Value()
)
SMTP_SERVER = configNotification["SMTP_SERVER"]

HoldingPeriodSetting = (
    acm.GetDefaultContext()
    .GetExtension(acm.FParameters, acm.FObject, "HoldingPeriodParameters")
    .Value()
)

# INFO/LOG: 1, DEBUG/DLOG: 2, WARN: 3, ERROR/ELOG: 4
LOG_LEVEL = int(HoldingPeriodSetting["logger_level"].Text())
MAIL_SENDER = HoldingPeriodSetting["mail_sender"].Text()
MAIL_SERVER = HoldingPeriodSetting["mail_server"].Text()
MAIL_SUBJECT_PREFIX = HoldingPeriodSetting["mail_subject"].Text()
MINHOLDING_TASK = HoldingPeriodSetting["minhold_task"].Text()
STATUS_LIST = "('FO Confirmed', 'BO Confirmed', 'BO-BO Confirmed')"

logger = FLogger.GetLogger("HoldingPeriodUtils")
logger.Reinitialize(level=LOG_LEVEL)

remPosHoldingPeriod = dict()


def remainingPositionHoldingPeriod(singleInsTrades):
    """
    Function for column "Holding Period Remaining Position"
    
    Parameters
    ----------
    singleInsTrades : FSingleInstrumentAndTrades
    
    Returns
    -------
    None, (Re)Build the dictionary of position of Port/Ins per buy trade date.
    And fetch relevant position per FSingleInstrumentAndTrades line.
    
    """
    if singleInsTrades.Class() == acm.FSingleInstrumentAndTrades:
        global remPosHoldingPeriod
        buyTradeDate = singleInsTrades.Grouping().GroupingValue()
        port = singleInsTrades.Portfolio()
        ins = singleInsTrades.Instrument()
        positionKey = f"{port.Name()}-{ins.Name()}"
        logger.DLOG("-"*80)
        logger.DLOG(f"remainingPositionHoldingPeriod::calculate position for {positionKey}")
        if positionKey in remPosHoldingPeriod:
            if buyTradeDate in remPosHoldingPeriod[positionKey]:
                pass
            else:
                _calculatePosDict(remPosHoldingPeriod, port, ins, positionKey)
        else:
            _calculatePosDict(remPosHoldingPeriod, port, ins, positionKey)
            
        if buyTradeDate in remPosHoldingPeriod[positionKey]:
            return remPosHoldingPeriod[positionKey][buyTradeDate]
    
    return None
    

def _calculatePosDict(remPosHoldingPeriod, portfolio, instrument, positionKey):
    """ 
    Build the dictionary of position of Port/Ins per buy trade date.
    
    Parameters
    ----------
    remPosHoldingPeriod : dict, global variable containing pos per trade date
    portfolio : FPortfolio
    instrument : FInstrument
    positionKey : String
        defining part of the position "port-ins"

    Returns
    -------
    None, it is modifying the content of global dict remPosHoldingPeriod
    
    """
    tradeCollectionQuery = f"portfolio = '{portfolio.Oid()}' AND instrument = '{instrument.Oid()}' AND status in {STATUS_LIST}"
    tradeCollection = acm.FTrade.Select(tradeCollectionQuery).SortByProperty("TradeTime", ascending=True)
    buyTradesInCollection = [t for t in tradeCollection if t.Quantity() > 0]
    sellTradesInCollection = [t for t in tradeCollection if t.Quantity() < 0]
    remPosHoldingPeriod[positionKey] = dict()
    for t in buyTradesInCollection:
        d = tradeTimeDateOnly(t)
        if d in remPosHoldingPeriod[positionKey]:
            remPosHoldingPeriod[positionKey][d] += t.Position()
        else:
            remPosHoldingPeriod[positionKey][d] = t.Position()
    logger.DLOG(f"_calculatePosDict::initial position dictionary with no sell tradeds:\n{remPosHoldingPeriod}")
    
    for st in sellTradesInCollection:
        logger.DLOG(f"_calculatePosDict::finding matches buy trade for sell trade {st.Oid()}, for calculation")
        matchedBT, partialMatchedBTPos = _findMatchesForSellTrade(st)
        logger.DLOG(f"_calculatePosDict::trade {st.Oid()} closing trade {[t.Oid() for t in matchedBT]}")
        if partialMatchedBTPos:
            logger.DLOG(f"_calculatePosDict::remaining partially matched position {partialMatchedBTPos[1]}")
            for bt in matchedBT:
                d = tradeTimeDateOnly(bt)
                if bt == partialMatchedBTPos[0]:
                    remPosHoldingPeriod[positionKey][d] -= partialMatchedBTPos[1]
                else:
                    remPosHoldingPeriod[positionKey][d] -= bt.Position()
                remPosHoldingPeriod[positionKey][d] = max(remPosHoldingPeriod[positionKey][d], 0.0)
        else:
            for bt in matchedBT:
                d = tradeTimeDateOnly(bt)
                remPosHoldingPeriod[positionKey][d] -= bt.Position()
                remPosHoldingPeriod[positionKey][d] = max(remPosHoldingPeriod[positionKey][d], 0.0)
    logger.DLOG(f"_calculatePosDict::updated position dictionary including sell trades:\n{remPosHoldingPeriod}")
                    

def tradeTimeDateOnly(trade):
    """ 
    Get the date part from FTrade
    
    Parameters
    ----------
    trade : FTrade

    Returns
    -------
    TradeDate : TradeTime method returning "DATE TIME", take the DATE part only
    
    """
    
    return trade.TradeTime().split(" ")[0]


def tradeHoldingPeriodGrouper(trade):
    """ 
    Grouping sell trade and matched buy trades into one trade date group
    
    Parameters
    ----------
    trade : FTrade

    Returns
    -------
    list : for sell trade, collection of buy trade date that it matched. 
           buy trade return the trade date, and zero position return "No Position"
           
    """
    
    pos = _calculatePosition(trade)
    if pos == 0:
        logger.DLOG(f"No position on trade {trade.Oid()}")
        return ["No Position"]
        
    if trade.BoughtAsString() == "Buy":
        return [tradeTimeDateOnly(trade)]
        
    logger.DLOG(f"tradeHoldingPeriodGrouper::finding matches trade for trade {trade.Oid()}, for grouper")
    matchedBuyTrades, _ = _findMatchesForSellTrade(trade)
    
    return [tradeTimeDateOnly(t) for t in matchedBuyTrades]
    

def _calculatePosition(trade):
    tradeQuery = f"portfolio = '{trade.Portfolio().Oid()}' AND instrument = '{trade.Instrument().Name()}'"
    trades = acm.FTrade.Select(tradeQuery)
    
    return sum([t.Position() for t in trades if t.Status() not in ("Void", "Void Input", "Simulated")])
    
    
def _findMatchesForSellTrade(trade):
    """ 
    Get matching Trades for sell trade using FIFO method
    
    Parameters
    ----------
    trade : FTrade
        sell trade used to match

    Returns
    -------
    matchedTrades : list, collection of trades that are matched by the sell trade
    tuplePartialPos : tuple, index[0] trade that's partially matched
                             index[1] remaining sell position to be used to reduce the total position in place of the partially matched trade
                             index[2] remaining sell position to be used to reduce the next sell trade

    """
    
    if trade.Quantity() > 0:
        return None
    
    ins = trade.Instrument()
    prevSellTradesQuery = f"quantity < 0 AND tradeTime < '{trade.TradeTime()}' AND portfolio = '{trade.Portfolio().Oid()}' AND instrument = '{ins.Name()}' AND status in {STATUS_LIST}"
    prevSellTrades = acm.FTrade.Select(prevSellTradesQuery)
    prevSellTrades = prevSellTrades.SortByProperty("TradeTime", ascending=True)
    if trade.StorageId() < 0: # extra condition for pre-deal validation
        prevSellTrades.AddLast(trade)
    logger.DLOG(f"_findMatchesForSellTrade::sell trade before {trade.Oid()} prevSellTrades {prevSellTrades}")
    
    buyTradesCollectionQuery = f"quantity > 0 AND portfolio = '{trade.Portfolio().Oid()}' AND instrument = '{ins.Name()}' AND status in {STATUS_LIST}"
    buyTrades = acm.FTrade.Select(buyTradesCollectionQuery)
    buyTrades = buyTrades.SortByProperty("TradeTime", ascending=True)
    
    buyTradesQueue = deque()
    for bt in buyTrades:
        buyTradesQueue.append(bt)
    
    matchedTrades = dict()
    tuplePartialPos = tuple()
    for t in prevSellTrades:
        if t.TradeTime() > trade.TradeTime():
            # sometime query prevSellTradesQuery still include trade with later time!
            logger.DLOG(f"_findMatchesForSellTrade::ignore trade {t.Oid()} because trade time is later than {trade.Oid()}")
            continue
        else:
            logger.DLOG(f"_findMatchesForSellTrade::finding matches for sell trade {t.Oid()}")
            matchedTrades[t] = list()
            sellPos = t.Position()
            if not tuplePartialPos:
                while sellPos < 0 and buyTradesQueue:
                    bt = buyTradesQueue.popleft()
                    matchedTrades[t].append(bt)
                    sellPos += bt.Position()
                    if sellPos == 0:
                        tuplePartialPos = tuple()
                        break
                    elif sellPos > 0:
                        tuplePartialPos = (bt, bt.Position() - sellPos, sellPos)
                        break
            else:
                sellPos += tuplePartialPos[2]
                matchedTrades[t].append(tuplePartialPos[0])
                if sellPos == 0:
                    tuplePartialPos = tuple()
                    pass
                elif sellPos > 0:
                    tuplePartialPos = (bt, -t.Position(), sellPos)
                    pass
                while sellPos < 0 and buyTradesQueue:
                    bt = buyTradesQueue.popleft()
                    matchedTrades[t].append(bt)
                    sellPos += bt.Position()
                    if sellPos == 0:
                        tuplePartialPos = tuple()
                        break
                    elif sellPos > 0:
                        tuplePartialPos = (bt, bt.Position() - sellPos, sellPos)
                        break
        
        logger.DLOG(f"_findMatchesForSellTrade::trade {t.Oid()} closing {[bt.Oid() for bt in matchedTrades[t]]}")
        logger.DLOG(f"_findMatchesForSellTrade::partial position on trade {tuplePartialPos[0].Oid() if tuplePartialPos else None}, remaining sell {tuplePartialPos[1] if tuplePartialPos else None}")

    return matchedTrades[trade], tuplePartialPos

...

  ICTCustomFEmailTransfer
import acm, FEmailTransfer, ssl
import collections
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.application import MIMEApplication
from email.mime.base import MIMEBase
from email import encoders
from pathlib import Path

"""
ICT Custom FEmailTransfer for file attachments.
"""

class ICTCustomFEmailTransfer(FEmailTransfer.FEmailTransfer):
    
    class Message(FEmailTransfer.FEmailTransfer.Message):
        """Stores common email message details."""
        def __init__(self, to, subject, sender, body, cc = None, attachments = []):
            super().__init__(to, subject, sender, body, cc = cc)
            self.attachments = attachments
    
    def Send(self):
        import smtplib
        if self._server.tls_mode:
            server = smtplib.SMTP(self._server.hostname, self._server.port)  # Somehow not putting host name here will result in value error
            server.ehlo() 
            server.starttls(context = ssl._create_unverified_context())
        
        else:
            server = smtplib.SMTP()
            server.connect(self._server.hostname, self._server.port)
            server.ehlo()
        
        if self._server.username:
            server.login(self._server.username, self._server.password)
        server.verify(self._message.recipients)
        msg = self._GetEmailMessage(self._message)
        server.sendmail(self._message.sender, self._message.recipients, msg.as_string())
        server.quit()
        
    @staticmethod
    def _GetEmailMessage(message):
        msg = MIMEMultipart()
        msg['To'] = ', '.join(message.to)
        msg['Cc'] = ', '.join(message.cc)
        msg['Subject'] = message.subject
        msg['From'] = message.sender
        msg.attach(MIMEText(message.body, 'html'))
        
        # For file attachments
        for path in message.attachments:
            part = MIMEBase('application', "octet-stream")
            with open(path, 'rb') as file:
                part.set_payload(file.read())
                encoders.encode_base64(part)
                part.add_header('Content-Disposition',
                                'attachment; filename={}'.format(Path(path).name))
                msg.attach(part)
        return msg

...

  MarktraGenerator

import ael, os, time, webbrowser

def get_top_buyer_and_sellers(data_dict):
    query = ael.asql(""" 
    SELECT p.ptyid, SUM(t.quantity) 'Quantity'
    FROM Trade t, instrument i, Party p
    WHERE t.insaddr =  i.insaddr
    AND i.instype = 'Option'
    AND t.counterparty_ptynbr = p.ptynbr
    AND t.quantity > 0
    GROUP BY p.ptyid
    ORDER BY 2 DESC

    UNION 

    SELECT p.ptyid, SUM(t.quantity) 'Quantity'
    FROM Trade t, instrument i, Party p
    WHERE t.insaddr =  i.insaddr
    AND i.instype = 'Option'
    AND t.counterparty_ptynbr = p.ptynbr
    AND t.quantity < 0
    GROUP BY p.ptyid
    ORDER BY 2 ASC
    """
    )
    
    query_data = query[1]
    data_dict["top_buyers"] = query_data[0]
    data_dict["top_sellers"] = query_data[1]
    
    return data_dict
    
def create_buyer_and_seller_tag(data_dict, tag_dict):
    tr_open_tag = "<tr>"
    tr_close_tag = "</tr>"
    tag_dict["top_buyers"] = ""
    tag_dict["top_sellers"] = ""
    for i in range(len(data_dict["top_buyers"])):
        number = "<td>" + str(i + 1) + "</td>"
        counterparty_name = "<td>" + data_dict["top_buyers"][i][0] + "</td>"
        quantity = "<td style='text-align:right'>" + str(data_dict["top_buyers"][i][1]) + "</td>"
        tag_dict["top_buyers"] += tr_open_tag + number + counterparty_name + quantity + tr_close_tag
    
    for i in range(len(data_dict["top_sellers"])):
        number = "<td>" + str(i + 1) + "</td>"
        counterparty_name = "<td>" + data_dict["top_sellers"][i][0] + "</td>"
        quantity = "<td style='text-align:right'>" + str(data_dict["top_sellers"][i][1]) + "</td>"
        tag_dict["top_sellers"] += tr_open_tag + number + counterparty_name + quantity + tr_close_tag
        
    return tag_dict

def get_marktra_template_style():
    marktra_style_string = """
    #header, #body{
    display: flex;
    align-items: flex-start;
    justify-content: center;
    align-content: center;
    gap: 100px;
    }
    #date_section > p {
        margin: 0;
        border: 1px solid black;
        border-collapse: collapse;
    }

    #left, #date_section {
        flex: 2;
        margin: 0px 50px 10px 0px;
    }

    #right{
        flex: 8;
        display: flex;
        gap: 10px;
        justify-content: space-between;
    }

    #date_title {
        background-color: #3F6AC1;
        color: whitesmoke;
    }

    #date {
        background-color: #8db7fb;
        color: black;
    }
    #title {
        display: flex;
        flex: 8;
        font-size: 20pt;
        border: 2px solid black;
        justify-content: center;
    }

    table {
        border: 1px solid black;
        margin: 0px 0px 10px 0px;
        width: 100%;
    }
    """
    return marktra_style_string
    
def prepare_marktra_string(tag_dict, style_string):
    date_today = time.strftime("%d-%m-%Y", time.localtime())
    marktra_string = f"""
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta http-equiv="X-UA-Compatible" content="IE=edge">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <style>
            {style_string}
            </style>
            <title>Dashboard Marktra</title>
        </head>
        <body>
            <div id="header">
                <div id="date_section">
                    <p id="date_title">Tanggal hari ini</p>
                    <p id="date">{date_today}</p>
                </div>
                <div id="title" style="display: flex;flex: 8;font-size: 20pt;border: 2px solid black;justify-content: center;">Dashboard Marktra</div>
            </div>
            <div id="body" style="display: flex;align-items: flex-start;justify-content: center;align-content: center;gap: 100px;">
                <div id="left" style="flex: 2;margin-right: 50px;">
                    <table style="border: 1px solid black;">
                        <thead>
                            <tr>
                                <th></th>
                                <th style="text-align:right">Sum of Vol (USD)</th>
                            </tr>
                        </thead>
                        <tbody id="sum_of_vol">
                            <tr>
                                <td>Jual Beli Non Idr</td>
                                <td id="jual_beli_non_idr" style="text-align:right">123456</td>
                            </tr>
                            <tr>
                                <td>MDS</td>
                                <td style="text-align:right">1234</td>
                            </tr>
                        </tbody>
                    </table>
                    <table style="border: 1px solid black;">
                        <thead>
                            <tr>
                                <th>P/S</th>
                                <th style="text-align:right">Average Rate</th>
                            </tr>
                        </thead>
                        <tbody id="ps_average_body">
                            <tr>
                                <td>P</td>
                                <td style="text-align:right"> Avg Nasabah Sell USDIDR</td>
                            </tr>
                            <tr>
                                <td>S</td>
                                <td style="text-align:right">Avg Nasabah Buy USDIDR</td>
                            </tr>
                        </tbody>
                        <tfoot id="ps_average_foot">
                            <tr>
                                <td>Spread</td>
                                <td style="text-align:right">Something</td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
                <div id="right" style="flex: 8;display: flex; gap: 10px;">
                    <div id="general">
                        <table style="border: 1px solid black;">
                            <thead>
                                <tr>
                                    <th></th>
                                    <th style="text-align:right">Sum of Vol (USD)</th>
                                </tr>
                            </thead>
                            <tbody id="sum_of_vol">
                                <tr>
                                    <td>Bank Notes</td>
                                    <td style="text-align:right">123456</td>
                                </tr>
                                <tr>
                                    <td>Retail</td>
                                    <td style="text-align:right">1234</td>
                                </tr>
                            </tbody>
                        </table>
                        <table style="border: 1px solid black;">
                            <caption>Outstanding Nasabah Buy Sell Forward</caption>
                            <thead>
                                <tr>
                                    <th>Row Labels</th>
                                    <th style="text-align:right">Sum of AMOUNT</th>
                                </tr>
                            </thead>
                            <tbody id="sum_of_amount">
                                <tr>
                                    <td>&lt; 7 Days</td>
                                    <td style="text-align:right">100</td>
                                </tr>
                                <tr>
                                    <td>2. 7 days - &lt; 14 days</td>
                                    <td style="text-align:right">200</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    <div id="buy">
                        <table style="border: 1px solid black;">
                            <thead>
                                <th>No</th>
                                <th>Nasabah Beli</th>
                                <th style="text-align:right">Volume Amount</th>
                            </thead>
                            <tbody id="top_nasabah_beli">
                            {tag_dict["top_buyers"]}
                            </tbody>
                        </table>
                    </div>
                    <div id="sell">
                        <table style="border: 1px solid black;">
                            <thead>
                                <th>No</th>
                                <th>Nasabah Jual</th>
                                <th style="text-align:right">Volume Amount</th>
                            </thead>
                            <tbody id="top_nasabah_jual">
                            {tag_dict["top_sellers"]}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </body>
        </html>
        """
        
    return marktra_string
    

def generate_marktra_dashboard(file_name, file_path, folder_with_file_name=False, open_html=True):
    data_dict = {}
    tag_dict = {}
    current_date = time.strftime("%d-%m-%Y", time.localtime())
    
    data_dict = get_top_buyer_and_sellers(data_dict)
    tag_dict = create_buyer_and_seller_tag(data_dict, tag_dict)
    style_string = get_marktra_template_style()
    marktra_string = prepare_marktra_string(tag_dict, style_string)
    
    if folder_with_file_name:
        folder_path = file_path + "\\" + file_name + "\\" + current_date
    else:
        folder_path = file_path + "\\report" + current_date
        
    try:
        os.makedirs(folder_path)
    except:
        pass
    
    file_url = folder_path+"\\"+file_name+".html"
    f = open(file_url, "w")
    f.write(marktra_string)
    f.close()
    url = "file://" + file_url
    
    if open_html:
        webbrowser.open(file_url,new=2)
    
    return file_url

...

  MO_Column_Helpers
import acm, math
from decimal import Decimal, getcontext

COMPLIANCE_RULES = ['Standard_HVaR_TRC', 'Standard_HVaR']

def get_threshold_value_by_port(port):
    value = None
    for comp_rule in COMPLIANCE_RULES:
        comp_rule = acm.FComplianceRule[comp_rule]
        for applied_rule in comp_rule.AppliedRules():
            if port.Name() == applied_rule.Target().Name():
                value = applied_rule.ThresholdValues().First().Value()
    return value

def get_threshold_by_port(port):
    value = None
    for comp_rule in COMPLIANCE_RULES:
        comp_rule = acm.FComplianceRule[comp_rule]
        for applied_rule in comp_rule.AppliedRules():
            if port.Name() == applied_rule.Target().Name():
                value = applied_rule.ThresholdValues().First()
    return value

def get_appropriate_threshold_type_by_port(port):
    type = ""
    threshold_values = get_threshold_values_by_port(port)
    try:
        for threshold in threshold_values:
            threshold_obj = threshold.Threshold()
            threshold_comparison = threshold_obj.ComparisonType()
            threshold_value = threshold_obj.ValueAdjusted()
            rule_value = threshold.ResultsHistory().First().ValuesHistory().First().WatermarkValue()
            
            if threshold_comparison == 'Greater or Equal':
                type = threshold_obj.Type().Name() if threshold_value >= rule_value else "Safe"
                
            elif threshold_comparison == 'Greater':
                type = threshold_obj.Type().Name() if threshold_value > rule_value else "Safe"
                
            elif threshold_comparison == 'Less or Equal':
                type = threshold_obj.Type().Name() if threshold_value <= rule_value else "Safe"
                
            elif threshold_comparison == 'Less':
                type = threshold_obj.Type().Name() if threshold_value < rule_value else "Safe"
        
        type = map_threshold_type_to_display(type)
        return type
    except:
        type = map_threshold_type_to_display(type)
        return type
        
def map_threshold_type_to_display(type):
    if type == "":
        return "N/A"
    
    if type == "Violation":
        return "RED"
    
    if type == "Warning":
        return "Yellow"
    
    if type == "Safe":
        return "Green"
    
def get_threshold_values_by_port(port):
    value = None
    for comp_rule in COMPLIANCE_RULES:
        comp_rule = acm.FComplianceRule[comp_rule]
        for applied_rule in comp_rule.AppliedRules():
            if port.Name() == applied_rule.Target().Name():
                value = applied_rule.ThresholdValues()
    
    return value

def get_util_percent_by_port(port):
    threshold = get_threshold_by_port(port)
    try:
        utilization = utilization_calculation(threshold.Threshold(), threshold.ResultsHistory().First().ValuesHistory().First())
        return "{:,.2f}".format(utilization).replace('.',',') + '%'        
    except Exception as e:
        return "{:,.2f}".format(0.0).replace('.',',') + '%'
    return "{:,.2f}".format(0.0).replace('.',',') + '%'

def utilization_calculation(threshold, rule_value):
    getcontext().prec = 21
    if threshold.ComparisonType() == 'Greater or Equal' or threshold.ComparisonType() == 'Greater':
        util_num = float( Decimal(rule_value.WatermarkValue()) / Decimal(threshold.ValueAdjusted()))
        util_num = round_half_up(util_num, jumlah_desimal=2)
    elif threshold.ComparisonType() == 'Less or Equal' or threshold.ComparisonType() == 'Less':
        util_num = float( Decimal(threshold.ValueAdjusted()) / Decimal(rule_value.WatermarkValue()))
        util_num = round_half_up(util_num, jumlah_desimal=2)
    else:
        util_num = 0.0
    
    return util_num

def round_half_up(angka, jumlah_desimal=0):
    if math.isnan(angka):
        return angka
    # https://realpython.com/python-rounding/
    multiplier = 10 ** jumlah_desimal
    result = math.ceil( angka*multiplier) / multiplier
    return result
    
    

...

  NFOutputSettingsTab
"""-------------------------------------------------------------------------------------------------------
MODULE
    FOutputSettingsTab - General output settings

    (c) Copyright 2011 by SunGard FRONT ARENA. All rights reserved.

DESCRIPTION

    This is a GUI tab in the FWorksheetReport GUI which contains settings
    which are changed frequently, e.g. name of the report.

-------------------------------------------------------------------------------------------------------"""
import acm
import FRunScriptGUI
import FReportSettings

trueFalse = ['False','True']

def getDateFormats():
    return ['%d%m%y', '%y%m%d', '%d%m%y%H%M', '%y%m%d%H%M', '%d%m%y%H%M%S', '%y%m%d%H%M%S']

def getListFromExtensions(extensions):
    str = extensions.AsString().replace(']','').replace('[','').replace(' ','')
    extensionsList = str.split(',')
    extensionsList.sort()
    return extensionsList

def getPrintTemplateNames():
    ctx = acm.GetDefaultContext()
    extensions = ctx.GetAllExtensions('FXSLTemplate','FObject',True, True, 'aef reporting', 'print templates')
    return getListFromExtensions(extensions)

def getSecondaryTemplateNames(ext = ''):
    if ext != '':
        ext = ' ' + ext.replace('.','')
    ctx = acm.GetDefaultContext()
    extensions = ctx.GetAllExtensions('FXSLTemplate','FObject',True, True, 'aef reporting', 'secondary templates' + ext)
    return getListFromExtensions(extensions)

def getCSSNames():
    ctx = acm.GetDefaultContext()
    extensions = ctx.GetAllExtensions('FXSLTemplate','FObject',True, True, 'aef reporting', 'style sheets')
    return getListFromExtensions(extensions)

class OutputSettingsTab(FRunScriptGUI.AelVariablesHandler):

    def appendDateToFileNameCB(self,index, fieldValues):
        self.File_date_beginning.enable( fieldValues[index] != '' )
        return fieldValues

    def createDirectoryWithDatesCB(self,index, fieldValues):
        self.Date_format.enable(trueFalse.index(fieldValues[index]))
        return fieldValues

    def htmlToFileCB(self,index, fieldValues):
        self.HTML_to_File.enable(fieldValues[index] != 'True')
        if fieldValues[index] == 'True':
            fieldValues[index - 1] = 'True'
        return fieldValues

    def secondaryOutputCB(self,index, fieldValues):
        for i in (1, 2, 3):
            if (self.ael_variables) and (len(self.ael_variables) >= index+i):
                self.ael_variables[index + i][FRunScriptGUI.Controls.ENABLED] = (fieldValues[index] == 'True')
        return fieldValues
        
    def addHeadImageCB(self, index, fieldValues):
        if (self.ael_variables) and (len(self.ael_variables) >= index+1):
            self.ael_variables[index + 1][FRunScriptGUI.Controls.ENABLED] = (fieldValues[index] == 'True')
        return fieldValues

    def setFileExtensionCB(self,index, fieldValues):
        """ Set file extension depending on which group the template belongs to """
        secTempl = fieldValues[index]

        for ext in FReportSettings.FILE_EXTENSIONS:
            list = getSecondaryTemplateNames(ext)
            if secTempl in list:
                fieldValues[index+1] = ext
        return fieldValues
    
    def __init__(self):
        directorySelection=FRunScriptGUI.DirectorySelection()
        file_selection = FRunScriptGUI.InputFileSelection()
        vars =[
                ['HTML to File', 'HTML to File_Output settings', 'string', trueFalse, 'True', 1, 0, 'Is the HTML wanted on file?', None, 1],
                ['HTML to Screen', 'HTML to Screen_Output settings', 'string', trueFalse, 'True', 1, 0, 'Is the HTML wanted on screen in a browser?', self.htmlToFileCB, 1],
                ['HTML to Printer', 'HTML to Printer_Output settings', 'string', trueFalse, 'False', 1, 0, 'Is printing of the HTML wanted?',None,0],                
                ['File Path', 'File Path_Output settings', directorySelection, None, directorySelection, 0, 1, 'The file path to the directory where the report should be put. Environment variables can be specified for Windows (%VAR%) or Unix ($VAR).', None, 1],
                ['File Name', 'File Name_Output settings', 'string', None, '', 0, 0, 'The file name of the output'],
                ['File date format', 'Format of Date Added to File Name_Output settings', 'string', getDateFormats(), '', 0, 0, 'Format of the date added to the file name. No date is added to the file name if this field is empty. As default, it is appended at the end of the file name. Toggle checkbox Date at Beginning of File Name to insert the date at the beginning of the file name.', self.appendDateToFileNameCB, 1],
                ['Year with century', 'Year with century_Output settings', 'string', trueFalse, 'False', 1, 0, 'When using dates for filename and directory, year will be with or without century'],
                ['File date beginning', 'Date at Beginning of File Name_Output settings', 'string', trueFalse, 'False', 1, 0, 'Append date at beginning of file name'],
                ['Create directory with date', 'Create Directory with Date_Output settings', 'string', trueFalse, 'True', 1, 0, 'Create a directory with the date included in the directory name', self.createDirectoryWithDatesCB, 1],
                ['Date format', 'Directory Date Format_Output settings', 'string', getDateFormats(), '%d%m%y', 0, 0, 'Date format', None, 1],
                ['Overwrite if file exists', 'Overwrite if File Exists_Output settings', 'string', trueFalse, 'True', 1, 0, 'If a file with the same name and path already exist, overwrite it?'],
                ['Print template (XSL)','HTML Template (XSL)_Output settings','string', getPrintTemplateNames(),'FStandardTemplate', 0, 0, 'Choose which XSL template to use in the transformation from XML. Templates must be added to group aef reporting/print templates to be visible here.'],
                ['Print style sheet (CSS)','HTML Style Sheet (CSS)_Output settings','string', getCSSNames(), 'FStandardCSS', 0, 0, 'If wanted, choose a Cascading Style Sheet'],
                ['Include header image','Add Header Image to HTML_Output settings','string', trueFalse, 'False', 1, 0, 'If wanted, choose a header image to add to HTML output', self.addHeadImageCB, 1],
                ['Header image path', 'Header Image Path_Output settings', 'FFileSelection', None, None, 0, 1, 'The file path to the header image. Environment variables can be specified for Windows (%VAR%) or Unix ($VAR).', None, 0],
                ['Secondary output', 'Secondary Output_Output settings', 'string', trueFalse, 'False', 1, 0, 'Is a secondary output wanted?', self.secondaryOutputCB, 1],
                ['Secondary template', 'Secondary Template_Output settings','string', getSecondaryTemplateNames(), 'NFTABTemplate', 0, 0, 'Choose a secondary output template. Templates must be added to group aef reporting/secondary templates [ext] to be visible here.', self.setFileExtensionCB, 0],
                ['Secondary file extension', 'Secondary File Extension_Output settings', 'string', FReportSettings.FILE_EXTENSIONS, '.csv', 0, 0, 'Which file extension should the secondary output have?', None, 0],
                ['Utf8 BOM', 'Enforce UTF-8 encoded output_Output settings', 'string', trueFalse, 'False', 0, 0, 'Add a Byte Order Mark to UTF-8 encoded output files. Some application, such as Excel, need the Byte Order Mark to be able to open the file correctly. Only applicable for templates with UTF-8 encoding.', None, 0],
                ]
        FRunScriptGUI.AelVariablesHandler.__init__(self,vars,__name__)

def getAelVariables():
    outtab=OutputSettingsTab()
    outtab.LoadDefaultValues(__name__)
    return outtab

...

  NFReportOutput
from builtins import range
"""-------------------------------------------------------------------------------------------------------
MODULE
    FReportOutput - Output reports to paper, file or screen

    Given XML data this module will transofrm it using print templates and output the result
    to file, show it in a web browseer and/or print it to paper.

    (c) Copyright 2011 by SunGard FRONT ARENA. All rights reserved.

DESCRIPTION

    Use produceOutput function to print XML data, append result of getAelCariables to the ael_variables
    in the calling script.
    
    If called from a noninteractive script, produceOutputInternal may be called    

-------------------------------------------------------------------------------------------------------"""

import acm
import ael
import os
import webbrowser
import time
import os.path
import platform
import re
import FFileUtils
import FReportUtils
import FReportSettings
import FXMLReportWriter
import FPictures
from string import Template

try:
    import zipfile
except ImportError:
    print ("Failed to import zipfile, compressed XML output will not be available")

ael_variables = None #Must be overridden by parent module in order for call backs to work
trueFalse = ['False','True']

import amb
amb_address_default = '127.0.0.1:9137'
amb_sender_default  = 'AMBA_SENDER'
amb_subject_default = 'AMBA/XMLREPORT'

def xmlToAmbCB(index, fieldValues):
    for i in (1, 2, 3, 4):
        if (ael_variables) and (len(ael_variables) >= index+i):
            ael_variables[index + i][9] = (fieldValues[index] == 'True')
    return fieldValues

def htmlToFileCB(index, fieldValues):
    if (ael_variables) and (len(ael_variables) > index):
        ael_variables[index - 1][9] = (fieldValues[index] != 'True')
        if fieldValues[index] == 'True':
            fieldValues[index - 1] = 'True'
    return fieldValues
    
def secondaryOutputCB(index, fieldValues):
    for i in (1, 2, 3):
        if (ael_variables) and (len(ael_variables) >= index+i):
            ael_variables[index + i][9] = (fieldValues[index] == 'True')
    return fieldValues

def getFilePathSelection():
    """ Directory selector dialog """
    selection = acm.FFileSelection()
    selection.PickDirectory(True)
    selection.SelectedDirectory = 'c:\\'
    return selection   
    
def createDirectoryWithDatesCB(index, fieldValues):    
    ael_variables[index + 1][9] = trueFalse.index(fieldValues[index])
    return fieldValues  

def getDateFormats():    
    return ['%d%m%y', '%y%m%d', '%d%m%y%H%M', '%y%m%d%H%M']

def setFileExtension(index, fieldValues):    
    """ Set file extension depending on which group the template belongs to """
    secTempl = fieldValues[index]        
        
    for ext in FReportSettings.FILE_EXTENSIONS:
        list = getSecondaryTemplateNames(ext)
        if secTempl in list:
            fieldValues[index+1] = ext            
    return fieldValues      

def getAelVariables():
    """ Get ael_variables that need to be suplied to produceOutput, scripts outputing
        reports should extend their ael_variables with this list
    """
    return     [['Include Raw Data', 'Include Raw Data_Output settings', 'string', trueFalse, 'True', 1, 0, 'Is the raw data needed in the report?'],
                ['Include Formatted Data', 'Include Formatted Data_Output settings', 'string', trueFalse, 'True', 1, 0, 'Is the formatted data needed in the report? Must be checked when using FStandardTemplate.'],
                ['HTML to File', 'HTML to File_Output settings', 'string', trueFalse, 'True', 1, 0, 'Is the HTML wanted on file?', None, 1],
                ['HTML to Screen', 'HTML to Screen_Output settings', 'string', trueFalse, 'True', 1, 0, 'Is the HTML wanted on screen in a browser?', htmlToFileCB, 1],
                ['HTML to Printer', 'HTML to Printer_Output settings', 'string', trueFalse, 'False', 1, 0, 'Is printing of the HTML wanted?'],
                ['XML to File', 'XML to File_Output settings', 'string', trueFalse, 'True', 1, 0, 'Is the XML wanted on file?'],                              
                ['File Path', 'File Path_Output settings', getFilePathSelection(), None, getFilePathSelection(), 0, 1, 'The file path to the directory where the report should be put. Environment variables can be specified for Windows (%VAR%) or Unix ($VAR).', None, 1],                
                ['File Name', 'File Name_Output settings', 'string', None, '', 0, 0, 'The file name of the output'],
                ['Compress Output', 'Compress XML output (.zip)_Output settings', 'string', trueFalse, 'False', 1, 0, 'Compress the .xml outpt with zip', None, 1],
                ['Create directory with date', 'Create directory with date_Output settings', 'string', trueFalse, 'True', 1, 0, 'Create a directory with the date included in the directory name', createDirectoryWithDatesCB, 1],                                
                ['Date format', 'Date format_Output settings', 'string', getDateFormats(), '%d%m%y', 0, 0, 'Date format', None, 1],
                ['Overwrite if file exists', 'Overwrite if file exists_Output settings', 'string', trueFalse, 'True', 1, 0, 'If a file with the same name and path already exist, overwrite it?'],
                ['Print template (XSL)','Print template (XSL)_Output settings','string', getPrintTemplateNames(),'FStandardTemplate', 0, 0, 'Choose which XSL template to use in the transformation from XML. Templates must be added to group aef reporting/print templates to be visible here.'],
                ['Print style sheet (CSS)','Print style sheet (CSS)_Output settings','string', getCSSNames(), 'FStandardCSS', 0, 0, 'If wanted, choose a Cascading Style Sheet'],
                ['Secondary output', 'Secondary output_Output settings', 'string', trueFalse, 'False', 1, 0, 'Is a secondary output wanted?', secondaryOutputCB, 1],
                ['Secondary template', 'Secondary template_Output settings','string', getSecondaryTemplateNames(), 'NFTABTemplate', 0, 0, 'Choose a secondary output template. Templates must be added to group aef reporting/secondary templates [ext] to be visible here.', setFileExtension, 0],
                ['Secondary file extension', 'Secondary file extension_Output settings', 'string', FReportSettings.FILE_EXTENSIONS, '.csv', 0, 0, 'Which file extension should the secondary output have?', None, 0],
                ['Send XML File to AMB', 'Send XML File to AMB_Output settings', 'string', trueFalse, 'False', 1, 0, 'Send XML File to ARENA Message Broker?', xmlToAmbCB, 1],
                ['AMB XML Message', 'AMB XML Message_Output settings', 'string', trueFalse, 'True', 0, 0, 'XML Message or Front Arena internal format?', None, 1],
                ['AMB Address', 'AMB Address_Output settings', 'string', '', amb_address_default, 0, 0, 'Address to ARENA Message Broker on format host:port', None, 0],
                ['AMB Sender Name', 'AMB Sender Name_Output settings', 'string', '', amb_sender_default, 0, 0, 'Name on Sender to ARENA Message Broker (Must exist in AMB system table!)', None, 0],
                ['AMB Subject', 'AMB Subject_Output settings', 'string', '', amb_subject_default, 0, 0, 'Subject on Messages Sent to ARENA Message Broker', None, 0],
                ] 


def produceOutput(inputXML,fileName, ael_variables):
    """ Produce reports as described in ael_variables """
    fileHTML = trueFalse.index(ael_variables['HTML to File'])
    screenHTML = trueFalse.index(ael_variables['HTML to Screen'])
    printHTML = trueFalse.index(ael_variables['HTML to Printer'])    
    fileXML = trueFalse.index(ael_variables['XML to File'])
    compressXML = trueFalse.index(ael_variables['Compress Output'])
    if isinstance(ael_variables['File Path'], str):
        outputDir = ael_variables['File Path']
    else:
        outputDir = ael_variables['File Path'].AsString()    
    dateDirectory = trueFalse.index(ael_variables['Create directory with date'])
    overwrite = trueFalse.index(ael_variables['Overwrite if file exists'])
    printTemplate = ael_variables['Print template (XSL)']
    printCSS = ael_variables['Print style sheet (CSS)']
    secondOutput = trueFalse.index(ael_variables['Secondary output'])
    secondOutputTemplate = ael_variables['Secondary template']
    secondOutputFileExtension = ael_variables['Secondary file extension']
    dateFormat = ael_variables['Date format']
    
    if dateDirectory:
        outputDir = os.path.join(outputDir, 'report'+ time.strftime(dateFormat)+ os.sep )
    produceOutputInternal(inputXML, printTemplate, printCSS, fileHTML, screenHTML, printHTML, fileXML, outputDir,\
                          overwrite, fileName, secondOutput, secondOutputTemplate, secondOutputFileExtension,compressXML)
    # Send XML File to AMB
    xmlToAmb = trueFalse.index(ael_variables['Send XML File to AMB'])
    ambAddress = ael_variables['AMB Address']
    ambSender  = ael_variables['AMB Sender Name']
    ambSubject = ael_variables['AMB Subject']
    ambXmlMessage = trueFalse.index(ael_variables['AMB XML Message'])
    sendXMLToAMB(inputXML, xmlToAmb, ambAddress, ambSender, ambSubject, ambXmlMessage)

def getListFromExtensions(extensions):
    str = extensions.AsString().replace(']','').replace('[','').replace(' ','')
    extensionsList = str.split(',')
    return extensionsList    

def getPrintTemplateNames():
    ctx = acm.GetDefaultContext()
    extensions = ctx.GetAllExtensions('FXSLTemplate','FObject',True, True, 'aef reporting', 'print templates')    
    return getListFromExtensions(extensions)        

def getSecondaryTemplateNames(ext = ''):
    if ext != '':        
        ext = ' ' + ext.replace('.','')
    ctx = acm.GetDefaultContext()
    extensions = ctx.GetAllExtensions('FXSLTemplate','FObject',True, True, 'aef reporting', 'secondary templates' + ext)
    return getListFromExtensions(extensions)
    
def getCSSNames():
    ctx = acm.GetDefaultContext()
    extensions = ctx.GetAllExtensions('FXSLTemplate','FObject',True, True, 'aef reporting', 'style sheets')
    return getListFromExtensions(extensions)


''' Not used '''
def transformXML(inputXML, printTemplate, printCSS, context):
    if not printTemplate:
        raise Exception("Need to supply an XSL template if printing to HTML")
    # Retrieve stylesheet to use
    pt = context.GetExtension('FXSLTemplate', 'FObject', printTemplate)       
    if not pt:
        raise Exception("Failed to find printTemplate " + printTemplate + " report output not completed")
    xsl = pt.Value()

    # Retrieve CSS to use if any and substitute into XSL
    if printCSS:
        cssObject = context.GetExtension('FXSLTemplate', 'FObject', printCSS)  
        if not cssObject:
            print ("Failed to find CSS ",printCSS, " Proceeding without it, output may be malformed")
        else:
            css = cssObject.Value()
            xsl = xsl.replace('<insertcss/>',css)

    # Perform transformation
    transformer = acm.CreateWithParameter('FXSLTTransform',xsl)
    return transformer.Transform(inputXML)

def produceOutputInternal(inputXML, printTemplate, printCSS, fileHTML, screenHTML, printHTML, fileXML, outputDir,\
                          overwrite, fileName, secondOutput, secondOutputTemplate, secondOutputFileExtension, compressXML, \
                           pictures=[]):
    inputXML = str(inputXML)
    ctx = acm.GetDefaultContext()
    outputDir=FFileUtils.expandEnvironmentVar(outputDir)
    
    if fileHTML or secondOutput or fileXML or screenHTML:
        createPath(outputDir)

    outputDir = os.path.abspath(outputDir)
    
    if fileXML:
        if compressXML:
            filePath = getFileName(outputDir, overwrite, fileName, '.zip')
            innerFileName = fileName + ".xml"
            f = zipfile.ZipFile(filePath,'w',zipfile.ZIP_DEFLATED).writestr( innerFileName, inputXML ) 
            print ("Wrote compressed XML to : " + filePath)
        else:
            filePath = getFileName(outputDir, overwrite, fileName, '.xml')
            open(filePath,'w').write(inputXML)
            print ("Wrote XML to : " + filePath)

    if fileHTML or screenHTML or printHTML:
        extraParams = acm.FDictionary()
        extraParams.AtPut('outputDir', outputDir)
        html = FReportUtils.transformXML(inputXML, printTemplate, printCSS, extraParams)
        #Special treatment of FStandardTemplateClickable
        if printTemplate.find('Clickable') != -1:
            import FHTMLJavaScript
            open(outputDir + 'portfolio_report.js','w').write(FHTMLJavaScript.javaScript)
            pictures = ['report_plus', 'report_minus', 'report_end']

        # Decode any pictures included.
        for pic in pictures:
            FPictures.decodePicture(pic, outputDir)
        # Output as specified
        if fileHTML or screenHTML:
            filePath = getFileName(outputDir, overwrite, fileName, '.html')
            open(filePath,'w').write(html)
            print ("Wrote report output to " + filePath)
            if screenHTML:
                webbrowser.open(filePath)
        if printHTML:
            acm.PrintToDefaultPrinter(html," ", "Page &p of &P  &b At date &d &t &b")

    if secondOutput:
        secondOut = FReportUtils.transformXML(inputXML, secondOutputTemplate)

        fileName = fileName.replace(" ", "_")         
        filePath = getFileName(outputDir, overwrite, fileName, secondOutputFileExtension)
        if secondOutputFileExtension == '.pdf':        
            foFilePath = filePath.replace(".pdf",".fo")
            open(foFilePath,'w').write(secondOut)
            print ("Wrote .fo to ", foFilePath)

            foFilePath = foFilePath.replace(".fo","")
            command = Template(FReportSettings.FOP_BAT)
            command = command.substitute({'extension':'pdf', 'filename':foFilePath})
            ret = os.system(command)
            if ret:
                logger.ELOG("PDF creation ERROR. Check that necessary third party software is installed.\nCommand: " + command)
            else:
                logger.LOG("PDF generated to " + filePath)
        else:
            open(filePath,'wb').write(secondOut.encode())
            print ("Wrote secondary output to :", filePath)
    

def createPath(outputDir):
    if not os.path.exists(outputDir):
        try:
            os.makedirs(outputDir)
            print ('Created report output directory:', outputDir)
        except:
            print ('Failed to create report directory:' + outputDir)
            raise
                        
def getFileName(outputDir, overwrite, fileName, ext):
    for i in range(1,100):
        if i == 1:
            numbering = ''
        else:
            numbering = '_' + str(i)
        testFile = os.path.join(outputDir, fileName + numbering + ext)
        if overwrite or not os.path.exists(testFile):
            return testFile
    print ('Error! Directory full')
    return 0

def make_xmlreportwriter(aelvardict):
    """Create a suitable FXMLREportWriter object for report output.

    Arguments:
        aelvardict -- dict from ael_variables should contain the values
                      from getAelVariables() in this module.
    """
    return FXMLReportWriter.FXMLReportWriter.make_iostring_writer()

def event_cb(channel, event_p, *arg_p):
    """Callback function"""
    etype=amb.mb_event_type_to_string(event_p.event_type)
    if etype == 'Status':
        ael.log('AMB Last Acknowledge Status = %s' % event_p.status.status)
        print ('AMB Last Acknowledge Status = %s' % event_p.status.status)
    elif etype == 'Message':
        ael.log('AMB Message Id      : %s' % str(event_p.message.id))
        ael.log('AMB Message Subject : %s' % str(event_p.message.subject))
        ael.log('AMB Message Time    : %s' % str(event_p.message.time))
        ael.log('AMB Message Size    : %s' % str(event_p.message.size))
        ael.log('AMB Message Type    : %s' % str(event_p.message.event_type))
        
        print ('AMB Message Id      : %s' % str(event_p.message.id))
        print ('AMB Message Subject : %s' % str(event_p.message.subject))
        print ('AMB Message Time    : %s' % str(event_p.message.time))
        print ('AMB Message Size    : %s' % str(event_p.message.size))
        print ('AMB Message Type    : %s' % str(event_p.message.event_type))
        buffer = amb.mbf_create_buffer_from_data(event_p.message.data_p)
        message = buffer.mbf_read().mbf_object_to_string_xml()
        ael.log('AMB Message Data XML: \n%s' % message)
        print ('AMB Message Data XML: \n%s' % message)
        amb.mb_queue_accept(channel, event_p.message, time.strftime("%Y-%m-%d %H:%M:%S"))
    elif etype == 'Disconnect':
        ael.log("Event Disconnect")
        print ("Event Disconnect")
    elif etype == 'End of Data':
        ael.log('AMB End of Data')
        print ('AMB End of Data')
    else:
        ael.log('AMB Unknown event type =' % etype)
        print ('AMB Unknown event type =' % etype)

def sendXMLToAMB(inputXML, xmlToAmb, ambAddress, ambSender, ambSubject, ambXmlMessage):
    """ Send xml data file to AMB """
    if xmlToAmb:
        # connect to AMB
        try:
            amb.mb_init(ambAddress)
        except Exception as err:
            ael.log('ERROR: ' + str(err) + '\nOccured when trying to connect to AMB at %s' % ambAddress)
            print ('ERROR: ', err,'\nOccured when trying to connect to AMB at %s' % ambAddress)
            return
        # create writer channel
        try:
            writer = amb.mb_queue_init_writer(ambSender, event_cb, None)
        except Exception as err:
            ael.log('ERROR: ' + str(err) + '\nOccured when trying to create writer channel for sender %s' % ambSender)
            print ('ERROR: ', err, '\nOccured when trying to create writer channel for sender %s' % ambSender)
            return
            
        try:
            # Create XML Report AMB messages
            message = amb.mbf_start_message( None, "INSERT_XMLREPORT", "1.0", None, ambSender )
    
            # Start XMLREPORT list
            mb_msg = message.mbf_start_list("XMLREPORT")
    
            # Insert XML Report as REPORT_DATA
            mb_msg.mbf_add_string("REPORT_DATA", inputXML)
    
            # End XMLREPORT list
            mb_msg.mbf_end_list()
    
            # End XML Report AMB message
            message.mbf_end_message()
        except Exception as err:
            ael.log('ERROR: ' + str(err) + '\nOccured when trying to create AMBA message')
            print ('ERROR: ', err, '\nOccured when trying to create AMBA message')
            return

        try:
            # Create AMB Buffer
            buffer = amb.mbf_create_buffer()
        except Exception as err:
            ael.log('ERROR: ' + str(err) + '\nOccured when trying to create buffer for the XML message')
            print ('ERROR: ', err, '\nOccured when trying to create buffer for the XML message')
            return
            
        try:
            # mbf_generate(buffer) will compress the message if it's greater than 64Kb in size        
            type = 'AMB'
            if ambXmlMessage:
                # mbf_generate_xml generates messages on XML format
                message.mbf_generate_xml(buffer) 
                type = 'XML' 
            else:
                # mbf_generate generates messages on FRONT internal AMB format
                message.mbf_generate(buffer)           
        except Exception as err:
            ael.log('ERROR: ' + str(err) + '\nOccured when trying to generate the ' + type + ' message')
            print ('ERROR: ', err, '\nOccured when trying to generate ' + type + ' message')
            return

        # send the XML message to the AMB
        status = amb.mb_queue_write(writer, ambSubject, buffer.mbf_get_buffer_data(), buffer.mbf_get_buffer_data_size(), time.strftime("%Y-%m-%d %H:%M:%S"))
        # check the status
        if status:
            ael.log("ERROR: ould not send the XML message to the AMB")
            print ("ERROR: could not send the XML message to the AMB")
        else:
            ael.log("XML report sent to AMB %s" % ambAddress)
            print ("XML report sent to AMB %s" % ambAddress)


...

  Python_Custom_Fields

import acm, math, traceback, re
import FLogger
import os
from decimal import Decimal, getcontext

logger = FLogger.FLogger(__name__)

def get_compliance_rule_by_rules(obj, calculation, rule_type, rule_category, keyword):
    compliance_rules = []
    for rule in acm.FComplianceRule.Select(''):
        if  rule.DefinitionInfo() == rule_type and rule.RuleCategory().Description() == rule_category and rule.Definition() is not None:
            if rule.Definition().Column() is not None:
                if rule.Definition().Column().OriginalColumnId().AsString() == calculation:
                    compliance_rules.append(rule)
    filtered_compliance_rules = filter_compliance_rules_by_target(obj, compliance_rules)
    try:
        if len(filtered_compliance_rules) > 1:
            for filtered_rule in filtered_compliance_rules:
                if filtered_rule.Definition().FilterQuery() is None and keyword == '':
                    return filtered_rule
                else:
                    if keyword == '' and filtered_rule.Definition().FilterQuery().Size() == 0:
                        return filtered_rule
                    elif keyword != '' and filtered_rule.Definition().FilterQuery().Size() > 0:
                        if keyword in filtered_rule.Definition().FilterQuery()[0].Name():
                            return filtered_rule
        else:
            return filtered_compliance_rules[0]
    except:
        return None

def filter_compliance_rules_by_target(obj, compliance_rules):
    filtered_compliance_rules = []
    for rule in compliance_rules:
        for apply in rule.AppliedRules():
            if apply.Target().Oid() == obj.Oid() and rule not in filtered_compliance_rules:
                filtered_compliance_rules.append(rule)
    return filtered_compliance_rules

def round_half_up(angka, jumlah_desimal=0):
    # https://realpython.com/python-rounding/
    multiplier = 10 ** jumlah_desimal
    result = math.ceil( angka*multiplier) / multiplier
    return result

def port_threshold_limit(obj, calculation, rule_type, rule_category, keyword):
    #complianceRules = acm.FComplianceRule.Select('')
    complianceRule = get_compliance_rule_by_rules(obj, calculation, rule_type, rule_category, keyword)

    try:
        applied_rule = get_applied_rule(obj, complianceRule.AppliedRules())
    
        if applied_rule.Target().Oid() == obj.Oid():
            return applied_rule.ThresholdValues().First().ValueAdjusted()
        else:
            return 0.0
    except:
        return 0.0
        
def get_applied_rule(obj, applied_rules):
    applied_rule = None
    for rule in applied_rules:
        if rule.Target().Oid() == obj.Oid():
            applied_rule = rule
            break
    return applied_rule

def utilization_calculation(threshold, rule_value):
    getcontext().prec = 21
    if threshold.ComparisonType() == 'Greater or Equal' or threshold.ComparisonType() == 'Greater':
        #return Decimal( float(rule_value.WatermarkValue()) / float(threshold.ValueAdjusted()) )
        util_num = float( Decimal(rule_value.WatermarkValue()) / Decimal(threshold.ValueAdjusted()) / 10**19 )
        util_num = round_half_up(util_num, jumlah_desimal=2)
    elif threshold.ComparisonType() == 'Less or Equal' or threshold.ComparisonType() == 'Less':
        #return Decimal( float(threshold.ValueAdjusted()) / float(rule_value.WatermarkValue()) )
        util_num = float( Decimal(threshold.ValueAdjusted()) / Decimal(rule_value.WatermarkValue()) / 10**19 )
        util_num = round_half_up(util_num, jumlah_desimal=2)
    else:
        util_num = 0.0
    return util_num

def port_utilization_percentage(obj, calculation, rule_type, rule_category, keyword):
    complianceRule = get_compliance_rule_by_rules(obj, calculation, rule_type, rule_category, keyword)
    
    try:
        applied_rule = get_applied_rule(obj, complianceRule.AppliedRules())
    
        if applied_rule.Target().Oid() == obj.Oid():
            threshold = applied_rule.ThresholdValues().First().Threshold()
            rule_value = None
            for rule_val in acm.FRuleValueHistory.Select(''):
                if rule_val.ResultHistory().Threshold() is threshold:
                    rule_value = rule_val
                    break
            return "{:,.2f}".format(utilization_calculation(threshold, rule_value)).replace('.',',') + '%'
        else:
            return "{:,.2f}".format(0.0).replace('.',',') + '%'
        
        
        
    except:
        return "{:,.2f}".format(0.0).replace('.',',') + '%'

def port_utilization_val(obj, calculation, rule_type, rule_category, keyword):
    complianceRule = get_compliance_rule_by_rules(obj, calculation, rule_type, rule_category, keyword)
    
    rule_val = get_rule_value_history_by_target(obj, calculation, rule_type, rule_category, keyword)
    if rule_val is not None:
        return rule_val.WatermarkValue()
    else:
        return 0.0
        
def get_rule_value_history_by_target(obj, calculation, rule_type, rule_category, keyword):
    complianceRule = get_compliance_rule_by_rules(obj, calculation, rule_type, rule_category, keyword)
    
    try:
        applied_rule = get_applied_rule(obj, complianceRule.AppliedRules())
    
        if applied_rule.Target().Oid() == obj.Oid():
            threshold = applied_rule.ThresholdValues().First().Threshold()
            rule_value = None
            for rule_val in acm.FRuleValueHistory.Select(''):
                if rule_val.ResultHistory().Threshold() is threshold:
                    rule_value = rule_val
                    break
            return rule_value
        else:
            return None
        
    except:
        return None

def get_end_date(obj, calculation, rule_type, rule_category, keyword):
    complianceRule = get_compliance_rule_by_rules(obj, calculation, rule_type, rule_category, keyword)

    try:
        applied_rule = get_applied_rule(obj, complianceRule.AppliedRules())
    
        if applied_rule.Target().Oid() == obj.Oid():
            return applied_rule.EndDate()
        else:
            return '-'
    except:
        return '-'

...

  Python_MO_Custom_Fields

import ael, acm, math, traceback, re
import FLogger
import os
from decimal import Decimal, getcontext

logger = FLogger.FLogger(__name__)

def get_compliance_rule_by_name(rule_name):
    try:
        return acm.FComplianceRule[rule_name]
    except:
        return None

def round_half_up(angka, jumlah_desimal=0):
    # https://realpython.com/python-rounding/
    multiplier = 10 ** jumlah_desimal
    result = math.ceil( angka*multiplier) / multiplier
    return result
        
def utilization_calculation(threshold_val, rule_value):
    getcontext().prec = 21
    compa_type = threshold_val.Threshold().ComparisonType()
    if compa_type == 'Greater or Equal' or compa_type == 'Greater':
        #return Decimal( float(rule_value.WatermarkValue()) / float(threshold.ValueAdjusted()) )
        #util_num = float( Decimal(rule_value.WatermarkValue()) / Decimal(threshold.ValueAdjusted()) / 10**19 )
        util_num = float( Decimal(rule_value) / Decimal( threshold_val.ValueAdjusted() ) )
        util_num = round_half_up(util_num, jumlah_desimal=2)
    elif compa_type == 'Less or Equal' or compa_type == 'Less':
        #return Decimal( float(threshold.ValueAdjusted()) / float(rule_value.WatermarkValue()) )
        #util_num = float( Decimal(threshold.ValueAdjusted()) / Decimal(rule_value.WatermarkValue()) / 10**19 )
        util_num = float( Decimal( threshold_val.ValueAdjusted() ) / Decimal(rule_value) )
        util_num = round_half_up(util_num, jumlah_desimal=2)
    else:
        util_num = 0.0
    return util_num
    
def get_alert_by_rule_name(obj, rule_name):
    threshold_val = get_threshold_value_by_rule_name(obj, rule_name)
    try:
        threshold_val_id = threshold_val.Oid()
        alerts = acm.FAlert.Select( "subjectId=" + str( obj.Oid() ) + " and thresholdValue="+str(threshold_val_id) )
        rule_res_hists = acm.FRuleResultHistory.Select( "subjectId=" + str( obj.Oid() ) + " and thresholdValue="+str(threshold_val_id) )
    except:
        alerts = []
        rule_res_hists = []
    if len(rule_res_hists) > 0:
        return ( rule_res_hists[-1], 'Rule Result History' )
    else:
        if len(alerts) > 0:
            return ( alerts[-1], 'Alert' )
        else:
            return ( None, 'Not Alert and Rule Result History' )
    
def get_rule_value_by_rule_name(obj, rule_name):
    alert_set = get_alert_by_rule_name(obj, rule_name)
    try:
        alert_id = alert_set[0].Oid()
        alert_type = alert_set[1]
        if alert_type == 'Rule Result History':
            breaches = acm.FRuleValueHistory.Select( "resultHistory=" + str(alert_id) )
        elif alert_type == 'Alert':
            breaches = acm.FBreach.Select( "alert=" + str(alert_id) )
        else:
            breaches = []
    except:
        breaches = []
    if len(breaches) > 0:
        return breaches[-1]
    else:
        return None
        
def get_end_date_by_rule_name(obj, rule_name):
    applied_rule = get_applied_rule_by_target(obj, rule_name)

    try:
        return applied_rule.EndDate()
    except:
        return '-'

def get_utilization_val_by_rule_name(obj, rule_name):
    rule_val = get_rule_value_by_rule_name(obj, rule_name)
    if rule_val is not None:
        return rule_val.WatermarkValue()
    else:
        return 0.0
        
def get_utilization_percentage_by_rule_name(threshold_val, utilization):
    try:
        calc_val = utilization_calculation(threshold_val, utilization)
        '''
        if abs(calc_val) >= 1000.0:
            return "{:,.2f}".format(calc_val).replace(',',' ').replace('.',',').replace(' ','')
        else:
            return "{:,.2f}".format(calc_val).replace('.',',')
        '''    
        if abs(calc_val) >= 1000.0:
            return "{:,.2f}".format(calc_val).replace(',','')
        else:
            return "{:,.2f}".format(calc_val)
        #return "{:,.2f}".format(utilization_calculation(threshold, rule_value)).replace('.',',') + '%'
        #return "{:,.2f}".format(calc_val).replace('.',',')
    except:
        #return "{:,.2f}".format(0.0).replace('.',',')
        return "{:,.2f}".format(0.0)

def get_threshold_value_by_rule_name(obj, rule_name):
    applied_rule = get_applied_rule_by_target(obj, rule_name)
    try:
        threshold_values = acm.FThresholdValue.Select( "appliedRule=" + str( applied_rule.Oid() ) )
        return threshold_values[0]
    except:
        return None

def get_threshold_limit_by_rule_name(obj, rule_name):
    threshold_value = get_threshold_value_by_rule_name(obj, rule_name)

    try:
        return threshold_value.ValueAdjusted()
    except:
        return 0.0

def get_applied_rule_by_target(obj, rule_name):
    try:
        appliedRules = acm.FAppliedRule.Select("targetId="+str(obj.Oid())+" and complianceRule='"+rule_name+"'")
        return appliedRules[0]
    except:
        return None

def get_rule_type_by_rule_name(rule_name):
    try:
        complianceRule = get_compliance_rule_by_name(rule_name)
        return complianceRule.DefinitionInfo()
    except:
        return ''

def get_threshold_by_rule_name(rule_name):
    complianceRule = get_compliance_rule_by_name(rule_name)
    
    try:
        threshold = complianceRule.Threshold().First()
        return threshold
    except:
        return None

def get_threshold_limit_by_rule_name2(rule_name):
    threshold = get_threshold_by_rule_name(rule_name)
    try:
        return threshold.ValueAdjusted()
    except:
        return 0.0

...

  Python_Price_Calc

import ael
import acm
from datetime import datetime, time
from decimal import Decimal, InvalidOperation

def DateAdjustment(date, period, location, businessDayMethod):
    calendar = acm.FCalendar[location]
    return acm.Time.DateAdjustPeriod(date, period, calendar, businessDayMethod)   

def ConvertTo24Hour(time_str):
    time_split = time_str.split(' ')
    if len(time_split) == 2:
        time_24 = datetime.strptime(time_str, "%I:%M:%S %p")
        return time_24.strftime("%H:%M:%S")
    elif len(time_split) == 1:
        time_24 = datetime.strptime(time_str, "%H:%M:%S")
        return time_24.strftime("%H:%M:%S")

def IsTimeInRange(object, method, str_start_time='17:00:00', str_end_time='23:59:59'):
    str_time = str(getattr(object, method)())
    str_time_only = ' '.join(str_time.split(' ')[1:])
    original_time = datetime.strptime(ConvertTo24Hour(str_time_only), "%H:%M:%S").time()
    new_start_time = datetime.strptime(str_start_time, "%H:%M:%S").time()
    new_end_time = datetime.strptime(str_end_time, "%H:%M:%S").time()
    return new_start_time <= original_time <= new_end_time

def getCurrencyConverter(currency1, currency2, market, price_type, asql_date_from, asql_date_to):
    query = f"""
        SELECT 
          DISPLAY_ID(P, 'insaddr') 'curr1', 
          DISPLAY_ID(P, 'curr') 'curr2', 
          P.{price_type}, 
          P.HISTORICAL, 
          DISPLAY_ID(P, 'ptynbr') 'market', 
          P.DAY 
        FROM 
          PRICE P 
        WHERE 
          (
            (
              DISPLAY_ID(P, 'insaddr') = '{currency1}' 
              AND DISPLAY_ID(P, 'curr') = '{currency2}'
            ) 
            OR (
              DISPLAY_ID(P, 'insaddr') = '{currency2}' 
              AND DISPLAY_ID(P, 'curr') = '{currency1}'
            )
          ) 
          AND P.HISTORICAL = 'Yes' 
          AND DISPLAY_ID(P, 'ptynbr') = '{market}' 
          AND P.DAY BETWEEN {asql_date_from}
          AND {asql_date_to}
        ORDER BY 
          P.DAY DESC
        """
    #print(query)
    result = ael.asql(query)
    try:
        return result[1][0]
    except:
        return None

def getRate(resultQuery, refCurrency):
    if resultQuery:
        curr1, curr2 = resultQuery[0][0], resultQuery[0][1]
        rate = resultQuery[0][2]
        if curr1 == refCurrency and curr2 == refCurrency:
            return 1.0
        elif curr1 != refCurrency and curr2 == refCurrency:
            return rate
        elif curr1 == refCurrency and curr2 != refCurrency:
            return 1 / rate
    return None
    
def UpdatedUSDEoDPrice(Currency):
    resultQuery = getCurrencyConverter(str(Currency), 'USD', 'EOD_MtM', 'SETTLE', 'DATE_ADD_DELTA(TODAY, -7, 0, 0)', 'TODAY')
    if resultQuery:
        return getRate(resultQuery, 'USD')
    return None

def SGDEoDPricePrevMonth(currency):
    resultQuery = getCurrencyConverter(currency, 'SGD', 'EOD_MtM', 'SETTLE', 'DATE_ADD_DELTA(FIRSTDAYOFMONTH, 0, -1, 0)', 'DATE_ADD_DELTA(FIRSTDAYOFMONTH, -1, 0, 0)')
    if resultQuery:
        return resultQuery[0][2]
    return None
    
def RateAmountToSGD(currency):
    resultQuery = getCurrencyConverter(currency, 'SGD', 'EOD_MtM', 'SETTLE', 'DATE_ADD_DELTA(FIRSTDAYOFMONTH, 0, -1, 0)', 'DATE_ADD_DELTA(FIRSTDAYOFMONTH, -1, 0, 0)')
    if resultQuery:
        return getRate(resultQuery, 'SGD')
    return None

def calcPriceChange(obj, BOOKVALAMT):
    price_str = obj.AsString().split(".")
    try:
        true_price = float(price_str[0] + "." + price_str[1][:1])
    except:
        return None
    BOOKVALAMT = float(BOOKVALAMT)
    return str(((true_price - BOOKVALAMT)/BOOKVALAMT)*100)
    ##return true_price - BOOKVALAMT

...

  Report_Python

import acm
import ael
import math
import traceback
import FLogger
import os
import re

logger = FLogger.FLogger(__name__)

def string_format_to_float(numberString):
    if numberString == "":
        num = 0
    else:
        for i in numberString[::-1]:
            if (i == ".") | (i == ","):
                dec = i
                break
        if dec == ".":
            num = float(numberString.replace(",",""))
        elif dec == ",":    
            num = float(numberString.replace(".","").replace(",","."))
    return num
    
def port_threshold_limit(obj, compliance_rule_name):
    #complianceRules = acm.FComplianceRule.Select('')
    complianceRule = acm.FComplianceRule[compliance_rule_name]
    '''
    applied_rule = None
    for compliance in complianceRules:
        if compliance.AppliedRules().Size() != 0:
            if compliance.AppliedRules().Last().Target() is object and compliance.Name() == compliance_rule_name:
                applied_rule = compliance.AppliedRules().Last()
                break
    '''
    try:
        applied_rule = complianceRule.AppliedRules().Last()
    
        if applied_rule.Target() is obj.Portfolio():
            return applied_rule.ThresholdValues().First().ValueAdjusted()
        else:
            return 0
    except:
        return 0

def get_year_difference(end_date, value_day):
    dateDiff = abs(acm.Time.DateDifference(end_date, value_day));
    hari_per_tahun = 365
    looper = True
    logger.LOG(dateDiff)

    count = 0
    while looper:
        dateDiff = dateDiff - hari_per_tahun

        if dateDiff < 0:
            break
        else:
            count += 1
    
    return count
    #return value_day
    
def combine_string(text1, text2, text3, text4, text5):
    return str(text1) + str(text2) + str(text3) + str(text4) + str(text5)

def sum_column(list_trade):
    
    total = 0
    list_trade = list(list_trade)
    
    for i in list_trade:
        total += int(i.Premium())
    
    return total

def remove_bg(nominal_premium):
    nominal_premium = str(nominal_premium)
    return nominal_premium
    
def multiply_value(value1, value2, trade):
    logger.LOG('==========')
    logger.LOG(trade.Trade().Oid())
    logger.LOG(trade.Value())
    logger.LOG(value1)
    logger.LOG('============')
    return value1 * value2

def calculate_end_interest(rate, start_date, end_date, amount):
    selisih_tanggal = acm.Time.DateDifference(end_date, start_date)
    end_interest = (amount * rate * selisih_tanggal)/365
    
    return end_interest/100
    
def calculate_rate(trade, column_name):

    context = acm.GetDefaultContext( )
    sheet_type = 'FTradeSheet'
    column_id = column_name
    ins = trade
    
    #Create CalculationSpace (a virtual Trading Manager)
    calc_space = acm.Calculations( ).CreateCalculationSpace( context, sheet_type )
    #Get raw value
    value = calc_space.CalculateValue( ins, column_id)
    #Get formatted data
    calculation = calc_space.CreateCalculation( ins, column_id )
    
    try:
        result = float(calculation.FormattedValue()) * ins.Nominal()
    except Exception as e:
        #traceback.logger.LOG_exc()
        logger.LOG(e)
        result = ''
    
    return result

def calculate_amount_closing(trade, check_yesterday):
    ins_obj = trade.Instrument()
    value_day = trade.ValueDay()
    curr = trade.Currency()
    nominal = trade.Nominal()
    
    if check_yesterday:
        yesterday = acm.Time.DateAddDelta(value_day, 0, 0, -1)
        rate = ins_obj.MtMPrice(yesterday, curr)
    else:
        rate = ins_obj.MtMPrice(value_day, curr)
        
        
    return nominal * rate

def calculate_amount_movement(trade):
    amount_closing = calculate_amount_closing(trade, False)
    amount_closing_yesterday = calculate_amount_closing(trade, True)
    return amount_closing - amount_closing_yesterday
    
def get_start_date_cashflow(trade):
    x = trade.Instrument().Legs()[0].CashFlows()

    list_diff, list_start_date = [], []
    
    for i in x:
        today = acm.Time.DateToday()
        difference = acm.Time.DateDifference(today, i.StartDate())
        list_diff.append(difference)
        list_start_date.append(i.StartDate())
        
    min_day = min(list_diff)
    index = list_diff.index(min_day)
   
    return list_start_date[index].replace('-','/')

def get_end_date_cashflow(trade):
    x = trade.Instrument().Legs()[0].CashFlows()

    list_diff, list_end_date = [], []
    
    for i in x:
        today = acm.Time.DateToday()
        difference = acm.Time.DateDifference(today, i.StartDate())
        list_diff.append(difference)
        list_end_date.append(i.EndDate())
        
    min_day = min(list_diff)
    index = list_diff.index(min_day)

    return list_end_date[index]

def testButton():
    logger.LOG('aaaa')

def testInputHooks(row, col, calcval, str, operation):
    logger.LOG('bbb')
    logger.LOG(str)
    logger.LOG(row)
    logger.LOG(col)
    logger.LOG(calcval)
    logger.LOG(operation)
    x = row.Trade()
    
    if len(str) > 0:
        x.Text2 = 'Test_Input_Tanggal : ' + str
    else:
        logger.LOG('masukk')
        x.Text2 = x.ValueDay()
        
    x.Commit()

def dynamic_rate(trade, column_id):
    ins_obj = trade.Instrument()
    text2 = trade.Text2().replace('Test_Input_Tanggal : ', '')

    rate = ins_obj.MtMPrice(text2, trade.Currency().Name())
    return rate

def calculate_PL_yesterday(value, type):
    
    cs = acm.Calculations().CreateStandardCalculationsSpaceCollection()
    today = acm.Time.DateToday()
    yesterday = acm.Time.DateAddDelta(today, 0, 0, -1)
    trade_calc = value.Calculation()
    
    try:
        if type == "TPL" :
            pv = trade_calc.TotalProfitLoss(cs, value.Instrument().StartDate(), yesterday).Number()
        
        elif type == "UPL" :
            pv = trade_calc.UnrealizedProfitLoss(cs, value.Instrument().StartDate(), yesterday).Number()
            
        elif type == "RPL" :
            pv = trade_calc.RealizedProfitLoss(cs, value.Instrument().StartDate(), yesterday).Number()
        else:
            pv = None
            
    except Exception as e:
        #traceback.logger.LOG_exc()
        logger.LOG(e)
        pv = None
    
    return pv

def sum_PL_yesterday(trades, type):
    
    cs = acm.Calculations().CreateStandardCalculationsSpaceCollection()
    result = 0
    today = acm.Time.DateToday()
    yesterday = acm.Time.DateAddDelta(today, 0, 0, -1)
        
    for i in trades:
        trade_calc = i.Calculation()
        
        try:
            if type == "TPL" :
                pv = trade_calc.TotalProfitLoss(cs, i.Instrument().StartDate(), yesterday).Number()
            
            elif type == "UPL" :
                pv = trade_calc.UnrealizedProfitLoss(cs, i.Instrument().StartDate(), yesterday).Number()
                
            elif type == "RPL" :
                pv = trade_calc.RealizedProfitLoss(cs, i.Instrument().StartDate(), yesterday).Number()
                
            else:
                pv = 0.00
                
        except Exception as e:
            #traceback.logger.LOG_exc()
            logger.LOG(e)
            pv = 0.00
            
        if math.isnan(pv):
            pv = 0
            
        result += pv
    
    return result

def get_value_from_hierarchy(hierarchy_name, node_name, ins_name):
    instrument_dict = {
        "Stock" : "-",
        "Future/Forward" : "-",
        "Option" : "Option",
        "Bond" : "Bond",
        "Deposit" : "MMLD",
        "Swap" : "IRS",
        "CurrSwap" : "CCS",
        "FxSwap" : "-",
        "BasketRepo/Reverse" : "Repo",
        "FXOptionDatedFwd" : "-",
        "Fx Rate" : "Fx Cash"
    }
    
    ins_name = ins_name.replace("'","")
    
    try:
        hierarchy = acm.FHierarchy[hierarchy_name]
        column_names = hierarchy.HierarchyType().HierarchyColumnSpecifications()
        list_nodes = hierarchy.HierarchyNodes()
        node_value = list_nodes[list_nodes.FindString(node_name)].HierarchyDataValues()
        index_column = column_names.FindString(instrument_dict[ins_name])
        
        if index_column == -1:
            index_column = "Not Found"
            
        result = float(node_value[index_column].DataValue())
    except Exception as e:
        #traceback.logger.LOG_exc()
        logger.LOG(e)
        #result = "'" + str(ins_name) + "' not found in " + str(hierarchy_name) + "."
        result = ""
    
    return result

def Total_Cashflow(list_trade):
    
    total = 0
    list_trade = list(list_trade)
    
    for i in list_trade:
        total += int(i.FaceValue())
    
    return total

def Instrument_Total_Cashflow(ins_type, list_trade):
    
    total = 0
    
    for i in list_trade:
        if i.Instrument().InsType().lower() == ins_type.lower():
            total += int(i.FaceValue())
    
    if total == 0 :
        total = None
        
    return total

def Product_Total_Cashflow(product_type, list_trade):
    
    total = 0
    
    for i in list_trade:
    
        try:
            if i.OptKey3().Name().lower() == product_type.lower() :
                total += int(i.FaceValue())
        except Exception as e:
            #traceback.logger.LOG_exc()
            logger.LOG(e)
            continue
    
    if total == 0 :
        total = None
        
    return total

def MMInterbankLIQ19(trade, nominal_type, list_category): # Buat FTradeRow
    result = None
    
    try:
        if trade.OptKey4().Name() in list_category:

            if nominal_type == "Buy" and trade.Nominal() >= 0 :
                result = trade.Nominal()
            elif nominal_type == "Sell" and trade.Nominal() < 0 :
                result =  trade.Nominal()
                
            elif nominal_type == "All" : 
                result =  trade.Nominal()
    except:
        pass
    
    return result

def TotalMMInterbankLIQ19(list_trade, nominal_type, list_category):
    result = 0

    for i in list_trade:
        temp_result = MMInterbankLIQ19(i, nominal_type, list_category)
        try:
            result += temp_result
        except:
            result += 0
    
    if result == 0 :
        result = None
        
    return result
    
reports_rows = {}

def generate_row_number(trade_id, report_key, group):

    global reports_rows

    if report_key not in reports_rows:
        reports_rows[report_key] = []
            
    try :
        index = reports_rows[report_key].index(trade_id)
        row_number = index + 1
    except:
        reports_rows[report_key].append(trade_id)
        row_number = len(reports_rows[report_key])

    return row_number

def get_date_from_cashflow_for_nominal_value(all_cashflow):

    date_input = acm.Time.DateToday()
    
    for cf in all_cashflow:
        time_range = bool(cf.StartDate() <= date_input and cf.EndDate() >= date_input)
        cashflow_type = cf.CashFlowType()
            
        if time_range and 'Rate' in cashflow_type :
            return cf.PayDate()
            
def get_projected_from_money_flow(trade, pay_date, cashflow_type):
    moneyflows = trade.MoneyFlows()
    total = 0
    
    try:
        for i in moneyflows:
            if i.Type() == "Premium" :
                continue
            
            proj_value = i.Calculation().Projected(stand_calc)
            result = proj_value.Number()
            nominal = trade.Nominal()
            
            time_range = acm.Time.DateDifference(pay_date, i.PayDate())

            if time_range == 0 and "Amount" not in cashflow_type and result != nominal :
                total += result
                break
            elif time_range == 0 and "Amount" in cashflow_type:
                total += nominal
                break
    except:
        pass
        
    return total

def get_projected_and_paydate_from_cashflow(trade, tipe_kolom):
    moneyflows = trade.MoneyFlows()
    legs = trade.Instrument().Legs()
    interest_date,interest_payment, interest_receive = '', 0, 0
    for i in legs:
        all_cashflow = i.CashFlows()
        leg_currency = i.Currency().Name()
        pay_date = get_date_from_cashflow_for_nominal_value(all_cashflow)
        
        if i.IsLocked():
            interest_date = pay_date
            
        for j in moneyflows:
            if j.Currency().Name() == leg_currency and j.PayDate() == pay_date and 'Rate' in j.Type(): 
                
                temp_nominal = get_projected_from_money_flow(trade, pay_date, j.Type())
                
                try:
                    temp_nominal = float(temp_nominal)
                except:
                    temp_nominal = 0
                    
                if i.PayLeg() :
                    interest_payment = temp_nominal
                else:
                    interest_receive = temp_nominal 
                    if trade.Oid() == 11343:
                        logger.LOG(temp_nominal)
                    
    
    if tipe_kolom == 'Proceed' :
        return interest_payment + interest_receive
    else:
    
        if interest_date == '':
            return pay_date
        else:
            return interest_date
            

def get_ctp_report_type(trade):
    cpty = trade.Counterparty()
    
    ctp_participants = cpty.AddInfoValue('CTPParticipants')
    result_group = ""
    
    try:
        #if "TQA" in cpty.Name() or "Sekuritas" in cpty.Name():
        
        if ctp_participants.lower() == 'yes' :
            cpty.AddInfoValue('CTPParticipants','Yes')
            result_group = "TWO"
        else:
            cpty.AddInfoValue('CTPParticipants','No')
            result_group = "ONE"
    
    except Exception as e: 
        logger.LOG(e)
    
    cpty.Commit()
    return result_group
    
def ctp_TransactionType(trade):
    
    type_result = ""
    ins_type = str(trade.InstrumentSubType())
    
    if 'repo' in ins_type.lower() :
        type_result = "R"
    elif acm.Time.AsDate(trade.TradeTime()) == trade.Instrument().StartDate() :
        type_result = "W"
    else:
        type_result = "O"
    
    trade.AddInfoValue('TransactionType', type_result)
    trade.Commit()
    
    return type_result

def ctp_FileGenerationStatus(trade, CTPStateStatus):
    context = acm.GetDefaultContext()
    sheetType = 'FTradeSheet'
    input = trade
    columnId_BoS = 'Bought or Sold'

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    calculation_BoS = calcSpace.CreateCalculation(input, columnId_BoS)
    buyorsell = calculation_BoS.FormattedValue().upper()
    
    statestatus = CTPStateStatus.upper() if CTPStateStatus != 'Amend' else 'AMD'
    
    if CTPStateStatus.lower() == 'success':
        return 'SUCCESS'
    else:
        trdnbr = str(trade.Oid())
        from CTP_Mandiri_Export_CSV import exportPath
        exportPath += '\\{}\\'.format(buyorsell)
        os.chdir(str(exportPath))
        regex = '[0-9]{12}'
        filename = 'CTP_{}_{}_{}.csv'.format(trdnbr, regex, statestatus)
        found = False
        for file in os.listdir():
            if re.search(filename, file):
                found = True
                break
            else:
                continue
                
        if found == True:
            return 'SUCCESS'
        else:
            return 'FAILED_{}'.format(statestatus)

def get_Mandiri_SID():
    mandiri = acm.FParty['Mandiri TRS HO']
    return mandiri.AdditionalInfo().SID()

def get_repurchase_value(trade):

    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    input = trade.MoneyFlows()
    columnId = 'Cash Analysis Projected'
    
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    
    sum = 0
    list = []
    
    for mf in input:
        if mf.MoneyFlowType() != "Trade Premium":
            calculation = calcSpace.CreateCalculation(mf, columnId).FormattedValue()
            num=float(calculation.replace(",",""))
            sum+=num
            list.append(mf.MoneyFlowType())
    
    return sum

def get_Collateral(trade):
    try:
        agl = trade.AgreementLinks()[0]
        mag = agl.MasterAgreement().Name()
        ms = agl.MarginingSet().Name()
        query = """
            select al.trdnbr, mag.name, ms.name 
            from TradeAgreementLink al, MarginingSet ms, MasterAgreement mag
            where al.margining_set_seqnbr = ms.seqnbr
            and al.master_agreement_seqnbr = mag.seqnbr
            and mag.name = '{master_agreement}'
            and ms.name = '{margining_set}'
            """.format(master_agreement = mag, margining_set = ms)
        for i in ael.asql(query)[1][0]:
            trd_no = i[0]
            t = acm.FTrade[trd_no]
            if (trd_no != trade.Oid()) & (t.Instrument().InsType().lower() in ('collateral', 'bond', 'bill', 'frn', 'mbs/abs')):
                return t, t.Instrument().Name()
    except Exception as e:
        print(get_Collateral.__name__, str(trade.Oid()), str(e))
        #logger.LOG("%s of %s : %s" %(get_Collateral.__name__, str(trade.Oid()), str(e)))
        return None

def get_Collateral_Instrument(trade):
    coll = get_Collateral(trade)
    if coll != None:
        return coll[1]
    else:
        return None

def get_Collateral_Instrument_Issuer(trade):
    coll = get_Collateral(trade)
    if coll != None:
        ins = acm.FInstrument[coll[1]]
        return ins.Issuer()
    else:
        return None
        
def get_Collateral_Instrument_ISIN(trade):
    coll = get_Collateral(trade)
    if coll != None:
        ins = acm.FInstrument[coll[1]]
        return ins.Isin()
    else:
        return None

def get_Collateral_Trade(trade):
    coll = get_Collateral(trade)
    if coll != None:
        return coll[0]
    else:
        return None
        
def get_Collateral_Secid(trade):
    coll = get_Collateral(trade)
    if coll !=None:
        return coll[0].Instrument().Name()
    else :
        return None

def get_AccruedInterest(trade):
    cs = acm.Calculations().CreateStandardCalculationsSpaceCollection()
    tradeCalcs = trade.Calculation()
    accInt = tradeCalcs.AccruedInterestAsPriceSource(cs)
    return accInt.FormattedValue()

def get_Repo_Haircut(trade):
    coll = get_Collateral(trade)
    if coll != None:
        return coll[0].Haircut()
    else:
        return 0.0

def get_Repo_Yield(trade):
    if trade != None:
        context = acm.GetDefaultContext()
        sheetType = 'FTradeSheet'
        columnId = 'Trade Yield'
        
        calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
        calculation = calcSpace.CreateCalculation(trade, columnId).FormattedValue()
        num = string_format_to_float(calculation)
        return num

def Repo_Trade_Yield(trade):
    if trade.Instrument().InsType() != 'BasketRepo/Reverse':
        return get_Repo_Yield(trade)
    else:
        trade = get_Collateral_Trade(trade)
        return get_Repo_Yield(trade)

def get_Repurchase_Amount(trade):
    all_moneyflow = trade.MoneyFlows()
    cs = acm.Calculations().CreateStandardCalculationsSpaceCollection()
    filtered_mf = [each_mf for each_mf in all_moneyflow if 'Fixed Rate' in str(each_mf.Type()) or 'Float Rate' in str(each_mf.Type())]
    count = len(filtered_mf)-1
    if filtered_mf:
        proj = filtered_mf[count].Calculation().Projected(cs).Value().Number()
        cs.Clear()
        return trade.Nominal()+ proj
def StartAccrual(trade):
    calendar = acm.FCalendar['Jakarta']
    today = acm.Time.DateToday()
    endofyear = acm.Time.FirstDayOfYear(today)
    endofyear = acm.Time.DateAdjustPeriod(endofyear,'-1d',calendar,2)
    recrate = 0
    payrate = 0
    
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    columnId_Rate = "Cash Analysis Forward Rate"
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    
    for mf in trade.MoneyFlows():
        if endofyear >= mf.StartDate() and endofyear <= mf.EndDate():
            if mf.CashFlow().Leg().PayType() == "Receive":
            
                if mf.CashFlowType() == "Fixed Rate":
                
                    datediff = abs(acm.Time.DateDifference(mf.StartDate(),endofyear))
                    rate = trade.Instrument().CouponRate()
                    interest = (trade.Nominal()*rate)/100
                    recrate = interest*(datediff/360)
                    
                elif mf.CashFlowType() == "Float Rate":
                    result_rate = calcSpace.CreateCalculation(mf, columnId_Rate)
                    if abs(result_rate.Value())>0:
                        rate = result_rate.Value()*100
                        interest = (trade.Nominal()*rate)/100
                        recrate = interest*(datediff/360)
                        
                else:
                    continue
                    
            elif mf.CashFlow().Leg().PayType() == "Pay":
            
                if mf.CashFlowType() == "Float Rate":
                
                    datediff = abs(acm.Time.DateDifference(mf.StartDate(),endofyear))
                    result_rate = calcSpace.CreateCalculation(mf, columnId_Rate)
                    if abs(result_rate.Value())>0:
                        rate = result_rate.Value()*100
                        interest = (trade.Nominal()*rate)/100
                        payrate = (interest*datediff)/360
                        
                elif mf.CashFlowType() == "Fixed Rate":
                
                    datediff = abs(acm.Time.DateDifference(mf.StartDate(),endofyear))
                    rate = trade.Instrument().CouponRate()
                    interest = (trade.Nominal()*rate)/100
                    payrate = (interest*datediff)/360
                    
                else:
                    continue
                
        else:
            continue
    
    calcSpace.Clear()
    return (payrate*-1)-recrate
    
def EndAccrual(trade):
    today = acm.Time.DateToday()
    recrate = 0
    payrate = 0
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    columnId_Rate = "Cash Analysis Forward Rate"
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    
    for mf in trade.MoneyFlows():
        if today >= mf.StartDate() and today <= mf.EndDate():
            if mf.CashFlow().Leg().PayType() == "Receive":
            
                if mf.CashFlowType() == "Fixed Rate":
                
                    datediff = abs(acm.Time.DateDifference(mf.StartDate(),today))
                    rate = trade.Instrument().CouponRate()
                    interest = (trade.Nominal()*rate)/100
                    recrate = interest*(datediff/360)
                    
                elif mf.CashFlowType() == "Float Rate":
                    datediff = abs(acm.Time.DateDifference(mf.StartDate(),today))
                    result_rate = calcSpace.CreateCalculation(mf, columnId_Rate)
                    if abs(result_rate.Value())>0:
                        rate = result_rate.Value()*100
                        interest = (trade.Nominal()*rate)/100
                        recrate = interest*(datediff/360)
                        
                else:
                    continue
                    
            elif mf.CashFlow().Leg().PayType() == "Pay":
            
                if mf.CashFlowType() == "Float Rate":
                
                    datediff = abs(acm.Time.DateDifference(mf.StartDate(),today))
                    result_rate = calcSpace.CreateCalculation(mf, columnId_Rate)
                    if abs(result_rate.Value())>0:
                        rate = result_rate.Value()*100
                        interest = (trade.Nominal()*rate)/100
                        payrate = (interest*datediff)/360
                        
                elif mf.CashFlowType() == "Fixed Rate":
                
                    datediff = abs(acm.Time.DateDifference(mf.StartDate(),today))
                    rate = trade.Instrument().CouponRate()
                    interest = (trade.Nominal()*rate)/100
                    payrate = (interest*datediff)/360
                    
                else:
                    continue
        else:
            continue
    calcSpace.Clear()
    return (payrate*-1)-recrate

...

  Report_Python_P2

import acm, ael
from Report_Python import get_Collateral

def ReadParams(parameter_name):
    values = {}
    p = acm.GetDefaultContext().GetExtension('FParameters', 'FObject', parameter_name)
    params = p.Value()
    for k in params.Keys():
        k = str(k)
        value = str( params.At(k) )
        value = None if value == "" else value
        values[k] = value
    return values

def GroupLabel(Threshold_Now, p1, p2, p3, p4, p5, p6, p7, p8, p9):
    Threshold_Now = acm.FThreshold[p1]
    return Threshold_Now.GroupLabel()
    
def FixedCurrencyAppliedRule(AppliedRule, p1, p2, p3, p4, p5, p6, p7, p8, p9):
    appliedRule = acm.FAppliedRule[p1]
    complianceRule = appliedRule.ComplianceRule()
    try:
        param = appliedRule.ParameterNames().First()
        ccy = appliedRule.GetParameter(param).At('FixedCurr').Name()
    except:
        try:
            ccy = complianceRule.Definition().Column().Configuration().ParamDict().At('columnParameters').At('FixedCurr').Name()
        except:
            ccy = "-"
    return str(ccy)

def BranchCodeByServer():
    dictionary = ReadParams('BranchServerList')
    host_port = acm.FACMServer().ADSAddress().split(':')
    host = host_port[0]
    port = host_port[-1]
    search_string = f"{host}:{port}"
    for key, value in dictionary.items():
        if value == search_string:
            return key
    return None

def FirstWordOfInstrument(InstrumentName):
    return InstrumentName.split(' ')[0]

def CashflowPresentValue(trade):
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    input = trade.MoneyFlows()
    columnId = 'Portfolio Present Value'
    
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    
    for mf in input:
        if mf.Type() == "Fixed Amount":
            calculation = calcSpace.CreateCalculation(mf, columnId)
            result = calculation.Value()
    
    return result

def CashflowProjectedValue(trade):
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    input = trade.MoneyFlows()
    columnId = 'Cash Analysis Projected'
    
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    
    list = []
    
    for mf in input:
        if mf.Type() == "Fixed Rate":
            if mf.PayDate() > acm.DateToday():
                calculation = calcSpace.CreateCalculation(mf, columnId)
                result = calculation.Value()
                list.append(result)
    
    return list[0]

def usd_price(trade):

    prices = acm.FPrice.Select('market = EOD')
    
    for p in prices:
        if p.Instrument():
            if p.Instrument().InsType()=='Curr' and p.Instrument().Name()=='USD':
                if p.Currency().Name() == trade.Currency().Name():
                    return p.Settle()

def hkd_price(trade):

    prices = acm.FPrice.Select('market = EOD')
    
    for p in prices:
        if p.Instrument():
            if p.Instrument().InsType()=='Curr' and p.Instrument().Name()=='HKD':
                if p.Currency().Name() == trade.Currency().Name():
                    return p.Settle()

def sum_positionccy1(trds):
    list = []
    sum_positionccy1 = 0
    for trd in trds:
        if trd.Nominal()<0:
            sum_positionccy1 += trd.Nominal()
    return sum_positionccy1

def NOP_PV(prf):
    context = acm.GetDefaultContext()
    sheetType = 'FPortfolioSheet'
    columnId = 'Final NOP Portfolio(PV)'
    
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    calculation = calcSpace.CreateCalculation(prf, columnId)
    result = calculation.Value()
    
    return result

def usd_price_mtm(trade, curr_target='USD'):

    prices = acm.FPrice.Select(f"instrument = '{trade.Instrument().Currency().Name()}' and market = 'EOD_MtM'")
    for p in prices:
        if p.Instrument():
            if p.Currency().Name() == curr_target:
                return p.Settle()

def npv_journal(trd):
    context = acm.GetDefaultContext()
    sheetType = 'FTradeSheet'
    columnId = 'Portfolio Present Value'
    
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    calculation = calcSpace.CreateCalculation(trd, columnId)
    result = calculation.Value()
    
    return result

def buycurrency_custom(trd):
    context = acm.GetDefaultContext()
    sheetType = 'FTradeSheet'
    columnId = 'Buy Currency'
    
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    calculation = calcSpace.CreateCalculation(trd, columnId)
    result = calculation.Value()
    
    return result

def sellcurrency_custom(trd):
    context = acm.GetDefaultContext()
    sheetType = 'FTradeSheet'
    columnId = 'Sell Currency'
    
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    calculation = calcSpace.CreateCalculation(trd, columnId)
    result = calculation.Value()
    
    return result

def get_price_entry(instrument, currency, market):

    query_string = f"""
    SELECT 
            Display_id(p, 'insaddr') 'curr1', 
            Display_id(p, 'curr') 'curr2', 
            p.settle, 
            p.historical, 
            Display_id(p, 'ptynbr') 'market', 
            p.day 
        FROM 
            price p 
        WHERE 
            Display_id(p, 'insaddr') IN ('{instrument}', '{currency}') 
            AND Display_id(p, 'curr') IN ('{instrument}', '{currency}') 
            AND p.historical = 'Yes' 
            AND Display_id(p, 'ptynbr') = '{market}' 
            AND p.day BETWEEN date_add_delta(today, -7, 0, 0) 
            AND today 
        ORDER BY 
            p.day DESC
    """

    query_result = ael.asql(query_string)
    
    try:
        return query_result[1][0][0][2]
    except:
        return None

def get_balance(addinfo):
    result = 0
    if "_C" in addinfo:
        result = addinfo.split("_C")
    elif "_D" in addinfo:
        result = addinfo.split("_D")
    return result[-1]

def closingPriceBond(trd):
    insName = trd.Instrument().Name()
    price = acm.FPrice.Select(f"instrument = '{insName}' and market = 'EOD_MtM' and historical = True")
    return price.Last().Settle() if price else None
    
def ntr_lastDateOnMonth(curr_use):
    jakarta = acm.FCalendar['Jakarta']    
    first_date = acm.Time().FirstDayOfMonth(acm.Time().DateToday())
    lastDateLastMonth = acm.Time.DateAdjustPeriod(first_date,'-1d',jakarta,2)
    
    price_list = acm.FPrice.Select(f"instrument = '{curr_use}' and currency = 'IDR' and market = 'EOD_MtM' and day = '{lastDateLastMonth}'")
    return price_list.Last().Settle() if price_list else 1

def ntr_lastDateOnMonth_usd(curr_use):
    jakarta = acm.FCalendar['Jakarta']    
    first_date = acm.Time().FirstDayOfMonth(acm.Time().DateToday())
    lastDateLastMonth = acm.Time.DateAdjustPeriod(first_date,'-1d',jakarta,2)
    
    price_list = acm.FPrice.Select(f"instrument = '{curr_use}' and currency = 'USD' and market = 'EOD_MtM' and day = '{lastDateLastMonth}'")
    return price_list.Last().Settle() if price_list else 1
    
def get_Branch(Portofolioname):
    if "ACU"in(Portofolioname):
        return "ACU"
    elif "DBU"in(Portofolioname):
        return "DBU"
    else : 
        return "none"
        

...

  SendReportToEmail
import acm
import FParameterUtils
from ICTCustomFEmailTransfer import ICTCustomFEmailTransfer

def process_text(reportObj, raw_text):
    processed_string = raw_text.replace("<Date>", acm.Time.DateToday())
    processed_string = processed_string.replace("<Report Name>", reportObj.params.fileName)
    return processed_string

def pre_process_XML(reportObj, params, ReportXML):
    print(ReportXML)
    return ReportXML

def post_process_XML(reportObj, params, ReportXML):
    SMTPParameters = FParameterUtils.GetFParameters(acm.GetDefaultContext(), 'CustomReportSMTPParameters')
    hostname = str(SMTPParameters.At('SMTPServer'))
    port = int(SMTPParameters.At('SMTPPort').Text())
    username = SMTPParameters.At('EmailUserName').Text()
    password = SMTPParameters.At('SMTPPassword').Text()
    tls_mode = bool(SMTPParameters.At('SecureSMTPConnection').Text())

    # Setup SMTPServer Object
    SMTPServer = ICTCustomFEmailTransfer.SMTPServer(hostname=hostname, port=port, username=username, password=password, tls_mode=tls_mode)
    
    # Get Reports
    generated_reports = reportObj.generatedFilePaths
    
    # Setup Message Object
    split_params = params.split("\\ ")
    recipients = split_params[0].split(", ")
    subject = process_text(reportObj,  split_params[1])
    sender = SMTPParameters.At('EmailSender').Text()
    body = process_text(reportObj, split_params[2])
    cc = None if len(split_params) <= 3 else split_params[3].split(", ")
    
    MessageObject = ICTCustomFEmailTransfer.Message(recipients, subject, sender, body, cc, generated_reports)
    
    # Send email
    EmailTransfer = ICTCustomFEmailTransfer(SMTPServer, MessageObject)
    
    try:
        EmailTransfer.Send()
        print("Email transfer successful for", reportObj.params.fileName)
    except Exception as e:
        print("Email Transfer failed:", e)

...

  SGMO0Xa_NOP_Monitoring_Report

import os
import ael
import locale 
import time
from ICTMODULES_FOR_HTML_AND_XSLFO_GENERATOR import *
from Python_Price_Calc import UpdatedUSDEoDPrice

report_type_dict = {
    "FX Intraday" : 'SGMO01a', 
    "FX Overnight" : 'SGMO02a', 
    "FI Intraday" : 'SGMO03a',
    "FI Overnight" : 'SGMO04a'
    }
users = [user.userid for user in ael.User.select()]
portfolios = [prf.prfid for prf in ael.Portfolio.select()]
currencies = [record.insid for record in ael.Instrument.select('instype="curr"')]
html_gen = HTMLGenerator()
additional_style = """
                table {
                        margin-left: 30px;
                        margin-bottom: 20px;
                        border-collapse: collapse;
                    }
                th, td {
                    border: 1px solid black;
                    padding: 8px;
                    text-align: center;
                }
                caption {
                    caption-side: top; 
                    margin-bottom: 10px;
                    font-weight: bold; 
                    font-size: 13pt;
                    text-align: left;
                    font-family: Arial;
                }
                #title {
                    padding: 0px 20px 0px 20px;
                    width: 100%;
                    margin: 0px 0px 20px 20px;
                    font-size: 24pt;
                    font-weight: bold;
                    background:#002060;
                    text-align: center;
                    color:white;
                }
                .header-blue {
                    font-weight: bold;
                    background: #dae9f8;
                    color: black;
                    border: 1px solid black;
                    margin: 0px; 
                }
                """

def number_reformat(value):
    try:
        locale.setlocale(locale.LC_ALL, '')
        return locale.format_string("%.2f", float(value), grouping=True)
    except:
        return value

def reformat_data(data):
    for i, row in enumerate(data):
        for k, value in enumerate(row):
            data[i][k] = number_reformat(value)
    return data

def calculate_subtotal(data):
    data_new = [row[2:] for row in data]
    result = ['-' for _ in range(len(data_new[0]))]
    del_idx = []
    for n in range(len(data_new[0])):
        sum_value = 0
        has_number = False
        for row in data_new:
            try:
                if row[n] not in ('-', '0', '0.0', 'nan', 'NaN'):
                    sum_value += float(row[n].replace(",", ""))
                    has_number = True
                else:
                    pass
            except:
                continue
        if has_number and sum_value:
            result[n] = str(sum_value)
        elif not has_number and not sum_value:
            del_idx.append(n)
    return result, del_idx

def delete_element_from_data(data, delete_index):
    new_list = []
    for sublist in data:
        temp_list = []
        for i, value in enumerate(sublist):
            if i not in delete_index:
                temp_list.append(value)
        new_list.append(temp_list)
    return new_list

def fill_empty_nop(dict, trader):
    for ccy in currencies:
        dict[trader][ccy] = "-"
    return dict
    
def extract_threshold_data(type, compliance_name, trader_name):
    query = f"""
    SELECT AEL_S(AR, 'Report_Python_P2.FixedCurrencyAppliedRule', AR.SEQNBR) 'curr',
           TV.VALUE, T.DEFAULT_VALUE
    FROM   THRESHOLDVALUE TV,
           THRESHOLD T,
           APPLIEDRULE AR,
           COMPLIANCERULE CR,
           TEXTOBJECT TO
    WHERE  TV.THRESHOLD = T.SEQNBR
           AND TV.APPLIED_RULE = AR.SEQNBR
           AND AR.COMPLIANCE_RULE = CR.SEQNBR
           AND AR.TARGET_SEQNBR = TO.SEQNBR
           AND AR.TARGET_TYPE = 'TextObject'
           AND CR.NAME = '{compliance_name}'
           AND TO.NAME = '[Target] {type} - {trader_name}'
           AND AEL_S(T, 'Report_Python_P2.GroupLabel', T.SEQNBR) = 'Group 1'
    """
    result = ael.asql(query)    
    try:
        return result[1][0][0]
    except:
        return None
    
def add_limit_available_column(type, data, compliance, utilization):
    trader = None
    for i, _ in enumerate(data):
        if data[i][1] != trader:
            trader = data[i][1]
            threshold_data = extract_threshold_data(type, compliance, trader)
            if threshold_data:
                ccy = threshold_data[0]
                limit = threshold_data[1]
                if limit == '':
                    limit = threshold_data[2]
                if ccy != 'USD':
                    limit = limit * UpdatedUSDEoDPrice(ccy)
                try:
                    available = float(limit) - sum(utilization[trader])
                except:
                    available = "-"
                data[i].extend([str(limit), str(available)])
            else:
                data[i].extend(["-", "-"])
        else:
            continue
    return data

def get_limit(type, trader, compliance):
    threshold_data = extract_threshold_data(type, compliance, trader)
    if threshold_data:
        ccy = threshold_data[0]
        limit = threshold_data[1]
        if limit == '':
            limit = threshold_data[2]
        if ccy != 'USD':
            limit = limit * UpdatedUSDEoDPrice(ccy)
        return limit
    return None
            
def add_limit_available_row(type, trader, compliance, total):
    m_limit = get_limit(type, trader, compliance)
    try:
        m_available = float(m_limit) - float(total)
    except:
        m_limit, m_available = "-", "-"
    return [m_limit, m_available]

def collect_utilization(data):
    utilization = {}
    for row in data:
        trader = row[1]
        if trader not in utilization:
            utilization[trader] = []
        try:
            utilization[trader].append(float(row[-1]))
        except:
            utilization[trader].append(0.0)
    return utilization
    
def process_data_table_tpl_nop(csv_trading_manager, type, monthly_compliance, yearly_compliance):
    row_state = None
    temp_row, main_nop, nop_data = [], {}, []
    temp_row_usd, main_nop_usd, nop_usd_data = [], {}, []
    main_tpl, portfolios_list, pnl_tdy, pnl_mtd, pnl_ytd, monthly_limit, yearly_limit = {}, [], [], [], [], [], []
    rows_data = csv_trading_manager.split('\n')
    for i, line in enumerate(rows_data):
        row = line.split(',')
        if "Row" in row:
            if "TPLD_USD" in row and "TPLM_USD" in row and "TPLY_USD" in row:
                row_state = "tpl"
                tdy_idx = row.index('TPLD_USD')
                mtd_idx = row.index('TPLM_USD')
                ytd_idx = row.index('TPLY_USD')
            elif "NominalNOP" in row:
                row_state = "nop"
                nop_ori_idx = row.index("NominalNOP")
                nop_usd_idx = row.index("NominalNOP_USD")
            else:
                row_state == 'others'
        elif row_state:
            first_column = row[0]
            if row_state == "tpl":
                next_row = rows_data[i+1].split(',')
                if first_column in users or next_row[0] == 'Row':
                    if next_row[0] == 'Row':
                        try:
                            pnl_tdy.append(main_tpl[trader]["Total"]['TDY'])
                            pnl_mtd.append(main_tpl[trader]["Total"]['MTD'])
                            pnl_ytd.append(main_tpl[trader]["Total"]['YTD'])
                            portfolios_list.append('Total')
                        except:
                            pass
                        continue
                    try:
                        pnl_tdy.append(main_tpl[trader]["Total"]['TDY'])
                        pnl_mtd.append(main_tpl[trader]["Total"]['MTD'])
                        pnl_ytd.append(main_tpl[trader]["Total"]['YTD'])
                        portfolios_list.append('Total')
                    except:
                        pass
                    trader = first_column
                    main_tpl[trader] = {}
                    main_tpl[trader]["Total"] = {}
                    main_tpl[trader]["Total"]['TDY'] = row[tdy_idx]
                    main_tpl[trader]["Total"]['MTD'] = row[mtd_idx]
                    main_tpl[trader]["Total"]['YTD'] = row[ytd_idx]
                    monthly_limit.extend(add_limit_available_row(type, trader, monthly_compliance, row[mtd_idx]))
                    yearly_limit.extend(add_limit_available_row(type, trader, yearly_compliance, row[ytd_idx]))
                    
                elif first_column in portfolios:
                    portfolio = first_column
                    portfolios_list.append(portfolio)
                    main_tpl[trader][portfolio] = {}
                    main_tpl[trader][portfolio]['TDY'] = row[tdy_idx]
                    main_tpl[trader][portfolio]['MTD'] = row[mtd_idx]
                    main_tpl[trader][portfolio]['YTD'] = row[ytd_idx]
                    pnl_tdy.append(row[tdy_idx])
                    pnl_mtd.append(row[mtd_idx])
                    pnl_ytd.append(row[ytd_idx])
                    
                else:
                    continue
                    
            elif row_state == "nop":
                if 'SGMO' in first_column:
                    trader = None
                    main_nop_usd['SGMO'] = row[nop_usd_idx]
                
                elif first_column in users or first_column == '':
                    if first_column == '':
                        try:
                            for ccy in main_nop[trader]:
                                temp_row.append(main_nop[trader][ccy])
                                temp_row_usd.append(main_nop_usd[trader][ccy])
                            temp_row_usd.append(main_nop_usd[trader]['Total'])
                            nop_data.append(temp_row)
                            nop_usd_data.append(temp_row_usd)
                        except:
                            pass
                        break
                        
                    if first_column != trader:
                        try:
                            for ccy in main_nop[trader]:
                                temp_row.append(main_nop[trader][ccy])
                                temp_row_usd.append(main_nop_usd[trader][ccy])
                            temp_row_usd.append(main_nop_usd[trader]['Total'])
                            nop_data.append(temp_row)
                            nop_usd_data.append(temp_row_usd)
                        except:
                            pass
                            
                        trader = first_column
                        start_row = ["Trading", trader]
                        
                        temp_row = []
                        temp_row_usd = []
                        
                        main_nop[trader] = {}
                        main_nop_usd[trader] = {}
                        main_nop_usd[trader]['Total'] = row[nop_usd_idx]
                        
                        main_nop = fill_empty_nop(main_nop, trader)
                        main_nop_usd = fill_empty_nop(main_nop_usd, trader)
                        
                        temp_row.extend(start_row)
                        temp_row_usd.extend(start_row)

                elif first_column in currencies:
                    currency = first_column
                    main_nop[trader][currency] = row[nop_ori_idx]
                    main_nop_usd[trader][currency] = row[nop_usd_idx]
                    
                else:
                    continue

    table_data = [(main_tpl, portfolios_list, pnl_tdy, pnl_mtd, pnl_ytd, monthly_limit, yearly_limit), (nop_data, main_nop), (nop_usd_data, main_nop_usd)]
    return table_data
        
def prepare_main_table(html_content, main_title):
    header_list = [main_title]
    row_data = [[]]
    html_content = html_gen.prepare_html_table(html_content, header_list, row_style="id='title'", header_style="", table_styling="")
    html_content = html_gen.add_data_row(html_content, row_data, row_class="", cell_class="style='border:0px;'")
    html_content = html_gen.close_html_table(html_content) 
    return html_content
    
def trading_profit_loss_table(html_content, collected_data):
    data, portfolios_list, pnl_tdy, pnl_mtd, pnl_ytd, _, _ = collected_data
    
    header_list = ["Portfolio"] + [trader for trader in data]
    row_data_sub_header = [portfolios_list]
    row_data= [
        ["PnL TDY"] + pnl_tdy,
        ["PnL MTD"] + pnl_mtd,
        ["PnL YTD"] + pnl_ytd,
        []
        ]
    row_data = reformat_data(row_data)
    header_styling = "class='header-blue'"
        
    html_content = html_gen.prepare_html_table(html_content, header_list, row_style="", header_style=header_styling, table_styling="")
    for header in header_list:
        if header == 'Portfolio':
            html_content = html_content.replace(f"<th {header_styling}>{header}", f"<th rowspan='2' {header_styling}>{header}")
        else:
            html_content = html_content.replace(f"<th {header_styling}>{header}", f"<th colspan='{len(data[header])}' {header_styling}>{header}")
    html_content = html_gen.add_data_row(html_content, row_data_sub_header, row_class=header_styling, cell_class="")
    html_content = html_gen.add_data_row(html_content, row_data, row_class="", cell_class="")
    html_content += "<caption>1. Trading Profit/Loss</caption>"
    html_content = html_gen.close_html_table(html_content)
    return html_content

def trading_profit_loss_limit_table(html_content, collected_data):
    data, _, _, _, _, monthly_limit, yearly_limit = collected_data
    header_list = ["Loss Limit"] + [trader for trader in data]
    row_data_sub_header = [["Limit", "Available"] * len(data)]
    row_data = [
        ["Monthly"] + monthly_limit, 
        ["Yearly"] + yearly_limit,
        []
        ]
    row_data = reformat_data(row_data)
    header_styling = "class='header-blue'"
        
    html_content = html_gen.prepare_html_table(html_content, header_list, row_style="", header_style=header_styling, table_styling="")
    for header in header_list:
        if header == 'Loss Limit':
            html_content = html_content.replace(f"<th {header_styling}>{header}", f"<th rowspan='2' {header_styling}>{header}")
        else:
            html_content = html_content.replace(f"<th {header_styling}>{header}", f"<th colspan='2' {header_styling}>{header}")
    html_content = html_gen.add_data_row(html_content, row_data_sub_header, row_class=header_styling, cell_class="")
    html_content = html_gen.add_data_row(html_content, row_data, row_class="", cell_class="")
    html_content += "<caption>2. Trading Profit / Loss Limit</caption>"
    html_content = html_gen.close_html_table(html_content)
    return html_content
    
def nop_original_currency_table(html_content, collected_data):
    header_list = ["Description", "Trader", "Open Position Amount (Original CCY)"]
    row_data_sub_header = [currencies]
    row_data, _ = collected_data
    subtotal, delete_index = calculate_subtotal(row_data)
    
    row_data_sub_header = delete_element_from_data(row_data_sub_header, delete_index)
    row_data = delete_element_from_data(row_data, [i+2 for i in delete_index])
    row_data.extend([
        ["Subtotal"] + delete_element_from_data([subtotal], delete_index)[0], 
        []
        ])
    row_data = reformat_data(row_data)
    
    header_styling = "class='header-blue'"
    html_content = html_gen.prepare_html_table(html_content, header_list, row_style="", header_style=header_styling, table_styling="")
    for header in header_list:
        if header != 'Open Position Amount (Original CCY)':
            html_content = html_content.replace(f"<th {header_styling}>{header}", f"<th rowspan='2' {header_styling}>{header}")
        else:
            html_content = html_content.replace(f"<th {header_styling}>{header}", f"<th colspan='{len(row_data_sub_header[0])}' {header_styling}>{header}")
    html_content = html_gen.add_data_row(html_content, row_data_sub_header, row_class=header_styling, cell_class="")
    html_content = html_gen.add_data_row(html_content, row_data, row_class="", cell_class="")
    html_content = html_content.replace(f"<td >Subtotal", f"<td colspan='2' >Subtotal")
    html_content += "<caption>3. Trading Position (in Original Currency)</caption>"
    html_content = html_gen.close_html_table(html_content)
    return html_content

def nop_equivalent_usd_table(html_content, type, session, collected_data, nop_compliance):
    report_type = type + " " + session
    header_list = ["Description", "Trader", "Open Position Amount (Equivalent USD)", "Position <br>Total", f"{session} <br>Limit <br>Given", f"{session} <br>Limit <br>Available"]
    row_data_sub_header = [currencies]
    row_data, dict_nop_usd = collected_data
    
    utilization = collect_utilization(row_data)
    row_data = add_limit_available_column(type, row_data, nop_compliance, utilization)
    subtotal, delete_index = calculate_subtotal(row_data)
    subtotal[-3] = dict_nop_usd['SGMO']

    row_data_sub_header = delete_element_from_data(row_data_sub_header, delete_index)
    row_data = delete_element_from_data(row_data, [i+2 for i in delete_index])
    row_data.extend([
        ["Subtotal"] + delete_element_from_data([subtotal], delete_index)[0], 
        []
        ])
    row_data = reformat_data(row_data)    
    html_content = html_content.replace(f"<th >{report_type_dict[report_type]}", f"<th colspan='{5+len(row_data_sub_header[0])}'>{report_type_dict[report_type]}")
    
    header_styling = "class='header-blue'"
    html_content = html_gen.prepare_html_table(html_content, header_list, row_style="", header_style=header_styling, table_styling="")
    for header in header_list:
        if header != 'Open Position Amount (Equivalent USD)':
            html_content = html_content.replace(f"<th {header_styling}>{header}", f"<th rowspan='2' {header_styling}>{header}")
        else:
            html_content = html_content.replace(f"<th {header_styling}>{header}", f"<th colspan='{len(row_data_sub_header[0])}' {header_styling}>{header}")
    html_content = html_gen.add_data_row(html_content, row_data_sub_header, row_class=header_styling, cell_class="")
    html_content = html_gen.add_data_row(html_content, row_data, row_class="", cell_class="")
    
    html_content = html_content.replace(f"<td >Subtotal", f"<td colspan='2' >Subtotal")
    html_content += "<caption>4. Trading Position (in USD)</caption>"
    html_content = html_gen.close_html_table(html_content)
    return html_content

def Export_CSV_Trading_Manager(worbook_name, export_path, csv_file_name, current_date, wb_task_name):
    task = acm.FAelTask[wb_task_name]
    params = task.Parameters()
    params.AtPut("File Path", export_path)
    params.AtPut("File Name", csv_file_name)
    params.AtPut("wbName", worbook_name)
    params.AtPut("HTML to File", "False")
    params.AtPut("HTML to Screen", "False")
    params.AtPut("Create directory with date", "True")
    params.AtPut("Secondary output", "True")
    params.AtPut("Secondary template", "FCSVTemplateRemoveHeader")
    params.AtPut("Secondary file extension", ".csv")
    task.Parameters(params)
    task.Execute()
    task.Commit()
    csv_path = "\\".join([export_path, "report" + current_date, csv_file_name + ".csv"])
    return csv_path
    
def get_compliance_rule_name(rule_type):
    query = """
        SELECT CR.NAME,
               DISPLAY_ID(CR, 'category') 'category',
               CR.DEFINITION
        FROM   COMPLIANCERULE CR
        WHERE  CR.DEFINITION = '{}' 
    """.format(rule_type)
    result = ael.asql(query)[1][0]
    return [row[0] for row in result]

window_title = "SGMO - NOP Monitoring"
ael_gui_parameters = {"runButtonLabel": "&&Run",
                    "hideExtraControls": True,
                    "windowCaption": window_title}
    
ael_variables = [
    ['report_name','Report Name','string', None, window_title, 1, 0, "Report Name must equal to the Main Workbook Name on Trading Manager"],
    ["report_type", "Report Type", "string", ["FX Intraday", "FX Overnight", "FI Intraday", "FI Overnight"], "FX Intraday", 1, 0, "Select Report Type for SGMO"],
    ['file_path', 'Folder Path', getFilePathSelection(), None, getFilePathSelection(), 1, 1],
    ["monthly_compliance", "Monthly Compliance Rule", "string", get_compliance_rule_name('Exposure'), "[BMSG] FX StopLoss Monthly", 1, 0, "Select Compliance Rule for Monthly Limit"],
    ["yearly_compliance", "Yearly Compliance Rule", "string", get_compliance_rule_name('Exposure'), "[BMSG] FX StopLoss Yearly", 1, 0, "Select Compliance Rule for Yearly Limit"],
    ["nop_compliance", "NOP Compliance Rule", "string", get_compliance_rule_name('Exposure'), "FX TRADING INTRADAY LIMIT", 1, 0, "Select Compliance Rule for NOP Limit"]
    ]

def ael_main(parameter):
    start_time = time.time()
    file_path = str(parameter["file_path"])
    report_name = parameter["report_name"]
    report_type = parameter["report_type"]
    type = report_type.split(' ')[0]
    session = report_type.split(' ')[-1]
    report_code = report_type_dict[report_type]
    main_title = f"{report_code} - {type} Trading {session} NOP Monitoring - {type} Position"
    wb_task_name = " - ".join(main_title.split(' - ')[:-1] + ["Trading Manager"])
    
    monthly_compliance = parameter["monthly_compliance"]
    yearly_compliance = parameter["yearly_compliance"]
    nop_compliance = parameter["nop_compliance"]
    
    current_date = datetime.today().strftime('%y%m%d')
    csv_name = f"{report_code}_Temporary_File"
    
    csv_path = Export_CSV_Trading_Manager(main_title, file_path, csv_name, current_date, wb_task_name)
    #csv_path = "\\".join([file_path, "report" + current_date, csv_name + ".csv"])
    
    csv_trading_file = open(csv_path, "r")
    csv_trading = csv_trading_file.read()
    
    data_table_12, data_table_3, data_table_4 = process_data_table_tpl_nop(csv_trading, type, monthly_compliance, yearly_compliance)
    html_content = html_gen.create_base_html_content(title="", additional_styles=additional_style)
    
    html_content += '<table>'
    html_content += div_side_by_side
    html_content = prepare_main_table(html_content, main_title)
    html_content += end_div_side_by_side
    
    html_content += div_side_by_side
    html_content = trading_profit_loss_table(html_content, data_table_12)
    html_content += end_div_side_by_side
    
    html_content += div_side_by_side
    html_content = trading_profit_loss_limit_table(html_content, data_table_12)
    html_content += end_div_side_by_side
    
    html_content += div_side_by_side
    html_content = nop_original_currency_table(html_content, data_table_3)
    html_content += end_div_side_by_side
    
    html_content += div_side_by_side
    html_content = nop_equivalent_usd_table(html_content, type, session, data_table_4, nop_compliance)
    html_content += end_div_side_by_side
    
    html_content += '</table>'
    csv_trading_file.close()
    file_url = html_gen.create_html_file(
        html_content = html_content,
        file_path = file_path,
        file_name = report_name,
        current_date = current_date,
        open_html = False,
        folder_with_file_name = False)
    generate_file_for_other_extension(file_url, '.xls')
    #os.remove(file_url)
    #os.remove(csv_path)
    print(f'Report {report_code} Consume: {time.time() - start_time:.2f} Seconds')


...

  SGMO15_SGMO17_SGMO19_Report

import os
import time
import locale
from ICTMODULES_FOR_HTML_AND_XSLFO_GENERATOR import *

sheetType = 'FTradeSheet'
context = acm.GetDefaultContext()
calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
html_gen = HTMLGenerator()
header_list = ['Port', 'Volume (USD)', 'Limit Given (USD)', 'Limit Available (USD)']
row_data_sub_header = [['Volume', 'Freq']*3]
report_code_dict = {
    'AFS' : 'SGMO15',
    'HTM' : 'SGMO17',
    'Trading' : 'SGMO19',
    }
report_desc_dict = {
    'AFS' : 'FVOCI',
    'HTM' : 'AC',
    'Trading' : 'FVTPL',
    }
main_title_dict =  {'AFS' : 'SGMO15 - Total Available for Sale Securities AFS (Volume Limit and Frequency Summary)',
                    'HTM' : 'SGMO17 - Total Held to Maturity - HTM Monitoring (Volume Limit and Frequency Summary)',
                    'Trading' : 'SGMO19 - Total Held for Trading Securities MTM (Volume Limit and Frequency Summary)',
                    }
additional_style = """
            table {
                font-family: arial, sans-serif;
                border-collapse: collapse;
                white-space: nowrap;
                margin-left: 100px;
                }
            th, td {
                border: 1px solid black;
                padding: 8px;
                text-align: center;
                }
            h1 {
                text-align: center;
                padding: 0px 20px 0px 20px;
                width: 100%;
                margin: 0px 0px 20px 20px;
                font-size: 18pt;
                font-weight: bold;
                text-align: center;
                }
            #title {
                padding: 0px 20px 0px 20px;
                width: 100%;
                margin: 0px 0px 20px 20px;
                font-size: 24pt;
                font-weight: bold;
                background:#002060;
                text-align: center;
                color:white;
                }
            .header {
                font-weight: bold;
                background: #d3d3d3;
                color: black;
                border: 1px solid black;
                margin: 0px; 
                }
    """

def number_reformat(value, n_decimal):
    try:
        locale.setlocale(locale.LC_ALL, '')
        return locale.format_string("%.{n}f".format(n=n_decimal), float(value), grouping=True)
    except:
        return value
        
def reformat_data(data):
    for i, row in enumerate(data):
        for k, value in enumerate(row):
            if k%2 == 0:
                data[i][k] = number_reformat(value, 0)
            else:
                data[i][k] = number_reformat(value, 2)
    return data
        
def add_total_row(data):
    data_new = [row[1:] for row in data]
    result = ['Total'] + ['-' for _ in range(len(data_new[0]))]
    for n in range(len(data_new[0])):
        sum_value = 0
        has_number = False
        for row in data_new:
            try:
                if row[n] not in ('-', '0', '0.0', 'nan', 'NaN'):
                    sum_value += float(row[n].replace(",", ""))
                    has_number = True
                else:
                    continue
            except:
                continue
        if has_number and sum_value:
            result[n+1] = str(sum_value)
    data.append(result)
    return data

def extract_threshold_data(report_type, query_folder_name, compliance_name):
    query = f"""
            SELECT 
            T.DEFAULT_VALUE 
        FROM 
            THRESHOLDVALUE TV, 
            THRESHOLD T, 
            APPLIEDRULE AR, 
            COMPLIANCERULE CR, 
            TEXTOBJECT TO 
        WHERE 
            TV.THRESHOLD = T.SEQNBR 
            AND TV.APPLIED_RULE = AR.SEQNBR 
            AND AR.COMPLIANCE_RULE = CR.SEQNBR 
            AND AR.TARGET_SEQNBR = TO.SEQNBR 
            AND AR.TARGET_TYPE = 'TextObject' 
            AND CR.NAME = '{compliance_name}' 
            AND TO.NAME = '{query_folder_name}' 
            AND AEL_S(T, 'Report_Python_P2.GroupLabel', T.SEQNBR) = 'Group 1'
    """
    result = ael.asql(query)
    try:
        return result[1][0][0][0]
    except:
        return None
        
def extract_data(report_type, volume_compliance, frequency_compliance):
    queryFolder_name = f"[Trade Set] {report_desc_dict[report_type]} Trades"
    queryFolder = acm.FStoredASQLQuery[queryFolder_name]
    result, temp_row = [], [report_type]
    utilization_volume_usd = calcSpace.CreateCalculation(queryFolder, "NOPinUSD").Value()
    utilization_frequency_usd = calcSpace.CreateCalculation(queryFolder, "Frequency").Value()
    limit_volume_usd = extract_threshold_data(report_type, queryFolder_name, volume_compliance)
    limit_frequency_usd = extract_threshold_data(report_type, queryFolder_name, frequency_compliance)
    available_volume_usd = float(float(limit_volume_usd) - float(utilization_volume_usd))
    available_frequency_usd = float(float(limit_frequency_usd) - float(utilization_frequency_usd))
    temp_row.extend([
        str(utilization_volume_usd),
        str(utilization_frequency_usd),
        str(limit_volume_usd),
        str(limit_frequency_usd),
        str(available_volume_usd),
        str(available_frequency_usd)
        ])
    result.append(temp_row)
    return result
    
def prepare_data_table(html_content, report_type, volume_compliance, frequency_compliance):
    header_styling = "class='header'"
    html_content = html_gen.prepare_html_table(html_content=html_content, header_list=header_list, row_style="", header_style=header_styling, table_styling="")
    html_content = html_gen.add_data_row(html_content, row_data_sub_header, row_class=header_styling, cell_class="")
    
    row_data = extract_data(report_type, volume_compliance, frequency_compliance)
    row_data = add_total_row(row_data)
    row_data =  reformat_data(row_data)
    
    html_content = html_gen.add_data_row(html_content, row_data, row_class="", cell_class="")
    
    html_content = html_gen.close_html_table(html_content)
    for header in header_list:
        if header == 'Port':  
            html_content = html_content.replace(f"<th {header_styling}>{header}", f"<th rowspan='2' {header_styling}>{header}")
        else:
            html_content = html_content.replace(f"<th {header_styling}>{header}", f"<th colspan='2' {header_styling}>{header}")
    return html_content

def get_compliance_rule_name(rule_type, rule_category):
    query = f"""
        SELECT 
            CR.NAME, 
            DISPLAY_ID(CR, 'category') 'category', 
            CR.DEFINITION 
        FROM 
            COMPLIANCERULE CR 
        WHERE 
            CR.DEFINITION = '{rule_type}' 
            AND DISPLAY_ID(CR, 'category') = '{rule_category}'
    """.format(rule_type)
    result = ael.asql(query)[1][0]
    return [row[0] for row in result]

window_title = "SGMO15_SGMO17_SGMO19_Report"
ael_gui_parameters = {"runButtonLabel": "&&Run",
                    "hideExtraControls": True,
                    "windowCaption": window_title}
    
ael_variables = [
    ['report_name','Report Name','string', None, window_title, 1, 0, "Report Name for Output Xls File"],
    ["report_type", "Report Type", "string", ["AFS", "HTM", "Trading"], "AFS", 1, 0, "Select Report Type for SGMO"],
    ['file_path', 'Folder Path', getFilePathSelection(), None, getFilePathSelection(), 1, 1],
    ["vol_compliance", "Volume Compliance Rule", "string", get_compliance_rule_name('TradeControl', 'Periodic'), "[BMSG] FVOCI Volume Limit", 1, 0, "Select Compliance Rule for Volume Limit"],
    ["freq_compliance", "Frequency Compliance Rule", "string", get_compliance_rule_name('TradeControl', 'Periodic'), "[BMSG] FVOCI Frequency Limit", 1, 0, "Select Compliance Rule for Frequency Limit"],
    ]

def ael_main(parameter):
    start_time = time.time()
    file_path = str(parameter["file_path"])
    report_name = parameter["report_name"]
    report_type = parameter["report_type"]
    volume_compliance = parameter["vol_compliance"]
    frequency_compliance = parameter["freq_compliance"]
    
    main_title = main_title_dict[report_type]
    
    html_content = html_gen.create_base_html_content(title=main_title, additional_styles=additional_style)
    
    html_content += div_side_by_side
    html_content = prepare_data_table(html_content, report_type, volume_compliance, frequency_compliance)
    html_content += end_div_side_by_side
    
    current_date = datetime.today().strftime('%y%m%d')
    file_url = html_gen.create_html_file(
        html_content = html_content,
        file_path = file_path,
        file_name = report_name,
        current_date = current_date,
        open_html = False,
        folder_with_file_name = False)
    generate_file_for_other_extension(file_url, '.xls')
    os.remove(file_url)
    print(f'Report {report_code_dict[report_type]} {report_type}:{report_desc_dict[report_type]} Consume: {time.time() - start_time:.2f} Seconds')

...

  Total_Trade

import acm, traceback

def get_year_difference(end_date, value_day):
    jarak_hari = abs(acm.Time.DateDifference(end_date, value_day));
    hari_per_tahun = 365
    looper = True

    count = 0
    while looper:
        jarak_hari = jarak_hari - hari_per_tahun

        if jarak_hari < 0:
            break
        else:
            count += 1
    
    return count
    #return value_day
    
def combine_string(text1, text2, text3, text4, text5):
    return str(text1) + str(text2) + str(text3) + str(text4) + str(text5)

def sum_NearAmount(list_trade):
    
    total = 0
    list_trade = list(list_trade)
    
    for i in list_trade:
        total += int(i.Premium())
    
    return total

def remove_bg(nominal_premium):
    nominal_premium = str(nominal_premium)
    return nominal_premium
    
def sum_FaceValue(list_trade):
    
    total = 0
    list_trade = list(list_trade)
    
    for i in list_trade:
        total += int(i.FaceValue())
    
    return total

def sum_NearAmount2(list_trade):
    
    total = 0
    list_trade = list(list_trade)
    
    for i in list_trade:
        if i.IsFxSwapFarLeg() == False:
            total += int(i.Premium())

    return float(total)
    
def remove_NearAmount2(FxSwapNearLegPremium):
    
    if type(FxSwapNearLegPremium) != float:
        return ''
    else:
        return FxSwapNearLegPremium

def sum_NearAmount1(list_trade):
    
    total = 0
    list_trade = list(list_trade)
    
    for i in list_trade:
        if i.IsFxSwapFarLeg() == False:
            total += int(i.Nominal())

    return float(total)
    
def remove_NearAmount1(NearAmount1):
    
    if type(NearAmount1) != float:
        return ''
    else:
        return NearAmount1

def sum_FarAmount1(list_trade):
    
    total = 0
    list_trade = list(list_trade)
    
    for i in list_trade:
        if i.IsFxSwapFarLeg() == True:
            total += int(i.Nominal())

    return float(total)
    
def remove_FarAmount1(FarAmount1):
    
    if type(FarAmount1) != float:
        return ''
    else:
        return FarAmount1


def sum_FarAmount2(list_trade):
    
    total = 0
    list_trade = list(list_trade)
    
    for i in list_trade:
        if i.IsFxSwapFarLeg() == True:
            total += int(i.Premium())

    return float(total)
    
def remove_FarAmount2(FarAmount2):
    
    if type(FarAmount2) != float:
        return ''
    else:
        return FarAmount2

def sum_FarAmount(list_trade):
    
    total = 0
    list_trade = list(list_trade)
    
    for i in list_trade:
        if i.IsFxSwapFarLeg() == False:
            total += int(i.Nominal())

    return float(total)

def remove_FarAmount(FarAmount):
    if type(FarAmount) != float:
        return ''
    else:
        return FarAmount

def get_BoughtorSold(trade):
    if trade.Trade().Bought():
        return "Call Money"

def cek_tanggal_outstanding(tanggal):
    today = acm.Time.DateToday()
    difference = acm.Time.DateDifference(tanggal, today)
    result = ''
    
    if difference >= 0 :
        result = 'Outstanding'
    else:
        result = 'Not Outstanding'
        
    return result

def remarksellbuy(trade, list_columns):
    context = acm.GetDefaultContext( )
    sheet_type = 'FTradeSheet'
    ins = trade
        
    calc_space = acm.Calculations( ).CreateCalculationSpace( context, sheet_type )
    list_text = []
    
    
    for i in list_columns:
        column_id = i
        value = calc_space.CalculateValue( ins, column_id)
        calculation = calc_space.CreateCalculation( ins, column_id )
        list_text.append(calculation.FormattedValue())
        
    return list_text[0] + ' ' + list_text[1] + ' ' + list_text[2] + ' ' + list_text[3] + ' ' + list_text[4]
    #return trade
    
def moneyamount(trade, list_columns):
    context = acm.GetDefaultContext( )
    sheet_type = 'FTradeSheet'
    ins = trade
        
    calc_space = acm.Calculations( ).CreateCalculationSpace( context, sheet_type )
    list_text = []
    
    
    for i in list_columns:
        column_id = i
        value = calc_space.CalculateValue( ins, column_id)
        calculation = calc_space.CreateCalculation(ins, column_id)
        list_text.append(calculation.FormattedValue().replace(",", ""))
        
    return float(list_text[0]) * float(list_text[1]) 

def calculate_bookvalueidr(list_trade):
    ins_obj=trade.instrument()
    book_value = trade.Premium()
    rate = 14500
    
    return book_value * rate

def positionEOD():
    today=acm.Time.DateToday()

    return today
    
def reffjournal(trade, list_columns):
    context = acm.GetDefaultContext( )
    sheet_type = 'FTradeSheet'
    ins = trade
        
    calc_space = acm.Calculations( ).CreateCalculationSpace( context, sheet_type )
    list_text = []
    
    
    for i in list_columns:
        column_id = i
        value = calc_space.CalculateValue( ins, column_id)
        calculation = calc_space.CreateCalculation(ins, column_id)
        list_text.append(calculation.FormattedValue())
        
    return list_text[0] + "/" + list_text[1] + "/" + list_text[2] + list_text[3]
    
def netamount(trade, list_columns):
    context = acm.GetDefaultContext( )
    sheet_type = 'FTradeSheet'
    ins = trade
        
    calc_space = acm.Calculations( ).CreateCalculationSpace( context, sheet_type )
    list_text = []
    
    
    for i in list_columns:
        column_id = i
        value = calc_space.CalculateValue( ins, column_id)
        calculation = calc_space.CreateCalculation(ins, column_id)
        list_text.append(calculation.FormattedValue().replace(",", ""))
        
    return float(list_text[0]) - float(list_text[1])

def yesterdayfunc(date):
    date2=acm.Time.DateAddDelta(date, 0, 0, -1)
    firstday=acm.Time.FirstDayOfWeek(date2)
    difference=acm.Time.DateDifference(date2, firstday)
    if difference == 5:
        yesterday=acm.Time.DateAddDelta(date2, 0, 0, -1)
    if difference == 6:
        yesterday=acm.Time.DateAddDelta(date2, 0, 0, -2)
    else:
        yesterday=date2
    return yesterday

def yesterdayfunc2(date):
    step1=yesterdayfunc(date)
    step2=yesterdayfunc(step1)
    return step2

def month(date):
    date=acm.Time.DateToYMD(date)
    month=['','Januari', 'Februari', 'Maret', 'April', 'Mei', 'Juni', 'Juli', 'Agustus', 'September', 'Oktober', 'November', 'Desember']
    index=date[1]
    return month[index];

def monthnumber(date):
    date=acm.Time.DateToYMD(date)
    return date[1];
    
def monthexpired(trade, list_columns):
    context = acm.GetDefaultContext( )
    sheet_type = 'FJournalSheet'
    ins = trade
        
    calc_space = acm.Calculations( ).CreateCalculationSpace( context, sheet_type )
    list_text = []
    
    for i in list_columns:
        column_id = i
        value = calc_space.CalculateValue( ins, column_id)
        calculation = calc_space.CreateCalculation( ins, column_id )
        list_text.append(calculation.FormattedValue())
        
    return list_text[0];
    
def weeknumber(date):
    day=acm.Time.DayOfMonth(date)
    firstsunday=acm.Time.DayOfMonth(acm.Time.LastDayOfWeek(acm.Time.FirstDayOfMonth(date)))
    if day <= firstsunday:
        result = "I"
    if day > firstsunday and day <= firstsunday+7:
            result = "II"
    if day > firstsunday+7 and day <= firstsunday+14:
            result = "III"
    if day > firstsunday+14 and day <= firstsunday+21:
            result = "IV"
    if day > firstsunday+21 and day <= firstsunday+28:
            result = "V"
    if day > firstsunday+28:
        result = "VI"    
    return result;
    
def year(date):
    date=acm.Time.DateToYMD(date)
    return str(date[0]);
    
def noid(trade,list_columns):
    context = acm.GetDefaultContext( )
    sheet_type = 'FTradeSheet'
    ins = trade
        
    calc_space = acm.Calculations( ).CreateCalculationSpace( context, sheet_type )
    list_text = []
    
    
    for i in list_columns:
        column_id = i
        value = calc_space.CalculateValue( ins, column_id)
        calculation = calc_space.CreateCalculation( ins, column_id )
        list_text.append(calculation.FormattedValue())
        
    if list_text[1] =='':
        list_text[1] = '000'
        
    return list_text[0] + '.' + list_text[1] + '.' + list_text[2]
    
def prevprice(trade, list_columns):
    
    context = acm.GetDefaultContext( )
    sheet_type = 'FTradeSheet'
    ins = trade
        
    calc_space = acm.Calculations( ).CreateCalculationSpace( context, sheet_type )
    list_text = []
    
    
    for i in list_columns:
        column_id = i
        value = calc_space.CalculateValue( ins, column_id)
        calculation = calc_space.CreateCalculation( ins, column_id )
        list_text.append(calculation.FormattedValue())
    
    instrument_name = trade.Instrument().Name()
    
    try:
        price_obj = acm.FPrice.Select('instrument = "'+instrument_name+'" and day = "'+list_text[0]+'"')[0]
    except Exception:
        traceback.print_exc()
        return 'None'

    if type(price_obj.Settle()) != int:
        return price_obj.Last()
    else:
        return price_obj.Settle()
   
    
def takevalue(value, list_columns):
    context = acm.GetDefaultContext( )
    sheet_type = 'FTradeSheet'
    ins = value
        
    calc_space = acm.Calculations( ).CreateCalculationSpace( context, sheet_type )
    list_text = []
    
    
    for i in list_columns:
        column_id = i
        value = calc_space.CalculateValue(ins, column_id)
        calculation = calc_space.CreateCalculation( ins, column_id )
        list_text.append(calculation.FormattedValue())
        
    return list_text[0]
    
def testfunc(price, date):
    
    price_list = list(price_list)
    
    return price_list
    

def count_available_limit(alert, list_columns):
    
    context = acm.GetDefaultContext( )
    sheet_type = 'FAlertSheet'
    ins = alert
        
    calc_space = acm.Calculations( ).CreateCalculationSpace( context, sheet_type )
    list_text = []
    
    
    for i in list_columns:
        column_id = i
        value = calc_space.CalculateValue(ins, column_id)
        calculation = calc_space.CreateCalculation( ins, column_id )
        list_text.append(value)
    
    print(list_text[0])
    print(type(list_text[0]))
    print(list_text[1])
    print(type(list_text[1]))
    print("==========")
    
    try:
        result = list_text[1] - list_text[0]
        return result
    except Exception:
        traceback.print_exc()
        return list_text[0]
        
    
def accountid(value, list_columns):
    context = acm.GetDefaultContext( )
    sheet_type = 'FTradeSheet'
    ins = value
        
    calc_space = acm.Calculations( ).CreateCalculationSpace( context, sheet_type )
    list_text = []
    
    
    for i in list_columns:
        column_id = i
        value = calc_space.CalculateValue(ins, column_id)
        calculation = calc_space.CreateCalculation( ins, column_id )
        list_text.append(calculation.FormattedValue())
        
    accid = list_text[0] + '_OPT_CON_' + list_text[1] + '_' + list_text[2] + '_TR'
        
    return accid
    
def cpmainccy(value, list_columns):
    context = acm.GetDefaultContext( )
    sheet_type = 'FTradeSheet'
    ins = value
        
    calc_space = acm.Calculations( ).CreateCalculationSpace( context, sheet_type )
    list_text = []
    
    
    for i in list_columns:
        column_id = i
        value = calc_space.CalculateValue(ins, column_id)
        calculation = calc_space.CreateCalculation( ins, column_id )
        list_text.append(calculation.FormattedValue())
        
    cp = list_text[0]
    if cp == 'Put':
        cp = 'P'
    if cp == 'Call':
        cp = 'C'
        
    return cp
    
def cpmoneyccy(value, list_columns):
    context = acm.GetDefaultContext( )
    sheet_type = 'FTradeSheet'
    ins = value
        
    calc_space = acm.Calculations( ).CreateCalculationSpace( context, sheet_type )
    list_text = []
    
    
    for i in list_columns:
        column_id = i
        value = calc_space.CalculateValue(ins, column_id)
        calculation = calc_space.CreateCalculation( ins, column_id )
        list_text.append(calculation.FormattedValue())
        
    cp = list_text[0]
    if cp == 'Put':
        cp = 'Call'
    else:
        cp = 'Put'
        
    return cp

def deltacheck(value, list_columns):
    context = acm.GetDefaultContext( )
    sheet_type = 'FTradeSheet'
    ins = value
        
    calc_space = acm.Calculations( ).CreateCalculationSpace( context, sheet_type )
    list_text = []
    
    
    for i in list_columns:
        column_id = i
        value = calc_space.CalculateValue(ins, column_id)
        calculation = calc_space.CreateCalculation( ins, column_id )
        list_text.append(calculation.FormattedValue())
        
    check = list_text[0]
    if check == '':
        check = 'N'
    else:
        check = 'Y'
        
    return check
    
def staticmonth():
    month=['Januari', 'Februari', 'Maret', 'April', 'Mei', 'Juni', 'Juli', 'Agustus', 'September', 'Oktober', 'November', 'Desember']
    return month

def calculate_kursjual(value, list_columns):
    context = acm.GetDefaultContext( )
    sheet_type = 'FTradeSheet'
    ins = value
        
    calc_space = acm.Calculations( ).CreateCalculationSpace( context, sheet_type )
    list_text = []
    
    
    for i in list_columns:
        column_id = i
        value = calc_space.CalculateValue(ins, column_id)
        calculation = calc_space.CreateCalculation( ins, column_id )
        list_text.append(calculation.FormattedValue().replace(",", ""))
    
    bs = list_text[0]
    exrate = list_text[1]
    
    if bs == 'Buy':
        exrate = ''
    
    return exrate
    
def sumkursjual(value, list_columns):
    context = acm.GetDefaultContext( )
    sheet_type = 'FTradeSheet'
    total = 0
    
    for i in value:
        ins = i
            
        calc_space = acm.Calculations( ).CreateCalculationSpace( context, sheet_type )
        list_text = []
        
        for j in list_columns:
            column_id = j
            value = calc_space.CalculateValue(ins, column_id)
            calculation = calc_space.CreateCalculation(ins, column_id )
            
            try:
                total += float(calculation.FormattedValue())
            except Exception:
                traceback.print_exc()
                continue
                
            list_text.append(calculation.FormattedValue())
    
    return total;

def calculate_kursbeli(value, list_columns):
    context = acm.GetDefaultContext( )
    sheet_type = 'FTradeSheet'
    ins = value
        
    calc_space = acm.Calculations( ).CreateCalculationSpace( context, sheet_type )
    list_text = []
    
    
    for i in list_columns:
        column_id = i
        value = calc_space.CalculateValue(ins, column_id)
        calculation = calc_space.CreateCalculation( ins, column_id )
        list_text.append(calculation.FormattedValue().replace(",", ""))
    
    bs = list_text[0]
    exrate = list_text[1]
    
    if bs == 'Sell':
        exrate = ''
    
    return exrate
    
def sumkursbeli(value, list_columns):
    context = acm.GetDefaultContext( )
    sheet_type = 'FTradeSheet'
    total = 0
    
    for i in value:
        ins = i
            
        calc_space = acm.Calculations( ).CreateCalculationSpace( context, sheet_type )
        list_text = []
        
        for j in list_columns:
            column_id = j
            value = calc_space.CalculateValue(ins, column_id)
            calculation = calc_space.CreateCalculation(ins, column_id )
            
            try:
                total += float(calculation.FormattedValue())
            except Exception:
                traceback.print_exc()
                continue
                
            list_text.append(calculation.FormattedValue())
    
    return total

def percent(value, list_columns):
    context = acm.GetDefaultContext( )
    sheet_type = 'FTradeSheet'
    ins = value
        
    calc_space = acm.Calculations( ).CreateCalculationSpace( context, sheet_type )
    list_text = []
    
    
    for i in list_columns:
        column_id = i
        value = calc_space.CalculateValue(ins, column_id)
        calculation = calc_space.CreateCalculation( ins, column_id )
        list_text.append(calculation.FormattedValue().replace(",", ""))
        
    avgprice = float(list_text[0])
    mtm = list_text[1]
    if mtm == '' or mtm == None or mtm == 0:
        return None
        
    else:
        mtm = float(mtm)
        
    result = ((avgprice - mtm)/mtm)
     
    if result <= 0:
        result = (result/-0.05)
    
    return result

def total_coupon(query_folder):

    total = 0
    list_settlement = query_folder.Select()
    
    for i in list_settlement:
        total += float(i.Amount())
    
    return total
    
def avgPrice1(list_trade):
    
    total = 0
    count = 0
    list_trade = list(list_trade)
    
    for i in list_trade:
        total += i.Price()
        count += 1
    
    return total
    
def payday(trade):
    
    x = trade[0].Instrument().Legs()

    date_list=[]

    for i in x:
        all_cf = i.CashFlows()
        for i in all_cf:
            if i.PayDate() > acm.DateToday():
                date_list.append(i.PayDate())

    mini = min(date_list)
    
    return(mini)

def interestproceed(trade):
    
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    ins = trade
    columnId = 'InterestProceed'

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    calculation = calcSpace.CreateCalculation(ins, columnId)
    result = calculation.FormattedValue()
    
    return result
    
def interestproceed2(trade):

    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    ins = trade[0].Instrument().Legs()
    columnId = "Cash Analysis Projected"

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)

    date_list=[]
    int_list=[]
    result_list=[]

    for i in ins:
        all_cf = i.CashFlows()
        for i in all_cf:
            if i.PayDate() > acm.DateToday():
                date_list.append(i.PayDate())
                int_list.append(calcSpace.CreateCalculation(i, columnId).FormattedValue())

    count=0
    for date in date_list:
        if date == min(date_list):
            result_list.append(int_list[count])
            count+=1

    return result_list[-1]
    
def limitexpiry(apprules):

    context = acm.GetDefaultContext() # Nama Context, e.g.: ICT_CustomReports
    sheetType = 'FAppliedRuleSheet'
    ins = apprules
    columnId = 'Applied Rule End Date'

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType) #FCalculationSpace
    calculation = calcSpace.CreateCalculation(ins, columnId)
    result = calculation.FormattedValue()

    return result
    
def positionyesterday(trade):
    context = acm.GetDefaultContext()
    sheetType = 'FPortfolioSheet'
    ins = trade
    columnId = 'Aggregate Position Buckets-0b35519a-fa85-452b-a494-e6930b099762-0b35519a-fa85-452b-a494-e6930b099762--1D'
    
    
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    calculation = calcSpace.CreateCalculation(ins, columnId)
    result = calculation.FormattedValue()
    print(result)
    return 12345
    
def tes(trades):

    context = acm.GetDefaultContext() # Nama Context, e.g.: ICT_CustomReports
    sheetType = 'FTradeSheet'
    ins = trades
    columnId = 'Bought or Sold'

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType) #FCalculationSpace
    calculation = calcSpace.CreateCalculation(ins, columnId)
    indicator = calculation.FormattedValue()
    
    if indicator == "Buy":
        result = "Beli"
    elif indicator == "Sell" :
        result = "Jual"

    return result
    
def tesluci(object):
    return "hello luci: " + str(object)
    
def premiumacqacc(trade):
    
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    ins = trade
    columnId = "Account Allocation Acquirer Account"

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    
    for flow in trade.MoneyFlows():
        type = flow.Type()
        if type == "Premium":
            acqacc = calcSpace.CreateCalculation(flow, columnId).FormattedValue()

    return acqacc

def targetmtdpercent(portfolio):
    
    context = acm.GetDefaultContext()
    sheetType = 'FPortfolioSheet'
    ins = portfolio
    columnId = "Portfolio Total Profit and Loss Monthly"

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    result1 = calcSpace.CreateCalculation(ins, columnId).FormattedValue()
    result2 = result1.replace("#","")
    result3 = result2.replace(",","")

    return float(result3)/100000000.00

def targetytdpercent(portfolio):
    
    context = acm.GetDefaultContext()
    sheetType = 'FPortfolioSheet'
    ins = portfolio
    columnId = "PnLYearly"

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    result1 = calcSpace.CreateCalculation(ins, columnId).FormattedValue()
    result2 = result1.replace("#","")
    result3 = result2.replace(",","")

    return float(result3)/100000000.00

def yearlylosslimituse(object):
    
    context = acm.GetDefaultContext()
    sheetType = 'FPortfolioSheet'
    ins = object
    columnId = "TheoreticalPnLYearly"

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    result1 = calcSpace.CreateCalculation(ins, columnId).FormattedValue()
    result2 = result1.replace("#","")
    result3 = result2.replace(",","")
    
    if object.Instrument().Prices():
        close_rate_IDR = object.Instrument().Prices().First().Settle()
        return float(result3) * close_rate_IDR

def monthlylosslimituse(object):
    
    context = acm.GetDefaultContext()
    sheetType = 'FPortfolioSheet'
    ins = object
    columnId = "Portfolio Theoretical Total Profit and Loss Monthly"

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    result1 = calcSpace.CreateCalculation(ins, columnId).FormattedValue()
    result2 = result1.replace("#","")
    result3 = result2.replace(",","")
    
    if object.Instrument().Prices():
        close_rate_IDR = object.Instrument().Prices().First().Settle()
        return float(result3) * close_rate_IDR

def daychangehvar(object):

    context = acm.GetDefaultContext()
    sheetType = 'FPortfolioSheet'
    ins = object
    columnId = "Portfolio Value at Risk From Scenario Custom"

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    result1 = calcSpace.CreateCalculation(ins, columnId).FormattedValue()
    
    return result1

def invseq(trades):
    
    count=0
    unique_dict={}
    
    
    for trd in trades:
        if trd.Status()!="Void":
            series = trd.Instrument().InstrumentAlias().SERIES()
            if series not in unique_dict:
                unique_dict[series]=1
            else:
                unique_dict[series]+=1
            count+=1
    
    return unique_dict

def totalPortfolioInstrumentAndTradesClass(trades):
    
    count=0 
    
    for trd in trades:
        if trd.Status()!="Void":
            count+=1
    
    return count

def totalMultiInstrumentAndTradesClass(trades):
    
    count=0
    
    for trd in trades:
        if trd.Status()!="Void" and trd.Instrument().EndDate() > acm.Time.DateToday():
            count+=1
    
    return count

def totalMultiInstrumentAndTradesClass2(trades):
    
    count=0
    
    for trd in trades:
        if trd.Status()!="Void":
            count+=1
    
    return count

def repo(trade):
    
    type_result = ""
    ins_type = str(trade.InstrumentSubType())
    
    if 'repo' in ins_type.lower() :
        type_result = "R"
    elif acm.Time.AsDate(trade.TradeTime()) == trade.Instrument().StartDate() :
        type_result = "W"
    else:
        type_result = "O"
    
    return type_result

def PnLYearly(portfolio):
    
    context = acm.GetDefaultContext()
    sheetType = 'FPortfolioSheet'
    ins = portfolio
    columnId = "PnLYearly"

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    result = calcSpace.CreateCalculation(ins, columnId).Value().Number()

    return result

def PnLMonthly(portfolio):
    
    context = acm.GetDefaultContext()
    sheetType = 'FPortfolioSheet'
    ins = portfolio
    columnId = "Portfolio Total Profit and Loss Monthly"

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    result1 = calcSpace.CreateCalculation(ins, columnId).FormattedValue()
    result2 = result1.replace("#","")
    result3 = result2.replace(",","")

    return float(result3)

def sumEndCash(trades):
    
    sum = 0
    for trd in trades:
        if trd.Status()!="Void" and trd.Instrument().EndDate() > acm.DateToday():
            sum += trd.EndCash()

    return sum

def NDFInstrument(ins):
    if "NDF" in ins:
        return True
    else: False

...

  WCO_Column_Helpers
import acm

def get_limit_by_port_and_cr(port, cr_name = ''):
    value = None
    comp_rule = acm.FComplianceRule[cr_name]
    for applied_rule in comp_rule.AppliedRules():
        if port.Name() == applied_rule.Target().Name():
            value = applied_rule.ThresholdValues().First().Value()
    return value
    

...

}

decls[FXSLTemplate] {
  "BM_Overseas" ( "aef reporting.secondary templates" "aef reporting.secondary templates xls" ) "";
  "BM_Overseas(SH05)" ( "aef reporting.secondary templates" "aef reporting.secondary templates xls" ) "";
  "BM_Overseas(SH06)" ( "aef reporting.secondary templates" "aef reporting.secondary templates xls" ) "";
  "BM_Overseas(without UTC)" ( "aef reporting.secondary templates" "aef reporting.secondary templates xls" ) "";
  "FCSVTemplateRemoveHeader" ( "aef reporting.secondary templates" ) "";
  "Generate_PDF" ( "aef reporting.secondary templates" "aef reporting.secondary templates pdf" ) "";
}

clx FObject [FXSLTemplate] {
  BM_Overseas
<?xml version='1.0'?>
<!-- &copy; Copyright 2011 SunGard FRONT ARENA
       FStandardTemplate is able to produce colored output for RiskMatrixSheets when DefaultData is turned on
       Added support for Transhist output
-->
<!DOCTYPE xsl:stylesheet [
    <!ENTITY nbsp "<xsl:text>&#160;</xsl:text>">
]>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:param name="clickable" select="0"/>
<xsl:param name="autoupdate" select="0"/>
<xsl:output method="html"/>
<xsl:variable name="cellWidth" select="80"/>
<xsl:variable name="rowHeaderWidth" select="250"/>
<xsl:variable name="useLabelColumn" select="//PRIMEReport/Type !='ASQL Table'"/>

<xsl:template name="PrintSpaces">
  <xsl:param name="n" select="0"/>
  <xsl:if test="$n > 0">
    <xsl:call-template name="PrintSpaces">
      <xsl:with-param name="n" select="$n - 1" />
    </xsl:call-template>
    &nbsp;
  </xsl:if>
</xsl:template>

<xsl:template match="ReportContents">
     <xsl:apply-templates select="Table"/>
</xsl:template>

<xsl:template match="Table">
    
    <xsl:variable name="numberOfColumns" select="NumberOfColumns"/>
    <tr class="tblhdr" depth="{$treeDepth}" border="1px solid black">
       <xsl:if test="$useLabelColumn">
        <td width="{$rowHeaderWidth}">
            <xsl:call-template name="PrintSpaces">
                <xsl:with-param name="n" select="($treeDepth -1) * 6"/>
            </xsl:call-template>
        <img src="report_plus.gif" />&nbsp;</td>
        </xsl:if>
        <xsl:for-each select="Columns/Column">
            <xsl:choose>
            <xsl:when test="TemplateId != ''">
                <td width="{$cellWidth * 2}" style="background-color : #ecf576"><b>
                <xsl:value-of select="TemplateId"/><br />
                <xsl:value-of select="Label"/>
                </b></td>
            </xsl:when>
            <xsl:otherwise>
                <td width="{$cellWidth}" style="background-color : #ecf576"><b><xsl:value-of select="Label"/></b></td>
            </xsl:otherwise>
            </xsl:choose>
        </xsl:for-each>
    </tr>
    <xsl:apply-templates select="Rows/Row">
        <xsl:with-param name="treeDepth" select="$treeDepth"/>
        <xsl:with-param name="colorStep" select="0"/>
    </xsl:apply-templates>
</xsl:template>

<xsl:template match="Table">
    
    <xsl:variable name="numberOfColumns" select="NumberOfColumns"/>

    <xsl:variable name="colorStep" >
        <xsl:choose>
                <xsl:when test="(Type = 'RiskMatrixSheet') and current()//DefaultData">
                    <xsl:variable name="maxvalue">
                        <xsl:call-template name="max">
                                <xsl:with-param name="nodes" select="current()//DefaultData"/>
                        </xsl:call-template>
                    </xsl:variable>
                    <xsl:value-of select="$maxvalue div 255" ></xsl:value-of>
                </xsl:when>
                <xsl:otherwise>0</xsl:otherwise>
        </xsl:choose>
    </xsl:variable>

    <table width="{$numberOfColumns * ($cellWidth + 4) + $rowHeaderWidth + 6}" border="1px solid black">
        <tr class="tblhdr" border="1px solid black">
           <xsl:if test="$useLabelColumn">
            <td width="{$rowHeaderWidth}">&nbsp;</td>
            </xsl:if>
            <xsl:for-each select="Columns/Column">
                <xsl:choose>
                <xsl:when test="TemplateId != ''">
                    <td width="{$cellWidth * 2}" style="background-color : #ecf576"><b>
                    <xsl:value-of select="TemplateId"/><br />
                    <xsl:value-of select="Label"/>
                    </b></td>
                </xsl:when>
                <xsl:otherwise>
                    <td width="{$cellWidth}" style="background-color : #ecf576"><b><xsl:value-of select="Label"/></b></td>
                </xsl:otherwise>
                </xsl:choose>
            </xsl:for-each>
        </tr>
        <xsl:apply-templates select="Rows/Row">
            <xsl:with-param name="treeDepth" select="1"/>
            <xsl:with-param name="colorStep" select="$colorStep"/>
        </xsl:apply-templates>
    </table>
    <p/><p/>
</xsl:template>

<xsl:template match="Row">
    <xsl:param name = "treeDepth"/>
    <xsl:param name = "colorStep"/>
    <xsl:variable name="rwId" select="RowId"/>
    <tr class="{concat('cell', $treeDepth)}" depth="{$treeDepth}" border="1px solid black">
        <xsl:if test="$useLabelColumn">
                <td class="row">
                <xsl:call-template name="PrintSpaces">
                        <xsl:with-param name="n" select="($treeDepth - 1) * 6"/>
                </xsl:call-template>
                <xsl:if test="$clickable = '1'">
                        <img src="report_plus.gif"/>
                </xsl:if>
                <xsl:value-of select="Label"/>
                </td>
        </xsl:if>
    <xsl:apply-templates select="Cells/Cell">
        <xsl:with-param name="colorStep" select="$colorStep" />
    </xsl:apply-templates>
    </tr>
    <xsl:if test="ancestor::ReportContents/ChildReports/ChildReport[ChildReportId = $rwId]">
        <xsl:apply-templates select="ancestor::ReportContents/ChildReports/ChildReport[ChildReportId = $rwId]/PRIMEReport/ReportContents/Table" mode="ChildReport">
            <xsl:with-param name="treeDepth" select="$treeDepth +1" />
        </xsl:apply-templates>
    </xsl:if>
    <xsl:apply-templates select="Rows/Row">
        <xsl:with-param name="treeDepth" select="$treeDepth + 1" />
        <xsl:with-param name="colorStep" select="$colorStep" />
    </xsl:apply-templates>
</xsl:template>

<xsl:template match="Cell">
    <xsl:param name = "colorStep"/>
    <td>
         
         <xsl:choose>   
            
            <xsl:when test="Appearance">
                <xsl:attribute name="style">
                
                         <xsl:choose>     
                            <xsl:when test="Appearance/BkgColor">
                                    background-color: <!--rgb( 0, 255 ,255 )-->
                                        <xsl:call-template name="rgbfromint">
                                            <xsl:with-param name="rgbintval" select="Appearance/BkgColor"/>  
                                         </xsl:call-template>
                                         
                            </xsl:when>
                            <xsl:otherwise>
                                background-color: white
                            </xsl:otherwise>
                         </xsl:choose>    
                         
                        <xsl:choose>   
                            <xsl:when test="Appearance/TextColor">
                                    ;color: <!--rgb( 255, 0 ,255 )-->
                                           <xsl:call-template name="rgbfromint">
                                            <xsl:with-param name="rgbintval" select="Appearance/TextColor"/>  
                                         </xsl:call-template>
                            </xsl:when>
                            <xsl:otherwise>
                               ;color: black
                            </xsl:otherwise>
                        </xsl:choose>   
                
                </xsl:attribute>   
            </xsl:when>
            
            <xsl:otherwise>
                <xsl:if test="DefaultData and $colorStep > 0 and string(number(DefaultData)) !='NaN'">
                        <xsl:attribute name="style">background-color:
                                <xsl:call-template name="color">
                                        <xsl:with-param name="colorStep" select="$colorStep"/>
                                        <xsl:with-param name="value" select="DefaultData"/>
                                        
                                </xsl:call-template>
                        </xsl:attribute>
                </xsl:if>
            </xsl:otherwise>
            
        </xsl:choose>
        <xsl:choose>
                <xsl:when test="ValueType and DefaultData">
                        <acronym>
                                <xsl:attribute name="title">
                                        <xsl:value-of select="DefaultData"/>
                                </xsl:attribute>
                        <xsl:call-template name="CellData" />
                        </acronym>
                </xsl:when>
                <xsl:otherwise>
                        <xsl:call-template name="CellData" />
                </xsl:otherwise>
        </xsl:choose>
    </td>
</xsl:template>

<xsl:template name="CellData">
        <xsl:choose>
             
            <xsl:when test="FormattedData">
                <xsl:value-of select="FormattedData"/>
            </xsl:when>
            <xsl:when test="RawData">
                <xsl:choose>
                    <xsl:when test ="contains(RawData, 'http:') or contains(RawData, 'https:')">
                        <xsl:value-of select="RawData " disable-output-escaping="yes"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="RawData"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:when test="DefaultData">
                <xsl:choose>
                        <xsl:when test="ValueType">
                                <xsl:text>#</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                                <xsl:value-of select="DefaultData"/>
                        </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                  <xsl:message terminate="yes"><xsl:text>No dataformat turned on</xsl:text></xsl:message>
            </xsl:otherwise>
            
        </xsl:choose>
</xsl:template>

<xsl:template match="Settings">
    <table border="1px solid black">
    <tr border="1px solid black">
        <xsl:for-each select="Groups/Group">
            <xsl:if test="Label = 'Profit/Loss'">
                <tr class="tblhdr" border="1px solid black">
                <xsl:for-each select="Column">
                    <td class="row" width="{$cellWidth}" style="background-color : #ecf576"><b>
                    <xsl:choose>
                        <xsl:when test="Label != ''">
                            <xsl:value-of select="Label"/>
                        </xsl:when>
                        <xsl:otherwise>
                             <xsl:value-of select="ColumnId"/>
                        </xsl:otherwise>
                    </xsl:choose>
                    </b></td>
                </xsl:for-each>
                </tr>
                <tr class="row" depth="1" border="1px solid black">
                <xsl:for-each select="Cell">
                    <td class="cell1">
                        <xsl:call-template name="CellData" />
                    </td>
                </xsl:for-each>
                </tr>

            </xsl:if>
        </xsl:for-each>
        </tr>
    </table>
    <p/><p/>
</xsl:template>

<xsl:template match="/">
    <html>
        <head>
        <xsl:if test="$autoupdate = '1'">
                <meta http-equiv="REFRESH" content="10"></meta>
        </xsl:if>
        </head>
        <insertcss/>
        <body>
         <p class="headerImage">
            <headerImage/>
        </p>
        <xsl:if test="$clickable = '1'">
                <xsl:attribute name="onload">init()</xsl:attribute>
                <script src="portfolio_report.js" type="text/javascript"></script>
        </xsl:if>

        <!-- Table of contents, only viewed if more than one report -->

        <xsl:if test="/MultiReport">
            <table>
                <xsl:for-each select="/MultiReport/PRIMEReport">
                        <tr><td>
                            <!--<td><xsl:value-of select="Type"/></td>-->
                            <td><xsl:value-of select="Name" /></td>
                            <td><xsl:value-of select="concat(substring(LocalTime,1,10),' ',substring(LocalTime,12,8),' (UTC', substring(LocalTime,20,6),')')"/></td>
                        </td></tr>
               </xsl:for-each>
            </table>
        </xsl:if>

        <!-- Reports - ORIGINAL CODE-->
        <xsl:for-each select="/MultiReport/PRIMEReport|/PRIMEReport">
            <h3>
                <!--<xsl:value-of select="Type"/>:&nbsp;--><!--ORIGINAL LINE-->
                <xsl:value-of select="Name"/>&nbsp;
                <br><xsl:value-of select="concat(substring(LocalTime,1,10),' ',substring(LocalTime,12,8),' (UTC', substring(LocalTime,20,6),')')"/></br>
             </h3>

             <xsl:apply-templates select="current()/ReportContents"/>
        </xsl:for-each>
        </body>
    </html>
</xsl:template>

<!-- derived from http://www.exslt.org/math/functions/max/index.html -->
<xsl:template name="max">
   <xsl:param name="nodes" select="/.." />
   <xsl:choose>
      <xsl:when test="not($nodes)">0</xsl:when>
      <xsl:otherwise>
         <xsl:for-each select="$nodes">
            <xsl:sort select="translate(.,'-','')" data-type="number" order="descending" />
            <xsl:if test="position( ) = 1">
               <xsl:value-of select="number(translate(.,'-',''))" />
            </xsl:if>
         </xsl:for-each>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

<xsl:template name="color">
   <xsl:param name="value"/>
   <xsl:param name = "colorStep"/>
   <xsl:variable name="rgbval">
       <xsl:choose>
          <xsl:when test="$value > 0" >
            <xsl:value-of select="255 - round($value div $colorStep)"/>
        </xsl:when>
        <xsl:otherwise>
            <xsl:value-of select="255 - round($value div $colorStep * -1)"/>
        </xsl:otherwise>
       </xsl:choose>

   </xsl:variable>
   <xsl:choose>
        <xsl:when test="$value > 0 and $rgbval &lt; 0">
            <xsl:text>rgb(255,0,0)</xsl:text>
            </xsl:when>
        <xsl:when test="$value &lt; 0 and $rgbval &lt; 0">
            <xsl:text>rgb(0,255,0)</xsl:text>
            </xsl:when>
        <xsl:when test="$value > 0">
            <xsl:value-of select="concat('rgb(',$rgbval,',255,',$rgbval,')')"/>
            </xsl:when>
      <xsl:otherwise>
            <xsl:value-of select="concat('rgb(255,',$rgbval,',',$rgbval,')')"/>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

<xsl:template name="rgbfromint">
        <xsl:param name="rgbintval"/>
        
        <xsl:variable name="redval">
                <xsl:value-of select="$rgbintval mod 256"/>
        </xsl:variable>
        <xsl:variable name="newvalue">
                <xsl:value-of select="floor($rgbintval div 256)"/>
        </xsl:variable>
        <xsl:variable name="greenval">
                <xsl:value-of select="$newvalue mod 256"/>
        </xsl:variable>
        <xsl:variable name="blueval">
                <xsl:value-of select="floor($newvalue div 256)"/>
        </xsl:variable>
        
        <xsl:value-of select="concat( 'rgb(',  $redval,  ',',   $greenval,    ',',   $blueval,  ')'    )"/>
        
        
</xsl:template>

</xsl:stylesheet>

...

  BM_Overseas(SH05)
<?xml version='1.0'?>
<!-- &copy; Copyright 2011 SunGard FRONT ARENA
       FStandardTemplate is able to produce colored output for RiskMatrixSheets when DefaultData is turned on
       Added support for Transhist output
-->
<!DOCTYPE xsl:stylesheet [
    <!ENTITY nbsp "<xsl:text>&#160;</xsl:text>">
]>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:param name="clickable" select="0"/>
<xsl:param name="autoupdate" select="0"/>
<xsl:output method="html"/>
<xsl:variable name="cellWidth" select="80"/>
<xsl:variable name="rowHeaderWidth" select="250"/>
<xsl:variable name="useLabelColumn" select="//PRIMEReport/Type !='ASQL Table'"/>

<xsl:template name="PrintSpaces">
  <xsl:param name="n" select="0"/>
  <xsl:if test="$n > 0">
    <xsl:call-template name="PrintSpaces">
      <xsl:with-param name="n" select="$n - 1" />
    </xsl:call-template>
    &nbsp;
  </xsl:if>
</xsl:template>

<xsl:template match="ReportContents">
     <xsl:apply-templates select="Table"/>
</xsl:template>

<xsl:template match="Table">
    
    <xsl:variable name="numberOfColumns" select="NumberOfColumns"/>
    <tr class="tblhdr" depth="{$treeDepth}" border="1px solid black">
       <xsl:if test="$useLabelColumn">
        <td width="{$rowHeaderWidth}">
            <xsl:call-template name="PrintSpaces">
                <xsl:with-param name="n" select="($treeDepth -1) * 6"/>
            </xsl:call-template>
        <img src="report_plus.gif" />&nbsp;</td>
        </xsl:if>
        <xsl:for-each select="Columns/Column">
            <xsl:choose>
            <xsl:when test="TemplateId != ''">
                <td width="{$cellWidth * 2}" style="background-color : #ecf576"><b>
                <xsl:value-of select="TemplateId"/><br />
                <xsl:value-of select="Label"/>
                </b></td>
            </xsl:when>
            <xsl:otherwise>
                <td width="{$cellWidth}" style="background-color : #ecf576"><b><xsl:value-of select="Label"/></b></td>
            </xsl:otherwise>
            </xsl:choose>
        </xsl:for-each>
    </tr>
    <xsl:apply-templates select="Rows/Row">
        <xsl:with-param name="treeDepth" select="$treeDepth"/>
        <xsl:with-param name="colorStep" select="0"/>
    </xsl:apply-templates>
</xsl:template>

<xsl:template match="Table">
    
    <xsl:variable name="numberOfColumns" select="NumberOfColumns"/>

    <xsl:variable name="colorStep" >
        <xsl:choose>
                <xsl:when test="(Type = 'RiskMatrixSheet') and current()//DefaultData">
                    <xsl:variable name="maxvalue">
                        <xsl:call-template name="max">
                                <xsl:with-param name="nodes" select="current()//DefaultData"/>
                        </xsl:call-template>
                    </xsl:variable>
                    <xsl:value-of select="$maxvalue div 255" ></xsl:value-of>
                </xsl:when>
                <xsl:otherwise>0</xsl:otherwise>
        </xsl:choose>
    </xsl:variable>

    <table width="{$numberOfColumns * ($cellWidth + 4) + $rowHeaderWidth + 6}" border="1px solid black">
        <tr class="tblhdr" border="1px solid black">
           <xsl:if test="$useLabelColumn">
            <td width="{$rowHeaderWidth}">&nbsp;</td>
            </xsl:if>
            <xsl:for-each select="Columns/Column">
                <xsl:choose>
                <xsl:when test="TemplateId != ''">
                    <td width="{$cellWidth * 2}" style="background-color : #ecf576"><b>
                    <xsl:value-of select="TemplateId"/><br />
                    <xsl:value-of select="Label"/>
                    </b></td>
                </xsl:when>
                <xsl:otherwise>
                    <td width="{$cellWidth}" style="background-color : #ecf576"><b><xsl:value-of select="Label"/></b></td>
                </xsl:otherwise>
                </xsl:choose>
            </xsl:for-each>
        </tr>
        <xsl:apply-templates select="Rows/Row">
            <xsl:with-param name="treeDepth" select="1"/>
            <xsl:with-param name="colorStep" select="$colorStep"/>
        </xsl:apply-templates>
    </table>
    <p/><p/>
</xsl:template>

<xsl:template match="Row">
    <xsl:param name = "treeDepth"/>
    <xsl:param name = "colorStep"/>
    <xsl:variable name="rwId" select="RowId"/>
    <tr class="{concat('cell', $treeDepth)}" depth="{$treeDepth}" border="1px solid black">
        <xsl:if test="$useLabelColumn">
                <td class="row">
                <xsl:call-template name="PrintSpaces">
                        <xsl:with-param name="n" select="($treeDepth - 1) * 6"/>
                </xsl:call-template>
                <xsl:if test="$clickable = '1'">
                        <img src="report_plus.gif"/>
                </xsl:if>
                <xsl:value-of select="Label"/>
                </td>
        </xsl:if>
    <xsl:apply-templates select="Cells/Cell">
        <xsl:with-param name="colorStep" select="$colorStep" />
    </xsl:apply-templates>
    </tr>
    <xsl:if test="ancestor::ReportContents/ChildReports/ChildReport[ChildReportId = $rwId]">
        <xsl:apply-templates select="ancestor::ReportContents/ChildReports/ChildReport[ChildReportId = $rwId]/PRIMEReport/ReportContents/Table" mode="ChildReport">
            <xsl:with-param name="treeDepth" select="$treeDepth +1" />
        </xsl:apply-templates>
    </xsl:if>
    <xsl:apply-templates select="Rows/Row">
        <xsl:with-param name="treeDepth" select="$treeDepth + 1" />
        <xsl:with-param name="colorStep" select="$colorStep" />
    </xsl:apply-templates>
</xsl:template>

<xsl:template match="Cell">
    <xsl:param name = "colorStep"/>
    <td>
         
         <xsl:choose>   
            
            <xsl:when test="Appearance">
                <xsl:attribute name="style">
                
                         <xsl:choose>     
                            <xsl:when test="Appearance/BkgColor">
                                    background-color: <!--rgb( 0, 255 ,255 )-->
                                        <xsl:call-template name="rgbfromint">
                                            <xsl:with-param name="rgbintval" select="Appearance/BkgColor"/>  
                                         </xsl:call-template>
                                         
                            </xsl:when>
                            <xsl:otherwise>
                                background-color: white
                            </xsl:otherwise>
                         </xsl:choose>    
                         
                        <xsl:choose>   
                            <xsl:when test="Appearance/TextColor">
                                    ;color: <!--rgb( 255, 0 ,255 )-->
                                           <xsl:call-template name="rgbfromint">
                                            <xsl:with-param name="rgbintval" select="Appearance/TextColor"/>  
                                         </xsl:call-template>
                            </xsl:when>
                            <xsl:otherwise>
                               ;color: black
                            </xsl:otherwise>
                        </xsl:choose>   
                
                </xsl:attribute>   
            </xsl:when>
            
            <xsl:otherwise>
                <xsl:if test="DefaultData and $colorStep > 0 and string(number(DefaultData)) !='NaN'">
                        <xsl:attribute name="style">background-color:
                                <xsl:call-template name="color">
                                        <xsl:with-param name="colorStep" select="$colorStep"/>
                                        <xsl:with-param name="value" select="DefaultData"/>
                                        
                                </xsl:call-template>
                        </xsl:attribute>
                </xsl:if>
            </xsl:otherwise>
            
        </xsl:choose>
        <xsl:choose>
                <xsl:when test="ValueType and DefaultData">
                        <acronym>
                                <xsl:attribute name="title">
                                        <xsl:value-of select="DefaultData"/>
                                </xsl:attribute>
                        <xsl:call-template name="CellData" />
                        </acronym>
                </xsl:when>
                <xsl:otherwise>
                        <xsl:call-template name="CellData" />
                </xsl:otherwise>
        </xsl:choose>
    </td>
</xsl:template>

<xsl:template name="CellData">
        <xsl:choose>
             
            <xsl:when test="FormattedData">
                <xsl:value-of select="FormattedData"/>
            </xsl:when>
            <xsl:when test="RawData">
                <xsl:choose>
                    <xsl:when test ="contains(RawData, 'http:') or contains(RawData, 'https:')">
                        <xsl:value-of select="RawData " disable-output-escaping="yes"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="RawData"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:when test="DefaultData">
                <xsl:choose>
                        <xsl:when test="ValueType">
                                <xsl:text>#</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                                <xsl:value-of select="DefaultData"/>
                        </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                  <xsl:message terminate="yes"><xsl:text>No dataformat turned on</xsl:text></xsl:message>
            </xsl:otherwise>
            
        </xsl:choose>
</xsl:template>

<xsl:template match="Settings">
    <table border="1px solid black">
    <tr border="1px solid black">
        <xsl:for-each select="Groups/Group">
            <xsl:if test="Label = 'Profit/Loss'">
                <tr class="tblhdr" border="1px solid black">
                <xsl:for-each select="Column">
                    <td class="row" width="{$cellWidth}" style="background-color : #ecf576"><b>
                    <xsl:choose>
                        <xsl:when test="Label != ''">
                            <xsl:value-of select="Label"/>
                        </xsl:when>
                        <xsl:otherwise>
                             <xsl:value-of select="ColumnId"/>
                        </xsl:otherwise>
                    </xsl:choose>
                    </b></td>
                </xsl:for-each>
                </tr>
                <tr class="row" depth="1" border="1px solid black">
                <xsl:for-each select="Cell">
                    <td class="cell1">
                        <xsl:call-template name="CellData" />
                    </td>
                </xsl:for-each>
                </tr>

            </xsl:if>
        </xsl:for-each>
        </tr>
    </table>
    <p/><p/>
</xsl:template>

<xsl:template match="/">
    <html>
        <head>
        <xsl:if test="$autoupdate = '1'">
                <meta http-equiv="REFRESH" content="10"></meta>
        </xsl:if>
        </head>
        <insertcss/>
        <body>
         <p class="headerImage">
            <headerImage/>
        </p>
        <xsl:if test="$clickable = '1'">
                <xsl:attribute name="onload">init()</xsl:attribute>
                <script src="portfolio_report.js" type="text/javascript"></script>
        </xsl:if>
        
            <b>
            <br>PT Bank Mandiri (Persero) Tbk </br>
            <br>Sanghai Branch</br>
            <br>60800</br>
            </b>
        
        <br></br>
        <!-- Table of contents, only viewed if more than one report -->

        <xsl:if test="/MultiReport">
            <table>
                <xsl:for-each select="/MultiReport/PRIMEReport">
                        <tr>
                            <b>Application </b>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <xsl:value-of select="Name"/>&nbsp;
                            <br><b>Posting Date </b>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <xsl:value-of select="concat(substring(LocalTime,1,10),' ',substring(LocalTime,12,8),' (UTC', substring(LocalTime,20,6),')')"/>
                            </br>
                        </tr>
               </xsl:for-each>
            </table>
        </xsl:if>
        <br></br>
        <!-- Reports - ORIGINAL CODE-->
        <xsl:for-each select="/MultiReport/PRIMEReport|/PRIMEReport">
                <!--<xsl:value-of select="Type"/>:&nbsp;--><!--ORIGINAL LINE-->
            <tr>
                <b>Application </b>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <xsl:value-of select="Name"/>&nbsp;
                <br><b>Posting Date </b>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <xsl:value-of select="concat(substring(LocalTime,1,10),' ',substring(LocalTime,12,8),' (UTC', substring(LocalTime,20,6),')')"/>
                </br>
                <br></br>
            </tr>
             <xsl:apply-templates select="current()/ReportContents"/>
        </xsl:for-each>
        
        <xsl:for-each select="/MultiReport/PRIMEReport|/PRIMEReport">
            <table>
              <tr>
                <td><p>Prepared by</p></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td>GENERAL MANAGER</td>
              </tr>
              <tr></tr>
              <tr></tr>
              <tr></tr>
              <tr></tr>
              <tr></tr>
              <tr></tr>
              <tr>
                <td>Jason Liu</td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td>Guntur Syahputra Purba</td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td>Jantra Jagat Prawira Patiwiri</td>
              </tr>
              <tr>
                <td>Dealer</td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td>Treasury Manager</td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
              </tr>
            </table>
        </xsl:for-each>
        
        
        
        
        </body>
    </html>
</xsl:template>

<!-- derived from http://www.exslt.org/math/functions/max/index.html -->
<xsl:template name="max">
   <xsl:param name="nodes" select="/.." />
   <xsl:choose>
      <xsl:when test="not($nodes)">0</xsl:when>
      <xsl:otherwise>
         <xsl:for-each select="$nodes">
            <xsl:sort select="translate(.,'-','')" data-type="number" order="descending" />
            <xsl:if test="position( ) = 1">
               <xsl:value-of select="number(translate(.,'-',''))" />
            </xsl:if>
         </xsl:for-each>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

<xsl:template name="color">
   <xsl:param name="value"/>
   <xsl:param name = "colorStep"/>
   <xsl:variable name="rgbval">
       <xsl:choose>
          <xsl:when test="$value > 0" >
            <xsl:value-of select="255 - round($value div $colorStep)"/>
        </xsl:when>
        <xsl:otherwise>
            <xsl:value-of select="255 - round($value div $colorStep * -1)"/>
        </xsl:otherwise>
       </xsl:choose>

   </xsl:variable>
   <xsl:choose>
        <xsl:when test="$value > 0 and $rgbval &lt; 0">
            <xsl:text>rgb(255,0,0)</xsl:text>
            </xsl:when>
        <xsl:when test="$value &lt; 0 and $rgbval &lt; 0">
            <xsl:text>rgb(0,255,0)</xsl:text>
            </xsl:when>
        <xsl:when test="$value > 0">
            <xsl:value-of select="concat('rgb(',$rgbval,',255,',$rgbval,')')"/>
            </xsl:when>
      <xsl:otherwise>
            <xsl:value-of select="concat('rgb(255,',$rgbval,',',$rgbval,')')"/>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

<xsl:template name="rgbfromint">
        <xsl:param name="rgbintval"/>
        
        <xsl:variable name="redval">
                <xsl:value-of select="$rgbintval mod 256"/>
        </xsl:variable>
        <xsl:variable name="newvalue">
                <xsl:value-of select="floor($rgbintval div 256)"/>
        </xsl:variable>
        <xsl:variable name="greenval">
                <xsl:value-of select="$newvalue mod 256"/>
        </xsl:variable>
        <xsl:variable name="blueval">
                <xsl:value-of select="floor($newvalue div 256)"/>
        </xsl:variable>
        
        <xsl:value-of select="concat( 'rgb(',  $redval,  ',',   $greenval,    ',',   $blueval,  ')'    )"/>
        
        
</xsl:template>

</xsl:stylesheet>

...

  BM_Overseas(SH06)
<?xml version='1.0'?>
<!-- &copy; Copyright 2011 SunGard FRONT ARENA
       FStandardTemplate is able to produce colored output for RiskMatrixSheets when DefaultData is turned on
       Added support for Transhist output
-->
<!DOCTYPE xsl:stylesheet [
    <!ENTITY nbsp "<xsl:text>&#160;</xsl:text>">
]>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:param name="clickable" select="0"/>
<xsl:param name="autoupdate" select="0"/>
<xsl:output method="html"/>
<xsl:variable name="cellWidth" select="80"/>
<xsl:variable name="rowHeaderWidth" select="250"/>
<xsl:variable name="useLabelColumn" select="//PRIMEReport/Type !='ASQL Table'"/>

<xsl:template name="PrintSpaces">
  <xsl:param name="n" select="0"/>
  <xsl:if test="$n > 0">
    <xsl:call-template name="PrintSpaces">
      <xsl:with-param name="n" select="$n - 1" />
    </xsl:call-template>
    &nbsp;
  </xsl:if>
</xsl:template>

<xsl:template match="ReportContents">
     <xsl:apply-templates select="Table"/>
</xsl:template>

<xsl:template match="Table">
    
    <xsl:variable name="numberOfColumns" select="NumberOfColumns"/>
    <tr class="tblhdr" depth="{$treeDepth}" border="1px solid black">
       <xsl:if test="$useLabelColumn">
        <td width="{$rowHeaderWidth}">
            <xsl:call-template name="PrintSpaces">
                <xsl:with-param name="n" select="($treeDepth -1) * 6"/>
            </xsl:call-template>
        <img src="report_plus.gif" />&nbsp;</td>
        </xsl:if>
        <xsl:for-each select="Columns/Column">
            <xsl:choose>
            <xsl:when test="TemplateId != ''">
                <td width="{$cellWidth * 2}" style="background-color : #ecf576"><b>
                <xsl:value-of select="TemplateId"/><br />
                <xsl:value-of select="Label"/>
                </b></td>
            </xsl:when>
            <xsl:otherwise>
                <td width="{$cellWidth}" style="background-color : #ecf576"><b><xsl:value-of select="Label"/></b></td>
            </xsl:otherwise>
            </xsl:choose>
        </xsl:for-each>
    </tr>
    <xsl:apply-templates select="Rows/Row">
        <xsl:with-param name="treeDepth" select="$treeDepth"/>
        <xsl:with-param name="colorStep" select="0"/>
    </xsl:apply-templates>
</xsl:template>

<xsl:template match="Table">
    
    <xsl:variable name="numberOfColumns" select="NumberOfColumns"/>

    <xsl:variable name="colorStep" >
        <xsl:choose>
                <xsl:when test="(Type = 'RiskMatrixSheet') and current()//DefaultData">
                    <xsl:variable name="maxvalue">
                        <xsl:call-template name="max">
                                <xsl:with-param name="nodes" select="current()//DefaultData"/>
                        </xsl:call-template>
                    </xsl:variable>
                    <xsl:value-of select="$maxvalue div 255" ></xsl:value-of>
                </xsl:when>
                <xsl:otherwise>0</xsl:otherwise>
        </xsl:choose>
    </xsl:variable>

    <table width="{$numberOfColumns * ($cellWidth + 4) + $rowHeaderWidth + 6}" border="1px solid black">
        <tr class="tblhdr" border="1px solid black">
           <xsl:if test="$useLabelColumn">
            <td width="{$rowHeaderWidth}">&nbsp;</td>
            </xsl:if>
            <xsl:for-each select="Columns/Column">
                <xsl:choose>
                <xsl:when test="TemplateId != ''">
                    <td width="{$cellWidth * 2}" style="background-color : #ecf576"><b>
                    <xsl:value-of select="TemplateId"/><br />
                    <xsl:value-of select="Label"/>
                    </b></td>
                </xsl:when>
                <xsl:otherwise>
                    <td width="{$cellWidth}" style="background-color : #ecf576"><b><xsl:value-of select="Label"/></b></td>
                </xsl:otherwise>
                </xsl:choose>
            </xsl:for-each>
        </tr>
        <xsl:apply-templates select="Rows/Row">
            <xsl:with-param name="treeDepth" select="1"/>
            <xsl:with-param name="colorStep" select="$colorStep"/>
        </xsl:apply-templates>
    </table>
    <p/><p/>
</xsl:template>

<xsl:template match="Row">
    <xsl:param name = "treeDepth"/>
    <xsl:param name = "colorStep"/>
    <xsl:variable name="rwId" select="RowId"/>
    <tr class="{concat('cell', $treeDepth)}" depth="{$treeDepth}" border="1px solid black">
        <xsl:if test="$useLabelColumn">
                <td class="row">
                <xsl:call-template name="PrintSpaces">
                        <xsl:with-param name="n" select="($treeDepth - 1) * 6"/>
                </xsl:call-template>
                <xsl:if test="$clickable = '1'">
                        <img src="report_plus.gif"/>
                </xsl:if>
                <xsl:value-of select="Label"/>
                </td>
        </xsl:if>
    <xsl:apply-templates select="Cells/Cell">
        <xsl:with-param name="colorStep" select="$colorStep" />
    </xsl:apply-templates>
    </tr>
    <xsl:if test="ancestor::ReportContents/ChildReports/ChildReport[ChildReportId = $rwId]">
        <xsl:apply-templates select="ancestor::ReportContents/ChildReports/ChildReport[ChildReportId = $rwId]/PRIMEReport/ReportContents/Table" mode="ChildReport">
            <xsl:with-param name="treeDepth" select="$treeDepth +1" />
        </xsl:apply-templates>
    </xsl:if>
    <xsl:apply-templates select="Rows/Row">
        <xsl:with-param name="treeDepth" select="$treeDepth + 1" />
        <xsl:with-param name="colorStep" select="$colorStep" />
    </xsl:apply-templates>
</xsl:template>

<xsl:template match="Cell">
    <xsl:param name = "colorStep"/>
    <td>
         
         <xsl:choose>   
            
            <xsl:when test="Appearance">
                <xsl:attribute name="style">
                
                         <xsl:choose>     
                            <xsl:when test="Appearance/BkgColor">
                                    background-color: <!--rgb( 0, 255 ,255 )-->
                                        <xsl:call-template name="rgbfromint">
                                            <xsl:with-param name="rgbintval" select="Appearance/BkgColor"/>  
                                         </xsl:call-template>
                                         
                            </xsl:when>
                            <xsl:otherwise>
                                background-color: white
                            </xsl:otherwise>
                         </xsl:choose>    
                         
                        <xsl:choose>   
                            <xsl:when test="Appearance/TextColor">
                                    ;color: <!--rgb( 255, 0 ,255 )-->
                                           <xsl:call-template name="rgbfromint">
                                            <xsl:with-param name="rgbintval" select="Appearance/TextColor"/>  
                                         </xsl:call-template>
                            </xsl:when>
                            <xsl:otherwise>
                               ;color: black
                            </xsl:otherwise>
                        </xsl:choose>   
                
                </xsl:attribute>   
            </xsl:when>
            
            <xsl:otherwise>
                <xsl:if test="DefaultData and $colorStep > 0 and string(number(DefaultData)) !='NaN'">
                        <xsl:attribute name="style">background-color:
                                <xsl:call-template name="color">
                                        <xsl:with-param name="colorStep" select="$colorStep"/>
                                        <xsl:with-param name="value" select="DefaultData"/>
                                        
                                </xsl:call-template>
                        </xsl:attribute>
                </xsl:if>
            </xsl:otherwise>
            
        </xsl:choose>
        <xsl:choose>
                <xsl:when test="ValueType and DefaultData">
                        <acronym>
                                <xsl:attribute name="title">
                                        <xsl:value-of select="DefaultData"/>
                                </xsl:attribute>
                        <xsl:call-template name="CellData" />
                        </acronym>
                </xsl:when>
                <xsl:otherwise>
                        <xsl:call-template name="CellData" />
                </xsl:otherwise>
        </xsl:choose>
    </td>
</xsl:template>

<xsl:template name="CellData">
        <xsl:choose>
             
            <xsl:when test="FormattedData">
                <xsl:value-of select="FormattedData"/>
            </xsl:when>
            <xsl:when test="RawData">
                <xsl:choose>
                    <xsl:when test ="contains(RawData, 'http:') or contains(RawData, 'https:')">
                        <xsl:value-of select="RawData " disable-output-escaping="yes"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="RawData"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:when test="DefaultData">
                <xsl:choose>
                        <xsl:when test="ValueType">
                                <xsl:text>#</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                                <xsl:value-of select="DefaultData"/>
                        </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                  <xsl:message terminate="yes"><xsl:text>No dataformat turned on</xsl:text></xsl:message>
            </xsl:otherwise>
            
        </xsl:choose>
</xsl:template>

<xsl:template match="Settings">
    <table border="1px solid black">
    <tr border="1px solid black">
        <xsl:for-each select="Groups/Group">
            <xsl:if test="Label = 'Profit/Loss'">
                <tr class="tblhdr" border="1px solid black">
                <xsl:for-each select="Column">
                    <td class="row" width="{$cellWidth}" style="background-color : #ecf576"><b>
                    <xsl:choose>
                        <xsl:when test="Label != ''">
                            <xsl:value-of select="Label"/>
                        </xsl:when>
                        <xsl:otherwise>
                             <xsl:value-of select="ColumnId"/>
                        </xsl:otherwise>
                    </xsl:choose>
                    </b></td>
                </xsl:for-each>
                </tr>
                <tr class="row" depth="1" border="1px solid black">
                <xsl:for-each select="Cell">
                    <td class="cell1">
                        <xsl:call-template name="CellData" />
                    </td>
                </xsl:for-each>
                </tr>

            </xsl:if>
        </xsl:for-each>
        </tr>
    </table>
    <p/><p/>
</xsl:template>

<xsl:template match="/">
    <html>
        <head>
        <xsl:if test="$autoupdate = '1'">
                <meta http-equiv="REFRESH" content="10"></meta>
        </xsl:if>
        </head>
        <insertcss/>
        <body>
         <p class="headerImage">
            <headerImage/>
        </p>
        <xsl:if test="$clickable = '1'">
                <xsl:attribute name="onload">init()</xsl:attribute>
                <script src="portfolio_report.js" type="text/javascript"></script>
        </xsl:if>
        
            <b>
            <br>PT Bank Mandiri (Persero) Tbk </br>
            <br>Sanghai Branch</br>
            <br>60800</br>
            </b>
        
        <br></br>
        <!-- Table of contents, only viewed if more than one report -->

        <xsl:if test="/MultiReport">
            <table>
                <xsl:for-each select="/MultiReport/PRIMEReport">
                        <tr><td>
                            <b>Application  </b>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <xsl:value-of select="Name"/>&nbsp;
                            <br><b>Posting Date  </b>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <xsl:value-of select="concat(substring(LocalTime,1,10),' ',substring(LocalTime,12,8),' (UTC', substring(LocalTime,20,6),')')"/>
                            </br>
                        </td></tr>
               </xsl:for-each>
            </table>
        </xsl:if>
        <br></br>
        <!-- Reports - ORIGINAL CODE-->
        <xsl:for-each select="/MultiReport/PRIMEReport|/PRIMEReport">
                <!--<xsl:value-of select="Type"/>:&nbsp;--><!--ORIGINAL LINE-->
                <b>Application  </b>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <xsl:value-of select="Name"/>&nbsp;
                <br><b>Posting Date  </b>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <xsl:value-of select="concat(substring(LocalTime,1,10),' ',substring(LocalTime,12,8),' (UTC', substring(LocalTime,20,6),')')"/>
                </br>
                <br></br>
             <xsl:apply-templates select="current()/ReportContents"/>
        </xsl:for-each>
        
        <xsl:for-each select="/MultiReport/PRIMEReport|/PRIMEReport">
            <table>
              <tr>
                <td><p>Treasury Dept</p></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td>GENERAL MANAGER</td>
              </tr>
              <tr></tr>
              <tr></tr>
              <tr></tr>
              <tr></tr>
              <tr></tr>
              <tr></tr>
              <tr>
                <td>Jason Liu</td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td>Guntur Syahputra Purba</td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td>Jantra Jagat Prawira Patiwiri</td>
              </tr>
              <tr>
                <td>Dealer</td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td>Treasury Manager</td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
              </tr>
            </table>
        </xsl:for-each>
        
        
        
        
        </body>
    </html>
</xsl:template>

<!-- derived from http://www.exslt.org/math/functions/max/index.html -->
<xsl:template name="max">
   <xsl:param name="nodes" select="/.." />
   <xsl:choose>
      <xsl:when test="not($nodes)">0</xsl:when>
      <xsl:otherwise>
         <xsl:for-each select="$nodes">
            <xsl:sort select="translate(.,'-','')" data-type="number" order="descending" />
            <xsl:if test="position( ) = 1">
               <xsl:value-of select="number(translate(.,'-',''))" />
            </xsl:if>
         </xsl:for-each>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

<xsl:template name="color">
   <xsl:param name="value"/>
   <xsl:param name = "colorStep"/>
   <xsl:variable name="rgbval">
       <xsl:choose>
          <xsl:when test="$value > 0" >
            <xsl:value-of select="255 - round($value div $colorStep)"/>
        </xsl:when>
        <xsl:otherwise>
            <xsl:value-of select="255 - round($value div $colorStep * -1)"/>
        </xsl:otherwise>
       </xsl:choose>

   </xsl:variable>
   <xsl:choose>
        <xsl:when test="$value > 0 and $rgbval &lt; 0">
            <xsl:text>rgb(255,0,0)</xsl:text>
            </xsl:when>
        <xsl:when test="$value &lt; 0 and $rgbval &lt; 0">
            <xsl:text>rgb(0,255,0)</xsl:text>
            </xsl:when>
        <xsl:when test="$value > 0">
            <xsl:value-of select="concat('rgb(',$rgbval,',255,',$rgbval,')')"/>
            </xsl:when>
      <xsl:otherwise>
            <xsl:value-of select="concat('rgb(255,',$rgbval,',',$rgbval,')')"/>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

<xsl:template name="rgbfromint">
        <xsl:param name="rgbintval"/>
        
        <xsl:variable name="redval">
                <xsl:value-of select="$rgbintval mod 256"/>
        </xsl:variable>
        <xsl:variable name="newvalue">
                <xsl:value-of select="floor($rgbintval div 256)"/>
        </xsl:variable>
        <xsl:variable name="greenval">
                <xsl:value-of select="$newvalue mod 256"/>
        </xsl:variable>
        <xsl:variable name="blueval">
                <xsl:value-of select="floor($newvalue div 256)"/>
        </xsl:variable>
        
        <xsl:value-of select="concat( 'rgb(',  $redval,  ',',   $greenval,    ',',   $blueval,  ')'    )"/>
        
        
</xsl:template>

</xsl:stylesheet>

...

  BM_Overseas(without UTC)
<?xml version='1.0'?>
<!-- &copy; Copyright 2011 SunGard FRONT ARENA
       FStandardTemplate is able to produce colored output for RiskMatrixSheets when DefaultData is turned on
       Added support for Transhist output
-->
<!DOCTYPE xsl:stylesheet [
    <!ENTITY nbsp "<xsl:text>&#160;</xsl:text>">
]>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:param name="clickable" select="0"/>
<xsl:param name="autoupdate" select="0"/>
<xsl:output method="html"/>
<xsl:variable name="cellWidth" select="80"/>
<xsl:variable name="rowHeaderWidth" select="250"/>
<xsl:variable name="useLabelColumn" select="//PRIMEReport/Type !='ASQL Table'"/>

<xsl:template name="PrintSpaces">
  <xsl:param name="n" select="0"/>
  <xsl:if test="$n > 0">
    <xsl:call-template name="PrintSpaces">
      <xsl:with-param name="n" select="$n - 1" />
    </xsl:call-template>
    &nbsp;
  </xsl:if>
</xsl:template>

<xsl:template match="ReportContents">
     <xsl:apply-templates select="Table"/>
</xsl:template>

<xsl:template match="Table">
    
    <xsl:variable name="numberOfColumns" select="NumberOfColumns"/>
    <tr class="tblhdr" depth="{$treeDepth}" border="1px solid black">
       <xsl:if test="$useLabelColumn">
        <td width="{$rowHeaderWidth}">
            <xsl:call-template name="PrintSpaces">
                <xsl:with-param name="n" select="($treeDepth -1) * 6"/>
            </xsl:call-template>
        <img src="report_plus.gif" />&nbsp;</td>
        </xsl:if>
        <xsl:for-each select="Columns/Column">
            <xsl:choose>
            <xsl:when test="TemplateId != ''">
                <td width="{$cellWidth * 2}" style="background-color : #ecf576"><b>
                <xsl:value-of select="TemplateId"/><br />
                <xsl:value-of select="Label"/>
                </b></td>
            </xsl:when>
            <xsl:otherwise>
                <td width="{$cellWidth}" style="background-color : #ecf576"><b><xsl:value-of select="Label"/></b></td>
            </xsl:otherwise>
            </xsl:choose>
        </xsl:for-each>
    </tr>
    <xsl:apply-templates select="Rows/Row">
        <xsl:with-param name="treeDepth" select="$treeDepth"/>
        <xsl:with-param name="colorStep" select="0"/>
    </xsl:apply-templates>
</xsl:template>

<xsl:template match="Table">
    
    <xsl:variable name="numberOfColumns" select="NumberOfColumns"/>

    <xsl:variable name="colorStep" >
        <xsl:choose>
                <xsl:when test="(Type = 'RiskMatrixSheet') and current()//DefaultData">
                    <xsl:variable name="maxvalue">
                        <xsl:call-template name="max">
                                <xsl:with-param name="nodes" select="current()//DefaultData"/>
                        </xsl:call-template>
                    </xsl:variable>
                    <xsl:value-of select="$maxvalue div 255" ></xsl:value-of>
                </xsl:when>
                <xsl:otherwise>0</xsl:otherwise>
        </xsl:choose>
    </xsl:variable>

    <table width="{$numberOfColumns * ($cellWidth + 4) + $rowHeaderWidth + 6}" border="1px solid black">
        <tr class="tblhdr" border="1px solid black">
           <xsl:if test="$useLabelColumn">
            <td width="{$rowHeaderWidth}">&nbsp;</td>
            </xsl:if>
            <xsl:for-each select="Columns/Column">
                <xsl:choose>
                <xsl:when test="TemplateId != ''">
                    <td width="{$cellWidth * 2}" style="background-color : #ecf576"><b>
                    <xsl:value-of select="TemplateId"/><br />
                    <xsl:value-of select="Label"/>
                    </b></td>
                </xsl:when>
                <xsl:otherwise>
                    <td width="{$cellWidth}" style="background-color : #ecf576"><b><xsl:value-of select="Label"/></b></td>
                </xsl:otherwise>
                </xsl:choose>
            </xsl:for-each>
        </tr>
        <xsl:apply-templates select="Rows/Row">
            <xsl:with-param name="treeDepth" select="1"/>
            <xsl:with-param name="colorStep" select="$colorStep"/>
        </xsl:apply-templates>
    </table>
    <p/><p/>
</xsl:template>

<xsl:template match="Row">
    <xsl:param name = "treeDepth"/>
    <xsl:param name = "colorStep"/>
    <xsl:variable name="rwId" select="RowId"/>
    <tr class="{concat('cell', $treeDepth)}" depth="{$treeDepth}" border="1px solid black">
        <xsl:if test="$useLabelColumn">
                <td class="row">
                <xsl:call-template name="PrintSpaces">
                        <xsl:with-param name="n" select="($treeDepth - 1) * 6"/>
                </xsl:call-template>
                <xsl:if test="$clickable = '1'">
                        <img src="report_plus.gif"/>
                </xsl:if>
                <xsl:value-of select="Label"/>
                </td>
        </xsl:if>
    <xsl:apply-templates select="Cells/Cell">
        <xsl:with-param name="colorStep" select="$colorStep" />
    </xsl:apply-templates>
    </tr>
    <xsl:if test="ancestor::ReportContents/ChildReports/ChildReport[ChildReportId = $rwId]">
        <xsl:apply-templates select="ancestor::ReportContents/ChildReports/ChildReport[ChildReportId = $rwId]/PRIMEReport/ReportContents/Table" mode="ChildReport">
            <xsl:with-param name="treeDepth" select="$treeDepth +1" />
        </xsl:apply-templates>
    </xsl:if>
    <xsl:apply-templates select="Rows/Row">
        <xsl:with-param name="treeDepth" select="$treeDepth + 1" />
        <xsl:with-param name="colorStep" select="$colorStep" />
    </xsl:apply-templates>
</xsl:template>

<xsl:template match="Cell">
    <xsl:param name = "colorStep"/>
    <td>
         
         <xsl:choose>   
            
            <xsl:when test="Appearance">
                <xsl:attribute name="style">
                
                         <xsl:choose>     
                            <xsl:when test="Appearance/BkgColor">
                                    background-color: <!--rgb( 0, 255 ,255 )-->
                                        <xsl:call-template name="rgbfromint">
                                            <xsl:with-param name="rgbintval" select="Appearance/BkgColor"/>  
                                         </xsl:call-template>
                                         
                            </xsl:when>
                            <xsl:otherwise>
                                background-color: white
                            </xsl:otherwise>
                         </xsl:choose>    
                         
                        <xsl:choose>   
                            <xsl:when test="Appearance/TextColor">
                                    ;color: <!--rgb( 255, 0 ,255 )-->
                                           <xsl:call-template name="rgbfromint">
                                            <xsl:with-param name="rgbintval" select="Appearance/TextColor"/>  
                                         </xsl:call-template>
                            </xsl:when>
                            <xsl:otherwise>
                               ;color: black
                            </xsl:otherwise>
                        </xsl:choose>   
                
                </xsl:attribute>   
            </xsl:when>
            
            <xsl:otherwise>
                <xsl:if test="DefaultData and $colorStep > 0 and string(number(DefaultData)) !='NaN'">
                        <xsl:attribute name="style">background-color:
                                <xsl:call-template name="color">
                                        <xsl:with-param name="colorStep" select="$colorStep"/>
                                        <xsl:with-param name="value" select="DefaultData"/>
                                        
                                </xsl:call-template>
                        </xsl:attribute>
                </xsl:if>
            </xsl:otherwise>
            
        </xsl:choose>
        <xsl:choose>
                <xsl:when test="ValueType and DefaultData">
                        <acronym>
                                <xsl:attribute name="title">
                                        <xsl:value-of select="DefaultData"/>
                                </xsl:attribute>
                        <xsl:call-template name="CellData" />
                        </acronym>
                </xsl:when>
                <xsl:otherwise>
                        <xsl:call-template name="CellData" />
                </xsl:otherwise>
        </xsl:choose>
    </td>
</xsl:template>

<xsl:template name="CellData">
        <xsl:choose>
             
            <xsl:when test="FormattedData">
                <xsl:value-of select="FormattedData"/>
            </xsl:when>
            <xsl:when test="RawData">
                <xsl:choose>
                    <xsl:when test ="contains(RawData, 'http:') or contains(RawData, 'https:')">
                        <xsl:value-of select="RawData " disable-output-escaping="yes"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="RawData"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:when test="DefaultData">
                <xsl:choose>
                        <xsl:when test="ValueType">
                                <xsl:text>#</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                                <xsl:value-of select="DefaultData"/>
                        </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                  <xsl:message terminate="yes"><xsl:text>No dataformat turned on</xsl:text></xsl:message>
            </xsl:otherwise>
            
        </xsl:choose>
</xsl:template>

<xsl:template match="Settings">
    <table border="1px solid black">
    <tr border="1px solid black">
        <xsl:for-each select="Groups/Group">
            <xsl:if test="Label = 'Profit/Loss'">
                <tr class="tblhdr" border="1px solid black">
                <xsl:for-each select="Column">
                    <td class="row" width="{$cellWidth}" style="background-color : #ecf576"><b>
                    <xsl:choose>
                        <xsl:when test="Label != ''">
                            <xsl:value-of select="Label"/>
                        </xsl:when>
                        <xsl:otherwise>
                             <xsl:value-of select="ColumnId"/>
                        </xsl:otherwise>
                    </xsl:choose>
                    </b></td>
                </xsl:for-each>
                </tr>
                <tr class="row" depth="1" border="1px solid black">
                <xsl:for-each select="Cell">
                    <td class="cell1">
                        <xsl:call-template name="CellData" />
                    </td>
                </xsl:for-each>
                </tr>

            </xsl:if>
        </xsl:for-each>
        </tr>
    </table>
    <p/><p/>
</xsl:template>

<xsl:template match="/">
    <html>
        <head>
        <xsl:if test="$autoupdate = '1'">
                <meta http-equiv="REFRESH" content="10"></meta>
        </xsl:if>
        </head>
        <insertcss/>
        <body>
         <p class="headerImage">
            <headerImage/>
        </p>
        <xsl:if test="$clickable = '1'">
                <xsl:attribute name="onload">init()</xsl:attribute>
                <script src="portfolio_report.js" type="text/javascript"></script>
        </xsl:if>

        <!-- Table of contents, only viewed if more than one report -->

        <xsl:if test="/MultiReport">
            <table>
                <xsl:for-each select="/MultiReport/PRIMEReport">
                        <tr><td>
                            <!--<td><xsl:value-of select="Type"/></td>-->
                            <td><xsl:value-of select="Name"/></td>
                            <td><xsl:value-of select="substring(LocalTime,1,10)"/></td>
                        </td></tr>
               </xsl:for-each>
            </table>
        </xsl:if>

        <!-- Reports - ORIGINAL CODE-->
        <xsl:for-each select="/MultiReport/PRIMEReport|/PRIMEReport">
            <h3>
                <!--<xsl:value-of select="Type"/>:&nbsp;--><!--ORIGINAL LINE-->
                <xsl:value-of select="Name"/>&nbsp;
                <br><xsl:value-of select="substring(LocalTime,1,10)"/></br>
                <!--<xsl:value-of select="concat(substring(LocalTime,1,10),' ',substring(LocalTime,12,8),' (UTC', substring(LocalTime,20,6),')')"/>-->
             </h3>

             <xsl:apply-templates select="current()/ReportContents"/>
        </xsl:for-each>
        </body>
    </html>
</xsl:template>

<!-- derived from http://www.exslt.org/math/functions/max/index.html -->
<xsl:template name="max">
   <xsl:param name="nodes" select="/.." />
   <xsl:choose>
      <xsl:when test="not($nodes)">0</xsl:when>
      <xsl:otherwise>
         <xsl:for-each select="$nodes">
            <xsl:sort select="translate(.,'-','')" data-type="number" order="descending" />
            <xsl:if test="position( ) = 1">
               <xsl:value-of select="number(translate(.,'-',''))" />
            </xsl:if>
         </xsl:for-each>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

<xsl:template name="color">
   <xsl:param name="value"/>
   <xsl:param name = "colorStep"/>
   <xsl:variable name="rgbval">
       <xsl:choose>
          <xsl:when test="$value > 0" >
            <xsl:value-of select="255 - round($value div $colorStep)"/>
        </xsl:when>
        <xsl:otherwise>
            <xsl:value-of select="255 - round($value div $colorStep * -1)"/>
        </xsl:otherwise>
       </xsl:choose>

   </xsl:variable>
   <xsl:choose>
        <xsl:when test="$value > 0 and $rgbval &lt; 0">
            <xsl:text>rgb(255,0,0)</xsl:text>
            </xsl:when>
        <xsl:when test="$value &lt; 0 and $rgbval &lt; 0">
            <xsl:text>rgb(0,255,0)</xsl:text>
            </xsl:when>
        <xsl:when test="$value > 0">
            <xsl:value-of select="concat('rgb(',$rgbval,',255,',$rgbval,')')"/>
            </xsl:when>
      <xsl:otherwise>
            <xsl:value-of select="concat('rgb(255,',$rgbval,',',$rgbval,')')"/>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

<xsl:template name="rgbfromint">
        <xsl:param name="rgbintval"/>
        
        <xsl:variable name="redval">
                <xsl:value-of select="$rgbintval mod 256"/>
        </xsl:variable>
        <xsl:variable name="newvalue">
                <xsl:value-of select="floor($rgbintval div 256)"/>
        </xsl:variable>
        <xsl:variable name="greenval">
                <xsl:value-of select="$newvalue mod 256"/>
        </xsl:variable>
        <xsl:variable name="blueval">
                <xsl:value-of select="floor($newvalue div 256)"/>
        </xsl:variable>
        
        <xsl:value-of select="concat( 'rgb(',  $redval,  ',',   $greenval,    ',',   $blueval,  ')'    )"/>
        
        
</xsl:template>

</xsl:stylesheet>

...

  DL01
<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:template match="data1">
<html lang="en">
<head>
    <title>Document</title>
    <style>
        body {
            width: auto;
        }
        table {
            width: auto;
        }
        th, td{
            border-bottom: 1px solid black;
        }
        .header {
            background-color: #16ab11;
        }
        .content-lamp{
            font-weight: bold; font-size: x-large;
        }
        /* Background-Color : #fecc9d */
        .content-no, .content-date, .content-usd, .content-idr, .content-cost, .content-remittanceFee {
            background-color:#fecc9d;
        }
        
        /* Middle Content */
        .content-no, .content-date ,.content-lamp, .content-kode, .content-curr, .content-bankPos, .content-sumberDanaOddA,
        .content-telpOddA, .content-alamatOddA, .content-idPengirimOddA, .content-kewarganegaraanOddA, .content-localIdOddA, .content-trxOddA, .content-statusOddA,
        .content-genderOddA, .content-tahunLahirOddA, .content-kodeWn {
            text-align: center;
        }
        /* right Content */
        .content-usdAmount, .content-idrAmountOddA, .content-rate, .content-usd, .content-idr, .content-cost, .content-profit, .content-remittanceFee{
            text-align: right;
        }
        /* Background-Color : #dfdeda (Odd A) */
        .content-pengirimOddA,  .content-idrAmountOddA, .content-rekOddA, .content-namaPenerimaOddA, .content-bankPenerimaOddA,
        .content-sumberDanaOddA, .content-telpOddA, .content-alamatOddA, .content-idPengirimOddA, .content-kewarganegaraanOddA,
        .content-localIdOddA, .content-trxOddA, .content-statusOddA, .content-genderOddA, .content-tahunLahirOddA,
        .content-kodeOddA, .content-currOddA, .content-usdAmountOddA, .content-bankPosOddA, .content-rateOddA{
            background-color: #dfdeda;
        }
        /* Background-Color : #99f362 (Even A) */
        .content-pengirimEvenA,  .content-idrAmountEvenA, .content-rekEvenA, .content-namaPenerimaEvenA, .content-bankPenerimaEvenA,
        .content-sumberDanaEvenA, .content-telpEvenA, .content-alamatEvenA, .content-idPengirimEvenA, .content-kewarganegaraanEvenA,
        .content-localIdEvenA, .content-trxEvenA, .content-statusEvenA, .content-genderEvenA, .content-tahunLahirEvenA,
        .content-kodeEvenA, .content-currEvenA, .content-usdAmountEvenA, .content-bankPosEvenA, .content-rateEvenA{
            background-color: #99f362;
        }
        /* Background-Color : #FFFF99 (Odd B) */
        .content-pengirimOddB,  .content-idrAmountOddB, .content-rekOddB, .content-namaPenerimaOddB, .content-bankPenerimaOddB,
        .content-sumberDanaOddB, .content-telpOddB, .content-alamatOddB, .content-idPengirimOddB, .content-kewarganegaraanOddB,
        .content-localIdOddB, .content-trxOddB, .content-statusOddB, .content-genderOddB, .content-tahunLahirOddB,
        .content-kodeOddB, .content-currOddB, .content-usdAmountOddB, .content-bankPosOddB, .content-rateOddB{
            background-color: #FFFF99;
        }

        /* Background-Color : #99CC00 (Even B) */
        .content-pengirimEvenB,  .content-idrAmountEvenB, .content-rekEvenB, .content-namaPenerimaEvenB, .content-bankPenerimaEvenB,
        .content-sumberDanaEvenB, .content-telpEvenB, .content-alamatEvenB, .content-idPengirimEvenB, .content-kewarganegaraanEvenB,
        .content-localIdEvenB, .content-trxEvenB, .content-statusEvenB, .content-genderEvenB, .content-tahunLahirEvenB,
        .content-kodeEvenB, .content-currEvenB, .content-usdAmountEvenB, .content-bankPosEvenB, .content-rateEvenB{
            background-color: #99CC00;
        }
        /* Background-Color : #fcfe9b (Profit) */
        .content-profit, .content-kodeWn, .header-kodeWn{
            background-color: #fcfe9b;
        }
        
    </style>
</head>
<body>
    <table>
        <tr>
           <th class="header" rowspan="2">PENGIRIM</th>
           <th class="header" rowspan="2">LAMP</th>
           <th class="header" rowspan="2">DEAL CODE/TRX</th>
           <th class="header" rowspan="2">CURRENCY</th>
           <th class="header" rowspan="2">USD AMOUNT</th>
           <th class="header" rowspan="2">BANK POSITION</th>
           <th class="header" rowspan="2">RATE</th>
           <th class="header" rowspan="2">IDR AMOUNT</th>
           <th class="header" colspan="2">Accumulated Position</th>
           <th class="header" rowspan="2">Cost</th>
           <th class="header" rowspan="2">Profit (Dari Spread)</th>
           <th class="header" rowspan="2">Remittance Fee</th>
           <th class="header" rowspan="2">NO REKENING TUJUAN</th>
           <th class="header" rowspan="2">NAMA PENERIMA</th>
           <th class="header" rowspan="2">BANK PENERIMA</th>
           <th class="header" rowspan="2">SUMBER DANA</th>
           <th class="header" rowspan="2">NO TLP PENGIRIM</th>
           <th class="header" rowspan="2">ALAMAT PENGIRIM</th>
           <th class="header" rowspan="2">NO ID PENGIRIM</th>
           <th class="header" rowspan="2">KEWARGANEGARAAN</th>
           <th class="header" rowspan="2">LOCAL ID</th>
           <th class="header" rowspan="2">TUJUAN TRX</th>
           <th class="header" rowspan="2">STATUS</th>
           <th class="header" rowspan="2">JENIS KELAMIN</th>
           <th class="header" rowspan="2">TAHUN LAHIR</th>
           <th class="header-kodeWn" rowspan="2">KODE WN</th> 
        </tr>
        <tr>
            <th class="header">USD</th>
            <th class="header">IDR</th>
        </tr>
        <xsl:for-each select="cust">
        <tr>
                 <xsl:choose>
                 <xsl:when test="lamp mod 2 != 0">
                    <td class="content-pengirimOddA"><xsl:value-of select = "pengirim"/></td>
                </xsl:when>
                <xsl:otherwise>
                    <td class="content-pengirimEvenA"><xsl:value-of select = "pengirim"/></td>
                </xsl:otherwise>
                </xsl:choose>
                <xsl:if test="no mod 3 = 1">
                    <td rowspan = "3" class="content-lamp"><xsl:value-of select = "lamp"/></td>
                </xsl:if>
                <xsl:choose>
                <xsl:when test="lamp mod 2 != 0">
                <td class="content-kodeOddA"><xsl:value-of select = "kode"/></td>
                <td class="content-currOddA"><xsl:value-of select = "curr"/></td>
                <td class="content-usdAmountOddA">$<xsl:value-of select = "usdAmount"/></td>
                <td class="content-bankPosOddA"><xsl:value-of select = "bankPos"/></td>
                <td class="content-rateOddA">Rp.<xsl:value-of select = "rate"/></td>
                <td class="content-idrAmountOddA">Rp.<xsl:value-of select = "idrAmount"/></td>
                </xsl:when>
                <xsl:otherwise>
                    <td class="content-kodeEvenA"><xsl:value-of select = "kode"/></td>
                    <td class="content-currEvenA"><xsl:value-of select = "curr"/></td>
                    <td class="content-usdAmountEvenA">$<xsl:value-of select = "usdAmount"/></td>
                    <td class="content-bankPosEvenA"><xsl:value-of select = "bankPos"/></td>
                    <td class="content-rateEvenA">Rp.<xsl:value-of select = "rate"/></td>
                    <td class="content-idrAmountEvenA">Rp.<xsl:value-of select = "idrAmount"/></td>
                </xsl:otherwise>
                </xsl:choose>
                 <td class="content-usd">$<xsl:value-of select = "usd"/></td>
                 <td class="content-idr">Rp.<xsl:value-of select = "idr"/></td>
                 <td class="content-cost">Rp.<xsl:value-of select = "cost"/></td>
                 <td class="content-profit"><xsl:value-of select = "profit"/></td>
                 <td class="content-remittanceFee">$<xsl:value-of select = "remittanceFee"/></td>
                 <xsl:choose>
                 <xsl:when test="lamp mod 2 != 0">
                 <td class="content-rekOddA"><xsl:value-of select = "rek"/></td>
                 <td class="content-namaPenerimaOddA"><xsl:value-of select = "namaPenerima"/></td>
                 <td class="content-bankPenerimaOddA"><xsl:value-of select = "bankPenerima"/></td>
                 <td class="content-sumberDanaOddA"><xsl:value-of select = "sumberDana"/></td>
                 <td class="content-telpOddA"><xsl:value-of select = "telp"/></td>
                 <td class="content-alamatOddA"><xsl:value-of select = "alamat"/></td>
                 <td class="content-idPengirimOddA"><xsl:value-of select = "idPengirim"/></td>
                 <td class="content-kewarganegaraanOddA"><xsl:value-of select = "kewarganegaraan"/></td>
                 <td class="content-localIdOddA"><xsl:value-of select = "localId"/></td>
                 <td class="content-trxOddA"><xsl:value-of select = "trx"/></td>
                 <td class="content-statusOddA"><xsl:value-of select = "status"/></td>
                 <td class="content-genderOddA"><xsl:value-of select = "gender"/></td>
                 <td class="content-tahunLahirOddA"><xsl:value-of select = "tahunLahir"/></td>
                </xsl:when>
                <xsl:otherwise>
                 <td class="content-rekEvenA"><xsl:value-of select = "rek"/></td>
                 <td class="content-namaPenerimaEvenA"><xsl:value-of select = "namaPenerima"/></td>
                 <td class="content-bankPenerimaEvenA"><xsl:value-of select = "bankPenerima"/></td>
                 <td class="content-sumberDanaEvenA"><xsl:value-of select = "sumberDana"/></td>
                 <td class="content-telpEvenA"><xsl:value-of select = "telp"/></td>
                 <td class="content-alamatEvenA"><xsl:value-of select = "alamat"/></td>
                 <td class="content-idPengirimEvenA"><xsl:value-of select = "idPengirim"/></td>
                 <td class="content-kewarganegaraanEvenA"><xsl:value-of select = "kewarganegaraan"/></td>
                 <td class="content-localIdEvenA"><xsl:value-of select = "localId"/></td>
                 <td class="content-trxEvenA"><xsl:value-of select = "trx"/></td>
                 <td class="content-statusEvenA"><xsl:value-of select = "status"/></td>
                 <td class="content-genderEvenA"><xsl:value-of select = "gender"/></td>
                 <td class="content-tahunLahirEvenA"><xsl:value-of select = "tahunLahir"/></td>
                </xsl:otherwise>
                </xsl:choose>
                <td class="content-kodeWn"><xsl:value-of select = "kodeWn"/></td> 
              </tr>
        </xsl:for-each>
    </table>
</body>
</html>
</xsl:template>
</xsl:stylesheet>

...

  DLFO01
<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:template match="data1">
<html lang="en">
<head>
    <title>Document</title>
    <style>
        body {
            width: auto;
        }
        table {
            width: auto;
        }
        .header, td{
            border-bottom: 1px solid black;
        }
        .header {
            background-color: #E082E0;
        }
        .content-lamp{
            font-weight: bold; font-size: x-large;
        }
        /* Background-Color : #fecc9d */
        .content-no, .content-date, .content-usd, .content-idr, .content-cost, .content-remittanceFee {
            background-color:#fecc9d;
        }
        
        /* Middle Content */
        .content-no, .content-date ,.content-lamp, .content-kode, .content-curr, .content-bankPos, .content-sumberDanaOddA,
        .content-telpOddA, .content-alamatOddA, .content-idPengirimOddA, .content-kewarganegaraanOddA, .content-localIdOddA, .content-trxOddA, .content-statusOddA,
        .content-genderOddA, .content-tahunLahirOddA, .content-costRemittanceFee {
            text-align: center;
        }
        /* right Content */
        .content-usdAmount, .content-idrAmountOddA, .content-rate, .content-usd, .content-idr, .content-cost, .content-profit, .content-remittanceFee{
            text-align: right;
        }
        /* Background-Color : #dfdeda (Odd A) */
        .content-pengirimOddA,  .content-idrAmountOddA, .content-rekOddA, .content-namaPenerimaOddA, .content-bankPenerimaOddA,
        .content-sumberDanaOddA, .content-telpOddA, .content-alamatOddA, .content-idPengirimOddA, .content-kewarganegaraanOddA,
        .content-localIdOddA, .content-trxOddA, .content-statusOddA, .content-genderOddA, .content-tahunLahirOddA,
        .content-kodeOddA, .content-currOddA, .content-usdAmountOddA, .content-bankPosOddA, .content-rateOddA{
            background-color: #dfdeda;
        }
        /* Background-Color : #99f362 (Even A) */
        .content-pengirimEvenA,  .content-idrAmountEvenA, .content-rekEvenA, .content-namaPenerimaEvenA, .content-bankPenerimaEvenA,
        .content-sumberDanaEvenA, .content-telpEvenA, .content-alamatEvenA, .content-idPengirimEvenA, .content-kewarganegaraanEvenA,
        .content-localIdEvenA, .content-trxEvenA, .content-statusEvenA, .content-genderEvenA, .content-tahunLahirEvenA,
        .content-kodeEvenA, .content-currEvenA, .content-usdAmountEvenA, .content-bankPosEvenA, .content-rateEvenA{
            background-color: #99f362;
        }
        /* Background-Color : #FFFF99 (Odd B) */
        .content-pengirimOddB,  .content-idrAmountOddB, .content-rekOddB, .content-namaPenerimaOddB, .content-bankPenerimaOddB,
        .content-sumberDanaOddB, .content-telpOddB, .content-alamatOddB, .content-idPengirimOddB, .content-kewarganegaraanOddB,
        .content-localIdOddB, .content-trxOddB, .content-statusOddB, .content-genderOddB, .content-tahunLahirOddB,
        .content-kodeOddB, .content-currOddB, .content-usdAmountOddB, .content-bankPosOddB, .content-rateOddB{
            background-color: #FFFF99;
        }

        /* Background-Color : #99CC00 (Even B) */
        .content-pengirimEvenB,  .content-idrAmountEvenB, .content-rekEvenB, .content-namaPenerimaEvenB, .content-bankPenerimaEvenB,
        .content-sumberDanaEvenB, .content-telpEvenB, .content-alamatEvenB, .content-idPengirimEvenB, .content-kewarganegaraanEvenB,
        .content-localIdEvenB, .content-trxEvenB, .content-statusEvenB, .content-genderEvenB, .content-tahunLahirEvenB,
        .content-kodeEvenB, .content-currEvenB, .content-usdAmountEvenB, .content-bankPosEvenB, .content-rateEvenB{
            background-color: #99CC00;
        }
        /* Background-Color : #fcfe9b (Profit) */
        .content-profit, .content-costRemittanceFee, .header-CostRemittance{
            background-color: #fcfe9b;
        }
        
    </style>
</head>
<body>
    <table>
        <tr>
           <th class="header" rowspan="2">No</th>
           <th class="header" rowspan="2">Deal Date</th>
           <th class="header" rowspan="2">Pengirim</th>
           <th class="header" rowspan="2">Lamp</th>
           <th style="background-color: #E082E0; border-bottom: 1px solid #E082E0;">KODE</th>
           <th class="header" rowspan="2">Currency</th>
           <th class="header" rowspan="2">USD Amount</th>
           <th class="header" rowspan="2">Bank Position</th>
           <th class="header" rowspan="2">Rate</th>
           <th class="header" rowspan="2">IDR Amount</th>
           <th class="header" colspan="2">Accumulated Position</th>
           <th class="header" rowspan="2">Cost</th>
           <th class="header" rowspan="2">Profit (Dari Spread)</th>
           <th class="header" rowspan="2">Remittance Fee</th>
           <th class="header" rowspan="2">NO REKENING TUJUAN</th>
           <th class="header" rowspan="2">NAMA PENERIMA</th>
           <th class="header" rowspan="2">BANK PENERIMA</th>
           <th class="header" rowspan="2">SUMBER DANA</th>
           <th class="header" rowspan="2">NO TLP PENGIRIM</th>
           <th class="header" rowspan="2">ALAMAT PENGIRIM</th>
           <th class="header" rowspan="2">NO ID PENGIRIM</th>
           <th class="header" rowspan="2">KEWARGANEGARAAN</th>
           <th class="header" rowspan="2">LOCAL ID</th>
           <th class="header" rowspan="2">TUJUAN TRX</th>
           <th class="header" rowspan="2">STATUS</th>
           <th class="header" rowspan="2">JENIS KELAMIN</th>
           <th class="header" rowspan="2">TAHUN LAHIR</th>
           <th class="header-CostRemittance" rowspan="2">Cost Remittance</th> 
        </tr>
        <tr>
            <th class="header">DEAL / TRX</th>
            <th class="header">USD</th>
            <th class="header">IDR</th>
        </tr>
        <xsl:for-each select="cust">
        <tr>
                 <td class="content-no"><xsl:value-of select = "no"/></td>
                 <td class="content-date"><xsl:value-of select = "date"/></td>
                 <xsl:choose>
                 <xsl:when test="lamp mod 2 != 0">
                    <td class="content-pengirimOddA"><xsl:value-of select = "pengirim"/></td>
                </xsl:when>
                <xsl:otherwise>
                    <td class="content-pengirimEvenA"><xsl:value-of select = "pengirim"/></td>
                </xsl:otherwise>
                </xsl:choose>
                <xsl:if test="no mod 3 = 1">
                    <td rowspan = "3" class="content-lamp"><xsl:value-of select = "lamp"/></td>
                </xsl:if>
                <xsl:choose>
                <xsl:when test="lamp mod 2 != 0">
                <td class="content-kodeOddA"><xsl:value-of select = "kode"/></td>
                <td class="content-currOddA"><xsl:value-of select = "curr"/></td>
                <td class="content-usdAmountOddA">$<xsl:value-of select = "usdAmount"/></td>
                <td class="content-bankPosOddA"><xsl:value-of select = "bankPos"/></td>
                <td class="content-rateOddA">Rp.<xsl:value-of select = "rate"/></td>
                <td class="content-idrAmountOddA">Rp.<xsl:value-of select = "idrAmount"/></td>
                </xsl:when>
                <xsl:otherwise>
                    <td class="content-kodeEvenA"><xsl:value-of select = "kode"/></td>
                    <td class="content-currEvenA"><xsl:value-of select = "curr"/></td>
                    <td class="content-usdAmountEvenA">$<xsl:value-of select = "usdAmount"/></td>
                    <td class="content-bankPosEvenA"><xsl:value-of select = "bankPos"/></td>
                    <td class="content-rateEvenA">Rp.<xsl:value-of select = "rate"/></td>
                    <td class="content-idrAmountEvenA">Rp.<xsl:value-of select = "idrAmount"/></td>
                </xsl:otherwise>
                </xsl:choose>
                 <td class="content-usd">$<xsl:value-of select = "usd"/></td>
                 <td class="content-idr">Rp.<xsl:value-of select = "idr"/></td>
                 <td class="content-cost">Rp.<xsl:value-of select = "cost"/></td>
                 <td class="content-profit"><xsl:value-of select = "profit"/></td>
                 <td class="content-remittanceFee">$<xsl:value-of select = "remittanceFee"/></td>
                 <xsl:choose>
                 <xsl:when test="lamp mod 2 != 0">
                 <td class="content-rekOddA"><xsl:value-of select = "rek"/></td>
                 <td class="content-namaPenerimaOddA"><xsl:value-of select = "namaPenerima"/></td>
                 <td class="content-bankPenerimaOddA"><xsl:value-of select = "bankPenerima"/></td>
                 <td class="content-sumberDanaOddA"><xsl:value-of select = "sumberDana"/></td>
                 <td class="content-telpOddA"><xsl:value-of select = "telp"/></td>
                 <td class="content-alamatOddA"><xsl:value-of select = "alamat"/></td>
                 <td class="content-idPengirimOddA"><xsl:value-of select = "idPengirim"/></td>
                 <td class="content-kewarganegaraanOddA"><xsl:value-of select = "kewarganegaraan"/></td>
                 <td class="content-localIdOddA"><xsl:value-of select = "localId"/></td>
                 <td class="content-trxOddA"><xsl:value-of select = "trx"/></td>
                 <td class="content-statusOddA"><xsl:value-of select = "status"/></td>
                 <td class="content-genderOddA"><xsl:value-of select = "gender"/></td>
                 <td class="content-tahunLahirOddA"><xsl:value-of select = "tahunLahir"/></td>
                </xsl:when>
                <xsl:otherwise>
                 <td class="content-rekEvenA"><xsl:value-of select = "rek"/></td>
                 <td class="content-namaPenerimaEvenA"><xsl:value-of select = "namaPenerima"/></td>
                 <td class="content-bankPenerimaEvenA"><xsl:value-of select = "bankPenerima"/></td>
                 <td class="content-sumberDanaEvenA"><xsl:value-of select = "sumberDana"/></td>
                 <td class="content-telpEvenA"><xsl:value-of select = "telp"/></td>
                 <td class="content-alamatEvenA"><xsl:value-of select = "alamat"/></td>
                 <td class="content-idPengirimEvenA"><xsl:value-of select = "idPengirim"/></td>
                 <td class="content-kewarganegaraanEvenA"><xsl:value-of select = "kewarganegaraan"/></td>
                 <td class="content-localIdEvenA"><xsl:value-of select = "localId"/></td>
                 <td class="content-trxEvenA"><xsl:value-of select = "trx"/></td>
                 <td class="content-statusEvenA"><xsl:value-of select = "status"/></td>
                 <td class="content-genderEvenA"><xsl:value-of select = "gender"/></td>
                 <td class="content-tahunLahirEvenA"><xsl:value-of select = "tahunLahir"/></td>
                </xsl:otherwise>
                </xsl:choose>
                <td class="content-costRemittanceFee"><xsl:value-of select = "costRemittanceFee"/></td> 
              </tr>
        </xsl:for-each>
    </table>
</body>
</html>
</xsl:template>
</xsl:stylesheet>

...

  FCSVTemplateRemoveHeader
<?xml version='1.0'?>
<!DOCTYPE xsl:stylesheet [
  <!ENTITY comma "<xsl:text>,</xsl:text>">
  <!ENTITY lf "<xsl:text>&#10;</xsl:text>">
]>

<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:output method="text" encoding="ISO-8859-1"/>
<xsl:strip-space elements="*"/>

<!-- this version includes only the data and the row label i.e. no report title or row headers etc. -->

<!-- Filter out header data -->
<xsl:template match="node()|@*">
  <xsl:copy>
    <xsl:apply-templates select="node()|@*"/>
  </xsl:copy>
</xsl:template>
<xsl:template match="Name|Type|StartTime|Time|LocalTime|ArenaDataServer"/>


<xsl:template match="Table">Row&comma;
<xsl:for-each select="Columns/Column">
    <xsl:value-of select="Label"/>&comma;
</xsl:for-each>
&lf;
<xsl:apply-templates select="Rows/Row"/>
</xsl:template>

<xsl:template match="Row">
    <xsl:value-of select="Label"/>&comma;
    <xsl:for-each select="Cells/Cell">
        <xsl:call-template name="CellData" />&comma;
    </xsl:for-each>
    &lf;
    <xsl:apply-templates select="Rows/Row"/>
</xsl:template>


<xsl:template name="CellData">
        <xsl:choose>
            <xsl:when test="RawData">
                <xsl:value-of select="RawData"/>
            </xsl:when>
            <xsl:when test="FormattedData">
                <xsl:value-of select="FormattedData"/>
            </xsl:when>
            <xsl:when test="DefaultData">
                <xsl:choose>
                        <xsl:when test="ValueType">
                                <xsl:text>#</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                                <xsl:value-of select="DefaultData"/>
                        </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                  <xsl:message terminate="yes"><xsl:text>No dataformat turned on</xsl:text></xsl:message>
            </xsl:otherwise>
        </xsl:choose>
</xsl:template>

</xsl:stylesheet>

...

  FLandscapePDF
<?xml version="1.0"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:FA="http://www.frontarena.com/arena/primereport">                
                <!-- If there are more columns than this value they will not be included in the output document -->
                <xsl:output encoding="US-ASCII"/> 
                <xsl:variable name="maxNrOfColumns" select="30"/>   
                <xsl:variable name="numberOfColumns" select="30"/>
                <xsl:variable name="isMultiReport" select="count(/MultiReport)"/> 
                <xsl:variable name="colWidth" select="3"/>
                <xsl:variable name="colWidth2" select="9 - (($maxNrOfColumns - 1)*0.1)"/>
                <xsl:variable name="page-width" select="($colWidth * ($numberOfColumns +1))"/>
                    
    <xsl:template match="/">
        <fo:root>
            <fo:layout-master-set>
                <fo:simple-page-master margin-right="1cm" margin-left="1cm" margin-bottom="1.3cm" margin-top="1cm" page-width="300cm" page-height="21cm" master-name="first">
                    <fo:region-body margin-top="1.5cm" margin-bottom="1.5cm"/>
                    <fo:region-before extent="2cm"/>
                    <fo:region-after extent="1.5cm"/>
                </fo:simple-page-master>
            </fo:layout-master-set>
            <fo:page-sequence master-reference="first">
                <fo:static-content flow-name="xsl-region-before">
                    <fo:block text-align-last="justify" font-size="10pt">
                        <xsl:choose>
                        <!-- Multiple reports in document -->
                        <xsl:when test="$isMultiReport = '1'">
                            <fo:inline>
                                    Multiple Report
                            </fo:inline>
                            <fo:leader/>
                        </xsl:when>
                        <!-- Only one report in document -->
                        <xsl:otherwise>      
                            <fo:inline>
                                <xsl:value-of select="//Type"/>
                            </fo:inline>
                            <fo:leader/>
                            <fo:inline>
                                    <xsl:value-of select="//Name"/>
                            </fo:inline>    
                        </xsl:otherwise>
                        </xsl:choose>                                                                       
                    </fo:block>
                    <fo:block>
                        <fo:leader leader-length="100%" leader-pattern="rule" rule-thickness="1pt"/>
                    </fo:block>
                </fo:static-content>
                
                <fo:static-content flow-name="xsl-region-after">
                    <fo:block>
                        <fo:leader leader-length="100%" leader-pattern="rule" rule-thickness="1pt"/>
                    </fo:block>
                    <fo:block text-align-last="justify" font-size="10pt">                                                                                                 
                        <!-- Only one report in document -->
                        <xsl:if test="$isMultiReport = '0'">
                            <fo:inline>
                                <xsl:value-of select="concat(substring(//LocalTime[1],1,10),' ',substring(//LocalTime[1],12,8),' (UTC', substring(//LocalTime[1],20,6),')')"/>
                            </fo:inline>
                        </xsl:if>
                        <fo:leader/>
                        <fo:inline>
                            Page <fo:page-number/>                          
                        </fo:inline>                        
                    </fo:block>                                     
                </fo:static-content>
                                                                
                <fo:flow flow-name="xsl-region-body">
                     
                    <xsl:if test="$isMultiReport = '1'">                                                                     
                        <!-- Multiple reports in document -->
                        <!-- List of reports -->                                                                                                                                                                                                                                                                                       
                        <fo:table table-layout="fixed" width="100%">
                        <fo:table-column column-width="6cm"/>         
                        <fo:table-column column-width="12cm"/>         
                        <fo:table-column column-width="6cm"/>                                                                             
                        <fo:table-body>
                        <xsl:for-each select="//PRIMEReport">                                                                        
                            <fo:table-row>                                                                                    
                                <fo:table-cell>
                                    <fo:block line-height="14pt" font-size="8pt"><xsl:value-of select="Type"/></fo:block>
                                </fo:table-cell>
                                <fo:table-cell>
                                    <fo:block line-height="14pt" font-size="8pt"><xsl:value-of select="Name"/></fo:block>
                                </fo:table-cell>
                                <fo:table-cell>
                                    <fo:block line-height="14pt" font-size="8pt"><xsl:value-of select="concat(substring(LocalTime,1,10),' ',substring(LocalTime,12,8),' (UTC', substring(LocalTime,20,6),')')"/></fo:block>
                                </fo:table-cell>
                            </fo:table-row>
                        </xsl:for-each> 
                        </fo:table-body>                                                                                   
                        </fo:table>                                                                    
                    </xsl:if>
                    
                    <xsl:apply-templates/>
                </fo:flow>
            </fo:page-sequence>
        </fo:root>
    </xsl:template>
    <xsl:template match="Table">
        <xsl:comment> Variables used to set columns widths, depending on how many columns there are. </xsl:comment>
        <xsl:variable name="numberOfColumns" select="count(Columns/Column)"/>                                   
        <!-- <xsl:variable name="colWidth" select="3.5 - (($numberOfColumns - 1)*0.15)"/> -->
        <!-- <xsl:variable name="colWidth2" select="3.5 - (($maxNrOfColumns - 1)*0.15)"/> -->

        <fo:block space-before="1cm"/>
                
        <xsl:if test="$isMultiReport = '1'"> 
        <!-- Multiple reports in document -->
            <fo:block line-height="14pt" font-size="8pt">
               <!-- Report header -->
                <xsl:value-of select="./../../Type"/>
                <xsl:text>:   </xsl:text>
                <xsl:value-of select="./../../Name"/> 
                <xsl:text>   </xsl:text>
                <xsl:value-of select="concat(substring(../../LocalTime,1,10),' ',substring(../../LocalTime,12,8),' (UTC', substring(../../LocalTime,20,6),')')"/>                                        
            </fo:block>                                                                
        </xsl:if>
        
        <fo:table table-layout="fixed" width="100%">
            <fo:table-column column-width="3.5cm"/>
            <xsl:for-each select="Columns/Column[position()]">
               <xsl:choose>
                    <xsl:when test="$numberOfColumns > $maxNrOfColumns">                                                                    
                        <fo:table-column column-width="{$colWidth2}cm"/>
                    </xsl:when>
                    <xsl:otherwise>                                                                    
                        <fo:table-column column-width="{$colWidth}cm"/>
                    </xsl:otherwise>
                    </xsl:choose>                                                                
            </xsl:for-each>
            <fo:table-header>
                <fo:table-row>
                    <fo:table-cell background-color="#cccccc">
                        <fo:block font-weight="bold" text-align="center" vertical-align="middle" border-width="1pt" border-color="black" background-color="#cccccc">
                        
                        </fo:block>
                    </fo:table-cell>
                    <xsl:for-each select="Columns/Column[position()]">                                                                                                
                        <fo:table-cell>
                            <fo:block font-size="8pt" font-weight="bold" text-align="right" vertical-align="middle" border-width="1pt" border-color="black" background-color="#cccccc">                                                                                                                    
                                                                                                                    <xsl:if test="position() &lt;= $maxNrOfColumns">
                                                                                                                        <xsl:value-of select="Label"/>
                                                                                                                    </xsl:if>                                                                                                                    
                            </fo:block>
                        </fo:table-cell>
                    </xsl:for-each>
                </fo:table-row>
            </fo:table-header>
            <fo:table-body>
                <xsl:apply-templates select="Rows/Row">
                    <xsl:with-param name="treeDepth" select="1"/>
                </xsl:apply-templates>
            </fo:table-body>
        </fo:table>
    </xsl:template>
    <xsl:template match="Row">                      
        <xsl:param name="treeDepth"/>
        <xsl:if test="$treeDepth='1'">
            <fo:table-row>
                <fo:table-cell>
                    <fo:block>
                         <fo:leader/>
                    </fo:block>
                </fo:table-cell>    
            </fo:table-row>
        </xsl:if>
        <fo:table-row>
            <xsl:if test="$treeDepth='1'">
                <xsl:attribute name="font-weight">bold</xsl:attribute>
            </xsl:if>
            <fo:table-cell>
                <xsl:attribute name="padding-left"><xsl:value-of select="($treeDepth - 1) * 6"/>pt
                </xsl:attribute>
                <fo:block font-weight="bold" border-right-width="0.5pt" text-align="left" vertical-align="middle" font-size="8pt">
                    <xsl:value-of select="Label"/>
                </fo:block>
            </fo:table-cell>
            <xsl:for-each select="Cells/Cell">
                                                        <xsl:if test="position() &lt;= $maxNrOfColumns">
                <fo:table-cell>
                    <fo:block border-right-width="0.5pt" text-align="right" vertical-align="middle" font-size="8pt">
                        <xsl:if test="$treeDepth='1'">
                            <xsl:attribute name="font-weight">bold</xsl:attribute>
                        </xsl:if>
                        <xsl:value-of select="FormattedData"/>
                    </fo:block>
                </fo:table-cell>
                                                        </xsl:if>
            </xsl:for-each>
        </fo:table-row>
        <xsl:apply-templates select="Rows/Row">
            <xsl:with-param name="treeDepth" select="$treeDepth + 1"/>
        </xsl:apply-templates>
    </xsl:template>
</xsl:stylesheet>

...

  FTABTemplate
<?xml version='1.0'?>
<!DOCTYPE xsl:stylesheet [
  <!ENTITY tab "<xsl:text>&#9;</xsl:text>">
  <!ENTITY lf "<xsl:text>&#10;</xsl:text>">
]>

<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:output method="text" encoding="UTF-8"/>
<xsl:strip-space elements="*"/>

<xsl:template match="/">
        
<!-- Reports -->
    <xsl:for-each select="//PRIMEReport">                         
            Type:&tab;<xsl:value-of select="current()/Type"/>&lf;
            Name:&tab;<xsl:value-of select="current()/Name"/>&lf;
            Time:&tab;<xsl:value-of select="concat(substring(LocalTime,1,10),' ',substring(LocalTime,12,8),' (UTC', substring(LocalTime,20,6),')')"/>&lf;
            <xsl:apply-templates select="current()/ReportContents"/>             
     </xsl:for-each>     
</xsl:template>

<xsl:template match="Table">
Table name:&tab;<xsl:value-of select="Name"/>&lf;
&tab;
<xsl:for-each select="Columns/Column">
    <xsl:value-of select="Label"/>&tab;
</xsl:for-each>
&lf;
<xsl:apply-templates select="Rows/Row"/>
</xsl:template>

<xsl:template match="Row">
    <xsl:value-of select="Label"/>&tab;
    <xsl:for-each select="Cells/Cell">
        <xsl:call-template name="CellData" />&tab;
    </xsl:for-each>
    &lf;
    <xsl:apply-templates select="Rows/Row"/>
</xsl:template>

<xsl:template name="CellData">
        <xsl:choose>
            <xsl:when test="FormattedData">
                <xsl:value-of select="FormattedData"/>
            </xsl:when>
            <xsl:when test="RawData">
                <xsl:value-of select="RawData"/>
            </xsl:when>
            <xsl:when test="DefaultData">
                <xsl:value-of select="DefaultData"/>
            </xsl:when>
            <xsl:otherwise>
            <xsl:message terminate="yes"><xsl:text>No dataformat turned on</xsl:text></xsl:message>
            </xsl:otherwise>
        </xsl:choose>
</xsl:template>

</xsl:stylesheet>

...

  Generate_PDF
<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:xalan="http://xml.apache.org/xalan" exclude-result-prefixes="xalan">

    <!-- If there are more columns than this value they will not be included in the output document -->
    <xsl:output encoding="US-ASCII"/>
    <xsl:variable name="maxNrOfColumns" select="100"/>
    <xsl:variable name="isMultiReport" select="count(/MultiReport)"/>

    <xsl:template match="/">
        <fo:root>
            <fo:layout-master-set>
                <!-- numberOfColumns ini harus di dalem xsl:template, entah itu match="Table" ataupun match="/" -->
                <xsl:variable name="numberOfColumns" select="count(//Column)"/>
                <xsl:choose>
                <!-- KALO JUMLAH KOLOMNYA KURANG DARI ATAU SAMA DENGAN 10 -->
                <xsl:when test="$numberOfColumns &lt;= 10">
                    <fo:simple-page-master margin-right="1cm" margin-left="1cm" margin-bottom="1.3cm" margin-top="1cm" page-width="30cm" page-height="29.7cm" master-name="first">
                    <fo:region-body margin-top="1.5cm" margin-bottom="1.5cm"/>
                    <fo:region-before extent="2cm"/>
                    <fo:region-after extent="1.5cm"/>
                </fo:simple-page-master>
                </xsl:when>
                <!-- KALO JUMLAH KOLOMNYA KURANG DARI ATAU SAMA DENGAN 20 -->
                <xsl:when test="$numberOfColumns &lt;= 20">
                    <fo:simple-page-master margin-right="1cm" margin-left="1cm" margin-bottom="1.3cm" margin-top="1cm" page-width="60cm" page-height="29.7cm" master-name="first">
                    <fo:region-body margin-top="1.5cm" margin-bottom="1.5cm"/>
                    <fo:region-before extent="2cm"/>
                    <fo:region-after extent="1.5cm"/>
                </fo:simple-page-master>
                </xsl:when>
                <!-- KALO JUMLAH KOLOMNYA LEBIH DARI 20 -->
                <xsl:otherwise>
                    <fo:simple-page-master margin-right="1cm" margin-left="1cm" margin-bottom="1.3cm" margin-top="1cm" page-width="125cm" page-height="29.7cm" master-name="first">
                    <fo:region-body margin-top="1.5cm" margin-bottom="1.5cm"/>
                    <fo:region-before extent="2cm"/>
                    <fo:region-after extent="1.5cm"/>
                </fo:simple-page-master>
                </xsl:otherwise>
               </xsl:choose>

            </fo:layout-master-set>
            <fo:page-sequence master-reference="first">
                <fo:static-content flow-name="xsl-region-before">
                    <fo:block text-align-last="justify" font-size="10pt">
                        <xsl:choose>
                        <!-- Multiple reports in document -->
                        <xsl:when test="$isMultiReport = '1'">
                            <fo:inline>
                                    Multiple Report
                            </fo:inline>
                            <fo:leader/>
                        </xsl:when>
                        <!-- Only one report in document -->
                        <xsl:otherwise>
                        <fo:inline>
                            <xsl:value-of select="//Type"/>
                                </fo:inline>
                                <fo:leader/>
                                <fo:inline>
                                        <xsl:value-of select="//Name"/>
                                </fo:inline>
                        </xsl:otherwise>
                        </xsl:choose>
                    </fo:block>
                    <fo:block>
                        <fo:leader leader-length="100%" leader-pattern="rule" rule-thickness="1pt"/>
                    </fo:block>
                </fo:static-content>

                <fo:static-content flow-name="xsl-region-after">
                    <fo:block>
                        <fo:leader leader-length="100%" leader-pattern="rule" rule-thickness="1pt"/>
                    </fo:block>
                    <fo:block text-align-last="justify" font-size="10pt">
                        <!-- Only one report in document -->
                        <xsl:if test="$isMultiReport = '0'">
                            <fo:inline>
                                    <xsl:value-of select="concat(substring(//LocalTime[1],1,10),' ',substring(//LocalTime[1],12,8),' (UTC', substring(//LocalTime[1],20,6),')')"/>
                            </fo:inline>
                        </xsl:if>
                        <fo:leader/>
                        <fo:inline>
                            Page <fo:page-number/>
                        </fo:inline>
                    </fo:block>
                </fo:static-content>

                <fo:flow flow-name="xsl-region-body">

                    <xsl:if test="$isMultiReport = '1'">
                        <!-- Multiple reports in document -->
                        <!-- List of reports -->
                        <fo:table margin-bottom="50px" text-align="center" display-align="center" inline-progression-dimension="auto" table-layout="auto">
                        <fo:table-body>
                        <xsl:for-each select="//PRIMEReport">
                            <fo:table-row>
                                <fo:table-cell>
                                    <fo:block line-height="14pt" font-size="8pt"><xsl:value-of select="Type"/></fo:block>
                                </fo:table-cell>
                                <fo:table-cell>
                                    <fo:block line-height="14pt" font-size="8pt"><xsl:value-of select="Name"/></fo:block>
                                </fo:table-cell>
                                <fo:table-cell>
                                    <fo:block line-height="14pt" font-size="8pt"><xsl:value-of select="concat(substring(LocalTime,1,10),' ',substring(LocalTime,12,8),' (UTC', substring(LocalTime,20,6),')')"/></fo:block>
                                </fo:table-cell>
                            </fo:table-row>
                        </xsl:for-each>
                        </fo:table-body>
                        </fo:table>
                    </xsl:if>

                    <xsl:apply-templates/>
                </fo:flow>
            </fo:page-sequence>
        </fo:root>
    </xsl:template>
    <xsl:template match="Table">

        <xsl:comment> Variables used to set columns widths, depending on how many columns there are. </xsl:comment>
        <fo:block space-before="1cm"/>

        <xsl:if test="$isMultiReport = '1'">
        <!-- Multiple reports in document -->
            <fo:block line-height="14pt" font-size="8pt">
               <!-- Report header -->
                <xsl:value-of select="./../../Type"/>
                <xsl:text>:   </xsl:text>
                <xsl:value-of select="./../../Name"/>
                <xsl:text>   </xsl:text>
                <xsl:value-of select="concat(substring(../../LocalTime,1,10),' ',substring(../../LocalTime,12,8),' (UTC', substring(../../LocalTime,20,6),')')"/>
            </fo:block>
        </xsl:if>

        <fo:table margin-bottom="50px" text-align="center" display-align="center" inline-progression-dimension="auto" table-layout="auto">
            <fo:table-header>
                <fo:table-row>
                    <fo:table-cell background-color="#cccccc">
                        <fo:block font-weight="bold" text-align="left" vertical-align="middle" border-width="1pt" border-color="black" background-color="#cccccc">

                        </fo:block>
                    </fo:table-cell>
                    <xsl:for-each select="Columns/Column[position()]">
                        <fo:table-cell>
                            <fo:block font-size="6pt" font-weight="bold" text-align="left" vertical-align="middle" border-width="1pt" border-color="black" background-color="#cccccc">
                                <xsl:if test="position() &lt;= $maxNrOfColumns">
                                    <xsl:value-of select="Label"/>
                                </xsl:if>
                            </fo:block>
                        </fo:table-cell>
                    </xsl:for-each>
                </fo:table-row>
            </fo:table-header>
            <fo:table-body>
                <xsl:apply-templates select="Rows/Row">
                    <xsl:with-param name="treeDepth" select="1"/>
                </xsl:apply-templates>
            </fo:table-body>
        </fo:table>
    </xsl:template>
    <xsl:template match="Row">
        <xsl:param name="treeDepth"/>
        <xsl:if test="$treeDepth='1'">
            <fo:table-row>
                <fo:table-cell>
                    <fo:block>
                         <fo:leader/>
                    </fo:block>
                </fo:table-cell>
            </fo:table-row>
        </xsl:if>
        <fo:table-row>
            <xsl:if test="$treeDepth='1'">
                <xsl:attribute name="font-weight">bold</xsl:attribute>
            </xsl:if>
            <fo:table-cell>
                <xsl:attribute name="padding-left"><xsl:value-of select="($treeDepth - 1) * 6"/>pt
                </xsl:attribute>
                <fo:block font-weight="bold" border-right-width="0.5pt" text-align="left" vertical-align="middle" font-size="6pt">
                    <xsl:value-of select="Label"/>
                </fo:block>
            </fo:table-cell>
            <xsl:for-each select="Cells/Cell">
                <xsl:if test="position() &lt;= $maxNrOfColumns">
                    <fo:table-cell>
                            <fo:block border-right-width="0.5pt" text-align="left" vertical-align="middle" font-size="6pt">
                                    <xsl:if test="$treeDepth='1'">
                                            <xsl:attribute name="font-weight">bold</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="FormattedData"/>
                            </fo:block>
                    </fo:table-cell>
                </xsl:if>
            </xsl:for-each>
        </fo:table-row>
        <xsl:apply-templates select="Rows/Row">
            <xsl:with-param name="treeDepth" select="$treeDepth + 1"/>
        </xsl:apply-templates>
    </xsl:template>
</xsl:stylesheet>

...

  NFTABTemplate
<?xml version='1.0'?>
<!DOCTYPE xsl:stylesheet [
  <!ENTITY tab "<xsl:text>&#9;</xsl:text>">
  <!ENTITY lf "<xsl:text>&#10;</xsl:text>">
]>

<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:output method="text" encoding="UTF-8"/>
<xsl:strip-space elements="*"/>

<xsl:template match="/">
        
<!-- Reports -->
    <xsl:for-each select="//PRIMEReport">                         
            Type:&tab;<xsl:value-of select="current()/Type"/>&lf;
            Name:&tab;<xsl:value-of select="current()/Name"/>&lf;
            Time:&tab;<xsl:value-of select="concat(substring(LocalTime,1,10),' ',substring(LocalTime,12,8),' (UTC', substring(LocalTime,20,6),')')"/>&lf;
            <xsl:apply-templates select="current()/ReportContents"/>             
     </xsl:for-each>     
</xsl:template>

<xsl:template match="Table">
Table name:&tab;<xsl:value-of select="Name"/>&lf;
&tab;
<xsl:for-each select="Columns/Column">
    <xsl:value-of select="Label"/>&tab;
</xsl:for-each>
&lf;
<xsl:apply-templates select="Rows/Row"/>
</xsl:template>

<xsl:template match="Row">
    <xsl:value-of select="Label"/>&tab;
    <xsl:for-each select="Cells/Cell">
        <xsl:call-template name="CellData" />&tab;
    </xsl:for-each>
    &lf;
    <xsl:apply-templates select="Rows/Row"/>
</xsl:template>

<xsl:template name="CellData">
        <xsl:choose>
            <xsl:when test="FormattedData">
                <xsl:value-of select="FormattedData"/>
            </xsl:when>
            <xsl:when test="RawData">
                <xsl:value-of select="RawData"/>
            </xsl:when>
            <xsl:when test="DefaultData">
                <xsl:value-of select="DefaultData"/>
            </xsl:when>
            <xsl:otherwise>
            <xsl:message terminate="yes"><xsl:text>No dataformat turned on</xsl:text></xsl:message>
            </xsl:otherwise>
        </xsl:choose>
</xsl:template>

</xsl:stylesheet>

...

}

