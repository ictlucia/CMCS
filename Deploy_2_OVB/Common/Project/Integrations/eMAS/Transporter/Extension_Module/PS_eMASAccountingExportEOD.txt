#
# Front Arena exported extension module.
# source          ""
# timestamp (utc) "2024-09-02 10:31:10.2"
# ***** DO NOT EDIT! *****
#
name        "PS_eMASAccountingExportEOD"
description "$Id$"

groups {
}

decls[FParameters] {
}

clx FObject [FParameters] {
  AccountingExportFTPParams =
  destination_dir=BMGPLI
  host=10.243.136.172
  password=0x4wrXCtcK4wrHCoMKpwp5i
  port=21
  user=FTPNTCS


  AccountingExportParams =
  bridge_account_list=['19511633']
  default_Ref_no=99120
  logFilename=eMas_AccntnExport_LOG_{}.txt
  outputFilename=NTCS01.txt
  position_account_list=['19811105']


}

decls[FPythonCode] {
}

clx FObject [FPythonCode] {
  eMAS_AccountingExportEOD
import acm, ael, traceback, os
import datetime,InterfaceUtils
import ParametersReader, FRunScriptGUI, FLogger
from InterfaceUtils import ExecuteQueryAndGetResults
import JournalInformation
import FFTPOperations
import EncoderUtils
import PS_FTPUtils
import ast

EMAS_FTP_KEY = 'RUVB7319'

accntng_export_params = ParametersReader.get_params('AccountingExportParams')
accntng_export_ftp_params = ParametersReader.get_params('AccountingExportFTPParams')
log_file_name = accntng_export_params['logFilename'].format(acm.Time.DateToday().replace('-', ''))
ref_no = accntng_export_params['default_Ref_no']
bridge_account_list = ast.literal_eval(accntng_export_params['bridge_account_list'])
position_account_list = ast.literal_eval(accntng_export_params['position_account_list'])

destination_dir = accntng_export_ftp_params['destination_dir']
host = accntng_export_ftp_params['host']
port = accntng_export_ftp_params['port']
user = accntng_export_ftp_params['user']
password = accntng_export_ftp_params['password']

def initialize_logging(params, logfile_name, app_name):
    logger = None
    try:
        logFolder = params['log_folder']
        logfolderString = logFolder.SelectedDirectory().AsString()
        logfile = os.path.join(logfolderString, logfile_name)
        if logfile == '':
            logfile = None

        logLevel = params['log_level']
        level = InterfaceUtils.LogLevelNameToNumber(logLevel)
        logger = FLogger.FLogger(level=level,
                                 name=app_name,
                                 logToPrime=True,
                                 logToFileAtSpecifiedPath=logfile,
                                 logToConsole=False)
    except Exception as err:
        print('Error in initializing logger {}'.format(err))
        print(traceback.format_exc())
    return logger


class AccountingExport(FRunScriptGUI.AelVariablesHandler):

    def __init__(self, accntng_export_params):

        logLevels = [FLogger.FLogger.INFO, FLogger.FLogger.ERROR, FLogger.FLogger.WARNING, FLogger.FLogger.DEBUG]

        folderPicker = FRunScriptGUI.DirectorySelection()
        query = [query.Name() for query in acm.FStoredASQLQuery.Select("subType='FJournal'")]
        query.sort()

        gui_vars = [
            ['EODJournals', 'Query Folder', 'string', query, 'PS_QF_eMasJournals', 1, 0,
             'EOD today', None, 1],
            ['branch_id', 'Branch Id', 'string', None, ref_no, 1, 0, 'Branch Id', None, 1],    
            ['outputFolder', 'Folder Path_Output', folderPicker, None, folderPicker, 1, 1,
             'The file path where summary result will be generated.', None, 1],
            ['outputFileEOD', 'Output File Name', 'string', None, accntng_export_params['outputFilename'], 0, 0,'Name of output file', None, 1],
            ['archiveFolder', 'Archive Path_Output', folderPicker, None, folderPicker, 1, 1,
             'Archive path where output file will be moved after successful ftp copy.', None, 1],
            ['failedArchiveFolder', 'Failed Archive Path_Output', folderPicker, None, folderPicker, 1, 1,
             'Archive path where output file will be moved if ftp copy is failed.', None, 1],
            ['logToConsole', 'Log to console_Logging', 'int', [1, 0], 1, 1, 0,
             'Whether logging should be done in the Log Console or not.'],
            ['ftp_dest_dir', 'Destination folder_FTP', 'string', None, destination_dir, 0, 0,
             'The destination folder at FTP server.', None, 1],
            ['ftp_host', 'Host_FTP', 'string', None, host, 0, 0, 'FTP host.', None, 1],
            ['ftp_port', 'Port_FTP', 'string', None, port, 0, 0, 'FTP port.', None, 1],
            ['ftp_user', 'User_FTP', 'string', None, user, 0, 0, 'FTP user.', None, 1],
            ['ftp_password', 'Password_FTP', 'string', None, password, 0, 0, 'FTP password.', None, 1],
            ['log_folder', 'Log folder_Logging', folderPicker, None, folderPicker, 0, 1,
             'Select where to store the log file',
             0, None],
            ['log_level', 'Log level_Logging', 'string', logLevels, FLogger.FLogger.DEBUG, 1, 0]

        ]

        self._logger = None
        self.file_to_generate = accntng_export_params['outputFilename']

        FRunScriptGUI.AelVariablesHandler.__init__(self, gui_vars)

    def upload_files_to_server(self, source_dir):
        """ This function uploads the file to FTP"""
        pwd = EncoderUtils.get_decrypted_password(password, EMAS_FTP_KEY)
        connstr = '{}:{}:{}:{}'.format(host, port, user, pwd)
        ret_val = PS_FTPUtils.write_to_ftp_ASCII_mode(source_dir, connstr, destination_dir)
        return ret_val
        
    def move_file_to_archive(self, source_file, archive_folder):
        try:
            date_time_now = datetime.datetime.now()
            date_today = date_time_now.strftime('%Y%m%d')
            time_now = date_time_now.strftime('%H%M%S%f')[:7]
            archive_filename = '{}_{}_{}'.format(self.file_to_generate,date_today, time_now)
            archive_file_path = os.path.join(archive_folder, archive_filename)
            os.rename(source_file, archive_file_path)
        except Exception as err:
            self._logger.ELOG(str(err))
            self._logger.ELOG(f'Failed to move file: {source_file}. Manual handling required.') 

    def get_accounting_export(self, params):

        self._logger.LOG('Start accounting export eod task')
        outputfile = params['outputFileEOD']
        branch_id = params['branch_id']
        if len(outputfile.strip()) > 0:
            self._logger.LOG(f"Output file name : {outputfile}")
            self.file_to_generate = outputfile
        output_folder = params['outputFolder'].SelectedDirectory().AsString()
        archive_folder = params['archiveFolder'].SelectedDirectory().AsString()
        failed_archive_folder = params['failedArchiveFolder'].SelectedDirectory().AsString()
        
        query_folder = params['EODJournals']
        journals = ExecuteQueryAndGetResults(query_folder)
        full_file_path = os.path.join(output_folder, self.file_to_generate)
        journal_entries = list()
        trade_list = list()

        for jr in journals:
            journal_info = JournalInformation.JournalInfo(jr, branch_id, bridge_account_list, position_account_list)
            journal_entry = '{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}'.format(branch_id,
                                                                              journal_info.journal_no(),
                                                                              journal_info.processing_code(),
                                                                              journal_info.JournalCurrency(),
                                                                              journal_info.original_currency(),
                                                                              journal_info.DebitCredit(),
                                                                              journal_info.ProcessDate(),
                                                                              journal_info.JournalAmount(),
                                                                              journal_info.trans_descrption(),
                                                                              journal_info.reference_no(),
                                                                              journal_info.user_id(),
                                                                              journal_info.user_define(),
                                                                              journal_info.responding_branch(),
                                                                              journal_info.local_equivalent(),
                                                                              journal_info.transaction_rate(),
                                                                              journal_info.identifier_source(),
                                                                              journal_info.original_trans_currency(),
                                                                              journal_info.original_trans_amt(),
                                                                              journal_info.product_code(),
                                                                              journal_info.internal_account())

            if jr.LinkedTrade():
                trade_list.append(jr.LinkedTrade())

            journal_entries.append(journal_entry)
            journal_entries.append("\n")

        if journal_entries:
            journal_entries.pop(-1)
        with open(full_file_path, 'w') as fp:
            fp.writelines(journal_entries)

        self._logger.LOG('Created file {} for accounting export eod task.'.format(full_file_path))

        if self.upload_files_to_server(full_file_path):
            self._logger.LOG('Uploaded file {} to FTP.'.format(full_file_path))
            for tr in trade_list:
                self.set_add_info_value(tr, True)
            self.move_file_to_archive(full_file_path, archive_folder)
            self._logger.LOG('Uploaded file {} to FTP.'.format(full_file_path))
        else:
            self._logger.LOG('Error uploading file {} to FTP.'.format(full_file_path))
            for tr in trade_list:
                self.set_add_info_value(tr, False)
            self.move_file_to_archive(full_file_path, failed_archive_folder)

        self._logger.LOG('Completed accounting export eod task')

    def set_logger(self, logger):
        self._logger = logger

    def set_add_info_value(self, trade, value):
        try:
            spec = acm.FAdditionalInfoSpec['AccountingExportEOD']
            if not spec:
                self._logger.ELOG('Additional info AccountingExportEOD not present on FTrade')
            else:
                trade.AdditionalInfo().AccountingExportEOD(value)
                trade.Commit()
        except Exception as err:
            self._logger.ELOG(str(err))
            self._logger.ELOG(f'Trade {trade.Oid()} : Add info could not be set')


ael_gui_parameters = {'windowCaption': "eMAS Accounting Export EOD"}

ael_variables = AccountingExport(accntng_export_params)
ael_variables.LoadDefaultValues(__name__)
app_name = 'eMASAccountingExportEOD'


def updateFTPParamFromUI(params):
    #Update FTP parameters if specified on UI
    global destination_dir
    global host
    global port
    global user
    global password
    ftp_dest_dir = params['ftp_dest_dir']
    if len(ftp_dest_dir.strip()) > 0:
        destination_dir = ftp_dest_dir
    ftp_host = params['ftp_host']
    if len(ftp_host.strip()) > 0:
        host = ftp_host
    ftp_port = params['ftp_port']
    if len(ftp_port.strip()) > 0:
        port = ftp_port
    ftp_user = params['ftp_user']
    if len(ftp_user.strip()) > 0:
        user = ftp_user
    ftp_password = params['ftp_password']
    if len(ftp_password.strip()) > 0:
        password = ftp_password


def ael_main(params):
    acntg_export = None
    try:
        acntg_export = initialize_logging(params, log_file_name, app_name)
        if acntg_export:
            acntg_export.LOG('Execution started.')
            ael_variables.set_logger(acntg_export)
            #Update FTP parameters if specified on UI
            updateFTPParamFromUI(params)
            ael_variables.get_accounting_export(params)

    except Exception as err:
        if acntg_export is not None:
            acntg_export.ELOG(str(err))
        print(traceback.format_exc())
        print('Error in ael main. {}'.format(err))


...

  JournalInformation

from datetime import datetime
import ParametersReader, InterfaceSettingUtils

import acm


context = acm.GetDefaultContext()

sheet_type = 'FJournalSheet'

g_calc_space = acm.Calculations().CreateCalculationSpace(context, sheet_type)

class JournalInfo:

    def __init__(self,journal, branch_id, acc_list, pos_acc_list):
        self.journal  =  journal
        self.ref_no = branch_id
        self.bridge_acc_list = acc_list
        self.position_account_list = pos_acc_list 

    def get_column_formatting(self, col_val, length, val='L'):
        if val == 'L':
            col_value = str(col_val).rjust(length,' ')
        elif val == 'T':
            col_value = str(col_val).ljust(length,' ')
        if len(col_value) > length:
            col_value =  col_value[:length]
        return col_value

    def branch_id(self):
        return self.ref_no
        
    def journal_no(self):
        t_account_no = ''
        settlement = self.journal.Settlement() if self.journal.Settlement() else None
        
        if self.journal.ChartOfAccount():
            if self.journal.ChartOfAccount().TAccount():
                account_no = self.journal.ChartOfAccount().TAccount().Number()
                if account_no is not None:
                    t_account_no = str(account_no)

        index = t_account_no.find('_')
        t_account_no = t_account_no[:index] if index != -1 else t_account_no
        '''
        if 'Tax' in t_account_no:
            index = t_account_no.find('_')
            t_account_no = t_account_no[:index] if index != -1 else t_account_no
            
        if settlement:
            if settlement.CounterpartyAccountNetworkName() != 'RTGS':
                index = t_account_no.find('_') #stores the index of a substring or char
                t_account_no = t_account_no[:index] if index != -1 else t_account_no
        '''
        return self.get_column_formatting(t_account_no, 19)

    def processing_code(self):
        return self.get_column_formatting(' ',5)
        
        
    def JournalAmount(self):
        amount = self.journal.Amount()
        if isinstance(amount,float):
            amount = round(amount,2)
            amount = amount * 100
            amount = round(amount) # Round it again to avoid floating point residue e.g. 131.39*100 = 13138.999999999998
        return str(abs(amount)).rjust(17,'0')


    def JournalCurrency(self):
        curr = self.journal.Currency().Name()
        return self.get_column_formatting(curr, 4,'T')

    def _get_compare_currency(self):
        compare_curr = 'IDR'
        env_name = InterfaceSettingUtils.get_env_name()
        if env_name != 'HO':            
            j_book = self.journal.Book()
            if j_book:
                book_name = j_book.Name()
                if env_name in ['SG', 'SH']:
                    if book_name.endswith('_DBU'):
                        if env_name == 'SG':
                            compare_curr = 'SGD'
                        elif env_name == 'SH':
                            compare_curr = 'CNY'
                    elif book_name.endswith('_ACU'):
                        compare_curr = 'USD'
                elif env_name in ['HK', 'CI', 'DL']:
                    compare_curr = 'USD'
                
        return compare_curr
        
        
    
    def original_currency(self):
        curr = ''
        try:
            compare_curr = self._get_compare_currency()
            if self.journal.Currency().Name() != compare_curr:
                curr = self.journal.Currency().Name()
            else:            
                acc = self.journal.ChartOfAccount().TAccount()
                acc_no =  acc.Number()
                #Changes  - Condition added as per JIRA TCSTCSPBDT-437883 and TCSTCSPBDT-438642
                if (acc_no in self.bridge_acc_list) or (not (  (acc.Type() in ['Expense', 'Revenue'])or(acc_no in self.position_account_list) ) ):
                    curr = ''
                else:
                    reval_curr = g_calc_space.CalculateValue(self.journal, "Accounting FX Revaluation Currency")
                    
                    if "<class 'FCurrency'>" == str(type(reval_curr)):
                        reval_curr = reval_curr.Name()
                        
                    if reval_curr:
                        curr = reval_curr
        except Exception as e:
            print(f'Error in original_currency {e}')
        return self.get_column_formatting(curr,4,'T')
        
        
    def DebitCredit(self):
        debitCredit = self.journal.DebitOrCredit()
        if (debitCredit == 'Debit'):
            return 'D'
        else:
            return 'C'
        
        
    def ProcessDate(self):
        try:
            pd = datetime.strptime(self.journal.ProcessDate(), "%Y-%m-%d").strftime("%d%m%y")
        except Exception as err:
            pd = ''
        return pd


    def trans_descrption(self):
        descrptn = ''
        if self.journal.AccountingInstruction():
            descrptn = 'FAT_' + self.journal.AccountingInstruction().Name() 
        return self.get_column_formatting(descrptn, 40)


    def reference_no(self):
        journalTrade = self.journal.LinkedTrade()
        if not journalTrade:
            if self.journal.JournalInformation().Trade():
                journalTrade = self.journal.JournalInformation().Trade()
            elif self.journal.JournalInformation().ContractTrade():
                journalTrade = self.journal.JournalInformation().Trade()
        
        journal_id = self.journal.Oid()
        ref = ''
        if journalTrade:
            ref = str(self.ref_no) + '02' + str(journalTrade.Oid())
        elif self.journal.Settlement():
            settlement = self.journal.Settlement()
            if (settlement.Type()== 'Stand Alone Payment') and (settlement.Counterparty().Name() in ['BPS','TPS','EXIMBill']):
                ref = settlement.Text()
            else:
                ref = str(self.ref_no) + '01'+ str(settlement.Oid())
        else:
            ref = str(self.ref_no) + '03' + str(journal_id)
                
        return self.get_column_formatting(ref,20)
        
    def user_id(self):
        return self.get_column_formatting('NTCS', 10,'T')
        
    def user_define(self):
        return ' '
        
    def responding_branch(self):
        return self.get_column_formatting(' ', 5)
    
    def local_equivalent(self):
        return self.get_column_formatting(' ',17)
        
    def transaction_rate(self):
        return self.get_column_formatting(' ',13)
        
    def identifier_source(self):
        return 'h'
    
    def original_trans_currency(self):
        curr = ''
        if self.journal.Currency().Name() != 'IDR':
            curr = self.journal.Currency().Name()
        return self.get_column_formatting(curr, 4,'T')
        
    def original_trans_amt(self):
        return self.get_column_formatting(' ', 17)
        
    def product_code(self):
        return self.get_column_formatting(' ', 5)
        
    def internal_account(self):
        return self.get_column_formatting(' ', 19)



...

}

