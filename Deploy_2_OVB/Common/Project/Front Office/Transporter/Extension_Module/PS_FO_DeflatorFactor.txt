#
# Front Arena exported extension module.
# source          ""
# timestamp (utc) "2023-01-20 09:46:57"
# ***** DO NOT EDIT! *****
#
name        "PS_FO_DeflatorFactor"
description "$Id$"

groups {
}

decls[FColumnDefinition] {
  "Deflator Factor" ( "sheet columns.dealsheet" "sheet columns.portfoliosheet" ) "";
  "Is Bond (?)" ( "sheet columns.dealsheet" "sheet columns.portfoliosheet" ) "";
  "Price Deflator Factor Method" ( "sheet columns.dealsheet" "sheet columns.portfoliosheet" ) "";
  "Time to Expiry (Years)" ( "sheet columns.dealsheet" "sheet columns.portfoliosheet" ) "";
}

clx FTradingSheet [FColumnDefinition] {
  Deflator Factor =
  AggregationFunction=Distinct
  Description=[Mandiri custom] Deflator Factor for securities for which the market price is not available in the illiquid instrument category, calcualted as a*ln⁡(x)+b, where x= remaining time to maturity of the bond in years. User will input component a and b, manually in instrument additional information.
  ExtensionAttribute=deflatorFactor
  Format=Price
  GroupLabel=Pricing
  LabelList=Deflator Factor;a*ln⁡(x)+b
  Name=Deflator Factor
  SoftSimulDefault=Disabled
  ValueDomain=denominatedvalue
  ValueType=Price


  Is Bond (?) =
  Description=Show "True" if the row is a bond.
  ExtensionAttribute=isBond
  Format=boolean
  GroupLabel=Instrument
  LabelList=Is Bond (?)
  Name=Is Bond (?)


  Price Deflator Factor Method =
  AggregationFunction=Distinct
  Description=[Mandiri custom] Price Deflator Factor Method. Deflator Factor valuation method for securities for which the market price is not available in the illiquid instrument category, calcualted as theoretical price - deflator factor, where the deflator factor = a*ln⁡(x)+b, and where x= remaining time to maturity of the bond in years. User will input components a and b manually in the instrument respective additional information fields.
  ExtensionAttribute=priceDeflatorFactorMethod
  Format=Price
  GroupLabel=Pricing
  LabelList=Price Deflator Factor Method
  Name=Price Deflator Factor Method
  SoftSimulDefault=Disabled
  ValueDomain=denominatedvalue
  ValueType=Price


  Time to Expiry (Years) =
  Description=The time remaining until the instrument expires, displayed in number of years.
  ExtensionAttribute=yearsToExpiryDisplay
  Format=PreciseTwoDecimalsHideNaN
  GroupLabel=Pricing
  LabelList=ExpT(Y);Time to Expiry (Years)
  Name=Time to Expiry (Years)


}

decls[FExtensionAttribute] {
}

clx FInstrumentAndTrades [FExtensionAttribute] {
  deflatorFactor = shunt(isBondOrFrn, 
  false->false, 
  true->instrument.AdditionalInfo.DeflatorFactorA * ln(yearsToExpiryDisplay) + instrument.AdditionalInfo.DeflatorFactorB);
  isBond = shunt(instrument, 
  nil->false, 
  default->value(instrument.IsKindOf("FBond")));
  isBondOrFrn = shunt(instrument, 
  nil->false, 
  default->shunt(value(instrument.IsKindOf("FBond")), 
    true->true, 
    default->value(instrument.IsKindOf("FFrn"))));
  priceDeflatorFactorMethod = shunt(isBondOrFrn, 
  false->false, 
  true->double(theoreticalPrice) - deflatorFactor);
  yearsToExpiryDisplay = daysToExpiryDisplay / 365;
}

clx FPortfolioInstrumentAndTrades [FExtensionAttribute] {
  isBond = nil;
  isBondOrFrn = nil;
}

decls[FPythonCode] {
}

clx FObject [FPythonCode] {
  PsRvmCommitDeflatorFactorMethodPrices

"""----------------------------------------------------------------------------

MODULE
    PsRvmCommitDeflatorFactorMethodPrices

DESCRIPTION
    Custom Mandiri module
    Prepared to address requirement for : Price Deflator Factor Method. 
    
    Deflator Factor valuation method for securities for which the market price is not available in the illiquid instrument category, calcualted as
    theoretical price - deflator factor, where the deflator factor = a*ln⁡(x)+b, and where x= remaining time to maturity of the bond in years. User
    will input components a and b manually in the instrument respective additional information fields.

    * script will take query folder of instruments (bonds) as an input
    | it is assumed that this calculation is applied only to insturments of type Bond
    | if above assupmtion is incorrect, then the extension attributes priceDeflatorFactorMethod and deflatorFactor must be updated
      to calculate on other insturment types 
      
    * method to update price entry tables is based on BDP module FMtMUtil

@Author: richard.milford@fisglobal.com

----------------------------------------------------------------------------"""

import FLogger
logger = FLogger.FLogger(level=1,
                    logToPrime=True,
                    logToConsole=False)
                    
log_levl_dict = {'INFO' : 1, 'DEBUG' : 2, 'WARN' : 3, 'ERROR' : 4}
"""----------------------------------------------------------------------------"""
 
import acm
import datetime

def doesPriceExist(_insOid, _insCurrOid, _priceMarketOid, _commitPriceDate):
#from FMtMUtil
    price = None
    query = ('instrument={0} and currency={1} and market={2}'.format(_insOid, _insCurrOid, _priceMarketOid))
    prices = acm.FPrice.Select(query)
    if len(prices) == 1:
        price = prices[0]
        logger.LOG('....overwrite current existing price %s for instrument "%s"' %(price.Last(),acm.FInstrument[_insOid].Name()))
    return price
    
def makeNewAcmPrice(_insOid, _insCurrOid, _priceMarketOid,_commitPriceDate):
    bit = int(1040)
    price = acm.FPrice()
    price.Instrument(_insOid)
    price.Currency(_insCurrOid)
    price.Market(_priceMarketOid)
    price.Day(_commitPriceDate)
    price.TradeTime(acm.Time().TimeNow())
    price.Bits(bit)
    
    return price

def commitSingleInstrumentDeflatorFactorMethodPrice(_instrument,_marketNameString,_commitPrice,_instrumentItemIndex):
    bit = int(1040)
    marketOid = acm.FParty[_marketNameString].Oid()
    argsList = [_instrument.Oid(),_instrument.Currency().Oid(),marketOid,acm.Time.DateToday()]
    logger.LOG('..at instrument index %s, checking if price entry exists for instrument "%s" for market %s on date %s' %(_instrumentItemIndex,acm.FInstrument[argsList[0]].Name(),_marketNameString,argsList[3]))
    priceEntry = doesPriceExist(argsList[0],argsList[1],argsList[2],argsList[3])
    if not priceEntry:
        logger.LOG('....price entry does not exist for instrument "%s" for market %s on date %s, creating new price entry' %(acm.FInstrument[argsList[0]].Name(),_marketNameString,argsList[3]))
        priceEntry = makeNewAcmPrice(argsList[0],argsList[1],argsList[2],argsList[3])
    else:
        if priceEntry.Last() != _commitPrice:
            priceEntry.Bits(bit)
            priceEntry.TradeTime(acm.Time().TimeNow())
            priceEntry.Commit()

    try:
        priceEntry.Last(_commitPrice)
        priceEntry.UpdateTime(acm.Time().TimeNow())
        priceEntry.Commit()
    except:
        logger.ELOG('Cannot commit price for instrument "%s"' %(_instrument.Name()))
        pass

def iterateInstrumentsQueryFolder(_instrumentsQF,_marketNameString):
 
    logger.LOG('RUNNING Price Deflator Factor Method price entry update for instrument count: %s' %_instrumentsQF.Size())
    itemIndex = 0
    for instrument in _instrumentsQF:
        calcSpace = acm.FCalculationSpace('FDealSheet')
        deflatorFactorMethodPrice = round(calcSpace.CalculateValue(instrument,'Price Deflator Factor Method'), 6)
        
        itemIndex = itemIndex +1
        commitSingleInstrumentDeflatorFactorMethodPrice(instrument,_marketNameString,deflatorFactorMethodPrice,itemIndex)

    logger.LOG('TERMINATING Price Deflator Factor Method price entry update script')
    
    return 0
####
#define task UI

# Tool Tips
ttinstruments = "Select the instruments for which Price Deflator Factor Method prices will be saved to markt-to-market table."
ttLogMode = 'Defines the amount of logging produced.'
ttLogToCon = 'Whether logging should be done in the Log Console or not.'
ttLogToFile = 'Defines whether logging should be done to file.'
ttLogFile = r'Name of the logfile. Could include the whole path c:\log\...'

ael_variables = [
        # [VariableName,
        #       DisplayName,
        #       Type, CandidateValues, Default,
        #       Mandatory, Multiple, Description, InputHook, Enabled]
    ('instrumentsQF','Instruments','FInstrument',None,None,1,1,ttinstruments),
    ('market','MtM Market','FParty',None,None,1,1,ttinstruments),
    ('Logmode', 'Log mode_Logging', 'string', ['INFO','DEBUG','WARN','ERROR'], 'INFO', False, False, ttLogMode),
    ('LogToConsole', 'Log to console_Logging', 'int', [1, 0], 1, False, False, ttLogToCon),
    ('LogToFile', 'Log to file_Logging', 'int', [1 ,0], 0, False, False, ttLogToFile),
    ('Logfile', 'Log file_Logging', 'string', None, __name__ + '.log', False, False, ttLogFile),]

def ael_main(params):

    if params['LogToFile'] and params['Logfile']:
        logger.Reinitialize(log_levl_dict[params['Logmode']], None, None, params['LogToConsole'], True, params['Logfile'], None, None, None)
    else:
        logger.Reinitialize(log_levl_dict[params['Logmode']], None, None, params['LogToConsole'], True, None, None, None, None)
    logger.LOG('INITIATING Price Deflator Factor Method price entry update script')
    iterateInstrumentsQueryFolder(params['instrumentsQF'],params['market'][0].Name())

...

}

