#
# Front Arena exported extension module.
# source          ""
# timestamp (utc) "2024-09-13 04:10:04.4"
# ***** DO NOT EDIT! *****
#
name        "PS_NOP"
description ""

groups {
}

decls[FColumnDefinition] {
  "Final NOP Portfolio (Notional)" ( "sheet columns.portfoliosheet" ) "";
  "Final NOP Portfolio(old)" ( "sheet columns.portfoliosheet" ) "";
  "Final NOP Portfolio(PV)" ( "sheet columns.portfoliosheet" ) "";
  "Final NOP USD" ( "sheet columns" ) "";
  "NOPExclusionCurrency" ( "sheet columns.portfoliosheet" ) "";
}

clx FTradingSheet [FColumnDefinition] {
  Final NOP Portfolio (Notional) =
  BuildForCashRows=True
  Description=Final NOP after aggregating long and short positions at portfolio level
  ExtensionAttribute=finalNOP2
  Format=Imprecise
  GroupLabel=NOP
  InheritsFrom=Portfolio Profit and Loss Base
  LabelList=Final NOP Portfolio(Notional);Net Open Position Portfolio(Notional)
  Name=Final NOP Portfolio(Notional)
  Parameters=NOPExclusionCurrencyParam;PortfolioProfitLossStartDate;PortfolioProfitLossStartDateCustom;PortfolioProfitLossEndDate;PortfolioProfitLossEndDateCustom;PosCurrChoice;AggCurrChoice;FixedCurr;


  Final NOP Portfolio(old) =
  BuildForCashRows=True
  Description=Final NOP after aggregating long and short positions at portfolio level
  ExtensionAttribute=finalNOP3
  Format=Imprecise
  GroupLabel=NOP
  InheritsFrom=Portfolio Profit and Loss Base
  LabelList=Final NOP Portfolio(old);Net Open Position Portfolio (old)
  Name=Final NOP Portfolio (old)
  Parameters=NOPExclusionCurrencyParam;PortfolioProfitLossStartDate;PortfolioProfitLossStartDateCustom;PortfolioProfitLossEndDate;PortfolioProfitLossEndDateCustom;PosCurrChoice;AggCurrChoice;FixedCurr;


  Final NOP Portfolio(PV) =
  BuildForCashRows=True
  Description=Final NOP after aggregating long and short positions at portfolio level
  ExtensionAttribute=finalNOP1
  Format=Imprecise
  GroupLabel=NOP
  InheritsFrom=Portfolio Profit and Loss Base
  LabelList=Final NOP Portfolio(PV);Net Open Position Portfolio (PV)
  Name=Final NOP Portfolio (PV)
  Parameters=NOPExclusionCurrencyParam;PortfolioProfitLossStartDate;PortfolioProfitLossStartDateCustom;PortfolioProfitLossEndDate;PortfolioProfitLossEndDateCustom;PosCurrChoice;AggCurrChoice;FixedCurr;


  Final NOP USD =
  BuildForCashRows=True
  Description=Final NOP in USD after aggregating long and short positions
  ExtensionAttribute=fxNOPLong3
  Format=Imprecise
  GroupLabel=NOP
  LabelList=Final NOP USD;Net Open Position (USD)
  Name=Final NOP USD


  NOPExclusionCurrency =
  Description=Currency to exclude when calculating NOP.
  ExtensionAttribute=exclusionCurrency
  LabelList=NOP Exclusion Currency
  Name=NOP Exclusion Currency


}

decls[FColumnParameterDefinition] {
}

clx FObject [FColumnParameterDefinition] {
  NOPExclusionCurrencyParam =
  ColumnId=NOPExclusionCurrency
  Domain=FCurrency
  GroupLabel=NOP


}

decls[FCustomFunction] {
}

clx FObject [FCustomFunction] {
  EnsureCollection =
  Definition=ensureCollection(FObject obj): FCollection
  Function=CustomFunctions.EnsureCollection


}

decls[FExtensionAttribute] {
}

clx FAssetMortgageBackedSecurity [FExtensionAttribute] {
  nopOtherInstype1 = singleInstrumentGenerator :* "bondMtMPortfolioType1";
  nopOtherInstype2 = singleInstrumentGenerator :* "mbsOutstandingNotional2";
  nopOtherInstype3 = singleInstrumentGenerator :* "endNominalEnd";
}

clx FBasketRepo [FExtensionAttribute] {
  nopOtherInstype1 = singleInstrumentGenerator :* "riskPositionOrNil";
}

clx FBill [FExtensionAttribute] {
  nopOtherInstype1 = singleInstrumentGenerator :* "bondMtMPortfolioType1";
  nopOtherInstype2 = singleInstrumentGenerator :* "bondMtMPortfolioType2";
  nopOtherInstype3 = singleInstrumentGenerator :* "riskPositionOrNil";
}

clx FBond [FExtensionAttribute] {
  nopOtherInstype1 = singleInstrumentGenerator :* "bondMtMPortfolioType1";
  nopOtherInstype2 = singleInstrumentGenerator :* "bondMtMPortfolioType2";
  nopOtherInstype3 = singleInstrumentGenerator :* "riskPositionOrNil";
}

clx FCurrencySwap [FExtensionAttribute] {
  nopOtherInstype1 = singleInstrumentGenerator :* "markToMarketPeriodValue";
  nopOtherInstype2 = singleInstrumentGenerator :* "markToMarketPeriodValue";
  nopOtherInstype3 = singleInstrumentGenerator :* "currSwapNominal3Final";
}

clx FDealPackageInstrumentAndTrades [FExtensionAttribute] {
  fxNOP1 = sumOf(flattenAndRemoveNil(liveInstruments :* "fxNOP1" [positionObject, theoreticalValueCurrencies]));
  fxNOP2 = sumOf(flattenAndRemoveNil(liveInstruments :* "fxNOP2" [positionObject, theoreticalValueCurrencies]));
  fxNOP3 = sumOf(flattenAndRemoveNil(liveInstruments :* "fxNOP3" [positionObject, theoreticalValueCurrencies]));
  nopOtherInstype1 = openInstruments :* "flattenAndRemoveNil(nopOtherInstype1)" [positionObject];
}

clx FDeposit [FExtensionAttribute] {
  mmldAndFilter = simpleAndQuery("FTrade", ["Instrument.InsType", "OptKey3"], , ["Deposit", "SP"]);
  mmldOrFilter = simpleOrQuery("FTrade", ["OptKey4", "OptKey4"], , ["MLDR", "MMLD"]);
  mmldTradeFilter = compositeAndQuery("FTrade", mmldAndFilter, mmldOrFilter);
  nopOtherInstype1 = object :* "riskPositionDisplay" [tradesInPosition = tradesInPositionExceptMMLD];
  tradesInPositionExceptMMLD = tradesInPosition.InverseFilter(mmldTradeFilter);
}

clx FFra [FExtensionAttribute] {
  nopOtherInstype1 = singleInstrumentGenerator :* "markToMarketPeriodValue";
  nopOtherInstype2 = singleInstrumentGenerator :* "markToMarketPeriodValue";
  nopOtherInstype3 = singleInstrumentGenerator :* "riskPositionOrNil";
}

clx FFrn [FExtensionAttribute] {
  nopOtherInstype1 = singleInstrumentGenerator :* "bondMtMPortfolioType1";
  nopOtherInstype2 = singleInstrumentGenerator :* "bondMtMPortfolioType2";
  nopOtherInstype3 = singleInstrumentGenerator :* "riskPositionOrNil";
}

clx FFund [FExtensionAttribute] {
  nopOtherInstype1 = singleInstrumentGenerator :* "abs(cash)";
  nopOtherInstype2 = singleInstrumentGenerator :* "markToMarketPeriodValue";
  nopOtherInstype3 = singleInstrumentGenerator :* "riskPositionOrNil";
}

clx FFuture [FExtensionAttribute] {
  futureForwardNOP1 = shunt(underlyingType, 
  "Bill"->rowObject :* "markToMarketPeriodValue", 
  "Bond"->rowObject :* "markToMarketPeriodValue", 
  "Curr"->rowObject :* "markToMarketPeriodValue", 
  default->nil);
  fxNOP2 = projectedNDFNotional;
  fxNOP3 = projectedNDFNotional;
  nopOtherInstype1 = singleInstrumentGenerator :* "futureForwardNOP1";
  nopOtherInstype2 = singleInstrumentGenerator :* "futureForwardNOP2";
  nopOtherInstype3 = singleInstrumentGenerator :* "futureForwardNOP3";
  projectedNDFNotional = select(underlyingType, 
  "Curr"->(sumOf(singleInstrumentGenerator :* "projectedRiskflowsCurrencyPair" [currenciesForVectorColumn := theoreticalValueCurrencies, useFxBaseCurrency := false])), 
  default->nil);
}

clx FFxRate [FExtensionAttribute] {
  fxNOP2 = projectedFXNotional;
  fxNOP3 = projectedFXNotional;
  nopOtherInstype1 = singleInstrumentGenerator :* "markToMarketPeriodValue";
  projectedFXNotional = sumOf(singleInstrumentGenerator :* "projectedRiskflowsCurrencyPair" [currenciesForVectorColumn := theoreticalValueCurrencies, useFxBaseCurrency := false]);
}

clx FInstrument [FExtensionAttribute] {
  futureForwardNOP1 = nil;
  fxNOP1 = nil;
  fxNOP2 = nil;
  fxNOP3 = nil;
  nopOtherInstype2 = nil;
  nopOtherInstype3 = nil;
  projectedFXNotional = nil;
  projectedFXOption = nil;
  projectedNDFNotional = nil;
  singleInstrumentGenerator = acm.Risk.CreateSingleInstrumentAndTradesBuilder(portfolio, object).GetTargetInstrumentAndTrades;
}

clx FInstrumentAndTrades [FExtensionAttribute] {
  bondNoPTrades = flattenAndRemoveNil(tradesInPosition :* "switch(includeTradeStatus, true->object, false->nil)");
  currSwapNominal3Final = sumOf(convertToCurrency(children :* "currSwapNominal3Final", profitAndLossEndFXRates, displayCurrency, filterUnit));
  greaterThanZeroDenomninatedFilter = simpleAndQuery("FDenominatedValue", ["Number"], ["GREATER"], [0]);
  lessEqualThanZeroDenomninatedFilter = simpleAndQuery("FDenominatedValue", ["Number"], ["LESS_EQUAL"], [0]);
  nopOtherInstype1 = openInstruments :* "flattenAndRemoveNil(nopOtherInstype1)" [positionObject];
  nopOtherInstype2 = openInstruments :* "flattenAndRemoveNil(nopOtherInstype2)" [positionObject];
  nopOtherInstype3 = openInstruments :* "flattenAndRemoveNil(nopOtherInstype3)" [positionObject];
  nopOtherInstypeDisplay1 = sumOf(convertToCurrency(flattenAndRemoveNil(nopOtherInstype1), profitAndLossEndFXRates, displayCurrency, filterUnit));
  nopOtherInstypeDisplay2 = sumOf(convertToCurrency(flattenAndRemoveNil(nopOtherInstype2), profitAndLossEndFXRates, displayCurrency, filterUnit));
  nopOtherInstypeDisplay3 = sumOf(convertToCurrency(flattenAndRemoveNil(nopOtherInstype3), profitAndLossEndFXRates, displayCurrency, filterUnit));
}

clx FMultiInstrumentAndTrades [FExtensionAttribute] {
  brokerFeePayment = sumOf(object :* "paymentsPerTypeEndValue" [paymentType := "Broker Fee", profitAndLossEndDate := bigDate]);
  brokerFeePaymentDisplay = convertToCurrency(brokerFeePayment, profitAndLossEndFXRates, displayCurrency, filterUnit);
  finalNOP1 = (max(abs(fxNOPLong1), abs(fxNOPShort1))) + nopOtherInstypeDisplay1;
  finalNOP2 = (max(abs(fxNOPLong2), abs(fxNOPShort2))) + nopOtherInstypeDisplay2;
  finalNOP3 = (max(abs(fxNOPLong3), abs(fxNOPShort3))) + nopOtherInstypeDisplay3;
  fxNOP1 = sumOf(flattenAndRemoveNil(openInstruments :* "fxNOP1" [positionObject, theoreticalValueCurrencies]));
  fxNOP2 = sumOf(flattenAndRemoveNil(openInstruments :* "fxNOP2" [positionObject, theoreticalValueCurrencies]));
  fxNOP3 = sumOf(flattenAndRemoveNil(openInstruments :* "fxNOP3" [positionObject, theoreticalValueCurrencies]));
  fxNOPFilterIDR1 = ensureCollection(fxNOP1).Filter(exclusionCurrencyFilter);
  fxNOPFilterIDR2 = ensureCollection(fxNOP2).Filter(exclusionCurrencyFilter);
  fxNOPFilterIDR3 = fxNOP3.Filter(exclusionCurrencyFilter);
  fxNOPLong1 = shunt(fxNOPFilterIDR1.IsEmpty, 
  true->denominatedvalue(0, displayCurrency, , ), 
  false->sumOf(convertToCurrency(fxNOPFilterIDR1.Filter(greaterThanZeroDenomninatedFilter), markToMarketValueFxRates, displayCurrency, filterUnit)));
  fxNOPLong2 = shunt(fxNOPFilterIDR2.IsEmpty, 
  true->denominatedvalue(0, displayCurrency, , ), 
  false->sumOf(convertToCurrency(fxNOPFilterIDR2.Filter(greaterThanZeroDenomninatedFilter), markToMarketValueFxRates, displayCurrency, filterUnit)));
  fxNOPLong3 = switch(fxNOPFilterIDR3.IsEmpty, 
  true->denominatedvalue(0, displayCurrency, , ), 
  false->sumOf(convertToCurrency(fxNOPFilterIDR3.Filter(greaterThanZeroDenomninatedFilter), markToMarketValueFxRates, displayCurrency, filterUnit)));
  fxNOPShort1 = shunt(fxNOPFilterIDR1.IsEmpty, 
  true->denominatedvalue(0, displayCurrency, , ), 
  false->sumOf(convertToCurrency(fxNOPFilterIDR1.Filter(lessEqualThanZeroDenomninatedFilter), markToMarketValueFxRates, displayCurrency, filterUnit)));
  fxNOPShort2 = shunt(fxNOPFilterIDR2.IsEmpty, 
  true->denominatedvalue(0, displayCurrency, , ), 
  false->sumOf(convertToCurrency(fxNOPFilterIDR2.Filter(lessEqualThanZeroDenomninatedFilter), markToMarketValueFxRates, displayCurrency, filterUnit)));
  fxNOPShort3 = switch(fxNOPFilterIDR3.IsEmpty, 
  true->denominatedvalue(0, displayCurrency, , ), 
  false->sumOf(convertToCurrency(fxNOPFilterIDR3.Filter(lessEqualThanZeroDenomninatedFilter), markToMarketValueFxRates, displayCurrency, filterUnit)));
}

clx FObject [FExtensionAttribute] {
  adHocPortfolio = acm.FAdhocPortfolio;
  exclusionCurrency = currency("IDR");
  exclusionCurrencyFilter = simpleAndQuery("FDenominatedValue", ["Unit"], ["NOT_EQUAL"], [exclusionCurrency]);
}

clx FOption [FExtensionAttribute] {
  fxNOP1 = projectedFXOption;
  fxNOP2 = projectedFXOption;
  nopOtherInstype1 = singleInstrumentGenerator :* "bondOption";
  nopOtherInstype2 = singleInstrumentGenerator :* "bondOption";
  nopOtherInstype3 = singleInstrumentGenerator :* "bondOption";
  projectedFXOption = sumOf(singleInstrumentGenerator :* "interestRateDelta");
}

clx FSingleInstrumentAndTrades [FExtensionAttribute] {
  bondMtMPortfolioType1 = shunt(tradesInPosition.IsEmpty, 
  true->nil, 
  default->shunt((tradesInPosition.First) :* "object.Portfolio.TypeChlItem", 
    "FVTPL"->convertToCurrency(denominatedvalue(instrument :* "abs(originalPremiumAccounting)" [positionObject, displayCurrency, profitAndLossEndDate], displayCurrency, nil, nil), profitAndLossEndFXRates, displayCurrency), 
    "FVOCI"->riskPositionDisplay + sumOf(convertToCurrency((bondNoPTrades :* "originalPremiumDiscount"), profitAndLossEndFXRates, displayCurrency)) + deprecRPLColumn + pureRPLColumn, 
    "Amortised Cost"->riskPositionDisplay + sumOf(convertToCurrency((bondNoPTrades :* "originalPremiumDiscount"), profitAndLossEndFXRates, displayCurrency)) + deprecRPLColumn + pureRPLColumn, 
    default->denominatedvalue(instrument :* "abs(originalPremiumAccounting)" [positionObject, displayCurrency, profitAndLossEndDate], displayCurrency, nil, nil)));
  bondMtMPortfolioType2 = shunt(tradesInPosition.IsEmpty, 
  true->nil, 
  default->shunt((tradesInPosition[0]) :* "object.Portfolio.TypeChlItem", 
    "FVTPL"->markToMarketPeriodValue, 
    "FVOCI"->markToMarketPeriodValue, 
    "Amortised Cost"->faceNominalDisplay, 
    default->markToMarketPeriodValue));
  bondOption = shunt(instrument.UnderlyingType, 
  "Bond"->priceDeltaCash, 
  default->nil);
  currSwapNominal3 = switch((instrument.FirstPayLeg.Currency == "USD"), 
  true->instrument:ccrCurrSwapPayNominal * riskPosition * (-1), 
  false->switch((instrument.FirstReceiveLeg.Currency == "USD"), 
    true->instrument:ccrCurrSwapRecNominal * riskPosition, 
    default->nil), 
  default->nil);
  currSwapNominal3Final = shunt(instrument.InsType, 
  "CurrSwap"->shunt((instrument.MainLeg.NominalAtStart) or (instrument.MainLeg.NominalAtEnd), 
    true->shunt((instrument.MainLeg.NominalAtStart) and (instrument.MainLeg.NominalAtEnd), 
      true->nil, 
      false->currSwapNominal3, 
      default->nil), 
    default->nil), 
  default->nil);
  futureForwardNOP1 = shunt(instrument:underlyingType, 
  "Bill"->markToMarketPeriodValue, 
  "Bond"->markToMarketPeriodValue, 
  "Curr"->markToMarketPeriodValue, 
  default->nil);
  futureForwardNOP2 = shunt(instrument:underlyingType, 
  "Bill"->markToMarketPeriodValue, 
  "Bond"->markToMarketPeriodValue, 
  default->nil);
  futureForwardNOP3 = shunt(instrument:underlyingType, 
  "Bill"->denominatedvalue(riskPosition, instrument.Currency, , ), 
  "Bond"->denominatedvalue(riskPosition, instrument.Currency, , ), 
  default->nil);
  isMMLD = instrument :* "isMMLD" [positionObject];
  mbsOutstandingNotional2 = select((tradesInPosition[0]) :* "object.Portfolio.TypeChlItem", 
  "FVTPL"->markToMarketPeriodValue, 
  "FVOCI"->markToMarketPeriodValue, 
  "Amortised Cost"->endNominalEnd, 
  default->endNominalEnd);
  riskPositionOrNil = shunt(riskPositionDisplay == 0, 
  true->nil, 
  default->select(riskPositionDisplay.ClassName, 
    "FReal"->denominatedvalue(riskPositionDisplay.Number, displayCurrency, , ), 
    "FInteger32"->denominatedvalue(riskPositionDisplay.Number, displayCurrency, , ), 
    default->riskPositionDisplay));
  riskPositionOrZero = shunt(riskPositionDisplay == 0, 
  true->denominatedvalue(0, displayCurrency, , ), 
  default->riskPositionDisplay);
  swapNominal3 = select(instrument.MainLeg.LegType, 
  "Fixed"->(-riskPositionOrNil), 
  "Float"->riskPositionOrNil, 
  default->nil);
}

clx FSwap [FExtensionAttribute] {
  nopOtherInstype1 = select(isMMLD, 
  true->singleInstrumentGenerator :* "interestRateDelta", 
  default->singleInstrumentGenerator :* "markToMarketPeriodValue");
  nopOtherInstype2 = select(isMMLD, 
  true->singleInstrumentGenerator :* "interestRateDelta", 
  default->singleInstrumentGenerator :* "markToMarketPeriodValue");
  nopOtherInstype3 = singleInstrumentGenerator :* "swapNominal3";
}

decls[FPythonCode] {
}

clx FObject [FPythonCode] {
  CustomFunctions
import acm


def EnsureCollection(obj):
    if obj is None:
        return acm.FArray()
    
    if obj.IsKindOf(acm.FCollection):
        return obj
    
    return acm.FArray().AddAll([obj])


#*******************NOT USED*******************************
calcSpace = acm.Calculations().CreateCalculationSpace(acm.GetDefaultContext(),'FPortfolioSheet')
#FxNOPGrouper = acm.Risk().GetGrouperFromName('Currency Split')


def currencySplitPositionRows(tradesInPosition, columnID, placeHolderForRealTimeUpdate, valuationBaseDate):

    calcSpace.SimulateGlobalValue( 'Valuation Date', valuationBaseDate)
    adHocPortfolio = acm.FAdhocPortfolio(tradesInPosition)
    topNode = calcSpace.InsertItem(adHocPortfolio)
    #topNode.ApplyGrouper(FxNOPGrouper)
    topNode.Expand(True)
    calcSpace.Refresh()
    
    fxNOPvalue = calcSpace.CalculateValue(topNode, columnID)#.Number()
    
    calcSpace.RemoveGlobalSimulation('Valuation Date')
    calcSpace.Clear()
    
    return fxNOPvalue



...

}

