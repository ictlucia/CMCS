#
# Front Arena exported extension module.
# source          ""
# timestamp (utc) "2023-02-02 11:10:29.9"
# ***** DO NOT EDIT! *****
#
name        "FSwiftCash"
description ""

groups {
}

decls[FMenuExtension] {
}

clx FSettlementSheet [FMenuExtension] {
  DuplicateMTMessage =
  CreateFunction=FSwiftWriterUtils.create_duplicate_menuitem
  DisplayName=Duplicate MT Message
  MenuType=GridRowHeader


  ReSendMTMessagetoAMB =
  CreateFunction=FSwiftWriterUtils.create_resend_mtmessage_menuitem
  DisplayName=Resend MT Message over AMB
  MenuType=GridRowHeader


}

decls[FParameters] {
}

clx FObject [FParameters] {
  FCashOut_Config =
  AMBSenderSubject=SWIFT_WRITER_SUBJECT
  BankingPriority={'TARGET2':'NYNN', 'EBA':''}
  builddate=22-Dec-2022
  CarbonCopySwiftPath=C:\Sent Swift Messages
  CashOut_AMBReceiver=CASH_SETTLEMENT_OUT_MSG_READER
  NationalClearingSystem={'Fedwire' : 'FW'}
  SaveCarbonCopySwift=False
  SubNetwork=['TARGET2', 'EBA'] # ['TARGET2', 'EBA']
  SwiftServiceCode={'TARGET2':'TGT', 'EBA':'EBA'}
  version=3.6.3-0.5.6048


  FCashOutCalculatorConfig =


  FCashOutGeneration_Config =
  FMT101_GenerationOn=True
  FMT103_GenerationOn=True
  FMT192_GenerationOn=True
  FMT199_GenerationOn=True
  FMT200_GenerationOn=True
  FMT202_GenerationOn=True
  FMT202COV_GenerationOn=True
  FMT210_GenerationOn=True
  FMT292_GenerationOn=True
  FMT299_GenerationOn=True
  FMT304_GenerationOn=True


  FCashOutNotify_Config =
  LogLevel=INFO #INFO, DEBUG, ERROR, WARN
  NotificationLevel=TRACK #TRACK, DEBUG, WARNING, ERROR, SUCCESS
  NotificationMedia=OFF #OFF, PRIME_LOG, PRIME_LOG_TRANSIENT
  NotifyUser=


  FMT101Out_Config =
  StateChart=FSwiftCashOut


  FMT103Out_Config =
  StateChart=FSwiftCashOut


  FMT192Out_Config =
  StateChart=FSwiftCashOut


  FMT199NarrativeOut_Config =
  MT199Narrative_Settlement={'Default': 'Attn: %s  Trade Settlement dated %s has passed the cut-off, and we ask you to immediately attend to it Regards,  OperationsTeam' % (OBJECT.Trade().Counterparty().Name(), datetime.datetime.fromtimestamp(OBJECT.CreateTime())), 'SettlementTemplate': 'Attn:  Trade Settlement has passed the cut-off'}
  StateChart=FSwiftNarrativeOut


  FMT199Out_Config =
  StateChart=FSwiftCashOut


  FMT200Out_Config =
  StateChart=FSwiftCashOut


  FMT202COVOut_Config =
  StateChart=FSwiftCashOut


  FMT202Out_Config =
  StateChart=FSwiftCashOut


  FMT210Out_Config =
  StateChart=FSwiftCashOut


  FMT292Out_Config =
  StateChart=FSwiftCashOut


  FMT299NarrativeOut_Config =
  MT299Narrative_Settlement={'Default': 'Attn: %s  Trade Settlement dated %s has passed the cut-off, and we ask you to immediately attend to it Regards,  OperationsTeam' %   (OBJECT.Trade().Counterparty().Name(), datetime.datetime.fromtimestamp(OBJECT.CreateTime())), 'SettlementTemplate': 'Attn:  Trade Settlement has passed the cut-off'}
  StateChart=FSwiftNarrativeOut


  FMT299Out_Config =
  StateChart=FSwiftCashOut


  FMT304Out_Config =
  StateChart=FSwiftCashOutMT304


}

decls[FPythonCode] {
}

clx FObject [FPythonCode] {
  FCashMXOutBase
"""----------------------------------------------------------------------------
MODULE:
    FCashMXOutBase

DESCRIPTION:
    This module provides the base class for the Cash MX  outgoing implementation


CLASS:
    FCashOutBase

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
from FMXOutBase import FMXOutBase
from FMXOutBase import PartyAddressSuperBase
import FSwiftMLUtils
import FCashOutUtils
import uuid
import FRegulatoryLib
import FIntegrationUtils
import FSwiftWriterLogger
notifier = FSwiftWriterLogger.FSwiftWriterLogger('CashSetlemnt', 'FCashOutNotify_Config')

class PartyAddressOutBase(PartyAddressSuperBase):
    """This is party address class.Used to create the party address based on requirement."""
    def __init__(self, party):
        super(PartyAddressOutBase, self).__init__(party)

class FCashMXOutBase(FMXOutBase):
    def __init__(self, acm_obj, swift_obj):
        #self.sender_reference_tag = 'BizMsgIdr'
        self.sender_reference_tag = ''
        self.get_sender_reference()

        super(FCashMXOutBase, self).__init__(acm_obj, swift_obj)

    def get_sender_reference(self):
        """This function is used to decide which tag is used for saving in external reference based on BAH availability"""
        # Default core will provide the BAH but not the header
        self.sender_reference_tag = 'BizMsgIdr'
        config_param  = FSwiftMLUtils.Parameters('F%sOut_Config' %self.swift_message_type)
        do_generate_bah_header = str(getattr(config_param, 'DoGenerateBAH', True))
        do_generate_bah_header = FIntegrationUtils.FIntegrationUtils().isBool(do_generate_bah_header)
        if not do_generate_bah_header:
            self.sender_reference_tag = 'EndToEndId'

    def format_sender_ref(self, val):
        """Format the sender reference number as FASxxxx01  where FAS -Prefix set in FParameter
        and xxxx is settlement number and 01 is the number of external objects on the current settlement"""
        val = FSwiftMLUtils.format_mx_sender_reference(val)
        return val

    # ------------------ Message Identification ---------------------
    # getter
    def MessageIdentification(self):
        """This function return the message identification in string format"""
        value = 'NONREF'
        return value

    # formatter
    def _format_MessageIdentification(self, value):
        """This function format the message identification"""
        return value

    # ------------------------------------------ InstructionIdentification  -------------------------------

    # getter
    def InstructionIdentification(self):
        """This function return the instruction identification in string format"""
        sender_ref = FCashOutUtils.get_mx_sender_reference(self.acm_obj)
        return sender_ref

    #formatter
    def _format_InstructionIdentification(self, value):
        """This function format the instruction identification."""
        value = FSwiftMLUtils.format_mx_sender_reference(value)
        return value

    # ------------------ EndToEndIdentification ---------------------
    # getter
    def EndToEndIdentification(self):
        """This function return the end to end identification in string format"""
        values = FCashOutUtils.get_mx_sender_reference(self.acm_obj)
        ref_no = uuid.uuid4()
        values_dict = {'end_to_end': values, 'uetr' :ref_no }
        return values_dict

    #formatter
    def _format_EndToEndIdentification(self, end_to_end_identification_dict):
        """This function format the end to end identification"""
        end_to_end_identification = self.format_sender_ref(end_to_end_identification_dict.get('end_to_end'))
        end_to_end_identification = {'end_to_end': end_to_end_identification, 'uetr' :end_to_end_identification_dict.get('uetr') }
        return end_to_end_identification

    def _validate_EndToEndIdentification(self, end_to_end_str):
        """This function validate the end to end identification and uetr"""
        end_to_end_dict = {}
        end_to_end = self.validate_endtoendid(end_to_end_str.get('end_to_end'))
        uetr = self.validate_uetrid(end_to_end_str.get('uetr'))
        end_to_end_dict['end_to_end'] = end_to_end
        end_to_end_dict['uetr'] = uetr
        return end_to_end_dict


    # ------------------------------------------ Settlement Method  ------------------------------------------
    # getter
    def SettlementMethod(self):
        """This function return the settlement method in string format"""
        settlement_method = 'CLRG'
        return settlement_method

    # formatter
    def _format_SettlementMethod(self, settlement_method):
        """This function format the settlement method"""
        return settlement_method

    # ------------------------------------Clearing System----------------------
    # getter
    def ClearingSystem(self):
        """This function return the clearing system in string format"""
        clearing_system = 'TGT'
        return clearing_system

    # formatter
    def _format_ClearingSystem(self, clearing_system):
        """This function format the clearing system"""
        return clearing_system

    # ------------------------------------------ InterbankSettlementDate ------------------------------------------
    #getter
    def InterbankSettlementDate(self):
        """This function return the interbank settlement date"""
        value_date = FCashOutUtils.get_value_date(self.acm_obj)
        return value_date

    #formatter
    def _format_InterbankSettlementDate(self, value_date):
        """This function format the interbank settlement date"""
        return value_date




    # --------------------------------- details_of_ChargeBearer -------------------------------------------
    # getter
    def ChargeBearer(self):
        """ Returns a details_of_charges as string """
        details_of_charges = FCashOutUtils.get_details_of_charges(self.acm_obj, is_mx = True)
        return details_of_charges

    # formatter
    def _format_ChargeBearer(self, val):
        """Formats the value provided by getter method"""
        return val

    # ------------------------------------------ InterbankSettlementAmount  ------------------------------------------
    #getterc
    def InterbankSettlementAmount(self):
        """This function return the interbank settlement amount"""
        settlement_details = dict()
        settlement_details['curr'] = self.acm_obj.Currency().Name()
        settlement_details['amount'] = abs(self.acm_obj.Amount())
        return settlement_details

    #formatter
    def _format_InterbankSettlementAmount(self, settlement_details):
        """This function format the interbank settlement amount"""
        curr = settlement_details.get('curr', None)
        amount = settlement_details.get('amount', None)
        amount = FCashOutUtils.apply_currency_precision(curr, abs(amount))
        settlement_details['amount'] = amount
        return settlement_details

    #validator
    def _validate_InterbankSettlementAmount(self, settlement_details):
        """validates the value provided by formatter method.This is base validator for settlement amount and currency"""
        settlement_amt_curr = {}
        amount = self.validate_SettlementAmount(settlement_details.get('amount'))
        curr = self.validate_SettlementCurrency(settlement_details.get('curr'))
        settlement_amt_curr.update({'amount' : amount})
        settlement_amt_curr.update({'curr' : curr})
        return settlement_amt_curr

    # ------------------------------------------ Instructing Agent BIC------------------------------------------
    # getter
    def InstructingAgent(self):
        """This function return the instructing agent"""
        acquirer = FCashOutUtils.get_acquirer_details(self.acm_obj, True)
        # As in RTGS just need BIC so not taking LEI or ADDR
        acquirer_bic = acquirer.get('BIC')

        return acquirer_bic

    # formatter
    def _format_InstructingAgent(self, acquirer_bic):
        """This function format the instructing agent"""
        return acquirer_bic

    # ------------------------------------------ Instructed Agent BIC------------------------------------------
    # getter
    def InstructedAgent(self):
        """This function return the instructed agent"""
        # As in RTGS just need BIC so not taking LEI or ADDR
        party_account = self.acm_obj.CounterpartyAccountRef()
        counter_party_bic = FSwiftMLUtils.get_party_bic_RTGS(party_account)
        return counter_party_bic

    # formatter
    def _format_InstructedAgent(self, counter_party_bic):
        """This function format the instructed agent"""
        return counter_party_bic

    #---------------------------------------Debtor --------------------------------------------------------------

    # getter
    def Debtor(self):
        """This function return the debtor information name, address"""
        debt_addr_obj = self.create_address_class(self.acm_obj.Acquirer())
        acquirer_details = FCashOutUtils.get_acquirer_details(self.acm_obj, is_MX=True, add_cls_obj=debt_addr_obj)
        return acquirer_details

    # format
    def _format_Debtor(self, acquirer_details):
        """This function format the debtor name and address"""
        return acquirer_details

    # -------------------------Debtor Account-----------------------------------------------
    # getter
    def DebtorAccount(self):
        """This function return the debtor account"""
        val = {}
        is_valid_iban = False
        acquirer_account = self.acm_obj.AcquirerAccountRef().Account()
        is_valid_iban = FRegulatoryLib.AccountRegInfo().isValidIBAN(acquirer_account)
        val['AccountNumber'] = acquirer_account
        val['IsValidIBAN'] = is_valid_iban
        return val

    # formatter
    def _format_DebtorAccount(self, val):
        """This function format the debtor account"""
        return val

    # validator
    def _validate_DebtorAccount(self, val):
        """validates the value provided by formatter method"""
        val = self.validate_agent_account(val)
        return val

    # ---------------------Debtor Agent------------------------------------------------------
    # getter
    def DebtorAgent(self):
        """This function return the debtor agent"""
        acquirer_cp = FCashOutUtils.get_acquirer_correpondent_details(self.acm_obj)
        val = acquirer_cp['BIC']
        return val

    # formatter
    def _format_DebtorAgent(self, value):
        """This function format the debtor account"""
        return value
    
    # ------------------------------------------ Debtor Agent Account --------------------------------------
    # getter
    def DebtorAgentAccount(self):
        """This function return the debtor account"""
        val = {}
        is_valid_iban = False
        try:
            import FRegulatoryLib
            acquirer_account = self.acm_obj.AcquirerAccountRef().Account2()
            is_valid_iban = FRegulatoryLib.AccountRegInfo().isValidIBAN(acquirer_account)
            val['AccountNumber'] = acquirer_account
            val['IsValidIBAN'] = is_valid_iban
        except ImportError as e:
            notifier.ERROR('Exception caught in Importing FRegulatoryLib : %s' % (str(e)))
        return val

    # formatter
    def _format_DebtorAgentAccount(self, val):
        """This function format the debtor account"""
        return val

    # validator
    def _validate_DebtorAgentAccount(self, val):
        """validates the value provided by formatter method"""
        val = self.validate_agent_account(val)
        return val    

    #------------------------------Creditor Agent ----------------------------------------------
    #getter
    def CreditorAgent(self):
        """This function return the creditor agent"""
        counter_party_details = FCashOutUtils.get_counterpartys_correspondent_details(self.acm_obj)
        val = counter_party_details['BIC']
        return val

    # formatter
    def _format_CreditorAgent(self, value):
        """This function format the creditor agent"""
        return value

    # -------------------------Creditor Agent Account-----------------------------------------------
    # getter
    def CreditorAgentAccount(self):
        """This function return the creditor agent account"""
        val = {}
        counter_party_int1_account = self.acm_obj.CounterpartyAccountRef().Account2()
        val['AccountNumber'] = counter_party_int1_account
        is_valid_iban = FRegulatoryLib.AccountRegInfo().isValidIBAN(counter_party_int1_account)
        val['IsValidIBAN'] = is_valid_iban
        return val

    # formatter
    def _format_CreditorAgentAccount(self, val):
        """This function format the creditor agent account"""
        return val

    # validator
    def _validate_CreditorAgentAccount(self, val):
         """validates the value provided by formatter method"""
         val = self.validate_agent_account(val)
         return val

    def validate_agent_account(self, val):
        """validates the value provided by formatter method. This is base validator for all agent account"""
        val_dict = {}
        is_valid_iban = val.get('IsValidIBAN', False)
        if val and not is_valid_iban :
            val = self.validate_OtherAccount(val.get('AccountNumber'))
        elif val and is_valid_iban:
            val = self.validate_IBANAccount(val.get('AccountNumber'))
        val_dict.update({'AccountNumber': val})
        val_dict.update({'IsValidIBAN': is_valid_iban})
        return val_dict

    # ---------------------------creditor ------------------------------------------------------------
    # getter
    def Creditor(self):
        """This function return the creditor name, address"""
        crdtr_addr_obj = self.create_address_class(self.acm_obj.Counterparty())
        counter_party_details = FCashOutUtils.get_counterparty_details(self.acm_obj, is_MX=True,
                                                                       add_cls_obj=crdtr_addr_obj)
        return counter_party_details

    # formatter
    def _format_Creditor(self, counter_party_details):
        """This function format the creditor name, address"""
        return counter_party_details

    # -------------------------Creditor Account-----------------------------------------------
    # getter
    def CreditorAccount(self):
        """This function return the creditor account"""
        val = {}
        counter_party_cb_account = self.acm_obj.CounterpartyAccountRef().Account()
        val['AccountNumber'] = counter_party_cb_account
        is_valid_iban = FRegulatoryLib.AccountRegInfo().isValidIBAN(counter_party_cb_account)
        val['IsValidIBAN'] = is_valid_iban
        return val

    # formatter
    def _format_CreditorAccount(self, val):
        """This function format the creditor account"""
        return val


    def _validate_CreditorAccount(self, val):
        """This function that validate the creditor account"""
        val_dict = self.validate_agent_account(val)
        return val_dict

    # -------------------------TransferredAmount--------------------------------------------

    # getter
    def TransferredAmount(self):
        """ This function is used to retrieve the transferred amount"""
        val_dict = dict()
        if self.acm_obj.Currency:
            val_dict['Currency'] = self.acm_obj.Currency().Name()
            val_dict['Amount'] = self.acm_obj.Amount()
        return val_dict

    # formatter
    def _format_TransferredAmount(self, transferred_amount_dict):
        """ This function is used to format the transferred amount"""
        currency = transferred_amount_dict.get('Currency')
        amount = transferred_amount_dict.get('Amount')
        amount = FCashOutUtils.apply_currency_precision(currency, abs(amount))
        transferred_amount_dict['Amount'] = amount
        return transferred_amount_dict

    # validator
    def _validate_TransferredAmount(self, transferred_amount_dict):
        """ This function is used to validate the transferred amount and currency"""
        validated_transferred_amount = dict()
        amount = self.validate_TransferAmount(transferred_amount_dict.get('Amount'))
        validated_transferred_amount['Amount'] = amount
        currency = self.validate_TransferCurrency(transferred_amount_dict.get('Currency'))
        validated_transferred_amount['Currency'] = currency
        return validated_transferred_amount

    # ----------------------Intermediary Agent 1-----------------------------------------------------
    # getter
    def IntermediaryAgent1(self):
        """This function return the intermediary  agent 1"""
        counter_party_int_agt1_bic = ''
        party_account = self.acm_obj.CounterpartyAccountRef()
        enum_intermediary_agent_count = FSwiftMLUtils.get_intermediary_agent_count_enum()
        intermediary_agent_count = FSwiftMLUtils.get_intermediary_agent_count(party_account)
        if intermediary_agent_count == enum_intermediary_agent_count.INTERMEDIARY_AGENT_COUNT_4:
            counter_party_int_agt1_bic = FSwiftMLUtils.get_party_bic_RTGS(party_account)
        elif intermediary_agent_count == enum_intermediary_agent_count.INTERMEDIARY_AGENT_COUNT_3:
            counter_party_int_agt1_bic = FSwiftMLUtils.get_party_bic(party_account, 'INTERMEDIARY3')
        elif intermediary_agent_count == enum_intermediary_agent_count.INTERMEDIARY_AGENT_COUNT_2:
            counter_party_int_agt1_bic = FSwiftMLUtils.get_party_bic(party_account, 'INTERMEDIARY2')
        else:
            counter_party_int_agt1_bic = FSwiftMLUtils.get_party_bic(party_account, 'INTERMEDIARY')
        return counter_party_int_agt1_bic

    # formatter
    def _format_IntermediaryAgent1(self, val):
        """This function format the intermediary  agent 1"""
        return val

    # ----------------------Intermediary Agent 1 Account-----------------------------------------------------
    # getter
    def IntermediaryAgent1Account(self):
        """This function return the intermediary  agent 1 account"""
        val = {}
        is_valid_iban = False
        inter_agent1_account = ''
        party_account = self.acm_obj.CounterpartyAccountRef()
        enum_intermediary_agent_count = FSwiftMLUtils.get_intermediary_agent_count_enum()
        intermediary_agent_count = FSwiftMLUtils.get_intermediary_agent_count(party_account)
        if intermediary_agent_count == enum_intermediary_agent_count.INTERMEDIARY_AGENT_COUNT_4:
            inter_agent1_account = ''
        elif intermediary_agent_count == enum_intermediary_agent_count.INTERMEDIARY_AGENT_COUNT_3:
            inter_agent1_account = FSwiftMLUtils.get_account(party_account, 'INTERMEDIARY3')
        elif intermediary_agent_count == enum_intermediary_agent_count.INTERMEDIARY_AGENT_COUNT_2:
            inter_agent1_account = FSwiftMLUtils.get_account(party_account, 'INTERMEDIARY2')
        else:
            inter_agent1_account = FSwiftMLUtils.get_account(party_account, 'INTERMEDIARY')
        is_valid_iban = FRegulatoryLib.AccountRegInfo().isValidIBAN(inter_agent1_account)
        val['AccountNumber'] = inter_agent1_account
        val['IsValidIBAN'] = is_valid_iban
        return val

    # formatter
    def _format_IntermediaryAgent1Account(self, val):
        """This function format the intermediary  agent 1 account"""
        return val

    # ----------------------Intermediary Agent 2-----------------------------------------------------
    # getter
    def IntermediaryAgent2(self):
        """This function return the intermediary  agent 2"""
        counter_party_int_agt2_bic = ''
        party_account = self.acm_obj.CounterpartyAccountRef()
        enum_intermediary_agent_count = FSwiftMLUtils.get_intermediary_agent_count_enum()
        intermediary_agent_count = FSwiftMLUtils.get_intermediary_agent_count(party_account)
        if intermediary_agent_count == enum_intermediary_agent_count.INTERMEDIARY_AGENT_COUNT_4:
            counter_party_int_agt2_bic = FSwiftMLUtils.get_party_bic_RTGS(party_account)
        elif intermediary_agent_count == enum_intermediary_agent_count.INTERMEDIARY_AGENT_COUNT_2:
            counter_party_int_agt2_bic = FSwiftMLUtils.get_party_bic(party_account, 'INTERMEDIARY')
        else:
            counter_party_int_agt2_bic = FSwiftMLUtils.get_party_bic(party_account, 'INTERMEDIARY2')
        return counter_party_int_agt2_bic

    # formatter
    def _format_IntermediaryAgent2(self, val):
        """This function format the intermediary  agent 2"""
        return val

    # ----------------------Intermediary Agent 2 Account-----------------------------------------------------
    # getter
    def IntermediaryAgent2Account(self):
        """This function return the intermediary  agent 2 account"""
        val = {}
        is_valid_iban = False
        inter_agent2_account = ''
        party_account = self.acm_obj.CounterpartyAccountRef()
        enum_intermediary_agent_count = FSwiftMLUtils.get_intermediary_agent_count_enum()
        intermediary_agent_count = FSwiftMLUtils.get_intermediary_agent_count(party_account)
        if intermediary_agent_count == enum_intermediary_agent_count.INTERMEDIARY_AGENT_COUNT_4:
            inter_agent2_account = ''
        elif intermediary_agent_count == enum_intermediary_agent_count.INTERMEDIARY_AGENT_COUNT_2:
            inter_agent2_account = FSwiftMLUtils.get_account(party_account, 'INTERMEDIARY')
        else:
            inter_agent2_account = FSwiftMLUtils.get_account(party_account, 'INTERMEDIARY2')
        is_valid_iban = FRegulatoryLib.AccountRegInfo().isValidIBAN(inter_agent2_account)
        val['AccountNumber'] = inter_agent2_account
        val['IsValidIBAN'] = is_valid_iban

        return val

    # formatter
    def _format_IntermediaryAgent2Account(self, val):
        """This function format the intermediary  agent 2 account"""
        return val

    # ----------------------Intermediary Agent 3-----------------------------------------------------
    # getter
    def IntermediaryAgent3(self):
        """This function return the intermediary  agent 3"""
        counter_party_int_agt3_bic = ''
        party_account = self.acm_obj.CounterpartyAccountRef()
        enum_intermediary_agent_count = FSwiftMLUtils.get_intermediary_agent_count_enum()
        intermediary_agent_count = FSwiftMLUtils.get_intermediary_agent_count(party_account)
        if intermediary_agent_count == enum_intermediary_agent_count.INTERMEDIARY_AGENT_COUNT_4:
            counter_party_int_agt3_bic = FSwiftMLUtils.get_party_bic_RTGS(party_account)
        elif intermediary_agent_count == enum_intermediary_agent_count.INTERMEDIARY_AGENT_COUNT_3:
            counter_party_int_agt3_bic = FSwiftMLUtils.get_party_bic(party_account, 'INTERMEDIARY')
        return counter_party_int_agt3_bic

    # formatter
    def _format_IntermediaryAgent3(self, val):
        """This function format the intermediary  agent 3"""
        return val

    # ----------------------Intermediary Agent 3 Account-----------------------------------------------------
    # getter
    def IntermediaryAgent3Account(self):
        """This function format the intermediary  agent 3 account"""
        val = {}
        is_valid_iban = False
        inter_agent3_account = ''
        party_account = self.acm_obj.CounterpartyAccountRef()
        enum_intermediary_agent_count = FSwiftMLUtils.get_intermediary_agent_count_enum()
        intermediary_agent_count = FSwiftMLUtils.get_intermediary_agent_count(party_account)
        if intermediary_agent_count == enum_intermediary_agent_count.INTERMEDIARY_AGENT_COUNT_4:
            inter_agent3_account = ''
        elif intermediary_agent_count == enum_intermediary_agent_count.INTERMEDIARY_AGENT_COUNT_3:
            inter_agent3_account = FSwiftMLUtils.get_account(party_account, 'INTERMEDIARY')
        is_valid_iban = FRegulatoryLib.AccountRegInfo().isValidIBAN(inter_agent3_account)
        val['AccountNumber'] = inter_agent3_account
        val['IsValidIBAN'] = is_valid_iban

        return val

    # formatter
    def _format_IntermediaryAgent3Account(self, val):
        """This function format the intermediary  agent 3 account"""
        return val


...

  FCashMXOutUtils
"""----------------------------------------------------------------------------
MODULE:
    FCashMXOutUtils

DESCRIPTION:
    A module for common functions used across Cash outgoing MX message.
    solution.

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import FSwiftMLUtils
from FSwiftWriterEngine import validate_with



def format_bic(party):
    """
    This function return variable bic based on conditions
    :param party:
    :return:
    """
    bic_dict = {}
    bic = ''
    if party:
        bic = party.get('BIC')
        if bic :
            bic_dict.update({'BIC':bic})
    if not bic:
        bic = party.get('LEI')
        if bic :
            bic_dict.update({'LEI':bic})
    if not bic:
        bic = party
        if bic :
            bic_dict.update({'ADDR':bic})
    return bic_dict

def validate_bic_lei_addr(mt_class_obj, bic, xsd_obj):
    """
    This function validate BIC/LEI/Address against XSD
    :parm obj - XSD object
    :param bic-(Dict)
    :return bic_dict-(Dict)
    """
    bic_dict = {}
    if isinstance(bic, dict):
        bic_dict_keys = bic.keys()

        @validate_with(xsd_obj.BICFIDec2014Identifier, is_MX = True)
        def validate_bic(mt_class_obj, bic):
            return bic

        @validate_with(xsd_obj.LEIIdentifier, is_MX = True)
        def validate_lei(mt_class_obj, lei):
            return  lei


        _bic = bic.get('BIC')
        _lei = bic.get('LEI')
        _addr = bic.get('ADDR')

        if _bic:
            bic = validate_bic(mt_class_obj, _bic)
            bic_dict.update({'BIC': bic})
        elif _lei:
            lei = validate_lei(mt_class_obj, _lei)
            bic_dict.update({'LEI': lei})
        elif _addr:
            addr = FSwiftMLUtils.validate_postal_address24(mt_class_obj, _addr, xsd_obj)
            bic_dict.update({'ADDR': addr})

    return bic_dict



...

  FCashOutBase
"""----------------------------------------------------------------------------
MODULE:
    FCashOutBase

DESCRIPTION:
    This module provides the base class for the FCash outgoing implementation

VERSION: 3.6.3-0.5.6048

CLASS:
    FCashOutBase

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import FCashOutUtils
import FSwiftWriterUtils
from FMTOutBase import FMTOutBase


class FCashOutBase(FMTOutBase):
    def __init__(self, acm_obj, swift_obj):
        super(FCashOutBase, self).__init__(acm_obj, swift_obj)

    # getter
    def account_with_institution_57A(self):
        """ Returns a dictionary as {'account':<value>, 'bic':<value>} """
        values_dict = {}
        return FCashOutUtils.get_counterpartys_correspondent_details(self.acm_obj)

    # formatter
    def _format_account_with_institution_57A(self, val):
        account = val.get('ACCOUNT')
        bic = val.get('BIC')
        if bic:
            val = str(bic)
            if account:
                val = '/' + str(account) + '\n' + str(val)
            return val

    # formatter for option J
    def _format_Option_J(self, val):
        name = val.get('NAME')
        account = val.get('ACCOUNT')
        address = val.get('ADDRESS')
        bic = val.get('BIC')

        if name:
            val = '/ABIC/' + (bic or 'UKWN')
            if account:
                val = val + "/ACCT/" + account
            if address:
                val = val + '/ADD1/' + address
            val = str(val) + '/NAME/' + str(name)
            lines = FSwiftWriterUtils.split_text_on_character_limit(val, 40)
            val = FSwiftWriterUtils.allocate_space_for_n_lines(5, lines)
            return val

...

  FCashOutCallbacks
"""----------------------------------------------------------------------------
MODULE:
    FCashOutCallbacks

DESCRIPTION:
    OPEN EXTENSION MODULE
    FFXTradeConfMsgCallbacks class for user customization.
    Business process conditional_entry/exit and on_entry/exit callbacks.
    User can override the logic written in the base class FFXTradeConfMsgCallbacksBase

    If user wishes to add some extra processing for conditional entry state
     e.g. 'ready' he can implement method as
    def condition_entry_state_ready(self):
        # Custom logic before core logic
        super(FFXTradeConfMsgCallbacks, self).condition_entry_state_ready()
        # Custom logic after core logic

FUNCTIONS:
    For sample state xxx there are always the four standard extension points:
        condition_entry_state_xxx():
            To control if all the pre-requisites to performing the action and
            entering the state are defined.
        on_entry_state_xxx():
            Is the place to perform the action.
            For example, the on_ entry_state_matched is the place to set the
            confirmation status to Matched
        condition_exit_state_xxx():
            To control that all pre-requisites for performing the next action
            are fulfilled.
        on_exit_state_xxx():
             Is the place to reset values that you set in the state entry, if
             you are leaving the state to go backwards in the workflow.
             For example if you exit from the ?Matched? state to go and re-pair,
             or to manually cancel, then you would want to remove the
             confirmation Matched status

VERSION: 3.6.3-0.5.6048
----------------------------------------------------------------------------"""
# The context parameter is an instance of FBusinessProcessCallbackContext
import FCashOutCallbacksBase
import FSwiftWriterLogger
notifier = FSwiftWriterLogger.FSwiftWriterLogger('CashSetlemnt', 'FCashOutNotify_Config')

class FCashOutCallbacks(FCashOutCallbacksBase.FCashOutCallbacksBase):
    def __init__(self):
        super(FCashOutCallbacks, self).__init__()

...

  FCashOutCallbacksBase
"""----------------------------------------------------------------------------
MODULE:
    FCashOutCallbacksBase

DESCRIPTION:
    OPEN EXTENSION MODULE
    This is a READ ONLY module. User can override the default logic in derived
    class FFXTradeConfMsgCallbacks
    Business process conditional_entry/exit and on_entry/exit callbacks.

FUNCTIONS:
    For sample state xxx there are always the four standard extension points:
        condition_entry_state_xxx():
            To control if all the pre-requisites to performing the action and
            entering the state are defined.
        on_entry_state_xxx():
            Is the place to perform the action.
            For example, the on_ entry_state_matched is the place to set the
            confirmation status to Matched
        condition_exit_state_xxx():
            To control that all pre-requisites for performing the next action
            are fulfilled.
        on_exit_state_xxx():
             Is the place to reset values that you set in the state entry, if
             you are leaving the state to go backwards in the workflow.
             For example if you exit from the "Matched" state to go and re-pair,
             or to manually cancel, then you would want to remove the
             confirmation Matched status

MAPPING:
    Below is the mapping of Settlement status against its corresponding document status.
    Settlement Status                   Document Status
    -------------------                 ---------------
    NEW                                 NEW
    EXCEPTION                           EXCEPTION
    PENDING_DOCUMENT_GENERATION         PENDING_GENERATION
    PENDING_APPROVAL                    PENDING_GENERATION
    AUTHORISED                          PENDING_GENERATION
    RELEASED                            GENERATED
    ACKNOWLEDGED                        SENT_SUCCESSFULLY
    NOT_ACKNOWLEDGED                    SEND_FAILED
    PENDING_CLOSURE                     SENT_SUCCESSFULLY
    PENDING_CANCELLATION                SENT_SUCCESSFULLY
    PENDING_MATCHING                    SENT_SUCCESSFULLY

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.

----------------------------------------------------------------------------"""
# The context parameter is an instance of FBusinessProcessCallbackContext
import time
import acm
import FSwiftWriterLogger
import FSwiftMLUtils
import FSwiftWriterUtils
notifier = FSwiftWriterLogger.FSwiftWriterLogger('CashSetlemnt', 'FCashOutNotify_Config')



class FCashOutCallbacksBase(object):
    def __init__(self):
        pass

    def ignore_migrated_callback(self, bpr, state_name):
        """
        This function return true if the step contains 'MigratedFromLegacy'
        :param bpr: businessprocess
        :return: boolean
        """
        is_migrated_from_legacy = FSwiftMLUtils.get_parameters_from_bpr_state(bpr, state_name, 'MigratedFromLegacy')
        return is_migrated_from_legacy


    # Conditions return True or False
    # Name convention is
    # 'condition_' + 'entry_'/'exit_' + state name in lowercase and underscore
    def condition_entry_state_ready(self, context):
        return FSwiftMLUtils.HasUserRights(FSwiftMLUtils.get_operation_name_from_bpr_context(context))

    def condition_entry_state_swiftmsggenerated(self, context):
        return FSwiftMLUtils.HasUserRights(FSwiftMLUtils.get_operation_name_from_bpr_context(context))

    def condition_entry_state_generationfailed(self, context):
        return FSwiftMLUtils.HasUserRights(FSwiftMLUtils.get_operation_name_from_bpr_context(context))

    def condition_entry_state_sendfailed(self, context):
        return FSwiftMLUtils.HasUserRights(FSwiftMLUtils.get_operation_name_from_bpr_context(context))

    def condition_entry_state_sent(self, context):
        return FSwiftMLUtils.HasUserRights(FSwiftMLUtils.get_operation_name_from_bpr_context(context))

    def condition_entry_state_acknowledged(self, context):
        return FSwiftMLUtils.HasUserRights(FSwiftMLUtils.get_operation_name_from_bpr_context(context))

# ------------------------------------------------------------------------------
    def condition_exit_state_ready(self, context):
        return True

    def condition_exit_state_swiftmsggenerated(self, context):
        return True

    def condition_exit_state_generationfailed(self, context):
        return True

    def condition_exit_state_sendfailed(self, context):
        return True

    def condition_exit_state_sent(self, context):
        return True

    def condition_exit_state_acknowledged(self, context):
        return True

# ------------------------------------------------------------------------------
    # Entry/Exit callbacks do not return anything
    # Name convention is
    # 'on_' + 'entry_'/'exit_' + state name in lowercase and underscore
    def on_entry_state_ready(self, context):
        pass

    def on_entry_state_swiftmsggenerated(self, context):
        pass

    def _trigger_event_on_parent_bpr(self, acm_obj, state):
        ext_obj = FSwiftMLUtils.FSwiftExternalObject.get_external_object(acm_obj=acm_obj, msg_typ='FSwiftParent',
                                                                         integration_type='Outgoing')
        if ext_obj:
            bpr = FSwiftMLUtils.FSwiftExternalObject.get_business_process_from_external_object(ext_obj)
            if bpr:
                FSwiftMLUtils.trigger_event(bpr, state, state)

    def on_entry_state_generationfailed(self, context):
        msg_type = ''
        try:
            bpr = context.CurrentStep().BusinessProcess()
            acm_obj, sub_typ, msg_type = FSwiftWriterUtils.get_acmobj_subtyp_msgtyp(context)
            max_retries = FSwiftWriterUtils.get_max_commit_retries()
            doc_id = FSwiftMLUtils.get_parameters_from_bpr_state(bpr, 'Ready', 'DOCUMENT_ID')

            counter = 1
            while counter <=max_retries:
                try:
                    if self.ignore_migrated_callback(bpr, 'GenerationFailed'):
                        self._trigger_event_on_parent_bpr(acm_obj, 'Fail')
                        notifier.DEBUG("Ignoring migrated BPR {}.".format(bpr.Oid()))
                        return

                    FSwiftMLUtils.set_document_status_on_acm_object(acm_obj, 'EXCEPTION', sub_typ, doc_id=doc_id)
                    self._trigger_event_on_parent_bpr(acm_obj, 'Fail')
                except Exception as e:
                    #raise e
                    if 'Update collision' in str(e):
                        counter = counter + 1
                        notifier.ERROR("{0} Retrying after 8 seconds due to update collision".format(msg_type))
                        time.sleep(8)
                        continue
                    notifier.ERROR('%s Exception in on_entry_state_generationfailed : %s' % (msg_type, str(e)))
                break
        except Exception as e:
            notifier.ERROR('%s Exception caught in on_entry_state_generationfailed : %s' % (msg_type, str(e)))



    def on_entry_state_sendfailed(self, context):
        msg_type = ''
        try:
            bpr = context.CurrentStep().BusinessProcess()
            acm_obj, sub_typ, msg_type = FSwiftWriterUtils.get_acmobj_subtyp_msgtyp(context)
            max_retries = FSwiftWriterUtils.get_max_commit_retries()
            doc_id = FSwiftMLUtils.get_parameters_from_bpr_state(bpr, 'Ready', 'DOCUMENT_ID')

            counter = 1
            while counter <=max_retries:
                event = context.Event().Name()
                if event == 'Nack':
                    try:
                        if self.ignore_migrated_callback(bpr, 'SendFailed'):
                            self._trigger_event_on_parent_bpr(acm_obj, 'Fail')
                            notifier.DEBUG("Ignoring migrated BPR {}.".format(bpr.Oid()))
                            return

                        FSwiftMLUtils.set_document_status_on_acm_object(acm_obj, 'SEND_FAILED', sub_typ, doc_id=doc_id)
                        self._trigger_event_on_parent_bpr(acm_obj, 'Fail')
                    except Exception as e:
                        #raise e
                        if 'Update collision' in str(e):
                            counter = counter + 1
                            notifier.ERROR("{0} Retrying after 8 seconds due to update collision".format(msg_type))
                            time.sleep(8)
                            continue
                        notifier.ERROR('%s Exception in on_entry_state_sendfailed : %s' % (msg_type, str(e)))
                break
        except Exception as e:
            notifier.ERROR('%s Exception caught in on_entry_state_sendfailed : %s' % (msg_type, str(e)))


    def on_entry_state_sent(self, context):
        pass

    def on_entry_state_acknowledged(self, context):
        msg_type = ''
        try:
            bpr = context.CurrentStep().BusinessProcess()
            acm_obj, sub_typ, msg_type = FSwiftWriterUtils.get_acmobj_subtyp_msgtyp(context)

            doc_id = FSwiftMLUtils.get_parameters_from_bpr_state(bpr, 'Ready', 'DOCUMENT_ID')
            max_retries = FSwiftWriterUtils.get_max_commit_retries()
            counter = 1
            while counter <= max_retries:
                try:
                    if self.ignore_migrated_callback(bpr, 'Acknowledged'):
                        self._trigger_event_on_parent_bpr(acm_obj, 'RcvdAck')
                        notifier.DEBUG("Ignoring migrated BPR {}.".format(bpr.Oid()))
                    FSwiftMLUtils.set_document_status_on_acm_object(acm_obj, 'SENT_SUCCESSFULLY', sub_typ, doc_id=doc_id)
                    self._trigger_event_on_parent_bpr(acm_obj, 'RcvdAck')

                except Exception as e:
                    #raise e
                    if 'Update collision' in str(e):
                        counter = counter + 1
                        notifier.ERROR("{0} Retrying after 8 seconds due to update collision".format(msg_type))
                        time.sleep(8)
                        continue
                    notifier.ERROR('%s Exception in on_entry_state_acknowledged : %s' % (msg_type, str(e)))
                break


        except Exception as e:
            notifier.ERROR('%s Exception caught in on_entry_state_acknowledged : %s' % (msg_type, str(e)))

# ------------------------------------------------------------------------------
    def on_exit_state_ready(self, context):
        pass

    def on_exit_state_swiftmsggenerated(self, context):
        pass

    def on_exit_state_generationfailed(self, context):
        pass

    def on_exit_state_sendfailed(self, context):
        pass

    def on_exit_state_sent(self, context):
        pass

    def on_exit_state_acknowledged(self, context):
        pass



...

  FCashOutMain
"""----------------------------------------------------------------------------
MODULE
    FCashOutMain : FCashOutMain for listening business process updates and settlement updates.

FUNCTION
    process_bpr_step_update()
        Handles the business process updates
    process_settlements_update()
        Handles the settlement updates

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
eNqte1tsXEl63rn1lc1m805dRmpdKKk1MxR1mRlR1mpN8SJxRmxq2a0ZT3knZ5tdh2STfVOdQ2nYOj12ws3Fxq7NDZwgMAyjaRgG
FljkIchjHvIQ+CHw0z4FB4vAQRIEExh5yT4ZQSb//9c53YdNanaTeDRdVafu9VfV/3///xf/s9L33wD8fhN+dl1TFK4whatcq6pM
pVhjGsU60yk2mEFxhEUojrKoFelEuM6NI43FIC9SjdcSLFFLsmRtgA3UUixVG2SDtTRL14bYUC3DMrVhNlwbYSOqwqNslMfYWOue
ZXTGjxQ2YU3sTLJRCKfYGIRn2FkIz7HzUP4OlF+A+CLE2c+UekpV8N/nSl2blbO+xC5RHGdxii+zyxDHq1dqV9gVVda5yq5SPM2m
txSe+DOVXYM4CfF1a9i6xgcONHYDUtcplbMudW7y1JHK3qXUIKTeo1QaUu9vKWwGfres2QOF3abwDoV3IfeedWNR+eKQfdB6aH3A
h16ph6pwrHudD6H9R5CTOdKOVFWB1PArBcoOgzI+EpTBKp8ZinX/UN3/j6rC5lSldceKdR7w0c5vWA+tuQP1SKU+Yjvfkd98jI//
WMOWnytcY3O/PVdPynhWmYVRXq7zCT75Q4U94lP8DMTf5Wf5OYh/k5/n70A8zy/wixA/5ll+CeIFfplfgXiRX+XTEC/xa/w6xMv8
Bs9B/ITf5O9C/JS/x9+HeIXP8FsQf8w/4rP89g9V9gm/z+/ye5B6xuf4B/xDSK1yraDkHvynfw2H7v2/w/+Sq2uLL54tJbPw3/JC
yd5e23NWS5V69sHxz82GyFYrtmPVK/Wt7MaeXalbtp1tikYZ470mLzmWnS3Veda2HKdq1ay6E2TPJJPLL/ILxZW1PA3ktzI3msKE
LpumrHcjR6X431PoqAr9OdvWWwc71lVvUPvbezs5u2Ty06X1AsztQXZ6fTqZXF8qFNdXaLaFW89WVleK85R+kEzcnsnO1/eztQav
bFbKJafSqEOvDdlxWVSazi2rXhb7TcfiWGuvat0qV62SyDrWl0623OBW9nXF2QaCYpNyQ1jZip2tN5ysvddsNuC485lk4s5MtrgN
+bKHoEZ5z3YatUqrtFG1oNJdrIR91JqNOi6nVtqneq8bYjdbsrPWl02rjBPBEWFn+ufNoZmcfG+oElDFtkTWqsM8/i7P2dfIOvMs
hWeqYOEO1B02HhyxfMOpbO6bC436ZmUrl/SmCtuNvSpfbJT3aEsfW4tW1YK1eFPrVq3xylprWkIuI6jjTa3Ug/SCsKiw4JScPdsb
W6kXYEFBqZ97eaV+spe+llP0fdpo58pUYgaH0wwOIlwUb3TLcsxSedesl3ZNe29jB/bBu1RqNmEWZs0xnf2mZZslzi1ubuybcmMt
4V3+lk7NZknAwCy+DpQo2RZvjT2H7vA2LpTqZatapRnmVG9oeelLxxL1UnWNRs5lWGS1eHv2tozuUjR3x6NoDr/uzM7K6A6LU7Sw
9illzN2h6PasR19U+e7sPS9OZVBLpuYwBUVzc3NemnrNlwRS7JWF33dC37kUizVLZXt2do7FyqWaM/vBR0HO/SDnPkv6OWbxTpCe
o7SsMBtKf4jpwaB+YX51rRB8zvmfQ/4nTNMvD7qRn2eCc/jEqvs77Z9FOKKF15VN5zNRAZLOrz72s8dkdqFR3cPafu5Q0E9wkiMi
A8deDGMwgsEoBmMQeDpUy+l9uUjfL+fmWjeWvixbTew5+3q7AvcSDpSDW23DuYQ7v10SDnDoN+2vVWj1U9WLW1+WzUp9s1FWQ1DF
gJ8OvwWEK1kIHKWjusqR2lZdtaMdKW3N0TuGC6Kzrbt6AXrK5yKeXqpteOdqG5tm9zxublrC3BSNmgkss+TFsRDKuDcqCdG7IfPP
V9gAEGp+FQ5uacvKGV7UdgRMHjCNzHpM3QHckZ9wStkADFnyW/xUERdhrn87FBZAM81975y8jaHOl2FGBeq8gEuM46LVpBqHn7gE
6XI/eFMDaiSJGgcKghwQrFrrOdIWqLq5Vy8T4VHiIZP2OeOxyWRfIJOsW8BcgYHCRQb2vSEFADbdtoCv5/EqVuoV4AS1DSKWJWhh
oQD3xIvQwAxnpeEcNXHl/27q14jjH5v4KZOmCZ0JOIpPe1tuKszw1KkZ2LMZmtn0aTOLBjM7CwFXO4qjOtqBCqFOoQGoS8eZ5lvP
kzijbKEnhJ/LCQElH7xpZ2Xx4+frofwge734pHCiCI5rFBZcKzmeXrXqXqawVDSX19ZNEjTFZ6veUDgHmnuj4QzsFDJPXX3UJilQ
7q5fFe/i+vXQ2mP+NaP1PwuumLrjXymu7mriKeTpkGdAnoHxTqQdoTjajroRJ3ag7OpQK95JuFHX2CQkS3hPb90vl6rVDZAlvf11
tkFKg8jGEnkAA2BklcrbWX9nWcy/I/lcUuDGsEk4htYroDnJH9NpmP69TPZyQd/YMMuN5n5wQLxYtz9fkDFthQs8g95EcLy2GtDN
qr1lfu/F0oslLyolXS7G0vLYm8Cw6nWr6kVoJGAwYoul5Kj+HAZo0MamWbPhA4Ku3IziR4X3b86QbB4MsLGJG5CmU5oCBoC/uA5s
4E7/icXTmgx27L/TiW3Drjmg43DlQG+rrR85Gu6XY3DlSC9FnGgnxvVO3Em4aqA/QP0kN6i+5mriR67GI5NKW4eWA07E1Y9Ao6B2
UVefULAF1IhBDcOvYXRrxDtx+KJe60nISfEE7X+yjdrMU0NxBvf/i6q0I6DLzFL5ALRQ3YjUeJzoThpmFgFNJsUHu5oM1P8qApoM
xajJuAqcp3R+2RsNZBTw0XWrbIFQFq3xdaIj3jVkWZVStdKyOMsgr0XsZIlCY0+UrVbm1uMXhZX8UqHwfH1tAaLWVEGyvg15Fv1t
y07brYFbcNOKz5ZWl/LFt1V7026tflqq7lnZxmb2ev9w1/Gc1yo2wKEtCXd9xva6Uq2eCnZniq3vLCB2pNLeWrLA4rLysGQfXn/T
vv4IoHyzGXT0GjqoODMwHTGBR2wSgtyQFwO5W3Ic4Z1fXpgvPO0tx1xYyy+vPDGfz6/Pr8rrNQY35+WetWeZxPR9ho/Hz8tSazPU
fO1F8cnaSv6Jub40v7i07sXriIArgAGNlfzymrhGEAHuhjduo3w1bR9pIAws1Wy6p3I0q44KgRdZWl9fW/cSXeTgRRaXHr94kouy
4Z4AorkBjJ7eLMMpCGlNZsO/xkHFeqlmsREUy1ALdwSmgFvCBkhr83nBSKiH4MJGYNkN0XdfxWW8bvibIU5qwC3V1KhqfGNoY1pK
M+jOpjUMRzQU4Wn4Gd9EtRsqtf215CGccXEGt071rmyT0tdbV2imgfA7jeuLqxAchlj+1f7Bp8IMJKtLBsK1topM5EA91MV5+NIO
tdY/dwBfcZ3YhA4Mxjij4A+YgEyrkAY200FhEAXhEHEjnRigsqgTd6OdxJFyoLZjbqyThLw4xAMQJyBOQZx0Ezyyqx2q4q8hZ9BN
cmAI7QF3wP6Z/x3t+47J70NN/MwdoHmk3FQnzeNHamcIehx0Mp1hnnBGXBDYEA4eqK6+6bMvZ3RnzB2ENmk3jYanzgT8JuE3daQ4
Z14p2KtztnPOjbkpN36kf19rD7UzbpwncY72TXdI1tg533nHTcNahyl9wR2GNLBQ56LfR9bNwLhyjEtHCq3wj+EbxuID9PW7zuXO
FciBUmKaaedq+NuZdtOudgCMsL4IK7rGU53riHCJCSt8cBdNR38FKRXYseLc6OTQNIVs82W8PkIthrAFsmjq/6+A0hkYGekmKZkB
So64I4eafdbPGT6RMxLkQKsRovaoOxqi9hhRe7RL7bEwtanmmF9zHGh/0x2DHibcCaLRu5333Ak+DiPInEPnfXfCHYeedJjveep5
4vSeQaTkQaTMHGr7/wuEyiQIlXtQ/xafhD0YcScP1E3N3/HMzqzM4SqfCgmWya8mSbBAjILFUTu3uUEiCwWp0bnj3HVVfuYI5vIy
jlcydzZPXNVTxF28YXix2FCfHIEMX+v14R0bfTx3x+yvFS0sfS//eL215NdCpQhZu3+lsw+n7UeEgE9YjagE4JOPReibRVfyhaX1
IhuUaowvGlufv5ltZ+eLhWy5K0pAEvgGI36y7wZxvvekNHHEfra0hYi7tAlKY/Z+1rbKjTq3Z+C/rxE8fo2KSuv7b+QYvPJrjzCT
LexWmk1cdLO3fpCcIDi7JKggLmbJnrSBdJf3sTRSNSSXv/urCBkymJ1OwkJxvviiwFJhZaO19//ZbbayVW8IpIRVLu3ZFgr4hnBA
2gF5ze1GYxekubMn6lAlj4asVwgiWnPTdranOzfK5T2BnUglOkQyEqrdST0AtEIinxmN3dJ+7p5noK1TvI+n9R4GH2CAYl6cw2pR
1ILNpjiPOZd86b9pyk0KIeuhJ5ZTBFi9tvmCNpaNQ0YeJGuQwYsovNkE1sPUfJ0vwFxlti3bU/LxPjZjKciYB0BS2diD3rB4AVdY
dwhDiY9wPvcxmCMAUSrXWGa572J5A36bgmM1vQiauiw4IhgtoGHBM3AoAB6YY5KtgdCAiTTx/Juy+uyFU6na7DKausqyP2nLLZXL
DYF2KaQD4gfPN5Yct0qx89jS8vMC0pE2CgCD4W0ITGUyt6+qN1548fz52npxadFcLZqrwBzmnywVPL2CCsYaKAw5SQLOxU1MTb7F
6uwZn82v5yXiMpwKrDxiVy2gzMBy79p4w2E70FM4fjYbPnEkvbNvN0eLh7gtv4HBd2hizUYzhOKAanBoxYcIXqa8GPCdOrRhcVR+
UDUCPUwSQzzCLm5TFxt7m56OClOccBqm0kQw0KPkqGzQ5yimQwct6siDNYhEoLRZtR2W6H6yGCYbFe4nNnZYZrtkS4LhBd0CteDC
r9jwGOwVNR0Lga7eaJn+XJYOA9EK94bDsJKU8ONVNnbEd0+BbuiW+yNEZX8mMSb8S1KY8v/5eiEZiFKUj78ooc2omv4mDsjzLORF
IZWhFkl1AsoyWlpFjGqo2jfaN4YuTUxRyjEgJ2okqZ/g1+svjfUoL61hTkrPQI83NJwXzbeshaBlJAwt/1rqplqLSbMd1440ru9q
4h7qp9zoGKBHKp0owkQJbz5TuF5QQPhGeJSDZunEHNBaneRm/JUq1mWpM+AirNRd/TMQzQAFUvseAAEDgAAH8BdB0PBKEf8S4MAg
tDokoZ9sG18Z1FoDYDIgTYZyxBOlKWhJvQRA4ngdmULgwJMADQZboIQiHwc9Tx7wbGUzWwIxiiKzIj0VJQGKnwXyteFsW+J1BcSB
8Bstl6q2JeaRBSd7Mny5dbcrKOUFyPI9cnbI04QiMySAHmQfgsB/5J0NaWhSqoF+9mxpvrC0yK6dLHu+lF9EHW5hPr+w9OwZeYm8
8yfrzb8oPl1bX4FevMsnS/NrRXN+4ZP82mfPlhafLC22zuRRPS5vZzdRaIGo5BUBDK8h9vOtFQQm+cYxOzDyZhCpe3UuTX++UCNa
YnXQjivOCTdT6z6KStTUvk1M9jvLUFLmhsTHSO/p8rZV3g0xf6Qs8gBf8/L53kcByyMWS4JJ5Ml8JGnRT2lv8ng+UplI7E0dLwiR
9cLxkn6SegMhaSIZ8bOAG+ciXmxTiiTxBWZ+jnMLTNXSVeOpVr/56YxNHqpgrehD8xf83/Du3iBDFLALNaNOweVHlmD876gOsRZF
ZkIsIgO/CVVUkA2ofSaqeMAG/j2pt4CyNbTcw9VVyWYP1xzwP2hOi8oXf4HXuRPhcCW5dgbNUNFOzNXhC9nFx1x3FFc/QH0H6jnA
DGwGcQKu9w8AtRsFNEQlsX7bcA3xp/A1QF+gj4p/56Q6gzziYh9KJ43MJrjYsu3LC1BjCA1dvRpyvEDnCOq5aNKMtR6Qb7NrzpQ3
mUztq0V5akvNZrVSRslAJxpQjI9//1Z9n7QHT1stLrc24QSvIEwMXXPoMHRooUKAH5efo+HEQkB+XXoXH1u+u8fij/fneQkw46vF
RtkmoxN0guyiKABUfv7/Os7ytG32XEpr9XDPxLhyGXkf6D5dKpeq5b0qgq5jwAeWH2Ae6ajqwZIFv0VDsAnyOXYJF3QBYAay+vAL
QTdvUlqWpPWcTK/yzNPd8MZC8Oq3AnjFpuGYdy0qwR3Z6nnN4H/oj930b0dQY6NbSXo8S5LaHKgd4g/IFcT38E5GBZpzAf34vlKx
FdxMNn7qqOyyP+K3jdSHFiwIvsEb9iFdVpTweCkxzoBsl8gBpL2U+2rqGwMkf5wu9YhMq9THCQkeCa7uU1+CuyhvlY5yBNd4R4Mr
ednVuQZS9jJeCSjRjxS4xlNw/XQHrmAngpcI6t3kelt7eZMujpEv5jSmo09Wvz13ZzkXBdVLuqkzvRMRuLxPk00s0XWo07FjGQnl
JUFRT8lFiPCS0omKvSpNr0yrOSzO/cb9rHBiJahH3QVjnAeOZmd8Y58BfA5NfkBYVdjfSrS/5/M7NLZzdReABJnYr3EAPz8ErrcI
pIEvo6052o6+A5xQwp0f68jdBMPcTqTLzeC7E3UNHucJtEgQKZOtos918H4j4JDO9ZNqN0pNy+LSZr0BEpc8kL6g3as6lWbVynbN
iRP9jFzzF1YIvGNbsNtfjJD7VeHAHIXhqj/RXgJ7zKmgiqE3Oofe3Dq38dVGTvO0mVmWCkujfvInH6Jehs9AHr0PY/9PHLc1Y5r+
hfBduHKBqPvMPKw2gNPYj2Z6DZdBe6fNe07VvHjg1PmpzmI+/2Ex1EVgBiwDKpa15d898hpF5RMEL+E/RbB4LuYZG41GVVwP+Jv4
BGc7eorW5+Uw8+Sjh9O0vkHQfbeAR0lPVnBekT2wqbetWHxfakvNfqO0d/btZMrh8Z2iTczA/U9riPoB6WtSa0ir4u/3+wLjYfT+
r8jEgyJRom243x/jgeyoXTFtOBriZMDycFhF2iG/oGPAcVXQu9OOulE0B7vICaC0E3ejgLs1VXmZ/kypPwfsntj/GWD3GGD3+06y
M8DhMqBxGPqNhQx5yZ1BmYMXpWvIi7VjX8XqSRkTHo/BKYxDT8fEs2/SIqJnieh9sk9CUfSh7gTGPU8r3mnd6wOXlbovO80+5c5C
cmenOVlhut6XfC5N3FXUuqhxLzhK3qU+GL3khwtP59eLZn5+dcm7gGeqIcy3PKnxMl0jCBSjwUP8DnZP4PCjrqqeD4RTLk4nzZsO
w11StE9bjTfqu1QbKJB86vWEmJc90YjCnq3Fy/RPWGyf4qE+9y0UfdA7wBqpvGlSSlPkYEmDmit+v/8Anwkf4LxBwks/1Fv/A1RK
FFcojgzgvBE81q7hRtDe/Bm5XVDphBrPeBRqxE6rARwdah3QsbZ/4LeKCkHOVqVj+Nb7SCeKiqvMOVD9IxzHayT+rZNwfZ8IXKfL
7TjUToLS2lfbjaOnBK7Jn8Cskk5qU6Pnon/qRqHVXxJWHuQDcAlThJXTnSGYmQ54GuYKfQFy7WTw4eqhame632m4oj8HeiSO1xDv
OcM7I+1EfSJcE/IfQ/5oO+EmxM9plkNyjv56hjtjMGYCLnnSTaKvgzwM6NsY7kxIfwLM/+d+2QhQ9ud+yagsOdTqRVjdmDPpr+7f
wDqmoM8olkPph1xpDzhnMOcAe/4PzlkXGYt2oLcHkBKHGggioEU7Basa9GdPdEEfj0+bc24a2Mb4rnGoiQnIHT+DfqJ05zxpFxPk
FXnE/bWjfkHpFKVTzjtIVxr9F3yyjRS44FzcyQJ9NLHjkn/nULN3+BSUDWEtWCNCozNAlwy0GAYaXtm5Cr2k8NEtSHj0qOhiEVqM
uiOdaWwvfom1OtfkN8x+zB0jqp2n2f3SuU67m3E1N+UO8Hd+HG2Pkxfsb2C0G1ACX7jzMN4o9AtjdnLuiJvxvStytGGg9QXnpvPu
pg7Uhjx3ovPekdJ5H34zMNZFP3f0ULcXaacm+CinE+UOQ4l4yyyw5NgsYPVZ2s9fAH1uHcnUYHvyGDUmQ9SQVAvPGKndnbF/On7R
N99LMvf4TA/Vl78AwVIEwTJ7aOw/BdEyBaLlAZzf2xz2RZ5g2N+pnm7nRHaiMoeP8yshL9HUV1PkJYKYhAv6ga7myVKTUwEwVBu2
xVliAeAHvexkiXX0kpQrVSuntoa6bxuh3p6wWHJ+z9kGDQwaeRFq3LoScjH4WlmfY2Habs3Sw1Hykpx4xNlfvcJRAuFzp54oE/8A
AweF+UP5OBS6etwPE7GjQr9IxMxG8BiCRfCFxT5LdNeR072hfMOZL+/WG68BMaFhNb5u7dAzBi/T0xuXS0ATzpLrVqDZiB/gpEhU
7kJQXBbjmN7HoIXBG6Sy5g2I0uuuIpgMASLE2DlD/JjwIz64kGOIH5EPpIDICiAH9jREPVFNgV7x1nd/DbPRW3aDd/0suTskfMjy
IdBWIta60ranD5LQR/kkjMCvwaLyIbAod6FBHbNnfDHf22QzUFfMSt0sdQ+PlI89KCEOsPl1Qt7mr0QV4ofY5B9iQGiBY+ObJ43+
vinIrDfoHXB3gwkzetkTYNN/4FsRpIY7EjQ3MLBJD16xP6nU+dqmWMK8Ilk7V4u+4mZ75Cw54a7BPgObF2Jv0SYCSogvvsKcBL0L
K3GOM7XIeNebFLtIsLzpP/z0n3eEkIooYR8bGCxj8ASDpzRhcmJBRz2vR+6MhOpfBO4LQkLiH2Hwj7sYfjjYNbvYkDvNRk5eXPFP
sMHvYfCHGPwBNh0s45jBilmS7B70XJWNSZAvn48GnTDNLrNkAA9huamwruEZm9XSFpsMyNGPxn4Xh0yFs9lgYLWhiZyG18SnEHyC
uOxvug6KuC4dFFEtrgYpND2gopHWJnx3xYSapAcxiOEuQGkG0qhLG+oIPptBowWk0FFh+G4Lg5QU+Ywm47s/MIf6pnRc1VSNbJIG
OSmi3xhkmUQlJwo1/dlQfY1cGX6JFu3VgrnKsXq9yTZpdQJmj6rTGPRLKyfmf0zxT4QB58eqfD3JQTsGfYWsIiEtxuhEOL6q1BzQ
gvDvp/BRDY+gTuXquwi5llvbUCuGZlLxA+opCjoT9eO/r1uErwSIwCT88DFNxEl1UvQgOupGOoMgGGO7mv3nMAKAUJkzodDzHYCc
4s9Bh1LoCcW/ABGZPlT3H4GIjIOI/ApAqObGyXPyS9fgkY9Qu1M6QzyJb/X8N4P4LGOg6xGBll/FX96rf0j1UrTmeGi9yo6fA1pb
+F0ftAJBvRzuQ8b+3yst4ze99Ws9Bl4dEpInrBvovgsz6xMVQG6NhA2H/jv3NGh7ILhrFWfdcsS+eByIo9aZrp20VtkiIxy92H3T
nmEJvkfGScdqZbock3gWiOmMdIdny41qtWLDXW/dQ9cFdU9PCI6/pAi8OXt9rQQepNbCryGivo0WPTE10i+N8l0VNNm189r0RIBN
yRcLZrBwM3i5K/0exzmkNxK8lujtjxepNl6DmthzFK9jgLajXIIYjrTLjUq77WvaEbMst2SgVvrSFECuimWL3yIBIYlL7/hSvrYq
Pe9pX1QE8zuNUz2H4C+RU90jTnXWd5gm4ZYn4WZn6HuMcjLkzcCcNPIsuO0j6lWNeihH+swj3afi96VpNMLpKvPIn+hwBRVxzzeY
xND+50Y7mhsDbKoBatZd4wCfTUfgaEdbc5Jvv9Vuh6cZ0q8qaLoLe8TsPMvIE32nZm9JWRjk3D2Rc6+bk9O/JjiIR/1rhCM5XUrp
FNmWQFLm4lLB3wwEHJtCZ1u1Akehz4rFkrxSEvsm/lEYSTA24MshXsFHlfW92oYlQib5E7brn0DwX7sGVt8mRV5nZLY/IZCdz6kS
bms+7M57MRNhkWlKHHG2e8bewTkcu+nPGmSyeNFFZPXjYAw3VuBuCnwBL+IBmqCX4WIgoEwPIrDJJ5bTb6degpWKl4QYAvefEHR4
e849gnos0+/Tk9jrHej05F9noSkbu2YTp5exi6c2682JTb2tVILGf4bBIKGO4B6TT0VUA98iGz/Nf1JgY6e9WhFNbPZHBCmOPSx+
0H17hE+R2PEH96A5+A/udUCe9NxFYml87iJWMPhtDPDBrfinXePWdpe99Pyx3wneMdGfntBfedCfOtDzZXp+S89g6cGCBO1WAE4J
0ko0/2nAOOgAnvonFfGH8gH3I7SS28jTjOG42v2npdTZCLlbAA1F/X9xQhSIj/AfOmniGvwDfpOMwM931FBdTeKQJGAhfLiRAQ71
nhaPxSNxI67HB+PvQFyIT0E8GB+ODyffJC/+H708dY8=""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FCashOutMT304Callbacks
"""----------------------------------------------------------------------------
MODULE:
    FCashOutMT304Callbacks

DESCRIPTION:
    OPEN EXTENSION MODULE
    FFXTradeConfMsgCallbacks class for user customization.
    Business process conditional_entry/exit and on_entry/exit callbacks.
    User can override the logic written in the base class FFXTradeConfMsgCallbacksBase

    If user wishes to add some extra processing for conditional entry state
     e.g. 'ready' he can implement method as
    def condition_entry_state_ready(self):
        # Custom logic before core logic
        super(FFXTradeConfMsgCallbacks, self).condition_entry_state_ready()
        # Custom logic after core logic

FUNCTIONS:
    For sample state xxx there are always the four standard extension points:
        condition_entry_state_xxx():
            To control if all the pre-requisites to performing the action and
            entering the state are defined.
        on_entry_state_xxx():
            Is the place to perform the action.
            For example, the on_ entry_state_matched is the place to set the
            confirmation status to Matched
        condition_exit_state_xxx():
            To control that all pre-requisites for performing the next action
            are fulfilled.
        on_exit_state_xxx():
             Is the place to reset values that you set in the state entry, if
             you are leaving the state to go backwards in the workflow.
             For example if you exit from the ?Matched? state to go and re-pair,
             or to manually cancel, then you would want to remove the
             confirmation Matched status

VERSION: 3.6.3-0.5.6048
----------------------------------------------------------------------------"""
# The context parameter is an instance of FBusinessProcessCallbackContext
import FCashOutMT304CallbacksBase
import FSwiftWriterLogger
notifier = FSwiftWriterLogger.FSwiftWriterLogger('CashSetlemnt', 'FCashOutMT304Notify_Config')

class FCashOutMT304Callbacks(FCashOutMT304CallbacksBase.FCashOutMT304CallbacksBase):
    def __init__(self):
        super(FCashOutMT304Callbacks, self).__init__()

...

  FCashOutMT304CallbacksBase
"""----------------------------------------------------------------------------
MODULE:
    FCashOutCallbacksBase

DESCRIPTION:
    OPEN EXTENSION MODULE
    This is a READ ONLY module. User can override the default logic in derived
    class FFXTradeConfMsgCallbacks
    Business process conditional_entry/exit and on_entry/exit callbacks.

FUNCTIONS:
    For sample state xxx there are always the four standard extension points:
        condition_entry_state_xxx():
            To control if all the pre-requisites to performing the action and
            entering the state are defined.
        on_entry_state_xxx():
            Is the place to perform the action.
            For example, the on_ entry_state_matched is the place to set the
            confirmation status to Matched
        condition_exit_state_xxx():
            To control that all pre-requisites for performing the next action
            are fulfilled.
        on_exit_state_xxx():
             Is the place to reset values that you set in the state entry, if
             you are leaving the state to go backwards in the workflow.
             For example if you exit from the "Matched" state to go and re-pair,
             or to manually cancel, then you would want to remove the
             confirmation Matched status

MAPPING:
    Below is the mapping of Settlement status against its corresponding document status.
    Settlement Status                   Document Status
    -------------------                 ---------------
    NEW                                 NEW
    EXCEPTION                           EXCEPTION
    PENDING_DOCUMENT_GENERATION         PENDING_GENERATION
    PENDING_APPROVAL                    PENDING_GENERATION
    AUTHORISED                          PENDING_GENERATION
    RELEASED                            GENERATED
    ACKNOWLEDGED                        SENT_SUCCESSFULLY
    NOT_ACKNOWLEDGED                    SEND_FAILED
    PENDING_CLOSURE                     SENT_SUCCESSFULLY
    PENDING_CANCELLATION                SENT_SUCCESSFULLY
    PENDING_MATCHING                    SENT_SUCCESSFULLY

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.

----------------------------------------------------------------------------"""
# The context parameter is an instance of FBusinessProcessCallbackContext
import time

import FSwiftWriterLogger
import FSwiftMLUtils
import FSwiftWriterUtils

notifier = FSwiftWriterLogger.FSwiftWriterLogger('CashSetlemnt', 'FCashOutNotify_Config')

class FCashOutMT304CallbacksBase(object):
    def __init__(self):
        pass


    # Conditions return True or False
    # Name convention is
    # 'condition_' + 'entry_'/'exit_' + state name in lowercase and underscore
    def condition_entry_state_ready(self, context):
        return FSwiftMLUtils.HasUserRights(FSwiftMLUtils.get_operation_name_from_bpr_context(context))

    def condition_entry_state_swiftmsggenerated(self, context):
        return FSwiftMLUtils.HasUserRights(FSwiftMLUtils.get_operation_name_from_bpr_context(context))

    def condition_entry_state_generationfailed(self, context):
        return FSwiftMLUtils.HasUserRights(FSwiftMLUtils.get_operation_name_from_bpr_context(context))

    def condition_entry_state_sendfailed(self, context):
        return FSwiftMLUtils.HasUserRights(FSwiftMLUtils.get_operation_name_from_bpr_context(context))

    def condition_entry_state_sent(self, context):
        return FSwiftMLUtils.HasUserRights(FSwiftMLUtils.get_operation_name_from_bpr_context(context))

    def condition_entry_state_acknowledged(self, context):
        return FSwiftMLUtils.HasUserRights(FSwiftMLUtils.get_operation_name_from_bpr_context(context))

# ------------------------------------------------------------------------------
    def condition_exit_state_ready(self, context):
        return True

    def condition_exit_state_swiftmsggenerated(self, context):
        return True

    def condition_exit_state_generationfailed(self, context):
        return True

    def condition_exit_state_sendfailed(self, context):
        return True

    def condition_exit_state_sent(self, context):
        return True

    def condition_exit_state_acknowledged(self, context):
        return True

# ------------------------------------------------------------------------------
    # Entry/Exit callbacks do not return anything
    # Name convention is
    # 'on_' + 'entry_'/'exit_' + state name in lowercase and underscore
    def on_entry_state_ready(self, context):
        pass

    def on_entry_state_swiftmsggenerated(self, context):
        pass

    def on_entry_state_generationfailed(self, context):
        msg_type = ''
        try:
            acm_obj, sub_typ, msg_type = FSwiftWriterUtils.get_acmobj_subtyp_msgtyp(context)
            max_retries = FSwiftWriterUtils.get_max_commit_retries()
            bpr = context.CurrentStep().BusinessProcess()
            doc_id = FSwiftMLUtils.get_parameters_from_bpr_state(bpr, 'Ready', 'DOCUMENT_ID')

            counter = 1
            while counter <=max_retries:
                try:
                    FSwiftMLUtils.set_document_status_on_acm_object(acm_obj, 'EXCEPTION', sub_typ, doc_id=doc_id)
                except Exception as e:
                    #raise e
                    if 'Update collision' in str(e):
                        counter = counter + 1
                        notifier.ERROR("{0} Retrying after 8 seconds due to update collision".format(msg_type))
                        time.sleep(8)
                        continue
                    notifier.ERROR('%s Exception in on_entry_state_generationfailed : %s' % (msg_type, str(e)))
                break
        except Exception as e:
            notifier.ERROR('%s Exception caught in on_entry_state_generationfailed : %s' % (msg_type, str(e)))



    def on_entry_state_sendfailed(self, context):
        msg_type = ''
        try:
            acm_obj, sub_typ, msg_type = FSwiftWriterUtils.get_acmobj_subtyp_msgtyp(context)
            max_retries = FSwiftWriterUtils.get_max_commit_retries()
            bpr = context.CurrentStep().BusinessProcess()
            doc_id = FSwiftMLUtils.get_parameters_from_bpr_state(bpr, 'Ready', 'DOCUMENT_ID')

            counter = 1
            while counter <=max_retries:
                event = context.Event().Name()
                if event == 'Nack':
                    try:
                        FSwiftMLUtils.set_document_status_on_acm_object(acm_obj, 'SEND_FAILED', sub_typ, doc_id=doc_id)
                    except Exception as e:
                        #raise e
                        if 'Update collision' in str(e):
                            counter = counter + 1
                            notifier.ERROR("{0} Retrying after 8 seconds due to update collision".format(msg_type))
                            time.sleep(8)
                            continue
                        notifier.ERROR('%s Exception in on_entry_state_sendfailed : %s' % (msg_type, str(e)))
                break
        except Exception as e:
            notifier.ERROR('%s Exception caught in on_entry_state_sendfailed : %s' % (msg_type, str(e)))


    def on_entry_state_sent(self, context):
        pass


    def on_entry_state_acknowledged(self, context):
        msg_type = ''
        try:
            bpr = context.CurrentStep().BusinessProcess()
            doc_id = FSwiftMLUtils.get_parameters_from_bpr_state(bpr, 'Ready', 'DOCUMENT_ID')
            acm_obj, sub_typ, msg_type = FSwiftWriterUtils.get_acmobj_subtyp_msgtyp(context)
            max_retries = FSwiftWriterUtils.get_max_commit_retries()

            counter = 1
            while counter <=max_retries:
                try:
                    FSwiftMLUtils.set_document_status_on_acm_object(acm_obj, 'SENT_SUCCESSFULLY', sub_typ, doc_id=doc_id)
                except Exception as e:
                    #raise e
                    if 'Update collision' in str(e):
                        counter = counter + 1
                        notifier.ERROR("{0} Retrying after 8 seconds due to update collision".format(msg_type))
                        time.sleep(8)
                        continue
                    notifier.ERROR('%s Exception in on_entry_state_acknowledged : %s' % (msg_type, str(e)))
                break
        except Exception as e:
            notifier.ERROR('%s Exception caught in on_entry_state_acknowledged : %s' % (msg_type, str(e)))

# ------------------------------------------------------------------------------
    def on_exit_state_ready(self, context):
        pass

    def on_exit_state_swiftmsggenerated(self, context):
        pass

    def on_exit_state_generationfailed(self, context):
        pass

    def on_exit_state_sendfailed(self, context):
        pass

    def on_exit_state_sent(self, context):
        pass

    def on_exit_state_acknowledged(self, context):
        pass



...

  FCashOutProcessing
"""----------------------------------------------------------------------------
MODULE:
    FCashOutProcessing

DESCRIPTION:
    OPEN EXTENSION MODULE
    User can write custom logic to be executed in each state of the
    FXTradeConfMsg business process. It is derived from
    FFXTradeConfMsgProcessingBase

    The function prototype should be : process_state_xxx(business_process)
    where xxx is state name e.g. process_state_ready


    If user wishes to add some extra processing for conditional entry state
     e.g. 'ready' he can implement method as
    def process_state_ready(self):
        # Custom logic before core logic
        super(FFXTradeConfOutMsgProcessing, self).process_state_ready()
        # Custom logic after core logic

VERSION: 3.6.3-0.5.6048
----------------------------------------------------------------------------"""
import FSwiftWriterLogger
notifier = FSwiftWriterLogger.FSwiftWriterLogger('CashSetlemnt', 'FCashOutNotify_Config')
import FCashOutProcessingBase


class FCashOutProcessing(FCashOutProcessingBase.FCashOutProcessingBase):
    def __init__(self, bpr):
        super(FCashOutProcessing, self).__init__(bpr)

    def process_state_xxx(self):
        """ process bpr state xxx"""
        try:
            notifier.INFO("Processing BPR step xxx")

            notifier.INFO("Completed processing BPR step xxx")
        except Exception as e:
            pass




...

  FCashOutProcessingBase
"""----------------------------------------------------------------------------
MODULE:
    FCashOutProcessingBase

DESCRIPTION:
    Base class for logic to be executed in each state. User can override/extend
    the default behavior in FCashOutProcessingBase class derived from this
    class.

FUNCTIONS:
    process_state_ready():

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
eNrVOktwG1dy8wMwAAESBEHwI0oafS3KFiVrvV7L0WpN8SMzJVFaklrZs07NgnhDcij8/GYgCfDAqSz3sJXKVnjIJbkEOO4lSeWU
SqX2kMohh5z2kMMcUkkllcruOSfn43T3GwwAkrK9a+0hZM0bvPf69evu1/1ed7/5V+nIXxye9+Bx/woKJpkSk5lSlk2Z3oqp0Fut
aIokS5WYqckCIm7G7XgnzlSmdRUzQW26qdM7aSbpnTJT9B4xR+idNtP0zpgZeo+ao/QeM8fonTWzrbyd6Yx3JTMH7wl4559I1bQs
4f+HUlW5Id2TWIzFfySxuD15oJoFpmxK84l/+XNFkq69wr/Ug4fLj++vvJsy4G91qejuPWx4j3itZLuuU929W3TtVGp5ZXNpY+3R
1trDdQGIzUapXHRdY6fGjXJt1ykZXs3Ytg37hV1qeDYznKphF0t7husVPXvBeOza3CgVq0btmc25w+zr9gvPrjLC5+3ZBrN3io2y
Bzj2is8cwAoITiYonJnZ3HkGE+3wWgUwOC6hor6FVGr18foSErwpKK4LDBZRY3G7yJpX5t9Npb63srGJbBmXNi6lUhsrm1sba2Lc
9ftrD9a2FkMcyTcXjMVq06jUmLPjlIqeU6u6yDKS7pa4U/eu29USb9aRd4BqlO3rpbJd5IYHjBqlGrON5w6QWaUhpRq3Dcc1qjXP
cBv1eo3DuIVU8uaCsQWshBh6EKWG69UqTqu4XbYB6BsIhDgq9VrVrnpGpdgkuOc1/tQourAIdbuEhOCMRvEY3QyGCeL7UxU9o4Fr
BGuykHqVKvYLtL91M41ruWl7ZbtS9czJ3tKu1zxnp2kt1ao7zm7pqNkqPbN9CwpbAnOVhKn+SDJVNEp4a8JQzBhLMB3ecZZkKXgn
2AiYTDoonKxFJeXIPBo8SzjXD6HwZV+yJE/uKL7cxd8qk6DUPHk/1omHbQmq6b60n6B6kuqpqD5CY9KAJQNtErWNUtsYtGWZwDJO
vxWASBYETI5JQLm6bo71SA/l08qsXnL71fmJILvdAIZQs0MNDzKrm8+dHe/B/ceeU3aDqV3bs4qlilXb3gedsNBarO06DxJhozle
sb2ixYpQvKiULVarBHmBYwUslFeL5Yc0NJhDVHbYdhSfqWMXtgYGwlU8y2vWbdF/ZFCgV9xd6g6mEdapevYuJ9203Ma26Mmf2DoO
eOvN3uRlx/UEhy7SK5iIOMyIxgpIpbhrBxmAAzKsZ8Vyw3aD1KMiLwLrNneDszslkLPlAgCoJ1iUVQMhI5ElEnQwir+xTdTnlUBz
7fKOqcI8P5V4ATTms5mT9Wyh3gx0C3h0PMt6E/ULoSU5LqfhGZWz8I9vrLfOvgRHb3xJHlDaEXjGekr7AZxwh1rrl57UgTOtg+qk
dkHBZMnT9rVOrCsx5WmM/7YX7yQ8fT+J/Z0UAxiGBhTzRvbT0JbpJtoybFEAxeJHYViiB+HLndEunFW+zA+hbYwfetnOOP5iOvTl
ulJXhZnjnQkcAU++q3ykgWpPwlOAZwqeaYTvzHSlziz+otopGKm0FV/pzHWlZel3ptuq+N057atoHPvTvnpb+vjn2Io15DDCc2YQ
j68gDVCbOlT4O152/2zHwL6u3NaAsnPYA79j8J48lPkWQZz3Ne8CthzILEk8SJ2LLCXkSZiBN3pfgvl6v2G2zmV4XvuC+hU20pWx
pRtHmlsXGcp7imVuSyC7eZLdCM5MdIH/AR7BI03yrh4qTUOW2nEY8zZQ8zobFdQAnfEDuavQGkv7sqizMZb9iYKjP5TYeDv+abya
Eu8b0g2JxucGteNQqf4F1AqHGv8PkgS8HamdOCKvE2XT+kvEwyaeKiDhH7E8bpMg2TdCWRV60KQ12kdqW28n2wk/eajyM78puQKl
oSyj2RNs8ickz0O5ukUS1ZrPhEQP5dY7rCAk90wCuvYI7zU2xaa7SqhZpOneVQF1IP9Qbn36m6KeZcQsjtxO9bVCtPmpIa3Qmm+/
Uq2Y+VrjL7LZVyKNU8NrGUrgVH8tu8MrGW++d+JKxvjN/zcrGW9Kr3Qlv954mc0N7g9sHFyR063pngdtwIknfHqDvOjW7Cc32kb/
uDI2qW8D+3b/5I/h7/f+9D1TebDF0ccKpFbuEXiYCLhrV21xvAexzSdrq1vmyPLDpccPVta3rLXlINU/0lubn7SNu482DHj1fBJD
uADY9K6xxZ3dXQgHAKv9DB3i1aIDENWQmE/aCwh37doVbJ+/du0OVE0NK61316rgi3NEVfQ87mxD8AL+dL0OyBaM7zn2c/LXQyeC
wh0G/hK4VgtBbIXzGm9dIbJKdh15wbDlhGADiPyk/Qs8vX8qB7r9ogQH+k5tvXURpYeEgLMODnkoE9sggfRmNWMPtm7duoWvF7du
AYJYHX2Xz7KP6wyBS7UyeEIwuRkjuX92bgPEwD2UB2uQpx9CLvUgW1c/GZy3bnPgrGJUbY9iCPCRHEZrA2S37F9V/PdCNgQXJ6zD
EEBvQTJDra2zKJpljFRO1q75hUCvYvTg2DyILa/cfXwviCMXRY+jaxSMr671XUjyhs2xnjcM4kExAAx5uk+4A3wJmOklWDHPflgP
tdNdrpUa6BQG08fbkJ6Ga+Yerawvr63fs+6trK9sUNAYxFxQp3pQOD5oCzxZPgsk8gTSGV+qVSqOxzEA4TEozPMNWi7rqHNv1fs+
q/rQYWahpzDWkK/LM4gqi8Uo4stHqg2ueKioLh/HrtiyU+RNU79neytVjzeDkaUGmANyZtd5DkGURc/UHzVEP9cRa5Kw9nFZRdR2
1IBg3B2MEtB8AxW6Am1tffVhkNhsiBAgRisZaOvATzCyVeSwMqIp4wl1skiXgmRkWmBvGxsPN8xCqJ22FaqrxSGAdYP0ao2X7K0a
oZkf4ZNIZKJWdyGmKQUxm9hTn9rNIBPRB8teMTMRI8hEINvm+DZ37B0wXbdRhj3IKXnmeN8mwvahph2ypSBl45ZAIygqEMUULvPE
CdvCHXTd/4kiUE3OKaPyZcWQdTUl5xVDmYWIoADPnKxDTxras7LyuQaQmjxNcUPuv6EeV+SUPAu1afmKXFCy0BuXNYAjaFVJQJwB
Y/Kfp1Rop/+8GP1f0J/IAVRazUEEMgp40rIi6wMQ8XhanlUEbnyG+84cGdejKh6LRik4qnX1ZbHRcZEMhTinBkOcfwNrOYy3nnki
Lqcj6kBuyx6EN3R8yxg6ePF9CF7C41yHFtVL+gocfPJTjZteqjPi41idXFelC21PJKZuSl66k2FaZ5RGicBJ7mAwkRXxv4fhTQ5z
DQdqWwN3oxy2JJh+oLIkOMEyv+tN7Oc7k77WlaF2laUohCp0pQIcrYj5QJ6S2MiU1I4R5JSv+TGgMe5N+3GWPlD+cA4c5ERnBmBn
kQakTZM06QDc7WruTXBzXDioe4lCGak+xTKCapghOvCr09AzB65Ar0eLXAF5/zQFSsBXWwcez+JcbAyoSHoGhEXAezvlp1iWOPp3
COfOs3Hkx/19+p0j3v4RVgH5v8AmWP5AhXUY8S52LoIjdMkHR6g94o8A1N8B/suI31f3X2P5rtpOVrODbTjr8Rai8Yqv+8muEjlK
8xAIrYKjlCZHCbmbjLhLR9yl9zOizmRWiBwdtZ3+NA2ODr3R0TlUWxh0zrYz3tXO636G1niW1mj2QIZ35kB+qkJY89ck4SkxE62K
mMeAMCcj6sdlCrVrvt7DBg6oSiMWxKriTKgX7VFou+4LjcMQ6pdQvxFiGSV9nAnD29n2GND5pj8WjZ49VF2DaAv1JNRio3PTH+3K
HyntbHs8WjvVXY3WTuO5aO1OsTlau9zx1aRZJ2BlvkErk4NVVdt54ClP8pkg+aj8536eJHeylL6aXN7q2SPNBFRAsKi0J9sFv8BO
z0jsDGiixv+I5jgbzjEZ6vkPB9ZsjGjS+A++FjXfJCqyXSWiwfhiGkB2b++/3fkW6P47XQnc+wI7dxsx3RJ7SXvKn2Lnweanoe3d
UGMxmNFxZ/Cnu1p7xp+BkOUHRNNv+Tq74M8QNTjbxYiPLMHj+zbM1fv9bfh9B57vfEH9PXYJgpPvRIGVvL+IfexSj3ug+XIUJI+S
tcWbPLS2/yQ6XnsldFwZpKN1h80La4UwaRZ0TVB1RbT5sxgmkaVfPW7p0a4Qb340tCu8/uvvCi9rDcPN+cNE8x/EXBRuviFwQrgZ
5z8jHu+ya2whDDeznSUKN0MOw3ATJXn91Uvyy+UYySvR/IMheV399eVF4298rfEZ9ubgmYt72PzN1sWez09xhwg3RVrb3e1FCYyf
Rgcvey+KI0U8s966fGJIemy8ObFU5Nu16lKt3qTOR0Vvr1VYevejTQxiqMl4IDxq15zYLD6zjwwIYqvFsgte7BZv2K3RzX7++BKz
WtqC98JrKc9fb81B1IPD2XBch3cuEF69A71LtUaZ0R3OjlNlRh0owVAJQjMXxhm1hrdbI1aG4kLl5g0IrT8wVWvrphnbXHzwcNPM
LNd6HN5dfH+r9c2h6PT5HogIcSKyk7FSqMrPgGxbp2GsiByZQQFGBPNthEHvrHV9qQgxJSAJu8D3dzyrXnM9a8A93qvVnhpYLLTu
be3ZvcuvYSEbxR1wy78qIjPb5/R98Bxtvmrq94uNRcZgbdUPbbd1YRg9cEMXYvcXHxtFhEJOzWzYvdK7vjN1XP9ljEUS4U1LoC4+
uPurpyEADzsp/MX2KA1BFcWMweLbLj+HMn3yqvIdiHsw56H3GvgczvPWF2cuaMkr7m4vyGSkGq0HR0cNBWxGCfRBXMp+GTahaefR
isePW/cFpPD7v47Iv6I0Wq8P5UBcXKxhLce7agNWHoFno3TEMVLnl/mNKHY/B/yXGmXkeOgOrH8HJ6J+cV3U3zKWwmE1jlG9ZxXr
9bJTwhvfHp5gcjBZ8WBrtVgC6KY5XqKEhbVT8XozUP5DLdvVINOLvERy45zrbKO19jIFVj8LF4aw/CKycgmLy1jglxOUmggSQBYm
EvgE1pSaG2i4TwVxMFTXc/k1bNb2YUcJtFod5o49J0opD4E3X/wdLPoJhEm6uQOx29yF4G8HtoVqyeZXsG9KJDREPseq7UTXeDrA
u2jGPI+IXkPguOPerdXK5jgifPDBjmOXmbjnM/MCfx+95RV3zcJQkqI/9bdE3mhAzO/DVuPiHenAnoTbj3kqykL0ttFeDsbd5dcR
z6me/heZgwLGdIhddiqINjhb2rNLTy1nx6oWOS7AM5suHGEd6kXuNYOLIlX1ccMB6qlJ6FEfHG9dz33pZhmcH5SyQFSsMmvbKUWK
aZ7p36FWXhAdz2uWXakDLIjLNXOwXVqwbVpeLVqIsfB7h/7KoDQ8p2IHarX2PNCwGlDGTXxiAKRD3wySMpyuQqzFynYwgatS2itW
qzaKirKs/Cau8gIW38ACPwTg38TibSxuYfEGFPOnRL5HD43FNdM97HhLbGbQOujjELr0LpToJLdKcJSHxJAuJ3ecHqHJnUa5LFrl
HX6bdqljytqfBSc1C6xmRSm57eKetUcHE/82eSqRfljbNii2TRuBmYyag6RYHrxEV2F9zNwgOoHKTNdgy3NQmXCEisVU9OXJsFyD
FOULKRsV6PWnu4KxEXGJLSo6iAQGOIzfidJV/ZzV2S/Zwn+GeZm8TPkrJSuPyjk5LefluIJ5IT3MVuXh95yMGaw35FmoZz/XVJE1
SsnTco7uvvNKDsbnRBZL1eg2PC8XKLtUUBAiCy0patfhrUM7js1RD5YIW6D8FPz/j67hfMrnupoPe3KyaIkrBcIB9AF1MFo7lhPT
Eb/yv2k1eyTfpVBGbo6oXFYGc1835POAeThX1nr7K2W9jgl1KAOmwpPqZcACPBKrJ13xw+8YU5h6oDLtKV53ixyYjvkqjCSrbw3B
qABT9uL7SfpaRe+MQByBmbR4hz4CYAlfxlEQM2DcM9r8W4gYwItv3Wa6N4bZtGcS/zMamcWvbcKIR8dP2oCaUQGDEQ/5/TD2UwX8
fnpH10wjQ9dM+MVLer01c7LrDuejWVhseLXF0lPYW+CY2rVDt43j90F8ES1JhV4zPQDCzMSmSMwLLwN9LU84FmdefruAQPO5o+cg
Hqn8fSwmeme92IK06FBLY3GTnADcyViY7qd1bri4tR9xAui8Eb5DfyNTw8R1+M0L7R1H7TJ3RIVglu+C1riz9GmJQoYh/vOk9qim
5+XW/FdTSMA2pIMTgzr4z9AD0e+PhRaS9in7aoe0i3RI6cTD34qX6Og+RIRt1Vf53/gqfiPlq/up/ZFOuiu1Naa0Y0z1NdCmbV+D
WJA+s2zHqnkWo9Zn1BoTrX6MH/qY6U3up6wR+jwlibisUZgHM7VJmCnuZffFpyg5eCZ80H7MqLLEjNTJw5wKUTvpy16BssI65VkS
nSmiE2PyiXYS6tM+fiKT6yr8M0/kY5Ej7Jn1k5RfS7VHoHbK1/0U5YrS7YxX8Ob25zqn8VMUygRlWPK2kM9ZyqsipQbm59pj/hhL
TUntLLSc80eBGozU5c55iPGzXa09TqMu+GAn/jjRqOxfJAtO+wrgzYhsTfUO2OelQ7n592ChOfysBNblMhvtvIbUA9ZcP19Clpj7
NEeWCO/QEq+wMQE9YInZ9db5XlxNl4jki4JtDPnHfIaMan3lyZapLT9+dN/UlhbXl0z15s1Fuu6lCNGcWO4NR8t6WMXIit/F7iUa
j93cQKN844vjkT4ZFIdceLkJRzPOzws7fjOy2cj9FIaLtwvC4zwVutH1JliocI2ik7l3SKPrMLdpf9zAs3/REiIqr1WFm4o3sGN4
ufdwJ7r0C2LkhwYJbtfLRXAYdMK0BU5ob8K+W0CT0vx8BUmaHvDsxfE/6OAL92Fm2JVCz7jndVyPdpfvYrGBxSYWW1g8xuJ7WDzB
4gMs0Mr5h1iYWKBHz78f7XTfinz4y729cX6Cdityj8jRN2NEv5moCRc8UKEwU5WIQnMWuRFEhzz13bLLJzADrudR71lsnhYWP8Bi
G4tStEszLGwsdrA4aQOdeolmFXEXfZ92UU1J0d6ZkoU7ogmngX7hoY8OCj4p+nwvTZ/ygWuhpMRFmDINrsCC3Fr4SntuRMD6vI6f
C6JvZllByur5zlaQtqyPG8Wy6OHTyMp3sNjFYg+L8jCjEbccnQhUBhdvg3VFz+i/K8nw5PUs9c1PBQkLzytAvNZTC3PsRaW8wGqV
hYpTdeBtqlgkerXcYJh0v4ZhONmaqfe+QBUGh8ZF6swf0W4gevu34ouP1vgydt+L4rmz92zvZXftK9VGhc8j1OkTodD+COZ1ulsP
7UV9iWgC/bYQ8B088FykVZvQYQVzCqy0gr+G/lUF22HF49r/AUFd8pw=""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FCashOutSC
"""----------------------------------------------------------------------------
MODULE:
    FCashOutSC

DESCRIPTION:
    OPEN EXTENSION MODULE
    State chart creation for cash settlement confirmation.
    The definition parameter must completely define the content of the business
    process state chart, including all states and transitions between them. Its
    format is a dictionary of states mapped to a dictionary of transitions as
    event->next_state items, e.g.:
      {'state a':  {'event to go to b': 'state b', 'event to go to c': 'state c'}}

FUNCTIONS:
    define_state_transition():
        Defines the state transition for state chart
    create_cash_settlement_conf_out_sc():
        Creates the state chart

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import FSwiftWriterLogger
notifier = FSwiftWriterLogger.FSwiftWriterLogger('CashSetlemnt', 'FCashOutNotify_Config')
import FMTStateChart
import FIntegrationUtils

def define_state_transition():
        """
        Creates a state chart with the given name, if required.
        The definition parameter must completely define the content of the business
        process state chart, including all states and transitions between them. Its
        format is a dictionary of states mapped to a dictionary of transitions as
        event->next_state items, e.g.:

          {'state a':  {'event to go to b': 'state b', 'event to go to c': 'state c'}}

        All defined next_states values must be unique within a state's transitions
        (i.e. multiple events cannot lead to the same next_state).
        """

        state_chart_name = 'FSwiftCashOut'
        state_chart = {
                        'Ready'                 :    {'GenerateSWIFT'                   :    'SwiftMsgGenerated',
                                                      'Fail'                            :    'GenerationFailed'},
                        'SwiftMsgGenerated'     :    {'Send'                            :    'Sent',
                                                      'SendFail'                        :    'SendFailed'},
                        'GenerationFailed'      :    {'Regenerate'                      :    'Ready'},
                        'SendFailed'            :    {'ReSend'                          :    'Sent',
                                                      'Regenerate'                      :    'Ready'},
                        'Sent'                  :    {'Ack'                             :    'Acknowledged',
                                                      'Nack'                            :    'SendFailed',
                                                      'Fail'                            :    'SendFailed'},
                    }
        return state_chart_name, state_chart


def define_state_transition_MT304():
    """
    Creates a state chart with the given name, if required.
    The definition parameter must completely define the content of the business
    process state chart, including all states and transitions between them. Its
    format is a dictionary of states mapped to a dictionary of transitions as
    event->next_state items, e.g.:

      {'state a':  {'event to go to b': 'state b', 'event to go to c': 'state c'}}

    All defined next_states values must be unique within a state's transitions
    (i.e. multiple events cannot lead to the same next_state).
    """

    state_chart_name = 'FSwiftCashOutMT304'
    state_chart = {
                    'Ready'                             : {'GenerateSWIFT' : 'SwiftMsgGenerated',
                                                           'Fail'          : 'GenerationFailed'},
                    'SwiftMsgGenerated'                 : {'Send'          : 'Sent',
                                                           'SendFail'      : 'SendFailed'},
                    'GenerationFailed'                  : {'Regenerate'    : 'Ready'},
                    'SendFailed'                        : {'ReSend'        : 'Sent',
                                                           'Regenerate'    : 'Ready'},
                    'Sent'                              : {'Ack'           : 'Acknowledged',
                                                           'Nack'          : 'SendFailed',
                                                           'Fail'          : 'SendFailed'},
                    'Acknowledged'                      : {'Dupl'          : 'Duplicate'},
                    'Duplicate'                         : {'Ack'           : 'Acknowledged',
                                                           'Dupl'          : 'Duplicate'}

    }
    if FIntegrationUtils.FIntegrationUtils.get_acm_version() >= 2022.2:
        update_state_chart = state_chart['SendFailed']
        update_state_chart.update({'Ack': 'Acknowledged'})
    return state_chart_name, state_chart

def define_state_transition_4msgparent():
    """
    Create a state chart for 4 msg parent.
    """
    state_chart_name = 'FSwift4msgParent'
    state_chart = {
                'Ready'                     :    {'RcvdAck'                         :    'OneSent',
                                                  'Fail'                            :    'OneFailed',
                                                  'Cancel'                          :    'Cancelled'},
                'OneSent'                   :    {'RcvdAck'                         :    'TwoSent',
                                                  'Fail'                            :    'OneSentOneFailed',
                                                  'Cancel'                          :    'Cancelled'},
                'TwoSent'                   :    {'RcvdAck'                         :    'ThreeSent',
                                                  'Fail'                            :    'TwoSentOneFailed',
                                                  'Cancel'                          :    'Cancelled'},
                'ThreeSent'                 :    {'RcvdAck'                         :    'Acknowledged',
                                                  'Fail'                            :    'ThreeSentOneFailed',
                                                  'Cancel'                          :    'Cancelled'},
                'OneFailed'                 :    {'RcvdAck'                         :    'OneSentOneFailed',
                                                  'Fail'                            :    'TwoFailed',
                                                  'Cancel'                          :    'Cancelled'},
                'OneSentOneFailed'          :   {'RcvdAck'                          :    'TwoSentOneFailed',
                                                  'Fail'                            :    'OneSentTwoFailed',
                                                  'Resend'                          :    'OneSent',
                                                  'Cancel'                          :    'Cancelled'},
                'TwoSentOneFailed'          :   {'RcvdAck'                          :    'ThreeSentOneFailed',
                                                  'Fail'                            :    'TwoSentTwoFailed',
                                                  'Resend'                          :    'TwoSent',
                                                  'Cancel'                          :    'Cancelled'},
                'ThreeSentOneFailed'        :   {'Resend'                           :    'ThreeSent',
                                                  'Cancel'                          :    'Cancelled'},
                'TwoFailed'                 :    {'RcvdAck'                         :    'OneSentTwoFailed',
                                                  'Fail'                            :    'ThreeFailed',
                                                  'Resend'                          :    'OneFailed',
                                                  'Cancel'                          :    'Cancelled'},
                'OneSentTwoFailed'          :   {'RcvdAck'                          :    'TwoSentTwoFailed',
                                                  'Fail'                            :    'OneSentThreeFailed',
                                                  'Resend'                          :    'OneSentOneFailed',
                                                  'Cancel'                          :    'Cancelled'},
                'TwoSentTwoFailed'          :   {'Resend'                           :    'TwoSentOneFailed',
                                                  'Cancel'                          :    'Cancelled'},
                'ThreeFailed'               :    {'RcvdAck'                         :    'OneSentThreeFailed',
                                                  'Fail'                            :    'FourFailed',
                                                  'Resend'                          :    'TwoFailed',
                                                  'Cancel'                          :    'Cancelled'},
                'OneSentThreeFailed'        :   {'Resend'                           :    'OneSentTwoFailed',
                                                  'Cancel'                          :    'Cancelled'},
                'FourFailed'                :   {'Resend'                           :    'ThreeFailed',
                                                  'Cancel'                          :    'Cancelled'},

}

    return state_chart_name, state_chart


def define_state_transition_3msgparent():
    """
    Create a state chart for 3 msg parent.
    """
    state_chart_name = 'FSwift3msgParent'
    state_chart = {
                'Ready'                     :    {'RcvdAck'                         :    'OneSent',
                                                  'Fail'                            :    'OneFailed',
                                                  'Cancel'                          :    'Cancelled'},
                'OneSent'                   :    {'RcvdAck'                         :    'TwoSent',
                                                  'Fail'                            :    'OneSentOneFailed',
                                                  'Cancel'                          :    'Cancelled'},
                'TwoSent'                   :    {'RcvdAck'                         :    'Acknowledged',
                                                  'Fail'                            :    'TwoSentOneFailed',
                                                  'Cancel'                          :    'Cancelled'},
                'OneFailed'                 :    {'RcvdAck'                         :    'OneSentOneFailed',
                                                  'Fail'                            :    'TwoFailed',
                                                  'Cancel'                          :    'Cancelled'},
                'OneSentOneFailed'          :    {'RcvdAck'                         :    'TwoSentOneFailed',
                                                  'Fail'                            :    'OneSentTwoFailed',
                                                  'Resend'                          :    'OneSent',
                                                  'Cancel'                          :    'Cancelled'},
                'TwoSentOneFailed'          :    {'Resend'                          :    'TwoSent',
                                                  'Cancel'                          :    'Cancelled'},
                'TwoFailed'                 :    {'RcvdAck'                         :    'OneSentTwoFailed',
                                                  'Fail'                            :    'ThreeFailed',
                                                  'Resend'                          :    'OneFailed',
                                                  'Cancel'                          :    'Cancelled'},
                'OneSentTwoFailed'          :    {'Resend'                          :    'OneSentOneFailed',
                                                  'Cancel'                          :    'Cancelled'},
                'ThreeFailed'               :    {'Resend'                          :    'TwoFailed',
                                                  'Cancel'                          :    'Cancelled'},

}


    return state_chart_name, state_chart


def define_state_transition_2msgparent():
    """
    Create a state chart for 2 msg parent.
    """
    state_chart_name = 'FSwift2msgParent'
    state_chart = {
                'Ready'                     :    {'RcvdAck'                         :    'OneSent',
                                                  'Fail'                            :    'OneFailed',
                                                  'Cancel'                          :    'Cancelled'},
                'OneSent'                   :    {'RcvdAck'                         :    'Acknowledged',
                                                  'Fail'                            :    'OneSentOneFailed',
                                                  'Cancel'                          :    'Cancelled'},
                'OneFailed'                 :    {'RcvdAck'                         :    'OneSentOneFailed',
                                                  'Fail'                            :    'TwoFailed',
                                                  'Cancel'                          :    'Cancelled'},
                'OneSentOneFailed'          :    {'Resend'                          :    'OneSent',
                                                  'Cancel'                          :    'Cancelled'},
                'TwoFailed'                 :    {'Resend'                          :    'OneFailed',
                                                  'Cancel'                          :    'Cancelled'},

}


    return state_chart_name, state_chart


def define_state_transition_narrative():
        """
        Creates a state chart with the given name, if required.
        The definition parameter must completely define the content of the business
        process state chart, including all states and transitions between them. Its
        format is a dictionary of states mapped to a dictionary of transitions as
        event->next_state items, e.g.:

          {'state a':  {'event to go to b': 'state b', 'event to go to c': 'state c'}}

        All defined next_states values must be unique within a state's transitions
        (i.e. multiple events cannot lead to the same next_state).
        """

        state_chart_name = 'FSwiftNarrativeOut'
        state_chart = {
            'Ready': {'GenerateSWIFT': 'SwiftMsgGenerated',
                      'Fail': 'GenerationFailed'},
            'SwiftMsgGenerated': {'Send': 'Sent',
                                  'SendFail': 'SendFailed',
                                  'Regenerate': 'Ready'},
            'GenerationFailed': {'Regenerate': 'Ready'},
            'SendFailed': {'ReSend': 'Sent',
                           'Regenerate': 'Ready'},
            'Sent': {'Ack': 'Acknowledged',
                     'Nack': 'SendFailed',
                     'Fail': 'SendFailed'},
        }
        return state_chart_name, state_chart


def create_cash_settlement_conf_out_sc():
    try:
        state_chart_name, state_chart_dict = define_state_transition()
        state_chart = FMTStateChart.create_state_chart(state_chart_name, state_chart_dict)
        # EDIT 'coordinate string' ONLY IF STATE CHART MENTIONED ABOVE IS CHANGED.
        co_string = 'Acknowledged, 332, 0;SwiftMsgGenerated, -220, 0;XMLGenerated, -300, 0;NetworkRulesValidated, -14, 0;SendFailed, 156, -204;GenerationFailed, -358, -203;Ready, -500, 0;Sent, 159, 0;'
        FMTStateChart.layout_state_chart(state_chart_name, co_string)

        state_chart_name, state_chart_dict = define_state_transition_MT304()
        state_chart = FMTStateChart.create_state_chart(state_chart_name, state_chart_dict)
        # EDIT 'coordinate string' ONLY IF STATE CHART MENTIONED ABOVE IS CHANGED.
        co_string = 'Duplicate,333,-123;XMLGenerated,-300,0;SwiftMsgGenerated,-220,0;Acknowledged,332,0;NetworkRulesValidated,-14,0;SendFailed,156,-204;GenerationFailed,-358,-203;Sent,159,0;Ready,-500,0;'
        FMTStateChart.layout_state_chart(state_chart_name, co_string)

        state_chart_name, state_chart_dict = define_state_transition_4msgparent()
        state_chart = FMTStateChart.create_state_chart(state_chart_name, state_chart_dict)
        co_string = 'OneSentOneFailed,535,-227;Cancelled,1107,169;OneSentThreeFailed,537,92;FourFailed,217,277;ThreeFailed,218,87;OneSentTwoFailed,536,-68;ThreeSentOneFailed,1108,-218;ThreeSent,982,-407;OneFailed,222,-239;TwoSent,657,-402;OneSent,370,-402;TwoSentOneFailed,826,-228;Acknowledged,1278,-404;TwoSentTwoFailed,827,-60;TwoFailed,221,-71;Ready,71,-404;'
        FMTStateChart.layout_state_chart(state_chart_name, co_string)

        state_chart_name, state_chart_dict = define_state_transition_3msgparent()
        state_chart = FMTStateChart.create_state_chart(state_chart_name, state_chart_dict)
        co_string = 'OneFailed,-54,-352;Cancelled,714,-9;ThreeFailed,-56,75;Acknowledged,899,-512;TwoFailed,-53,-151;Ready,-234,-519;OneSentOneFailed,326,-347;OneSent,167,-514;TwoSentOneFailed,715,-337;OneSentTwoFailed,325,-145;TwoSent,535,-515;'
        FMTStateChart.layout_state_chart(state_chart_name, co_string)

        state_chart_name, state_chart_dict = define_state_transition_2msgparent()
        state_chart = FMTStateChart.create_state_chart(state_chart_name, state_chart_dict)
        co_string = 'TwoFailed,63,188;Acknowledged,542,-226;OneFailed,62,-44;Cancelled,464,189;Ready,-78,-225;OneSent,242,-229;OneSentOneFailed,396,-44;'
        FMTStateChart.layout_state_chart(state_chart_name, co_string)

        state_chart_name, state_chart_dict = define_state_transition_narrative()
        state_chart = FMTStateChart.create_state_chart(state_chart_name, state_chart_dict)

        # EDIT 'coordinate string' ONLY IF STATE CHART MENTIONED ABOVE IS CHANGED.
        co_string = 'Acknowledged, 332, 0;SwiftMsgGenerated, -220, 0;XMLGenerated, -300, 0;NetworkRulesValidated, -14, 0;SendFailed, 156, -204;GenerationFailed, -358, -203;Ready, -500, 0;Sent, 159, 0;'
        FMTStateChart.layout_state_chart(state_chart_name, co_string)


        FMTStateChart.layout_state_chart(state_chart_name, co_string)

    except Exception as e:
        notifier.ERROR("Exception in create_cash_settlement_conf_out_sc : %s"%str(e))
        notifier.DEBUG(str(e), exc_info=1)


...

  FCashOutUtils
"""----------------------------------------------------------------------------
MODULE:
    FCashOutUtils

DESCRIPTION:
    A module for common functions used across Cash outgoing
    solution.

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import pyxb
import re
from datetime import datetime
from pyxb.exceptions_ import ValidationError
import FSwiftMLUtils
import FSwiftWriterUtils
import re
import ast
import os
import acm
import tempfile
import FUxCore
import xml.dom.minidom as dom
from functools import wraps
import FSwiftWriterLogger
import itertools
from FSettlementXML import FSettlementXML
import FSwiftOperationsAPI
from FMTSettlementWrapper import FMTSettlementWrapper
import FIntegrationUtils
import FSwiftWriterAPIs

notifier = FSwiftWriterLogger.FSwiftWriterLogger('CashSettlemnt', 'FCashOutNotify_Config')
cash_settlement_out_config = FSwiftMLUtils.Parameters('FCashOut_Config')

try:
    #from FSettlementEnums import RelationType, SettlementStatus
    RelationType = FSwiftOperationsAPI.GetRelationTypeEnum()
    SettlementStatus = FSwiftOperationsAPI.GetSettlementStatusEnum()
    DocumentStatus = FSwiftOperationsAPI.GetOperationsDocumentStatusEnum()
except:
    pass


writer_config = FSwiftMLUtils.Parameters('FSwiftWriterConfig')

class PreviewOutgoingMTMsgCashSettlementMenuItem(FUxCore.MenuItem):
    """MenuItem for displaying outgoing message from confirmation object"""
    def __init__(self, eii, state_chart_names):
        self._eii = eii
        if type(state_chart_names) == type([]):
            self.state_chart_names = state_chart_names
        else:
            self.state_chart_names = [state_chart_names]
        self.active_sheet = FSwiftMLUtils.get_active_sheet(eii)

    def Enabled(self):
        return True

    def Invoke(self, _eii):
        self._view_mt_settlement_msg()

    def Applicable(self):
        return self._is_enabled()

    def _is_enabled(self):
        """
        Method is to check whether particular submenu should be activated for particular object (sett/conf/bpr)
        :return: None
        """
        typ_of_msg = ''
        is_enabled = False
        try:
            if self.active_sheet:
                for cell in self.active_sheet.Selection().SelectedCells():
                    if cell.IsHeaderCell():
                        acm_obj = cell.RowObject()
                        typ_of_msg = FSwiftMLUtils.calculate_mt_type_from_acm_object(acm_obj)
                        if acm_obj.Status() == 'Authorised' and typ_of_msg != '0':
                            #bpr_obj = FSwiftMLUtils.get_business_process(acm_obj)
                            #if bpr_obj:
                            is_enabled = True
                            break
        except Exception as e:
            mt_type = "MT" + str(typ_of_msg)
            notifier.ERROR("%s Exception occurred in PreviewOutgoingMTMsgCashSettlementMenuItem._is_enabled : %s" % (mt_type, str(e)))
        return bool(is_enabled)

    def _view_mt_settlement_msg(self):
        """
        Method to show MT message associated with a settlement
        :return: None
        """
        msg_type = ''
        try:
            for cell in self.active_sheet.Selection().SelectedCells():
                if cell.IsHeaderCell():
                    msg_list = []
                    settl_obj = cell.RowObject()
                    typ_of_msg = FSwiftMLUtils.calculate_mt_type_from_acm_object(settl_obj)
                    msg_list.append(typ_of_msg)
                    if typ_of_msg in ('199', '299'):
                        if settl_obj.Children():
                            for child_obj in settl_obj.Children():
                                typ_of_msg = FSwiftMLUtils.calculate_mt_type_from_acm_object(child_obj)
                                msg_list.append(typ_of_msg)
                    for msg_type in msg_list:
                        msg_type = 'MT' + str(msg_type)
                        msg_config = FSwiftMLUtils.Parameters('F%sOut_Config'%(msg_type))
                        swift_message, _, exceptions, _ = FSwiftWriterUtils.generate_swift_message(settl_obj, msg_type)
                        if not exceptions:
                            swift_data = swift_message
                            mt_msg_type = msg_type
                            temp_dir = tempfile.gettempdir()
                            out_file = os.path.join(temp_dir, '%s_PreviewOutgoing.txt'%(str(mt_msg_type)))
                            f = open(out_file, 'w')
                            f.write(swift_data)
                            f.close()
                            os.startfile(out_file)
        except Exception as e:
            notifier.ERROR("%s Exception occurred in PreviewOutgoingMTMsgCashSettlementMenuItem._view_mt_settlement_msg : %s" % (msg_type, str(e)))

def create_preview_outgoing_mt_msg_cash_settlement_menuitem(eii):
    """
    :param eii: shell object passed from FMenuExtension
    :return: object of class handling the menu
    """
    return PreviewOutgoingMTMsgCashSettlementMenuItem(eii, ['FSwiftCashOut', 'FSwiftCashMXRTGSOut'])

def decorate_all_setter(setter_method):
    """
    Class decorator method for decorating all callable attributes of class and
    returns a decorated method, decorated with setter_method , in this case
    :param setter_method: method to be decorated
    :return: Decorated method
    """
    def decorator(cls):
        for name, obj in list(vars(cls).items()):
            if callable(obj):
                try:
                    obj = obj.__func__
                except AttributeError:
                    pass
                setattr(cls, name, setter_method(obj))
        return cls
    return decorator

def call_setter_validator(func):
    """
    Method to call validator of a setter method after setter method is called.
    :param func: method to be decorated
    :return: decorated method
    """
    @wraps(func)
    def wrapper(*args, **kw):
        res = None
        if func.__name__ and func.__name__.startswith('set_') and func.__name__ not in ['set_attributes']:
            validation_method = 'validate_' + func.__name__.replace('set_','')  # Generating name for validator method
            try:
                res = func(*args, **kw)  # Calling Setter method
                getattr(args[0], validation_method)()  # Calling validator method
            except AttributeError:  # If validator method is not implemented, it is ignored
                pass
        else:
            res = func(*args, **kw)
        return res
    return wrapper

def get_message_version_number(fObject, is_free_text_msg = False, child_mt_type=''):
    '''
    Method to get the message version number
    :param fObject: object from which message version number is to be fetched
    :param is_free_text_msg: flag indicating is_free_text_msg
    :return: message version number
    '''
    msg_version_number = fObject.VersionId()
    if is_free_text_msg:
        msg_version_number = str(msg_version_number)
        if child_mt_type and child_mt_type in ['MT199', 'MT299']:
            msg_version_number = str(msg_version_number) + 'F'
    return str(msg_version_number)

def validateAmount(amt, length, field):
    """
    Method to validate the amount field to be sent in the outgoing MT message
    :param amt: amount
    :param length:
    :param field:
    :return: Validation_error is 'amt' is invalid as per swift spec.
    """
    #amt should be in the swift format i.e. should contain one mandatory decimal comma
    validation_errors = []
    if str(amt).count(',') != 1:
        validation_errors.append('%s field must contain one decimal comma.' %field)
    if len(str(amt)) > length:
        validation_errors.append('Length of %s field should not be more than %s.'%(field, length))

    if validation_errors:
        raise ValidationError(message = ''.join(validation_errors))


def get_currency_from_currency_amount(currency_amount):
    """
        1. takes the currency amount as input
        2. parse the input using regex
        3. returns the currency
    """
    curr = re.findall(r'[N]?([A-Za-z][A-Za-z][A-Za-z]).+',currency_amount)[0]
    return curr


def validate_terms_and_conditions(text, field):
    """ Applicable for MT300.
        If code VALD is used:
            1. it must appear in the first 6 characters of the first line, and in no other place, followed by a date expressed as YYYYMMDD
                and the end of line separator (that is  :77D:/VALD/YYYYMMDDCrLf)  (Error code(s): C58).
            2. the second line must be present and contain the code SETC, followed by a valid ISO 4217 currency code and the
                end of line separator (that is  /SETC/currencyCrLf) (Error code(s): C59).
        Conversely, if the first six characters of the second line are equal to /SETC/, then the first six characters of the first line must be equal to /VALD/  (Error code(s): C59).
        The code /SETC/ is not allowed in other places than the first six characters of the second line  (Error code(s): C59).
        If the first six characters of the third line are /SRCE/, then the first six characters of the second line must be /SETC/  (Error code(s): C59).
        The code /SRCE/ is not allowed in any other place than the first six characters of the third line  (Error code(s): C59). """
    t_n_c = text.split('\n')
    validation_errors = []
    try:
        assert not (t_n_c[0].startswith('/VALD/') and not t_n_c[1].startswith('/SETC/'))
    except AssertionError:
        validation_errors.append("When /VALD/ appears in first line of %s field, then /SETC/ is mandatory in second line." %field)
    except IndexError:
        if t_n_c[0].startswith('/VALD/'):
            validation_errors.append("When /VALD/ appears in first line of %s field, then /SETC/ is mandatory in second line." %field)
    try:
        assert not (not t_n_c[0].startswith('/VALD/') and '/SETC/' in text)
    except AssertionError:
        validation_errors.append("/SETC/ is not allowed without /VALD/ in the first line of %s field." %field)
    try:
        assert not (not t_n_c[1].startswith('/SETC/') and '/SRCE/' in text)
    except AssertionError:
        validation_errors.append("/SRCE/ is not allowed without /SETC/ in the second line of %s field." %field)
    except IndexError:
        if '/SRCE/' in text:
            validation_errors.append("/SRCE/ is not allowed without /SETC/ in the second line of %s field." %field)
    try:
        if t_n_c[0].startswith('/VALD/'):
            try:
                assert re.findall(r'/VALD/[0-9]{8}', str(t_n_c[0]))
            except AssertionError:
                validation_errors.append("/VALD/ is not followed by a date expressed in YYYYMMDD format in %s field." %field)
    except IndexError:
        pass
    if validation_errors:
        raise ValidationError(message = ''.join(validation_errors))

def validate_slash_and_double_slash(text, field):
    """validates if text start or end with a slash '/' and does not contain two consecutive slashes '//'  (Error code(s): T26)."""
    validation_errors = []
    try:
        assert re.findall(r'^[^/].*?[^/]$', str(text))
    except AssertionError:
        validation_errors.append("%s field must not start or end with a slash '/'." %field)
    try:
        assert not '//' in str(text)
    except AssertionError:
        validation_errors.append("Two consecutive slashes are not allowed in %s field." %field)
    if validation_errors:
        raise ValidationError(message = ''.join(validation_errors))

def validate_currency_amount(currency_amount, field):
    """
    Method to validate currency amount field that is sent in MT message
    :param currency_amount:
    :param field:
    :return: Validation_error is the field is not valid as per swift specification
    """
    validation_errors = []
    try:
        currency_codes_not_allowed = ['XAU', 'XAG', 'XPD', 'XPT']
        for each in currency_codes_not_allowed:
            assert not str(currency_amount).startswith(each)
    except AssertionError:
        validation_errors.append("Currency codes XAU, XAG, XPD and XPT not allowed in %s field." %field)
    if validation_errors:
        raise ValidationError(message = ''.join(validation_errors))

def validate_mt_and_date_of_original_message(value, field):
    """
    Method to validate the MTandDate of original message
    :param value:
    :param field:
    :return: ValidationError if the value is not valid as per swift specification
    """
    validation_error = []
    mt_message = value.split('\n')[0]
    try:
        if not int(mt_message) in range(100, 1000):
            validation_error.append("MT Number must be in range 100-999 in %s field." %field)
    except Exception as e:
        notifier.ERROR("Error in validate_mt_and_date_of_original_message : %s "%str(e))

    if validation_error:
        raise ValidationError(message = ''.join(validation_error))


def represent_amount_in_four_digits(amount):
    """
        1. take the rightmost non zero digit.
        2. attach 3 digits to the left of it
        3. If there are no digits left then attach 0 to the left till the length is 4
        4. return amount_part of length 4
        Error code T22
    """
    amount_part = []
    got_rightmost_non_zero_digit = False
    for each_char in reversed(amount):
        if each_char not in ['0', '.'] and not got_rightmost_non_zero_digit:
            amount_part.insert(0, each_char)
            got_rightmost_non_zero_digit = True
        elif got_rightmost_non_zero_digit and each_char != '.':
            amount_part.insert(0, each_char)
    while len(amount_part) < 4:
        amount_part.insert(0, '0')
    return ''.join(amount_part[-4:])


def get_swift_status(msg):
    """ takes the value of Swift 451 tag from the message """
    ack_or_nack_flag = int(re.findall(r"{451:(.+?)}",msg)[0])
    if ack_or_nack_flag == 1:
        return "Nack"
    elif ack_or_nack_flag == 0:
        return "Ack"

def get_settlement_number_from_msg(msg):
    """ get settlement number from message field string """
    return msg.split('-')[1]

def apply_currency_precision(currency, amount):
    """ Round decimal amount according to the precision for a currency stated in Fparameter: RoundPerCurrency in FSwiftWriterConfig """
    result = FSwiftWriterUtils.apply_rounding(currency, amount)
    return result

def validate_instruction_code(instruction_codes):
    """Unit tests done:
       instruction_code = ['PHON\nABDF', 'PHOD']  - Success
       instruction_code = ['PHON\nABDF', 'PHOB']  - Fail
       instruction_code = ['PHOB', 'PHOI\nsdftrrt', 'TELI'] - Success
       instruction_code = ['TELI', 'SDVA'] - Fail
       instruction_code = ['SDVA', 'CORT', 'TELI'] - Success
       instruction_code = ['INTC', 'HOLD', 'TELE', 'SDVA'] - Fail
       instruction_code = ['INTC', 'HOLD', 'TELE', 'INTC'] - Fail"""

    codes_in_order = ['SDVA', 'INTC', 'REPA', 'CORT', 'HOLD', 'CHQB', 'PHOB', 'TELB', 'PHON', 'TELE', 'PHOI', 'TELI']
    invalid_code_pairs = { 'SDVA' : ['HOLD', 'CHQB'],
                           'INTC' : ['HOLD', 'CHQB'],
                           'REPA' : ['HOLD', 'CHQB', 'CORT'],
                           'CORT' : ['HOLD', 'CHQB'],
                           'HOLD' : ['CHQB'],
                           'PHOB' : ['TELB'],
                           'PHON' : ['TELE'],
                           'PHOI' : ['TELI']}
    codes_and_order = dict(list(zip(codes_in_order, [-1]*len(codes_in_order))))
    for order, code in enumerate(instruction_codes):
        #instruction_code = each
        #code = instruction_code.value()[0:4]
        #code = each
        if code not in ['PHON', 'PHOB', 'PHOI', 'TELE', 'TELB', 'TELI','HOLD', 'REPA'] and len(code) > 4:
            raise ValidationError("Additional information is only allowed when Instruction Code consists of one of the following codes: PHON, PHOB, PHOI, TELE, TELB, TELI, HOLD or REPA")
        if code in codes_and_order and codes_and_order[code] != -1:
            raise ValidationError("Code should not be repeated")
        codes_and_order[code] = order
    for index, code1 in enumerate(codes_in_order):
        order_of_code1 = codes_and_order[code1]
        if order_of_code1 != -1:
            for code2 in itertools.islice(codes_in_order, index+1, len(codes_in_order)):
                if codes_and_order[code2] != -1:
                    if order_of_code1 > codes_and_order[code2]:
                        raise ValidationError("Codes must appear in order SDVA, INTC, REPA, CORT, HOLD, CHQB, PHQB, TELB, PHON, TELE, PHOI, TELI")
                    if code2 in invalid_code_pairs[code1]:
                        raise ValidationError("Codes %s and %s are not allowed in combination" % str(code1, code2))

def get_related_settlement(settlement):
    """
    Method to get the related settlement
    :param settlement:
    :return:
    """
    if is_cancellation(settlement):
        return settlement.Children()[0]
    elif is_nak_cancellation(settlement):
        return settlement
    return None

def is_cancellation(settlement):
    if FIntegrationUtils.FIntegrationUtils.get_acm_version() >= 2016.4:
        return settlement.RelationType() in [RelationType.CANCELLATION, RelationType.CANCEL_CORRECT]
    else:
        return settlement.RelationType() in ['Cancellation', 'Cancel Correct']

def is_nak_cancellation(settlement):
    if FSwiftMLUtils.get_acm_version() >= 2016.4:
        return settlement.Status() == SettlementStatus.PENDING_CANCELLATION
    else:
        return settlement.Status() == 'Pending Cancellation'

def validate_remittance_info(remittance_info):
    if remittance_info:
        number_of_lines = len(remittance_info.splitlines())
        if number_of_lines > 4:
            remittance_info = "Maximum number of lines allowed are 4.Current Value is- %s" %remittance_info
            #raise ValidationError("Maximum number of lines allowed are 4")
        else:
            exp = re.compile("/(INV|IPI|RFB|ROC|TSU)/")
            if not exp.findall(remittance_info):
                remittance_info = "One of the codes INV/IPI/RFB/ROC/TSU may be used, placed between slashes"
                #raise ValidationError("One of the codes INV/IPI/RFB/ROC/TSU may be used, placed between slashes")
        return remittance_info

def split_line_with_limited_characters(text, character_limit, prefix_text=''):
    """
    Split the given string with character limit specified and add given prefix to it.
    :param text: Text to be splitted
    :param character_limit: limit of the each line
    :param prefix_text: prefix to be attached to each line.
    :return: string.
    """
    import textwrap
    line_length = int(character_limit) - int(len(prefix_text))
    str_lines = textwrap.wrap(text, character_limit)
    value_txt = ''
    for line in str_lines:
        value_txt += '\n' + str(prefix_text) + line

    return value_txt.strip('\n')


def party_LEI(party):
    """
    Method to get LEI for party
    :param party:
    :return:
    """
    return party.LEI()


def get_acquirer_details(settlement, is_MX = False, add_cls_obj = None):
    """ Method to return acquirer details from the settlement object """
    acquirer = settlement.Acquirer()
    acquirer_account = settlement.AcquirerAccountRef()
    if is_MX:
        party_details = FSwiftMLUtils.get_party_details_mx(acquirer, acquirer_account, addr_cls_obj = add_cls_obj,
                                                           package_out_config=cash_settlement_out_config)
    else:
        party_details = FSwiftMLUtils.get_party_details(acquirer, acquirer_account, cash_settlement_out_config)
    return party_details


def get_acquirer_correpondent_details(settlement):
    """ Method to return acquirer correspondent details from settlement object """
    acquirer = settlement.AcquirerAccountRef().CorrespondentBank()
    acquirer_account = settlement.AcquirerAccountRef()
    return FSwiftMLUtils.get_party_details(acquirer, acquirer_account, cash_settlement_out_config, intermediary_or_correspondent = "CORRESPONDENT")

def get_counterparty_details(settlement, is_MX = False, add_cls_obj = None):
    """ Method to return counterParty details from settlement object """
    party = settlement.Counterparty()
    party_account = settlement.CounterpartyAccountRef()
    if is_MX:
        party_details = FSwiftMLUtils.get_party_details_mx(party, party_account, addr_cls_obj = add_cls_obj,
                                                           package_out_config=cash_settlement_out_config)
    else:
        party_details = FSwiftMLUtils.get_party_details(party, party_account, cash_settlement_out_config)
    return party_details

def get_counterpartys_intermediary_details(settlement):
    """ Method to return counterPartys intermediary details from given settlement """
    party = settlement.CounterpartyAccountRef().CorrespondentBank2()
    party_account = settlement.CounterpartyAccountRef()
    return FSwiftMLUtils.get_party_details(party, party_account, cash_settlement_out_config, intermediary_or_correspondent = 'INTERMEDIARY')

def get_counterpartys_correspondent_details(settlement):
    """ Method to return counterparty correspondent details from given settlement """
    party = settlement.CounterpartyAccountRef().CorrespondentBank()
    party_account = settlement.CounterpartyAccountRef()
    return FSwiftMLUtils.get_party_details(party, party_account, cash_settlement_out_config, intermediary_or_correspondent = 'CORRESPONDENT')

def is_netted_settlement(settlement):
    """ check if the given settlement is netted settlement """
    if settlement.RelationType() in (RelationType.AD_HOC_NET, RelationType.NET):
        return True
    return False

def get_least_net_trade(settlement):
    """ Method to get the least netted trade on given settlement """
    children = settlement.Children()
    children = [child for child in children if child.Trade() is not None]
    if len(children) == 0:
        trade_obj = None
    settlement = min(children, key=lambda child: child.Trade().Oid())
    if settlement:
        trade_obj = settlement.Trade()
    return trade_obj


def get_receivers_bic(settlement):
    """Returns SWIFT bic code of settlement receiver.
    This field goes into {2:Application Header Block} -- Receiver Information."""

    receiver_bic = ''  
    if str(getattr(cash_settlement_out_config, 'SwiftLoopBack',"")) == 'True' and str(getattr(cash_settlement_out_config, 'ReceiverBICLoopBack',"")):
        return str(getattr(cash_settlement_out_config, 'ReceiverBICLoopBack',""))
    elif str(getattr(writer_config, 'SwiftLoopBack',"")) == 'True' and str(getattr(writer_config, 'ReceiverBICLoopBack',"")):
        return str(getattr(writer_config, 'ReceiverBICLoopBack',""))
    
    acquire_account = settlement.AcquirerAccountRef()
    counterparty_account = settlement.CounterpartyAccountRef()
    if counterparty_account:
        if settlement.AcquirerAccountSubNetworkName() in ('TARGET2','EBA'):
            if counterparty_account.Bic2():
                receiver_bic = counterparty_account.Bic2().Alias()
            elif counterparty_account.Bic():
                receiver_bic = counterparty_account.Bic().Alias()
    if receiver_bic == '':
        if acquire_account:
            if acquire_account.Bic():
                receiver_bic = acquire_account.Bic().Alias()

    return receiver_bic

def get_senders_bic(settlement):
    """Returns SWIFT bic code of the Acquirer of the settlement.
    This field goes into {1: Basic Header Block} -- Address of the Sender"""
    if str(getattr(cash_settlement_out_config, 'SwiftLoopBack',"")) == 'True' and str(getattr(cash_settlement_out_config, 'SenderBICLoopBack',"")):
        return str(getattr(cash_settlement_out_config, 'SenderBICLoopBack',""))
    elif str(getattr(writer_config, 'SwiftLoopBack',"")) == 'True' and str(getattr(writer_config, 'SenderBICLoopBack',"")):
        return str(getattr(writer_config, 'SenderBICLoopBack',""))

    party, senders_bic = FSwiftWriterUtils.get_senders_party_and_bic_from_acm(settlement)
    return senders_bic

def validate_sub_network(settlement):
    """This method is used to determine if settlement has valid subnetwork or not."""

    is_valid_sub_network = True

    if settlement.Amount() >= 0:
        is_valid_sub_network = False
    if settlement.Currency().Name() != 'EUR':
        is_valid_sub_network = False

    return is_valid_sub_network

def get_sub_network(settlement):
    """ Returns the swift sub network. Extra validation is performed for
    TARGET2 and EBA """
    ret_val = ""
    valid_sub_networks = getattr(cash_settlement_out_config, 'SubNetwork', 'None')
    if valid_sub_networks:
        valid_sub_networks = eval(valid_sub_networks)
    if valid_sub_networks:
        acquirer_party_account_subnetwork = settlement.AcquirerAccountSubNetworkName()
        if acquirer_party_account_subnetwork in valid_sub_networks:
            if acquirer_party_account_subnetwork in ["TARGET2", "EBA"]:
                if validate_sub_network(settlement):
                    ret_val = acquirer_party_account_subnetwork
            else:
                ret_val = acquirer_party_account_subnetwork
    return ret_val

def get_swift_service_code(settlement):
    """ Returns the swift_service_code value """
    ret_val = ''
    swift_service_codes = getattr(cash_settlement_out_config, 'SwiftServiceCode', 'None')
    if swift_service_codes:
        swift_service_codes = eval(swift_service_codes)
    sub_network = get_sub_network(settlement)
    if swift_service_codes and sub_network in swift_service_codes:
        ret_val = swift_service_codes[sub_network]
    return ret_val

def get_banking_priority(settlement):
    """ Returns the banking priority value """
    ret_val = ''
    valid_banking_priorities = getattr(cash_settlement_out_config, 'BankingPriority', 'None')
    if valid_banking_priorities:
        valid_banking_priorities = eval(valid_banking_priorities)
    sub_network = get_sub_network(settlement)
    if valid_banking_priorities and sub_network in valid_banking_priorities:
        ret_val = valid_banking_priorities[sub_network]
    return ret_val

def get_national_clearing_system(settlement):
    """ get mapped value for national clearing system based on FParameter value """
    clearing_system = ""
    national_clearing_systems = getattr(cash_settlement_out_config, 'NationalClearingSystem', 'None')
    if national_clearing_systems:
        national_clearing_systems = eval(national_clearing_systems)
    account = settlement.CounterpartyAccountRef()
    if account:
        clearing_system_chl_item = account.NationalClearingSystemChlItem()
        if clearing_system_chl_item:
            clearing_system_full_name = clearing_system_chl_item.Name()
            if clearing_system_full_name in national_clearing_systems:
                clearing_system = national_clearing_systems[clearing_system_full_name]
            else:
                notifier.WARN("The value '%s' could not be found in parameter NationalClearingSystem." % clearing_system_full_name)
    return clearing_system

def get_national_clearing_code(settlement):
    """ get national clearing code for the account """
    clearing_code = ""
    account = settlement.CounterpartyAccountRef()
    if account:
        clearing_code = account.NationalClearingCode()
    return clearing_code

def get_sequence_number(settlement):
    """
    Get the sequence number for the Settlement
    :return:
    """
    seq_number = ''
    if settlement:
        seq_number = settlement.Oid()
    return seq_number

def get_bank_operation_code():
    """ Mandatory field 23B """

    return 'CRED'

def get_instruction_code():
    """ Mandatory field 23E """

    return 'PHOB'

def get_value_date(settlement):
    """This together with interbank_settled_amount forms the
     mandatory field 32A in 103 and 202.
    Also it is a mandatory field 30 for 210.
    Returns the value day for settlement.
    """

    return settlement.ValueDay()

def get_details_of_charges(settlement, is_mx = False):
    """
    This method return details of charges for given settlement counter party account
    :param settlement: ACM Settlement Object
    :is_mx : Boolean which specify if the call from MX message or MT message
    :return: (str) - Charge details
    """
    #The AddInfo SLEVcharges will be added manually below the  PRIME ca2021.2
    acm_version = FSwiftMLUtils.get_acm_version()
    account = settlement.CounterpartyAccountRef()
    details = account.DetailsOfCharges()
    if is_mx:
        if acm_version < 2021.2:
            if not details or details == 'None':
                try:
                    add_info_slev_charges = account.AdditionalInfo().SLEVcharges()
                    if add_info_slev_charges:
                        details = 'SLEV'
                except AttributeError:
                    notifier.ERROR("Additional Info SLEVcharges is not found on Account")

            else:
                charges_mapping_mt_mx = {'BEN' : 'CRED', 'OUR' : 'DEBT', 'SHA' : 'SHAR'}
                details = charges_mapping_mt_mx.get(details)
        if not details or details == 'None':
            details = 'SHAR'
    else:
        if acm_version >= 2021.2:
            charges_mapping_mt_mx = {'CRED': 'BEN', 'DEBT': 'OUR', 'SHAR' : 'SHA' ,'SLEV' : 'SHA'}
            details = charges_mapping_mt_mx.get(details)
        if not details or details == 'None':
            details = 'SHA'

    return details

def get_date_of_original_message(settlement, fmtclass_mttype, child_mt_type=''):
    '''Returns the date of the original message for which
    MT292 was sent.
    '''
    if settlement.RelationType() != 'Cancellation':
        child_settlement = settlement
    else:
        child_settlement = settlement.Children()[-1]

    external_objects = FSwiftMLUtils.FSwiftExternalObject.get_external_object(acm_obj=child_settlement, integration_type='Outgoing', all_records=True)
    for ext_obj in external_objects:
        integration_sub_type = FSwiftWriterAPIs.get_integration_subtype(ext_obj)
        mt_type = integration_sub_type.split('-')[0]
        if child_mt_type and child_mt_type == mt_type:
            bpr = FSwiftMLUtils.FSwiftExternalObject.get_business_process_from_external_object(ext_obj)
            if bpr:
                date_of_original_message = FSwiftMLUtils.get_param_val_from_bpr(bpr, "Sent", "SentDate")
                return date_of_original_message

def get_your_ref(settlement):
    """
    Method to get yourref field on trade
    :param settlement:
    :return: YourRef field on trade else NONREF
    """
    trade = settlement.Trade()
    if is_netted_settlement(settlement):
        trade = get_least_net_trade(settlement)
    if trade != None:
        if trade.YourRef():
            return trade.YourRef()[:16]
    return 'NONREF'
'''
def get_character_for_mt_type(mt_type):
    """This method return character correspond to message type"""
    mt_type_mapping = {'MT103' : 'A', 'MT192' : 'B', 'MT199': 'C' , 'MT200': 'D', 'MT202':'E', 'MT202COV':'F', 'MT210' : 'H'
                       , 'MT292': 'I', 'MT299' : 'J', 'MT192-MT103' : 'K', 'MT192-MT199' : 'L',
                       'MT292-MT202COV' : 'M', 'MT292-MT299': 'N', 'MT101': 'Q', 'MT192-MT101':'R'} #'O', 'P' used in FSwiftMLUtils
    value = mt_type_mapping.get(mt_type)
    if not value:
        value = mt_type_mapping.get(mt_type.split('-')[0])
    return value
'''
def get_swift_data(acm_obj, incoming_or_outgoing='Outgoing'):
    """
    This function return swift data from acm object.
    :param acm_obj:
    :param incoming_or_outgoing:
    :return:
    """
    swift_data = ''
    external_item = FSwiftMLUtils.FSwiftExternalObject.get_external_object(acm_obj=acm_obj, integration_type=incoming_or_outgoing)
    if external_item:
        swift_data = FSwiftMLUtils.FSwiftExternalObject.get_stored_data(external_item, 'swift_data')
    return swift_data

def get_sender_reference(acm_obj):
    """This function return the dictionary as - {'prefix': 'FAS', 'obj_id' : 'xxxx', 'ext_obj_count': '01' }"""
    values_dict = {}
    settlement_prefix = get_settlement_reference_prefix()
    cash_settlement_out_config = FSwiftWriterUtils.get_config_from_fparameter('FCashOut_Config')
    include_tradeno_in_tag_20 = FSwiftMLUtils.incude_trade_no_in_tag20(cash_settlement_out_config)
    val = FSwiftMLUtils.get_sender_ref(acm_obj, settlement_prefix, include_tradeno_in_tag_20=include_tradeno_in_tag_20)
    return val

def get_mx_sender_reference(acm_obj):
    """This function return the dictionary as - {'prefix': 'FAS', 'obj_id' : 'xxxx', 'ext_obj_count': '01' }"""
    values_dict = {}
    include_tradeno_in_biz_msg_idr = False
    settlement_prefix = get_settlement_reference_prefix()
    cash_settlement_out_config = FSwiftWriterUtils.get_config_from_fparameter('FCashOut_Config')
    include_tradeno_in_biz_msg_idr = FSwiftMLUtils.include_trade_no_in_biz_msg_idr(cash_settlement_out_config)
    val = FSwiftMLUtils.get_mx_sender_ref(acm_obj, settlement_prefix, include_tradeno_in_biz_msg_idr)
    return val

def get_settlement_reference_prefix():
    """
    Method to get settlement reference prefix to be sent in the MT message
    """
    cash_settlement_out_config = FSwiftWriterUtils.get_config_from_fparameter('FCashOut_Config')
    prefix = getattr(cash_settlement_out_config, 'SettlementMsgIdPrefix', None)
    if not prefix:
        prefix = str(getattr(writer_config, 'SettlementMsgIdPrefix', "FAS"))
        
    include_tradeno_in_biz_msg_idr = FSwiftMLUtils.include_trade_no_in_biz_msg_idr(cash_settlement_out_config)
    if include_tradeno_in_biz_msg_idr in ["True", "TRUE"]:
        prefix = 'S'
    return prefix

def get_narrative_description(settlement, mt_type=None):
    """Optional field 79 for n92 Settlement. """
    narrative_description = ''
    if mt_type in ['MT199', 'MT299']:
        ccy = settlement.Currency().Name()
        amount = str(abs(settlement.Amount()))
        value_date = settlement.ValueDay()
        original_value_day = settlement.Children()[-1].ValueDay()
        related_ref = "%s-%s-%s" % (str(get_settlement_reference_prefix()), str(settlement.Oid()), str(get_message_version_number(settlement)))
        narrative_description = """TODAY WE HAVE SENT YOU A PAYMENT INSTRUCTION UNDER REFERENCE {0} FOR {1} {2} WITH VALUE DATE {3}.WITH REGARDS TO THIS PAYMENT WE HEREBY INSTRUCT YOU TO ARRANGE A BACKVALUATION FROM VALUE DATE {3} TO VALUE DATE {4}.""".format(related_ref, ccy, amount, value_date, original_value_day)
    else:
        if is_cancellation(settlement):
            related_settlement = get_related_settlement(settlement)
            narrative_description = 'Settlement Id %s was due to %s' % (related_settlement.Oid(), related_settlement.ValueDay())
        elif is_nak_cancellation(settlement):
            narrative_description = 'Cancelling previous MT%s' % (get_original_message_type(settlement))

    return narrative_description


def get_documents_to_cancel(settlement):
    """
    Method to return documents to be cancelled
    :param settlement:
    :return: document list which are eligible for cancellation
    """
    documents = settlement.Documents()
    documents_to_cancel = []
    if is_nak_cancellation(settlement):
        for doc in documents:
            if doc.Status() == DocumentStatus.SENT_SUCCESSFULLY:
                documents_to_cancel.append(doc)
    return documents_to_cancel


def get_original_message_type(settlement):
    """
    Method to return the original message type
    :param settlement:
    :return: MT type of original message
    """
    documents_to_cancel = get_documents_to_cancel(settlement)
    mt_type = ''
    for doc in documents_to_cancel:
        mt_type = str(doc.SwiftMessageType())
    return mt_type


def get_ordering_customer_account(settlement):
    """
    Method to get ordering customer account
    :param settlement:
    :return:
    """
    ordering_customer_account = None
    if settlement.Counterparty().Type() == 'Client' or settlement.Counterparty().Type() == 'Broker':
        return settlement.CounterpartyAccount()
    return ordering_customer_account

def get_ordering_customer_bic(settlement):
    """
    Method to get ordering customer bic value from settlement object
    :param settlement:
    :return: ordering customer bic
    """
    counterparty_party_account = settlement.CounterpartyAccountRef()
    ordering_customer_bic = None
    if counterparty_party_account != None and (settlement.Counterparty().Type() == 'Client' or settlement.Counterparty().Type() == 'Broker'):
        ordering_customer_bic = FSwiftMLUtils.get_party_bic(counterparty_party_account)
    return ordering_customer_bic

def get_ordering_customer_name(settlement):
    """
    Method to get ordering customer name from settlement object
    :param settlement:
    :return: ordering customer name
    """
    ordering_customer_name = None
    if settlement.Counterparty().Type() == 'Client' or settlement.Counterparty().Type() == 'Broker':
        ordering_customer_name = FSwiftWriterUtils.get_party_full_name(settlement.Counterparty(), cash_settlement_out_config)
    return ordering_customer_name

def get_ordering_customer_address(settlement):
    """
    Method to get ordering customer address from settlement object
    :param settlement:
    :return: ordering customer address
    """
    ordering_customer_address = None
    if settlement.Counterparty().Type() == 'Client' or settlement.Counterparty().Type() == 'Broker':
        ordering_customer_address = FSwiftMLUtils.get_party_address(settlement.Counterparty())
    return ordering_customer_address

def get_ordering_institution_account(settlement):
    """
    Method to get ordering institution account from settlement object
    :param settlement:
    :return: ordering institution account
    """
    counterparty_account = None

    if settlement.Counterparty().Type() in [ 'Counterparty', 'Broker', 'Client', 'Intern Dept']:
        counterparty_account = settlement.CounterpartyAccount()
    return counterparty_account

def get_intermediary_details(settlement):
    """ This method check for Acquirer Intermediary 1 if that is not present it check the counterparty Intermediary 4-3-2-1 and Correspondent bank"""
    val = {}
    acquirer = settlement.AcquirerAccountRef().CorrespondentBank2()
    acquirer_account = settlement.AcquirerAccountRef()
    party_account = settlement.CounterpartyAccountRef()

    if acquirer:
        val = FSwiftMLUtils.get_party_details(acquirer, acquirer_account, cash_settlement_out_config,
                                            intermediary_or_correspondent="INTERMEDIARY")
    else:
        if settlement.CounterpartyAccountRef().CorrespondentBank5():
            party = settlement.CounterpartyAccountRef().CorrespondentBank5()
            intermediary_or_correspondent = 'INTERMEDIARY4'

        elif settlement.CounterpartyAccountRef().CorrespondentBank4():
            party = settlement.CounterpartyAccountRef().CorrespondentBank4()
            intermediary_or_correspondent = 'INTERMEDIARY3'

        elif settlement.CounterpartyAccountRef().CorrespondentBank3():
            party = settlement.CounterpartyAccountRef().CorrespondentBank3()
            intermediary_or_correspondent = 'INTERMEDIARY2'

        elif settlement.CounterpartyAccountRef().CorrespondentBank2():
            party = settlement.CounterpartyAccountRef().CorrespondentBank2()
            intermediary_or_correspondent = 'INTERMEDIARY'

        else:
            party = settlement.CounterpartyAccountRef().CorrespondentBank()
            intermediary_or_correspondent = 'CORRESPONDENT'

        val = FSwiftMLUtils.get_party_details(party, party_account, cash_settlement_out_config,
                                              intermediary_or_correspondent=intermediary_or_correspondent)
        val['ACCOUNT'] = ''
    return val

def get_ordering_institution_bic(settlement):
    """
    Method to get ordering institution bic from settlement object
    :param settlement:
    :return: ordering institution bic
    """

    counterparty_party_account = settlement.CounterpartyAccountRef()
    ordering_institution_bic = None

    if counterparty_party_account  and (settlement.Counterparty().Type() in ['Counterparty', 'Broker', 'Client', 'Intern Dept']):
        #ordering_institution_bic = counterparty_party_account.Bic().Alias()
        if counterparty_party_account.NetworkAlias():
            ordering_institution_bic = counterparty_party_account.NetworkAlias().Alias()
        if not ordering_institution_bic:
            assert counterparty_party_account.Party(), "The account has no party reference"
            ordering_institution_bic = counterparty_party_account.Party().Swift()
    return ordering_institution_bic

def get_ordering_institution_name(settlement):
    """
    Method to get ordering institution name from given settlement object
    :param settlement:
    :return: ordering institution name
    """
    ordering_institution_name = None
    if settlement.Counterparty().Type() in [ 'Counterparty', 'Broker', 'Client', 'Intern Dept']:
        ordering_institution_name = FSwiftWriterUtils.get_party_full_name(settlement.Counterparty(), cash_settlement_out_config)
    return ordering_institution_name

def get_ordering_institution_address(settlement):
    """
    Method to get ordering institution address
    :param settlement:
    :return: ordering institution address
    """
    ordering_institution_address = None
    if settlement.Counterparty().Type() in [ 'Counterparty', 'Broker', 'Client', 'Intern Dept']:
        ordering_institution_address = FSwiftMLUtils.get_party_address(settlement.Counterparty())
    return ordering_institution_address

def get_counterpartys_intermediary_account(settlement):
    """
    Method to get counterpartys indtermediary account from given settlement
    :param settlement:
    :return: counterparty intermediary account
    """
    intermediary_account = None
    cp_account = settlement.CounterpartyAccountRef()
    if cp_account:
        intermediary_account = cp_account.Account2()
    return intermediary_account

def get_gpi_identifier(settlement):
    """
    Method to get gpi identifier from settlement object
    :param settlement:
    :return: gpi identifier
    """
    gpi_identifier = None
    account = acm.FAccount.Select01('name ="%s" and party = "%s"'%(settlement.AcquirerAccName(), settlement.Acquirer().Name()), None)
    if account:
        gpi_identifier = account.AdditionalInfo().GPI_Identifier()
    return gpi_identifier


def get_counterparty_delivery_agent_details(settlement):
    """Account&Party from which counterparty will transfer funds to acquirer"""
    party_details = {}
    sett_wrapper_obj = FMTSettlementWrapper(settlement)
    buy_money_flow = sett_wrapper_obj.buy_money_flow()
    # buy_money_flow sell_money_flow will populate in multi curr scenario for single curr cases we need money_flow
    if not buy_money_flow:
        buy_money_flow = sett_wrapper_obj.money_flow()
    if buy_money_flow:
        party = buy_money_flow.CounterpartyAccount().CorrespondentBank()
        party_account = buy_money_flow.CounterpartyAccount()
        return FSwiftMLUtils.get_party_details(party, party_account, cash_settlement_out_config, intermediary_or_correspondent = "CORRESPONDENT")
    return party_details

def get_counterparty_intermediary_details(settlement):
    party_details = {}
    sett_wrapper_obj = FMTSettlementWrapper(settlement)
    sell_money_flow = sett_wrapper_obj.sell_money_flow()
    # buy_money_flow sell_money_flow will populate in multi curr scenario for single curr cases we need money_flow
    if not sell_money_flow:
        sell_money_flow = sett_wrapper_obj.money_flow()
    if sell_money_flow:
        party = sell_money_flow.CounterpartyAccount().CorrespondentBank2()
        party_account = sell_money_flow.CounterpartyAccount()
        return FSwiftMLUtils.get_party_details(party, party_account, cash_settlement_out_config, intermediary_or_correspondent = "INTERMEDIARY")
    return party_details

def get_counterparty_receiving_agent_details(settlement):
    """Account&Party in which acquirer will receive funds from counterparty"""
    party_details = {}
    sett_wrapper_obj = FMTSettlementWrapper(settlement)
    sell_money_flow = sett_wrapper_obj.sell_money_flow()
    # buy_money_flow sell_money_flow will populate in multi curr scenario for single curr cases we need money_flow
    if not sell_money_flow:
        sell_money_flow = sett_wrapper_obj.money_flow()
    if sell_money_flow:
        party = sell_money_flow.CounterpartyAccount().CorrespondentBank()
        party_account = sell_money_flow.CounterpartyAccount()
        return FSwiftMLUtils.get_party_details(party, party_account, cash_settlement_out_config, intermediary_or_correspondent = "CORRESPONDENT")
    return party_details


def get_acquirer_delivery_agent_details(settlement):
    """Account&Party from which acquirer will transfer funds to counterparty"""
    party_details = {}
    sett_wrapper_obj = FMTSettlementWrapper(settlement)
    sell_money_flow = sett_wrapper_obj.sell_money_flow()
    # buy_money_flow sell_money_flow will populate in multi curr scenario for single curr cases we need money_flow
    if not sell_money_flow:
        sell_money_flow = sett_wrapper_obj.money_flow()
    if sell_money_flow:
        party = sell_money_flow.AcquirerAccount().CorrespondentBank()
        party_account = sell_money_flow.AcquirerAccount()
        return FSwiftMLUtils.get_party_details(party, party_account, cash_settlement_out_config, intermediary_or_correspondent = "CORRESPONDENT")
    return party_details

def get_acquirer_intermediary_details(settlement):
    party_details = {}
    sett_wrapper_obj = FMTSettlementWrapper(settlement)
    buy_money_flow = sett_wrapper_obj.buy_money_flow()
    # buy_money_flow sell_money_flow will populate in multi curr scenario for single curr cases we need money_flow
    if not buy_money_flow:
        buy_money_flow = sett_wrapper_obj.money_flow()
    if buy_money_flow:
        party = buy_money_flow.AcquirerAccount().CorrespondentBank2()
        party_account = buy_money_flow.AcquirerAccount()
        return FSwiftMLUtils.get_party_details(party, party_account, cash_settlement_out_config, intermediary_or_correspondent = "INTERMEDIARY")
    return party_details

def get_acquirer_receiving_agent_details(settlement):
    """Account&Party in which counterparty will receive funds from acquirer"""
    party_details = {}
    sett_wrapper_obj = FMTSettlementWrapper(settlement)
    buy_money_flow = sett_wrapper_obj.buy_money_flow()
    # buy_money_flow sell_money_flow will populate in multi curr scenario for single curr cases we need money_flow
    if not buy_money_flow:
        buy_money_flow = sett_wrapper_obj.money_flow()
    if buy_money_flow:
        party = buy_money_flow.AcquirerAccount().CorrespondentBank()
        party_account = buy_money_flow.AcquirerAccount()
        return FSwiftMLUtils.get_party_details(party, party_account, cash_settlement_out_config, intermediary_or_correspondent = "CORRESPONDENT")
    return party_details

def get_beneficiary_institution_details(settlement):
    party_details = {}
    sett_wrapper_obj = FMTSettlementWrapper(settlement)
    sell_money_flow = sett_wrapper_obj.sell_money_flow()
    # buy_money_flow sell_money_flow will populate in multi curr scenario for single curr cases we need money_flow
    if not sell_money_flow:
        sell_money_flow = sett_wrapper_obj.money_flow()
    if sell_money_flow:
        party = sell_money_flow.CounterpartyAccount().CorrespondentBank()
        party_account = sell_money_flow.CounterpartyAccount()
        return FSwiftMLUtils.get_party_details(party, party_account, cash_settlement_out_config)
    return party_details

def get_buy_amount(settlement):
    sett_wrapper_obj = FMTSettlementWrapper(settlement)
    return sett_wrapper_obj.buy_amount()

def get_buy_currency(settlement):
    sett_wrapper_obj = FMTSettlementWrapper(settlement)
    return sett_wrapper_obj.buy_money_flow().Currency().Name()

def get_sell_amount(settlement):
    sett_wrapper_obj = FMTSettlementWrapper(settlement)
    return sett_wrapper_obj.sell_amount()

def get_sell_currency(settlement):
    sett_wrapper_obj = FMTSettlementWrapper(settlement)
    return sett_wrapper_obj.sell_money_flow().Currency().Name()


def get_trade_date(settlement):
    """ get the trade date """
    return settlement.Trade().TradeTime()[:10]


def get_party_a_details(settlement):
    """ Changed accroding to discussions so the logic is:
        Party A should use the account for the amount to be paid (sold amount)
        and Party B should use the account for the amount to be received (buy amount) (buy/sell direction seen from sender of MT300 = acquirer)  """
    party_details = {}
    sett_wrapper_obj = FMTSettlementWrapper(settlement)
    money_flow = sett_wrapper_obj.sell_money_flow()
    # buy_money_flow sell_money_flow will populate in multi curr scenario for single curr cases we need money_flow
    if not money_flow:
        money_flow = sett_wrapper_obj.money_flow()
    if money_flow:
        acquirer = money_flow.Acquirer()
        acquirer_account = money_flow.AcquirerAccount()
        return FSwiftMLUtils.get_party_details(acquirer, acquirer_account, cash_settlement_out_config)
    return party_details



def get_bic_from_party(party):
    """ Method to retrieve BIC from party object """
    bic = ''
    for alias in party.Aliases():
        if alias.Type().Name() == 'SWIFT':
            bic = alias.Name()
    if not bic:
        bic = party.Swift()
    return bic


def get_fund_manager_details(fund_manager):
    """ Get fund manager details like name, address, bic from party object """
    fund_manager_details = {}
    if fund_manager:
        fund_manager_obj = acm.FParty[fund_manager]
        if fund_manager_obj:
            fund_manager_details = FSwiftMLUtils.get_party_details(fund_manager_obj, None, cash_settlement_out_config)
            bic = get_bic_from_party(fund_manager_obj)
            if bic:
                fund_manager_details['BIC'] = bic
            if fund_manager_details:
                fund_manager_details = fund_manager_details
        else:
            notifier.WARN("No party with name '%s' found in database"%fund_manager)
    else:
        notifier.WARN("FundManager is mandatory in fund_manager_82A/D/J")
    return fund_manager_details


def get_executing_broker(acm_obj):
    """ Method to retrieve executing broker"""
    executing_broker = ''
    if acm_obj.Trade() and acm_obj.Trade().Broker():
        executing_broker = acm_obj.Trade().Broker().Name()
    return executing_broker


def get_executing_broker_details(executing_broker):
    """ Method to retrieve executing broker details like name, address, bic """
    executing_broker_details = {}
    if executing_broker:
        executing_broker_obj = acm.FParty[executing_broker]
        if executing_broker_obj:
            executing_broker_details = FSwiftMLUtils.get_party_details(executing_broker_obj, None, cash_settlement_out_config)
            bic = get_bic_from_party(executing_broker_obj)
            if bic:
                executing_broker_details['BIC'] = bic
            if executing_broker_details:
                executing_broker_details = executing_broker_details
        else:
            notifier.WARN("No party with name '%s' found in database" % executing_broker)
    else:
        notifier.WARN("ExecutingBroker is mandatory in executing_broker_87A/D/J")
    return executing_broker_details

def calculate_currency_amount(acm_obj):
    """ Method to retrieve gain indicator, currency and amount"""
    currency_amount = {}
    trade = acm_obj.Trade()
    original_trade_number = trade.ContractTrdnbr()
    current_trade_number = trade.Oid()

    if current_trade_number != original_trade_number:
        original_price = FSwiftMLUtils.get_exchange_rate(original_trade_number)
        current_price = FSwiftMLUtils.get_exchange_rate(current_trade_number)
        difference = original_price - current_price
        base_currency = acm.FTrade[original_trade_number].Instrument().Name()
        total_price = difference * trade.Quantity()
        profit_or_loss = total_price / original_price
        if base_currency and str(profit_or_loss):
            currency_amount['AMOUNT'] = profit_or_loss
            currency_amount['CURRENCY'] = base_currency
    return currency_amount


def base_currency(acm_obj):
    trade = acm_obj.Trade()
    trade_number = trade.ContractTrdnbr()
    base_currency = acm.FTrade[trade_number].Instrument().Name()
    return base_currency


def gain_indicator(acm_obj):
    """ Method to return gain indication """
    gain_or_loss = calculate_currency_amount(acm_obj)
    gain_or_loss = gain_or_loss['AMOUNT']
    if gain_or_loss > 0:
        indicator = 'Y'
    elif gain_or_loss < 0:
        indicator = 'N'
    else:
        indicator = 'Y'
    return indicator


def reference_of_previous_deals(acm_obj):
    """ Method to retrieve trades related to the given acm_obj """
    parent_trade = acm_obj.Trade().ContractTrdnbr()
    current_trade = acm_obj.Trade().Oid()
    if current_trade != parent_trade:
        query = "contractTrdnbr=%d" %(parent_trade)
        trades  = acm.FTrade.Select(query)
        settlement_list = []
        for trade in trades:
            for sett in trade.Settlements():
                if sett.Type() in ['Premium', 'Premium 2']:
                    settlement_list.append(sett)

        ref_of_previous_deals = []
        for settlement_obj in settlement_list:
            swift_message = FSwiftMLUtils.get_outgoing_mt_message(settlement_obj)
            if swift_message:

                senders_reference = FSwiftMLUtils.get_field_value(swift_message, '20')
                ref_of_previous_deals.append(senders_reference)
        return ref_of_previous_deals


def get_bic(party_details):
    bic = None
    if 'BIC' in party_details:
        bic = party_details['BIC']

    return bic

def sibling_message_generation_failed(message_list, msg_type, acm_obj, state):
    for raw_message_type in message_list:
        message_type = 'MT' + str(raw_message_type)
        if str(message_type.split('-')[0]) != str(msg_type):
            ext_obj = FSwiftMLUtils.FSwiftExternalObject.get_external_object(acm_obj = acm_obj, msg_typ=str(message_type), integration_type='Outgoing')
            business_pro = FSwiftMLUtils.FSwiftExternalObject.get_business_process_from_external_object(ext_obj)
            if business_pro and business_pro.CurrentStateName() == state:
                return True


def is_settlement_created_within_cutoff_time(msg_creation_date, settlement_obj, convert_to_local = False):
    """
    This function check if the swift message is created within external cutoff time.
    Compare create date time and cutoff date time
    :param msg_creation_date: creation date
    :param settlement_obj: settlement object
    :param convert_to_local: boolean parameter
    :return: boolean
    """
    ret_val = True
    msg_creation_date = re.findall("([0-9]{4}-[0-9]{2}-[0-9]{2})[T ]?([0-9]{2}:[0-9]{2}:[0-9]{2})", msg_creation_date)
    if not settlement_obj.IsLatePaymentManuallyAuthorised():
        if msg_creation_date:
            if settlement_obj.ExternalCutoffDay() and settlement_obj.ExternalCutoffTimeInHHMM():
                create_date, create_time = msg_creation_date[0]
                creation_datetime_obj = datetime.strptime('{} {}'.format(create_date, create_time), '%Y-%m-%d %H:%M:%S')
                if convert_to_local:
                    creation_datetime_obj = acm.Time.UtcToLocal(str(creation_datetime_obj))
                    creation_datetime_obj = datetime.strptime(creation_datetime_obj, '%Y-%m-%d %H:%M:%S')

                cutoff_datetime_obj = datetime.strptime('{}{}'.format(settlement_obj.ExternalCutoffDay(),
                                                               settlement_obj.ExternalCutoffTimeInHHMM()), '%Y-%m-%d%H:%M')
                if creation_datetime_obj > cutoff_datetime_obj:
                    ret_val = False
        else:
            ret_val = False

    return ret_val


def get_charges_information(settlement_obj, charges_info_spec, charge_bearer, regime):
    """
    This function returns charges information from addition information.
    :param settlement_obj: settlement object
    :return: dictionary 
    """
    charge_bearer_spec_info = None
    if charges_info_spec:
        regime_spec_info = charges_info_spec.get(regime)
        if regime_spec_info:
            charge_bearer_spec_info = regime_spec_info.get(charge_bearer)
            
    prev_curr = None
    amount = 0
    bic = None
    charges_info = dict()
    if settlement_obj:
        trade_obj = settlement_obj.Trade()
        if trade_obj:
            for each_payment in trade_obj.Payments():
                if each_payment.Type() in charge_bearer_spec_info:
                    if not prev_curr or (prev_curr and each_payment.Currency().Name() == prev_curr):
                        amount += each_payment.Amount()
                        prev_curr = each_payment.Currency().Name()
                        bic = get_bic_from_party(each_payment.Party())
                    else:
                        amount = '[ERROR] : InValidSetup; Currency is not same for each additional payments.'
                        break
            if trade_obj.Payments():
                if str(amount).startswith('[ERROR]'):
                    charges_info['amount'] = amount
                else:
                    charges_info['amount'] = abs(amount)
                charges_info['currency'] = prev_curr
                charges_info['bic'] = bic
    return charges_info


...

  FCashSettlementCalculator
"""----------------------------------------------------------------------------
MODULE
    FCashSettlementCalculator : FCashSettlementCalculator contains the logic for calculating the MT type for cash settlements.

FUNCTION
    get_applicable_mt_type()
        Returns the applicable mt types for a give mt type as input

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""

MTMapping_Settlement = \
{
    '103':      [
                    {'Amount':'<0', 'CPType':'Client',  'DeliveryType':'!Delivery versus Payment',  'IsCOV':'False', 'IsMX':'False', 'IsMXRtgsTarget2': 'False', 'IsMXRtgsSAMOS':'False', 'IsMXCBPRPlus':'False'},
                    {'Amount':'<0', 'CPType':'Broker',  'HasBIC':'False', 'DeliveryType':'!Delivery versus Payment', 'IsCOV':'False', 'IsMX':'False', 'IsMXRtgsTarget2': 'False', 'IsMXRtgsSAMOS':'False', 'IsMXCBPRPlus':'False'}
                ],

    '199':      [
                    {
                        'Amount':'<0', 'CPType':'Client',  'Relation':'Good Value',  'Status':'!Pending Cancellation','TARGET2':'False',
                        'EBA':'False','DeliveryType':'!Delivery versus Payment', 'IsCOV':'False', 'IsMX':'False', 'IsMXRtgsTarget2': 'False', 'IsMXRtgsSAMOS':'False', 'IsMXCBPRPlus':'False'
                    },
                    {
                        'Amount':'<0', 'CPType':'Broker',  'HasBIC':'False',  'Relation':'Good Value',  'Status':'!Pending Cancellation',
                        'TARGET2':'False',  'EBA':'False','DeliveryType':'!Delivery versus Payment', 'IsCOV':'False', 'IsMX':'False', 'IsMXRtgsTarget2': 'False', 'IsMXRtgsSAMOS':'False', 'IsMXCBPRPlus':'False'
                    }
                ],

    '192':      [
                    { 'Amount':'<0',  'CPType':'Client',  'Relation':'Cancellation', 'DeliveryType':'!Delivery versus Payment', 'IsCOV':'False', 'IsMXRtgsTarget2': 'False', 'IsMX':'False', 'IsMXRtgsSAMOS':'False', 'IsMXCBPRPlus':'False'},
                    { 'Amount':'<0',  'CPType':'Broker',  'HasBIC':'False',   'Relation':'Cancellation','DeliveryType':'!Delivery versus Payment', 'IsCOV':'False', 'IsMXRtgsTarget2': 'False', 'IsMX':'False', 'IsMXRtgsSAMOS':'False', 'IsMXCBPRPlus':'False'},
                    { 'Amount':'<0',  'CPType':'Client',   'Relation':'Good Value',   'Status':'Pending Cancellation', 'TARGET2':'False',
                        'EBA':'False',  'DeliveryType':'!Delivery versus Payment', 'IsCOV':'False','IsMXRtgsTarget2': 'False', 'IsMX':'False', 'IsMXRtgsSAMOS':'False', 'IsMXCBPRPlus':'False'
                    },
                    { 'Amount':'<0',  'CPType':'Broker',  'HasBIC':'False', 'Relation':'Good Value',  'Status':'Pending Cancellation', 'TARGET2':'False',
                        'EBA':'False', 'DeliveryType':'!Delivery versus Payment', 'IsCOV':'False', 'IsMXRtgsTarget2': 'False', 'IsMX':'False', 'IsMXRtgsSAMOS':'False', 'IsMXCBPRPlus':'False'
                    }
                ],

    '200':      [
                    {'Amount':'<0', 'DeliveryType':'!Delivery versus Payment', 'TradeTypeAccountTransfer':'True', 'IsMXRtgsTarget2' : 'False','IsMX':'False', 'IsLiquidityCashTransfer' : 'False', 'IsMXRtgsSAMOS':'False', 'IsMXCBPRPlus':'False'}
                ],
    'camt050_T2':      [
                    {'Amount':'<0', 'DeliveryType':'!Delivery versus Payment', 'TradeTypeAccountTransfer':'True', 'IsMXRtgsTarget2' : 'True', 'IsLiquidityCashTransfer' : 'True', 'IsMX':'False', 'IsMXRtgsSAMOS':'False', 'IsMXCBPRPlus':'False'}
                ],


    '202':      [
                    {'Amount':'<0','CPType':'Counterparty','DeliveryType':'!Delivery versus Payment', 'IsMX':'False', 'IsThirdPartyFX':'False', 'IsMXRtgsTarget2' : 'False', 'IsMXRtgsSAMOS':'False', 'IsMXCBPRPlus':'False'},
                    {'Amount':'<0','CPType':'Broker', 'HasBIC':'True', 'DeliveryType':'!Delivery versus Payment', 'IsMX':'False', 'IsThirdPartyFX':'False', 'IsMXRtgsTarget2' : 'False', 'IsMXRtgsSAMOS':'False', 'IsMXCBPRPlus':'False'}
                ],

    'pacs009':
                [
                    {'Amount':'<0','CPType':'Counterparty','DeliveryType':'!Delivery versus Payment', 'IsMX':'True', 'IsMXRtgsTarget2' : 'False', 'IsMXRtgsSAMOS':'False', 'IsMXCBPRPlus':'False'},
                    {'Amount':'<0','CPType':'Broker', 'HasBIC':'True', 'DeliveryType':'!Delivery versus Payment', 'IsMX':'True', 'IsMXRtgsTarget2' : 'False', 'IsMXRtgsSAMOS':'False', 'IsMXCBPRPlus':'False'}
                  ],

    'pacs008':   [
                    {'Amount':'<0', 'CPType':'Client',  'DeliveryType':'!Delivery versus Payment',  'IsCOV':'False', 'IsMX':'True', 'IsMXRtgsTarget2' : 'False', 'IsMXRtgsSAMOS':'False', 'IsMXCBPRPlus':'False'},
                    {'Amount':'<0', 'CPType':'Broker',  'HasBIC':'False', 'DeliveryType':'!Delivery versus Payment',    'IsCOV':'False', 'IsMX':'True', 'IsMXRtgsTarget2' : 'False', 'IsMXRtgsSAMOS':'False', 'IsMXCBPRPlus':'False'}
                ],

    'pacs008_T2':[
                    {'Relation':'!Cancellation', 'Amount':'<0', 'CPType':'Client',  'DeliveryType':'!Delivery versus Payment',  'IsCOV':'False', 'IsMX':'False', 'IsMXRtgsTarget2' : 'True', 'IsMXRtgsSAMOS':'False', 'IsMXCBPRPlus':'False'},
                    {'Relation':'!Cancellation', 'Amount':'<0', 'CPType':'Broker',  'HasBIC':'False', 'DeliveryType':'!Delivery versus Payment',    'IsCOV':'False', 'IsMX':'False', 'IsMXRtgsTarget2' : 'True', 'IsMXRtgsSAMOS':'False', 'IsMXCBPRPlus':'False'}
                ],
    'pacs009_T2':
                [
                    {'Relation':'!Cancellation', 'Amount':'<0','CPType':'Counterparty','DeliveryType':'!Delivery versus Payment', 'IsMX':'False', 'IsMXRtgsTarget2' : 'True', 'IsMXRtgsSAMOS':'False', 'IsMXCBPRPlus':'False'},
                    {'Relation':'!Cancellation', 'Amount':'<0','CPType':'Broker', 'HasBIC':'True', 'DeliveryType':'!Delivery versus Payment', 'IsMX':'False', 'IsMXRtgsTarget2' : 'True', 'IsMXRtgsSAMOS':'False', 'IsMXCBPRPlus':'False'}
                ],
    'camt056_T2':
            [
                {'Relation':'Cancellation', 'Amount': '<0', 'CPType': 'Client', 'DeliveryType': '!Delivery versus Payment', 'IsCOV': 'False', 'IsMX': 'False', 'IsMXRtgsTarget2': 'True', 'IsMXRtgsSAMOS':'False', 'IsMXCBPRPlus':'False'},
                {'Relation':'Cancellation', 'Amount': '<0', 'CPType': 'Broker', 'HasBIC': 'False', 'DeliveryType': '!Delivery versus Payment', 'IsCOV': 'False', 'IsMX': 'False', 'IsMXRtgsTarget2': 'True', 'IsMXRtgsSAMOS':'False', 'IsMXCBPRPlus':'False'},
                {'Relation':'Cancellation', 'Amount': '<0', 'CPType': 'Counterparty', 'DeliveryType': '!Delivery versus Payment', 'IsMX': 'False', 'IsMXRtgsTarget2': 'True', 'IsMXRtgsSAMOS':'False', 'IsMXCBPRPlus':'False'},
                {'Relation':'Cancellation', 'Amount': '<0', 'CPType': 'Broker', 'HasBIC': 'True', 'DeliveryType': '!Delivery versus Payment', 'IsMX': 'False', 'IsMXRtgsTarget2': 'True', 'IsMXRtgsSAMOS':'False', 'IsMXCBPRPlus':'False'}
            ],
    'pacs008_SAMOS':
                [
                    {'Relation':'!Cancellation', 'Amount':'<0', 'CPType':'Client',  'DeliveryType':'!Delivery versus Payment',  'IsCOV':'False', 'IsMX':'False', 'IsMXRtgsTarget2' : 'False', 'IsMXRtgsSAMOS':'True', 'IsMXCBPRPlus':'False'},
                    {'Relation':'!Cancellation', 'Amount':'<0', 'CPType':'Broker',  'HasBIC':'False', 'DeliveryType':'!Delivery versus Payment',    'IsCOV':'False', 'IsMX':'False', 'IsMXRtgsTarget2' : 'False', 'IsMXRtgsSAMOS':'True', 'IsMXCBPRPlus':'False'}
                ],
    'pacs009_SAMOS':
                [
                    {'Relation':'!Cancellation', 'Amount':'<0','CPType':'Counterparty','DeliveryType':'!Delivery versus Payment', 'IsMX':'False', 'IsMXRtgsTarget2' : 'False', 'IsMXRtgsSAMOS':'True', 'IsCOV':'False', 'IsMXCBPRPlus':'False'},
                    {'Relation':'!Cancellation', 'Amount':'<0','CPType':'Broker', 'HasBIC':'True', 'DeliveryType':'!Delivery versus Payment', 'IsMX':'False', 'IsMXRtgsTarget2' : 'False', 'IsMXRtgsSAMOS':'True', 'IsCOV':'False', 'IsMXCBPRPlus':'False'}
                ],
    'pacs009COVSAMOS':
                [
                    {'Relation':'!Cancellation', 'Amount':'<0','CPType':'Client','DeliveryType':'!Delivery versus Payment', 'IsMX':'False', 'IsMXRtgsTarget2' : 'False', 'IsMXRtgsSAMOS':'True', 'IsCOV':'True', 'IsMXCBPRPlus':'False'},
                    {'Relation':'!Cancellation', 'Amount':'<0','CPType':'Broker', 'HasBIC':'False', 'DeliveryType':'!Delivery versus Payment', 'IsMX':'False', 'IsMXRtgsTarget2' : 'False', 'IsMXRtgsSAMOS':'True', 'IsCOV':'True', 'IsMXCBPRPlus':'False'}
                ],
    'camt050_SAMOS':      [
                    {'Amount':'<0', 'DeliveryType':'!Delivery versus Payment', 'TradeTypeAccountTransfer':'True', 'IsMXRtgsTarget2' : 'False', 'IsLiquidityCashTransfer' : 'True', 'IsMX':'False', 'IsMXRtgsSAMOS':'True', 'IsMXCBPRPlus':'False'}
                ],

    '210':      [
                    {'Amount':'>0', 'Relation':'!Cancellation', 'NotifyReceipt':'True', 'TradeTypeAccountAdjustment':'False', 'IsThirdPartyFX':'False', 'IsMX':'False', 'IsMXRtgsTarget2': 'False', 'IsMXRtgsSAMOS':'False', 'IsMXCBPRPlus':'False'}
                ],

    'camt057':
                [
                    {'Amount':'>0', 'Relation':'!Cancellation', 'NotifyReceipt':'True', 'TradeTypeAccountAdjustment':'False', 'IsThirdPartyFX':'False', 'IsMX':'True', 'IsMXRtgsTarget2': 'False', 'IsMXRtgsSAMOS':'False', 'IsMXCBPRPlus':'False'}
                ],

    'camt058':
                [
                    {'Amount':'>0', 'Relation':'Cancellation', 'NotifyReceipt':'True', 'TradeTypeAccountAdjustment':'False', 'IsThirdPartyFX':'False', 'IsMX':'True', 'IsMXRtgsTarget2': 'False', 'IsMXRtgsSAMOS':'False', 'IsMXCBPRPlus':'False'}
                ],


    '292':      [
                    {'Amount':'<0', 'CPType':'Counterparty', 'Relation':'Cancellation', 'DeliveryType':'!Delivery versus Payment',  'IsThirdPartyFX':'False', 'IsMX':'False', 'IsMXRtgsTarget2': 'False', 'IsMXRtgsSAMOS':'False', 'IsMXCBPRPlus':'False'},
                    {'Amount':'<0', 'CPType':'Broker', 'HasBIC':'True', 'Relation':'Cancellation', 'DeliveryType':'!Delivery versus Payment',  'IsThirdPartyFX':'False', 'IsMX':'False', 'IsMXRtgsTarget2': 'False', 'IsMXRtgsSAMOS':'False', 'IsMXCBPRPlus':'False'},
                    {'Amount':'<0', 'CPType':'Counterparty', 'Relation':'Good Value', 'Status':'Pending Cancellation', 'TARGET2':'False', 'EBA':'False',
                     'DeliveryType':'!Delivery versus Payment', 'IsThirdPartyFX':'False', 'IsMX':'False', 'IsMXRtgsTarget2': 'False', 'IsMXRtgsSAMOS':'False', 'IsMXCBPRPlus':'False'},
                    {'Amount':'<0', 'CPType':'Broker', 'HasBIC':'True', 'Relation':'Good Value', 'Status':'Pending Cancellation', 'TARGET2':'False', 'EBA':'False',
                     'DeliveryType':'!Delivery versus Payment', 'IsThirdPartyFX':'False', 'IsMX':'False', 'IsMXRtgsTarget2': 'False', 'IsMXRtgsSAMOS':'False', 'IsMXCBPRPlus':'False'},
                    {'Amount':'>0',  'Relation':'Cancellation', 'NotifyReceipt':'True', 'IsThirdPartyFX':'False', 'IsMX':'False', 'IsMXRtgsTarget2': 'False', 'IsMXRtgsSAMOS':'False', 'IsMXCBPRPlus':'False'}
                ],

    '299':      [
                    {'Amount':'<0', 'CPType':'Counterparty', 'Relation':'Good Value', 'Status':'!Pending Cancellation', 'TARGET2':'False', 'EBA':'False',
                     'DeliveryType':'!Delivery versus Payment', 'IsMX':'False', 'IsMXRtgsTarget2': 'False', 'IsMXRtgsSAMOS':'False', 'IsMXCBPRPlus':'False'},
                    {'Amount':'<0', 'CPType':'Broker', 'HasBIC':'True', 'Relation':'Good Value', 'Status':'!Pending Cancellation', 'TARGET2':'False', 'EBA':'False',
                     'DeliveryType':'!Delivery versus Payment', 'IsMX':'False', 'IsMXRtgsTarget2': 'False', 'IsMXRtgsSAMOS':'False', 'IsMXCBPRPlus':'False'},
                ],


    '202COV':   [
                    {'Amount':'<0', 'CPType':'Client',  'DeliveryType':'!Delivery versus Payment',  'IsCOV':'True', 'IsMX':'False', 'IsMXRtgsTarget2': 'False', 'IsMXRtgsSAMOS':'False', 'IsMXCBPRPlus':'False'},
                    {'Amount':'<0', 'CPType':'Broker',  'HasBIC':'False',   'DeliveryType':'!Delivery versus Payment',  'IsCOV':'True', 'IsMX':'False', 'IsMXRtgsTarget2': 'False', 'IsMXRtgsSAMOS':'False', 'IsMXCBPRPlus':'False'}
                ],


    '299COV':      [
                    {
                        'Amount':'<0', 'CPType':'Client',  'Relation':'Good Value',  'Status':'!Pending Cancellation','TARGET2':'False',
                        'EBA':'False','DeliveryType':'!Delivery versus Payment', 'IsCOV':'True', 'IsMX':'False', 'IsMXRtgsTarget2': 'False', 'IsMXRtgsSAMOS':'False', 'IsMXCBPRPlus':'False'
                    },
                    {
                        'Amount':'<0', 'CPType':'Broker',  'HasBIC':'False',  'Relation':'Good Value',  'Status':'!Pending Cancellation',
                        'TARGET2':'False',  'EBA':'False','DeliveryType':'!Delivery versus Payment', 'IsCOV':'True', 'IsMX':'False', 'IsMXRtgsTarget2': 'False', 'IsMXRtgsSAMOS':'False', 'IsMXCBPRPlus':'False'
                    }
                ],


    '292COV':      [
                    { 'Amount':'<0',  'CPType':'Client',  'Relation':'Cancellation', 'DeliveryType':'!Delivery versus Payment', 'IsCOV':'True', 'IsMX':'False', 'IsMXRtgsTarget2': 'False', 'IsMXRtgsSAMOS':'False', 'IsMXCBPRPlus':'False'},
                    { 'Amount':'<0',  'CPType':'Broker',  'HasBIC':'False',   'Relation':'Cancellation','DeliveryType':'!Delivery versus Payment', 'IsCOV':'True', 'IsMX':'False', 'IsMXRtgsTarget2': 'False', 'IsMXRtgsSAMOS':'False', 'IsMXCBPRPlus':'False'},
                    { 'Amount':'<0',  'CPType':'Client',   'Relation':'Good Value',   'Status':'Pending Cancellation', 'TARGET2':'False',
                        'EBA':'False',  'DeliveryType':'!Delivery versus Payment', 'IsCOV':'True', 'IsMX':'False', 'IsMXRtgsTarget2': 'False', 'IsMXRtgsSAMOS':'False', 'IsMXCBPRPlus':'False'
                    },
                    { 'Amount':'<0',  'CPType':'Broker',  'HasBIC':'False', 'Relation':'Good Value',  'Status':'Pending Cancellation', 'TARGET2':'False',
                        'EBA':'False', 'DeliveryType':'!Delivery versus Payment', 'IsCOV':'True', 'IsMX':'False', 'IsMXRtgsTarget2': 'False', 'IsMXRtgsSAMOS':'False', 'IsMXCBPRPlus':'False'
                    },
                    {'Amount':'<0', 'CPType':'Client',  'Status':'Pending Cancellation', 'DeliveryType':'!Delivery versus Payment',  'IsCOV':'True', 'IsMX':'False', 'IsMXRtgsTarget2': 'False', 'IsMXRtgsSAMOS':'False', 'IsMXCBPRPlus':'False'},
                    {'Amount':'<0', 'CPType':'Broker',  'Status':'Pending Cancellation', 'HasBIC':'False',   'DeliveryType':'!Delivery versus Payment',  'IsCOV':'True', 'IsMX':'False', 'IsMXRtgsTarget2': 'False', 'IsMXRtgsSAMOS':'False', 'IsMXCBPRPlus':'False'}
                ],

    '304':      [
                    {'Amount':'<0','DeliveryType':'!Delivery versus Payment', 'IsMX':'False', 'IsThirdPartyFX':'True', 'IsMX':'False', 'IsMXRtgsTarget2': 'False', 'IsMXRtgsSAMOS':'False', 'IsMXCBPRPlus':'False'},
                    {'Amount':'<0', 'HasBIC':'True', 'DeliveryType':'!Delivery versus Payment', 'IsMX':'False', 'IsThirdPartyFX':'True', 'IsMX':'False', 'IsMXRtgsTarget2': 'False', 'IsMXRtgsSAMOS':'False', 'IsMXCBPRPlus':'False'},
                    {'Amount':'<0', 'Relation':'Cancellation', 'DeliveryType':'!Delivery versus Payment',  'IsThirdPartyFX':'True', 'IsMX':'False', 'IsMXRtgsTarget2': 'False', 'IsMXRtgsSAMOS':'False', 'IsMXCBPRPlus':'False'},
                    {'Amount':'<0','HasBIC':'True', 'Relation':'Cancellation', 'DeliveryType':'!Delivery versus Payment',  'IsThirdPartyFX':'True', 'IsMX':'False', 'IsMXRtgsTarget2': 'False', 'IsMXRtgsSAMOS':'False', 'IsMXCBPRPlus':'False'},
                    {'Amount':'<0','Relation':'Good Value', 'Status':'Pending Cancellation', 'TARGET2':'False', 'EBA':'False',
                     'DeliveryType':'!Delivery versus Payment', 'IsThirdPartyFX':'True', 'IsMX':'False', 'IsMXRtgsTarget2': 'False', 'IsMXRtgsSAMOS':'False', 'IsMXCBPRPlus':'False'},
                    {'Amount':'<0','HasBIC':'True', 'Relation':'Good Value', 'Status':'Pending Cancellation', 'TARGET2':'False', 'EBA':'False',
                     'DeliveryType':'!Delivery versus Payment', 'IsThirdPartyFX':'True', 'IsMX':'False', 'IsMXRtgsTarget2': 'False', 'IsMXRtgsSAMOS':'False', 'IsMXCBPRPlus':'False'},
                    {'Amount':'>0',  'Relation':'Cancellation', 'NotifyReceipt':'True', 'IsThirdPartyFX':'True', 'IsMX':'False', 'IsMXRtgsTarget2': 'False', 'IsMXRtgsSAMOS':'False', 'IsMXCBPRPlus':'False'}
                ],
}


def get_applicable_mt_type(acm_object, mt_type):
    """get applicable mt type list for the mt type"""
    import FCashOutMain
    import FSwiftWriterUtils
    import FSwiftMTCalculatorHook

    ret_list = []
    msg_supported = False
    msg_type = FSwiftWriterUtils.swift_format_of_message(mt_type)
    if msg_type == 'MT':
        if "MT%s" % str(mt_type) in FCashOutMain.SUPPORTED_MT_MESSAGE:
            msg_supported = True
    elif msg_type == 'MX':
        if mt_type in FCashOutMain.SUPPORTED_MX_MESSAGE:
            msg_supported = True

    if msg_supported:
        # If the user has defined mt_type specific function in FSwiftMTCalculatorHook use that function
        applicable_mt_type_func = getattr(FSwiftMTCalculatorHook, 'get_applicable_mt_type_%s' % str(mt_type), None)
        if applicable_mt_type_func:
            ret_list = applicable_mt_type_func()
        else:
            import FSwiftMLUtils
            if mt_type == '202COV':
                ret_list = ['103', '202COV']

            elif mt_type in ['199', '299', '299COV']:  # Pay Good Val
                child_settlement = acm_object.Children()
                if child_settlement:
                    child_settlement = child_settlement[0]

                    child_settlement_mt_type = str(FSwiftMLUtils.calculate_mt_type_from_acm_object(child_settlement))

                    if child_settlement_mt_type == '202COV':
                        ret_list = ['103', '202COV', '199-103', '299-202COV']
                    else:
                        pay_good_val_mt = mt_type + '-' + str(child_settlement_mt_type)
                        ret_list = [child_settlement_mt_type, pay_good_val_mt]

            elif mt_type in ['192', '292', '292COV']:  # Cancellation
                #sett status is pend_canc
                if acm_object.Status() != 'Pending Cancellation':
                    child_settlement = acm_object.Children()[0]
                    acm_object = child_settlement

                ext_objs = FSwiftMLUtils.FSwiftExternalObject.get_external_object(acm_obj=acm_object,
                                                                       integration_type='Outgoing', all_records=True)
                for ext_obj in ext_objs:
                    mt_type_temp = mt_type
                    msg_typ = FSwiftMLUtils.FSwiftExternalObject.get_mt_type_from_external_object(ext_obj)
                    bpr = FSwiftMLUtils.FSwiftExternalObject.get_business_process_from_external_object(ext_obj)
                    if ext_obj and bpr:
                        if bpr and bpr.CurrentStateName() in ['Acknowledged', 'Sent']:
                            if msg_typ not in FSwiftWriterUtils.NarrativeMessageTypes:
                                # Don't send cancellation for Narratives
                                if mt_type == '292COV' and msg_typ[2:] in ['103', '199']:
                                    mt_type_temp = '192'
                                canc_mt_type = mt_type_temp[:3] + '-' + msg_typ[2:]
                                if canc_mt_type not in ret_list:
                                    ret_list.append(canc_mt_type)
            elif mt_type in ['pacs009COVSAMOS']:
                ret_list = ['pacs008_SAMOS', 'pacs009COVSAMOS']

        if not ret_list:
            ret_list = [mt_type]

    return ret_list



...

  FCustomerPaymentsOutBase
"""----------------------------------------------------------------------------
MODULE:
    FCustomerPaymentsOutBase

DESCRIPTION:
    This module provides the base class for the FCustomerPayments outgoing implementation

CLASS:
    FCustomerPaymentsOutBase

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
from FCashOutUtils import *
from FCashOutBase import FCashOutBase


class FCustomerPaymentsOutBase(FCashOutBase):
    def __init__(self, acm_obj, swift_obj):
        super(FCustomerPaymentsOutBase, self).__init__(acm_obj, swift_obj)

...

  FInstitutionTransfersOutBase
"""----------------------------------------------------------------------------
MODULE:
    FInstitutionTransfersOutBase

DESCRIPTION:
    This module provides the base class for the FInstitutionTransfers outgoing implementation

CLASS:
    FInstitutionTransfersOutBase

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import FSwiftMLUtils
import FSwiftWriterUtils

import FCashOutUtils
from FCashOutBase import FCashOutBase

class FInstitutionTransfersOutBase(FCashOutBase):
    def __init__(self, acm_obj, swift_obj):
        super(FInstitutionTransfersOutBase, self).__init__(acm_obj, swift_obj)

    #getter
    def intermediary_56A(self):
        """ Returns dictionary as {'ACCOUNT':<value>, 'BIC':<value>}"""
        return FCashOutUtils.get_counterpartys_intermediary_details(self.acm_obj)

    #formatter
    def _format_intermediary_56A(self, val):
        intermediary_account = val.get('ACCOUNT')
        intermediary_bic = val.get('BIC')
        if intermediary_bic:
            if intermediary_account:
                val = "/" + str(intermediary_account) + "\n" + str(intermediary_bic)
            else:
                val = str(intermediary_bic)
            return val

    # getter
    def transaction_reference_20(self):
        """ Returns a dictionary as {'seqnbr':<value>, 'seq_ref':<value>} """
        settlement_prefix = FCashOutUtils.get_settlement_reference_prefix()
        cash_settlement_out_config = FSwiftWriterUtils.get_config_from_fparameter('FCashOut_Config')
        include_tradeno_in_tag_20 = FSwiftMLUtils.incude_trade_no_in_tag20(cash_settlement_out_config)
        val = FSwiftMLUtils.get_sender_ref(self.acm_obj, settlement_prefix, True, include_tradeno_in_tag_20)
        return val

    # formatter
    def _format_transaction_reference_20(self, val):
        sender_ref = FSwiftMLUtils.format_sender_reference(val)
        sender_ref = '{}{}'.format(sender_ref, self.sender_ref_end_char)
        return sender_ref

    # getter
    def date_currency_amount_32A(self):
        """ Returns a dictionary as {'value_date':<value>, 'curr':<value>, 'amount':<value>} """
        values_dict = {}

        value_date = FCashOutUtils.get_value_date(self.acm_obj)
        curr = self.acm_obj.Currency().Name()
        amount = self.acm_obj.Amount()
        values_dict['VALUE_DATE'] = value_date
        values_dict['CURR'] = curr
        values_dict['INTERBANK_SETTLED_AMOUNT'] = amount
        return values_dict

    # formatter
    def _format_date_currency_amount_32A(self, val):
        value_date = val.get('VALUE_DATE')
        curr = val.get('CURR')
        amount = val.get('INTERBANK_SETTLED_AMOUNT')
        date_format = '%y%m%d'
        if value_date and curr and amount:
            amount = FCashOutUtils.apply_currency_precision(curr, abs(float(amount)))
            date = FSwiftWriterUtils.format_date(value_date, date_format)
            date_curr_amount = str(date) + str(curr) + str(FSwiftMLUtils.float_to_swiftmt(str(amount)))
            return date_curr_amount

    # getter account_with_institution_57A
    # Moved to FCashSetttlementOutBase

    # formatter _format_account_with_institution_57A
    # Moved to FCashSetttlementOutBase


...

  FMT101Out
"""----------------------------------------------------------------------------
MODULE:
    FMT101Out

DESCRIPTION:
    This module provides the customizable class for the FMT101 outgoing implementation

CLASS:
    FMT101

VERSION: 3.6.3-0.5.6048
----------------------------------------------------------------------------"""
import FSwiftWriterLogger
notifier = FSwiftWriterLogger.FSwiftWriterLogger('CashSetlemnt', 'FCashOutNotify_Config')
import FMT101OutBase
import acm
import MT101
from FSwiftMLUtils import accepts
import xml.dom.minidom
from FSwiftWriterEngine import validate_with

@accepts([acm.FSettlement, MT101.CTD_ANON, xml.dom.minidom.Document])
class FMT101(FMT101OutBase.FMT101Base):

    def __init__(self, acm_obj, swift_obj):
        super(FMT101, self).__init__(acm_obj, swift_obj)

    # To override existing mappings use below methods to write your own logic

    """
    senders_reference_20
    message_index_total_28D
    ordering_customer_50F
    ordering_customer_50G
    ordering_customer_50H   
    requested_execution_date_30
    transaction_reference_21
    currency_and_transaction_amount_32B
    intermediary_56A
    intermediary_56C
    intermediary_56D
    account_with_institution_57A
    account_with_institution_57C
    account_with_institution_57D
    beneficiary_customer_59A
    beneficiary_customer_no_option_59
    beneficiary_customer_59F
    details_of_charges_71A
    """

    """
    To override the options provided, use below methods to write your own logic:-
    methods:- 
    get_ordering_customer_option (Tag-50 options:F/G/H)
    get_intermediary_option (Tag-56 options:A/C/D)
    get_account_with_institution_option (Tag-57 options:A/C/D)
    get_beneficiary_customer_option (Tag-59 options:A/NO OPTION/F)
    
    For example:
    def get_ordering_customer_option(self):
        condition = True
        if condition:
            return 'A'
        else:
            return 'F'

    """


class FMT101MessageHeader(FMT101OutBase.FMT101OutBaseMessageHeader):

    def __init__(self, acm_obj, swift_msg_tags):
        self.acm_obj = acm_obj
        self.swift_msg_tags = swift_msg_tags
        super(FMT101MessageHeader, self).__init__(acm_obj, swift_msg_tags)
    # To override existing mappings use below methods to write your own logic
    """    
    message_type
    sender_logical_terminal_address
    receiver_logical_terminal_address
    logical_terminal_address
    message_user_reference    
    """


class FMT101NetworkRules(FMT101OutBase.FMT101OutBaseNetworkRules):

    def __init__(self, swift_message_obj, swift_message, acm_obj):
        super(FMT101NetworkRules, self).__init__(swift_message_obj, swift_message, acm_obj)


...

  FMT101OutBase
"""----------------------------------------------------------------------------
MODULE:
    FMT101OutBase

DESCRIPTION:
    This module provides the base class for the FMT101 outgoing implementation

CLASS:
    FMT101Base

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import acm
import uuid
import MT101
import FSwiftMLUtils
import FSwiftWriterLogger
import FSwiftWriterUtils
from FCustomerPaymentsOutBase import FCustomerPaymentsOutBase
import FCashOutUtils
import FSwiftWriterMessageHeader
from FSwiftWriterEngine import validate_with
notifier = FSwiftWriterLogger.FSwiftWriterLogger('CashSetlemnt', 'FCashOutNotify_Config')
CONFIG_PARAM = FSwiftMLUtils.Parameters('FSwiftWriterConfig')

class FMT101Base(FCustomerPaymentsOutBase):

    def __init__(self, acm_obj, swift_obj):
        super(FMT101Base, self).__init__(acm_obj, swift_obj)
        self.swift_message_type = 'MT101'
        self.sender_ref_end_char = FSwiftMLUtils.get_character_for_mt_type(self.swift_message_type)


    def _message_sequences(self):
        self.swift_obj.SequenceA_GeneralInformation = MT101.MT101_SequenceA_GeneralInformation()
        self.swift_obj.SequenceB_TransactionDetails = MT101.MT101_SequenceB_TransactionDetails()


    # --------------------------------- senders_reference -------------------------------------------
    # getter
    def senders_reference_20(self):
        """ Returns a senders_reference_20 as string """
        settlement_prefix = FCashOutUtils.get_settlement_reference_prefix()
        cash_settlement_out_config = FSwiftWriterUtils.get_config_from_fparameter('FCashOut_Config')
        include_tradeno_in_tag_20 = FSwiftMLUtils.incude_trade_no_in_tag20(cash_settlement_out_config)
        val = FSwiftMLUtils.get_sender_ref(self.acm_obj, settlement_prefix, include_tradeno_in_tag_20=include_tradeno_in_tag_20)
        return val

    # formatter
    def _format_senders_reference_20(self, val):
        """Formats the value provided by getter method"""
        if val:
            val = FSwiftMLUtils.format_sender_reference(val)
            senders_reference = '{}{}'.format(val, self.sender_ref_end_char)
            return senders_reference

    # validator
    @validate_with(MT101.MT101_SequenceA_GeneralInformation_20_Type)
    def _validate_senders_reference_20(self, val):
        """validates the value provided by formatter method"""
        FCashOutUtils.validate_slash_and_double_slash(val, "Senders Reference")
        return val

    # setter
    def _set_senders_reference_20(self, val):
        """sets the value on python object of MT101"""
        self.swift_obj.SequenceA_GeneralInformation.SendersReference = val
        self.swift_obj.SequenceA_GeneralInformation.SendersReference.swiftTag = "20"

    # --------------------------------- message_index_total -------------------------------------------
    # getter
    def message_index_total_28D(self):
        """ Returns a senders_reference_20 as string """
        val = '1/1'
        return val

    # formatter
    def _format_message_index_total_28D(self, val):
        """Formats the value provided by getter method"""
        if val:
            return val

    # validator
    @validate_with(MT101.MT101_SequenceA_GeneralInformation_28D_Type)
    def _validate_message_index_total_28D(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _set_message_index_total_28D(self, val):
        """sets the value on python object of MT101"""
        self.swift_obj.SequenceA_GeneralInformation.MessageIndexTotal = val
        self.swift_obj.SequenceA_GeneralInformation.MessageIndexTotal.swiftTag = "28D"

    # --------------------------------- ordering_customer -------------------------------------------
    #option_getter
    def get_ordering_customer_option(self):
        """Returns default option if override is not provided"""
        return 'F'

    # setter
    def _set_OPTION_ordering_customer(self):
        """Returns name of the getter method"""
        getter_name = ''
        ordering_customer_option = self.get_ordering_customer_option()
        if ordering_customer_option == "F":
            getter_name = 'ordering_customer_50F'
        elif ordering_customer_option == "G":
            getter_name = 'ordering_customer_50G'
        elif ordering_customer_option == "H":
            getter_name = 'ordering_customer_50H'
        else:
            notifier.WARN("%s Option %s is not supported for tag %s. Mapping default option." % (
                self.swift_message_type, str(ordering_customer_option), 'OrderingCustomer_50a'))
            getter_name = 'ordering_customer_50F'  # default
        return getter_name

    # getter
    def ordering_customer_50F(self):
        """ Returns a dictionary as {'ACCOUNT': value, 'NAME':value, 'ADDRESS':value,
        'COUNTRY_CODE':value, 'TOWN':value, 'ZIP_CODE':value} """
        return FCashOutUtils.get_acquirer_details(self.acm_obj)

    # formatter
    def _format_ordering_customer_50F(self, val):
        """Formats the value provided by getter method"""
        account = val.get('ACCOUNT')
        name = val.get('NAME')
        address = val.get('ADDRESS')
        country_code = val.get('COUNTRY_CODE')
        town = val.get('TOWN')
        town = "{}{}".format('/',str(town))
        zipcode = val.get('ZIP_CODE')
        zipcode = "{}{}".format('/', str(zipcode))
        name_list, address_list, country_and_town_list = [], [], []
        if name:
            name_list = FSwiftWriterUtils.split_text_logically_and_prefix(str(name), 33, '1/')
        if address:
            address_list = FSwiftWriterUtils.split_text_logically_and_prefix(str(address), 33, '2/')
        if country_code:
            additional_details = str(country_code)
            if town:
                additional_details = "{}{}".format(additional_details, str(town))
                if zipcode:
                    additional_details = "{}{}".format(additional_details, str(zipcode))
            country_and_town_list = FSwiftWriterUtils.split_text_logically_and_prefix(
                str(additional_details), 33, '3/')
        value = FSwiftWriterUtils.allocate_space_for_name_and_address_with_constraint(name_list, address_list,
                                                                                      country_and_town_list)
        if account:
            account = "{}{}".format('/', account)
            value = '\n'.join([account, value])
        return value


    # validator
    @validate_with(MT101.MT101_SequenceA_GeneralInformation_50F_Type)
    def _validate_ordering_customer_50F(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setordering_customer_50F(self, val):
        """sets the value on python object of MT101"""
        self.swift_obj.SequenceA_GeneralInformation.OrderingCustomer_F = val
        self.swift_obj.SequenceA_GeneralInformation.OrderingCustomer_F.swiftTag = '50F'

    # getter
    def ordering_customer_50G(self):
        """ Returns a dictionary as {'ACCOUNT': value, 'BIC':value} """

        return FCashOutUtils.get_acquirer_details(self.acm_obj)

    # formatter
    def _format_ordering_customer_50G(self, val):
        """Formats the value provided by getter method"""
        ordering_customer_account = val.get('ACCOUNT')
        ordering_customer_bic = val.get('BIC')
        if ordering_customer_bic:
            if ordering_customer_account:
                val = ''.join(["/", str(ordering_customer_account), "\n", str(ordering_customer_bic)])
            else:
                val = str(ordering_customer_bic)

            return val

    # validator
    @validate_with(MT101.MT101_SequenceA_GeneralInformation_50G_Type)
    def _validate_ordering_customer_50G(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setordering_customer_50G(self, val):
        """sets the value on python object of MT101"""
        self.swift_obj.SequenceA_GeneralInformation.OrderingCustomer_G = val
        self.swift_obj.SequenceA_GeneralInformation.OrderingCustomer_G.swiftTag = '50G'

    # getter
    def ordering_customer_50H(self):
        """ Returns a dictionary as {'ACCOUNT': value, 'NAME':value, 'ADDRESS':value} """
        values_dict = {}
        return FCashOutUtils.get_acquirer_details(self.acm_obj)

    # formatter
    def _format_ordering_customer_50H(self, val):
        """Formats the value provided by getter method"""
        account = val.get('ACCOUNT')
        name = val.get('NAME')
        address = val.get('ADDRESS')

        if name and address:
            name = FSwiftWriterUtils.split_text_and_prefix(name, 35)
            address = FSwiftWriterUtils.split_text_and_prefix(address, 35)
            val = FSwiftWriterUtils.allocate_space_for_name_address_without_constraint(name, address)
            if account:
                val = ''.join(["/", str(account), "\n", str(val)])
            return val

    # validator
    @validate_with(MT101.MT101_SequenceA_GeneralInformation_50H_Type)
    def _validate_ordering_customer_50H(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setordering_customer_50H(self, val):
        """sets the value on python object of MT101"""
        self.swift_obj.SequenceA_GeneralInformation.OrderingCustomer_H = val
        self.swift_obj.SequenceA_GeneralInformation.OrderingCustomer_H.swiftTag = '50H'

    #----------------------------------requested_execution_date------------------------------------------
    # getter
    def requested_execution_date_30(self):
        """ Returns value_date """
        value_date = FCashOutUtils.get_value_date(self.acm_obj)
        return value_date

    # formatter
    def _format_requested_execution_date_30(self, val):
        """Formats the value provided by getter method"""
        date_format = '%y%m%d'
        if val:
            value_date = FSwiftWriterUtils.format_date(val, date_format)
            return value_date

    # validator
    @validate_with(MT101.MT101_SequenceA_GeneralInformation_30_Type)
    def _validate_requested_execution_date_30(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _set_requested_execution_date_30(self, val):
        """sets the value on python object of MT101"""
        self.swift_obj.SequenceA_GeneralInformation.RequestedExecutionDate = val
        self.swift_obj.SequenceA_GeneralInformation.RequestedExecutionDate.swiftTag = "30"

    #----------------------------------transaction_reference_21------------------------------------------
    # getter
    def transaction_reference_21(self):
        """ returns settlement number as reference"""
        settlement_number = self.acm_obj.Oid()
        return settlement_number

    # formatter
    def _format_transaction_reference_21(self, val):
        """Formats the value provided by getter method"""
        return val

    # validator
    @validate_with(MT101.MT101_SequenceB_TransactionDetails_21_Type)
    def _validate_transaction_reference_21(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _set_transaction_reference_21(self, val):
        """sets the value on python object of MT101"""
        self.swift_obj.SequenceB_TransactionDetails.TransactionReference = val
        self.swift_obj.SequenceB_TransactionDetails.TransactionReference.swiftTag = "21"

    #----------------------------------currency_and_transaction_amount_32B------------------------------------------
    # getter
    def currency_and_transaction_amount_32B(self):
        """ Returns a dictionary as {'currency':value, 'amount':value} """
        values_dict = {}
        currency = self.acm_obj.Currency().Name()
        amount = self.acm_obj.Amount()
        values_dict['amount'] = amount
        values_dict['currency'] = currency
        return values_dict

    # formatter
    def _format_currency_and_transaction_amount_32B(self, val):
        """Formats the value provided by getter method"""
        currency = val.get('currency')
        amount = val.get('amount')

        if currency and amount:
            amount = FCashOutUtils.apply_currency_precision(currency, abs(float(amount)))
            val = "{}{}".format(str(currency), str(FSwiftMLUtils.float_to_swiftmt(str(amount))))
            return val
        return val

    # validator
    @validate_with(MT101.MT101_SequenceB_TransactionDetails_32B_Type)
    def _validate_currency_and_transaction_amount_32B(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _set_currency_and_transaction_amount_32B(self, val):
        """sets the value on python object of MT101"""
        self.swift_obj.SequenceB_TransactionDetails.CurrencyTransactionAmount = val
        self.swift_obj.SequenceB_TransactionDetails.CurrencyTransactionAmount.swiftTag = "32B"

    # --------------------------------- Intermediary_56a -----------------------------------------------

    # option_getter
    def get_intermediary_option(self):
        """Returns default option if override is not provided"""
        return 'A'

    # setter
    def _set_OPTION_intermediary(self):
        """Returns name of the getter method"""
        intermediary_option = self.get_intermediary_option()
        if intermediary_option == "A":
            getter_name = 'intermediary_56A'
        elif intermediary_option == "C":
            getter_name = 'intermediary_56C'
        elif intermediary_option == "D":
            getter_name = 'intermediary_56D'
        else:
            notifier.WARN("%s Option %s is not supported for tag %s. Mapping default option." % (
                self.swift_message_type, str(intermediary_option), 'Intermediary_56a'))
            getter_name = 'intermediary_56A'  # default
        return getter_name

    # getter
    def intermediary_56A(self):
        """ Returns a dictionary as {'intermediary_account': value, 'intermediary_bic':value} """
        return FCashOutUtils.get_counterpartys_intermediary_details(self.acm_obj)

    # formatter
    def _format_intermediary_56A(self, val):
        """Formats the value provided by getter method"""
        intermediary_account = val.get('ACCOUNT')
        intermediary_bic = val.get('BIC')
        if intermediary_bic:
            if intermediary_account:
                val = ''.join(["/", str(intermediary_account), "\n", str(intermediary_bic)])
            else:
                val = str(intermediary_bic)
            return val

    # validator
    @validate_with(MT101.MT101_SequenceB_TransactionDetails_56A_Type)
    def _validate_intermediary_56A(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setintermediary_56A(self, val):
        """sets the value on python object of MT101"""
        self.swift_obj.SequenceB_TransactionDetails.Intermediary_A = val
        self.swift_obj.SequenceB_TransactionDetails.Intermediary_A.swiftTag = '56A'

    # getter
    def intermediary_56C(self):
        """ Returns a intermediary_account as string """
        return FCashOutUtils.get_counterpartys_intermediary_details(self.acm_obj)


    # formatter
    def _format_intermediary_56C(self, val):
        """Formats the value provided by getter method"""
        intermediary_account = val.get('ACCOUNT')
        if intermediary_account:
            val = "{}{}".format("/", str(intermediary_account))
            return val

    # validator
    @validate_with(MT101.MT101_SequenceB_TransactionDetails_56C_Type)
    def _validate_intermediary_56C(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setintermediary_56C(self, val):
        """sets the value on python object of MT101"""
        self.swift_obj.SequenceB_TransactionDetails.Intermediary_C = val
        self.swift_obj.SequenceB_TransactionDetails.Intermediary_C.swiftTag = '56C'

    # getter
    def intermediary_56D(self):
        """ Returns a dictionary as {'intermediary_account': value, 'intermediary_name':value, 'intermediary_address':value} """
        return FCashOutUtils.get_counterpartys_intermediary_details(self.acm_obj)

    # formatter
    def _format_intermediary_56D(self, val):
        """Formats the value provided by getter method"""
        account = val.get('ACCOUNT')
        name = val.get('NAME')
        address = val.get('ADDRESS')
        if name and address:
            name = FSwiftWriterUtils.split_text_and_prefix(name, 35)
            address = FSwiftWriterUtils.split_text_and_prefix(address, 35)
            val = FSwiftWriterUtils.allocate_space_for_name_address_without_constraint(name, address)
            if account:
                val = ''.join(["/", str(account), "\n", str(val)])
            return val

    # validator
    @validate_with(MT101.MT101_SequenceB_TransactionDetails_56D_Type)
    def _validate_intermediary_56D(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setintermediary_56D(self, val):
        """sets the value on python object of MT101"""
        self.swift_obj.SequenceB_TransactionDetails.Intermediary_D = val
        self.swift_obj.SequenceB_TransactionDetails.Intermediary_D.swiftTag = '56D'

    # ----------------------------------account_with_institution_57A------------------------------------

    # option_getter
    def get_account_with_institution_option(self):
        """Returns default option if override is not provided"""
        return 'A'

    # setter
    def _set_OPTION_account_with_institution(self):
        """Returns name of the getter method"""
        getter_name = ''
        account_with_institution_option = self.get_account_with_institution_option()
        if account_with_institution_option == "A":
            getter_name = 'account_with_institution_57A'
        elif account_with_institution_option == "C":
            getter_name = 'account_with_institution_57C'
        elif account_with_institution_option == "D":
            getter_name = 'account_with_institution_57D'
        else:
            notifier.WARN("%s Option %s is not supported for tag %s. Mapping default option." % (
                self.swift_message_type, str(account_with_institution_option), 'AccountWithInstitution_57a'))
            getter_name = 'account_with_institution_57A'  # default
        return getter_name

    # getter
    def account_with_institution_57A(self):
        """ Returns a dictionary as {'account':<value>, 'bic':<value>} """
        return FCashOutUtils.get_counterpartys_correspondent_details(self.acm_obj)

    # formatter
    def _format_account_with_institution_57A(self, val):
        """Formats the value provided by getter method"""
        account = val.get('ACCOUNT')
        bic = val.get('BIC')
        if bic:
            val = str(bic)
            if account:
                val = ''.join(['/', str(account), '\n', str(val)])
            return val

    @validate_with(MT101.MT101_SequenceB_TransactionDetails_57A_Type)
    def _validate_account_with_institution_57A(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setaccount_with_institution_57A(self, val):
        """sets the value on python object of MT101"""
        self.swift_obj.SequenceB_TransactionDetails.AccountWithInstitution_A = val
        self.swift_obj.SequenceB_TransactionDetails.AccountWithInstitution_A.swiftTag = '57A'

    # getter
    def account_with_institution_57C(self):
        """ Returns a dictionary with {'account': <value>} """
        return FCashOutUtils.get_counterpartys_correspondent_details(self.acm_obj)

    # formatter
    def _format_account_with_institution_57C(self, val):
        """Formats the value provided by getter method"""
        account = val.get('ACCOUNT')
        if account:
            val = "{}{}".format('/',str(account))
            return val

    # validator
    @validate_with(MT101.MT101_SequenceB_TransactionDetails_57C_Type)
    def _validate_account_with_institution_57C(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setaccount_with_institution_57C(self, val):
        """sets the value on python object of MT101"""
        self.swift_obj.SequenceB_TransactionDetails.AccountWithInstitution_C = val
        self.swift_obj.SequenceB_TransactionDetails.AccountWithInstitution_C.swiftTag = '57C'

    # getter
    def account_with_institution_57D(self):
        """ Returns a dictionary as {'account_with_institution_account': value, 'account_with_institution_name':value, 'account_with_institution_address':value} """
        values_dict = {}
        return FCashOutUtils.get_counterpartys_correspondent_details(self.acm_obj)

    # formatter
    def _format_account_with_institution_57D(self, val):
        """Formats the value provided by getter method"""
        account = val.get('ACCOUNT')
        name = val.get('NAME')
        address = val.get('ADDRESS')
        if name and address:
            name = FSwiftWriterUtils.split_text_and_prefix(name, 35)
            address = FSwiftWriterUtils.split_text_and_prefix(address, 35)
            val = FSwiftWriterUtils.allocate_space_for_name_address_without_constraint(name, address)
            if account:
                val = ''.join(["/", str(account), "\n", str(val)])
            return val

    # validator
    @validate_with(MT101.MT101_SequenceB_TransactionDetails_57D_Type)
    def _validate_account_with_institution_57D(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setaccount_with_institution_57D(self, val):
        """sets the value on python object of MT101"""
        self.swift_obj.SequenceB_TransactionDetails.AccountWithInstitution_D = val
        self.swift_obj.SequenceB_TransactionDetails.AccountWithInstitution_D.swiftTag = '57D'

    # --------------------------------- beneficiary_customer -------------------------------------------

    # option_getter
    def get_beneficiary_customer_option(self):
        """Returns default option if override is not provided"""
        option = 'A'
        bic = ''
        counterparty_reference = self.acm_obj.CounterpartyAccountRef()
        if counterparty_reference and counterparty_reference.NetworkAlias():
            bic = counterparty_reference.NetworkAlias().Alias()
        if not bic and self.acm_obj.Counterparty():
            bic = self.acm_obj.Counterparty().Swift()
        if not bic:
            option = 'NO OPTION'
        return option

    # setter
    def _set_OPTION_beneficiary_customer(self):
        """Returns name of the getter method"""
        beneficiary_customer_option = self.get_beneficiary_customer_option()
        if beneficiary_customer_option == "A":
            getter_name = 'beneficiary_customer_59A'
        elif beneficiary_customer_option == "NO OPTION":
            getter_name = 'beneficiary_customer_no_option_59'
        elif beneficiary_customer_option == "F":
            getter_name = 'beneficiary_customer_59F'
        else:
            notifier.WARN("%s Option %s is not supported for tag %s. Mapping default option." % (
                self.swift_message_type, str(beneficiary_customer_option), 'BeneficiaryCustomer_59a'))
            getter_name = 'beneficiary_customer_59A'  # default
        return getter_name

    # getter
    def beneficiary_customer_59A(self):
        """ Returns a dictionary as {'beneficiary_customer_account': value, 'beneficiary_customer_bic':value} """
        values_dict = {}
        return FCashOutUtils.get_counterparty_details(self.acm_obj)

    # formatter
    def _format_beneficiary_customer_59A(self, val):
        """Formats the value provided by getter method"""
        beneficiary_customer_account = val.get('ACCOUNT')
        beneficiary_customer_bic = val.get('BIC')
        if beneficiary_customer_bic:
            if beneficiary_customer_account:
                val = ''.join(["/", str(beneficiary_customer_account), "\n", str(beneficiary_customer_bic)])
            else:
                val = str(beneficiary_customer_bic)
            return val
        else:
            notifier.ERROR("Inappropriate option selected. Option A is invalid.")

        # validator

    @validate_with(MT101.MT101_SequenceB_TransactionDetails_59A_Type)
    def _validate_beneficiary_customer_59A(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setbeneficiary_customer_59A(self, val):
        """sets the value on python object of MT101"""
        self.swift_obj.SequenceB_TransactionDetails.Beneficiary_A = val
        self.swift_obj.SequenceB_TransactionDetails.Beneficiary_A.swiftTag = '59A'

    # getter
    def beneficiary_customer_no_option_59(self):
        """ Returns a dictionary as {'beneficiary_customer_account': value, 'beneficiary_customer_name':value, 'beneficiary_customer_address':value} """
        return FCashOutUtils.get_counterparty_details(self.acm_obj)

    # formatter
    def _format_beneficiary_customer_no_option_59(self, val):
        """Formats the value provided by getter method"""

        account = val.get('ACCOUNT')
        name = val.get('NAME')
        address = val.get('ADDRESS')
        address = "{}{}".format('ADD. ',address)
        name_and_address = "{} {}".format(name, address)
        split_name_and_address = FSwiftWriterUtils.split_text_logically_on_character_limit(name_and_address, 35)
        
        val = "\n".join(split_name_and_address)
        if account:
            val = ''.join(["/", str(account), "\n", str(val)])
        return val

    # validator
    @validate_with(MT101.MT101_SequenceB_TransactionDetails_59_Type)
    def _validate_beneficiary_customer_no_option_59(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setbeneficiary_customer_no_option_59(self, val):
        """sets the value on python object of MT101"""
        self.swift_obj.SequenceB_TransactionDetails.Beneficiary = val
        self.swift_obj.SequenceB_TransactionDetails.Beneficiary.swiftTag = '59'

    # getter
    def beneficiary_customer_59F(self):
        """ Returns a dictionary as {'beneficiary_customer_account': value, 'beneficiary_customer_name':value, 'beneficiary_customer_address':value,
        'beneficiary_customer_country_code':value, 'beneficiary_customer_town':value} """
        return FCashOutUtils.get_counterparty_details(self.acm_obj)

    # formatter
    def _format_beneficiary_customer_59F(self, val):
        """Formats the value provided by getter method"""
        account = val.get('ACCOUNT')
        name = val.get('NAME')
        address = val.get('ADDRESS')
        country_code = val.get('COUNTRY_CODE')
        town = val.get('TOWN')
        name_list, address_list, country_and_town_list = [], [], []

        if name:
            name_list = FSwiftWriterUtils.split_text_and_prefix(str(name), 33, '1/')
        if address:
            address_list = FSwiftWriterUtils.split_text_and_prefix(str(address), 33, '2/')
        if country_code:
            additional_details = str(country_code)
            if town:
                additional_details = "{}{}".format(str(additional_details), str(town))
            country_and_town_list = FSwiftWriterUtils.split_text_and_prefix(
                str(additional_details), 33, '3/')
        value = FSwiftWriterUtils.allocate_space_for_name_and_address_with_constraint(name_list, address_list,
                                                                                      country_and_town_list)
        if account:
            account = "{}{}".format('/', str(account))
            value = '\n'.join([account, value])
        return value

    # validator
    @validate_with(MT101.MT101_SequenceB_TransactionDetails_59F_Type)
    def _validate_beneficiary_customer_59F(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setbeneficiary_customer_59F(self, val):
        """sets the value on python object of MT101"""
        self.swift_obj.SequenceB_TransactionDetails.Beneficiary_F = val
        self.swift_obj.SequenceB_TransactionDetails.Beneficiary_F.swiftTag = '59F'

    # --------------------------------- details_of_charges_71A -------------------------------------------
    # getter
    def details_of_charges_71A(self):
        """ Returns a details_of_charges as string """
        details_of_charges = FCashOutUtils.get_details_of_charges(self.acm_obj)
        return details_of_charges

    # formatter
    def _format_details_of_charges_71A(self, val):
        """Formats the value provided by getter method"""
        return val

    # validator
    @validate_with(MT101.MT101_SequenceB_TransactionDetails_71A_Type)
    def _validate_details_of_charges_71A(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _set_details_of_charges_71A(self, val):
        """sets the value on python object of MT101"""
        self.swift_obj.SequenceB_TransactionDetails.DetailsOfCharges = val
        self.swift_obj.SequenceB_TransactionDetails.DetailsOfCharges.swiftTag = '71A'




class FMT101OutBaseMessageHeader(FSwiftWriterMessageHeader.FSwiftWriterMessageHeader):
    def __init__(self, acm_obj, swift_msg_tags):
        self.mt_typ = "101"
        self.acm_obj = acm_obj
        self.swift_msg_tags = swift_msg_tags
        mt_type = "{}{}".format('MT',self.mt_typ)
        self.sender_ref_end_char = FSwiftMLUtils.get_character_for_mt_type(mt_type)
        super(FMT101OutBaseMessageHeader, self).__init__(self.mt_typ, self.acm_obj, swift_msg_tags)

    def message_type(self):
        """returns message type"""
        return "101"

    def sender_logical_terminal_address(self):
        '''LT code is hardcoded as A for sender'''
        terminal_address = ''
        senders_bic = FCashOutUtils.get_senders_bic(self.acm_obj)
        if not senders_bic:
            raise Exception("SENDER_BIC is a mandatory field for Swift message header")
        terminal_address = self.logical_terminal_address(senders_bic, "A")
        return terminal_address

    def receiver_logical_terminal_address(self):
        '''LT code is hardcoded as X for sender'''
        receivers_bic = FCashOutUtils.get_receivers_bic(self.acm_obj)
        terminal_address = self.logical_terminal_address(receivers_bic, "X")
        return terminal_address

    def logical_terminal_address(self, bic_code, lt_code):
        """returns terminal address"""
        terminal_address = ""
        branch_code = "XXX"
        if bic_code:
            if len(str(bic_code)) == 8:
                terminal_address = ''.join([str(bic_code), lt_code, branch_code])
            elif len(str(bic_code)) == 11:
                branch_code = bic_code[8:]
                terminal_address = ''.join([str(bic_code[:8]), lt_code, branch_code])
            else:
                raise Exception("Invalid BIC <%s>)" % bic_code)
        return terminal_address


    def message_user_reference(self):
        '''MUR is sent in the format FAC-SEQNBR of confirmation-VersionID'''
        settlement_prefix = FCashOutUtils.get_settlement_reference_prefix()
        cash_settlement_out_config = FSwiftWriterUtils.get_config_from_fparameter('FCashOut_Config')
        include_tradeno_in_tag_20 = FSwiftMLUtils.incude_trade_no_in_tag20(cash_settlement_out_config)
        val = FSwiftMLUtils.message_user_reference(self.acm_obj, settlement_prefix, include_tradeno_in_tag_20=include_tradeno_in_tag_20)
        val = '{}{}'.format(val, self.sender_ref_end_char)
        return "{108:%s}" % val


class FMT101OutBaseNetworkRules(object):
    """validation of swift message by network rules"""
    def __init__(self, swift_message_obj, swift_message, acm_obj):
        self.swift_message_obj = swift_message_obj
        self.swift_message = swift_message
        self.acm_obj = acm_obj
        self.mt_typ = "101"

    def network_rule_C1(self):
        """If an exchange rate is given in field 36, the corresponding forex deal must be referenced in
        field 21F (Error code(s): D54)."""
        value = None
        if self.swift_message_obj.SequenceB_TransactionDetails.ExchangeRate and not self.swift_message_obj.SequenceB_TransactionDetails.FXDealReference:
            value = "If an exchange rate is given in field 36, the corresponding forex deal must be referenced in field 21F (Error code(s): D54)."
        return value

    def network_rule_C2(self):
        """
        In each occurrence of sequence B, if field 33B is present and 'amount' in field 32B is not equal to zero,
        then field 36 must be present, otherwise field 36 is not allowed (Error code(s): D60).
        """
        value = None
        network_rule_not_met = False
        tag_33B = self.swift_message_obj.SequenceB_TransactionDetails.CurrencyOrderedAmount
        tag_32B_amount = self.swift_message_obj.SequenceB_TransactionDetails.CurrencyTransactionAmount.value()[3:]
        tag_36 = self.swift_message_obj.SequenceB_TransactionDetails.ExchangeRate
        if tag_33B:
            if tag_32B_amount != 0 and not tag_36:
                network_rule_not_met = True
            elif tag_32B_amount == 0 and tag_36:
                network_rule_not_met = True
        else:
            if tag_36:
                network_rule_not_met = True
        if network_rule_not_met:
            value = "In each occurrence of sequence B, if field 33B is present and 'amount' in field 32B is not equal to zero, then field 36 must be present, otherwise field 36 is not allowed (Error code(s): D60)."
        return value

    def network_rule_C3(self):
        """
        If there is only one debit account, the ordering customer must be identified in field 50a (option F, G or H)
        in sequence A. Conversely, if multiple debit accounts are used, they must be identified for every transaction
        in field 50a (option F, G or H) of sequence B.
        Consequently, field 50a (option F, G or H), must be present in either sequence A (index 5) or in each occurrence
         of sequence B (index 15), but must never be present in both sequences, nor be absent from both sequences
         (Error code(s): D61).
        """
        value = None
        if (self.swift_message_obj.SequenceA_GeneralInformation.OrderingCustomer_F
            or self.swift_message_obj.SequenceA_GeneralInformation.OrderingCustomer_G
            or self.swift_message_obj.SequenceA_GeneralInformation.OrderingCustomer_H) \
            and (self.swift_message_obj.SequenceB_TransactionDetails.OrderingCustomer_F
            or self.swift_message_obj.SequenceB_TransactionDetails.OrderingCustomer_G
            or self.swift_message_obj.SequenceB_TransactionDetails.OrderingCustomer_H):
            value = "Field 50a (option F, G or H), must be present in either sequence A (index 5) " \
                   "or in each occurrence of sequence B (index 15), but must never be present in both sequences, " \
                   "nor be absent from both sequences (Error code(s): D61)."
        return value

    def network_rule_C4(self):
        """
        Field 50a (option C or L), may be present in either sequence A (index 4),
        or in one or more occurrences of sequence B (index 14), but must not be present in both sequences A
        and B (Error code(s): D62).
        """
        value = None
        if (self.swift_message_obj.SequenceA_GeneralInformation.InstructingParty_C
        or self.swift_message_obj.SequenceA_GeneralInformation.InstructingParty_L) \
        and (self.swift_message_obj.SequenceB_TransactionDetails.InstructingParty_C
        or self.swift_message_obj.SequenceB_TransactionDetails.InstructingParty_L):
             value = "Field 50a (option C or L), may be present in either sequence A (index 4), or in one or more occurrences of sequence B (index 14), but must not be present in both sequences A and B (Error code(s): D62)."
        return value

    def network_rule_C5(self):
        """If field 33B is present in sequence B, its currency code must be different from the currency code in field 32B in the same occurrence of sequence B (Error code(s): D68)."""
        value = None
        if self.swift_message_obj.SequenceB_TransactionDetails.CurrencyOrderedAmount and self.swift_message_obj.SequenceB_TransactionDetails.CurrencyTransactionAmount:
            currency_32B = self.swift_message_obj.SequenceB_TransactionDetails.CurrencyOrderedAmount.value()[:3]
            currency_33B = self.swift_message_obj.SequenceB_TransactionDetails.CurrencyTransactionAmount.value()[:3]
            if currency_32B == currency_33B:
                value = "If field 33B is present in sequence B, its currency code must be different from the currency code in field 32B in the same occurrence of sequence B (Error code(s): D68)."
        return value

    def network_rule_C6(self):
        """Field 52a may be present in either sequence A or in one or more occurrences of sequence B, but must not be present in both sequences (Error code(s): D64)."""
        value = None
        if (self.swift_message_obj.SequenceA_GeneralInformation.AccountServicingInstitution_A
        or self.swift_message_obj.SequenceA_GeneralInformation.AccountServicingInstitution_C)\
        and (self.swift_message_obj.SequenceB_TransactionDetails.AccountServicingInstitution_A
        or self.swift_message_obj.SequenceA_GeneralInformation.AccountServicingInstitution_C):
            value = "Field 52a may be present in either sequence A or in one or more occurrences of sequence B, but must not be present in both sequences (Error code(s): D64)."

        return value

    def network_rule_C7(self):
        """If field 56a is present, field 57a must also be present (Error code(s): D65)."""
        value = None
        if (self.swift_message_obj.SequenceB_TransactionDetails.Intermediary_A
        or self.swift_message_obj.SequenceB_TransactionDetails.Intermediary_C
        or self.swift_message_obj.SequenceB_TransactionDetails.Intermediary_D)\
        and not (self.swift_message_obj.SequenceB_TransactionDetails.AccountWithInstitution_A
        or self.swift_message_obj.SequenceB_TransactionDetails.AccountWithInstitution_C
        or self.swift_message_obj.SequenceB_TransactionDetails.AccountWithInstitution_D):
            value = "If field 56a is present, field 57a must also be present (Error code(s): D65)."
        return value

    def network_rule_C8(self):
        """
        If field 21R is present in sequence A, then in each occurrence of sequence B,
        the currency code in fields 32B must be the same (Error code(s): D98)
        """
        value = None
        if self.swift_message_obj.SequenceA_GeneralInformation.CustomerSpecifiedReference:
            currency = self.swift_message_obj.SequenceB_TransactionDetails.CurrencyTransactionAmount.value()
            if not currency:
                value = "If field 21R is present in sequence A, then in each occurrence of sequence B,\
        the currency code in fields 32B must be the same (Error code(s): D98)"
        return value

    def network_rule_C9(self):
        """
        In each occurrence of sequence B, the presence of fields 33B
        and 21F is dependent on the presence and value of fields 32B and 23E as follows (Error code(s): E54).
        - 'If amount in field 32B is Equal to zero and field 23E is present and code is equal to EQUI then field 33B is Mandatory and field 21F is optional (Error code(s): E54).'
        - 'If amount in field 32B is Equal to zero and field 23E is present and code is not equal to EQUI then field 33B, field 21F is Not allowed (Error code(s): E54).'
        - 'If amount in field 32B is Equal to zero and field 23E is not present and field 33B and field 21F is Not allowed (Error code(s): E54).
        - 'If amount in field 32B is Not equal to zero field 23E is Not applicable, field 33B and field 21F is Optional (Error code(s): E54).'
        """
        value = None
        if self.swift_message_obj.SequenceB_TransactionDetails.CurrencyOrderedAmount:
            amount = self.swift_message_obj.SequenceB_TransactionDetails.CurrencyOrderedAmount.value()[3:]
            tag_23E = self.swift_message_obj.SequenceB_TransactionDetails.InstructionCode
            tag_33B = self.swift_message_obj.SequenceB_TransactionDetails.CurrencyOrderedAmount
            tag_21F = self.swift_message_obj.SequenceB_TransactionDetails.FXDealReference

            if amount == 0:
                if tag_23E:
                    if tag_23E.value()[:4] == 'EQUI':
                        if not tag_33B:
                           value = 'If amount in field 32B is Equal to zero and field 23E is present and code is equal to EQUI then field 33B is Mandatory and field 21F is optional (Error code(s): E54).'
                    else:
                        if tag_33B or tag_21F:
                            value = 'If amount in field 32B is Equal to zero and field 23E is present and code is not equal to EQUI then field 33B, field 21F is Not allowed (Error code(s): E54).'
                else:
                    if tag_33B or tag_21F:
                        value = 'If amount in field 32B is Equal to zero and field 23E is not present and field 33B and field 21F is Not allowed (Error code(s): E54).'
            else:
                if tag_23E:
                    value = 'If amount in field 32B is Not equal to zero field 23E is Not applicable, field 33B and field 21F is Optional (Error code(s): E54).'
            return value



...

  FMT103Out
"""----------------------------------------------------------------------------
MODULE:
    FMT103Out

DESCRIPTION:
    This module provides the customizable class for the FMT103 outgoing implementation

CLASS:
    FMT103

VERSION: 3.6.3-0.5.6048
----------------------------------------------------------------------------"""
import FSwiftWriterLogger
notifier = FSwiftWriterLogger.FSwiftWriterLogger('CashSetlemnt', 'FCashOutNotify_Config')
import FMT103OutBase
import acm
import MT103
from FSwiftMLUtils import accepts
import xml.dom.minidom
from FSwiftWriterEngine import validate_with

@accepts([acm.FSettlement, MT103.CTD_ANON, xml.dom.minidom.Document])
class FMT103(FMT103OutBase.FMT103Base):

    def __init__(self, acm_obj, swift_obj):
        super(FMT103, self).__init__(acm_obj, swift_obj)

    # To override existing mappings use below methods to write your own logic

    """
    account_with_institution_57A
    account_with_institution_57C
    account_with_institution_57D
    bank_operation_code_23B
    beneficiary_customer_59A
    beneficiary_customer_59F
    beneficiary_customer_no_option_59
    details_of_charges_71A
    instructed_amount_33B
    instruction_code_23E
    intermediary_institution_56A
    intermediary_institution_56C
    intermediary_institution_56D
    ordering_customer_50A
    ordering_customer_50F
    ordering_customer_50K
    ordering_institution_52A
    ordering_institution_52D
    remittance_information_70
    senders_correspondent_53A
    senders_correspondent_53D
    senders_reference_20
    value_date_32A
    get_user_data

    """

    """
    To override the options provided, use below methods to write your own logic:-
    methods:- 
    get_ordering_customer_option (Tag-50 options:A/F/K)
    get_ordering_institution_option (Tag-52 options:A/D)
    get_senders_correspondent_option (Tag-53 options:A/D)
    get_intermediary_institution_option (Tag-56 options:A/C/D)
    get_account_with_institution_option (Tag-57 options:A/C/D)
    get_beneficiary_customer_option (Tag-59 options:A/NO OPTION/F)

    For example:
    def get_ordering_customer_option(self):
        condition = True
        if condition:
            return 'A'
        else:
            return 'F'

    """


class FMT103MessageHeader(FMT103OutBase.FMT103OutBaseMessageHeader):

    def __init__(self, acm_obj, swift_msg_tags):
        self.acm_obj = acm_obj
        self.swift_msg_tags = swift_msg_tags
        super(FMT103MessageHeader, self).__init__(acm_obj, swift_msg_tags)

    # To override existing mappings use below methods to write your own logic

    """
    application_id
    service_id
    sender_logical_terminal_address
    session_number
    sequence_number
    input_or_output
    message_priority
    message_type
    receiver_logical_terminal_address
    delivery_monitoring
    non_delivery_notification_period
    service_identifier
    banking_priority_code
    message_user_reference
    validation_flag
    """


class FMT103NetworkRules(FMT103OutBase.FMT103OutBaseNetworkRules):

    def __init__(self, swift_message_obj, swift_message, acm_obj):
        super(FMT103NetworkRules, self).__init__(swift_message_obj, swift_message, acm_obj)


...

  FMT103OutBase

"""----------------------------------------------------------------------------
MODULE:
    FMT103OutBase

DESCRIPTION:
    This module provides the base class for the FMT103 outgoing implementation

CLASS:
    FMT103Base

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import FSwiftMLUtils
import FSwiftWriterLogger
import FSwiftWriterMessageHeader
import FSwiftWriterUtils
import MT103
import acm
import uuid
from FCashOutUtils import *
from FSwiftWriterEngine import validate_with

from FCustomerPaymentsOutBase import FCustomerPaymentsOutBase

from ChineseCommercialCode import CCC_simplified_writer, CCC_traditional_writer

notifier = FSwiftWriterLogger.FSwiftWriterLogger('CashSetlemnt', 'FCashOutNotify_Config')

CONFIG_PARAM = FSwiftMLUtils.Parameters('FSwiftWriterConfig')

chinese_language_version = getattr(CONFIG_PARAM, 'ChineseLanguageVersion', None)
if chinese_language_version:
    if chinese_language_version == 'Simplified':
        lookup = CCC_simplified_writer
    if chinese_language_version == 'Traditional':
        lookup = CCC_traditional_writer
else:
    lookup = CCC_simplified_writer

class FMT103Base(FCustomerPaymentsOutBase):

    def __init__(self, acm_obj, swift_obj):
        super(FMT103Base, self).__init__(acm_obj, swift_obj)
        self.swift_message_type = 'MT103'
        self.sender_ref_end_char = FSwiftMLUtils.get_character_for_mt_type(self.swift_message_type)

    # Implementing it to pass the NotImplementedError
    def _message_sequences(self):
        pass

    # --------------------------------- senders_reference -------------------------------------------
    # getter
    def senders_reference_20(self):
        """ Returns a senders_reference_20 as string """
        settlement_prefix = get_settlement_reference_prefix()
        cash_settlement_out_config = FSwiftWriterUtils.get_config_from_fparameter('FCashOut_Config')
        include_tradeno_in_tag_20 = FSwiftMLUtils.incude_trade_no_in_tag20(cash_settlement_out_config)
        val = FSwiftMLUtils.get_sender_ref(self.acm_obj, settlement_prefix, include_tradeno_in_tag_20=include_tradeno_in_tag_20)
        return val

    # formatter
    def _format_senders_reference_20(self, val):
        """Formats the value provided by getter method"""
        if val:
            val = FSwiftMLUtils.format_sender_reference(val)
            senders_reference = '{}{}'.format(val, self.sender_ref_end_char)
            return senders_reference

    # validator
    @validate_with(MT103.MT103_20_Type)
    def _validate_senders_reference_20(self, val):
        """validates the value provided by formatter method"""
        validate_slash_and_double_slash(val, "Senders Reference")  # .value()
        return val

    # setter
    def _set_senders_reference_20(self, val):
        """sets the value on python object of MT103"""
        self.swift_obj.SendersReference = val
        self.swift_obj.SendersReference.swiftTag = "20"

    # --------------------------------- bank_operation_code -------------------------------------------
    # getter
    def bank_operation_code_23B(self):
        """ Returns a bank_operation_code as string """
        bank_operation_code = get_bank_operation_code()
        return bank_operation_code

    # formatter
    def _format_bank_operation_code_23B(self, val):
        """Formats the value provided by getter method"""
        return val

    # validator
    @validate_with(MT103.MT103_23B_Type)
    def _validate_bank_operation_code_23B(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _set_bank_operation_code_23B(self, val):
        """sets the value on python object of MT103"""
        self.swift_obj.BankOperationCode = val
        self.swift_obj.BankOperationCode.swiftTag = "23B"

    # --------------------------------- instruction_code -------------------------------------------
    # getter
    def instruction_code_23E(self):
        """ Returns a instruction_code as string """
        instruction_code = get_instruction_code()  # code
        return instruction_code

    # formatter
    def _format_instruction_code_23E(self, val):
        """Formats the value provided by getter method"""
        return val

    # validator
    @validate_with(MT103.MT103_23E_Type)
    def _validate_instruction_code_23E(self, val):
        """validates the value provided by formatter method"""
        validate_instruction_code(val)
        return val

    # setter
    def _set_instruction_code_23E(self, val):
        """sets the value on python object of MT103"""
        self.swift_obj.InstructionCode.append(val)
        for each_instruction_code in self.swift_obj.InstructionCode:
            each_instruction_code.swiftTag = "23E"

    # --------------------------------- instruction_code -------------------------------------------
    # getter
    def value_date_32A(self):
        """ Returns a dictionary as {'value_date': value, 'currency':value, 'interbank_settled_amount':value} """
        values_dict = {}

        value_date = get_value_date(self.acm_obj)
        currency = self.acm_obj.Currency().Name()
        interbank_settled_amount = self.acm_obj.Amount()

        values_dict['value_date'] = value_date
        values_dict['currency'] = currency
        values_dict['interbank_settled_amount'] = interbank_settled_amount

        return values_dict

    # formatter
    def _format_value_date_32A(self, val):
        """Formats the value provided by getter method"""
        value_date = val.get('value_date')
        currency = val.get('currency')
        interbank_settled_amount = val.get('interbank_settled_amount')
        date_format = '%y%m%d'
        if value_date and currency and interbank_settled_amount:
            value_date = FSwiftWriterUtils.format_date(value_date, date_format)
            interbank_settled_amount = apply_currency_precision(currency, abs(float(interbank_settled_amount)))
            val = str(value_date) + str(currency) + str(FSwiftMLUtils.float_to_swiftmt(str(interbank_settled_amount)))
            return val

    # validator
    @validate_with(MT103.MT103_32A_Type)
    def _validate_value_date_32A(self, val):
        """validates the value provided by formatter method"""
        validate_currency_amount(val[6:], '32A')  # .value
        return val

    # setter
    def _set_value_date_32A(self, val):
        """sets the value on python object of MT103"""
        self.swift_obj.ValueDateCurrencyInterbankSettledAmount = val
        self.swift_obj.ValueDateCurrencyInterbankSettledAmount.swiftTag = "32A"

    # --------------------------------- instruction_code -------------------------------------------
    # getter
    def instructed_amount_33B(self):
        """ Returns a dictionary as {'instructed_amount': value, 'currency':value} """
        values_dict = {}
        instructed_amount = self.acm_obj.Amount()
        currency = self.acm_obj.Currency().Name()
        values_dict['instructed_amount'] = instructed_amount
        values_dict['currency'] = currency
        return values_dict

    # formatter
    def _format_instructed_amount_33B(self, val):
        """Formats the value provided by getter method"""
        instructed_amount = val.get('instructed_amount')
        currency = val.get('currency')
        if instructed_amount and currency:
            instructed_amount = apply_currency_precision(currency, abs(float(instructed_amount)))
            val = str(currency) + str(FSwiftMLUtils.float_to_swiftmt(str(instructed_amount)))
            return val

    # validator
    @validate_with(MT103.MT103_33B_Type)
    def _validate_instructed_amount_33B(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _set_instructed_amount_33B(self, val):
        """sets the value on python object of MT103"""
        self.swift_obj.CurrencyInstructedAmount = val
        self.swift_obj.CurrencyInstructedAmount.swiftTag = "33B"

    # --------------------------------- ordering_customer -------------------------------------------

    #option_getter
    def get_ordering_customer_option(self):
        """Returns default option if override is not provided"""
        return 'A'

    # setter
    def _set_OPTION_ordering_customer(self):
        """Returns name of the getter method"""
        getter_name = ''
        ordering_customer_option = self.get_ordering_customer_option()
        if ordering_customer_option == "A":
            getter_name = 'ordering_customer_50A'
        elif ordering_customer_option == "F":
            getter_name = 'ordering_customer_50F'
        elif ordering_customer_option == "K":
            getter_name = 'ordering_customer_50K'
        else:
            notifier.WARN("%s Option %s is not supported for tag %s. Mapping default option." % (
                self.swift_message_type, str(ordering_customer_option), 'OrderingCustomer_50a'))
            getter_name = 'ordering_customer_50A'  # default
        return getter_name

    # getter
    def ordering_customer_50A(self):
        """ Returns a dictionary as {'ordering_customer_account': value, 'ordering_customer_bic':value} """
        values_dict = {}
        return get_acquirer_details(self.acm_obj)

    # formatter
    def _format_ordering_customer_50A(self, val):
        """Formats the value provided by getter method"""
        ordering_customer_account = val.get('ACCOUNT')
        ordering_customer_bic = val.get('BIC')
        if ordering_customer_bic:
            if ordering_customer_account:
                val = "/" + str(ordering_customer_account) + "\n" + str(ordering_customer_bic)
            else:
                val = str(ordering_customer_bic)
            return val

    # validator

    @validate_with(MT103.MT103_50A_Type)
    def _validate_ordering_customer_50A(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setordering_customer_50A(self, val):
        """sets the value on python object of MT103"""
        self.swift_obj.OrderingCustomer_A = val
        self.swift_obj.OrderingCustomer_A.swiftTag = '50A'

    # getter
    def ordering_customer_50F(self):
        """ Returns a dictionary as {'ordering_customer_account': value, 'ordering_customer_name':value, 'ordering_customer_address':value,
        'ordering_customer_country_code':value, 'ordering_customer_town':value, 'ordering_customer_zipcode':value} """
        values_dict = {}

        return get_acquirer_details(self.acm_obj)

    # formatter
    def _format_ordering_customer_50F(self, val):
        """Formats the value provided by getter method"""
        account = val.get('ACCOUNT')
        name = val.get('NAME')
        address = val.get('ADDRESS')
        country_code = val.get('COUNTRY_CODE')
        town = val.get('TOWN')
        town = '/' + str(town)
        zipcode = val.get('ZIP_CODE')
        zipcode = '/' + str(zipcode)
        name_list, address_list, country_and_town_list = [], [], []

        char_set = ''
        lookup_temp = lookup
        try:
            char_set = str(self.acm_obj.Acquirer().AdditionalInfo().TraditionalChinese())
        except Exception as e:
            notifier.WARN("Could not find Additional Info 'TraditionalChinese'.")

        if char_set == 'True':
            lookup_temp = CCC_traditional_writer
        elif char_set == 'False':
            lookup_temp = CCC_simplified_writer

        temp_name = name
        temp_address = address
        temp_town = town
        for key in list(lookup_temp.keys()):
            temp_name = temp_name.replace(str(key), lookup_temp[key] + " ")
            temp_address = temp_address.replace(str(key), lookup_temp[key] + " ")
            temp_town = temp_town.replace(str(key), lookup_temp[key] + " ")

        if name == temp_name:
            if name:
                name_list = FSwiftWriterUtils.split_text_and_prefix(str(name), 33, '1/')
            if address:
                address_list = FSwiftWriterUtils.split_text_and_prefix(str(address), 33, '2/')
            if country_code:
                additional_details = str(country_code)
                if town:
                    additional_details = additional_details + str(town)
                    if zipcode:
                        zipcode = additional_details + str(zipcode)
                country_and_town_list = FSwiftWriterUtils.split_text_and_prefix(
                    str(additional_details), 33, '3/')
            value = FSwiftWriterUtils.allocate_space_for_name_and_address_with_constraint(name_list, address_list,
                                                                                          country_and_town_list)
            if account:
                account = '/' + account
                value = account + '\n' + value
            return value
        else:
            name = temp_name
            address = temp_address
            town = temp_town
            if name:
                name_list = FSwiftWriterUtils.split_text_logically_and_prefix(str(name), 33, '1/')
            if address:
                address_list = FSwiftWriterUtils.split_text_logically_and_prefix(str(address), 33, '2/')
            if country_code:
                additional_details = str(country_code)
                if town:
                    additional_details = additional_details + str(town)
                    if zipcode:
                        zipcode = additional_details + str(zipcode)
                country_and_town_list = FSwiftWriterUtils.split_text_logically_and_prefix(
                    str(additional_details), 33, '3/')
            value = FSwiftWriterUtils.allocate_space_for_name_and_address_with_constraint(name_list, address_list,
                                                                                          country_and_town_list)
            if account:
                account = '/' + account
                value = account + '\n' + value
            return value


    # validator
    @validate_with(MT103.MT103_50F_Type)
    def _validate_ordering_customer_50F(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setordering_customer_50F(self, val):
        """sets the value on python object of MT103"""
        self.swift_obj.OrderingCustomer_F = val
        self.swift_obj.OrderingCustomer_F.swiftTag = '50F'

    # getter
    def ordering_customer_50K(self):
        """ Returns a dictionary as {'ordering_customer_account': value, 'ordering_customer_name':value, 'ordering_customer_address':value} """
        values_dict = {}
        return get_acquirer_details(self.acm_obj)

    # formatter
    def _format_ordering_customer_50K(self, val):
        """Formats the value provided by getter method"""
        account = val.get('ACCOUNT')
        name = val.get('NAME')
        address = val.get('ADDRESS')

        if name and address:
            name = FSwiftWriterUtils.split_text_and_prefix(name, 35)
            address = FSwiftWriterUtils.split_text_and_prefix(address, 35)
            val = FSwiftWriterUtils.allocate_space_for_name_address_without_constraint(name, address)
            if account:
                val = "/" + str(account) + "\n" + str(val)
            return val

    # validator
    @validate_with(MT103.MT103_50K_Type)
    def _validate_ordering_customer_50K(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setordering_customer_50K(self, val):
        """sets the value on python object of MT103"""
        self.swift_obj.OrderingCustomer_K = val
        self.swift_obj.OrderingCustomer_K.swiftTag = '50K'

    # --------------------------------- ordering_institution -------------------------------------------

    #option_getter
    def get_ordering_institution_option(self):
        """Returns default option if override is not provided"""
        return 'A'

    # setter
    def _set_OPTION_ordering_institution(self):
        """Returns name of the getter method"""
        getter_name = ''
        ordering_institution_option = self.get_ordering_institution_option()
        if ordering_institution_option == "A":
            getter_name = 'ordering_institution_52A'
        elif ordering_institution_option == "D":
            getter_name = 'ordering_institution_52D'
        else:
            notifier.WARN("%s Option %s is not supported for tag %s. Mapping default option." % (
                self.swift_message_type, str(ordering_institution_option), 'OrderingInstitution_52a'))
            getter_name = 'ordering_institution_52A'  # default
        return getter_name

    # getter
    def ordering_institution_52A(self):
        """ Returns a dictionary as {'ordering_institution_account': value, 'ordering_institution_bic':value} """
        values_dict = {}
        values_dict = get_acquirer_details(self.acm_obj)
        return values_dict

    # formatter
    def _format_ordering_institution_52A(self, val):
        """Formats the value provided by getter method"""
        ordering_institution_account = val.get('ACCOUNT')
        ordering_institution_bic = val.get('BIC')
        if ordering_institution_bic:
            if ordering_institution_account:
                val = "/" + str(ordering_institution_account) + "\n" + str(ordering_institution_bic)
            else:
                val = str(ordering_institution_bic)
            return val

    # validator
    @validate_with(MT103.MT103_52A_Type)
    def _validate_ordering_institution_52A(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setordering_institution_52A(self, val):
        """sets the value on python object of MT103"""
        self.swift_obj.OrderingInstitution_A = val
        self.swift_obj.OrderingInstitution_A.swiftTag = '52A'

    # getter
    def ordering_institution_52D(self):
        """ Returns a dictionary as {'ordering_institution_account': value, 'ordering_institution_bic':value, 'ordering_institution_address':value} """
        values_dict = {}
        return get_acquirer_details(self.acm_obj)

    # formatter
    def _format_ordering_institution_52D(self, val):
        """Formats the value provided by getter method"""
        account = val.get('ACCOUNT')
        name = val.get('NAME')
        address = val.get('ADDRESS')
        if name and address:
            name = FSwiftWriterUtils.split_text_and_prefix(name, 35)
            address = FSwiftWriterUtils.split_text_and_prefix(address, 35)
            val = FSwiftWriterUtils.allocate_space_for_name_address_without_constraint(name, address)
            if account:
                val = "/" + str(account) + "\n" + str(val)
            return val

    # validator
    @validate_with(MT103.MT103_52D_Type)
    def _validate_ordering_institution_52D(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setordering_institution_52D(self, val):
        """sets the value on python object of MT103"""
        self.swift_obj.OrderingInstitution_D = val
        self.swift_obj.OrderingInstitution_D.swiftTag = '52D'

    # --------------------------------- senders_correspondent -------------------------------------------

    #option_getter
    def get_senders_correspondent_option(self):
        """Returns default option if override is not provided"""
        return 'A'

    # setter
    def _set_OPTION_senders_correspondent(self):
        """Returns name of the getter"""
        getter_name = ''
        senders_correspondent_option = self.get_senders_correspondent_option()
        if senders_correspondent_option == 'A':
            getter_name = 'senders_correspondent_53A'
        elif senders_correspondent_option == 'D':
            getter_name = 'senders_correspondent_53D'
        else:
            notifier.WARN("%s Option %s is not supported for tag %s. Mapping default option." % (
                self.swift_message_type, str(senders_correspondent_option), 'SendersCorrespondent_53a'))
            getter_name = 'senders_correspondent_53A'  # default
        return getter_name

    # getter
    def senders_correspondent_53A(self):
        """ Returns a dictionary as {'senders_correspondent_account': value, 'senders_correspondent_bic':value} """
        values_dict = {}
        values_dict = get_acquirer_correpondent_details(self.acm_obj)
        return values_dict

    # formatter
    def _format_senders_correspondent_53A(self, val):
        """Formats the value provided by getter method"""
        senders_correspondent_account = val.get('ACCOUNT')
        senders_correspondent_bic = val.get('BIC')
        if senders_correspondent_bic:
            if senders_correspondent_account:
                val = "/" + str(senders_correspondent_account) + "\n" + str(senders_correspondent_bic)
            else:
                val = str(senders_correspondent_bic)
            return val

    # validator
    @validate_with(MT103.MT103_53A_Type)
    def _validate_senders_correspondent_53A(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setsenders_correspondent_53A(self, val):
        """sets the value on python object of MT103"""
        self.swift_obj.SendersCorrespondent_A = val
        self.swift_obj.SendersCorrespondent_A.swiftTag = "53A"

    # getter
    def senders_correspondent_53D(self):
        """ Returns a dictionary as {'senders_correspondent_account': value, 'senders_correspondent_name':value, 'senders_correspondent_address':value} """
        values_dict = {}
        return get_acquirer_correpondent_details(self.acm_obj)

    # formatter
    def _format_senders_correspondent_53D(self, val):
        """Formats the value provided by getter method"""
        account = val.get('ACCOUNT')
        name = val.get('NAME')
        address = val.get('ADDRESS')
        if name and address:
            name = FSwiftWriterUtils.split_text_and_prefix(name, 35)
            address = FSwiftWriterUtils.split_text_and_prefix(address, 35)
            val = FSwiftWriterUtils.allocate_space_for_name_address_without_constraint(name, address)
            if account:
                val = "/" + str(account) + "\n" + str(val)
            return val

    # validator
    @validate_with(MT103.MT103_53D_Type)
    def _validate_senders_correspondent_53D(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setsenders_correspondent_53D(self, val):
        """sets the value on python object of MT103"""
        self.swift_obj.SendersCorrespondent_D = val
        self.swift_obj.SendersCorrespondent_D.swiftTag = "53D"

    # --------------------------------- intermediary_institution -------------------------------------------

    #option_getter
    def get_intermediary_institution_option(self):
        """Returns default option if override is not provided"""
        return 'A'

    # setter
    def _set_OPTION_intermediary_institution(self):
        """Returns name of the getter method"""
        getter_name = ''
        intermediary_institution_option = self.get_intermediary_institution_option()
        if intermediary_institution_option == "A":
            getter_name = 'intermediary_institution_56A'
        elif intermediary_institution_option == "C":
            getter_name = 'intermediary_institution_56C'
        elif intermediary_institution_option == "D":
            getter_name = 'intermediary_institution_56D'
        else:
            notifier.WARN("%s Option %s is not supported for tag %s. Mapping default option." % (
                self.swift_message_type, str(intermediary_institution_option), 'IntermediaryInstitution_56a'))
            getter_name = 'intermediary_institution_56A'  # default
        return getter_name

    # getter
    def intermediary_institution_56A(self):
        """ Returns a dictionary as {'intermediary_institution_account': value, 'intermediary_institution_bic':value} """
        values_dict = {}
        return get_counterpartys_intermediary_details(self.acm_obj)

    # formatter
    def _format_intermediary_institution_56A(self, val):
        """Formats the value provided by getter method"""
        intermediary_institution_account = val.get('ACCOUNT')
        intermediary_institution_bic = val.get('BIC')
        if intermediary_institution_bic:
            if intermediary_institution_account:
                val = "/" + str(intermediary_institution_account) + "\n" + str(intermediary_institution_bic)
            else:
                val = str(intermediary_institution_bic)
            return val

    # validator
    @validate_with(MT103.MT103_56A_Type)
    def _validate_intermediary_institution_56A(self, val, swift_tag_obj=MT103.MT103_56A_Type):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setintermediary_institution_56A(self, val):
        """sets the value on python object of MT103"""
        self.swift_obj.IntermediaryInstitution_A = val
        self.swift_obj.IntermediaryInstitution_A.swiftTag = '56A'

    # getter
    def intermediary_institution_56C(self):
        """ Returns a intermediary_institution_account as string """
        intermediary_institution_account = self.acm_obj.CounterpartyAccountRef().Account3()
        return intermediary_institution_account

    # formatter
    def _format_intermediary_institution_56C(self, val):
        """Formats the value provided by getter method"""
        if val:
            val = "/" + str(val)
            return val

    # validator
    @validate_with(MT103.MT103_56C_Type)
    def _validate_intermediary_institution_56C(self, val, swift_tag_obj=MT103.MT103_56C_Type):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setintermediary_institution_56C(self, val):
        """sets the value on python object of MT103"""
        self.swift_obj.IntermediaryInstitution_C = val
        self.swift_obj.IntermediaryInstitution_C.swiftTag = '56C'

    # getter
    def intermediary_institution_56D(self):
        """ Returns a dictionary as {'intermediary_institution_account': value, 'intermediary_institution_name':value, 'intermediary_institution_address':value} """
        values_dict = {}
        return get_counterpartys_intermediary_details(self.acm_obj)

    # formatter
    def _format_intermediary_institution_56D(self, val):
        """Formats the value provided by getter method"""
        account = val.get('ACCOUNT')
        name = val.get('NAME')
        address = val.get('ADDRESS')
        if name and address:
            name = FSwiftWriterUtils.split_text_and_prefix(name, 35)
            address = FSwiftWriterUtils.split_text_and_prefix(address, 35)
            val = FSwiftWriterUtils.allocate_space_for_name_address_without_constraint(name, address)
            if account:
                val = "/" + str(account) + "\n" + str(val)
            return val

    # validator
    @validate_with(MT103.MT103_56D_Type)
    def _validate_intermediary_institution_56D(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setintermediary_institution_56D(self, val):
        """sets the value on python object of MT103"""
        self.swift_obj.IntermediaryInstitution_D = val
        self.swift_obj.IntermediaryInstitution_D.swiftTag = '56D'

    # --------------------------------- account_with_institution -------------------------------------------

    #option_getter
    def get_account_with_institution_option(self):
        """Returns default option if override is not provided"""
        return 'A'

    # setter
    def _set_OPTION_account_with_institution(self):
        """Returns name of the getter method"""
        getter_name = ''
        account_with_institution_option = self.get_account_with_institution_option()
        if account_with_institution_option == "A":
            getter_name = 'account_with_institution_57A'
        elif account_with_institution_option == "C":
            getter_name = 'account_with_institution_57C'
        elif account_with_institution_option == "D":
            getter_name = 'account_with_institution_57D'
        else:
            notifier.WARN("%s Option %s is not supported for tag %s. Mapping default option." % (
                self.swift_message_type, str(account_with_institution_option), 'AccountWithInstitution_57a'))
            getter_name = 'account_with_institution_57A'  # default
        return getter_name

    # getter account_with_institution_57A
    # Moved to FCashSetttlementOutBase

    # formatter _format_account_with_institution_57A
    # Moved to FCashSetttlementOutBase

    # validator
    @validate_with(MT103.MT103_57A_Type)
    def _validate_account_with_institution_57A(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setaccount_with_institution_57A(self, val):
        """sets the value on python object of MT103"""
        self.swift_obj.AccountWithInstitution_A = val
        self.swift_obj.AccountWithInstitution_A.swiftTag = '57A'

    # getter
    def account_with_institution_57C(self):
        """ Returns a account_with_institution as string """
        account_with_institution_account = self.acm_obj.CounterpartyAccountRef().Account2()  # get_account_with_institution_account(self.acm_obj)
        return account_with_institution_account

    # formatter
    def _format_account_with_institution_57C(self, val):
        """Formats the value provided by getter method"""
        if val:
            val = "/" + str(val)
            return val

    # validator
    @validate_with(MT103.MT103_57C_Type)
    def _validate_account_with_institution_57C(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setaccount_with_institution_57C(self, val):
        """sets the value on python object of MT103"""
        self.swift_obj.AccountWithInstitution_C = val
        self.swift_obj.AccountWithInstitution_C.swiftTag = '57C'

    # getter
    def account_with_institution_57D(self):
        """ Returns a dictionary as {'account_with_institution_account': value, 'account_with_institution_name':value, 'account_with_institution_address':value} """
        values_dict = {}
        return get_counterpartys_correspondent_details(self.acm_obj)

    # formatter
    def _format_account_with_institution_57D(self, val):
        """Formats the value provided by getter method"""
        account = val.get('ACCOUNT')
        name = val.get('NAME')
        address = val.get('ADDRESS')
        if name and address:
            name = FSwiftWriterUtils.split_text_and_prefix(name, 35)
            address = FSwiftWriterUtils.split_text_and_prefix(address, 35)
            val = FSwiftWriterUtils.allocate_space_for_name_address_without_constraint(name, address)
            if account:
                val = "/" + str(account) + "\n" + str(val)
            return val

    # validator
    @validate_with(MT103.MT103_57D_Type)
    def _validate_account_with_institution_57D(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setaccount_with_institution_57D(self, val):
        """sets the value on python object of MT103"""
        self.swift_obj.AccountWithInstitution_D = val
        self.swift_obj.AccountWithInstitution_D.swiftTag = '57D'

    # --------------------------------- beneficiary_customer -------------------------------------------

    #option_getter
    def get_beneficiary_customer_option(self):
        """Returns default option if override is not provided"""
        option = 'A'
        bic = ''
        counterparty_reference = self.acm_obj.CounterpartyAccountRef()
        if counterparty_reference and counterparty_reference.NetworkAlias():
            bic = counterparty_reference.NetworkAlias().Alias()
        if not bic and self.acm_obj.Counterparty():
            bic = self.acm_obj.Counterparty().Swift()
        if not bic:
            option = 'NO OPTION'
        return option

    # setter
    def _set_OPTION_beneficiary_customer(self):
        """Returns name of the getter method"""
        getter_name = ''
        beneficiary_customer_option = self.get_beneficiary_customer_option()
        if beneficiary_customer_option == "A":
            getter_name = 'beneficiary_customer_59A'
        elif beneficiary_customer_option == "NO OPTION":
            getter_name = 'beneficiary_customer_no_option_59'
        elif beneficiary_customer_option == "F":
            getter_name = 'beneficiary_customer_59F'
        else:
            notifier.WARN("%s Option %s is not supported for tag %s. Mapping default option." % (
                self.swift_message_type, str(beneficiary_customer_option), 'BeneficiaryCustomer_59a'))
            getter_name = 'beneficiary_customer_59A'  # default
        return getter_name

    # getter
    def beneficiary_customer_59A(self):
        """ Returns a dictionary as {'beneficiary_customer_account': value, 'beneficiary_customer_bic':value} """
        values_dict = {}
        return get_counterparty_details(self.acm_obj)

    # formatter
    def _format_beneficiary_customer_59A(self, val):
        """Formats the value provided by getter method"""
        beneficiary_customer_account = val.get('ACCOUNT')
        beneficiary_customer_bic = val.get('BIC')
        if beneficiary_customer_bic:
            if beneficiary_customer_account:
                val = "/" + str(beneficiary_customer_account) + "\n" + str(beneficiary_customer_bic)
            else:
                val = str(beneficiary_customer_bic)
            return val
        else:
            notifier.ERROR("Inappropriate option selected. Option A is invalid.")

    # validator
    @validate_with(MT103.MT103_59A_Type)
    def _validate_beneficiary_customer_59A(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setbeneficiary_customer_59A(self, val):
        """sets the value on python object of MT103"""
        self.swift_obj.BeneficiaryCustomer_A = val
        self.swift_obj.BeneficiaryCustomer_A.swiftTag = '59A'

    # getter
    def beneficiary_customer_no_option_59(self):
        """ Returns a dictionary as {'beneficiary_customer_account': value, 'beneficiary_customer_name':value, 'beneficiary_customer_address':value} """
        values_dict = {}
        return get_counterparty_details(self.acm_obj)

    # formatter
    def _format_beneficiary_customer_no_option_59(self, val):
        """Formats the value provided by getter method"""
        account = val.get('ACCOUNT')
        name = val.get('NAME')
        address = val.get('ADDRESS')

        temp_name = name
        temp_address = address
        char_set = ''
        lookup_temp = lookup
        try:
            char_set = str(self.acm_obj.Counterparty().AdditionalInfo().TraditionalChinese())
        except Exception as e:
            notifier.WARN("Could not find Additional Info 'TraditionalChinese'.")

        if char_set == 'True':
            lookup_temp = CCC_traditional_writer
        elif char_set == 'False':
            lookup_temp = CCC_simplified_writer

        for key in list(lookup_temp.keys()):
            temp_name = temp_name.replace(str(key), lookup_temp[key] + " ")
            temp_address = temp_address.replace(str(key), lookup_temp[key] + " ")
        if name == temp_name:
            if name and address:
                name = FSwiftWriterUtils.split_text_and_prefix(name, 35)
                address = FSwiftWriterUtils.split_text_and_prefix(address, 35)
                val = FSwiftWriterUtils.allocate_space_for_name_address_without_constraint(name, address)
                if account:
                    val = "/" + str(account) + "\n" + str(val)
                return val
        else:
            name = temp_name
            address = 'ADD. ' + temp_address
            name_and_address = name + address
            split_name_and_address = FSwiftWriterUtils.split_text_logically_on_character_limit(name_and_address,35)
            val = ('\n').join(split_name_and_address)
            if account:
                val = "/" + str(account) + "\n" + str(val)
            return val


    # validator
    @validate_with(MT103.MT103_59_Type)
    def _validate_beneficiary_customer_no_option_59(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setbeneficiary_customer_no_option_59(self, val):
        """sets the value on python object of MT103"""
        self.swift_obj.BeneficiaryCustomer = val
        self.swift_obj.BeneficiaryCustomer.swiftTag = '59'

    # getter
    def beneficiary_customer_59F(self):
        """ Returns a dictionary as {'beneficiary_customer_account': value, 'beneficiary_customer_name':value, 'beneficiary_customer_address':value,
        'beneficiary_customer_country_code':value, 'beneficiary_customer_town':value} """
        values_dict = {}
        return get_counterparty_details(self.acm_obj)

    # formatter
    def _format_beneficiary_customer_59F(self, val):
        """Formats the value provided by getter method"""
        account = val.get('ACCOUNT')
        name = val.get('NAME')
        address = val.get('ADDRESS')
        country_code = val.get('COUNTRY_CODE')
        town = val.get('TOWN')
        name_list, address_list, country_and_town_list = [], [], []

        if name:
            name_list = FSwiftWriterUtils.split_text_and_prefix(str(name), 33, '1/')
        if address:
            address_list = FSwiftWriterUtils.split_text_and_prefix(str(address), 33, '2/')
        if country_code:
            additional_details = str(country_code)
            if town:
                additional_details = str(additional_details) + '/' + str(town)
            country_and_town_list = FSwiftWriterUtils.split_text_and_prefix(
                str(additional_details), 33, '3/')
        value = FSwiftWriterUtils.allocate_space_for_name_and_address_with_constraint(name_list, address_list,
                                                                                      country_and_town_list)
        if account:
            account = '/' + str(account)
            value = account + '\n' + value
        return value

    # validator
    @validate_with(MT103.MT103_59F_Type)
    def _validate_beneficiary_customer_59F(self, val, swift_tag_obj=MT103.MT103_59F_Type):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setbeneficiary_customer_59F(self, val):
        """sets the value on python object of MT103"""
        self.swift_obj.BeneficiaryCustomer_F = val
        self.swift_obj.BeneficiaryCustomer_F.swiftTag = '59F'

    # --------------------------------- remittance_information -------------------------------------------
    # getter
    def remittance_information_70(self):
        """ Returns a remittance_information as string """
        remittance_info = self.get_remittance_info(self.acm_obj)
        return remittance_info

    # formatter
    def _format_remittance_information_70(self, val):
        """Formats the value provided by getter method"""
        #val = val.replace('newline', '\n')
        val = self.format_MT103_field70(val, 34)
        return str(val)

    # validator
    @validate_with(MT103.MT103_70_Type)
    def _validate_remittance_information_70(self, val):
        """validates the value provided by formatter method"""
        val = validate_remittance_info(val)
        return val

    # setter
    def _set_remittance_information_70(self, val):
        """sets the value on python object of MT103"""
        self.swift_obj.RemittanceInformation = val
        self.swift_obj.RemittanceInformation.swiftTag = '70'

    # --------------------------------- details_of_charges_71A -------------------------------------------
    # getter
    def details_of_charges_71A(self):
        """ Returns a details_of_charges as string """
        details_of_charges = get_details_of_charges(self.acm_obj)
        return details_of_charges

    # formatter
    def _format_details_of_charges_71A(self, val):
        """Formats the value provided by getter method"""
        return val

    # validator
    @validate_with(MT103.MT103_71A_Type)
    def _validate_details_of_charges_71A(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _set_details_of_charges_71A(self, val):
        """sets the value on python object of MT103"""
        self.swift_obj.DetailsOfCharges = val
        self.swift_obj.DetailsOfCharges.swiftTag = '71A'

    def get_remittance_info(self, settlement):
        ''' Optional field 70 '''

        trade = settlement.Trade()
        instrument = settlement.Instrument()
        YOUR_REF = 'Your reference:'
        OUR_REF = 'Our reference:'
        code = '/INV/'
        newline = 'newline'
        info = []
        info.append(code)
        info.append(newline)
        if instrument:
            info.append('Instrument:')
            info.append(instrument.Name())
        info.append(newline)
        info.append(OUR_REF)
        if trade:
            info.append(str(trade.Oid()))
        info.append(newline)
        info.append(YOUR_REF)
        info.append(get_your_ref(settlement))
        info = ''.join(info)
        return info


    def format_MT103_field70(self, val, character_limit):
        """returns formatted form of value provided"""
        text = []
        val = val.replace('newline', '\n')
        val = val.split('\n')
        for values in val:
            line = FSwiftWriterUtils.split_text_on_character_limit(values, character_limit)
            text.append(line)
        text = '\n'.join(str(i) for sub_list in text for i in sub_list)
        #text = '\n'.join(text.split('\n')[:n_lines])
        return text


class FMT103OutBaseMessageHeader(FSwiftWriterMessageHeader.FSwiftWriterMessageHeader):
    def __init__(self, acm_obj, swift_msg_tags):
        self.mt_typ = "103"
        self.acm_obj = acm_obj
        self.swift_msg_tags = swift_msg_tags
        self.sender_ref_end_char = FSwiftMLUtils.get_character_for_mt_type('MT' + self.mt_typ)
        super(FMT103OutBaseMessageHeader, self).__init__(self.mt_typ, self.acm_obj, swift_msg_tags)

    def message_type(self):
        """returns message type"""
        return "103"

    def sender_logical_terminal_address(self):
        '''LT code is hardcoded as A for sender'''
        terminal_address = ''

        senders_bic = get_senders_bic(self.acm_obj)
        if not senders_bic:
            raise Exception("SENDER_BIC is a mandatory field for Swift message header")
        terminal_address = self.logical_terminal_address(senders_bic, "A")
        return terminal_address

    def receiver_logical_terminal_address(self):
        '''LT code is hardcoded as X for sender'''
        receivers_bic = get_receivers_bic(self.acm_obj)
        terminal_address = self.logical_terminal_address(receivers_bic, "X")
        return terminal_address

    def logical_terminal_address(self, bic_code, lt_code):
        """returns terminal address"""
        terminal_address = ""
        branch_code = "XXX"
        if bic_code:
            if len(str(bic_code)) == 8:
                terminal_address = str(bic_code) + lt_code + branch_code
            elif len(str(bic_code)) == 11:
                branch_code = bic_code[8:]
                terminal_address = str(bic_code[:8]) + lt_code + branch_code
            else:
                raise Exception("Invalid BIC <%s>)" % bic_code)
        return terminal_address


    def message_user_reference(self):
        '''MUR is sent in the format FAC-SEQNBR of confirmation-VersionID'''

        settlement_prefix = get_settlement_reference_prefix()
        cash_settlement_out_config = FSwiftWriterUtils.get_config_from_fparameter('FCashOut_Config')
        include_tradeno_in_tag_20 = FSwiftMLUtils.incude_trade_no_in_tag20(cash_settlement_out_config)
        val = FSwiftMLUtils.message_user_reference(self.acm_obj, settlement_prefix, include_tradeno_in_tag_20=include_tradeno_in_tag_20)
        val = '{}{}'.format(val, self.sender_ref_end_char)
        return "{108:%s}" % val

    def service_identifier(self):
        """returns service identifier"""
        sub_network = get_sub_network(self.acm_obj)
        if sub_network == "TARGET2":
            return "{103:TGT}"
        if sub_network == "EBA":
            return "{103:EBA}"
        return ''

    def banking_priority_code(self):
        """returns banking priority code"""
        banking_priority = ""

        sub_network = get_sub_network(self.acm_obj)
        if sub_network == "TARGET2":
            banking_priority = get_banking_priority(self.acm_obj) #getter for BankingPriority
        if banking_priority:
            return "{113:%s}" % str(banking_priority)
        if sub_network == "EBA":
            return ""
        return ''

    def UETR(self):
        """returnd UETR"""
        ref_no = uuid.uuid4()
        return "{121:%s}" % (ref_no)

    def gpi_id(self):
        """returnd gpi id"""
        gpi_identifier = get_gpi_identifier(self.acm_obj)
        if gpi_identifier:
            return "{111:%s}" % str(gpi_identifier)


class FMT103OutBaseNetworkRules(object):
    """validation of swift message by network rules"""

    def __init__(self, swift_message_obj, swift_message, acm_obj):
        self.swift_message_obj = swift_message_obj
        self.swift_message = swift_message
        self.acm_obj = acm_obj
        self.mt_typ = "103"


    def network_rule_C1(self):
        '''If field 33B is present and the currency code is different from the currency code in field 32A, field 36 must be present, otherwise field 36 is not allowed'''
        if self.swift_message_obj.CurrencyInstructedAmount and self.swift_message_obj.ValueDateCurrencyInterbankSettledAmount:
            currency_33B = str(self.swift_message_obj.CurrencyInstructedAmount.value())[:3]
            currency_32A = str(self.swift_message_obj.ValueDateCurrencyInterbankSettledAmount.value())[6:9]
            if currency_32A != currency_33B and not self.swift_message_obj.ExchangeRate:
                return "If field 33B is present and the currency code is different from the currency code in field 32A, field 36 must be present, otherwise field 36 is not allowed"
        return ''

    def network_rule_C2(self):
        '''If the country codes of the Sender's and the Receiver's BICs are within the following list: AD, AT, BE, BG, BV, CH, CY, CZ, \\
           DE, DK, ES, EE, FI, FR, GB, GF, GI, GP, GR, HU, IE, IS, IT, LI, LT, LU, LV, MC, MQ, MT, NL, NO, PL, PM, PT, RE, RO, SE, SI, SJ, \\
           SK, SM, TF and VA, then field 33B is mandatory, otherwise field 33B is optional '''

        receivers_bic = get_receivers_bic(self.acm_obj)
        senders_bic = get_senders_bic(self.acm_obj)
        country_code = ['AD', 'AT', 'BE', 'BG', 'BV', 'CH', 'CY', 'CZ', 'DE', 'DK', 'ES', 'EE', 'FI', 'FR', 'GB', 'GF',
                        'GI', 'GP', 'GR', 'HU', 'IE', 'IS', 'IT', 'LI', 'LT', 'LU', 'LV', 'MC', 'MQ', 'MT', 'NL', 'NO',
                        'PL', 'PM', 'PT', 'RE', 'RO', 'SE', 'SI', 'SJ', 'SK', 'SM', 'TF', 'VA']
        if receivers_bic[4:6] in country_code and senders_bic[4:6] in country_code:
            if not self.swift_message_obj.CurrencyInstructedAmount:
                return "If the country codes of the Sender's and the Receiver's BICs are within the following list: AD, AT, BE, BG, BV, CH, CY, CZ, DE, DK, ES, EE, FI, FR, GB, GF, GI, GP, GR, HU, IE, IS, IT, LI, LT, LU, LV, MC, MQ, MT, NL, NO, PL, PM, PT, RE, RO, SE, SI, SJ, SK, SM, TF and VA, then field 33B is mandatory, otherwise field 33B is optional"
        return ""

    def network_rule_C3(self):
        '''If field 23B contains the code SPRI, field 23E may contain only the codes SDVA, TELB, PHOB, INTC.
           If field 23B contains one of the codes SSTD or SPAY, field 23E must not be used'''
        if self.swift_message_obj.BankOperationCode:
            if self.swift_message_obj.BankOperationCode.value() == 'SPRI':
                values_of_23E = [each.value() for each in self.swift_message_obj.InstructionCode]
                for each in values_of_23E:
                    if each not in ['SDVA', 'TELB', 'PHOB', 'INTC']:
                        return "If field 23B contains the code SPRI, field 23E may contain only the codes SDVA, TELB, PHOB, INTC"
            if self.swift_message_obj.BankOperationCode.value() in ['SSTD', 'SPAY']:
                if self.swift_message_obj.InstructionCode:
                    return "If field 23B contains one of the codes SSTD or SPAY, field 23E must not be used"
        return ""

    def network_rule_C4(self):
        '''If field 23B contains one of the codes SPRI, SSTD or SPAY, field 53a must not be used with option D'''
        if self.swift_message_obj.BankOperationCode:
            if self.swift_message_obj.BankOperationCode.value() in ['SPRI', 'SSTD', 'SPAY']:
                if self.swift_message_obj.SendersCorrespondent_D:
                    return "If field 23B contains one of the codes SPRI, SSTD or SPAY, field 53a must not be used with option D"
        return ""

    def network_rule_C5(self):
        '''If field 23B contains one of the codes SPRI, SSTD or SPAY and field 53a is present with option B, Party Identifier must be present in field 53B'''
        if self.swift_message_obj.BankOperationCode:
            if self.swift_message_obj.BankOperationCode.value() in ['SPRI', 'SSTD',
                                                                    'SPAY'] and self.swift_message_obj.SendersCorrespondent_B:
                party_identifier, location = str(self.swift_message_obj.SendersCorrespondent_B.value()).split('\n')
                if not party_identifier:
                    return "If field 23B contains one of the codes SPRI, SSTD or SPAY and field 53a is present with option B, Party Identifier must be present in field 53B"
        return ""

    def network_rule_C6(self):
        if self.swift_message_obj.BankOperationCode:
            if self.swift_message_obj.BankOperationCode.value() in ['SPRI', 'SSTD',
                                                                    'SPAY'] and not self.swift_message_obj.ReceiversCorrespondent_A:
                return "If field 23B contains one of the codes SPRI, SSTD or SPAY, field 54a may be used with option A only"
        return ""

    def network_rule_C7(self):
        if self.swift_message_obj.ThirdReimbursementInstitution_A or self.swift_message_obj.ThirdReimbursementInstitution_B or self.swift_message_obj.ThirdReimbursementInstitution_D:
            is_field_53a_present = (
                self.swift_message_obj.SendersCorrespondent_A or self.swift_message_obj.SendersCorrespondent_B or self.swift_message_obj.SendersCorrespondent_D)
            is_field_54a_present = (
                self.swift_message_obj.ReceiversCorrespondent_A or self.swift_message_obj.ReceiversCorrespondent_B or self.swift_message_obj.ReceiversCorrespondent_D)
            if not is_field_53a_present or not is_field_54a_present:
                return "If field 55a is present, then both fields 53a and 54a must also be present"
        return ""

    def network_rule_C8(self):
        '''If field 23B contains one of the codes SPRI, SSTD or SPAY, field 55a may be used with option A only'''
        if self.swift_message_obj.BankOperationCode:
            if self.swift_message_obj.BankOperationCode.value() in ['SPRI', 'SSTD',
                                                                    'SPAY'] and not self.swift_message_obj.ThirdReimbursementInstitution_A:
                return "If field 23B contains one of the codes SPRI, SSTD or SPAY, field 55a may be used with option A only"
        return ""

    def network_rule_C9(self):
        '''If field 56a is present, field 57a must also be present'''
        is_field_56a_present = (
            self.swift_message_obj.IntermediaryInstitution_A or self.swift_message_obj.IntermediaryInstitution_C or self.swift_message_obj.IntermediaryInstitution_D)
        is_field_57a_present = (
            self.swift_message_obj.AccountWithInstitution_A or self.swift_message_obj.AccountWithInstitution_B or self.swift_message_obj.AccountWithInstitution_C or self.swift_message_obj.AccountWithInstitution_D)
        if is_field_56a_present and not is_field_57a_present:
            return "If field 56a is present, field 57a must also be present"
        return ""

    def network_rule_C10(self):
        '''If field 23B contains the code SPRI, field 56a must not be present.
           If field 23B contains one of the codes SSTD or SPAY, field 56a may be used with either option A or option C.

           If option C is used, it must contain a clearing code- This part is not implemented/supported'''
        if self.swift_message_obj.BankOperationCode and self.swift_message_obj.BankOperationCode.value() == "SPRI":
            is_field_56a_present = (
                self.swift_message_obj.IntermediaryInstitution_A or self.swift_message_obj.IntermediaryInstitution_C or self.swift_message_obj.IntermediaryInstitution_D)
            if is_field_56a_present:
                return "If field 23B contains the code SPRI, field 56a must not be present."
        if self.swift_message_obj.BankOperationCode and self.swift_message_obj.BankOperationCode.value() in ['SSTD',
                                                                                                             'SPAY']:
            is_field_56A_and56C_present = (
                self.swift_message_obj.IntermediaryInstitution_A or self.swift_message_obj.IntermediaryInstitution_C)
            if not is_field_56A_and56C_present:
                return "If field 23B contains one of the codes SSTD or SPAY, field 56a may be used with either option A or option C"
        # If option C is used, it must contain a clearing code- This part is not implemented/supported because of unclear understanding
        return ""

    def network_rule_C11(self):
        '''If field 23B contains one of the codes SPRI, SSTD or SPAY,
           field 57a may be used with option A, option C or option D. Subfield 1 (Party Identifier) in option D must be present'''
        if self.swift_message_obj.BankOperationCode:
            if self.swift_message_obj.BankOperationCode.value() in ['SPRI', 'SSTD', 'SPAY']:
                is_field_57A_57C_57D_present = (
                    self.swift_message_obj.AccountWithInstitution_A or self.swift_message_obj.AccountWithInstitution_C or self.swift_message_obj.AccountWithInstitution_D)
                if not is_field_57A_57C_57D_present:
                    return "If field 23B contains one of the codes SPRI, SSTD or SPAY, field 57a may be used with option A, option C or option D."
                if self.swift_message_obj.AccountWithInstitution_D:
                    party_identifier, name_and_address = str(
                        self.swift_message_obj.AccountWithInstitution_D.value()).split('\n')
                    if not party_identifier:
                        return "If field 23B contains one of the codes SPRI, SSTD or SPAY, field 57a may be used with option A, option C or option D. Subfield 1 (Party Identifier) in option D must be present"
        return ""

    def network_rule_C12(self):
        '''If field 23B contains one of the codes SPRI, SSTD or SPAY, subfield 1 (Account) in field 59a Beneficiary Customer is mandatory'''
        if self.swift_message_obj.BankOperationCode:
            if self.swift_message_obj.BankOperationCode.value() in ['SPRI', 'SSTD', 'SPAY']:
                field_59a = [each for each in
                             [self.swift_message_obj.BeneficiaryCustomer, self.swift_message_obj.BeneficiaryCustomer_A,
                              self.swift_message_obj.BeneficiaryCustomer_F] if each != None]
                field_59a_value = field_59a[0].value()
                try:
                    if len(field_59a_value.split('\n')[0]) <= 0:
                        return "If field 23B contains one of the codes SPRI, SSTD or SPAY, subfield 1 (Account) in field 59a Beneficiary Customer is mandatory"
                except Exception as e:
                    return "If field 23B contains one of the codes SPRI, SSTD or SPAY, subfield 1 (Account) in field 59a Beneficiary Customer is mandatory"
        return ""

    def network_rule_C13(self):
        '''If any field 23E contains the code CHQB, subfield 1 (Account) in field 59a Beneficiary Customer is not allowed'''
        instruction_code_contains_CHQB = 'CHQB' in [each.value() for each in self.swift_message_obj.InstructionCode]
        if instruction_code_contains_CHQB:
            field_59a = [each for each in
                         [self.swift_message_obj.BeneficiaryCustomer, self.swift_message_obj.BeneficiaryCustomer_A,
                          self.swift_message_obj.BeneficiaryCustomer_F] if each != None]
            field_59a_value = field_59a[0].value()
            try:
                if len(field_59a_value.split('\n')[0]) > 0:
                    return "If any field 23E contains the code CHQB, subfield 1 (Account) in field 59a Beneficiary Customer is not allowed"
            except Exception as e:
                return "If any field 23E contains the code CHQB, subfield 1 (Account) in field 59a Beneficiary Customer is not allowed"
        return ""

    def network_rule_C14(self):
        '''If field 71A contains OUR, then field 71F is not allowed and field 71G is optional
           If field 71A contains SHA, then field(s) 71F is(are) optional and field 71G is not allowed
           If field 71A contains BEN, then at least one occurrence of field 71F is mandatory and field 71G is not allowed'''

        if self.swift_message_obj.DetailsOfCharges:
            is_field_71F_present = self.swift_message_obj.SendersCharges and len(
                self.swift_message_obj.SendersCharges) > 0
            is_field_71G_present = self.swift_message_obj.ReceiversCharges
            if self.swift_message_obj.DetailsOfCharges.value() == 'OUR':
                if is_field_71F_present:
                    return "If field 71A contains OUR, then field 71F is not allowed and field 71G is optional"
            if self.swift_message_obj.DetailsOfCharges.value() == 'SHA':
                if is_field_71G_present:
                    return "If field 71A contains SHA, then field(s) 71F is(are) optional and field 71G is not allowed"
            if self.swift_message_obj.DetailsOfCharges.value() == 'BEN':
                if is_field_71G_present or not is_field_71F_present:
                    return "If field 71A contains BEN, then at least one occurrence of field 71F is mandatory and field 71G is not allowed"
        return ""

    def network_rule_C15(self):
        '''If either field 71F (at least one occurrence) or field 71G is present, then field 33B is mandatory, otherwise field 33B is optional'''
        is_field_71F_present = self.swift_message_obj.SendersCharges and len(self.swift_message_obj.SendersCharges) > 0
        is_field_71G_present = self.swift_message_obj.ReceiversCharges
        is_field_33B_present = self.swift_message_obj.CurrencyInstructedAmount
        if (is_field_71F_present or is_field_71G_present) and not is_field_33B_present:
            return "If either field 71F (at least one occurrence) or field 71G is present, then field 33B is mandatory, otherwise field 33B is optional"
        return ""

    def network_rule_C16(self):
        '''If field 56a is not present, no field 23E may contain TELI or PHOI'''
        is_field_56a_present = (
            self.swift_message_obj.IntermediaryInstitution_A or self.swift_message_obj.IntermediaryInstitution_C or self.swift_message_obj.IntermediaryInstitution_D)
        if not is_field_56a_present:
            field_23E_values = [each.value() for each in self.swift_message_obj.InstructionCode]
            if 'TELI' in field_23E_values or 'PHOI' in field_23E_values:
                return "If field 56a is not present, no field 23E may contain TELI or PHOI"
        return ""

    def network_rule_C17(self):
        '''If field 57a is not present, no field 23E may contain TELE or PHON'''
        is_field_57a_present = (
            self.swift_message_obj.AccountWithInstitution_A or self.swift_message_obj.AccountWithInstitution_B or self.swift_message_obj.AccountWithInstitution_C or self.swift_message_obj.AccountWithInstitution_D)
        if not is_field_57a_present:
            field_23E_values = [each.value() for each in self.swift_message_obj.InstructionCode]
            if 'TELE' in field_23E_values or 'PHON' in field_23E_values:
                return "If field 57a is not present, no field 23E may contain TELE or PHON"
        return ""

    def network_rule_C18(self):
        '''The currency code in the fields 71G and 32A must be the same'''
        if self.swift_message_obj.ReceiversCharges and self.swift_message_obj.ValueDateCurrencyInterbankSettledAmount:
            currency_code_in_field_71G = str(self.swift_message_obj.ReceiversCharges.value())[0:3]
            currency_code_in_field_32A = str(self.swift_message_obj.ValueDateCurrencyInterbankSettledAmount.value())[
                                         6:9]
            if currency_code_in_field_32A != currency_code_in_field_71G:
                return "The currency code in the fields 71G and 32A must be the same"
        return ""


...

  FMT192Out
"""----------------------------------------------------------------------------
MODULE:
    FMT192Out

DESCRIPTION:
    This module provides the customizable class for the FMT192 outgoing implementation

CLASS:
    FMT192

VERSION: 3.6.3-0.5.6048
----------------------------------------------------------------------------"""
import FSwiftWriterLogger
import FMT192OutBase
import acm
import MT192
from FSwiftMLUtils import accepts
import xml.dom.minidom
from FSwiftWriterEngine import validate_with

notifier = FSwiftWriterLogger.FSwiftWriterLogger('CashSetlemnt', 'FCashOutNotify_Config')

@accepts([acm.FSettlement, MT192.CTD_ANON, xml.dom.minidom.Document])
class FMT192(FMT192OutBase.FMT192Base):

    def __init__(self, acm_obj, swift_obj):
        super(FMT192, self).__init__(acm_obj, swift_obj)

    # To override existing mappings use below methods to write your own logic
    """
    mt_and_date_of_original_message_11S
    narrative_description_of_original_message_79
    related_reference_21
    transaction_reference_20
    get_user_data
    """


class FMT192MessageHeader(FMT192OutBase.FMT192OutBaseMessageHeader):

    def __init__(self, acm_obj, swift_msg_tags):
        self.acm_obj = acm_obj
        self.swift_msg_tags = swift_msg_tags
        super(FMT192MessageHeader, self).__init__(acm_obj, swift_msg_tags)

    # To override existing mappings use below methods to write your own logic

    """
    application_id
    service_id
    sender_logical_terminal_address
    session_number
    sequence_number
    input_or_output
    message_priority
    message_type
    receiver_logical_terminal_address
    delivery_monitoring
    non_delivery_notification_period
    service_identifier
    banking_priority_code
    message_user_reference
    validation_flag
    """


class FMT192NetworkRules(FMT192OutBase.FMT192OutBaseNetworkRules):

    def __init__(self, swift_message_obj, swift_message, acm_obj):
        super(FMT192NetworkRules, self).__init__(swift_message_obj, swift_message, acm_obj)


...

  FMT192OutBase
"""----------------------------------------------------------------------------
MODULE:
    FMT192OutBase

DESCRIPTION:
    This module provides the base class for the FMT192 outgoing implementation

CLASS:
    FMT192Base

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import FSwiftWriterLogger
import FSwiftWriterMessageHeader
import FSwiftWriterUtils
import MT192
import FCashOutUtils
import FSwiftMLUtils
from FSwiftWriterEngine import validate_with
from FRequestCancellationOutBase import FRequestCancellationOutBase
notifier = FSwiftWriterLogger.FSwiftWriterLogger('CashSetlemnt', 'FCashOutNotify_Config')


class FMT192Base(FRequestCancellationOutBase):
    def __init__(self, acm_obj, swift_obj):
        super(FMT192Base, self).__init__(acm_obj, swift_obj)
        self.swift_message_type = 'MT192'
        #self.sender_ref_end_char = FSwiftMLUtils.get_character_for_mt_type(self.swift_message_type)
    # Implementing it to pass the NotImplementedError
    def _message_sequences(self):
        pass

    # ------------------ transaction_reference -----------------------

    # getter transaction_reference_20
    # Moved to FRequestCancellationOutBase

    # formatter _format_transaction_reference_20
    # Moved to FRequestCancellationOutBase

    # validator
    @validate_with(MT192.MT192_20_Type)
    def _validate_transaction_reference_20(self, val):
        return val

    # setter
    def _set_transaction_reference_20(self, val):
        self.swift_obj.TransactionReferenceNumber = val
        self.swift_obj.TransactionReferenceNumber.swiftTag = "20"

        # ------------------ related_reference -----------------------

    # condition _check_condition_set_related_reference_21
    # Moved to FRequestCancellationOutBase

    # getter related_reference_21
    # Moved to FRequestCancellationOutBase

    # formatter _format_related_reference_21
    # Moved to FRequestCancellationOutBase

    # validator
    @validate_with(MT192.MT192_21_Type)
    def _validate_related_reference_21(self, val):
        return val

    # setter
    def _set_related_reference_21(self, val):
        self.swift_obj.RelatedReference = val
        self.swift_obj.RelatedReference.swiftTag = "21"

    # ------------------ date of original message -----------------------
    # getter mt_and_date_of_original_message_11S
    # Moved to FRequestCancellationOutBase

    # formatter _format_mt_and_date_of_original_message_11S
    # Moved to FRequestCancellationOutBase

    # validator
    @validate_with(MT192.MT192_11S_Type)
    def _validate_mt_and_date_of_original_message_11S(self, val):
        return val

    # setter
    def _set_mt_and_date_of_original_message_11S(self, val):
        self.swift_obj.MTAndDateOfTheOriginalMessage = val
        self.swift_obj.MTAndDateOfTheOriginalMessage.swiftTag = "11S"

    # getter narrative_description_of_original_message_79
    # Moved to FRequestCancellationOutBase

    # formatter _format_narrative_description_of_original_message_79
    # Moved to FRequestCancellationOutBase

    # validator
    @validate_with(MT192.MT192_79_Type)
    def _validate_narrative_description_of_original_message_79(self, val):
        return val

    # setter
    def _set_narrative_description_of_original_message_79(self, val):
        self.swift_obj.NarrativeDescriptionOfTheOriginalMessage = val
        self.swift_obj.NarrativeDescriptionOfTheOriginalMessage.swiftTag = "79"


class FMT192OutBaseMessageHeader(FSwiftWriterMessageHeader.FSwiftWriterMessageHeader):
    def __init__(self, acm_obj, swift_msg_tags):
        self.mt_type = "192"
        self.acm_obj = acm_obj
        self.swift_msg_tags = swift_msg_tags
        mt_type = 'MT{}'.format(self.mt_type)
        if self.child_mt_type:
            mt_type = '{}-{}'.format(mt_type, self.child_mt_type)
        self.sender_ref_end_char = FSwiftMLUtils.get_character_for_mt_type(mt_type)

        super(FMT192OutBaseMessageHeader, self).__init__(self.mt_type, self.acm_obj, swift_msg_tags)

    def message_type(self):
        return "192"

    def sender_logical_terminal_address(self):
        '''LT code is hardcoded as A for sender'''
        terminal_address = ''
        senders_bic = ''
        senders_bic = FCashOutUtils.get_senders_bic(self.acm_obj)
        if not senders_bic:
            raise Exception("SENDER_BIC is a mandatory field for Swift message header")
        terminal_address = self.logical_terminal_address(senders_bic, "A")
        return terminal_address

    def receiver_logical_terminal_address(self):
        '''LT code is hardcoded as X for sender'''
        terminal_address = ''
        receivers_bic = ''
        receivers_bic = FCashOutUtils.get_receivers_bic(self.acm_obj)
        terminal_address = self.logical_terminal_address(receivers_bic, "X")
        return terminal_address

    def logical_terminal_address(self, bic_code, lt_code):
        terminal_address = ""
        branch_code = "XXX"
        if bic_code:
            if len(str(bic_code)) == 8:
                terminal_address = str(bic_code) + lt_code + branch_code
            elif len(str(bic_code)) == 11:
                branch_code = bic_code[8:]
                terminal_address = str(bic_code[:8]) + lt_code + branch_code
            else:
                raise Exception("Invalid BIC <%s>)" % bic_code)
        return terminal_address


    def message_user_reference(self):
        '''MUR is sent in the format FAC-SEQNBR of confirmation-VersionID'''
        settlement_prefix = FCashOutUtils.get_settlement_reference_prefix()
        cash_settlement_out_config = FSwiftWriterUtils.get_config_from_fparameter('FCashOut_Config')
        include_tradeno_in_tag_20 = FSwiftMLUtils.incude_trade_no_in_tag20(cash_settlement_out_config)
        sender_ref = FSwiftMLUtils.message_user_reference(self.acm_obj, settlement_prefix, True, include_tradeno_in_tag_20)
        sender_ref = '{}{}'.format(sender_ref, self.sender_ref_end_char)
        return "{108:%s}" % sender_ref

class FMT192OutBaseNetworkRules(object):
    ''' '''

    def __init__(self, swift_message_obj, swift_message, acm_obj):
        self.swift_message_obj = swift_message_obj
        self.swift_message = swift_message
        self.acm_obj = acm_obj

    def network_rule_C1(self):
        ''' Either field 79 or a copy of at least the mandatory fields of the original message must be present (Error code(s): C25).'''
        is_field_79_present = self.swift_message_obj.NarrativeDescriptionOfTheOriginalMessage
        if not is_field_79_present and not self.swift_message_obj.SEQUENCE103:
            return 'Field 79 or Mandatory fields of original message must be present'
        if not is_field_79_present and self.swift_message_obj.SEQUENCE103:
            original_message = self.swift_message_obj.SEQUENCE103
            if not original_message.SendersReference or not original_message.BankOperationCode or not original_message.ValueDateCurrencyInterbankSettledAmount or not original_message.DetailsOfCharges:
                return 'Field 79 or Mandatory fields of original message must be present'
        return ''


...

  FMT199NarrativeOut
"""----------------------------------------------------------------------------
MODULE:
    FMT199NarrativeOut

DESCRIPTION:
    OPEN EXTENSION MODULE
    FMT199Narrative class for user customization.
    This class can be populated using either swift data or an acm object.
    See FMT699OutBase for extracting the values from acm

VERSION: 3.6.3-0.5.6048
----------------------------------------------------------------------------"""




import FMTx99OutBase
import FSwiftWriterLogger
import FCashOutUtils
import FSwiftMTx99Utils

notifier = FSwiftWriterLogger.FSwiftWriterLogger('CashSetlemnt', 'FCashOutNotify_Config')


class FMT199Narrative(FMTx99OutBase.FMTx99Base):

	def __init__(self, acm_obj, swift_obj):
		swift_message_type = 'MT199Narrative'
		super(FMT199Narrative, self).__init__(acm_obj, swift_message_type, swift_obj)


	# To override existing mappings use below methods to write your own logic
	"""
	narrative_79
	related_reference_21
	transaction_reference_20
	get_user_data
	"""


class FMT199NarrativeMessageHeader(FMTx99OutBase.FMTx99OutBaseMessageHeader):

	def __init__(self, acm_obj, swift_msg_tags):
		self.acm_obj = acm_obj
		self.swift_msg_tags = swift_msg_tags
		self.mt_type = '199'
		super(FMT199NarrativeMessageHeader, self).__init__(acm_obj, self.mt_type, swift_msg_tags)

	# To override existing mappings use below methods to write your own logic
	"""
	application_id
	service_id
	sender_logical_terminal_address
	session_number
	sequence_number
	input_or_output
	message_priority
	message_type
	receiver_logical_terminal_address
	delivery_monitoring
	non_delivery_notification_period
	service_identifier
	banking_priority_code
	message_user_reference
	validation_flag
	"""

	def logical_terminal_address(self, bic_code, lt_code):
		""" create terminal address for the party
		:param bic_code: bic of the party
		:param lt_code: code for the party
		:return:
		"""
		terminal_address = ""
		branch_code = "XXX"
		if bic_code:
			if len(str(bic_code)) == 8:
				terminal_address = str(bic_code) + lt_code + branch_code
			elif len(str(bic_code)) == 11:
				branch_code = bic_code[8:]
				terminal_address = str(bic_code[:8]) + lt_code + branch_code
			else:
				raise Exception("Invalid BIC <%s>)" % bic_code)
		return terminal_address

	def receiver_logical_terminal_address(self):
		"""receiver logical terminal address"""
		receivers_bic = None
		if self.acm_obj.RecordType() == "Settlement":
			receivers_bic = FCashOutUtils.get_receivers_bic(self.acm_obj)
		elif self.acm_obj.RecordType() == "Party":
			receivers_bic = FSwiftMTx99Utils.get_bic_from_party(self.acm_obj)
		elif self.acm_obj.RecordType() == "Trade":
			receivers_bic = FMTx99OutBase.get_value_from_bpr_diary(self.acm_obj, "MT" + self.mt_type, 'ReceiverBIC')
		if not receivers_bic:
			raise Exception("RECEIVER_BIC is a mandatory field for Swift message header")
		terminal_address = self.logical_terminal_address(receivers_bic, "X")
		return terminal_address


class FMT199NarrativeNetworkRules(FMTx99OutBase.FMTx99OutBaseNetworkRules):

	def __init__(self, swift_message_obj, swift_message, acm_obj):
		super(FMT199NarrativeNetworkRules, self).__init__(swift_message_obj, swift_message, acm_obj)

...

  FMT199Out
"""----------------------------------------------------------------------------
MODULE:
    FMT199Out

DESCRIPTION:
    This module provides the customizable class for the FMT199 outgoing implementation

CLASS:
    FMT199

VERSION: 3.6.3-0.5.6048
----------------------------------------------------------------------------"""
import MT199
import acm
import xml.dom.minidom
from FSwiftMLUtils import accepts

import FMT199OutBase
import FSwiftWriterLogger
from FSwiftWriterEngine import validate_with

notifier = FSwiftWriterLogger.FSwiftWriterLogger('CashSetlemnt', 'FCashOutNotify_Config')

@accepts([acm.FSettlement, MT199.CTD_ANON, xml.dom.minidom.Document])
class FMT199(FMT199OutBase.FMT199Base):

    def __init__(self, acm_obj, swift_obj):
        super(FMT199, self).__init__(acm_obj, swift_obj)

    # To override existing mappings use below methods to write your own logic
    """
    narrative_79
    related_reference_21
    transaction_reference_20
    get_user_data
    """


class FMT199MessageHeader(FMT199OutBase.FMT199OutBaseMessageHeader):

    def __init__(self, acm_obj, swift_msg_tags):
        self.acm_obj = acm_obj
        self.swift_msg_tags = swift_msg_tags
        super(FMT199MessageHeader, self).__init__(acm_obj, swift_msg_tags)

    # To override existing mappings use below methods to write your own logic

    """
    application_id
    service_id
    sender_logical_terminal_address
    session_number
    sequence_number
    input_or_output
    message_priority
    message_type
    receiver_logical_terminal_address
    delivery_monitoring
    non_delivery_notification_period
    service_identifier
    banking_priority_code
    message_user_reference
    validation_flag
    """



class FMT199NetworkRules(FMT199OutBase.FMT199OutBaseNetworkRules):

    def __init__(self, swift_message_obj, swift_message, acm_obj):
        super(FMT199NetworkRules, self).__init__(swift_message_obj, swift_message, acm_obj)

...

  FMT199OutBase
"""----------------------------------------------------------------------------
MODULE:
    FMT199OutBase

DESCRIPTION:
    This module provides the base class for the FMT199 outgoing implementation

CLASS:
    FMT199Base

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import FSwiftWriterLogger
import FSwiftWriterMessageHeader
import FSwiftWriterUtils
import MT199
import FCashOutUtils
import FSwiftMLUtils
from FSwiftWriterEngine import validate_with

from FFreeFormatOutBase import FFreeFormatOutBase

notifier = FSwiftWriterLogger.FSwiftWriterLogger('CashSetlemnt', 'FCashOutNotify_Config')


class FMT199Base(FFreeFormatOutBase):
    def __init__(self, acm_obj, swift_obj):
        super(FMT199Base, self).__init__(acm_obj, swift_obj)
        self.swift_message_type = 'MT199'
        self.sender_ref_end_char = FSwiftMLUtils.get_character_for_mt_type(self.swift_message_type)

    # Implementing it to pass the NotImplementedError
    def _message_sequences(self):
        pass

    # getter transaction_reference_20
    # Moved to FFreeFormatOutBase

    # formatter _format_transaction_reference_20
    # Moved to FFreeFormatOutBase

    # validator
    @validate_with(MT199.MT199_20_Type)
    def _validate_transaction_reference_20(self, val):
        return val

    # setter
    def _set_transaction_reference_20(self, val):
        self.swift_obj.TransactionReferenceNumber = val
        self.swift_obj.TransactionReferenceNumber.swiftTag = "20"

    # getter related_reference_21
    def related_reference_21(self):
        """ Returns related settlement number as string. """
        val = {}
        related_msg_character = FSwiftMLUtils.get_character_for_mt_type(self.child_mt_type)
        settlement_prefix = FCashOutUtils.get_settlement_reference_prefix()
        val['related_msg_character'] = related_msg_character
        val['settlement_prefix'] = settlement_prefix
        return val


    # formatter
    def _format_related_reference_21(self, val):
        if val:
            related_msg_character = val.get('related_msg_character')
            settlement_prefix = val.get('settlement_prefix')
            related_reference = FSwiftMLUtils.get_sender_ref(self.acm_obj, settlement_prefix, True)
            related_reference = FSwiftMLUtils.format_sender_reference(related_reference)
            related_reference = '{}{}'.format(related_reference, related_msg_character)
            return related_reference


    # validator
    @validate_with(MT199.MT199_21_Type)
    def _validate_related_reference_21(self, val):
        return val

    # setter
    def _set_related_reference_21(self, val):
        self.swift_obj.RelatedReference = val
        self.swift_obj.RelatedReference.swiftTag = "21"

    # getter narrative_79
    # Moved to FFreeFormatOutBase

    # formatter _format_narrative_79
    # Moved to FFreeFormatOutBase

    # validator
    @validate_with(MT199.MT199_79_Type)
    def _validate_narrative_79(self, val):
        return val

    # setter
    def _set_narrative_79(self, val):
        self.swift_obj.Narrative = val
        self.swift_obj.Narrative.swiftTag = "79"


class FMT199OutBaseMessageHeader(FSwiftWriterMessageHeader.FSwiftWriterMessageHeader):
    def __init__(self, acm_obj, swift_msg_tags):
        self.mt_type = "199"
        self.acm_obj = acm_obj
        self.swift_msg_tags = swift_msg_tags
        self.sender_ref_end_char = FSwiftMLUtils.get_character_for_mt_type("MT" + self.mt_type)


        super(FMT199OutBaseMessageHeader, self).__init__(self.mt_type, self.acm_obj, swift_msg_tags)

    def message_type(self):
        return "199"

    def sender_logical_terminal_address(self):
        '''LT code is hardcoded as A for sender'''
        senders_bic = FCashOutUtils.get_senders_bic(self.acm_obj)
        if not senders_bic:
            raise Exception("SENDER_BIC is a mandatory field for Swift message header")
        terminal_address = self.logical_terminal_address(senders_bic, "A")
        return terminal_address

    def receiver_logical_terminal_address(self):
        '''LT code is hardcoded as X for sender'''
        receivers_bic = FCashOutUtils.get_receivers_bic(self.acm_obj)
        terminal_address = self.logical_terminal_address(receivers_bic, "X")
        return terminal_address

    def logical_terminal_address(self, bic_code, lt_code):
        terminal_address = ""
        branch_code = "XXX"
        if bic_code:
            if len(str(bic_code)) == 8:
                terminal_address = str(bic_code) + lt_code + branch_code
            elif len(str(bic_code)) == 11:
                branch_code = bic_code[8:]
                terminal_address = str(bic_code[:8]) + lt_code + branch_code
            else:
                raise Exception("Invalid BIC <%s>)" % bic_code)
        return terminal_address


    def message_user_reference(self):
        '''MUR is sent in the format FAS-SEQNBR of settlement-VersionID'''
        settlement_prefix = FCashOutUtils.get_settlement_reference_prefix()
        cash_settlement_out_config = FSwiftWriterUtils.get_config_from_fparameter('FCashOut_Config')
        include_tradeno_in_tag_20 = FSwiftMLUtils.incude_trade_no_in_tag20(cash_settlement_out_config)
        senders_reference = FSwiftMLUtils.message_user_reference(self.acm_obj, settlement_prefix, True, include_tradeno_in_tag_20, isNarrative=True)
        senders_reference = '{}{}'.format(senders_reference, self.sender_ref_end_char)

        return "{108:%s}" %senders_reference


class FMT199OutBaseNetworkRules(object):
    ''' '''

    def __init__(self, swift_message_obj, swift_message, acm_obj):
        self.swift_message_obj = swift_message_obj
        self.swift_message = swift_message
        self.acm_obj = acm_obj


...

  FMT200Out
"""----------------------------------------------------------------------------
MODULE:
    FMT200Out

DESCRIPTION:
    This module provides the customizable class for the FMT200 outgoing implementation

CLASS:
    FMT200

VERSION: 3.6.3-0.5.6048
----------------------------------------------------------------------------"""
import MT200
import acm
import xml.dom.minidom
from FSwiftMLUtils import accepts

import FMT200OutBase
import FSwiftWriterLogger
from FSwiftWriterEngine import validate_with

notifier = FSwiftWriterLogger.FSwiftWriterLogger('CashSetlemnt', 'FCashOutNotify_Config')

@accepts([acm.FSettlement, MT200.CTD_ANON, xml.dom.minidom.Document])
class FMT200(FMT200OutBase.FMT200Base):

    def __init__(self, acm_obj, swift_obj):
        super(FMT200, self).__init__(acm_obj, swift_obj)

    # To override existing mappings use below methods to write your own logic
    """
    account_with_institution_57A
    account_with_institution_57D
    date_currency_amount_32A
    intermediary_56A
    intermediary_56D
    senders_correspondent_53B
    transaction_reference_20
    get_user_data
    """

    """
    To override the options provided, use below methods to write your own logic:-
    methods:- 
    get_intermediary_option (Tag-56 options:A/D)
    get_account_with_institution_option (Tag-57 options:A/D)

    For example:
    def get_intermediary_option(self):
        condition = True
        if condition:
            return 'A'
        else:
            return 'D'

    """

class FMT200MessageHeader(FMT200OutBase.FMT200OutBaseMessageHeader):

    def __init__(self, acm_obj, swift_msg_tags):
        self.acm_obj = acm_obj
        self.swift_msg_tags = swift_msg_tags
        super(FMT200MessageHeader, self).__init__(acm_obj, swift_msg_tags)

    # To override existing mappings use below methods to write your own logic

    """
    application_id
    service_id
    sender_logical_terminal_address
    session_number
    sequence_number
    input_or_output
    message_priority
    message_type
    receiver_logical_terminal_address
    delivery_monitoring
    non_delivery_notification_period
    service_identifier
    banking_priority_code
    message_user_reference
    validation_flag
    """

class FMT200NetworkRules(FMT200OutBase.FMT200OutBaseNetworkRules):

    def __init__(self, swift_message_obj, swift_message, acm_obj):
        super(FMT200NetworkRules, self).__init__(swift_message_obj, swift_message, acm_obj)


...

  FMT200OutBase
"""----------------------------------------------------------------------------
MODULE:
    FMT200OutBase

DESCRIPTION:
    This module provides the base class for the FMT200 outgoing implementation

CLASS:
    FMT200Base

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import FSwiftMLUtils
import FSwiftWriterMessageHeader
import MT200
import FCashOutUtils
from FInstitutionTransfersOutBase import FInstitutionTransfersOutBase
from FSwiftWriterEngine import validate_with
import FSwiftWriterLogger
import FSwiftWriterUtils
import FSwiftGeneralUtils

notifier = FSwiftWriterLogger.FSwiftWriterLogger('CashSetlemnt', 'FCashOutNotify_Config')

class FMT200Base(FInstitutionTransfersOutBase):
    def __init__(self, acm_obj, swift_obj):
        super(FMT200Base, self).__init__(acm_obj, swift_obj)
        self.swift_message_type = 'MT200'
        self.sender_ref_end_char = FSwiftMLUtils.get_character_for_mt_type(self.swift_message_type)

    # Implementing it to pass the NotImplementedError
    def _message_sequences(self):
        pass

    # getter
    # Moved to FInstitutionTransfersOutBase

    # formatter
    # Moved to FInstitutionTransfersOutBase

    # validator
    @validate_with(MT200.MT200_20_Type)
    def _validate_transaction_reference_20(self, val):
        """validates the value provided by formatter method"""
        FCashOutUtils.validate_slash_and_double_slash(val, "Transaction Reference")
        return val

    # setter
    def _set_transaction_reference_20(self, val):
        """sets the value on python object"""
        self.swift_obj.TransactionReferenceNumber = val
        self.swift_obj.TransactionReferenceNumber.swiftTag = "20"

    # getter
    # Moved to FInstitutionTransfersOutBase

    # formatter


    # validator
    @validate_with(MT200.MT200_32A_Type)
    def _validate_date_currency_amount_32A(self, val):
        """validates the value provided by formatter method"""
        FCashOutUtils.validate_currency_amount(val, "Date Currency Amount")
        amount = FSwiftGeneralUtils.get_amount_from_currency_amount(val)
        FCashOutUtils.validateAmount(amount.replace('.', ','), 15, "Date Currency Amount")
        return val

    # setter
    def _set_date_currency_amount_32A(self, val):
        """sets the value on python object"""
        self.swift_obj.DateCurrencyAmount = val
        self.swift_obj.DateCurrencyAmount.swiftTag = "32A"

    # getter
    def senders_correspondent_53B(self):
        """ Returns a senders_correspondent as string """
        senders_correspondent_account = self.acm_obj.AcquirerAccountRef().Account()
        return senders_correspondent_account

    # formatter
    def _format_senders_correspondent_53B(self, val):
        """Formats the value provided by getter method"""
        if val:
            val = "/" + val
            return str(val)

    # validator
    @validate_with(MT200.MT200_53B_Type)
    def _validate_senders_correspondent_53B(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _set_senders_correspondent_53B(self, val):
        """sets the value on python object"""
        self.swift_obj.SendersCorrespondent_B = val
        self.swift_obj.SendersCorrespondent_B.swiftTag = "53B"

    #option_getter
    def get_intermediary_option(self):
        """Returns default option if override is not provided"""
        return 'A'

    # setter
    def _set_OPTION_intermediary(self):
        """Returns name of the getter method"""
        getter_name = ''
        intermediary_option = self.get_intermediary_option()
        if intermediary_option == 'A':
            getter_name = 'intermediary_56A'
        elif intermediary_option == 'D':
            getter_name = 'intermediary_56D'
        else:
            notifier.WARN("%s Option %s is not supported for tag %s. Mapping default option." % (
                self.swift_message_type, str(intermediary_option), 'Intermediary_56a'))
            getter_name = 'intermediary_56A'
        return getter_name

    # getter
    # Moved to FInstitutionTransfersOutBase

    # formatter
    # Moved to FInstitutionTransfersOutBase

    # validator
    @validate_with(MT200.MT200_56A_Type)
    def _validate_intermediary_56A(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setintermediary_56A(self, val):
        """sets the value on python object"""
        self.swift_obj.Intermedairy_A = val
        self.swift_obj.Intermedairy_A.swiftTag = "56A"

    # getter
    def intermediary_56D(self):
        """ Returns a dictionary as {'account':<value>, 'name':<value>, 'address':<value>} """

        return FCashOutUtils.get_counterpartys_intermediary_details(self.acm_obj)

    # formatter
    def _format_intermediary_56D(self, val):
        """Formats the value provided by getter method"""
        account = val.get('ACCOUNT')
        name = val.get('NAME')
        address = val.get('ADDRESS')
        if name and address:
            name = FSwiftWriterUtils.split_text_and_prefix(name, 35)
            address = FSwiftWriterUtils.split_text_and_prefix(address, 35)
            val = FSwiftWriterUtils.allocate_space_for_name_address_without_constraint(name, address)
            if account:
                val = "/" + str(account) + "\n" + str(val)
            return val

    # validator
    @validate_with(MT200.MT200_56D_Type)
    def _validate_intermediary_56D(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setintermediary_56D(self, val):
        """sets the value on python object"""
        self.swift_obj.Intermedairy_D = val
        self.swift_obj.Intermedairy_D.swiftTag = "56D"

    #option_getter
    def get_account_with_institution_option(self):
        """Returns default option if override is not provided"""
        return 'A'

    # setter
    def _set_OPTION_account_with_institution(self):
        """Returns name of the getter method"""
        getter_name = ''
        account_option = self.get_account_with_institution_option()
        if account_option == 'A':
            getter_name = 'account_with_institution_57A'
        elif account_option == 'D':
            getter_name = 'account_with_institution_57D'
        else:
            notifier.WARN("%s Option %s is not supported for tag %s. Mapping default option." % (
                self.swift_message_type, str(account_option), 'AccountWithInstitution_57a'))
            getter_name = 'account_with_institution_57A'
        return getter_name

    # getter
    # Moved to FInstitutionTransfersOutBase

    # formatter
    # Moved to FInstitutionTransfersOutBase

    # validator
    @validate_with(MT200.MT200_57A_Type)
    def _validate_account_with_institution_57A(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setaccount_with_institution_57A(self, val):
        """sets the value on python object"""
        self.swift_obj.AccountWithInstitution_A = val
        self.swift_obj.AccountWithInstitution_A.swiftTag = "57A"

    # getter
    def account_with_institution_57D(self):
        """ Returns a dictionary as {'account':<value>, 'name':<value>, 'address':<value>} """
        return FCashOutUtils.get_counterpartys_correspondent_details(self.acm_obj)

    # formatter
    def _format_account_with_institution_57D(self, val):
        """Formats the value provided by getter method"""
        account = val.get('ACCOUNT')
        name = val.get('NAME')
        address = val.get('ADDRESS')
        if name and address:
            name = FSwiftWriterUtils.split_text_and_prefix(name, 35)
            address = FSwiftWriterUtils.split_text_and_prefix(address, 35)
            val = FSwiftWriterUtils.allocate_space_for_name_address_without_constraint(name, address)
            if account:
                val = "/" + str(account) + "\n" + str(val)
            return val

    # validator
    @validate_with(MT200.MT200_57D_Type)
    def _validate_account_with_institution_57D(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setaccount_with_institution_57D(self, val):
        """sets the value on python object"""
        self.swift_obj.AccountWithInstitution_D = val
        self.swift_obj.AccountWithInstitution_D.swiftTag = "57D"


class FMT200OutBaseMessageHeader(FSwiftWriterMessageHeader.FSwiftWriterMessageHeader):
    def __init__(self, acm_obj, swift_msg_tags):
        self.mt_typ = "200"
        self.acm_obj = acm_obj
        self.swift_msg_tags = swift_msg_tags

        self.sender_ref_end_char = FSwiftMLUtils.get_character_for_mt_type("MT" + self.mt_typ)
        super(FMT200OutBaseMessageHeader, self).__init__(self.mt_typ, self.acm_obj, swift_msg_tags)

    def message_type(self):
        """returns type of message"""
        return "200"

    def sender_logical_terminal_address(self):
        '''LT code is hardcoded as A for sender'''
        terminal_address = ''
        senders_bic = ''
        senders_bic = FCashOutUtils.get_senders_bic(self.acm_obj)
        if not senders_bic:
            raise Exception("SENDER_BIC is a mandatory field for Swift message header")
        terminal_address = self.logical_terminal_address(senders_bic, "A")
        return terminal_address

    def receiver_logical_terminal_address(self):
        '''LT code is hardcoded as X for sender'''
        receivers_bic = FCashOutUtils.get_receivers_bic(self.acm_obj)
        terminal_address = self.logical_terminal_address(receivers_bic, "X")
        return terminal_address

    def logical_terminal_address(self, bic_code, lt_code):
        """returns logical terminal address"""
        terminal_address = ""
        branch_code = "XXX"
        if bic_code:
            if len(str(bic_code)) == 8:
                terminal_address = str(bic_code) + lt_code + branch_code
            elif len(str(bic_code)) == 11:
                branch_code = bic_code[8:]
                terminal_address = str(bic_code[:8]) + lt_code + branch_code
            else:
                raise Exception("Invalid BIC <%s>)" % bic_code)
        return terminal_address


    def message_user_reference(self):
        '''MUR is sent in the format FAC-SEQNBR of confirmation-VersionID'''
        settlement_prefix = FCashOutUtils.get_settlement_reference_prefix()
        cash_settlement_out_config = FSwiftWriterUtils.get_config_from_fparameter('FCashOut_Config')
        include_tradeno_in_tag_20 = FSwiftMLUtils.incude_trade_no_in_tag20(cash_settlement_out_config)
        val = FSwiftMLUtils.message_user_reference(self.acm_obj, settlement_prefix, True, include_tradeno_in_tag_20)
        val = '{}{}'.format(val, self.sender_ref_end_char)
        return "{108:%s}" %val


class FMT200OutBaseNetworkRules(object):
    """validation of swift message by network rules"""

    def __init__(self, swift_message_obj, swift_message, acm_obj):
        self.swift_message_obj = swift_message_obj
        self.acm_obj = acm_obj
        self.swift_message = swift_message


...

  FMT202COVOut
"""----------------------------------------------------------------------------
MODULE:
    FMT200COVOut

DESCRIPTION:
    This module provides the customizable class for the FMT202COV outgoing implementation

CLASS:
    FMT200COV

VERSION: 3.6.3-0.5.6048
----------------------------------------------------------------------------"""
import MT202COV
import acm
import xml.dom.minidom
from FSwiftMLUtils import accepts

import FMT202COVOutBase
import FSwiftWriterLogger
from FSwiftWriterEngine import validate_with

notifier = FSwiftWriterLogger.FSwiftWriterLogger('CashSetlemnt', 'FCashOutNotify_Config')

@accepts([acm.FSettlement, MT202COV.CTD_ANON, xml.dom.minidom.Document])
class FMT202COV(FMT202COVOutBase.FMT202COVBase):

    def __init__(self, acm_obj, swift_obj):
        super(FMT202COV, self).__init__(acm_obj, swift_obj)

    # To override existing mappings use below methods to write your own logic
    """
    account_with_institution_57A
    account_with_institution_57D
    beneficiary_institution_58A
    beneficiary_institution_58D
    date_currency_amount_32A
    intermediary_56A
    intermediary_56D
    ordering_institution_52A
    ordering_institution_52D
    related_reference_21
    senders_correspondent_53A
    senders_correspondent_53D
    transaction_reference_20
    get_user_data
    """

    """
    To override the options provided, use below methods to write your own logic:-
    methods:- 
    get_ordering_institution_sequenceA_option (Tag-52 options:A/D)
    get_senders_correspondent_option (Tag-53 options:A/D)
    get_intermediary_option (Tag-56 options:A/D)
    get_account_with_institution_sequenceA_option (Tag-57 options:A/D)
    get_beneficiary_institution_option (Tag-58 options:A/D)
    get_ordering_customer_option (Tag-50 options:A/F/K)
    get_ordering_institution_sequenceB_option (Tag-52 options:A/D)
    get_account_with_institution_sequenceB_option (Tag-57 options:A/C/D)
    get_beneficiary_customer_option (Tag-59 options:A/NO OPTION/F)
    
    For example:
    def get_ordering_institution_sequenceA_option(self):
        condition = True
        if condition:
            return 'A'
        else:
            return 'D'

    """

class FMT202COVMessageHeader(FMT202COVOutBase.FMT202COVOutBaseMessageHeader):

    def __init__(self, acm_obj, swift_msg_tags):
        self.acm_obj = acm_obj
        self.swift_msg_tags = swift_msg_tags
        super(FMT202COVMessageHeader, self).__init__(acm_obj, swift_msg_tags)

    # To override existing mappings use below methods to write your own logic

    """
    application_id
    service_id
    sender_logical_terminal_address
    session_number
    sequence_number
    input_or_output
    message_priority
    message_type
    receiver_logical_terminal_address
    delivery_monitoring
    non_delivery_notification_period
    service_identifier
    banking_priority_code
    message_user_reference
    validation_flag
    """


class FMT202COVNetworkRules(FMT202COVOutBase.FMT202COVOutBaseNetworkRules):

    def __init__(self, swift_message_obj, swift_message, acm_obj):
        super(FMT202COVNetworkRules, self).__init__(swift_message_obj, swift_message, acm_obj)


...

  FMT202COVOutBase
"""----------------------------------------------------------------------------
MODULE:
    FMT202COVOutBase

DESCRIPTION:
    This module provides the base class for the FMT202COV outgoing implementation

CLASS:
    FMT200COVBase

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import FSwiftMLUtils
import FSwiftWriterMessageHeader
import MT202COV
import FCashOutUtils
from FInstitutionTransfersOutBase import FInstitutionTransfersOutBase
from FSwiftWriterEngine import validate_with
import uuid
import FSwiftWriterLogger
import FSwiftWriterUtils
import FSwiftGeneralUtils

notifier = FSwiftWriterLogger.FSwiftWriterLogger('CashSetlemnt', 'FCashOutNotify_Config')

from ChineseCommercialCode import CCC_simplified_writer, CCC_traditional_writer

CONFIG_PARAM = FSwiftMLUtils.Parameters('FSwiftWriterConfig')

chinese_language_version = getattr(CONFIG_PARAM, 'ChineseLanguageVersion', None)
if chinese_language_version:
    if chinese_language_version == 'Simplified':
        lookup = CCC_simplified_writer
    if chinese_language_version == 'Traditional':
        lookup = CCC_traditional_writer
else:
    lookup = CCC_simplified_writer


class FMT202COVBase(FInstitutionTransfersOutBase):

    def __init__(self, acm_obj, swift_obj):
        super(FMT202COVBase, self).__init__(acm_obj, swift_obj)
        self.swift_message_type = 'MT202COV'
        self.sender_ref_end_char = FSwiftMLUtils.get_character_for_mt_type(self.swift_message_type)

    # Implementing it to pass the NotImplementedError
    def _message_sequences(self):
        """Sets the sequences on the pyxb object for MT202COV"""
        self.swift_obj.SequenceA_GeneralInformation = MT202COV.MT202COV_SequenceA_GeneralInformation()
        self.swift_obj.SequenceB_UnderlyingCustomerCreditTransferDetails = MT202COV.MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails()

    # getter
    def transaction_reference_20(self):
        """ Returns a dictionary as {'seqnbr':<value>, 'seq_ref':<value>} """
        settlement_prefix = FCashOutUtils.get_settlement_reference_prefix()
        cash_settlement_out_config = FSwiftWriterUtils.get_config_from_fparameter('FCashOut_Config')
        include_tradeno_in_tag_20 = FSwiftMLUtils.incude_trade_no_in_tag20(cash_settlement_out_config)
        val = FSwiftMLUtils.get_sender_ref(self.acm_obj, settlement_prefix, include_tradeno_in_tag_20=include_tradeno_in_tag_20)
        return val

    # formatter
    def _format_transaction_reference_20(self, val):
        sender_ref = FSwiftMLUtils.format_sender_reference(val)
        sender_ref = '{}{}'.format(sender_ref, self.sender_ref_end_char)
        return sender_ref

    # validator
    @validate_with(MT202COV.MT202COV_SequenceA_GeneralInformation_20_Type)
    def _validate_transaction_reference_20(self, val):
        """validates the value provided by formatter method"""
        FCashOutUtils.validate_slash_and_double_slash(val, "Transaction Reference")
        return val

    # setter
    def _set_transaction_reference_20(self, val):
        """sets the value on python object"""
        self.swift_obj.SequenceA_GeneralInformation.TransactionReferenceNumber = val
        self.swift_obj.SequenceA_GeneralInformation.TransactionReferenceNumber.swiftTag = "20"

    # getter
    def related_reference_21(self):
        """ Returns related_reference as String"""

        settlement = self.acm_obj
        related_reference = ''
        try:
            if settlement.ExternalObjects():
                for ext_obj in settlement.ExternalObjects():
                    mt_type = FSwiftMLUtils.FSwiftExternalObject.get_mt_type_from_external_object(ext_obj)
                    mt_msg = FSwiftMLUtils.FSwiftExternalObject.get_stored_data(ext_obj, 'swift_data')
                    if str(mt_type) == 'MT103':
                        related_reference = FSwiftMLUtils.get_field_value(mt_msg, '20')
            else:
                swift_message, mt_py_object, exceptions, getter_values = FSwiftWriterUtils.generate_swift_message(
                    settlement, 'MT103')
                related_reference = FSwiftMLUtils.get_field_value(swift_message, '20')
            return related_reference
        except Exception as e:
            notifier.WARN("Unable to get related reference")
        return 'NONREF'

    # formatter
    def _format_related_reference_21(self, val):
        """Formats the value provided by getter method"""
        return val

    # validator
    @validate_with(MT202COV.MT202COV_SequenceA_GeneralInformation_21_Type)
    def _validate_related_reference_21(self, val):
        """validates the value provided by formatter method"""
        FCashOutUtils.validate_slash_and_double_slash(val, "Related Reference")
        return val

    # setter
    def _set_related_reference_21(self, val):
        """sets the value on python object"""
        self.swift_obj.SequenceA_GeneralInformation.RelatedReference = val
        self.swift_obj.SequenceA_GeneralInformation.RelatedReference.swiftTag = "21"

    # getter
    # Moved to FInstitutionTransfersOutBase

    # formatter
    # Moved to FInstitutionTransfersOutBase

    # validator
    @validate_with(MT202COV.MT202COV_SequenceA_GeneralInformation_32A_Type)
    def _validate_date_currency_amount_32A(self, val):
        """validates the value provided by formatter method"""
        FCashOutUtils.validate_currency_amount(val, "Date Currency Amount")
        amount = FSwiftGeneralUtils.get_amount_from_currency_amount(val)
        FCashOutUtils.validateAmount(amount.replace('.', ','), 15, "Date Currency Amount")
        return val

    # setter
    def _set_date_currency_amount_32A(self, val):
        """sets the value on python object"""
        self.swift_obj.SequenceA_GeneralInformation.DateCurrencyAmount = val
        self.swift_obj.SequenceA_GeneralInformation.DateCurrencyAmount.swiftTag = "32A"

    # option_getter
    def get_ordering_institution_sequenceA_option(self):
        """Returns default option if override is not provided"""
        return 'A'

    # setter
    def _set_OPTION_ordering_institution_sequenceA(self):
        """returns name of the getter method"""
        getter_name = ''
        ordering_institution_option = self.get_ordering_institution_sequenceA_option()
        if ordering_institution_option == 'A':
            getter_name = 'ordering_institution_52A_sequenceA'
        if ordering_institution_option == 'D':
            getter_name = 'ordering_institution_52D_sequenceA'
        return getter_name

    # getter
    def ordering_institution_52A_sequenceA(self):
        """ Returns dictionary as {'ACCOUNT':<value>, 'BIC':<value>}"""
        return FCashOutUtils.get_acquirer_details(self.acm_obj)

    # formatter
    def _format_ordering_institution_52A_sequenceA(self, val):
        """Formats the value provided by getter method"""
        ordering_institution_account = val.get('ACCOUNT')
        ordering_institution_bic = val.get('BIC')
        if ordering_institution_bic:
            if ordering_institution_account:
                val = "/" + str(ordering_institution_account) + "\n" + str(ordering_institution_bic)
            else:
                val = str(ordering_institution_bic)
            return val

    # validator
    @validate_with(MT202COV.MT202COV_SequenceA_GeneralInformation_52A_Type)
    def _validate_ordering_institution_52A_sequenceA(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setordering_institution_52A_sequenceA(self, val):
        """sets the value on python object"""
        self.swift_obj.SequenceA_GeneralInformation.OrderingInstitution_A = val
        self.swift_obj.SequenceA_GeneralInformation.OrderingInstitution_A.swiftTag = "52A"

    # getter
    def ordering_institution_52D_sequenceA(self):
        """ Returns dictionary as {'ACCOUNT':<value>, 'NAME':<value>, 'ADDRESS':<value>}"""
        return FCashOutUtils.get_acquirer_details(self.acm_obj)

    # formatter
    def _format_ordering_institution_52D_sequenceA(self, val):
        """Formats the value provided by getter method"""
        account = val.get('ACCOUNT')
        name = val.get('NAME')
        address = val.get('ADDRESS')

        if name and address:
            name = FSwiftWriterUtils.split_text_and_prefix(name, 35)
            address = FSwiftWriterUtils.split_text_and_prefix(address, 35)
            val = FSwiftWriterUtils.allocate_space_for_name_address_without_constraint(name, address)
            if account:
                val = "/" + str(account) + "\n" + str(val)
            return val

    # validator
    @validate_with(MT202COV.MT202COV_SequenceA_GeneralInformation_52D_Type)
    def _validate_ordering_institution_52D_sequenceA(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setordering_institution_52D_sequenceA(self, val):
        """sets the value on python object"""
        self.swift_obj.SequenceA_GeneralInformation.OrderingInstitution_D = val
        self.swift_obj.SequenceA_GeneralInformation.OrderingInstitution_D.swiftTag = "52D"

    # option_getter
    def get_senders_correspondent_option(self):
        """Returns default option if override is not provided"""
        return 'A'

    # setter
    def _set_OPTION_senders_correspondent(self):
        """returns name of the getter method"""
        getter_name = ''
        senders_correspondent_option = self.get_senders_correspondent_option()
        if senders_correspondent_option == 'A':
            getter_name = 'senders_correspondent_53A'
        if senders_correspondent_option == 'D':
            getter_name = 'senders_correspondent_53D'
        return getter_name

    # getter
    def senders_correspondent_53A(self):
        """ Returns dictionary as {'ACCOUNT':<value>, 'BIC':<value>}"""
        value_dict =  FCashOutUtils.get_acquirer_correpondent_details(self.acm_obj)
        # Account logic is some what different than other message so here again update ACCOUNT in dict.
        value_dict['ACCOUNT'] = self.acm_obj.AcquirerAccountRef().Account()
        return  value_dict

    # formatter
    def _format_senders_correspondent_53A(self, val):
        """Formats the value provided by getter method"""
        senders_correspondent_account = val.get('ACCOUNT')
        senders_correspondent_bic = val.get('BIC')
        if senders_correspondent_bic:
            if senders_correspondent_account:
                val = "/" + str(senders_correspondent_account) + "\n" + str(senders_correspondent_bic)
            else:
                val = str(senders_correspondent_bic)
            return val

    # validator
    @validate_with(MT202COV.MT202COV_SequenceA_GeneralInformation_53A_Type)
    def _validate_senders_correspondent_53A(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setsenders_correspondent_53A(self, val):
        """sets the value on python object"""
        self.swift_obj.SequenceA_GeneralInformation.SendersCorrespondent_A = val
        self.swift_obj.SequenceA_GeneralInformation.SendersCorrespondent_A.swiftTag = "53A"

    # getter
    def senders_correspondent_53D(self):
        """ Returns dictionary as {'ACCOUNT':<value>, 'NAME':<value>, 'ADDRESS':<value>}"""
        value_dict = FCashOutUtils.get_acquirer_correpondent_details(self.acm_obj)
        # Account logic is some what different than other message so here again update ACCOUNT in dict.
        value_dict['ACCOUNT'] = self.acm_obj.AcquirerAccountRef().Account()
        return value_dict

    # formatter
    def _format_senders_correspondent_53D(self, val):
        """Formats the value provided by getter method"""
        account = val.get('ACCOUNT')
        name = val.get('NAME')
        address = val.get('ADDRESS')
        if name and address:
            name = FSwiftWriterUtils.split_text_and_prefix(name, 35)
            address = FSwiftWriterUtils.split_text_and_prefix(address, 35)
            val = FSwiftWriterUtils.allocate_space_for_name_address_without_constraint(name, address)
            if account:
                val = "/" + str(account) + "\n" + str(val)
            return val

    # validator
    @validate_with(MT202COV.MT202COV_SequenceA_GeneralInformation_53D_Type)
    def _validate_senders_correspondent_53D(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setsenders_correspondent_53D(self, val):
        """sets the value on python object"""
        self.swift_obj.SequenceA_GeneralInformation.SendersCorrespondent_D = val
        self.swift_obj.SequenceA_GeneralInformation.SendersCorrespondent_D.swiftTag = "53D"

    # option_getter
    def get_intermediary_option(self):
        """Returns default option if override is not provided"""
        return 'A'

    # setter
    def _set_OPTION_intermediary(self):
        """returns name of the getter method"""
        getter_name = ''
        intermediary_option = self.get_intermediary_option()
        if intermediary_option == 'A':
            getter_name = 'intermediary_56A'
        if intermediary_option == 'D':
            getter_name = 'intermediary_56D'
        return getter_name

    # getter
    # Moved to FInstitutionTransfersOutBase

    # formatter
    # Moved to FInstitutionTransfersOutBase

    # validator
    @validate_with(MT202COV.MT202COV_SequenceA_GeneralInformation_56A_Type)
    def _validate_intermediary_56A(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setintermediary_56A(self, val):
        """sets the value on python object"""
        self.swift_obj.SequenceA_GeneralInformation.Intermedairy_A = val
        self.swift_obj.SequenceA_GeneralInformation.Intermedairy_A.swiftTag = "56A"

    # getter
    def intermediary_56D(self):
        """ Returns dictionary as {'ACCOUNT':<value>, 'NAME':<value>, 'ADDRESS':<value>}"""
        return FCashOutUtils.get_counterpartys_intermediary_details(self.acm_obj)

    # formatter
    def _format_intermediary_56D(self, val):
        """Formats the value provided by getter method"""
        account = val.get('ACCOUNT')
        name = val.get('NAME')
        address = val.get('ADDRESS')

        if name and address:
            name = FSwiftWriterUtils.split_text_and_prefix(name, 35)
            address = FSwiftWriterUtils.split_text_and_prefix(address, 35)
            val = FSwiftWriterUtils.allocate_space_for_name_address_without_constraint(name, address)
            if account:
                val = "/" + str(account) + "\n" + str(val)
            return val

    # validator
    @validate_with(MT202COV.MT202COV_SequenceA_GeneralInformation_56D_Type)
    def _validate_intermediary_56D(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setintermediary_56D(self, val):
        """sets the value on python object"""
        self.swift_obj.SequenceA_GeneralInformation.Intermedairy_D = val
        self.swift_obj.SequenceA_GeneralInformation.Intermedairy_D.swiftTag = "56D"

    # option_getter
    def get_account_with_institution_sequenceA_option(self):
        """Returns default option if override is not provided"""
        return 'A'

    # setter
    def _set_OPTION_account_with_institution_sequenceA(self):
        """returns name of the getter method"""
        getter_name = ''
        account_option = self.get_account_with_institution_sequenceA_option()
        if account_option == 'A':
            getter_name = 'account_with_institution_57A_sequenceA'
        if account_option == 'D':
            getter_name = 'account_with_institution_57D_sequenceA'
        return getter_name

    # getter
    def account_with_institution_57A_sequenceA(self):
        """ Returns a dictionary as {'account':<value>, 'bic':<value>} """
        values_dict = {}
        return FCashOutUtils.get_counterpartys_correspondent_details(self.acm_obj)

    # formatter
    def _format_account_with_institution_57A_sequenceA(self, val):
        """Formats the value provided by getter method"""
        account = val.get('ACCOUNT')
        bic = val.get('BIC')
        if bic:
            val = str(bic)
            if account:
                val = '/' + str(account) + '\n' + str(val)
            return val

    # validator
    @validate_with(MT202COV.MT202COV_SequenceA_GeneralInformation_57A_Type)
    def _validate_account_with_institution_57A_sequenceA(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setaccount_with_institution_57A_sequenceA(self, val):
        """sets the value on python object"""
        self.swift_obj.SequenceA_GeneralInformation.AccountWithInstitution_A = val
        self.swift_obj.SequenceA_GeneralInformation.AccountWithInstitution_A.swiftTag = "57A"

    # getter
    def account_with_institution_57D_sequenceA(self):
        """ Returns dictionary as {'ACCOUNT':<value>, 'NAME':<value>, 'ADDRESS':<value>}"""
        return FCashOutUtils.get_counterpartys_correspondent_details(self.acm_obj)

    # formatter
    def _format_account_with_institution_57D_sequenceA(self, val):
        """Formats the value provided by getter method"""
        account = val.get('ACCOUNT')
        name = val.get('NAME')
        address = val.get('ADDRESS')
        if name and address:
            name = FSwiftWriterUtils.split_text_and_prefix(name, 35)
            address = FSwiftWriterUtils.split_text_and_prefix(address, 35)
            val = FSwiftWriterUtils.allocate_space_for_name_address_without_constraint(name, address)
            if account:
                val = "/" + str(account) + "\n" + str(val)
            return val

    # validator
    @validate_with(MT202COV.MT202COV_SequenceA_GeneralInformation_57D_Type)
    def _validate_account_with_institution_57D_sequenceA(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setaccount_with_institution_57D_sequenceA(self, val):
        """sets the value on python object"""
        self.swift_obj.SequenceA_GeneralInformation.AccountWithInstitution_D = val
        self.swift_obj.SequenceA_GeneralInformation.AccountWithInstitution_D.swiftTag = "57D"

    # option_getter
    def get_beneficiary_institution_option(self):
        """Returns default option if override is not provided"""
        return 'A'

    # setter
    def _set_OPTION_beneficiary_institution(self):
        """returns name of the getter method"""
        getter_name = ''
        beneficiary_option = self.get_beneficiary_institution_option()
        if beneficiary_option == 'A':
            getter_name = 'beneficiary_institution_58A'
        if beneficiary_option == 'D':
            getter_name = 'beneficiary_institution_58D'
        return getter_name

    # getter
    def beneficiary_institution_58A(self):
        """ Returns dictionary as {'ACCOUNT':<value>, 'BIC':<value>}"""
        val = FCashOutUtils.get_counterparty_details(self.acm_obj)
        val['BENEFICIARY_INST_BIC'] = self.__get_beneficiary_inst_bic(self.acm_obj)
        return val

    def __get_beneficiary_inst_bic(self, acm_obj):
        """helper method retuens bic of beneficiary institution"""
        if acm_obj.CounterpartyAccountRef().Bic() and acm_obj.CounterpartyAccountRef().Bic().Alias():
            return acm_obj.CounterpartyAccountRef().Bic().Alias()
        else:
            return ''

    # formatter
    def _format_beneficiary_institution_58A(self, val):
        """Formats the value provided by getter method"""
        account = val.get('ACCOUNT')
        bic = val.get('BENEFICIARY_INST_BIC')
        if bic:
            if account:
                val = "/" + str(account) + "\n" + str(bic)
            else:
                val = str(bic)
            return val

    # validator
    @validate_with(MT202COV.MT202COV_SequenceA_GeneralInformation_58A_Type)
    def _validate_beneficiary_institution_58A(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setbeneficiary_institution_58A(self, val):
        """sets the value on python object"""
        self.swift_obj.SequenceA_GeneralInformation.BeneficiaryInstitution_A = val
        self.swift_obj.SequenceA_GeneralInformation.BeneficiaryInstitution_A.swiftTag = "58A"

    # getter
    def beneficiary_institution_58D(self):
        """ Returns dictionary as {'ACCOUNT':<value>, 'NAME':<value>, 'ADDRESS':<value>}"""
        values_dict = {}
        values_dict = FCashOutUtils.get_counterparty_details(self.acm_obj)
        return values_dict

    # formatter
    def _format_beneficiary_institution_58D(self, val):
        """Formats the value provided by getter method"""
        account = val.get('ACCOUNT')
        name = val.get('NAME')
        address = val.get('ADDRESS')

        temp_name = name
        temp_address = address
        char_set = ''
        lookup_temp = lookup
        try:
            char_set = str(self.acm_obj.Counterparty().AdditionalInfo().TraditionalChinese())
        except Exception as e:
            notifier.WARN("Could not find Additional Info 'TraditionalChinese'.")

        if char_set == 'True':
            lookup_temp = CCC_traditional_writer
        elif char_set == 'False':
            lookup_temp = CCC_simplified_writer

        for key in list(lookup_temp.keys()):
            temp_name = temp_name.replace(str(key), lookup_temp[key] + " ")
            temp_address = temp_address.replace(str(key), lookup_temp[key] + " ")

        if name == temp_name:
            if name and address:
                name = FSwiftWriterUtils.split_text_and_prefix(name, 35)
                address = FSwiftWriterUtils.split_text_and_prefix(address, 35)
                val = FSwiftWriterUtils.allocate_space_for_name_address_without_constraint(name, address)
                if account:
                    val = "/" + str(account) + "\n" + str(val)
                return val
        else:
            name = temp_name
            address = 'ADD. ' + temp_address
            name_and_address = name + address
            split_name_and_address = FSwiftWriterUtils.split_text_logically_on_character_limit(name_and_address, 35)
            val = ('\n').join(split_name_and_address)
            if account:
                val = "/" + str(account) + "\n" + str(val)
            return val

    # validator
    @validate_with(MT202COV.MT202COV_SequenceA_GeneralInformation_58D_Type)
    def _validate_beneficiary_institution_58D(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setbeneficiary_institution_58D(self, val):
        """sets the value on python object"""
        self.swift_obj.SequenceA_GeneralInformation.BeneficiaryInstitution_D = val
        self.swift_obj.SequenceA_GeneralInformation.BeneficiaryInstitution_D.swiftTag = "58D"

    # option_getter
    def get_ordering_customer_option(self):
        """Returns default option if override is not provided"""
        return 'A'

    # setter
    def _set_OPTION_ordering_customer(self):
        """returns name of the getter method"""
        getter_name = ''
        ordering_customer_option = self.get_ordering_customer_option()
        if ordering_customer_option == "A":
            getter_name = 'ordering_customer_50A'
        elif ordering_customer_option == "F":
            getter_name = 'ordering_customer_50F'
        elif ordering_customer_option == "K":
            getter_name = 'ordering_customer_50K'
        else:
            notifier.WARN("%s Option %s is not supported for tag %s. Mapping default option." % (
                self.swift_message_type, str(ordering_customer_option), 'OrderingCustomer_50a'))
            getter_name = 'ordering_customer_50A'  # default
        return getter_name

    # getter
    def ordering_customer_50A(self):
        """ Returns a dictionary as {'ordering_customer_account': value, 'ordering_customer_bic':value} """
        values_dict = {}
        return FCashOutUtils.get_acquirer_details(self.acm_obj)

    # formatter
    def _format_ordering_customer_50A(self, val):
        """Formats the value provided by getter method"""
        ordering_customer_account = val.get('ACCOUNT')
        ordering_customer_bic = val.get('BIC')
        if ordering_customer_bic:
            if ordering_customer_account:
                val = "/" + str(ordering_customer_account) + "\n" + str(ordering_customer_bic)
            else:
                val = str(ordering_customer_bic)
            return val

    # validator

    @validate_with(MT202COV.MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50A_Type)
    def _validate_ordering_customer_50A(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setordering_customer_50A(self, val):
        """sets the value on python object"""
        self.swift_obj.SequenceB_UnderlyingCustomerCreditTransferDetails.OrderingCustomer_A = val
        self.swift_obj.SequenceB_UnderlyingCustomerCreditTransferDetails.OrderingCustomer_A.swiftTag = '50A'

    # getter
    def ordering_customer_50F(self):
        """ Returns a dictionary as {'ordering_customer_account': value, 'ordering_customer_name':value, 'ordering_customer_address':value,
        'ordering_customer_country_code':value, 'ordering_customer_town':value, 'ordering_customer_zipcode':value} """
        values_dict = {}
        return FCashOutUtils.get_acquirer_details(self.acm_obj)

    # formatter
    def _format_ordering_customer_50F(self, val):
        """Formats the value provided by getter method"""
        account = val.get('ACCOUNT')
        name = val.get('NAME')
        address = val.get('ADDRESS')
        country_code = val.get('COUNTRY_CODE')
        town = val.get('TOWN')
        town = '/' + str(town)
        zipcode = val.get('ZIP_CODE')
        zipcode = '/' + str(zipcode)
        name_list, address_list, country_and_town_list = [], [], []

        if name:
            name_list = FSwiftWriterUtils.split_text_and_prefix(str(name), 33, '1/')
        if address:
            address_list = FSwiftWriterUtils.split_text_and_prefix(str(address), 33, '2/')
        if country_code:
            additional_details = str(country_code)
            if town:
                additional_details = additional_details + str(town)
                if zipcode:
                    zipcode = additional_details + str(zipcode)
            country_and_town_list = FSwiftWriterUtils.split_text_and_prefix(
                str(additional_details), 33, '3/')
        value = FSwiftWriterUtils.allocate_space_for_name_and_address_with_constraint(name_list, address_list,
                                                                                      country_and_town_list)
        if account:
            account = '/' + account
            value = account + '\n' + value
        return value

    # validator
    @validate_with(MT202COV.MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50F_Type)
    def _validate_ordering_customer_50F(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setordering_customer_50F(self, val):
        """sets the value on python object"""
        self.swift_obj.SequenceB_UnderlyingCustomerCreditTransferDetails.OrderingCustomer_F = val
        self.swift_obj.SequenceB_UnderlyingCustomerCreditTransferDetails.OrderingCustomer_F.swiftTag = '50F'

    # getter
    def ordering_customer_50K(self):
        """ Returns a dictionary as {'ordering_customer_account': value, 'ordering_customer_name':value, 'ordering_customer_address':value} """
        values_dict = {}
        return FCashOutUtils.get_acquirer_details(self.acm_obj)

    # formatter
    def _format_ordering_customer_50K(self, val):
        """Formats the value provided by getter method"""
        account = val.get('ACCOUNT')
        name = val.get('NAME')
        address = val.get('ADDRESS')

        if name and address:
            name = FSwiftWriterUtils.split_text_and_prefix(name, 35)
            address = FSwiftWriterUtils.split_text_and_prefix(address, 35)
            val = FSwiftWriterUtils.allocate_space_for_name_address_without_constraint(name, address)
            if account:
                val = "/" + str(account) + "\n" + str(val)
            return val

    # validator
    @validate_with(MT202COV.MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50K_Type)
    def _validate_ordering_customer_50K(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setordering_customer_50K(self, val):
        """sets the value on python object"""
        self.swift_obj.SequenceB_UnderlyingCustomerCreditTransferDetails.OrderingCustomer_K = val
        self.swift_obj.SequenceB_UnderlyingCustomerCreditTransferDetails.OrderingCustomer_K.swiftTag = '50K'

    # option_getter
    def get_ordering_institution_sequenceB_option(self):
        """Returns default option if override is not provided"""
        return 'A'

    # setter
    def _set_OPTION_ordering_institution_sequenceB(self):
        """returns name of the getter method"""
        getter_name = ''
        ordering_institution_option = self.get_ordering_institution_sequenceB_option()
        if ordering_institution_option == "A":
            getter_name = 'ordering_institution_52A'
        elif ordering_institution_option == "D":
            getter_name = 'ordering_institution_52D'
        else:
            notifier.WARN("%s Option %s is not supported for tag %s. Mapping default option." % (
                self.swift_message_type, str(ordering_institution_option), 'OrderingInstitution_52a'))
            getter_name = 'ordering_institution_52A'  # default
        return getter_name

    # getter
    def ordering_institution_52A(self):
        """ Returns a dictionary as {'ordering_institution_account': value, 'ordering_institution_bic':value} """
        values_dict = {}
        values_dict = FCashOutUtils.get_acquirer_details(self.acm_obj)
        return values_dict

    # formatter
    def _format_ordering_institution_52A(self, val):
        """Formats the value provided by getter method"""
        ordering_institution_account = val.get('ACCOUNT')
        ordering_institution_bic = val.get('BIC')
        if ordering_institution_bic:
            if ordering_institution_account:
                val = "/" + str(ordering_institution_account) + "\n" + str(ordering_institution_bic)
            else:
                val = str(ordering_institution_bic)
            return val

    # validator
    @validate_with(MT202COV.MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_52A_Type_Pattern)
    def _validate_ordering_institution_52A(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setordering_institution_52A(self, val):
        """sets the value on python object"""
        self.swift_obj.SequenceB_UnderlyingCustomerCreditTransferDetails.OrderingInstitution_A = val
        self.swift_obj.SequenceB_UnderlyingCustomerCreditTransferDetails.OrderingInstitution_A.swiftTag = '52A'

    # getter
    def ordering_institution_52D(self):
        """ Returns a dictionary as {'ordering_institution_account': value, 'ordering_institution_bic':value, 'ordering_institution_address':value} """
        values_dict = {}
        return FCashOutUtils.get_acquirer_details(self.acm_obj)

    # formatter
    def _format_ordering_institution_52D(self, val):
        """Formats the value provided by getter method"""
        account = val.get('ACCOUNT')
        name = val.get('NAME')
        address = val.get('ADDRESS')
        if name and address:
            name = FSwiftWriterUtils.split_text_and_prefix(name, 35)
            address = FSwiftWriterUtils.split_text_and_prefix(address, 35)
            val = FSwiftWriterUtils.allocate_space_for_name_address_without_constraint(name, address)
            if account:
                val = "/" + str(account) + "\n" + str(val)
            return val

    # validator
    @validate_with(MT202COV.MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_52D_Type)
    def _validate_ordering_institution_52D(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setordering_institution_52D(self, val):
        """sets the value on python object"""
        self.swift_obj.SequenceB_UnderlyingCustomerCreditTransferDetails.OrderingInstitution_D = val
        self.swift_obj.SequenceB_UnderlyingCustomerCreditTransferDetails.OrderingInstitution_D.swiftTag = '52D'

    # option_getter
    def get_account_with_institution_sequenceB_option(self):
        """Returns default option if override is not provided"""
        return 'A'

    # Setter
    def _set_OPTION_account_with_institution_sequenceB(self):
        """returns name of the getter method"""
        getter_name = ''
        account_with_institution_option = self.get_account_with_institution_sequenceB_option()
        if account_with_institution_option == "A":
            getter_name = 'account_with_institution_57A_sequenceB'
        elif account_with_institution_option == "C":
            getter_name = 'account_with_institution_57C_sequenceB'
        elif account_with_institution_option == "D":
            getter_name = 'account_with_institution_57D_sequenceB'
        else:
            notifier.WARN("%s Option %s is not supported for tag %s. Mapping default option." % (
                self.swift_message_type, str(account_with_institution_option), 'AccountWithInstitution_57a'))
            getter_name = 'account_with_institution_57A'  # default
        return getter_name

    # getter
    def account_with_institution_57A_sequenceB(self):
        """ Returns a dictionary as {'account':<value>, 'bic':<value>} """
        values_dict = {}
        return FCashOutUtils.get_counterpartys_correspondent_details(self.acm_obj)

    # formatter
    def _format_account_with_institution_57A_sequenceB(self, val):
        """Formats the value provided by getter method"""
        account = val.get('ACCOUNT')
        bic = val.get('BIC')
        if bic:
            val = str(bic)
            if account:
                val = '/' + str(account) + '\n' + str(val)
            return val

    # validator
    @validate_with(MT202COV.MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57A_Type_Pattern)
    def _validate_account_with_institution_57A_sequenceB(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setaccount_with_institution_57A_sequenceB(self, val):
        """sets the value on python object"""
        self.swift_obj.SequenceB_UnderlyingCustomerCreditTransferDetails.AccountWithInstitution_A = val
        self.swift_obj.SequenceB_UnderlyingCustomerCreditTransferDetails.AccountWithInstitution_A.swiftTag = '57A'

    # getter
    def account_with_institution_57C_sequenceB(self):
        """ Returns a account_with_institution as string """
        account_with_institution_account = self.acm_obj.CounterpartyAccountRef().Account2()  # get_account_with_institution_account(self.acm_obj)
        return account_with_institution_account

    # formatter
    def _format_account_with_institution_57C_sequenceB(self, val):
        """Formats the value provided by getter method"""
        if val:
            val = "/" + str(val)
            return val

    # validator
    @validate_with(MT202COV.MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57C_Type)
    def _validate_account_with_institution_57C_sequenceB(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setaccount_with_institution_57C_sequenceB(self, val):
        """sets the value on python object"""
        self.swift_obj.SequenceB_UnderlyingCustomerCreditTransferDetails.AccountWithInstitution_C = val
        self.swift_obj.SequenceB_UnderlyingCustomerCreditTransferDetails.AccountWithInstitution_C.swiftTag = '57C'

    # getter
    def account_with_institution_57D_sequenceB(self):
        """ Returns a dictionary as {'account_with_institution_account': value, 'account_with_institution_name':value, 'account_with_institution_address':value} """
        values_dict = {}
        return FCashOutUtils.get_counterpartys_correspondent_details(self.acm_obj)

    # formatter
    def _format_account_with_institution_57D_sequenceB(self, val):
        """Formats the value provided by getter method"""
        account = val.get('ACCOUNT')
        name = val.get('NAME')
        address = val.get('ADDRESS')
        if name and address:
            name = FSwiftWriterUtils.split_text_and_prefix(name, 35)
            address = FSwiftWriterUtils.split_text_and_prefix(address, 35)
            val = FSwiftWriterUtils.allocate_space_for_name_address_without_constraint(name, address)
            if account:
                val = "/" + str(account) + "\n" + str(val)
            return val

    # validator
    @validate_with(MT202COV.MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57D_Type)
    def _validate_account_with_institution_57D_sequenceB(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setaccount_with_institution_57D_sequenceB(self, val):
        """sets the value on python object"""
        self.swift_obj.SequenceB_UnderlyingCustomerCreditTransferDetails.AccountWithInstitution_D = val
        self.swift_obj.SequenceB_UnderlyingCustomerCreditTransferDetails.AccountWithInstitution_D.swiftTag = '57D'

    # option_getter
    def get_beneficiary_customer_option(self):
        """Returns default option if override is not provided"""
        return 'A'

    # Setter
    def _set_OPTION_beneficiary_customer(self):
        """returns name of the getter method"""
        getter_name = ''
        beneficiary_customer_option = self.get_beneficiary_customer_option()
        if beneficiary_customer_option == "A":
            getter_name = 'beneficiary_customer_59A'
        elif beneficiary_customer_option == "NO OPTION":
            getter_name = 'beneficiary_customer_no_option_59'
        elif beneficiary_customer_option == "F":
            getter_name = 'beneficiary_customer_59F'
        else:
            notifier.WARN("%s Option %s is not supported for tag %s. Mapping default option." % (
                self.swift_message_type, str(beneficiary_customer_option), 'BeneficiaryCustomer_59a'))
            getter_name = 'beneficiary_customer_59A'  # default
        return getter_name

    # getter
    def beneficiary_customer_59A(self):
        """ Returns a dictionary as {'beneficiary_customer_account': value, 'beneficiary_customer_bic':value} """
        values_dict = {}
        return FCashOutUtils.get_counterparty_details(self.acm_obj)

    # formatter
    def _format_beneficiary_customer_59A(self, val):
        """Formats the value provided by getter method"""
        beneficiary_customer_account = val.get('ACCOUNT')
        beneficiary_customer_bic = val.get('BIC')
        if beneficiary_customer_bic:
            if beneficiary_customer_account:
                val = "/" + str(beneficiary_customer_account) + "\n" + str(beneficiary_customer_bic)
            else:
                val = str(beneficiary_customer_bic)
            return val

    # validator
    @validate_with(MT202COV.MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59A_Type_Pattern)
    def _validate_beneficiary_customer_59A(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setbeneficiary_customer_59A(self, val):
        """sets the value on python object"""
        self.swift_obj.SequenceB_UnderlyingCustomerCreditTransferDetails.BeneficiaryCustomer_A = val
        self.swift_obj.SequenceB_UnderlyingCustomerCreditTransferDetails.BeneficiaryCustomer_A.swiftTag = '59A'

    # getter
    def beneficiary_customer_no_option_59(self):
        """ Returns a dictionary as {'beneficiary_customer_account': value, 'beneficiary_customer_name':value, 'beneficiary_customer_address':value} """
        values_dict = {}
        return FCashOutUtils.get_counterparty_details(self.acm_obj)

    # formatter
    def _format_beneficiary_customer_no_option_59(self, val):
        """Formats the value provided by getter method"""
        account = val.get('ACCOUNT')
        name = val.get('NAME')
        address = val.get('ADDRESS')

        if name and address:
            name = FSwiftWriterUtils.split_text_and_prefix(name, 35)
            address = FSwiftWriterUtils.split_text_and_prefix(address, 35)
            val = FSwiftWriterUtils.allocate_space_for_name_address_without_constraint(name, address)
            if account:
                val = "/" + str(account) + "\n" + str(val)
            return val

    # validator
    @validate_with(MT202COV.MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59_Type)
    def _validate_beneficiary_customer_no_option_59(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setbeneficiary_customer_no_option_59(self, val):
        """sets the value on python object"""
        self.swift_obj.SequenceB_UnderlyingCustomerCreditTransferDetails.BeneficiaryCustomer = val
        self.swift_obj.SequenceB_UnderlyingCustomerCreditTransferDetails.BeneficiaryCustomer.swiftTag = '59'

    # getter
    def beneficiary_customer_59F(self):
        """ Returns a dictionary as {'beneficiary_customer_account': value, 'beneficiary_customer_name':value, 'beneficiary_customer_address':value,
        'beneficiary_customer_country_code':value, 'beneficiary_customer_town':value} """
        values_dict = {}
        return FCashOutUtils.get_counterparty_details(self.acm_obj)

    # formatter
    def _format_beneficiary_customer_59F(self, val):
        """Formats the value provided by getter method"""
        account = val.get('ACCOUNT')
        name = val.get('NAME')
        address = val.get('ADDRESS')
        country_code = val.get('COUNTRY_CODE')
        town = val.get('TOWN')
        name_list, address_list, country_and_town_list = [], [], []

        if name:
            name_list = FSwiftWriterUtils.split_text_and_prefix(str(name), 33, '1/')
        if address:
            address_list = FSwiftWriterUtils.split_text_and_prefix(str(address), 33, '2/')
        if country_code:
            additional_details = str(country_code)
            if town:
                additional_details = str(additional_details) + '/' + str(town)
            country_and_town_list = FSwiftWriterUtils.split_text_and_prefix(
                str(additional_details), 33, '3/')
        value = FSwiftWriterUtils.allocate_space_for_name_and_address_with_constraint(name_list, address_list,
                                                                                      country_and_town_list)
        if account:
            account = '/' + str(account)
            value = account + '\n' + value
        return value

    # validator
    @validate_with(MT202COV.MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59F_Type)
    def _validate_beneficiary_customer_59F(self, val,
                                           swift_tag_obj=MT202COV.MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59F_Type):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setbeneficiary_customer_59F(self, val):
        """sets the value on python object"""
        self.swift_obj.SequenceB_UnderlyingCustomerCreditTransferDetails.BeneficiaryCustomer_F = val
        self.swift_obj.SequenceB_UnderlyingCustomerCreditTransferDetails.BeneficiaryCustomer_F.swiftTag = '59F'

    # getter
    def remittance_information_70(self):
        """ Returns a remittance_information as string """
        remittance_info = self.get_remittance_info(self.acm_obj)
        return remittance_info

    # formatter
    def _format_remittance_information_70(self, val):
        """Formats the value provided by getter method"""
        val = val.replace('newline', '\n')
        return str(val)

    # validator
    @validate_with(MT202COV.MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_70_Type_Pattern)
    def _validate_remittance_information_70(self, val):
        """validates the value provided by formatter method"""
        FCashOutUtils.validate_remittance_info(val)
        return val

    # setter
    def _set_remittance_information_70(self, val):
        """sets the value on python object"""
        self.swift_obj.SequenceB_UnderlyingCustomerCreditTransferDetails.RemittanceInformation = val
        self.swift_obj.SequenceB_UnderlyingCustomerCreditTransferDetails.RemittanceInformation.swiftTag = '70'

    # getter
    def instructed_amount_33B(self):
        """ Returns a dictionary as {'instructed_amount': value, 'currency':value} """
        values_dict = {}
        instructed_amount = self.acm_obj.Amount()
        currency = self.acm_obj.Currency().Name()
        values_dict['instructed_amount'] = instructed_amount
        values_dict['currency'] = currency
        return values_dict

    # formatter
    def _format_instructed_amount_33B(self, val):
        """Formats the value provided by getter method"""
        instructed_amount = val.get('instructed_amount')
        currency = val.get('currency')
        if instructed_amount and currency:
            instructed_amount = FCashOutUtils.apply_currency_precision(currency, abs(float(instructed_amount)))
            val = str(currency) + str(FSwiftMLUtils.float_to_swiftmt(str(instructed_amount)))
            return val

    # validator
    @validate_with(MT202COV.MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_33B_Type_Pattern)
    def _validate_instructed_amount_33B(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _set_instructed_amount_33B(self, val):
        """sets the value on python object"""
        self.swift_obj.SequenceB_UnderlyingCustomerCreditTransferDetails.CurrencyInstructedAmount = val
        self.swift_obj.SequenceB_UnderlyingCustomerCreditTransferDetails.CurrencyInstructedAmount.swiftTag = "33B"

    def get_remittance_info(self, settlement):
        ''' Optional field 70 '''

        trade = settlement.Trade()
        instrument = settlement.Instrument()
        YOUR_REF = 'Your reference:'
        OUR_REF = 'Our reference:'
        code = '/INV/'
        newline = 'newline'
        info = []
        info.append(code)
        info.append(newline)
        if instrument:
            info.append('Instrument:')
            info.append(instrument.Name())
        info.append(newline)
        info.append(OUR_REF)
        if trade:
            info.append(str(trade.Oid()))
        info.append(newline)
        info.append(YOUR_REF)
        info.append(FCashOutUtils.get_your_ref(settlement))
        info = ''.join(info)
        return info

    def format_MT202COV_field70(self, val, character_limit, n_lines):
        """helper method returns formatted form of input provided"""
        text = []
        val = val.split('newline')
        for values in val:
            line = FSwiftWriterUtils.split_text_on_character_limit(values, character_limit)
            text.append(line)
        text = '\n'.join(str(i) for sub_list in text for i in sub_list)
        text = '\n'.join(text.split('\n')[:n_lines])
        return text


class FMT202COVOutBaseMessageHeader(FSwiftWriterMessageHeader.FSwiftWriterMessageHeader):
    def __init__(self, acm_obj, swift_msg_tags):
        self.mt_typ = "202COV"
        self.acm_obj = acm_obj
        self.swift_msg_tags = swift_msg_tags
        self.sender_ref_end_char = FSwiftMLUtils.get_character_for_mt_type('MT' + self.mt_typ)
        super(FMT202COVOutBaseMessageHeader, self).__init__(self.mt_typ, self.acm_obj, swift_msg_tags)

    def message_type(self):
        """returns type of message"""
        return "202"

    def sender_logical_terminal_address(self):
        '''LT code is hardcoded as A for sender'''
        senders_bic = FCashOutUtils.get_senders_bic(self.acm_obj)
        if not senders_bic:
            raise Exception("SENDER_BIC is a mandatory field for Swift message header")
        terminal_address = self.logical_terminal_address(senders_bic, "A")
        return terminal_address

    def receiver_logical_terminal_address(self):
        '''LT code is hardcoded as X for sender'''
        receivers_bic = FCashOutUtils.get_receivers_bic(self.acm_obj)
        terminal_address = self.logical_terminal_address(receivers_bic, "X")
        return terminal_address

    def logical_terminal_address(self, bic_code, lt_code):
        """returns logical terminal address"""
        terminal_address = ""
        branch_code = "XXX"
        if bic_code:
            if len(str(bic_code)) == 8:
                terminal_address = str(bic_code) + lt_code + branch_code
            elif len(str(bic_code)) == 11:
                branch_code = bic_code[8:]
                terminal_address = str(bic_code[:8]) + lt_code + branch_code
            else:
                raise Exception("Invalid BIC <%s>)" % bic_code)
        return terminal_address

    def message_user_reference(self):
        '''MUR is sent in the format FAC-SEQNBR of confirmation-VersionID'''
        settlement_prefix = FCashOutUtils.get_settlement_reference_prefix()
        cash_settlement_out_config = FSwiftWriterUtils.get_config_from_fparameter('FCashOut_Config')
        include_tradeno_in_tag_20 = FSwiftMLUtils.incude_trade_no_in_tag20(cash_settlement_out_config)
        sender_ref = FSwiftMLUtils.message_user_reference(self.acm_obj, settlement_prefix, include_tradeno_in_tag_20=include_tradeno_in_tag_20)
        sender_ref = '{}{}'.format(sender_ref, self.sender_ref_end_char)

        return "{108:%s}" % sender_ref


    def service_identifier(self):
        """returns service type identifier"""
        service_code = FCashOutUtils.get_swift_service_code(self.acm_obj)
        if service_code:
            return "{103:%s}" % service_code
        return ''

    def banking_priority_code(self):
        """returns banking priority code"""
        banking_priority = FCashOutUtils.get_banking_priority(self.acm_obj)
        if banking_priority:
            return "{113:%s}" % str(banking_priority)
        return ''

    def UETR(self):
        """returns UETR"""
        # ref_no = uuid.uuid4()
        # return "{121:%s}" % (ref_no)
        settlement = self.acm_obj
        try:
            ext_obj = FSwiftMLUtils.FSwiftExternalObject.get_external_object(acm_obj=settlement, msg_typ='MT103',
                                                                             integration_type='Outgoing')
            if ext_obj:
                mt_msg = FSwiftMLUtils.FSwiftExternalObject.get_stored_data(ext_obj, 'swift_data')
                temp_mt_msg = mt_msg
                index = temp_mt_msg.find('{121:')
                ref_no = temp_mt_msg[index + 5:index + 41]
                return "{121:%s}" % (ref_no)
        except Exception as e:
            notifier.WARN("Unable to get UETR")

    def gpi_id(self):
        """returns gpi id"""
        gpi_identifier = FCashOutUtils.get_gpi_identifier(self.acm_obj)
        if gpi_identifier:
            return "{111:%s}" % str(gpi_identifier)

    def validation_flag(self):
        """returns validation flag"""
        return '{119:COV}'


class FMT202COVOutBaseNetworkRules(object):
    """validation of swift message by network rules"""

    def __init__(self, swift_message_obj, swift_message, acm_obj):
        self.swift_message_obj = swift_message_obj
        self.swift_message = swift_message
        self.acm_obj = acm_obj

    def network_rule_C1(self):
        ''' In sequence A, If field 56a is present, then field 57a must also be present'''
        is_field_56a_present = self.swift_message_obj.SequenceA_GeneralInformation.Intermedairy_A or self.swift_message_obj.SequenceA_GeneralInformation.Intermedairy_D
        is_field_57a_present = self.swift_message_obj.SequenceA_GeneralInformation.AccountWithInstitution_A or self.swift_message_obj.SequenceA_GeneralInformation.AccountWithInstitution_D or self.swift_message_obj.SequenceA_GeneralInformation.AccountWithInstitution_B
        if is_field_56a_present:
            if not is_field_57a_present:
                return 'If field 56a is present in sequence A, then field 57a must also be present in sequence A'
        return ''

    """
    def network_rule_C2(self):
        ''' In sequence B, If field 56a is present, then field 57a must also be present'''
        is_field_56a_present = self.swift_message_obj.SequenceB_UnderlyingCustomerCreditTransferDetails.Intermedairy_A or self.swift_message_obj.SequenceB_UnderlyingCustomerCreditTransferDetails.Intermedairy_D
        is_field_57a_present = self.swift_message_obj.SequenceB_UnderlyingCustomerCreditTransferDetails.AccountWithInstitution_A or self.swift_message_obj.SequenceB_UnderlyingCustomerCreditTransferDetails.AccountWithInstitution_D or self.swift_message_obj.SequenceB_UnderlyingCustomerCreditTransferDetails.AccountWithInstitution_B
        if is_field_56a_present:
            if not is_field_57a_present:
                return 'If field 56a is present in sequence B, then field 57a must also be present in sequence B'
        return ''
    """


...

  FMT202Out
"""----------------------------------------------------------------------------
MODULE:
    FMT202Out

DESCRIPTION:
    This module provides the customizable class for the FMT202 outgoing implementation

CLASS:
    FMT202

VERSION: 3.6.3-0.5.6048
----------------------------------------------------------------------------"""
import MT202
import acm
import xml.dom.minidom
from FSwiftMLUtils import accepts

import FMT202OutBase
import FSwiftWriterLogger
from FSwiftWriterEngine import validate_with

notifier = FSwiftWriterLogger.FSwiftWriterLogger('CashSetlemnt', 'FCashOutNotify_Config')

@accepts([acm.FSettlement, MT202.CTD_ANON, xml.dom.minidom.Document])
class FMT202(FMT202OutBase.FMT202Base):

    def __init__(self, acm_obj, swift_obj):
        super(FMT202, self).__init__(acm_obj, swift_obj)

    # To override existing mappings use below methods to write your own logic
    """
    account_with_institution_57A
    account_with_institution_57D
    beneficiary_institution_58A
    beneficiary_institution_58D
    date_currency_amount_32A
    intermediary_56A
    intermediary_56D
    ordering_institution_52A
    ordering_institution_52D
    related_reference_21
    senders_correspondent_53A
    senders_correspondent_53D
    transaction_reference_20
    get_user_data
    """
    """
    To override the options provided, use below methods to write your own logic:-
    methods:- 
    get_ordering_institution_option (Tag-52 options:A/D)
    get_senders_correspondent_option (Tag-53 options:A/D)
    get_intermediary_option (Tag-56 options:A/D)
    get_account_with_institution_option (Tag-57 options:A/D)
    get_beneficiary_institution_option (Tag-58 options:A/D)
    
    For example:
    def get_ordering_institution_option(self):
        condition = True
        if condition:
            return 'A'
        else:
            return 'D'

    """

class FMT202MessageHeader(FMT202OutBase.FMT202OutBaseMessageHeader):

    def __init__(self, acm_obj, swift_msg_tags):
        self.acm_obj = acm_obj
        self.swift_msg_tags = swift_msg_tags
        super(FMT202MessageHeader, self).__init__(acm_obj, swift_msg_tags)

    # To override existing mappings use below methods to write your own logic

    """
    application_id
    service_id
    sender_logical_terminal_address
    session_number
    sequence_number
    input_or_output
    message_priority
    message_type
    receiver_logical_terminal_address
    delivery_monitoring
    non_delivery_notification_period
    service_identifier
    banking_priority_code
    message_user_reference
    validation_flag
    """


class FMT202NetworkRules(FMT202OutBase.FMT202OutBaseNetworkRules):

    def __init__(self, swift_message_obj, swift_message, acm_obj):
        super(FMT202NetworkRules, self).__init__(swift_message_obj, swift_message, acm_obj)



...

  FMT202OutBase
"""----------------------------------------------------------------------------
MODULE:
    FMT202OutBase

DESCRIPTION:
    This module provides the base class for the FMT202 outgoing implementation

CLASS:
    FMT200Base

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import FSwiftMLUtils
import FSwiftWriterMessageHeader
import MT202
import FCashOutUtils
from FInstitutionTransfersOutBase import FInstitutionTransfersOutBase
from FSwiftWriterEngine import validate_with
import uuid
import FSwiftWriterLogger
import FSwiftWriterUtils
import FSwiftGeneralUtils

notifier = FSwiftWriterLogger.FSwiftWriterLogger('CashSetlemnt', 'FCashOutNotify_Config')

from ChineseCommercialCode import CCC_simplified_writer, CCC_traditional_writer

CONFIG_PARAM = FSwiftMLUtils.Parameters('FSwiftWriterConfig')

chinese_language_version = getattr(CONFIG_PARAM, 'ChineseLanguageVersion', None)
if chinese_language_version:
    if chinese_language_version == 'Simplified':
        lookup = CCC_simplified_writer
    if chinese_language_version == 'Traditional':
        lookup = CCC_traditional_writer
else:
    lookup = CCC_simplified_writer

class FMT202Base(FInstitutionTransfersOutBase):

    def __init__(self, acm_obj, swift_obj):
        super(FMT202Base, self).__init__(acm_obj, swift_obj)
        self.swift_message_type = 'MT202'
        self.sender_ref_end_char = FSwiftMLUtils.get_character_for_mt_type(self.swift_message_type)

    # Implementing it to pass the NotImplementedError
    def _message_sequences(self):
        pass

    # getter
    # Moved to FInstitutionTransfersOutBase

    # formatter
    # Moved to FInstitutionTransfersOutBase


    # validator
    @validate_with(MT202.MT202_20_Type)
    def _validate_transaction_reference_20(self, transaction_reference):
        """validates the value provided by formatter method"""
        FCashOutUtils.validate_slash_and_double_slash(transaction_reference, "Transaction Reference")
        return transaction_reference

    # setter
    def _set_transaction_reference_20(self, transaction_reference):
        """sets the value on python object"""
        self.swift_obj.TransactionReferenceNumber = transaction_reference
        self.swift_obj.TransactionReferenceNumber.swiftTag = "20"

    # getter
    def related_reference_21(self):
        """ Returns related_reference as String"""
        return FCashOutUtils.get_your_ref(self.acm_obj)

    # formatter
    def _format_related_reference_21(self, related_reference):
        """Formats the value provided by getter method"""
        return related_reference

    # validator
    @validate_with(MT202.MT202_21_Type)
    def _validate_related_reference_21(self, related_reference):
        """validates the value provided by formatter method"""
        FCashOutUtils.validate_slash_and_double_slash(related_reference, "Related Reference")
        return related_reference

    # setter
    def _set_related_reference_21(self, related_reference):
        """sets the value on python object"""
        self.swift_obj.RelatedReference = related_reference
        self.swift_obj.RelatedReference.swiftTag = "21"

    # getter
    # Moved to FInstitutionTransfersOutBase

    # formatter
    # Moved to FInstitutionTransfersOutBase

    # validator
    @validate_with(MT202.MT202_32A_Type)
    def _validate_date_currency_amount_32A(self, date_currency_amount):
        """validates the value provided by formatter method"""
        FCashOutUtils.validate_currency_amount(date_currency_amount, "Date Currency Amount")
        amount = FSwiftGeneralUtils.get_amount_from_currency_amount(date_currency_amount)
        FCashOutUtils.validateAmount(amount.replace('.', ','), 15, "Date Currency Amount")
        return date_currency_amount

    # setter
    def _set_date_currency_amount_32A(self, date_currency_amount):
        """sets the value on python object"""
        self.swift_obj.ValueDateCurrencyCodeAmount = date_currency_amount
        self.swift_obj.ValueDateCurrencyCodeAmount.swiftTag = "32A"

    # option_getter
    def get_ordering_institution_option(self):
        """Returns default option if override is not provided"""
        return 'A'

    # setter
    def _set_OPTION_ordering_institution(self):
        """returns name of the getter method"""
        getter_name = ''
        ordering_institution_option = self.get_ordering_institution_option()
        if ordering_institution_option == 'A':
            getter_name = 'ordering_institution_52A'
        if ordering_institution_option == 'D':
            getter_name = 'ordering_institution_52D'
        return getter_name

    # getter
    def ordering_institution_52A(self):
        """ Returns dictionary as {'ACCOUNT':<value>, 'BIC':<value>}"""
        return FCashOutUtils.get_acquirer_details(self.acm_obj)

    # formatter
    def _format_ordering_institution_52A(self, ord_inst_details):
        """Formats the value provided by getter method"""
        ordering_institution_account = ord_inst_details.get('ACCOUNT')
        ordering_institution_bic = ord_inst_details.get('BIC')
        if ordering_institution_bic:
            if ordering_institution_account:
                ordering_inst_value = "/" + str(ordering_institution_account) + "\n" + str(ordering_institution_bic)
            else:
                ordering_inst_value = str(ordering_institution_bic)
            return ordering_inst_value

    # validator
    @validate_with(MT202.MT202_52A_Type)
    def _validate_ordering_institution_52A(self, ordering_inst_value):
        """validates the value provided by formatter method"""
        return ordering_inst_value

    # setter
    def _setordering_institution_52A(self, ordering_inst_value):
        """sets the value on python object"""
        self.swift_obj.OrderingInstitution_A = ordering_inst_value
        self.swift_obj.OrderingInstitution_A.swiftTag = "52A"

    # getter
    def ordering_institution_52D(self):
        """ Returns dictionary as {'ACCOUNT':<value>, 'NAME':<value>, 'ADDRESS':<value>}"""
        return FCashOutUtils.get_acquirer_details(self.acm_obj)

    # formatter
    def _format_ordering_institution_52D(self, ord_inst_details):
        """Formats the value provided by getter method"""
        account = ord_inst_details.get('ACCOUNT')
        name = ord_inst_details.get('NAME')
        address = ord_inst_details.get('ADDRESS')

        if name and address:
            name = FSwiftWriterUtils.split_text_and_prefix(name, 35)
            address = FSwiftWriterUtils.split_text_and_prefix(address, 35)
            ordering_inst_value = FSwiftWriterUtils.allocate_space_for_name_address_without_constraint(name, address)
            if account:
                ordering_inst_value = "/" + str(account) + "\n" + str(ordering_inst_value)
            return ordering_inst_value

    # validator
    @validate_with(MT202.MT202_52D_Type)
    def _validate_ordering_institution_52D(self, ordering_inst_value):
        """validates the value provided by formatter method"""
        return ordering_inst_value

    # setter
    def _setordering_institution_52D(self, ordering_inst_value):
        """sets the value on python object"""
        self.swift_obj.OrderingInstitution_D = ordering_inst_value
        self.swift_obj.OrderingInstitution_D.swiftTag = "52D"

    # option_getter
    def get_senders_correspondent_option(self):
        """Returns default option if override is not provided"""
        return 'A'

    # setter
    def _set_OPTION_senders_correspondent(self):
        """returns name of the getter method"""
        getter_name = ''
        senders_correspondent_option = self.get_senders_correspondent_option()
        if senders_correspondent_option == 'A':
            getter_name = 'senders_correspondent_53A'
        if senders_correspondent_option == 'D':
            getter_name = 'senders_correspondent_53D'
        return getter_name

    # getter
    def senders_correspondent_53A(self):
        """ Returns dictionary as {'ACCOUNT':<value>, 'BIC':<value>}"""
        value_dict = FCashOutUtils.get_acquirer_correpondent_details(self.acm_obj)
        return value_dict

    # formatter
    def _format_senders_correspondent_53A(self, sender_corr_details):
        """Formats the value provided by getter method"""
        senders_correspondent_account = sender_corr_details.get('ACCOUNT')
        senders_correspondent_bic = sender_corr_details.get('BIC')
        if senders_correspondent_bic:
            if senders_correspondent_account:
                sender_corr = "/" + str(senders_correspondent_account) + "\n" + str(senders_correspondent_bic)
            else:
                sender_corr = str(senders_correspondent_bic)
            return sender_corr

    # validator
    @validate_with(MT202.MT202_53A_Type)
    def _validate_senders_correspondent_53A(self, sender_corr):
        """validates the value provided by formatter method"""
        return sender_corr

    # setter
    def _setsenders_correspondent_53A(self, sender_corr):
        """sets the value on python object"""
        self.swift_obj.SendersCorrespondent_A = sender_corr
        self.swift_obj.SendersCorrespondent_A.swiftTag = "53A"

    # getter
    def senders_correspondent_53D(self):
        """ Returns dictionary as {'ACCOUNT':<value>, 'NAME':<value>, 'ADDRESS':<value>}"""
        return FCashOutUtils.get_acquirer_correpondent_details(self.acm_obj)

    # formatter
    def _format_senders_correspondent_53D(self, sender_corr_details):
        """Formats the value provided by getter method"""
        account = sender_corr_details.get('ACCOUNT')
        name = sender_corr_details.get('NAME')
        address = sender_corr_details.get('ADDRESS')
        if name and address:
            name = FSwiftWriterUtils.split_text_and_prefix(name, 35)
            address = FSwiftWriterUtils.split_text_and_prefix(address, 35)
            sender_corr = FSwiftWriterUtils.allocate_space_for_name_address_without_constraint(name, address)
            if account:
                sender_corr = "/" + str(account) + "\n" + str(sender_corr)
            return sender_corr

    # validator
    @validate_with(MT202.MT202_53D_Type)
    def _validate_senders_correspondent_53D(self, sender_corr):
        """validates the value provided by formatter method"""
        return sender_corr

    # setter
    def _setsenders_correspondent_53D(self, sender_corr):
        """sets the value on python object"""
        self.swift_obj.SendersCorrespondent_D = sender_corr
        self.swift_obj.SendersCorrespondent_D.swiftTag = "53D"

    # option_getter
    def get_intermediary_option(self):
        """Returns default option if override is not provided"""
        return 'A'

    # setter
    def _set_OPTION_intermediary(self):
        """returns name of the getter method"""
        getter_name = ''
        intermediary_option = self.get_intermediary_option()
        if intermediary_option == 'A':
            getter_name = 'intermediary_56A'
        if intermediary_option == 'D':
            getter_name = 'intermediary_56D'
        return getter_name

    # getter
    # Moved to FInstitutionTransfersOutBase

    # formatter
    # Moved to FInstitutionTransfersOutBase

    # validator
    @validate_with(MT202.MT202_56A_Type)
    def _validate_intermediary_56A(self, intermediary):
        """validates the value provided by formatter method"""
        return intermediary

    # setter
    def _setintermediary_56A(self, intermediary):
        """sets the value on python object"""
        self.swift_obj.Intermedairy_A = intermediary
        self.swift_obj.Intermedairy_A.swiftTag = "56A"

    # getter
    def intermediary_56D(self):
        """ Returns dictionary as {'ACCOUNT':<value>, 'NAME':<value>, 'ADDRESS':<value>}"""
        return FCashOutUtils.get_counterpartys_intermediary_details(self.acm_obj)

    # formatter
    def _format_intermediary_56D(self, intermediary_details):
        """Formats the value provided by getter method"""
        account = intermediary_details.get('ACCOUNT')
        name = intermediary_details.get('NAME')
        address = intermediary_details.get('ADDRESS')

        if name and address:
            name = FSwiftWriterUtils.split_text_and_prefix(name, 35)
            address = FSwiftWriterUtils.split_text_and_prefix(address, 35)
            intermediary = FSwiftWriterUtils.allocate_space_for_name_address_without_constraint(name, address)
            if account:
                intermediary = "/" + str(account) + "\n" + str(intermediary)
            return intermediary

    # validator
    @validate_with(MT202.MT202_56D_Type)
    def _validate_intermediary_56D(self, intermediary):
        """validates the value provided by formatter method"""
        return intermediary

    # setter
    def _setintermediary_56D(self, intermediary):
        """sets the value on python object"""
        self.swift_obj.Intermedairy_D = intermediary
        self.swift_obj.Intermedairy_D.swiftTag = "56D"

    # option_getter
    def get_account_with_institution_option(self):
        """Returns default option if override is not provided"""
        return 'A'

    # setter
    def _set_OPTION_account_with_institution(self):
        """returns name of the getter method"""
        getter_name = ''
        account_option = self.get_account_with_institution_option()
        if account_option == 'A':
            getter_name = 'account_with_institution_57A'
        if account_option == 'D':
            getter_name = 'account_with_institution_57D'
        return getter_name

    # getter
    # Moved to FInstitutionTransfersOutBase

    # formatter
    def _format_account_with_institution_57A(self, acct_with_inst_details):
        """Formats the value provided by getter method"""
        bic = acct_with_inst_details.get('BIC')
        account = acct_with_inst_details.get('ACCOUNT')
        acct_with_bic = str(bic)
        if account:
            acct_with_bic = "/" + str(account) + "\n" + str(bic)

        return str(acct_with_bic)

    # validator
    @validate_with(MT202.MT202_57A_Type)
    def _validate_account_with_institution_57A(self, acct_with_inst):
        """validates the value provided by formatter method"""
        return acct_with_inst

    # setter
    def _setaccount_with_institution_57A(self, acct_with_inst):
        """sets the value on python object"""
        self.swift_obj.AccountWithInstitution_A = acct_with_inst
        self.swift_obj.AccountWithInstitution_A.swiftTag = "57A"

    # getter
    def account_with_institution_57D(self):
        """ Returns dictionary as {'ACCOUNT':<value>, 'NAME':<value>, 'ADDRESS':<value>}"""
        return FCashOutUtils.get_counterpartys_correspondent_details(self.acm_obj)

    # formatter
    def _format_account_with_institution_57D(self, acct_with_inst_details):
        """Formats the value provided by getter method"""
        account = acct_with_inst_details.get('ACCOUNT')
        name = acct_with_inst_details.get('NAME')
        address = acct_with_inst_details.get('ADDRESS')
        if name and address:
            name = FSwiftWriterUtils.split_text_and_prefix(name, 35)
            address = FSwiftWriterUtils.split_text_and_prefix(address, 35)
            acct_with_inst = FSwiftWriterUtils.allocate_space_for_name_address_without_constraint(name, address)
            if account:
                acct_with_inst = "/" + str(account) + "\n" + str(acct_with_inst)
            return acct_with_inst

    # validator
    @validate_with(MT202.MT202_57D_Type)
    def _validate_account_with_institution_57D(self, acct_with_inst):
        """validates the value provided by formatter method"""
        return acct_with_inst

    # setter
    def _setaccount_with_institution_57D(self, acct_with_inst):
        """sets the value on python object"""
        self.swift_obj.AccountWithInstitution_D = acct_with_inst
        self.swift_obj.AccountWithInstitution_D.swiftTag = "57D"

    # option_getter
    def get_beneficiary_institution_option(self):
        """Returns default option if override is not provided"""
        return 'A'

    # setter
    def _set_OPTION_beneficiary_institution(self):
        """returns name of the getter method"""
        getter_name = ''
        beneficiary_option = self.get_beneficiary_institution_option()
        if beneficiary_option == 'A':
            getter_name = 'beneficiary_institution_58A'
        if beneficiary_option == 'D':
            getter_name = 'beneficiary_institution_58D'
        return getter_name

    # getter
    def beneficiary_institution_58A(self):
        """ Returns dictionary as {'ACCOUNT':<value>, 'BIC':<value>}"""
        val = FCashOutUtils.get_counterparty_details(self.acm_obj)
        return val

    # formatter
    def _format_beneficiary_institution_58A(self, beneficiary_inst_details):
        """Formats the value provided by getter method"""
        account = beneficiary_inst_details.get('ACCOUNT')
        bic = beneficiary_inst_details.get('BIC')
        if bic:
            if account:
                beneficiary_inst = "/" + str(account) + "\n" + str(bic)
            else:
                beneficiary_inst = str(bic)
            return beneficiary_inst

    # validator
    @validate_with(MT202.MT202_58A_Type)
    def _validate_beneficiary_institution_58A(self, beneficiary_inst):
        """validates the value provided by formatter method"""
        return beneficiary_inst

    # setter
    def _setbeneficiary_institution_58A(self, beneficiary_inst):
        """sets the value on python object"""
        self.swift_obj.BeneficiaryInstitution_A = beneficiary_inst
        self.swift_obj.BeneficiaryInstitution_A.swiftTag = "58A"

    # getter
    def beneficiary_institution_58D(self):
        """ Returns dictionary as {'ACCOUNT':<value>, 'NAME':<value>, 'ADDRESS':<value>}"""
        return FCashOutUtils.get_counterparty_details(self.acm_obj)

    # formatter
    def _format_beneficiary_institution_58D(self, beneficiary_inst_details):
        """Formats the value provided by getter method"""
        account = beneficiary_inst_details.get('ACCOUNT')
        name = beneficiary_inst_details.get('NAME')
        address = beneficiary_inst_details.get('ADDRESS')

        temp_name = name
        temp_address = address
        char_set = ''
        lookup_temp = lookup
        try:
            char_set = str(self.acm_obj.Counterparty().AdditionalInfo().TraditionalChinese())
        except Exception as e:
            notifier.WARN("Could not find Additional Info 'TraditionalChinese'.")

        if char_set == 'True':
            lookup_temp = CCC_traditional_writer
        elif char_set == 'False':
            lookup_temp = CCC_simplified_writer

        for key in list(lookup_temp.keys()):
            temp_name = temp_name.replace(str(key), lookup_temp[key] + " ")
            temp_address = temp_address.replace(str(key), lookup_temp[key] + " ")

        if name == temp_name:
            if name and address:
                name = FSwiftWriterUtils.split_text_and_prefix(name, 35)
                address = FSwiftWriterUtils.split_text_and_prefix(address, 35)
                name_and_add = FSwiftWriterUtils.allocate_space_for_name_address_without_constraint(name, address)
                if account:
                    name_and_add = "/" + str(account) + "\n" + str(name_and_add)
                return name_and_add
        else:
            name = temp_name
            address = 'ADD. ' + temp_address
            name_and_address = name + address
            split_name_and_address = FSwiftWriterUtils.split_text_logically_on_character_limit(name_and_address, 35)
            name_address = ('\n').join(split_name_and_address)
            if account:
                name_address = "/" + str(account) + "\n" + str(name_address)
            return name_address

    # validator
    @validate_with(MT202.MT202_58D_Type)
    def _validate_beneficiary_institution_58D(self, beneficiary_inst):
        """validates the value provided by formatter method"""
        return beneficiary_inst

    # setter
    def _setbeneficiary_institution_58D(self, beneficiary_inst):
        """sets the value on python object"""
        self.swift_obj.BeneficiaryInstitution_D = beneficiary_inst
        self.swift_obj.BeneficiaryInstitution_D.swiftTag = "58D"


class FMT202OutBaseMessageHeader(FSwiftWriterMessageHeader.FSwiftWriterMessageHeader):
    def __init__(self, acm_obj, swift_msg_tags):
        self.mt_typ = "202"
        self.acm_obj = acm_obj
        self.swift_msg_tags = swift_msg_tags
        self.sender_ref_end_char = FSwiftMLUtils.get_character_for_mt_type('MT' + self.mt_typ)
        super(FMT202OutBaseMessageHeader, self).__init__(self.mt_typ, self.acm_obj, swift_msg_tags)

    def message_type(self):
        """returns type of message"""
        return "202"

    def sender_logical_terminal_address(self):
        '''LT code is hardcoded as A for sender'''

        senders_bic = FCashOutUtils.get_senders_bic(self.acm_obj)
        if not senders_bic:
            raise Exception("SENDER_BIC is a mandatory field for Swift message header")
        terminal_address = self.logical_terminal_address(senders_bic, "A")
        return terminal_address

    def receiver_logical_terminal_address(self):
        '''LT code is hardcoded as X for sender'''

        receivers_bic = FCashOutUtils.get_receivers_bic(self.acm_obj)
        terminal_address = self.logical_terminal_address(receivers_bic, "X")
        return terminal_address

    def logical_terminal_address(self, bic_code, lt_code):
        """returns logical terminal address"""
        terminal_address = ""
        branch_code = "XXX"
        if bic_code:
            if len(str(bic_code)) == 8:
                terminal_address = str(bic_code) + lt_code + branch_code
            elif len(str(bic_code)) == 11:
                branch_code = bic_code[8:]
                terminal_address = str(bic_code[:8]) + lt_code + branch_code
            else:
                raise Exception("Invalid BIC <%s>)" % bic_code)
        return terminal_address


    def message_user_reference(self):
        '''MUR is sent in the format FAC-SEQNBR of confirmation-VersionID'''
        settlement_prefix = FCashOutUtils.get_settlement_reference_prefix()
        cash_settlement_out_config = FSwiftWriterUtils.get_config_from_fparameter('FCashOut_Config')
        include_tradeno_in_tag_20 = FSwiftMLUtils.incude_trade_no_in_tag20(cash_settlement_out_config)
        val = FSwiftMLUtils.message_user_reference(self.acm_obj, settlement_prefix, True, include_tradeno_in_tag_20)
        val = '{}{}'.format(val, self.sender_ref_end_char)
        return "{108:%s}" % val

    def service_identifier(self):
        """returns service identifier"""
        service_code = FCashOutUtils.get_swift_service_code(self.acm_obj)
        if service_code:
            return "{103:%s}" % service_code
        return ''

    def banking_priority_code(self):
        """returns banking priority code"""


        banking_priority = FCashOutUtils.get_banking_priority(self.acm_obj)
        if banking_priority:
            return "{113:%s}" % str(banking_priority)
        return ''

    def UETR(self):
        """returns UETR"""
        ref_no = uuid.uuid4()
        return "{121:%s}" % (ref_no)

    def gpi_id(self):
        """returns gpi id"""
        gpi_identifier = FCashOutUtils.get_gpi_identifier(self.acm_obj)
        if gpi_identifier:
            return "{111:%s}" % str(gpi_identifier)

class FMT202OutBaseNetworkRules(object):
    """validation of swift message by network rules"""

    def __init__(self, swift_message_obj, swift_message, acm_obj):
        self.swift_message_obj = swift_message_obj
        self.swift_message = swift_message
        self.acm_obj = acm_obj

    def network_rule_C1(self):
        ''' If field 56a is present, then field 57a must also be present'''
        is_field_56a_present = self.swift_message_obj.Intermedairy_A or self.swift_message_obj.Intermedairy_D
        is_field_57a_present = self.swift_message_obj.AccountWithInstitution_A or self.swift_message_obj.AccountWithInstitution_D or self.swift_message_obj.AccountWithInstitution_B
        if is_field_56a_present:
            if not is_field_57a_present:
                return 'If field 56a is present, then field 57a must also be present'
        return ''


...

  FMT210Out
"""----------------------------------------------------------------------------
MODULE:
    FMT210Out

DESCRIPTION:
    This module provides the customizable class for the FMT210 outgoing implementation

CLASS:
    FMT210

VERSION: 3.6.3-0.5.6048
----------------------------------------------------------------------------"""
import MT210
import acm
import xml.dom.minidom
from FSwiftMLUtils import accepts

import FMT210OutBase
import FSwiftWriterLogger
from FSwiftWriterEngine import validate_with

notifier = FSwiftWriterLogger.FSwiftWriterLogger('CashSetlemnt', 'FCashOutNotify_Config')

@accepts([acm.FSettlement, MT210.CTD_ANON, xml.dom.minidom.Document])
class FMT210(FMT210OutBase.FMT210Base):

    def __init__(self, acm_obj, swift_obj):
        super(FMT210, self).__init__(acm_obj, swift_obj)

    # To override existing mappings use below methods to write your own logic
    """
    account_identification_25
    currency_code_amount_32B
    intermediary_56A
    intermediary_56D
    ordering_customer_50C
    ordering_customer_50F
    ordering_customer_No_Option_50
    ordering_institution_52A
    ordering_institution_52D
    related_reference_21
    transaction_reference_number_20
    value_date_30
    get_user_data

    """

    """
    To override the options provided, use below methods to write your own logic:-
    methods:- 
    get_ordering_customer_option (Tag-50 options:NO OPTION/C/F)
    get_ordering_institution_option (Tag-52 options:A/D)
    get_intermediary_option (Tag-56 options:A/D)

    For example:
    def get_ordering_customer_option(self):
        condition = True
        if condition:
            return 'NO OPTION'
        else:
            return 'C'

    """


class FMT210MessageHeader(FMT210OutBase.FMT210OutBaseMessageHeader):

    def __init__(self, acm_obj, swift_msg_tags):
        self.acm_obj = acm_obj
        self.swift_msg_tags = swift_msg_tags
        super(FMT210MessageHeader, self).__init__(acm_obj, swift_msg_tags)

    # To override existing mappings use below methods to write your own logic

    """
    application_id
    service_id
    sender_logical_terminal_address
    session_number
    sequence_number
    input_or_output
    message_priority
    message_type
    receiver_logical_terminal_address
    delivery_monitoring
    non_delivery_notification_period
    service_identifier
    banking_priority_code
    message_user_reference
    validation_flag
    """


class FMT210NetworkRules(FMT210OutBase.FMT210OutBaseNetworkRules):

    def __init__(self, swift_message_obj, swift_message, acm_obj):
        super(FMT210NetworkRules, self).__init__(swift_message_obj, swift_message, acm_obj)





...

  FMT210OutBase
"""----------------------------------------------------------------------------
MODULE:
    FMT210OutBase

DESCRIPTION:
    This module provides the base class for the FMT210 outgoing implementation

CLASS:
    FMT210Base

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import FSwiftMLUtils
import FSwiftWriterMessageHeader
import MT210
import FCashOutUtils
from FInstitutionTransfersOutBase import FInstitutionTransfersOutBase
from FSwiftWriterEngine import validate_with
import FSwiftWriterLogger
import FSwiftWriterUtils

notifier = FSwiftWriterLogger.FSwiftWriterLogger('CashSetlemnt', 'FCashOutNotify_Config')

from ChineseCommercialCode import CCC_simplified_writer, CCC_traditional_writer
CONFIG_PARAM = FSwiftMLUtils.Parameters('FSwiftWriterConfig')

chinese_language_version = getattr(CONFIG_PARAM, 'ChineseLanguageVersion', None)
if chinese_language_version:
    if chinese_language_version == 'Simplified':
        lookup = CCC_simplified_writer
    if chinese_language_version == 'Traditional':
        lookup = CCC_traditional_writer
else:
    lookup = CCC_simplified_writer

class FMT210Base(FInstitutionTransfersOutBase):

    def __init__(self, acm_obj, swift_obj):
        super(FMT210Base, self).__init__(acm_obj, swift_obj)
        self.swift_message_type = 'MT210'
        self.sender_ref_end_char = FSwiftMLUtils.get_character_for_mt_type(self.swift_message_type)

    def _message_sequences(self):
        """Sets the sequences on the pyxb object for MT210"""
        self.swift_obj.SEQUENCE1 = MT210.MT210_SEQUENCE1()

    # getter
    # Moved to FInstitutionTransfersOutBase

    # formatter
    # Moved to FInstitutionTransfersOutBase

    # validator
    @validate_with(MT210.MT210_SEQUENCE1_20_Type)
    def _validate_transaction_reference_20(self, trans_ref):
        """validates the value provided by formatter method"""
        return trans_ref

    # setter
    def _set_transaction_reference_20(self, trans_ref):
        """sets the value on python object"""
        self.swift_obj.SEQUENCE1.TransactionReferenceNumber = trans_ref
        self.swift_obj.SEQUENCE1.TransactionReferenceNumber.swiftTag = "20"

    # getter
    def account_identification_25(self):
        '''This returns a string for acquirer account id'''
        return self.acm_obj.AcquirerAccount()

    # formatter
    def _format_account_identification_25(self, accnt_id):
        """Formats the value provided by getter method"""
        return accnt_id

    # validator
    @validate_with(MT210.MT210_SEQUENCE1_25_Type)
    def _validate_account_identification_25(self, accnt_id):
        """validates the value provided by formatter method"""
        return accnt_id

    # setter
    def _set_account_identification_25(self, accnt_id):
        """sets the value on python object"""
        self.swift_obj.SEQUENCE1.AccountIdentification = accnt_id
        self.swift_obj.SEQUENCE1.AccountIdentification.swiftTag = "25"

    # getter
    def value_date_30(self):
        '''This returns the value date for settlement'''
        return FCashOutUtils.get_value_date(self.acm_obj)

    # formatter
    def _format_value_date_30(self, value_date):
        """Formats the value provided by getter method"""
        if value_date:
            date_format = '%y%m%d'
            value_date = FSwiftWriterUtils.format_date(value_date, date_format)
            return str(value_date)

    # validator
    @validate_with(MT210.MT210_SEQUENCE1_30_Type)
    def _validate_value_date_30(self, value_date):
        """validates the value provided by formatter method"""
        return value_date

    # setter
    def _set_value_date_30(self, value_date):
        """sets the value on python object"""
        self.swift_obj.SEQUENCE1.ValueDate = value_date
        self.swift_obj.SEQUENCE1.ValueDate.swiftTag = "30"

    # option_getter
    def get_ordering_customer_option(self):
        """Returns default option if override is not provided"""
        return 'C'

    # option_getter
    def get_ordering_institution_option(self):
        """Returns default option if override is not provided"""
        return 'A'

    # option_getter
    def get_intermediary_option(self):
        """Returns default option if override is not provided"""
        return 'A'

    # block getter
    def sequence_2(self):
        sequence_2_list = []
        seq_2 = MT210.MT210_SEQUENCE2()

        seq2_blocks = []
        each_block = {}
        each_block['RELATED_REFERENCE'] = FCashOutUtils.get_your_ref(self.acm_obj)
        each_block['INTERBANK_SETTLED_AMOUNT'] = self.acm_obj.Amount()

        each_block['ORDERING_CUSTOMER_OPTION'] = self.get_ordering_customer_option()
        each_block['ORDERING_CUSTOMER_ACCOUNT'] = FCashOutUtils.get_ordering_customer_account(self.acm_obj)
        each_block['ORDERING_CUSTOMER_BIC'] = FCashOutUtils.get_ordering_customer_bic(self.acm_obj)
        each_block['ORDERING_CUSTOMER_NAME'] = FCashOutUtils.get_ordering_customer_name(self.acm_obj)
        each_block['ORDERING_CUSTOMER_ADDRESS'] = FCashOutUtils.get_ordering_customer_address(self.acm_obj)

        each_block['ORDERING_INSTITUTION_OPTION'] = self.get_ordering_institution_option()
        each_block['ORDERING_INSTITUTION_ACCOUNT'] = FCashOutUtils.get_ordering_institution_account(self.acm_obj)
        each_block['ORDERING_INSTITUTION_BIC'] = FCashOutUtils.get_ordering_institution_bic(self.acm_obj)
        each_block['ORDERING_INSTITUTION_NAME'] = FCashOutUtils.get_ordering_institution_name(self.acm_obj)
        each_block['ORDERING_INSTITUTION_ADDRESS'] = FCashOutUtils.get_ordering_institution_address(self.acm_obj)

        each_block['INTERMEDIARY_OPTION'] = self.get_intermediary_option()
        intermediary_details = FCashOutUtils.get_intermediary_details(self.acm_obj)
        each_block['INTERMEDIARY_ACCOUNT'] = intermediary_details.get('ACCOUNT', None)
        each_block['INTERMEDIARY_BIC'] = intermediary_details.get('BIC', None)
        each_block['INTERMEDIARY_NAME'] = intermediary_details.get('NAME', None)
        each_block['INTERMEDIARY_ADDRESS'] = intermediary_details.get('ADDRESS', None)
        seq2_blocks.append(each_block)



        for block in seq2_blocks:
            block_val_dict = {}
            block_val_dict['RelatedReference'] = self.related_reference_21(block)
            block_val_dict['CurrencyCodeAmount'] = self.currency_code_amount_32B(block)

            ordering_customer_option = block['ORDERING_CUSTOMER_OPTION']
            if ordering_customer_option == "NO OPTION":
                block_val_dict['OrderingCustomer'] = self.ordering_customer_No_Option_50(block)
            elif ordering_customer_option == "C":
                block_val_dict['OrderingCustomer_C'] = self.ordering_customer_50C(block)
            elif ordering_customer_option == "F":
                block_val_dict['OrderingCustomer_F'] = self.ordering_customer_50F(block)
            else:
                notifier.WARN("%s Option %s is not supported for tag %s. Mapping default option." % (
                    self.swift_message_type, str(ordering_customer_option), 'OrderingCustomer_50'))
                block_val_dict['OrderingCustomer'] = self.ordering_customer_No_Option_50(block)

            ordering_institution_option = block['ORDERING_INSTITUTION_OPTION']
            if ordering_institution_option == "A":
                block_val_dict['OrderingInstitution_A'] = self.ordering_institution_52A(block)
            elif ordering_institution_option == "D":
                block_val_dict['OrderingInstitution_D'] = self.ordering_institution_52D(block)
            else:
                notifier.WARN("%s Option %s is not supported for tag %s. Mapping default option." % (
                    self.swift_message_type, str(ordering_institution_option), 'OrderingInstitution_52a'))
                block_val_dict['OrderingInstitution_A'] = self.ordering_institution_52A(block)

            intermediary_option = block['INTERMEDIARY_OPTION']
            if intermediary_option == "A":
                block_val_dict['Intermedairy_A'] = self.intermediary_56A(block)
            elif intermediary_option == "D":
                block_val_dict['Intermedairy_D'] = self.intermediary_56D(block)
            else:
                notifier.WARN("%s Option %s is not supported for tag %s. Mapping default option." % (
                    self.swift_message_type, str(intermediary_option), 'Intermediary_56a'))
                block_val_dict['Intermedairy_A'] = self.intermediary_56A(block)
            sequence_2_list.append(block_val_dict)
        return sequence_2_list

    # block formatter
    def _format_sequence_2(self, block_val_dicts):
        format_list = []
        for each_block in block_val_dicts:
            format_dict_val = {}
            format_dict_val['RelatedReference'] = self._format_related_reference_21(each_block['RelatedReference'])
            format_dict_val['CurrencyCodeAmount'] = self._format_currency_code_amount_32B(
                each_block['CurrencyCodeAmount'])
            if 'OrderingCustomer' in list(each_block.keys()):
                format_dict_val['OrderingCustomer'] = self._format_ordering_customer_No_Option_50(
                    each_block['OrderingCustomer'])
            if 'OrderingCustomer_C' in list(each_block.keys()):
                format_dict_val['OrderingCustomer_C'] = self._format_ordering_customer_50C(
                    each_block['OrderingCustomer_C'])
            if 'OrderingCustomer_F' in list(each_block.keys()):
                format_dict_val['OrderingCustomer_F'] = self._format_ordering_customer_50F(
                    each_block['OrderingCustomer_F'])
            if 'OrderingInstitution_A' in list(each_block.keys()):
                format_dict_val['OrderingInstitution_A'] = self._format_ordering_institution_52A(
                    each_block['OrderingInstitution_A'])
            if 'OrderingInstitution_D' in list(each_block.keys()):
                format_dict_val['OrderingInstitution_D'] = self._format_ordering_institution_52D(
                    each_block['OrderingInstitution_D'])
            if 'Intermedairy_A' in list(each_block.keys()):
                format_dict_val['Intermedairy_A'] = self._format_intermediary_56A(each_block['Intermedairy_A'])
            if 'Intermedairy_D' in list(each_block.keys()):
                format_dict_val['Intermedairy_D'] = self._format_intermediary_56D(each_block['Intermedairy_D'])
            format_list.append(format_dict_val)
        return format_list

    # block validator
    def _validate_sequence_2(self, format_val):
        err_msg = ''
        validated_val = []
        for each_block in format_val:
            validate_dict = {}
            val = self._validate_related_reference_21(each_block['RelatedReference'])
            validate_dict['RelatedReference'] = val
            val = self._validate_currency_code_amount_32B(each_block['CurrencyCodeAmount'])
            validate_dict['CurrencyCodeAmount'] = val
            if 'OrderingCustomer' in list(each_block.keys()):
                val = self._validate_ordering_customer_No_Option_50(each_block['OrderingCustomer'])
                validate_dict['OrderingCustomer'] = val
            if 'OrderingCustomer_C' in list(each_block.keys()):
                val = self._validate_ordering_customer_50C(each_block['OrderingCustomer_C'])
                validate_dict['OrderingCustomer_C'] = val
            if 'OrderingCustomer_F' in list(each_block.keys()):
                val = self._validate_ordering_customer_50F(each_block['OrderingCustomer_F'])
                validate_dict['OrderingCustomer_F'] = val
            if 'OrderingInstitution_A' in list(each_block.keys()):
                val = self._validate_ordering_institution_52A(each_block['OrderingInstitution_A'])
                validate_dict['OrderingInstitution_A'] = val
            if 'OrderingInstitution_D' in list(each_block.keys()):
                val = self._validate_ordering_institution_52D(each_block['OrderingInstitution_D'])
                validate_dict['OrderingInstitution_D'] = val
            if 'Intermedairy_A' in list(each_block.keys()):
                val = self._validate_intermediary_56A(each_block['Intermedairy_A'])
                validate_dict['Intermedairy_A'] = val
            if 'Intermedairy_D' in list(each_block.keys()):
                val = self._validate_intermediary_56D(each_block['Intermedairy_D'])
                validate_dict['Intermedairy_D'] = val
            validated_val.append(validate_dict)
        return validated_val

    # block
    def _set_sequence_2(self, block_val_dict):
        for each_val in block_val_dict:
            seq_2 = MT210.MT210_SEQUENCE2()
            self._setrelated_reference_21(each_val['RelatedReference'], seq_2)
            self._setcurrency_code_amount_32B(each_val['CurrencyCodeAmount'], seq_2)
            if 'OrderingCustomer' in list(each_val.keys()):
                self._setordering_customer_No_Option_50(each_val['OrderingCustomer'], seq_2)
            if 'OrderingCustomer_C' in list(each_val.keys()):
                self._setordering_customer_50C(each_val['OrderingCustomer_C'], seq_2)
            if 'OrderingCustomer_F' in list(each_val.keys()):
                self._setordering_customer_50F(each_val['OrderingCustomer_F'], seq_2)
            if not (seq_2.OrderingCustomer_F or seq_2.OrderingCustomer_C or seq_2.OrderingCustomer):  # network rule C2
                if 'OrderingInstitution_A' in list(each_val.keys()):
                    self._setordering_institution_52A(each_val['OrderingInstitution_A'], seq_2)
                if 'OrderingInstitution_D' in list(each_val.keys()):
                    self._setordering_institution_52D(each_val['OrderingInstitution_D'], seq_2)
            if 'Intermedairy_A' in list(each_val.keys()):
                self._setintermediary_56A(each_val['Intermedairy_A'], seq_2)
            if 'Intermedairy_D' in list(each_val.keys()):
                self._setintermediary_56D(each_val['Intermedairy_D'], seq_2)
            self.swift_obj.SEQUENCE2.append(seq_2)


    # getter
    def related_reference_21(self, block):
        '''returns the related reference settlement number'''
        related_reference = block['RELATED_REFERENCE']
        return related_reference

    # formatter
    def _format_related_reference_21(self, val):
        """Formats the value provided by getter method"""
        return val

    # validator
    @validate_with(MT210.MT210_SEQUENCE2_21_Type)
    def _validate_related_reference_21(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setrelated_reference_21(self, val, seq_2):
        """sets the value on python object"""
        if val:
            seq_2.RelatedReference = val
            seq_2.RelatedReference.swiftTag = "21"

    # getter
    def currency_code_amount_32B(self, block):
        '''returns a dictionary for settlement currrency and amount as values
        example - {curr : settlement.Currency(), 'amount' : INTERBANK_SETTLED_AMOUNT}'''
        values_dict = {}
        curr = None
        curr = self.acm_obj.Currency().Name()
        amount = block['INTERBANK_SETTLED_AMOUNT']
        values_dict['curr'] = curr
        values_dict['amount'] = amount
        return values_dict

    # formatter
    def _format_currency_code_amount_32B(self, val):
        """Formats the value provided by getter method"""
        curr = val.get('curr')
        amount = val.get('amount')
        amount = FCashOutUtils.apply_currency_precision(curr, float(amount))
        curr_amount = str(curr) + FSwiftMLUtils.float_to_swiftmt(str(amount))
        return curr_amount

    # validator
    @validate_with(MT210.MT210_SEQUENCE2_32B_Type)
    def _validate_currency_code_amount_32B(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setcurrency_code_amount_32B(self, val, seq_2):
        """sets the value on python object"""
        if val:
            seq_2.CurrencyCodeAmount = val
            seq_2.CurrencyCodeAmount.swiftTag = "32B"

    # getter
    def ordering_customer_No_Option_50(self, block):
        '''returns ordering customer name and address in the form of dictionary'''
        values_dict = {}
        ordering_customer_name = block['ORDERING_CUSTOMER_NAME']
        ordering_customer_address = block['ORDERING_CUSTOMER_ADDRESS']
        values_dict['ordering_customer_name'] = ordering_customer_name
        values_dict['ordering_customer_address'] = ordering_customer_address
        return values_dict

    # formatter
    def _format_ordering_customer_No_Option_50(self, val):
        """Formats the value provided by getter method"""
        name = val.get('ordering_customer_name')
        address = val.get('ordering_customer_address')

        if name and address:
            name = FSwiftWriterUtils.split_text_and_prefix(name, 35)
            address = FSwiftWriterUtils.split_text_and_prefix(address, 35)
            value = FSwiftWriterUtils.allocate_space_for_name_address_without_constraint(name, address)
            return value

    # validator
    @validate_with(MT210.MT210_SEQUENCE2_50_Type)
    def _validate_ordering_customer_No_Option_50(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setordering_customer_No_Option_50(self, val, seq_2):
        """sets the value on python object"""
        if val:
            seq_2.OrderingCustomer = val
            seq_2.OrderingCustomer.swiftTag = "50"

    # getter
    def ordering_customer_50C(self, block):
        '''returns BIC of ordering customer'''
        ordering_customer_bic = block['ORDERING_CUSTOMER_BIC']
        return ordering_customer_bic

    # formatter
    def _format_ordering_customer_50C(self, val):
        """Formats the value provided by getter method"""
        return val

    # validator
    @validate_with(MT210.MT210_SEQUENCE2_50C_Type)
    def _validate_ordering_customer_50C(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setordering_customer_50C(self, val, seq_2):
        """sets the value on python object"""
        if val:
            seq_2.OrderingCustomer_C = val
            seq_2.OrderingCustomer_C.swiftTag = "50C"

    # getter
    def ordering_customer_50F(self, block):
        '''returns ordering customer details in the form of dictionary'''
        values_dict = {}
        ordering_customer_account = block['ORDERING_CUSTOMER_ACCOUNT']
        ordering_customer_name = block['ORDERING_CUSTOMER_NAME']
        ordering_customer_address = block['ORDERING_CUSTOMER_ADDRESS']
        values_dict['ordering_customer_account'] = ordering_customer_account
        values_dict['ordering_customer_name'] = ordering_customer_name
        values_dict['ordering_customer_address'] = ordering_customer_address
        return values_dict

    # formatter
    def _format_ordering_customer_50F(self, val):
        """Formats the value provided by getter method"""
        account = val.get('ordering_customer_account')
        name = val.get('ordering_customer_name')
        address = val.get('ordering_customer_address')
        country_code = GetOrderingCustomerCountryCode(self.acm_obj)
        town = GetOrderingCustomerTown(self.acm_obj)
        name_list, address_list, country_and_town_list = [], [], []

        temp_name = name
        temp_address = address
        temp_town = town
        char_set = ''
        lookup_temp = lookup
        try:
            char_set = str(self.acm_obj.Counterparty().AdditionalInfo().TraditionalChinese())
        except Exception as e:
            notifier.WARN("Could not find Additional Info 'TraditionalChinese'.")

        if char_set == 'True':
            lookup_temp = CCC_traditional_writer
        elif char_set == 'False':
            lookup_temp = CCC_simplified_writer

        if temp_name:
            try:
                for key in list(lookup_temp.keys()):
                    temp_name = temp_name.replace(str(key), lookup_temp[key] + " ")
                    temp_address = temp_address.replace(str(key), lookup_temp[key] + " ")
                    temp_town = temp_town.replace(str(key), lookup_temp[key] + " ")
            except Exception as e:
                pass
        if name == temp_name:
            if name:
                name_list = FSwiftWriterUtils.split_text_and_prefix(str(name), 33, '1/')
            if address:
                address_list = FSwiftWriterUtils.split_text_and_prefix(str(address), 33, '2/')
            if country_code:
                additional_details = str(country_code)
                if town:
                    additional_details = additional_details + '/' + str(town)
                country_and_town_list = FSwiftWriterUtils.split_text_and_prefix(
                    str(additional_details), 33, '3/')
            value = FSwiftWriterUtils.allocate_space_for_name_and_address_with_constraint(name_list, address_list,
                                                                                          country_and_town_list)
            if account:
                account = '/' + account
                value = account + '\n' + value
            return value
        else:
            name = temp_name
            address = temp_address
            town = temp_town
            if name:
                name_list = FSwiftWriterUtils.split_text_logically_and_prefix(str(name), 33, '1/')
            if address:
                address_list = FSwiftWriterUtils.split_text_logically_and_prefix(str(address), 33, '2/')
            if country_code:
                additional_details = str(country_code)
                if town:
                    additional_details = additional_details + '/' + str(town)
                country_and_town_list = FSwiftWriterUtils.split_text_logically_and_prefix(
                    str(additional_details), 33, '3/')
            value = FSwiftWriterUtils.allocate_space_for_name_and_address_with_constraint(name_list, address_list,
                                                                                          country_and_town_list)
            if account:
                account = '/' + account
                value = account + '\n' + value
            return value

    # validator
    @validate_with(MT210.MT210_SEQUENCE2_50F_Type)
    def _validate_ordering_customer_50F(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setordering_customer_50F(self, val, seq_2):
        """sets the value on python object"""
        if val:
            seq_2.OrderingCustomer_F = val
            seq_2.OrderingCustomer_F.swiftTag = '50F'

    # getter
    def ordering_institution_52A(self, block):
        '''returns ordering institution details in the form of dictionary'''
        values_dict = {}
        ordering_institution_account = block['ORDERING_INSTITUTION_ACCOUNT']
        ordering_institution_bic = block['ORDERING_INSTITUTION_BIC']
        values_dict['ordering_institution_account'] = ordering_institution_account
        values_dict['ordering_institution_bic'] = ordering_institution_bic
        return values_dict

    # formatter
    def _format_ordering_institution_52A(self, val):
        """Formats the value provided by getter method"""
        ordering_institution_account = val.get('ordering_institution_account')
        ordering_institution_bic = val.get('ordering_institution_bic')
        field_value = ordering_institution_bic
        if ordering_institution_account:
            field_value = "/" + str(ordering_institution_account) + "\n" + str(field_value)
        return field_value

    # validator
    @validate_with(MT210.MT210_SEQUENCE2_52A_Type)
    def _validate_ordering_institution_52A(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setordering_institution_52A(self, val, seq_2):
        """sets the value on python object"""
        if val:
            seq_2.OrderingInstitution_A = val
            seq_2.OrderingInstitution_A.swiftTag = "52A"

    # getter
    def ordering_institution_52D(self, block):
        '''returns ordering institution details in the form of dictionary'''
        values_dict = {}
        ordering_institution_account = block['ORDERING_INSTITUTION_ACCOUNT']
        ordering_institution_name = block['ORDERING_INSTITUTION_NAME']
        ordering_institution_address = block['ORDERING_INSTITUTION_ADDRESS']
        values_dict['ordering_institution_account'] = ordering_institution_account
        values_dict['ordering_institution_name'] = ordering_institution_name
        values_dict['ordering_institution_address'] = ordering_institution_address
        return values_dict

    # formatter
    def _format_ordering_institution_52D(self, val):
        """Formats the value provided by getter method"""
        account = val.get('ordering_institution_account')
        name = val.get('ordering_institution_name')
        address = val.get('ordering_institution_address')
        if name and address:
            name = FSwiftWriterUtils.split_text_and_prefix(name, 35)
            address = FSwiftWriterUtils.split_text_and_prefix(address, 35)
            val = FSwiftWriterUtils.allocate_space_for_name_address_without_constraint(name, address)
        if account:
            val = "/" + str(account) + "\n" + str(val)

        return val

    # validator
    @validate_with(MT210.MT210_SEQUENCE2_52D_Type)
    def _validate_ordering_institution_52D(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setordering_institution_52D(self, val, seq_2):
        """sets the value on python object"""
        if val:
            seq_2.OrderingInstitution_D = val
            seq_2.OrderingInstitution_D.swiftTag = "52D"

    # getter
    def intermediary_56A(self, block):
        '''returns intermediary details in the form of dictionary'''
        values_dict = {}
        intermediary_account = block['INTERMEDIARY_ACCOUNT']
        intermediary_bic = block['INTERMEDIARY_BIC']
        values_dict['intermediary_account'] = intermediary_account
        values_dict['intermediary_bic'] = intermediary_bic
        return values_dict

    # formatter
    def _format_intermediary_56A(self, val):
        """Formats the value provided by getter method"""
        intermediary_account = val.get('intermediary_account')
        intermediary_bic = val.get('intermediary_bic')
        field_value = intermediary_bic
        if intermediary_account:
            field_value = "/" + str(intermediary_account) + "\n" + str(field_value)
        return field_value

    # validator
    @validate_with(MT210.MT210_SEQUENCE2_56A_Type)
    def _validate_intermediary_56A(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setintermediary_56A(self, val, seq_2):
        """sets the value on python object"""
        if val:
            seq_2.Intermedairy_A = val
            seq_2.Intermedairy_A.swiftTag = "56A"

    # getter
    def intermediary_56D(self, block):
        '''returns intermediary details in the form of dictionary'''
        values_dict = {}
        intermediary_account = block['INTERMEDIARY_ACCOUNT']
        intermediary_name = block['INTERMEDIARY_NAME']
        intermediary_address = block['INTERMEDIARY_ADDRESS']
        values_dict['intermediary_account'] = intermediary_account
        values_dict['intermediary_name'] = intermediary_name
        values_dict['intermediary_address'] = intermediary_address
        return values_dict

    # formatter
    def _format_intermediary_56D(self, val):
        """Formats the value provided by getter method"""
        account = val.get('intermediary_account')
        name = val.get('intermediary_name')
        address = val.get('intermediary_address')
        if name and address:
            name = FSwiftWriterUtils.split_text_and_prefix(name, 35)
            address = FSwiftWriterUtils.split_text_and_prefix(address, 35)
            val = FSwiftWriterUtils.allocate_space_for_name_address_without_constraint(name, address)
            if account:
                val = "/" + str(account) + "\n" + str(val)
            return val

    # validator
    @validate_with(MT210.MT210_SEQUENCE2_56D_Type)
    def _validate_intermediary_56D(self, val):
        """validates the value provided by formatter method"""
        return val

    # setter
    def _setintermediary_56D(self, val, seq_2):
        """sets the value on python object"""
        if val:
            seq_2.Intermedairy_D = val
            seq_2.Intermedairy_D.swiftTag = "56D"


class FMT210OutBaseMessageHeader(FSwiftWriterMessageHeader.FSwiftWriterMessageHeader):
    def __init__(self, acm_obj, swift_msg_tags):
        self.mt_typ = "210"
        self.acm_obj = acm_obj
        self.swift_msg_tags = swift_msg_tags
        self.sender_ref_end_char = FSwiftMLUtils.get_character_for_mt_type('MT' + self.mt_typ)
        super(FMT210OutBaseMessageHeader, self).__init__(self.mt_typ, self.acm_obj, swift_msg_tags)

    def message_type(self):
        """returns type of message"""
        return "210"

    def sender_logical_terminal_address(self):
        '''LT code is hardcoded as A for sender'''
        terminal_address = ''
        senders_bic = None
        senders_bic = FCashOutUtils.get_senders_bic(self.acm_obj)
        if not senders_bic:
            raise Exception("SENDER_BIC is a mandatory field for Swift message header")
        terminal_address = self.logical_terminal_address(senders_bic, "A")
        return terminal_address

    def receiver_logical_terminal_address(self):
        '''LT code is hardcoded as X for sender'''
        terminal_address = ''
        receivers_bic = None
        receivers_bic = FCashOutUtils.get_receivers_bic(self.acm_obj)
        if receivers_bic:
            terminal_address = self.logical_terminal_address(receivers_bic, "X")
        return terminal_address

    def logical_terminal_address(self, bic_code, lt_code):
        """returns logical terminal address"""
        terminal_address = ""
        branch_code = "XXX"
        if bic_code:
            if len(str(bic_code)) == 8:
                terminal_address = str(bic_code) + lt_code + branch_code
            elif len(str(bic_code)) == 11:
                branch_code = bic_code[8:]
                terminal_address = str(bic_code[:8]) + lt_code + branch_code
            else:
                raise Exception("Invalid BIC <%s>)" % bic_code)
        return terminal_address


    def message_user_reference(self):
        '''MUR is sent in the format FAC-SEQNBR of confirmation-VersionID'''
        settlement_prefix = FCashOutUtils.get_settlement_reference_prefix()
        cash_settlement_out_config = FSwiftWriterUtils.get_config_from_fparameter('FCashOut_Config')
        include_tradeno_in_tag_20 = FSwiftMLUtils.incude_trade_no_in_tag20(cash_settlement_out_config)
        val = FSwiftMLUtils.message_user_reference(self.acm_obj, settlement_prefix, True, include_tradeno_in_tag_20)
        val = '{}{}'.format(val, self.sender_ref_end_char)
        return "{108:%s}" % val


class FMT210OutBaseNetworkRules(object):
    """validation of swift message by network rules"""
    def __init__(self, swift_message_obj, swift_message, acm_obj):
        self.swift_message_obj = swift_message_obj
        self.swift_message = swift_message
        self.acm_obj = acm_obj
        self.mt_typ = "210"


    def network_rule_C1(self):
        ''' The repetitive sequence must not appear more than ten times(Error code(s): T10). '''
        if len(self.swift_message_obj.SEQUENCE2) > 10:
            return "Repeatitive Sequence must not appear more than ten times"

    def network_rule_C2(self):
        '''
            Either field 50a or field 52a, but not both, must be present in a repetitive sequence(Error code(s): C06).
            If field 50a is Present; Then field 52a is Not allowed
            If field 50a is Not Present; Then field 52a is Mandatory
        '''
        for field in self.swift_message_obj.SEQUENCE2:
            ord_customer = field.OrderingCustomer_F or field.OrderingCustomer_C or field.OrderingCustomer
            ord_institution = field.OrderingInstitution_A or field.OrderingInstitution_D
            if ord_customer and ord_institution:
                return "Field 50 is present so field 52 is Not allowed"
            elif not ord_customer and not ord_institution:
                return "Field 50a is not present, Hence field 52a is mandatory"

    def network_rule_C3(self):
        '''
            The currency code must be the same for all occurrences of field 32B in the message (Error code(s): C02).
        '''
        curr_list = []
        for curr_value in self.swift_message_obj.SEQUENCE2:
            if curr_value.CurrencyCodeAmount and curr_value.CurrencyCodeAmount.value():
                value = curr_value.CurrencyCodeAmount.value()
                curr_list.append(value)
        curr_list_from_set = list(set(curr_list))
        if len(curr_list_from_set) > 1:
            return "The currency code must be the same for all occurrences of field 32B in the message"


# Move this code to MT210 acm object mapping file


def GetOrderingCustomerCountryCode(settlement):
    """returns ordering customer country code"""
    return settlement.Counterparty().JurisdictionCountryCode()


def GetOrderingCustomerTown(settlement):
    """returns town of ordering customer"""
    return settlement.Counterparty().City()


...

  FMT292Out
"""----------------------------------------------------------------------------
MODULE:
    FMT292Out

DESCRIPTION:
    This module provides the customizable class for the FMT292 outgoing implementation

CLASS:
    FMT292

VERSION: 3.6.3-0.5.6048
----------------------------------------------------------------------------"""
import MT292
import acm
import xml.dom.minidom
from FSwiftMLUtils import accepts

import FMT292OutBase
import FSwiftWriterLogger
from FSwiftWriterEngine import validate_with

notifier = FSwiftWriterLogger.FSwiftWriterLogger('CashSetlemnt', 'FCashOutNotify_Config')

@accepts([acm.FSettlement, MT292.CTD_ANON, xml.dom.minidom.Document])
class FMT292(FMT292OutBase.FMT292Base):

    def __init__(self, acm_obj, swift_obj):
        super(FMT292, self).__init__(acm_obj, swift_obj)

    # To override existing mappings use below methods to write your own logic
    """
    mt_and_date_of_original_message_11S
    narrative_description_of_original_message_79
    related_reference_21
    transaction_reference_20
    get_user_data
    """

class FMT292MessageHeader(FMT292OutBase.FMT292OutBaseMessageHeader):

    def __init__(self, acm_obj, swift_msg_tags):
        self.acm_obj = acm_obj
        self.swift_msg_tags = swift_msg_tags
        super(FMT292MessageHeader, self).__init__(acm_obj, swift_msg_tags)

    # To override existing mappings use below methods to write your own logic

    """
    application_id
    service_id
    sender_logical_terminal_address
    session_number
    sequence_number
    input_or_output
    message_priority
    message_type
    receiver_logical_terminal_address
    delivery_monitoring
    non_delivery_notification_period
    service_identifier
    banking_priority_code
    message_user_reference
    validation_flag
    """

class FMT292NetworkRules(FMT292OutBase.FMT292OutBaseNetworkRules):

    def __init__(self, swift_message_obj, swift_message, acm_obj):
        super(FMT292NetworkRules, self).__init__(swift_message_obj, swift_message, acm_obj)





...

  FMT292OutBase
"""----------------------------------------------------------------------------
MODULE:
    FMT292OutBase

DESCRIPTION:
    This module provides the base class for the FMT292 outgoing implementation

CLASS:
    FMT292Base

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import FSwiftWriterLogger
import FSwiftWriterMessageHeader
import FSwiftWriterUtils
import MT292
import FCashOutUtils
import FSwiftMLUtils
from FSwiftWriterEngine import validate_with

from FRequestCancellationOutBase import FRequestCancellationOutBase

notifier = FSwiftWriterLogger.FSwiftWriterLogger('CashSetlemnt', 'FCashOutNotify_Config')


class FMT292Base(FRequestCancellationOutBase):
    def __init__(self, acm_obj, swift_obj):
        super(FMT292Base, self).__init__(acm_obj, swift_obj)
        self.swift_message_type = 'MT292'
        self.sender_ref_end_char = FSwiftMLUtils.get_character_for_mt_type(self.swift_message_type)

    # Implementing it to pass the NotImplementedError
    def _message_sequences(self):
        pass

    # ------------------ transaction_reference -----------------------

    # Moved to FRequestCancellationOutBase
    # getter transaction_reference_20

    # Moved to FRequestCancellationOutBase
    # formatter _format_transaction_reference_20

    # validator
    @validate_with(MT292.MT292_20_Type)
    def _validate_transaction_reference_20(self, val):
        return val

    # setter
    def _set_transaction_reference_20(self, val):
        self.swift_obj.TransactionReferenceNumber = val
        self.swift_obj.TransactionReferenceNumber.swiftTag = "20"

    # ------------------ related_reference -----------------------

    # condition _check_condition_set_related_reference_21
    # Moved to FRequestCancellationOutBase

    # getter related_reference_21
    # Moved to FRequestCancellationOutBase

    # formatter _format_related_reference_21
    # Moved to FRequestCancellationOutBase


    # validator
    @validate_with(MT292.MT292_21_Type)
    def _validate_related_reference_21(self, val):
        FCashOutUtils.validate_slash_and_double_slash(val, "Related Reference")
        return val

    # setter
    def _set_related_reference_21(self, val):
        self.swift_obj.RelatedReference = val
        self.swift_obj.RelatedReference.swiftTag = "21"

    # ------------------ date of original message -----------------------
    # getter mt_and_date_of_original_message_11S
    # Moved to FRequestCancellationOutBase

    # formatter _format_mt_and_date_of_original_message_11S
    # Moved to FRequestCancellationOutBase

    # validator
    @validate_with(MT292.MT292_11S_Type)
    def _validate_mt_and_date_of_original_message_11S(self, val):
        FCashOutUtils.validate_mt_and_date_of_original_message(val, "MT And Date Of The OriginalMessage")
        return val

    # setter
    def _set_mt_and_date_of_original_message_11S(self, val):
        self.swift_obj.MTAndDateOfTheOriginalMessage = val
        self.swift_obj.MTAndDateOfTheOriginalMessage.swiftTag = "11S"

    # getter narrative_description_of_original_message_79
    # Moved to FRequestCancellationOutBase

    # formatter _format_narrative_description_of_original_message_79
    # Moved to FRequestCancellationOutBase

    # validator
    @validate_with(MT292.MT292_79_Type)
    def _validate_narrative_description_of_original_message_79(self, val):
        return val

    # setter
    def _set_narrative_description_of_original_message_79(self, val):
        self.swift_obj.NarrativeDescriptionOfTheOriginalMessage = val
        self.swift_obj.NarrativeDescriptionOfTheOriginalMessage.swiftTag = "79"


class FMT292OutBaseMessageHeader(FSwiftWriterMessageHeader.FSwiftWriterMessageHeader):
    def __init__(self, acm_obj, swift_msg_tags):
        self.mt_type = "292"
        self.acm_obj = acm_obj
        self.swift_msg_tags = swift_msg_tags


        mt_type = 'MT{}'.format(self.mt_type)
        if self.child_mt_type:
            mt_type = '{}-{}'.format(mt_type, self.child_mt_type)
        self.sender_ref_end_char = FSwiftMLUtils.get_character_for_mt_type(mt_type)

        super(FMT292OutBaseMessageHeader, self).__init__(self.mt_type, self.acm_obj, swift_msg_tags)

    def message_type(self):
        return "292"

    def sender_logical_terminal_address(self):
        '''LT code is hardcoded as A for sender'''
        terminal_address = ''
        senders_bic = ''
        senders_bic = FCashOutUtils.get_senders_bic(self.acm_obj)
        if not senders_bic:
            raise Exception("SENDER_BIC is a mandatory field for Swift message header")
        terminal_address = self.logical_terminal_address(senders_bic, "A")
        return terminal_address

    def receiver_logical_terminal_address(self):
        '''LT code is hardcoded as X for sender'''
        terminal_address = ''
        receivers_bic = ''
        receivers_bic = FCashOutUtils.get_receivers_bic(self.acm_obj)
        terminal_address = self.logical_terminal_address(receivers_bic, "X")
        return terminal_address

    def logical_terminal_address(self, bic_code, lt_code):
        terminal_address = ""
        branch_code = "XXX"
        if bic_code:
            if len(str(bic_code)) == 8:
                terminal_address = str(bic_code) + lt_code + branch_code
            elif len(str(bic_code)) == 11:
                branch_code = bic_code[8:]
                terminal_address = str(bic_code[:8]) + lt_code + branch_code
            else:
                raise Exception("Invalid BIC <%s>)" % bic_code)
        return terminal_address


    def message_user_reference(self):
        '''MUR is sent in the format FAC-SEQNBR of confirmation-VersionID'''
        settlement_prefix = FCashOutUtils.get_settlement_reference_prefix()
        cash_settlement_out_config = FSwiftWriterUtils.get_config_from_fparameter('FCashOut_Config')
        include_tradeno_in_tag_20 = FSwiftMLUtils.incude_trade_no_in_tag20(cash_settlement_out_config)
        sender_ref = FSwiftMLUtils.message_user_reference(self.acm_obj, settlement_prefix, True, include_tradeno_in_tag_20)
        sender_ref = '{}{}'.format(sender_ref, self.sender_ref_end_char)
        return "{108:%s}" % sender_ref


class FMT292OutBaseNetworkRules(object):
    ''' '''

    def __init__(self, swift_message_obj, swift_message, acm_obj):
        self.swift_message_obj = swift_message_obj
        self.swift_message = swift_message
        self.acm_obj = acm_obj

    def network_rule_C1(self):
        ''' Either field 79 or a copy of at least the mandatory fields of the original message must be present (Error code(s): C25).'''
        is_field_79_present = self.swift_message_obj.NarrativeDescriptionOfTheOriginalMessage
        if not is_field_79_present and not self.swift_message_obj.SEQUENCE202:
            return 'Field 79 or Mandatory fields of original message must be present'
        if not is_field_79_present and self.swift_message_obj.SEQUENCE202:
            original_message = self.swift_message_obj.SEQUENCE202
            if not original_message.TransactionReference or not original_message.RelatedReference or not original_message.DateCurrencyAmount or not original_message.BeneficiaryInstitution_A:
                return 'Field 79 or Mandatory fields of original message must be present'
        return ''


...

  FMT299NarrativeOut
"""----------------------------------------------------------------------------
MODULE:
    FMT299NarrativeOut

DESCRIPTION:
    OPEN EXTENSION MODULE
    FMT299Narrative class for user customization.
    This class can be populated using either swift data or an acm object.
    See FMT699OutBase for extracting the values from acm

VERSION: 3.6.3-0.5.6048
----------------------------------------------------------------------------"""

import FMTx99OutBase
import FSwiftWriterLogger
import FCashOutUtils
import FSwiftMTx99Utils

notifier = FSwiftWriterLogger.FSwiftWriterLogger('CashSetlemnt', 'FCashOutNotify_Config')


class FMT299Narrative(FMTx99OutBase.FMTx99Base):

	def __init__(self, acm_obj, swift_obj):
		swift_message_type = 'MT299Narrative'
		super(FMT299Narrative, self).__init__(acm_obj, swift_message_type, swift_obj)


	# To override existing mappings use below methods to write your own logic
	"""
	narrative_79
	related_reference_21
	transaction_reference_20
	get_user_data
	"""


class FMT299NarrativeMessageHeader(FMTx99OutBase.FMTx99OutBaseMessageHeader):

	def __init__(self, acm_obj, swift_msg_tags):
		self.acm_obj = acm_obj
		self.swift_msg_tags = swift_msg_tags
		self.mt_type = '299'
		super(FMT299NarrativeMessageHeader, self).__init__(acm_obj, self.mt_type, swift_msg_tags)

	# To override existing mappings use below methods to write your own logic
	"""
	application_id
	service_id
	sender_logical_terminal_address
	session_number
	sequence_number
	input_or_output
	message_priority
	message_type
	receiver_logical_terminal_address
	delivery_monitoring
	non_delivery_notification_period
	service_identifier
	banking_priority_code
	message_user_reference
	validation_flag
	"""

	def logical_terminal_address(self, bic_code, lt_code):
		""" create terminal address for the party
		:param bic_code: bic of the party
		:param lt_code: code for the party
		:return:
		"""
		terminal_address = ""
		branch_code = "XXX"
		if bic_code:
			if len(str(bic_code)) == 8:
				terminal_address = str(bic_code) + lt_code + branch_code
			elif len(str(bic_code)) == 11:
				branch_code = bic_code[8:]
				terminal_address = str(bic_code[:8]) + lt_code + branch_code
			else:
				raise Exception("Invalid BIC <%s>)" % bic_code)
		return terminal_address

	def receiver_logical_terminal_address(self):
		"""receiver logical terminal address"""
		receivers_bic = None
		if self.acm_obj.RecordType() == "Settlement":
			receivers_bic = FCashOutUtils.get_receivers_bic(self.acm_obj)
		elif self.acm_obj.RecordType() == "Party":
			receivers_bic = FSwiftMTx99Utils.get_bic_from_party(self.acm_obj)
		elif self.acm_obj.RecordType() == "Trade":
			receivers_bic = FMTx99OutBase.get_value_from_bpr_diary(self.acm_obj, "MT" + self.mt_type, 'ReceiverBIC')
		if not receivers_bic:
			raise Exception("RECEIVER_BIC is a mandatory field for Swift message header")
		terminal_address = self.logical_terminal_address(receivers_bic, "X")
		return terminal_address


class FMT299NarrativeNetworkRules(FMTx99OutBase.FMTx99OutBaseNetworkRules):

	def __init__(self, swift_message_obj, swift_message, acm_obj):
		super(FMT299NarrativeNetworkRules, self).__init__(swift_message_obj, swift_message, acm_obj)

...

  FMT299Out
"""----------------------------------------------------------------------------
MODULE:
    FMT299Out

DESCRIPTION:
    This module provides the customizable class for the FMT299 outgoing implementation

CLASS:
    FMT299

VERSION: 3.6.3-0.5.6048
----------------------------------------------------------------------------"""
import MT299
import acm
import xml.dom.minidom
from FSwiftMLUtils import accepts

import FMT299OutBase
import FSwiftWriterLogger
from FSwiftWriterEngine import validate_with

notifier = FSwiftWriterLogger.FSwiftWriterLogger('CashSetlemnt', 'FCashOutNotify_Config')

@accepts([acm.FSettlement, MT299.CTD_ANON, xml.dom.minidom.Document])
class FMT299(FMT299OutBase.FMT299Base):

    def __init__(self, acm_obj, swift_obj):
        super(FMT299, self).__init__(acm_obj, swift_obj)

    # To override existing mappings use below methods to write your own logic
    """
    narrative_79
    related_reference_21
    transaction_reference_20
    get_user_data
    """

class FMT299MessageHeader(FMT299OutBase.FMT299OutBaseMessageHeader):

    def __init__(self, acm_obj, swift_msg_tags):
        self.acm_obj = acm_obj
        self.swift_msg_tags = swift_msg_tags
        super(FMT299MessageHeader, self).__init__(acm_obj, swift_msg_tags)

    # To override existing mappings use below methods to write your own logic

    """
    application_id
    service_id
    sender_logical_terminal_address
    session_number
    sequence_number
    input_or_output
    message_priority
    message_type
    receiver_logical_terminal_address
    delivery_monitoring
    non_delivery_notification_period
    service_identifier
    banking_priority_code
    message_user_reference
    validation_flag
    """


class FMT299NetworkRules(FMT299OutBase.FMT299OutBaseNetworkRules):

    def __init__(self, swift_message_obj, swift_message, acm_obj):
        super(FMT299NetworkRules, self).__init__(swift_message_obj, swift_message, acm_obj)

...

  FMT299OutBase
"""----------------------------------------------------------------------------
MODULE:
    FMT299OutBase

DESCRIPTION:
    This module provides the base class for the FMT299 outgoing implementation

CLASS:
    FMT299Base

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import FSwiftWriterLogger
import FSwiftWriterMessageHeader
import FSwiftWriterUtils
import MT299
import FCashOutUtils
import FSwiftMLUtils
from FSwiftWriterEngine import validate_with
from FFreeFormatOutBase import FFreeFormatOutBase

notifier = FSwiftWriterLogger.FSwiftWriterLogger('CashSetlemnt', 'FCashOutNotify_Config')


class FMT299Base(FFreeFormatOutBase):
    def __init__(self, acm_obj, swift_obj):
        super(FMT299Base, self).__init__(acm_obj, swift_obj)
        self.swift_message_type = 'MT299'
        self.sender_ref_end_char = FSwiftMLUtils.get_character_for_mt_type(self.swift_message_type)
    # Implementing it to pass the NotImplementedError
    def _message_sequences(self):
        pass

    # getter transaction_reference_20
    # Moved to FFreeFormatOutBase

    # formatter _format_transaction_reference_20
    # Moved to FFreeFormatOutBase

    # validator
    @validate_with(MT299.MT299_20_Type)
    def _validate_transaction_reference_20(self, val):
        return val

    # setter
    def _set_transaction_reference_20(self, val):
        self.swift_obj.TransactionReferenceNumber = val
        self.swift_obj.TransactionReferenceNumber.swiftTag = "20"

    # getter related_reference_21
    def related_reference_21(self):
        """ Returns related settlement number as string. """
        related_msg_character = FSwiftMLUtils.get_character_for_mt_type(self.child_mt_type)
        settlement_prefix = FCashOutUtils.get_settlement_reference_prefix()
        related_reference = FSwiftMLUtils.get_sender_ref(self.acm_obj, settlement_prefix, True)
        related_reference = FSwiftMLUtils.format_sender_reference(related_reference)
        related_reference = '{}{}'.format(related_reference, related_msg_character)
        return related_reference


    # formatter
    def _format_related_reference_21(self, val):
        return val

    # validator
    @validate_with(MT299.MT299_21_Type)
    def _validate_related_reference_21(self, val):
        return val

    # setter
    def _set_related_reference_21(self, val):
        self.swift_obj.RelatedReference = val
        self.swift_obj.RelatedReference.swiftTag = "21"

    # getter narrative_79
    # Moved to FFreeFormatOutBase

    # formatter _format_narrative_79
    # Moved to FFreeFormatOutBase

    # validator
    @validate_with(MT299.MT299_79_Type)
    def _validate_narrative_79(self, val):
        return val

    # setter
    def _set_narrative_79(self, val):
        self.swift_obj.Narrative = val
        self.swift_obj.Narrative.swiftTag = "79"


class FMT299OutBaseMessageHeader(FSwiftWriterMessageHeader.FSwiftWriterMessageHeader):
    def __init__(self, acm_obj, swift_msg_tags):
        self.mt_type = "299"
        self.acm_obj = acm_obj
        self.swift_msg_tags = swift_msg_tags
        self.sender_ref_end_char = FSwiftMLUtils.get_character_for_mt_type('MT' + self.mt_type)
        super(FMT299OutBaseMessageHeader, self).__init__(self.mt_type, self.acm_obj, swift_msg_tags)

    def message_type(self):
        return "299"

    def sender_logical_terminal_address(self):
        '''LT code is hardcoded as A for sender'''
        terminal_address = ''
        senders_bic = ''
        senders_bic = FCashOutUtils.get_senders_bic(self.acm_obj)
        if not senders_bic:
            raise Exception("SENDER_BIC is a mandatory field for Swift message header")
        terminal_address = self.logical_terminal_address(senders_bic, "A")
        return terminal_address

    def receiver_logical_terminal_address(self):
        '''LT code is hardcoded as X for sender'''
        terminal_address = ''
        receivers_bic = ''
        receivers_bic = FCashOutUtils.get_receivers_bic(self.acm_obj)
        terminal_address = self.logical_terminal_address(receivers_bic, "X")
        return terminal_address

    def logical_terminal_address(self, bic_code, lt_code):
        terminal_address = ""
        branch_code = "XXX"
        if bic_code:
            if len(str(bic_code)) == 8:
                terminal_address = str(bic_code) + lt_code + branch_code
            elif len(str(bic_code)) == 11:
                branch_code = bic_code[8:]
                terminal_address = str(bic_code[:8]) + lt_code + branch_code
            else:
                raise Exception("Invalid BIC <%s>)" % bic_code)
        return terminal_address


    def message_user_reference(self):
        '''MUR is sent in the format FAS-SEQNBR of settlement-VersionID'''
        settlement_prefix = FCashOutUtils.get_settlement_reference_prefix()
        cash_settlement_out_config = FSwiftWriterUtils.get_config_from_fparameter('FCashOut_Config')
        include_tradeno_in_tag_20 = FSwiftMLUtils.incude_trade_no_in_tag20(cash_settlement_out_config)
        sender_ref = FSwiftMLUtils.message_user_reference(self.acm_obj, settlement_prefix, True, include_tradeno_in_tag_20, isNarrative=True)
        sender_ref = '{}{}'.format(sender_ref, self.sender_ref_end_char)
        return "{108:%s}" %sender_ref


class FMT299OutBaseNetworkRules(object):
    ''' '''

    def __init__(self, swift_message_obj, swift_message, acm_obj):
        self.swift_message_obj = swift_message_obj
        self.swift_message = swift_message
        self.acm_obj = acm_obj


...

  FMT304Out
"""----------------------------------------------------------------------------
MODULE:
    FMT304Out

DESCRIPTION:
    This module provides the customizable class for the FMT304 outgoing implementation

CLASS:
    FMT304

VERSION: 3.6.3-0.5.6048
----------------------------------------------------------------------------"""

import MT304
import acm
import xml.dom.minidom
from FSwiftMLUtils import accepts

import FMT304OutBase
import FSwiftWriterLogger
from FSwiftWriterEngine import validate_with

notifier = FSwiftWriterLogger.FSwiftWriterLogger('CashSetlemnt', 'FCashOutNotify_Config')

@accepts([acm.FSettlement, MT304.CTD_ANON, xml.dom.minidom.Document])
class FMT304(FMT304OutBase.FMT304Base):

    def __init__(self, acm_obj, swift_obj):
        super(FMT304, self).__init__(acm_obj, swift_obj)

    # To override existing mappings use below 'tag_name' methods to write your own logic

    '''
    senders_reference_20
    related_reference_21
    type_of_operation_22A
    scope_of_operation_94A
    open_indicator_17O
    final_close_indicator_17F
    net_settlement_indicator_17N
    fund_83A
    fund_83D
    fund_83J
    fund_manager_82A
    fund_manager_82D
    fund_manager_82J
    executing_broker_87A
    executing_broker_87D
    executing_broker_87J
    trade_date_30T
    value_date_30V
    exchange_rate_36
    currency_amount_bought_32B
    buy_delivery_agent_53A
    buy_delivery_agent_53D
    buy_delivery_agent_53J
    buy_intermediary_56A
    buy_intermediary_56D
    buy_intermediary_56J
    buy_receiving_agent_57A
    buy_receiving_agent_57D
    buy_receiving_agent_57J
    currency_amount_sold_33B
    sell_delivery_agent_53A
    sell_delivery_agent_53D
    sell_delivery_agent_53J
    sell_intermediary_56A
    sell_intermediary_56D
    sell_intermediary_56J
    sell_receiving_agent_57A
    sell_receiving_agent_57D
    sell_receiving_agent_57J
    sell_beneficiary_institution_58A
    sell_beneficiary_institution_58D
    sell_beneficiary_institution_58J
    reference_to_previous_deals_21P
    gain_indicator_17G
    currency_amount_32G
    '''    

    # Custom Methods:
    '''
    def fund_manager(self):
        """ Method to return party name whose role is fund manager """
        return 'party_name'

    def executing_broker(self):
        """ Method to return party name whose role is executing broker """
        return 'party_name'

    '''


class FMT304MessageHeader(FMT304OutBase.FMT304OutBaseMessageHeader):

    def __init__(self, acm_obj, swift_msg_tags):
        self.acm_obj = acm_obj
        self.swift_msg_tags = swift_msg_tags
        super(FMT304MessageHeader, self).__init__(acm_obj, swift_msg_tags)

    # To override existing mappings use below methods to write your own logic

    """
    message_type
    sender_logical_terminal_address
    receiver_logical_terminal_address
    logical_terminal_address
    input_or_output
    message_user_reference
    """


class FMT304NetworkRules(FMT304OutBase.FMT304OutBaseNetworkRules):

    def __init__(self, swift_message_obj, swift_message, acm_obj):
        super(FMT304NetworkRules, self).__init__(swift_message_obj, swift_message, acm_obj)





...

  FMT304OutBase
"""----------------------------------------------------------------------------
MODULE:
    FMT304OutBase

DESCRIPTION:
    This module provides the base class for the FMT304 outgoing implementation

CLASS:
    FMT304Base

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""

import FSwiftMLUtils
import FSwiftWriterMessageHeader
import MT304
import acm
import FSwiftWriterLogger
import FCashOutUtils
import FSwiftConfirmationUtils
import FSwiftWriterMTFactory
import FSwiftWriterUtils
import FSwiftGeneralUtils
from FCashOutBase import FCashOutBase
from FSwiftWriterEngine import validate_with


notifier = FSwiftWriterLogger.FSwiftWriterLogger('CashSetlemnt', 'FCashOutNotify_Config')


class FMT304Base(FCashOutBase):
    def __init__(self, acm_obj, swift_obj):
        super(FMT304Base, self).__init__(acm_obj, swift_obj)
        self.swift_message_type = "MT304"

    def _message_sequences(self):
        self.swift_obj.SequenceA_GeneralInformation = MT304.MT304_SequenceA_GeneralInformation()
        self.swift_obj.SequenceA_GeneralInformation.swiftTag = "15A"
        self.swift_obj.SequenceA_GeneralInformation.formatTag = "False"
        self.swift_obj.SequenceB_ForexTransactionDetails = MT304.MT304_SequenceB_ForexTransactionDetails()
        self.swift_obj.SequenceB_ForexTransactionDetails.swiftTag = "15B"
        self.swift_obj.SequenceB_ForexTransactionDetails.formatTag = "False"
        self.swift_obj.SequenceB_ForexTransactionDetails.SubsequenceB1_AmountBought = MT304.MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought()
        self.swift_obj.SequenceB_ForexTransactionDetails.SubsequenceB2_AmountSold = MT304.MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold()

        # Setting Sequence D Accounting Information Block
        self.is_seq_d = self.__set_optional_seq_d()

    def should_handle_cancellation(self):
        """
        This function decides whether to provide the implementation for the cancellation
        :return: boolean
        """
        return FSwiftWriterUtils.is_cancellation(self.acm_obj)


    def handle_cancellation_message(self, msg_typ, acm_object):
        """ Creates a python object from parent settlement swift message.
            Assign that python object to fmt object.
            Set changed values only on fmt object.
        """
        try:
            canc_message = ''
            self.swift_obj = None
            swift_message = FSwiftMLUtils.get_outgoing_mt_message(FSwiftWriterUtils.get_related_settlement(acm_object))
            pyobj = FSwiftWriterUtils.create_pyobj_from_swift_msg(swift_message)
            if pyobj:
                self.swift_obj = pyobj

                # Setting related reference value (Tag 21) on the fmt object
                ref_val = pyobj.SequenceA_GeneralInformation.SendersReference.value()

                self.swift_obj.SequenceA_GeneralInformation.RelatedReference = ref_val
                self.swift_obj.SequenceA_GeneralInformation.RelatedReference.swiftTag = "21"

                # Setting the transaction reference number value (Tag 20) on the fmt object
                getter_value = self.senders_reference_20()
                formatter_value = self._format_senders_reference_20(getter_value)
                validated_value = self._validate_senders_reference_20(formatter_value)
                self._set_senders_reference_20(validated_value)

                # Setting type of operation value (Tag 22)
                old_val = pyobj.SequenceA_GeneralInformation.TypeOfOperation.value()
                if 'NEWT' in old_val:
                    val = old_val.replace('NEWT','CANC')
                self.swift_obj.SequenceA_GeneralInformation.TypeOfOperation = val
                self.swift_obj.SequenceA_GeneralInformation.TypeOfOperation.swiftTag = "22A"

                canc_message = FSwiftWriterUtils.create_swift_msg_from_pyobj(self.swift_obj)

        except Exception as e:
            raise e
        return canc_message, self.swift_obj


    # Methods to fetch data from the swift message

    # ------------------ senders_reference -----------------------
    # getter
    def senders_reference_20(self):
        """ Expected return type : a string containing senders's reference"""
        settlement_prefix = FCashOutUtils.get_settlement_reference_prefix()
        cash_settlement_out_config = FSwiftWriterUtils.get_config_from_fparameter('FCashOut_Config')
        include_tradeno_in_tag_20 = FSwiftMLUtils.incude_trade_no_in_tag20(cash_settlement_out_config)
        sender_ref = FSwiftMLUtils.get_sender_ref(self.acm_obj, settlement_prefix, include_tradeno_in_tag_20=include_tradeno_in_tag_20)
        return sender_ref

    # formatter
    def _format_senders_reference_20(self, val):
        """ Formats the value provided by getter method """
        val = FSwiftMLUtils.format_sender_reference(val)
        return val

    # validator
    @validate_with(MT304.MT304_SequenceA_GeneralInformation_20_Type)
    def _validate_senders_reference_20(self, val):
        """ Validates the value provided by formatter method """
        FCashOutUtils.validate_slash_and_double_slash(val, "Sender's Reference")
        return val

    # setter
    def _set_senders_reference_20(self, val):
        """ Sets the value on python object of MT304 """
        self.swift_obj.SequenceA_GeneralInformation.SendersReference = val
        self.swift_obj.SequenceA_GeneralInformation.SendersReference.swiftTag = "20"

    # ------------------ related_reference -----------------------

    # getter
    def related_reference_21(self):
        """ Returns 'NEW' or related confirmation object"""
        if FSwiftWriterUtils.get_type_of_operation(self.acm_obj) == 'CANC':
            return FCashOutUtils.get_related_settlement(self.acm_obj)


    # formatter
    def _format_related_reference_21(self, val):
        """ Formats the value provided by getter method """
        if val:
            related_conf = val
            related_reference = FSwiftGeneralUtils.get_tag20_value_from_swift_message(related_conf, self.swift_message_type)
            return related_reference


    # validator
    @validate_with(MT304.MT304_SequenceA_GeneralInformation_21_Type)
    def _validate_related_reference_21(self, val):
        """ Validates the value provided by formatter method """
        FCashOutUtils.validate_slash_and_double_slash(val, "Related Reference")
        return val

    # setter
    def _set_related_reference_21(self, val):
        """ Sets the value on python object of MT304 """
        self.swift_obj.SequenceA_GeneralInformation.RelatedReference = val
        self.swift_obj.SequenceA_GeneralInformation.RelatedReference.swiftTag = "21"


    # ------------------ type_of_operation -----------------------
    # getter
    def type_of_operation_22A(self):
        """ Returns type of operation code as string  """
        return 'NEWT'

    # formatter
    def _format_type_of_operation_22A(self, val):
        """ Formats the value provided by getter method """
        return val

    @validate_with(MT304.MT304_SequenceA_GeneralInformation_22A_Type)
    def _validate_type_of_operation_22A(self, val):
        """ Validates the value provided by formatter method """
        return val

    # setter
    def _set_type_of_operation_22A(self, val):
        """ Sets the value on python object of MT304 """
        self.swift_obj.SequenceA_GeneralInformation.TypeOfOperation = val
        self.swift_obj.SequenceA_GeneralInformation.TypeOfOperation.swiftTag = "22A"


    # -------------------- ScopeOfOperation --------------------------

    # getter
    def scope_of_operation_94A(self):
        """ Returns string based upon type of trade """
        val = ''
        if self.acm_obj.Trade().IsFxSpot():
            val = "ASET"
        elif self.acm_obj.Trade().IsFxForward():
            val = "AFWD"
        return val

    # formatter
    def _format_scope_of_operation_94A(self, val):
        """ Formats the value provided by getter method """
        return val

    # validator
    @validate_with(MT304.MT304_SequenceA_GeneralInformation_94A_Type)
    def _validate_scope_of_operation_94A(self, val):
        """ Validates the value provided by formatter method """
        return val

    # setter
    def _set_scope_of_operation_94A(self, val):
        """ Sets the value on python object of MT304 """
        self.swift_obj.SequenceA_GeneralInformation.ScopeOfOperation = val
        self.swift_obj.SequenceA_GeneralInformation.ScopeOfOperation.swiftTag = "94A"

    # --------------- OpenIndicator -----------------

    # getter
    def open_indicator_17O(self):
        """ Returns string Y/N denoting whether the trade is open/closing"""
        indicator = None
        if self.acm_obj.Trade().Type() == 'Normal':
            indicator = 'Y'
        elif self.acm_obj.Trade().Type() == 'Closing':
            indicator = 'N'

        return indicator

    # formatter
    def _format_open_indicator_17O(self, val):
        """ Formats the value provided by getter method """
        return val

    # validator
    @validate_with(MT304.MT304_SequenceA_GeneralInformation_17O_Type)
    def _validate_open_indicator_17O(self, val):
        """ Validates the value provided by formatter method """
        return val

    # check condition
    def _check_condition_set_open_indicator_17O(self):
        """ Checks conditional presence set_open_indicator_17O"""
        indicator = False
        if self.acm_obj.Trade().IsFxForward():
            indicator = True
        return indicator

    # setter
    def _set_open_indicator_17O(self, val):
        """ Sets the value on python object of MT304 """
        self.swift_obj.SequenceA_GeneralInformation.OpenIndicator = val
        self.swift_obj.SequenceA_GeneralInformation.OpenIndicator.swiftTag = "17O"

    # --------------- FinalCloseIndicator -----------------

    # getter
    def final_close_indicator_17F(self):
        """ Returns string Y/N denoting whether the trade is final closing trade """
        indicator = None
        if self.acm_obj.Trade().Type() == 'Closing':
            if self.acm_obj.Trade().RemainingNominal():
                indicator = 'N'
            else:
                indicator = 'Y'
        return indicator

    # formatter
    def _format_final_close_indicator_17F(self, val):
        """ Formats the value provided by getter method """
        return val

    # validator
    @validate_with(MT304.MT304_SequenceA_GeneralInformation_17F_Type)
    def _validate_final_close_indicator_17F(self, val):
        """ Validates the value provided by formatter method """
        return val

    # check condition
    def _check_condition_set_final_close_indicator_17F(self):
        """ Checks conditional presence for _set_final_close_indicator_17F"""
        indicator = False
        if self.acm_obj.Trade().IsFxForward():
            indicator = True
        return indicator

    # setter
    def _set_final_close_indicator_17F(self, val):
        """ Sets the value on python object of MT304 """
        self.swift_obj.SequenceA_GeneralInformation.FinalCloseIndicator = val
        self.swift_obj.SequenceA_GeneralInformation.FinalCloseIndicator.swiftTag = "17F"


     # --------------- NetSettlementIndicator -----------------

    # getter
    def net_settlement_indicator_17N(self):
        """ Returns string 'N' as netting is not supported """
        indicator = 'N'
        return indicator

    # formatter
    def _format_net_settlement_indicator_17N(self, val):
        """ Formats the value provided by getter method """
        return val

    # validator
    @validate_with(MT304.MT304_SequenceA_GeneralInformation_17N_Type)
    def _validate_net_settlement_indicator_17N(self, val):
        """ Validates the value provided by formatter method """
        return val

    # check condition
    def _check_condition_set_net_settlement_indicator_17N(self):
        """ Checks conditional presence for _set_net_settlement_indicator_17N"""
        indicator = False
        if self.acm_obj.Trade().IsFxForward():
            indicator = True
        return indicator

    # setter
    def _set_net_settlement_indicator_17N(self, val):
        """ Sets the value on python object of MT304 """
        self.swift_obj.SequenceA_GeneralInformation.NetSettlementIndicator = val
        self.swift_obj.SequenceA_GeneralInformation.NetSettlementIndicator.swiftTag = "17N"

    # -------------------- Option -------------------
    #option_getter
    def get_fund_option(self):
        """ Returns default option if override is not provided """
        option = "J"
        party_details = FCashOutUtils.get_party_a_details(self.acm_obj)
        if FCashOutUtils.get_bic(party_details):
            option = 'A'
        else:
            option = 'J'
        return option

    # option setter
    def _set_OPTION_fund(self):
        """ Returns getter name as string like 'fund_83A',  'fund_83J' """
        fund_option = self.get_fund_option()
        if fund_option == "A":
            getter_name = 'fund_83A'
        elif fund_option == "J":
            getter_name = 'fund_83J'
        else:
            notifier.WARN("%s Option %s is not supported for tag %s. Mapping default option." % (self.swift_message_type, str(fund_option), 'Fund_83a'))
            getter_name = 'fund_83A'
        return getter_name

    # getter
    def fund_83A(self):
        """ Returns dictionary consisting fund party details """
        val = FCashOutUtils.get_party_a_details(self.acm_obj)
        return val

    # formatter
    def _format_fund_83A(self, val):
        """ Formats the value provided by getter method """
        bic = val.get('BIC')
        if bic:
            val = str(bic)
            return val


    # validator
    @validate_with(MT304.MT304_SequenceA_GeneralInformation_83A_Type)
    def _validate_fund_83A(self, val):
        """ Validates the value provided by formatter method """
        return val

    # setter
    def _setfund_83A(self, val):
        """ Sets the value on python object of MT304 """
        self.swift_obj.SequenceA_GeneralInformation.Fund_A = val
        self.swift_obj.SequenceA_GeneralInformation.Fund_A.swiftTag = "83A"


    # getter
    def fund_83J(self):
        """ Returns dictionary consisting fund party details """
        val = FCashOutUtils.get_party_a_details(self.acm_obj)
        return val

    # formatter
    def _format_fund_83J(self, val):
        """ Formats the value provided by getter method """
        return self._format_Option_J(val)


    # validator
    @validate_with(MT304.MT304_SequenceA_GeneralInformation_83J_Type)
    def _validate_fund_83J(self, val):
        """ Validates the value provided by formatter method """
        return val

    # setter
    def _setfund_83J(self, val):
        """ Sets the value on python object of MT304 """
        self.swift_obj.SequenceA_GeneralInformation.Fund_J = val
        self.swift_obj.SequenceA_GeneralInformation.Fund_J.swiftTag = "83J"


    # --------------------fund_manager Option -------------------
    # option_getter
    def get_fund_manager_option(self):
        """ Returns default option if override is not provided """
        option = "J"
        party_details = self.fund_manager_82A()
        if party_details:
            if FCashOutUtils.get_bic(party_details):
                option = 'A'
            else:
                option = 'J'
        return option


    # option setter
    def _set_OPTION_fund_manager(self):
        """ Returns getter name as string like 'fund_manager_82A',  'fund_manager_82J' """
        fund_option = self.get_fund_manager_option()
        if fund_option == "A":
            getter_name = 'fund_manager_82A'
        elif fund_option == "J":
            getter_name = 'fund_manager_82J'
        else:
            notifier.WARN("%s Option %s is not supported for tag %s. Mapping default option." % ( self.swift_message_type, str(fund_option), 'FundManager_a'))
            getter_name = 'fund_manager_82A'
        return getter_name

    # getter
    def fund_manager_82A(self):
        """ Returns dictionary with fund manager party details """
        val = ''
        try:
            custom_value = self.fund_manager()
            if custom_value:
                val = FCashOutUtils.get_fund_manager_details(custom_value)
            return val
        except NotImplementedError:
            notifier.WARN("Implement custom function fund_manager() in FMT304Out returning value for FundManager as it is mandatory in fund_manager_82A")


    # formatter
    def _format_fund_manager_82A(self, val):
        """ Formats the value provided by getter method """
        bic = val.get('BIC')
        if bic:
            val = str(bic)
            return val

    # validator
    @validate_with(MT304.MT304_SequenceA_GeneralInformation_82A_Type)
    def _validate_fund_manager_82A(self, val):
        """ Validates the value provided by formatter method """
        return val

    # setter
    def _setfund_manager_82A(self, val):
        """ Sets the value on python object of MT304 """
        self.swift_obj.SequenceA_GeneralInformation.FundManager_A = val
        self.swift_obj.SequenceA_GeneralInformation.FundManager_A.swiftTag = "82A"



    # getter
    def fund_manager_82J(self):
        """ Returns dictionary with fund manager party details """
        val = ''
        try:
            custom_value = self.fund_manager()
            if custom_value:
                val = FCashOutUtils.get_fund_manager_details(custom_value)
            return val
        except NotImplementedError:
            notifier.WARN("Implement custom function fund_manager() in FMT304Out returning value for FundManager as it is mandatory in fund_manager_82J")

    # formatter
    def _format_fund_manager_82J(self, val):
        """ Formats the value provided by getter method """
        return self._format_Option_J(val)

    # validator
    @validate_with(MT304.MT304_SequenceA_GeneralInformation_82J_Type)
    def _validate_fund_manager_82J(self, val):
        """ Validates the value provided by formatter method """
        return val

    # setter
    def _setfund_manager_82J(self, val):
        """ Sets the value on python object of MT304 """
        self.swift_obj.SequenceA_GeneralInformation.FundManager_J = val
        self.swift_obj.SequenceA_GeneralInformation.FundManager_J.swiftTag = "82J"

    # -------------------- ExecutingBroker -------------------
    # option getter
    def get_executing_broker_option(self):
        """ Returns default option if override is not provided """
        option = "J"
        party_details = self.executing_broker_87A()
        if party_details:
            if FCashOutUtils.get_bic(party_details):
                option = 'A'
            else:
                option = "J"
        return option

    # option setter
    def _set_OPTION_executing_broker(self):
        """ Returns getter name as string like 'ExecutingBroker_87A', 'ExecutingBroker_87J' """
        executing_broker_option = self.get_executing_broker_option()
        getter_name = 'executing_broker_87A'
        if executing_broker_option == "A":
            getter_name = 'executing_broker_87A'
        elif executing_broker_option == "J":
            getter_name = 'executing_broker_87J'
        else:
            notifier.WARN("%s Option %s is not supported for tag %s. Mapping default option." % (self.swift_message_type,  str(executing_broker_option),  'ExecutingBroker_87a'))
        return getter_name

    # getter
    def executing_broker_87A(self):
        """ Returns dictionary with executing broker party details """
        try:
            val = ''
            if not FCashOutUtils.get_executing_broker(self.acm_obj):
                custom_value = self.executing_broker()
            else:
                custom_value = FCashOutUtils.get_executing_broker(self.acm_obj)
            if custom_value:
                val = FCashOutUtils.get_executing_broker_details(custom_value)
                return val

        except NotImplementedError:
            notifier.WARN("Implement custom function executing_broker() in FMT304Out returning value for ExecutingBroker as it is mandatory in executing_broker_87A")

    # formatter
    def _format_executing_broker_87A(self, val):
        """ Formats the value provided by getter method """
        if val:
            bic = val.get('BIC')
            if bic:
                val = str(bic)
                return val

    # validator
    @validate_with(MT304.MT304_SequenceA_GeneralInformation_87A_Type)
    def _validate_executing_broker_87A(self, val):
        """ Validates the value provided by formatter method """
        return val

    # setter
    def _setexecuting_broker_87A(self, val):
        """ Sets the value on python object of MT304 """
        self.swift_obj.SequenceA_GeneralInformation.ExecutingBroker_A = val
        self.swift_obj.SequenceA_GeneralInformation.ExecutingBroker_A.swiftTag = "87A"



    # getter
    def executing_broker_87J(self):
        """ Returns dictionary with executing broker party details """
        try:
            val = ''
            if not FCashOutUtils.get_executing_broker(self.acm_obj):
                custom_value = self.executing_broker()
            else:
                custom_value = FCashOutUtils.get_executing_broker(self.acm_obj)
            if custom_value:
                val = FCashOutUtils.get_executing_broker_details(custom_value)
            return val

        except NotImplementedError:
            notifier.WARN("Implement custom function executing_broker() in FMT304Out returning value for ExecutingBroker as it is mandatory in executing_broker_87J")

    # formatter
    def _format_executing_broker_87J(self, val):
        """ Formats the value provided by getter method """
        return self._format_Option_J(val)

    # validator
    @validate_with(MT304.MT304_SequenceA_GeneralInformation_87J_Type)
    def _validate_executing_broker_87J(self, val):
        """ Validates the value provided by formatter method """
        return val

    # setter
    def _setexecuting_broker_87J(self, val):
        """ Sets the value on python object of MT304 """
        self.swift_obj.SequenceA_GeneralInformation.ExecutingBroker_J = val
        self.swift_obj.SequenceA_GeneralInformation.ExecutingBroker_J.swiftTag = "87J"

    # -------------------------- TradeDate --------------------------------------------

    # getter
    def trade_date_30T(self):
        """ Returns trade date as a string """
        trade_date = FCashOutUtils.get_trade_date(self.acm_obj)
        return trade_date

    # formatter
    def _format_trade_date_30T(self, val):
        """ Formats the value provided by getter method """
        if val:
            date_format = '%Y%m%d'
            val = FSwiftWriterUtils.format_date(val, date_format)

            return str(val)

    # validator
    @validate_with(MT304.MT304_SequenceB_ForexTransactionDetails_30T_Type)
    def _validate_trade_date_30T(self, val):
        """ Validates the value provided by formatter method """
        return val

    # setter
    def _set_trade_date_30T(self, val):
        """ Sets the value on python object of MT304 """
        self.swift_obj.SequenceB_ForexTransactionDetails.TradeDate = val
        self.swift_obj.SequenceB_ForexTransactionDetails.TradeDate.swiftTag = "30T"


    # ----------------------------- ValueDate -----------------------------------------
    # getter
    def value_date_30V(self):
        """ Returns value date as a string """
        value_day = self.acm_obj.Trade().ValueDay()
        return value_day

    # formatter
    def _format_value_date_30V(self, val):
        """ Formats the value provided by getter method """
        if val:
            date_format = '%Y%m%d'
            val = FSwiftWriterUtils.format_date(val, date_format)
            return val

    # validator
    @validate_with(MT304.MT304_SequenceB_ForexTransactionDetails_30V_Type)
    def _validate_value_date_30V(self, val):
        """ Validates the value provided by formatter method """
        return val

    # setter
    def _set_value_date_30V(self, val):
        """ Sets the value on python object of MT304 """
        self.swift_obj.SequenceB_ForexTransactionDetails.ValueDate = val
        self.swift_obj.SequenceB_ForexTransactionDetails.ValueDate.swiftTag = "30V"


    # ------------------------------ ExchangeRate ----------------------------------------
    # getter
    def exchange_rate_36(self):
        """ Returns exchange rate as a string """
        val = FSwiftMLUtils.get_exchange_rate(self.acm_obj)
        return val

    # formatter
    def _format_exchange_rate_36(self, val):
        """ Formats the value provided by getter method """
        if val:
            strike_currency = FCashOutUtils.base_currency(self.acm_obj)
            val = float(val)
            exchange_rate = FSwiftMLUtils.float_to_swiftmt(str(val))
            return exchange_rate


    # validator
    @validate_with(MT304.MT304_SequenceB_ForexTransactionDetails_36_Type)
    def _validate_exchange_rate_36(self, val):
        """ Validates the value provided by formatter method """
        FCashOutUtils.validateAmount(val, 12, "Exchange Rate")
        return val

    # setter
    def _set_exchange_rate_36(self, val):
        """ Sets the value on python object of MT304 """
        self.swift_obj.SequenceB_ForexTransactionDetails.ExchangeRate = val
        self.swift_obj.SequenceB_ForexTransactionDetails.ExchangeRate.swiftTag = "36"


    # -------------------------------- currency_amount_bought  --------------------------------------

    def currency_amount_bought_32B(self):
        """ Returns dictionary consisting of buy_amount and currency as keys with their respective values """
        val_dict = {}
        amount_bought = ''
        currency = ''

        val_dict['BUY_AMOUNT'] = FCashOutUtils.get_buy_amount(self.acm_obj)
        val_dict['BUY_CURRENCY'] = FCashOutUtils.get_buy_currency(self.acm_obj)


        return val_dict

    # formatter
    def _format_currency_amount_bought_32B(self, val_dict):
        """ Formats the value provided by getter method """
        buy_amount = val_dict.get('BUY_AMOUNT')
        buy_currency = val_dict.get('BUY_CURRENCY')
        if buy_amount and buy_currency:
            buy_amount = FCashOutUtils.apply_currency_precision(buy_currency, float(buy_amount))
            val = str(buy_currency) + str(FSwiftMLUtils.float_to_swiftmt(str(buy_amount)))
            return val

    # validator
    @validate_with(MT304.MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_32B_Type)
    def _validate_currency_amount_bought_32B(self, val):
        """ Validates the value provided by formatter method """
        FCashOutUtils.validate_currency_amount(val, "Currency Amount Bought")
        amount = FSwiftGeneralUtils.get_amount_from_currency_amount(val)
        FCashOutUtils.validateAmount(amount.replace('.', ','), 15, "Currency Amount Bought")
        return val

    # setter
    def _set_currency_amount_bought_32B(self, val):
        """ Sets the value on python object of MT304 """
        self.swift_obj.SequenceB_ForexTransactionDetails.SubsequenceB1_AmountBought.CurrencyAmountBought = val
        self.swift_obj.SequenceB_ForexTransactionDetails.SubsequenceB1_AmountBought.CurrencyAmountBought.swiftTag = "32B"


    # ---------------------------------- buy_delivery_agent ------------------------------------
    def get_buy_delivery_agent_option(self):
        """ Returns default option if override is not provided """
        party_details = FCashOutUtils.get_counterparty_delivery_agent_details(self.acm_obj)
        bic = FCashOutUtils.get_bic(party_details)
        option = "J"
        if bic:
            option = "A"
        else:
            option = "J"
        return option

    # option setter
    def _set_OPTION_buy_delivery_agent(self):
        """ Returns getter name as string like 'delivery_agent_53A', 'delivery_agent_53D', 'delivery_agent_53J' """

        buy_delivery_agent_option = self.get_buy_delivery_agent_option()
        getter_name = 'buy_delivery_agent_53A'
        if buy_delivery_agent_option == "A":
            getter_name = 'buy_delivery_agent_53A'
        elif buy_delivery_agent_option == "J":
            getter_name = 'buy_delivery_agent_53J'
        else:
            notifier.WARN(
                "%s Option %s is not supported for tag %s. Mapping default option." % (self.swift_message_type,  str(buy_delivery_agent_option), 'delivery_agent_53a'))



        return getter_name

    # getter
    def buy_delivery_agent_53A(self):
        """ Returns dictionary consisting of delivery agent party details """
        return FCashOutUtils.get_counterparty_delivery_agent_details(self.acm_obj)

    # formatter
    def _format_buy_delivery_agent_53A(self, val):
        """ Formats the value provided by getter method """
        bic = val.get('BIC')
        account = val.get('ACCOUNT')
        if bic:
            val = str(bic)
            if account:
                val = '/' + str(account) + '\n' + str(val)
            return val


    # validator
    @validate_with(MT304.MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_53A_Type)
    def _validate_buy_delivery_agent_53A(self, val):
        """ Validates the value provided by formatter method """
        return val

    # setter
    def _setbuy_delivery_agent_53A(self, val):
        """ Sets the value on python object of MT304 """
        self.swift_obj.SequenceB_ForexTransactionDetails.SubsequenceB1_AmountBought.DeliveryAgent_A = val
        self.swift_obj.SequenceB_ForexTransactionDetails.SubsequenceB1_AmountBought.DeliveryAgent_A.swiftTag = "53A"



    # getter
    def buy_delivery_agent_53J(self):
        """ Returns dictionary consisting of delivery agent party details """
        return FCashOutUtils.get_counterparty_delivery_agent_details(self.acm_obj)

    # formatter
    def _format_buy_delivery_agent_53J(self, val):
        """ Formats the value provided by getter method """
        return self._format_Option_J(val)

    # validator
    @validate_with(MT304.MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_53J_Type)
    def _validate_buy_delivery_agent_53J(self, val):
        """ Validates the value provided by formatter method """
        return val

    # setter
    def _setbuy_delivery_agent_53J(self, val):
        """ Sets the value on python object of MT304 """
        self.swift_obj.SequenceB_ForexTransactionDetails.SubsequenceB1_AmountBought.DeliveryAgent_J = val
        self.swift_obj.SequenceB_ForexTransactionDetails.SubsequenceB1_AmountBought.DeliveryAgent_J.swiftTag = "53J"


    # ----------------------------------------------------------------------

    def get_buy_intermediary_option(self):
        """ Returns default option if override is not provided """
        party_details = FCashOutUtils.get_acquirer_intermediary_details(self.acm_obj)
        option = "J"
        if FCashOutUtils.get_bic(party_details):
            option = "A"
        else:
            option = "J"
        return option

    # option setter
    def _set_OPTION_buy_intermediary(self):
        #Returns getter name as string like 'buy_intermediary_56A', 'buy_intermediary_56D', 'buy_intermediary_56J'

        buy_intermediary_option = self.get_buy_intermediary_option()

        getter_name = 'buy_intermediary_56A'
        if buy_intermediary_option == "A":
            getter_name = 'buy_intermediary_56A'
        elif buy_intermediary_option == "J":
            getter_name = 'buy_intermediary_56J'
        else:
            notifier.WARN(
                "%s Option %s is not supported for tag %s. Mapping default option." % (self.swift_message_type, str(buy_intermediary_option), 'intermediary_56a'))
        return getter_name

    # getter
    def buy_intermediary_56A(self):
        """Returns dictionary consisting of intermediary party details """
        values_dict = FCashOutUtils.get_acquirer_intermediary_details(self.acm_obj)
        return values_dict

    # formatter
    def _format_buy_intermediary_56A(self, val):
        """ Formats the value provided by getter method """
        bic = val.get('BIC')
        account = val.get('ACCOUNT')
        if bic:
            val = str(bic)
            if account:
                val = "/" + str(account) + "\n" + str(val)
            return val

    # validator
    @validate_with(MT304.MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_56A_Type)
    def _validate_buy_intermediary_56A(self, val):
        """ Validates the value provided by formatter method """
        return val


    # setter
    def _setbuy_intermediary_56A(self, val):
        """ Sets the value on python object of MT304 """
        self.swift_obj.SequenceB_ForexTransactionDetails.SubsequenceB1_AmountBought.Intermediary_A = val
        self.swift_obj.SequenceB_ForexTransactionDetails.SubsequenceB1_AmountBought.Intermediary_A.swiftTag = "56A"


    # getter
    def buy_intermediary_56J(self):
        """ Returns dictionary consisting of intermediary party details """
        values_dict = FCashOutUtils.get_acquirer_intermediary_details(self.acm_obj)

        return values_dict

    # formatter
    def _format_buy_intermediary_56J(self, val):
        """Formats the value provided by getter method """
        return self._format_Option_J(val)

    # validator
    @validate_with(MT304.MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_56J_Type)
    def _validate_buy_intermediary_56J(self, val):
        """ Validates the value provided by formatter method """
        return val

    # setter
    def _setbuy_intermediary_56J(self, val):
        """ Sets the value on python object of MT304 """
        self.swift_obj.SequenceB_ForexTransactionDetails.SubsequenceB1_AmountBought.Intermediary_J = val
        self.swift_obj.SequenceB_ForexTransactionDetails.SubsequenceB1_AmountBought.Intermediary_J.swiftTag = "56J"

    # ----------------------------------------------------------------------
    def get_buy_receiving_agent_option(self):
        """ Returns default option if override is not provided """
        party_details = FCashOutUtils.get_acquirer_receiving_agent_details(self.acm_obj)
        option = "J"
        if FCashOutUtils.get_bic(party_details):
            option = "A"
        else:
            option = "J"
        return option

    # setter
    def _set_OPTION_buy_receiving_agent(self):
        buy_receiving_agent_option = self.get_buy_receiving_agent_option()
        getter_name = 'buy_receiving_agent_57A'

        if buy_receiving_agent_option == "A":
            getter_name = 'buy_receiving_agent_57A'
        elif buy_receiving_agent_option == "J":
            getter_name = 'buy_receiving_agent_57J'
        else:
            notifier.WARN("Option %s is not supported for tag %s. Mapping default option." % ( str(buy_receiving_agent_option), 'BuyReceivingAgent_57a'))

        return getter_name

    # getter
    def buy_receiving_agent_57A(self):
        """ Returns dictionary with keys 'ACCOUNT', 'BIC' and their corresponding values"""
        return FCashOutUtils.get_acquirer_receiving_agent_details(self.acm_obj)

    # formatter
    def _format_buy_receiving_agent_57A(self, val):
        """ Formats the value provided by getter method """
        bic = val.get('BIC')
        account = val.get('ACCOUNT')
        if bic:
            val = str(bic)
            if account:
                val = '/' + str(account) + '\n' + str(val)
            return val

    # validator
    @validate_with(MT304.MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_57A_Type)
    def _validate_buy_receiving_agent_57A(self, val):
        """ Validates the value provided by formatter method """
        return val

    # setter
    def _setbuy_receiving_agent_57A(self, val):
        self.swift_obj.SequenceB_ForexTransactionDetails.SubsequenceB1_AmountBought.ReceivingAgent_A = val
        self.swift_obj.SequenceB_ForexTransactionDetails.SubsequenceB1_AmountBought.ReceivingAgent_A.swiftTag = "57A"


    # getter
    def buy_receiving_agent_57J(self):
        """ Returns dictionary with keys 'NAME', 'ADDRESS', 'ACCOUNT' and their corresponding values """
        return FCashOutUtils.get_acquirer_receiving_agent_details(self.acm_obj)

    # formatter
    def _format_buy_receiving_agent_57J(self, val):
        """ Formats the value provided by getter method """
        return self._format_Option_J(val)


    # validator
    @validate_with(MT304.MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_57J_Type)
    def _validate_buy_receiving_agent_57J(self, val):
        """ Validates the value provided by formatter method """
        return val

    # setter
    def _setbuy_receiving_agent_57J(self, val):
        """ Sets the value on python object of MT304 """
        self.swift_obj.SequenceB_ForexTransactionDetails.SubsequenceB1_AmountBought.ReceivingAgent_J = val
        self.swift_obj.SequenceB_ForexTransactionDetails.SubsequenceB1_AmountBought.ReceivingAgent_J.swiftTag = "57J"


    # ------------------ currency_amount_sold_details -----------------------

    # getter
    def currency_amount_sold_33B(self):
        """ Returns dictionary with keys 'SELL_AMOUNT', 'SELL_CURRENCY' and their corresponding values """
        currency = None
        amount_sold = None
        val_dict = {}
        val_dict['SELL_AMOUNT'] = FCashOutUtils.get_sell_amount(self.acm_obj)
        val_dict['SELL_CURRENCY'] = FCashOutUtils.get_sell_currency(self.acm_obj)

        return val_dict


    # formatter
    def _format_currency_amount_sold_33B(self, val_dict):
        """ Formats the value provided by getter method """
        sell_amount = val_dict.get('SELL_AMOUNT')
        sell_currency = val_dict.get('SELL_CURRENCY')
        if sell_amount and sell_currency:
            sell_amount = FCashOutUtils.apply_currency_precision(sell_currency, float(sell_amount))
            if sell_amount < 0:
                sell_amount = abs(sell_amount)
            val = str(sell_currency) + str(FSwiftMLUtils.float_to_swiftmt(str(sell_amount)))
            return val


    # validator
    @validate_with(MT304.MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_33B_Type)
    def _validate_currency_amount_sold_33B(self, val):
        """ Validates the value provided by formatter method """
        FCashOutUtils.validate_currency_amount(val, "Currency Amount Sold")
        amount = FSwiftGeneralUtils.get_amount_from_currency_amount(val)
        FCashOutUtils.validateAmount(amount.replace('.', ','), 15, "Currency Amount Sold")
        return val


    # setter
    def _set_currency_amount_sold_33B(self, val):
        """ Sets the value on python object of MT304 """
        self.swift_obj.SequenceB_ForexTransactionDetails.SubsequenceB2_AmountSold.CurrencyAmountSold = val
        self.swift_obj.SequenceB_ForexTransactionDetails.SubsequenceB2_AmountSold.CurrencyAmountSold.swiftTag = "33B"


    # ------------------ sell_delivery_agent -----------------------
    # option getter
    def get_sell_delivery_agent_option(self):
        """ Returns default option if override is not provided """
        option = "J"
        party_details = FCashOutUtils.get_acquirer_delivery_agent_details(self.acm_obj)
        if FCashOutUtils.get_bic(party_details):
            option = "A"
        else:
            option = "J"
        return option

    # option setter
    def _set_OPTION_sell_delivery_agent(self):

        sell_delivery_agent_option = self.get_sell_delivery_agent_option()
        getter_name = 'sell_delivery_agent_53A'

        if sell_delivery_agent_option == "A":
            getter_name = 'sell_delivery_agent_53A'
        elif sell_delivery_agent_option == "J":
            getter_name = 'sell_delivery_agent_53J'
        else:
            notifier.WARN("Option %s is not supported for tag %s. Mapping default option." % (str(sell_delivery_agent_option), 'SellDeliveryAgent_53a'))
        return getter_name


    # getter
    def sell_delivery_agent_53A(self):
        """ Returns dictionary with keys 'ACCOUNT', 'BIC' and their corresponding values """
        values_dict = FCashOutUtils.get_acquirer_delivery_agent_details(self.acm_obj)

        return values_dict


    # formatter
    def _format_sell_delivery_agent_53A(self, val):
        """ Formats the value provided by getter method """
        bic = val.get('BIC')
        account = val.get('ACCOUNT')
        if bic:
            val = str(bic)
            if account:
                val = '/' + str(account) + '\n' + str(val)
            return val


    # validator
    @validate_with(MT304.MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_53A_Type)
    def _validate_sell_delivery_agent_53A(self, val):
        """ Validates the value provided by formatter method """
        return val


    # setter
    def _setsell_delivery_agent_53A(self, val):
        """Sets the value on python object of MT304 """
        self.swift_obj.SequenceB_ForexTransactionDetails.SubsequenceB2_AmountSold.DeliveryAgent_A = val
        self.swift_obj.SequenceB_ForexTransactionDetails.SubsequenceB2_AmountSold.DeliveryAgent_A.swiftTag = "53A"



    # getter
    def sell_delivery_agent_53J(self):
        """ Returns dictionary with keys 'NAME', 'ACCOUNT', 'ADDRESS', 'BIC' and their corresponding values """
        return FCashOutUtils.get_acquirer_delivery_agent_details(self.acm_obj)


    # formatter
    def _format_sell_delivery_agent_53J(self, val):
        """ Formats the value provided by getter method """
        return self._format_Option_J(val)


    # validator
    @validate_with(MT304.MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_53J_Type)
    def _validate_sell_delivery_agent_53J(self, val):
        """ Validates the value provided by formatter method """
        return val


    # setter
    def _setsell_delivery_agent_53J(self, val):
        """ Sets the value on python object of MT304 """
        self.swift_obj.SequenceB_ForexTransactionDetails.SubsequenceB2_AmountSold.DeliveryAgent_J = val
        self.swift_obj.SequenceB_ForexTransactionDetails.SubsequenceB2_AmountSold.DeliveryAgent_J.swiftTag = "53J"


    # ------------------ sell_intermediary -----------------------
    #option_getter
    def get_sell_intermediary_option(self):
        """ Returns default option if override is not provided """
        party_details = FCashOutUtils.get_counterparty_intermediary_details(self.acm_obj)
        option = "J"
        if FCashOutUtils.get_bic(party_details):
            option = "A"
        else:
            option = "J"
        return option


    # setter
    def _set_OPTION_sell_intermediary(self):
        sell_intermediary_option = self.get_sell_intermediary_option()

        if sell_intermediary_option == "A":
            getter_name = 'sell_intermediary_56A'
        elif sell_intermediary_option == "J":
            getter_name = 'sell_intermediary_56J'
        else:
            notifier.WARN("Option %s is not supported for tag %s. Mapping default option." % (str(sell_intermediary_option), 'SellIntermediary_56a'))
            getter_name =  'sell_intermediary_56A'
        return getter_name


    # getter
    def sell_intermediary_56A(self):
        """ Returns dictionary with keys 'ACCOUNT', 'BIC' and their corresponding values """
        return FCashOutUtils.get_counterparty_intermediary_details(self.acm_obj)


    # formatter
    def _format_sell_intermediary_56A(self, val):
        """ Formats the value provided by getter method """
        bic = val.get('BIC')
        account = val.get('ACCOUNT')
        if bic:
            val = str(bic)
            if account:
                val = "/" + str(account) + "\n" + str(val)
            return val

    # validator
    @validate_with(MT304.MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_56A_Type)
    def _validate_sell_intermediary_56A(self, val):
        """ Validates the value provided by formatter method """
        return val


    # setter
    def _setsell_intermediary_56A(self, val):
        """ Sets the value on python object of MT304 """
        self.swift_obj.SequenceB_ForexTransactionDetails.SubsequenceB2_AmountSold.Intermediary_A = val
        self.swift_obj.SequenceB_ForexTransactionDetails.SubsequenceB2_AmountSold.Intermediary_A.swiftTag = "56A"



    # getter
    def sell_intermediary_56J(self):
        """ Returns dictionary with keys 'NAME', 'ACCOUNT', 'ADDRESS' and their corresponding values """
        return FCashOutUtils.get_counterparty_intermediary_details(self.acm_obj)

    # formatter
    def _format_sell_intermediary_56J(self, val):
        """ Formats the value provided by getter method """
        return self._format_Option_J(val)

    # validator
    @validate_with(MT304.MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_56J_Type)
    def _validate_sell_intermediary_56J(self, val):
        """ Validates the value provided by formatter method """
        return val

    # setter
    def _setsell_intermediary_56J(self, val):
        """ Sets the value on python object of MT304 """
        self.swift_obj.SequenceB_ForexTransactionDetails.SubsequenceB2_AmountSold.Intermediary_J = val
        self.swift_obj.SequenceB_ForexTransactionDetails.SubsequenceB2_AmountSold.Intermediary_J.swiftTag = "56J"


    # ------------------ sell_receiving_agent -----------------------
    # option_getter
    def get_sell_receiving_agent_option(self):
        """ Returns default option if override is not provided """
        party_details = FCashOutUtils.get_counterparty_receiving_agent_details(self.acm_obj)
        option = "J"
        if FCashOutUtils.get_bic(party_details):
            option = "A"
        else:
            option = "J"
        return option


    # option setter
    def _set_OPTION_sell_receiving_agent(self):
        sell_receiving_agent_option = self.get_sell_receiving_agent_option()


        if sell_receiving_agent_option == "A":
            getter_name = 'sell_receiving_agent_57A'
        elif sell_receiving_agent_option == "J":
            getter_name = 'sell_receiving_agent_57J'
        else:
            notifier.WARN("Option %s is not supported for tag %s. Mapping default option." % (str(sell_receiving_agent_option), 'SellReceivingAgent_57a'))
            getter_name = 'sell_receiving_agent_57A'

        return getter_name


    # getter
    def sell_receiving_agent_57A(self):
        """ Returns dictionary with keys  'ACCOUNT', 'BIC' and their corresponding values """
        return FCashOutUtils.get_counterparty_receiving_agent_details(self.acm_obj)


    # formatter
    def _format_sell_receiving_agent_57A(self, val):
        """ Formats the value provided by getter method """
        bic = val.get('BIC')
        account = val.get('ACCOUNT')
        if bic:
            val = str(bic)
            if account:
                val = '/' + str(account) + '\n' + str(val)
            return val


    # validator
    @validate_with(MT304.MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_57A_Type)
    def _validate_sell_receiving_agent_57A(self, val):
        """ Validates the value provided by formatter method """
        return val


    # setter
    def _setsell_receiving_agent_57A(self, val):
        """ Sets the value on python object of MT304 """
        self.swift_obj.SequenceB_ForexTransactionDetails.SubsequenceB2_AmountSold.ReceivingAgent_A = val
        self.swift_obj.SequenceB_ForexTransactionDetails.SubsequenceB2_AmountSold.ReceivingAgent_A.swiftTag = "57A"



    # getter
    def sell_receiving_agent_57J(self):
        """ Returns dictionary with keys 'NAME', 'ACCOUNT', 'ADDRESS' and their corresponding values """

        return FCashOutUtils.get_counterparty_receiving_agent_details(self.acm_obj)


    # formatter
    def _format_sell_receiving_agent_57J(self, val):
        """ Formats the value provided by getter method """
        return self._format_Option_J(val)

    # validator
    @validate_with(MT304.MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_57J_Type)
    def _validate_sell_receiving_agent_57J(self, val):
        """ Validates the value provided by formatter method """
        return val


    # setter
    def _setsell_receiving_agent_57J(self, val):
        """ Sets the value on python object of MT304 """
        self.swift_obj.SequenceB_ForexTransactionDetails.SubsequenceB2_AmountSold.ReceivingAgent_J = val
        self.swift_obj.SequenceB_ForexTransactionDetails.SubsequenceB2_AmountSold.ReceivingAgent_J.swiftTag = "57J"


    # ------------------ sell_beneficiary_institution -----------------------

    # option_getter
    def get_sell_beneficiary_institution_option(self):
        """ Returns default option if override is not provided """
        option = "J"
        party_details = FCashOutUtils.get_beneficiary_institution_details(self.acm_obj)
        if FCashOutUtils.get_bic(party_details):
            option = "A"
        else:
            option = "J"
        return option


    # option setter
    def _set_OPTION_sell_beneficiary_institution(self):
        sell_beneficiary_institution_option = self.get_sell_beneficiary_institution_option()
        if sell_beneficiary_institution_option == "A":
            getter_name = 'sell_beneficiary_institution_58A'
        elif sell_beneficiary_institution_option == "J":
            getter_name = 'sell_beneficiary_institution_58J'
        else:
            notifier.WARN("Option %s is not supported for tag %s. Mapping default option." % (str(sell_beneficiary_institution_option), 'SellBeneficiaryInstitution_58a'))
            getter_name = 'sell_beneficiary_institution_58A'
        return getter_name


    # getter
    def sell_beneficiary_institution_58A(self):
        """ Returns dictionary with keys  'ACCOUNT',  'BIC' and their corresponding values """
        return FCashOutUtils.get_beneficiary_institution_details(self.acm_obj)


    # formatter
    def _format_sell_beneficiary_institution_58A(self, val):
        """ Formats the value provided by getter method """
        bic = val.get('BIC')
        account = val.get('ACCOUNT')
        if bic:
            val = str(bic)
            if account:
                val = '/' + str(account) + '\n' + str(val)
            return val


    # validator
    @validate_with(MT304.MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_58A_Type)
    def _validate_sell_beneficiary_institution_58A(self, val):
        """ Validates the value provided by formatter method """
        return val


    # setter
    def _setsell_beneficiary_institution_58A(self, val):
        """ Sets the value on python object of MT304 """
        self.swift_obj.SequenceB_ForexTransactionDetails.SubsequenceB2_AmountSold.BeneficiaryInstitution_A = val
        self.swift_obj.SequenceB_ForexTransactionDetails.SubsequenceB2_AmountSold.BeneficiaryInstitution_A.swiftTag = "58A"




    # getter
    def sell_beneficiary_institution_58J(self):
        """ Returns dictionary with keys 'NAME', 'ACCOUNT', 'ADDRESS', 'BIC' and their corresponding values """
        return FCashOutUtils.get_beneficiary_institution_details(self.acm_obj)


    # formatter
    def _format_sell_beneficiary_institution_58J(self, val):
        """ Formats the value provided by getter method """
        return self._format_Option_J(val)


    # validator
    @validate_with(MT304.MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_58J_Type)
    def _validate_sell_beneficiary_institution_58J(self, val):
        """ Validates the value provided by formatter method """
        return val


    # setter
    def _setsell_beneficiary_institution_58J(self, val):
        """ Sets the value on python object of MT304 """
        self.swift_obj.SequenceB_ForexTransactionDetails.SubsequenceB2_AmountSold.BeneficiaryInstitution_J = val
        self.swift_obj.SequenceB_ForexTransactionDetails.SubsequenceB2_AmountSold.BeneficiaryInstitution_J.swiftTag = "58J"


    # block getter
    def reference_to_previous_deals_21P(self):
        """ Returns list of references to all previous deals"""
        val = []
        val = FCashOutUtils.reference_of_previous_deals(self.acm_obj)
        return val

    # block formatter
    def _format_reference_to_previous_deals_21P(self, val):
        """ Returns formatted value """
        return val

    # block validator
    def _validate_reference_to_previous_deals_21P(self, reference_list):
        """ Validates block consisting reference to previous deals """
        validated_value_list = []
        for each_reference in reference_list:
            validated_val = self._validate_reference_to_previous_deals(each_reference)
            if validated_val:
                validated_value_list.append(validated_val)

        return validated_value_list



    @validate_with(MT304.MT304_SequenceD_AccountingInformation_21P_Type)
    def _validate_reference_to_previous_deals(self, val):
        """ Validates the value provided by formatter method """
        return val

    # check condition
    def _check_condition_set_reference_to_previous_deals_21P(self):
        """ Checks conditional presence for sequence D"""
        condition = False
        if self.is_seq_d:
            condition = True
        return condition

    # block setter
    def _set_reference_to_previous_deals_21P(self, val):
        """ Set the value provided by validator"""
        for each in val:
            self.swift_obj.SequenceD_AccountingInformation.ReferenceToPreviousDeals.append(each)
            self.swift_obj.SequenceD_AccountingInformation.ReferenceToPreviousDeals[-1].swiftTag = "21P"

    # ------------------ GainIndicator  -----------------------
    # getter
    def gain_indicator_17G(self):
        """ Returns string indicating gain """
        gain_indicator = FCashOutUtils.gain_indicator(self.acm_obj)
        return gain_indicator

    # formatter
    def _format_gain_indicator_17G(self, val):
        """ Formats the value provided by getter method """
        if val:
            return val

    # validator
    @validate_with(MT304.MT304_SequenceD_AccountingInformation_17G_Type)
    def _validate_gain_indicator_17G(self, val):
        """ Validates the value provided by formatter method """
        return val

    # check condition
    def _check_condition_set_gain_indicator_17G(self):
        """ Checks conditional presence for sequence D"""
        condition = False
        if self.is_seq_d:
            condition = True
        return condition


    # setter
    def _set_gain_indicator_17G(self, val):
        """ Sets the value on python object of MT304 """
        self.swift_obj.SequenceD_AccountingInformation.GainIndicator = val
        self.swift_obj.SequenceD_AccountingInformation.GainIndicator.swiftTag = "17G"


    # ------------------ CurrencyAmount  -----------------------
    # getter
    def currency_amount_32G(self):
        """ Returns dict consisting of keys: CURRENCY, AMOUNT and their corresponding values """
        currency_amount_dict = FCashOutUtils.calculate_currency_amount(self.acm_obj)
        return currency_amount_dict


    # formatter
    def _format_currency_amount_32G(self, val_dict):
        """ Formats the value provided by getter method """
        currency = val_dict['CURRENCY']
        amount = val_dict['AMOUNT']
        if currency and str(amount):
            amount = FCashOutUtils.apply_currency_precision(currency, float(amount))
            val = str(currency) + str(FSwiftMLUtils.float_to_swiftmt(str(abs(amount))))
            return val

    # validator
    @validate_with(MT304.MT304_SequenceD_AccountingInformation_32G_Type)
    def _validate_currency_amount_32G(self, val):
        """ Validates the value provided by formatter method """
        FCashOutUtils.validate_currency_amount(val, "Currency Amount")
        amount = FSwiftGeneralUtils.get_amount_from_currency_amount(val)
        FCashOutUtils.validateAmount(amount.replace('.', ','), 15, "Currency Amount")
        return val

    # check condition
    def _check_condition_set_currency_amount_32G(self):
        """ Checks conditional presence for sequence D"""
        condition = False
        if self.is_seq_d:
            condition = True
        return condition

    # setter
    def _set_currency_amount_32G(self, val):
        """ Sets the value on python object of MT304 """
        self.swift_obj.SequenceD_AccountingInformation.CurrencyAmount = val
        self.swift_obj.SequenceD_AccountingInformation.CurrencyAmount.swiftTag = "32G"

    # optional sequence setter
    def __set_optional_seq_d(self):
        """ Setter for optiuonal sequence D"""
        condition = False
        if self.acm_obj.Trade().IsFxForward() and self.acm_obj.Trade().Type() == 'Closing':

            self.swift_obj.SequenceD_AccountingInformation = MT304.MT304_SequenceD_AccountingInformation()
            self.swift_obj.SequenceD_AccountingInformation.swiftTag = "15D"
            self.swift_obj.SequenceD_AccountingInformation.formatTag = "False"
            condition = True
        return condition

    #------------------------- Custom functions -------------------------

    def fund_manager(self):
        """ Raises Not Implemented error as default if implementation not provided, expects party name for fund manager """
        raise NotImplementedError

    def executing_broker(self):
        """ Raises Not Implemented error as default if implementation not provided, expects party name for executing broker """
        raise NotImplementedError


class FMT304OutBaseMessageHeader(FSwiftWriterMessageHeader.FSwiftWriterMessageHeader):
    def __init__(self, acm_obj, swift_msg_tags):
        self.mt_typ = "304"
        self.acm_obj = acm_obj
        self.swift_msg_tags = swift_msg_tags
        super(FMT304OutBaseMessageHeader, self).__init__(self.mt_typ, self.acm_obj, swift_msg_tags)

    def message_type(self):
        return "304"

    def sender_logical_terminal_address(self):
        """LT code is hardcoded as A for sender"""
        terminal_address = ""
        senders_bic = ''
        senders_bic = FCashOutUtils.get_senders_bic(self.acm_obj)
        if not senders_bic:
            raise Exception("SENDER_BIC is a mandatory field for Swift message header")
        terminal_address = self.logical_terminal_address(senders_bic, "A")
        return terminal_address

    def receiver_logical_terminal_address(self):
        """LT code is hardcoded as X for sender"""
        terminal_address = ""
        receivers_bic = ''
        receivers_bic = FCashOutUtils.get_receivers_bic(self.acm_obj)
        terminal_address = self.logical_terminal_address(receivers_bic, "X")
        return terminal_address

    def logical_terminal_address(self, bic_code, lt_code):
        terminal_address = ""
        branch_code = "XXX"
        if bic_code:
            if len(str(bic_code)) == 8:
                terminal_address = str(bic_code) + lt_code + branch_code
            elif len(str(bic_code)) == 11:
                branch_code = bic_code[8:]
                terminal_address = str(bic_code[:8]) + lt_code + branch_code
            else:
                raise Exception("Invalid BIC <%s>)" % bic_code)
        return terminal_address


    def message_user_reference(self):
        """MUR is sent in the format FAC-SEQNBR of confirmation-VersionID"""
        settlement_prefix = FCashOutUtils.get_settlement_reference_prefix()
        cash_settlement_out_config = FSwiftWriterUtils.get_config_from_fparameter('FCashOut_Config')
        include_tradeno_in_tag_20 = FSwiftMLUtils.incude_trade_no_in_tag20(cash_settlement_out_config)
        val = FSwiftMLUtils.message_user_reference(self.acm_obj, settlement_prefix, include_tradeno_in_tag_20=include_tradeno_in_tag_20)
        return "{108:%s}" % val


class FMT304OutBaseNetworkRules(object):
    """ class for network rules """

    def __init__(self, swift_message_obj, swift_message, acm_obj):
        self.swift_message_obj = swift_message_obj
        self.swift_message = swift_message
        self.acm_obj = acm_obj

    def network_rule_C1(self):
        """ In sequence A, the presence of field 21 depends on fields 22A as follows:
        ----------------------------------------------------------------------------
        If fields 22A is:                                        Then field 21 is:
        ----------------------------------------------------------------------------
         AMND                                                   Mandatory
         CANC                                                   Mandatory
         DUPL                                                   Optional
         NEWT                                                   Ptional
        """
        if self.swift_message_obj.SequenceA_GeneralInformation.TypeOfOperation.value() in ['AMND', 'CANC']:
            if not self.swift_message_obj.SequenceA_GeneralInformation.RelatedReference or not self.swift_message_obj.SequenceA_GeneralInformation.RelatedReference.value():
                return "Field 21 in Sequence A is mandatory if field 22A in Sequence A is equal to either AMND or CANC"
        return ''

    def network_rule_C2(self):
        """ In sequence A, the presence of fields 17O and 17N depends on field 94A as follows (Error code(s): D03):
        ----------------------------------------------------------------------------
        if field 94A is ...  then field 17O is ... and field 17N is ...
        ----------------------------------------------------------------------------
        AFWD                 Mandatory               Mandatory
        ANDF                 Mandatory               Not allowed
        ASET                 Not allowed             Not allowed

        """
        if self.swift_message_obj.SequenceA_GeneralInformation.ScopeOfOperation.value() == 'AFWD':
            if (not self.swift_message_obj.SequenceA_GeneralInformation.OpenIndicator or not self.swift_message_obj.SequenceA_GeneralInformation.OpenIndicator.value())\
            or (not self.swift_message_obj.SequenceA_GeneralInformation.NetSettlementIndicator or not self.swift_message_obj.SequenceA_GeneralInformation.NetSettlementIndicator.value()):
                return "Field 17O , Field 17N in Sequence A is mandatory as Field 94A has value 'AFWD' "

        elif self.swift_message_obj.SequenceA_GeneralInformation.ScopeOfOperation.value() == 'ANDF':
            if (not self.swift_message_obj.SequenceA_GeneralInformation.OpenIndicator or not self.swift_message_obj.SequenceA_GeneralInformation.OpenIndicator.value()) \
            and (not self.swift_message_obj.SequenceA_GeneralInformation.NetSettlementIndicator or self.swift_message_obj.SequenceA_GeneralInformation.NetSettlementIndicator.value()):
                return "Field 17O is Mandatory and Field 17N is not allowed as Field 94A has value 'ANDF' "

        elif self.swift_message_obj.SequenceA_GeneralInformation.ScopeOfOperation.value() == 'ASET':
            if (self.swift_message_obj.SequenceA_GeneralInformation.OpenIndicator and self.swift_message_obj.SequenceA_GeneralInformation.OpenIndicator.value()) \
            and (self.swift_message_obj.SequenceA_GeneralInformation.NetSettlementIndicator and \
            self.swift_message_obj.SequenceA_GeneralInformation.NetSettlementIndicator.value()):
                return "Field 17O and Field 17N is not allowed as Field 94A has value 'ASET' "
        return ''


    def network_rule_C3(self):
        """ In sequence A, the presence of field 17F depends on field 17O as follows (Error code(s): D04):
        ----------------------------------------------------------------------------
        if field 17O is...        then field 17F is ...
        ----------------------------------------------------------------------------
        Y                         Not allowed
        N                         Mandatory
        Not present               Not allowed
        """
        if self.swift_message_obj.SequenceA_GeneralInformation.OpenIndicator and self.swift_message_obj.SequenceA_GeneralInformation.OpenIndicator.value() == 'Y':
            if self.swift_message_obj.SequenceA_GeneralInformation.FinalCloseIndicator and self.swift_message_obj.SequenceA_GeneralInformation.FinalCloseIndicator.value():
                return "Field 17N is not allowed as Field 17O has value 'Y' "

        elif self.swift_message_obj.SequenceA_GeneralInformation.OpenIndicator and self.swift_message_obj.SequenceA_GeneralInformation.OpenIndicator.value() == 'N':
            if self.swift_message_obj.SequenceA_GeneralInformation.FinalCloseIndicator and not self.swift_message_obj.SequenceA_GeneralInformation.FinalCloseIndicator.value():
                return "Field 17N is mandatory as Field 17O has value 'N' "
        elif self.swift_message_obj.SequenceA_GeneralInformation.OpenIndicator and not self.swift_message_obj.SequenceA_GeneralInformation.OpenIndicator.value():
                return 'Field 17N is not allowed as Field 17O is not present'
        return ''


    def network_rule_C4(self):
        #
        """ The presence of sequence D and fields 21P, 17G, and 32G in sequence D depends on fields 94A and 17O as follows
         (Error code(s): D23):
        -----------------------------------------------------------------------------------------------------------------------------------------------
        if field 94A is...         and if field 17O is...         Then sequence D is ...               Sequence D and fields 21P,
                                                                                                        17G, and 32G are...
        -----------------------------------------------------------------------------------------------------------------------------------------------
        AFWD                       N                              Mandatory                            Mandatory
        AFWD                       Y                              Optional                             Not allowed
        ANDF                       N                              Optional                             Optional
        ANDF                       Y                              Optional                             Optional
        ASET                       Not applicable                 Optional                             Not allowed
        """

        if self.swift_message_obj.SequenceA_GeneralInformation.ScopeOfOperation:


            if self.swift_message_obj.SequenceA_GeneralInformation.ScopeOfOperation.value() == 'AFWD':

                if self.swift_message_obj.SequenceA_GeneralInformation.OpenIndicator and self.swift_message_obj.SequenceA_GeneralInformation.OpenIndicator.value() == 'N':

                    if not self.swift_message_obj.SequenceD_AccountingInformation:
                        return "Field 94A has value 'AFWD' and 17O has value 'N' hence Sequence D is mandatory along with fields 21P, 17G and 32G"

                    elif self.swift_message_obj.SequenceD_AccountingInformation:
                        field_21_in_seq_D = False
                        if self.swift_message_obj.SequenceD_AccountingInformation.ReferenceToPreviousDeals:
                            for reference_field in self.swift_message_obj.SequenceD_AccountingInformation.ReferenceToPreviousDeals:
                                if reference_field.value():
                                    field_21_in_seq_D = True
                        if not field_21_in_seq_D and (self.swift_message_obj.SequenceD_AccountingInformation.GainIndicator and not self.swift_message_obj.SequenceD_AccountingInformation.GainIndicator.value()) \
                            or (self.swift_message_obj.SequenceD_AccountingInformation.CurrencyAmount and not self.swift_message_obj.SequenceD_AccountingInformation.CurrencyAmount.value()):

                            return "Field 94A has value 'AFWD' and 17O has value 'N' hence Sequence D is mandatory along with fields 21P, 17G and 32G"
                elif self.swift_message_obj.SequenceA_GeneralInformation.OpenIndicator and self.swift_message_obj.SequenceA_GeneralInformation.OpenIndicator.value() == 'Y':

                    if self.swift_message_obj.SequenceD_AccountingInformation:
                        if (self.swift_message_obj.SequenceD_AccountingInformation.ReferenceToPreviousDeals and self.swift_message_obj.SequenceD_AccountingInformation.ReferenceToPreviousDeals.value())\
                        or (self.swift_message_obj.SequenceD_AccountingInformation.GainIndicator and self.swift_message_obj.SequenceD_AccountingInformation.GainIndicator.value())\
                        or (self.swift_message_obj.SequenceD_AccountingInformation.CurrencyAmount and self.swift_message_obj.SequenceD_AccountingInformation.CurrencyAmount.value()):
                            return "Field 94A has value 'AFWD' and 17O has value 'Y' hence Sequence D is optional and fields 21P, 17G and 32G are NOT allowed"

            elif self.swift_message_obj.SequenceA_GeneralInformation.ScopeOfOperation.value() == 'ASET':

                if self.swift_message_obj.SequenceD_AccountingInformation:

                    if (self.swift_message_obj.SequenceD_AccountingInformation.ReferenceToPreviousDeals and self.swift_message_obj.SequenceD_AccountingInformation.ReferenceToPreviousDeals.value())\
                            or (self.swift_message_obj.SequenceD_AccountingInformation.GainIndicator and self.swift_message_obj.SequenceD_AccountingInformation.GainIndicator.value())\
                            or (self.swift_message_obj.SequenceD_AccountingInformation.CurrencyAmount and self.swift_message_obj.SequenceD_AccountingInformation.CurrencyAmount.value()):
                        return "Field 94A has value 'ASET' hence Sequence D is optional and fields 21P, 17G and 32G are NOT allowed"
        return ''


    def network_rule_C5(self):
        """
        The presence of sequence E depends on fields 17F and 17N as follows (Error code(s): D29):
        -----------------------------------------------------------------------------------------------------------------------------------------------
        if field 17F is ...  and field 17N is ...       Then sequence E is ...
        -----------------------------------------------------------------------------------------------------------------------------------------------
        Y                    Y                          Mandatory
        Y                    N                          Not allowed
        Y                    Not present                Optional
        N                    Y or N or not present      Not allowed
        Not present          Y or N or not present      Not allowed """

        if self.swift_message_obj.SequenceA_GeneralInformation.FinalCloseIndicator:
            if self.swift_message_obj.SequenceA_GeneralInformation.FinalCloseIndicator.value() == 'Y':
                if self.swift_message_obj.SequenceA_GeneralInformation.NetSettlementIndicator and self.swift_message_obj.SequenceA_GeneralInformation.NetSettlementIndicator.value() == 'Y':
                    if not self.swift_message_obj.SequenceE_NetAmountToBeSettled:
                        return "Field 17F has value 'Y' and Field 17N has value 'Y', hence Sequence E is mandatory"
                elif self.swift_message_obj.SequenceA_GeneralInformation.NetSettlementIndicator and self.swift_message_obj.SequenceA_GeneralInformation.NetSettlementIndicator.value() == 'N':
                    if self.swift_message_obj.SequenceE_NetAmountToBeSettled:
                        return "Field 17F has value 'Y' and Field 17N has value 'N', hence Sequence E is NOT allowed"

            elif self.swift_message_obj.SequenceA_GeneralInformation.FinalCloseIndicator.value() == 'N':
                if self.swift_message_obj.SequenceE_NetAmountToBeSettled:
                    return "Field 17F has value 'N', hence Sequence E is NOT allowed"

                return ''
        elif not self.swift_message_obj.SequenceA_GeneralInformation.FinalCloseIndicator:
            if self.swift_message_obj.SequenceE_NetAmountToBeSettled:
                return "Field 17F is not present, hence Sequence E is not allowed"

        return ''


    def network_rule_C6(self):
        """ In all optional sequences, the fields with status M must be present if the sequence is present, and are otherwise not allowed (Error code(s): C32)."""

        return ''


    def network_rule_C7(self):
        """ In sequence D, field 30F may only be present if field 34B is present (Error code(s): C20). """
        if self.swift_message_obj.SequenceD_AccountingInformation:
            if not self.swift_message_obj.SequenceD_AccountingInformation.CommissionAndFeesCurrencyAndAmount or not self.swift_message_obj.CommissionAndFeesCurrencyAndAmount.value():
                if self.swift_message_obj.SequenceD_AccountingInformation.CommissionAndFeesSettlementDate and self.swift_message_obj.SequenceD_AccountingInformation.CommissionAndFeesSettlementDate.value():
                    return "In sequence D, field 30F may only be present if field 34B is present "
        return ''


    def network_rule_C8(self):
        """ In sequence A, if field 94A contains "ANDF", then fields 32E, 14S and 21A are optional and field 30U is mandatory, otherwise fields 32E, 14S, 21A and 30U are not allowed (Error    code(s): C87):
        -----------------------------------------------------------------------------------------------------------------------------------------------
        if field 94A is ...       then fields 32E, 14S, 26K and 21A are ...                 and field 30U is ...
        -----------------------------------------------------------------------------------------------------------------------------------------------
        ANDF                      Optional                                              Mandatory
        AFWD, ASET                Not allowed                                           Not allowed
        """
        if self.swift_message_obj.SequenceA_GeneralInformation.ScopeOfOperation:

            if self.swift_message_obj.SequenceA_GeneralInformation.ScopeOfOperation.value() == 'ANDF':
                if not self.swift_message_obj.SequenceA_GeneralInformation.ValuationDate or not self.swift_message_obj.SequenceA_GeneralInformation.ValuationDate.value():
                    return "Field 94A has value 'ANDF' hence field 30U is mandatory"


            elif self.swift_message_obj.SequenceA_GeneralInformation.ScopeOfOperation.value() in ['AFWD', 'ASET']:

                if (self.swift_message_obj.SequenceA_GeneralInformation.SettlementCurrency and self.swift_message_obj.SequenceA_GeneralInformation.SettlementCurrency.value()) \
                    or (self.swift_message_obj.SequenceA_GeneralInformation.SettlementRateSource and self.swift_message_obj.SequenceA_GeneralInformation.SettlementRateSource.value())\
                    or (self.swift_message_obj.SequenceA_GeneralInformation.ReferenceToOpeningInstruction and self.swift_message_obj.SequenceA_GeneralInformation.ReferenceToOpeningInstruction.value())\
                    or (self.swift_message_obj.SequenceA_GeneralInformation.ValuationDate and  self.swift_message_obj.SequenceA_GeneralInformation.ValuationDate.value())\
                    or (self.swift_message_obj.SequenceA_GeneralInformation.CalculationAgent and  self.swift_message_obj.SequenceA_GeneralInformation.CalculationAgent.value())  :


                    return "Field 32E, 14S, 21A, 26K and 30U are NOT allowed"


        return ''


    def network_rule_C9(self):
        """
        In sequence D, if field 15D is present then at least one of the other fields of sequence D must be present (Error code(s): C98).
        """
        field_21_in_seq_D = False
        if self.swift_message_obj.SequenceD_AccountingInformation:
            if self.swift_message_obj.SequenceD_AccountingInformation.ReferenceToPreviousDeals:
                for reference_field in self.swift_message_obj.SequenceD_AccountingInformation.ReferenceToPreviousDeals:
                    if reference_field.value():
                        field_21_in_seq_D = True
            if not field_21_in_seq_D or (self.swift_message_obj.SequenceD_AccountingInformation.GainIndicator and not self.swift_message_obj.SequenceD_AccountingInformation.GainIndicator.value()) \
            or (self.swift_message_obj.SequenceD_AccountingInformation.CurrencyAmount and not self.swift_message_obj.SequenceD_AccountingInformation.CurrencyAmount.value()) \
            or (self.swift_message_obj.SequenceD_AccountingInformation.CommissionAndFeesCurrencyAndAmount and not self.swift_message_obj.SequenceD_AccountingInformation.CommissionAndFeesCurrencyAndAmount.value()) \
            or (self.swift_message_obj.SequenceD_AccountingInformation.CommissionAndFeesSettlementDate and not self.swift_message_obj.SequenceD_AccountingInformation.CommissionAndFeesSettlementDate.value()):


                return "Atleast one of the fields should be present in Sequence D"
        return ''

    def network_rule_C10(self):
        """
        In sequence B, field 35C may only be present if field 94A in sequence A contains "ANDF" and 
        the currency in either field 32B or field 33B in sequence B contains "XXX" (Error code(s): C87)
        
        ---------------------------------------------------------------------------------------------------------------------------------------------
        Sequence A             Subsequence B1                            Subsequence B2                            Sequence B
        if field 94A is ...    and if subfield 1 of field 32B is ...     and if subfield 1 of field 33B is ...     then field 35C is ...
        ---------------------------------------------------------------------------------------------------------------------------------------------
        AFWD, ASET            Any value                                  Any value                                 Not allowed
        ANDF                  Not XXX                                    Not XXX                                   Not allowed
        ANDF                  XXX                                        Any value                                 Optional
        ANDF                  Any value                                  XXX                                       Optional
        ---------------------------------------------------------------------------------------------------------------------------------------------
        """
        bought_currency_amount = self.swift_message_obj.SequenceB_ForexTransactionDetails.SubsequenceB1_AmountBought.CurrencyAmountBought
        sold_currency_amount = self.swift_message_obj.SequenceB_ForexTransactionDetails.SubsequenceB2_AmountSold.CurrencyAmountSold
        
        if self.swift_message_obj.SequenceB_ForexTransactionDetails.DigitalTokenIdentifier:
            if not (self.swift_message_obj.SequenceA_GeneralInformation.ScopeOfOperation.value() == 'ANDF' and \
                ((str(bought_currency_amount)[:3] == "XXX" and str(sold_currency_amount)[:3] != "XXX") or \
                 (str(bought_currency_amount)[:3] != "XXX" and str(sold_currency_amount)[:3] == "XXX"))):
                return 'In sequence B, field 35C may only be present if field 94A in sequence A contains "ANDF" and the currency in either field 32B or field 33B in sequence B contains "XXX" (Error code(s): C87)'
        return ''


...

  FSwiftCashInstalledComponent
"""----------------------------------------------------------------------------
MODULE:
    FSwiftCashInstalledComponent

DESCRIPTION:
    This module use to show module in installed component GUI.

CLASS:
    Diagnostics

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
eNqtV81v28gV55e+aNmWZCdNnI+yaYNCaFb+SBFkF0VRx453BfgjsBwvSmzL0pyxTJsmlZlRHAlSLw6wQNECOfXUg72HAnvrn9BT
Dz33xFvRXvbeS30o+t6Qkpi46GlF883M+828efNm3m/ofygf/Ax4fwYv/yUIotgKUYkWqLYqS83WZKnbuiwN26DasUZzRCfG7zQ7
T/WLAsldqnaR5EkBnuIfdLv0qUJKxHyrEJOqx+a5bk8RraXUp/7+maYoH32LP3NrZ/3l5vNPTAt+G60z/1CsufyoGXLhBgEla9Fp
JwppKExz/Xlrbbf5Yq+5s5103zvyuXUakW5ArS6nlogsfhSdjVR+CH+pGcsb2bE+fdlsmOba5mqrlZhZ9912GHHhe9w095/vtnAC
6+HuQ9Pcfd7a222u4ZStxc3mVnNvVdaTgcsNazXs4XT+oe+5wo9Cjk6II2pxj/kdsUhDj/U6AhxInFr0AuoyS9A3Alwi1DrzxRE4
ikO8iIHT3AojYfFupxMxGNeQM6003lts2snrchGd+n33IKBJv8fYj2YWe+r2ZNeziJ1YLrfomw710B2c13KveU9gWLKEyWyuwOgy
i4bgzbe599/g8d3+RgVZ12IjdE9pnAvoaxrYsxt4Cna6wlmLwkO/3c8tN1YaT/r55cZSY+VpXY+NTu/NQf/7u7TdDVwRsV4rCdni
RNMMD6NN/8CubjRDQdtMrvGl8APufZhEelryJRBUgeRRbO1L5VAm0dsiJE+RGCT3VrUNSAxIFKjlvoTcs/OQFmY8lTlEnpoxjPVi
OgF/C0IoQh0o59qFdgkggbqjC0PkiEb0cx1aeVE4LvgKZCdixbZCcl9hrTRQjosXppi6xFZZZmsRs5RMQZ/yV6qvkmky0y4COk1m
Qc5Iu5XU7iypgqwQBRyubfdNmWsWhjkuvKaMQ2xsbXu1rtqVIGq3KXM6LoMtEZTVdZYH1+3q9dhWPgzt1fzaEfVOrNWtZxbsXQjH
DaCrWkZ75IIaelZTHSForQUn86qSqFrCFRT6MTHqtPFi5Ay/WkhU67QDRxJP+ZgkeF2/KqVW91pX5njS1as7SX0/WakcAk4f+IEv
eldWAm7Stuv1rB1m7RzwKIDZrC2ZA/zqxshXtyP819YW5dxt0/4pptskktYL1zsBvdUMvaAL6f3R1t7y0vIjlI8fWVB8vJIUH2Ox
srSUFCtpsbazL2vLiT7pvJJ0frz0Y7t00PUDQiA4sFVRvRrngCgoYwXYnbjoOH7oC8eJc47MpUKbQhwFi3NyJ+2ik+5z/J0J0+67
gY8GW1R0O7HhRAfH9pSTpP6mz4VdccBMqnAC0MQVMop8qrZn00oaXR6XHUG52KKrjLrcLjuEJoSIh6zsMAosyOk6rqPi+PwZrEo0
wyTWdTU2OA0Ov1bjkuN4gcu543ytXH33/90OjU6P3YAg3MU0+4FMvBk1D++MasKrjR8T5b/zRcT685msbYyit+3pmfw103cNDdc0
vGGHcJMODaINIWeH+Xdq/y8DlX8B2amsK794OixAfheEdq6xzUEBNLeGkJEX+qBwYVwqRL+tDIqXmqq8Wnp1P9FfqtC6/04N+yJ3
kSfGQL2poA4sWwOV5E409luwXriQN/Sl9oU+NIa5YT78D6BFQP8o0dKlMkb+CUgJkD9LxMwgfwXEBCSWyFQG+RMgU4D8SyLlDPJ7
QMon2juV7Q00Mi1rC7LXdKbXU8BmJPZEYjMZ7C5gsxL7jcRmReVSHaNPwH5Foh2JVjMjFwCrZkbWJtjnSviZoYi5d2rvb6oyLKlK
vyEjWBPzg9J5GkUyN8wl7WEe9+1z5ee4h6Vfl0IzKZeUJQVsNaQtrZdPbc0P1GSn//eIgTHIDfJtHdh0fnsjVhicDaVf2YNj74dt
6zBi1oOH/AErIXHOJ2e3FQVdTIHkTrNNJCZCGHAJwzPGplCUUUyjmEExi6KCooqihmIOp7r9/I1HZUZZked1GYNb/RM5Z792Harf
YJgbselz+VEUejQ2iO+JOJ9kamyc0B6P8wn3x4YPlMwW0Pkbjofc57inB443ZnT7bladUroDYxwPMtS+N0IJcdCUw4HeJ/CdFOZI
9Dicievg4fgCyhiujQwLPqIze27iijtWjvxL246XZXx2B1f2IO0SSN533JAA/SXEnxIat63xQiTzO6cJ8088ikvjaMc6F6xusnsY
acMF7osLvHuAJGiXsJnwch52vBsIexqYG4ycuSyEI2PX3mtKyrRL1PWOHBwKvbEK5mQzVuGLDM+CFN9D8RDEItLUPhKXZqiTx4Sn
qN7SKtoMtIrqTXhr773Yo5a+8+OyAiX2vw81Q13Q+rUsYyYH5z261NNPHkmXhvyHBBJE3ZZuwmcERob9CMWjsfPjFcDHX9Teor/C
sZrk8H41O59E69r2tnwLeOFhPOHCM53RBeXA1eO86rpBgshLQUaGYWji6fRG8WgQADqZ//44jHiX4ung+MlTVMtz5rLU1ctxwXFI
5DmOffP6DfQMLjS7sLEp08eeThJ+a1N+E7HbaBg/LdkPZRJOPmbYLdTK03jvutHM6qUPGYcnUSv+JFn7TzHwHKnCqBZV+Wh4/ZW1
/wLrCPvf""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FSwiftCashOut
"""----------------------------------------------------------------------------
MODULE:
    FSwiftCashOut

DESCRIPTION:
    OPEN EXTENSION MODULE
    Business process state callbacks.

FUNCTIONS:
    For sample state xxx there are always the four standard extension points:
        condition_entry_state_xxx():
            To control if all the pre-requisites to performing the action and
            entering the state are defined.
        on_entry_state_xxx():
            Is the place to perform the action.
            For example, the on_ entry_state_matched is the place to set the
            confirmation status to Matched
        condition_exit_state_xxx():
            To control that all pre-requisites for performing the next action
            are fulfilled.
        on_exit_state_xxx():
             Is the place to reset values that you set in the state entry, if
             you are leaving the state to go backwards in the workflow.
             For example if you exit from the "Matched" state to go and re-pair,
             or to manually cancel, then you would want to remove the
             confirmation Matched status

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
from FCashOutCallbacks import FCashOutCallbacks

FCashOutCallbacks = FCashOutCallbacks()
# The context parameter is an instance of FBusinessProcessCallbackContext
# Conditions return True or False
# Name convention is
# 'condition_' + 'entry_'/'exit_' + state name in lowercase and underscore


def condition_entry_state_ready(context):
    return FCashOutCallbacks.condition_entry_state_ready(context)

def condition_entry_state_swiftmsggenerated(context):
    return FCashOutCallbacks.condition_entry_state_swiftmsggenerated(context)

def condition_entry_state_generationfailed(context):
    return FCashOutCallbacks.condition_entry_state_generationfailed(context)

def condition_entry_state_sendfailed(context):
    return FCashOutCallbacks.condition_entry_state_sendfailed(context)

def condition_entry_state_sent(context):
    return FCashOutCallbacks.condition_entry_state_sent(context)

def condition_entry_state_acknowledged(context):
    return FCashOutCallbacks.condition_entry_state_acknowledged(context)

# ------------------------------------------------------------------------------
def condition_exit_state_ready(context):
    return FCashOutCallbacks.condition_exit_state_ready(context)

def condition_exit_state_swiftmsggenerated(context):
    return FCashOutCallbacks.condition_exit_state_swiftmsggenerated(context)

def condition_exit_state_generationfailed(context):
    return FCashOutCallbacks.condition_exit_state_generationfailed(context)

def condition_exit_state_sendfailed(context):
    return FCashOutCallbacks.condition_exit_state_sendfailed(context)

def condition_exit_state_sent(context):
    return FCashOutCallbacks.condition_exit_state_sent(context)

def condition_exit_state_acknowledged(context):
    return FCashOutCallbacks.condition_exit_state_acknowledged(context)


# Entry/Exit callbacks do not return anything
#
# Name convention is
# 'on_' + 'entry_'/'exit_' + state name in lowercase and underscore
#


def on_entry_state_ready(context):
    FCashOutCallbacks.on_entry_state_ready(context)

def on_entry_state_swiftmsggenerated(context):
    FCashOutCallbacks.on_entry_state_swiftmsggenerated(context)

def on_entry_state_generationfailed(context):
    FCashOutCallbacks.on_entry_state_generationfailed(context)

def on_entry_state_sendfailed(context):
    FCashOutCallbacks.on_entry_state_sendfailed(context)

def on_entry_state_sent(context):
    FCashOutCallbacks.on_entry_state_sent(context)

def on_entry_state_acknowledged(context):
    FCashOutCallbacks.on_entry_state_acknowledged(context)

# ------------------------------------------------------------------------------
def on_exit_state_ready(context):
    FCashOutCallbacks.on_exit_state_ready(context)

def on_exit_state_swiftmsggenerated(context):
    FCashOutCallbacks.on_exit_state_swiftmsggenerated(context)

def on_exit_state_generationfailed(context):
    FCashOutCallbacks.on_exit_state_generationfailed(context)

def on_exit_state_sendfailed(context):
    FCashOutCallbacks.on_exit_state_sendfailed(context)

def on_exit_state_sent(context):
    FCashOutCallbacks.on_exit_state_sent(context)

def on_exit_state_acknowledged(context):
    FCashOutCallbacks.on_exit_state_acknowledged(context)





...

  FSwiftCashOutMT304
"""----------------------------------------------------------------------------
MODULE:
    FSwiftCashOutMT304

DESCRIPTION:
    OPEN EXTENSION MODULE
    Business process state callbacks.

FUNCTIONS:
    For sample state xxx there are always the four standard extension points:
        condition_entry_state_xxx():
            To control if all the pre-requisites to performing the action and
            entering the state are defined.
        on_entry_state_xxx():
            Is the place to perform the action.
            For example, the on_ entry_state_matched is the place to set the
            confirmation status to Matched
        condition_exit_state_xxx():
            To control that all pre-requisites for performing the next action
            are fulfilled.
        on_exit_state_xxx():
             Is the place to reset values that you set in the state entry, if
             you are leaving the state to go backwards in the workflow.
             For example if you exit from the "Matched" state to go and re-pair,
             or to manually cancel, then you would want to remove the
             confirmation Matched status

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
from FCashOutMT304Callbacks import FCashOutMT304Callbacks

FCashOutMT304Callbacks = FCashOutMT304Callbacks()
# The context parameter is an instance of FBusinessProcessCallbackContext
# Conditions return True or False
# Name convention is
# 'condition_' + 'entry_'/'exit_' + state name in lowercase and underscore


def condition_entry_state_ready(context):
    return FCashOutMT304Callbacks.condition_entry_state_ready(context)

def condition_entry_state_swiftmsggenerated(context):
    return FCashOutMT304Callbacks.condition_entry_state_swiftmsggenerated(context)

def condition_entry_state_generationfailed(context):
    return FCashOutMT304Callbacks.condition_entry_state_generationfailed(context)

def condition_entry_state_sendfailed(context):
    return FCashOutMT304Callbacks.condition_entry_state_sendfailed(context)

def condition_entry_state_sent(context):
    return FCashOutMT304Callbacks.condition_entry_state_sent(context)

def condition_entry_state_acknowledged(context):
    return FCashOutMT304Callbacks.condition_entry_state_acknowledged(context)

# ------------------------------------------------------------------------------
def condition_exit_state_ready(context):
    return FCashOutMT304Callbacks.condition_exit_state_ready(context)

def condition_exit_state_swiftmsggenerated(context):
    return FCashOutMT304Callbacks.condition_exit_state_swiftmsggenerated(context)

def condition_exit_state_generationfailed(context):
    return FCashOutMT304Callbacks.condition_exit_state_generationfailed(context)

def condition_exit_state_sendfailed(context):
    return FCashOutMT304Callbacks.condition_exit_state_sendfailed(context)

def condition_exit_state_sent(context):
    return FCashOutMT304Callbacks.condition_exit_state_sent(context)

def condition_exit_state_acknowledged(context):
    return FCashOutMT304Callbacks.condition_exit_state_acknowledged(context)


# Entry/Exit callbacks do not return anything
#
# Name convention is
# 'on_' + 'entry_'/'exit_' + state name in lowercase and underscore
#


def on_entry_state_ready(context):
    FCashOutMT304Callbacks.on_entry_state_ready(context)

def on_entry_state_swiftmsggenerated(context):
    FCashOutMT304Callbacks.on_entry_state_swiftmsggenerated(context)

def on_entry_state_generationfailed(context):
    FCashOutMT304Callbacks.on_entry_state_generationfailed(context)

def on_entry_state_sendfailed(context):
    FCashOutMT304Callbacks.on_entry_state_sendfailed(context)

def on_entry_state_sent(context):
    FCashOutMT304Callbacks.on_entry_state_sent(context)

def on_entry_state_acknowledged(context):
    FCashOutMT304Callbacks.on_entry_state_acknowledged(context)

# ------------------------------------------------------------------------------
def on_exit_state_ready(context):
    FCashOutMT304Callbacks.on_exit_state_ready(context)

def on_exit_state_swiftmsggenerated(context):
    FCashOutMT304Callbacks.on_exit_state_swiftmsggenerated(context)

def on_exit_state_generationfailed(context):
    FCashOutMT304Callbacks.on_exit_state_generationfailed(context)

def on_exit_state_sendfailed(context):
    FCashOutMT304Callbacks.on_exit_state_sendfailed(context)

def on_exit_state_sent(context):
    FCashOutMT304Callbacks.on_exit_state_sent(context)

def on_exit_state_acknowledged(context):
    FCashOutMT304Callbacks.on_exit_state_acknowledged(context)





...

  FSwiftCashValidateSetup
"""----------------------------------------------------------------------------
MODULE:
    FSwiftCashValidateSetup

DESCRIPTION:
    A module for validating the setup of Swift Messaging Solution - Cash

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
eNrVV91v48YRJynqw/Ln2We7SZp2kSApBCQ+W861dVAU1cmWoyCSHVN3CfZlQXNXMmOKVJcr2xJ86MMdGqB/gx/u+nZ/UvlW9KnP
RV4CtOnsUpT15Rgo8lIRXJKzM7Mzs7+dGf1Dm/g9gPsPcId/0TWNalijOjU8HevqaeAUPFOe2U7jtK5Rk6ZphmZvDFfHGZqDa47m
Wwadv0lNfC3QtKsPxxyMOZalixQk6dLU/AhXS6PLf9Xpyo1BH9zMg8702Br/H1+rN4tM/ybHMpOXiuBaHEH68GYRzx1qdJ1uvNTo
BkjkX6TwPDUsrbD598eGpn38E/7ytaP9p18cfJpH8KtYl25TlO3w7JntudQWzGKi28nn9w+s8kn1uFE9qsecJdQOaNdjqBlwdBEz
u34LiTOGQimDgiZS2lCNhaHdkpNW4HWFG/joYyTXyOefHZxYUiX64OSDfP7kwGqcVMtyEevRF9VatVFS7/GKO1uo5Pfksm7TdWyp
J0QiiFd0uNsRj5jv8F5HMDow7pHjMZsjwa4EcgLK0KUrzlxfiTgBZ8gNkR8IFHY7nYCD3JZaqbiFGmcwNfBwwOR0QxG03b596rGY
b1fySU3tTuAzX6C23VOslwE/R3aI2FWHOdIcuS6yp6ynIBa7cLuaLVA3ZBwxH6z5KTf6n/Jc1wt69NB6enx8dNI42Ce1BqkdWFbp
8ADnLQHbXT6zuWjgxVsgHHVFwYjmarYPOxzwXpTdZ02764lKZDZ4l0Xpiu2FrJDiJujnaRii5U4Qhi7EiQAyuixUUzhbYfTS5Qlr
ZIpehymBQirStyN9J9KLBSPWk5PkebxR6oqg5Jz7waXHaIvFWGJ4zbIvWNnmp4FfDjo9ZS1eKdWeWBA3xq3u6TcQebw28IDAzAlz
mHvBuCSOyR3b4gxv1NWe2F5ZQgbAavVCwdp4+Yntn8PnMXcD7ooexKl7WmdCbjFeUfIW4xeuw8oAMLzU4LYfekpXze7ghachO4aQ
9up2mxUW8Vql1tjZ3iGHzGdccR35A+LuDOJecRZxb5pY3N4eJ24oYrF89GwW8wy1xZ3tGcRZBhRnGbC7/ck4cb3SsZ1we3tvkuzY
bbH9+Dfj5NUxwCl1EK3lSrJ/5cBvui38VkK4FU6m1pOpeiDcZi8hr8QBH9ERU3YnKXvFKcreBAWCPEWZlIIwTlKmNBenNIO7txRn
shinBs/wMxiYBkVYwwbVcepbrQnlmKZe5rApS8hLDatCDE9ZhufgmaV5Og/PHBTSRXjOfauZGoBYKyxFm3ek+/6vVXore3aoMuwg
vTNkfSXzueQfSXoq2ysBxxgx2hgYLu/wIQxCE/q19sJ4ZVzrr3XoGjRLe6PX4eynIf8yzhdlUsgR4vquIASSjhkyr4lXvKDVYpx0
bA5nSDD+Ro/mCHGkdYS80b5/+w43tjo9vgI6P5cWKNP0/l0VbitZ1tEnfJD5qSw1/Ez58Bx8eKUL8OFV6rX2QgdfoC7zJZmuzGjd
AcWkqUwFhc2AUBfS0CpxzphzPpiQPoSR6bmhiMxz1gsh58l+C79TGc4rYd6OES51cBnCeFiXcXpnWiUBCSINqElzTeWwqfd373T5
bg1jUcjAnU2i8AwGqkA37Poyz3XV40kKgE1RDAk3ujRCSQmI22vtuXmtXxvXqVbq2tzUnqchmsZ1+rUOgFzuHyCFo+R3zBnYxkJk
U+rG2RmNxEW1HrfODUXx0uFxlVQpgBNqLeP9DHyjKo3gFECRgzrGaZSxhMzyOFtynKDri0IGz1Vc5lGZqPH8PotbClhGVSg814Bi
dciDbgfKHrzidEM2AngVEn5iXBl6Cxay/iYkfTRCR4MJnH0SBFBefJxWNQGq2FfVSuPgSnxdPuOQt0CO9j+Eb1nEKPoayXJsQwfB
EWwZAg5kJa0KNuoBnJ3cvi1sGSj8dosJIkFFgiaBiFUl/EQgX/HDwV7DewzLEBqTQiaGHRqjklAGlLTjQktkjcYf3cdBpLeJl++N
c0M3Q9jAJXIFhtg8xBuQP9oA7RF7pQReud1qpSKcxP27szwZ4vZLCdFPJWjThj68vs/kf+RrLhe//cdIGf820/3H95yX2StP5Q0z
OTEbMADKIfu91lX2gNQdZ42C0f98DPBluQCCXgVBlHyfeQB96FI7cAZkph10rqHqTBCAH3rNraECyKT4AZEgsNunJFHA5fJ4LbF9
ZCbJOgtj7BPh/vkMwaHPV8M8Y+b1/if3xW2Wiv8xbJ/NCFso+1cZOC5U1BzObNl7z4rajKApcYVOMQhakrVHZoYxG+O+IzWP8Az9
/dNYyO5LzbM03B2xlZECdQ1/1ONY1aHYMyE81gYIgf2yHuPNIZZtyHEXyVlOMBFl4z8jU66hO+SG1v15rPT89t6jdIeawrxsBHxI
xYREeUJic+B9gZA/dm1vMJMlhAYOIarM87fk8As5/FIOSA7vSasXB92CwzwPmG99Wk0cU71HRdouC3lON1MLqZyZ+1Uum8uqucIC
/zAu0XHLP/gjO+YVtKBqMsnIdtyg8ncVYpL2tGa7frwJ749u7069TopwH5fKlmyay6VaA7rkyFQNxIofxLVsUK0HCEU/Yg15YsPf
yMWhrxM7mftdHNPfSziFWOJoOafn9IV0/gczs6Qv6Rl1Jc+MvvCduSTpM69/mcumbkxeRv4H42+Zj/4LgIhD5Q==""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  MT101
# C:\Projects\XSD\MT101.py
# -*- coding: utf-8 -*-
# PyXB bindings for NM:96afad3d20bbfe8d040a1a097fa388d9fecd10e3
# Generated 2021-11-18 20:50:31.038829 by PyXB version 1.2.6 using Python 3.7.10.final.0
# Namespace http://www.w3schools.com

from __future__ import unicode_literals
import pyxb
import pyxb.binding
import pyxb.binding.saxer
import io
import pyxb.utils.utility
import pyxb.utils.domutils
import sys
import pyxb.utils.six as _six
# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:10fbb438-4883-11ec-85e0-3448ed42967c')

# Version of PyXB used to generate the bindings
_PyXBVersion = '1.2.6'
# Generated bindings are not compatible across PyXB versions
if pyxb.__version__ != _PyXBVersion:
    raise pyxb.PyXBVersionError(_PyXBVersion)

# A holder for module-level binding classes so we can access them from
# inside class definitions where property names may conflict.
_module_typeBindings = pyxb.utils.utility.Object()

# Import bindings for namespaces imported into schema
import pyxb.binding.datatypes

# NOTE: All namespace declarations are reserved within the binding
Namespace = pyxb.namespace.NamespaceForURI('http://www.w3schools.com', create_if_missing=True)
Namespace.configureCategories(['typeBinding', 'elementBinding'])

def CreateFromDocument (xml_text, default_namespace=None, location_base=None):
    """Parse the given XML and use the document element to create a
    Python instance.

    @param xml_text An XML document.  This should be data (Python 2
    str or Python 3 bytes), or a text (Python 2 unicode or Python 3
    str) in the L{pyxb._InputEncoding} encoding.

    @keyword default_namespace The L{pyxb.Namespace} instance to use as the
    default namespace where there is no default namespace in scope.
    If unspecified or C{None}, the namespace of the module containing
    this function will be used.

    @keyword location_base: An object to be recorded as the base of all
    L{pyxb.utils.utility.Location} instances associated with events and
    objects handled by the parser.  You might pass the URI from which
    the document was obtained.
    """

    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement, default_namespace=default_namespace)
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    saxer = pyxb.binding.saxer.make_parser(fallback_namespace=default_namespace, location_base=location_base)
    handler = saxer.getContentHandler()
    xmld = xml_text
    if isinstance(xmld, _six.text_type):
        xmld = xmld.encode(pyxb._InputEncoding)
    saxer.parse(io.BytesIO(xmld))
    instance = handler.rootObject()
    return instance

def CreateFromDOM (node, default_namespace=None):
    """Create a Python instance from the given DOM node.
    The node tag must correspond to an element declaration in this module.

    @deprecated: Forcing use of DOM interface is unnecessary; use L{CreateFromDocument}."""
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return pyxb.binding.basis.element.AnyCreateFromDOM(node, default_namespace)


# Atomic simple type: {http://www.w3schools.com}MT101_SequenceA_GeneralInformation_20_Type_Pattern
class MT101_SequenceA_GeneralInformation_20_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceA_GeneralInformation_20_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 3, 1)
    _Documentation = None
MT101_SequenceA_GeneralInformation_20_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT101_SequenceA_GeneralInformation_20_Type_Pattern._CF_pattern.addPattern(pattern="([^/]([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,14}[^/])")
MT101_SequenceA_GeneralInformation_20_Type_Pattern._InitializeFacetMap(MT101_SequenceA_GeneralInformation_20_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceA_GeneralInformation_20_Type_Pattern', MT101_SequenceA_GeneralInformation_20_Type_Pattern)
_module_typeBindings.MT101_SequenceA_GeneralInformation_20_Type_Pattern = MT101_SequenceA_GeneralInformation_20_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT101_SequenceA_GeneralInformation_21R_Type_Pattern
class MT101_SequenceA_GeneralInformation_21R_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceA_GeneralInformation_21R_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 16, 1)
    _Documentation = None
MT101_SequenceA_GeneralInformation_21R_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT101_SequenceA_GeneralInformation_21R_Type_Pattern._CF_pattern.addPattern(pattern="([^/]([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,16}[^/])")
MT101_SequenceA_GeneralInformation_21R_Type_Pattern._InitializeFacetMap(MT101_SequenceA_GeneralInformation_21R_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceA_GeneralInformation_21R_Type_Pattern', MT101_SequenceA_GeneralInformation_21R_Type_Pattern)
_module_typeBindings.MT101_SequenceA_GeneralInformation_21R_Type_Pattern = MT101_SequenceA_GeneralInformation_21R_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT101_SequenceA_GeneralInformation_28D_Type_Pattern
class MT101_SequenceA_GeneralInformation_28D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceA_GeneralInformation_28D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 29, 1)
    _Documentation = None
MT101_SequenceA_GeneralInformation_28D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT101_SequenceA_GeneralInformation_28D_Type_Pattern._CF_pattern.addPattern(pattern='([0-9]{1,5}/[0-9]{1,5})')
MT101_SequenceA_GeneralInformation_28D_Type_Pattern._InitializeFacetMap(MT101_SequenceA_GeneralInformation_28D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceA_GeneralInformation_28D_Type_Pattern', MT101_SequenceA_GeneralInformation_28D_Type_Pattern)
_module_typeBindings.MT101_SequenceA_GeneralInformation_28D_Type_Pattern = MT101_SequenceA_GeneralInformation_28D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT101_SequenceA_GeneralInformation_50C_Type_Pattern
class MT101_SequenceA_GeneralInformation_50C_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceA_GeneralInformation_50C_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 42, 1)
    _Documentation = None
MT101_SequenceA_GeneralInformation_50C_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT101_SequenceA_GeneralInformation_50C_Type_Pattern._CF_pattern.addPattern(pattern='([A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)')
MT101_SequenceA_GeneralInformation_50C_Type_Pattern._InitializeFacetMap(MT101_SequenceA_GeneralInformation_50C_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceA_GeneralInformation_50C_Type_Pattern', MT101_SequenceA_GeneralInformation_50C_Type_Pattern)
_module_typeBindings.MT101_SequenceA_GeneralInformation_50C_Type_Pattern = MT101_SequenceA_GeneralInformation_50C_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT101_SequenceA_GeneralInformation_50L_Type_Pattern
class MT101_SequenceA_GeneralInformation_50L_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceA_GeneralInformation_50L_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 55, 1)
    _Documentation = None
MT101_SequenceA_GeneralInformation_50L_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT101_SequenceA_GeneralInformation_50L_Type_Pattern._CF_pattern.addPattern(pattern="(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35})")
MT101_SequenceA_GeneralInformation_50L_Type_Pattern._InitializeFacetMap(MT101_SequenceA_GeneralInformation_50L_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceA_GeneralInformation_50L_Type_Pattern', MT101_SequenceA_GeneralInformation_50L_Type_Pattern)
_module_typeBindings.MT101_SequenceA_GeneralInformation_50L_Type_Pattern = MT101_SequenceA_GeneralInformation_50L_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT101_SequenceA_GeneralInformation_50F_Type_Pattern
class MT101_SequenceA_GeneralInformation_50F_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceA_GeneralInformation_50F_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 68, 1)
    _Documentation = None
MT101_SequenceA_GeneralInformation_50F_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT101_SequenceA_GeneralInformation_50F_Type_Pattern._CF_pattern.addPattern(pattern="(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT101_SequenceA_GeneralInformation_50F_Type_Pattern._InitializeFacetMap(MT101_SequenceA_GeneralInformation_50F_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceA_GeneralInformation_50F_Type_Pattern', MT101_SequenceA_GeneralInformation_50F_Type_Pattern)
_module_typeBindings.MT101_SequenceA_GeneralInformation_50F_Type_Pattern = MT101_SequenceA_GeneralInformation_50F_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT101_SequenceA_GeneralInformation_50G_Type_Pattern
class MT101_SequenceA_GeneralInformation_50G_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceA_GeneralInformation_50G_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 81, 1)
    _Documentation = None
MT101_SequenceA_GeneralInformation_50G_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT101_SequenceA_GeneralInformation_50G_Type_Pattern._CF_pattern.addPattern(pattern="(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34}(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT101_SequenceA_GeneralInformation_50G_Type_Pattern._InitializeFacetMap(MT101_SequenceA_GeneralInformation_50G_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceA_GeneralInformation_50G_Type_Pattern', MT101_SequenceA_GeneralInformation_50G_Type_Pattern)
_module_typeBindings.MT101_SequenceA_GeneralInformation_50G_Type_Pattern = MT101_SequenceA_GeneralInformation_50G_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT101_SequenceA_GeneralInformation_50H_Type_Pattern
class MT101_SequenceA_GeneralInformation_50H_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceA_GeneralInformation_50H_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 94, 1)
    _Documentation = None
MT101_SequenceA_GeneralInformation_50H_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT101_SequenceA_GeneralInformation_50H_Type_Pattern._CF_pattern.addPattern(pattern="(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34}(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT101_SequenceA_GeneralInformation_50H_Type_Pattern._InitializeFacetMap(MT101_SequenceA_GeneralInformation_50H_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceA_GeneralInformation_50H_Type_Pattern', MT101_SequenceA_GeneralInformation_50H_Type_Pattern)
_module_typeBindings.MT101_SequenceA_GeneralInformation_50H_Type_Pattern = MT101_SequenceA_GeneralInformation_50H_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT101_SequenceA_GeneralInformation_52A_Type_Pattern
class MT101_SequenceA_GeneralInformation_52A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceA_GeneralInformation_52A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 107, 1)
    _Documentation = None
MT101_SequenceA_GeneralInformation_52A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT101_SequenceA_GeneralInformation_52A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT101_SequenceA_GeneralInformation_52A_Type_Pattern._InitializeFacetMap(MT101_SequenceA_GeneralInformation_52A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceA_GeneralInformation_52A_Type_Pattern', MT101_SequenceA_GeneralInformation_52A_Type_Pattern)
_module_typeBindings.MT101_SequenceA_GeneralInformation_52A_Type_Pattern = MT101_SequenceA_GeneralInformation_52A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT101_SequenceA_GeneralInformation_52C_Type_Pattern
class MT101_SequenceA_GeneralInformation_52C_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceA_GeneralInformation_52C_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 120, 1)
    _Documentation = None
MT101_SequenceA_GeneralInformation_52C_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT101_SequenceA_GeneralInformation_52C_Type_Pattern._CF_pattern.addPattern(pattern="(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})")
MT101_SequenceA_GeneralInformation_52C_Type_Pattern._InitializeFacetMap(MT101_SequenceA_GeneralInformation_52C_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceA_GeneralInformation_52C_Type_Pattern', MT101_SequenceA_GeneralInformation_52C_Type_Pattern)
_module_typeBindings.MT101_SequenceA_GeneralInformation_52C_Type_Pattern = MT101_SequenceA_GeneralInformation_52C_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT101_SequenceA_GeneralInformation_51A_Type_Pattern
class MT101_SequenceA_GeneralInformation_51A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceA_GeneralInformation_51A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 133, 1)
    _Documentation = None
MT101_SequenceA_GeneralInformation_51A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT101_SequenceA_GeneralInformation_51A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT101_SequenceA_GeneralInformation_51A_Type_Pattern._InitializeFacetMap(MT101_SequenceA_GeneralInformation_51A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceA_GeneralInformation_51A_Type_Pattern', MT101_SequenceA_GeneralInformation_51A_Type_Pattern)
_module_typeBindings.MT101_SequenceA_GeneralInformation_51A_Type_Pattern = MT101_SequenceA_GeneralInformation_51A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT101_SequenceA_GeneralInformation_30_Type_Pattern
class MT101_SequenceA_GeneralInformation_30_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceA_GeneralInformation_30_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 146, 1)
    _Documentation = None
MT101_SequenceA_GeneralInformation_30_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT101_SequenceA_GeneralInformation_30_Type_Pattern._CF_pattern.addPattern(pattern='([0-9]{6})')
MT101_SequenceA_GeneralInformation_30_Type_Pattern._InitializeFacetMap(MT101_SequenceA_GeneralInformation_30_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceA_GeneralInformation_30_Type_Pattern', MT101_SequenceA_GeneralInformation_30_Type_Pattern)
_module_typeBindings.MT101_SequenceA_GeneralInformation_30_Type_Pattern = MT101_SequenceA_GeneralInformation_30_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT101_SequenceA_GeneralInformation_25_Type_Pattern
class MT101_SequenceA_GeneralInformation_25_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceA_GeneralInformation_25_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 159, 1)
    _Documentation = None
MT101_SequenceA_GeneralInformation_25_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT101_SequenceA_GeneralInformation_25_Type_Pattern._CF_pattern.addPattern(pattern="(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35})")
MT101_SequenceA_GeneralInformation_25_Type_Pattern._InitializeFacetMap(MT101_SequenceA_GeneralInformation_25_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceA_GeneralInformation_25_Type_Pattern', MT101_SequenceA_GeneralInformation_25_Type_Pattern)
_module_typeBindings.MT101_SequenceA_GeneralInformation_25_Type_Pattern = MT101_SequenceA_GeneralInformation_25_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_21_Type_Pattern
class MT101_SequenceB_TransactionDetails_21_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceB_TransactionDetails_21_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 172, 1)
    _Documentation = None
MT101_SequenceB_TransactionDetails_21_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT101_SequenceB_TransactionDetails_21_Type_Pattern._CF_pattern.addPattern(pattern="([^/]([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,14}[^/])")
MT101_SequenceB_TransactionDetails_21_Type_Pattern._InitializeFacetMap(MT101_SequenceB_TransactionDetails_21_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceB_TransactionDetails_21_Type_Pattern', MT101_SequenceB_TransactionDetails_21_Type_Pattern)
_module_typeBindings.MT101_SequenceB_TransactionDetails_21_Type_Pattern = MT101_SequenceB_TransactionDetails_21_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_21F_Type_Pattern
class MT101_SequenceB_TransactionDetails_21F_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceB_TransactionDetails_21F_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 185, 1)
    _Documentation = None
MT101_SequenceB_TransactionDetails_21F_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT101_SequenceB_TransactionDetails_21F_Type_Pattern._CF_pattern.addPattern(pattern="([^/]([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,16}[^/])")
MT101_SequenceB_TransactionDetails_21F_Type_Pattern._InitializeFacetMap(MT101_SequenceB_TransactionDetails_21F_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceB_TransactionDetails_21F_Type_Pattern', MT101_SequenceB_TransactionDetails_21F_Type_Pattern)
_module_typeBindings.MT101_SequenceB_TransactionDetails_21F_Type_Pattern = MT101_SequenceB_TransactionDetails_21F_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_23E_Type_Pattern
class MT101_SequenceB_TransactionDetails_23E_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceB_TransactionDetails_23E_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 198, 1)
    _Documentation = None
MT101_SequenceB_TransactionDetails_23E_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT101_SequenceB_TransactionDetails_23E_Type_Pattern._CF_pattern.addPattern(pattern="([A-Z0-9]{4}(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,30})?)")
MT101_SequenceB_TransactionDetails_23E_Type_Pattern._InitializeFacetMap(MT101_SequenceB_TransactionDetails_23E_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceB_TransactionDetails_23E_Type_Pattern', MT101_SequenceB_TransactionDetails_23E_Type_Pattern)
_module_typeBindings.MT101_SequenceB_TransactionDetails_23E_Type_Pattern = MT101_SequenceB_TransactionDetails_23E_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_32B_Type_Pattern
class MT101_SequenceB_TransactionDetails_32B_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceB_TransactionDetails_32B_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 211, 1)
    _Documentation = None
MT101_SequenceB_TransactionDetails_32B_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT101_SequenceB_TransactionDetails_32B_Type_Pattern._CF_pattern.addPattern(pattern='((AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})')
MT101_SequenceB_TransactionDetails_32B_Type_Pattern._InitializeFacetMap(MT101_SequenceB_TransactionDetails_32B_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceB_TransactionDetails_32B_Type_Pattern', MT101_SequenceB_TransactionDetails_32B_Type_Pattern)
_module_typeBindings.MT101_SequenceB_TransactionDetails_32B_Type_Pattern = MT101_SequenceB_TransactionDetails_32B_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_50C_Type_Pattern
class MT101_SequenceB_TransactionDetails_50C_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceB_TransactionDetails_50C_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 224, 1)
    _Documentation = None
MT101_SequenceB_TransactionDetails_50C_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT101_SequenceB_TransactionDetails_50C_Type_Pattern._CF_pattern.addPattern(pattern='([A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)')
MT101_SequenceB_TransactionDetails_50C_Type_Pattern._InitializeFacetMap(MT101_SequenceB_TransactionDetails_50C_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceB_TransactionDetails_50C_Type_Pattern', MT101_SequenceB_TransactionDetails_50C_Type_Pattern)
_module_typeBindings.MT101_SequenceB_TransactionDetails_50C_Type_Pattern = MT101_SequenceB_TransactionDetails_50C_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_50L_Type_Pattern
class MT101_SequenceB_TransactionDetails_50L_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceB_TransactionDetails_50L_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 237, 1)
    _Documentation = None
MT101_SequenceB_TransactionDetails_50L_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT101_SequenceB_TransactionDetails_50L_Type_Pattern._CF_pattern.addPattern(pattern="(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35})")
MT101_SequenceB_TransactionDetails_50L_Type_Pattern._InitializeFacetMap(MT101_SequenceB_TransactionDetails_50L_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceB_TransactionDetails_50L_Type_Pattern', MT101_SequenceB_TransactionDetails_50L_Type_Pattern)
_module_typeBindings.MT101_SequenceB_TransactionDetails_50L_Type_Pattern = MT101_SequenceB_TransactionDetails_50L_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_50F_Type_Pattern
class MT101_SequenceB_TransactionDetails_50F_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceB_TransactionDetails_50F_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 250, 1)
    _Documentation = None
MT101_SequenceB_TransactionDetails_50F_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT101_SequenceB_TransactionDetails_50F_Type_Pattern._CF_pattern.addPattern(pattern="(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT101_SequenceB_TransactionDetails_50F_Type_Pattern._InitializeFacetMap(MT101_SequenceB_TransactionDetails_50F_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceB_TransactionDetails_50F_Type_Pattern', MT101_SequenceB_TransactionDetails_50F_Type_Pattern)
_module_typeBindings.MT101_SequenceB_TransactionDetails_50F_Type_Pattern = MT101_SequenceB_TransactionDetails_50F_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_50G_Type_Pattern
class MT101_SequenceB_TransactionDetails_50G_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceB_TransactionDetails_50G_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 263, 1)
    _Documentation = None
MT101_SequenceB_TransactionDetails_50G_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT101_SequenceB_TransactionDetails_50G_Type_Pattern._CF_pattern.addPattern(pattern="(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34}(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT101_SequenceB_TransactionDetails_50G_Type_Pattern._InitializeFacetMap(MT101_SequenceB_TransactionDetails_50G_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceB_TransactionDetails_50G_Type_Pattern', MT101_SequenceB_TransactionDetails_50G_Type_Pattern)
_module_typeBindings.MT101_SequenceB_TransactionDetails_50G_Type_Pattern = MT101_SequenceB_TransactionDetails_50G_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_50H_Type_Pattern
class MT101_SequenceB_TransactionDetails_50H_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceB_TransactionDetails_50H_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 276, 1)
    _Documentation = None
MT101_SequenceB_TransactionDetails_50H_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT101_SequenceB_TransactionDetails_50H_Type_Pattern._CF_pattern.addPattern(pattern="(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34}(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT101_SequenceB_TransactionDetails_50H_Type_Pattern._InitializeFacetMap(MT101_SequenceB_TransactionDetails_50H_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceB_TransactionDetails_50H_Type_Pattern', MT101_SequenceB_TransactionDetails_50H_Type_Pattern)
_module_typeBindings.MT101_SequenceB_TransactionDetails_50H_Type_Pattern = MT101_SequenceB_TransactionDetails_50H_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_52A_Type_Pattern
class MT101_SequenceB_TransactionDetails_52A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceB_TransactionDetails_52A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 289, 1)
    _Documentation = None
MT101_SequenceB_TransactionDetails_52A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT101_SequenceB_TransactionDetails_52A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT101_SequenceB_TransactionDetails_52A_Type_Pattern._InitializeFacetMap(MT101_SequenceB_TransactionDetails_52A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceB_TransactionDetails_52A_Type_Pattern', MT101_SequenceB_TransactionDetails_52A_Type_Pattern)
_module_typeBindings.MT101_SequenceB_TransactionDetails_52A_Type_Pattern = MT101_SequenceB_TransactionDetails_52A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_52C_Type_Pattern
class MT101_SequenceB_TransactionDetails_52C_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceB_TransactionDetails_52C_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 302, 1)
    _Documentation = None
MT101_SequenceB_TransactionDetails_52C_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT101_SequenceB_TransactionDetails_52C_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT101_SequenceB_TransactionDetails_52C_Type_Pattern._InitializeFacetMap(MT101_SequenceB_TransactionDetails_52C_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceB_TransactionDetails_52C_Type_Pattern', MT101_SequenceB_TransactionDetails_52C_Type_Pattern)
_module_typeBindings.MT101_SequenceB_TransactionDetails_52C_Type_Pattern = MT101_SequenceB_TransactionDetails_52C_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_56A_Type_Pattern
class MT101_SequenceB_TransactionDetails_56A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceB_TransactionDetails_56A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 315, 1)
    _Documentation = None
MT101_SequenceB_TransactionDetails_56A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT101_SequenceB_TransactionDetails_56A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT101_SequenceB_TransactionDetails_56A_Type_Pattern._InitializeFacetMap(MT101_SequenceB_TransactionDetails_56A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceB_TransactionDetails_56A_Type_Pattern', MT101_SequenceB_TransactionDetails_56A_Type_Pattern)
_module_typeBindings.MT101_SequenceB_TransactionDetails_56A_Type_Pattern = MT101_SequenceB_TransactionDetails_56A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_56C_Type_Pattern
class MT101_SequenceB_TransactionDetails_56C_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceB_TransactionDetails_56C_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 328, 1)
    _Documentation = None
MT101_SequenceB_TransactionDetails_56C_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT101_SequenceB_TransactionDetails_56C_Type_Pattern._CF_pattern.addPattern(pattern="(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})")
MT101_SequenceB_TransactionDetails_56C_Type_Pattern._InitializeFacetMap(MT101_SequenceB_TransactionDetails_56C_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceB_TransactionDetails_56C_Type_Pattern', MT101_SequenceB_TransactionDetails_56C_Type_Pattern)
_module_typeBindings.MT101_SequenceB_TransactionDetails_56C_Type_Pattern = MT101_SequenceB_TransactionDetails_56C_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_56D_Type_Pattern
class MT101_SequenceB_TransactionDetails_56D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceB_TransactionDetails_56D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 341, 1)
    _Documentation = None
MT101_SequenceB_TransactionDetails_56D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT101_SequenceB_TransactionDetails_56D_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT101_SequenceB_TransactionDetails_56D_Type_Pattern._InitializeFacetMap(MT101_SequenceB_TransactionDetails_56D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceB_TransactionDetails_56D_Type_Pattern', MT101_SequenceB_TransactionDetails_56D_Type_Pattern)
_module_typeBindings.MT101_SequenceB_TransactionDetails_56D_Type_Pattern = MT101_SequenceB_TransactionDetails_56D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_57A_Type_Pattern
class MT101_SequenceB_TransactionDetails_57A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceB_TransactionDetails_57A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 354, 1)
    _Documentation = None
MT101_SequenceB_TransactionDetails_57A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT101_SequenceB_TransactionDetails_57A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT101_SequenceB_TransactionDetails_57A_Type_Pattern._InitializeFacetMap(MT101_SequenceB_TransactionDetails_57A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceB_TransactionDetails_57A_Type_Pattern', MT101_SequenceB_TransactionDetails_57A_Type_Pattern)
_module_typeBindings.MT101_SequenceB_TransactionDetails_57A_Type_Pattern = MT101_SequenceB_TransactionDetails_57A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_57C_Type_Pattern
class MT101_SequenceB_TransactionDetails_57C_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceB_TransactionDetails_57C_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 367, 1)
    _Documentation = None
MT101_SequenceB_TransactionDetails_57C_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT101_SequenceB_TransactionDetails_57C_Type_Pattern._CF_pattern.addPattern(pattern="(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})")
MT101_SequenceB_TransactionDetails_57C_Type_Pattern._InitializeFacetMap(MT101_SequenceB_TransactionDetails_57C_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceB_TransactionDetails_57C_Type_Pattern', MT101_SequenceB_TransactionDetails_57C_Type_Pattern)
_module_typeBindings.MT101_SequenceB_TransactionDetails_57C_Type_Pattern = MT101_SequenceB_TransactionDetails_57C_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_57D_Type_Pattern
class MT101_SequenceB_TransactionDetails_57D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceB_TransactionDetails_57D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 380, 1)
    _Documentation = None
MT101_SequenceB_TransactionDetails_57D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT101_SequenceB_TransactionDetails_57D_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT101_SequenceB_TransactionDetails_57D_Type_Pattern._InitializeFacetMap(MT101_SequenceB_TransactionDetails_57D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceB_TransactionDetails_57D_Type_Pattern', MT101_SequenceB_TransactionDetails_57D_Type_Pattern)
_module_typeBindings.MT101_SequenceB_TransactionDetails_57D_Type_Pattern = MT101_SequenceB_TransactionDetails_57D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_59_Type_Pattern
class MT101_SequenceB_TransactionDetails_59_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceB_TransactionDetails_59_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 393, 1)
    _Documentation = None
MT101_SequenceB_TransactionDetails_59_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT101_SequenceB_TransactionDetails_59_Type_Pattern._CF_pattern.addPattern(pattern="((/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT101_SequenceB_TransactionDetails_59_Type_Pattern._InitializeFacetMap(MT101_SequenceB_TransactionDetails_59_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceB_TransactionDetails_59_Type_Pattern', MT101_SequenceB_TransactionDetails_59_Type_Pattern)
_module_typeBindings.MT101_SequenceB_TransactionDetails_59_Type_Pattern = MT101_SequenceB_TransactionDetails_59_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_59A_Type_Pattern
class MT101_SequenceB_TransactionDetails_59A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceB_TransactionDetails_59A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 406, 1)
    _Documentation = None
MT101_SequenceB_TransactionDetails_59A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT101_SequenceB_TransactionDetails_59A_Type_Pattern._CF_pattern.addPattern(pattern="((/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT101_SequenceB_TransactionDetails_59A_Type_Pattern._InitializeFacetMap(MT101_SequenceB_TransactionDetails_59A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceB_TransactionDetails_59A_Type_Pattern', MT101_SequenceB_TransactionDetails_59A_Type_Pattern)
_module_typeBindings.MT101_SequenceB_TransactionDetails_59A_Type_Pattern = MT101_SequenceB_TransactionDetails_59A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_59F_Type_Pattern
class MT101_SequenceB_TransactionDetails_59F_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceB_TransactionDetails_59F_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 419, 1)
    _Documentation = None
MT101_SequenceB_TransactionDetails_59F_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT101_SequenceB_TransactionDetails_59F_Type_Pattern._CF_pattern.addPattern(pattern="((/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34}\\n)?((1|2|3)/(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,33}\\n?){1,4}))")
MT101_SequenceB_TransactionDetails_59F_Type_Pattern._InitializeFacetMap(MT101_SequenceB_TransactionDetails_59F_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceB_TransactionDetails_59F_Type_Pattern', MT101_SequenceB_TransactionDetails_59F_Type_Pattern)
_module_typeBindings.MT101_SequenceB_TransactionDetails_59F_Type_Pattern = MT101_SequenceB_TransactionDetails_59F_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_70_Type_Pattern
class MT101_SequenceB_TransactionDetails_70_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceB_TransactionDetails_70_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 432, 1)
    _Documentation = None
MT101_SequenceB_TransactionDetails_70_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT101_SequenceB_TransactionDetails_70_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT101_SequenceB_TransactionDetails_70_Type_Pattern._InitializeFacetMap(MT101_SequenceB_TransactionDetails_70_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceB_TransactionDetails_70_Type_Pattern', MT101_SequenceB_TransactionDetails_70_Type_Pattern)
_module_typeBindings.MT101_SequenceB_TransactionDetails_70_Type_Pattern = MT101_SequenceB_TransactionDetails_70_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_77B_Type_Pattern
class MT101_SequenceB_TransactionDetails_77B_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceB_TransactionDetails_77B_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 445, 1)
    _Documentation = None
MT101_SequenceB_TransactionDetails_77B_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT101_SequenceB_TransactionDetails_77B_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,3})")
MT101_SequenceB_TransactionDetails_77B_Type_Pattern._InitializeFacetMap(MT101_SequenceB_TransactionDetails_77B_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceB_TransactionDetails_77B_Type_Pattern', MT101_SequenceB_TransactionDetails_77B_Type_Pattern)
_module_typeBindings.MT101_SequenceB_TransactionDetails_77B_Type_Pattern = MT101_SequenceB_TransactionDetails_77B_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_33B_Type_Pattern
class MT101_SequenceB_TransactionDetails_33B_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceB_TransactionDetails_33B_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 458, 1)
    _Documentation = None
MT101_SequenceB_TransactionDetails_33B_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT101_SequenceB_TransactionDetails_33B_Type_Pattern._CF_pattern.addPattern(pattern='((AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})')
MT101_SequenceB_TransactionDetails_33B_Type_Pattern._InitializeFacetMap(MT101_SequenceB_TransactionDetails_33B_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceB_TransactionDetails_33B_Type_Pattern', MT101_SequenceB_TransactionDetails_33B_Type_Pattern)
_module_typeBindings.MT101_SequenceB_TransactionDetails_33B_Type_Pattern = MT101_SequenceB_TransactionDetails_33B_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_71A_Type_Pattern
class MT101_SequenceB_TransactionDetails_71A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceB_TransactionDetails_71A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 471, 1)
    _Documentation = None
MT101_SequenceB_TransactionDetails_71A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT101_SequenceB_TransactionDetails_71A_Type_Pattern._CF_pattern.addPattern(pattern='([A-Z]{3})')
MT101_SequenceB_TransactionDetails_71A_Type_Pattern._InitializeFacetMap(MT101_SequenceB_TransactionDetails_71A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceB_TransactionDetails_71A_Type_Pattern', MT101_SequenceB_TransactionDetails_71A_Type_Pattern)
_module_typeBindings.MT101_SequenceB_TransactionDetails_71A_Type_Pattern = MT101_SequenceB_TransactionDetails_71A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_25A_Type_Pattern
class MT101_SequenceB_TransactionDetails_25A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceB_TransactionDetails_25A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 484, 1)
    _Documentation = None
MT101_SequenceB_TransactionDetails_25A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT101_SequenceB_TransactionDetails_25A_Type_Pattern._CF_pattern.addPattern(pattern="(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})")
MT101_SequenceB_TransactionDetails_25A_Type_Pattern._InitializeFacetMap(MT101_SequenceB_TransactionDetails_25A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceB_TransactionDetails_25A_Type_Pattern', MT101_SequenceB_TransactionDetails_25A_Type_Pattern)
_module_typeBindings.MT101_SequenceB_TransactionDetails_25A_Type_Pattern = MT101_SequenceB_TransactionDetails_25A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_36_Type_Pattern
class MT101_SequenceB_TransactionDetails_36_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceB_TransactionDetails_36_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 497, 1)
    _Documentation = None
MT101_SequenceB_TransactionDetails_36_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT101_SequenceB_TransactionDetails_36_Type_Pattern._CF_pattern.addPattern(pattern='([0-9,(?0-9)]{1,12})')
MT101_SequenceB_TransactionDetails_36_Type_Pattern._InitializeFacetMap(MT101_SequenceB_TransactionDetails_36_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceB_TransactionDetails_36_Type_Pattern', MT101_SequenceB_TransactionDetails_36_Type_Pattern)
_module_typeBindings.MT101_SequenceB_TransactionDetails_36_Type_Pattern = MT101_SequenceB_TransactionDetails_36_Type_Pattern

# Complex type {http://www.w3schools.com}MT101_SequenceA_GeneralInformation with content type ELEMENT_ONLY
class MT101_SequenceA_GeneralInformation (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT101_SequenceA_GeneralInformation with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceA_GeneralInformation')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 510, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}SendersReference uses Python identifier SendersReference
    __SendersReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SendersReference'), 'SendersReference', '__httpwww_w3schools_com_MT101_SequenceA_GeneralInformation_httpwww_w3schools_comSendersReference', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 512, 3), )

    
    SendersReference = property(__SendersReference.value, __SendersReference.set, None, None)

    
    # Element {http://www.w3schools.com}CustomerSpecifiedReference uses Python identifier CustomerSpecifiedReference
    __CustomerSpecifiedReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CustomerSpecifiedReference'), 'CustomerSpecifiedReference', '__httpwww_w3schools_com_MT101_SequenceA_GeneralInformation_httpwww_w3schools_comCustomerSpecifiedReference', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 513, 3), )

    
    CustomerSpecifiedReference = property(__CustomerSpecifiedReference.value, __CustomerSpecifiedReference.set, None, None)

    
    # Element {http://www.w3schools.com}MessageIndexTotal uses Python identifier MessageIndexTotal
    __MessageIndexTotal = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MessageIndexTotal'), 'MessageIndexTotal', '__httpwww_w3schools_com_MT101_SequenceA_GeneralInformation_httpwww_w3schools_comMessageIndexTotal', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 514, 3), )

    
    MessageIndexTotal = property(__MessageIndexTotal.value, __MessageIndexTotal.set, None, None)

    
    # Element {http://www.w3schools.com}InstructingParty_C uses Python identifier InstructingParty_C
    __InstructingParty_C = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InstructingParty_C'), 'InstructingParty_C', '__httpwww_w3schools_com_MT101_SequenceA_GeneralInformation_httpwww_w3schools_comInstructingParty_C', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 516, 4), )

    
    InstructingParty_C = property(__InstructingParty_C.value, __InstructingParty_C.set, None, None)

    
    # Element {http://www.w3schools.com}InstructingParty_L uses Python identifier InstructingParty_L
    __InstructingParty_L = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InstructingParty_L'), 'InstructingParty_L', '__httpwww_w3schools_com_MT101_SequenceA_GeneralInformation_httpwww_w3schools_comInstructingParty_L', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 517, 4), )

    
    InstructingParty_L = property(__InstructingParty_L.value, __InstructingParty_L.set, None, None)

    
    # Element {http://www.w3schools.com}OrderingCustomer_F uses Python identifier OrderingCustomer_F
    __OrderingCustomer_F = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OrderingCustomer_F'), 'OrderingCustomer_F', '__httpwww_w3schools_com_MT101_SequenceA_GeneralInformation_httpwww_w3schools_comOrderingCustomer_F', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 520, 4), )

    
    OrderingCustomer_F = property(__OrderingCustomer_F.value, __OrderingCustomer_F.set, None, None)

    
    # Element {http://www.w3schools.com}OrderingCustomer_G uses Python identifier OrderingCustomer_G
    __OrderingCustomer_G = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OrderingCustomer_G'), 'OrderingCustomer_G', '__httpwww_w3schools_com_MT101_SequenceA_GeneralInformation_httpwww_w3schools_comOrderingCustomer_G', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 521, 4), )

    
    OrderingCustomer_G = property(__OrderingCustomer_G.value, __OrderingCustomer_G.set, None, None)

    
    # Element {http://www.w3schools.com}OrderingCustomer_H uses Python identifier OrderingCustomer_H
    __OrderingCustomer_H = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OrderingCustomer_H'), 'OrderingCustomer_H', '__httpwww_w3schools_com_MT101_SequenceA_GeneralInformation_httpwww_w3schools_comOrderingCustomer_H', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 522, 4), )

    
    OrderingCustomer_H = property(__OrderingCustomer_H.value, __OrderingCustomer_H.set, None, None)

    
    # Element {http://www.w3schools.com}AccountServicingInstitution_A uses Python identifier AccountServicingInstitution_A
    __AccountServicingInstitution_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AccountServicingInstitution_A'), 'AccountServicingInstitution_A', '__httpwww_w3schools_com_MT101_SequenceA_GeneralInformation_httpwww_w3schools_comAccountServicingInstitution_A', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 525, 4), )

    
    AccountServicingInstitution_A = property(__AccountServicingInstitution_A.value, __AccountServicingInstitution_A.set, None, None)

    
    # Element {http://www.w3schools.com}AccountServicingInstitution_C uses Python identifier AccountServicingInstitution_C
    __AccountServicingInstitution_C = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AccountServicingInstitution_C'), 'AccountServicingInstitution_C', '__httpwww_w3schools_com_MT101_SequenceA_GeneralInformation_httpwww_w3schools_comAccountServicingInstitution_C', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 526, 4), )

    
    AccountServicingInstitution_C = property(__AccountServicingInstitution_C.value, __AccountServicingInstitution_C.set, None, None)

    
    # Element {http://www.w3schools.com}SendingInstitution uses Python identifier SendingInstitution
    __SendingInstitution = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SendingInstitution'), 'SendingInstitution', '__httpwww_w3schools_com_MT101_SequenceA_GeneralInformation_httpwww_w3schools_comSendingInstitution', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 528, 3), )

    
    SendingInstitution = property(__SendingInstitution.value, __SendingInstitution.set, None, None)

    
    # Element {http://www.w3schools.com}RequestedExecutionDate uses Python identifier RequestedExecutionDate
    __RequestedExecutionDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RequestedExecutionDate'), 'RequestedExecutionDate', '__httpwww_w3schools_com_MT101_SequenceA_GeneralInformation_httpwww_w3schools_comRequestedExecutionDate', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 529, 3), )

    
    RequestedExecutionDate = property(__RequestedExecutionDate.value, __RequestedExecutionDate.set, None, None)

    
    # Element {http://www.w3schools.com}Authorisation uses Python identifier Authorisation
    __Authorisation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Authorisation'), 'Authorisation', '__httpwww_w3schools_com_MT101_SequenceA_GeneralInformation_httpwww_w3schools_comAuthorisation', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 530, 3), )

    
    Authorisation = property(__Authorisation.value, __Authorisation.set, None, None)

    _ElementMap.update({
        __SendersReference.name() : __SendersReference,
        __CustomerSpecifiedReference.name() : __CustomerSpecifiedReference,
        __MessageIndexTotal.name() : __MessageIndexTotal,
        __InstructingParty_C.name() : __InstructingParty_C,
        __InstructingParty_L.name() : __InstructingParty_L,
        __OrderingCustomer_F.name() : __OrderingCustomer_F,
        __OrderingCustomer_G.name() : __OrderingCustomer_G,
        __OrderingCustomer_H.name() : __OrderingCustomer_H,
        __AccountServicingInstitution_A.name() : __AccountServicingInstitution_A,
        __AccountServicingInstitution_C.name() : __AccountServicingInstitution_C,
        __SendingInstitution.name() : __SendingInstitution,
        __RequestedExecutionDate.name() : __RequestedExecutionDate,
        __Authorisation.name() : __Authorisation
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.MT101_SequenceA_GeneralInformation = MT101_SequenceA_GeneralInformation
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceA_GeneralInformation', MT101_SequenceA_GeneralInformation)


# Complex type {http://www.w3schools.com}MT101_SequenceB_TransactionDetails with content type ELEMENT_ONLY
class MT101_SequenceB_TransactionDetails (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT101_SequenceB_TransactionDetails with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceB_TransactionDetails')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 533, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}TransactionReference uses Python identifier TransactionReference
    __TransactionReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TransactionReference'), 'TransactionReference', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_httpwww_w3schools_comTransactionReference', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 535, 3), )

    
    TransactionReference = property(__TransactionReference.value, __TransactionReference.set, None, None)

    
    # Element {http://www.w3schools.com}FXDealReference uses Python identifier FXDealReference
    __FXDealReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FXDealReference'), 'FXDealReference', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_httpwww_w3schools_comFXDealReference', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 536, 3), )

    
    FXDealReference = property(__FXDealReference.value, __FXDealReference.set, None, None)

    
    # Element {http://www.w3schools.com}InstructionCode uses Python identifier InstructionCode
    __InstructionCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InstructionCode'), 'InstructionCode', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_httpwww_w3schools_comInstructionCode', True, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 537, 3), )

    
    InstructionCode = property(__InstructionCode.value, __InstructionCode.set, None, None)

    
    # Element {http://www.w3schools.com}CurrencyTransactionAmount uses Python identifier CurrencyTransactionAmount
    __CurrencyTransactionAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CurrencyTransactionAmount'), 'CurrencyTransactionAmount', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_httpwww_w3schools_comCurrencyTransactionAmount', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 538, 3), )

    
    CurrencyTransactionAmount = property(__CurrencyTransactionAmount.value, __CurrencyTransactionAmount.set, None, None)

    
    # Element {http://www.w3schools.com}InstructingParty_C uses Python identifier InstructingParty_C
    __InstructingParty_C = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InstructingParty_C'), 'InstructingParty_C', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_httpwww_w3schools_comInstructingParty_C', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 540, 4), )

    
    InstructingParty_C = property(__InstructingParty_C.value, __InstructingParty_C.set, None, None)

    
    # Element {http://www.w3schools.com}InstructingParty_L uses Python identifier InstructingParty_L
    __InstructingParty_L = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InstructingParty_L'), 'InstructingParty_L', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_httpwww_w3schools_comInstructingParty_L', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 541, 4), )

    
    InstructingParty_L = property(__InstructingParty_L.value, __InstructingParty_L.set, None, None)

    
    # Element {http://www.w3schools.com}OrderingCustomer_F uses Python identifier OrderingCustomer_F
    __OrderingCustomer_F = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OrderingCustomer_F'), 'OrderingCustomer_F', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_httpwww_w3schools_comOrderingCustomer_F', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 544, 4), )

    
    OrderingCustomer_F = property(__OrderingCustomer_F.value, __OrderingCustomer_F.set, None, None)

    
    # Element {http://www.w3schools.com}OrderingCustomer_G uses Python identifier OrderingCustomer_G
    __OrderingCustomer_G = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OrderingCustomer_G'), 'OrderingCustomer_G', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_httpwww_w3schools_comOrderingCustomer_G', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 545, 4), )

    
    OrderingCustomer_G = property(__OrderingCustomer_G.value, __OrderingCustomer_G.set, None, None)

    
    # Element {http://www.w3schools.com}OrderingCustomer_H uses Python identifier OrderingCustomer_H
    __OrderingCustomer_H = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OrderingCustomer_H'), 'OrderingCustomer_H', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_httpwww_w3schools_comOrderingCustomer_H', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 546, 4), )

    
    OrderingCustomer_H = property(__OrderingCustomer_H.value, __OrderingCustomer_H.set, None, None)

    
    # Element {http://www.w3schools.com}AccountServicingInstitution_A uses Python identifier AccountServicingInstitution_A
    __AccountServicingInstitution_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AccountServicingInstitution_A'), 'AccountServicingInstitution_A', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_httpwww_w3schools_comAccountServicingInstitution_A', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 549, 4), )

    
    AccountServicingInstitution_A = property(__AccountServicingInstitution_A.value, __AccountServicingInstitution_A.set, None, None)

    
    # Element {http://www.w3schools.com}AccountServicingInstitution_C uses Python identifier AccountServicingInstitution_C
    __AccountServicingInstitution_C = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AccountServicingInstitution_C'), 'AccountServicingInstitution_C', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_httpwww_w3schools_comAccountServicingInstitution_C', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 550, 4), )

    
    AccountServicingInstitution_C = property(__AccountServicingInstitution_C.value, __AccountServicingInstitution_C.set, None, None)

    
    # Element {http://www.w3schools.com}Intermediary_A uses Python identifier Intermediary_A
    __Intermediary_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_A'), 'Intermediary_A', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_httpwww_w3schools_comIntermediary_A', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 553, 4), )

    
    Intermediary_A = property(__Intermediary_A.value, __Intermediary_A.set, None, None)

    
    # Element {http://www.w3schools.com}Intermediary_C uses Python identifier Intermediary_C
    __Intermediary_C = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_C'), 'Intermediary_C', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_httpwww_w3schools_comIntermediary_C', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 554, 4), )

    
    Intermediary_C = property(__Intermediary_C.value, __Intermediary_C.set, None, None)

    
    # Element {http://www.w3schools.com}Intermediary_D uses Python identifier Intermediary_D
    __Intermediary_D = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_D'), 'Intermediary_D', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_httpwww_w3schools_comIntermediary_D', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 555, 4), )

    
    Intermediary_D = property(__Intermediary_D.value, __Intermediary_D.set, None, None)

    
    # Element {http://www.w3schools.com}AccountWithInstitution_A uses Python identifier AccountWithInstitution_A
    __AccountWithInstitution_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AccountWithInstitution_A'), 'AccountWithInstitution_A', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_httpwww_w3schools_comAccountWithInstitution_A', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 558, 4), )

    
    AccountWithInstitution_A = property(__AccountWithInstitution_A.value, __AccountWithInstitution_A.set, None, None)

    
    # Element {http://www.w3schools.com}AccountWithInstitution_C uses Python identifier AccountWithInstitution_C
    __AccountWithInstitution_C = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AccountWithInstitution_C'), 'AccountWithInstitution_C', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_httpwww_w3schools_comAccountWithInstitution_C', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 559, 4), )

    
    AccountWithInstitution_C = property(__AccountWithInstitution_C.value, __AccountWithInstitution_C.set, None, None)

    
    # Element {http://www.w3schools.com}AccountWithInstitution_D uses Python identifier AccountWithInstitution_D
    __AccountWithInstitution_D = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AccountWithInstitution_D'), 'AccountWithInstitution_D', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_httpwww_w3schools_comAccountWithInstitution_D', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 560, 4), )

    
    AccountWithInstitution_D = property(__AccountWithInstitution_D.value, __AccountWithInstitution_D.set, None, None)

    
    # Element {http://www.w3schools.com}Beneficiary uses Python identifier Beneficiary
    __Beneficiary = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Beneficiary'), 'Beneficiary', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_httpwww_w3schools_comBeneficiary', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 563, 4), )

    
    Beneficiary = property(__Beneficiary.value, __Beneficiary.set, None, None)

    
    # Element {http://www.w3schools.com}Beneficiary_A uses Python identifier Beneficiary_A
    __Beneficiary_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Beneficiary_A'), 'Beneficiary_A', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_httpwww_w3schools_comBeneficiary_A', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 564, 4), )

    
    Beneficiary_A = property(__Beneficiary_A.value, __Beneficiary_A.set, None, None)

    
    # Element {http://www.w3schools.com}Beneficiary_F uses Python identifier Beneficiary_F
    __Beneficiary_F = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Beneficiary_F'), 'Beneficiary_F', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_httpwww_w3schools_comBeneficiary_F', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 565, 4), )

    
    Beneficiary_F = property(__Beneficiary_F.value, __Beneficiary_F.set, None, None)

    
    # Element {http://www.w3schools.com}RemittanceInformation uses Python identifier RemittanceInformation
    __RemittanceInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RemittanceInformation'), 'RemittanceInformation', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_httpwww_w3schools_comRemittanceInformation', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 567, 3), )

    
    RemittanceInformation = property(__RemittanceInformation.value, __RemittanceInformation.set, None, None)

    
    # Element {http://www.w3schools.com}RegulatoryReporting uses Python identifier RegulatoryReporting
    __RegulatoryReporting = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RegulatoryReporting'), 'RegulatoryReporting', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_httpwww_w3schools_comRegulatoryReporting', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 568, 3), )

    
    RegulatoryReporting = property(__RegulatoryReporting.value, __RegulatoryReporting.set, None, None)

    
    # Element {http://www.w3schools.com}CurrencyOrderedAmount uses Python identifier CurrencyOrderedAmount
    __CurrencyOrderedAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CurrencyOrderedAmount'), 'CurrencyOrderedAmount', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_httpwww_w3schools_comCurrencyOrderedAmount', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 569, 3), )

    
    CurrencyOrderedAmount = property(__CurrencyOrderedAmount.value, __CurrencyOrderedAmount.set, None, None)

    
    # Element {http://www.w3schools.com}DetailsOfCharges uses Python identifier DetailsOfCharges
    __DetailsOfCharges = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DetailsOfCharges'), 'DetailsOfCharges', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_httpwww_w3schools_comDetailsOfCharges', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 570, 3), )

    
    DetailsOfCharges = property(__DetailsOfCharges.value, __DetailsOfCharges.set, None, None)

    
    # Element {http://www.w3schools.com}ChargesAccount uses Python identifier ChargesAccount
    __ChargesAccount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ChargesAccount'), 'ChargesAccount', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_httpwww_w3schools_comChargesAccount', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 571, 3), )

    
    ChargesAccount = property(__ChargesAccount.value, __ChargesAccount.set, None, None)

    
    # Element {http://www.w3schools.com}ExchangeRate uses Python identifier ExchangeRate
    __ExchangeRate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExchangeRate'), 'ExchangeRate', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_httpwww_w3schools_comExchangeRate', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 572, 3), )

    
    ExchangeRate = property(__ExchangeRate.value, __ExchangeRate.set, None, None)

    _ElementMap.update({
        __TransactionReference.name() : __TransactionReference,
        __FXDealReference.name() : __FXDealReference,
        __InstructionCode.name() : __InstructionCode,
        __CurrencyTransactionAmount.name() : __CurrencyTransactionAmount,
        __InstructingParty_C.name() : __InstructingParty_C,
        __InstructingParty_L.name() : __InstructingParty_L,
        __OrderingCustomer_F.name() : __OrderingCustomer_F,
        __OrderingCustomer_G.name() : __OrderingCustomer_G,
        __OrderingCustomer_H.name() : __OrderingCustomer_H,
        __AccountServicingInstitution_A.name() : __AccountServicingInstitution_A,
        __AccountServicingInstitution_C.name() : __AccountServicingInstitution_C,
        __Intermediary_A.name() : __Intermediary_A,
        __Intermediary_C.name() : __Intermediary_C,
        __Intermediary_D.name() : __Intermediary_D,
        __AccountWithInstitution_A.name() : __AccountWithInstitution_A,
        __AccountWithInstitution_C.name() : __AccountWithInstitution_C,
        __AccountWithInstitution_D.name() : __AccountWithInstitution_D,
        __Beneficiary.name() : __Beneficiary,
        __Beneficiary_A.name() : __Beneficiary_A,
        __Beneficiary_F.name() : __Beneficiary_F,
        __RemittanceInformation.name() : __RemittanceInformation,
        __RegulatoryReporting.name() : __RegulatoryReporting,
        __CurrencyOrderedAmount.name() : __CurrencyOrderedAmount,
        __DetailsOfCharges.name() : __DetailsOfCharges,
        __ChargesAccount.name() : __ChargesAccount,
        __ExchangeRate.name() : __ExchangeRate
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.MT101_SequenceB_TransactionDetails = MT101_SequenceB_TransactionDetails
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceB_TransactionDetails', MT101_SequenceB_TransactionDetails)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 576, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}SequenceA_GeneralInformation uses Python identifier SequenceA_GeneralInformation
    __SequenceA_GeneralInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SequenceA_GeneralInformation'), 'SequenceA_GeneralInformation', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comSequenceA_GeneralInformation', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 578, 4), )

    
    SequenceA_GeneralInformation = property(__SequenceA_GeneralInformation.value, __SequenceA_GeneralInformation.set, None, None)

    
    # Element {http://www.w3schools.com}SequenceB_TransactionDetails uses Python identifier SequenceB_TransactionDetails
    __SequenceB_TransactionDetails = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SequenceB_TransactionDetails'), 'SequenceB_TransactionDetails', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comSequenceB_TransactionDetails', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 579, 4), )

    
    SequenceB_TransactionDetails = property(__SequenceB_TransactionDetails.value, __SequenceB_TransactionDetails.set, None, None)

    _ElementMap.update({
        __SequenceA_GeneralInformation.name() : __SequenceA_GeneralInformation,
        __SequenceB_TransactionDetails.name() : __SequenceB_TransactionDetails
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON = CTD_ANON


# Complex type {http://www.w3schools.com}MT101_SequenceA_GeneralInformation_20_Type with content type SIMPLE
class MT101_SequenceA_GeneralInformation_20_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT101_SequenceA_GeneralInformation_20_Type with content type SIMPLE"""
    _TypeDefinition = MT101_SequenceA_GeneralInformation_20_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceA_GeneralInformation_20_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 8, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT101_SequenceA_GeneralInformation_20_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT101_SequenceA_GeneralInformation_20_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='20')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 11, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 11, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT101_SequenceA_GeneralInformation_20_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 12, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 12, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT101_SequenceA_GeneralInformation_20_Type = MT101_SequenceA_GeneralInformation_20_Type
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceA_GeneralInformation_20_Type', MT101_SequenceA_GeneralInformation_20_Type)


# Complex type {http://www.w3schools.com}MT101_SequenceA_GeneralInformation_21R_Type with content type SIMPLE
class MT101_SequenceA_GeneralInformation_21R_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT101_SequenceA_GeneralInformation_21R_Type with content type SIMPLE"""
    _TypeDefinition = MT101_SequenceA_GeneralInformation_21R_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceA_GeneralInformation_21R_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 21, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT101_SequenceA_GeneralInformation_21R_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT101_SequenceA_GeneralInformation_21R_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='21R')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 24, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 24, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT101_SequenceA_GeneralInformation_21R_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 25, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 25, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT101_SequenceA_GeneralInformation_21R_Type = MT101_SequenceA_GeneralInformation_21R_Type
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceA_GeneralInformation_21R_Type', MT101_SequenceA_GeneralInformation_21R_Type)


# Complex type {http://www.w3schools.com}MT101_SequenceA_GeneralInformation_28D_Type with content type SIMPLE
class MT101_SequenceA_GeneralInformation_28D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT101_SequenceA_GeneralInformation_28D_Type with content type SIMPLE"""
    _TypeDefinition = MT101_SequenceA_GeneralInformation_28D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceA_GeneralInformation_28D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 34, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT101_SequenceA_GeneralInformation_28D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT101_SequenceA_GeneralInformation_28D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='28D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 37, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 37, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT101_SequenceA_GeneralInformation_28D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 38, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 38, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT101_SequenceA_GeneralInformation_28D_Type = MT101_SequenceA_GeneralInformation_28D_Type
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceA_GeneralInformation_28D_Type', MT101_SequenceA_GeneralInformation_28D_Type)


# Complex type {http://www.w3schools.com}MT101_SequenceA_GeneralInformation_50C_Type with content type SIMPLE
class MT101_SequenceA_GeneralInformation_50C_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT101_SequenceA_GeneralInformation_50C_Type with content type SIMPLE"""
    _TypeDefinition = MT101_SequenceA_GeneralInformation_50C_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceA_GeneralInformation_50C_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 47, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT101_SequenceA_GeneralInformation_50C_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT101_SequenceA_GeneralInformation_50C_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='50C')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 50, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 50, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT101_SequenceA_GeneralInformation_50C_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 51, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 51, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT101_SequenceA_GeneralInformation_50C_Type = MT101_SequenceA_GeneralInformation_50C_Type
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceA_GeneralInformation_50C_Type', MT101_SequenceA_GeneralInformation_50C_Type)


# Complex type {http://www.w3schools.com}MT101_SequenceA_GeneralInformation_50L_Type with content type SIMPLE
class MT101_SequenceA_GeneralInformation_50L_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT101_SequenceA_GeneralInformation_50L_Type with content type SIMPLE"""
    _TypeDefinition = MT101_SequenceA_GeneralInformation_50L_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceA_GeneralInformation_50L_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 60, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT101_SequenceA_GeneralInformation_50L_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT101_SequenceA_GeneralInformation_50L_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='50L')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 63, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 63, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT101_SequenceA_GeneralInformation_50L_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 64, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 64, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT101_SequenceA_GeneralInformation_50L_Type = MT101_SequenceA_GeneralInformation_50L_Type
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceA_GeneralInformation_50L_Type', MT101_SequenceA_GeneralInformation_50L_Type)


# Complex type {http://www.w3schools.com}MT101_SequenceA_GeneralInformation_50F_Type with content type SIMPLE
class MT101_SequenceA_GeneralInformation_50F_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT101_SequenceA_GeneralInformation_50F_Type with content type SIMPLE"""
    _TypeDefinition = MT101_SequenceA_GeneralInformation_50F_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceA_GeneralInformation_50F_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 73, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT101_SequenceA_GeneralInformation_50F_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT101_SequenceA_GeneralInformation_50F_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='50F')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 76, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 76, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT101_SequenceA_GeneralInformation_50F_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 77, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 77, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT101_SequenceA_GeneralInformation_50F_Type = MT101_SequenceA_GeneralInformation_50F_Type
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceA_GeneralInformation_50F_Type', MT101_SequenceA_GeneralInformation_50F_Type)


# Complex type {http://www.w3schools.com}MT101_SequenceA_GeneralInformation_50G_Type with content type SIMPLE
class MT101_SequenceA_GeneralInformation_50G_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT101_SequenceA_GeneralInformation_50G_Type with content type SIMPLE"""
    _TypeDefinition = MT101_SequenceA_GeneralInformation_50G_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceA_GeneralInformation_50G_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 86, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT101_SequenceA_GeneralInformation_50G_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT101_SequenceA_GeneralInformation_50G_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='50G')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 89, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 89, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT101_SequenceA_GeneralInformation_50G_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 90, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 90, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT101_SequenceA_GeneralInformation_50G_Type = MT101_SequenceA_GeneralInformation_50G_Type
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceA_GeneralInformation_50G_Type', MT101_SequenceA_GeneralInformation_50G_Type)


# Complex type {http://www.w3schools.com}MT101_SequenceA_GeneralInformation_50H_Type with content type SIMPLE
class MT101_SequenceA_GeneralInformation_50H_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT101_SequenceA_GeneralInformation_50H_Type with content type SIMPLE"""
    _TypeDefinition = MT101_SequenceA_GeneralInformation_50H_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceA_GeneralInformation_50H_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 99, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT101_SequenceA_GeneralInformation_50H_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT101_SequenceA_GeneralInformation_50H_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='50H')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 102, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 102, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT101_SequenceA_GeneralInformation_50H_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 103, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 103, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT101_SequenceA_GeneralInformation_50H_Type = MT101_SequenceA_GeneralInformation_50H_Type
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceA_GeneralInformation_50H_Type', MT101_SequenceA_GeneralInformation_50H_Type)


# Complex type {http://www.w3schools.com}MT101_SequenceA_GeneralInformation_52A_Type with content type SIMPLE
class MT101_SequenceA_GeneralInformation_52A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT101_SequenceA_GeneralInformation_52A_Type with content type SIMPLE"""
    _TypeDefinition = MT101_SequenceA_GeneralInformation_52A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceA_GeneralInformation_52A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 112, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT101_SequenceA_GeneralInformation_52A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT101_SequenceA_GeneralInformation_52A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='52A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 115, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 115, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT101_SequenceA_GeneralInformation_52A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 116, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 116, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT101_SequenceA_GeneralInformation_52A_Type = MT101_SequenceA_GeneralInformation_52A_Type
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceA_GeneralInformation_52A_Type', MT101_SequenceA_GeneralInformation_52A_Type)


# Complex type {http://www.w3schools.com}MT101_SequenceA_GeneralInformation_52C_Type with content type SIMPLE
class MT101_SequenceA_GeneralInformation_52C_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT101_SequenceA_GeneralInformation_52C_Type with content type SIMPLE"""
    _TypeDefinition = MT101_SequenceA_GeneralInformation_52C_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceA_GeneralInformation_52C_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 125, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT101_SequenceA_GeneralInformation_52C_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT101_SequenceA_GeneralInformation_52C_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='52C')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 128, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 128, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT101_SequenceA_GeneralInformation_52C_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 129, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 129, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT101_SequenceA_GeneralInformation_52C_Type = MT101_SequenceA_GeneralInformation_52C_Type
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceA_GeneralInformation_52C_Type', MT101_SequenceA_GeneralInformation_52C_Type)


# Complex type {http://www.w3schools.com}MT101_SequenceA_GeneralInformation_51A_Type with content type SIMPLE
class MT101_SequenceA_GeneralInformation_51A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT101_SequenceA_GeneralInformation_51A_Type with content type SIMPLE"""
    _TypeDefinition = MT101_SequenceA_GeneralInformation_51A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceA_GeneralInformation_51A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 138, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT101_SequenceA_GeneralInformation_51A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT101_SequenceA_GeneralInformation_51A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='51A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 141, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 141, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT101_SequenceA_GeneralInformation_51A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 142, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 142, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT101_SequenceA_GeneralInformation_51A_Type = MT101_SequenceA_GeneralInformation_51A_Type
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceA_GeneralInformation_51A_Type', MT101_SequenceA_GeneralInformation_51A_Type)


# Complex type {http://www.w3schools.com}MT101_SequenceA_GeneralInformation_30_Type with content type SIMPLE
class MT101_SequenceA_GeneralInformation_30_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT101_SequenceA_GeneralInformation_30_Type with content type SIMPLE"""
    _TypeDefinition = MT101_SequenceA_GeneralInformation_30_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceA_GeneralInformation_30_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 151, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT101_SequenceA_GeneralInformation_30_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT101_SequenceA_GeneralInformation_30_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='30')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 154, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 154, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT101_SequenceA_GeneralInformation_30_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 155, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 155, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT101_SequenceA_GeneralInformation_30_Type = MT101_SequenceA_GeneralInformation_30_Type
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceA_GeneralInformation_30_Type', MT101_SequenceA_GeneralInformation_30_Type)


# Complex type {http://www.w3schools.com}MT101_SequenceA_GeneralInformation_25_Type with content type SIMPLE
class MT101_SequenceA_GeneralInformation_25_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT101_SequenceA_GeneralInformation_25_Type with content type SIMPLE"""
    _TypeDefinition = MT101_SequenceA_GeneralInformation_25_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceA_GeneralInformation_25_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 164, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT101_SequenceA_GeneralInformation_25_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT101_SequenceA_GeneralInformation_25_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='25')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 167, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 167, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT101_SequenceA_GeneralInformation_25_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 168, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 168, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT101_SequenceA_GeneralInformation_25_Type = MT101_SequenceA_GeneralInformation_25_Type
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceA_GeneralInformation_25_Type', MT101_SequenceA_GeneralInformation_25_Type)


# Complex type {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_21_Type with content type SIMPLE
class MT101_SequenceB_TransactionDetails_21_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_21_Type with content type SIMPLE"""
    _TypeDefinition = MT101_SequenceB_TransactionDetails_21_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceB_TransactionDetails_21_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 177, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT101_SequenceB_TransactionDetails_21_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_21_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='21')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 180, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 180, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_21_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 181, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 181, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT101_SequenceB_TransactionDetails_21_Type = MT101_SequenceB_TransactionDetails_21_Type
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceB_TransactionDetails_21_Type', MT101_SequenceB_TransactionDetails_21_Type)


# Complex type {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_21F_Type with content type SIMPLE
class MT101_SequenceB_TransactionDetails_21F_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_21F_Type with content type SIMPLE"""
    _TypeDefinition = MT101_SequenceB_TransactionDetails_21F_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceB_TransactionDetails_21F_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 190, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT101_SequenceB_TransactionDetails_21F_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_21F_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='21F')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 193, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 193, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_21F_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 194, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 194, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT101_SequenceB_TransactionDetails_21F_Type = MT101_SequenceB_TransactionDetails_21F_Type
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceB_TransactionDetails_21F_Type', MT101_SequenceB_TransactionDetails_21F_Type)


# Complex type {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_23E_Type with content type SIMPLE
class MT101_SequenceB_TransactionDetails_23E_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_23E_Type with content type SIMPLE"""
    _TypeDefinition = MT101_SequenceB_TransactionDetails_23E_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceB_TransactionDetails_23E_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 203, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT101_SequenceB_TransactionDetails_23E_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_23E_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='23E')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 206, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 206, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_23E_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 207, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 207, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT101_SequenceB_TransactionDetails_23E_Type = MT101_SequenceB_TransactionDetails_23E_Type
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceB_TransactionDetails_23E_Type', MT101_SequenceB_TransactionDetails_23E_Type)


# Complex type {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_32B_Type with content type SIMPLE
class MT101_SequenceB_TransactionDetails_32B_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_32B_Type with content type SIMPLE"""
    _TypeDefinition = MT101_SequenceB_TransactionDetails_32B_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceB_TransactionDetails_32B_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 216, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT101_SequenceB_TransactionDetails_32B_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_32B_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='32B')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 219, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 219, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_32B_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 220, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 220, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT101_SequenceB_TransactionDetails_32B_Type = MT101_SequenceB_TransactionDetails_32B_Type
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceB_TransactionDetails_32B_Type', MT101_SequenceB_TransactionDetails_32B_Type)


# Complex type {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_50C_Type with content type SIMPLE
class MT101_SequenceB_TransactionDetails_50C_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_50C_Type with content type SIMPLE"""
    _TypeDefinition = MT101_SequenceB_TransactionDetails_50C_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceB_TransactionDetails_50C_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 229, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT101_SequenceB_TransactionDetails_50C_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_50C_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='50C')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 232, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 232, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_50C_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 233, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 233, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT101_SequenceB_TransactionDetails_50C_Type = MT101_SequenceB_TransactionDetails_50C_Type
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceB_TransactionDetails_50C_Type', MT101_SequenceB_TransactionDetails_50C_Type)


# Complex type {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_50L_Type with content type SIMPLE
class MT101_SequenceB_TransactionDetails_50L_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_50L_Type with content type SIMPLE"""
    _TypeDefinition = MT101_SequenceB_TransactionDetails_50L_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceB_TransactionDetails_50L_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 242, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT101_SequenceB_TransactionDetails_50L_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_50L_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='50L')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 245, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 245, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_50L_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 246, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 246, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT101_SequenceB_TransactionDetails_50L_Type = MT101_SequenceB_TransactionDetails_50L_Type
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceB_TransactionDetails_50L_Type', MT101_SequenceB_TransactionDetails_50L_Type)


# Complex type {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_50F_Type with content type SIMPLE
class MT101_SequenceB_TransactionDetails_50F_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_50F_Type with content type SIMPLE"""
    _TypeDefinition = MT101_SequenceB_TransactionDetails_50F_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceB_TransactionDetails_50F_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 255, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT101_SequenceB_TransactionDetails_50F_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_50F_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='50F')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 258, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 258, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_50F_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 259, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 259, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT101_SequenceB_TransactionDetails_50F_Type = MT101_SequenceB_TransactionDetails_50F_Type
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceB_TransactionDetails_50F_Type', MT101_SequenceB_TransactionDetails_50F_Type)


# Complex type {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_50G_Type with content type SIMPLE
class MT101_SequenceB_TransactionDetails_50G_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_50G_Type with content type SIMPLE"""
    _TypeDefinition = MT101_SequenceB_TransactionDetails_50G_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceB_TransactionDetails_50G_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 268, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT101_SequenceB_TransactionDetails_50G_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_50G_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='50G')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 271, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 271, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_50G_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 272, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 272, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT101_SequenceB_TransactionDetails_50G_Type = MT101_SequenceB_TransactionDetails_50G_Type
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceB_TransactionDetails_50G_Type', MT101_SequenceB_TransactionDetails_50G_Type)


# Complex type {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_50H_Type with content type SIMPLE
class MT101_SequenceB_TransactionDetails_50H_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_50H_Type with content type SIMPLE"""
    _TypeDefinition = MT101_SequenceB_TransactionDetails_50H_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceB_TransactionDetails_50H_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 281, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT101_SequenceB_TransactionDetails_50H_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_50H_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='50H')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 284, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 284, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_50H_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 285, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 285, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT101_SequenceB_TransactionDetails_50H_Type = MT101_SequenceB_TransactionDetails_50H_Type
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceB_TransactionDetails_50H_Type', MT101_SequenceB_TransactionDetails_50H_Type)


# Complex type {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_52A_Type with content type SIMPLE
class MT101_SequenceB_TransactionDetails_52A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_52A_Type with content type SIMPLE"""
    _TypeDefinition = MT101_SequenceB_TransactionDetails_52A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceB_TransactionDetails_52A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 294, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT101_SequenceB_TransactionDetails_52A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_52A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='52A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 297, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 297, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_52A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 298, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 298, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT101_SequenceB_TransactionDetails_52A_Type = MT101_SequenceB_TransactionDetails_52A_Type
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceB_TransactionDetails_52A_Type', MT101_SequenceB_TransactionDetails_52A_Type)


# Complex type {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_52C_Type with content type SIMPLE
class MT101_SequenceB_TransactionDetails_52C_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_52C_Type with content type SIMPLE"""
    _TypeDefinition = MT101_SequenceB_TransactionDetails_52C_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceB_TransactionDetails_52C_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 307, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT101_SequenceB_TransactionDetails_52C_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_52C_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='52C')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 310, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 310, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_52C_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 311, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 311, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT101_SequenceB_TransactionDetails_52C_Type = MT101_SequenceB_TransactionDetails_52C_Type
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceB_TransactionDetails_52C_Type', MT101_SequenceB_TransactionDetails_52C_Type)


# Complex type {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_56A_Type with content type SIMPLE
class MT101_SequenceB_TransactionDetails_56A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_56A_Type with content type SIMPLE"""
    _TypeDefinition = MT101_SequenceB_TransactionDetails_56A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceB_TransactionDetails_56A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 320, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT101_SequenceB_TransactionDetails_56A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_56A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='56A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 323, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 323, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_56A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 324, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 324, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT101_SequenceB_TransactionDetails_56A_Type = MT101_SequenceB_TransactionDetails_56A_Type
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceB_TransactionDetails_56A_Type', MT101_SequenceB_TransactionDetails_56A_Type)


# Complex type {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_56C_Type with content type SIMPLE
class MT101_SequenceB_TransactionDetails_56C_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_56C_Type with content type SIMPLE"""
    _TypeDefinition = MT101_SequenceB_TransactionDetails_56C_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceB_TransactionDetails_56C_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 333, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT101_SequenceB_TransactionDetails_56C_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_56C_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='56C')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 336, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 336, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_56C_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 337, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 337, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT101_SequenceB_TransactionDetails_56C_Type = MT101_SequenceB_TransactionDetails_56C_Type
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceB_TransactionDetails_56C_Type', MT101_SequenceB_TransactionDetails_56C_Type)


# Complex type {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_56D_Type with content type SIMPLE
class MT101_SequenceB_TransactionDetails_56D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_56D_Type with content type SIMPLE"""
    _TypeDefinition = MT101_SequenceB_TransactionDetails_56D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceB_TransactionDetails_56D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 346, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT101_SequenceB_TransactionDetails_56D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_56D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='56D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 349, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 349, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_56D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 350, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 350, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT101_SequenceB_TransactionDetails_56D_Type = MT101_SequenceB_TransactionDetails_56D_Type
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceB_TransactionDetails_56D_Type', MT101_SequenceB_TransactionDetails_56D_Type)


# Complex type {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_57A_Type with content type SIMPLE
class MT101_SequenceB_TransactionDetails_57A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_57A_Type with content type SIMPLE"""
    _TypeDefinition = MT101_SequenceB_TransactionDetails_57A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceB_TransactionDetails_57A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 359, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT101_SequenceB_TransactionDetails_57A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_57A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='57A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 362, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 362, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_57A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 363, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 363, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT101_SequenceB_TransactionDetails_57A_Type = MT101_SequenceB_TransactionDetails_57A_Type
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceB_TransactionDetails_57A_Type', MT101_SequenceB_TransactionDetails_57A_Type)


# Complex type {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_57C_Type with content type SIMPLE
class MT101_SequenceB_TransactionDetails_57C_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_57C_Type with content type SIMPLE"""
    _TypeDefinition = MT101_SequenceB_TransactionDetails_57C_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceB_TransactionDetails_57C_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 372, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT101_SequenceB_TransactionDetails_57C_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_57C_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='57C')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 375, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 375, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_57C_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 376, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 376, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT101_SequenceB_TransactionDetails_57C_Type = MT101_SequenceB_TransactionDetails_57C_Type
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceB_TransactionDetails_57C_Type', MT101_SequenceB_TransactionDetails_57C_Type)


# Complex type {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_57D_Type with content type SIMPLE
class MT101_SequenceB_TransactionDetails_57D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_57D_Type with content type SIMPLE"""
    _TypeDefinition = MT101_SequenceB_TransactionDetails_57D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceB_TransactionDetails_57D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 385, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT101_SequenceB_TransactionDetails_57D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_57D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='57D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 388, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 388, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_57D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 389, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 389, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT101_SequenceB_TransactionDetails_57D_Type = MT101_SequenceB_TransactionDetails_57D_Type
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceB_TransactionDetails_57D_Type', MT101_SequenceB_TransactionDetails_57D_Type)


# Complex type {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_59_Type with content type SIMPLE
class MT101_SequenceB_TransactionDetails_59_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_59_Type with content type SIMPLE"""
    _TypeDefinition = MT101_SequenceB_TransactionDetails_59_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceB_TransactionDetails_59_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 398, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT101_SequenceB_TransactionDetails_59_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_59_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='59')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 401, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 401, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_59_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 402, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 402, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT101_SequenceB_TransactionDetails_59_Type = MT101_SequenceB_TransactionDetails_59_Type
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceB_TransactionDetails_59_Type', MT101_SequenceB_TransactionDetails_59_Type)


# Complex type {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_59A_Type with content type SIMPLE
class MT101_SequenceB_TransactionDetails_59A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_59A_Type with content type SIMPLE"""
    _TypeDefinition = MT101_SequenceB_TransactionDetails_59A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceB_TransactionDetails_59A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 411, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT101_SequenceB_TransactionDetails_59A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_59A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='59A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 414, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 414, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_59A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 415, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 415, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT101_SequenceB_TransactionDetails_59A_Type = MT101_SequenceB_TransactionDetails_59A_Type
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceB_TransactionDetails_59A_Type', MT101_SequenceB_TransactionDetails_59A_Type)


# Complex type {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_59F_Type with content type SIMPLE
class MT101_SequenceB_TransactionDetails_59F_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_59F_Type with content type SIMPLE"""
    _TypeDefinition = MT101_SequenceB_TransactionDetails_59F_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceB_TransactionDetails_59F_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 424, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT101_SequenceB_TransactionDetails_59F_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_59F_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='59F')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 427, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 427, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_59F_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 428, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 428, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT101_SequenceB_TransactionDetails_59F_Type = MT101_SequenceB_TransactionDetails_59F_Type
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceB_TransactionDetails_59F_Type', MT101_SequenceB_TransactionDetails_59F_Type)


# Complex type {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_70_Type with content type SIMPLE
class MT101_SequenceB_TransactionDetails_70_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_70_Type with content type SIMPLE"""
    _TypeDefinition = MT101_SequenceB_TransactionDetails_70_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceB_TransactionDetails_70_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 437, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT101_SequenceB_TransactionDetails_70_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_70_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='70')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 440, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 440, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_70_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 441, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 441, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT101_SequenceB_TransactionDetails_70_Type = MT101_SequenceB_TransactionDetails_70_Type
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceB_TransactionDetails_70_Type', MT101_SequenceB_TransactionDetails_70_Type)


# Complex type {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_77B_Type with content type SIMPLE
class MT101_SequenceB_TransactionDetails_77B_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_77B_Type with content type SIMPLE"""
    _TypeDefinition = MT101_SequenceB_TransactionDetails_77B_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceB_TransactionDetails_77B_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 450, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT101_SequenceB_TransactionDetails_77B_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_77B_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='77B')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 453, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 453, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_77B_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 454, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 454, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT101_SequenceB_TransactionDetails_77B_Type = MT101_SequenceB_TransactionDetails_77B_Type
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceB_TransactionDetails_77B_Type', MT101_SequenceB_TransactionDetails_77B_Type)


# Complex type {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_33B_Type with content type SIMPLE
class MT101_SequenceB_TransactionDetails_33B_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_33B_Type with content type SIMPLE"""
    _TypeDefinition = MT101_SequenceB_TransactionDetails_33B_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceB_TransactionDetails_33B_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 463, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT101_SequenceB_TransactionDetails_33B_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_33B_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='33B')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 466, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 466, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_33B_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 467, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 467, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT101_SequenceB_TransactionDetails_33B_Type = MT101_SequenceB_TransactionDetails_33B_Type
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceB_TransactionDetails_33B_Type', MT101_SequenceB_TransactionDetails_33B_Type)


# Complex type {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_71A_Type with content type SIMPLE
class MT101_SequenceB_TransactionDetails_71A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_71A_Type with content type SIMPLE"""
    _TypeDefinition = MT101_SequenceB_TransactionDetails_71A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceB_TransactionDetails_71A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 476, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT101_SequenceB_TransactionDetails_71A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_71A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='71A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 479, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 479, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_71A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 480, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 480, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT101_SequenceB_TransactionDetails_71A_Type = MT101_SequenceB_TransactionDetails_71A_Type
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceB_TransactionDetails_71A_Type', MT101_SequenceB_TransactionDetails_71A_Type)


# Complex type {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_25A_Type with content type SIMPLE
class MT101_SequenceB_TransactionDetails_25A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_25A_Type with content type SIMPLE"""
    _TypeDefinition = MT101_SequenceB_TransactionDetails_25A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceB_TransactionDetails_25A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 489, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT101_SequenceB_TransactionDetails_25A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_25A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='25A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 492, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 492, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_25A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 493, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 493, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT101_SequenceB_TransactionDetails_25A_Type = MT101_SequenceB_TransactionDetails_25A_Type
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceB_TransactionDetails_25A_Type', MT101_SequenceB_TransactionDetails_25A_Type)


# Complex type {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_36_Type with content type SIMPLE
class MT101_SequenceB_TransactionDetails_36_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT101_SequenceB_TransactionDetails_36_Type with content type SIMPLE"""
    _TypeDefinition = MT101_SequenceB_TransactionDetails_36_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT101_SequenceB_TransactionDetails_36_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 502, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT101_SequenceB_TransactionDetails_36_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_36_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='36')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 505, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 505, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT101_SequenceB_TransactionDetails_36_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 506, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 506, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT101_SequenceB_TransactionDetails_36_Type = MT101_SequenceB_TransactionDetails_36_Type
Namespace.addCategoryObject('typeBinding', 'MT101_SequenceB_TransactionDetails_36_Type', MT101_SequenceB_TransactionDetails_36_Type)


MT101 = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MT101'), CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 575, 1))
Namespace.addCategoryObject('elementBinding', MT101.name().localName(), MT101)



MT101_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SendersReference'), MT101_SequenceA_GeneralInformation_20_Type, scope=MT101_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 512, 3)))

MT101_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CustomerSpecifiedReference'), MT101_SequenceA_GeneralInformation_21R_Type, scope=MT101_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 513, 3)))

MT101_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MessageIndexTotal'), MT101_SequenceA_GeneralInformation_28D_Type, scope=MT101_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 514, 3)))

MT101_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InstructingParty_C'), MT101_SequenceA_GeneralInformation_50C_Type, scope=MT101_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 516, 4)))

MT101_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InstructingParty_L'), MT101_SequenceA_GeneralInformation_50L_Type, scope=MT101_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 517, 4)))

MT101_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OrderingCustomer_F'), MT101_SequenceA_GeneralInformation_50F_Type, scope=MT101_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 520, 4)))

MT101_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OrderingCustomer_G'), MT101_SequenceA_GeneralInformation_50G_Type, scope=MT101_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 521, 4)))

MT101_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OrderingCustomer_H'), MT101_SequenceA_GeneralInformation_50H_Type, scope=MT101_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 522, 4)))

MT101_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AccountServicingInstitution_A'), MT101_SequenceA_GeneralInformation_52A_Type, scope=MT101_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 525, 4)))

MT101_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AccountServicingInstitution_C'), MT101_SequenceA_GeneralInformation_52C_Type, scope=MT101_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 526, 4)))

MT101_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SendingInstitution'), MT101_SequenceA_GeneralInformation_51A_Type, scope=MT101_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 528, 3)))

MT101_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RequestedExecutionDate'), MT101_SequenceA_GeneralInformation_30_Type, scope=MT101_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 529, 3)))

MT101_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Authorisation'), MT101_SequenceA_GeneralInformation_25_Type, scope=MT101_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 530, 3)))

def _BuildAutomaton ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton
    del _BuildAutomaton
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 513, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 515, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 516, 4))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 517, 4))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 519, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 520, 4))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 521, 4))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 522, 4))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 524, 3))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 525, 4))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 526, 4))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 528, 3))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 530, 3))
    counters.add(cc_12)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT101_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SendersReference')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 512, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT101_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CustomerSpecifiedReference')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 513, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT101_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MessageIndexTotal')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 514, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT101_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InstructingParty_C')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 516, 4))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT101_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InstructingParty_L')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 517, 4))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT101_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OrderingCustomer_F')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 520, 4))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT101_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OrderingCustomer_G')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 521, 4))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT101_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OrderingCustomer_H')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 522, 4))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT101_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AccountServicingInstitution_A')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 525, 4))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT101_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AccountServicingInstitution_C')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 526, 4))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT101_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SendingInstitution')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 528, 3))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT101_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RequestedExecutionDate')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 529, 3))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(MT101_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Authorisation')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 530, 3))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_9, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_10, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    st_12._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MT101_SequenceA_GeneralInformation._Automaton = _BuildAutomaton()




MT101_SequenceB_TransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TransactionReference'), MT101_SequenceB_TransactionDetails_21_Type, scope=MT101_SequenceB_TransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 535, 3)))

MT101_SequenceB_TransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FXDealReference'), MT101_SequenceB_TransactionDetails_21F_Type, scope=MT101_SequenceB_TransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 536, 3)))

MT101_SequenceB_TransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InstructionCode'), MT101_SequenceB_TransactionDetails_23E_Type, scope=MT101_SequenceB_TransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 537, 3)))

MT101_SequenceB_TransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CurrencyTransactionAmount'), MT101_SequenceB_TransactionDetails_32B_Type, scope=MT101_SequenceB_TransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 538, 3)))

MT101_SequenceB_TransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InstructingParty_C'), MT101_SequenceB_TransactionDetails_50C_Type, scope=MT101_SequenceB_TransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 540, 4)))

MT101_SequenceB_TransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InstructingParty_L'), MT101_SequenceB_TransactionDetails_50L_Type, scope=MT101_SequenceB_TransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 541, 4)))

MT101_SequenceB_TransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OrderingCustomer_F'), MT101_SequenceB_TransactionDetails_50F_Type, scope=MT101_SequenceB_TransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 544, 4)))

MT101_SequenceB_TransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OrderingCustomer_G'), MT101_SequenceB_TransactionDetails_50G_Type, scope=MT101_SequenceB_TransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 545, 4)))

MT101_SequenceB_TransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OrderingCustomer_H'), MT101_SequenceB_TransactionDetails_50H_Type, scope=MT101_SequenceB_TransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 546, 4)))

MT101_SequenceB_TransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AccountServicingInstitution_A'), MT101_SequenceB_TransactionDetails_52A_Type, scope=MT101_SequenceB_TransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 549, 4)))

MT101_SequenceB_TransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AccountServicingInstitution_C'), MT101_SequenceB_TransactionDetails_52C_Type, scope=MT101_SequenceB_TransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 550, 4)))

MT101_SequenceB_TransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_A'), MT101_SequenceB_TransactionDetails_56A_Type, scope=MT101_SequenceB_TransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 553, 4)))

MT101_SequenceB_TransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_C'), MT101_SequenceB_TransactionDetails_56C_Type, scope=MT101_SequenceB_TransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 554, 4)))

MT101_SequenceB_TransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_D'), MT101_SequenceB_TransactionDetails_56D_Type, scope=MT101_SequenceB_TransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 555, 4)))

MT101_SequenceB_TransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AccountWithInstitution_A'), MT101_SequenceB_TransactionDetails_57A_Type, scope=MT101_SequenceB_TransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 558, 4)))

MT101_SequenceB_TransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AccountWithInstitution_C'), MT101_SequenceB_TransactionDetails_57C_Type, scope=MT101_SequenceB_TransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 559, 4)))

MT101_SequenceB_TransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AccountWithInstitution_D'), MT101_SequenceB_TransactionDetails_57D_Type, scope=MT101_SequenceB_TransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 560, 4)))

MT101_SequenceB_TransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Beneficiary'), MT101_SequenceB_TransactionDetails_59_Type, scope=MT101_SequenceB_TransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 563, 4)))

MT101_SequenceB_TransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Beneficiary_A'), MT101_SequenceB_TransactionDetails_59A_Type, scope=MT101_SequenceB_TransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 564, 4)))

MT101_SequenceB_TransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Beneficiary_F'), MT101_SequenceB_TransactionDetails_59F_Type, scope=MT101_SequenceB_TransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 565, 4)))

MT101_SequenceB_TransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RemittanceInformation'), MT101_SequenceB_TransactionDetails_70_Type, scope=MT101_SequenceB_TransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 567, 3)))

MT101_SequenceB_TransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RegulatoryReporting'), MT101_SequenceB_TransactionDetails_77B_Type, scope=MT101_SequenceB_TransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 568, 3)))

MT101_SequenceB_TransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CurrencyOrderedAmount'), MT101_SequenceB_TransactionDetails_33B_Type, scope=MT101_SequenceB_TransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 569, 3)))

MT101_SequenceB_TransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DetailsOfCharges'), MT101_SequenceB_TransactionDetails_71A_Type, scope=MT101_SequenceB_TransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 570, 3)))

MT101_SequenceB_TransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ChargesAccount'), MT101_SequenceB_TransactionDetails_25A_Type, scope=MT101_SequenceB_TransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 571, 3)))

MT101_SequenceB_TransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExchangeRate'), MT101_SequenceB_TransactionDetails_36_Type, scope=MT101_SequenceB_TransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 572, 3)))

def _BuildAutomaton_ ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_
    del _BuildAutomaton_
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 536, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 537, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 539, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 540, 4))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 541, 4))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 543, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 544, 4))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 545, 4))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 546, 4))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 548, 3))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 549, 4))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 550, 4))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 552, 3))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 553, 4))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 554, 4))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 555, 4))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 557, 3))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 558, 4))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 559, 4))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 560, 4))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 567, 3))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 568, 3))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 569, 3))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 571, 3))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 572, 3))
    counters.add(cc_24)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT101_SequenceB_TransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TransactionReference')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 535, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT101_SequenceB_TransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FXDealReference')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 536, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT101_SequenceB_TransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InstructionCode')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 537, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT101_SequenceB_TransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CurrencyTransactionAmount')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 538, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT101_SequenceB_TransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InstructingParty_C')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 540, 4))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT101_SequenceB_TransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InstructingParty_L')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 541, 4))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT101_SequenceB_TransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OrderingCustomer_F')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 544, 4))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT101_SequenceB_TransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OrderingCustomer_G')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 545, 4))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT101_SequenceB_TransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OrderingCustomer_H')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 546, 4))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT101_SequenceB_TransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AccountServicingInstitution_A')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 549, 4))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT101_SequenceB_TransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AccountServicingInstitution_C')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 550, 4))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT101_SequenceB_TransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_A')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 553, 4))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT101_SequenceB_TransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_C')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 554, 4))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT101_SequenceB_TransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_D')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 555, 4))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT101_SequenceB_TransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AccountWithInstitution_A')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 558, 4))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT101_SequenceB_TransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AccountWithInstitution_C')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 559, 4))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT101_SequenceB_TransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AccountWithInstitution_D')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 560, 4))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT101_SequenceB_TransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Beneficiary')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 563, 4))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT101_SequenceB_TransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Beneficiary_A')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 564, 4))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT101_SequenceB_TransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Beneficiary_F')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 565, 4))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT101_SequenceB_TransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RemittanceInformation')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 567, 3))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT101_SequenceB_TransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RegulatoryReporting')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 568, 3))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT101_SequenceB_TransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CurrencyOrderedAmount')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 569, 3))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT101_SequenceB_TransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DetailsOfCharges')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 570, 3))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_23, False))
    symbol = pyxb.binding.content.ElementUse(MT101_SequenceB_TransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ChargesAccount')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 571, 3))
    st_24 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_24, False))
    symbol = pyxb.binding.content.ElementUse(MT101_SequenceB_TransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExchangeRate')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 572, 3))
    st_25 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False),
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False),
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False),
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False),
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False),
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_10, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_11, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_12, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False),
        fac.UpdateInstruction(cc_13, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_12, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False),
        fac.UpdateInstruction(cc_14, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_12, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False),
        fac.UpdateInstruction(cc_15, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_16, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_16, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_16, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, False),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False),
        fac.UpdateInstruction(cc_17, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_16, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_16, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_16, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, False),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False),
        fac.UpdateInstruction(cc_18, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_16, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_16, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_16, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, False),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False),
        fac.UpdateInstruction(cc_19, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_20, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_20, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_21, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_21, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_22, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_22, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_23, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_23, False) ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_24, True) ]))
    st_25._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MT101_SequenceB_TransactionDetails._Automaton = _BuildAutomaton_()




CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SequenceA_GeneralInformation'), MT101_SequenceA_GeneralInformation, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 578, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SequenceB_TransactionDetails'), MT101_SequenceB_TransactionDetails, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 579, 4)))

def _BuildAutomaton_2 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_2
    del _BuildAutomaton_2
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SequenceA_GeneralInformation')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 578, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SequenceB_TransactionDetails')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT101.xsd', 579, 4))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON._Automaton = _BuildAutomaton_2()



...

  MT103
# C:\Projects\XSD\MT103.py
# -*- coding: utf-8 -*-
# PyXB bindings for NM:96afad3d20bbfe8d040a1a097fa388d9fecd10e3
# Generated 2021-03-26 10:48:07.834202 by PyXB version 1.2.6 using Python 3.7.4.final.0
# Namespace http://www.w3schools.com

from __future__ import unicode_literals
import pyxb
import pyxb.binding
import pyxb.binding.saxer
import io
import pyxb.utils.utility
import pyxb.utils.domutils
import sys
import pyxb.utils.six as _six
# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:a6532902-8df2-11eb-a8e8-3448ed42967c')

# Version of PyXB used to generate the bindings
_PyXBVersion = '1.2.6'
# Generated bindings are not compatible across PyXB versions
if pyxb.__version__ != _PyXBVersion:
    raise pyxb.PyXBVersionError(_PyXBVersion)

# A holder for module-level binding classes so we can access them from
# inside class definitions where property names may conflict.
_module_typeBindings = pyxb.utils.utility.Object()

# Import bindings for namespaces imported into schema
import pyxb.binding.datatypes

# NOTE: All namespace declarations are reserved within the binding
Namespace = pyxb.namespace.NamespaceForURI('http://www.w3schools.com', create_if_missing=True)
Namespace.configureCategories(['typeBinding', 'elementBinding'])

def CreateFromDocument (xml_text, default_namespace=None, location_base=None):
    """Parse the given XML and use the document element to create a
    Python instance.

    @param xml_text An XML document.  This should be data (Python 2
    str or Python 3 bytes), or a text (Python 2 unicode or Python 3
    str) in the L{pyxb._InputEncoding} encoding.

    @keyword default_namespace The L{pyxb.Namespace} instance to use as the
    default namespace where there is no default namespace in scope.
    If unspecified or C{None}, the namespace of the module containing
    this function will be used.

    @keyword location_base: An object to be recorded as the base of all
    L{pyxb.utils.utility.Location} instances associated with events and
    objects handled by the parser.  You might pass the URI from which
    the document was obtained.
    """

    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement, default_namespace=default_namespace)
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    saxer = pyxb.binding.saxer.make_parser(fallback_namespace=default_namespace, location_base=location_base)
    handler = saxer.getContentHandler()
    xmld = xml_text
    if isinstance(xmld, _six.text_type):
        xmld = xmld.encode(pyxb._InputEncoding)
    saxer.parse(io.BytesIO(xmld))
    instance = handler.rootObject()
    return instance

def CreateFromDOM (node, default_namespace=None):
    """Create a Python instance from the given DOM node.
    The node tag must correspond to an element declaration in this module.

    @deprecated: Forcing use of DOM interface is unnecessary; use L{CreateFromDocument}."""
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return pyxb.binding.basis.element.AnyCreateFromDOM(node, default_namespace)


# Atomic simple type: {http://www.w3schools.com}MT103_20_Type_Pattern
class MT103_20_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_20_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 3, 1)
    _Documentation = None
MT103_20_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT103_20_Type_Pattern._CF_pattern.addPattern(pattern="([^/]([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,14}[^/])")
MT103_20_Type_Pattern._InitializeFacetMap(MT103_20_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT103_20_Type_Pattern', MT103_20_Type_Pattern)
_module_typeBindings.MT103_20_Type_Pattern = MT103_20_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT103_13C_Type_Pattern
class MT103_13C_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_13C_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 16, 1)
    _Documentation = None
MT103_13C_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT103_13C_Type_Pattern._CF_pattern.addPattern(pattern='(/[A-Z0-9]{1,8}/(0[0-9]|[1][0-9]|2[0-3])([0-5][0-9])([+]|[-])(0[0-9]|[1][0-9]|2[0-3])([0-5][0-9]))')
MT103_13C_Type_Pattern._InitializeFacetMap(MT103_13C_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT103_13C_Type_Pattern', MT103_13C_Type_Pattern)
_module_typeBindings.MT103_13C_Type_Pattern = MT103_13C_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT103_23B_Type_Pattern
class MT103_23B_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_23B_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 29, 1)
    _Documentation = None
MT103_23B_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT103_23B_Type_Pattern._CF_pattern.addPattern(pattern='((CRED|CRTS|SPAY|SPRI|SSTD))')
MT103_23B_Type_Pattern._InitializeFacetMap(MT103_23B_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT103_23B_Type_Pattern', MT103_23B_Type_Pattern)
_module_typeBindings.MT103_23B_Type_Pattern = MT103_23B_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT103_23E_Type_Pattern
class MT103_23E_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_23E_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 42, 1)
    _Documentation = None
MT103_23E_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT103_23E_Type_Pattern._CF_pattern.addPattern(pattern="((CHQB|CORT|HOLD|INTC|PHOB|PHOI|PHON|REPA|SDVA|TELB|TELE|TELI)(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,30})?)")
MT103_23E_Type_Pattern._InitializeFacetMap(MT103_23E_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT103_23E_Type_Pattern', MT103_23E_Type_Pattern)
_module_typeBindings.MT103_23E_Type_Pattern = MT103_23E_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT103_26T_Type_Pattern
class MT103_26T_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_26T_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 55, 1)
    _Documentation = None
MT103_26T_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT103_26T_Type_Pattern._CF_pattern.addPattern(pattern='([A-Z0-9]{3})')
MT103_26T_Type_Pattern._InitializeFacetMap(MT103_26T_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT103_26T_Type_Pattern', MT103_26T_Type_Pattern)
_module_typeBindings.MT103_26T_Type_Pattern = MT103_26T_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT103_32A_Type_Pattern
class MT103_32A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_32A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 68, 1)
    _Documentation = None
MT103_32A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT103_32A_Type_Pattern._CF_pattern.addPattern(pattern='([0-9]{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})')
MT103_32A_Type_Pattern._InitializeFacetMap(MT103_32A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT103_32A_Type_Pattern', MT103_32A_Type_Pattern)
_module_typeBindings.MT103_32A_Type_Pattern = MT103_32A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT103_33B_Type_Pattern
class MT103_33B_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_33B_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 81, 1)
    _Documentation = None
MT103_33B_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT103_33B_Type_Pattern._CF_pattern.addPattern(pattern='((AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})')
MT103_33B_Type_Pattern._InitializeFacetMap(MT103_33B_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT103_33B_Type_Pattern', MT103_33B_Type_Pattern)
_module_typeBindings.MT103_33B_Type_Pattern = MT103_33B_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT103_36_Type_Pattern
class MT103_36_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_36_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 94, 1)
    _Documentation = None
MT103_36_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT103_36_Type_Pattern._CF_pattern.addPattern(pattern='([0-9,(?0-9)]{1,12})')
MT103_36_Type_Pattern._InitializeFacetMap(MT103_36_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT103_36_Type_Pattern', MT103_36_Type_Pattern)
_module_typeBindings.MT103_36_Type_Pattern = MT103_36_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT103_50A_Type_Pattern
class MT103_50A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_50A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 107, 1)
    _Documentation = None
MT103_50A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT103_50A_Type_Pattern._CF_pattern.addPattern(pattern="((/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT103_50A_Type_Pattern._InitializeFacetMap(MT103_50A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT103_50A_Type_Pattern', MT103_50A_Type_Pattern)
_module_typeBindings.MT103_50A_Type_Pattern = MT103_50A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT103_50F_Type_Pattern
class MT103_50F_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_50F_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 120, 1)
    _Documentation = None
MT103_50F_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT103_50F_Type_Pattern._CF_pattern.addPattern(pattern="(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT103_50F_Type_Pattern._InitializeFacetMap(MT103_50F_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT103_50F_Type_Pattern', MT103_50F_Type_Pattern)
_module_typeBindings.MT103_50F_Type_Pattern = MT103_50F_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT103_50K_Type_Pattern
class MT103_50K_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_50K_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 133, 1)
    _Documentation = None
MT103_50K_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT103_50K_Type_Pattern._CF_pattern.addPattern(pattern="((/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT103_50K_Type_Pattern._InitializeFacetMap(MT103_50K_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT103_50K_Type_Pattern', MT103_50K_Type_Pattern)
_module_typeBindings.MT103_50K_Type_Pattern = MT103_50K_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT103_51A_Type_Pattern
class MT103_51A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_51A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 146, 1)
    _Documentation = None
MT103_51A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT103_51A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT103_51A_Type_Pattern._InitializeFacetMap(MT103_51A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT103_51A_Type_Pattern', MT103_51A_Type_Pattern)
_module_typeBindings.MT103_51A_Type_Pattern = MT103_51A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT103_52A_Type_Pattern
class MT103_52A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_52A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 159, 1)
    _Documentation = None
MT103_52A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT103_52A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT103_52A_Type_Pattern._InitializeFacetMap(MT103_52A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT103_52A_Type_Pattern', MT103_52A_Type_Pattern)
_module_typeBindings.MT103_52A_Type_Pattern = MT103_52A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT103_52D_Type_Pattern
class MT103_52D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_52D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 172, 1)
    _Documentation = None
MT103_52D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT103_52D_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT103_52D_Type_Pattern._InitializeFacetMap(MT103_52D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT103_52D_Type_Pattern', MT103_52D_Type_Pattern)
_module_typeBindings.MT103_52D_Type_Pattern = MT103_52D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT103_53A_Type_Pattern
class MT103_53A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_53A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 185, 1)
    _Documentation = None
MT103_53A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT103_53A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT103_53A_Type_Pattern._InitializeFacetMap(MT103_53A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT103_53A_Type_Pattern', MT103_53A_Type_Pattern)
_module_typeBindings.MT103_53A_Type_Pattern = MT103_53A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT103_53B_Type_Pattern
class MT103_53B_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_53B_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 198, 1)
    _Documentation = None
MT103_53B_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT103_53B_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35})?)")
MT103_53B_Type_Pattern._InitializeFacetMap(MT103_53B_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT103_53B_Type_Pattern', MT103_53B_Type_Pattern)
_module_typeBindings.MT103_53B_Type_Pattern = MT103_53B_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT103_53D_Type_Pattern
class MT103_53D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_53D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 211, 1)
    _Documentation = None
MT103_53D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT103_53D_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT103_53D_Type_Pattern._InitializeFacetMap(MT103_53D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT103_53D_Type_Pattern', MT103_53D_Type_Pattern)
_module_typeBindings.MT103_53D_Type_Pattern = MT103_53D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT103_54A_Type_Pattern
class MT103_54A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_54A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 224, 1)
    _Documentation = None
MT103_54A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT103_54A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT103_54A_Type_Pattern._InitializeFacetMap(MT103_54A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT103_54A_Type_Pattern', MT103_54A_Type_Pattern)
_module_typeBindings.MT103_54A_Type_Pattern = MT103_54A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT103_54B_Type_Pattern
class MT103_54B_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_54B_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 237, 1)
    _Documentation = None
MT103_54B_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT103_54B_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35})?)")
MT103_54B_Type_Pattern._InitializeFacetMap(MT103_54B_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT103_54B_Type_Pattern', MT103_54B_Type_Pattern)
_module_typeBindings.MT103_54B_Type_Pattern = MT103_54B_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT103_54D_Type_Pattern
class MT103_54D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_54D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 250, 1)
    _Documentation = None
MT103_54D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT103_54D_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT103_54D_Type_Pattern._InitializeFacetMap(MT103_54D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT103_54D_Type_Pattern', MT103_54D_Type_Pattern)
_module_typeBindings.MT103_54D_Type_Pattern = MT103_54D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT103_55A_Type_Pattern
class MT103_55A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_55A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 263, 1)
    _Documentation = None
MT103_55A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT103_55A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT103_55A_Type_Pattern._InitializeFacetMap(MT103_55A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT103_55A_Type_Pattern', MT103_55A_Type_Pattern)
_module_typeBindings.MT103_55A_Type_Pattern = MT103_55A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT103_55B_Type_Pattern
class MT103_55B_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_55B_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 276, 1)
    _Documentation = None
MT103_55B_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT103_55B_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35})?)")
MT103_55B_Type_Pattern._InitializeFacetMap(MT103_55B_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT103_55B_Type_Pattern', MT103_55B_Type_Pattern)
_module_typeBindings.MT103_55B_Type_Pattern = MT103_55B_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT103_55D_Type_Pattern
class MT103_55D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_55D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 289, 1)
    _Documentation = None
MT103_55D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT103_55D_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT103_55D_Type_Pattern._InitializeFacetMap(MT103_55D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT103_55D_Type_Pattern', MT103_55D_Type_Pattern)
_module_typeBindings.MT103_55D_Type_Pattern = MT103_55D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT103_56A_Type_Pattern
class MT103_56A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_56A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 302, 1)
    _Documentation = None
MT103_56A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT103_56A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT103_56A_Type_Pattern._InitializeFacetMap(MT103_56A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT103_56A_Type_Pattern', MT103_56A_Type_Pattern)
_module_typeBindings.MT103_56A_Type_Pattern = MT103_56A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT103_56C_Type_Pattern
class MT103_56C_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_56C_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 315, 1)
    _Documentation = None
MT103_56C_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT103_56C_Type_Pattern._CF_pattern.addPattern(pattern="(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})")
MT103_56C_Type_Pattern._InitializeFacetMap(MT103_56C_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT103_56C_Type_Pattern', MT103_56C_Type_Pattern)
_module_typeBindings.MT103_56C_Type_Pattern = MT103_56C_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT103_56D_Type_Pattern
class MT103_56D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_56D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 328, 1)
    _Documentation = None
MT103_56D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT103_56D_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT103_56D_Type_Pattern._InitializeFacetMap(MT103_56D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT103_56D_Type_Pattern', MT103_56D_Type_Pattern)
_module_typeBindings.MT103_56D_Type_Pattern = MT103_56D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT103_57A_Type_Pattern
class MT103_57A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_57A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 341, 1)
    _Documentation = None
MT103_57A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT103_57A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT103_57A_Type_Pattern._InitializeFacetMap(MT103_57A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT103_57A_Type_Pattern', MT103_57A_Type_Pattern)
_module_typeBindings.MT103_57A_Type_Pattern = MT103_57A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT103_57B_Type_Pattern
class MT103_57B_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_57B_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 354, 1)
    _Documentation = None
MT103_57B_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT103_57B_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35})?)")
MT103_57B_Type_Pattern._InitializeFacetMap(MT103_57B_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT103_57B_Type_Pattern', MT103_57B_Type_Pattern)
_module_typeBindings.MT103_57B_Type_Pattern = MT103_57B_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT103_57C_Type_Pattern
class MT103_57C_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_57C_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 367, 1)
    _Documentation = None
MT103_57C_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT103_57C_Type_Pattern._CF_pattern.addPattern(pattern="(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})")
MT103_57C_Type_Pattern._InitializeFacetMap(MT103_57C_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT103_57C_Type_Pattern', MT103_57C_Type_Pattern)
_module_typeBindings.MT103_57C_Type_Pattern = MT103_57C_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT103_57D_Type_Pattern
class MT103_57D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_57D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 380, 1)
    _Documentation = None
MT103_57D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT103_57D_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT103_57D_Type_Pattern._InitializeFacetMap(MT103_57D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT103_57D_Type_Pattern', MT103_57D_Type_Pattern)
_module_typeBindings.MT103_57D_Type_Pattern = MT103_57D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT103_59_Type_Pattern
class MT103_59_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_59_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 393, 1)
    _Documentation = None
MT103_59_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT103_59_Type_Pattern._CF_pattern.addPattern(pattern="((/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT103_59_Type_Pattern._InitializeFacetMap(MT103_59_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT103_59_Type_Pattern', MT103_59_Type_Pattern)
_module_typeBindings.MT103_59_Type_Pattern = MT103_59_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT103_59A_Type_Pattern
class MT103_59A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_59A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 406, 1)
    _Documentation = None
MT103_59A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT103_59A_Type_Pattern._CF_pattern.addPattern(pattern="((/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT103_59A_Type_Pattern._InitializeFacetMap(MT103_59A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT103_59A_Type_Pattern', MT103_59A_Type_Pattern)
_module_typeBindings.MT103_59A_Type_Pattern = MT103_59A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT103_59F_Type_Pattern
class MT103_59F_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_59F_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 419, 1)
    _Documentation = None
MT103_59F_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT103_59F_Type_Pattern._CF_pattern.addPattern(pattern="((/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34}\\n)?((1|2|3)/(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,33}\\n?){1,4}))")
MT103_59F_Type_Pattern._InitializeFacetMap(MT103_59F_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT103_59F_Type_Pattern', MT103_59F_Type_Pattern)
_module_typeBindings.MT103_59F_Type_Pattern = MT103_59F_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT103_70_Type_Pattern
class MT103_70_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_70_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 432, 1)
    _Documentation = None
MT103_70_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT103_70_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT103_70_Type_Pattern._InitializeFacetMap(MT103_70_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT103_70_Type_Pattern', MT103_70_Type_Pattern)
_module_typeBindings.MT103_70_Type_Pattern = MT103_70_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT103_71A_Type_Pattern
class MT103_71A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_71A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 445, 1)
    _Documentation = None
MT103_71A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT103_71A_Type_Pattern._CF_pattern.addPattern(pattern='((BEN|OUR|SHA))')
MT103_71A_Type_Pattern._InitializeFacetMap(MT103_71A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT103_71A_Type_Pattern', MT103_71A_Type_Pattern)
_module_typeBindings.MT103_71A_Type_Pattern = MT103_71A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT103_71F_Type_Pattern
class MT103_71F_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_71F_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 458, 1)
    _Documentation = None
MT103_71F_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT103_71F_Type_Pattern._CF_pattern.addPattern(pattern='((AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})')
MT103_71F_Type_Pattern._InitializeFacetMap(MT103_71F_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT103_71F_Type_Pattern', MT103_71F_Type_Pattern)
_module_typeBindings.MT103_71F_Type_Pattern = MT103_71F_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT103_71G_Type_Pattern
class MT103_71G_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_71G_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 471, 1)
    _Documentation = None
MT103_71G_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT103_71G_Type_Pattern._CF_pattern.addPattern(pattern='((AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})')
MT103_71G_Type_Pattern._InitializeFacetMap(MT103_71G_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT103_71G_Type_Pattern', MT103_71G_Type_Pattern)
_module_typeBindings.MT103_71G_Type_Pattern = MT103_71G_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT103_72_Type_Pattern
class MT103_72_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_72_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 484, 1)
    _Documentation = None
MT103_72_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT103_72_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,6})")
MT103_72_Type_Pattern._InitializeFacetMap(MT103_72_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT103_72_Type_Pattern', MT103_72_Type_Pattern)
_module_typeBindings.MT103_72_Type_Pattern = MT103_72_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT103_77B_Type_Pattern
class MT103_77B_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_77B_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 497, 1)
    _Documentation = None
MT103_77B_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT103_77B_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,3})")
MT103_77B_Type_Pattern._InitializeFacetMap(MT103_77B_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT103_77B_Type_Pattern', MT103_77B_Type_Pattern)
_module_typeBindings.MT103_77B_Type_Pattern = MT103_77B_Type_Pattern

# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 511, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}SendersReference uses Python identifier SendersReference
    __SendersReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SendersReference'), 'SendersReference', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comSendersReference', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 513, 4), )

    
    SendersReference = property(__SendersReference.value, __SendersReference.set, None, None)

    
    # Element {http://www.w3schools.com}TimeIndication uses Python identifier TimeIndication
    __TimeIndication = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TimeIndication'), 'TimeIndication', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comTimeIndication', True, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 514, 4), )

    
    TimeIndication = property(__TimeIndication.value, __TimeIndication.set, None, None)

    
    # Element {http://www.w3schools.com}BankOperationCode uses Python identifier BankOperationCode
    __BankOperationCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BankOperationCode'), 'BankOperationCode', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comBankOperationCode', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 515, 4), )

    
    BankOperationCode = property(__BankOperationCode.value, __BankOperationCode.set, None, None)

    
    # Element {http://www.w3schools.com}InstructionCode uses Python identifier InstructionCode
    __InstructionCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InstructionCode'), 'InstructionCode', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comInstructionCode', True, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 516, 4), )

    
    InstructionCode = property(__InstructionCode.value, __InstructionCode.set, None, None)

    
    # Element {http://www.w3schools.com}TransactionTypeCode uses Python identifier TransactionTypeCode
    __TransactionTypeCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TransactionTypeCode'), 'TransactionTypeCode', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comTransactionTypeCode', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 517, 4), )

    
    TransactionTypeCode = property(__TransactionTypeCode.value, __TransactionTypeCode.set, None, None)

    
    # Element {http://www.w3schools.com}ValueDateCurrencyInterbankSettledAmount uses Python identifier ValueDateCurrencyInterbankSettledAmount
    __ValueDateCurrencyInterbankSettledAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ValueDateCurrencyInterbankSettledAmount'), 'ValueDateCurrencyInterbankSettledAmount', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comValueDateCurrencyInterbankSettledAmount', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 518, 4), )

    
    ValueDateCurrencyInterbankSettledAmount = property(__ValueDateCurrencyInterbankSettledAmount.value, __ValueDateCurrencyInterbankSettledAmount.set, None, None)

    
    # Element {http://www.w3schools.com}CurrencyInstructedAmount uses Python identifier CurrencyInstructedAmount
    __CurrencyInstructedAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CurrencyInstructedAmount'), 'CurrencyInstructedAmount', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comCurrencyInstructedAmount', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 519, 4), )

    
    CurrencyInstructedAmount = property(__CurrencyInstructedAmount.value, __CurrencyInstructedAmount.set, None, None)

    
    # Element {http://www.w3schools.com}ExchangeRate uses Python identifier ExchangeRate
    __ExchangeRate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExchangeRate'), 'ExchangeRate', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comExchangeRate', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 520, 4), )

    
    ExchangeRate = property(__ExchangeRate.value, __ExchangeRate.set, None, None)

    
    # Element {http://www.w3schools.com}OrderingCustomer_A uses Python identifier OrderingCustomer_A
    __OrderingCustomer_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OrderingCustomer_A'), 'OrderingCustomer_A', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comOrderingCustomer_A', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 522, 5), )

    
    OrderingCustomer_A = property(__OrderingCustomer_A.value, __OrderingCustomer_A.set, None, None)

    
    # Element {http://www.w3schools.com}OrderingCustomer_F uses Python identifier OrderingCustomer_F
    __OrderingCustomer_F = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OrderingCustomer_F'), 'OrderingCustomer_F', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comOrderingCustomer_F', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 523, 5), )

    
    OrderingCustomer_F = property(__OrderingCustomer_F.value, __OrderingCustomer_F.set, None, None)

    
    # Element {http://www.w3schools.com}OrderingCustomer_K uses Python identifier OrderingCustomer_K
    __OrderingCustomer_K = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OrderingCustomer_K'), 'OrderingCustomer_K', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comOrderingCustomer_K', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 524, 5), )

    
    OrderingCustomer_K = property(__OrderingCustomer_K.value, __OrderingCustomer_K.set, None, None)

    
    # Element {http://www.w3schools.com}SendingInstitution uses Python identifier SendingInstitution
    __SendingInstitution = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SendingInstitution'), 'SendingInstitution', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comSendingInstitution', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 526, 4), )

    
    SendingInstitution = property(__SendingInstitution.value, __SendingInstitution.set, None, None)

    
    # Element {http://www.w3schools.com}OrderingInstitution_A uses Python identifier OrderingInstitution_A
    __OrderingInstitution_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OrderingInstitution_A'), 'OrderingInstitution_A', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comOrderingInstitution_A', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 528, 5), )

    
    OrderingInstitution_A = property(__OrderingInstitution_A.value, __OrderingInstitution_A.set, None, None)

    
    # Element {http://www.w3schools.com}OrderingInstitution_D uses Python identifier OrderingInstitution_D
    __OrderingInstitution_D = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OrderingInstitution_D'), 'OrderingInstitution_D', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comOrderingInstitution_D', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 529, 5), )

    
    OrderingInstitution_D = property(__OrderingInstitution_D.value, __OrderingInstitution_D.set, None, None)

    
    # Element {http://www.w3schools.com}SendersCorrespondent_A uses Python identifier SendersCorrespondent_A
    __SendersCorrespondent_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SendersCorrespondent_A'), 'SendersCorrespondent_A', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comSendersCorrespondent_A', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 532, 5), )

    
    SendersCorrespondent_A = property(__SendersCorrespondent_A.value, __SendersCorrespondent_A.set, None, None)

    
    # Element {http://www.w3schools.com}SendersCorrespondent_B uses Python identifier SendersCorrespondent_B
    __SendersCorrespondent_B = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SendersCorrespondent_B'), 'SendersCorrespondent_B', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comSendersCorrespondent_B', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 533, 5), )

    
    SendersCorrespondent_B = property(__SendersCorrespondent_B.value, __SendersCorrespondent_B.set, None, None)

    
    # Element {http://www.w3schools.com}SendersCorrespondent_D uses Python identifier SendersCorrespondent_D
    __SendersCorrespondent_D = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SendersCorrespondent_D'), 'SendersCorrespondent_D', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comSendersCorrespondent_D', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 534, 5), )

    
    SendersCorrespondent_D = property(__SendersCorrespondent_D.value, __SendersCorrespondent_D.set, None, None)

    
    # Element {http://www.w3schools.com}ReceiversCorrespondent_A uses Python identifier ReceiversCorrespondent_A
    __ReceiversCorrespondent_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReceiversCorrespondent_A'), 'ReceiversCorrespondent_A', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comReceiversCorrespondent_A', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 537, 5), )

    
    ReceiversCorrespondent_A = property(__ReceiversCorrespondent_A.value, __ReceiversCorrespondent_A.set, None, None)

    
    # Element {http://www.w3schools.com}ReceiversCorrespondent_B uses Python identifier ReceiversCorrespondent_B
    __ReceiversCorrespondent_B = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReceiversCorrespondent_B'), 'ReceiversCorrespondent_B', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comReceiversCorrespondent_B', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 538, 5), )

    
    ReceiversCorrespondent_B = property(__ReceiversCorrespondent_B.value, __ReceiversCorrespondent_B.set, None, None)

    
    # Element {http://www.w3schools.com}ReceiversCorrespondent_D uses Python identifier ReceiversCorrespondent_D
    __ReceiversCorrespondent_D = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReceiversCorrespondent_D'), 'ReceiversCorrespondent_D', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comReceiversCorrespondent_D', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 539, 5), )

    
    ReceiversCorrespondent_D = property(__ReceiversCorrespondent_D.value, __ReceiversCorrespondent_D.set, None, None)

    
    # Element {http://www.w3schools.com}ThirdReimbursementInstitution_A uses Python identifier ThirdReimbursementInstitution_A
    __ThirdReimbursementInstitution_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ThirdReimbursementInstitution_A'), 'ThirdReimbursementInstitution_A', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comThirdReimbursementInstitution_A', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 542, 5), )

    
    ThirdReimbursementInstitution_A = property(__ThirdReimbursementInstitution_A.value, __ThirdReimbursementInstitution_A.set, None, None)

    
    # Element {http://www.w3schools.com}ThirdReimbursementInstitution_B uses Python identifier ThirdReimbursementInstitution_B
    __ThirdReimbursementInstitution_B = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ThirdReimbursementInstitution_B'), 'ThirdReimbursementInstitution_B', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comThirdReimbursementInstitution_B', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 543, 5), )

    
    ThirdReimbursementInstitution_B = property(__ThirdReimbursementInstitution_B.value, __ThirdReimbursementInstitution_B.set, None, None)

    
    # Element {http://www.w3schools.com}ThirdReimbursementInstitution_D uses Python identifier ThirdReimbursementInstitution_D
    __ThirdReimbursementInstitution_D = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ThirdReimbursementInstitution_D'), 'ThirdReimbursementInstitution_D', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comThirdReimbursementInstitution_D', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 544, 5), )

    
    ThirdReimbursementInstitution_D = property(__ThirdReimbursementInstitution_D.value, __ThirdReimbursementInstitution_D.set, None, None)

    
    # Element {http://www.w3schools.com}IntermediaryInstitution_A uses Python identifier IntermediaryInstitution_A
    __IntermediaryInstitution_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IntermediaryInstitution_A'), 'IntermediaryInstitution_A', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comIntermediaryInstitution_A', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 547, 5), )

    
    IntermediaryInstitution_A = property(__IntermediaryInstitution_A.value, __IntermediaryInstitution_A.set, None, None)

    
    # Element {http://www.w3schools.com}IntermediaryInstitution_C uses Python identifier IntermediaryInstitution_C
    __IntermediaryInstitution_C = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IntermediaryInstitution_C'), 'IntermediaryInstitution_C', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comIntermediaryInstitution_C', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 548, 5), )

    
    IntermediaryInstitution_C = property(__IntermediaryInstitution_C.value, __IntermediaryInstitution_C.set, None, None)

    
    # Element {http://www.w3schools.com}IntermediaryInstitution_D uses Python identifier IntermediaryInstitution_D
    __IntermediaryInstitution_D = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IntermediaryInstitution_D'), 'IntermediaryInstitution_D', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comIntermediaryInstitution_D', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 549, 5), )

    
    IntermediaryInstitution_D = property(__IntermediaryInstitution_D.value, __IntermediaryInstitution_D.set, None, None)

    
    # Element {http://www.w3schools.com}AccountWithInstitution_A uses Python identifier AccountWithInstitution_A
    __AccountWithInstitution_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AccountWithInstitution_A'), 'AccountWithInstitution_A', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comAccountWithInstitution_A', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 552, 5), )

    
    AccountWithInstitution_A = property(__AccountWithInstitution_A.value, __AccountWithInstitution_A.set, None, None)

    
    # Element {http://www.w3schools.com}AccountWithInstitution_B uses Python identifier AccountWithInstitution_B
    __AccountWithInstitution_B = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AccountWithInstitution_B'), 'AccountWithInstitution_B', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comAccountWithInstitution_B', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 553, 5), )

    
    AccountWithInstitution_B = property(__AccountWithInstitution_B.value, __AccountWithInstitution_B.set, None, None)

    
    # Element {http://www.w3schools.com}AccountWithInstitution_C uses Python identifier AccountWithInstitution_C
    __AccountWithInstitution_C = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AccountWithInstitution_C'), 'AccountWithInstitution_C', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comAccountWithInstitution_C', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 554, 5), )

    
    AccountWithInstitution_C = property(__AccountWithInstitution_C.value, __AccountWithInstitution_C.set, None, None)

    
    # Element {http://www.w3schools.com}AccountWithInstitution_D uses Python identifier AccountWithInstitution_D
    __AccountWithInstitution_D = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AccountWithInstitution_D'), 'AccountWithInstitution_D', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comAccountWithInstitution_D', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 555, 5), )

    
    AccountWithInstitution_D = property(__AccountWithInstitution_D.value, __AccountWithInstitution_D.set, None, None)

    
    # Element {http://www.w3schools.com}BeneficiaryCustomer uses Python identifier BeneficiaryCustomer
    __BeneficiaryCustomer = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryCustomer'), 'BeneficiaryCustomer', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comBeneficiaryCustomer', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 558, 5), )

    
    BeneficiaryCustomer = property(__BeneficiaryCustomer.value, __BeneficiaryCustomer.set, None, None)

    
    # Element {http://www.w3schools.com}BeneficiaryCustomer_A uses Python identifier BeneficiaryCustomer_A
    __BeneficiaryCustomer_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryCustomer_A'), 'BeneficiaryCustomer_A', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comBeneficiaryCustomer_A', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 559, 5), )

    
    BeneficiaryCustomer_A = property(__BeneficiaryCustomer_A.value, __BeneficiaryCustomer_A.set, None, None)

    
    # Element {http://www.w3schools.com}BeneficiaryCustomer_F uses Python identifier BeneficiaryCustomer_F
    __BeneficiaryCustomer_F = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryCustomer_F'), 'BeneficiaryCustomer_F', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comBeneficiaryCustomer_F', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 560, 5), )

    
    BeneficiaryCustomer_F = property(__BeneficiaryCustomer_F.value, __BeneficiaryCustomer_F.set, None, None)

    
    # Element {http://www.w3schools.com}RemittanceInformation uses Python identifier RemittanceInformation
    __RemittanceInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RemittanceInformation'), 'RemittanceInformation', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comRemittanceInformation', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 562, 4), )

    
    RemittanceInformation = property(__RemittanceInformation.value, __RemittanceInformation.set, None, None)

    
    # Element {http://www.w3schools.com}DetailsOfCharges uses Python identifier DetailsOfCharges
    __DetailsOfCharges = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DetailsOfCharges'), 'DetailsOfCharges', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comDetailsOfCharges', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 563, 4), )

    
    DetailsOfCharges = property(__DetailsOfCharges.value, __DetailsOfCharges.set, None, None)

    
    # Element {http://www.w3schools.com}SendersCharges uses Python identifier SendersCharges
    __SendersCharges = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SendersCharges'), 'SendersCharges', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comSendersCharges', True, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 564, 4), )

    
    SendersCharges = property(__SendersCharges.value, __SendersCharges.set, None, None)

    
    # Element {http://www.w3schools.com}ReceiversCharges uses Python identifier ReceiversCharges
    __ReceiversCharges = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReceiversCharges'), 'ReceiversCharges', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comReceiversCharges', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 565, 4), )

    
    ReceiversCharges = property(__ReceiversCharges.value, __ReceiversCharges.set, None, None)

    
    # Element {http://www.w3schools.com}SenderToReceiverInformation uses Python identifier SenderToReceiverInformation
    __SenderToReceiverInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SenderToReceiverInformation'), 'SenderToReceiverInformation', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comSenderToReceiverInformation', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 566, 4), )

    
    SenderToReceiverInformation = property(__SenderToReceiverInformation.value, __SenderToReceiverInformation.set, None, None)

    
    # Element {http://www.w3schools.com}RegulatoryReporting uses Python identifier RegulatoryReporting
    __RegulatoryReporting = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RegulatoryReporting'), 'RegulatoryReporting', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comRegulatoryReporting', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 567, 4), )

    
    RegulatoryReporting = property(__RegulatoryReporting.value, __RegulatoryReporting.set, None, None)

    _ElementMap.update({
        __SendersReference.name() : __SendersReference,
        __TimeIndication.name() : __TimeIndication,
        __BankOperationCode.name() : __BankOperationCode,
        __InstructionCode.name() : __InstructionCode,
        __TransactionTypeCode.name() : __TransactionTypeCode,
        __ValueDateCurrencyInterbankSettledAmount.name() : __ValueDateCurrencyInterbankSettledAmount,
        __CurrencyInstructedAmount.name() : __CurrencyInstructedAmount,
        __ExchangeRate.name() : __ExchangeRate,
        __OrderingCustomer_A.name() : __OrderingCustomer_A,
        __OrderingCustomer_F.name() : __OrderingCustomer_F,
        __OrderingCustomer_K.name() : __OrderingCustomer_K,
        __SendingInstitution.name() : __SendingInstitution,
        __OrderingInstitution_A.name() : __OrderingInstitution_A,
        __OrderingInstitution_D.name() : __OrderingInstitution_D,
        __SendersCorrespondent_A.name() : __SendersCorrespondent_A,
        __SendersCorrespondent_B.name() : __SendersCorrespondent_B,
        __SendersCorrespondent_D.name() : __SendersCorrespondent_D,
        __ReceiversCorrespondent_A.name() : __ReceiversCorrespondent_A,
        __ReceiversCorrespondent_B.name() : __ReceiversCorrespondent_B,
        __ReceiversCorrespondent_D.name() : __ReceiversCorrespondent_D,
        __ThirdReimbursementInstitution_A.name() : __ThirdReimbursementInstitution_A,
        __ThirdReimbursementInstitution_B.name() : __ThirdReimbursementInstitution_B,
        __ThirdReimbursementInstitution_D.name() : __ThirdReimbursementInstitution_D,
        __IntermediaryInstitution_A.name() : __IntermediaryInstitution_A,
        __IntermediaryInstitution_C.name() : __IntermediaryInstitution_C,
        __IntermediaryInstitution_D.name() : __IntermediaryInstitution_D,
        __AccountWithInstitution_A.name() : __AccountWithInstitution_A,
        __AccountWithInstitution_B.name() : __AccountWithInstitution_B,
        __AccountWithInstitution_C.name() : __AccountWithInstitution_C,
        __AccountWithInstitution_D.name() : __AccountWithInstitution_D,
        __BeneficiaryCustomer.name() : __BeneficiaryCustomer,
        __BeneficiaryCustomer_A.name() : __BeneficiaryCustomer_A,
        __BeneficiaryCustomer_F.name() : __BeneficiaryCustomer_F,
        __RemittanceInformation.name() : __RemittanceInformation,
        __DetailsOfCharges.name() : __DetailsOfCharges,
        __SendersCharges.name() : __SendersCharges,
        __ReceiversCharges.name() : __ReceiversCharges,
        __SenderToReceiverInformation.name() : __SenderToReceiverInformation,
        __RegulatoryReporting.name() : __RegulatoryReporting
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON = CTD_ANON


# Complex type {http://www.w3schools.com}MT103_20_Type with content type SIMPLE
class MT103_20_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT103_20_Type with content type SIMPLE"""
    _TypeDefinition = MT103_20_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_20_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 8, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT103_20_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT103_20_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='20')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 11, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 11, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT103_20_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 12, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 12, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT103_20_Type = MT103_20_Type
Namespace.addCategoryObject('typeBinding', 'MT103_20_Type', MT103_20_Type)


# Complex type {http://www.w3schools.com}MT103_13C_Type with content type SIMPLE
class MT103_13C_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT103_13C_Type with content type SIMPLE"""
    _TypeDefinition = MT103_13C_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_13C_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 21, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT103_13C_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT103_13C_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='13C')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 24, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 24, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT103_13C_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 25, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 25, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT103_13C_Type = MT103_13C_Type
Namespace.addCategoryObject('typeBinding', 'MT103_13C_Type', MT103_13C_Type)


# Complex type {http://www.w3schools.com}MT103_23B_Type with content type SIMPLE
class MT103_23B_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT103_23B_Type with content type SIMPLE"""
    _TypeDefinition = MT103_23B_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_23B_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 34, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT103_23B_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT103_23B_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='23B')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 37, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 37, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT103_23B_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 38, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 38, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT103_23B_Type = MT103_23B_Type
Namespace.addCategoryObject('typeBinding', 'MT103_23B_Type', MT103_23B_Type)


# Complex type {http://www.w3schools.com}MT103_23E_Type with content type SIMPLE
class MT103_23E_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT103_23E_Type with content type SIMPLE"""
    _TypeDefinition = MT103_23E_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_23E_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 47, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT103_23E_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT103_23E_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='23E')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 50, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 50, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT103_23E_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 51, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 51, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT103_23E_Type = MT103_23E_Type
Namespace.addCategoryObject('typeBinding', 'MT103_23E_Type', MT103_23E_Type)


# Complex type {http://www.w3schools.com}MT103_26T_Type with content type SIMPLE
class MT103_26T_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT103_26T_Type with content type SIMPLE"""
    _TypeDefinition = MT103_26T_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_26T_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 60, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT103_26T_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT103_26T_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='26T')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 63, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 63, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT103_26T_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 64, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 64, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT103_26T_Type = MT103_26T_Type
Namespace.addCategoryObject('typeBinding', 'MT103_26T_Type', MT103_26T_Type)


# Complex type {http://www.w3schools.com}MT103_32A_Type with content type SIMPLE
class MT103_32A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT103_32A_Type with content type SIMPLE"""
    _TypeDefinition = MT103_32A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_32A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 73, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT103_32A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT103_32A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='32A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 76, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 76, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT103_32A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 77, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 77, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT103_32A_Type = MT103_32A_Type
Namespace.addCategoryObject('typeBinding', 'MT103_32A_Type', MT103_32A_Type)


# Complex type {http://www.w3schools.com}MT103_33B_Type with content type SIMPLE
class MT103_33B_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT103_33B_Type with content type SIMPLE"""
    _TypeDefinition = MT103_33B_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_33B_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 86, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT103_33B_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT103_33B_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='33B')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 89, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 89, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT103_33B_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 90, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 90, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT103_33B_Type = MT103_33B_Type
Namespace.addCategoryObject('typeBinding', 'MT103_33B_Type', MT103_33B_Type)


# Complex type {http://www.w3schools.com}MT103_36_Type with content type SIMPLE
class MT103_36_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT103_36_Type with content type SIMPLE"""
    _TypeDefinition = MT103_36_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_36_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 99, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT103_36_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT103_36_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='36')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 102, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 102, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT103_36_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 103, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 103, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT103_36_Type = MT103_36_Type
Namespace.addCategoryObject('typeBinding', 'MT103_36_Type', MT103_36_Type)


# Complex type {http://www.w3schools.com}MT103_50A_Type with content type SIMPLE
class MT103_50A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT103_50A_Type with content type SIMPLE"""
    _TypeDefinition = MT103_50A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_50A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 112, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT103_50A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT103_50A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='50A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 115, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 115, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT103_50A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 116, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 116, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT103_50A_Type = MT103_50A_Type
Namespace.addCategoryObject('typeBinding', 'MT103_50A_Type', MT103_50A_Type)


# Complex type {http://www.w3schools.com}MT103_50F_Type with content type SIMPLE
class MT103_50F_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT103_50F_Type with content type SIMPLE"""
    _TypeDefinition = MT103_50F_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_50F_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 125, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT103_50F_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT103_50F_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='50F')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 128, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 128, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT103_50F_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 129, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 129, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT103_50F_Type = MT103_50F_Type
Namespace.addCategoryObject('typeBinding', 'MT103_50F_Type', MT103_50F_Type)


# Complex type {http://www.w3schools.com}MT103_50K_Type with content type SIMPLE
class MT103_50K_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT103_50K_Type with content type SIMPLE"""
    _TypeDefinition = MT103_50K_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_50K_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 138, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT103_50K_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT103_50K_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='50K')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 141, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 141, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT103_50K_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 142, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 142, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT103_50K_Type = MT103_50K_Type
Namespace.addCategoryObject('typeBinding', 'MT103_50K_Type', MT103_50K_Type)


# Complex type {http://www.w3schools.com}MT103_51A_Type with content type SIMPLE
class MT103_51A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT103_51A_Type with content type SIMPLE"""
    _TypeDefinition = MT103_51A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_51A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 151, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT103_51A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT103_51A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='51A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 154, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 154, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT103_51A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 155, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 155, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT103_51A_Type = MT103_51A_Type
Namespace.addCategoryObject('typeBinding', 'MT103_51A_Type', MT103_51A_Type)


# Complex type {http://www.w3schools.com}MT103_52A_Type with content type SIMPLE
class MT103_52A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT103_52A_Type with content type SIMPLE"""
    _TypeDefinition = MT103_52A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_52A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 164, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT103_52A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT103_52A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='52A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 167, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 167, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT103_52A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 168, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 168, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT103_52A_Type = MT103_52A_Type
Namespace.addCategoryObject('typeBinding', 'MT103_52A_Type', MT103_52A_Type)


# Complex type {http://www.w3schools.com}MT103_52D_Type with content type SIMPLE
class MT103_52D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT103_52D_Type with content type SIMPLE"""
    _TypeDefinition = MT103_52D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_52D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 177, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT103_52D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT103_52D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='52D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 180, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 180, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT103_52D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 181, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 181, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT103_52D_Type = MT103_52D_Type
Namespace.addCategoryObject('typeBinding', 'MT103_52D_Type', MT103_52D_Type)


# Complex type {http://www.w3schools.com}MT103_53A_Type with content type SIMPLE
class MT103_53A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT103_53A_Type with content type SIMPLE"""
    _TypeDefinition = MT103_53A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_53A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 190, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT103_53A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT103_53A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='53A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 193, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 193, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT103_53A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 194, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 194, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT103_53A_Type = MT103_53A_Type
Namespace.addCategoryObject('typeBinding', 'MT103_53A_Type', MT103_53A_Type)


# Complex type {http://www.w3schools.com}MT103_53B_Type with content type SIMPLE
class MT103_53B_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT103_53B_Type with content type SIMPLE"""
    _TypeDefinition = MT103_53B_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_53B_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 203, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT103_53B_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT103_53B_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='53B')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 206, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 206, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT103_53B_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 207, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 207, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT103_53B_Type = MT103_53B_Type
Namespace.addCategoryObject('typeBinding', 'MT103_53B_Type', MT103_53B_Type)


# Complex type {http://www.w3schools.com}MT103_53D_Type with content type SIMPLE
class MT103_53D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT103_53D_Type with content type SIMPLE"""
    _TypeDefinition = MT103_53D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_53D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 216, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT103_53D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT103_53D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='53D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 219, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 219, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT103_53D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 220, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 220, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT103_53D_Type = MT103_53D_Type
Namespace.addCategoryObject('typeBinding', 'MT103_53D_Type', MT103_53D_Type)


# Complex type {http://www.w3schools.com}MT103_54A_Type with content type SIMPLE
class MT103_54A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT103_54A_Type with content type SIMPLE"""
    _TypeDefinition = MT103_54A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_54A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 229, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT103_54A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT103_54A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='54A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 232, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 232, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT103_54A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 233, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 233, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT103_54A_Type = MT103_54A_Type
Namespace.addCategoryObject('typeBinding', 'MT103_54A_Type', MT103_54A_Type)


# Complex type {http://www.w3schools.com}MT103_54B_Type with content type SIMPLE
class MT103_54B_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT103_54B_Type with content type SIMPLE"""
    _TypeDefinition = MT103_54B_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_54B_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 242, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT103_54B_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT103_54B_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='54B')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 245, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 245, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT103_54B_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 246, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 246, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT103_54B_Type = MT103_54B_Type
Namespace.addCategoryObject('typeBinding', 'MT103_54B_Type', MT103_54B_Type)


# Complex type {http://www.w3schools.com}MT103_54D_Type with content type SIMPLE
class MT103_54D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT103_54D_Type with content type SIMPLE"""
    _TypeDefinition = MT103_54D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_54D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 255, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT103_54D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT103_54D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='54D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 258, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 258, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT103_54D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 259, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 259, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT103_54D_Type = MT103_54D_Type
Namespace.addCategoryObject('typeBinding', 'MT103_54D_Type', MT103_54D_Type)


# Complex type {http://www.w3schools.com}MT103_55A_Type with content type SIMPLE
class MT103_55A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT103_55A_Type with content type SIMPLE"""
    _TypeDefinition = MT103_55A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_55A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 268, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT103_55A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT103_55A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='55A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 271, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 271, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT103_55A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 272, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 272, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT103_55A_Type = MT103_55A_Type
Namespace.addCategoryObject('typeBinding', 'MT103_55A_Type', MT103_55A_Type)


# Complex type {http://www.w3schools.com}MT103_55B_Type with content type SIMPLE
class MT103_55B_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT103_55B_Type with content type SIMPLE"""
    _TypeDefinition = MT103_55B_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_55B_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 281, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT103_55B_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT103_55B_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='55B')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 284, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 284, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT103_55B_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 285, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 285, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT103_55B_Type = MT103_55B_Type
Namespace.addCategoryObject('typeBinding', 'MT103_55B_Type', MT103_55B_Type)


# Complex type {http://www.w3schools.com}MT103_55D_Type with content type SIMPLE
class MT103_55D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT103_55D_Type with content type SIMPLE"""
    _TypeDefinition = MT103_55D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_55D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 294, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT103_55D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT103_55D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='55D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 297, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 297, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT103_55D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 298, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 298, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT103_55D_Type = MT103_55D_Type
Namespace.addCategoryObject('typeBinding', 'MT103_55D_Type', MT103_55D_Type)


# Complex type {http://www.w3schools.com}MT103_56A_Type with content type SIMPLE
class MT103_56A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT103_56A_Type with content type SIMPLE"""
    _TypeDefinition = MT103_56A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_56A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 307, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT103_56A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT103_56A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='56A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 310, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 310, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT103_56A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 311, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 311, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT103_56A_Type = MT103_56A_Type
Namespace.addCategoryObject('typeBinding', 'MT103_56A_Type', MT103_56A_Type)


# Complex type {http://www.w3schools.com}MT103_56C_Type with content type SIMPLE
class MT103_56C_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT103_56C_Type with content type SIMPLE"""
    _TypeDefinition = MT103_56C_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_56C_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 320, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT103_56C_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT103_56C_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='56C')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 323, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 323, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT103_56C_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 324, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 324, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT103_56C_Type = MT103_56C_Type
Namespace.addCategoryObject('typeBinding', 'MT103_56C_Type', MT103_56C_Type)


# Complex type {http://www.w3schools.com}MT103_56D_Type with content type SIMPLE
class MT103_56D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT103_56D_Type with content type SIMPLE"""
    _TypeDefinition = MT103_56D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_56D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 333, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT103_56D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT103_56D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='56D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 336, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 336, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT103_56D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 337, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 337, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT103_56D_Type = MT103_56D_Type
Namespace.addCategoryObject('typeBinding', 'MT103_56D_Type', MT103_56D_Type)


# Complex type {http://www.w3schools.com}MT103_57A_Type with content type SIMPLE
class MT103_57A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT103_57A_Type with content type SIMPLE"""
    _TypeDefinition = MT103_57A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_57A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 346, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT103_57A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT103_57A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='57A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 349, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 349, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT103_57A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 350, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 350, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT103_57A_Type = MT103_57A_Type
Namespace.addCategoryObject('typeBinding', 'MT103_57A_Type', MT103_57A_Type)


# Complex type {http://www.w3schools.com}MT103_57B_Type with content type SIMPLE
class MT103_57B_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT103_57B_Type with content type SIMPLE"""
    _TypeDefinition = MT103_57B_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_57B_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 359, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT103_57B_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT103_57B_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='57B')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 362, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 362, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT103_57B_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 363, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 363, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT103_57B_Type = MT103_57B_Type
Namespace.addCategoryObject('typeBinding', 'MT103_57B_Type', MT103_57B_Type)


# Complex type {http://www.w3schools.com}MT103_57C_Type with content type SIMPLE
class MT103_57C_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT103_57C_Type with content type SIMPLE"""
    _TypeDefinition = MT103_57C_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_57C_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 372, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT103_57C_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT103_57C_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='57C')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 375, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 375, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT103_57C_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 376, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 376, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT103_57C_Type = MT103_57C_Type
Namespace.addCategoryObject('typeBinding', 'MT103_57C_Type', MT103_57C_Type)


# Complex type {http://www.w3schools.com}MT103_57D_Type with content type SIMPLE
class MT103_57D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT103_57D_Type with content type SIMPLE"""
    _TypeDefinition = MT103_57D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_57D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 385, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT103_57D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT103_57D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='57D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 388, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 388, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT103_57D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 389, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 389, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT103_57D_Type = MT103_57D_Type
Namespace.addCategoryObject('typeBinding', 'MT103_57D_Type', MT103_57D_Type)


# Complex type {http://www.w3schools.com}MT103_59_Type with content type SIMPLE
class MT103_59_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT103_59_Type with content type SIMPLE"""
    _TypeDefinition = MT103_59_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_59_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 398, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT103_59_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT103_59_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='59')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 401, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 401, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT103_59_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 402, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 402, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT103_59_Type = MT103_59_Type
Namespace.addCategoryObject('typeBinding', 'MT103_59_Type', MT103_59_Type)


# Complex type {http://www.w3schools.com}MT103_59A_Type with content type SIMPLE
class MT103_59A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT103_59A_Type with content type SIMPLE"""
    _TypeDefinition = MT103_59A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_59A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 411, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT103_59A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT103_59A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='59A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 414, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 414, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT103_59A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 415, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 415, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT103_59A_Type = MT103_59A_Type
Namespace.addCategoryObject('typeBinding', 'MT103_59A_Type', MT103_59A_Type)


# Complex type {http://www.w3schools.com}MT103_59F_Type with content type SIMPLE
class MT103_59F_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT103_59F_Type with content type SIMPLE"""
    _TypeDefinition = MT103_59F_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_59F_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 424, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT103_59F_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT103_59F_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='59F')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 427, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 427, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT103_59F_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 428, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 428, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT103_59F_Type = MT103_59F_Type
Namespace.addCategoryObject('typeBinding', 'MT103_59F_Type', MT103_59F_Type)


# Complex type {http://www.w3schools.com}MT103_70_Type with content type SIMPLE
class MT103_70_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT103_70_Type with content type SIMPLE"""
    _TypeDefinition = MT103_70_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_70_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 437, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT103_70_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT103_70_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='70')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 440, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 440, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT103_70_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 441, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 441, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT103_70_Type = MT103_70_Type
Namespace.addCategoryObject('typeBinding', 'MT103_70_Type', MT103_70_Type)


# Complex type {http://www.w3schools.com}MT103_71A_Type with content type SIMPLE
class MT103_71A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT103_71A_Type with content type SIMPLE"""
    _TypeDefinition = MT103_71A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_71A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 450, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT103_71A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT103_71A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='71A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 453, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 453, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT103_71A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 454, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 454, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT103_71A_Type = MT103_71A_Type
Namespace.addCategoryObject('typeBinding', 'MT103_71A_Type', MT103_71A_Type)


# Complex type {http://www.w3schools.com}MT103_71F_Type with content type SIMPLE
class MT103_71F_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT103_71F_Type with content type SIMPLE"""
    _TypeDefinition = MT103_71F_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_71F_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 463, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT103_71F_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT103_71F_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='71F')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 466, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 466, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT103_71F_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 467, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 467, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT103_71F_Type = MT103_71F_Type
Namespace.addCategoryObject('typeBinding', 'MT103_71F_Type', MT103_71F_Type)


# Complex type {http://www.w3schools.com}MT103_71G_Type with content type SIMPLE
class MT103_71G_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT103_71G_Type with content type SIMPLE"""
    _TypeDefinition = MT103_71G_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_71G_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 476, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT103_71G_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT103_71G_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='71G')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 479, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 479, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT103_71G_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 480, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 480, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT103_71G_Type = MT103_71G_Type
Namespace.addCategoryObject('typeBinding', 'MT103_71G_Type', MT103_71G_Type)


# Complex type {http://www.w3schools.com}MT103_72_Type with content type SIMPLE
class MT103_72_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT103_72_Type with content type SIMPLE"""
    _TypeDefinition = MT103_72_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_72_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 489, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT103_72_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT103_72_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='72')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 492, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 492, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT103_72_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 493, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 493, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT103_72_Type = MT103_72_Type
Namespace.addCategoryObject('typeBinding', 'MT103_72_Type', MT103_72_Type)


# Complex type {http://www.w3schools.com}MT103_77B_Type with content type SIMPLE
class MT103_77B_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT103_77B_Type with content type SIMPLE"""
    _TypeDefinition = MT103_77B_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT103_77B_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 502, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT103_77B_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT103_77B_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='77B')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 505, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 505, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT103_77B_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 506, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 506, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT103_77B_Type = MT103_77B_Type
Namespace.addCategoryObject('typeBinding', 'MT103_77B_Type', MT103_77B_Type)


MT103 = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MT103'), CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 510, 1))
Namespace.addCategoryObject('elementBinding', MT103.name().localName(), MT103)



CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SendersReference'), MT103_20_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 513, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TimeIndication'), MT103_13C_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 514, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BankOperationCode'), MT103_23B_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 515, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InstructionCode'), MT103_23E_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 516, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TransactionTypeCode'), MT103_26T_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 517, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ValueDateCurrencyInterbankSettledAmount'), MT103_32A_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 518, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CurrencyInstructedAmount'), MT103_33B_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 519, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExchangeRate'), MT103_36_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 520, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OrderingCustomer_A'), MT103_50A_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 522, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OrderingCustomer_F'), MT103_50F_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 523, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OrderingCustomer_K'), MT103_50K_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 524, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SendingInstitution'), MT103_51A_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 526, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OrderingInstitution_A'), MT103_52A_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 528, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OrderingInstitution_D'), MT103_52D_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 529, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SendersCorrespondent_A'), MT103_53A_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 532, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SendersCorrespondent_B'), MT103_53B_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 533, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SendersCorrespondent_D'), MT103_53D_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 534, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReceiversCorrespondent_A'), MT103_54A_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 537, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReceiversCorrespondent_B'), MT103_54B_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 538, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReceiversCorrespondent_D'), MT103_54D_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 539, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ThirdReimbursementInstitution_A'), MT103_55A_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 542, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ThirdReimbursementInstitution_B'), MT103_55B_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 543, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ThirdReimbursementInstitution_D'), MT103_55D_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 544, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IntermediaryInstitution_A'), MT103_56A_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 547, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IntermediaryInstitution_C'), MT103_56C_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 548, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IntermediaryInstitution_D'), MT103_56D_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 549, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AccountWithInstitution_A'), MT103_57A_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 552, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AccountWithInstitution_B'), MT103_57B_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 553, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AccountWithInstitution_C'), MT103_57C_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 554, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AccountWithInstitution_D'), MT103_57D_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 555, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryCustomer'), MT103_59_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 558, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryCustomer_A'), MT103_59A_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 559, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryCustomer_F'), MT103_59F_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 560, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RemittanceInformation'), MT103_70_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 562, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DetailsOfCharges'), MT103_71A_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 563, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SendersCharges'), MT103_71F_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 564, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReceiversCharges'), MT103_71G_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 565, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SenderToReceiverInformation'), MT103_72_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 566, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RegulatoryReporting'), MT103_77B_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 567, 4)))

def _BuildAutomaton ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton
    del _BuildAutomaton
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 514, 4))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 516, 4))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 517, 4))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 519, 4))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 520, 4))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 526, 4))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 527, 4))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 528, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 529, 5))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 531, 4))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 532, 5))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 533, 5))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 534, 5))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 536, 4))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 537, 5))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 538, 5))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 539, 5))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 541, 4))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 542, 5))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 543, 5))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 544, 5))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 546, 4))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 547, 5))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 548, 5))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 549, 5))
    counters.add(cc_24)
    cc_25 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 551, 4))
    counters.add(cc_25)
    cc_26 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 552, 5))
    counters.add(cc_26)
    cc_27 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 553, 5))
    counters.add(cc_27)
    cc_28 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 554, 5))
    counters.add(cc_28)
    cc_29 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 555, 5))
    counters.add(cc_29)
    cc_30 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 562, 4))
    counters.add(cc_30)
    cc_31 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 564, 4))
    counters.add(cc_31)
    cc_32 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 565, 4))
    counters.add(cc_32)
    cc_33 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 566, 4))
    counters.add(cc_33)
    cc_34 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 567, 4))
    counters.add(cc_34)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SendersReference')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 513, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TimeIndication')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 514, 4))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BankOperationCode')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 515, 4))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InstructionCode')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 516, 4))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TransactionTypeCode')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 517, 4))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ValueDateCurrencyInterbankSettledAmount')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 518, 4))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CurrencyInstructedAmount')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 519, 4))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExchangeRate')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 520, 4))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OrderingCustomer_A')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 522, 5))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OrderingCustomer_F')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 523, 5))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OrderingCustomer_K')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 524, 5))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SendingInstitution')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 526, 4))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OrderingInstitution_A')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 528, 5))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OrderingInstitution_D')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 529, 5))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SendersCorrespondent_A')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 532, 5))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SendersCorrespondent_B')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 533, 5))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SendersCorrespondent_D')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 534, 5))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReceiversCorrespondent_A')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 537, 5))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReceiversCorrespondent_B')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 538, 5))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReceiversCorrespondent_D')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 539, 5))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ThirdReimbursementInstitution_A')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 542, 5))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ThirdReimbursementInstitution_B')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 543, 5))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ThirdReimbursementInstitution_D')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 544, 5))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IntermediaryInstitution_A')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 547, 5))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IntermediaryInstitution_C')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 548, 5))
    st_24 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IntermediaryInstitution_D')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 549, 5))
    st_25 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AccountWithInstitution_A')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 552, 5))
    st_26 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_26)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AccountWithInstitution_B')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 553, 5))
    st_27 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_27)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AccountWithInstitution_C')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 554, 5))
    st_28 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_28)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AccountWithInstitution_D')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 555, 5))
    st_29 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_29)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryCustomer')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 558, 5))
    st_30 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_30)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryCustomer_A')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 559, 5))
    st_31 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_31)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryCustomer_F')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 560, 5))
    st_32 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_32)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RemittanceInformation')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 562, 4))
    st_33 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_33)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DetailsOfCharges')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 563, 4))
    st_34 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_34)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_31, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SendersCharges')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 564, 4))
    st_35 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_35)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_32, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReceiversCharges')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 565, 4))
    st_36 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_36)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_33, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SenderToReceiverInformation')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 566, 4))
    st_37 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_37)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_34, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RegulatoryReporting')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT103.xsd', 567, 4))
    st_38 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_38)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    transitions.append(fac.Transition(st_31, [
         ]))
    transitions.append(fac.Transition(st_32, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    transitions.append(fac.Transition(st_31, [
         ]))
    transitions.append(fac.Transition(st_32, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    transitions.append(fac.Transition(st_31, [
         ]))
    transitions.append(fac.Transition(st_32, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_6, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_6, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_6, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_6, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_6, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_6, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_6, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_6, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_6, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_6, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_6, False),
        fac.UpdateInstruction(cc_7, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_6, False),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_6, False),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_6, False),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_6, False),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_6, False),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_6, False),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_6, False),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_6, False),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_6, False),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_6, False),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_6, False),
        fac.UpdateInstruction(cc_8, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_10, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_11, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, True),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_9, False),
        fac.UpdateInstruction(cc_12, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, False),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_13, False),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_13, False),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_13, False),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_13, False),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_13, False),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_13, False),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_13, False),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_13, False),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_13, False),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_13, False),
        fac.UpdateInstruction(cc_14, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, False),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_13, False),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_13, False),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_13, False),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_13, False),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_13, False),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_13, False),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_13, False),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_13, False),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_13, False),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_13, False),
        fac.UpdateInstruction(cc_15, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, False),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_13, False),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_13, False),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_13, False),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_13, False),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_13, False),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_13, False),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_13, False),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_13, False),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_13, False),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_13, False),
        fac.UpdateInstruction(cc_16, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_17, False),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_17, False),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_17, False),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_17, False),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_17, False),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_17, False),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_17, False),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_17, False),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_17, False),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_17, False),
        fac.UpdateInstruction(cc_18, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, True),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_17, False),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_17, False),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_17, False),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_17, False),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_17, False),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_17, False),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_17, False),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_17, False),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_17, False),
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_17, False),
        fac.UpdateInstruction(cc_19, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, True),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_20, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_17, False),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_17, False),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_17, False),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_17, False),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_17, False),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_17, False),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_17, False),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_17, False),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_17, False),
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_17, False),
        fac.UpdateInstruction(cc_20, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_21, True),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_22, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_21, True),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_21, True),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_21, False),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_21, False),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_21, False),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_21, False),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_21, False),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_21, False),
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_21, False),
        fac.UpdateInstruction(cc_22, False) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_21, True),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_21, True),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_23, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_21, True),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_21, False),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_21, False),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_21, False),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_21, False),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_21, False),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_21, False),
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_21, False),
        fac.UpdateInstruction(cc_23, False) ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_21, True),
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_21, True),
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_21, True),
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_21, False),
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_21, False),
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_21, False),
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_21, False),
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_21, False),
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_21, False),
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_21, False),
        fac.UpdateInstruction(cc_24, False) ]))
    st_25._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_25, True),
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_26, True) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_25, True),
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_25, True),
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_25, True),
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_25, False),
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_25, False),
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_25, False),
        fac.UpdateInstruction(cc_26, False) ]))
    st_26._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_25, True),
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_25, True),
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_27, True) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_25, True),
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_25, True),
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_25, False),
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_25, False),
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_25, False),
        fac.UpdateInstruction(cc_27, False) ]))
    st_27._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_25, True),
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_25, True),
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_25, True),
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_28, True) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_25, True),
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_25, False),
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_25, False),
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_25, False),
        fac.UpdateInstruction(cc_28, False) ]))
    st_28._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_25, True),
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_25, True),
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_25, True),
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_25, True),
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_29, True) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_25, False),
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_25, False),
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_25, False),
        fac.UpdateInstruction(cc_29, False) ]))
    st_29._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_33, [
         ]))
    transitions.append(fac.Transition(st_34, [
         ]))
    st_30._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_33, [
         ]))
    transitions.append(fac.Transition(st_34, [
         ]))
    st_31._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_33, [
         ]))
    transitions.append(fac.Transition(st_34, [
         ]))
    st_32._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_30, True) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_30, False) ]))
    st_33._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_35, [
         ]))
    transitions.append(fac.Transition(st_36, [
         ]))
    transitions.append(fac.Transition(st_37, [
         ]))
    transitions.append(fac.Transition(st_38, [
         ]))
    st_34._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_31, True) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_31, False) ]))
    st_35._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_32, True) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_32, False) ]))
    st_36._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_33, True) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_33, False) ]))
    st_37._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_34, True) ]))
    st_38._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON._Automaton = _BuildAutomaton()



...

  MT192
# C:\Projects\Xsds\MT192.py
# -*- coding: utf-8 -*-
# PyXB bindings for NM:96afad3d20bbfe8d040a1a097fa388d9fecd10e3
# Generated 2020-01-27 12:00:11.982691 by PyXB version 1.2.6 using Python 3.7.4.final.0
# Namespace http://www.w3schools.com

from __future__ import unicode_literals
import pyxb
import pyxb.binding
import pyxb.binding.saxer
import io
import pyxb.utils.utility
import pyxb.utils.domutils
import sys
import pyxb.utils.six as _six
# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:78a22b24-40ce-11ea-bc3e-509a4c321f2f')

# Version of PyXB used to generate the bindings
_PyXBVersion = '1.2.6'
# Generated bindings are not compatible across PyXB versions
if pyxb.__version__ != _PyXBVersion:
    raise pyxb.PyXBVersionError(_PyXBVersion)

# A holder for module-level binding classes so we can access them from
# inside class definitions where property names may conflict.
_module_typeBindings = pyxb.utils.utility.Object()

# Import bindings for namespaces imported into schema
import pyxb.binding.datatypes

# NOTE: All namespace declarations are reserved within the binding
Namespace = pyxb.namespace.NamespaceForURI('http://www.w3schools.com', create_if_missing=True)
Namespace.configureCategories(['typeBinding', 'elementBinding'])

def CreateFromDocument (xml_text, default_namespace=None, location_base=None):
    """Parse the given XML and use the document element to create a
    Python instance.

    @param xml_text An XML document.  This should be data (Python 2
    str or Python 3 bytes), or a text (Python 2 unicode or Python 3
    str) in the L{pyxb._InputEncoding} encoding.

    @keyword default_namespace The L{pyxb.Namespace} instance to use as the
    default namespace where there is no default namespace in scope.
    If unspecified or C{None}, the namespace of the module containing
    this function will be used.

    @keyword location_base: An object to be recorded as the base of all
    L{pyxb.utils.utility.Location} instances associated with events and
    objects handled by the parser.  You might pass the URI from which
    the document was obtained.
    """

    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement, default_namespace=default_namespace)
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    saxer = pyxb.binding.saxer.make_parser(fallback_namespace=default_namespace, location_base=location_base)
    handler = saxer.getContentHandler()
    xmld = xml_text
    if isinstance(xmld, _six.text_type):
        xmld = xmld.encode(pyxb._InputEncoding)
    saxer.parse(io.BytesIO(xmld))
    instance = handler.rootObject()
    return instance

def CreateFromDOM (node, default_namespace=None):
    """Create a Python instance from the given DOM node.
    The node tag must correspond to an element declaration in this module.

    @deprecated: Forcing use of DOM interface is unnecessary; use L{CreateFromDocument}."""
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return pyxb.binding.basis.element.AnyCreateFromDOM(node, default_namespace)


# Atomic simple type: {http://www.w3schools.com}MT192_20_Type_Pattern
class MT192_20_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT192_20_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT192.xsd', 3, 1)
    _Documentation = None
MT192_20_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT192_20_Type_Pattern._CF_pattern.addPattern(pattern="([^/]([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,14}[^/])")
MT192_20_Type_Pattern._InitializeFacetMap(MT192_20_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT192_20_Type_Pattern', MT192_20_Type_Pattern)
_module_typeBindings.MT192_20_Type_Pattern = MT192_20_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT192_21_Type_Pattern
class MT192_21_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT192_21_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT192.xsd', 16, 1)
    _Documentation = None
MT192_21_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT192_21_Type_Pattern._CF_pattern.addPattern(pattern="([^/]([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,14}[^/])")
MT192_21_Type_Pattern._InitializeFacetMap(MT192_21_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT192_21_Type_Pattern', MT192_21_Type_Pattern)
_module_typeBindings.MT192_21_Type_Pattern = MT192_21_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT192_11S_Type_Pattern
class MT192_11S_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT192_11S_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT192.xsd', 29, 1)
    _Documentation = None
MT192_11S_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT192_11S_Type_Pattern._CF_pattern.addPattern(pattern='([0-9]{3}(\\n)?[0-9]{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(\\n)?([0-9]{4}[0-9]{6})?)')
MT192_11S_Type_Pattern._InitializeFacetMap(MT192_11S_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT192_11S_Type_Pattern', MT192_11S_Type_Pattern)
_module_typeBindings.MT192_11S_Type_Pattern = MT192_11S_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT192_79_Type_Pattern
class MT192_79_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT192_79_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT192.xsd', 42, 1)
    _Documentation = None
MT192_79_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT192_79_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,50}\\n?){1,35})")
MT192_79_Type_Pattern._InitializeFacetMap(MT192_79_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT192_79_Type_Pattern', MT192_79_Type_Pattern)
_module_typeBindings.MT192_79_Type_Pattern = MT192_79_Type_Pattern

# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT192.xsd', 56, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}TransactionReferenceNumber uses Python identifier TransactionReferenceNumber
    __TransactionReferenceNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TransactionReferenceNumber'), 'TransactionReferenceNumber', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comTransactionReferenceNumber', False, pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT192.xsd', 58, 4), )

    
    TransactionReferenceNumber = property(__TransactionReferenceNumber.value, __TransactionReferenceNumber.set, None, None)

    
    # Element {http://www.w3schools.com}RelatedReference uses Python identifier RelatedReference
    __RelatedReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RelatedReference'), 'RelatedReference', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comRelatedReference', False, pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT192.xsd', 59, 4), )

    
    RelatedReference = property(__RelatedReference.value, __RelatedReference.set, None, None)

    
    # Element {http://www.w3schools.com}MTAndDateOfTheOriginalMessage uses Python identifier MTAndDateOfTheOriginalMessage
    __MTAndDateOfTheOriginalMessage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MTAndDateOfTheOriginalMessage'), 'MTAndDateOfTheOriginalMessage', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comMTAndDateOfTheOriginalMessage', False, pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT192.xsd', 60, 4), )

    
    MTAndDateOfTheOriginalMessage = property(__MTAndDateOfTheOriginalMessage.value, __MTAndDateOfTheOriginalMessage.set, None, None)

    
    # Element {http://www.w3schools.com}NarrativeDescriptionOfTheOriginalMessage uses Python identifier NarrativeDescriptionOfTheOriginalMessage
    __NarrativeDescriptionOfTheOriginalMessage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NarrativeDescriptionOfTheOriginalMessage'), 'NarrativeDescriptionOfTheOriginalMessage', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comNarrativeDescriptionOfTheOriginalMessage', False, pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT192.xsd', 61, 4), )

    
    NarrativeDescriptionOfTheOriginalMessage = property(__NarrativeDescriptionOfTheOriginalMessage.value, __NarrativeDescriptionOfTheOriginalMessage.set, None, None)

    _ElementMap.update({
        __TransactionReferenceNumber.name() : __TransactionReferenceNumber,
        __RelatedReference.name() : __RelatedReference,
        __MTAndDateOfTheOriginalMessage.name() : __MTAndDateOfTheOriginalMessage,
        __NarrativeDescriptionOfTheOriginalMessage.name() : __NarrativeDescriptionOfTheOriginalMessage
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON = CTD_ANON


# Complex type {http://www.w3schools.com}MT192_20_Type with content type SIMPLE
class MT192_20_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT192_20_Type with content type SIMPLE"""
    _TypeDefinition = MT192_20_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT192_20_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT192.xsd', 8, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT192_20_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT192_20_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='20')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT192.xsd', 11, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT192.xsd', 11, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT192_20_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT192.xsd', 12, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT192.xsd', 12, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT192_20_Type = MT192_20_Type
Namespace.addCategoryObject('typeBinding', 'MT192_20_Type', MT192_20_Type)


# Complex type {http://www.w3schools.com}MT192_21_Type with content type SIMPLE
class MT192_21_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT192_21_Type with content type SIMPLE"""
    _TypeDefinition = MT192_21_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT192_21_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT192.xsd', 21, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT192_21_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT192_21_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='21')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT192.xsd', 24, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT192.xsd', 24, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT192_21_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT192.xsd', 25, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT192.xsd', 25, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT192_21_Type = MT192_21_Type
Namespace.addCategoryObject('typeBinding', 'MT192_21_Type', MT192_21_Type)


# Complex type {http://www.w3schools.com}MT192_11S_Type with content type SIMPLE
class MT192_11S_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT192_11S_Type with content type SIMPLE"""
    _TypeDefinition = MT192_11S_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT192_11S_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT192.xsd', 34, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT192_11S_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT192_11S_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='11S')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT192.xsd', 37, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT192.xsd', 37, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT192_11S_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT192.xsd', 38, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT192.xsd', 38, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT192_11S_Type = MT192_11S_Type
Namespace.addCategoryObject('typeBinding', 'MT192_11S_Type', MT192_11S_Type)


# Complex type {http://www.w3schools.com}MT192_79_Type with content type SIMPLE
class MT192_79_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT192_79_Type with content type SIMPLE"""
    _TypeDefinition = MT192_79_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT192_79_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT192.xsd', 47, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT192_79_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT192_79_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='79')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT192.xsd', 50, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT192.xsd', 50, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT192_79_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT192.xsd', 51, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT192.xsd', 51, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT192_79_Type = MT192_79_Type
Namespace.addCategoryObject('typeBinding', 'MT192_79_Type', MT192_79_Type)


MT192 = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MT192'), CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT192.xsd', 55, 1))
Namespace.addCategoryObject('elementBinding', MT192.name().localName(), MT192)



CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TransactionReferenceNumber'), MT192_20_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT192.xsd', 58, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RelatedReference'), MT192_21_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT192.xsd', 59, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MTAndDateOfTheOriginalMessage'), MT192_11S_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT192.xsd', 60, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NarrativeDescriptionOfTheOriginalMessage'), MT192_79_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT192.xsd', 61, 4)))

def _BuildAutomaton ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton
    del _BuildAutomaton
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT192.xsd', 61, 4))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TransactionReferenceNumber')), pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT192.xsd', 58, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RelatedReference')), pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT192.xsd', 59, 4))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MTAndDateOfTheOriginalMessage')), pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT192.xsd', 60, 4))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NarrativeDescriptionOfTheOriginalMessage')), pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT192.xsd', 61, 4))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON._Automaton = _BuildAutomaton()



...

  MT199
# C:\Projects\Xsds\MT199.py
# -*- coding: utf-8 -*-
# PyXB bindings for NM:96afad3d20bbfe8d040a1a097fa388d9fecd10e3
# Generated 2020-01-23 15:26:53.935115 by PyXB version 1.2.6 using Python 3.7.4.final.0
# Namespace http://www.w3schools.com

from __future__ import unicode_literals
import pyxb
import pyxb.binding
import pyxb.binding.saxer
import io
import pyxb.utils.utility
import pyxb.utils.domutils
import sys
import pyxb.utils.six as _six
# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:af20ae0c-3dc6-11ea-bfcd-509a4c321f2f')

# Version of PyXB used to generate the bindings
_PyXBVersion = '1.2.6'
# Generated bindings are not compatible across PyXB versions
if pyxb.__version__ != _PyXBVersion:
    raise pyxb.PyXBVersionError(_PyXBVersion)

# A holder for module-level binding classes so we can access them from
# inside class definitions where property names may conflict.
_module_typeBindings = pyxb.utils.utility.Object()

# Import bindings for namespaces imported into schema
import pyxb.binding.datatypes

# NOTE: All namespace declarations are reserved within the binding
Namespace = pyxb.namespace.NamespaceForURI('http://www.w3schools.com', create_if_missing=True)
Namespace.configureCategories(['typeBinding', 'elementBinding'])

def CreateFromDocument (xml_text, default_namespace=None, location_base=None):
    """Parse the given XML and use the document element to create a
    Python instance.

    @param xml_text An XML document.  This should be data (Python 2
    str or Python 3 bytes), or a text (Python 2 unicode or Python 3
    str) in the L{pyxb._InputEncoding} encoding.

    @keyword default_namespace The L{pyxb.Namespace} instance to use as the
    default namespace where there is no default namespace in scope.
    If unspecified or C{None}, the namespace of the module containing
    this function will be used.

    @keyword location_base: An object to be recorded as the base of all
    L{pyxb.utils.utility.Location} instances associated with events and
    objects handled by the parser.  You might pass the URI from which
    the document was obtained.
    """

    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement, default_namespace=default_namespace)
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    saxer = pyxb.binding.saxer.make_parser(fallback_namespace=default_namespace, location_base=location_base)
    handler = saxer.getContentHandler()
    xmld = xml_text
    if isinstance(xmld, _six.text_type):
        xmld = xmld.encode(pyxb._InputEncoding)
    saxer.parse(io.BytesIO(xmld))
    instance = handler.rootObject()
    return instance

def CreateFromDOM (node, default_namespace=None):
    """Create a Python instance from the given DOM node.
    The node tag must correspond to an element declaration in this module.

    @deprecated: Forcing use of DOM interface is unnecessary; use L{CreateFromDocument}."""
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return pyxb.binding.basis.element.AnyCreateFromDOM(node, default_namespace)


# Atomic simple type: {http://www.w3schools.com}MT199_20_Type_Pattern
class MT199_20_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT199_20_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT199.xsd', 3, 1)
    _Documentation = None
MT199_20_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT199_20_Type_Pattern._CF_pattern.addPattern(pattern="([^/]([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,14}[^/])")
MT199_20_Type_Pattern._InitializeFacetMap(MT199_20_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT199_20_Type_Pattern', MT199_20_Type_Pattern)
_module_typeBindings.MT199_20_Type_Pattern = MT199_20_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT199_21_Type_Pattern
class MT199_21_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT199_21_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT199.xsd', 16, 1)
    _Documentation = None
MT199_21_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT199_21_Type_Pattern._CF_pattern.addPattern(pattern="([^/]([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,14}[^/])")
MT199_21_Type_Pattern._InitializeFacetMap(MT199_21_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT199_21_Type_Pattern', MT199_21_Type_Pattern)
_module_typeBindings.MT199_21_Type_Pattern = MT199_21_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT199_79_Type_Pattern
class MT199_79_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT199_79_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT199.xsd', 29, 1)
    _Documentation = None
MT199_79_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT199_79_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,50}\\n?){1,35})")
MT199_79_Type_Pattern._InitializeFacetMap(MT199_79_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT199_79_Type_Pattern', MT199_79_Type_Pattern)
_module_typeBindings.MT199_79_Type_Pattern = MT199_79_Type_Pattern

# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT199.xsd', 43, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}TransactionReferenceNumber uses Python identifier TransactionReferenceNumber
    __TransactionReferenceNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TransactionReferenceNumber'), 'TransactionReferenceNumber', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comTransactionReferenceNumber', False, pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT199.xsd', 45, 4), )

    
    TransactionReferenceNumber = property(__TransactionReferenceNumber.value, __TransactionReferenceNumber.set, None, None)

    
    # Element {http://www.w3schools.com}RelatedReference uses Python identifier RelatedReference
    __RelatedReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RelatedReference'), 'RelatedReference', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comRelatedReference', False, pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT199.xsd', 46, 4), )

    
    RelatedReference = property(__RelatedReference.value, __RelatedReference.set, None, None)

    
    # Element {http://www.w3schools.com}Narrative uses Python identifier Narrative
    __Narrative = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Narrative'), 'Narrative', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comNarrative', False, pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT199.xsd', 47, 4), )

    
    Narrative = property(__Narrative.value, __Narrative.set, None, None)

    _ElementMap.update({
        __TransactionReferenceNumber.name() : __TransactionReferenceNumber,
        __RelatedReference.name() : __RelatedReference,
        __Narrative.name() : __Narrative
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON = CTD_ANON


# Complex type {http://www.w3schools.com}MT199_20_Type with content type SIMPLE
class MT199_20_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT199_20_Type with content type SIMPLE"""
    _TypeDefinition = MT199_20_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT199_20_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT199.xsd', 8, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT199_20_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT199_20_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='20')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT199.xsd', 11, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT199.xsd', 11, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT199_20_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT199.xsd', 12, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT199.xsd', 12, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT199_20_Type = MT199_20_Type
Namespace.addCategoryObject('typeBinding', 'MT199_20_Type', MT199_20_Type)


# Complex type {http://www.w3schools.com}MT199_21_Type with content type SIMPLE
class MT199_21_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT199_21_Type with content type SIMPLE"""
    _TypeDefinition = MT199_21_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT199_21_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT199.xsd', 21, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT199_21_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT199_21_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='21')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT199.xsd', 24, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT199.xsd', 24, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT199_21_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT199.xsd', 25, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT199.xsd', 25, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT199_21_Type = MT199_21_Type
Namespace.addCategoryObject('typeBinding', 'MT199_21_Type', MT199_21_Type)


# Complex type {http://www.w3schools.com}MT199_79_Type with content type SIMPLE
class MT199_79_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT199_79_Type with content type SIMPLE"""
    _TypeDefinition = MT199_79_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT199_79_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT199.xsd', 34, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT199_79_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT199_79_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='79')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT199.xsd', 37, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT199.xsd', 37, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT199_79_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT199.xsd', 38, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT199.xsd', 38, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT199_79_Type = MT199_79_Type
Namespace.addCategoryObject('typeBinding', 'MT199_79_Type', MT199_79_Type)


MT199 = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MT199'), CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT199.xsd', 42, 1))
Namespace.addCategoryObject('elementBinding', MT199.name().localName(), MT199)



CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TransactionReferenceNumber'), MT199_20_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT199.xsd', 45, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RelatedReference'), MT199_21_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT199.xsd', 46, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Narrative'), MT199_79_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT199.xsd', 47, 4)))

def _BuildAutomaton ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton
    del _BuildAutomaton
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT199.xsd', 46, 4))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TransactionReferenceNumber')), pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT199.xsd', 45, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RelatedReference')), pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT199.xsd', 46, 4))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Narrative')), pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT199.xsd', 47, 4))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON._Automaton = _BuildAutomaton()



...

  MT200
# C:\Projects\Xsds\MT200.py
# -*- coding: utf-8 -*-
# PyXB bindings for NM:96afad3d20bbfe8d040a1a097fa388d9fecd10e3
# Generated 2020-01-23 15:40:18.489932 by PyXB version 1.2.6 using Python 3.7.4.final.0
# Namespace http://www.w3schools.com

from __future__ import unicode_literals
import pyxb
import pyxb.binding
import pyxb.binding.saxer
import io
import pyxb.utils.utility
import pyxb.utils.domutils
import sys
import pyxb.utils.six as _six
# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:8eab99dc-3dc8-11ea-8061-509a4c321f2f')

# Version of PyXB used to generate the bindings
_PyXBVersion = '1.2.6'
# Generated bindings are not compatible across PyXB versions
if pyxb.__version__ != _PyXBVersion:
    raise pyxb.PyXBVersionError(_PyXBVersion)

# A holder for module-level binding classes so we can access them from
# inside class definitions where property names may conflict.
_module_typeBindings = pyxb.utils.utility.Object()

# Import bindings for namespaces imported into schema
import pyxb.binding.datatypes

# NOTE: All namespace declarations are reserved within the binding
Namespace = pyxb.namespace.NamespaceForURI('http://www.w3schools.com', create_if_missing=True)
Namespace.configureCategories(['typeBinding', 'elementBinding'])

def CreateFromDocument (xml_text, default_namespace=None, location_base=None):
    """Parse the given XML and use the document element to create a
    Python instance.

    @param xml_text An XML document.  This should be data (Python 2
    str or Python 3 bytes), or a text (Python 2 unicode or Python 3
    str) in the L{pyxb._InputEncoding} encoding.

    @keyword default_namespace The L{pyxb.Namespace} instance to use as the
    default namespace where there is no default namespace in scope.
    If unspecified or C{None}, the namespace of the module containing
    this function will be used.

    @keyword location_base: An object to be recorded as the base of all
    L{pyxb.utils.utility.Location} instances associated with events and
    objects handled by the parser.  You might pass the URI from which
    the document was obtained.
    """

    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement, default_namespace=default_namespace)
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    saxer = pyxb.binding.saxer.make_parser(fallback_namespace=default_namespace, location_base=location_base)
    handler = saxer.getContentHandler()
    xmld = xml_text
    if isinstance(xmld, _six.text_type):
        xmld = xmld.encode(pyxb._InputEncoding)
    saxer.parse(io.BytesIO(xmld))
    instance = handler.rootObject()
    return instance

def CreateFromDOM (node, default_namespace=None):
    """Create a Python instance from the given DOM node.
    The node tag must correspond to an element declaration in this module.

    @deprecated: Forcing use of DOM interface is unnecessary; use L{CreateFromDocument}."""
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return pyxb.binding.basis.element.AnyCreateFromDOM(node, default_namespace)


# Atomic simple type: {http://www.w3schools.com}MT200_20_Type_Pattern
class MT200_20_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT200_20_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 3, 1)
    _Documentation = None
MT200_20_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT200_20_Type_Pattern._CF_pattern.addPattern(pattern="([^/]([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,14}[^/])")
MT200_20_Type_Pattern._InitializeFacetMap(MT200_20_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT200_20_Type_Pattern', MT200_20_Type_Pattern)
_module_typeBindings.MT200_20_Type_Pattern = MT200_20_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT200_32A_Type_Pattern
class MT200_32A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT200_32A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 16, 1)
    _Documentation = None
MT200_32A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT200_32A_Type_Pattern._CF_pattern.addPattern(pattern='([0-9]{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})')
MT200_32A_Type_Pattern._InitializeFacetMap(MT200_32A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT200_32A_Type_Pattern', MT200_32A_Type_Pattern)
_module_typeBindings.MT200_32A_Type_Pattern = MT200_32A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT200_53B_Type_Pattern
class MT200_53B_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT200_53B_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 29, 1)
    _Documentation = None
MT200_53B_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT200_53B_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35})?)")
MT200_53B_Type_Pattern._InitializeFacetMap(MT200_53B_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT200_53B_Type_Pattern', MT200_53B_Type_Pattern)
_module_typeBindings.MT200_53B_Type_Pattern = MT200_53B_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT200_56A_Type_Pattern
class MT200_56A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT200_56A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 42, 1)
    _Documentation = None
MT200_56A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT200_56A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT200_56A_Type_Pattern._InitializeFacetMap(MT200_56A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT200_56A_Type_Pattern', MT200_56A_Type_Pattern)
_module_typeBindings.MT200_56A_Type_Pattern = MT200_56A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT200_56D_Type_Pattern
class MT200_56D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT200_56D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 55, 1)
    _Documentation = None
MT200_56D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT200_56D_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT200_56D_Type_Pattern._InitializeFacetMap(MT200_56D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT200_56D_Type_Pattern', MT200_56D_Type_Pattern)
_module_typeBindings.MT200_56D_Type_Pattern = MT200_56D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT200_57A_Type_Pattern
class MT200_57A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT200_57A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 68, 1)
    _Documentation = None
MT200_57A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT200_57A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT200_57A_Type_Pattern._InitializeFacetMap(MT200_57A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT200_57A_Type_Pattern', MT200_57A_Type_Pattern)
_module_typeBindings.MT200_57A_Type_Pattern = MT200_57A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT200_57B_Type_Pattern
class MT200_57B_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT200_57B_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 81, 1)
    _Documentation = None
MT200_57B_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT200_57B_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35})?)")
MT200_57B_Type_Pattern._InitializeFacetMap(MT200_57B_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT200_57B_Type_Pattern', MT200_57B_Type_Pattern)
_module_typeBindings.MT200_57B_Type_Pattern = MT200_57B_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT200_57D_Type_Pattern
class MT200_57D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT200_57D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 94, 1)
    _Documentation = None
MT200_57D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT200_57D_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT200_57D_Type_Pattern._InitializeFacetMap(MT200_57D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT200_57D_Type_Pattern', MT200_57D_Type_Pattern)
_module_typeBindings.MT200_57D_Type_Pattern = MT200_57D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT200_72_Type_Pattern
class MT200_72_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT200_72_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 107, 1)
    _Documentation = None
MT200_72_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT200_72_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,6})")
MT200_72_Type_Pattern._InitializeFacetMap(MT200_72_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT200_72_Type_Pattern', MT200_72_Type_Pattern)
_module_typeBindings.MT200_72_Type_Pattern = MT200_72_Type_Pattern

# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 121, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}TransactionReferenceNumber uses Python identifier TransactionReferenceNumber
    __TransactionReferenceNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TransactionReferenceNumber'), 'TransactionReferenceNumber', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comTransactionReferenceNumber', False, pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 123, 4), )

    
    TransactionReferenceNumber = property(__TransactionReferenceNumber.value, __TransactionReferenceNumber.set, None, None)

    
    # Element {http://www.w3schools.com}DateCurrencyAmount uses Python identifier DateCurrencyAmount
    __DateCurrencyAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DateCurrencyAmount'), 'DateCurrencyAmount', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comDateCurrencyAmount', False, pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 124, 4), )

    
    DateCurrencyAmount = property(__DateCurrencyAmount.value, __DateCurrencyAmount.set, None, None)

    
    # Element {http://www.w3schools.com}SendersCorrespondent_B uses Python identifier SendersCorrespondent_B
    __SendersCorrespondent_B = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SendersCorrespondent_B'), 'SendersCorrespondent_B', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comSendersCorrespondent_B', False, pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 125, 4), )

    
    SendersCorrespondent_B = property(__SendersCorrespondent_B.value, __SendersCorrespondent_B.set, None, None)

    
    # Element {http://www.w3schools.com}Intermedairy_A uses Python identifier Intermedairy_A
    __Intermedairy_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Intermedairy_A'), 'Intermedairy_A', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comIntermedairy_A', False, pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 127, 5), )

    
    Intermedairy_A = property(__Intermedairy_A.value, __Intermedairy_A.set, None, None)

    
    # Element {http://www.w3schools.com}Intermedairy_D uses Python identifier Intermedairy_D
    __Intermedairy_D = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Intermedairy_D'), 'Intermedairy_D', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comIntermedairy_D', False, pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 128, 5), )

    
    Intermedairy_D = property(__Intermedairy_D.value, __Intermedairy_D.set, None, None)

    
    # Element {http://www.w3schools.com}AccountWithInstitution_A uses Python identifier AccountWithInstitution_A
    __AccountWithInstitution_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AccountWithInstitution_A'), 'AccountWithInstitution_A', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comAccountWithInstitution_A', False, pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 131, 5), )

    
    AccountWithInstitution_A = property(__AccountWithInstitution_A.value, __AccountWithInstitution_A.set, None, None)

    
    # Element {http://www.w3schools.com}AccountWithInstitution_B uses Python identifier AccountWithInstitution_B
    __AccountWithInstitution_B = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AccountWithInstitution_B'), 'AccountWithInstitution_B', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comAccountWithInstitution_B', False, pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 132, 5), )

    
    AccountWithInstitution_B = property(__AccountWithInstitution_B.value, __AccountWithInstitution_B.set, None, None)

    
    # Element {http://www.w3schools.com}AccountWithInstitution_D uses Python identifier AccountWithInstitution_D
    __AccountWithInstitution_D = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AccountWithInstitution_D'), 'AccountWithInstitution_D', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comAccountWithInstitution_D', False, pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 133, 5), )

    
    AccountWithInstitution_D = property(__AccountWithInstitution_D.value, __AccountWithInstitution_D.set, None, None)

    
    # Element {http://www.w3schools.com}SenderToReceiverInformation uses Python identifier SenderToReceiverInformation
    __SenderToReceiverInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SenderToReceiverInformation'), 'SenderToReceiverInformation', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comSenderToReceiverInformation', False, pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 135, 4), )

    
    SenderToReceiverInformation = property(__SenderToReceiverInformation.value, __SenderToReceiverInformation.set, None, None)

    _ElementMap.update({
        __TransactionReferenceNumber.name() : __TransactionReferenceNumber,
        __DateCurrencyAmount.name() : __DateCurrencyAmount,
        __SendersCorrespondent_B.name() : __SendersCorrespondent_B,
        __Intermedairy_A.name() : __Intermedairy_A,
        __Intermedairy_D.name() : __Intermedairy_D,
        __AccountWithInstitution_A.name() : __AccountWithInstitution_A,
        __AccountWithInstitution_B.name() : __AccountWithInstitution_B,
        __AccountWithInstitution_D.name() : __AccountWithInstitution_D,
        __SenderToReceiverInformation.name() : __SenderToReceiverInformation
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON = CTD_ANON


# Complex type {http://www.w3schools.com}MT200_20_Type with content type SIMPLE
class MT200_20_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT200_20_Type with content type SIMPLE"""
    _TypeDefinition = MT200_20_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT200_20_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 8, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT200_20_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT200_20_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='20')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 11, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 11, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT200_20_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 12, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 12, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT200_20_Type = MT200_20_Type
Namespace.addCategoryObject('typeBinding', 'MT200_20_Type', MT200_20_Type)


# Complex type {http://www.w3schools.com}MT200_32A_Type with content type SIMPLE
class MT200_32A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT200_32A_Type with content type SIMPLE"""
    _TypeDefinition = MT200_32A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT200_32A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 21, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT200_32A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT200_32A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='32A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 24, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 24, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT200_32A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 25, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 25, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT200_32A_Type = MT200_32A_Type
Namespace.addCategoryObject('typeBinding', 'MT200_32A_Type', MT200_32A_Type)


# Complex type {http://www.w3schools.com}MT200_53B_Type with content type SIMPLE
class MT200_53B_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT200_53B_Type with content type SIMPLE"""
    _TypeDefinition = MT200_53B_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT200_53B_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 34, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT200_53B_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT200_53B_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='53B')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 37, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 37, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT200_53B_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 38, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 38, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT200_53B_Type = MT200_53B_Type
Namespace.addCategoryObject('typeBinding', 'MT200_53B_Type', MT200_53B_Type)


# Complex type {http://www.w3schools.com}MT200_56A_Type with content type SIMPLE
class MT200_56A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT200_56A_Type with content type SIMPLE"""
    _TypeDefinition = MT200_56A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT200_56A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 47, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT200_56A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT200_56A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='56A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 50, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 50, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT200_56A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 51, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 51, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT200_56A_Type = MT200_56A_Type
Namespace.addCategoryObject('typeBinding', 'MT200_56A_Type', MT200_56A_Type)


# Complex type {http://www.w3schools.com}MT200_56D_Type with content type SIMPLE
class MT200_56D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT200_56D_Type with content type SIMPLE"""
    _TypeDefinition = MT200_56D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT200_56D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 60, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT200_56D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT200_56D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='56D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 63, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 63, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT200_56D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 64, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 64, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT200_56D_Type = MT200_56D_Type
Namespace.addCategoryObject('typeBinding', 'MT200_56D_Type', MT200_56D_Type)


# Complex type {http://www.w3schools.com}MT200_57A_Type with content type SIMPLE
class MT200_57A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT200_57A_Type with content type SIMPLE"""
    _TypeDefinition = MT200_57A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT200_57A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 73, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT200_57A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT200_57A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='57A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 76, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 76, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT200_57A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 77, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 77, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT200_57A_Type = MT200_57A_Type
Namespace.addCategoryObject('typeBinding', 'MT200_57A_Type', MT200_57A_Type)


# Complex type {http://www.w3schools.com}MT200_57B_Type with content type SIMPLE
class MT200_57B_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT200_57B_Type with content type SIMPLE"""
    _TypeDefinition = MT200_57B_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT200_57B_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 86, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT200_57B_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT200_57B_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='57B')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 89, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 89, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT200_57B_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 90, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 90, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT200_57B_Type = MT200_57B_Type
Namespace.addCategoryObject('typeBinding', 'MT200_57B_Type', MT200_57B_Type)


# Complex type {http://www.w3schools.com}MT200_57D_Type with content type SIMPLE
class MT200_57D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT200_57D_Type with content type SIMPLE"""
    _TypeDefinition = MT200_57D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT200_57D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 99, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT200_57D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT200_57D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='57D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 102, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 102, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT200_57D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 103, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 103, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT200_57D_Type = MT200_57D_Type
Namespace.addCategoryObject('typeBinding', 'MT200_57D_Type', MT200_57D_Type)


# Complex type {http://www.w3schools.com}MT200_72_Type with content type SIMPLE
class MT200_72_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT200_72_Type with content type SIMPLE"""
    _TypeDefinition = MT200_72_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT200_72_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 112, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT200_72_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT200_72_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='72')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 115, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 115, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT200_72_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 116, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 116, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT200_72_Type = MT200_72_Type
Namespace.addCategoryObject('typeBinding', 'MT200_72_Type', MT200_72_Type)


MT200 = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MT200'), CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 120, 1))
Namespace.addCategoryObject('elementBinding', MT200.name().localName(), MT200)



CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TransactionReferenceNumber'), MT200_20_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 123, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DateCurrencyAmount'), MT200_32A_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 124, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SendersCorrespondent_B'), MT200_53B_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 125, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Intermedairy_A'), MT200_56A_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 127, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Intermedairy_D'), MT200_56D_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 128, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AccountWithInstitution_A'), MT200_57A_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 131, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AccountWithInstitution_B'), MT200_57B_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 132, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AccountWithInstitution_D'), MT200_57D_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 133, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SenderToReceiverInformation'), MT200_72_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 135, 4)))

def _BuildAutomaton ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton
    del _BuildAutomaton
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 125, 4))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 126, 4))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 127, 5))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 128, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 130, 4))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 131, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 132, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 133, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 135, 4))
    counters.add(cc_8)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TransactionReferenceNumber')), pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 123, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DateCurrencyAmount')), pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 124, 4))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SendersCorrespondent_B')), pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 125, 4))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Intermedairy_A')), pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 127, 5))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Intermedairy_D')), pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 128, 5))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AccountWithInstitution_A')), pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 131, 5))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AccountWithInstitution_B')), pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 132, 5))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AccountWithInstitution_D')), pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 133, 5))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SenderToReceiverInformation')), pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT200.xsd', 135, 4))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON._Automaton = _BuildAutomaton()



...

  MT202
# C:\Projects\XSD\MT202.py
# -*- coding: utf-8 -*-
# PyXB bindings for NM:96afad3d20bbfe8d040a1a097fa388d9fecd10e3
# Generated 2021-03-26 10:49:23.707146 by PyXB version 1.2.6 using Python 3.7.4.final.0
# Namespace http://www.w3schools.com

from __future__ import unicode_literals
import pyxb
import pyxb.binding
import pyxb.binding.saxer
import io
import pyxb.utils.utility
import pyxb.utils.domutils
import sys
import pyxb.utils.six as _six
# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:d393a0ca-8df2-11eb-a834-3448ed42967c')

# Version of PyXB used to generate the bindings
_PyXBVersion = '1.2.6'
# Generated bindings are not compatible across PyXB versions
if pyxb.__version__ != _PyXBVersion:
    raise pyxb.PyXBVersionError(_PyXBVersion)

# A holder for module-level binding classes so we can access them from
# inside class definitions where property names may conflict.
_module_typeBindings = pyxb.utils.utility.Object()

# Import bindings for namespaces imported into schema
import pyxb.binding.datatypes

# NOTE: All namespace declarations are reserved within the binding
Namespace = pyxb.namespace.NamespaceForURI('http://www.w3schools.com', create_if_missing=True)
Namespace.configureCategories(['typeBinding', 'elementBinding'])

def CreateFromDocument (xml_text, default_namespace=None, location_base=None):
    """Parse the given XML and use the document element to create a
    Python instance.

    @param xml_text An XML document.  This should be data (Python 2
    str or Python 3 bytes), or a text (Python 2 unicode or Python 3
    str) in the L{pyxb._InputEncoding} encoding.

    @keyword default_namespace The L{pyxb.Namespace} instance to use as the
    default namespace where there is no default namespace in scope.
    If unspecified or C{None}, the namespace of the module containing
    this function will be used.

    @keyword location_base: An object to be recorded as the base of all
    L{pyxb.utils.utility.Location} instances associated with events and
    objects handled by the parser.  You might pass the URI from which
    the document was obtained.
    """

    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement, default_namespace=default_namespace)
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    saxer = pyxb.binding.saxer.make_parser(fallback_namespace=default_namespace, location_base=location_base)
    handler = saxer.getContentHandler()
    xmld = xml_text
    if isinstance(xmld, _six.text_type):
        xmld = xmld.encode(pyxb._InputEncoding)
    saxer.parse(io.BytesIO(xmld))
    instance = handler.rootObject()
    return instance

def CreateFromDOM (node, default_namespace=None):
    """Create a Python instance from the given DOM node.
    The node tag must correspond to an element declaration in this module.

    @deprecated: Forcing use of DOM interface is unnecessary; use L{CreateFromDocument}."""
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return pyxb.binding.basis.element.AnyCreateFromDOM(node, default_namespace)


# Atomic simple type: {http://www.w3schools.com}MT202_20_Type_Pattern
class MT202_20_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202_20_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 3, 1)
    _Documentation = None
MT202_20_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT202_20_Type_Pattern._CF_pattern.addPattern(pattern="([^/]([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,14}[^/])")
MT202_20_Type_Pattern._InitializeFacetMap(MT202_20_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT202_20_Type_Pattern', MT202_20_Type_Pattern)
_module_typeBindings.MT202_20_Type_Pattern = MT202_20_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT202_21_Type_Pattern
class MT202_21_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202_21_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 16, 1)
    _Documentation = None
MT202_21_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT202_21_Type_Pattern._CF_pattern.addPattern(pattern="([^/]([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,14}[^/])")
MT202_21_Type_Pattern._InitializeFacetMap(MT202_21_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT202_21_Type_Pattern', MT202_21_Type_Pattern)
_module_typeBindings.MT202_21_Type_Pattern = MT202_21_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT202_13C_Type_Pattern
class MT202_13C_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202_13C_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 29, 1)
    _Documentation = None
MT202_13C_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT202_13C_Type_Pattern._CF_pattern.addPattern(pattern='(/(CLSTIME|RNCTIME|SNDTIME)/(0[0-9]|[1][0-9]|2[0-3])([0-5][0-9])([+]|[-])(0[0-9]|[1][0-9]|2[0-3])([0-5][0-9]))')
MT202_13C_Type_Pattern._InitializeFacetMap(MT202_13C_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT202_13C_Type_Pattern', MT202_13C_Type_Pattern)
_module_typeBindings.MT202_13C_Type_Pattern = MT202_13C_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT202_32A_Type_Pattern
class MT202_32A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202_32A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 42, 1)
    _Documentation = None
MT202_32A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT202_32A_Type_Pattern._CF_pattern.addPattern(pattern='([0-9]{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})')
MT202_32A_Type_Pattern._InitializeFacetMap(MT202_32A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT202_32A_Type_Pattern', MT202_32A_Type_Pattern)
_module_typeBindings.MT202_32A_Type_Pattern = MT202_32A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT202_52A_Type_Pattern
class MT202_52A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202_52A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 55, 1)
    _Documentation = None
MT202_52A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT202_52A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT202_52A_Type_Pattern._InitializeFacetMap(MT202_52A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT202_52A_Type_Pattern', MT202_52A_Type_Pattern)
_module_typeBindings.MT202_52A_Type_Pattern = MT202_52A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT202_52D_Type_Pattern
class MT202_52D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202_52D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 68, 1)
    _Documentation = None
MT202_52D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT202_52D_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT202_52D_Type_Pattern._InitializeFacetMap(MT202_52D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT202_52D_Type_Pattern', MT202_52D_Type_Pattern)
_module_typeBindings.MT202_52D_Type_Pattern = MT202_52D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT202_53A_Type_Pattern
class MT202_53A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202_53A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 81, 1)
    _Documentation = None
MT202_53A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT202_53A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT202_53A_Type_Pattern._InitializeFacetMap(MT202_53A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT202_53A_Type_Pattern', MT202_53A_Type_Pattern)
_module_typeBindings.MT202_53A_Type_Pattern = MT202_53A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT202_53B_Type_Pattern
class MT202_53B_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202_53B_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 94, 1)
    _Documentation = None
MT202_53B_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT202_53B_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35})?)")
MT202_53B_Type_Pattern._InitializeFacetMap(MT202_53B_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT202_53B_Type_Pattern', MT202_53B_Type_Pattern)
_module_typeBindings.MT202_53B_Type_Pattern = MT202_53B_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT202_53D_Type_Pattern
class MT202_53D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202_53D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 107, 1)
    _Documentation = None
MT202_53D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT202_53D_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT202_53D_Type_Pattern._InitializeFacetMap(MT202_53D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT202_53D_Type_Pattern', MT202_53D_Type_Pattern)
_module_typeBindings.MT202_53D_Type_Pattern = MT202_53D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT202_54A_Type_Pattern
class MT202_54A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202_54A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 120, 1)
    _Documentation = None
MT202_54A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT202_54A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT202_54A_Type_Pattern._InitializeFacetMap(MT202_54A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT202_54A_Type_Pattern', MT202_54A_Type_Pattern)
_module_typeBindings.MT202_54A_Type_Pattern = MT202_54A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT202_54B_Type_Pattern
class MT202_54B_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202_54B_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 133, 1)
    _Documentation = None
MT202_54B_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT202_54B_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35})?)")
MT202_54B_Type_Pattern._InitializeFacetMap(MT202_54B_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT202_54B_Type_Pattern', MT202_54B_Type_Pattern)
_module_typeBindings.MT202_54B_Type_Pattern = MT202_54B_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT202_54D_Type_Pattern
class MT202_54D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202_54D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 146, 1)
    _Documentation = None
MT202_54D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT202_54D_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT202_54D_Type_Pattern._InitializeFacetMap(MT202_54D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT202_54D_Type_Pattern', MT202_54D_Type_Pattern)
_module_typeBindings.MT202_54D_Type_Pattern = MT202_54D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT202_56A_Type_Pattern
class MT202_56A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202_56A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 159, 1)
    _Documentation = None
MT202_56A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT202_56A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT202_56A_Type_Pattern._InitializeFacetMap(MT202_56A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT202_56A_Type_Pattern', MT202_56A_Type_Pattern)
_module_typeBindings.MT202_56A_Type_Pattern = MT202_56A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT202_56D_Type_Pattern
class MT202_56D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202_56D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 172, 1)
    _Documentation = None
MT202_56D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT202_56D_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT202_56D_Type_Pattern._InitializeFacetMap(MT202_56D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT202_56D_Type_Pattern', MT202_56D_Type_Pattern)
_module_typeBindings.MT202_56D_Type_Pattern = MT202_56D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT202_57A_Type_Pattern
class MT202_57A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202_57A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 185, 1)
    _Documentation = None
MT202_57A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT202_57A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT202_57A_Type_Pattern._InitializeFacetMap(MT202_57A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT202_57A_Type_Pattern', MT202_57A_Type_Pattern)
_module_typeBindings.MT202_57A_Type_Pattern = MT202_57A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT202_57B_Type_Pattern
class MT202_57B_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202_57B_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 198, 1)
    _Documentation = None
MT202_57B_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT202_57B_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35})?)")
MT202_57B_Type_Pattern._InitializeFacetMap(MT202_57B_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT202_57B_Type_Pattern', MT202_57B_Type_Pattern)
_module_typeBindings.MT202_57B_Type_Pattern = MT202_57B_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT202_57D_Type_Pattern
class MT202_57D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202_57D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 211, 1)
    _Documentation = None
MT202_57D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT202_57D_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT202_57D_Type_Pattern._InitializeFacetMap(MT202_57D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT202_57D_Type_Pattern', MT202_57D_Type_Pattern)
_module_typeBindings.MT202_57D_Type_Pattern = MT202_57D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT202_58A_Type_Pattern
class MT202_58A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202_58A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 224, 1)
    _Documentation = None
MT202_58A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT202_58A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT202_58A_Type_Pattern._InitializeFacetMap(MT202_58A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT202_58A_Type_Pattern', MT202_58A_Type_Pattern)
_module_typeBindings.MT202_58A_Type_Pattern = MT202_58A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT202_58D_Type_Pattern
class MT202_58D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202_58D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 237, 1)
    _Documentation = None
MT202_58D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT202_58D_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT202_58D_Type_Pattern._InitializeFacetMap(MT202_58D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT202_58D_Type_Pattern', MT202_58D_Type_Pattern)
_module_typeBindings.MT202_58D_Type_Pattern = MT202_58D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT202_72_Type_Pattern
class MT202_72_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202_72_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 250, 1)
    _Documentation = None
MT202_72_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT202_72_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,6})")
MT202_72_Type_Pattern._InitializeFacetMap(MT202_72_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT202_72_Type_Pattern', MT202_72_Type_Pattern)
_module_typeBindings.MT202_72_Type_Pattern = MT202_72_Type_Pattern

# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 264, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}TransactionReferenceNumber uses Python identifier TransactionReferenceNumber
    __TransactionReferenceNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TransactionReferenceNumber'), 'TransactionReferenceNumber', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comTransactionReferenceNumber', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 266, 4), )

    
    TransactionReferenceNumber = property(__TransactionReferenceNumber.value, __TransactionReferenceNumber.set, None, None)

    
    # Element {http://www.w3schools.com}RelatedReference uses Python identifier RelatedReference
    __RelatedReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RelatedReference'), 'RelatedReference', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comRelatedReference', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 267, 4), )

    
    RelatedReference = property(__RelatedReference.value, __RelatedReference.set, None, None)

    
    # Element {http://www.w3schools.com}TimeIndication uses Python identifier TimeIndication
    __TimeIndication = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TimeIndication'), 'TimeIndication', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comTimeIndication', True, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 268, 4), )

    
    TimeIndication = property(__TimeIndication.value, __TimeIndication.set, None, None)

    
    # Element {http://www.w3schools.com}ValueDateCurrencyCodeAmount uses Python identifier ValueDateCurrencyCodeAmount
    __ValueDateCurrencyCodeAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ValueDateCurrencyCodeAmount'), 'ValueDateCurrencyCodeAmount', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comValueDateCurrencyCodeAmount', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 269, 4), )

    
    ValueDateCurrencyCodeAmount = property(__ValueDateCurrencyCodeAmount.value, __ValueDateCurrencyCodeAmount.set, None, None)

    
    # Element {http://www.w3schools.com}OrderingInstitution_A uses Python identifier OrderingInstitution_A
    __OrderingInstitution_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OrderingInstitution_A'), 'OrderingInstitution_A', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comOrderingInstitution_A', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 271, 5), )

    
    OrderingInstitution_A = property(__OrderingInstitution_A.value, __OrderingInstitution_A.set, None, None)

    
    # Element {http://www.w3schools.com}OrderingInstitution_D uses Python identifier OrderingInstitution_D
    __OrderingInstitution_D = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OrderingInstitution_D'), 'OrderingInstitution_D', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comOrderingInstitution_D', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 272, 5), )

    
    OrderingInstitution_D = property(__OrderingInstitution_D.value, __OrderingInstitution_D.set, None, None)

    
    # Element {http://www.w3schools.com}SendersCorrespondent_A uses Python identifier SendersCorrespondent_A
    __SendersCorrespondent_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SendersCorrespondent_A'), 'SendersCorrespondent_A', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comSendersCorrespondent_A', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 275, 5), )

    
    SendersCorrespondent_A = property(__SendersCorrespondent_A.value, __SendersCorrespondent_A.set, None, None)

    
    # Element {http://www.w3schools.com}SendersCorrespondent_B uses Python identifier SendersCorrespondent_B
    __SendersCorrespondent_B = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SendersCorrespondent_B'), 'SendersCorrespondent_B', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comSendersCorrespondent_B', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 276, 5), )

    
    SendersCorrespondent_B = property(__SendersCorrespondent_B.value, __SendersCorrespondent_B.set, None, None)

    
    # Element {http://www.w3schools.com}SendersCorrespondent_D uses Python identifier SendersCorrespondent_D
    __SendersCorrespondent_D = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SendersCorrespondent_D'), 'SendersCorrespondent_D', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comSendersCorrespondent_D', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 277, 5), )

    
    SendersCorrespondent_D = property(__SendersCorrespondent_D.value, __SendersCorrespondent_D.set, None, None)

    
    # Element {http://www.w3schools.com}ReceiversCorrespondent_A uses Python identifier ReceiversCorrespondent_A
    __ReceiversCorrespondent_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReceiversCorrespondent_A'), 'ReceiversCorrespondent_A', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comReceiversCorrespondent_A', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 280, 5), )

    
    ReceiversCorrespondent_A = property(__ReceiversCorrespondent_A.value, __ReceiversCorrespondent_A.set, None, None)

    
    # Element {http://www.w3schools.com}ReceiversCorrespondent_B uses Python identifier ReceiversCorrespondent_B
    __ReceiversCorrespondent_B = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReceiversCorrespondent_B'), 'ReceiversCorrespondent_B', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comReceiversCorrespondent_B', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 281, 5), )

    
    ReceiversCorrespondent_B = property(__ReceiversCorrespondent_B.value, __ReceiversCorrespondent_B.set, None, None)

    
    # Element {http://www.w3schools.com}ReceiversCorrespondent_D uses Python identifier ReceiversCorrespondent_D
    __ReceiversCorrespondent_D = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReceiversCorrespondent_D'), 'ReceiversCorrespondent_D', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comReceiversCorrespondent_D', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 282, 5), )

    
    ReceiversCorrespondent_D = property(__ReceiversCorrespondent_D.value, __ReceiversCorrespondent_D.set, None, None)

    
    # Element {http://www.w3schools.com}Intermedairy_A uses Python identifier Intermedairy_A
    __Intermedairy_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Intermedairy_A'), 'Intermedairy_A', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comIntermedairy_A', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 285, 5), )

    
    Intermedairy_A = property(__Intermedairy_A.value, __Intermedairy_A.set, None, None)

    
    # Element {http://www.w3schools.com}Intermedairy_D uses Python identifier Intermedairy_D
    __Intermedairy_D = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Intermedairy_D'), 'Intermedairy_D', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comIntermedairy_D', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 286, 5), )

    
    Intermedairy_D = property(__Intermedairy_D.value, __Intermedairy_D.set, None, None)

    
    # Element {http://www.w3schools.com}AccountWithInstitution_A uses Python identifier AccountWithInstitution_A
    __AccountWithInstitution_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AccountWithInstitution_A'), 'AccountWithInstitution_A', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comAccountWithInstitution_A', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 289, 5), )

    
    AccountWithInstitution_A = property(__AccountWithInstitution_A.value, __AccountWithInstitution_A.set, None, None)

    
    # Element {http://www.w3schools.com}AccountWithInstitution_B uses Python identifier AccountWithInstitution_B
    __AccountWithInstitution_B = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AccountWithInstitution_B'), 'AccountWithInstitution_B', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comAccountWithInstitution_B', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 290, 5), )

    
    AccountWithInstitution_B = property(__AccountWithInstitution_B.value, __AccountWithInstitution_B.set, None, None)

    
    # Element {http://www.w3schools.com}AccountWithInstitution_D uses Python identifier AccountWithInstitution_D
    __AccountWithInstitution_D = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AccountWithInstitution_D'), 'AccountWithInstitution_D', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comAccountWithInstitution_D', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 291, 5), )

    
    AccountWithInstitution_D = property(__AccountWithInstitution_D.value, __AccountWithInstitution_D.set, None, None)

    
    # Element {http://www.w3schools.com}BeneficiaryInstitution_A uses Python identifier BeneficiaryInstitution_A
    __BeneficiaryInstitution_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryInstitution_A'), 'BeneficiaryInstitution_A', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comBeneficiaryInstitution_A', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 294, 5), )

    
    BeneficiaryInstitution_A = property(__BeneficiaryInstitution_A.value, __BeneficiaryInstitution_A.set, None, None)

    
    # Element {http://www.w3schools.com}BeneficiaryInstitution_D uses Python identifier BeneficiaryInstitution_D
    __BeneficiaryInstitution_D = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryInstitution_D'), 'BeneficiaryInstitution_D', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comBeneficiaryInstitution_D', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 295, 5), )

    
    BeneficiaryInstitution_D = property(__BeneficiaryInstitution_D.value, __BeneficiaryInstitution_D.set, None, None)

    
    # Element {http://www.w3schools.com}SenderToReceiverInformation uses Python identifier SenderToReceiverInformation
    __SenderToReceiverInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SenderToReceiverInformation'), 'SenderToReceiverInformation', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comSenderToReceiverInformation', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 297, 4), )

    
    SenderToReceiverInformation = property(__SenderToReceiverInformation.value, __SenderToReceiverInformation.set, None, None)

    _ElementMap.update({
        __TransactionReferenceNumber.name() : __TransactionReferenceNumber,
        __RelatedReference.name() : __RelatedReference,
        __TimeIndication.name() : __TimeIndication,
        __ValueDateCurrencyCodeAmount.name() : __ValueDateCurrencyCodeAmount,
        __OrderingInstitution_A.name() : __OrderingInstitution_A,
        __OrderingInstitution_D.name() : __OrderingInstitution_D,
        __SendersCorrespondent_A.name() : __SendersCorrespondent_A,
        __SendersCorrespondent_B.name() : __SendersCorrespondent_B,
        __SendersCorrespondent_D.name() : __SendersCorrespondent_D,
        __ReceiversCorrespondent_A.name() : __ReceiversCorrespondent_A,
        __ReceiversCorrespondent_B.name() : __ReceiversCorrespondent_B,
        __ReceiversCorrespondent_D.name() : __ReceiversCorrespondent_D,
        __Intermedairy_A.name() : __Intermedairy_A,
        __Intermedairy_D.name() : __Intermedairy_D,
        __AccountWithInstitution_A.name() : __AccountWithInstitution_A,
        __AccountWithInstitution_B.name() : __AccountWithInstitution_B,
        __AccountWithInstitution_D.name() : __AccountWithInstitution_D,
        __BeneficiaryInstitution_A.name() : __BeneficiaryInstitution_A,
        __BeneficiaryInstitution_D.name() : __BeneficiaryInstitution_D,
        __SenderToReceiverInformation.name() : __SenderToReceiverInformation
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON = CTD_ANON


# Complex type {http://www.w3schools.com}MT202_20_Type with content type SIMPLE
class MT202_20_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT202_20_Type with content type SIMPLE"""
    _TypeDefinition = MT202_20_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202_20_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 8, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT202_20_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT202_20_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='20')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 11, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 11, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT202_20_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 12, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 12, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT202_20_Type = MT202_20_Type
Namespace.addCategoryObject('typeBinding', 'MT202_20_Type', MT202_20_Type)


# Complex type {http://www.w3schools.com}MT202_21_Type with content type SIMPLE
class MT202_21_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT202_21_Type with content type SIMPLE"""
    _TypeDefinition = MT202_21_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202_21_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 21, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT202_21_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT202_21_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='21')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 24, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 24, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT202_21_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 25, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 25, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT202_21_Type = MT202_21_Type
Namespace.addCategoryObject('typeBinding', 'MT202_21_Type', MT202_21_Type)


# Complex type {http://www.w3schools.com}MT202_13C_Type with content type SIMPLE
class MT202_13C_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT202_13C_Type with content type SIMPLE"""
    _TypeDefinition = MT202_13C_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202_13C_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 34, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT202_13C_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT202_13C_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='13C')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 37, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 37, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT202_13C_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 38, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 38, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT202_13C_Type = MT202_13C_Type
Namespace.addCategoryObject('typeBinding', 'MT202_13C_Type', MT202_13C_Type)


# Complex type {http://www.w3schools.com}MT202_32A_Type with content type SIMPLE
class MT202_32A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT202_32A_Type with content type SIMPLE"""
    _TypeDefinition = MT202_32A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202_32A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 47, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT202_32A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT202_32A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='32A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 50, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 50, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT202_32A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 51, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 51, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT202_32A_Type = MT202_32A_Type
Namespace.addCategoryObject('typeBinding', 'MT202_32A_Type', MT202_32A_Type)


# Complex type {http://www.w3schools.com}MT202_52A_Type with content type SIMPLE
class MT202_52A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT202_52A_Type with content type SIMPLE"""
    _TypeDefinition = MT202_52A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202_52A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 60, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT202_52A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT202_52A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='52A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 63, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 63, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT202_52A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 64, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 64, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT202_52A_Type = MT202_52A_Type
Namespace.addCategoryObject('typeBinding', 'MT202_52A_Type', MT202_52A_Type)


# Complex type {http://www.w3schools.com}MT202_52D_Type with content type SIMPLE
class MT202_52D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT202_52D_Type with content type SIMPLE"""
    _TypeDefinition = MT202_52D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202_52D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 73, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT202_52D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT202_52D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='52D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 76, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 76, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT202_52D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 77, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 77, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT202_52D_Type = MT202_52D_Type
Namespace.addCategoryObject('typeBinding', 'MT202_52D_Type', MT202_52D_Type)


# Complex type {http://www.w3schools.com}MT202_53A_Type with content type SIMPLE
class MT202_53A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT202_53A_Type with content type SIMPLE"""
    _TypeDefinition = MT202_53A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202_53A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 86, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT202_53A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT202_53A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='53A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 89, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 89, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT202_53A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 90, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 90, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT202_53A_Type = MT202_53A_Type
Namespace.addCategoryObject('typeBinding', 'MT202_53A_Type', MT202_53A_Type)


# Complex type {http://www.w3schools.com}MT202_53B_Type with content type SIMPLE
class MT202_53B_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT202_53B_Type with content type SIMPLE"""
    _TypeDefinition = MT202_53B_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202_53B_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 99, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT202_53B_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT202_53B_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='53B')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 102, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 102, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT202_53B_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 103, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 103, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT202_53B_Type = MT202_53B_Type
Namespace.addCategoryObject('typeBinding', 'MT202_53B_Type', MT202_53B_Type)


# Complex type {http://www.w3schools.com}MT202_53D_Type with content type SIMPLE
class MT202_53D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT202_53D_Type with content type SIMPLE"""
    _TypeDefinition = MT202_53D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202_53D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 112, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT202_53D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT202_53D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='53D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 115, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 115, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT202_53D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 116, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 116, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT202_53D_Type = MT202_53D_Type
Namespace.addCategoryObject('typeBinding', 'MT202_53D_Type', MT202_53D_Type)


# Complex type {http://www.w3schools.com}MT202_54A_Type with content type SIMPLE
class MT202_54A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT202_54A_Type with content type SIMPLE"""
    _TypeDefinition = MT202_54A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202_54A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 125, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT202_54A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT202_54A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='54A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 128, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 128, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT202_54A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 129, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 129, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT202_54A_Type = MT202_54A_Type
Namespace.addCategoryObject('typeBinding', 'MT202_54A_Type', MT202_54A_Type)


# Complex type {http://www.w3schools.com}MT202_54B_Type with content type SIMPLE
class MT202_54B_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT202_54B_Type with content type SIMPLE"""
    _TypeDefinition = MT202_54B_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202_54B_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 138, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT202_54B_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT202_54B_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='54B')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 141, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 141, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT202_54B_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 142, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 142, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT202_54B_Type = MT202_54B_Type
Namespace.addCategoryObject('typeBinding', 'MT202_54B_Type', MT202_54B_Type)


# Complex type {http://www.w3schools.com}MT202_54D_Type with content type SIMPLE
class MT202_54D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT202_54D_Type with content type SIMPLE"""
    _TypeDefinition = MT202_54D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202_54D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 151, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT202_54D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT202_54D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='54D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 154, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 154, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT202_54D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 155, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 155, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT202_54D_Type = MT202_54D_Type
Namespace.addCategoryObject('typeBinding', 'MT202_54D_Type', MT202_54D_Type)


# Complex type {http://www.w3schools.com}MT202_56A_Type with content type SIMPLE
class MT202_56A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT202_56A_Type with content type SIMPLE"""
    _TypeDefinition = MT202_56A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202_56A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 164, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT202_56A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT202_56A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='56A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 167, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 167, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT202_56A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 168, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 168, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT202_56A_Type = MT202_56A_Type
Namespace.addCategoryObject('typeBinding', 'MT202_56A_Type', MT202_56A_Type)


# Complex type {http://www.w3schools.com}MT202_56D_Type with content type SIMPLE
class MT202_56D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT202_56D_Type with content type SIMPLE"""
    _TypeDefinition = MT202_56D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202_56D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 177, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT202_56D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT202_56D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='56D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 180, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 180, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT202_56D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 181, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 181, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT202_56D_Type = MT202_56D_Type
Namespace.addCategoryObject('typeBinding', 'MT202_56D_Type', MT202_56D_Type)


# Complex type {http://www.w3schools.com}MT202_57A_Type with content type SIMPLE
class MT202_57A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT202_57A_Type with content type SIMPLE"""
    _TypeDefinition = MT202_57A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202_57A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 190, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT202_57A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT202_57A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='57A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 193, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 193, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT202_57A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 194, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 194, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT202_57A_Type = MT202_57A_Type
Namespace.addCategoryObject('typeBinding', 'MT202_57A_Type', MT202_57A_Type)


# Complex type {http://www.w3schools.com}MT202_57B_Type with content type SIMPLE
class MT202_57B_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT202_57B_Type with content type SIMPLE"""
    _TypeDefinition = MT202_57B_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202_57B_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 203, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT202_57B_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT202_57B_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='57B')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 206, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 206, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT202_57B_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 207, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 207, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT202_57B_Type = MT202_57B_Type
Namespace.addCategoryObject('typeBinding', 'MT202_57B_Type', MT202_57B_Type)


# Complex type {http://www.w3schools.com}MT202_57D_Type with content type SIMPLE
class MT202_57D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT202_57D_Type with content type SIMPLE"""
    _TypeDefinition = MT202_57D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202_57D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 216, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT202_57D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT202_57D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='57D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 219, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 219, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT202_57D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 220, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 220, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT202_57D_Type = MT202_57D_Type
Namespace.addCategoryObject('typeBinding', 'MT202_57D_Type', MT202_57D_Type)


# Complex type {http://www.w3schools.com}MT202_58A_Type with content type SIMPLE
class MT202_58A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT202_58A_Type with content type SIMPLE"""
    _TypeDefinition = MT202_58A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202_58A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 229, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT202_58A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT202_58A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='58A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 232, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 232, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT202_58A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 233, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 233, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT202_58A_Type = MT202_58A_Type
Namespace.addCategoryObject('typeBinding', 'MT202_58A_Type', MT202_58A_Type)


# Complex type {http://www.w3schools.com}MT202_58D_Type with content type SIMPLE
class MT202_58D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT202_58D_Type with content type SIMPLE"""
    _TypeDefinition = MT202_58D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202_58D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 242, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT202_58D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT202_58D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='58D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 245, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 245, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT202_58D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 246, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 246, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT202_58D_Type = MT202_58D_Type
Namespace.addCategoryObject('typeBinding', 'MT202_58D_Type', MT202_58D_Type)


# Complex type {http://www.w3schools.com}MT202_72_Type with content type SIMPLE
class MT202_72_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT202_72_Type with content type SIMPLE"""
    _TypeDefinition = MT202_72_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202_72_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 255, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT202_72_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT202_72_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='72')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 258, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 258, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT202_72_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 259, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 259, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT202_72_Type = MT202_72_Type
Namespace.addCategoryObject('typeBinding', 'MT202_72_Type', MT202_72_Type)


MT202 = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MT202'), CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 263, 1))
Namespace.addCategoryObject('elementBinding', MT202.name().localName(), MT202)



CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TransactionReferenceNumber'), MT202_20_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 266, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RelatedReference'), MT202_21_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 267, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TimeIndication'), MT202_13C_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 268, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ValueDateCurrencyCodeAmount'), MT202_32A_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 269, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OrderingInstitution_A'), MT202_52A_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 271, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OrderingInstitution_D'), MT202_52D_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 272, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SendersCorrespondent_A'), MT202_53A_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 275, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SendersCorrespondent_B'), MT202_53B_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 276, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SendersCorrespondent_D'), MT202_53D_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 277, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReceiversCorrespondent_A'), MT202_54A_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 280, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReceiversCorrespondent_B'), MT202_54B_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 281, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReceiversCorrespondent_D'), MT202_54D_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 282, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Intermedairy_A'), MT202_56A_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 285, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Intermedairy_D'), MT202_56D_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 286, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AccountWithInstitution_A'), MT202_57A_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 289, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AccountWithInstitution_B'), MT202_57B_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 290, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AccountWithInstitution_D'), MT202_57D_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 291, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryInstitution_A'), MT202_58A_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 294, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryInstitution_D'), MT202_58D_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 295, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SenderToReceiverInformation'), MT202_72_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 297, 4)))

def _BuildAutomaton ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton
    del _BuildAutomaton
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 268, 4))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 270, 4))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 271, 5))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 272, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 274, 4))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 275, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 276, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 277, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 279, 4))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 280, 5))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 281, 5))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 282, 5))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 284, 4))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 285, 5))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 286, 5))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 288, 4))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 289, 5))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 290, 5))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 291, 5))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 297, 4))
    counters.add(cc_19)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TransactionReferenceNumber')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 266, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RelatedReference')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 267, 4))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TimeIndication')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 268, 4))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ValueDateCurrencyCodeAmount')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 269, 4))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OrderingInstitution_A')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 271, 5))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OrderingInstitution_D')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 272, 5))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SendersCorrespondent_A')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 275, 5))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SendersCorrespondent_B')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 276, 5))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SendersCorrespondent_D')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 277, 5))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReceiversCorrespondent_A')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 280, 5))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReceiversCorrespondent_B')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 281, 5))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReceiversCorrespondent_D')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 282, 5))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Intermedairy_A')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 285, 5))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Intermedairy_D')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 286, 5))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AccountWithInstitution_A')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 289, 5))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AccountWithInstitution_B')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 290, 5))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AccountWithInstitution_D')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 291, 5))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryInstitution_A')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 294, 5))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryInstitution_D')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 295, 5))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SenderToReceiverInformation')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202.xsd', 297, 4))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False),
        fac.UpdateInstruction(cc_13, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False),
        fac.UpdateInstruction(cc_14, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_15, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False),
        fac.UpdateInstruction(cc_16, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_15, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False),
        fac.UpdateInstruction(cc_17, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_15, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False),
        fac.UpdateInstruction(cc_18, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
         ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_19, True) ]))
    st_19._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON._Automaton = _BuildAutomaton()



...

  MT202COV
# C:\Projects\XSD\MT202COV.py
# -*- coding: utf-8 -*-
# PyXB bindings for NM:96afad3d20bbfe8d040a1a097fa388d9fecd10e3
# Generated 2021-03-26 10:50:24.750874 by PyXB version 1.2.6 using Python 3.7.4.final.0
# Namespace http://www.w3schools.com

from __future__ import unicode_literals
import pyxb
import pyxb.binding
import pyxb.binding.saxer
import io
import pyxb.utils.utility
import pyxb.utils.domutils
import sys
import pyxb.utils.six as _six
# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:f7f209cc-8df2-11eb-b20b-3448ed42967c')

# Version of PyXB used to generate the bindings
_PyXBVersion = '1.2.6'
# Generated bindings are not compatible across PyXB versions
if pyxb.__version__ != _PyXBVersion:
    raise pyxb.PyXBVersionError(_PyXBVersion)

# A holder for module-level binding classes so we can access them from
# inside class definitions where property names may conflict.
_module_typeBindings = pyxb.utils.utility.Object()

# Import bindings for namespaces imported into schema
import pyxb.binding.datatypes

# NOTE: All namespace declarations are reserved within the binding
Namespace = pyxb.namespace.NamespaceForURI('http://www.w3schools.com', create_if_missing=True)
Namespace.configureCategories(['typeBinding', 'elementBinding'])

def CreateFromDocument (xml_text, default_namespace=None, location_base=None):
    """Parse the given XML and use the document element to create a
    Python instance.

    @param xml_text An XML document.  This should be data (Python 2
    str or Python 3 bytes), or a text (Python 2 unicode or Python 3
    str) in the L{pyxb._InputEncoding} encoding.

    @keyword default_namespace The L{pyxb.Namespace} instance to use as the
    default namespace where there is no default namespace in scope.
    If unspecified or C{None}, the namespace of the module containing
    this function will be used.

    @keyword location_base: An object to be recorded as the base of all
    L{pyxb.utils.utility.Location} instances associated with events and
    objects handled by the parser.  You might pass the URI from which
    the document was obtained.
    """

    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement, default_namespace=default_namespace)
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    saxer = pyxb.binding.saxer.make_parser(fallback_namespace=default_namespace, location_base=location_base)
    handler = saxer.getContentHandler()
    xmld = xml_text
    if isinstance(xmld, _six.text_type):
        xmld = xmld.encode(pyxb._InputEncoding)
    saxer.parse(io.BytesIO(xmld))
    instance = handler.rootObject()
    return instance

def CreateFromDOM (node, default_namespace=None):
    """Create a Python instance from the given DOM node.
    The node tag must correspond to an element declaration in this module.

    @deprecated: Forcing use of DOM interface is unnecessary; use L{CreateFromDocument}."""
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return pyxb.binding.basis.element.AnyCreateFromDOM(node, default_namespace)


# Atomic simple type: {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation_20_Type_Pattern
class MT202COV_SequenceA_GeneralInformation_20_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceA_GeneralInformation_20_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 3, 1)
    _Documentation = None
MT202COV_SequenceA_GeneralInformation_20_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT202COV_SequenceA_GeneralInformation_20_Type_Pattern._CF_pattern.addPattern(pattern="([^/]([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,14}[^/])")
MT202COV_SequenceA_GeneralInformation_20_Type_Pattern._InitializeFacetMap(MT202COV_SequenceA_GeneralInformation_20_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceA_GeneralInformation_20_Type_Pattern', MT202COV_SequenceA_GeneralInformation_20_Type_Pattern)
_module_typeBindings.MT202COV_SequenceA_GeneralInformation_20_Type_Pattern = MT202COV_SequenceA_GeneralInformation_20_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation_21_Type_Pattern
class MT202COV_SequenceA_GeneralInformation_21_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceA_GeneralInformation_21_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 16, 1)
    _Documentation = None
MT202COV_SequenceA_GeneralInformation_21_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT202COV_SequenceA_GeneralInformation_21_Type_Pattern._CF_pattern.addPattern(pattern="([^/]([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,14}[^/])")
MT202COV_SequenceA_GeneralInformation_21_Type_Pattern._InitializeFacetMap(MT202COV_SequenceA_GeneralInformation_21_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceA_GeneralInformation_21_Type_Pattern', MT202COV_SequenceA_GeneralInformation_21_Type_Pattern)
_module_typeBindings.MT202COV_SequenceA_GeneralInformation_21_Type_Pattern = MT202COV_SequenceA_GeneralInformation_21_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation_13C_Type_Pattern
class MT202COV_SequenceA_GeneralInformation_13C_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceA_GeneralInformation_13C_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 29, 1)
    _Documentation = None
MT202COV_SequenceA_GeneralInformation_13C_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT202COV_SequenceA_GeneralInformation_13C_Type_Pattern._CF_pattern.addPattern(pattern='(/(CLSTIME|RNCTIME|SNDTIME)/(0[0-9]|[1][0-9]|2[0-3])([0-5][0-9])([+]|[-])(0[0-9]|[1][0-9]|2[0-3])([0-5][0-9]))')
MT202COV_SequenceA_GeneralInformation_13C_Type_Pattern._InitializeFacetMap(MT202COV_SequenceA_GeneralInformation_13C_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceA_GeneralInformation_13C_Type_Pattern', MT202COV_SequenceA_GeneralInformation_13C_Type_Pattern)
_module_typeBindings.MT202COV_SequenceA_GeneralInformation_13C_Type_Pattern = MT202COV_SequenceA_GeneralInformation_13C_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation_32A_Type_Pattern
class MT202COV_SequenceA_GeneralInformation_32A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceA_GeneralInformation_32A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 42, 1)
    _Documentation = None
MT202COV_SequenceA_GeneralInformation_32A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT202COV_SequenceA_GeneralInformation_32A_Type_Pattern._CF_pattern.addPattern(pattern='([0-9]{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})')
MT202COV_SequenceA_GeneralInformation_32A_Type_Pattern._InitializeFacetMap(MT202COV_SequenceA_GeneralInformation_32A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceA_GeneralInformation_32A_Type_Pattern', MT202COV_SequenceA_GeneralInformation_32A_Type_Pattern)
_module_typeBindings.MT202COV_SequenceA_GeneralInformation_32A_Type_Pattern = MT202COV_SequenceA_GeneralInformation_32A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation_52A_Type_Pattern
class MT202COV_SequenceA_GeneralInformation_52A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceA_GeneralInformation_52A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 55, 1)
    _Documentation = None
MT202COV_SequenceA_GeneralInformation_52A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT202COV_SequenceA_GeneralInformation_52A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT202COV_SequenceA_GeneralInformation_52A_Type_Pattern._InitializeFacetMap(MT202COV_SequenceA_GeneralInformation_52A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceA_GeneralInformation_52A_Type_Pattern', MT202COV_SequenceA_GeneralInformation_52A_Type_Pattern)
_module_typeBindings.MT202COV_SequenceA_GeneralInformation_52A_Type_Pattern = MT202COV_SequenceA_GeneralInformation_52A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation_52D_Type_Pattern
class MT202COV_SequenceA_GeneralInformation_52D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceA_GeneralInformation_52D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 68, 1)
    _Documentation = None
MT202COV_SequenceA_GeneralInformation_52D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT202COV_SequenceA_GeneralInformation_52D_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT202COV_SequenceA_GeneralInformation_52D_Type_Pattern._InitializeFacetMap(MT202COV_SequenceA_GeneralInformation_52D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceA_GeneralInformation_52D_Type_Pattern', MT202COV_SequenceA_GeneralInformation_52D_Type_Pattern)
_module_typeBindings.MT202COV_SequenceA_GeneralInformation_52D_Type_Pattern = MT202COV_SequenceA_GeneralInformation_52D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation_53A_Type_Pattern
class MT202COV_SequenceA_GeneralInformation_53A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceA_GeneralInformation_53A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 81, 1)
    _Documentation = None
MT202COV_SequenceA_GeneralInformation_53A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT202COV_SequenceA_GeneralInformation_53A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT202COV_SequenceA_GeneralInformation_53A_Type_Pattern._InitializeFacetMap(MT202COV_SequenceA_GeneralInformation_53A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceA_GeneralInformation_53A_Type_Pattern', MT202COV_SequenceA_GeneralInformation_53A_Type_Pattern)
_module_typeBindings.MT202COV_SequenceA_GeneralInformation_53A_Type_Pattern = MT202COV_SequenceA_GeneralInformation_53A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation_53B_Type_Pattern
class MT202COV_SequenceA_GeneralInformation_53B_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceA_GeneralInformation_53B_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 94, 1)
    _Documentation = None
MT202COV_SequenceA_GeneralInformation_53B_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT202COV_SequenceA_GeneralInformation_53B_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35})?)")
MT202COV_SequenceA_GeneralInformation_53B_Type_Pattern._InitializeFacetMap(MT202COV_SequenceA_GeneralInformation_53B_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceA_GeneralInformation_53B_Type_Pattern', MT202COV_SequenceA_GeneralInformation_53B_Type_Pattern)
_module_typeBindings.MT202COV_SequenceA_GeneralInformation_53B_Type_Pattern = MT202COV_SequenceA_GeneralInformation_53B_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation_53D_Type_Pattern
class MT202COV_SequenceA_GeneralInformation_53D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceA_GeneralInformation_53D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 107, 1)
    _Documentation = None
MT202COV_SequenceA_GeneralInformation_53D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT202COV_SequenceA_GeneralInformation_53D_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT202COV_SequenceA_GeneralInformation_53D_Type_Pattern._InitializeFacetMap(MT202COV_SequenceA_GeneralInformation_53D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceA_GeneralInformation_53D_Type_Pattern', MT202COV_SequenceA_GeneralInformation_53D_Type_Pattern)
_module_typeBindings.MT202COV_SequenceA_GeneralInformation_53D_Type_Pattern = MT202COV_SequenceA_GeneralInformation_53D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation_54A_Type_Pattern
class MT202COV_SequenceA_GeneralInformation_54A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceA_GeneralInformation_54A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 120, 1)
    _Documentation = None
MT202COV_SequenceA_GeneralInformation_54A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT202COV_SequenceA_GeneralInformation_54A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT202COV_SequenceA_GeneralInformation_54A_Type_Pattern._InitializeFacetMap(MT202COV_SequenceA_GeneralInformation_54A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceA_GeneralInformation_54A_Type_Pattern', MT202COV_SequenceA_GeneralInformation_54A_Type_Pattern)
_module_typeBindings.MT202COV_SequenceA_GeneralInformation_54A_Type_Pattern = MT202COV_SequenceA_GeneralInformation_54A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation_54B_Type_Pattern
class MT202COV_SequenceA_GeneralInformation_54B_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceA_GeneralInformation_54B_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 133, 1)
    _Documentation = None
MT202COV_SequenceA_GeneralInformation_54B_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT202COV_SequenceA_GeneralInformation_54B_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35})?)")
MT202COV_SequenceA_GeneralInformation_54B_Type_Pattern._InitializeFacetMap(MT202COV_SequenceA_GeneralInformation_54B_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceA_GeneralInformation_54B_Type_Pattern', MT202COV_SequenceA_GeneralInformation_54B_Type_Pattern)
_module_typeBindings.MT202COV_SequenceA_GeneralInformation_54B_Type_Pattern = MT202COV_SequenceA_GeneralInformation_54B_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation_54D_Type_Pattern
class MT202COV_SequenceA_GeneralInformation_54D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceA_GeneralInformation_54D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 146, 1)
    _Documentation = None
MT202COV_SequenceA_GeneralInformation_54D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT202COV_SequenceA_GeneralInformation_54D_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT202COV_SequenceA_GeneralInformation_54D_Type_Pattern._InitializeFacetMap(MT202COV_SequenceA_GeneralInformation_54D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceA_GeneralInformation_54D_Type_Pattern', MT202COV_SequenceA_GeneralInformation_54D_Type_Pattern)
_module_typeBindings.MT202COV_SequenceA_GeneralInformation_54D_Type_Pattern = MT202COV_SequenceA_GeneralInformation_54D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation_56A_Type_Pattern
class MT202COV_SequenceA_GeneralInformation_56A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceA_GeneralInformation_56A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 159, 1)
    _Documentation = None
MT202COV_SequenceA_GeneralInformation_56A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT202COV_SequenceA_GeneralInformation_56A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT202COV_SequenceA_GeneralInformation_56A_Type_Pattern._InitializeFacetMap(MT202COV_SequenceA_GeneralInformation_56A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceA_GeneralInformation_56A_Type_Pattern', MT202COV_SequenceA_GeneralInformation_56A_Type_Pattern)
_module_typeBindings.MT202COV_SequenceA_GeneralInformation_56A_Type_Pattern = MT202COV_SequenceA_GeneralInformation_56A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation_56D_Type_Pattern
class MT202COV_SequenceA_GeneralInformation_56D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceA_GeneralInformation_56D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 172, 1)
    _Documentation = None
MT202COV_SequenceA_GeneralInformation_56D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT202COV_SequenceA_GeneralInformation_56D_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT202COV_SequenceA_GeneralInformation_56D_Type_Pattern._InitializeFacetMap(MT202COV_SequenceA_GeneralInformation_56D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceA_GeneralInformation_56D_Type_Pattern', MT202COV_SequenceA_GeneralInformation_56D_Type_Pattern)
_module_typeBindings.MT202COV_SequenceA_GeneralInformation_56D_Type_Pattern = MT202COV_SequenceA_GeneralInformation_56D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation_57A_Type_Pattern
class MT202COV_SequenceA_GeneralInformation_57A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceA_GeneralInformation_57A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 185, 1)
    _Documentation = None
MT202COV_SequenceA_GeneralInformation_57A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT202COV_SequenceA_GeneralInformation_57A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT202COV_SequenceA_GeneralInformation_57A_Type_Pattern._InitializeFacetMap(MT202COV_SequenceA_GeneralInformation_57A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceA_GeneralInformation_57A_Type_Pattern', MT202COV_SequenceA_GeneralInformation_57A_Type_Pattern)
_module_typeBindings.MT202COV_SequenceA_GeneralInformation_57A_Type_Pattern = MT202COV_SequenceA_GeneralInformation_57A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation_57B_Type_Pattern
class MT202COV_SequenceA_GeneralInformation_57B_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceA_GeneralInformation_57B_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 198, 1)
    _Documentation = None
MT202COV_SequenceA_GeneralInformation_57B_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT202COV_SequenceA_GeneralInformation_57B_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35})?)")
MT202COV_SequenceA_GeneralInformation_57B_Type_Pattern._InitializeFacetMap(MT202COV_SequenceA_GeneralInformation_57B_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceA_GeneralInformation_57B_Type_Pattern', MT202COV_SequenceA_GeneralInformation_57B_Type_Pattern)
_module_typeBindings.MT202COV_SequenceA_GeneralInformation_57B_Type_Pattern = MT202COV_SequenceA_GeneralInformation_57B_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation_57D_Type_Pattern
class MT202COV_SequenceA_GeneralInformation_57D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceA_GeneralInformation_57D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 211, 1)
    _Documentation = None
MT202COV_SequenceA_GeneralInformation_57D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT202COV_SequenceA_GeneralInformation_57D_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT202COV_SequenceA_GeneralInformation_57D_Type_Pattern._InitializeFacetMap(MT202COV_SequenceA_GeneralInformation_57D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceA_GeneralInformation_57D_Type_Pattern', MT202COV_SequenceA_GeneralInformation_57D_Type_Pattern)
_module_typeBindings.MT202COV_SequenceA_GeneralInformation_57D_Type_Pattern = MT202COV_SequenceA_GeneralInformation_57D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation_58A_Type_Pattern
class MT202COV_SequenceA_GeneralInformation_58A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceA_GeneralInformation_58A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 224, 1)
    _Documentation = None
MT202COV_SequenceA_GeneralInformation_58A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT202COV_SequenceA_GeneralInformation_58A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT202COV_SequenceA_GeneralInformation_58A_Type_Pattern._InitializeFacetMap(MT202COV_SequenceA_GeneralInformation_58A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceA_GeneralInformation_58A_Type_Pattern', MT202COV_SequenceA_GeneralInformation_58A_Type_Pattern)
_module_typeBindings.MT202COV_SequenceA_GeneralInformation_58A_Type_Pattern = MT202COV_SequenceA_GeneralInformation_58A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation_58D_Type_Pattern
class MT202COV_SequenceA_GeneralInformation_58D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceA_GeneralInformation_58D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 237, 1)
    _Documentation = None
MT202COV_SequenceA_GeneralInformation_58D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT202COV_SequenceA_GeneralInformation_58D_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT202COV_SequenceA_GeneralInformation_58D_Type_Pattern._InitializeFacetMap(MT202COV_SequenceA_GeneralInformation_58D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceA_GeneralInformation_58D_Type_Pattern', MT202COV_SequenceA_GeneralInformation_58D_Type_Pattern)
_module_typeBindings.MT202COV_SequenceA_GeneralInformation_58D_Type_Pattern = MT202COV_SequenceA_GeneralInformation_58D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation_72_Type_Pattern
class MT202COV_SequenceA_GeneralInformation_72_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceA_GeneralInformation_72_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 250, 1)
    _Documentation = None
MT202COV_SequenceA_GeneralInformation_72_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT202COV_SequenceA_GeneralInformation_72_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,6})")
MT202COV_SequenceA_GeneralInformation_72_Type_Pattern._InitializeFacetMap(MT202COV_SequenceA_GeneralInformation_72_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceA_GeneralInformation_72_Type_Pattern', MT202COV_SequenceA_GeneralInformation_72_Type_Pattern)
_module_typeBindings.MT202COV_SequenceA_GeneralInformation_72_Type_Pattern = MT202COV_SequenceA_GeneralInformation_72_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50A_Type_Pattern
class MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 263, 1)
    _Documentation = None
MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50A_Type_Pattern._CF_pattern.addPattern(pattern="((/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50A_Type_Pattern._InitializeFacetMap(MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50A_Type_Pattern', MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50A_Type_Pattern)
_module_typeBindings.MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50A_Type_Pattern = MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50F_Type_Pattern
class MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50F_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50F_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 276, 1)
    _Documentation = None
MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50F_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50F_Type_Pattern._CF_pattern.addPattern(pattern="(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50F_Type_Pattern._InitializeFacetMap(MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50F_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50F_Type_Pattern', MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50F_Type_Pattern)
_module_typeBindings.MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50F_Type_Pattern = MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50F_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50K_Type_Pattern
class MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50K_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50K_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 289, 1)
    _Documentation = None
MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50K_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50K_Type_Pattern._CF_pattern.addPattern(pattern="((/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50K_Type_Pattern._InitializeFacetMap(MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50K_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50K_Type_Pattern', MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50K_Type_Pattern)
_module_typeBindings.MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50K_Type_Pattern = MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50K_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_52A_Type_Pattern
class MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_52A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_52A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 302, 1)
    _Documentation = None
MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_52A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_52A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_52A_Type_Pattern._InitializeFacetMap(MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_52A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_52A_Type_Pattern', MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_52A_Type_Pattern)
_module_typeBindings.MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_52A_Type_Pattern = MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_52A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_52D_Type_Pattern
class MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_52D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_52D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 315, 1)
    _Documentation = None
MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_52D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_52D_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_52D_Type_Pattern._InitializeFacetMap(MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_52D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_52D_Type_Pattern', MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_52D_Type_Pattern)
_module_typeBindings.MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_52D_Type_Pattern = MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_52D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56A_Type_Pattern
class MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 328, 1)
    _Documentation = None
MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56A_Type_Pattern._InitializeFacetMap(MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56A_Type_Pattern', MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56A_Type_Pattern)
_module_typeBindings.MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56A_Type_Pattern = MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56C_Type_Pattern
class MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56C_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56C_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 341, 1)
    _Documentation = None
MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56C_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56C_Type_Pattern._CF_pattern.addPattern(pattern="(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})")
MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56C_Type_Pattern._InitializeFacetMap(MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56C_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56C_Type_Pattern', MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56C_Type_Pattern)
_module_typeBindings.MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56C_Type_Pattern = MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56C_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56D_Type_Pattern
class MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 354, 1)
    _Documentation = None
MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56D_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56D_Type_Pattern._InitializeFacetMap(MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56D_Type_Pattern', MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56D_Type_Pattern)
_module_typeBindings.MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56D_Type_Pattern = MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57A_Type_Pattern
class MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 367, 1)
    _Documentation = None
MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57A_Type_Pattern._InitializeFacetMap(MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57A_Type_Pattern', MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57A_Type_Pattern)
_module_typeBindings.MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57A_Type_Pattern = MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57B_Type_Pattern
class MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57B_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57B_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 380, 1)
    _Documentation = None
MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57B_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57B_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35})?)")
MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57B_Type_Pattern._InitializeFacetMap(MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57B_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57B_Type_Pattern', MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57B_Type_Pattern)
_module_typeBindings.MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57B_Type_Pattern = MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57B_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57C_Type_Pattern
class MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57C_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57C_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 393, 1)
    _Documentation = None
MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57C_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57C_Type_Pattern._CF_pattern.addPattern(pattern="(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})")
MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57C_Type_Pattern._InitializeFacetMap(MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57C_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57C_Type_Pattern', MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57C_Type_Pattern)
_module_typeBindings.MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57C_Type_Pattern = MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57C_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57D_Type_Pattern
class MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 406, 1)
    _Documentation = None
MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57D_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57D_Type_Pattern._InitializeFacetMap(MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57D_Type_Pattern', MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57D_Type_Pattern)
_module_typeBindings.MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57D_Type_Pattern = MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59_Type_Pattern
class MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 419, 1)
    _Documentation = None
MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59_Type_Pattern._CF_pattern.addPattern(pattern="((/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59_Type_Pattern._InitializeFacetMap(MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59_Type_Pattern', MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59_Type_Pattern)
_module_typeBindings.MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59_Type_Pattern = MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59A_Type_Pattern
class MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 432, 1)
    _Documentation = None
MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59A_Type_Pattern._CF_pattern.addPattern(pattern="((/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59A_Type_Pattern._InitializeFacetMap(MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59A_Type_Pattern', MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59A_Type_Pattern)
_module_typeBindings.MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59A_Type_Pattern = MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59F_Type_Pattern
class MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59F_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59F_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 445, 1)
    _Documentation = None
MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59F_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59F_Type_Pattern._CF_pattern.addPattern(pattern="((/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?((1|2|3)/(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,33}\\n?){1,4}))")
MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59F_Type_Pattern._InitializeFacetMap(MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59F_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59F_Type_Pattern', MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59F_Type_Pattern)
_module_typeBindings.MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59F_Type_Pattern = MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59F_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_70_Type_Pattern
class MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_70_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_70_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 458, 1)
    _Documentation = None
MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_70_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_70_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_70_Type_Pattern._InitializeFacetMap(MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_70_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_70_Type_Pattern', MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_70_Type_Pattern)
_module_typeBindings.MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_70_Type_Pattern = MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_70_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_72_Type_Pattern
class MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_72_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_72_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 471, 1)
    _Documentation = None
MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_72_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_72_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,6})")
MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_72_Type_Pattern._InitializeFacetMap(MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_72_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_72_Type_Pattern', MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_72_Type_Pattern)
_module_typeBindings.MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_72_Type_Pattern = MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_72_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_33B_Type_Pattern
class MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_33B_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_33B_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 484, 1)
    _Documentation = None
MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_33B_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_33B_Type_Pattern._CF_pattern.addPattern(pattern='((AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})')
MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_33B_Type_Pattern._InitializeFacetMap(MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_33B_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_33B_Type_Pattern', MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_33B_Type_Pattern)
_module_typeBindings.MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_33B_Type_Pattern = MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_33B_Type_Pattern

# Complex type {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation with content type ELEMENT_ONLY
class MT202COV_SequenceA_GeneralInformation (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceA_GeneralInformation')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 497, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}TransactionReferenceNumber uses Python identifier TransactionReferenceNumber
    __TransactionReferenceNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TransactionReferenceNumber'), 'TransactionReferenceNumber', '__httpwww_w3schools_com_MT202COV_SequenceA_GeneralInformation_httpwww_w3schools_comTransactionReferenceNumber', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 499, 3), )

    
    TransactionReferenceNumber = property(__TransactionReferenceNumber.value, __TransactionReferenceNumber.set, None, None)

    
    # Element {http://www.w3schools.com}RelatedReference uses Python identifier RelatedReference
    __RelatedReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RelatedReference'), 'RelatedReference', '__httpwww_w3schools_com_MT202COV_SequenceA_GeneralInformation_httpwww_w3schools_comRelatedReference', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 500, 3), )

    
    RelatedReference = property(__RelatedReference.value, __RelatedReference.set, None, None)

    
    # Element {http://www.w3schools.com}TimeIndication uses Python identifier TimeIndication
    __TimeIndication = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TimeIndication'), 'TimeIndication', '__httpwww_w3schools_com_MT202COV_SequenceA_GeneralInformation_httpwww_w3schools_comTimeIndication', True, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 501, 3), )

    
    TimeIndication = property(__TimeIndication.value, __TimeIndication.set, None, None)

    
    # Element {http://www.w3schools.com}DateCurrencyAmount uses Python identifier DateCurrencyAmount
    __DateCurrencyAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DateCurrencyAmount'), 'DateCurrencyAmount', '__httpwww_w3schools_com_MT202COV_SequenceA_GeneralInformation_httpwww_w3schools_comDateCurrencyAmount', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 502, 3), )

    
    DateCurrencyAmount = property(__DateCurrencyAmount.value, __DateCurrencyAmount.set, None, None)

    
    # Element {http://www.w3schools.com}OrderingInstitution_A uses Python identifier OrderingInstitution_A
    __OrderingInstitution_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OrderingInstitution_A'), 'OrderingInstitution_A', '__httpwww_w3schools_com_MT202COV_SequenceA_GeneralInformation_httpwww_w3schools_comOrderingInstitution_A', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 504, 4), )

    
    OrderingInstitution_A = property(__OrderingInstitution_A.value, __OrderingInstitution_A.set, None, None)

    
    # Element {http://www.w3schools.com}OrderingInstitution_D uses Python identifier OrderingInstitution_D
    __OrderingInstitution_D = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OrderingInstitution_D'), 'OrderingInstitution_D', '__httpwww_w3schools_com_MT202COV_SequenceA_GeneralInformation_httpwww_w3schools_comOrderingInstitution_D', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 505, 4), )

    
    OrderingInstitution_D = property(__OrderingInstitution_D.value, __OrderingInstitution_D.set, None, None)

    
    # Element {http://www.w3schools.com}SendersCorrespondent_A uses Python identifier SendersCorrespondent_A
    __SendersCorrespondent_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SendersCorrespondent_A'), 'SendersCorrespondent_A', '__httpwww_w3schools_com_MT202COV_SequenceA_GeneralInformation_httpwww_w3schools_comSendersCorrespondent_A', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 508, 4), )

    
    SendersCorrespondent_A = property(__SendersCorrespondent_A.value, __SendersCorrespondent_A.set, None, None)

    
    # Element {http://www.w3schools.com}SendersCorrespondent_B uses Python identifier SendersCorrespondent_B
    __SendersCorrespondent_B = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SendersCorrespondent_B'), 'SendersCorrespondent_B', '__httpwww_w3schools_com_MT202COV_SequenceA_GeneralInformation_httpwww_w3schools_comSendersCorrespondent_B', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 509, 4), )

    
    SendersCorrespondent_B = property(__SendersCorrespondent_B.value, __SendersCorrespondent_B.set, None, None)

    
    # Element {http://www.w3schools.com}SendersCorrespondent_D uses Python identifier SendersCorrespondent_D
    __SendersCorrespondent_D = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SendersCorrespondent_D'), 'SendersCorrespondent_D', '__httpwww_w3schools_com_MT202COV_SequenceA_GeneralInformation_httpwww_w3schools_comSendersCorrespondent_D', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 510, 4), )

    
    SendersCorrespondent_D = property(__SendersCorrespondent_D.value, __SendersCorrespondent_D.set, None, None)

    
    # Element {http://www.w3schools.com}ReceiversCorrespondent_A uses Python identifier ReceiversCorrespondent_A
    __ReceiversCorrespondent_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReceiversCorrespondent_A'), 'ReceiversCorrespondent_A', '__httpwww_w3schools_com_MT202COV_SequenceA_GeneralInformation_httpwww_w3schools_comReceiversCorrespondent_A', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 513, 4), )

    
    ReceiversCorrespondent_A = property(__ReceiversCorrespondent_A.value, __ReceiversCorrespondent_A.set, None, None)

    
    # Element {http://www.w3schools.com}ReceiversCorrespondent_B uses Python identifier ReceiversCorrespondent_B
    __ReceiversCorrespondent_B = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReceiversCorrespondent_B'), 'ReceiversCorrespondent_B', '__httpwww_w3schools_com_MT202COV_SequenceA_GeneralInformation_httpwww_w3schools_comReceiversCorrespondent_B', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 514, 4), )

    
    ReceiversCorrespondent_B = property(__ReceiversCorrespondent_B.value, __ReceiversCorrespondent_B.set, None, None)

    
    # Element {http://www.w3schools.com}ReceiversCorrespondent_D uses Python identifier ReceiversCorrespondent_D
    __ReceiversCorrespondent_D = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReceiversCorrespondent_D'), 'ReceiversCorrespondent_D', '__httpwww_w3schools_com_MT202COV_SequenceA_GeneralInformation_httpwww_w3schools_comReceiversCorrespondent_D', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 515, 4), )

    
    ReceiversCorrespondent_D = property(__ReceiversCorrespondent_D.value, __ReceiversCorrespondent_D.set, None, None)

    
    # Element {http://www.w3schools.com}Intermedairy_A uses Python identifier Intermedairy_A
    __Intermedairy_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Intermedairy_A'), 'Intermedairy_A', '__httpwww_w3schools_com_MT202COV_SequenceA_GeneralInformation_httpwww_w3schools_comIntermedairy_A', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 518, 4), )

    
    Intermedairy_A = property(__Intermedairy_A.value, __Intermedairy_A.set, None, None)

    
    # Element {http://www.w3schools.com}Intermedairy_D uses Python identifier Intermedairy_D
    __Intermedairy_D = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Intermedairy_D'), 'Intermedairy_D', '__httpwww_w3schools_com_MT202COV_SequenceA_GeneralInformation_httpwww_w3schools_comIntermedairy_D', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 519, 4), )

    
    Intermedairy_D = property(__Intermedairy_D.value, __Intermedairy_D.set, None, None)

    
    # Element {http://www.w3schools.com}AccountWithInstitution_A uses Python identifier AccountWithInstitution_A
    __AccountWithInstitution_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AccountWithInstitution_A'), 'AccountWithInstitution_A', '__httpwww_w3schools_com_MT202COV_SequenceA_GeneralInformation_httpwww_w3schools_comAccountWithInstitution_A', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 522, 4), )

    
    AccountWithInstitution_A = property(__AccountWithInstitution_A.value, __AccountWithInstitution_A.set, None, None)

    
    # Element {http://www.w3schools.com}AccountWithInstitution_B uses Python identifier AccountWithInstitution_B
    __AccountWithInstitution_B = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AccountWithInstitution_B'), 'AccountWithInstitution_B', '__httpwww_w3schools_com_MT202COV_SequenceA_GeneralInformation_httpwww_w3schools_comAccountWithInstitution_B', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 523, 4), )

    
    AccountWithInstitution_B = property(__AccountWithInstitution_B.value, __AccountWithInstitution_B.set, None, None)

    
    # Element {http://www.w3schools.com}AccountWithInstitution_D uses Python identifier AccountWithInstitution_D
    __AccountWithInstitution_D = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AccountWithInstitution_D'), 'AccountWithInstitution_D', '__httpwww_w3schools_com_MT202COV_SequenceA_GeneralInformation_httpwww_w3schools_comAccountWithInstitution_D', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 524, 4), )

    
    AccountWithInstitution_D = property(__AccountWithInstitution_D.value, __AccountWithInstitution_D.set, None, None)

    
    # Element {http://www.w3schools.com}BeneficiaryInstitution_A uses Python identifier BeneficiaryInstitution_A
    __BeneficiaryInstitution_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryInstitution_A'), 'BeneficiaryInstitution_A', '__httpwww_w3schools_com_MT202COV_SequenceA_GeneralInformation_httpwww_w3schools_comBeneficiaryInstitution_A', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 527, 4), )

    
    BeneficiaryInstitution_A = property(__BeneficiaryInstitution_A.value, __BeneficiaryInstitution_A.set, None, None)

    
    # Element {http://www.w3schools.com}BeneficiaryInstitution_D uses Python identifier BeneficiaryInstitution_D
    __BeneficiaryInstitution_D = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryInstitution_D'), 'BeneficiaryInstitution_D', '__httpwww_w3schools_com_MT202COV_SequenceA_GeneralInformation_httpwww_w3schools_comBeneficiaryInstitution_D', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 528, 4), )

    
    BeneficiaryInstitution_D = property(__BeneficiaryInstitution_D.value, __BeneficiaryInstitution_D.set, None, None)

    
    # Element {http://www.w3schools.com}SenderToReceiverInformation uses Python identifier SenderToReceiverInformation
    __SenderToReceiverInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SenderToReceiverInformation'), 'SenderToReceiverInformation', '__httpwww_w3schools_com_MT202COV_SequenceA_GeneralInformation_httpwww_w3schools_comSenderToReceiverInformation', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 530, 3), )

    
    SenderToReceiverInformation = property(__SenderToReceiverInformation.value, __SenderToReceiverInformation.set, None, None)

    _ElementMap.update({
        __TransactionReferenceNumber.name() : __TransactionReferenceNumber,
        __RelatedReference.name() : __RelatedReference,
        __TimeIndication.name() : __TimeIndication,
        __DateCurrencyAmount.name() : __DateCurrencyAmount,
        __OrderingInstitution_A.name() : __OrderingInstitution_A,
        __OrderingInstitution_D.name() : __OrderingInstitution_D,
        __SendersCorrespondent_A.name() : __SendersCorrespondent_A,
        __SendersCorrespondent_B.name() : __SendersCorrespondent_B,
        __SendersCorrespondent_D.name() : __SendersCorrespondent_D,
        __ReceiversCorrespondent_A.name() : __ReceiversCorrespondent_A,
        __ReceiversCorrespondent_B.name() : __ReceiversCorrespondent_B,
        __ReceiversCorrespondent_D.name() : __ReceiversCorrespondent_D,
        __Intermedairy_A.name() : __Intermedairy_A,
        __Intermedairy_D.name() : __Intermedairy_D,
        __AccountWithInstitution_A.name() : __AccountWithInstitution_A,
        __AccountWithInstitution_B.name() : __AccountWithInstitution_B,
        __AccountWithInstitution_D.name() : __AccountWithInstitution_D,
        __BeneficiaryInstitution_A.name() : __BeneficiaryInstitution_A,
        __BeneficiaryInstitution_D.name() : __BeneficiaryInstitution_D,
        __SenderToReceiverInformation.name() : __SenderToReceiverInformation
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.MT202COV_SequenceA_GeneralInformation = MT202COV_SequenceA_GeneralInformation
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceA_GeneralInformation', MT202COV_SequenceA_GeneralInformation)


# Complex type {http://www.w3schools.com}MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails with content type ELEMENT_ONLY
class MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 533, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}OrderingCustomer_A uses Python identifier OrderingCustomer_A
    __OrderingCustomer_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OrderingCustomer_A'), 'OrderingCustomer_A', '__httpwww_w3schools_com_MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_httpwww_w3schools_comOrderingCustomer_A', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 536, 4), )

    
    OrderingCustomer_A = property(__OrderingCustomer_A.value, __OrderingCustomer_A.set, None, None)

    
    # Element {http://www.w3schools.com}OrderingCustomer_F uses Python identifier OrderingCustomer_F
    __OrderingCustomer_F = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OrderingCustomer_F'), 'OrderingCustomer_F', '__httpwww_w3schools_com_MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_httpwww_w3schools_comOrderingCustomer_F', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 537, 4), )

    
    OrderingCustomer_F = property(__OrderingCustomer_F.value, __OrderingCustomer_F.set, None, None)

    
    # Element {http://www.w3schools.com}OrderingCustomer_K uses Python identifier OrderingCustomer_K
    __OrderingCustomer_K = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OrderingCustomer_K'), 'OrderingCustomer_K', '__httpwww_w3schools_com_MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_httpwww_w3schools_comOrderingCustomer_K', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 538, 4), )

    
    OrderingCustomer_K = property(__OrderingCustomer_K.value, __OrderingCustomer_K.set, None, None)

    
    # Element {http://www.w3schools.com}OrderingInstitution_A uses Python identifier OrderingInstitution_A
    __OrderingInstitution_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OrderingInstitution_A'), 'OrderingInstitution_A', '__httpwww_w3schools_com_MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_httpwww_w3schools_comOrderingInstitution_A', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 541, 4), )

    
    OrderingInstitution_A = property(__OrderingInstitution_A.value, __OrderingInstitution_A.set, None, None)

    
    # Element {http://www.w3schools.com}OrderingInstitution_D uses Python identifier OrderingInstitution_D
    __OrderingInstitution_D = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OrderingInstitution_D'), 'OrderingInstitution_D', '__httpwww_w3schools_com_MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_httpwww_w3schools_comOrderingInstitution_D', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 542, 4), )

    
    OrderingInstitution_D = property(__OrderingInstitution_D.value, __OrderingInstitution_D.set, None, None)

    
    # Element {http://www.w3schools.com}IntermediaryInstitution_A uses Python identifier IntermediaryInstitution_A
    __IntermediaryInstitution_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IntermediaryInstitution_A'), 'IntermediaryInstitution_A', '__httpwww_w3schools_com_MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_httpwww_w3schools_comIntermediaryInstitution_A', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 545, 4), )

    
    IntermediaryInstitution_A = property(__IntermediaryInstitution_A.value, __IntermediaryInstitution_A.set, None, None)

    
    # Element {http://www.w3schools.com}IntermediaryInstitution_C uses Python identifier IntermediaryInstitution_C
    __IntermediaryInstitution_C = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IntermediaryInstitution_C'), 'IntermediaryInstitution_C', '__httpwww_w3schools_com_MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_httpwww_w3schools_comIntermediaryInstitution_C', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 546, 4), )

    
    IntermediaryInstitution_C = property(__IntermediaryInstitution_C.value, __IntermediaryInstitution_C.set, None, None)

    
    # Element {http://www.w3schools.com}IntermediaryInstitution_D uses Python identifier IntermediaryInstitution_D
    __IntermediaryInstitution_D = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IntermediaryInstitution_D'), 'IntermediaryInstitution_D', '__httpwww_w3schools_com_MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_httpwww_w3schools_comIntermediaryInstitution_D', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 547, 4), )

    
    IntermediaryInstitution_D = property(__IntermediaryInstitution_D.value, __IntermediaryInstitution_D.set, None, None)

    
    # Element {http://www.w3schools.com}AccountWithInstitution_A uses Python identifier AccountWithInstitution_A
    __AccountWithInstitution_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AccountWithInstitution_A'), 'AccountWithInstitution_A', '__httpwww_w3schools_com_MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_httpwww_w3schools_comAccountWithInstitution_A', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 550, 4), )

    
    AccountWithInstitution_A = property(__AccountWithInstitution_A.value, __AccountWithInstitution_A.set, None, None)

    
    # Element {http://www.w3schools.com}AccountWithInstitution_B uses Python identifier AccountWithInstitution_B
    __AccountWithInstitution_B = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AccountWithInstitution_B'), 'AccountWithInstitution_B', '__httpwww_w3schools_com_MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_httpwww_w3schools_comAccountWithInstitution_B', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 551, 4), )

    
    AccountWithInstitution_B = property(__AccountWithInstitution_B.value, __AccountWithInstitution_B.set, None, None)

    
    # Element {http://www.w3schools.com}AccountWithInstitution_C uses Python identifier AccountWithInstitution_C
    __AccountWithInstitution_C = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AccountWithInstitution_C'), 'AccountWithInstitution_C', '__httpwww_w3schools_com_MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_httpwww_w3schools_comAccountWithInstitution_C', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 552, 4), )

    
    AccountWithInstitution_C = property(__AccountWithInstitution_C.value, __AccountWithInstitution_C.set, None, None)

    
    # Element {http://www.w3schools.com}AccountWithInstitution_D uses Python identifier AccountWithInstitution_D
    __AccountWithInstitution_D = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AccountWithInstitution_D'), 'AccountWithInstitution_D', '__httpwww_w3schools_com_MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_httpwww_w3schools_comAccountWithInstitution_D', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 553, 4), )

    
    AccountWithInstitution_D = property(__AccountWithInstitution_D.value, __AccountWithInstitution_D.set, None, None)

    
    # Element {http://www.w3schools.com}BeneficiaryCustomer uses Python identifier BeneficiaryCustomer
    __BeneficiaryCustomer = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryCustomer'), 'BeneficiaryCustomer', '__httpwww_w3schools_com_MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_httpwww_w3schools_comBeneficiaryCustomer', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 556, 4), )

    
    BeneficiaryCustomer = property(__BeneficiaryCustomer.value, __BeneficiaryCustomer.set, None, None)

    
    # Element {http://www.w3schools.com}BeneficiaryCustomer_A uses Python identifier BeneficiaryCustomer_A
    __BeneficiaryCustomer_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryCustomer_A'), 'BeneficiaryCustomer_A', '__httpwww_w3schools_com_MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_httpwww_w3schools_comBeneficiaryCustomer_A', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 557, 4), )

    
    BeneficiaryCustomer_A = property(__BeneficiaryCustomer_A.value, __BeneficiaryCustomer_A.set, None, None)

    
    # Element {http://www.w3schools.com}BeneficiaryCustomer_F uses Python identifier BeneficiaryCustomer_F
    __BeneficiaryCustomer_F = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryCustomer_F'), 'BeneficiaryCustomer_F', '__httpwww_w3schools_com_MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_httpwww_w3schools_comBeneficiaryCustomer_F', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 558, 4), )

    
    BeneficiaryCustomer_F = property(__BeneficiaryCustomer_F.value, __BeneficiaryCustomer_F.set, None, None)

    
    # Element {http://www.w3schools.com}RemittanceInformation uses Python identifier RemittanceInformation
    __RemittanceInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RemittanceInformation'), 'RemittanceInformation', '__httpwww_w3schools_com_MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_httpwww_w3schools_comRemittanceInformation', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 560, 3), )

    
    RemittanceInformation = property(__RemittanceInformation.value, __RemittanceInformation.set, None, None)

    
    # Element {http://www.w3schools.com}SenderToReceiverInformation uses Python identifier SenderToReceiverInformation
    __SenderToReceiverInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SenderToReceiverInformation'), 'SenderToReceiverInformation', '__httpwww_w3schools_com_MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_httpwww_w3schools_comSenderToReceiverInformation', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 561, 3), )

    
    SenderToReceiverInformation = property(__SenderToReceiverInformation.value, __SenderToReceiverInformation.set, None, None)

    
    # Element {http://www.w3schools.com}CurrencyInstructedAmount uses Python identifier CurrencyInstructedAmount
    __CurrencyInstructedAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CurrencyInstructedAmount'), 'CurrencyInstructedAmount', '__httpwww_w3schools_com_MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_httpwww_w3schools_comCurrencyInstructedAmount', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 562, 3), )

    
    CurrencyInstructedAmount = property(__CurrencyInstructedAmount.value, __CurrencyInstructedAmount.set, None, None)

    _ElementMap.update({
        __OrderingCustomer_A.name() : __OrderingCustomer_A,
        __OrderingCustomer_F.name() : __OrderingCustomer_F,
        __OrderingCustomer_K.name() : __OrderingCustomer_K,
        __OrderingInstitution_A.name() : __OrderingInstitution_A,
        __OrderingInstitution_D.name() : __OrderingInstitution_D,
        __IntermediaryInstitution_A.name() : __IntermediaryInstitution_A,
        __IntermediaryInstitution_C.name() : __IntermediaryInstitution_C,
        __IntermediaryInstitution_D.name() : __IntermediaryInstitution_D,
        __AccountWithInstitution_A.name() : __AccountWithInstitution_A,
        __AccountWithInstitution_B.name() : __AccountWithInstitution_B,
        __AccountWithInstitution_C.name() : __AccountWithInstitution_C,
        __AccountWithInstitution_D.name() : __AccountWithInstitution_D,
        __BeneficiaryCustomer.name() : __BeneficiaryCustomer,
        __BeneficiaryCustomer_A.name() : __BeneficiaryCustomer_A,
        __BeneficiaryCustomer_F.name() : __BeneficiaryCustomer_F,
        __RemittanceInformation.name() : __RemittanceInformation,
        __SenderToReceiverInformation.name() : __SenderToReceiverInformation,
        __CurrencyInstructedAmount.name() : __CurrencyInstructedAmount
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails = MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails', MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 566, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}SequenceA_GeneralInformation uses Python identifier SequenceA_GeneralInformation
    __SequenceA_GeneralInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SequenceA_GeneralInformation'), 'SequenceA_GeneralInformation', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comSequenceA_GeneralInformation', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 568, 4), )

    
    SequenceA_GeneralInformation = property(__SequenceA_GeneralInformation.value, __SequenceA_GeneralInformation.set, None, None)

    
    # Element {http://www.w3schools.com}SequenceB_UnderlyingCustomerCreditTransferDetails uses Python identifier SequenceB_UnderlyingCustomerCreditTransferDetails
    __SequenceB_UnderlyingCustomerCreditTransferDetails = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SequenceB_UnderlyingCustomerCreditTransferDetails'), 'SequenceB_UnderlyingCustomerCreditTransferDetails', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comSequenceB_UnderlyingCustomerCreditTransferDetails', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 569, 4), )

    
    SequenceB_UnderlyingCustomerCreditTransferDetails = property(__SequenceB_UnderlyingCustomerCreditTransferDetails.value, __SequenceB_UnderlyingCustomerCreditTransferDetails.set, None, None)

    _ElementMap.update({
        __SequenceA_GeneralInformation.name() : __SequenceA_GeneralInformation,
        __SequenceB_UnderlyingCustomerCreditTransferDetails.name() : __SequenceB_UnderlyingCustomerCreditTransferDetails
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON = CTD_ANON


# Complex type {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation_20_Type with content type SIMPLE
class MT202COV_SequenceA_GeneralInformation_20_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation_20_Type with content type SIMPLE"""
    _TypeDefinition = MT202COV_SequenceA_GeneralInformation_20_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceA_GeneralInformation_20_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 8, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT202COV_SequenceA_GeneralInformation_20_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT202COV_SequenceA_GeneralInformation_20_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='20')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 11, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 11, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT202COV_SequenceA_GeneralInformation_20_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 12, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 12, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT202COV_SequenceA_GeneralInformation_20_Type = MT202COV_SequenceA_GeneralInformation_20_Type
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceA_GeneralInformation_20_Type', MT202COV_SequenceA_GeneralInformation_20_Type)


# Complex type {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation_21_Type with content type SIMPLE
class MT202COV_SequenceA_GeneralInformation_21_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation_21_Type with content type SIMPLE"""
    _TypeDefinition = MT202COV_SequenceA_GeneralInformation_21_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceA_GeneralInformation_21_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 21, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT202COV_SequenceA_GeneralInformation_21_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT202COV_SequenceA_GeneralInformation_21_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='21')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 24, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 24, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT202COV_SequenceA_GeneralInformation_21_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 25, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 25, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT202COV_SequenceA_GeneralInformation_21_Type = MT202COV_SequenceA_GeneralInformation_21_Type
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceA_GeneralInformation_21_Type', MT202COV_SequenceA_GeneralInformation_21_Type)


# Complex type {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation_13C_Type with content type SIMPLE
class MT202COV_SequenceA_GeneralInformation_13C_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation_13C_Type with content type SIMPLE"""
    _TypeDefinition = MT202COV_SequenceA_GeneralInformation_13C_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceA_GeneralInformation_13C_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 34, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT202COV_SequenceA_GeneralInformation_13C_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT202COV_SequenceA_GeneralInformation_13C_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='13C')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 37, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 37, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT202COV_SequenceA_GeneralInformation_13C_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 38, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 38, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT202COV_SequenceA_GeneralInformation_13C_Type = MT202COV_SequenceA_GeneralInformation_13C_Type
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceA_GeneralInformation_13C_Type', MT202COV_SequenceA_GeneralInformation_13C_Type)


# Complex type {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation_32A_Type with content type SIMPLE
class MT202COV_SequenceA_GeneralInformation_32A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation_32A_Type with content type SIMPLE"""
    _TypeDefinition = MT202COV_SequenceA_GeneralInformation_32A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceA_GeneralInformation_32A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 47, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT202COV_SequenceA_GeneralInformation_32A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT202COV_SequenceA_GeneralInformation_32A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='32A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 50, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 50, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT202COV_SequenceA_GeneralInformation_32A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 51, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 51, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT202COV_SequenceA_GeneralInformation_32A_Type = MT202COV_SequenceA_GeneralInformation_32A_Type
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceA_GeneralInformation_32A_Type', MT202COV_SequenceA_GeneralInformation_32A_Type)


# Complex type {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation_52A_Type with content type SIMPLE
class MT202COV_SequenceA_GeneralInformation_52A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation_52A_Type with content type SIMPLE"""
    _TypeDefinition = MT202COV_SequenceA_GeneralInformation_52A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceA_GeneralInformation_52A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 60, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT202COV_SequenceA_GeneralInformation_52A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT202COV_SequenceA_GeneralInformation_52A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='52A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 63, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 63, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT202COV_SequenceA_GeneralInformation_52A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 64, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 64, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT202COV_SequenceA_GeneralInformation_52A_Type = MT202COV_SequenceA_GeneralInformation_52A_Type
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceA_GeneralInformation_52A_Type', MT202COV_SequenceA_GeneralInformation_52A_Type)


# Complex type {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation_52D_Type with content type SIMPLE
class MT202COV_SequenceA_GeneralInformation_52D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation_52D_Type with content type SIMPLE"""
    _TypeDefinition = MT202COV_SequenceA_GeneralInformation_52D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceA_GeneralInformation_52D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 73, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT202COV_SequenceA_GeneralInformation_52D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT202COV_SequenceA_GeneralInformation_52D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='52D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 76, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 76, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT202COV_SequenceA_GeneralInformation_52D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 77, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 77, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT202COV_SequenceA_GeneralInformation_52D_Type = MT202COV_SequenceA_GeneralInformation_52D_Type
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceA_GeneralInformation_52D_Type', MT202COV_SequenceA_GeneralInformation_52D_Type)


# Complex type {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation_53A_Type with content type SIMPLE
class MT202COV_SequenceA_GeneralInformation_53A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation_53A_Type with content type SIMPLE"""
    _TypeDefinition = MT202COV_SequenceA_GeneralInformation_53A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceA_GeneralInformation_53A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 86, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT202COV_SequenceA_GeneralInformation_53A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT202COV_SequenceA_GeneralInformation_53A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='53A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 89, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 89, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT202COV_SequenceA_GeneralInformation_53A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 90, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 90, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT202COV_SequenceA_GeneralInformation_53A_Type = MT202COV_SequenceA_GeneralInformation_53A_Type
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceA_GeneralInformation_53A_Type', MT202COV_SequenceA_GeneralInformation_53A_Type)


# Complex type {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation_53B_Type with content type SIMPLE
class MT202COV_SequenceA_GeneralInformation_53B_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation_53B_Type with content type SIMPLE"""
    _TypeDefinition = MT202COV_SequenceA_GeneralInformation_53B_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceA_GeneralInformation_53B_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 99, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT202COV_SequenceA_GeneralInformation_53B_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT202COV_SequenceA_GeneralInformation_53B_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='53B')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 102, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 102, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT202COV_SequenceA_GeneralInformation_53B_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 103, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 103, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT202COV_SequenceA_GeneralInformation_53B_Type = MT202COV_SequenceA_GeneralInformation_53B_Type
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceA_GeneralInformation_53B_Type', MT202COV_SequenceA_GeneralInformation_53B_Type)


# Complex type {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation_53D_Type with content type SIMPLE
class MT202COV_SequenceA_GeneralInformation_53D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation_53D_Type with content type SIMPLE"""
    _TypeDefinition = MT202COV_SequenceA_GeneralInformation_53D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceA_GeneralInformation_53D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 112, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT202COV_SequenceA_GeneralInformation_53D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT202COV_SequenceA_GeneralInformation_53D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='53D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 115, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 115, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT202COV_SequenceA_GeneralInformation_53D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 116, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 116, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT202COV_SequenceA_GeneralInformation_53D_Type = MT202COV_SequenceA_GeneralInformation_53D_Type
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceA_GeneralInformation_53D_Type', MT202COV_SequenceA_GeneralInformation_53D_Type)


# Complex type {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation_54A_Type with content type SIMPLE
class MT202COV_SequenceA_GeneralInformation_54A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation_54A_Type with content type SIMPLE"""
    _TypeDefinition = MT202COV_SequenceA_GeneralInformation_54A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceA_GeneralInformation_54A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 125, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT202COV_SequenceA_GeneralInformation_54A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT202COV_SequenceA_GeneralInformation_54A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='54A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 128, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 128, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT202COV_SequenceA_GeneralInformation_54A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 129, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 129, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT202COV_SequenceA_GeneralInformation_54A_Type = MT202COV_SequenceA_GeneralInformation_54A_Type
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceA_GeneralInformation_54A_Type', MT202COV_SequenceA_GeneralInformation_54A_Type)


# Complex type {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation_54B_Type with content type SIMPLE
class MT202COV_SequenceA_GeneralInformation_54B_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation_54B_Type with content type SIMPLE"""
    _TypeDefinition = MT202COV_SequenceA_GeneralInformation_54B_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceA_GeneralInformation_54B_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 138, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT202COV_SequenceA_GeneralInformation_54B_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT202COV_SequenceA_GeneralInformation_54B_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='54B')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 141, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 141, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT202COV_SequenceA_GeneralInformation_54B_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 142, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 142, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT202COV_SequenceA_GeneralInformation_54B_Type = MT202COV_SequenceA_GeneralInformation_54B_Type
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceA_GeneralInformation_54B_Type', MT202COV_SequenceA_GeneralInformation_54B_Type)


# Complex type {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation_54D_Type with content type SIMPLE
class MT202COV_SequenceA_GeneralInformation_54D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation_54D_Type with content type SIMPLE"""
    _TypeDefinition = MT202COV_SequenceA_GeneralInformation_54D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceA_GeneralInformation_54D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 151, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT202COV_SequenceA_GeneralInformation_54D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT202COV_SequenceA_GeneralInformation_54D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='54D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 154, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 154, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT202COV_SequenceA_GeneralInformation_54D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 155, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 155, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT202COV_SequenceA_GeneralInformation_54D_Type = MT202COV_SequenceA_GeneralInformation_54D_Type
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceA_GeneralInformation_54D_Type', MT202COV_SequenceA_GeneralInformation_54D_Type)


# Complex type {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation_56A_Type with content type SIMPLE
class MT202COV_SequenceA_GeneralInformation_56A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation_56A_Type with content type SIMPLE"""
    _TypeDefinition = MT202COV_SequenceA_GeneralInformation_56A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceA_GeneralInformation_56A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 164, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT202COV_SequenceA_GeneralInformation_56A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT202COV_SequenceA_GeneralInformation_56A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='56A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 167, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 167, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT202COV_SequenceA_GeneralInformation_56A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 168, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 168, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT202COV_SequenceA_GeneralInformation_56A_Type = MT202COV_SequenceA_GeneralInformation_56A_Type
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceA_GeneralInformation_56A_Type', MT202COV_SequenceA_GeneralInformation_56A_Type)


# Complex type {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation_56D_Type with content type SIMPLE
class MT202COV_SequenceA_GeneralInformation_56D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation_56D_Type with content type SIMPLE"""
    _TypeDefinition = MT202COV_SequenceA_GeneralInformation_56D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceA_GeneralInformation_56D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 177, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT202COV_SequenceA_GeneralInformation_56D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT202COV_SequenceA_GeneralInformation_56D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='56D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 180, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 180, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT202COV_SequenceA_GeneralInformation_56D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 181, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 181, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT202COV_SequenceA_GeneralInformation_56D_Type = MT202COV_SequenceA_GeneralInformation_56D_Type
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceA_GeneralInformation_56D_Type', MT202COV_SequenceA_GeneralInformation_56D_Type)


# Complex type {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation_57A_Type with content type SIMPLE
class MT202COV_SequenceA_GeneralInformation_57A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation_57A_Type with content type SIMPLE"""
    _TypeDefinition = MT202COV_SequenceA_GeneralInformation_57A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceA_GeneralInformation_57A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 190, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT202COV_SequenceA_GeneralInformation_57A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT202COV_SequenceA_GeneralInformation_57A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='57A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 193, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 193, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT202COV_SequenceA_GeneralInformation_57A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 194, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 194, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT202COV_SequenceA_GeneralInformation_57A_Type = MT202COV_SequenceA_GeneralInformation_57A_Type
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceA_GeneralInformation_57A_Type', MT202COV_SequenceA_GeneralInformation_57A_Type)


# Complex type {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation_57B_Type with content type SIMPLE
class MT202COV_SequenceA_GeneralInformation_57B_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation_57B_Type with content type SIMPLE"""
    _TypeDefinition = MT202COV_SequenceA_GeneralInformation_57B_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceA_GeneralInformation_57B_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 203, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT202COV_SequenceA_GeneralInformation_57B_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT202COV_SequenceA_GeneralInformation_57B_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='57B')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 206, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 206, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT202COV_SequenceA_GeneralInformation_57B_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 207, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 207, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT202COV_SequenceA_GeneralInformation_57B_Type = MT202COV_SequenceA_GeneralInformation_57B_Type
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceA_GeneralInformation_57B_Type', MT202COV_SequenceA_GeneralInformation_57B_Type)


# Complex type {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation_57D_Type with content type SIMPLE
class MT202COV_SequenceA_GeneralInformation_57D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation_57D_Type with content type SIMPLE"""
    _TypeDefinition = MT202COV_SequenceA_GeneralInformation_57D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceA_GeneralInformation_57D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 216, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT202COV_SequenceA_GeneralInformation_57D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT202COV_SequenceA_GeneralInformation_57D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='57D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 219, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 219, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT202COV_SequenceA_GeneralInformation_57D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 220, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 220, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT202COV_SequenceA_GeneralInformation_57D_Type = MT202COV_SequenceA_GeneralInformation_57D_Type
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceA_GeneralInformation_57D_Type', MT202COV_SequenceA_GeneralInformation_57D_Type)


# Complex type {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation_58A_Type with content type SIMPLE
class MT202COV_SequenceA_GeneralInformation_58A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation_58A_Type with content type SIMPLE"""
    _TypeDefinition = MT202COV_SequenceA_GeneralInformation_58A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceA_GeneralInformation_58A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 229, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT202COV_SequenceA_GeneralInformation_58A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT202COV_SequenceA_GeneralInformation_58A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='58A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 232, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 232, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT202COV_SequenceA_GeneralInformation_58A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 233, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 233, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT202COV_SequenceA_GeneralInformation_58A_Type = MT202COV_SequenceA_GeneralInformation_58A_Type
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceA_GeneralInformation_58A_Type', MT202COV_SequenceA_GeneralInformation_58A_Type)


# Complex type {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation_58D_Type with content type SIMPLE
class MT202COV_SequenceA_GeneralInformation_58D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation_58D_Type with content type SIMPLE"""
    _TypeDefinition = MT202COV_SequenceA_GeneralInformation_58D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceA_GeneralInformation_58D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 242, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT202COV_SequenceA_GeneralInformation_58D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT202COV_SequenceA_GeneralInformation_58D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='58D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 245, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 245, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT202COV_SequenceA_GeneralInformation_58D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 246, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 246, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT202COV_SequenceA_GeneralInformation_58D_Type = MT202COV_SequenceA_GeneralInformation_58D_Type
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceA_GeneralInformation_58D_Type', MT202COV_SequenceA_GeneralInformation_58D_Type)


# Complex type {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation_72_Type with content type SIMPLE
class MT202COV_SequenceA_GeneralInformation_72_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT202COV_SequenceA_GeneralInformation_72_Type with content type SIMPLE"""
    _TypeDefinition = MT202COV_SequenceA_GeneralInformation_72_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceA_GeneralInformation_72_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 255, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT202COV_SequenceA_GeneralInformation_72_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT202COV_SequenceA_GeneralInformation_72_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='72')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 258, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 258, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT202COV_SequenceA_GeneralInformation_72_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 259, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 259, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT202COV_SequenceA_GeneralInformation_72_Type = MT202COV_SequenceA_GeneralInformation_72_Type
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceA_GeneralInformation_72_Type', MT202COV_SequenceA_GeneralInformation_72_Type)


# Complex type {http://www.w3schools.com}MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50A_Type with content type SIMPLE
class MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50A_Type with content type SIMPLE"""
    _TypeDefinition = MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 268, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='50A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 271, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 271, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 272, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 272, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50A_Type = MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50A_Type
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50A_Type', MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50A_Type)


# Complex type {http://www.w3schools.com}MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50F_Type with content type SIMPLE
class MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50F_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50F_Type with content type SIMPLE"""
    _TypeDefinition = MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50F_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50F_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 281, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50F_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50F_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='50F')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 284, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 284, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50F_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 285, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 285, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50F_Type = MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50F_Type
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50F_Type', MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50F_Type)


# Complex type {http://www.w3schools.com}MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50K_Type with content type SIMPLE
class MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50K_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50K_Type with content type SIMPLE"""
    _TypeDefinition = MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50K_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50K_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 294, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50K_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50K_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='50K')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 297, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 297, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50K_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 298, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 298, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50K_Type = MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50K_Type
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50K_Type', MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50K_Type)


# Complex type {http://www.w3schools.com}MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_52A_Type with content type SIMPLE
class MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_52A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_52A_Type with content type SIMPLE"""
    _TypeDefinition = MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_52A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_52A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 307, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_52A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_52A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='52A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 310, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 310, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_52A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 311, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 311, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_52A_Type = MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_52A_Type
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_52A_Type', MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_52A_Type)


# Complex type {http://www.w3schools.com}MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_52D_Type with content type SIMPLE
class MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_52D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_52D_Type with content type SIMPLE"""
    _TypeDefinition = MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_52D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_52D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 320, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_52D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_52D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='52D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 323, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 323, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_52D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 324, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 324, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_52D_Type = MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_52D_Type
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_52D_Type', MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_52D_Type)


# Complex type {http://www.w3schools.com}MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56A_Type with content type SIMPLE
class MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56A_Type with content type SIMPLE"""
    _TypeDefinition = MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 333, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='56A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 336, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 336, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 337, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 337, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56A_Type = MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56A_Type
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56A_Type', MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56A_Type)


# Complex type {http://www.w3schools.com}MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56C_Type with content type SIMPLE
class MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56C_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56C_Type with content type SIMPLE"""
    _TypeDefinition = MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56C_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56C_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 346, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56C_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56C_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='56C')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 349, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 349, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56C_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 350, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 350, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56C_Type = MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56C_Type
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56C_Type', MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56C_Type)


# Complex type {http://www.w3schools.com}MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56D_Type with content type SIMPLE
class MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56D_Type with content type SIMPLE"""
    _TypeDefinition = MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 359, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='56D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 362, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 362, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 363, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 363, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56D_Type = MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56D_Type
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56D_Type', MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56D_Type)


# Complex type {http://www.w3schools.com}MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57A_Type with content type SIMPLE
class MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57A_Type with content type SIMPLE"""
    _TypeDefinition = MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 372, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='57A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 375, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 375, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 376, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 376, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57A_Type = MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57A_Type
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57A_Type', MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57A_Type)


# Complex type {http://www.w3schools.com}MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57B_Type with content type SIMPLE
class MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57B_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57B_Type with content type SIMPLE"""
    _TypeDefinition = MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57B_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57B_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 385, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57B_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57B_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='57B')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 388, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 388, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57B_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 389, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 389, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57B_Type = MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57B_Type
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57B_Type', MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57B_Type)


# Complex type {http://www.w3schools.com}MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57C_Type with content type SIMPLE
class MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57C_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57C_Type with content type SIMPLE"""
    _TypeDefinition = MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57C_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57C_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 398, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57C_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57C_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='57C')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 401, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 401, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57C_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 402, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 402, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57C_Type = MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57C_Type
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57C_Type', MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57C_Type)


# Complex type {http://www.w3schools.com}MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57D_Type with content type SIMPLE
class MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57D_Type with content type SIMPLE"""
    _TypeDefinition = MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 411, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='57D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 414, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 414, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 415, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 415, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57D_Type = MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57D_Type
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57D_Type', MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57D_Type)


# Complex type {http://www.w3schools.com}MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59_Type with content type SIMPLE
class MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59_Type with content type SIMPLE"""
    _TypeDefinition = MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 424, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='59')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 427, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 427, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 428, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 428, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59_Type = MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59_Type
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59_Type', MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59_Type)


# Complex type {http://www.w3schools.com}MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59A_Type with content type SIMPLE
class MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59A_Type with content type SIMPLE"""
    _TypeDefinition = MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 437, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='59A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 440, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 440, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 441, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 441, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59A_Type = MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59A_Type
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59A_Type', MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59A_Type)


# Complex type {http://www.w3schools.com}MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59F_Type with content type SIMPLE
class MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59F_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59F_Type with content type SIMPLE"""
    _TypeDefinition = MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59F_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59F_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 450, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59F_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59F_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='59F')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 453, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 453, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59F_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 454, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 454, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59F_Type = MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59F_Type
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59F_Type', MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59F_Type)


# Complex type {http://www.w3schools.com}MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_70_Type with content type SIMPLE
class MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_70_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_70_Type with content type SIMPLE"""
    _TypeDefinition = MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_70_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_70_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 463, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_70_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_70_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='70')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 466, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 466, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_70_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 467, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 467, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_70_Type = MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_70_Type
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_70_Type', MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_70_Type)


# Complex type {http://www.w3schools.com}MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_72_Type with content type SIMPLE
class MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_72_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_72_Type with content type SIMPLE"""
    _TypeDefinition = MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_72_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_72_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 476, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_72_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_72_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='72')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 479, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 479, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_72_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 480, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 480, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_72_Type = MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_72_Type
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_72_Type', MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_72_Type)


# Complex type {http://www.w3schools.com}MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_33B_Type with content type SIMPLE
class MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_33B_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_33B_Type with content type SIMPLE"""
    _TypeDefinition = MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_33B_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_33B_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 489, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_33B_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_33B_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='33B')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 492, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 492, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_33B_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 493, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 493, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_33B_Type = MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_33B_Type
Namespace.addCategoryObject('typeBinding', 'MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_33B_Type', MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_33B_Type)


MT202COV = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MT202COV'), CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 565, 1))
Namespace.addCategoryObject('elementBinding', MT202COV.name().localName(), MT202COV)



MT202COV_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TransactionReferenceNumber'), MT202COV_SequenceA_GeneralInformation_20_Type, scope=MT202COV_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 499, 3)))

MT202COV_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RelatedReference'), MT202COV_SequenceA_GeneralInformation_21_Type, scope=MT202COV_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 500, 3)))

MT202COV_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TimeIndication'), MT202COV_SequenceA_GeneralInformation_13C_Type, scope=MT202COV_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 501, 3)))

MT202COV_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DateCurrencyAmount'), MT202COV_SequenceA_GeneralInformation_32A_Type, scope=MT202COV_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 502, 3)))

MT202COV_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OrderingInstitution_A'), MT202COV_SequenceA_GeneralInformation_52A_Type, scope=MT202COV_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 504, 4)))

MT202COV_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OrderingInstitution_D'), MT202COV_SequenceA_GeneralInformation_52D_Type, scope=MT202COV_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 505, 4)))

MT202COV_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SendersCorrespondent_A'), MT202COV_SequenceA_GeneralInformation_53A_Type, scope=MT202COV_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 508, 4)))

MT202COV_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SendersCorrespondent_B'), MT202COV_SequenceA_GeneralInformation_53B_Type, scope=MT202COV_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 509, 4)))

MT202COV_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SendersCorrespondent_D'), MT202COV_SequenceA_GeneralInformation_53D_Type, scope=MT202COV_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 510, 4)))

MT202COV_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReceiversCorrespondent_A'), MT202COV_SequenceA_GeneralInformation_54A_Type, scope=MT202COV_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 513, 4)))

MT202COV_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReceiversCorrespondent_B'), MT202COV_SequenceA_GeneralInformation_54B_Type, scope=MT202COV_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 514, 4)))

MT202COV_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReceiversCorrespondent_D'), MT202COV_SequenceA_GeneralInformation_54D_Type, scope=MT202COV_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 515, 4)))

MT202COV_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Intermedairy_A'), MT202COV_SequenceA_GeneralInformation_56A_Type, scope=MT202COV_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 518, 4)))

MT202COV_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Intermedairy_D'), MT202COV_SequenceA_GeneralInformation_56D_Type, scope=MT202COV_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 519, 4)))

MT202COV_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AccountWithInstitution_A'), MT202COV_SequenceA_GeneralInformation_57A_Type, scope=MT202COV_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 522, 4)))

MT202COV_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AccountWithInstitution_B'), MT202COV_SequenceA_GeneralInformation_57B_Type, scope=MT202COV_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 523, 4)))

MT202COV_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AccountWithInstitution_D'), MT202COV_SequenceA_GeneralInformation_57D_Type, scope=MT202COV_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 524, 4)))

MT202COV_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryInstitution_A'), MT202COV_SequenceA_GeneralInformation_58A_Type, scope=MT202COV_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 527, 4)))

MT202COV_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryInstitution_D'), MT202COV_SequenceA_GeneralInformation_58D_Type, scope=MT202COV_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 528, 4)))

MT202COV_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SenderToReceiverInformation'), MT202COV_SequenceA_GeneralInformation_72_Type, scope=MT202COV_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 530, 3)))

def _BuildAutomaton ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton
    del _BuildAutomaton
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 501, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 503, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 504, 4))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 505, 4))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 507, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 508, 4))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 509, 4))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 510, 4))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 512, 3))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 513, 4))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 514, 4))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 515, 4))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 517, 3))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 518, 4))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 519, 4))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 521, 3))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 522, 4))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 523, 4))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 524, 4))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 530, 3))
    counters.add(cc_19)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT202COV_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TransactionReferenceNumber')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 499, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT202COV_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RelatedReference')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 500, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT202COV_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TimeIndication')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 501, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT202COV_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DateCurrencyAmount')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 502, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT202COV_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OrderingInstitution_A')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 504, 4))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT202COV_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OrderingInstitution_D')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 505, 4))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT202COV_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SendersCorrespondent_A')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 508, 4))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT202COV_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SendersCorrespondent_B')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 509, 4))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT202COV_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SendersCorrespondent_D')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 510, 4))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT202COV_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReceiversCorrespondent_A')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 513, 4))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT202COV_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReceiversCorrespondent_B')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 514, 4))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT202COV_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReceiversCorrespondent_D')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 515, 4))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT202COV_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Intermedairy_A')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 518, 4))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT202COV_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Intermedairy_D')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 519, 4))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT202COV_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AccountWithInstitution_A')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 522, 4))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT202COV_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AccountWithInstitution_B')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 523, 4))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT202COV_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AccountWithInstitution_D')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 524, 4))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT202COV_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryInstitution_A')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 527, 4))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT202COV_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryInstitution_D')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 528, 4))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(MT202COV_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SenderToReceiverInformation')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 530, 3))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False),
        fac.UpdateInstruction(cc_13, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False),
        fac.UpdateInstruction(cc_14, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_15, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, True),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False),
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False),
        fac.UpdateInstruction(cc_16, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_15, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, True),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False),
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False),
        fac.UpdateInstruction(cc_17, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_15, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, True),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False),
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False),
        fac.UpdateInstruction(cc_18, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
         ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_19, True) ]))
    st_19._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MT202COV_SequenceA_GeneralInformation._Automaton = _BuildAutomaton()




MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OrderingCustomer_A'), MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50A_Type, scope=MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 536, 4)))

MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OrderingCustomer_F'), MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50F_Type, scope=MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 537, 4)))

MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OrderingCustomer_K'), MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50K_Type, scope=MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 538, 4)))

MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OrderingInstitution_A'), MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_52A_Type, scope=MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 541, 4)))

MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OrderingInstitution_D'), MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_52D_Type, scope=MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 542, 4)))

MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IntermediaryInstitution_A'), MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56A_Type, scope=MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 545, 4)))

MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IntermediaryInstitution_C'), MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56C_Type, scope=MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 546, 4)))

MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IntermediaryInstitution_D'), MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56D_Type, scope=MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 547, 4)))

MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AccountWithInstitution_A'), MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57A_Type, scope=MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 550, 4)))

MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AccountWithInstitution_B'), MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57B_Type, scope=MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 551, 4)))

MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AccountWithInstitution_C'), MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57C_Type, scope=MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 552, 4)))

MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AccountWithInstitution_D'), MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57D_Type, scope=MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 553, 4)))

MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryCustomer'), MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59_Type, scope=MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 556, 4)))

MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryCustomer_A'), MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59A_Type, scope=MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 557, 4)))

MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryCustomer_F'), MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59F_Type, scope=MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 558, 4)))

MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RemittanceInformation'), MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_70_Type, scope=MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 560, 3)))

MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SenderToReceiverInformation'), MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_72_Type, scope=MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 561, 3)))

MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CurrencyInstructedAmount'), MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_33B_Type, scope=MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 562, 3)))

def _BuildAutomaton_ ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_
    del _BuildAutomaton_
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 540, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 541, 4))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 542, 4))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 544, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 545, 4))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 546, 4))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 547, 4))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 549, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 550, 4))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 551, 4))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 552, 4))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 553, 4))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 560, 3))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 561, 3))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 562, 3))
    counters.add(cc_14)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OrderingCustomer_A')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 536, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OrderingCustomer_F')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 537, 4))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OrderingCustomer_K')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 538, 4))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OrderingInstitution_A')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 541, 4))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OrderingInstitution_D')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 542, 4))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IntermediaryInstitution_A')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 545, 4))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IntermediaryInstitution_C')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 546, 4))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IntermediaryInstitution_D')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 547, 4))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AccountWithInstitution_A')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 550, 4))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AccountWithInstitution_B')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 551, 4))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AccountWithInstitution_C')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 552, 4))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AccountWithInstitution_D')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 553, 4))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryCustomer')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 556, 4))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryCustomer_A')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 557, 4))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryCustomer_F')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 558, 4))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RemittanceInformation')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 560, 3))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SenderToReceiverInformation')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 561, 3))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CurrencyInstructedAmount')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 562, 3))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False),
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False),
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False),
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False),
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False),
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False),
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False),
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, True) ]))
    st_17._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails._Automaton = _BuildAutomaton_()




CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SequenceA_GeneralInformation'), MT202COV_SequenceA_GeneralInformation, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 568, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SequenceB_UnderlyingCustomerCreditTransferDetails'), MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 569, 4)))

def _BuildAutomaton_2 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_2
    del _BuildAutomaton_2
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SequenceA_GeneralInformation')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 568, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SequenceB_UnderlyingCustomerCreditTransferDetails')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT202COV.xsd', 569, 4))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON._Automaton = _BuildAutomaton_2()



...

  MT210
# C:\Projects\Xsds\MT210.py
# -*- coding: utf-8 -*-
# PyXB bindings for NM:96afad3d20bbfe8d040a1a097fa388d9fecd10e3
# Generated 2020-01-23 15:43:38.419214 by PyXB version 1.2.6 using Python 3.7.4.final.0
# Namespace http://www.w3schools.com

from __future__ import unicode_literals
import pyxb
import pyxb.binding
import pyxb.binding.saxer
import io
import pyxb.utils.utility
import pyxb.utils.domutils
import sys
import pyxb.utils.six as _six
# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:05d0437a-3dc9-11ea-89f7-509a4c321f2f')

# Version of PyXB used to generate the bindings
_PyXBVersion = '1.2.6'
# Generated bindings are not compatible across PyXB versions
if pyxb.__version__ != _PyXBVersion:
    raise pyxb.PyXBVersionError(_PyXBVersion)

# A holder for module-level binding classes so we can access them from
# inside class definitions where property names may conflict.
_module_typeBindings = pyxb.utils.utility.Object()

# Import bindings for namespaces imported into schema
import pyxb.binding.datatypes

# NOTE: All namespace declarations are reserved within the binding
Namespace = pyxb.namespace.NamespaceForURI('http://www.w3schools.com', create_if_missing=True)
Namespace.configureCategories(['typeBinding', 'elementBinding'])

def CreateFromDocument (xml_text, default_namespace=None, location_base=None):
    """Parse the given XML and use the document element to create a
    Python instance.

    @param xml_text An XML document.  This should be data (Python 2
    str or Python 3 bytes), or a text (Python 2 unicode or Python 3
    str) in the L{pyxb._InputEncoding} encoding.

    @keyword default_namespace The L{pyxb.Namespace} instance to use as the
    default namespace where there is no default namespace in scope.
    If unspecified or C{None}, the namespace of the module containing
    this function will be used.

    @keyword location_base: An object to be recorded as the base of all
    L{pyxb.utils.utility.Location} instances associated with events and
    objects handled by the parser.  You might pass the URI from which
    the document was obtained.
    """

    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement, default_namespace=default_namespace)
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    saxer = pyxb.binding.saxer.make_parser(fallback_namespace=default_namespace, location_base=location_base)
    handler = saxer.getContentHandler()
    xmld = xml_text
    if isinstance(xmld, _six.text_type):
        xmld = xmld.encode(pyxb._InputEncoding)
    saxer.parse(io.BytesIO(xmld))
    instance = handler.rootObject()
    return instance

def CreateFromDOM (node, default_namespace=None):
    """Create a Python instance from the given DOM node.
    The node tag must correspond to an element declaration in this module.

    @deprecated: Forcing use of DOM interface is unnecessary; use L{CreateFromDocument}."""
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return pyxb.binding.basis.element.AnyCreateFromDOM(node, default_namespace)


# Atomic simple type: {http://www.w3schools.com}MT210_SEQUENCE1_20_Type_Pattern
class MT210_SEQUENCE1_20_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT210_SEQUENCE1_20_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 3, 1)
    _Documentation = None
MT210_SEQUENCE1_20_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT210_SEQUENCE1_20_Type_Pattern._CF_pattern.addPattern(pattern="([^/]([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,14}[^/])")
MT210_SEQUENCE1_20_Type_Pattern._InitializeFacetMap(MT210_SEQUENCE1_20_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT210_SEQUENCE1_20_Type_Pattern', MT210_SEQUENCE1_20_Type_Pattern)
_module_typeBindings.MT210_SEQUENCE1_20_Type_Pattern = MT210_SEQUENCE1_20_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT210_SEQUENCE1_25_Type_Pattern
class MT210_SEQUENCE1_25_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT210_SEQUENCE1_25_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 16, 1)
    _Documentation = None
MT210_SEQUENCE1_25_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT210_SEQUENCE1_25_Type_Pattern._CF_pattern.addPattern(pattern="(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35})")
MT210_SEQUENCE1_25_Type_Pattern._InitializeFacetMap(MT210_SEQUENCE1_25_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT210_SEQUENCE1_25_Type_Pattern', MT210_SEQUENCE1_25_Type_Pattern)
_module_typeBindings.MT210_SEQUENCE1_25_Type_Pattern = MT210_SEQUENCE1_25_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT210_SEQUENCE1_30_Type_Pattern
class MT210_SEQUENCE1_30_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT210_SEQUENCE1_30_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 29, 1)
    _Documentation = None
MT210_SEQUENCE1_30_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT210_SEQUENCE1_30_Type_Pattern._CF_pattern.addPattern(pattern='([0-9]{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01]))')
MT210_SEQUENCE1_30_Type_Pattern._InitializeFacetMap(MT210_SEQUENCE1_30_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT210_SEQUENCE1_30_Type_Pattern', MT210_SEQUENCE1_30_Type_Pattern)
_module_typeBindings.MT210_SEQUENCE1_30_Type_Pattern = MT210_SEQUENCE1_30_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT210_SEQUENCE2_21_Type_Pattern
class MT210_SEQUENCE2_21_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT210_SEQUENCE2_21_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 42, 1)
    _Documentation = None
MT210_SEQUENCE2_21_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT210_SEQUENCE2_21_Type_Pattern._CF_pattern.addPattern(pattern="([^/]([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,14}[^/])")
MT210_SEQUENCE2_21_Type_Pattern._InitializeFacetMap(MT210_SEQUENCE2_21_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT210_SEQUENCE2_21_Type_Pattern', MT210_SEQUENCE2_21_Type_Pattern)
_module_typeBindings.MT210_SEQUENCE2_21_Type_Pattern = MT210_SEQUENCE2_21_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT210_SEQUENCE2_32B_Type_Pattern
class MT210_SEQUENCE2_32B_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT210_SEQUENCE2_32B_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 55, 1)
    _Documentation = None
MT210_SEQUENCE2_32B_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT210_SEQUENCE2_32B_Type_Pattern._CF_pattern.addPattern(pattern='((AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})')
MT210_SEQUENCE2_32B_Type_Pattern._InitializeFacetMap(MT210_SEQUENCE2_32B_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT210_SEQUENCE2_32B_Type_Pattern', MT210_SEQUENCE2_32B_Type_Pattern)
_module_typeBindings.MT210_SEQUENCE2_32B_Type_Pattern = MT210_SEQUENCE2_32B_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT210_SEQUENCE2_50_Type_Pattern
class MT210_SEQUENCE2_50_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT210_SEQUENCE2_50_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 68, 1)
    _Documentation = None
MT210_SEQUENCE2_50_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT210_SEQUENCE2_50_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT210_SEQUENCE2_50_Type_Pattern._InitializeFacetMap(MT210_SEQUENCE2_50_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT210_SEQUENCE2_50_Type_Pattern', MT210_SEQUENCE2_50_Type_Pattern)
_module_typeBindings.MT210_SEQUENCE2_50_Type_Pattern = MT210_SEQUENCE2_50_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT210_SEQUENCE2_50C_Type_Pattern
class MT210_SEQUENCE2_50C_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT210_SEQUENCE2_50C_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 81, 1)
    _Documentation = None
MT210_SEQUENCE2_50C_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT210_SEQUENCE2_50C_Type_Pattern._CF_pattern.addPattern(pattern='([A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)')
MT210_SEQUENCE2_50C_Type_Pattern._InitializeFacetMap(MT210_SEQUENCE2_50C_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT210_SEQUENCE2_50C_Type_Pattern', MT210_SEQUENCE2_50C_Type_Pattern)
_module_typeBindings.MT210_SEQUENCE2_50C_Type_Pattern = MT210_SEQUENCE2_50C_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT210_SEQUENCE2_50F_Type_Pattern
class MT210_SEQUENCE2_50F_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT210_SEQUENCE2_50F_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 94, 1)
    _Documentation = None
MT210_SEQUENCE2_50F_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT210_SEQUENCE2_50F_Type_Pattern._CF_pattern.addPattern(pattern="(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT210_SEQUENCE2_50F_Type_Pattern._InitializeFacetMap(MT210_SEQUENCE2_50F_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT210_SEQUENCE2_50F_Type_Pattern', MT210_SEQUENCE2_50F_Type_Pattern)
_module_typeBindings.MT210_SEQUENCE2_50F_Type_Pattern = MT210_SEQUENCE2_50F_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT210_SEQUENCE2_52A_Type_Pattern
class MT210_SEQUENCE2_52A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT210_SEQUENCE2_52A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 107, 1)
    _Documentation = None
MT210_SEQUENCE2_52A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT210_SEQUENCE2_52A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT210_SEQUENCE2_52A_Type_Pattern._InitializeFacetMap(MT210_SEQUENCE2_52A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT210_SEQUENCE2_52A_Type_Pattern', MT210_SEQUENCE2_52A_Type_Pattern)
_module_typeBindings.MT210_SEQUENCE2_52A_Type_Pattern = MT210_SEQUENCE2_52A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT210_SEQUENCE2_52D_Type_Pattern
class MT210_SEQUENCE2_52D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT210_SEQUENCE2_52D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 120, 1)
    _Documentation = None
MT210_SEQUENCE2_52D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT210_SEQUENCE2_52D_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT210_SEQUENCE2_52D_Type_Pattern._InitializeFacetMap(MT210_SEQUENCE2_52D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT210_SEQUENCE2_52D_Type_Pattern', MT210_SEQUENCE2_52D_Type_Pattern)
_module_typeBindings.MT210_SEQUENCE2_52D_Type_Pattern = MT210_SEQUENCE2_52D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT210_SEQUENCE2_56A_Type_Pattern
class MT210_SEQUENCE2_56A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT210_SEQUENCE2_56A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 133, 1)
    _Documentation = None
MT210_SEQUENCE2_56A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT210_SEQUENCE2_56A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT210_SEQUENCE2_56A_Type_Pattern._InitializeFacetMap(MT210_SEQUENCE2_56A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT210_SEQUENCE2_56A_Type_Pattern', MT210_SEQUENCE2_56A_Type_Pattern)
_module_typeBindings.MT210_SEQUENCE2_56A_Type_Pattern = MT210_SEQUENCE2_56A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT210_SEQUENCE2_56D_Type_Pattern
class MT210_SEQUENCE2_56D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT210_SEQUENCE2_56D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 146, 1)
    _Documentation = None
MT210_SEQUENCE2_56D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT210_SEQUENCE2_56D_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT210_SEQUENCE2_56D_Type_Pattern._InitializeFacetMap(MT210_SEQUENCE2_56D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT210_SEQUENCE2_56D_Type_Pattern', MT210_SEQUENCE2_56D_Type_Pattern)
_module_typeBindings.MT210_SEQUENCE2_56D_Type_Pattern = MT210_SEQUENCE2_56D_Type_Pattern

# Complex type {http://www.w3schools.com}MT210_SEQUENCE1 with content type ELEMENT_ONLY
class MT210_SEQUENCE1 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT210_SEQUENCE1 with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT210_SEQUENCE1')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 159, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}TransactionReferenceNumber uses Python identifier TransactionReferenceNumber
    __TransactionReferenceNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TransactionReferenceNumber'), 'TransactionReferenceNumber', '__httpwww_w3schools_com_MT210_SEQUENCE1_httpwww_w3schools_comTransactionReferenceNumber', False, pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 161, 3), )

    
    TransactionReferenceNumber = property(__TransactionReferenceNumber.value, __TransactionReferenceNumber.set, None, None)

    
    # Element {http://www.w3schools.com}AccountIdentification uses Python identifier AccountIdentification
    __AccountIdentification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AccountIdentification'), 'AccountIdentification', '__httpwww_w3schools_com_MT210_SEQUENCE1_httpwww_w3schools_comAccountIdentification', False, pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 162, 3), )

    
    AccountIdentification = property(__AccountIdentification.value, __AccountIdentification.set, None, None)

    
    # Element {http://www.w3schools.com}ValueDate uses Python identifier ValueDate
    __ValueDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ValueDate'), 'ValueDate', '__httpwww_w3schools_com_MT210_SEQUENCE1_httpwww_w3schools_comValueDate', False, pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 163, 3), )

    
    ValueDate = property(__ValueDate.value, __ValueDate.set, None, None)

    _ElementMap.update({
        __TransactionReferenceNumber.name() : __TransactionReferenceNumber,
        __AccountIdentification.name() : __AccountIdentification,
        __ValueDate.name() : __ValueDate
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.MT210_SEQUENCE1 = MT210_SEQUENCE1
Namespace.addCategoryObject('typeBinding', 'MT210_SEQUENCE1', MT210_SEQUENCE1)


# Complex type {http://www.w3schools.com}MT210_SEQUENCE2 with content type ELEMENT_ONLY
class MT210_SEQUENCE2 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT210_SEQUENCE2 with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT210_SEQUENCE2')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 166, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}RelatedReference uses Python identifier RelatedReference
    __RelatedReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RelatedReference'), 'RelatedReference', '__httpwww_w3schools_com_MT210_SEQUENCE2_httpwww_w3schools_comRelatedReference', False, pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 168, 3), )

    
    RelatedReference = property(__RelatedReference.value, __RelatedReference.set, None, None)

    
    # Element {http://www.w3schools.com}CurrencyCodeAmount uses Python identifier CurrencyCodeAmount
    __CurrencyCodeAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CurrencyCodeAmount'), 'CurrencyCodeAmount', '__httpwww_w3schools_com_MT210_SEQUENCE2_httpwww_w3schools_comCurrencyCodeAmount', False, pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 169, 3), )

    
    CurrencyCodeAmount = property(__CurrencyCodeAmount.value, __CurrencyCodeAmount.set, None, None)

    
    # Element {http://www.w3schools.com}OrderingCustomer uses Python identifier OrderingCustomer
    __OrderingCustomer = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OrderingCustomer'), 'OrderingCustomer', '__httpwww_w3schools_com_MT210_SEQUENCE2_httpwww_w3schools_comOrderingCustomer', False, pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 171, 4), )

    
    OrderingCustomer = property(__OrderingCustomer.value, __OrderingCustomer.set, None, None)

    
    # Element {http://www.w3schools.com}OrderingCustomer_C uses Python identifier OrderingCustomer_C
    __OrderingCustomer_C = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OrderingCustomer_C'), 'OrderingCustomer_C', '__httpwww_w3schools_com_MT210_SEQUENCE2_httpwww_w3schools_comOrderingCustomer_C', False, pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 172, 4), )

    
    OrderingCustomer_C = property(__OrderingCustomer_C.value, __OrderingCustomer_C.set, None, None)

    
    # Element {http://www.w3schools.com}OrderingCustomer_F uses Python identifier OrderingCustomer_F
    __OrderingCustomer_F = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OrderingCustomer_F'), 'OrderingCustomer_F', '__httpwww_w3schools_com_MT210_SEQUENCE2_httpwww_w3schools_comOrderingCustomer_F', False, pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 173, 4), )

    
    OrderingCustomer_F = property(__OrderingCustomer_F.value, __OrderingCustomer_F.set, None, None)

    
    # Element {http://www.w3schools.com}OrderingInstitution_A uses Python identifier OrderingInstitution_A
    __OrderingInstitution_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OrderingInstitution_A'), 'OrderingInstitution_A', '__httpwww_w3schools_com_MT210_SEQUENCE2_httpwww_w3schools_comOrderingInstitution_A', False, pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 176, 4), )

    
    OrderingInstitution_A = property(__OrderingInstitution_A.value, __OrderingInstitution_A.set, None, None)

    
    # Element {http://www.w3schools.com}OrderingInstitution_D uses Python identifier OrderingInstitution_D
    __OrderingInstitution_D = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OrderingInstitution_D'), 'OrderingInstitution_D', '__httpwww_w3schools_com_MT210_SEQUENCE2_httpwww_w3schools_comOrderingInstitution_D', False, pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 177, 4), )

    
    OrderingInstitution_D = property(__OrderingInstitution_D.value, __OrderingInstitution_D.set, None, None)

    
    # Element {http://www.w3schools.com}Intermedairy_A uses Python identifier Intermedairy_A
    __Intermedairy_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Intermedairy_A'), 'Intermedairy_A', '__httpwww_w3schools_com_MT210_SEQUENCE2_httpwww_w3schools_comIntermedairy_A', False, pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 180, 4), )

    
    Intermedairy_A = property(__Intermedairy_A.value, __Intermedairy_A.set, None, None)

    
    # Element {http://www.w3schools.com}Intermedairy_D uses Python identifier Intermedairy_D
    __Intermedairy_D = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Intermedairy_D'), 'Intermedairy_D', '__httpwww_w3schools_com_MT210_SEQUENCE2_httpwww_w3schools_comIntermedairy_D', False, pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 181, 4), )

    
    Intermedairy_D = property(__Intermedairy_D.value, __Intermedairy_D.set, None, None)

    _ElementMap.update({
        __RelatedReference.name() : __RelatedReference,
        __CurrencyCodeAmount.name() : __CurrencyCodeAmount,
        __OrderingCustomer.name() : __OrderingCustomer,
        __OrderingCustomer_C.name() : __OrderingCustomer_C,
        __OrderingCustomer_F.name() : __OrderingCustomer_F,
        __OrderingInstitution_A.name() : __OrderingInstitution_A,
        __OrderingInstitution_D.name() : __OrderingInstitution_D,
        __Intermedairy_A.name() : __Intermedairy_A,
        __Intermedairy_D.name() : __Intermedairy_D
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.MT210_SEQUENCE2 = MT210_SEQUENCE2
Namespace.addCategoryObject('typeBinding', 'MT210_SEQUENCE2', MT210_SEQUENCE2)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 186, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}SEQUENCE1 uses Python identifier SEQUENCE1
    __SEQUENCE1 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SEQUENCE1'), 'SEQUENCE1', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comSEQUENCE1', False, pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 188, 4), )

    
    SEQUENCE1 = property(__SEQUENCE1.value, __SEQUENCE1.set, None, None)

    
    # Element {http://www.w3schools.com}SEQUENCE2 uses Python identifier SEQUENCE2
    __SEQUENCE2 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SEQUENCE2'), 'SEQUENCE2', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comSEQUENCE2', True, pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 189, 4), )

    
    SEQUENCE2 = property(__SEQUENCE2.value, __SEQUENCE2.set, None, None)

    _ElementMap.update({
        __SEQUENCE1.name() : __SEQUENCE1,
        __SEQUENCE2.name() : __SEQUENCE2
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON = CTD_ANON


# Complex type {http://www.w3schools.com}MT210_SEQUENCE1_20_Type with content type SIMPLE
class MT210_SEQUENCE1_20_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT210_SEQUENCE1_20_Type with content type SIMPLE"""
    _TypeDefinition = MT210_SEQUENCE1_20_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT210_SEQUENCE1_20_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 8, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT210_SEQUENCE1_20_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT210_SEQUENCE1_20_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='20')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 11, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 11, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT210_SEQUENCE1_20_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 12, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 12, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT210_SEQUENCE1_20_Type = MT210_SEQUENCE1_20_Type
Namespace.addCategoryObject('typeBinding', 'MT210_SEQUENCE1_20_Type', MT210_SEQUENCE1_20_Type)


# Complex type {http://www.w3schools.com}MT210_SEQUENCE1_25_Type with content type SIMPLE
class MT210_SEQUENCE1_25_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT210_SEQUENCE1_25_Type with content type SIMPLE"""
    _TypeDefinition = MT210_SEQUENCE1_25_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT210_SEQUENCE1_25_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 21, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT210_SEQUENCE1_25_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT210_SEQUENCE1_25_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='25')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 24, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 24, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT210_SEQUENCE1_25_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 25, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 25, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT210_SEQUENCE1_25_Type = MT210_SEQUENCE1_25_Type
Namespace.addCategoryObject('typeBinding', 'MT210_SEQUENCE1_25_Type', MT210_SEQUENCE1_25_Type)


# Complex type {http://www.w3schools.com}MT210_SEQUENCE1_30_Type with content type SIMPLE
class MT210_SEQUENCE1_30_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT210_SEQUENCE1_30_Type with content type SIMPLE"""
    _TypeDefinition = MT210_SEQUENCE1_30_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT210_SEQUENCE1_30_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 34, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT210_SEQUENCE1_30_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT210_SEQUENCE1_30_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='30')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 37, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 37, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT210_SEQUENCE1_30_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 38, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 38, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT210_SEQUENCE1_30_Type = MT210_SEQUENCE1_30_Type
Namespace.addCategoryObject('typeBinding', 'MT210_SEQUENCE1_30_Type', MT210_SEQUENCE1_30_Type)


# Complex type {http://www.w3schools.com}MT210_SEQUENCE2_21_Type with content type SIMPLE
class MT210_SEQUENCE2_21_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT210_SEQUENCE2_21_Type with content type SIMPLE"""
    _TypeDefinition = MT210_SEQUENCE2_21_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT210_SEQUENCE2_21_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 47, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT210_SEQUENCE2_21_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT210_SEQUENCE2_21_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='21')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 50, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 50, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT210_SEQUENCE2_21_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 51, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 51, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT210_SEQUENCE2_21_Type = MT210_SEQUENCE2_21_Type
Namespace.addCategoryObject('typeBinding', 'MT210_SEQUENCE2_21_Type', MT210_SEQUENCE2_21_Type)


# Complex type {http://www.w3schools.com}MT210_SEQUENCE2_32B_Type with content type SIMPLE
class MT210_SEQUENCE2_32B_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT210_SEQUENCE2_32B_Type with content type SIMPLE"""
    _TypeDefinition = MT210_SEQUENCE2_32B_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT210_SEQUENCE2_32B_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 60, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT210_SEQUENCE2_32B_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT210_SEQUENCE2_32B_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='32B')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 63, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 63, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT210_SEQUENCE2_32B_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 64, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 64, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT210_SEQUENCE2_32B_Type = MT210_SEQUENCE2_32B_Type
Namespace.addCategoryObject('typeBinding', 'MT210_SEQUENCE2_32B_Type', MT210_SEQUENCE2_32B_Type)


# Complex type {http://www.w3schools.com}MT210_SEQUENCE2_50_Type with content type SIMPLE
class MT210_SEQUENCE2_50_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT210_SEQUENCE2_50_Type with content type SIMPLE"""
    _TypeDefinition = MT210_SEQUENCE2_50_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT210_SEQUENCE2_50_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 73, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT210_SEQUENCE2_50_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT210_SEQUENCE2_50_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='50')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 76, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 76, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT210_SEQUENCE2_50_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 77, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 77, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT210_SEQUENCE2_50_Type = MT210_SEQUENCE2_50_Type
Namespace.addCategoryObject('typeBinding', 'MT210_SEQUENCE2_50_Type', MT210_SEQUENCE2_50_Type)


# Complex type {http://www.w3schools.com}MT210_SEQUENCE2_50C_Type with content type SIMPLE
class MT210_SEQUENCE2_50C_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT210_SEQUENCE2_50C_Type with content type SIMPLE"""
    _TypeDefinition = MT210_SEQUENCE2_50C_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT210_SEQUENCE2_50C_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 86, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT210_SEQUENCE2_50C_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT210_SEQUENCE2_50C_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='50C')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 89, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 89, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT210_SEQUENCE2_50C_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 90, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 90, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT210_SEQUENCE2_50C_Type = MT210_SEQUENCE2_50C_Type
Namespace.addCategoryObject('typeBinding', 'MT210_SEQUENCE2_50C_Type', MT210_SEQUENCE2_50C_Type)


# Complex type {http://www.w3schools.com}MT210_SEQUENCE2_50F_Type with content type SIMPLE
class MT210_SEQUENCE2_50F_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT210_SEQUENCE2_50F_Type with content type SIMPLE"""
    _TypeDefinition = MT210_SEQUENCE2_50F_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT210_SEQUENCE2_50F_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 99, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT210_SEQUENCE2_50F_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT210_SEQUENCE2_50F_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='50F')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 102, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 102, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT210_SEQUENCE2_50F_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 103, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 103, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT210_SEQUENCE2_50F_Type = MT210_SEQUENCE2_50F_Type
Namespace.addCategoryObject('typeBinding', 'MT210_SEQUENCE2_50F_Type', MT210_SEQUENCE2_50F_Type)


# Complex type {http://www.w3schools.com}MT210_SEQUENCE2_52A_Type with content type SIMPLE
class MT210_SEQUENCE2_52A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT210_SEQUENCE2_52A_Type with content type SIMPLE"""
    _TypeDefinition = MT210_SEQUENCE2_52A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT210_SEQUENCE2_52A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 112, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT210_SEQUENCE2_52A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT210_SEQUENCE2_52A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='52A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 115, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 115, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT210_SEQUENCE2_52A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 116, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 116, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT210_SEQUENCE2_52A_Type = MT210_SEQUENCE2_52A_Type
Namespace.addCategoryObject('typeBinding', 'MT210_SEQUENCE2_52A_Type', MT210_SEQUENCE2_52A_Type)


# Complex type {http://www.w3schools.com}MT210_SEQUENCE2_52D_Type with content type SIMPLE
class MT210_SEQUENCE2_52D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT210_SEQUENCE2_52D_Type with content type SIMPLE"""
    _TypeDefinition = MT210_SEQUENCE2_52D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT210_SEQUENCE2_52D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 125, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT210_SEQUENCE2_52D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT210_SEQUENCE2_52D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='52D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 128, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 128, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT210_SEQUENCE2_52D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 129, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 129, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT210_SEQUENCE2_52D_Type = MT210_SEQUENCE2_52D_Type
Namespace.addCategoryObject('typeBinding', 'MT210_SEQUENCE2_52D_Type', MT210_SEQUENCE2_52D_Type)


# Complex type {http://www.w3schools.com}MT210_SEQUENCE2_56A_Type with content type SIMPLE
class MT210_SEQUENCE2_56A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT210_SEQUENCE2_56A_Type with content type SIMPLE"""
    _TypeDefinition = MT210_SEQUENCE2_56A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT210_SEQUENCE2_56A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 138, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT210_SEQUENCE2_56A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT210_SEQUENCE2_56A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='56A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 141, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 141, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT210_SEQUENCE2_56A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 142, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 142, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT210_SEQUENCE2_56A_Type = MT210_SEQUENCE2_56A_Type
Namespace.addCategoryObject('typeBinding', 'MT210_SEQUENCE2_56A_Type', MT210_SEQUENCE2_56A_Type)


# Complex type {http://www.w3schools.com}MT210_SEQUENCE2_56D_Type with content type SIMPLE
class MT210_SEQUENCE2_56D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT210_SEQUENCE2_56D_Type with content type SIMPLE"""
    _TypeDefinition = MT210_SEQUENCE2_56D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT210_SEQUENCE2_56D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 151, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT210_SEQUENCE2_56D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT210_SEQUENCE2_56D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='56D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 154, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 154, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT210_SEQUENCE2_56D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 155, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 155, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT210_SEQUENCE2_56D_Type = MT210_SEQUENCE2_56D_Type
Namespace.addCategoryObject('typeBinding', 'MT210_SEQUENCE2_56D_Type', MT210_SEQUENCE2_56D_Type)


MT210 = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MT210'), CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 185, 1))
Namespace.addCategoryObject('elementBinding', MT210.name().localName(), MT210)



MT210_SEQUENCE1._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TransactionReferenceNumber'), MT210_SEQUENCE1_20_Type, scope=MT210_SEQUENCE1, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 161, 3)))

MT210_SEQUENCE1._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AccountIdentification'), MT210_SEQUENCE1_25_Type, scope=MT210_SEQUENCE1, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 162, 3)))

MT210_SEQUENCE1._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ValueDate'), MT210_SEQUENCE1_30_Type, scope=MT210_SEQUENCE1, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 163, 3)))

def _BuildAutomaton ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton
    del _BuildAutomaton
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 162, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT210_SEQUENCE1._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TransactionReferenceNumber')), pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 161, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT210_SEQUENCE1._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AccountIdentification')), pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 162, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT210_SEQUENCE1._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ValueDate')), pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 163, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MT210_SEQUENCE1._Automaton = _BuildAutomaton()




MT210_SEQUENCE2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RelatedReference'), MT210_SEQUENCE2_21_Type, scope=MT210_SEQUENCE2, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 168, 3)))

MT210_SEQUENCE2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CurrencyCodeAmount'), MT210_SEQUENCE2_32B_Type, scope=MT210_SEQUENCE2, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 169, 3)))

MT210_SEQUENCE2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OrderingCustomer'), MT210_SEQUENCE2_50_Type, scope=MT210_SEQUENCE2, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 171, 4)))

MT210_SEQUENCE2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OrderingCustomer_C'), MT210_SEQUENCE2_50C_Type, scope=MT210_SEQUENCE2, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 172, 4)))

MT210_SEQUENCE2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OrderingCustomer_F'), MT210_SEQUENCE2_50F_Type, scope=MT210_SEQUENCE2, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 173, 4)))

MT210_SEQUENCE2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OrderingInstitution_A'), MT210_SEQUENCE2_52A_Type, scope=MT210_SEQUENCE2, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 176, 4)))

MT210_SEQUENCE2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OrderingInstitution_D'), MT210_SEQUENCE2_52D_Type, scope=MT210_SEQUENCE2, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 177, 4)))

MT210_SEQUENCE2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Intermedairy_A'), MT210_SEQUENCE2_56A_Type, scope=MT210_SEQUENCE2, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 180, 4)))

MT210_SEQUENCE2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Intermedairy_D'), MT210_SEQUENCE2_56D_Type, scope=MT210_SEQUENCE2, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 181, 4)))

def _BuildAutomaton_ ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_
    del _BuildAutomaton_
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 170, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 171, 4))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 172, 4))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 173, 4))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 175, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 176, 4))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 177, 4))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 179, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 180, 4))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 181, 4))
    counters.add(cc_9)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT210_SEQUENCE2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RelatedReference')), pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 168, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT210_SEQUENCE2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CurrencyCodeAmount')), pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 169, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(MT210_SEQUENCE2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OrderingCustomer')), pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 171, 4))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(MT210_SEQUENCE2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OrderingCustomer_C')), pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 172, 4))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(MT210_SEQUENCE2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OrderingCustomer_F')), pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 173, 4))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(MT210_SEQUENCE2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OrderingInstitution_A')), pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 176, 4))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(MT210_SEQUENCE2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OrderingInstitution_D')), pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 177, 4))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(MT210_SEQUENCE2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Intermedairy_A')), pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 180, 4))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(MT210_SEQUENCE2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Intermedairy_D')), pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 181, 4))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True),
        fac.UpdateInstruction(cc_8, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MT210_SEQUENCE2._Automaton = _BuildAutomaton_()




CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SEQUENCE1'), MT210_SEQUENCE1, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 188, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SEQUENCE2'), MT210_SEQUENCE2, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 189, 4)))

def _BuildAutomaton_2 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_2
    del _BuildAutomaton_2
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SEQUENCE1')), pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 188, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SEQUENCE2')), pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT210.xsd', 189, 4))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON._Automaton = _BuildAutomaton_2()



...

  MT292
# C:\Projects\Xsds\MT292.py
# -*- coding: utf-8 -*-
# PyXB bindings for NM:96afad3d20bbfe8d040a1a097fa388d9fecd10e3
# Generated 2020-01-27 12:03:08.284179 by PyXB version 1.2.6 using Python 3.7.4.final.0
# Namespace http://www.w3schools.com

from __future__ import unicode_literals
import pyxb
import pyxb.binding
import pyxb.binding.saxer
import io
import pyxb.utils.utility
import pyxb.utils.domutils
import sys
import pyxb.utils.six as _six
# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:e1b76a74-40ce-11ea-8798-509a4c321f2f')

# Version of PyXB used to generate the bindings
_PyXBVersion = '1.2.6'
# Generated bindings are not compatible across PyXB versions
if pyxb.__version__ != _PyXBVersion:
    raise pyxb.PyXBVersionError(_PyXBVersion)

# A holder for module-level binding classes so we can access them from
# inside class definitions where property names may conflict.
_module_typeBindings = pyxb.utils.utility.Object()

# Import bindings for namespaces imported into schema
import pyxb.binding.datatypes

# NOTE: All namespace declarations are reserved within the binding
Namespace = pyxb.namespace.NamespaceForURI('http://www.w3schools.com', create_if_missing=True)
Namespace.configureCategories(['typeBinding', 'elementBinding'])

def CreateFromDocument (xml_text, default_namespace=None, location_base=None):
    """Parse the given XML and use the document element to create a
    Python instance.

    @param xml_text An XML document.  This should be data (Python 2
    str or Python 3 bytes), or a text (Python 2 unicode or Python 3
    str) in the L{pyxb._InputEncoding} encoding.

    @keyword default_namespace The L{pyxb.Namespace} instance to use as the
    default namespace where there is no default namespace in scope.
    If unspecified or C{None}, the namespace of the module containing
    this function will be used.

    @keyword location_base: An object to be recorded as the base of all
    L{pyxb.utils.utility.Location} instances associated with events and
    objects handled by the parser.  You might pass the URI from which
    the document was obtained.
    """

    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement, default_namespace=default_namespace)
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    saxer = pyxb.binding.saxer.make_parser(fallback_namespace=default_namespace, location_base=location_base)
    handler = saxer.getContentHandler()
    xmld = xml_text
    if isinstance(xmld, _six.text_type):
        xmld = xmld.encode(pyxb._InputEncoding)
    saxer.parse(io.BytesIO(xmld))
    instance = handler.rootObject()
    return instance

def CreateFromDOM (node, default_namespace=None):
    """Create a Python instance from the given DOM node.
    The node tag must correspond to an element declaration in this module.

    @deprecated: Forcing use of DOM interface is unnecessary; use L{CreateFromDocument}."""
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return pyxb.binding.basis.element.AnyCreateFromDOM(node, default_namespace)


# Atomic simple type: {http://www.w3schools.com}MT292_20_Type_Pattern
class MT292_20_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT292_20_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT292.xsd', 3, 1)
    _Documentation = None
MT292_20_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT292_20_Type_Pattern._CF_pattern.addPattern(pattern="([^/]([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,14}[^/])")
MT292_20_Type_Pattern._InitializeFacetMap(MT292_20_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT292_20_Type_Pattern', MT292_20_Type_Pattern)
_module_typeBindings.MT292_20_Type_Pattern = MT292_20_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT292_21_Type_Pattern
class MT292_21_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT292_21_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT292.xsd', 16, 1)
    _Documentation = None
MT292_21_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT292_21_Type_Pattern._CF_pattern.addPattern(pattern="([^/]([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,14}[^/])")
MT292_21_Type_Pattern._InitializeFacetMap(MT292_21_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT292_21_Type_Pattern', MT292_21_Type_Pattern)
_module_typeBindings.MT292_21_Type_Pattern = MT292_21_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT292_11S_Type_Pattern
class MT292_11S_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT292_11S_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT292.xsd', 29, 1)
    _Documentation = None
MT292_11S_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT292_11S_Type_Pattern._CF_pattern.addPattern(pattern='([0-9]{3}(\\n)?[0-9]{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(\\n)?([0-9]{4}[0-9]{6})?)')
MT292_11S_Type_Pattern._InitializeFacetMap(MT292_11S_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT292_11S_Type_Pattern', MT292_11S_Type_Pattern)
_module_typeBindings.MT292_11S_Type_Pattern = MT292_11S_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT292_79_Type_Pattern
class MT292_79_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT292_79_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT292.xsd', 42, 1)
    _Documentation = None
MT292_79_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT292_79_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,50}\\n?){1,35})")
MT292_79_Type_Pattern._InitializeFacetMap(MT292_79_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT292_79_Type_Pattern', MT292_79_Type_Pattern)
_module_typeBindings.MT292_79_Type_Pattern = MT292_79_Type_Pattern

# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT292.xsd', 56, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}TransactionReferenceNumber uses Python identifier TransactionReferenceNumber
    __TransactionReferenceNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TransactionReferenceNumber'), 'TransactionReferenceNumber', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comTransactionReferenceNumber', False, pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT292.xsd', 58, 4), )

    
    TransactionReferenceNumber = property(__TransactionReferenceNumber.value, __TransactionReferenceNumber.set, None, None)

    
    # Element {http://www.w3schools.com}RelatedReference uses Python identifier RelatedReference
    __RelatedReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RelatedReference'), 'RelatedReference', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comRelatedReference', False, pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT292.xsd', 59, 4), )

    
    RelatedReference = property(__RelatedReference.value, __RelatedReference.set, None, None)

    
    # Element {http://www.w3schools.com}MTAndDateOfTheOriginalMessage uses Python identifier MTAndDateOfTheOriginalMessage
    __MTAndDateOfTheOriginalMessage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MTAndDateOfTheOriginalMessage'), 'MTAndDateOfTheOriginalMessage', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comMTAndDateOfTheOriginalMessage', False, pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT292.xsd', 60, 4), )

    
    MTAndDateOfTheOriginalMessage = property(__MTAndDateOfTheOriginalMessage.value, __MTAndDateOfTheOriginalMessage.set, None, None)

    
    # Element {http://www.w3schools.com}NarrativeDescriptionOfTheOriginalMessage uses Python identifier NarrativeDescriptionOfTheOriginalMessage
    __NarrativeDescriptionOfTheOriginalMessage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NarrativeDescriptionOfTheOriginalMessage'), 'NarrativeDescriptionOfTheOriginalMessage', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comNarrativeDescriptionOfTheOriginalMessage', False, pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT292.xsd', 61, 4), )

    
    NarrativeDescriptionOfTheOriginalMessage = property(__NarrativeDescriptionOfTheOriginalMessage.value, __NarrativeDescriptionOfTheOriginalMessage.set, None, None)

    _ElementMap.update({
        __TransactionReferenceNumber.name() : __TransactionReferenceNumber,
        __RelatedReference.name() : __RelatedReference,
        __MTAndDateOfTheOriginalMessage.name() : __MTAndDateOfTheOriginalMessage,
        __NarrativeDescriptionOfTheOriginalMessage.name() : __NarrativeDescriptionOfTheOriginalMessage
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON = CTD_ANON


# Complex type {http://www.w3schools.com}MT292_20_Type with content type SIMPLE
class MT292_20_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT292_20_Type with content type SIMPLE"""
    _TypeDefinition = MT292_20_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT292_20_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT292.xsd', 8, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT292_20_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT292_20_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='20')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT292.xsd', 11, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT292.xsd', 11, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT292_20_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT292.xsd', 12, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT292.xsd', 12, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT292_20_Type = MT292_20_Type
Namespace.addCategoryObject('typeBinding', 'MT292_20_Type', MT292_20_Type)


# Complex type {http://www.w3schools.com}MT292_21_Type with content type SIMPLE
class MT292_21_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT292_21_Type with content type SIMPLE"""
    _TypeDefinition = MT292_21_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT292_21_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT292.xsd', 21, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT292_21_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT292_21_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='21')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT292.xsd', 24, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT292.xsd', 24, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT292_21_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT292.xsd', 25, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT292.xsd', 25, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT292_21_Type = MT292_21_Type
Namespace.addCategoryObject('typeBinding', 'MT292_21_Type', MT292_21_Type)


# Complex type {http://www.w3schools.com}MT292_11S_Type with content type SIMPLE
class MT292_11S_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT292_11S_Type with content type SIMPLE"""
    _TypeDefinition = MT292_11S_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT292_11S_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT292.xsd', 34, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT292_11S_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT292_11S_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='11S')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT292.xsd', 37, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT292.xsd', 37, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT292_11S_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT292.xsd', 38, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT292.xsd', 38, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT292_11S_Type = MT292_11S_Type
Namespace.addCategoryObject('typeBinding', 'MT292_11S_Type', MT292_11S_Type)


# Complex type {http://www.w3schools.com}MT292_79_Type with content type SIMPLE
class MT292_79_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT292_79_Type with content type SIMPLE"""
    _TypeDefinition = MT292_79_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT292_79_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT292.xsd', 47, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT292_79_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT292_79_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='79')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT292.xsd', 50, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT292.xsd', 50, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT292_79_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT292.xsd', 51, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT292.xsd', 51, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT292_79_Type = MT292_79_Type
Namespace.addCategoryObject('typeBinding', 'MT292_79_Type', MT292_79_Type)


MT292 = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MT292'), CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT292.xsd', 55, 1))
Namespace.addCategoryObject('elementBinding', MT292.name().localName(), MT292)



CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TransactionReferenceNumber'), MT292_20_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT292.xsd', 58, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RelatedReference'), MT292_21_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT292.xsd', 59, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MTAndDateOfTheOriginalMessage'), MT292_11S_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT292.xsd', 60, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NarrativeDescriptionOfTheOriginalMessage'), MT292_79_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT292.xsd', 61, 4)))

def _BuildAutomaton ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton
    del _BuildAutomaton
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT292.xsd', 61, 4))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TransactionReferenceNumber')), pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT292.xsd', 58, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RelatedReference')), pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT292.xsd', 59, 4))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MTAndDateOfTheOriginalMessage')), pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT292.xsd', 60, 4))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NarrativeDescriptionOfTheOriginalMessage')), pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT292.xsd', 61, 4))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON._Automaton = _BuildAutomaton()



...

  MT299
# C:\Projects\Xsds\MT299.py
# -*- coding: utf-8 -*-
# PyXB bindings for NM:96afad3d20bbfe8d040a1a097fa388d9fecd10e3
# Generated 2020-01-23 15:47:30.734277 by PyXB version 1.2.6 using Python 3.7.4.final.0
# Namespace http://www.w3schools.com

from __future__ import unicode_literals
import pyxb
import pyxb.binding
import pyxb.binding.saxer
import io
import pyxb.utils.utility
import pyxb.utils.domutils
import sys
import pyxb.utils.six as _six
# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:904ee028-3dc9-11ea-ab25-509a4c321f2f')

# Version of PyXB used to generate the bindings
_PyXBVersion = '1.2.6'
# Generated bindings are not compatible across PyXB versions
if pyxb.__version__ != _PyXBVersion:
    raise pyxb.PyXBVersionError(_PyXBVersion)

# A holder for module-level binding classes so we can access them from
# inside class definitions where property names may conflict.
_module_typeBindings = pyxb.utils.utility.Object()

# Import bindings for namespaces imported into schema
import pyxb.binding.datatypes

# NOTE: All namespace declarations are reserved within the binding
Namespace = pyxb.namespace.NamespaceForURI('http://www.w3schools.com', create_if_missing=True)
Namespace.configureCategories(['typeBinding', 'elementBinding'])

def CreateFromDocument (xml_text, default_namespace=None, location_base=None):
    """Parse the given XML and use the document element to create a
    Python instance.

    @param xml_text An XML document.  This should be data (Python 2
    str or Python 3 bytes), or a text (Python 2 unicode or Python 3
    str) in the L{pyxb._InputEncoding} encoding.

    @keyword default_namespace The L{pyxb.Namespace} instance to use as the
    default namespace where there is no default namespace in scope.
    If unspecified or C{None}, the namespace of the module containing
    this function will be used.

    @keyword location_base: An object to be recorded as the base of all
    L{pyxb.utils.utility.Location} instances associated with events and
    objects handled by the parser.  You might pass the URI from which
    the document was obtained.
    """

    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement, default_namespace=default_namespace)
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    saxer = pyxb.binding.saxer.make_parser(fallback_namespace=default_namespace, location_base=location_base)
    handler = saxer.getContentHandler()
    xmld = xml_text
    if isinstance(xmld, _six.text_type):
        xmld = xmld.encode(pyxb._InputEncoding)
    saxer.parse(io.BytesIO(xmld))
    instance = handler.rootObject()
    return instance

def CreateFromDOM (node, default_namespace=None):
    """Create a Python instance from the given DOM node.
    The node tag must correspond to an element declaration in this module.

    @deprecated: Forcing use of DOM interface is unnecessary; use L{CreateFromDocument}."""
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return pyxb.binding.basis.element.AnyCreateFromDOM(node, default_namespace)


# Atomic simple type: {http://www.w3schools.com}MT299_20_Type_Pattern
class MT299_20_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT299_20_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT299.xsd', 3, 1)
    _Documentation = None
MT299_20_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT299_20_Type_Pattern._CF_pattern.addPattern(pattern="([^/]([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,14}[^/])")
MT299_20_Type_Pattern._InitializeFacetMap(MT299_20_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT299_20_Type_Pattern', MT299_20_Type_Pattern)
_module_typeBindings.MT299_20_Type_Pattern = MT299_20_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT299_21_Type_Pattern
class MT299_21_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT299_21_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT299.xsd', 16, 1)
    _Documentation = None
MT299_21_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT299_21_Type_Pattern._CF_pattern.addPattern(pattern="([^/]([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,14}[^/])")
MT299_21_Type_Pattern._InitializeFacetMap(MT299_21_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT299_21_Type_Pattern', MT299_21_Type_Pattern)
_module_typeBindings.MT299_21_Type_Pattern = MT299_21_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT299_79_Type_Pattern
class MT299_79_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT299_79_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT299.xsd', 29, 1)
    _Documentation = None
MT299_79_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT299_79_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,50}\\n?){1,35})")
MT299_79_Type_Pattern._InitializeFacetMap(MT299_79_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT299_79_Type_Pattern', MT299_79_Type_Pattern)
_module_typeBindings.MT299_79_Type_Pattern = MT299_79_Type_Pattern

# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT299.xsd', 43, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}TransactionReferenceNumber uses Python identifier TransactionReferenceNumber
    __TransactionReferenceNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TransactionReferenceNumber'), 'TransactionReferenceNumber', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comTransactionReferenceNumber', False, pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT299.xsd', 45, 4), )

    
    TransactionReferenceNumber = property(__TransactionReferenceNumber.value, __TransactionReferenceNumber.set, None, None)

    
    # Element {http://www.w3schools.com}RelatedReference uses Python identifier RelatedReference
    __RelatedReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RelatedReference'), 'RelatedReference', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comRelatedReference', False, pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT299.xsd', 46, 4), )

    
    RelatedReference = property(__RelatedReference.value, __RelatedReference.set, None, None)

    
    # Element {http://www.w3schools.com}Narrative uses Python identifier Narrative
    __Narrative = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Narrative'), 'Narrative', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comNarrative', False, pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT299.xsd', 47, 4), )

    
    Narrative = property(__Narrative.value, __Narrative.set, None, None)

    _ElementMap.update({
        __TransactionReferenceNumber.name() : __TransactionReferenceNumber,
        __RelatedReference.name() : __RelatedReference,
        __Narrative.name() : __Narrative
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON = CTD_ANON


# Complex type {http://www.w3schools.com}MT299_20_Type with content type SIMPLE
class MT299_20_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT299_20_Type with content type SIMPLE"""
    _TypeDefinition = MT299_20_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT299_20_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT299.xsd', 8, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT299_20_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT299_20_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='20')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT299.xsd', 11, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT299.xsd', 11, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT299_20_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT299.xsd', 12, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT299.xsd', 12, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT299_20_Type = MT299_20_Type
Namespace.addCategoryObject('typeBinding', 'MT299_20_Type', MT299_20_Type)


# Complex type {http://www.w3schools.com}MT299_21_Type with content type SIMPLE
class MT299_21_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT299_21_Type with content type SIMPLE"""
    _TypeDefinition = MT299_21_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT299_21_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT299.xsd', 21, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT299_21_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT299_21_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='21')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT299.xsd', 24, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT299.xsd', 24, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT299_21_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT299.xsd', 25, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT299.xsd', 25, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT299_21_Type = MT299_21_Type
Namespace.addCategoryObject('typeBinding', 'MT299_21_Type', MT299_21_Type)


# Complex type {http://www.w3schools.com}MT299_79_Type with content type SIMPLE
class MT299_79_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT299_79_Type with content type SIMPLE"""
    _TypeDefinition = MT299_79_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT299_79_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT299.xsd', 34, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT299_79_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT299_79_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='79')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT299.xsd', 37, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT299.xsd', 37, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT299_79_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT299.xsd', 38, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT299.xsd', 38, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT299_79_Type = MT299_79_Type
Namespace.addCategoryObject('typeBinding', 'MT299_79_Type', MT299_79_Type)


MT299 = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MT299'), CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT299.xsd', 42, 1))
Namespace.addCategoryObject('elementBinding', MT299.name().localName(), MT299)



CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TransactionReferenceNumber'), MT299_20_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT299.xsd', 45, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RelatedReference'), MT299_21_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT299.xsd', 46, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Narrative'), MT299_79_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT299.xsd', 47, 4)))

def _BuildAutomaton ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton
    del _BuildAutomaton
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT299.xsd', 46, 4))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TransactionReferenceNumber')), pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT299.xsd', 45, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RelatedReference')), pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT299.xsd', 46, 4))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Narrative')), pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT299.xsd', 47, 4))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON._Automaton = _BuildAutomaton()



...

  MT304
# C:\Projects\XSD\MT304.py
# -*- coding: utf-8 -*-
# PyXB bindings for NM:96afad3d20bbfe8d040a1a097fa388d9fecd10e3
# Generated 2022-09-29 12:41:50.611282 by PyXB version 1.2.6 using Python 3.9.7.final.0
# Namespace http://www.w3schools.com

from __future__ import unicode_literals
import pyxb
import pyxb.binding
import pyxb.binding.saxer
import io
import pyxb.utils.utility
import pyxb.utils.domutils
import sys
import pyxb.utils.six as _six
# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:fce6c9f0-3fc5-11ed-b626-3448ed42967c')

# Version of PyXB used to generate the bindings
_PyXBVersion = '1.2.6'
# Generated bindings are not compatible across PyXB versions
if pyxb.__version__ != _PyXBVersion:
    raise pyxb.PyXBVersionError(_PyXBVersion)

# A holder for module-level binding classes so we can access them from
# inside class definitions where property names may conflict.
_module_typeBindings = pyxb.utils.utility.Object()

# Import bindings for namespaces imported into schema
import pyxb.binding.datatypes

# NOTE: All namespace declarations are reserved within the binding
Namespace = pyxb.namespace.NamespaceForURI('http://www.w3schools.com', create_if_missing=True)
Namespace.configureCategories(['typeBinding', 'elementBinding'])

def CreateFromDocument (xml_text, default_namespace=None, location_base=None):
    """Parse the given XML and use the document element to create a
    Python instance.

    @param xml_text An XML document.  This should be data (Python 2
    str or Python 3 bytes), or a text (Python 2 unicode or Python 3
    str) in the L{pyxb._InputEncoding} encoding.

    @keyword default_namespace The L{pyxb.Namespace} instance to use as the
    default namespace where there is no default namespace in scope.
    If unspecified or C{None}, the namespace of the module containing
    this function will be used.

    @keyword location_base: An object to be recorded as the base of all
    L{pyxb.utils.utility.Location} instances associated with events and
    objects handled by the parser.  You might pass the URI from which
    the document was obtained.
    """

    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement, default_namespace=default_namespace)
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    saxer = pyxb.binding.saxer.make_parser(fallback_namespace=default_namespace, location_base=location_base)
    handler = saxer.getContentHandler()
    xmld = xml_text
    if isinstance(xmld, _six.text_type):
        xmld = xmld.encode(pyxb._InputEncoding)
    saxer.parse(io.BytesIO(xmld))
    instance = handler.rootObject()
    return instance

def CreateFromDOM (node, default_namespace=None):
    """Create a Python instance from the given DOM node.
    The node tag must correspond to an element declaration in this module.

    @deprecated: Forcing use of DOM interface is unnecessary; use L{CreateFromDocument}."""
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return pyxb.binding.basis.element.AnyCreateFromDOM(node, default_namespace)


# Atomic simple type: {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_20_Type_Pattern
class MT304_SequenceA_GeneralInformation_20_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceA_GeneralInformation_20_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 3, 1)
    _Documentation = None
MT304_SequenceA_GeneralInformation_20_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceA_GeneralInformation_20_Type_Pattern._CF_pattern.addPattern(pattern="([^/]([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,14}[^/])")
MT304_SequenceA_GeneralInformation_20_Type_Pattern._InitializeFacetMap(MT304_SequenceA_GeneralInformation_20_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceA_GeneralInformation_20_Type_Pattern', MT304_SequenceA_GeneralInformation_20_Type_Pattern)
_module_typeBindings.MT304_SequenceA_GeneralInformation_20_Type_Pattern = MT304_SequenceA_GeneralInformation_20_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_21_Type_Pattern
class MT304_SequenceA_GeneralInformation_21_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceA_GeneralInformation_21_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 16, 1)
    _Documentation = None
MT304_SequenceA_GeneralInformation_21_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceA_GeneralInformation_21_Type_Pattern._CF_pattern.addPattern(pattern="([^/]([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,14}[^/])")
MT304_SequenceA_GeneralInformation_21_Type_Pattern._InitializeFacetMap(MT304_SequenceA_GeneralInformation_21_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceA_GeneralInformation_21_Type_Pattern', MT304_SequenceA_GeneralInformation_21_Type_Pattern)
_module_typeBindings.MT304_SequenceA_GeneralInformation_21_Type_Pattern = MT304_SequenceA_GeneralInformation_21_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_22A_Type_Pattern
class MT304_SequenceA_GeneralInformation_22A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceA_GeneralInformation_22A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 29, 1)
    _Documentation = None
MT304_SequenceA_GeneralInformation_22A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceA_GeneralInformation_22A_Type_Pattern._CF_pattern.addPattern(pattern='((AMND|CAMN|CCAN|CANC|DUPL|NEWT|CNEW))')
MT304_SequenceA_GeneralInformation_22A_Type_Pattern._InitializeFacetMap(MT304_SequenceA_GeneralInformation_22A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceA_GeneralInformation_22A_Type_Pattern', MT304_SequenceA_GeneralInformation_22A_Type_Pattern)
_module_typeBindings.MT304_SequenceA_GeneralInformation_22A_Type_Pattern = MT304_SequenceA_GeneralInformation_22A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_94A_Type_Pattern
class MT304_SequenceA_GeneralInformation_94A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceA_GeneralInformation_94A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 42, 1)
    _Documentation = None
MT304_SequenceA_GeneralInformation_94A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceA_GeneralInformation_94A_Type_Pattern._CF_pattern.addPattern(pattern='((AFWD|ANDF|ASET))')
MT304_SequenceA_GeneralInformation_94A_Type_Pattern._InitializeFacetMap(MT304_SequenceA_GeneralInformation_94A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceA_GeneralInformation_94A_Type_Pattern', MT304_SequenceA_GeneralInformation_94A_Type_Pattern)
_module_typeBindings.MT304_SequenceA_GeneralInformation_94A_Type_Pattern = MT304_SequenceA_GeneralInformation_94A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_17O_Type_Pattern
class MT304_SequenceA_GeneralInformation_17O_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceA_GeneralInformation_17O_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 55, 1)
    _Documentation = None
MT304_SequenceA_GeneralInformation_17O_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceA_GeneralInformation_17O_Type_Pattern._CF_pattern.addPattern(pattern='((N|Y))')
MT304_SequenceA_GeneralInformation_17O_Type_Pattern._InitializeFacetMap(MT304_SequenceA_GeneralInformation_17O_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceA_GeneralInformation_17O_Type_Pattern', MT304_SequenceA_GeneralInformation_17O_Type_Pattern)
_module_typeBindings.MT304_SequenceA_GeneralInformation_17O_Type_Pattern = MT304_SequenceA_GeneralInformation_17O_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_17F_Type_Pattern
class MT304_SequenceA_GeneralInformation_17F_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceA_GeneralInformation_17F_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 68, 1)
    _Documentation = None
MT304_SequenceA_GeneralInformation_17F_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceA_GeneralInformation_17F_Type_Pattern._CF_pattern.addPattern(pattern='((N|Y))')
MT304_SequenceA_GeneralInformation_17F_Type_Pattern._InitializeFacetMap(MT304_SequenceA_GeneralInformation_17F_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceA_GeneralInformation_17F_Type_Pattern', MT304_SequenceA_GeneralInformation_17F_Type_Pattern)
_module_typeBindings.MT304_SequenceA_GeneralInformation_17F_Type_Pattern = MT304_SequenceA_GeneralInformation_17F_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_17N_Type_Pattern
class MT304_SequenceA_GeneralInformation_17N_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceA_GeneralInformation_17N_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 81, 1)
    _Documentation = None
MT304_SequenceA_GeneralInformation_17N_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceA_GeneralInformation_17N_Type_Pattern._CF_pattern.addPattern(pattern='((N|Y))')
MT304_SequenceA_GeneralInformation_17N_Type_Pattern._InitializeFacetMap(MT304_SequenceA_GeneralInformation_17N_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceA_GeneralInformation_17N_Type_Pattern', MT304_SequenceA_GeneralInformation_17N_Type_Pattern)
_module_typeBindings.MT304_SequenceA_GeneralInformation_17N_Type_Pattern = MT304_SequenceA_GeneralInformation_17N_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_83A_Type_Pattern
class MT304_SequenceA_GeneralInformation_83A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceA_GeneralInformation_83A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 94, 1)
    _Documentation = None
MT304_SequenceA_GeneralInformation_83A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceA_GeneralInformation_83A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT304_SequenceA_GeneralInformation_83A_Type_Pattern._InitializeFacetMap(MT304_SequenceA_GeneralInformation_83A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceA_GeneralInformation_83A_Type_Pattern', MT304_SequenceA_GeneralInformation_83A_Type_Pattern)
_module_typeBindings.MT304_SequenceA_GeneralInformation_83A_Type_Pattern = MT304_SequenceA_GeneralInformation_83A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_83J_Type_Pattern
class MT304_SequenceA_GeneralInformation_83J_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceA_GeneralInformation_83J_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 107, 1)
    _Documentation = None
MT304_SequenceA_GeneralInformation_83J_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceA_GeneralInformation_83J_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,40}\\n?){1,5})")
MT304_SequenceA_GeneralInformation_83J_Type_Pattern._InitializeFacetMap(MT304_SequenceA_GeneralInformation_83J_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceA_GeneralInformation_83J_Type_Pattern', MT304_SequenceA_GeneralInformation_83J_Type_Pattern)
_module_typeBindings.MT304_SequenceA_GeneralInformation_83J_Type_Pattern = MT304_SequenceA_GeneralInformation_83J_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_82A_Type_Pattern
class MT304_SequenceA_GeneralInformation_82A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceA_GeneralInformation_82A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 120, 1)
    _Documentation = None
MT304_SequenceA_GeneralInformation_82A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceA_GeneralInformation_82A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT304_SequenceA_GeneralInformation_82A_Type_Pattern._InitializeFacetMap(MT304_SequenceA_GeneralInformation_82A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceA_GeneralInformation_82A_Type_Pattern', MT304_SequenceA_GeneralInformation_82A_Type_Pattern)
_module_typeBindings.MT304_SequenceA_GeneralInformation_82A_Type_Pattern = MT304_SequenceA_GeneralInformation_82A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_82J_Type_Pattern
class MT304_SequenceA_GeneralInformation_82J_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceA_GeneralInformation_82J_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 133, 1)
    _Documentation = None
MT304_SequenceA_GeneralInformation_82J_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceA_GeneralInformation_82J_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,40}\\n?){1,5})")
MT304_SequenceA_GeneralInformation_82J_Type_Pattern._InitializeFacetMap(MT304_SequenceA_GeneralInformation_82J_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceA_GeneralInformation_82J_Type_Pattern', MT304_SequenceA_GeneralInformation_82J_Type_Pattern)
_module_typeBindings.MT304_SequenceA_GeneralInformation_82J_Type_Pattern = MT304_SequenceA_GeneralInformation_82J_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_87A_Type_Pattern
class MT304_SequenceA_GeneralInformation_87A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceA_GeneralInformation_87A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 146, 1)
    _Documentation = None
MT304_SequenceA_GeneralInformation_87A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceA_GeneralInformation_87A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT304_SequenceA_GeneralInformation_87A_Type_Pattern._InitializeFacetMap(MT304_SequenceA_GeneralInformation_87A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceA_GeneralInformation_87A_Type_Pattern', MT304_SequenceA_GeneralInformation_87A_Type_Pattern)
_module_typeBindings.MT304_SequenceA_GeneralInformation_87A_Type_Pattern = MT304_SequenceA_GeneralInformation_87A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_87J_Type_Pattern
class MT304_SequenceA_GeneralInformation_87J_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceA_GeneralInformation_87J_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 159, 1)
    _Documentation = None
MT304_SequenceA_GeneralInformation_87J_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceA_GeneralInformation_87J_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,40}\\n?){1,5})")
MT304_SequenceA_GeneralInformation_87J_Type_Pattern._InitializeFacetMap(MT304_SequenceA_GeneralInformation_87J_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceA_GeneralInformation_87J_Type_Pattern', MT304_SequenceA_GeneralInformation_87J_Type_Pattern)
_module_typeBindings.MT304_SequenceA_GeneralInformation_87J_Type_Pattern = MT304_SequenceA_GeneralInformation_87J_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_81A_Type_Pattern
class MT304_SequenceA_GeneralInformation_81A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceA_GeneralInformation_81A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 172, 1)
    _Documentation = None
MT304_SequenceA_GeneralInformation_81A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceA_GeneralInformation_81A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT304_SequenceA_GeneralInformation_81A_Type_Pattern._InitializeFacetMap(MT304_SequenceA_GeneralInformation_81A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceA_GeneralInformation_81A_Type_Pattern', MT304_SequenceA_GeneralInformation_81A_Type_Pattern)
_module_typeBindings.MT304_SequenceA_GeneralInformation_81A_Type_Pattern = MT304_SequenceA_GeneralInformation_81A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_81D_Type_Pattern
class MT304_SequenceA_GeneralInformation_81D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceA_GeneralInformation_81D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 185, 1)
    _Documentation = None
MT304_SequenceA_GeneralInformation_81D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceA_GeneralInformation_81D_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT304_SequenceA_GeneralInformation_81D_Type_Pattern._InitializeFacetMap(MT304_SequenceA_GeneralInformation_81D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceA_GeneralInformation_81D_Type_Pattern', MT304_SequenceA_GeneralInformation_81D_Type_Pattern)
_module_typeBindings.MT304_SequenceA_GeneralInformation_81D_Type_Pattern = MT304_SequenceA_GeneralInformation_81D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_81J_Type_Pattern
class MT304_SequenceA_GeneralInformation_81J_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceA_GeneralInformation_81J_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 198, 1)
    _Documentation = None
MT304_SequenceA_GeneralInformation_81J_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceA_GeneralInformation_81J_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,40}\\n?){1,5})")
MT304_SequenceA_GeneralInformation_81J_Type_Pattern._InitializeFacetMap(MT304_SequenceA_GeneralInformation_81J_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceA_GeneralInformation_81J_Type_Pattern', MT304_SequenceA_GeneralInformation_81J_Type_Pattern)
_module_typeBindings.MT304_SequenceA_GeneralInformation_81J_Type_Pattern = MT304_SequenceA_GeneralInformation_81J_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_89A_Type_Pattern
class MT304_SequenceA_GeneralInformation_89A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceA_GeneralInformation_89A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 211, 1)
    _Documentation = None
MT304_SequenceA_GeneralInformation_89A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceA_GeneralInformation_89A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT304_SequenceA_GeneralInformation_89A_Type_Pattern._InitializeFacetMap(MT304_SequenceA_GeneralInformation_89A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceA_GeneralInformation_89A_Type_Pattern', MT304_SequenceA_GeneralInformation_89A_Type_Pattern)
_module_typeBindings.MT304_SequenceA_GeneralInformation_89A_Type_Pattern = MT304_SequenceA_GeneralInformation_89A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_89D_Type_Pattern
class MT304_SequenceA_GeneralInformation_89D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceA_GeneralInformation_89D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 224, 1)
    _Documentation = None
MT304_SequenceA_GeneralInformation_89D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceA_GeneralInformation_89D_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT304_SequenceA_GeneralInformation_89D_Type_Pattern._InitializeFacetMap(MT304_SequenceA_GeneralInformation_89D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceA_GeneralInformation_89D_Type_Pattern', MT304_SequenceA_GeneralInformation_89D_Type_Pattern)
_module_typeBindings.MT304_SequenceA_GeneralInformation_89D_Type_Pattern = MT304_SequenceA_GeneralInformation_89D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_89J_Type_Pattern
class MT304_SequenceA_GeneralInformation_89J_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceA_GeneralInformation_89J_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 237, 1)
    _Documentation = None
MT304_SequenceA_GeneralInformation_89J_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceA_GeneralInformation_89J_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,40}\\n?){1,5})")
MT304_SequenceA_GeneralInformation_89J_Type_Pattern._InitializeFacetMap(MT304_SequenceA_GeneralInformation_89J_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceA_GeneralInformation_89J_Type_Pattern', MT304_SequenceA_GeneralInformation_89J_Type_Pattern)
_module_typeBindings.MT304_SequenceA_GeneralInformation_89J_Type_Pattern = MT304_SequenceA_GeneralInformation_89J_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_17I_Type_Pattern
class MT304_SequenceA_GeneralInformation_17I_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceA_GeneralInformation_17I_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 250, 1)
    _Documentation = None
MT304_SequenceA_GeneralInformation_17I_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceA_GeneralInformation_17I_Type_Pattern._CF_pattern.addPattern(pattern='(N|[0-9])')
MT304_SequenceA_GeneralInformation_17I_Type_Pattern._InitializeFacetMap(MT304_SequenceA_GeneralInformation_17I_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceA_GeneralInformation_17I_Type_Pattern', MT304_SequenceA_GeneralInformation_17I_Type_Pattern)
_module_typeBindings.MT304_SequenceA_GeneralInformation_17I_Type_Pattern = MT304_SequenceA_GeneralInformation_17I_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_77H_Type_Pattern
class MT304_SequenceA_GeneralInformation_77H_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceA_GeneralInformation_77H_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 263, 1)
    _Documentation = None
MT304_SequenceA_GeneralInformation_77H_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceA_GeneralInformation_77H_Type_Pattern._CF_pattern.addPattern(pattern='((AFB|DERV|FBF|FEOMA|ICOM|IFEMA|ISDA|ISDACN|ISDACS|OTHER)(/[0-9]{4}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01]))?(//[0-9]{4})?)')
MT304_SequenceA_GeneralInformation_77H_Type_Pattern._InitializeFacetMap(MT304_SequenceA_GeneralInformation_77H_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceA_GeneralInformation_77H_Type_Pattern', MT304_SequenceA_GeneralInformation_77H_Type_Pattern)
_module_typeBindings.MT304_SequenceA_GeneralInformation_77H_Type_Pattern = MT304_SequenceA_GeneralInformation_77H_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_14C_Type_Pattern
class MT304_SequenceA_GeneralInformation_14C_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceA_GeneralInformation_14C_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 276, 1)
    _Documentation = None
MT304_SequenceA_GeneralInformation_14C_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceA_GeneralInformation_14C_Type_Pattern._CF_pattern.addPattern(pattern='([0-9]{4})')
MT304_SequenceA_GeneralInformation_14C_Type_Pattern._InitializeFacetMap(MT304_SequenceA_GeneralInformation_14C_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceA_GeneralInformation_14C_Type_Pattern', MT304_SequenceA_GeneralInformation_14C_Type_Pattern)
_module_typeBindings.MT304_SequenceA_GeneralInformation_14C_Type_Pattern = MT304_SequenceA_GeneralInformation_14C_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_32E_Type_Pattern
class MT304_SequenceA_GeneralInformation_32E_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceA_GeneralInformation_32E_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 289, 1)
    _Documentation = None
MT304_SequenceA_GeneralInformation_32E_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceA_GeneralInformation_32E_Type_Pattern._CF_pattern.addPattern(pattern='((AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD))')
MT304_SequenceA_GeneralInformation_32E_Type_Pattern._InitializeFacetMap(MT304_SequenceA_GeneralInformation_32E_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceA_GeneralInformation_32E_Type_Pattern', MT304_SequenceA_GeneralInformation_32E_Type_Pattern)
_module_typeBindings.MT304_SequenceA_GeneralInformation_32E_Type_Pattern = MT304_SequenceA_GeneralInformation_32E_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_30U_Type_Pattern
class MT304_SequenceA_GeneralInformation_30U_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceA_GeneralInformation_30U_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 302, 1)
    _Documentation = None
MT304_SequenceA_GeneralInformation_30U_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceA_GeneralInformation_30U_Type_Pattern._CF_pattern.addPattern(pattern='([0-9]{4}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01]))')
MT304_SequenceA_GeneralInformation_30U_Type_Pattern._InitializeFacetMap(MT304_SequenceA_GeneralInformation_30U_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceA_GeneralInformation_30U_Type_Pattern', MT304_SequenceA_GeneralInformation_30U_Type_Pattern)
_module_typeBindings.MT304_SequenceA_GeneralInformation_30U_Type_Pattern = MT304_SequenceA_GeneralInformation_30U_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_14S_Type_Pattern
class MT304_SequenceA_GeneralInformation_14S_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceA_GeneralInformation_14S_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 315, 1)
    _Documentation = None
MT304_SequenceA_GeneralInformation_14S_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceA_GeneralInformation_14S_Type_Pattern._CF_pattern.addPattern(pattern='([A-Z]{3}[0-9]{1,2}(/(0[0-9]|[1][0-9]|2[0-3])([0-5][0-9])/[A-Z0-9]{4})?)')
MT304_SequenceA_GeneralInformation_14S_Type_Pattern._InitializeFacetMap(MT304_SequenceA_GeneralInformation_14S_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceA_GeneralInformation_14S_Type_Pattern', MT304_SequenceA_GeneralInformation_14S_Type_Pattern)
_module_typeBindings.MT304_SequenceA_GeneralInformation_14S_Type_Pattern = MT304_SequenceA_GeneralInformation_14S_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_26K_Type_Pattern
class MT304_SequenceA_GeneralInformation_26K_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceA_GeneralInformation_26K_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 328, 1)
    _Documentation = None
MT304_SequenceA_GeneralInformation_26K_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceA_GeneralInformation_26K_Type_Pattern._CF_pattern.addPattern(pattern='((ISDA|JOIN|PTYA|PTYB))')
MT304_SequenceA_GeneralInformation_26K_Type_Pattern._InitializeFacetMap(MT304_SequenceA_GeneralInformation_26K_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceA_GeneralInformation_26K_Type_Pattern', MT304_SequenceA_GeneralInformation_26K_Type_Pattern)
_module_typeBindings.MT304_SequenceA_GeneralInformation_26K_Type_Pattern = MT304_SequenceA_GeneralInformation_26K_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_21A_Type_Pattern
class MT304_SequenceA_GeneralInformation_21A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceA_GeneralInformation_21A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 341, 1)
    _Documentation = None
MT304_SequenceA_GeneralInformation_21A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceA_GeneralInformation_21A_Type_Pattern._CF_pattern.addPattern(pattern="([^/]([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,16}[^/])")
MT304_SequenceA_GeneralInformation_21A_Type_Pattern._InitializeFacetMap(MT304_SequenceA_GeneralInformation_21A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceA_GeneralInformation_21A_Type_Pattern', MT304_SequenceA_GeneralInformation_21A_Type_Pattern)
_module_typeBindings.MT304_SequenceA_GeneralInformation_21A_Type_Pattern = MT304_SequenceA_GeneralInformation_21A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_14E_Type_Pattern
class MT304_SequenceA_GeneralInformation_14E_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceA_GeneralInformation_14E_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 354, 1)
    _Documentation = None
MT304_SequenceA_GeneralInformation_14E_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceA_GeneralInformation_14E_Type_Pattern._CF_pattern.addPattern(pattern="(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35})")
MT304_SequenceA_GeneralInformation_14E_Type_Pattern._InitializeFacetMap(MT304_SequenceA_GeneralInformation_14E_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceA_GeneralInformation_14E_Type_Pattern', MT304_SequenceA_GeneralInformation_14E_Type_Pattern)
_module_typeBindings.MT304_SequenceA_GeneralInformation_14E_Type_Pattern = MT304_SequenceA_GeneralInformation_14E_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_30T_Type_Pattern
class MT304_SequenceB_ForexTransactionDetails_30T_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceB_ForexTransactionDetails_30T_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 367, 1)
    _Documentation = None
MT304_SequenceB_ForexTransactionDetails_30T_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceB_ForexTransactionDetails_30T_Type_Pattern._CF_pattern.addPattern(pattern='([0-9]{4}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01]))')
MT304_SequenceB_ForexTransactionDetails_30T_Type_Pattern._InitializeFacetMap(MT304_SequenceB_ForexTransactionDetails_30T_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceB_ForexTransactionDetails_30T_Type_Pattern', MT304_SequenceB_ForexTransactionDetails_30T_Type_Pattern)
_module_typeBindings.MT304_SequenceB_ForexTransactionDetails_30T_Type_Pattern = MT304_SequenceB_ForexTransactionDetails_30T_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_30V_Type_Pattern
class MT304_SequenceB_ForexTransactionDetails_30V_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceB_ForexTransactionDetails_30V_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 380, 1)
    _Documentation = None
MT304_SequenceB_ForexTransactionDetails_30V_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceB_ForexTransactionDetails_30V_Type_Pattern._CF_pattern.addPattern(pattern='([0-9]{4}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01]))')
MT304_SequenceB_ForexTransactionDetails_30V_Type_Pattern._InitializeFacetMap(MT304_SequenceB_ForexTransactionDetails_30V_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceB_ForexTransactionDetails_30V_Type_Pattern', MT304_SequenceB_ForexTransactionDetails_30V_Type_Pattern)
_module_typeBindings.MT304_SequenceB_ForexTransactionDetails_30V_Type_Pattern = MT304_SequenceB_ForexTransactionDetails_30V_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_36_Type_Pattern
class MT304_SequenceB_ForexTransactionDetails_36_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceB_ForexTransactionDetails_36_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 393, 1)
    _Documentation = None
MT304_SequenceB_ForexTransactionDetails_36_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceB_ForexTransactionDetails_36_Type_Pattern._CF_pattern.addPattern(pattern='([0-9,(?0-9)]{1,12})')
MT304_SequenceB_ForexTransactionDetails_36_Type_Pattern._InitializeFacetMap(MT304_SequenceB_ForexTransactionDetails_36_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceB_ForexTransactionDetails_36_Type_Pattern', MT304_SequenceB_ForexTransactionDetails_36_Type_Pattern)
_module_typeBindings.MT304_SequenceB_ForexTransactionDetails_36_Type_Pattern = MT304_SequenceB_ForexTransactionDetails_36_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_39M_Type_Pattern
class MT304_SequenceB_ForexTransactionDetails_39M_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceB_ForexTransactionDetails_39M_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 406, 1)
    _Documentation = None
MT304_SequenceB_ForexTransactionDetails_39M_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceB_ForexTransactionDetails_39M_Type_Pattern._CF_pattern.addPattern(pattern='([A-Z]{2})')
MT304_SequenceB_ForexTransactionDetails_39M_Type_Pattern._InitializeFacetMap(MT304_SequenceB_ForexTransactionDetails_39M_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceB_ForexTransactionDetails_39M_Type_Pattern', MT304_SequenceB_ForexTransactionDetails_39M_Type_Pattern)
_module_typeBindings.MT304_SequenceB_ForexTransactionDetails_39M_Type_Pattern = MT304_SequenceB_ForexTransactionDetails_39M_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_35C_Type_Pattern
class MT304_SequenceB_ForexTransactionDetails_35C_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceB_ForexTransactionDetails_35C_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 419, 1)
    _Documentation = None
MT304_SequenceB_ForexTransactionDetails_35C_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceB_ForexTransactionDetails_35C_Type_Pattern._CF_pattern.addPattern(pattern="(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,8}(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,30})?)")
MT304_SequenceB_ForexTransactionDetails_35C_Type_Pattern._InitializeFacetMap(MT304_SequenceB_ForexTransactionDetails_35C_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceB_ForexTransactionDetails_35C_Type_Pattern', MT304_SequenceB_ForexTransactionDetails_35C_Type_Pattern)
_module_typeBindings.MT304_SequenceB_ForexTransactionDetails_35C_Type_Pattern = MT304_SequenceB_ForexTransactionDetails_35C_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_32B_Type_Pattern
class MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_32B_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_32B_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 432, 1)
    _Documentation = None
MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_32B_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_32B_Type_Pattern._CF_pattern.addPattern(pattern='((AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})')
MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_32B_Type_Pattern._InitializeFacetMap(MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_32B_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_32B_Type_Pattern', MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_32B_Type_Pattern)
_module_typeBindings.MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_32B_Type_Pattern = MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_32B_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_53A_Type_Pattern
class MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_53A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_53A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 445, 1)
    _Documentation = None
MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_53A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_53A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_53A_Type_Pattern._InitializeFacetMap(MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_53A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_53A_Type_Pattern', MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_53A_Type_Pattern)
_module_typeBindings.MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_53A_Type_Pattern = MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_53A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_53J_Type_Pattern
class MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_53J_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_53J_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 458, 1)
    _Documentation = None
MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_53J_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_53J_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,40}\\n?){1,5})")
MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_53J_Type_Pattern._InitializeFacetMap(MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_53J_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_53J_Type_Pattern', MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_53J_Type_Pattern)
_module_typeBindings.MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_53J_Type_Pattern = MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_53J_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_56A_Type_Pattern
class MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_56A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_56A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 471, 1)
    _Documentation = None
MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_56A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_56A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_56A_Type_Pattern._InitializeFacetMap(MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_56A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_56A_Type_Pattern', MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_56A_Type_Pattern)
_module_typeBindings.MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_56A_Type_Pattern = MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_56A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_56J_Type_Pattern
class MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_56J_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_56J_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 484, 1)
    _Documentation = None
MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_56J_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_56J_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,40}\\n?){1,5})")
MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_56J_Type_Pattern._InitializeFacetMap(MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_56J_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_56J_Type_Pattern', MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_56J_Type_Pattern)
_module_typeBindings.MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_56J_Type_Pattern = MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_56J_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_57A_Type_Pattern
class MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_57A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_57A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 497, 1)
    _Documentation = None
MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_57A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_57A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_57A_Type_Pattern._InitializeFacetMap(MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_57A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_57A_Type_Pattern', MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_57A_Type_Pattern)
_module_typeBindings.MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_57A_Type_Pattern = MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_57A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_57J_Type_Pattern
class MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_57J_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_57J_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 510, 1)
    _Documentation = None
MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_57J_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_57J_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,40}\\n?){1,5})")
MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_57J_Type_Pattern._InitializeFacetMap(MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_57J_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_57J_Type_Pattern', MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_57J_Type_Pattern)
_module_typeBindings.MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_57J_Type_Pattern = MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_57J_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_33B_Type_Pattern
class MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_33B_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_33B_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 523, 1)
    _Documentation = None
MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_33B_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_33B_Type_Pattern._CF_pattern.addPattern(pattern='((AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})')
MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_33B_Type_Pattern._InitializeFacetMap(MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_33B_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_33B_Type_Pattern', MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_33B_Type_Pattern)
_module_typeBindings.MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_33B_Type_Pattern = MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_33B_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_53A_Type_Pattern
class MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_53A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_53A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 536, 1)
    _Documentation = None
MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_53A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_53A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_53A_Type_Pattern._InitializeFacetMap(MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_53A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_53A_Type_Pattern', MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_53A_Type_Pattern)
_module_typeBindings.MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_53A_Type_Pattern = MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_53A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_53J_Type_Pattern
class MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_53J_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_53J_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 549, 1)
    _Documentation = None
MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_53J_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_53J_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,40}\\n?){1,5})")
MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_53J_Type_Pattern._InitializeFacetMap(MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_53J_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_53J_Type_Pattern', MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_53J_Type_Pattern)
_module_typeBindings.MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_53J_Type_Pattern = MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_53J_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_56A_Type_Pattern
class MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_56A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_56A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 562, 1)
    _Documentation = None
MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_56A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_56A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_56A_Type_Pattern._InitializeFacetMap(MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_56A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_56A_Type_Pattern', MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_56A_Type_Pattern)
_module_typeBindings.MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_56A_Type_Pattern = MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_56A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_56J_Type_Pattern
class MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_56J_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_56J_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 575, 1)
    _Documentation = None
MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_56J_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_56J_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,40}\\n?){1,5})")
MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_56J_Type_Pattern._InitializeFacetMap(MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_56J_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_56J_Type_Pattern', MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_56J_Type_Pattern)
_module_typeBindings.MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_56J_Type_Pattern = MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_56J_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_57A_Type_Pattern
class MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_57A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_57A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 588, 1)
    _Documentation = None
MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_57A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_57A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_57A_Type_Pattern._InitializeFacetMap(MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_57A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_57A_Type_Pattern', MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_57A_Type_Pattern)
_module_typeBindings.MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_57A_Type_Pattern = MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_57A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_57J_Type_Pattern
class MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_57J_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_57J_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 601, 1)
    _Documentation = None
MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_57J_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_57J_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,40}\\n?){1,5})")
MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_57J_Type_Pattern._InitializeFacetMap(MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_57J_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_57J_Type_Pattern', MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_57J_Type_Pattern)
_module_typeBindings.MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_57J_Type_Pattern = MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_57J_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_58A_Type_Pattern
class MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_58A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_58A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 614, 1)
    _Documentation = None
MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_58A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_58A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_58A_Type_Pattern._InitializeFacetMap(MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_58A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_58A_Type_Pattern', MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_58A_Type_Pattern)
_module_typeBindings.MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_58A_Type_Pattern = MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_58A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_58J_Type_Pattern
class MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_58J_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_58J_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 627, 1)
    _Documentation = None
MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_58J_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_58J_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,40}\\n?){1,5})")
MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_58J_Type_Pattern._InitializeFacetMap(MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_58J_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_58J_Type_Pattern', MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_58J_Type_Pattern)
_module_typeBindings.MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_58J_Type_Pattern = MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_58J_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceC_OptionalGeneralInformation_21A_Type_Pattern
class MT304_SequenceC_OptionalGeneralInformation_21A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceC_OptionalGeneralInformation_21A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 640, 1)
    _Documentation = None
MT304_SequenceC_OptionalGeneralInformation_21A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceC_OptionalGeneralInformation_21A_Type_Pattern._CF_pattern.addPattern(pattern="([^/]([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,16}[^/])")
MT304_SequenceC_OptionalGeneralInformation_21A_Type_Pattern._InitializeFacetMap(MT304_SequenceC_OptionalGeneralInformation_21A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceC_OptionalGeneralInformation_21A_Type_Pattern', MT304_SequenceC_OptionalGeneralInformation_21A_Type_Pattern)
_module_typeBindings.MT304_SequenceC_OptionalGeneralInformation_21A_Type_Pattern = MT304_SequenceC_OptionalGeneralInformation_21A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceC_OptionalGeneralInformation_21G_Type_Pattern
class MT304_SequenceC_OptionalGeneralInformation_21G_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceC_OptionalGeneralInformation_21G_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 653, 1)
    _Documentation = None
MT304_SequenceC_OptionalGeneralInformation_21G_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceC_OptionalGeneralInformation_21G_Type_Pattern._CF_pattern.addPattern(pattern="([^/]([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,16}[^/])")
MT304_SequenceC_OptionalGeneralInformation_21G_Type_Pattern._InitializeFacetMap(MT304_SequenceC_OptionalGeneralInformation_21G_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceC_OptionalGeneralInformation_21G_Type_Pattern', MT304_SequenceC_OptionalGeneralInformation_21G_Type_Pattern)
_module_typeBindings.MT304_SequenceC_OptionalGeneralInformation_21G_Type_Pattern = MT304_SequenceC_OptionalGeneralInformation_21G_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22L_Type_Pattern
class MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22L_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22L_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 666, 1)
    _Documentation = None
MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22L_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22L_Type_Pattern._CF_pattern.addPattern(pattern="(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35})")
MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22L_Type_Pattern._InitializeFacetMap(MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22L_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22L_Type_Pattern', MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22L_Type_Pattern)
_module_typeBindings.MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22L_Type_Pattern = MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22L_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22M_Type_Pattern
class MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22M_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22M_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 679, 1)
    _Documentation = None
MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22M_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22M_Type_Pattern._CF_pattern.addPattern(pattern="(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,30})")
MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22M_Type_Pattern._InitializeFacetMap(MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22M_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22M_Type_Pattern', MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22M_Type_Pattern)
_module_typeBindings.MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22M_Type_Pattern = MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22M_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22N_Type_Pattern
class MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22N_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22N_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 692, 1)
    _Documentation = None
MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22N_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22N_Type_Pattern._CF_pattern.addPattern(pattern="(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,32})")
MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22N_Type_Pattern._InitializeFacetMap(MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22N_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22N_Type_Pattern', MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22N_Type_Pattern)
_module_typeBindings.MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22N_Type_Pattern = MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22N_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier_22P_Type_Pattern
class MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier_22P_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier_22P_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 705, 1)
    _Documentation = None
MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier_22P_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier_22P_Type_Pattern._CF_pattern.addPattern(pattern="(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,30})")
MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier_22P_Type_Pattern._InitializeFacetMap(MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier_22P_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier_22P_Type_Pattern', MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier_22P_Type_Pattern)
_module_typeBindings.MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier_22P_Type_Pattern = MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier_22P_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier_22R_Type_Pattern
class MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier_22R_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier_22R_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 718, 1)
    _Documentation = None
MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier_22R_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier_22R_Type_Pattern._CF_pattern.addPattern(pattern="(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,32})")
MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier_22R_Type_Pattern._InitializeFacetMap(MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier_22R_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier_22R_Type_Pattern', MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier_22R_Type_Pattern)
_module_typeBindings.MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier_22R_Type_Pattern = MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier_22R_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceC_OptionalGeneralInformation_22U_Type_Pattern
class MT304_SequenceC_OptionalGeneralInformation_22U_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceC_OptionalGeneralInformation_22U_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 731, 1)
    _Documentation = None
MT304_SequenceC_OptionalGeneralInformation_22U_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceC_OptionalGeneralInformation_22U_Type_Pattern._CF_pattern.addPattern(pattern='([A-Z]{1,6})')
MT304_SequenceC_OptionalGeneralInformation_22U_Type_Pattern._InitializeFacetMap(MT304_SequenceC_OptionalGeneralInformation_22U_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceC_OptionalGeneralInformation_22U_Type_Pattern', MT304_SequenceC_OptionalGeneralInformation_22U_Type_Pattern)
_module_typeBindings.MT304_SequenceC_OptionalGeneralInformation_22U_Type_Pattern = MT304_SequenceC_OptionalGeneralInformation_22U_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceC_OptionalGeneralInformation_35B_Type_Pattern
class MT304_SequenceC_OptionalGeneralInformation_35B_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceC_OptionalGeneralInformation_35B_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 744, 1)
    _Documentation = None
MT304_SequenceC_OptionalGeneralInformation_35B_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceC_OptionalGeneralInformation_35B_Type_Pattern._CF_pattern.addPattern(pattern="((ISIN {1}[A-Z0-9]{12})?(\\n)?((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})?)")
MT304_SequenceC_OptionalGeneralInformation_35B_Type_Pattern._InitializeFacetMap(MT304_SequenceC_OptionalGeneralInformation_35B_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceC_OptionalGeneralInformation_35B_Type_Pattern', MT304_SequenceC_OptionalGeneralInformation_35B_Type_Pattern)
_module_typeBindings.MT304_SequenceC_OptionalGeneralInformation_35B_Type_Pattern = MT304_SequenceC_OptionalGeneralInformation_35B_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceC_OptionalGeneralInformation_22V_Type_Pattern
class MT304_SequenceC_OptionalGeneralInformation_22V_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceC_OptionalGeneralInformation_22V_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 757, 1)
    _Documentation = None
MT304_SequenceC_OptionalGeneralInformation_22V_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceC_OptionalGeneralInformation_22V_Type_Pattern._CF_pattern.addPattern(pattern="(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35})")
MT304_SequenceC_OptionalGeneralInformation_22V_Type_Pattern._InitializeFacetMap(MT304_SequenceC_OptionalGeneralInformation_22V_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceC_OptionalGeneralInformation_22V_Type_Pattern', MT304_SequenceC_OptionalGeneralInformation_22V_Type_Pattern)
_module_typeBindings.MT304_SequenceC_OptionalGeneralInformation_22V_Type_Pattern = MT304_SequenceC_OptionalGeneralInformation_22V_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceC_OptionalGeneralInformation_98D_Type_Pattern
class MT304_SequenceC_OptionalGeneralInformation_98D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceC_OptionalGeneralInformation_98D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 770, 1)
    _Documentation = None
MT304_SequenceC_OptionalGeneralInformation_98D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceC_OptionalGeneralInformation_98D_Type_Pattern._CF_pattern.addPattern(pattern='([0-9]{4}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(0[0-9]|[1][0-9]|2[0-3])([0-5][0-9])([0-5][0-9])(,[0-9]{1,3})?(/(N)?(0[0-9]|[1][0-9]|2[0-3])(([0-5][0-9]))?)?)')
MT304_SequenceC_OptionalGeneralInformation_98D_Type_Pattern._InitializeFacetMap(MT304_SequenceC_OptionalGeneralInformation_98D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceC_OptionalGeneralInformation_98D_Type_Pattern', MT304_SequenceC_OptionalGeneralInformation_98D_Type_Pattern)
_module_typeBindings.MT304_SequenceC_OptionalGeneralInformation_98D_Type_Pattern = MT304_SequenceC_OptionalGeneralInformation_98D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceC_OptionalGeneralInformation_98G_Type_Pattern
class MT304_SequenceC_OptionalGeneralInformation_98G_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceC_OptionalGeneralInformation_98G_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 783, 1)
    _Documentation = None
MT304_SequenceC_OptionalGeneralInformation_98G_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceC_OptionalGeneralInformation_98G_Type_Pattern._CF_pattern.addPattern(pattern='([0-9]{4}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(0[0-9]|[1][0-9]|2[0-3])([0-5][0-9])([0-5][0-9])(,[0-9]{1,3})?(/(N)?(0[0-9]|[1][0-9]|2[0-3])(([0-5][0-9]))?)?)')
MT304_SequenceC_OptionalGeneralInformation_98G_Type_Pattern._InitializeFacetMap(MT304_SequenceC_OptionalGeneralInformation_98G_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceC_OptionalGeneralInformation_98G_Type_Pattern', MT304_SequenceC_OptionalGeneralInformation_98G_Type_Pattern)
_module_typeBindings.MT304_SequenceC_OptionalGeneralInformation_98G_Type_Pattern = MT304_SequenceC_OptionalGeneralInformation_98G_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceC_OptionalGeneralInformation_29A_Type_Pattern
class MT304_SequenceC_OptionalGeneralInformation_29A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceC_OptionalGeneralInformation_29A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 796, 1)
    _Documentation = None
MT304_SequenceC_OptionalGeneralInformation_29A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceC_OptionalGeneralInformation_29A_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT304_SequenceC_OptionalGeneralInformation_29A_Type_Pattern._InitializeFacetMap(MT304_SequenceC_OptionalGeneralInformation_29A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceC_OptionalGeneralInformation_29A_Type_Pattern', MT304_SequenceC_OptionalGeneralInformation_29A_Type_Pattern)
_module_typeBindings.MT304_SequenceC_OptionalGeneralInformation_29A_Type_Pattern = MT304_SequenceC_OptionalGeneralInformation_29A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceC_OptionalGeneralInformation_34C_Type_Pattern
class MT304_SequenceC_OptionalGeneralInformation_34C_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceC_OptionalGeneralInformation_34C_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 809, 1)
    _Documentation = None
MT304_SequenceC_OptionalGeneralInformation_34C_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceC_OptionalGeneralInformation_34C_Type_Pattern._CF_pattern.addPattern(pattern='([A-Z0-9]{4}/(N)?(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})')
MT304_SequenceC_OptionalGeneralInformation_34C_Type_Pattern._InitializeFacetMap(MT304_SequenceC_OptionalGeneralInformation_34C_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceC_OptionalGeneralInformation_34C_Type_Pattern', MT304_SequenceC_OptionalGeneralInformation_34C_Type_Pattern)
_module_typeBindings.MT304_SequenceC_OptionalGeneralInformation_34C_Type_Pattern = MT304_SequenceC_OptionalGeneralInformation_34C_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceD_AccountingInformation_21P_Type_Pattern
class MT304_SequenceD_AccountingInformation_21P_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceD_AccountingInformation_21P_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 830, 1)
    _Documentation = None
MT304_SequenceD_AccountingInformation_21P_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceD_AccountingInformation_21P_Type_Pattern._CF_pattern.addPattern(pattern="([^/]([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,16}[^/])")
MT304_SequenceD_AccountingInformation_21P_Type_Pattern._InitializeFacetMap(MT304_SequenceD_AccountingInformation_21P_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceD_AccountingInformation_21P_Type_Pattern', MT304_SequenceD_AccountingInformation_21P_Type_Pattern)
_module_typeBindings.MT304_SequenceD_AccountingInformation_21P_Type_Pattern = MT304_SequenceD_AccountingInformation_21P_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceD_AccountingInformation_17G_Type_Pattern
class MT304_SequenceD_AccountingInformation_17G_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceD_AccountingInformation_17G_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 843, 1)
    _Documentation = None
MT304_SequenceD_AccountingInformation_17G_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceD_AccountingInformation_17G_Type_Pattern._CF_pattern.addPattern(pattern='((N|Y))')
MT304_SequenceD_AccountingInformation_17G_Type_Pattern._InitializeFacetMap(MT304_SequenceD_AccountingInformation_17G_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceD_AccountingInformation_17G_Type_Pattern', MT304_SequenceD_AccountingInformation_17G_Type_Pattern)
_module_typeBindings.MT304_SequenceD_AccountingInformation_17G_Type_Pattern = MT304_SequenceD_AccountingInformation_17G_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceD_AccountingInformation_32G_Type_Pattern
class MT304_SequenceD_AccountingInformation_32G_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceD_AccountingInformation_32G_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 856, 1)
    _Documentation = None
MT304_SequenceD_AccountingInformation_32G_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceD_AccountingInformation_32G_Type_Pattern._CF_pattern.addPattern(pattern='((AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})')
MT304_SequenceD_AccountingInformation_32G_Type_Pattern._InitializeFacetMap(MT304_SequenceD_AccountingInformation_32G_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceD_AccountingInformation_32G_Type_Pattern', MT304_SequenceD_AccountingInformation_32G_Type_Pattern)
_module_typeBindings.MT304_SequenceD_AccountingInformation_32G_Type_Pattern = MT304_SequenceD_AccountingInformation_32G_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceD_AccountingInformation_34B_Type_Pattern
class MT304_SequenceD_AccountingInformation_34B_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceD_AccountingInformation_34B_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 869, 1)
    _Documentation = None
MT304_SequenceD_AccountingInformation_34B_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceD_AccountingInformation_34B_Type_Pattern._CF_pattern.addPattern(pattern='((AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})')
MT304_SequenceD_AccountingInformation_34B_Type_Pattern._InitializeFacetMap(MT304_SequenceD_AccountingInformation_34B_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceD_AccountingInformation_34B_Type_Pattern', MT304_SequenceD_AccountingInformation_34B_Type_Pattern)
_module_typeBindings.MT304_SequenceD_AccountingInformation_34B_Type_Pattern = MT304_SequenceD_AccountingInformation_34B_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceD_AccountingInformation_30F_Type_Pattern
class MT304_SequenceD_AccountingInformation_30F_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceD_AccountingInformation_30F_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 882, 1)
    _Documentation = None
MT304_SequenceD_AccountingInformation_30F_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceD_AccountingInformation_30F_Type_Pattern._CF_pattern.addPattern(pattern='([0-9]{8})')
MT304_SequenceD_AccountingInformation_30F_Type_Pattern._InitializeFacetMap(MT304_SequenceD_AccountingInformation_30F_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceD_AccountingInformation_30F_Type_Pattern', MT304_SequenceD_AccountingInformation_30F_Type_Pattern)
_module_typeBindings.MT304_SequenceD_AccountingInformation_30F_Type_Pattern = MT304_SequenceD_AccountingInformation_30F_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceE_NetAmountToBeSettled_17G_Type_Pattern
class MT304_SequenceE_NetAmountToBeSettled_17G_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceE_NetAmountToBeSettled_17G_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 895, 1)
    _Documentation = None
MT304_SequenceE_NetAmountToBeSettled_17G_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceE_NetAmountToBeSettled_17G_Type_Pattern._CF_pattern.addPattern(pattern='((N|Y))')
MT304_SequenceE_NetAmountToBeSettled_17G_Type_Pattern._InitializeFacetMap(MT304_SequenceE_NetAmountToBeSettled_17G_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceE_NetAmountToBeSettled_17G_Type_Pattern', MT304_SequenceE_NetAmountToBeSettled_17G_Type_Pattern)
_module_typeBindings.MT304_SequenceE_NetAmountToBeSettled_17G_Type_Pattern = MT304_SequenceE_NetAmountToBeSettled_17G_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceE_NetAmountToBeSettled_32G_Type_Pattern
class MT304_SequenceE_NetAmountToBeSettled_32G_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceE_NetAmountToBeSettled_32G_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 908, 1)
    _Documentation = None
MT304_SequenceE_NetAmountToBeSettled_32G_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceE_NetAmountToBeSettled_32G_Type_Pattern._CF_pattern.addPattern(pattern='((AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})')
MT304_SequenceE_NetAmountToBeSettled_32G_Type_Pattern._InitializeFacetMap(MT304_SequenceE_NetAmountToBeSettled_32G_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceE_NetAmountToBeSettled_32G_Type_Pattern', MT304_SequenceE_NetAmountToBeSettled_32G_Type_Pattern)
_module_typeBindings.MT304_SequenceE_NetAmountToBeSettled_32G_Type_Pattern = MT304_SequenceE_NetAmountToBeSettled_32G_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceE_NetAmountToBeSettled_53A_Type_Pattern
class MT304_SequenceE_NetAmountToBeSettled_53A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceE_NetAmountToBeSettled_53A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 921, 1)
    _Documentation = None
MT304_SequenceE_NetAmountToBeSettled_53A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceE_NetAmountToBeSettled_53A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT304_SequenceE_NetAmountToBeSettled_53A_Type_Pattern._InitializeFacetMap(MT304_SequenceE_NetAmountToBeSettled_53A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceE_NetAmountToBeSettled_53A_Type_Pattern', MT304_SequenceE_NetAmountToBeSettled_53A_Type_Pattern)
_module_typeBindings.MT304_SequenceE_NetAmountToBeSettled_53A_Type_Pattern = MT304_SequenceE_NetAmountToBeSettled_53A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceE_NetAmountToBeSettled_53D_Type_Pattern
class MT304_SequenceE_NetAmountToBeSettled_53D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceE_NetAmountToBeSettled_53D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 934, 1)
    _Documentation = None
MT304_SequenceE_NetAmountToBeSettled_53D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceE_NetAmountToBeSettled_53D_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT304_SequenceE_NetAmountToBeSettled_53D_Type_Pattern._InitializeFacetMap(MT304_SequenceE_NetAmountToBeSettled_53D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceE_NetAmountToBeSettled_53D_Type_Pattern', MT304_SequenceE_NetAmountToBeSettled_53D_Type_Pattern)
_module_typeBindings.MT304_SequenceE_NetAmountToBeSettled_53D_Type_Pattern = MT304_SequenceE_NetAmountToBeSettled_53D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceE_NetAmountToBeSettled_53J_Type_Pattern
class MT304_SequenceE_NetAmountToBeSettled_53J_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceE_NetAmountToBeSettled_53J_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 947, 1)
    _Documentation = None
MT304_SequenceE_NetAmountToBeSettled_53J_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceE_NetAmountToBeSettled_53J_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,40}\\n?){1,5})")
MT304_SequenceE_NetAmountToBeSettled_53J_Type_Pattern._InitializeFacetMap(MT304_SequenceE_NetAmountToBeSettled_53J_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceE_NetAmountToBeSettled_53J_Type_Pattern', MT304_SequenceE_NetAmountToBeSettled_53J_Type_Pattern)
_module_typeBindings.MT304_SequenceE_NetAmountToBeSettled_53J_Type_Pattern = MT304_SequenceE_NetAmountToBeSettled_53J_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceE_NetAmountToBeSettled_56A_Type_Pattern
class MT304_SequenceE_NetAmountToBeSettled_56A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceE_NetAmountToBeSettled_56A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 960, 1)
    _Documentation = None
MT304_SequenceE_NetAmountToBeSettled_56A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceE_NetAmountToBeSettled_56A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT304_SequenceE_NetAmountToBeSettled_56A_Type_Pattern._InitializeFacetMap(MT304_SequenceE_NetAmountToBeSettled_56A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceE_NetAmountToBeSettled_56A_Type_Pattern', MT304_SequenceE_NetAmountToBeSettled_56A_Type_Pattern)
_module_typeBindings.MT304_SequenceE_NetAmountToBeSettled_56A_Type_Pattern = MT304_SequenceE_NetAmountToBeSettled_56A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceE_NetAmountToBeSettled_56D_Type_Pattern
class MT304_SequenceE_NetAmountToBeSettled_56D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceE_NetAmountToBeSettled_56D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 973, 1)
    _Documentation = None
MT304_SequenceE_NetAmountToBeSettled_56D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceE_NetAmountToBeSettled_56D_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT304_SequenceE_NetAmountToBeSettled_56D_Type_Pattern._InitializeFacetMap(MT304_SequenceE_NetAmountToBeSettled_56D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceE_NetAmountToBeSettled_56D_Type_Pattern', MT304_SequenceE_NetAmountToBeSettled_56D_Type_Pattern)
_module_typeBindings.MT304_SequenceE_NetAmountToBeSettled_56D_Type_Pattern = MT304_SequenceE_NetAmountToBeSettled_56D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceE_NetAmountToBeSettled_56J_Type_Pattern
class MT304_SequenceE_NetAmountToBeSettled_56J_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceE_NetAmountToBeSettled_56J_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 986, 1)
    _Documentation = None
MT304_SequenceE_NetAmountToBeSettled_56J_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceE_NetAmountToBeSettled_56J_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,40}\\n?){1,5})")
MT304_SequenceE_NetAmountToBeSettled_56J_Type_Pattern._InitializeFacetMap(MT304_SequenceE_NetAmountToBeSettled_56J_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceE_NetAmountToBeSettled_56J_Type_Pattern', MT304_SequenceE_NetAmountToBeSettled_56J_Type_Pattern)
_module_typeBindings.MT304_SequenceE_NetAmountToBeSettled_56J_Type_Pattern = MT304_SequenceE_NetAmountToBeSettled_56J_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceE_NetAmountToBeSettled_57A_Type_Pattern
class MT304_SequenceE_NetAmountToBeSettled_57A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceE_NetAmountToBeSettled_57A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 999, 1)
    _Documentation = None
MT304_SequenceE_NetAmountToBeSettled_57A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceE_NetAmountToBeSettled_57A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT304_SequenceE_NetAmountToBeSettled_57A_Type_Pattern._InitializeFacetMap(MT304_SequenceE_NetAmountToBeSettled_57A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceE_NetAmountToBeSettled_57A_Type_Pattern', MT304_SequenceE_NetAmountToBeSettled_57A_Type_Pattern)
_module_typeBindings.MT304_SequenceE_NetAmountToBeSettled_57A_Type_Pattern = MT304_SequenceE_NetAmountToBeSettled_57A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceE_NetAmountToBeSettled_57D_Type_Pattern
class MT304_SequenceE_NetAmountToBeSettled_57D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceE_NetAmountToBeSettled_57D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1012, 1)
    _Documentation = None
MT304_SequenceE_NetAmountToBeSettled_57D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceE_NetAmountToBeSettled_57D_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT304_SequenceE_NetAmountToBeSettled_57D_Type_Pattern._InitializeFacetMap(MT304_SequenceE_NetAmountToBeSettled_57D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceE_NetAmountToBeSettled_57D_Type_Pattern', MT304_SequenceE_NetAmountToBeSettled_57D_Type_Pattern)
_module_typeBindings.MT304_SequenceE_NetAmountToBeSettled_57D_Type_Pattern = MT304_SequenceE_NetAmountToBeSettled_57D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceE_NetAmountToBeSettled_57J_Type_Pattern
class MT304_SequenceE_NetAmountToBeSettled_57J_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceE_NetAmountToBeSettled_57J_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1025, 1)
    _Documentation = None
MT304_SequenceE_NetAmountToBeSettled_57J_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceE_NetAmountToBeSettled_57J_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,40}\\n?){1,5})")
MT304_SequenceE_NetAmountToBeSettled_57J_Type_Pattern._InitializeFacetMap(MT304_SequenceE_NetAmountToBeSettled_57J_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceE_NetAmountToBeSettled_57J_Type_Pattern', MT304_SequenceE_NetAmountToBeSettled_57J_Type_Pattern)
_module_typeBindings.MT304_SequenceE_NetAmountToBeSettled_57J_Type_Pattern = MT304_SequenceE_NetAmountToBeSettled_57J_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceE_NetAmountToBeSettled_58A_Type_Pattern
class MT304_SequenceE_NetAmountToBeSettled_58A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceE_NetAmountToBeSettled_58A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1038, 1)
    _Documentation = None
MT304_SequenceE_NetAmountToBeSettled_58A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceE_NetAmountToBeSettled_58A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT304_SequenceE_NetAmountToBeSettled_58A_Type_Pattern._InitializeFacetMap(MT304_SequenceE_NetAmountToBeSettled_58A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceE_NetAmountToBeSettled_58A_Type_Pattern', MT304_SequenceE_NetAmountToBeSettled_58A_Type_Pattern)
_module_typeBindings.MT304_SequenceE_NetAmountToBeSettled_58A_Type_Pattern = MT304_SequenceE_NetAmountToBeSettled_58A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceE_NetAmountToBeSettled_58D_Type_Pattern
class MT304_SequenceE_NetAmountToBeSettled_58D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceE_NetAmountToBeSettled_58D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1051, 1)
    _Documentation = None
MT304_SequenceE_NetAmountToBeSettled_58D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceE_NetAmountToBeSettled_58D_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT304_SequenceE_NetAmountToBeSettled_58D_Type_Pattern._InitializeFacetMap(MT304_SequenceE_NetAmountToBeSettled_58D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceE_NetAmountToBeSettled_58D_Type_Pattern', MT304_SequenceE_NetAmountToBeSettled_58D_Type_Pattern)
_module_typeBindings.MT304_SequenceE_NetAmountToBeSettled_58D_Type_Pattern = MT304_SequenceE_NetAmountToBeSettled_58D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT304_SequenceE_NetAmountToBeSettled_58J_Type_Pattern
class MT304_SequenceE_NetAmountToBeSettled_58J_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceE_NetAmountToBeSettled_58J_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1064, 1)
    _Documentation = None
MT304_SequenceE_NetAmountToBeSettled_58J_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT304_SequenceE_NetAmountToBeSettled_58J_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,40}\\n?){1,5})")
MT304_SequenceE_NetAmountToBeSettled_58J_Type_Pattern._InitializeFacetMap(MT304_SequenceE_NetAmountToBeSettled_58J_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceE_NetAmountToBeSettled_58J_Type_Pattern', MT304_SequenceE_NetAmountToBeSettled_58J_Type_Pattern)
_module_typeBindings.MT304_SequenceE_NetAmountToBeSettled_58J_Type_Pattern = MT304_SequenceE_NetAmountToBeSettled_58J_Type_Pattern

# Complex type {http://www.w3schools.com}MT304_SequenceC_OptionalGeneralInformation_72_Type with content type SIMPLE
class MT304_SequenceC_OptionalGeneralInformation_72_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceC_OptionalGeneralInformation_72_Type with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceC_OptionalGeneralInformation_72_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 822, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceC_OptionalGeneralInformation_72_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='72')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 825, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 825, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceC_OptionalGeneralInformation_72_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 826, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 826, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceC_OptionalGeneralInformation_72_Type = MT304_SequenceC_OptionalGeneralInformation_72_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceC_OptionalGeneralInformation_72_Type', MT304_SequenceC_OptionalGeneralInformation_72_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceA_GeneralInformation with content type ELEMENT_ONLY
class MT304_SequenceA_GeneralInformation (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceA_GeneralInformation with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceA_GeneralInformation')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1077, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}SendersReference uses Python identifier SendersReference
    __SendersReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SendersReference'), 'SendersReference', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_httpwww_w3schools_comSendersReference', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1079, 3), )

    
    SendersReference = property(__SendersReference.value, __SendersReference.set, None, None)

    
    # Element {http://www.w3schools.com}RelatedReference uses Python identifier RelatedReference
    __RelatedReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RelatedReference'), 'RelatedReference', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_httpwww_w3schools_comRelatedReference', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1080, 3), )

    
    RelatedReference = property(__RelatedReference.value, __RelatedReference.set, None, None)

    
    # Element {http://www.w3schools.com}TypeOfOperation uses Python identifier TypeOfOperation
    __TypeOfOperation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TypeOfOperation'), 'TypeOfOperation', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_httpwww_w3schools_comTypeOfOperation', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1081, 3), )

    
    TypeOfOperation = property(__TypeOfOperation.value, __TypeOfOperation.set, None, None)

    
    # Element {http://www.w3schools.com}ScopeOfOperation uses Python identifier ScopeOfOperation
    __ScopeOfOperation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ScopeOfOperation'), 'ScopeOfOperation', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_httpwww_w3schools_comScopeOfOperation', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1082, 3), )

    
    ScopeOfOperation = property(__ScopeOfOperation.value, __ScopeOfOperation.set, None, None)

    
    # Element {http://www.w3schools.com}OpenIndicator uses Python identifier OpenIndicator
    __OpenIndicator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OpenIndicator'), 'OpenIndicator', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_httpwww_w3schools_comOpenIndicator', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1083, 3), )

    
    OpenIndicator = property(__OpenIndicator.value, __OpenIndicator.set, None, None)

    
    # Element {http://www.w3schools.com}FinalCloseIndicator uses Python identifier FinalCloseIndicator
    __FinalCloseIndicator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FinalCloseIndicator'), 'FinalCloseIndicator', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_httpwww_w3schools_comFinalCloseIndicator', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1084, 3), )

    
    FinalCloseIndicator = property(__FinalCloseIndicator.value, __FinalCloseIndicator.set, None, None)

    
    # Element {http://www.w3schools.com}NetSettlementIndicator uses Python identifier NetSettlementIndicator
    __NetSettlementIndicator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NetSettlementIndicator'), 'NetSettlementIndicator', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_httpwww_w3schools_comNetSettlementIndicator', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1085, 3), )

    
    NetSettlementIndicator = property(__NetSettlementIndicator.value, __NetSettlementIndicator.set, None, None)

    
    # Element {http://www.w3schools.com}Fund_A uses Python identifier Fund_A
    __Fund_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Fund_A'), 'Fund_A', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_httpwww_w3schools_comFund_A', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1087, 4), )

    
    Fund_A = property(__Fund_A.value, __Fund_A.set, None, None)

    
    # Element {http://www.w3schools.com}Fund_J uses Python identifier Fund_J
    __Fund_J = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Fund_J'), 'Fund_J', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_httpwww_w3schools_comFund_J', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1088, 4), )

    
    Fund_J = property(__Fund_J.value, __Fund_J.set, None, None)

    
    # Element {http://www.w3schools.com}FundManager_A uses Python identifier FundManager_A
    __FundManager_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FundManager_A'), 'FundManager_A', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_httpwww_w3schools_comFundManager_A', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1091, 4), )

    
    FundManager_A = property(__FundManager_A.value, __FundManager_A.set, None, None)

    
    # Element {http://www.w3schools.com}FundManager_J uses Python identifier FundManager_J
    __FundManager_J = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FundManager_J'), 'FundManager_J', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_httpwww_w3schools_comFundManager_J', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1092, 4), )

    
    FundManager_J = property(__FundManager_J.value, __FundManager_J.set, None, None)

    
    # Element {http://www.w3schools.com}ExecutingBroker_A uses Python identifier ExecutingBroker_A
    __ExecutingBroker_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExecutingBroker_A'), 'ExecutingBroker_A', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_httpwww_w3schools_comExecutingBroker_A', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1095, 4), )

    
    ExecutingBroker_A = property(__ExecutingBroker_A.value, __ExecutingBroker_A.set, None, None)

    
    # Element {http://www.w3schools.com}ExecutingBroker_J uses Python identifier ExecutingBroker_J
    __ExecutingBroker_J = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExecutingBroker_J'), 'ExecutingBroker_J', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_httpwww_w3schools_comExecutingBroker_J', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1096, 4), )

    
    ExecutingBroker_J = property(__ExecutingBroker_J.value, __ExecutingBroker_J.set, None, None)

    
    # Element {http://www.w3schools.com}CentralCounterpartyClearingHouse_A uses Python identifier CentralCounterpartyClearingHouse_A
    __CentralCounterpartyClearingHouse_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CentralCounterpartyClearingHouse_A'), 'CentralCounterpartyClearingHouse_A', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_httpwww_w3schools_comCentralCounterpartyClearingHouse_A', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1099, 4), )

    
    CentralCounterpartyClearingHouse_A = property(__CentralCounterpartyClearingHouse_A.value, __CentralCounterpartyClearingHouse_A.set, None, None)

    
    # Element {http://www.w3schools.com}CentralCounterpartyClearingHouse_D uses Python identifier CentralCounterpartyClearingHouse_D
    __CentralCounterpartyClearingHouse_D = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CentralCounterpartyClearingHouse_D'), 'CentralCounterpartyClearingHouse_D', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_httpwww_w3schools_comCentralCounterpartyClearingHouse_D', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1100, 4), )

    
    CentralCounterpartyClearingHouse_D = property(__CentralCounterpartyClearingHouse_D.value, __CentralCounterpartyClearingHouse_D.set, None, None)

    
    # Element {http://www.w3schools.com}CentralCounterpartyClearingHouse_J uses Python identifier CentralCounterpartyClearingHouse_J
    __CentralCounterpartyClearingHouse_J = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CentralCounterpartyClearingHouse_J'), 'CentralCounterpartyClearingHouse_J', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_httpwww_w3schools_comCentralCounterpartyClearingHouse_J', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1101, 4), )

    
    CentralCounterpartyClearingHouse_J = property(__CentralCounterpartyClearingHouse_J.value, __CentralCounterpartyClearingHouse_J.set, None, None)

    
    # Element {http://www.w3schools.com}ClearingBroker_A uses Python identifier ClearingBroker_A
    __ClearingBroker_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ClearingBroker_A'), 'ClearingBroker_A', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_httpwww_w3schools_comClearingBroker_A', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1104, 4), )

    
    ClearingBroker_A = property(__ClearingBroker_A.value, __ClearingBroker_A.set, None, None)

    
    # Element {http://www.w3schools.com}ClearingBroker_D uses Python identifier ClearingBroker_D
    __ClearingBroker_D = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ClearingBroker_D'), 'ClearingBroker_D', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_httpwww_w3schools_comClearingBroker_D', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1105, 4), )

    
    ClearingBroker_D = property(__ClearingBroker_D.value, __ClearingBroker_D.set, None, None)

    
    # Element {http://www.w3schools.com}ClearingBroker_J uses Python identifier ClearingBroker_J
    __ClearingBroker_J = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ClearingBroker_J'), 'ClearingBroker_J', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_httpwww_w3schools_comClearingBroker_J', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1106, 4), )

    
    ClearingBroker_J = property(__ClearingBroker_J.value, __ClearingBroker_J.set, None, None)

    
    # Element {http://www.w3schools.com}PaymentVersusPaymentSettlementIndicator uses Python identifier PaymentVersusPaymentSettlementIndicator
    __PaymentVersusPaymentSettlementIndicator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PaymentVersusPaymentSettlementIndicator'), 'PaymentVersusPaymentSettlementIndicator', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_httpwww_w3schools_comPaymentVersusPaymentSettlementIndicator', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1108, 3), )

    
    PaymentVersusPaymentSettlementIndicator = property(__PaymentVersusPaymentSettlementIndicator.value, __PaymentVersusPaymentSettlementIndicator.set, None, None)

    
    # Element {http://www.w3schools.com}TypeDateVersionOfTheAgreement uses Python identifier TypeDateVersionOfTheAgreement
    __TypeDateVersionOfTheAgreement = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TypeDateVersionOfTheAgreement'), 'TypeDateVersionOfTheAgreement', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_httpwww_w3schools_comTypeDateVersionOfTheAgreement', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1109, 3), )

    
    TypeDateVersionOfTheAgreement = property(__TypeDateVersionOfTheAgreement.value, __TypeDateVersionOfTheAgreement.set, None, None)

    
    # Element {http://www.w3schools.com}YearOfDefinitions uses Python identifier YearOfDefinitions
    __YearOfDefinitions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'YearOfDefinitions'), 'YearOfDefinitions', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_httpwww_w3schools_comYearOfDefinitions', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1110, 3), )

    
    YearOfDefinitions = property(__YearOfDefinitions.value, __YearOfDefinitions.set, None, None)

    
    # Element {http://www.w3schools.com}SettlementCurrency uses Python identifier SettlementCurrency
    __SettlementCurrency = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SettlementCurrency'), 'SettlementCurrency', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_httpwww_w3schools_comSettlementCurrency', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1111, 3), )

    
    SettlementCurrency = property(__SettlementCurrency.value, __SettlementCurrency.set, None, None)

    
    # Element {http://www.w3schools.com}ValuationDate uses Python identifier ValuationDate
    __ValuationDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ValuationDate'), 'ValuationDate', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_httpwww_w3schools_comValuationDate', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1112, 3), )

    
    ValuationDate = property(__ValuationDate.value, __ValuationDate.set, None, None)

    
    # Element {http://www.w3schools.com}SettlementRateSource uses Python identifier SettlementRateSource
    __SettlementRateSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SettlementRateSource'), 'SettlementRateSource', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_httpwww_w3schools_comSettlementRateSource', True, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1113, 3), )

    
    SettlementRateSource = property(__SettlementRateSource.value, __SettlementRateSource.set, None, None)

    
    # Element {http://www.w3schools.com}CalculationAgent uses Python identifier CalculationAgent
    __CalculationAgent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CalculationAgent'), 'CalculationAgent', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_httpwww_w3schools_comCalculationAgent', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1114, 3), )

    
    CalculationAgent = property(__CalculationAgent.value, __CalculationAgent.set, None, None)

    
    # Element {http://www.w3schools.com}ReferenceToOpeningInstruction uses Python identifier ReferenceToOpeningInstruction
    __ReferenceToOpeningInstruction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReferenceToOpeningInstruction'), 'ReferenceToOpeningInstruction', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_httpwww_w3schools_comReferenceToOpeningInstruction', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1115, 3), )

    
    ReferenceToOpeningInstruction = property(__ReferenceToOpeningInstruction.value, __ReferenceToOpeningInstruction.set, None, None)

    
    # Element {http://www.w3schools.com}ClearingOrSettlementSession uses Python identifier ClearingOrSettlementSession
    __ClearingOrSettlementSession = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ClearingOrSettlementSession'), 'ClearingOrSettlementSession', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_httpwww_w3schools_comClearingOrSettlementSession', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1116, 3), )

    
    ClearingOrSettlementSession = property(__ClearingOrSettlementSession.value, __ClearingOrSettlementSession.set, None, None)

    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='15A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1118, 2)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1118, 2)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1119, 2)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1119, 2)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    
    # Attribute formatTag uses Python identifier formatTag
    __formatTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'formatTag'), 'formatTag', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_formatTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='False')
    __formatTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1120, 2)
    __formatTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1120, 2)
    
    formatTag = property(__formatTag.value, __formatTag.set, None, None)

    _ElementMap.update({
        __SendersReference.name() : __SendersReference,
        __RelatedReference.name() : __RelatedReference,
        __TypeOfOperation.name() : __TypeOfOperation,
        __ScopeOfOperation.name() : __ScopeOfOperation,
        __OpenIndicator.name() : __OpenIndicator,
        __FinalCloseIndicator.name() : __FinalCloseIndicator,
        __NetSettlementIndicator.name() : __NetSettlementIndicator,
        __Fund_A.name() : __Fund_A,
        __Fund_J.name() : __Fund_J,
        __FundManager_A.name() : __FundManager_A,
        __FundManager_J.name() : __FundManager_J,
        __ExecutingBroker_A.name() : __ExecutingBroker_A,
        __ExecutingBroker_J.name() : __ExecutingBroker_J,
        __CentralCounterpartyClearingHouse_A.name() : __CentralCounterpartyClearingHouse_A,
        __CentralCounterpartyClearingHouse_D.name() : __CentralCounterpartyClearingHouse_D,
        __CentralCounterpartyClearingHouse_J.name() : __CentralCounterpartyClearingHouse_J,
        __ClearingBroker_A.name() : __ClearingBroker_A,
        __ClearingBroker_D.name() : __ClearingBroker_D,
        __ClearingBroker_J.name() : __ClearingBroker_J,
        __PaymentVersusPaymentSettlementIndicator.name() : __PaymentVersusPaymentSettlementIndicator,
        __TypeDateVersionOfTheAgreement.name() : __TypeDateVersionOfTheAgreement,
        __YearOfDefinitions.name() : __YearOfDefinitions,
        __SettlementCurrency.name() : __SettlementCurrency,
        __ValuationDate.name() : __ValuationDate,
        __SettlementRateSource.name() : __SettlementRateSource,
        __CalculationAgent.name() : __CalculationAgent,
        __ReferenceToOpeningInstruction.name() : __ReferenceToOpeningInstruction,
        __ClearingOrSettlementSession.name() : __ClearingOrSettlementSession
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory,
        __formatTag.name() : __formatTag
    })
_module_typeBindings.MT304_SequenceA_GeneralInformation = MT304_SequenceA_GeneralInformation
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceA_GeneralInformation', MT304_SequenceA_GeneralInformation)


# Complex type {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails with content type ELEMENT_ONLY
class MT304_SequenceB_ForexTransactionDetails (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceB_ForexTransactionDetails')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1122, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}TradeDate uses Python identifier TradeDate
    __TradeDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TradeDate'), 'TradeDate', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_httpwww_w3schools_comTradeDate', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1124, 3), )

    
    TradeDate = property(__TradeDate.value, __TradeDate.set, None, None)

    
    # Element {http://www.w3schools.com}ValueDate uses Python identifier ValueDate
    __ValueDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ValueDate'), 'ValueDate', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_httpwww_w3schools_comValueDate', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1125, 3), )

    
    ValueDate = property(__ValueDate.value, __ValueDate.set, None, None)

    
    # Element {http://www.w3schools.com}ExchangeRate uses Python identifier ExchangeRate
    __ExchangeRate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExchangeRate'), 'ExchangeRate', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_httpwww_w3schools_comExchangeRate', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1126, 3), )

    
    ExchangeRate = property(__ExchangeRate.value, __ExchangeRate.set, None, None)

    
    # Element {http://www.w3schools.com}PaymentClearingCentre uses Python identifier PaymentClearingCentre
    __PaymentClearingCentre = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PaymentClearingCentre'), 'PaymentClearingCentre', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_httpwww_w3schools_comPaymentClearingCentre', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1127, 3), )

    
    PaymentClearingCentre = property(__PaymentClearingCentre.value, __PaymentClearingCentre.set, None, None)

    
    # Element {http://www.w3schools.com}DigitalTokenIdentifier uses Python identifier DigitalTokenIdentifier
    __DigitalTokenIdentifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DigitalTokenIdentifier'), 'DigitalTokenIdentifier', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_httpwww_w3schools_comDigitalTokenIdentifier', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1128, 3), )

    
    DigitalTokenIdentifier = property(__DigitalTokenIdentifier.value, __DigitalTokenIdentifier.set, None, None)

    
    # Element {http://www.w3schools.com}SubsequenceB1_AmountBought uses Python identifier SubsequenceB1_AmountBought
    __SubsequenceB1_AmountBought = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SubsequenceB1_AmountBought'), 'SubsequenceB1_AmountBought', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_httpwww_w3schools_comSubsequenceB1_AmountBought', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1129, 3), )

    
    SubsequenceB1_AmountBought = property(__SubsequenceB1_AmountBought.value, __SubsequenceB1_AmountBought.set, None, None)

    
    # Element {http://www.w3schools.com}SubsequenceB2_AmountSold uses Python identifier SubsequenceB2_AmountSold
    __SubsequenceB2_AmountSold = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SubsequenceB2_AmountSold'), 'SubsequenceB2_AmountSold', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_httpwww_w3schools_comSubsequenceB2_AmountSold', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1130, 3), )

    
    SubsequenceB2_AmountSold = property(__SubsequenceB2_AmountSold.value, __SubsequenceB2_AmountSold.set, None, None)

    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='15B')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1132, 2)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1132, 2)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1133, 2)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1133, 2)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    
    # Attribute formatTag uses Python identifier formatTag
    __formatTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'formatTag'), 'formatTag', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_formatTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='False')
    __formatTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1134, 2)
    __formatTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1134, 2)
    
    formatTag = property(__formatTag.value, __formatTag.set, None, None)

    _ElementMap.update({
        __TradeDate.name() : __TradeDate,
        __ValueDate.name() : __ValueDate,
        __ExchangeRate.name() : __ExchangeRate,
        __PaymentClearingCentre.name() : __PaymentClearingCentre,
        __DigitalTokenIdentifier.name() : __DigitalTokenIdentifier,
        __SubsequenceB1_AmountBought.name() : __SubsequenceB1_AmountBought,
        __SubsequenceB2_AmountSold.name() : __SubsequenceB2_AmountSold
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory,
        __formatTag.name() : __formatTag
    })
_module_typeBindings.MT304_SequenceB_ForexTransactionDetails = MT304_SequenceB_ForexTransactionDetails
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceB_ForexTransactionDetails', MT304_SequenceB_ForexTransactionDetails)


# Complex type {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought with content type ELEMENT_ONLY
class MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1136, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}CurrencyAmountBought uses Python identifier CurrencyAmountBought
    __CurrencyAmountBought = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CurrencyAmountBought'), 'CurrencyAmountBought', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_httpwww_w3schools_comCurrencyAmountBought', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1138, 3), )

    
    CurrencyAmountBought = property(__CurrencyAmountBought.value, __CurrencyAmountBought.set, None, None)

    
    # Element {http://www.w3schools.com}DeliveryAgent_A uses Python identifier DeliveryAgent_A
    __DeliveryAgent_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeliveryAgent_A'), 'DeliveryAgent_A', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_httpwww_w3schools_comDeliveryAgent_A', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1140, 4), )

    
    DeliveryAgent_A = property(__DeliveryAgent_A.value, __DeliveryAgent_A.set, None, None)

    
    # Element {http://www.w3schools.com}DeliveryAgent_J uses Python identifier DeliveryAgent_J
    __DeliveryAgent_J = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeliveryAgent_J'), 'DeliveryAgent_J', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_httpwww_w3schools_comDeliveryAgent_J', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1141, 4), )

    
    DeliveryAgent_J = property(__DeliveryAgent_J.value, __DeliveryAgent_J.set, None, None)

    
    # Element {http://www.w3schools.com}Intermediary_A uses Python identifier Intermediary_A
    __Intermediary_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_A'), 'Intermediary_A', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_httpwww_w3schools_comIntermediary_A', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1144, 4), )

    
    Intermediary_A = property(__Intermediary_A.value, __Intermediary_A.set, None, None)

    
    # Element {http://www.w3schools.com}Intermediary_J uses Python identifier Intermediary_J
    __Intermediary_J = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_J'), 'Intermediary_J', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_httpwww_w3schools_comIntermediary_J', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1145, 4), )

    
    Intermediary_J = property(__Intermediary_J.value, __Intermediary_J.set, None, None)

    
    # Element {http://www.w3schools.com}ReceivingAgent_A uses Python identifier ReceivingAgent_A
    __ReceivingAgent_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReceivingAgent_A'), 'ReceivingAgent_A', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_httpwww_w3schools_comReceivingAgent_A', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1148, 4), )

    
    ReceivingAgent_A = property(__ReceivingAgent_A.value, __ReceivingAgent_A.set, None, None)

    
    # Element {http://www.w3schools.com}ReceivingAgent_J uses Python identifier ReceivingAgent_J
    __ReceivingAgent_J = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReceivingAgent_J'), 'ReceivingAgent_J', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_httpwww_w3schools_comReceivingAgent_J', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1149, 4), )

    
    ReceivingAgent_J = property(__ReceivingAgent_J.value, __ReceivingAgent_J.set, None, None)

    _ElementMap.update({
        __CurrencyAmountBought.name() : __CurrencyAmountBought,
        __DeliveryAgent_A.name() : __DeliveryAgent_A,
        __DeliveryAgent_J.name() : __DeliveryAgent_J,
        __Intermediary_A.name() : __Intermediary_A,
        __Intermediary_J.name() : __Intermediary_J,
        __ReceivingAgent_A.name() : __ReceivingAgent_A,
        __ReceivingAgent_J.name() : __ReceivingAgent_J
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought = MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought', MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought)


# Complex type {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold with content type ELEMENT_ONLY
class MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1153, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}CurrencyAmountSold uses Python identifier CurrencyAmountSold
    __CurrencyAmountSold = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CurrencyAmountSold'), 'CurrencyAmountSold', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_httpwww_w3schools_comCurrencyAmountSold', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1155, 3), )

    
    CurrencyAmountSold = property(__CurrencyAmountSold.value, __CurrencyAmountSold.set, None, None)

    
    # Element {http://www.w3schools.com}DeliveryAgent_A uses Python identifier DeliveryAgent_A
    __DeliveryAgent_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeliveryAgent_A'), 'DeliveryAgent_A', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_httpwww_w3schools_comDeliveryAgent_A', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1157, 4), )

    
    DeliveryAgent_A = property(__DeliveryAgent_A.value, __DeliveryAgent_A.set, None, None)

    
    # Element {http://www.w3schools.com}DeliveryAgent_J uses Python identifier DeliveryAgent_J
    __DeliveryAgent_J = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeliveryAgent_J'), 'DeliveryAgent_J', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_httpwww_w3schools_comDeliveryAgent_J', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1158, 4), )

    
    DeliveryAgent_J = property(__DeliveryAgent_J.value, __DeliveryAgent_J.set, None, None)

    
    # Element {http://www.w3schools.com}Intermediary_A uses Python identifier Intermediary_A
    __Intermediary_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_A'), 'Intermediary_A', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_httpwww_w3schools_comIntermediary_A', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1161, 4), )

    
    Intermediary_A = property(__Intermediary_A.value, __Intermediary_A.set, None, None)

    
    # Element {http://www.w3schools.com}Intermediary_J uses Python identifier Intermediary_J
    __Intermediary_J = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_J'), 'Intermediary_J', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_httpwww_w3schools_comIntermediary_J', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1162, 4), )

    
    Intermediary_J = property(__Intermediary_J.value, __Intermediary_J.set, None, None)

    
    # Element {http://www.w3schools.com}ReceivingAgent_A uses Python identifier ReceivingAgent_A
    __ReceivingAgent_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReceivingAgent_A'), 'ReceivingAgent_A', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_httpwww_w3schools_comReceivingAgent_A', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1165, 4), )

    
    ReceivingAgent_A = property(__ReceivingAgent_A.value, __ReceivingAgent_A.set, None, None)

    
    # Element {http://www.w3schools.com}ReceivingAgent_J uses Python identifier ReceivingAgent_J
    __ReceivingAgent_J = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReceivingAgent_J'), 'ReceivingAgent_J', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_httpwww_w3schools_comReceivingAgent_J', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1166, 4), )

    
    ReceivingAgent_J = property(__ReceivingAgent_J.value, __ReceivingAgent_J.set, None, None)

    
    # Element {http://www.w3schools.com}BeneficiaryInstitution_A uses Python identifier BeneficiaryInstitution_A
    __BeneficiaryInstitution_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryInstitution_A'), 'BeneficiaryInstitution_A', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_httpwww_w3schools_comBeneficiaryInstitution_A', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1169, 4), )

    
    BeneficiaryInstitution_A = property(__BeneficiaryInstitution_A.value, __BeneficiaryInstitution_A.set, None, None)

    
    # Element {http://www.w3schools.com}BeneficiaryInstitution_J uses Python identifier BeneficiaryInstitution_J
    __BeneficiaryInstitution_J = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryInstitution_J'), 'BeneficiaryInstitution_J', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_httpwww_w3schools_comBeneficiaryInstitution_J', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1170, 4), )

    
    BeneficiaryInstitution_J = property(__BeneficiaryInstitution_J.value, __BeneficiaryInstitution_J.set, None, None)

    _ElementMap.update({
        __CurrencyAmountSold.name() : __CurrencyAmountSold,
        __DeliveryAgent_A.name() : __DeliveryAgent_A,
        __DeliveryAgent_J.name() : __DeliveryAgent_J,
        __Intermediary_A.name() : __Intermediary_A,
        __Intermediary_J.name() : __Intermediary_J,
        __ReceivingAgent_A.name() : __ReceivingAgent_A,
        __ReceivingAgent_J.name() : __ReceivingAgent_J,
        __BeneficiaryInstitution_A.name() : __BeneficiaryInstitution_A,
        __BeneficiaryInstitution_J.name() : __BeneficiaryInstitution_J
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold = MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold', MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold)


# Complex type {http://www.w3schools.com}MT304_SequenceC_OptionalGeneralInformation with content type ELEMENT_ONLY
class MT304_SequenceC_OptionalGeneralInformation (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceC_OptionalGeneralInformation with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceC_OptionalGeneralInformation')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1174, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}ReferenceToTheAssociatedTrade uses Python identifier ReferenceToTheAssociatedTrade
    __ReferenceToTheAssociatedTrade = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReferenceToTheAssociatedTrade'), 'ReferenceToTheAssociatedTrade', '__httpwww_w3schools_com_MT304_SequenceC_OptionalGeneralInformation_httpwww_w3schools_comReferenceToTheAssociatedTrade', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1176, 3), )

    
    ReferenceToTheAssociatedTrade = property(__ReferenceToTheAssociatedTrade.value, __ReferenceToTheAssociatedTrade.set, None, None)

    
    # Element {http://www.w3schools.com}ExecutingBrokersReference uses Python identifier ExecutingBrokersReference
    __ExecutingBrokersReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExecutingBrokersReference'), 'ExecutingBrokersReference', '__httpwww_w3schools_com_MT304_SequenceC_OptionalGeneralInformation_httpwww_w3schools_comExecutingBrokersReference', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1177, 3), )

    
    ExecutingBrokersReference = property(__ExecutingBrokersReference.value, __ExecutingBrokersReference.set, None, None)

    
    # Element {http://www.w3schools.com}SubsequenceC1_UniqueTransactionIdentifier uses Python identifier SubsequenceC1_UniqueTransactionIdentifier
    __SubsequenceC1_UniqueTransactionIdentifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SubsequenceC1_UniqueTransactionIdentifier'), 'SubsequenceC1_UniqueTransactionIdentifier', '__httpwww_w3schools_com_MT304_SequenceC_OptionalGeneralInformation_httpwww_w3schools_comSubsequenceC1_UniqueTransactionIdentifier', True, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1178, 3), )

    
    SubsequenceC1_UniqueTransactionIdentifier = property(__SubsequenceC1_UniqueTransactionIdentifier.value, __SubsequenceC1_UniqueTransactionIdentifier.set, None, None)

    
    # Element {http://www.w3schools.com}UnderlyingProductIdentifier uses Python identifier UnderlyingProductIdentifier
    __UnderlyingProductIdentifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UnderlyingProductIdentifier'), 'UnderlyingProductIdentifier', '__httpwww_w3schools_com_MT304_SequenceC_OptionalGeneralInformation_httpwww_w3schools_comUnderlyingProductIdentifier', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1179, 3), )

    
    UnderlyingProductIdentifier = property(__UnderlyingProductIdentifier.value, __UnderlyingProductIdentifier.set, None, None)

    
    # Element {http://www.w3schools.com}IdentificationOfFinancialInstrument uses Python identifier IdentificationOfFinancialInstrument
    __IdentificationOfFinancialInstrument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IdentificationOfFinancialInstrument'), 'IdentificationOfFinancialInstrument', '__httpwww_w3schools_com_MT304_SequenceC_OptionalGeneralInformation_httpwww_w3schools_comIdentificationOfFinancialInstrument', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1180, 3), )

    
    IdentificationOfFinancialInstrument = property(__IdentificationOfFinancialInstrument.value, __IdentificationOfFinancialInstrument.set, None, None)

    
    # Element {http://www.w3schools.com}ExecutionVenue uses Python identifier ExecutionVenue
    __ExecutionVenue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExecutionVenue'), 'ExecutionVenue', '__httpwww_w3schools_com_MT304_SequenceC_OptionalGeneralInformation_httpwww_w3schools_comExecutionVenue', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1181, 3), )

    
    ExecutionVenue = property(__ExecutionVenue.value, __ExecutionVenue.set, None, None)

    
    # Element {http://www.w3schools.com}ExecutionTimestamp uses Python identifier ExecutionTimestamp
    __ExecutionTimestamp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExecutionTimestamp'), 'ExecutionTimestamp', '__httpwww_w3schools_com_MT304_SequenceC_OptionalGeneralInformation_httpwww_w3schools_comExecutionTimestamp', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1182, 3), )

    
    ExecutionTimestamp = property(__ExecutionTimestamp.value, __ExecutionTimestamp.set, None, None)

    
    # Element {http://www.w3schools.com}ClearingTimestamp uses Python identifier ClearingTimestamp
    __ClearingTimestamp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ClearingTimestamp'), 'ClearingTimestamp', '__httpwww_w3schools_com_MT304_SequenceC_OptionalGeneralInformation_httpwww_w3schools_comClearingTimestamp', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1183, 3), )

    
    ClearingTimestamp = property(__ClearingTimestamp.value, __ClearingTimestamp.set, None, None)

    
    # Element {http://www.w3schools.com}ContactInformation uses Python identifier ContactInformation
    __ContactInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ContactInformation'), 'ContactInformation', '__httpwww_w3schools_com_MT304_SequenceC_OptionalGeneralInformation_httpwww_w3schools_comContactInformation', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1184, 3), )

    
    ContactInformation = property(__ContactInformation.value, __ContactInformation.set, None, None)

    
    # Element {http://www.w3schools.com}CommissionAndFees uses Python identifier CommissionAndFees
    __CommissionAndFees = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CommissionAndFees'), 'CommissionAndFees', '__httpwww_w3schools_com_MT304_SequenceC_OptionalGeneralInformation_httpwww_w3schools_comCommissionAndFees', True, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1185, 3), )

    
    CommissionAndFees = property(__CommissionAndFees.value, __CommissionAndFees.set, None, None)

    
    # Element {http://www.w3schools.com}SenderToReceiverInformation uses Python identifier SenderToReceiverInformation
    __SenderToReceiverInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SenderToReceiverInformation'), 'SenderToReceiverInformation', '__httpwww_w3schools_com_MT304_SequenceC_OptionalGeneralInformation_httpwww_w3schools_comSenderToReceiverInformation', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1186, 3), )

    
    SenderToReceiverInformation = property(__SenderToReceiverInformation.value, __SenderToReceiverInformation.set, None, None)

    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceC_OptionalGeneralInformation_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='15C')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1188, 2)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1188, 2)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceC_OptionalGeneralInformation_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1189, 2)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1189, 2)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    
    # Attribute formatTag uses Python identifier formatTag
    __formatTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'formatTag'), 'formatTag', '__httpwww_w3schools_com_MT304_SequenceC_OptionalGeneralInformation_formatTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='False')
    __formatTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1190, 2)
    __formatTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1190, 2)
    
    formatTag = property(__formatTag.value, __formatTag.set, None, None)

    _ElementMap.update({
        __ReferenceToTheAssociatedTrade.name() : __ReferenceToTheAssociatedTrade,
        __ExecutingBrokersReference.name() : __ExecutingBrokersReference,
        __SubsequenceC1_UniqueTransactionIdentifier.name() : __SubsequenceC1_UniqueTransactionIdentifier,
        __UnderlyingProductIdentifier.name() : __UnderlyingProductIdentifier,
        __IdentificationOfFinancialInstrument.name() : __IdentificationOfFinancialInstrument,
        __ExecutionVenue.name() : __ExecutionVenue,
        __ExecutionTimestamp.name() : __ExecutionTimestamp,
        __ClearingTimestamp.name() : __ClearingTimestamp,
        __ContactInformation.name() : __ContactInformation,
        __CommissionAndFees.name() : __CommissionAndFees,
        __SenderToReceiverInformation.name() : __SenderToReceiverInformation
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory,
        __formatTag.name() : __formatTag
    })
_module_typeBindings.MT304_SequenceC_OptionalGeneralInformation = MT304_SequenceC_OptionalGeneralInformation
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceC_OptionalGeneralInformation', MT304_SequenceC_OptionalGeneralInformation)


# Complex type {http://www.w3schools.com}MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier with content type ELEMENT_ONLY
class MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1192, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}ReportingJurisdiction uses Python identifier ReportingJurisdiction
    __ReportingJurisdiction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReportingJurisdiction'), 'ReportingJurisdiction', '__httpwww_w3schools_com_MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_httpwww_w3schools_comReportingJurisdiction', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1194, 3), )

    
    ReportingJurisdiction = property(__ReportingJurisdiction.value, __ReportingJurisdiction.set, None, None)

    
    # Element {http://www.w3schools.com}UTINamespaceIssuerCode uses Python identifier UTINamespaceIssuerCode
    __UTINamespaceIssuerCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UTINamespaceIssuerCode'), 'UTINamespaceIssuerCode', '__httpwww_w3schools_com_MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_httpwww_w3schools_comUTINamespaceIssuerCode', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1195, 3), )

    
    UTINamespaceIssuerCode = property(__UTINamespaceIssuerCode.value, __UTINamespaceIssuerCode.set, None, None)

    
    # Element {http://www.w3schools.com}TransactionIdentifier uses Python identifier TransactionIdentifier
    __TransactionIdentifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TransactionIdentifier'), 'TransactionIdentifier', '__httpwww_w3schools_com_MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_httpwww_w3schools_comTransactionIdentifier', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1196, 3), )

    
    TransactionIdentifier = property(__TransactionIdentifier.value, __TransactionIdentifier.set, None, None)

    
    # Element {http://www.w3schools.com}SubsequenceC1a_PriorUniqueTransactionIdentifier uses Python identifier SubsequenceC1a_PriorUniqueTransactionIdentifier
    __SubsequenceC1a_PriorUniqueTransactionIdentifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SubsequenceC1a_PriorUniqueTransactionIdentifier'), 'SubsequenceC1a_PriorUniqueTransactionIdentifier', '__httpwww_w3schools_com_MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_httpwww_w3schools_comSubsequenceC1a_PriorUniqueTransactionIdentifier', True, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1197, 3), )

    
    SubsequenceC1a_PriorUniqueTransactionIdentifier = property(__SubsequenceC1a_PriorUniqueTransactionIdentifier.value, __SubsequenceC1a_PriorUniqueTransactionIdentifier.set, None, None)

    _ElementMap.update({
        __ReportingJurisdiction.name() : __ReportingJurisdiction,
        __UTINamespaceIssuerCode.name() : __UTINamespaceIssuerCode,
        __TransactionIdentifier.name() : __TransactionIdentifier,
        __SubsequenceC1a_PriorUniqueTransactionIdentifier.name() : __SubsequenceC1a_PriorUniqueTransactionIdentifier
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier = MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier', MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier)


# Complex type {http://www.w3schools.com}MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier with content type ELEMENT_ONLY
class MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1200, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}PUTINamespaceIssuerCode uses Python identifier PUTINamespaceIssuerCode
    __PUTINamespaceIssuerCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PUTINamespaceIssuerCode'), 'PUTINamespaceIssuerCode', '__httpwww_w3schools_com_MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier_httpwww_w3schools_comPUTINamespaceIssuerCode', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1202, 3), )

    
    PUTINamespaceIssuerCode = property(__PUTINamespaceIssuerCode.value, __PUTINamespaceIssuerCode.set, None, None)

    
    # Element {http://www.w3schools.com}PriorTransactionIdentifier uses Python identifier PriorTransactionIdentifier
    __PriorTransactionIdentifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PriorTransactionIdentifier'), 'PriorTransactionIdentifier', '__httpwww_w3schools_com_MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier_httpwww_w3schools_comPriorTransactionIdentifier', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1203, 3), )

    
    PriorTransactionIdentifier = property(__PriorTransactionIdentifier.value, __PriorTransactionIdentifier.set, None, None)

    _ElementMap.update({
        __PUTINamespaceIssuerCode.name() : __PUTINamespaceIssuerCode,
        __PriorTransactionIdentifier.name() : __PriorTransactionIdentifier
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier = MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier', MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier)


# Complex type {http://www.w3schools.com}MT304_SequenceD_AccountingInformation with content type ELEMENT_ONLY
class MT304_SequenceD_AccountingInformation (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceD_AccountingInformation with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceD_AccountingInformation')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1206, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}ReferenceToPreviousDeals uses Python identifier ReferenceToPreviousDeals
    __ReferenceToPreviousDeals = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReferenceToPreviousDeals'), 'ReferenceToPreviousDeals', '__httpwww_w3schools_com_MT304_SequenceD_AccountingInformation_httpwww_w3schools_comReferenceToPreviousDeals', True, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1208, 3), )

    
    ReferenceToPreviousDeals = property(__ReferenceToPreviousDeals.value, __ReferenceToPreviousDeals.set, None, None)

    
    # Element {http://www.w3schools.com}GainIndicator uses Python identifier GainIndicator
    __GainIndicator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GainIndicator'), 'GainIndicator', '__httpwww_w3schools_com_MT304_SequenceD_AccountingInformation_httpwww_w3schools_comGainIndicator', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1209, 3), )

    
    GainIndicator = property(__GainIndicator.value, __GainIndicator.set, None, None)

    
    # Element {http://www.w3schools.com}CurrencyAmount uses Python identifier CurrencyAmount
    __CurrencyAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CurrencyAmount'), 'CurrencyAmount', '__httpwww_w3schools_com_MT304_SequenceD_AccountingInformation_httpwww_w3schools_comCurrencyAmount', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1210, 3), )

    
    CurrencyAmount = property(__CurrencyAmount.value, __CurrencyAmount.set, None, None)

    
    # Element {http://www.w3schools.com}CommissionAndFeesCurrencyAndAmount uses Python identifier CommissionAndFeesCurrencyAndAmount
    __CommissionAndFeesCurrencyAndAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CommissionAndFeesCurrencyAndAmount'), 'CommissionAndFeesCurrencyAndAmount', '__httpwww_w3schools_com_MT304_SequenceD_AccountingInformation_httpwww_w3schools_comCommissionAndFeesCurrencyAndAmount', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1211, 3), )

    
    CommissionAndFeesCurrencyAndAmount = property(__CommissionAndFeesCurrencyAndAmount.value, __CommissionAndFeesCurrencyAndAmount.set, None, None)

    
    # Element {http://www.w3schools.com}CommissionAndFeesSettlementDate uses Python identifier CommissionAndFeesSettlementDate
    __CommissionAndFeesSettlementDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CommissionAndFeesSettlementDate'), 'CommissionAndFeesSettlementDate', '__httpwww_w3schools_com_MT304_SequenceD_AccountingInformation_httpwww_w3schools_comCommissionAndFeesSettlementDate', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1212, 3), )

    
    CommissionAndFeesSettlementDate = property(__CommissionAndFeesSettlementDate.value, __CommissionAndFeesSettlementDate.set, None, None)

    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceD_AccountingInformation_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='15D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1214, 2)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1214, 2)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceD_AccountingInformation_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1215, 2)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1215, 2)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    
    # Attribute formatTag uses Python identifier formatTag
    __formatTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'formatTag'), 'formatTag', '__httpwww_w3schools_com_MT304_SequenceD_AccountingInformation_formatTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='False')
    __formatTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1216, 2)
    __formatTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1216, 2)
    
    formatTag = property(__formatTag.value, __formatTag.set, None, None)

    _ElementMap.update({
        __ReferenceToPreviousDeals.name() : __ReferenceToPreviousDeals,
        __GainIndicator.name() : __GainIndicator,
        __CurrencyAmount.name() : __CurrencyAmount,
        __CommissionAndFeesCurrencyAndAmount.name() : __CommissionAndFeesCurrencyAndAmount,
        __CommissionAndFeesSettlementDate.name() : __CommissionAndFeesSettlementDate
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory,
        __formatTag.name() : __formatTag
    })
_module_typeBindings.MT304_SequenceD_AccountingInformation = MT304_SequenceD_AccountingInformation
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceD_AccountingInformation', MT304_SequenceD_AccountingInformation)


# Complex type {http://www.w3schools.com}MT304_SequenceE_NetAmountToBeSettled with content type ELEMENT_ONLY
class MT304_SequenceE_NetAmountToBeSettled (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceE_NetAmountToBeSettled with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceE_NetAmountToBeSettled')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1218, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}GainIndicator uses Python identifier GainIndicator
    __GainIndicator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GainIndicator'), 'GainIndicator', '__httpwww_w3schools_com_MT304_SequenceE_NetAmountToBeSettled_httpwww_w3schools_comGainIndicator', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1220, 3), )

    
    GainIndicator = property(__GainIndicator.value, __GainIndicator.set, None, None)

    
    # Element {http://www.w3schools.com}CurrencyAmount uses Python identifier CurrencyAmount
    __CurrencyAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CurrencyAmount'), 'CurrencyAmount', '__httpwww_w3schools_com_MT304_SequenceE_NetAmountToBeSettled_httpwww_w3schools_comCurrencyAmount', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1221, 3), )

    
    CurrencyAmount = property(__CurrencyAmount.value, __CurrencyAmount.set, None, None)

    
    # Element {http://www.w3schools.com}DeliveryAgent_A uses Python identifier DeliveryAgent_A
    __DeliveryAgent_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeliveryAgent_A'), 'DeliveryAgent_A', '__httpwww_w3schools_com_MT304_SequenceE_NetAmountToBeSettled_httpwww_w3schools_comDeliveryAgent_A', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1223, 4), )

    
    DeliveryAgent_A = property(__DeliveryAgent_A.value, __DeliveryAgent_A.set, None, None)

    
    # Element {http://www.w3schools.com}DeliveryAgent_D uses Python identifier DeliveryAgent_D
    __DeliveryAgent_D = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeliveryAgent_D'), 'DeliveryAgent_D', '__httpwww_w3schools_com_MT304_SequenceE_NetAmountToBeSettled_httpwww_w3schools_comDeliveryAgent_D', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1224, 4), )

    
    DeliveryAgent_D = property(__DeliveryAgent_D.value, __DeliveryAgent_D.set, None, None)

    
    # Element {http://www.w3schools.com}DeliveryAgent_J uses Python identifier DeliveryAgent_J
    __DeliveryAgent_J = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeliveryAgent_J'), 'DeliveryAgent_J', '__httpwww_w3schools_com_MT304_SequenceE_NetAmountToBeSettled_httpwww_w3schools_comDeliveryAgent_J', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1225, 4), )

    
    DeliveryAgent_J = property(__DeliveryAgent_J.value, __DeliveryAgent_J.set, None, None)

    
    # Element {http://www.w3schools.com}Intermediary_A uses Python identifier Intermediary_A
    __Intermediary_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_A'), 'Intermediary_A', '__httpwww_w3schools_com_MT304_SequenceE_NetAmountToBeSettled_httpwww_w3schools_comIntermediary_A', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1228, 4), )

    
    Intermediary_A = property(__Intermediary_A.value, __Intermediary_A.set, None, None)

    
    # Element {http://www.w3schools.com}Intermediary_D uses Python identifier Intermediary_D
    __Intermediary_D = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_D'), 'Intermediary_D', '__httpwww_w3schools_com_MT304_SequenceE_NetAmountToBeSettled_httpwww_w3schools_comIntermediary_D', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1229, 4), )

    
    Intermediary_D = property(__Intermediary_D.value, __Intermediary_D.set, None, None)

    
    # Element {http://www.w3schools.com}Intermediary_J uses Python identifier Intermediary_J
    __Intermediary_J = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_J'), 'Intermediary_J', '__httpwww_w3schools_com_MT304_SequenceE_NetAmountToBeSettled_httpwww_w3schools_comIntermediary_J', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1230, 4), )

    
    Intermediary_J = property(__Intermediary_J.value, __Intermediary_J.set, None, None)

    
    # Element {http://www.w3schools.com}ReceivingAgent_A uses Python identifier ReceivingAgent_A
    __ReceivingAgent_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReceivingAgent_A'), 'ReceivingAgent_A', '__httpwww_w3schools_com_MT304_SequenceE_NetAmountToBeSettled_httpwww_w3schools_comReceivingAgent_A', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1233, 4), )

    
    ReceivingAgent_A = property(__ReceivingAgent_A.value, __ReceivingAgent_A.set, None, None)

    
    # Element {http://www.w3schools.com}ReceivingAgent_D uses Python identifier ReceivingAgent_D
    __ReceivingAgent_D = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReceivingAgent_D'), 'ReceivingAgent_D', '__httpwww_w3schools_com_MT304_SequenceE_NetAmountToBeSettled_httpwww_w3schools_comReceivingAgent_D', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1234, 4), )

    
    ReceivingAgent_D = property(__ReceivingAgent_D.value, __ReceivingAgent_D.set, None, None)

    
    # Element {http://www.w3schools.com}ReceivingAgent_J uses Python identifier ReceivingAgent_J
    __ReceivingAgent_J = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReceivingAgent_J'), 'ReceivingAgent_J', '__httpwww_w3schools_com_MT304_SequenceE_NetAmountToBeSettled_httpwww_w3schools_comReceivingAgent_J', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1235, 4), )

    
    ReceivingAgent_J = property(__ReceivingAgent_J.value, __ReceivingAgent_J.set, None, None)

    
    # Element {http://www.w3schools.com}BeneficiaryInstitution_A uses Python identifier BeneficiaryInstitution_A
    __BeneficiaryInstitution_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryInstitution_A'), 'BeneficiaryInstitution_A', '__httpwww_w3schools_com_MT304_SequenceE_NetAmountToBeSettled_httpwww_w3schools_comBeneficiaryInstitution_A', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1238, 4), )

    
    BeneficiaryInstitution_A = property(__BeneficiaryInstitution_A.value, __BeneficiaryInstitution_A.set, None, None)

    
    # Element {http://www.w3schools.com}BeneficiaryInstitution_D uses Python identifier BeneficiaryInstitution_D
    __BeneficiaryInstitution_D = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryInstitution_D'), 'BeneficiaryInstitution_D', '__httpwww_w3schools_com_MT304_SequenceE_NetAmountToBeSettled_httpwww_w3schools_comBeneficiaryInstitution_D', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1239, 4), )

    
    BeneficiaryInstitution_D = property(__BeneficiaryInstitution_D.value, __BeneficiaryInstitution_D.set, None, None)

    
    # Element {http://www.w3schools.com}BeneficiaryInstitution_J uses Python identifier BeneficiaryInstitution_J
    __BeneficiaryInstitution_J = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryInstitution_J'), 'BeneficiaryInstitution_J', '__httpwww_w3schools_com_MT304_SequenceE_NetAmountToBeSettled_httpwww_w3schools_comBeneficiaryInstitution_J', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1240, 4), )

    
    BeneficiaryInstitution_J = property(__BeneficiaryInstitution_J.value, __BeneficiaryInstitution_J.set, None, None)

    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceE_NetAmountToBeSettled_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='15E')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1243, 2)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1243, 2)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceE_NetAmountToBeSettled_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1244, 2)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1244, 2)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    
    # Attribute formatTag uses Python identifier formatTag
    __formatTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'formatTag'), 'formatTag', '__httpwww_w3schools_com_MT304_SequenceE_NetAmountToBeSettled_formatTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='False')
    __formatTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1245, 2)
    __formatTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1245, 2)
    
    formatTag = property(__formatTag.value, __formatTag.set, None, None)

    _ElementMap.update({
        __GainIndicator.name() : __GainIndicator,
        __CurrencyAmount.name() : __CurrencyAmount,
        __DeliveryAgent_A.name() : __DeliveryAgent_A,
        __DeliveryAgent_D.name() : __DeliveryAgent_D,
        __DeliveryAgent_J.name() : __DeliveryAgent_J,
        __Intermediary_A.name() : __Intermediary_A,
        __Intermediary_D.name() : __Intermediary_D,
        __Intermediary_J.name() : __Intermediary_J,
        __ReceivingAgent_A.name() : __ReceivingAgent_A,
        __ReceivingAgent_D.name() : __ReceivingAgent_D,
        __ReceivingAgent_J.name() : __ReceivingAgent_J,
        __BeneficiaryInstitution_A.name() : __BeneficiaryInstitution_A,
        __BeneficiaryInstitution_D.name() : __BeneficiaryInstitution_D,
        __BeneficiaryInstitution_J.name() : __BeneficiaryInstitution_J
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory,
        __formatTag.name() : __formatTag
    })
_module_typeBindings.MT304_SequenceE_NetAmountToBeSettled = MT304_SequenceE_NetAmountToBeSettled
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceE_NetAmountToBeSettled', MT304_SequenceE_NetAmountToBeSettled)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1248, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}SequenceA_GeneralInformation uses Python identifier SequenceA_GeneralInformation
    __SequenceA_GeneralInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SequenceA_GeneralInformation'), 'SequenceA_GeneralInformation', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comSequenceA_GeneralInformation', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1250, 4), )

    
    SequenceA_GeneralInformation = property(__SequenceA_GeneralInformation.value, __SequenceA_GeneralInformation.set, None, None)

    
    # Element {http://www.w3schools.com}SequenceB_ForexTransactionDetails uses Python identifier SequenceB_ForexTransactionDetails
    __SequenceB_ForexTransactionDetails = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SequenceB_ForexTransactionDetails'), 'SequenceB_ForexTransactionDetails', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comSequenceB_ForexTransactionDetails', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1251, 4), )

    
    SequenceB_ForexTransactionDetails = property(__SequenceB_ForexTransactionDetails.value, __SequenceB_ForexTransactionDetails.set, None, None)

    
    # Element {http://www.w3schools.com}SequenceC_OptionalGeneralInformation uses Python identifier SequenceC_OptionalGeneralInformation
    __SequenceC_OptionalGeneralInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SequenceC_OptionalGeneralInformation'), 'SequenceC_OptionalGeneralInformation', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comSequenceC_OptionalGeneralInformation', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1252, 4), )

    
    SequenceC_OptionalGeneralInformation = property(__SequenceC_OptionalGeneralInformation.value, __SequenceC_OptionalGeneralInformation.set, None, None)

    
    # Element {http://www.w3schools.com}SequenceD_AccountingInformation uses Python identifier SequenceD_AccountingInformation
    __SequenceD_AccountingInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SequenceD_AccountingInformation'), 'SequenceD_AccountingInformation', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comSequenceD_AccountingInformation', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1253, 4), )

    
    SequenceD_AccountingInformation = property(__SequenceD_AccountingInformation.value, __SequenceD_AccountingInformation.set, None, None)

    
    # Element {http://www.w3schools.com}SequenceE_NetAmountToBeSettled uses Python identifier SequenceE_NetAmountToBeSettled
    __SequenceE_NetAmountToBeSettled = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SequenceE_NetAmountToBeSettled'), 'SequenceE_NetAmountToBeSettled', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comSequenceE_NetAmountToBeSettled', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1254, 4), )

    
    SequenceE_NetAmountToBeSettled = property(__SequenceE_NetAmountToBeSettled.value, __SequenceE_NetAmountToBeSettled.set, None, None)

    _ElementMap.update({
        __SequenceA_GeneralInformation.name() : __SequenceA_GeneralInformation,
        __SequenceB_ForexTransactionDetails.name() : __SequenceB_ForexTransactionDetails,
        __SequenceC_OptionalGeneralInformation.name() : __SequenceC_OptionalGeneralInformation,
        __SequenceD_AccountingInformation.name() : __SequenceD_AccountingInformation,
        __SequenceE_NetAmountToBeSettled.name() : __SequenceE_NetAmountToBeSettled
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON = CTD_ANON


# Complex type {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_20_Type with content type SIMPLE
class MT304_SequenceA_GeneralInformation_20_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_20_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceA_GeneralInformation_20_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceA_GeneralInformation_20_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 8, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceA_GeneralInformation_20_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_20_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='20')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 11, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 11, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_20_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 12, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 12, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceA_GeneralInformation_20_Type = MT304_SequenceA_GeneralInformation_20_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceA_GeneralInformation_20_Type', MT304_SequenceA_GeneralInformation_20_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_21_Type with content type SIMPLE
class MT304_SequenceA_GeneralInformation_21_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_21_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceA_GeneralInformation_21_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceA_GeneralInformation_21_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 21, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceA_GeneralInformation_21_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_21_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='21')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 24, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 24, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_21_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 25, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 25, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceA_GeneralInformation_21_Type = MT304_SequenceA_GeneralInformation_21_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceA_GeneralInformation_21_Type', MT304_SequenceA_GeneralInformation_21_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_22A_Type with content type SIMPLE
class MT304_SequenceA_GeneralInformation_22A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_22A_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceA_GeneralInformation_22A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceA_GeneralInformation_22A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 34, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceA_GeneralInformation_22A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_22A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='22A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 37, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 37, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_22A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 38, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 38, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceA_GeneralInformation_22A_Type = MT304_SequenceA_GeneralInformation_22A_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceA_GeneralInformation_22A_Type', MT304_SequenceA_GeneralInformation_22A_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_94A_Type with content type SIMPLE
class MT304_SequenceA_GeneralInformation_94A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_94A_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceA_GeneralInformation_94A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceA_GeneralInformation_94A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 47, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceA_GeneralInformation_94A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_94A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='94A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 50, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 50, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_94A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 51, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 51, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceA_GeneralInformation_94A_Type = MT304_SequenceA_GeneralInformation_94A_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceA_GeneralInformation_94A_Type', MT304_SequenceA_GeneralInformation_94A_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_17O_Type with content type SIMPLE
class MT304_SequenceA_GeneralInformation_17O_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_17O_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceA_GeneralInformation_17O_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceA_GeneralInformation_17O_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 60, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceA_GeneralInformation_17O_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_17O_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='17O')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 63, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 63, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_17O_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 64, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 64, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceA_GeneralInformation_17O_Type = MT304_SequenceA_GeneralInformation_17O_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceA_GeneralInformation_17O_Type', MT304_SequenceA_GeneralInformation_17O_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_17F_Type with content type SIMPLE
class MT304_SequenceA_GeneralInformation_17F_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_17F_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceA_GeneralInformation_17F_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceA_GeneralInformation_17F_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 73, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceA_GeneralInformation_17F_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_17F_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='17F')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 76, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 76, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_17F_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 77, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 77, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceA_GeneralInformation_17F_Type = MT304_SequenceA_GeneralInformation_17F_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceA_GeneralInformation_17F_Type', MT304_SequenceA_GeneralInformation_17F_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_17N_Type with content type SIMPLE
class MT304_SequenceA_GeneralInformation_17N_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_17N_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceA_GeneralInformation_17N_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceA_GeneralInformation_17N_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 86, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceA_GeneralInformation_17N_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_17N_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='17N')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 89, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 89, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_17N_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 90, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 90, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceA_GeneralInformation_17N_Type = MT304_SequenceA_GeneralInformation_17N_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceA_GeneralInformation_17N_Type', MT304_SequenceA_GeneralInformation_17N_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_83A_Type with content type SIMPLE
class MT304_SequenceA_GeneralInformation_83A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_83A_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceA_GeneralInformation_83A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceA_GeneralInformation_83A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 99, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceA_GeneralInformation_83A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_83A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='83A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 102, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 102, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_83A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 103, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 103, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceA_GeneralInformation_83A_Type = MT304_SequenceA_GeneralInformation_83A_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceA_GeneralInformation_83A_Type', MT304_SequenceA_GeneralInformation_83A_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_83J_Type with content type SIMPLE
class MT304_SequenceA_GeneralInformation_83J_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_83J_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceA_GeneralInformation_83J_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceA_GeneralInformation_83J_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 112, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceA_GeneralInformation_83J_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_83J_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='83J')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 115, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 115, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_83J_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 116, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 116, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceA_GeneralInformation_83J_Type = MT304_SequenceA_GeneralInformation_83J_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceA_GeneralInformation_83J_Type', MT304_SequenceA_GeneralInformation_83J_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_82A_Type with content type SIMPLE
class MT304_SequenceA_GeneralInformation_82A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_82A_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceA_GeneralInformation_82A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceA_GeneralInformation_82A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 125, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceA_GeneralInformation_82A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_82A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='82A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 128, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 128, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_82A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 129, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 129, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceA_GeneralInformation_82A_Type = MT304_SequenceA_GeneralInformation_82A_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceA_GeneralInformation_82A_Type', MT304_SequenceA_GeneralInformation_82A_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_82J_Type with content type SIMPLE
class MT304_SequenceA_GeneralInformation_82J_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_82J_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceA_GeneralInformation_82J_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceA_GeneralInformation_82J_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 138, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceA_GeneralInformation_82J_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_82J_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='82J')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 141, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 141, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_82J_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 142, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 142, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceA_GeneralInformation_82J_Type = MT304_SequenceA_GeneralInformation_82J_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceA_GeneralInformation_82J_Type', MT304_SequenceA_GeneralInformation_82J_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_87A_Type with content type SIMPLE
class MT304_SequenceA_GeneralInformation_87A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_87A_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceA_GeneralInformation_87A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceA_GeneralInformation_87A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 151, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceA_GeneralInformation_87A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_87A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='87A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 154, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 154, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_87A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 155, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 155, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceA_GeneralInformation_87A_Type = MT304_SequenceA_GeneralInformation_87A_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceA_GeneralInformation_87A_Type', MT304_SequenceA_GeneralInformation_87A_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_87J_Type with content type SIMPLE
class MT304_SequenceA_GeneralInformation_87J_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_87J_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceA_GeneralInformation_87J_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceA_GeneralInformation_87J_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 164, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceA_GeneralInformation_87J_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_87J_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='87J')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 167, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 167, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_87J_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 168, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 168, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceA_GeneralInformation_87J_Type = MT304_SequenceA_GeneralInformation_87J_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceA_GeneralInformation_87J_Type', MT304_SequenceA_GeneralInformation_87J_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_81A_Type with content type SIMPLE
class MT304_SequenceA_GeneralInformation_81A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_81A_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceA_GeneralInformation_81A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceA_GeneralInformation_81A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 177, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceA_GeneralInformation_81A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_81A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='81A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 180, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 180, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_81A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 181, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 181, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceA_GeneralInformation_81A_Type = MT304_SequenceA_GeneralInformation_81A_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceA_GeneralInformation_81A_Type', MT304_SequenceA_GeneralInformation_81A_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_81D_Type with content type SIMPLE
class MT304_SequenceA_GeneralInformation_81D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_81D_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceA_GeneralInformation_81D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceA_GeneralInformation_81D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 190, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceA_GeneralInformation_81D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_81D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='81D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 193, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 193, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_81D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 194, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 194, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceA_GeneralInformation_81D_Type = MT304_SequenceA_GeneralInformation_81D_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceA_GeneralInformation_81D_Type', MT304_SequenceA_GeneralInformation_81D_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_81J_Type with content type SIMPLE
class MT304_SequenceA_GeneralInformation_81J_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_81J_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceA_GeneralInformation_81J_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceA_GeneralInformation_81J_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 203, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceA_GeneralInformation_81J_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_81J_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='81J')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 206, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 206, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_81J_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 207, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 207, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceA_GeneralInformation_81J_Type = MT304_SequenceA_GeneralInformation_81J_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceA_GeneralInformation_81J_Type', MT304_SequenceA_GeneralInformation_81J_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_89A_Type with content type SIMPLE
class MT304_SequenceA_GeneralInformation_89A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_89A_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceA_GeneralInformation_89A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceA_GeneralInformation_89A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 216, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceA_GeneralInformation_89A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_89A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='89A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 219, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 219, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_89A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 220, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 220, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceA_GeneralInformation_89A_Type = MT304_SequenceA_GeneralInformation_89A_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceA_GeneralInformation_89A_Type', MT304_SequenceA_GeneralInformation_89A_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_89D_Type with content type SIMPLE
class MT304_SequenceA_GeneralInformation_89D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_89D_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceA_GeneralInformation_89D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceA_GeneralInformation_89D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 229, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceA_GeneralInformation_89D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_89D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='89D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 232, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 232, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_89D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 233, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 233, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceA_GeneralInformation_89D_Type = MT304_SequenceA_GeneralInformation_89D_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceA_GeneralInformation_89D_Type', MT304_SequenceA_GeneralInformation_89D_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_89J_Type with content type SIMPLE
class MT304_SequenceA_GeneralInformation_89J_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_89J_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceA_GeneralInformation_89J_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceA_GeneralInformation_89J_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 242, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceA_GeneralInformation_89J_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_89J_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='89J')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 245, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 245, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_89J_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 246, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 246, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceA_GeneralInformation_89J_Type = MT304_SequenceA_GeneralInformation_89J_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceA_GeneralInformation_89J_Type', MT304_SequenceA_GeneralInformation_89J_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_17I_Type with content type SIMPLE
class MT304_SequenceA_GeneralInformation_17I_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_17I_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceA_GeneralInformation_17I_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceA_GeneralInformation_17I_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 255, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceA_GeneralInformation_17I_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_17I_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='17I')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 258, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 258, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_17I_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 259, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 259, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceA_GeneralInformation_17I_Type = MT304_SequenceA_GeneralInformation_17I_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceA_GeneralInformation_17I_Type', MT304_SequenceA_GeneralInformation_17I_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_77H_Type with content type SIMPLE
class MT304_SequenceA_GeneralInformation_77H_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_77H_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceA_GeneralInformation_77H_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceA_GeneralInformation_77H_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 268, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceA_GeneralInformation_77H_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_77H_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='77H')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 271, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 271, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_77H_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 272, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 272, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceA_GeneralInformation_77H_Type = MT304_SequenceA_GeneralInformation_77H_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceA_GeneralInformation_77H_Type', MT304_SequenceA_GeneralInformation_77H_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_14C_Type with content type SIMPLE
class MT304_SequenceA_GeneralInformation_14C_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_14C_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceA_GeneralInformation_14C_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceA_GeneralInformation_14C_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 281, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceA_GeneralInformation_14C_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_14C_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='14C')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 284, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 284, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_14C_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 285, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 285, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceA_GeneralInformation_14C_Type = MT304_SequenceA_GeneralInformation_14C_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceA_GeneralInformation_14C_Type', MT304_SequenceA_GeneralInformation_14C_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_32E_Type with content type SIMPLE
class MT304_SequenceA_GeneralInformation_32E_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_32E_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceA_GeneralInformation_32E_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceA_GeneralInformation_32E_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 294, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceA_GeneralInformation_32E_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_32E_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='32E')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 297, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 297, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_32E_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 298, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 298, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceA_GeneralInformation_32E_Type = MT304_SequenceA_GeneralInformation_32E_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceA_GeneralInformation_32E_Type', MT304_SequenceA_GeneralInformation_32E_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_30U_Type with content type SIMPLE
class MT304_SequenceA_GeneralInformation_30U_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_30U_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceA_GeneralInformation_30U_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceA_GeneralInformation_30U_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 307, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceA_GeneralInformation_30U_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_30U_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='30U')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 310, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 310, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_30U_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 311, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 311, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceA_GeneralInformation_30U_Type = MT304_SequenceA_GeneralInformation_30U_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceA_GeneralInformation_30U_Type', MT304_SequenceA_GeneralInformation_30U_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_14S_Type with content type SIMPLE
class MT304_SequenceA_GeneralInformation_14S_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_14S_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceA_GeneralInformation_14S_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceA_GeneralInformation_14S_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 320, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceA_GeneralInformation_14S_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_14S_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='14S')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 323, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 323, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_14S_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 324, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 324, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceA_GeneralInformation_14S_Type = MT304_SequenceA_GeneralInformation_14S_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceA_GeneralInformation_14S_Type', MT304_SequenceA_GeneralInformation_14S_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_26K_Type with content type SIMPLE
class MT304_SequenceA_GeneralInformation_26K_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_26K_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceA_GeneralInformation_26K_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceA_GeneralInformation_26K_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 333, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceA_GeneralInformation_26K_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_26K_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='26K')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 336, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 336, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_26K_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 337, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 337, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceA_GeneralInformation_26K_Type = MT304_SequenceA_GeneralInformation_26K_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceA_GeneralInformation_26K_Type', MT304_SequenceA_GeneralInformation_26K_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_21A_Type with content type SIMPLE
class MT304_SequenceA_GeneralInformation_21A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_21A_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceA_GeneralInformation_21A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceA_GeneralInformation_21A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 346, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceA_GeneralInformation_21A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_21A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='21A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 349, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 349, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_21A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 350, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 350, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceA_GeneralInformation_21A_Type = MT304_SequenceA_GeneralInformation_21A_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceA_GeneralInformation_21A_Type', MT304_SequenceA_GeneralInformation_21A_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_14E_Type with content type SIMPLE
class MT304_SequenceA_GeneralInformation_14E_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceA_GeneralInformation_14E_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceA_GeneralInformation_14E_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceA_GeneralInformation_14E_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 359, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceA_GeneralInformation_14E_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_14E_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='14E')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 362, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 362, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceA_GeneralInformation_14E_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 363, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 363, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceA_GeneralInformation_14E_Type = MT304_SequenceA_GeneralInformation_14E_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceA_GeneralInformation_14E_Type', MT304_SequenceA_GeneralInformation_14E_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_30T_Type with content type SIMPLE
class MT304_SequenceB_ForexTransactionDetails_30T_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_30T_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceB_ForexTransactionDetails_30T_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceB_ForexTransactionDetails_30T_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 372, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceB_ForexTransactionDetails_30T_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_30T_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='30T')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 375, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 375, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_30T_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 376, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 376, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceB_ForexTransactionDetails_30T_Type = MT304_SequenceB_ForexTransactionDetails_30T_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceB_ForexTransactionDetails_30T_Type', MT304_SequenceB_ForexTransactionDetails_30T_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_30V_Type with content type SIMPLE
class MT304_SequenceB_ForexTransactionDetails_30V_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_30V_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceB_ForexTransactionDetails_30V_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceB_ForexTransactionDetails_30V_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 385, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceB_ForexTransactionDetails_30V_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_30V_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='30V')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 388, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 388, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_30V_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 389, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 389, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceB_ForexTransactionDetails_30V_Type = MT304_SequenceB_ForexTransactionDetails_30V_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceB_ForexTransactionDetails_30V_Type', MT304_SequenceB_ForexTransactionDetails_30V_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_36_Type with content type SIMPLE
class MT304_SequenceB_ForexTransactionDetails_36_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_36_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceB_ForexTransactionDetails_36_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceB_ForexTransactionDetails_36_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 398, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceB_ForexTransactionDetails_36_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_36_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='36')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 401, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 401, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_36_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 402, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 402, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceB_ForexTransactionDetails_36_Type = MT304_SequenceB_ForexTransactionDetails_36_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceB_ForexTransactionDetails_36_Type', MT304_SequenceB_ForexTransactionDetails_36_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_39M_Type with content type SIMPLE
class MT304_SequenceB_ForexTransactionDetails_39M_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_39M_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceB_ForexTransactionDetails_39M_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceB_ForexTransactionDetails_39M_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 411, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceB_ForexTransactionDetails_39M_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_39M_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='39M')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 414, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 414, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_39M_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 415, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 415, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceB_ForexTransactionDetails_39M_Type = MT304_SequenceB_ForexTransactionDetails_39M_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceB_ForexTransactionDetails_39M_Type', MT304_SequenceB_ForexTransactionDetails_39M_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_35C_Type with content type SIMPLE
class MT304_SequenceB_ForexTransactionDetails_35C_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_35C_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceB_ForexTransactionDetails_35C_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceB_ForexTransactionDetails_35C_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 424, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceB_ForexTransactionDetails_35C_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_35C_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='35C')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 427, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 427, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_35C_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 428, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 428, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceB_ForexTransactionDetails_35C_Type = MT304_SequenceB_ForexTransactionDetails_35C_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceB_ForexTransactionDetails_35C_Type', MT304_SequenceB_ForexTransactionDetails_35C_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_32B_Type with content type SIMPLE
class MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_32B_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_32B_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_32B_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_32B_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 437, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_32B_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_32B_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='32B')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 440, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 440, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_32B_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 441, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 441, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_32B_Type = MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_32B_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_32B_Type', MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_32B_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_53A_Type with content type SIMPLE
class MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_53A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_53A_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_53A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_53A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 450, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_53A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_53A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='53A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 453, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 453, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_53A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 454, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 454, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_53A_Type = MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_53A_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_53A_Type', MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_53A_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_53J_Type with content type SIMPLE
class MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_53J_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_53J_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_53J_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_53J_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 463, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_53J_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_53J_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='53J')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 466, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 466, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_53J_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 467, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 467, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_53J_Type = MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_53J_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_53J_Type', MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_53J_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_56A_Type with content type SIMPLE
class MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_56A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_56A_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_56A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_56A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 476, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_56A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_56A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='56A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 479, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 479, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_56A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 480, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 480, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_56A_Type = MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_56A_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_56A_Type', MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_56A_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_56J_Type with content type SIMPLE
class MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_56J_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_56J_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_56J_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_56J_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 489, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_56J_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_56J_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='56J')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 492, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 492, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_56J_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 493, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 493, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_56J_Type = MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_56J_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_56J_Type', MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_56J_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_57A_Type with content type SIMPLE
class MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_57A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_57A_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_57A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_57A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 502, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_57A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_57A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='57A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 505, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 505, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_57A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 506, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 506, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_57A_Type = MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_57A_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_57A_Type', MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_57A_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_57J_Type with content type SIMPLE
class MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_57J_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_57J_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_57J_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_57J_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 515, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_57J_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_57J_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='57J')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 518, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 518, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_57J_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 519, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 519, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_57J_Type = MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_57J_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_57J_Type', MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_57J_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_33B_Type with content type SIMPLE
class MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_33B_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_33B_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_33B_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_33B_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 528, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_33B_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_33B_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='33B')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 531, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 531, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_33B_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 532, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 532, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_33B_Type = MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_33B_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_33B_Type', MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_33B_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_53A_Type with content type SIMPLE
class MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_53A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_53A_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_53A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_53A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 541, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_53A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_53A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='53A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 544, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 544, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_53A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 545, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 545, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_53A_Type = MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_53A_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_53A_Type', MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_53A_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_53J_Type with content type SIMPLE
class MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_53J_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_53J_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_53J_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_53J_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 554, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_53J_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_53J_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='53J')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 557, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 557, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_53J_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 558, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 558, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_53J_Type = MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_53J_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_53J_Type', MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_53J_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_56A_Type with content type SIMPLE
class MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_56A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_56A_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_56A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_56A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 567, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_56A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_56A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='56A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 570, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 570, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_56A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 571, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 571, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_56A_Type = MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_56A_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_56A_Type', MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_56A_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_56J_Type with content type SIMPLE
class MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_56J_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_56J_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_56J_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_56J_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 580, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_56J_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_56J_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='56J')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 583, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 583, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_56J_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 584, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 584, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_56J_Type = MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_56J_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_56J_Type', MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_56J_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_57A_Type with content type SIMPLE
class MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_57A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_57A_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_57A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_57A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 593, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_57A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_57A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='57A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 596, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 596, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_57A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 597, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 597, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_57A_Type = MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_57A_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_57A_Type', MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_57A_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_57J_Type with content type SIMPLE
class MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_57J_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_57J_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_57J_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_57J_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 606, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_57J_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_57J_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='57J')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 609, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 609, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_57J_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 610, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 610, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_57J_Type = MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_57J_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_57J_Type', MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_57J_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_58A_Type with content type SIMPLE
class MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_58A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_58A_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_58A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_58A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 619, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_58A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_58A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='58A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 622, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 622, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_58A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 623, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 623, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_58A_Type = MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_58A_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_58A_Type', MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_58A_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_58J_Type with content type SIMPLE
class MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_58J_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_58J_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_58J_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_58J_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 632, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_58J_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_58J_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='58J')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 635, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 635, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_58J_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 636, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 636, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_58J_Type = MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_58J_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_58J_Type', MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_58J_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceC_OptionalGeneralInformation_21A_Type with content type SIMPLE
class MT304_SequenceC_OptionalGeneralInformation_21A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceC_OptionalGeneralInformation_21A_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceC_OptionalGeneralInformation_21A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceC_OptionalGeneralInformation_21A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 645, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceC_OptionalGeneralInformation_21A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceC_OptionalGeneralInformation_21A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='21A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 648, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 648, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceC_OptionalGeneralInformation_21A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 649, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 649, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceC_OptionalGeneralInformation_21A_Type = MT304_SequenceC_OptionalGeneralInformation_21A_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceC_OptionalGeneralInformation_21A_Type', MT304_SequenceC_OptionalGeneralInformation_21A_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceC_OptionalGeneralInformation_21G_Type with content type SIMPLE
class MT304_SequenceC_OptionalGeneralInformation_21G_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceC_OptionalGeneralInformation_21G_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceC_OptionalGeneralInformation_21G_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceC_OptionalGeneralInformation_21G_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 658, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceC_OptionalGeneralInformation_21G_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceC_OptionalGeneralInformation_21G_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='21G')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 661, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 661, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceC_OptionalGeneralInformation_21G_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 662, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 662, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceC_OptionalGeneralInformation_21G_Type = MT304_SequenceC_OptionalGeneralInformation_21G_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceC_OptionalGeneralInformation_21G_Type', MT304_SequenceC_OptionalGeneralInformation_21G_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22L_Type with content type SIMPLE
class MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22L_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22L_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22L_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22L_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 671, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22L_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22L_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='22L')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 674, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 674, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22L_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 675, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 675, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22L_Type = MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22L_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22L_Type', MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22L_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22M_Type with content type SIMPLE
class MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22M_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22M_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22M_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22M_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 684, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22M_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22M_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='22M')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 687, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 687, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22M_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 688, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 688, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22M_Type = MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22M_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22M_Type', MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22M_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22N_Type with content type SIMPLE
class MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22N_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22N_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22N_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22N_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 697, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22N_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22N_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='22N')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 700, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 700, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22N_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 701, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 701, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22N_Type = MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22N_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22N_Type', MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22N_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier_22P_Type with content type SIMPLE
class MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier_22P_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier_22P_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier_22P_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier_22P_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 710, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier_22P_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier_22P_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='22P')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 713, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 713, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier_22P_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 714, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 714, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier_22P_Type = MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier_22P_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier_22P_Type', MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier_22P_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier_22R_Type with content type SIMPLE
class MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier_22R_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier_22R_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier_22R_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier_22R_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 723, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier_22R_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier_22R_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='22R')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 726, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 726, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier_22R_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 727, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 727, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier_22R_Type = MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier_22R_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier_22R_Type', MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier_22R_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceC_OptionalGeneralInformation_22U_Type with content type SIMPLE
class MT304_SequenceC_OptionalGeneralInformation_22U_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceC_OptionalGeneralInformation_22U_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceC_OptionalGeneralInformation_22U_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceC_OptionalGeneralInformation_22U_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 736, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceC_OptionalGeneralInformation_22U_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceC_OptionalGeneralInformation_22U_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='22U')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 739, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 739, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceC_OptionalGeneralInformation_22U_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 740, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 740, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceC_OptionalGeneralInformation_22U_Type = MT304_SequenceC_OptionalGeneralInformation_22U_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceC_OptionalGeneralInformation_22U_Type', MT304_SequenceC_OptionalGeneralInformation_22U_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceC_OptionalGeneralInformation_35B_Type with content type SIMPLE
class MT304_SequenceC_OptionalGeneralInformation_35B_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceC_OptionalGeneralInformation_35B_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceC_OptionalGeneralInformation_35B_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceC_OptionalGeneralInformation_35B_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 749, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceC_OptionalGeneralInformation_35B_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceC_OptionalGeneralInformation_35B_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='35B')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 752, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 752, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceC_OptionalGeneralInformation_35B_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 753, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 753, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceC_OptionalGeneralInformation_35B_Type = MT304_SequenceC_OptionalGeneralInformation_35B_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceC_OptionalGeneralInformation_35B_Type', MT304_SequenceC_OptionalGeneralInformation_35B_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceC_OptionalGeneralInformation_22V_Type with content type SIMPLE
class MT304_SequenceC_OptionalGeneralInformation_22V_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceC_OptionalGeneralInformation_22V_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceC_OptionalGeneralInformation_22V_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceC_OptionalGeneralInformation_22V_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 762, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceC_OptionalGeneralInformation_22V_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceC_OptionalGeneralInformation_22V_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='22V')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 765, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 765, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceC_OptionalGeneralInformation_22V_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 766, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 766, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceC_OptionalGeneralInformation_22V_Type = MT304_SequenceC_OptionalGeneralInformation_22V_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceC_OptionalGeneralInformation_22V_Type', MT304_SequenceC_OptionalGeneralInformation_22V_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceC_OptionalGeneralInformation_98D_Type with content type SIMPLE
class MT304_SequenceC_OptionalGeneralInformation_98D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceC_OptionalGeneralInformation_98D_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceC_OptionalGeneralInformation_98D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceC_OptionalGeneralInformation_98D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 775, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceC_OptionalGeneralInformation_98D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceC_OptionalGeneralInformation_98D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='98D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 778, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 778, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceC_OptionalGeneralInformation_98D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 779, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 779, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceC_OptionalGeneralInformation_98D_Type = MT304_SequenceC_OptionalGeneralInformation_98D_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceC_OptionalGeneralInformation_98D_Type', MT304_SequenceC_OptionalGeneralInformation_98D_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceC_OptionalGeneralInformation_98G_Type with content type SIMPLE
class MT304_SequenceC_OptionalGeneralInformation_98G_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceC_OptionalGeneralInformation_98G_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceC_OptionalGeneralInformation_98G_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceC_OptionalGeneralInformation_98G_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 788, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceC_OptionalGeneralInformation_98G_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceC_OptionalGeneralInformation_98G_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='98G')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 791, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 791, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceC_OptionalGeneralInformation_98G_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 792, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 792, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceC_OptionalGeneralInformation_98G_Type = MT304_SequenceC_OptionalGeneralInformation_98G_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceC_OptionalGeneralInformation_98G_Type', MT304_SequenceC_OptionalGeneralInformation_98G_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceC_OptionalGeneralInformation_29A_Type with content type SIMPLE
class MT304_SequenceC_OptionalGeneralInformation_29A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceC_OptionalGeneralInformation_29A_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceC_OptionalGeneralInformation_29A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceC_OptionalGeneralInformation_29A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 801, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceC_OptionalGeneralInformation_29A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceC_OptionalGeneralInformation_29A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='29A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 804, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 804, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceC_OptionalGeneralInformation_29A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 805, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 805, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceC_OptionalGeneralInformation_29A_Type = MT304_SequenceC_OptionalGeneralInformation_29A_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceC_OptionalGeneralInformation_29A_Type', MT304_SequenceC_OptionalGeneralInformation_29A_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceC_OptionalGeneralInformation_34C_Type with content type SIMPLE
class MT304_SequenceC_OptionalGeneralInformation_34C_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceC_OptionalGeneralInformation_34C_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceC_OptionalGeneralInformation_34C_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceC_OptionalGeneralInformation_34C_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 814, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceC_OptionalGeneralInformation_34C_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceC_OptionalGeneralInformation_34C_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='34C')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 817, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 817, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceC_OptionalGeneralInformation_34C_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 818, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 818, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceC_OptionalGeneralInformation_34C_Type = MT304_SequenceC_OptionalGeneralInformation_34C_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceC_OptionalGeneralInformation_34C_Type', MT304_SequenceC_OptionalGeneralInformation_34C_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceD_AccountingInformation_21P_Type with content type SIMPLE
class MT304_SequenceD_AccountingInformation_21P_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceD_AccountingInformation_21P_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceD_AccountingInformation_21P_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceD_AccountingInformation_21P_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 835, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceD_AccountingInformation_21P_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceD_AccountingInformation_21P_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='21P')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 838, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 838, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceD_AccountingInformation_21P_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 839, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 839, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceD_AccountingInformation_21P_Type = MT304_SequenceD_AccountingInformation_21P_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceD_AccountingInformation_21P_Type', MT304_SequenceD_AccountingInformation_21P_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceD_AccountingInformation_17G_Type with content type SIMPLE
class MT304_SequenceD_AccountingInformation_17G_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceD_AccountingInformation_17G_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceD_AccountingInformation_17G_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceD_AccountingInformation_17G_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 848, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceD_AccountingInformation_17G_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceD_AccountingInformation_17G_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='17G')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 851, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 851, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceD_AccountingInformation_17G_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 852, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 852, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceD_AccountingInformation_17G_Type = MT304_SequenceD_AccountingInformation_17G_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceD_AccountingInformation_17G_Type', MT304_SequenceD_AccountingInformation_17G_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceD_AccountingInformation_32G_Type with content type SIMPLE
class MT304_SequenceD_AccountingInformation_32G_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceD_AccountingInformation_32G_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceD_AccountingInformation_32G_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceD_AccountingInformation_32G_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 861, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceD_AccountingInformation_32G_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceD_AccountingInformation_32G_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='32G')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 864, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 864, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceD_AccountingInformation_32G_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 865, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 865, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceD_AccountingInformation_32G_Type = MT304_SequenceD_AccountingInformation_32G_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceD_AccountingInformation_32G_Type', MT304_SequenceD_AccountingInformation_32G_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceD_AccountingInformation_34B_Type with content type SIMPLE
class MT304_SequenceD_AccountingInformation_34B_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceD_AccountingInformation_34B_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceD_AccountingInformation_34B_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceD_AccountingInformation_34B_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 874, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceD_AccountingInformation_34B_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceD_AccountingInformation_34B_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='34B')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 877, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 877, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceD_AccountingInformation_34B_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 878, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 878, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceD_AccountingInformation_34B_Type = MT304_SequenceD_AccountingInformation_34B_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceD_AccountingInformation_34B_Type', MT304_SequenceD_AccountingInformation_34B_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceD_AccountingInformation_30F_Type with content type SIMPLE
class MT304_SequenceD_AccountingInformation_30F_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceD_AccountingInformation_30F_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceD_AccountingInformation_30F_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceD_AccountingInformation_30F_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 887, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceD_AccountingInformation_30F_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceD_AccountingInformation_30F_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='30F')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 890, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 890, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceD_AccountingInformation_30F_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 891, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 891, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceD_AccountingInformation_30F_Type = MT304_SequenceD_AccountingInformation_30F_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceD_AccountingInformation_30F_Type', MT304_SequenceD_AccountingInformation_30F_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceE_NetAmountToBeSettled_17G_Type with content type SIMPLE
class MT304_SequenceE_NetAmountToBeSettled_17G_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceE_NetAmountToBeSettled_17G_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceE_NetAmountToBeSettled_17G_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceE_NetAmountToBeSettled_17G_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 900, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceE_NetAmountToBeSettled_17G_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceE_NetAmountToBeSettled_17G_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='17G')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 903, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 903, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceE_NetAmountToBeSettled_17G_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 904, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 904, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceE_NetAmountToBeSettled_17G_Type = MT304_SequenceE_NetAmountToBeSettled_17G_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceE_NetAmountToBeSettled_17G_Type', MT304_SequenceE_NetAmountToBeSettled_17G_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceE_NetAmountToBeSettled_32G_Type with content type SIMPLE
class MT304_SequenceE_NetAmountToBeSettled_32G_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceE_NetAmountToBeSettled_32G_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceE_NetAmountToBeSettled_32G_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceE_NetAmountToBeSettled_32G_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 913, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceE_NetAmountToBeSettled_32G_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceE_NetAmountToBeSettled_32G_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='32G')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 916, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 916, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceE_NetAmountToBeSettled_32G_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 917, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 917, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceE_NetAmountToBeSettled_32G_Type = MT304_SequenceE_NetAmountToBeSettled_32G_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceE_NetAmountToBeSettled_32G_Type', MT304_SequenceE_NetAmountToBeSettled_32G_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceE_NetAmountToBeSettled_53A_Type with content type SIMPLE
class MT304_SequenceE_NetAmountToBeSettled_53A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceE_NetAmountToBeSettled_53A_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceE_NetAmountToBeSettled_53A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceE_NetAmountToBeSettled_53A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 926, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceE_NetAmountToBeSettled_53A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceE_NetAmountToBeSettled_53A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='53A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 929, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 929, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceE_NetAmountToBeSettled_53A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 930, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 930, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceE_NetAmountToBeSettled_53A_Type = MT304_SequenceE_NetAmountToBeSettled_53A_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceE_NetAmountToBeSettled_53A_Type', MT304_SequenceE_NetAmountToBeSettled_53A_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceE_NetAmountToBeSettled_53D_Type with content type SIMPLE
class MT304_SequenceE_NetAmountToBeSettled_53D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceE_NetAmountToBeSettled_53D_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceE_NetAmountToBeSettled_53D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceE_NetAmountToBeSettled_53D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 939, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceE_NetAmountToBeSettled_53D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceE_NetAmountToBeSettled_53D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='53D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 942, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 942, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceE_NetAmountToBeSettled_53D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 943, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 943, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceE_NetAmountToBeSettled_53D_Type = MT304_SequenceE_NetAmountToBeSettled_53D_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceE_NetAmountToBeSettled_53D_Type', MT304_SequenceE_NetAmountToBeSettled_53D_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceE_NetAmountToBeSettled_53J_Type with content type SIMPLE
class MT304_SequenceE_NetAmountToBeSettled_53J_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceE_NetAmountToBeSettled_53J_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceE_NetAmountToBeSettled_53J_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceE_NetAmountToBeSettled_53J_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 952, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceE_NetAmountToBeSettled_53J_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceE_NetAmountToBeSettled_53J_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='53J')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 955, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 955, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceE_NetAmountToBeSettled_53J_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 956, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 956, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceE_NetAmountToBeSettled_53J_Type = MT304_SequenceE_NetAmountToBeSettled_53J_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceE_NetAmountToBeSettled_53J_Type', MT304_SequenceE_NetAmountToBeSettled_53J_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceE_NetAmountToBeSettled_56A_Type with content type SIMPLE
class MT304_SequenceE_NetAmountToBeSettled_56A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceE_NetAmountToBeSettled_56A_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceE_NetAmountToBeSettled_56A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceE_NetAmountToBeSettled_56A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 965, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceE_NetAmountToBeSettled_56A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceE_NetAmountToBeSettled_56A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='56A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 968, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 968, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceE_NetAmountToBeSettled_56A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 969, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 969, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceE_NetAmountToBeSettled_56A_Type = MT304_SequenceE_NetAmountToBeSettled_56A_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceE_NetAmountToBeSettled_56A_Type', MT304_SequenceE_NetAmountToBeSettled_56A_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceE_NetAmountToBeSettled_56D_Type with content type SIMPLE
class MT304_SequenceE_NetAmountToBeSettled_56D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceE_NetAmountToBeSettled_56D_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceE_NetAmountToBeSettled_56D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceE_NetAmountToBeSettled_56D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 978, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceE_NetAmountToBeSettled_56D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceE_NetAmountToBeSettled_56D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='56D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 981, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 981, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceE_NetAmountToBeSettled_56D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 982, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 982, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceE_NetAmountToBeSettled_56D_Type = MT304_SequenceE_NetAmountToBeSettled_56D_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceE_NetAmountToBeSettled_56D_Type', MT304_SequenceE_NetAmountToBeSettled_56D_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceE_NetAmountToBeSettled_56J_Type with content type SIMPLE
class MT304_SequenceE_NetAmountToBeSettled_56J_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceE_NetAmountToBeSettled_56J_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceE_NetAmountToBeSettled_56J_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceE_NetAmountToBeSettled_56J_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 991, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceE_NetAmountToBeSettled_56J_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceE_NetAmountToBeSettled_56J_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='56J')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 994, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 994, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceE_NetAmountToBeSettled_56J_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 995, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 995, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceE_NetAmountToBeSettled_56J_Type = MT304_SequenceE_NetAmountToBeSettled_56J_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceE_NetAmountToBeSettled_56J_Type', MT304_SequenceE_NetAmountToBeSettled_56J_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceE_NetAmountToBeSettled_57A_Type with content type SIMPLE
class MT304_SequenceE_NetAmountToBeSettled_57A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceE_NetAmountToBeSettled_57A_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceE_NetAmountToBeSettled_57A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceE_NetAmountToBeSettled_57A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1004, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceE_NetAmountToBeSettled_57A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceE_NetAmountToBeSettled_57A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='57A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1007, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1007, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceE_NetAmountToBeSettled_57A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1008, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1008, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceE_NetAmountToBeSettled_57A_Type = MT304_SequenceE_NetAmountToBeSettled_57A_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceE_NetAmountToBeSettled_57A_Type', MT304_SequenceE_NetAmountToBeSettled_57A_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceE_NetAmountToBeSettled_57D_Type with content type SIMPLE
class MT304_SequenceE_NetAmountToBeSettled_57D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceE_NetAmountToBeSettled_57D_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceE_NetAmountToBeSettled_57D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceE_NetAmountToBeSettled_57D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1017, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceE_NetAmountToBeSettled_57D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceE_NetAmountToBeSettled_57D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='57D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1020, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1020, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceE_NetAmountToBeSettled_57D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1021, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1021, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceE_NetAmountToBeSettled_57D_Type = MT304_SequenceE_NetAmountToBeSettled_57D_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceE_NetAmountToBeSettled_57D_Type', MT304_SequenceE_NetAmountToBeSettled_57D_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceE_NetAmountToBeSettled_57J_Type with content type SIMPLE
class MT304_SequenceE_NetAmountToBeSettled_57J_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceE_NetAmountToBeSettled_57J_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceE_NetAmountToBeSettled_57J_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceE_NetAmountToBeSettled_57J_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1030, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceE_NetAmountToBeSettled_57J_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceE_NetAmountToBeSettled_57J_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='57J')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1033, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1033, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceE_NetAmountToBeSettled_57J_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1034, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1034, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceE_NetAmountToBeSettled_57J_Type = MT304_SequenceE_NetAmountToBeSettled_57J_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceE_NetAmountToBeSettled_57J_Type', MT304_SequenceE_NetAmountToBeSettled_57J_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceE_NetAmountToBeSettled_58A_Type with content type SIMPLE
class MT304_SequenceE_NetAmountToBeSettled_58A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceE_NetAmountToBeSettled_58A_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceE_NetAmountToBeSettled_58A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceE_NetAmountToBeSettled_58A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1043, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceE_NetAmountToBeSettled_58A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceE_NetAmountToBeSettled_58A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='58A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1046, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1046, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceE_NetAmountToBeSettled_58A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1047, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1047, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceE_NetAmountToBeSettled_58A_Type = MT304_SequenceE_NetAmountToBeSettled_58A_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceE_NetAmountToBeSettled_58A_Type', MT304_SequenceE_NetAmountToBeSettled_58A_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceE_NetAmountToBeSettled_58D_Type with content type SIMPLE
class MT304_SequenceE_NetAmountToBeSettled_58D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceE_NetAmountToBeSettled_58D_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceE_NetAmountToBeSettled_58D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceE_NetAmountToBeSettled_58D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1056, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceE_NetAmountToBeSettled_58D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceE_NetAmountToBeSettled_58D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='58D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1059, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1059, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceE_NetAmountToBeSettled_58D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1060, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1060, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceE_NetAmountToBeSettled_58D_Type = MT304_SequenceE_NetAmountToBeSettled_58D_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceE_NetAmountToBeSettled_58D_Type', MT304_SequenceE_NetAmountToBeSettled_58D_Type)


# Complex type {http://www.w3schools.com}MT304_SequenceE_NetAmountToBeSettled_58J_Type with content type SIMPLE
class MT304_SequenceE_NetAmountToBeSettled_58J_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT304_SequenceE_NetAmountToBeSettled_58J_Type with content type SIMPLE"""
    _TypeDefinition = MT304_SequenceE_NetAmountToBeSettled_58J_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT304_SequenceE_NetAmountToBeSettled_58J_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1069, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT304_SequenceE_NetAmountToBeSettled_58J_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT304_SequenceE_NetAmountToBeSettled_58J_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='58J')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1072, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1072, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT304_SequenceE_NetAmountToBeSettled_58J_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1073, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1073, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT304_SequenceE_NetAmountToBeSettled_58J_Type = MT304_SequenceE_NetAmountToBeSettled_58J_Type
Namespace.addCategoryObject('typeBinding', 'MT304_SequenceE_NetAmountToBeSettled_58J_Type', MT304_SequenceE_NetAmountToBeSettled_58J_Type)


MT304 = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MT304'), CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1247, 1))
Namespace.addCategoryObject('elementBinding', MT304.name().localName(), MT304)



MT304_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SendersReference'), MT304_SequenceA_GeneralInformation_20_Type, scope=MT304_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1079, 3)))

MT304_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RelatedReference'), MT304_SequenceA_GeneralInformation_21_Type, scope=MT304_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1080, 3)))

MT304_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TypeOfOperation'), MT304_SequenceA_GeneralInformation_22A_Type, scope=MT304_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1081, 3)))

MT304_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScopeOfOperation'), MT304_SequenceA_GeneralInformation_94A_Type, scope=MT304_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1082, 3)))

MT304_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OpenIndicator'), MT304_SequenceA_GeneralInformation_17O_Type, scope=MT304_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1083, 3)))

MT304_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FinalCloseIndicator'), MT304_SequenceA_GeneralInformation_17F_Type, scope=MT304_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1084, 3)))

MT304_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NetSettlementIndicator'), MT304_SequenceA_GeneralInformation_17N_Type, scope=MT304_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1085, 3)))

MT304_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Fund_A'), MT304_SequenceA_GeneralInformation_83A_Type, scope=MT304_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1087, 4)))

MT304_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Fund_J'), MT304_SequenceA_GeneralInformation_83J_Type, scope=MT304_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1088, 4)))

MT304_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FundManager_A'), MT304_SequenceA_GeneralInformation_82A_Type, scope=MT304_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1091, 4)))

MT304_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FundManager_J'), MT304_SequenceA_GeneralInformation_82J_Type, scope=MT304_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1092, 4)))

MT304_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExecutingBroker_A'), MT304_SequenceA_GeneralInformation_87A_Type, scope=MT304_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1095, 4)))

MT304_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExecutingBroker_J'), MT304_SequenceA_GeneralInformation_87J_Type, scope=MT304_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1096, 4)))

MT304_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CentralCounterpartyClearingHouse_A'), MT304_SequenceA_GeneralInformation_81A_Type, scope=MT304_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1099, 4)))

MT304_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CentralCounterpartyClearingHouse_D'), MT304_SequenceA_GeneralInformation_81D_Type, scope=MT304_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1100, 4)))

MT304_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CentralCounterpartyClearingHouse_J'), MT304_SequenceA_GeneralInformation_81J_Type, scope=MT304_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1101, 4)))

MT304_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ClearingBroker_A'), MT304_SequenceA_GeneralInformation_89A_Type, scope=MT304_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1104, 4)))

MT304_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ClearingBroker_D'), MT304_SequenceA_GeneralInformation_89D_Type, scope=MT304_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1105, 4)))

MT304_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ClearingBroker_J'), MT304_SequenceA_GeneralInformation_89J_Type, scope=MT304_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1106, 4)))

MT304_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PaymentVersusPaymentSettlementIndicator'), MT304_SequenceA_GeneralInformation_17I_Type, scope=MT304_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1108, 3)))

MT304_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TypeDateVersionOfTheAgreement'), MT304_SequenceA_GeneralInformation_77H_Type, scope=MT304_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1109, 3)))

MT304_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'YearOfDefinitions'), MT304_SequenceA_GeneralInformation_14C_Type, scope=MT304_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1110, 3)))

MT304_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SettlementCurrency'), MT304_SequenceA_GeneralInformation_32E_Type, scope=MT304_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1111, 3)))

MT304_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ValuationDate'), MT304_SequenceA_GeneralInformation_30U_Type, scope=MT304_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1112, 3)))

MT304_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SettlementRateSource'), MT304_SequenceA_GeneralInformation_14S_Type, scope=MT304_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1113, 3)))

MT304_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CalculationAgent'), MT304_SequenceA_GeneralInformation_26K_Type, scope=MT304_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1114, 3)))

MT304_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReferenceToOpeningInstruction'), MT304_SequenceA_GeneralInformation_21A_Type, scope=MT304_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1115, 3)))

MT304_SequenceA_GeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ClearingOrSettlementSession'), MT304_SequenceA_GeneralInformation_14E_Type, scope=MT304_SequenceA_GeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1116, 3)))

def _BuildAutomaton ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton
    del _BuildAutomaton
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1080, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1083, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1084, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1085, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1098, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1099, 4))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1100, 4))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1101, 4))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1103, 3))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1104, 4))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1105, 4))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1106, 4))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1108, 3))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1109, 3))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1110, 3))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1111, 3))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1112, 3))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1113, 3))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1114, 3))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1115, 3))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1116, 3))
    counters.add(cc_20)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SendersReference')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1079, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RelatedReference')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1080, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TypeOfOperation')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1081, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ScopeOfOperation')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1082, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OpenIndicator')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1083, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FinalCloseIndicator')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1084, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NetSettlementIndicator')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1085, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Fund_A')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1087, 4))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Fund_J')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1088, 4))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FundManager_A')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1091, 4))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FundManager_J')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1092, 4))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExecutingBroker_A')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1095, 4))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExecutingBroker_J')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1096, 4))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CentralCounterpartyClearingHouse_A')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1099, 4))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CentralCounterpartyClearingHouse_D')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1100, 4))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CentralCounterpartyClearingHouse_J')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1101, 4))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ClearingBroker_A')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1104, 4))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ClearingBroker_D')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1105, 4))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ClearingBroker_J')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1106, 4))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PaymentVersusPaymentSettlementIndicator')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1108, 3))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TypeDateVersionOfTheAgreement')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1109, 3))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'YearOfDefinitions')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1110, 3))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SettlementCurrency')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1111, 3))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ValuationDate')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1112, 3))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SettlementRateSource')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1113, 3))
    st_24 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CalculationAgent')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1114, 3))
    st_25 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReferenceToOpeningInstruction')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1115, 3))
    st_26 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_26)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceA_GeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ClearingOrSettlementSession')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1116, 3))
    st_27 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_27)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_7, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_9, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_10, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_11, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_25._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_26._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_20, True) ]))
    st_27._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MT304_SequenceA_GeneralInformation._Automaton = _BuildAutomaton()




MT304_SequenceB_ForexTransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TradeDate'), MT304_SequenceB_ForexTransactionDetails_30T_Type, scope=MT304_SequenceB_ForexTransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1124, 3)))

MT304_SequenceB_ForexTransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ValueDate'), MT304_SequenceB_ForexTransactionDetails_30V_Type, scope=MT304_SequenceB_ForexTransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1125, 3)))

MT304_SequenceB_ForexTransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExchangeRate'), MT304_SequenceB_ForexTransactionDetails_36_Type, scope=MT304_SequenceB_ForexTransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1126, 3)))

MT304_SequenceB_ForexTransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PaymentClearingCentre'), MT304_SequenceB_ForexTransactionDetails_39M_Type, scope=MT304_SequenceB_ForexTransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1127, 3)))

MT304_SequenceB_ForexTransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DigitalTokenIdentifier'), MT304_SequenceB_ForexTransactionDetails_35C_Type, scope=MT304_SequenceB_ForexTransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1128, 3)))

MT304_SequenceB_ForexTransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SubsequenceB1_AmountBought'), MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought, scope=MT304_SequenceB_ForexTransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1129, 3)))

MT304_SequenceB_ForexTransactionDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SubsequenceB2_AmountSold'), MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold, scope=MT304_SequenceB_ForexTransactionDetails, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1130, 3)))

def _BuildAutomaton_ ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_
    del _BuildAutomaton_
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1127, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1128, 3))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceB_ForexTransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TradeDate')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1124, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceB_ForexTransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ValueDate')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1125, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceB_ForexTransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExchangeRate')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1126, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceB_ForexTransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PaymentClearingCentre')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1127, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceB_ForexTransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DigitalTokenIdentifier')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1128, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceB_ForexTransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SubsequenceB1_AmountBought')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1129, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceB_ForexTransactionDetails._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SubsequenceB2_AmountSold')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1130, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MT304_SequenceB_ForexTransactionDetails._Automaton = _BuildAutomaton_()




MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CurrencyAmountBought'), MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_32B_Type, scope=MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1138, 3)))

MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeliveryAgent_A'), MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_53A_Type, scope=MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1140, 4)))

MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeliveryAgent_J'), MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_53J_Type, scope=MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1141, 4)))

MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_A'), MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_56A_Type, scope=MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1144, 4)))

MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_J'), MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_56J_Type, scope=MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1145, 4)))

MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReceivingAgent_A'), MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_57A_Type, scope=MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1148, 4)))

MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReceivingAgent_J'), MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_57J_Type, scope=MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1149, 4)))

def _BuildAutomaton_2 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_2
    del _BuildAutomaton_2
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1143, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1144, 4))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1145, 4))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1147, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1148, 4))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1149, 4))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CurrencyAmountBought')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1138, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeliveryAgent_A')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1140, 4))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeliveryAgent_J')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1141, 4))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_A')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1144, 4))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_J')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1145, 4))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReceivingAgent_A')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1148, 4))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReceivingAgent_J')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1149, 4))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought._Automaton = _BuildAutomaton_2()




MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CurrencyAmountSold'), MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_33B_Type, scope=MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1155, 3)))

MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeliveryAgent_A'), MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_53A_Type, scope=MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1157, 4)))

MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeliveryAgent_J'), MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_53J_Type, scope=MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1158, 4)))

MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_A'), MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_56A_Type, scope=MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1161, 4)))

MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_J'), MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_56J_Type, scope=MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1162, 4)))

MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReceivingAgent_A'), MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_57A_Type, scope=MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1165, 4)))

MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReceivingAgent_J'), MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_57J_Type, scope=MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1166, 4)))

MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryInstitution_A'), MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_58A_Type, scope=MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1169, 4)))

MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryInstitution_J'), MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_58J_Type, scope=MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1170, 4)))

def _BuildAutomaton_3 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_3
    del _BuildAutomaton_3
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1156, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1157, 4))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1158, 4))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1160, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1161, 4))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1162, 4))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1168, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1169, 4))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1170, 4))
    counters.add(cc_8)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CurrencyAmountSold')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1155, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeliveryAgent_A')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1157, 4))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeliveryAgent_J')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1158, 4))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_A')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1161, 4))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_J')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1162, 4))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReceivingAgent_A')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1165, 4))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReceivingAgent_J')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1166, 4))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryInstitution_A')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1169, 4))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryInstitution_J')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1170, 4))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False),
        fac.UpdateInstruction(cc_4, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False),
        fac.UpdateInstruction(cc_5, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True),
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold._Automaton = _BuildAutomaton_3()




MT304_SequenceC_OptionalGeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReferenceToTheAssociatedTrade'), MT304_SequenceC_OptionalGeneralInformation_21A_Type, scope=MT304_SequenceC_OptionalGeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1176, 3)))

MT304_SequenceC_OptionalGeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExecutingBrokersReference'), MT304_SequenceC_OptionalGeneralInformation_21G_Type, scope=MT304_SequenceC_OptionalGeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1177, 3)))

MT304_SequenceC_OptionalGeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SubsequenceC1_UniqueTransactionIdentifier'), MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier, scope=MT304_SequenceC_OptionalGeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1178, 3)))

MT304_SequenceC_OptionalGeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UnderlyingProductIdentifier'), MT304_SequenceC_OptionalGeneralInformation_22U_Type, scope=MT304_SequenceC_OptionalGeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1179, 3)))

MT304_SequenceC_OptionalGeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IdentificationOfFinancialInstrument'), MT304_SequenceC_OptionalGeneralInformation_35B_Type, scope=MT304_SequenceC_OptionalGeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1180, 3)))

MT304_SequenceC_OptionalGeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExecutionVenue'), MT304_SequenceC_OptionalGeneralInformation_22V_Type, scope=MT304_SequenceC_OptionalGeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1181, 3)))

MT304_SequenceC_OptionalGeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExecutionTimestamp'), MT304_SequenceC_OptionalGeneralInformation_98D_Type, scope=MT304_SequenceC_OptionalGeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1182, 3)))

MT304_SequenceC_OptionalGeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ClearingTimestamp'), MT304_SequenceC_OptionalGeneralInformation_98G_Type, scope=MT304_SequenceC_OptionalGeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1183, 3)))

MT304_SequenceC_OptionalGeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ContactInformation'), MT304_SequenceC_OptionalGeneralInformation_29A_Type, scope=MT304_SequenceC_OptionalGeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1184, 3)))

MT304_SequenceC_OptionalGeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CommissionAndFees'), MT304_SequenceC_OptionalGeneralInformation_34C_Type, scope=MT304_SequenceC_OptionalGeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1185, 3)))

MT304_SequenceC_OptionalGeneralInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SenderToReceiverInformation'), MT304_SequenceC_OptionalGeneralInformation_72_Type, scope=MT304_SequenceC_OptionalGeneralInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1186, 3)))

def _BuildAutomaton_4 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_4
    del _BuildAutomaton_4
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1176, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1177, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1178, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1179, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1180, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1181, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1182, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1183, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1184, 3))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1185, 3))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1186, 3))
    counters.add(cc_10)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceC_OptionalGeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReferenceToTheAssociatedTrade')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1176, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceC_OptionalGeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExecutingBrokersReference')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1177, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceC_OptionalGeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SubsequenceC1_UniqueTransactionIdentifier')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1178, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceC_OptionalGeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UnderlyingProductIdentifier')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1179, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceC_OptionalGeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IdentificationOfFinancialInstrument')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1180, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceC_OptionalGeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExecutionVenue')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1181, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceC_OptionalGeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExecutionTimestamp')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1182, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceC_OptionalGeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ClearingTimestamp')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1183, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceC_OptionalGeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ContactInformation')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1184, 3))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceC_OptionalGeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CommissionAndFees')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1185, 3))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceC_OptionalGeneralInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SenderToReceiverInformation')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1186, 3))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
MT304_SequenceC_OptionalGeneralInformation._Automaton = _BuildAutomaton_4()




MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReportingJurisdiction'), MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22L_Type, scope=MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1194, 3)))

MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UTINamespaceIssuerCode'), MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22M_Type, scope=MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1195, 3)))

MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TransactionIdentifier'), MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22N_Type, scope=MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1196, 3)))

MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SubsequenceC1a_PriorUniqueTransactionIdentifier'), MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier, scope=MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1197, 3)))

def _BuildAutomaton_5 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_5
    del _BuildAutomaton_5
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1197, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReportingJurisdiction')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1194, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UTINamespaceIssuerCode')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1195, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TransactionIdentifier')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1196, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SubsequenceC1a_PriorUniqueTransactionIdentifier')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1197, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier._Automaton = _BuildAutomaton_5()




MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PUTINamespaceIssuerCode'), MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier_22P_Type, scope=MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1202, 3)))

MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PriorTransactionIdentifier'), MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier_22R_Type, scope=MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1203, 3)))

def _BuildAutomaton_6 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_6
    del _BuildAutomaton_6
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PUTINamespaceIssuerCode')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1202, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PriorTransactionIdentifier')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1203, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier._Automaton = _BuildAutomaton_6()




MT304_SequenceD_AccountingInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReferenceToPreviousDeals'), MT304_SequenceD_AccountingInformation_21P_Type, scope=MT304_SequenceD_AccountingInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1208, 3)))

MT304_SequenceD_AccountingInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GainIndicator'), MT304_SequenceD_AccountingInformation_17G_Type, scope=MT304_SequenceD_AccountingInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1209, 3)))

MT304_SequenceD_AccountingInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CurrencyAmount'), MT304_SequenceD_AccountingInformation_32G_Type, scope=MT304_SequenceD_AccountingInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1210, 3)))

MT304_SequenceD_AccountingInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CommissionAndFeesCurrencyAndAmount'), MT304_SequenceD_AccountingInformation_34B_Type, scope=MT304_SequenceD_AccountingInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1211, 3)))

MT304_SequenceD_AccountingInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CommissionAndFeesSettlementDate'), MT304_SequenceD_AccountingInformation_30F_Type, scope=MT304_SequenceD_AccountingInformation, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1212, 3)))

def _BuildAutomaton_7 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_7
    del _BuildAutomaton_7
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1208, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1209, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1210, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1211, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1212, 3))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceD_AccountingInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReferenceToPreviousDeals')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1208, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceD_AccountingInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GainIndicator')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1209, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceD_AccountingInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CurrencyAmount')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1210, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceD_AccountingInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CommissionAndFeesCurrencyAndAmount')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1211, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceD_AccountingInformation._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CommissionAndFeesSettlementDate')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1212, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
MT304_SequenceD_AccountingInformation._Automaton = _BuildAutomaton_7()




MT304_SequenceE_NetAmountToBeSettled._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GainIndicator'), MT304_SequenceE_NetAmountToBeSettled_17G_Type, scope=MT304_SequenceE_NetAmountToBeSettled, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1220, 3)))

MT304_SequenceE_NetAmountToBeSettled._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CurrencyAmount'), MT304_SequenceE_NetAmountToBeSettled_32G_Type, scope=MT304_SequenceE_NetAmountToBeSettled, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1221, 3)))

MT304_SequenceE_NetAmountToBeSettled._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeliveryAgent_A'), MT304_SequenceE_NetAmountToBeSettled_53A_Type, scope=MT304_SequenceE_NetAmountToBeSettled, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1223, 4)))

MT304_SequenceE_NetAmountToBeSettled._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeliveryAgent_D'), MT304_SequenceE_NetAmountToBeSettled_53D_Type, scope=MT304_SequenceE_NetAmountToBeSettled, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1224, 4)))

MT304_SequenceE_NetAmountToBeSettled._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeliveryAgent_J'), MT304_SequenceE_NetAmountToBeSettled_53J_Type, scope=MT304_SequenceE_NetAmountToBeSettled, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1225, 4)))

MT304_SequenceE_NetAmountToBeSettled._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_A'), MT304_SequenceE_NetAmountToBeSettled_56A_Type, scope=MT304_SequenceE_NetAmountToBeSettled, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1228, 4)))

MT304_SequenceE_NetAmountToBeSettled._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_D'), MT304_SequenceE_NetAmountToBeSettled_56D_Type, scope=MT304_SequenceE_NetAmountToBeSettled, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1229, 4)))

MT304_SequenceE_NetAmountToBeSettled._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_J'), MT304_SequenceE_NetAmountToBeSettled_56J_Type, scope=MT304_SequenceE_NetAmountToBeSettled, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1230, 4)))

MT304_SequenceE_NetAmountToBeSettled._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReceivingAgent_A'), MT304_SequenceE_NetAmountToBeSettled_57A_Type, scope=MT304_SequenceE_NetAmountToBeSettled, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1233, 4)))

MT304_SequenceE_NetAmountToBeSettled._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReceivingAgent_D'), MT304_SequenceE_NetAmountToBeSettled_57D_Type, scope=MT304_SequenceE_NetAmountToBeSettled, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1234, 4)))

MT304_SequenceE_NetAmountToBeSettled._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReceivingAgent_J'), MT304_SequenceE_NetAmountToBeSettled_57J_Type, scope=MT304_SequenceE_NetAmountToBeSettled, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1235, 4)))

MT304_SequenceE_NetAmountToBeSettled._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryInstitution_A'), MT304_SequenceE_NetAmountToBeSettled_58A_Type, scope=MT304_SequenceE_NetAmountToBeSettled, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1238, 4)))

MT304_SequenceE_NetAmountToBeSettled._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryInstitution_D'), MT304_SequenceE_NetAmountToBeSettled_58D_Type, scope=MT304_SequenceE_NetAmountToBeSettled, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1239, 4)))

MT304_SequenceE_NetAmountToBeSettled._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryInstitution_J'), MT304_SequenceE_NetAmountToBeSettled_58J_Type, scope=MT304_SequenceE_NetAmountToBeSettled, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1240, 4)))

def _BuildAutomaton_8 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_8
    del _BuildAutomaton_8
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1222, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1223, 4))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1224, 4))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1225, 4))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1227, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1228, 4))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1229, 4))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1230, 4))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1232, 3))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1233, 4))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1234, 4))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1235, 4))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1237, 3))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1238, 4))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1239, 4))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1240, 4))
    counters.add(cc_15)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceE_NetAmountToBeSettled._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GainIndicator')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1220, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceE_NetAmountToBeSettled._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CurrencyAmount')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1221, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceE_NetAmountToBeSettled._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeliveryAgent_A')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1223, 4))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceE_NetAmountToBeSettled._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeliveryAgent_D')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1224, 4))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceE_NetAmountToBeSettled._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeliveryAgent_J')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1225, 4))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceE_NetAmountToBeSettled._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_A')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1228, 4))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceE_NetAmountToBeSettled._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_D')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1229, 4))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceE_NetAmountToBeSettled._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_J')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1230, 4))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceE_NetAmountToBeSettled._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReceivingAgent_A')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1233, 4))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceE_NetAmountToBeSettled._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReceivingAgent_D')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1234, 4))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceE_NetAmountToBeSettled._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReceivingAgent_J')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1235, 4))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceE_NetAmountToBeSettled._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryInstitution_A')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1238, 4))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceE_NetAmountToBeSettled._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryInstitution_D')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1239, 4))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(MT304_SequenceE_NetAmountToBeSettled._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BeneficiaryInstitution_J')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1240, 4))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False),
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_9, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_10, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_11, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_12, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True),
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True),
        fac.UpdateInstruction(cc_13, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_12, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True),
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True),
        fac.UpdateInstruction(cc_14, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_12, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True),
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_15, True) ]))
    st_13._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MT304_SequenceE_NetAmountToBeSettled._Automaton = _BuildAutomaton_8()




CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SequenceA_GeneralInformation'), MT304_SequenceA_GeneralInformation, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1250, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SequenceB_ForexTransactionDetails'), MT304_SequenceB_ForexTransactionDetails, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1251, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SequenceC_OptionalGeneralInformation'), MT304_SequenceC_OptionalGeneralInformation, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1252, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SequenceD_AccountingInformation'), MT304_SequenceD_AccountingInformation, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1253, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SequenceE_NetAmountToBeSettled'), MT304_SequenceE_NetAmountToBeSettled, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1254, 4)))

def _BuildAutomaton_9 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_9
    del _BuildAutomaton_9
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1252, 4))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1253, 4))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1254, 4))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SequenceA_GeneralInformation')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1250, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SequenceB_ForexTransactionDetails')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1251, 4))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SequenceC_OptionalGeneralInformation')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1252, 4))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SequenceD_AccountingInformation')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1253, 4))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SequenceE_NetAmountToBeSettled')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT304.xsd', 1254, 4))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON._Automaton = _BuildAutomaton_9()



...

}

decls[FXSLTemplate] {
}

clx FObject [FXSLTemplate] {
  MT101
<?xml version="1.0" ?>
<xs:schema elementFormDefault="qualified" targetNamespace="http://www.w3schools.com" xmlns="http://www.w3schools.com" xmlns:xs="http://www.w3.org/2001/XMLSchema">
 <xs:simpleType name="MT101_SequenceA_GeneralInformation_20_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([^/]([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,14}[^/])"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT101_SequenceA_GeneralInformation_20_Type">
  <xs:simpleContent>
   <xs:extension base="MT101_SequenceA_GeneralInformation_20_Type_Pattern">
    <xs:attribute fixed="20" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT101_SequenceA_GeneralInformation_21R_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([^/]([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,16}[^/])"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT101_SequenceA_GeneralInformation_21R_Type">
  <xs:simpleContent>
   <xs:extension base="MT101_SequenceA_GeneralInformation_21R_Type_Pattern">
    <xs:attribute fixed="21R" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT101_SequenceA_GeneralInformation_28D_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([0-9]{1,5}/[0-9]{1,5})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT101_SequenceA_GeneralInformation_28D_Type">
  <xs:simpleContent>
   <xs:extension base="MT101_SequenceA_GeneralInformation_28D_Type_Pattern">
    <xs:attribute fixed="28D" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT101_SequenceA_GeneralInformation_50C_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT101_SequenceA_GeneralInformation_50C_Type">
  <xs:simpleContent>
   <xs:extension base="MT101_SequenceA_GeneralInformation_50C_Type_Pattern">
    <xs:attribute fixed="50C" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT101_SequenceA_GeneralInformation_50L_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT101_SequenceA_GeneralInformation_50L_Type">
  <xs:simpleContent>
   <xs:extension base="MT101_SequenceA_GeneralInformation_50L_Type_Pattern">
    <xs:attribute fixed="50L" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT101_SequenceA_GeneralInformation_50F_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,4})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT101_SequenceA_GeneralInformation_50F_Type">
  <xs:simpleContent>
   <xs:extension base="MT101_SequenceA_GeneralInformation_50F_Type_Pattern">
    <xs:attribute fixed="50F" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT101_SequenceA_GeneralInformation_50G_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34}(\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT101_SequenceA_GeneralInformation_50G_Type">
  <xs:simpleContent>
   <xs:extension base="MT101_SequenceA_GeneralInformation_50G_Type_Pattern">
    <xs:attribute fixed="50G" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT101_SequenceA_GeneralInformation_50H_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34}(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,4})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT101_SequenceA_GeneralInformation_50H_Type">
  <xs:simpleContent>
   <xs:extension base="MT101_SequenceA_GeneralInformation_50H_Type_Pattern">
    <xs:attribute fixed="50H" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT101_SequenceA_GeneralInformation_52A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT101_SequenceA_GeneralInformation_52A_Type">
  <xs:simpleContent>
   <xs:extension base="MT101_SequenceA_GeneralInformation_52A_Type_Pattern">
    <xs:attribute fixed="52A" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT101_SequenceA_GeneralInformation_52C_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT101_SequenceA_GeneralInformation_52C_Type">
  <xs:simpleContent>
   <xs:extension base="MT101_SequenceA_GeneralInformation_52C_Type_Pattern">
    <xs:attribute fixed="52C" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT101_SequenceA_GeneralInformation_51A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT101_SequenceA_GeneralInformation_51A_Type">
  <xs:simpleContent>
   <xs:extension base="MT101_SequenceA_GeneralInformation_51A_Type_Pattern">
    <xs:attribute fixed="51A" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT101_SequenceA_GeneralInformation_30_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([0-9]{6})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT101_SequenceA_GeneralInformation_30_Type">
  <xs:simpleContent>
   <xs:extension base="MT101_SequenceA_GeneralInformation_30_Type_Pattern">
    <xs:attribute fixed="30" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT101_SequenceA_GeneralInformation_25_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT101_SequenceA_GeneralInformation_25_Type">
  <xs:simpleContent>
   <xs:extension base="MT101_SequenceA_GeneralInformation_25_Type_Pattern">
    <xs:attribute fixed="25" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT101_SequenceB_TransactionDetails_21_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([^/]([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,14}[^/])"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT101_SequenceB_TransactionDetails_21_Type">
  <xs:simpleContent>
   <xs:extension base="MT101_SequenceB_TransactionDetails_21_Type_Pattern">
    <xs:attribute fixed="21" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT101_SequenceB_TransactionDetails_21F_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([^/]([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,16}[^/])"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT101_SequenceB_TransactionDetails_21F_Type">
  <xs:simpleContent>
   <xs:extension base="MT101_SequenceB_TransactionDetails_21F_Type_Pattern">
    <xs:attribute fixed="21F" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT101_SequenceB_TransactionDetails_23E_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([A-Z0-9]{4}(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,30})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT101_SequenceB_TransactionDetails_23E_Type">
  <xs:simpleContent>
   <xs:extension base="MT101_SequenceB_TransactionDetails_23E_Type_Pattern">
    <xs:attribute fixed="23E" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT101_SequenceB_TransactionDetails_32B_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT101_SequenceB_TransactionDetails_32B_Type">
  <xs:simpleContent>
   <xs:extension base="MT101_SequenceB_TransactionDetails_32B_Type_Pattern">
    <xs:attribute fixed="32B" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT101_SequenceB_TransactionDetails_50C_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT101_SequenceB_TransactionDetails_50C_Type">
  <xs:simpleContent>
   <xs:extension base="MT101_SequenceB_TransactionDetails_50C_Type_Pattern">
    <xs:attribute fixed="50C" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT101_SequenceB_TransactionDetails_50L_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT101_SequenceB_TransactionDetails_50L_Type">
  <xs:simpleContent>
   <xs:extension base="MT101_SequenceB_TransactionDetails_50L_Type_Pattern">
    <xs:attribute fixed="50L" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT101_SequenceB_TransactionDetails_50F_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,4})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT101_SequenceB_TransactionDetails_50F_Type">
  <xs:simpleContent>
   <xs:extension base="MT101_SequenceB_TransactionDetails_50F_Type_Pattern">
    <xs:attribute fixed="50F" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT101_SequenceB_TransactionDetails_50G_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34}(\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT101_SequenceB_TransactionDetails_50G_Type">
  <xs:simpleContent>
   <xs:extension base="MT101_SequenceB_TransactionDetails_50G_Type_Pattern">
    <xs:attribute fixed="50G" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT101_SequenceB_TransactionDetails_50H_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34}(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,4})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT101_SequenceB_TransactionDetails_50H_Type">
  <xs:simpleContent>
   <xs:extension base="MT101_SequenceB_TransactionDetails_50H_Type_Pattern">
    <xs:attribute fixed="50H" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT101_SequenceB_TransactionDetails_52A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT101_SequenceB_TransactionDetails_52A_Type">
  <xs:simpleContent>
   <xs:extension base="MT101_SequenceB_TransactionDetails_52A_Type_Pattern">
    <xs:attribute fixed="52A" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT101_SequenceB_TransactionDetails_52C_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,4})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT101_SequenceB_TransactionDetails_52C_Type">
  <xs:simpleContent>
   <xs:extension base="MT101_SequenceB_TransactionDetails_52C_Type_Pattern">
    <xs:attribute fixed="52C" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT101_SequenceB_TransactionDetails_56A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT101_SequenceB_TransactionDetails_56A_Type">
  <xs:simpleContent>
   <xs:extension base="MT101_SequenceB_TransactionDetails_56A_Type_Pattern">
    <xs:attribute fixed="56A" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT101_SequenceB_TransactionDetails_56C_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT101_SequenceB_TransactionDetails_56C_Type">
  <xs:simpleContent>
   <xs:extension base="MT101_SequenceB_TransactionDetails_56C_Type_Pattern">
    <xs:attribute fixed="56C" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT101_SequenceB_TransactionDetails_56D_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,4})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT101_SequenceB_TransactionDetails_56D_Type">
  <xs:simpleContent>
   <xs:extension base="MT101_SequenceB_TransactionDetails_56D_Type_Pattern">
    <xs:attribute fixed="56D" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT101_SequenceB_TransactionDetails_57A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT101_SequenceB_TransactionDetails_57A_Type">
  <xs:simpleContent>
   <xs:extension base="MT101_SequenceB_TransactionDetails_57A_Type_Pattern">
    <xs:attribute fixed="57A" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT101_SequenceB_TransactionDetails_57C_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT101_SequenceB_TransactionDetails_57C_Type">
  <xs:simpleContent>
   <xs:extension base="MT101_SequenceB_TransactionDetails_57C_Type_Pattern">
    <xs:attribute fixed="57C" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT101_SequenceB_TransactionDetails_57D_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,4})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT101_SequenceB_TransactionDetails_57D_Type">
  <xs:simpleContent>
   <xs:extension base="MT101_SequenceB_TransactionDetails_57D_Type_Pattern">
    <xs:attribute fixed="57D" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT101_SequenceB_TransactionDetails_59_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,4})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT101_SequenceB_TransactionDetails_59_Type">
  <xs:simpleContent>
   <xs:extension base="MT101_SequenceB_TransactionDetails_59_Type_Pattern">
    <xs:attribute fixed="59" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT101_SequenceB_TransactionDetails_59A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT101_SequenceB_TransactionDetails_59A_Type">
  <xs:simpleContent>
   <xs:extension base="MT101_SequenceB_TransactionDetails_59A_Type_Pattern">
    <xs:attribute fixed="59A" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT101_SequenceB_TransactionDetails_59F_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34}\n)?((1|2|3)/(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,33}\n?){1,4}))"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT101_SequenceB_TransactionDetails_59F_Type">
  <xs:simpleContent>
   <xs:extension base="MT101_SequenceB_TransactionDetails_59F_Type_Pattern">
    <xs:attribute fixed="59F" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT101_SequenceB_TransactionDetails_70_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,4})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT101_SequenceB_TransactionDetails_70_Type">
  <xs:simpleContent>
   <xs:extension base="MT101_SequenceB_TransactionDetails_70_Type_Pattern">
    <xs:attribute fixed="70" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT101_SequenceB_TransactionDetails_77B_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,3})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT101_SequenceB_TransactionDetails_77B_Type">
  <xs:simpleContent>
   <xs:extension base="MT101_SequenceB_TransactionDetails_77B_Type_Pattern">
    <xs:attribute fixed="77B" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT101_SequenceB_TransactionDetails_33B_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT101_SequenceB_TransactionDetails_33B_Type">
  <xs:simpleContent>
   <xs:extension base="MT101_SequenceB_TransactionDetails_33B_Type_Pattern">
    <xs:attribute fixed="33B" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT101_SequenceB_TransactionDetails_71A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([A-Z]{3})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT101_SequenceB_TransactionDetails_71A_Type">
  <xs:simpleContent>
   <xs:extension base="MT101_SequenceB_TransactionDetails_71A_Type_Pattern">
    <xs:attribute fixed="71A" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT101_SequenceB_TransactionDetails_25A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT101_SequenceB_TransactionDetails_25A_Type">
  <xs:simpleContent>
   <xs:extension base="MT101_SequenceB_TransactionDetails_25A_Type_Pattern">
    <xs:attribute fixed="25A" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT101_SequenceB_TransactionDetails_36_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([0-9,(?0-9)]{1,12})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT101_SequenceB_TransactionDetails_36_Type">
  <xs:simpleContent>
   <xs:extension base="MT101_SequenceB_TransactionDetails_36_Type_Pattern">
    <xs:attribute fixed="36" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:complexType name="MT101_SequenceA_GeneralInformation">
  <xs:sequence>
   <xs:element name="SendersReference" type="MT101_SequenceA_GeneralInformation_20_Type"/>
   <xs:element minOccurs="0" name="CustomerSpecifiedReference" type="MT101_SequenceA_GeneralInformation_21R_Type"/>
   <xs:element name="MessageIndexTotal" type="MT101_SequenceA_GeneralInformation_28D_Type"/>
   <xs:choice minOccurs="0">
    <xs:element minOccurs="0" name="InstructingParty_C" type="MT101_SequenceA_GeneralInformation_50C_Type"/>
    <xs:element minOccurs="0" name="InstructingParty_L" type="MT101_SequenceA_GeneralInformation_50L_Type"/>
   </xs:choice>
   <xs:choice minOccurs="0">
    <xs:element minOccurs="0" name="OrderingCustomer_F" type="MT101_SequenceA_GeneralInformation_50F_Type"/>
    <xs:element minOccurs="0" name="OrderingCustomer_G" type="MT101_SequenceA_GeneralInformation_50G_Type"/>
    <xs:element minOccurs="0" name="OrderingCustomer_H" type="MT101_SequenceA_GeneralInformation_50H_Type"/>
   </xs:choice>
   <xs:choice minOccurs="0">
    <xs:element minOccurs="0" name="AccountServicingInstitution_A" type="MT101_SequenceA_GeneralInformation_52A_Type"/>
    <xs:element minOccurs="0" name="AccountServicingInstitution_C" type="MT101_SequenceA_GeneralInformation_52C_Type"/>
   </xs:choice>
   <xs:element minOccurs="0" name="SendingInstitution" type="MT101_SequenceA_GeneralInformation_51A_Type"/>
   <xs:element name="RequestedExecutionDate" type="MT101_SequenceA_GeneralInformation_30_Type"/>
   <xs:element minOccurs="0" name="Authorisation" type="MT101_SequenceA_GeneralInformation_25_Type"/>
  </xs:sequence>
 </xs:complexType>
 <xs:complexType name="MT101_SequenceB_TransactionDetails">
  <xs:sequence>
   <xs:element name="TransactionReference" type="MT101_SequenceB_TransactionDetails_21_Type"/>
   <xs:element minOccurs="0" name="FXDealReference" type="MT101_SequenceB_TransactionDetails_21F_Type"/>
   <xs:element maxOccurs="unbounded" minOccurs="0" name="InstructionCode" type="MT101_SequenceB_TransactionDetails_23E_Type"/>
   <xs:element name="CurrencyTransactionAmount" type="MT101_SequenceB_TransactionDetails_32B_Type"/>
   <xs:choice minOccurs="0">
    <xs:element minOccurs="0" name="InstructingParty_C" type="MT101_SequenceB_TransactionDetails_50C_Type"/>
    <xs:element minOccurs="0" name="InstructingParty_L" type="MT101_SequenceB_TransactionDetails_50L_Type"/>
   </xs:choice>
   <xs:choice minOccurs="0">
    <xs:element minOccurs="0" name="OrderingCustomer_F" type="MT101_SequenceB_TransactionDetails_50F_Type"/>
    <xs:element minOccurs="0" name="OrderingCustomer_G" type="MT101_SequenceB_TransactionDetails_50G_Type"/>
    <xs:element minOccurs="0" name="OrderingCustomer_H" type="MT101_SequenceB_TransactionDetails_50H_Type"/>
   </xs:choice>
   <xs:choice minOccurs="0">
    <xs:element minOccurs="0" name="AccountServicingInstitution_A" type="MT101_SequenceB_TransactionDetails_52A_Type"/>
    <xs:element minOccurs="0" name="AccountServicingInstitution_C" type="MT101_SequenceB_TransactionDetails_52C_Type"/>
   </xs:choice>
   <xs:choice minOccurs="0">
    <xs:element minOccurs="0" name="Intermediary_A" type="MT101_SequenceB_TransactionDetails_56A_Type"/>
    <xs:element minOccurs="0" name="Intermediary_C" type="MT101_SequenceB_TransactionDetails_56C_Type"/>
    <xs:element minOccurs="0" name="Intermediary_D" type="MT101_SequenceB_TransactionDetails_56D_Type"/>
   </xs:choice>
   <xs:choice minOccurs="0">
    <xs:element minOccurs="0" name="AccountWithInstitution_A" type="MT101_SequenceB_TransactionDetails_57A_Type"/>
    <xs:element minOccurs="0" name="AccountWithInstitution_C" type="MT101_SequenceB_TransactionDetails_57C_Type"/>
    <xs:element minOccurs="0" name="AccountWithInstitution_D" type="MT101_SequenceB_TransactionDetails_57D_Type"/>
   </xs:choice>
   <xs:choice>
    <xs:element name="Beneficiary" type="MT101_SequenceB_TransactionDetails_59_Type"/>
    <xs:element name="Beneficiary_A" type="MT101_SequenceB_TransactionDetails_59A_Type"/>
    <xs:element name="Beneficiary_F" type="MT101_SequenceB_TransactionDetails_59F_Type"/>
   </xs:choice>
   <xs:element minOccurs="0" name="RemittanceInformation" type="MT101_SequenceB_TransactionDetails_70_Type"/>
   <xs:element minOccurs="0" name="RegulatoryReporting" type="MT101_SequenceB_TransactionDetails_77B_Type"/>
   <xs:element minOccurs="0" name="CurrencyOrderedAmount" type="MT101_SequenceB_TransactionDetails_33B_Type"/>
   <xs:element name="DetailsOfCharges" type="MT101_SequenceB_TransactionDetails_71A_Type"/>
   <xs:element minOccurs="0" name="ChargesAccount" type="MT101_SequenceB_TransactionDetails_25A_Type"/>
   <xs:element minOccurs="0" name="ExchangeRate" type="MT101_SequenceB_TransactionDetails_36_Type"/>
  </xs:sequence>
 </xs:complexType>
 <xs:element name="MT101">
  <xs:complexType>
   <xs:sequence>
    <xs:element name="SequenceA_GeneralInformation" type="MT101_SequenceA_GeneralInformation"/>
    <xs:element name="SequenceB_TransactionDetails" type="MT101_SequenceB_TransactionDetails"/>
   </xs:sequence>
  </xs:complexType>
 </xs:element>
</xs:schema>


...

  MT103
<?xml version="1.0" ?>
<xs:schema elementFormDefault="qualified" targetNamespace="http://www.w3schools.com" xmlns="http://www.w3schools.com" xmlns:xs="http://www.w3.org/2001/XMLSchema">
 <xs:simpleType name="MT103_20_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([^/]([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,14}[^/])"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT103_20_Type">
  <xs:simpleContent>
   <xs:extension base="MT103_20_Type_Pattern">
    <xs:attribute fixed="20" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT103_13C_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="(/[A-Z0-9]{1,8}/(0[0-9]|[1][0-9]|2[0-3])([0-5][0-9])([+]|[-])(0[0-9]|[1][0-9]|2[0-3])([0-5][0-9]))"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT103_13C_Type">
  <xs:simpleContent>
   <xs:extension base="MT103_13C_Type_Pattern">
    <xs:attribute fixed="13C" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT103_23B_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((CRED|CRTS|SPAY|SPRI|SSTD))"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT103_23B_Type">
  <xs:simpleContent>
   <xs:extension base="MT103_23B_Type_Pattern">
    <xs:attribute fixed="23B" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT103_23E_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((CHQB|CORT|HOLD|INTC|PHOB|PHOI|PHON|REPA|SDVA|TELB|TELE|TELI)(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,30})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT103_23E_Type">
  <xs:simpleContent>
   <xs:extension base="MT103_23E_Type_Pattern">
    <xs:attribute fixed="23E" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT103_26T_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([A-Z0-9]{3})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT103_26T_Type">
  <xs:simpleContent>
   <xs:extension base="MT103_26T_Type_Pattern">
    <xs:attribute fixed="26T" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT103_32A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([0-9]{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT103_32A_Type">
  <xs:simpleContent>
   <xs:extension base="MT103_32A_Type_Pattern">
    <xs:attribute fixed="32A" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT103_33B_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT103_33B_Type">
  <xs:simpleContent>
   <xs:extension base="MT103_33B_Type_Pattern">
    <xs:attribute fixed="33B" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT103_36_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([0-9,(?0-9)]{1,12})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT103_36_Type">
  <xs:simpleContent>
   <xs:extension base="MT103_36_Type_Pattern">
    <xs:attribute fixed="36" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT103_50A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT103_50A_Type">
  <xs:simpleContent>
   <xs:extension base="MT103_50A_Type_Pattern">
    <xs:attribute fixed="50A" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT103_50F_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,4})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT103_50F_Type">
  <xs:simpleContent>
   <xs:extension base="MT103_50F_Type_Pattern">
    <xs:attribute fixed="50F" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT103_50K_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,4})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT103_50K_Type">
  <xs:simpleContent>
   <xs:extension base="MT103_50K_Type_Pattern">
    <xs:attribute fixed="50K" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT103_51A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT103_51A_Type">
  <xs:simpleContent>
   <xs:extension base="MT103_51A_Type_Pattern">
    <xs:attribute fixed="51A" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT103_52A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT103_52A_Type">
  <xs:simpleContent>
   <xs:extension base="MT103_52A_Type_Pattern">
    <xs:attribute fixed="52A" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT103_52D_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,4})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT103_52D_Type">
  <xs:simpleContent>
   <xs:extension base="MT103_52D_Type_Pattern">
    <xs:attribute fixed="52D" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT103_53A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT103_53A_Type">
  <xs:simpleContent>
   <xs:extension base="MT103_53A_Type_Pattern">
    <xs:attribute fixed="53A" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT103_53B_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT103_53B_Type">
  <xs:simpleContent>
   <xs:extension base="MT103_53B_Type_Pattern">
    <xs:attribute fixed="53B" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT103_53D_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,4})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT103_53D_Type">
  <xs:simpleContent>
   <xs:extension base="MT103_53D_Type_Pattern">
    <xs:attribute fixed="53D" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT103_54A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT103_54A_Type">
  <xs:simpleContent>
   <xs:extension base="MT103_54A_Type_Pattern">
    <xs:attribute fixed="54A" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT103_54B_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT103_54B_Type">
  <xs:simpleContent>
   <xs:extension base="MT103_54B_Type_Pattern">
    <xs:attribute fixed="54B" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT103_54D_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,4})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT103_54D_Type">
  <xs:simpleContent>
   <xs:extension base="MT103_54D_Type_Pattern">
    <xs:attribute fixed="54D" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT103_55A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT103_55A_Type">
  <xs:simpleContent>
   <xs:extension base="MT103_55A_Type_Pattern">
    <xs:attribute fixed="55A" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT103_55B_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT103_55B_Type">
  <xs:simpleContent>
   <xs:extension base="MT103_55B_Type_Pattern">
    <xs:attribute fixed="55B" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT103_55D_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,4})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT103_55D_Type">
  <xs:simpleContent>
   <xs:extension base="MT103_55D_Type_Pattern">
    <xs:attribute fixed="55D" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT103_56A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT103_56A_Type">
  <xs:simpleContent>
   <xs:extension base="MT103_56A_Type_Pattern">
    <xs:attribute fixed="56A" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT103_56C_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT103_56C_Type">
  <xs:simpleContent>
   <xs:extension base="MT103_56C_Type_Pattern">
    <xs:attribute fixed="56C" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT103_56D_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,4})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT103_56D_Type">
  <xs:simpleContent>
   <xs:extension base="MT103_56D_Type_Pattern">
    <xs:attribute fixed="56D" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT103_57A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT103_57A_Type">
  <xs:simpleContent>
   <xs:extension base="MT103_57A_Type_Pattern">
    <xs:attribute fixed="57A" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT103_57B_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT103_57B_Type">
  <xs:simpleContent>
   <xs:extension base="MT103_57B_Type_Pattern">
    <xs:attribute fixed="57B" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT103_57C_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT103_57C_Type">
  <xs:simpleContent>
   <xs:extension base="MT103_57C_Type_Pattern">
    <xs:attribute fixed="57C" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT103_57D_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,4})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT103_57D_Type">
  <xs:simpleContent>
   <xs:extension base="MT103_57D_Type_Pattern">
    <xs:attribute fixed="57D" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT103_59_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,4})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT103_59_Type">
  <xs:simpleContent>
   <xs:extension base="MT103_59_Type_Pattern">
    <xs:attribute fixed="59" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT103_59A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT103_59A_Type">
  <xs:simpleContent>
   <xs:extension base="MT103_59A_Type_Pattern">
    <xs:attribute fixed="59A" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT103_59F_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34}\n)?((1|2|3)/(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,33}\n?){1,4}))"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT103_59F_Type">
  <xs:simpleContent>
   <xs:extension base="MT103_59F_Type_Pattern">
    <xs:attribute fixed="59F" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT103_70_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,4})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT103_70_Type">
  <xs:simpleContent>
   <xs:extension base="MT103_70_Type_Pattern">
    <xs:attribute fixed="70" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT103_71A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((BEN|OUR|SHA))"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT103_71A_Type">
  <xs:simpleContent>
   <xs:extension base="MT103_71A_Type_Pattern">
    <xs:attribute fixed="71A" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT103_71F_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT103_71F_Type">
  <xs:simpleContent>
   <xs:extension base="MT103_71F_Type_Pattern">
    <xs:attribute fixed="71F" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT103_71G_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT103_71G_Type">
  <xs:simpleContent>
   <xs:extension base="MT103_71G_Type_Pattern">
    <xs:attribute fixed="71G" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT103_72_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,6})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT103_72_Type">
  <xs:simpleContent>
   <xs:extension base="MT103_72_Type_Pattern">
    <xs:attribute fixed="72" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT103_77B_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,3})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT103_77B_Type">
  <xs:simpleContent>
   <xs:extension base="MT103_77B_Type_Pattern">
    <xs:attribute fixed="77B" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:element name="MT103">
  <xs:complexType>
   <xs:sequence>
    <xs:element name="SendersReference" type="MT103_20_Type"/>
    <xs:element maxOccurs="unbounded" minOccurs="0" name="TimeIndication" type="MT103_13C_Type"/>
    <xs:element name="BankOperationCode" type="MT103_23B_Type"/>
    <xs:element maxOccurs="unbounded" minOccurs="0" name="InstructionCode" type="MT103_23E_Type"/>
    <xs:element minOccurs="0" name="TransactionTypeCode" type="MT103_26T_Type"/>
    <xs:element name="ValueDateCurrencyInterbankSettledAmount" type="MT103_32A_Type"/>
    <xs:element minOccurs="0" name="CurrencyInstructedAmount" type="MT103_33B_Type"/>
    <xs:element minOccurs="0" name="ExchangeRate" type="MT103_36_Type"/>
    <xs:choice>
     <xs:element name="OrderingCustomer_A" type="MT103_50A_Type"/>
     <xs:element name="OrderingCustomer_F" type="MT103_50F_Type"/>
     <xs:element name="OrderingCustomer_K" type="MT103_50K_Type"/>
    </xs:choice>
    <xs:element minOccurs="0" name="SendingInstitution" type="MT103_51A_Type"/>
    <xs:choice minOccurs="0">
     <xs:element minOccurs="0" name="OrderingInstitution_A" type="MT103_52A_Type"/>
     <xs:element minOccurs="0" name="OrderingInstitution_D" type="MT103_52D_Type"/>
    </xs:choice>
    <xs:choice minOccurs="0">
     <xs:element minOccurs="0" name="SendersCorrespondent_A" type="MT103_53A_Type"/>
     <xs:element minOccurs="0" name="SendersCorrespondent_B" type="MT103_53B_Type"/>
     <xs:element minOccurs="0" name="SendersCorrespondent_D" type="MT103_53D_Type"/>
    </xs:choice>
    <xs:choice minOccurs="0">
     <xs:element minOccurs="0" name="ReceiversCorrespondent_A" type="MT103_54A_Type"/>
     <xs:element minOccurs="0" name="ReceiversCorrespondent_B" type="MT103_54B_Type"/>
     <xs:element minOccurs="0" name="ReceiversCorrespondent_D" type="MT103_54D_Type"/>
    </xs:choice>
    <xs:choice minOccurs="0">
     <xs:element minOccurs="0" name="ThirdReimbursementInstitution_A" type="MT103_55A_Type"/>
     <xs:element minOccurs="0" name="ThirdReimbursementInstitution_B" type="MT103_55B_Type"/>
     <xs:element minOccurs="0" name="ThirdReimbursementInstitution_D" type="MT103_55D_Type"/>
    </xs:choice>
    <xs:choice minOccurs="0">
     <xs:element minOccurs="0" name="IntermediaryInstitution_A" type="MT103_56A_Type"/>
     <xs:element minOccurs="0" name="IntermediaryInstitution_C" type="MT103_56C_Type"/>
     <xs:element minOccurs="0" name="IntermediaryInstitution_D" type="MT103_56D_Type"/>
    </xs:choice>
    <xs:choice minOccurs="0">
     <xs:element minOccurs="0" name="AccountWithInstitution_A" type="MT103_57A_Type"/>
     <xs:element minOccurs="0" name="AccountWithInstitution_B" type="MT103_57B_Type"/>
     <xs:element minOccurs="0" name="AccountWithInstitution_C" type="MT103_57C_Type"/>
     <xs:element minOccurs="0" name="AccountWithInstitution_D" type="MT103_57D_Type"/>
    </xs:choice>
    <xs:choice>
     <xs:element name="BeneficiaryCustomer" type="MT103_59_Type"/>
     <xs:element name="BeneficiaryCustomer_A" type="MT103_59A_Type"/>
     <xs:element name="BeneficiaryCustomer_F" type="MT103_59F_Type"/>
    </xs:choice>
    <xs:element minOccurs="0" name="RemittanceInformation" type="MT103_70_Type"/>
    <xs:element name="DetailsOfCharges" type="MT103_71A_Type"/>
    <xs:element maxOccurs="unbounded" minOccurs="0" name="SendersCharges" type="MT103_71F_Type"/>
    <xs:element minOccurs="0" name="ReceiversCharges" type="MT103_71G_Type"/>
    <xs:element minOccurs="0" name="SenderToReceiverInformation" type="MT103_72_Type"/>
    <xs:element minOccurs="0" name="RegulatoryReporting" type="MT103_77B_Type"/>
   </xs:sequence>
  </xs:complexType>
 </xs:element>
</xs:schema>


...

  MT192
<?xml version="1.0" ?>
<xs:schema elementFormDefault="qualified" targetNamespace="http://www.w3schools.com" xmlns="http://www.w3schools.com" xmlns:xs="http://www.w3.org/2001/XMLSchema">
 <xs:simpleType name="MT192_20_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([^/]([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,14}[^/])"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT192_20_Type">
  <xs:simpleContent>
   <xs:extension base="MT192_20_Type_Pattern">
    <xs:attribute fixed="20" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT192_21_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([^/]([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,14}[^/])"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT192_21_Type">
  <xs:simpleContent>
   <xs:extension base="MT192_21_Type_Pattern">
    <xs:attribute fixed="21" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT192_11S_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([0-9]{3}(\n)?[0-9]{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(\n)?([0-9]{4}[0-9]{6})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT192_11S_Type">
  <xs:simpleContent>
   <xs:extension base="MT192_11S_Type_Pattern">
    <xs:attribute fixed="11S" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT192_79_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,50}\n?){1,35})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT192_79_Type">
  <xs:simpleContent>
   <xs:extension base="MT192_79_Type_Pattern">
    <xs:attribute fixed="79" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:element name="MT192">
  <xs:complexType>
   <xs:sequence>
    <xs:element name="TransactionReferenceNumber" type="MT192_20_Type"/>
    <xs:element name="RelatedReference" type="MT192_21_Type"/>
    <xs:element name="MTAndDateOfTheOriginalMessage" type="MT192_11S_Type"/>
    <xs:element minOccurs="0" name="NarrativeDescriptionOfTheOriginalMessage" type="MT192_79_Type"/>
   </xs:sequence>
  </xs:complexType>
 </xs:element>
</xs:schema>


...

  MT199
<?xml version="1.0" ?>
<xs:schema elementFormDefault="qualified" targetNamespace="http://www.w3schools.com" xmlns="http://www.w3schools.com" xmlns:xs="http://www.w3.org/2001/XMLSchema">
 <xs:simpleType name="MT199_20_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([^/]([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,14}[^/])"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT199_20_Type">
  <xs:simpleContent>
   <xs:extension base="MT199_20_Type_Pattern">
    <xs:attribute fixed="20" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT199_21_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([^/]([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,14}[^/])"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT199_21_Type">
  <xs:simpleContent>
   <xs:extension base="MT199_21_Type_Pattern">
    <xs:attribute fixed="21" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT199_79_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,50}\n?){1,35})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT199_79_Type">
  <xs:simpleContent>
   <xs:extension base="MT199_79_Type_Pattern">
    <xs:attribute fixed="79" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:element name="MT199">
  <xs:complexType>
   <xs:sequence>
    <xs:element name="TransactionReferenceNumber" type="MT199_20_Type"/>
    <xs:element minOccurs="0" name="RelatedReference" type="MT199_21_Type"/>
    <xs:element name="Narrative" type="MT199_79_Type"/>
   </xs:sequence>
  </xs:complexType>
 </xs:element>
</xs:schema>


...

  MT200
<?xml version="1.0" ?>
<xs:schema elementFormDefault="qualified" targetNamespace="http://www.w3schools.com" xmlns="http://www.w3schools.com" xmlns:xs="http://www.w3.org/2001/XMLSchema">
 <xs:simpleType name="MT200_20_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([^/]([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,14}[^/])"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT200_20_Type">
  <xs:simpleContent>
   <xs:extension base="MT200_20_Type_Pattern">
    <xs:attribute fixed="20" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT200_32A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([0-9]{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT200_32A_Type">
  <xs:simpleContent>
   <xs:extension base="MT200_32A_Type_Pattern">
    <xs:attribute fixed="32A" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT200_53B_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT200_53B_Type">
  <xs:simpleContent>
   <xs:extension base="MT200_53B_Type_Pattern">
    <xs:attribute fixed="53B" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT200_56A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT200_56A_Type">
  <xs:simpleContent>
   <xs:extension base="MT200_56A_Type_Pattern">
    <xs:attribute fixed="56A" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT200_56D_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,4})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT200_56D_Type">
  <xs:simpleContent>
   <xs:extension base="MT200_56D_Type_Pattern">
    <xs:attribute fixed="56D" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT200_57A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT200_57A_Type">
  <xs:simpleContent>
   <xs:extension base="MT200_57A_Type_Pattern">
    <xs:attribute fixed="57A" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT200_57B_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT200_57B_Type">
  <xs:simpleContent>
   <xs:extension base="MT200_57B_Type_Pattern">
    <xs:attribute fixed="57B" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT200_57D_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,4})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT200_57D_Type">
  <xs:simpleContent>
   <xs:extension base="MT200_57D_Type_Pattern">
    <xs:attribute fixed="57D" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT200_72_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,6})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT200_72_Type">
  <xs:simpleContent>
   <xs:extension base="MT200_72_Type_Pattern">
    <xs:attribute fixed="72" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:element name="MT200">
  <xs:complexType>
   <xs:sequence>
    <xs:element name="TransactionReferenceNumber" type="MT200_20_Type"/>
    <xs:element name="DateCurrencyAmount" type="MT200_32A_Type"/>
    <xs:element minOccurs="0" name="SendersCorrespondent_B" type="MT200_53B_Type"/>
    <xs:choice minOccurs="0">
     <xs:element minOccurs="0" name="Intermedairy_A" type="MT200_56A_Type"/>
     <xs:element minOccurs="0" name="Intermedairy_D" type="MT200_56D_Type"/>
    </xs:choice>
    <xs:choice minOccurs="0">
     <xs:element minOccurs="0" name="AccountWithInstitution_A" type="MT200_57A_Type"/>
     <xs:element minOccurs="0" name="AccountWithInstitution_B" type="MT200_57B_Type"/>
     <xs:element minOccurs="0" name="AccountWithInstitution_D" type="MT200_57D_Type"/>
    </xs:choice>
    <xs:element minOccurs="0" name="SenderToReceiverInformation" type="MT200_72_Type"/>
   </xs:sequence>
  </xs:complexType>
 </xs:element>
</xs:schema>


...

  MT202
<?xml version="1.0" ?>
<xs:schema elementFormDefault="qualified" targetNamespace="http://www.w3schools.com" xmlns="http://www.w3schools.com" xmlns:xs="http://www.w3.org/2001/XMLSchema">
 <xs:simpleType name="MT202_20_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([^/]([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,14}[^/])"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT202_20_Type">
  <xs:simpleContent>
   <xs:extension base="MT202_20_Type_Pattern">
    <xs:attribute fixed="20" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT202_21_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([^/]([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,14}[^/])"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT202_21_Type">
  <xs:simpleContent>
   <xs:extension base="MT202_21_Type_Pattern">
    <xs:attribute fixed="21" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT202_13C_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="(/(CLSTIME|RNCTIME|SNDTIME)/(0[0-9]|[1][0-9]|2[0-3])([0-5][0-9])([+]|[-])(0[0-9]|[1][0-9]|2[0-3])([0-5][0-9]))"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT202_13C_Type">
  <xs:simpleContent>
   <xs:extension base="MT202_13C_Type_Pattern">
    <xs:attribute fixed="13C" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT202_32A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([0-9]{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT202_32A_Type">
  <xs:simpleContent>
   <xs:extension base="MT202_32A_Type_Pattern">
    <xs:attribute fixed="32A" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT202_52A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT202_52A_Type">
  <xs:simpleContent>
   <xs:extension base="MT202_52A_Type_Pattern">
    <xs:attribute fixed="52A" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT202_52D_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,4})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT202_52D_Type">
  <xs:simpleContent>
   <xs:extension base="MT202_52D_Type_Pattern">
    <xs:attribute fixed="52D" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT202_53A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT202_53A_Type">
  <xs:simpleContent>
   <xs:extension base="MT202_53A_Type_Pattern">
    <xs:attribute fixed="53A" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT202_53B_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT202_53B_Type">
  <xs:simpleContent>
   <xs:extension base="MT202_53B_Type_Pattern">
    <xs:attribute fixed="53B" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT202_53D_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,4})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT202_53D_Type">
  <xs:simpleContent>
   <xs:extension base="MT202_53D_Type_Pattern">
    <xs:attribute fixed="53D" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT202_54A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT202_54A_Type">
  <xs:simpleContent>
   <xs:extension base="MT202_54A_Type_Pattern">
    <xs:attribute fixed="54A" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT202_54B_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT202_54B_Type">
  <xs:simpleContent>
   <xs:extension base="MT202_54B_Type_Pattern">
    <xs:attribute fixed="54B" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT202_54D_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,4})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT202_54D_Type">
  <xs:simpleContent>
   <xs:extension base="MT202_54D_Type_Pattern">
    <xs:attribute fixed="54D" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT202_56A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT202_56A_Type">
  <xs:simpleContent>
   <xs:extension base="MT202_56A_Type_Pattern">
    <xs:attribute fixed="56A" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT202_56D_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,4})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT202_56D_Type">
  <xs:simpleContent>
   <xs:extension base="MT202_56D_Type_Pattern">
    <xs:attribute fixed="56D" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT202_57A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT202_57A_Type">
  <xs:simpleContent>
   <xs:extension base="MT202_57A_Type_Pattern">
    <xs:attribute fixed="57A" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT202_57B_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT202_57B_Type">
  <xs:simpleContent>
   <xs:extension base="MT202_57B_Type_Pattern">
    <xs:attribute fixed="57B" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT202_57D_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,4})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT202_57D_Type">
  <xs:simpleContent>
   <xs:extension base="MT202_57D_Type_Pattern">
    <xs:attribute fixed="57D" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT202_58A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT202_58A_Type">
  <xs:simpleContent>
   <xs:extension base="MT202_58A_Type_Pattern">
    <xs:attribute fixed="58A" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT202_58D_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,4})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT202_58D_Type">
  <xs:simpleContent>
   <xs:extension base="MT202_58D_Type_Pattern">
    <xs:attribute fixed="58D" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT202_72_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,6})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT202_72_Type">
  <xs:simpleContent>
   <xs:extension base="MT202_72_Type_Pattern">
    <xs:attribute fixed="72" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:element name="MT202">
  <xs:complexType>
   <xs:sequence>
    <xs:element name="TransactionReferenceNumber" type="MT202_20_Type"/>
    <xs:element name="RelatedReference" type="MT202_21_Type"/>
    <xs:element maxOccurs="unbounded" minOccurs="0" name="TimeIndication" type="MT202_13C_Type"/>
    <xs:element name="ValueDateCurrencyCodeAmount" type="MT202_32A_Type"/>
    <xs:choice minOccurs="0">
     <xs:element minOccurs="0" name="OrderingInstitution_A" type="MT202_52A_Type"/>
     <xs:element minOccurs="0" name="OrderingInstitution_D" type="MT202_52D_Type"/>
    </xs:choice>
    <xs:choice minOccurs="0">
     <xs:element minOccurs="0" name="SendersCorrespondent_A" type="MT202_53A_Type"/>
     <xs:element minOccurs="0" name="SendersCorrespondent_B" type="MT202_53B_Type"/>
     <xs:element minOccurs="0" name="SendersCorrespondent_D" type="MT202_53D_Type"/>
    </xs:choice>
    <xs:choice minOccurs="0">
     <xs:element minOccurs="0" name="ReceiversCorrespondent_A" type="MT202_54A_Type"/>
     <xs:element minOccurs="0" name="ReceiversCorrespondent_B" type="MT202_54B_Type"/>
     <xs:element minOccurs="0" name="ReceiversCorrespondent_D" type="MT202_54D_Type"/>
    </xs:choice>
    <xs:choice minOccurs="0">
     <xs:element minOccurs="0" name="Intermedairy_A" type="MT202_56A_Type"/>
     <xs:element minOccurs="0" name="Intermedairy_D" type="MT202_56D_Type"/>
    </xs:choice>
    <xs:choice minOccurs="0">
     <xs:element minOccurs="0" name="AccountWithInstitution_A" type="MT202_57A_Type"/>
     <xs:element minOccurs="0" name="AccountWithInstitution_B" type="MT202_57B_Type"/>
     <xs:element minOccurs="0" name="AccountWithInstitution_D" type="MT202_57D_Type"/>
    </xs:choice>
    <xs:choice>
     <xs:element name="BeneficiaryInstitution_A" type="MT202_58A_Type"/>
     <xs:element name="BeneficiaryInstitution_D" type="MT202_58D_Type"/>
    </xs:choice>
    <xs:element minOccurs="0" name="SenderToReceiverInformation" type="MT202_72_Type"/>
   </xs:sequence>
  </xs:complexType>
 </xs:element>
</xs:schema>


...

  MT202COV
<?xml version="1.0" ?>
<xs:schema elementFormDefault="qualified" targetNamespace="http://www.w3schools.com" xmlns="http://www.w3schools.com" xmlns:xs="http://www.w3.org/2001/XMLSchema">
 <xs:simpleType name="MT202COV_SequenceA_GeneralInformation_20_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([^/]([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,14}[^/])"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT202COV_SequenceA_GeneralInformation_20_Type">
  <xs:simpleContent>
   <xs:extension base="MT202COV_SequenceA_GeneralInformation_20_Type_Pattern">
    <xs:attribute fixed="20" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT202COV_SequenceA_GeneralInformation_21_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([^/]([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,14}[^/])"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT202COV_SequenceA_GeneralInformation_21_Type">
  <xs:simpleContent>
   <xs:extension base="MT202COV_SequenceA_GeneralInformation_21_Type_Pattern">
    <xs:attribute fixed="21" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT202COV_SequenceA_GeneralInformation_13C_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="(/(CLSTIME|RNCTIME|SNDTIME)/(0[0-9]|[1][0-9]|2[0-3])([0-5][0-9])([+]|[-])(0[0-9]|[1][0-9]|2[0-3])([0-5][0-9]))"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT202COV_SequenceA_GeneralInformation_13C_Type">
  <xs:simpleContent>
   <xs:extension base="MT202COV_SequenceA_GeneralInformation_13C_Type_Pattern">
    <xs:attribute fixed="13C" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT202COV_SequenceA_GeneralInformation_32A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([0-9]{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT202COV_SequenceA_GeneralInformation_32A_Type">
  <xs:simpleContent>
   <xs:extension base="MT202COV_SequenceA_GeneralInformation_32A_Type_Pattern">
    <xs:attribute fixed="32A" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT202COV_SequenceA_GeneralInformation_52A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT202COV_SequenceA_GeneralInformation_52A_Type">
  <xs:simpleContent>
   <xs:extension base="MT202COV_SequenceA_GeneralInformation_52A_Type_Pattern">
    <xs:attribute fixed="52A" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT202COV_SequenceA_GeneralInformation_52D_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,4})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT202COV_SequenceA_GeneralInformation_52D_Type">
  <xs:simpleContent>
   <xs:extension base="MT202COV_SequenceA_GeneralInformation_52D_Type_Pattern">
    <xs:attribute fixed="52D" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT202COV_SequenceA_GeneralInformation_53A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT202COV_SequenceA_GeneralInformation_53A_Type">
  <xs:simpleContent>
   <xs:extension base="MT202COV_SequenceA_GeneralInformation_53A_Type_Pattern">
    <xs:attribute fixed="53A" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT202COV_SequenceA_GeneralInformation_53B_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT202COV_SequenceA_GeneralInformation_53B_Type">
  <xs:simpleContent>
   <xs:extension base="MT202COV_SequenceA_GeneralInformation_53B_Type_Pattern">
    <xs:attribute fixed="53B" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT202COV_SequenceA_GeneralInformation_53D_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,4})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT202COV_SequenceA_GeneralInformation_53D_Type">
  <xs:simpleContent>
   <xs:extension base="MT202COV_SequenceA_GeneralInformation_53D_Type_Pattern">
    <xs:attribute fixed="53D" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT202COV_SequenceA_GeneralInformation_54A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT202COV_SequenceA_GeneralInformation_54A_Type">
  <xs:simpleContent>
   <xs:extension base="MT202COV_SequenceA_GeneralInformation_54A_Type_Pattern">
    <xs:attribute fixed="54A" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT202COV_SequenceA_GeneralInformation_54B_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT202COV_SequenceA_GeneralInformation_54B_Type">
  <xs:simpleContent>
   <xs:extension base="MT202COV_SequenceA_GeneralInformation_54B_Type_Pattern">
    <xs:attribute fixed="54B" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT202COV_SequenceA_GeneralInformation_54D_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,4})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT202COV_SequenceA_GeneralInformation_54D_Type">
  <xs:simpleContent>
   <xs:extension base="MT202COV_SequenceA_GeneralInformation_54D_Type_Pattern">
    <xs:attribute fixed="54D" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT202COV_SequenceA_GeneralInformation_56A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT202COV_SequenceA_GeneralInformation_56A_Type">
  <xs:simpleContent>
   <xs:extension base="MT202COV_SequenceA_GeneralInformation_56A_Type_Pattern">
    <xs:attribute fixed="56A" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT202COV_SequenceA_GeneralInformation_56D_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,4})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT202COV_SequenceA_GeneralInformation_56D_Type">
  <xs:simpleContent>
   <xs:extension base="MT202COV_SequenceA_GeneralInformation_56D_Type_Pattern">
    <xs:attribute fixed="56D" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT202COV_SequenceA_GeneralInformation_57A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT202COV_SequenceA_GeneralInformation_57A_Type">
  <xs:simpleContent>
   <xs:extension base="MT202COV_SequenceA_GeneralInformation_57A_Type_Pattern">
    <xs:attribute fixed="57A" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT202COV_SequenceA_GeneralInformation_57B_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT202COV_SequenceA_GeneralInformation_57B_Type">
  <xs:simpleContent>
   <xs:extension base="MT202COV_SequenceA_GeneralInformation_57B_Type_Pattern">
    <xs:attribute fixed="57B" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT202COV_SequenceA_GeneralInformation_57D_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,4})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT202COV_SequenceA_GeneralInformation_57D_Type">
  <xs:simpleContent>
   <xs:extension base="MT202COV_SequenceA_GeneralInformation_57D_Type_Pattern">
    <xs:attribute fixed="57D" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT202COV_SequenceA_GeneralInformation_58A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT202COV_SequenceA_GeneralInformation_58A_Type">
  <xs:simpleContent>
   <xs:extension base="MT202COV_SequenceA_GeneralInformation_58A_Type_Pattern">
    <xs:attribute fixed="58A" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT202COV_SequenceA_GeneralInformation_58D_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,4})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT202COV_SequenceA_GeneralInformation_58D_Type">
  <xs:simpleContent>
   <xs:extension base="MT202COV_SequenceA_GeneralInformation_58D_Type_Pattern">
    <xs:attribute fixed="58D" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT202COV_SequenceA_GeneralInformation_72_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,6})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT202COV_SequenceA_GeneralInformation_72_Type">
  <xs:simpleContent>
   <xs:extension base="MT202COV_SequenceA_GeneralInformation_72_Type_Pattern">
    <xs:attribute fixed="72" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50A_Type">
  <xs:simpleContent>
   <xs:extension base="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50A_Type_Pattern">
    <xs:attribute fixed="50A" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50F_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,4})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50F_Type">
  <xs:simpleContent>
   <xs:extension base="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50F_Type_Pattern">
    <xs:attribute fixed="50F" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50K_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,4})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50K_Type">
  <xs:simpleContent>
   <xs:extension base="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50K_Type_Pattern">
    <xs:attribute fixed="50K" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_52A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_52A_Type">
  <xs:simpleContent>
   <xs:extension base="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_52A_Type_Pattern">
    <xs:attribute fixed="52A" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_52D_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,4})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_52D_Type">
  <xs:simpleContent>
   <xs:extension base="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_52D_Type_Pattern">
    <xs:attribute fixed="52D" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56A_Type">
  <xs:simpleContent>
   <xs:extension base="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56A_Type_Pattern">
    <xs:attribute fixed="56A" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56C_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56C_Type">
  <xs:simpleContent>
   <xs:extension base="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56C_Type_Pattern">
    <xs:attribute fixed="56C" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56D_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,4})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56D_Type">
  <xs:simpleContent>
   <xs:extension base="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56D_Type_Pattern">
    <xs:attribute fixed="56D" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57A_Type">
  <xs:simpleContent>
   <xs:extension base="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57A_Type_Pattern">
    <xs:attribute fixed="57A" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57B_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57B_Type">
  <xs:simpleContent>
   <xs:extension base="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57B_Type_Pattern">
    <xs:attribute fixed="57B" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57C_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57C_Type">
  <xs:simpleContent>
   <xs:extension base="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57C_Type_Pattern">
    <xs:attribute fixed="57C" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57D_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,4})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57D_Type">
  <xs:simpleContent>
   <xs:extension base="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57D_Type_Pattern">
    <xs:attribute fixed="57D" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,4})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59_Type">
  <xs:simpleContent>
   <xs:extension base="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59_Type_Pattern">
    <xs:attribute fixed="59" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59A_Type">
  <xs:simpleContent>
   <xs:extension base="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59A_Type_Pattern">
    <xs:attribute fixed="59A" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59F_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?((1|2|3)/(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,33}\n?){1,4}))"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59F_Type">
  <xs:simpleContent>
   <xs:extension base="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59F_Type_Pattern">
    <xs:attribute fixed="59F" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_70_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,4})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_70_Type">
  <xs:simpleContent>
   <xs:extension base="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_70_Type_Pattern">
    <xs:attribute fixed="70" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_72_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,6})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_72_Type">
  <xs:simpleContent>
   <xs:extension base="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_72_Type_Pattern">
    <xs:attribute fixed="72" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_33B_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_33B_Type">
  <xs:simpleContent>
   <xs:extension base="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_33B_Type_Pattern">
    <xs:attribute fixed="33B" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:complexType name="MT202COV_SequenceA_GeneralInformation">
  <xs:sequence>
   <xs:element name="TransactionReferenceNumber" type="MT202COV_SequenceA_GeneralInformation_20_Type"/>
   <xs:element name="RelatedReference" type="MT202COV_SequenceA_GeneralInformation_21_Type"/>
   <xs:element maxOccurs="unbounded" minOccurs="0" name="TimeIndication" type="MT202COV_SequenceA_GeneralInformation_13C_Type"/>
   <xs:element name="DateCurrencyAmount" type="MT202COV_SequenceA_GeneralInformation_32A_Type"/>
   <xs:choice minOccurs="0">
    <xs:element minOccurs="0" name="OrderingInstitution_A" type="MT202COV_SequenceA_GeneralInformation_52A_Type"/>
    <xs:element minOccurs="0" name="OrderingInstitution_D" type="MT202COV_SequenceA_GeneralInformation_52D_Type"/>
   </xs:choice>
   <xs:choice minOccurs="0">
    <xs:element minOccurs="0" name="SendersCorrespondent_A" type="MT202COV_SequenceA_GeneralInformation_53A_Type"/>
    <xs:element minOccurs="0" name="SendersCorrespondent_B" type="MT202COV_SequenceA_GeneralInformation_53B_Type"/>
    <xs:element minOccurs="0" name="SendersCorrespondent_D" type="MT202COV_SequenceA_GeneralInformation_53D_Type"/>
   </xs:choice>
   <xs:choice minOccurs="0">
    <xs:element minOccurs="0" name="ReceiversCorrespondent_A" type="MT202COV_SequenceA_GeneralInformation_54A_Type"/>
    <xs:element minOccurs="0" name="ReceiversCorrespondent_B" type="MT202COV_SequenceA_GeneralInformation_54B_Type"/>
    <xs:element minOccurs="0" name="ReceiversCorrespondent_D" type="MT202COV_SequenceA_GeneralInformation_54D_Type"/>
   </xs:choice>
   <xs:choice minOccurs="0">
    <xs:element minOccurs="0" name="Intermedairy_A" type="MT202COV_SequenceA_GeneralInformation_56A_Type"/>
    <xs:element minOccurs="0" name="Intermedairy_D" type="MT202COV_SequenceA_GeneralInformation_56D_Type"/>
   </xs:choice>
   <xs:choice minOccurs="0">
    <xs:element minOccurs="0" name="AccountWithInstitution_A" type="MT202COV_SequenceA_GeneralInformation_57A_Type"/>
    <xs:element minOccurs="0" name="AccountWithInstitution_B" type="MT202COV_SequenceA_GeneralInformation_57B_Type"/>
    <xs:element minOccurs="0" name="AccountWithInstitution_D" type="MT202COV_SequenceA_GeneralInformation_57D_Type"/>
   </xs:choice>
   <xs:choice>
    <xs:element name="BeneficiaryInstitution_A" type="MT202COV_SequenceA_GeneralInformation_58A_Type"/>
    <xs:element name="BeneficiaryInstitution_D" type="MT202COV_SequenceA_GeneralInformation_58D_Type"/>
   </xs:choice>
   <xs:element minOccurs="0" name="SenderToReceiverInformation" type="MT202COV_SequenceA_GeneralInformation_72_Type"/>
  </xs:sequence>
 </xs:complexType>
 <xs:complexType name="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails">
  <xs:sequence>
   <xs:choice>
    <xs:element name="OrderingCustomer_A" type="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50A_Type"/>
    <xs:element name="OrderingCustomer_F" type="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50F_Type"/>
    <xs:element name="OrderingCustomer_K" type="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_50K_Type"/>
   </xs:choice>
   <xs:choice minOccurs="0">
    <xs:element minOccurs="0" name="OrderingInstitution_A" type="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_52A_Type"/>
    <xs:element minOccurs="0" name="OrderingInstitution_D" type="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_52D_Type"/>
   </xs:choice>
   <xs:choice minOccurs="0">
    <xs:element minOccurs="0" name="IntermediaryInstitution_A" type="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56A_Type"/>
    <xs:element minOccurs="0" name="IntermediaryInstitution_C" type="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56C_Type"/>
    <xs:element minOccurs="0" name="IntermediaryInstitution_D" type="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_56D_Type"/>
   </xs:choice>
   <xs:choice minOccurs="0">
    <xs:element minOccurs="0" name="AccountWithInstitution_A" type="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57A_Type"/>
    <xs:element minOccurs="0" name="AccountWithInstitution_B" type="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57B_Type"/>
    <xs:element minOccurs="0" name="AccountWithInstitution_C" type="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57C_Type"/>
    <xs:element minOccurs="0" name="AccountWithInstitution_D" type="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_57D_Type"/>
   </xs:choice>
   <xs:choice>
    <xs:element name="BeneficiaryCustomer" type="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59_Type"/>
    <xs:element name="BeneficiaryCustomer_A" type="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59A_Type"/>
    <xs:element name="BeneficiaryCustomer_F" type="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_59F_Type"/>
   </xs:choice>
   <xs:element minOccurs="0" name="RemittanceInformation" type="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_70_Type"/>
   <xs:element minOccurs="0" name="SenderToReceiverInformation" type="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_72_Type"/>
   <xs:element minOccurs="0" name="CurrencyInstructedAmount" type="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails_33B_Type"/>
  </xs:sequence>
 </xs:complexType>
 <xs:element name="MT202COV">
  <xs:complexType>
   <xs:sequence>
    <xs:element name="SequenceA_GeneralInformation" type="MT202COV_SequenceA_GeneralInformation"/>
    <xs:element name="SequenceB_UnderlyingCustomerCreditTransferDetails" type="MT202COV_SequenceB_UnderlyingCustomerCreditTransferDetails"/>
   </xs:sequence>
  </xs:complexType>
 </xs:element>
</xs:schema>


...

  MT210
<?xml version="1.0" ?>
<xs:schema elementFormDefault="qualified" targetNamespace="http://www.w3schools.com" xmlns="http://www.w3schools.com" xmlns:xs="http://www.w3.org/2001/XMLSchema">
 <xs:simpleType name="MT210_SEQUENCE1_20_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([^/]([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,14}[^/])"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT210_SEQUENCE1_20_Type">
  <xs:simpleContent>
   <xs:extension base="MT210_SEQUENCE1_20_Type_Pattern">
    <xs:attribute fixed="20" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT210_SEQUENCE1_25_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT210_SEQUENCE1_25_Type">
  <xs:simpleContent>
   <xs:extension base="MT210_SEQUENCE1_25_Type_Pattern">
    <xs:attribute fixed="25" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT210_SEQUENCE1_30_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([0-9]{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01]))"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT210_SEQUENCE1_30_Type">
  <xs:simpleContent>
   <xs:extension base="MT210_SEQUENCE1_30_Type_Pattern">
    <xs:attribute fixed="30" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT210_SEQUENCE2_21_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([^/]([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,14}[^/])"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT210_SEQUENCE2_21_Type">
  <xs:simpleContent>
   <xs:extension base="MT210_SEQUENCE2_21_Type_Pattern">
    <xs:attribute fixed="21" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT210_SEQUENCE2_32B_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT210_SEQUENCE2_32B_Type">
  <xs:simpleContent>
   <xs:extension base="MT210_SEQUENCE2_32B_Type_Pattern">
    <xs:attribute fixed="32B" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT210_SEQUENCE2_50_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,4})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT210_SEQUENCE2_50_Type">
  <xs:simpleContent>
   <xs:extension base="MT210_SEQUENCE2_50_Type_Pattern">
    <xs:attribute fixed="50" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT210_SEQUENCE2_50C_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT210_SEQUENCE2_50C_Type">
  <xs:simpleContent>
   <xs:extension base="MT210_SEQUENCE2_50C_Type_Pattern">
    <xs:attribute fixed="50C" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT210_SEQUENCE2_50F_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,4})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT210_SEQUENCE2_50F_Type">
  <xs:simpleContent>
   <xs:extension base="MT210_SEQUENCE2_50F_Type_Pattern">
    <xs:attribute fixed="50F" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT210_SEQUENCE2_52A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT210_SEQUENCE2_52A_Type">
  <xs:simpleContent>
   <xs:extension base="MT210_SEQUENCE2_52A_Type_Pattern">
    <xs:attribute fixed="52A" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT210_SEQUENCE2_52D_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,4})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT210_SEQUENCE2_52D_Type">
  <xs:simpleContent>
   <xs:extension base="MT210_SEQUENCE2_52D_Type_Pattern">
    <xs:attribute fixed="52D" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT210_SEQUENCE2_56A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT210_SEQUENCE2_56A_Type">
  <xs:simpleContent>
   <xs:extension base="MT210_SEQUENCE2_56A_Type_Pattern">
    <xs:attribute fixed="56A" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT210_SEQUENCE2_56D_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,4})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT210_SEQUENCE2_56D_Type">
  <xs:simpleContent>
   <xs:extension base="MT210_SEQUENCE2_56D_Type_Pattern">
    <xs:attribute fixed="56D" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:complexType name="MT210_SEQUENCE1">
  <xs:sequence>
   <xs:element name="TransactionReferenceNumber" type="MT210_SEQUENCE1_20_Type"/>
   <xs:element minOccurs="0" name="AccountIdentification" type="MT210_SEQUENCE1_25_Type"/>
   <xs:element name="ValueDate" type="MT210_SEQUENCE1_30_Type"/>
  </xs:sequence>
 </xs:complexType>
 <xs:complexType name="MT210_SEQUENCE2">
  <xs:sequence>
   <xs:element name="RelatedReference" type="MT210_SEQUENCE2_21_Type"/>
   <xs:element name="CurrencyCodeAmount" type="MT210_SEQUENCE2_32B_Type"/>
   <xs:choice minOccurs="0">
    <xs:element minOccurs="0" name="OrderingCustomer" type="MT210_SEQUENCE2_50_Type"/>
    <xs:element minOccurs="0" name="OrderingCustomer_C" type="MT210_SEQUENCE2_50C_Type"/>
    <xs:element minOccurs="0" name="OrderingCustomer_F" type="MT210_SEQUENCE2_50F_Type"/>
   </xs:choice>
   <xs:choice minOccurs="0">
    <xs:element minOccurs="0" name="OrderingInstitution_A" type="MT210_SEQUENCE2_52A_Type"/>
    <xs:element minOccurs="0" name="OrderingInstitution_D" type="MT210_SEQUENCE2_52D_Type"/>
   </xs:choice>
   <xs:choice minOccurs="0">
    <xs:element minOccurs="0" name="Intermedairy_A" type="MT210_SEQUENCE2_56A_Type"/>
    <xs:element minOccurs="0" name="Intermedairy_D" type="MT210_SEQUENCE2_56D_Type"/>
   </xs:choice>
  </xs:sequence>
 </xs:complexType>
 <xs:element name="MT210">
  <xs:complexType>
   <xs:sequence>
    <xs:element name="SEQUENCE1" type="MT210_SEQUENCE1"/>
    <xs:element maxOccurs="unbounded" name="SEQUENCE2" type="MT210_SEQUENCE2"/>
   </xs:sequence>
  </xs:complexType>
 </xs:element>
</xs:schema>


...

  MT292
<?xml version="1.0" ?>
<xs:schema elementFormDefault="qualified" targetNamespace="http://www.w3schools.com" xmlns="http://www.w3schools.com" xmlns:xs="http://www.w3.org/2001/XMLSchema">
 <xs:simpleType name="MT292_20_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([^/]([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,14}[^/])"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT292_20_Type">
  <xs:simpleContent>
   <xs:extension base="MT292_20_Type_Pattern">
    <xs:attribute fixed="20" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT292_21_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([^/]([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,14}[^/])"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT292_21_Type">
  <xs:simpleContent>
   <xs:extension base="MT292_21_Type_Pattern">
    <xs:attribute fixed="21" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT292_11S_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([0-9]{3}(\n)?[0-9]{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(\n)?([0-9]{4}[0-9]{6})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT292_11S_Type">
  <xs:simpleContent>
   <xs:extension base="MT292_11S_Type_Pattern">
    <xs:attribute fixed="11S" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT292_79_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,50}\n?){1,35})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT292_79_Type">
  <xs:simpleContent>
   <xs:extension base="MT292_79_Type_Pattern">
    <xs:attribute fixed="79" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:element name="MT292">
  <xs:complexType>
   <xs:sequence>
    <xs:element name="TransactionReferenceNumber" type="MT292_20_Type"/>
    <xs:element name="RelatedReference" type="MT292_21_Type"/>
    <xs:element name="MTAndDateOfTheOriginalMessage" type="MT292_11S_Type"/>
    <xs:element minOccurs="0" name="NarrativeDescriptionOfTheOriginalMessage" type="MT292_79_Type"/>
   </xs:sequence>
  </xs:complexType>
 </xs:element>
</xs:schema>


...

  MT299
<?xml version="1.0" ?>
<xs:schema elementFormDefault="qualified" targetNamespace="http://www.w3schools.com" xmlns="http://www.w3schools.com" xmlns:xs="http://www.w3.org/2001/XMLSchema">
 <xs:simpleType name="MT299_20_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([^/]([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,14}[^/])"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT299_20_Type">
  <xs:simpleContent>
   <xs:extension base="MT299_20_Type_Pattern">
    <xs:attribute fixed="20" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT299_21_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([^/]([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,14}[^/])"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT299_21_Type">
  <xs:simpleContent>
   <xs:extension base="MT299_21_Type_Pattern">
    <xs:attribute fixed="21" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT299_79_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,50}\n?){1,35})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT299_79_Type">
  <xs:simpleContent>
   <xs:extension base="MT299_79_Type_Pattern">
    <xs:attribute fixed="79" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:element name="MT299">
  <xs:complexType>
   <xs:sequence>
    <xs:element name="TransactionReferenceNumber" type="MT299_20_Type"/>
    <xs:element minOccurs="0" name="RelatedReference" type="MT299_21_Type"/>
    <xs:element name="Narrative" type="MT299_79_Type"/>
   </xs:sequence>
  </xs:complexType>
 </xs:element>
</xs:schema>


...

  MT304
<?xml version="1.0" ?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.w3schools.com" targetNamespace="http://www.w3schools.com" elementFormDefault="qualified">
 <xs:simpleType name="MT304_SequenceA_GeneralInformation_20_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([^/]([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,14}[^/])"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceA_GeneralInformation_20_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceA_GeneralInformation_20_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="20"/>
    <xs:attribute name="isMandatory" default="True"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceA_GeneralInformation_21_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([^/]([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,14}[^/])"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceA_GeneralInformation_21_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceA_GeneralInformation_21_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="21"/>
    <xs:attribute name="isMandatory" default="False"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceA_GeneralInformation_22A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((AMND|CAMN|CCAN|CANC|DUPL|NEWT|CNEW))"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceA_GeneralInformation_22A_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceA_GeneralInformation_22A_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="22A"/>
    <xs:attribute name="isMandatory" default="True"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceA_GeneralInformation_94A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((AFWD|ANDF|ASET))"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceA_GeneralInformation_94A_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceA_GeneralInformation_94A_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="94A"/>
    <xs:attribute name="isMandatory" default="True"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceA_GeneralInformation_17O_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((N|Y))"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceA_GeneralInformation_17O_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceA_GeneralInformation_17O_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="17O"/>
    <xs:attribute name="isMandatory" default="False"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceA_GeneralInformation_17F_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((N|Y))"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceA_GeneralInformation_17F_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceA_GeneralInformation_17F_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="17F"/>
    <xs:attribute name="isMandatory" default="False"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceA_GeneralInformation_17N_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((N|Y))"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceA_GeneralInformation_17N_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceA_GeneralInformation_17N_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="17N"/>
    <xs:attribute name="isMandatory" default="False"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceA_GeneralInformation_83A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceA_GeneralInformation_83A_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceA_GeneralInformation_83A_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="83A"/>
    <xs:attribute name="isMandatory" default="True"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceA_GeneralInformation_83J_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,40}\n?){1,5})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceA_GeneralInformation_83J_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceA_GeneralInformation_83J_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="83J"/>
    <xs:attribute name="isMandatory" default="True"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceA_GeneralInformation_82A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceA_GeneralInformation_82A_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceA_GeneralInformation_82A_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="82A"/>
    <xs:attribute name="isMandatory" default="True"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceA_GeneralInformation_82J_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,40}\n?){1,5})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceA_GeneralInformation_82J_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceA_GeneralInformation_82J_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="82J"/>
    <xs:attribute name="isMandatory" default="True"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceA_GeneralInformation_87A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceA_GeneralInformation_87A_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceA_GeneralInformation_87A_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="87A"/>
    <xs:attribute name="isMandatory" default="True"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceA_GeneralInformation_87J_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,40}\n?){1,5})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceA_GeneralInformation_87J_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceA_GeneralInformation_87J_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="87J"/>
    <xs:attribute name="isMandatory" default="True"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceA_GeneralInformation_81A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceA_GeneralInformation_81A_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceA_GeneralInformation_81A_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="81A"/>
    <xs:attribute name="isMandatory" default="False"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceA_GeneralInformation_81D_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,4})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceA_GeneralInformation_81D_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceA_GeneralInformation_81D_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="81D"/>
    <xs:attribute name="isMandatory" default="False"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceA_GeneralInformation_81J_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,40}\n?){1,5})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceA_GeneralInformation_81J_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceA_GeneralInformation_81J_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="81J"/>
    <xs:attribute name="isMandatory" default="False"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceA_GeneralInformation_89A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceA_GeneralInformation_89A_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceA_GeneralInformation_89A_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="89A"/>
    <xs:attribute name="isMandatory" default="False"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceA_GeneralInformation_89D_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,4})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceA_GeneralInformation_89D_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceA_GeneralInformation_89D_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="89D"/>
    <xs:attribute name="isMandatory" default="False"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceA_GeneralInformation_89J_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,40}\n?){1,5})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceA_GeneralInformation_89J_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceA_GeneralInformation_89J_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="89J"/>
    <xs:attribute name="isMandatory" default="False"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceA_GeneralInformation_17I_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="(N|[0-9])"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceA_GeneralInformation_17I_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceA_GeneralInformation_17I_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="17I"/>
    <xs:attribute name="isMandatory" default="False"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceA_GeneralInformation_77H_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((AFB|DERV|FBF|FEOMA|ICOM|IFEMA|ISDA|ISDACN|ISDACS|OTHER)(/[0-9]{4}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01]))?(//[0-9]{4})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceA_GeneralInformation_77H_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceA_GeneralInformation_77H_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="77H"/>
    <xs:attribute name="isMandatory" default="False"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceA_GeneralInformation_14C_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([0-9]{4})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceA_GeneralInformation_14C_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceA_GeneralInformation_14C_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="14C"/>
    <xs:attribute name="isMandatory" default="False"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceA_GeneralInformation_32E_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD))"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceA_GeneralInformation_32E_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceA_GeneralInformation_32E_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="32E"/>
    <xs:attribute name="isMandatory" default="False"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceA_GeneralInformation_30U_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([0-9]{4}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01]))"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceA_GeneralInformation_30U_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceA_GeneralInformation_30U_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="30U"/>
    <xs:attribute name="isMandatory" default="False"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceA_GeneralInformation_14S_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([A-Z]{3}[0-9]{1,2}(/(0[0-9]|[1][0-9]|2[0-3])([0-5][0-9])/[A-Z0-9]{4})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceA_GeneralInformation_14S_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceA_GeneralInformation_14S_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="14S"/>
    <xs:attribute name="isMandatory" default="False"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceA_GeneralInformation_26K_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((ISDA|JOIN|PTYA|PTYB))"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceA_GeneralInformation_26K_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceA_GeneralInformation_26K_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="26K"/>
    <xs:attribute name="isMandatory" default="False"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceA_GeneralInformation_21A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([^/]([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,16}[^/])"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceA_GeneralInformation_21A_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceA_GeneralInformation_21A_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="21A"/>
    <xs:attribute name="isMandatory" default="False"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceA_GeneralInformation_14E_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceA_GeneralInformation_14E_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceA_GeneralInformation_14E_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="14E"/>
    <xs:attribute name="isMandatory" default="False"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceB_ForexTransactionDetails_30T_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([0-9]{4}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01]))"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceB_ForexTransactionDetails_30T_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceB_ForexTransactionDetails_30T_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="30T"/>
    <xs:attribute name="isMandatory" default="True"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceB_ForexTransactionDetails_30V_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([0-9]{4}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01]))"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceB_ForexTransactionDetails_30V_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceB_ForexTransactionDetails_30V_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="30V"/>
    <xs:attribute name="isMandatory" default="True"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceB_ForexTransactionDetails_36_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([0-9,(?0-9)]{1,12})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceB_ForexTransactionDetails_36_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceB_ForexTransactionDetails_36_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="36"/>
    <xs:attribute name="isMandatory" default="True"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceB_ForexTransactionDetails_39M_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([A-Z]{2})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceB_ForexTransactionDetails_39M_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceB_ForexTransactionDetails_39M_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="39M"/>
    <xs:attribute name="isMandatory" default="False"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceB_ForexTransactionDetails_35C_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,8}(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,30})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceB_ForexTransactionDetails_35C_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceB_ForexTransactionDetails_35C_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="35C"/>
    <xs:attribute name="isMandatory" default="False"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_32B_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_32B_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_32B_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="32B"/>
    <xs:attribute name="isMandatory" default="True"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_53A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_53A_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_53A_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="53A"/>
    <xs:attribute name="isMandatory" default="True"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_53J_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,40}\n?){1,5})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_53J_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_53J_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="53J"/>
    <xs:attribute name="isMandatory" default="True"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_56A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_56A_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_56A_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="56A"/>
    <xs:attribute name="isMandatory" default="False"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_56J_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,40}\n?){1,5})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_56J_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_56J_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="56J"/>
    <xs:attribute name="isMandatory" default="False"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_57A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_57A_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_57A_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="57A"/>
    <xs:attribute name="isMandatory" default="False"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_57J_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,40}\n?){1,5})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_57J_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_57J_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="57J"/>
    <xs:attribute name="isMandatory" default="False"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_33B_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_33B_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_33B_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="33B"/>
    <xs:attribute name="isMandatory" default="True"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_53A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_53A_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_53A_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="53A"/>
    <xs:attribute name="isMandatory" default="False"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_53J_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,40}\n?){1,5})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_53J_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_53J_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="53J"/>
    <xs:attribute name="isMandatory" default="False"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_56A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_56A_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_56A_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="56A"/>
    <xs:attribute name="isMandatory" default="False"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_56J_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,40}\n?){1,5})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_56J_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_56J_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="56J"/>
    <xs:attribute name="isMandatory" default="False"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_57A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_57A_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_57A_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="57A"/>
    <xs:attribute name="isMandatory" default="True"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_57J_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,40}\n?){1,5})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_57J_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_57J_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="57J"/>
    <xs:attribute name="isMandatory" default="True"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_58A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_58A_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_58A_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="58A"/>
    <xs:attribute name="isMandatory" default="False"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_58J_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,40}\n?){1,5})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_58J_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_58J_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="58J"/>
    <xs:attribute name="isMandatory" default="False"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceC_OptionalGeneralInformation_21A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([^/]([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,16}[^/])"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceC_OptionalGeneralInformation_21A_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceC_OptionalGeneralInformation_21A_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="21A"/>
    <xs:attribute name="isMandatory" default="False"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceC_OptionalGeneralInformation_21G_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([^/]([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,16}[^/])"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceC_OptionalGeneralInformation_21G_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceC_OptionalGeneralInformation_21G_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="21G"/>
    <xs:attribute name="isMandatory" default="False"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22L_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22L_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22L_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="22L"/>
    <xs:attribute name="isMandatory" default="True"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22M_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,30})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22M_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22M_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="22M"/>
    <xs:attribute name="isMandatory" default="True"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22N_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,32})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22N_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22N_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="22N"/>
    <xs:attribute name="isMandatory" default="True"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier_22P_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,30})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier_22P_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier_22P_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="22P"/>
    <xs:attribute name="isMandatory" default="True"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier_22R_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,32})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier_22R_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier_22R_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="22R"/>
    <xs:attribute name="isMandatory" default="True"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceC_OptionalGeneralInformation_22U_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([A-Z]{1,6})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceC_OptionalGeneralInformation_22U_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceC_OptionalGeneralInformation_22U_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="22U"/>
    <xs:attribute name="isMandatory" default="False"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceC_OptionalGeneralInformation_35B_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((ISIN {1}[A-Z0-9]{12})?(\n)?((([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,4})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceC_OptionalGeneralInformation_35B_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceC_OptionalGeneralInformation_35B_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="35B"/>
    <xs:attribute name="isMandatory" default="False"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceC_OptionalGeneralInformation_22V_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceC_OptionalGeneralInformation_22V_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceC_OptionalGeneralInformation_22V_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="22V"/>
    <xs:attribute name="isMandatory" default="False"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceC_OptionalGeneralInformation_98D_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([0-9]{4}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(0[0-9]|[1][0-9]|2[0-3])([0-5][0-9])([0-5][0-9])(,[0-9]{1,3})?(/(N)?(0[0-9]|[1][0-9]|2[0-3])(([0-5][0-9]))?)?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceC_OptionalGeneralInformation_98D_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceC_OptionalGeneralInformation_98D_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="98D"/>
    <xs:attribute name="isMandatory" default="False"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceC_OptionalGeneralInformation_98G_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([0-9]{4}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(0[0-9]|[1][0-9]|2[0-3])([0-5][0-9])([0-5][0-9])(,[0-9]{1,3})?(/(N)?(0[0-9]|[1][0-9]|2[0-3])(([0-5][0-9]))?)?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceC_OptionalGeneralInformation_98G_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceC_OptionalGeneralInformation_98G_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="98G"/>
    <xs:attribute name="isMandatory" default="False"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceC_OptionalGeneralInformation_29A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,4})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceC_OptionalGeneralInformation_29A_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceC_OptionalGeneralInformation_29A_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="29A"/>
    <xs:attribute name="isMandatory" default="False"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceC_OptionalGeneralInformation_34C_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([A-Z0-9]{4}/(N)?(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceC_OptionalGeneralInformation_34C_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceC_OptionalGeneralInformation_34C_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="34C"/>
    <xs:attribute name="isMandatory" default="False"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:complexType name="MT304_SequenceC_OptionalGeneralInformation_72_Type">
  <xs:simpleContent>
   <xs:extension base="xs:string">
    <xs:attribute name="swiftTag" fixed="72"/>
    <xs:attribute name="isMandatory" default="False"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceD_AccountingInformation_21P_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([^/]([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,16}[^/])"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceD_AccountingInformation_21P_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceD_AccountingInformation_21P_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="21P"/>
    <xs:attribute name="isMandatory" default="False"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceD_AccountingInformation_17G_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((N|Y))"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceD_AccountingInformation_17G_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceD_AccountingInformation_17G_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="17G"/>
    <xs:attribute name="isMandatory" default="False"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceD_AccountingInformation_32G_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceD_AccountingInformation_32G_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceD_AccountingInformation_32G_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="32G"/>
    <xs:attribute name="isMandatory" default="False"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceD_AccountingInformation_34B_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceD_AccountingInformation_34B_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceD_AccountingInformation_34B_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="34B"/>
    <xs:attribute name="isMandatory" default="False"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceD_AccountingInformation_30F_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([0-9]{8})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceD_AccountingInformation_30F_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceD_AccountingInformation_30F_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="30F"/>
    <xs:attribute name="isMandatory" default="False"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceE_NetAmountToBeSettled_17G_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((N|Y))"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceE_NetAmountToBeSettled_17G_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceE_NetAmountToBeSettled_17G_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="17G"/>
    <xs:attribute name="isMandatory" default="True"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceE_NetAmountToBeSettled_32G_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceE_NetAmountToBeSettled_32G_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceE_NetAmountToBeSettled_32G_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="32G"/>
    <xs:attribute name="isMandatory" default="True"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceE_NetAmountToBeSettled_53A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceE_NetAmountToBeSettled_53A_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceE_NetAmountToBeSettled_53A_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="53A"/>
    <xs:attribute name="isMandatory" default="False"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceE_NetAmountToBeSettled_53D_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,4})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceE_NetAmountToBeSettled_53D_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceE_NetAmountToBeSettled_53D_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="53D"/>
    <xs:attribute name="isMandatory" default="False"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceE_NetAmountToBeSettled_53J_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,40}\n?){1,5})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceE_NetAmountToBeSettled_53J_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceE_NetAmountToBeSettled_53J_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="53J"/>
    <xs:attribute name="isMandatory" default="False"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceE_NetAmountToBeSettled_56A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceE_NetAmountToBeSettled_56A_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceE_NetAmountToBeSettled_56A_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="56A"/>
    <xs:attribute name="isMandatory" default="False"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceE_NetAmountToBeSettled_56D_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,4})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceE_NetAmountToBeSettled_56D_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceE_NetAmountToBeSettled_56D_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="56D"/>
    <xs:attribute name="isMandatory" default="False"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceE_NetAmountToBeSettled_56J_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,40}\n?){1,5})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceE_NetAmountToBeSettled_56J_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceE_NetAmountToBeSettled_56J_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="56J"/>
    <xs:attribute name="isMandatory" default="False"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceE_NetAmountToBeSettled_57A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceE_NetAmountToBeSettled_57A_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceE_NetAmountToBeSettled_57A_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="57A"/>
    <xs:attribute name="isMandatory" default="False"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceE_NetAmountToBeSettled_57D_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,4})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceE_NetAmountToBeSettled_57D_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceE_NetAmountToBeSettled_57D_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="57D"/>
    <xs:attribute name="isMandatory" default="False"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceE_NetAmountToBeSettled_57J_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,40}\n?){1,5})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceE_NetAmountToBeSettled_57J_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceE_NetAmountToBeSettled_57J_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="57J"/>
    <xs:attribute name="isMandatory" default="False"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceE_NetAmountToBeSettled_58A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceE_NetAmountToBeSettled_58A_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceE_NetAmountToBeSettled_58A_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="58A"/>
    <xs:attribute name="isMandatory" default="False"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceE_NetAmountToBeSettled_58D_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,4})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceE_NetAmountToBeSettled_58D_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceE_NetAmountToBeSettled_58D_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="58D"/>
    <xs:attribute name="isMandatory" default="False"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT304_SequenceE_NetAmountToBeSettled_58J_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,40}\n?){1,5})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT304_SequenceE_NetAmountToBeSettled_58J_Type">
  <xs:simpleContent>
   <xs:extension base="MT304_SequenceE_NetAmountToBeSettled_58J_Type_Pattern">
    <xs:attribute name="swiftTag" fixed="58J"/>
    <xs:attribute name="isMandatory" default="False"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:complexType name="MT304_SequenceA_GeneralInformation">
  <xs:sequence>
   <xs:element name="SendersReference" type="MT304_SequenceA_GeneralInformation_20_Type"/>
   <xs:element name="RelatedReference" type="MT304_SequenceA_GeneralInformation_21_Type" minOccurs="0"/>
   <xs:element name="TypeOfOperation" type="MT304_SequenceA_GeneralInformation_22A_Type"/>
   <xs:element name="ScopeOfOperation" type="MT304_SequenceA_GeneralInformation_94A_Type"/>
   <xs:element name="OpenIndicator" type="MT304_SequenceA_GeneralInformation_17O_Type" minOccurs="0"/>
   <xs:element name="FinalCloseIndicator" type="MT304_SequenceA_GeneralInformation_17F_Type" minOccurs="0"/>
   <xs:element name="NetSettlementIndicator" type="MT304_SequenceA_GeneralInformation_17N_Type" minOccurs="0"/>
   <xs:choice>
    <xs:element name="Fund_A" type="MT304_SequenceA_GeneralInformation_83A_Type"/>
    <xs:element name="Fund_J" type="MT304_SequenceA_GeneralInformation_83J_Type"/>
   </xs:choice>
   <xs:choice>
    <xs:element name="FundManager_A" type="MT304_SequenceA_GeneralInformation_82A_Type"/>
    <xs:element name="FundManager_J" type="MT304_SequenceA_GeneralInformation_82J_Type"/>
   </xs:choice>
   <xs:choice>
    <xs:element name="ExecutingBroker_A" type="MT304_SequenceA_GeneralInformation_87A_Type"/>
    <xs:element name="ExecutingBroker_J" type="MT304_SequenceA_GeneralInformation_87J_Type"/>
   </xs:choice>
   <xs:choice minOccurs="0">
    <xs:element name="CentralCounterpartyClearingHouse_A" type="MT304_SequenceA_GeneralInformation_81A_Type" minOccurs="0"/>
    <xs:element name="CentralCounterpartyClearingHouse_D" type="MT304_SequenceA_GeneralInformation_81D_Type" minOccurs="0"/>
    <xs:element name="CentralCounterpartyClearingHouse_J" type="MT304_SequenceA_GeneralInformation_81J_Type" minOccurs="0"/>
   </xs:choice>
   <xs:choice minOccurs="0">
    <xs:element name="ClearingBroker_A" type="MT304_SequenceA_GeneralInformation_89A_Type" minOccurs="0"/>
    <xs:element name="ClearingBroker_D" type="MT304_SequenceA_GeneralInformation_89D_Type" minOccurs="0"/>
    <xs:element name="ClearingBroker_J" type="MT304_SequenceA_GeneralInformation_89J_Type" minOccurs="0"/>
   </xs:choice>
   <xs:element name="PaymentVersusPaymentSettlementIndicator" type="MT304_SequenceA_GeneralInformation_17I_Type" minOccurs="0"/>
   <xs:element name="TypeDateVersionOfTheAgreement" type="MT304_SequenceA_GeneralInformation_77H_Type" minOccurs="0"/>
   <xs:element name="YearOfDefinitions" type="MT304_SequenceA_GeneralInformation_14C_Type" minOccurs="0"/>
   <xs:element name="SettlementCurrency" type="MT304_SequenceA_GeneralInformation_32E_Type" minOccurs="0"/>
   <xs:element name="ValuationDate" type="MT304_SequenceA_GeneralInformation_30U_Type" minOccurs="0"/>
   <xs:element name="SettlementRateSource" type="MT304_SequenceA_GeneralInformation_14S_Type" minOccurs="0" maxOccurs="unbounded"/>
   <xs:element name="CalculationAgent" type="MT304_SequenceA_GeneralInformation_26K_Type" minOccurs="0"/>
   <xs:element name="ReferenceToOpeningInstruction" type="MT304_SequenceA_GeneralInformation_21A_Type" minOccurs="0"/>
   <xs:element name="ClearingOrSettlementSession" type="MT304_SequenceA_GeneralInformation_14E_Type" minOccurs="0"/>
  </xs:sequence>
  <xs:attribute name="swiftTag" fixed="15A"/>
  <xs:attribute name="isMandatory" default="True"/>
  <xs:attribute name="formatTag" fixed="False"/>
 </xs:complexType>
 <xs:complexType name="MT304_SequenceB_ForexTransactionDetails">
  <xs:sequence>
   <xs:element name="TradeDate" type="MT304_SequenceB_ForexTransactionDetails_30T_Type"/>
   <xs:element name="ValueDate" type="MT304_SequenceB_ForexTransactionDetails_30V_Type"/>
   <xs:element name="ExchangeRate" type="MT304_SequenceB_ForexTransactionDetails_36_Type"/>
   <xs:element name="PaymentClearingCentre" type="MT304_SequenceB_ForexTransactionDetails_39M_Type" minOccurs="0"/>
   <xs:element name="DigitalTokenIdentifier" type="MT304_SequenceB_ForexTransactionDetails_35C_Type" minOccurs="0"/>
   <xs:element name="SubsequenceB1_AmountBought" type="MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought"/>
   <xs:element name="SubsequenceB2_AmountSold" type="MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold"/>
  </xs:sequence>
  <xs:attribute name="swiftTag" fixed="15B"/>
  <xs:attribute name="isMandatory" default="True"/>
  <xs:attribute name="formatTag" fixed="False"/>
 </xs:complexType>
 <xs:complexType name="MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought">
  <xs:sequence>
   <xs:element name="CurrencyAmountBought" type="MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_32B_Type"/>
   <xs:choice>
    <xs:element name="DeliveryAgent_A" type="MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_53A_Type"/>
    <xs:element name="DeliveryAgent_J" type="MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_53J_Type"/>
   </xs:choice>
   <xs:choice minOccurs="0">
    <xs:element name="Intermediary_A" type="MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_56A_Type" minOccurs="0"/>
    <xs:element name="Intermediary_J" type="MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_56J_Type" minOccurs="0"/>
   </xs:choice>
   <xs:choice minOccurs="0">
    <xs:element name="ReceivingAgent_A" type="MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_57A_Type" minOccurs="0"/>
    <xs:element name="ReceivingAgent_J" type="MT304_SequenceB_ForexTransactionDetails_SubsequenceB1_AmountBought_57J_Type" minOccurs="0"/>
   </xs:choice>
  </xs:sequence>
 </xs:complexType>
 <xs:complexType name="MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold">
  <xs:sequence>
   <xs:element name="CurrencyAmountSold" type="MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_33B_Type"/>
   <xs:choice minOccurs="0">
    <xs:element name="DeliveryAgent_A" type="MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_53A_Type" minOccurs="0"/>
    <xs:element name="DeliveryAgent_J" type="MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_53J_Type" minOccurs="0"/>
   </xs:choice>
   <xs:choice minOccurs="0">
    <xs:element name="Intermediary_A" type="MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_56A_Type" minOccurs="0"/>
    <xs:element name="Intermediary_J" type="MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_56J_Type" minOccurs="0"/>
   </xs:choice>
   <xs:choice>
    <xs:element name="ReceivingAgent_A" type="MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_57A_Type"/>
    <xs:element name="ReceivingAgent_J" type="MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_57J_Type"/>
   </xs:choice>
   <xs:choice minOccurs="0">
    <xs:element name="BeneficiaryInstitution_A" type="MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_58A_Type" minOccurs="0"/>
    <xs:element name="BeneficiaryInstitution_J" type="MT304_SequenceB_ForexTransactionDetails_SubsequenceB2_AmountSold_58J_Type" minOccurs="0"/>
   </xs:choice>
  </xs:sequence>
 </xs:complexType>
 <xs:complexType name="MT304_SequenceC_OptionalGeneralInformation">
  <xs:sequence>
   <xs:element name="ReferenceToTheAssociatedTrade" type="MT304_SequenceC_OptionalGeneralInformation_21A_Type" minOccurs="0"/>
   <xs:element name="ExecutingBrokersReference" type="MT304_SequenceC_OptionalGeneralInformation_21G_Type" minOccurs="0"/>
   <xs:element name="SubsequenceC1_UniqueTransactionIdentifier" type="MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier" minOccurs="0" maxOccurs="unbounded"/>
   <xs:element name="UnderlyingProductIdentifier" type="MT304_SequenceC_OptionalGeneralInformation_22U_Type" minOccurs="0"/>
   <xs:element name="IdentificationOfFinancialInstrument" type="MT304_SequenceC_OptionalGeneralInformation_35B_Type" minOccurs="0"/>
   <xs:element name="ExecutionVenue" type="MT304_SequenceC_OptionalGeneralInformation_22V_Type" minOccurs="0"/>
   <xs:element name="ExecutionTimestamp" type="MT304_SequenceC_OptionalGeneralInformation_98D_Type" minOccurs="0"/>
   <xs:element name="ClearingTimestamp" type="MT304_SequenceC_OptionalGeneralInformation_98G_Type" minOccurs="0"/>
   <xs:element name="ContactInformation" type="MT304_SequenceC_OptionalGeneralInformation_29A_Type" minOccurs="0"/>
   <xs:element name="CommissionAndFees" type="MT304_SequenceC_OptionalGeneralInformation_34C_Type" minOccurs="0" maxOccurs="unbounded"/>
   <xs:element name="SenderToReceiverInformation" type="MT304_SequenceC_OptionalGeneralInformation_72_Type" minOccurs="0"/>
  </xs:sequence>
  <xs:attribute name="swiftTag" fixed="15C"/>
  <xs:attribute name="isMandatory" default="False"/>
  <xs:attribute name="formatTag" fixed="False"/>
 </xs:complexType>
 <xs:complexType name="MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier">
  <xs:sequence>
   <xs:element name="ReportingJurisdiction" type="MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22L_Type"/>
   <xs:element name="UTINamespaceIssuerCode" type="MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22M_Type"/>
   <xs:element name="TransactionIdentifier" type="MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_22N_Type"/>
   <xs:element name="SubsequenceC1a_PriorUniqueTransactionIdentifier" type="MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier" minOccurs="0" maxOccurs="unbounded"/>
  </xs:sequence>
 </xs:complexType>
 <xs:complexType name="MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier">
  <xs:sequence>
   <xs:element name="PUTINamespaceIssuerCode" type="MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier_22P_Type"/>
   <xs:element name="PriorTransactionIdentifier" type="MT304_SequenceC_OptionalGeneralInformation_SubsequenceC1_UniqueTransactionIdentifier_SubsequenceC1a_PriorUniqueTransactionIdentifier_22R_Type"/>
  </xs:sequence>
 </xs:complexType>
 <xs:complexType name="MT304_SequenceD_AccountingInformation">
  <xs:sequence>
   <xs:element name="ReferenceToPreviousDeals" type="MT304_SequenceD_AccountingInformation_21P_Type" minOccurs="0" maxOccurs="unbounded"/>
   <xs:element name="GainIndicator" type="MT304_SequenceD_AccountingInformation_17G_Type" minOccurs="0"/>
   <xs:element name="CurrencyAmount" type="MT304_SequenceD_AccountingInformation_32G_Type" minOccurs="0"/>
   <xs:element name="CommissionAndFeesCurrencyAndAmount" type="MT304_SequenceD_AccountingInformation_34B_Type" minOccurs="0"/>
   <xs:element name="CommissionAndFeesSettlementDate" type="MT304_SequenceD_AccountingInformation_30F_Type" minOccurs="0"/>
  </xs:sequence>
  <xs:attribute name="swiftTag" fixed="15D"/>
  <xs:attribute name="isMandatory" default="False"/>
  <xs:attribute name="formatTag" fixed="False"/>
 </xs:complexType>
 <xs:complexType name="MT304_SequenceE_NetAmountToBeSettled">
  <xs:sequence>
   <xs:element name="GainIndicator" type="MT304_SequenceE_NetAmountToBeSettled_17G_Type"/>
   <xs:element name="CurrencyAmount" type="MT304_SequenceE_NetAmountToBeSettled_32G_Type"/>
   <xs:choice minOccurs="0">
    <xs:element name="DeliveryAgent_A" type="MT304_SequenceE_NetAmountToBeSettled_53A_Type" minOccurs="0"/>
    <xs:element name="DeliveryAgent_D" type="MT304_SequenceE_NetAmountToBeSettled_53D_Type" minOccurs="0"/>
    <xs:element name="DeliveryAgent_J" type="MT304_SequenceE_NetAmountToBeSettled_53J_Type" minOccurs="0"/>
   </xs:choice>
   <xs:choice minOccurs="0">
    <xs:element name="Intermediary_A" type="MT304_SequenceE_NetAmountToBeSettled_56A_Type" minOccurs="0"/>
    <xs:element name="Intermediary_D" type="MT304_SequenceE_NetAmountToBeSettled_56D_Type" minOccurs="0"/>
    <xs:element name="Intermediary_J" type="MT304_SequenceE_NetAmountToBeSettled_56J_Type" minOccurs="0"/>
   </xs:choice>
   <xs:choice minOccurs="0">
    <xs:element name="ReceivingAgent_A" type="MT304_SequenceE_NetAmountToBeSettled_57A_Type" minOccurs="0"/>
    <xs:element name="ReceivingAgent_D" type="MT304_SequenceE_NetAmountToBeSettled_57D_Type" minOccurs="0"/>
    <xs:element name="ReceivingAgent_J" type="MT304_SequenceE_NetAmountToBeSettled_57J_Type" minOccurs="0"/>
   </xs:choice>
   <xs:choice minOccurs="0">
    <xs:element name="BeneficiaryInstitution_A" type="MT304_SequenceE_NetAmountToBeSettled_58A_Type" minOccurs="0"/>
    <xs:element name="BeneficiaryInstitution_D" type="MT304_SequenceE_NetAmountToBeSettled_58D_Type" minOccurs="0"/>
    <xs:element name="BeneficiaryInstitution_J" type="MT304_SequenceE_NetAmountToBeSettled_58J_Type" minOccurs="0"/>
   </xs:choice>
  </xs:sequence>
  <xs:attribute name="swiftTag" fixed="15E"/>
  <xs:attribute name="isMandatory" default="False"/>
  <xs:attribute name="formatTag" fixed="False"/>
 </xs:complexType>
 <xs:element name="MT304">
  <xs:complexType>
   <xs:sequence>
    <xs:element name="SequenceA_GeneralInformation" type="MT304_SequenceA_GeneralInformation"/>
    <xs:element name="SequenceB_ForexTransactionDetails" type="MT304_SequenceB_ForexTransactionDetails"/>
    <xs:element name="SequenceC_OptionalGeneralInformation" type="MT304_SequenceC_OptionalGeneralInformation" minOccurs="0"/>
    <xs:element name="SequenceD_AccountingInformation" type="MT304_SequenceD_AccountingInformation" minOccurs="0"/>
    <xs:element name="SequenceE_NetAmountToBeSettled" type="MT304_SequenceE_NetAmountToBeSettled" minOccurs="0"/>
   </xs:sequence>
  </xs:complexType>
 </xs:element>
</xs:schema>


...

}

