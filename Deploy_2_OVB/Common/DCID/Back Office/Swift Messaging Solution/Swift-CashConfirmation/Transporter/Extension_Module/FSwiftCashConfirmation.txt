#
# Front Arena exported extension module.
# source          ""
# timestamp (utc) "2023-02-02 11:11:07.1"
# ***** DO NOT EDIT! *****
#
name        "FSwiftCashConfirmation"
description ""

groups {
}

decls[FColumnDefinition] {
  "BusinessProcessState" ( "sheet columns.settlementsheet" ) "";
  "StateChartName" ( "sheet columns.settlementsheet" ) "";
}

clx FTradingSheet [FColumnDefinition] {
  BusinessProcessState =
  Description=BusinessProcess current state
  ExtensionAttribute=BusinessProcessState
  GroupLabel=Business Process
  Name=Current State
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  StateChartName =
  Description=State chart name
  ExtensionAttribute=StateChartName
  GroupLabel=Business Process
  Name=State Chart Name
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


}

decls[FCommandExtension] {
  "Insert  Settlements" ( "active commands" ) "";
  "Pairing View 910" ( "active commands" ) "";
}

clx FBackOfficeManagerFrame [FCommandExtension] {
  Category.Home.Panel.InsertCreditConf =
  ChildOrder=insertItems;Separator;viewColumns;Separator;Insert Settlements Credit Conf


  Insert  Settlements =
  icon=InsertItems
  LargeIcon=Yes
  RibbonLabel=Insert  Settlements


  Pairing View 910 =
  icon=SettlementMgr


}

decls[FCustomFunction] {
}

clx FObject [FCustomFunction] {
  get_business_process_from_external_item =
  Definition=get_business_process_from_external_item(FObject externalItem): FBusinessProcess
  Function=FSwiftMLUtils.get_business_process_from_external_item


  get_external_item_from_acm_object =
  Definition=get_external_item_from_acm_object(FObject acm_object): FObject
  Function=FSwiftMLUtils.get_external_item_from_acm_object


}

decls[FExtensionAttribute] {
  "BusinessProcessId" ( "sheet columns.settlementsheet" ) "";
  "BusinessProcessState" ( "sheet columns.settlementsheet" ) "";
  "ExternalItemId" ( "sheet columns.settlementsheet" ) "";
  "StateChartName" ( "sheet columns.settlementsheet" ) "";
}

clx FSettlement [FExtensionAttribute] {
  BusinessProcess = get_business_process_from_external_item(ExternalItem);
  BusinessProcessId = switch(BusinessProcess <> nil, 
  true->BusinessProcess.Oid, 
  false->nil);
  BusinessProcessState = switch(BusinessProcess <> nil, 
  true->BusinessProcess.CurrentStep.State.Name, 
  false->nil);
  ExternalItem = get_external_item_from_acm_object(object);
  ExternalItemId = switch(ExternalItem <> nil, 
  true->ExternalItem.Oid, 
  false->nil);
  StateChartName = switch(BusinessProcess <> nil, 
  true->BusinessProcess.StateChart.Name, 
  false->nil);
}

clx FSettlementSheet [FExtensionAttribute] {
  UnIdentifiedSettlementMessagesPanel_DefaultColumns = "SettlementTrade. CounterpartyName. SettlementCurrency. Amount. ValueDay. SettlementStatus.  BusinessProcessState. ExternalItemId. BusinessProcessId. StateChartName";
}

decls[FMenuExtension] {
  "BusinessProcess" ( "sheet columns.settlementsheet" ) "";
}

clx FBusinessProcessSheet [FMenuExtension] {
  Pair  Message With Credit Conf =
  CreateFunction=FMTDisplayHelpers.pair_swift_message_with_settlement_common
  DisplayName=Pair Settlement
  MenuType=GridRowHeader


}

clx FSettlementSheet [FMenuExtension] {
  CashSettlementMatchingMenu =
  DisplayName=Cash Settlement Matching
  MenuType=GridRowHeader
  SubMenuCreateFunction=FMTDisplayHelpers.CashSettlementMatchingMenuCreate


  Pair  Message With Credit Conf =
  CreateFunction=FMTDisplayHelpers.pair_swift_message_with_settlement_common
  DisplayName=Pair Settlement
  MenuType=GridRowHeader


}

decls[FParameters] {
}

clx FObject [FParameters] {
  CashPairingViewEnabler =
  MTTypes=['900', '910', '940', '950']


  FCashConfirmationInNotify_Config =
  LogLevel=INFO  # INFO, DEBUG, ERROR, WARN
  NotificationLevel=TRACK  # TRACK, DEBUG, WARNING, ERROR, SUCCESS
  NotificationMedia=OFF  # OFF, PRIME_LOG, PRIME_LOG_TRANSIENT
  NotifyUser=


  FMT900_910In_Config =
  builddate=22-Dec-2022
  CashConfirmationIn_AMBReceiver=CASH_CONF_MSG_READER
  PairingViewAcmObjColumns=SettlementTrade,AcquirerName,Amount,ValueDay,SettlementCurrency,Settlement Document Ids,SettlementMTMessages,RelationType,BusinessProcessId,BusinessProcessState,StateChartName
  PairingViewBPRColumns=TransRefNumber,RelatedReference,AccountIdentification,Amount,ValueDate,Currency
  PairingViewBPRQuery=MT900_UnpairedBPR, MT910_UnpairedBPR
  version=3.6.3-0.5.6048


  FMT900_910InPairingView =
  AcmObjQuery=MT900_Settlements, MT910_Settlements
  LowerPanelAcmObjType=FSettlement
  LowerPanelName=MT900/MT910 Settlements To Pair
  LowerPanelSheetTemplate=MT900_MT910Settlements
  LowerPanelSheetType=FSettlementSheet
  UnpairedBPRQuery=MT900_UnpairedBPR, MT910_UnpairedBPR
  UpperPanelName=MT900 MT910 Unpaired BPRs
  UpperPanelSheetTemplate=MT900_MT910UnpairedBPR


  FMT900DerivedIn_Config =
  EligibilityQuery=MT900Derived_Settlements
  Match={'Amount':{'CMP_FUNC':'precision','ARG':'0.01'},'ValueDate':{}, 'Currency':{'CMP_FUNC':'ignore_case'}, 'AccountIdentification':{}}
  Pair={'Amount':{'CMP_FUNC':'precision','ARG':'0.01'},'ValueDate':{}, 'Currency':{'CMP_FUNC':'ignore_case'}, 'AccountIdentification':{}}
  StateChart=FSwiftDerivedDebitCreditConfIn
  UnpairedBPRQuery=MT900Derived_UnpairedBPR


  FMT900In_Config =
  EligibilityQuery=MT900_Settlements
  Match={'Amount':{'CMP_FUNC':'precision','ARG':'0.01'},'ValueDate':{}, 'Currency':{'CMP_FUNC':'ignore_case'}, 'AccountIdentification':{}}
  Pair={'Amount':{'CMP_FUNC':'precision','ARG':'0.01'},'ValueDate':{}, 'Currency':{'CMP_FUNC':'ignore_case'}, 'AccountIdentification':{}}
  StateChart=FSwiftDebitCreditConfIn
  UnpairedBPRQuery=MT900_UnpairedBPR


  FMT910DerivedIn_Config =
  EligibilityQuery=MT910Derived_Settlements
  Match={'Amount':{'CMP_FUNC':'precision','ARG':'0.01'},'ValueDate':{}, 'Currency':{'CMP_FUNC':'ignore_case'}, 'AccountIdentification':{}}
  Pair={'Amount':{'CMP_FUNC':'precision','ARG':'0.01'},'ValueDate':{}, 'Currency':{'CMP_FUNC':'ignore_case'},'AccountIdentification':{}}
  StateChart=FSwiftDerivedDebitCreditConfIn
  UnpairedBPRQuery=MT910Derived_UnpairedBPR


  FMT910In_Config =
  EligibilityQuery=MT910_Settlements
  Match={'Amount':{'CMP_FUNC':'precision','ARG':'0.01'},'ValueDate':{}, 'Currency':{'CMP_FUNC':'ignore_case'}, 'AccountIdentification':{}}
  Pair={'Amount':{'CMP_FUNC':'precision','ARG':'0.01'},'ValueDate':{}, 'Currency':{'CMP_FUNC':'ignore_case'}, 'AccountIdentification':{}}
  StateChart=FSwiftDebitCreditConfIn
  UnpairedBPRQuery=MT910_UnpairedBPR


  FMT940In_Config =
  ChildStateChart=FSwiftDerivedDebitCreditConfIn
  Derived_PairingViewBPRColumns=TransRefNumber,RelatedReference,AccountIdentification,Amount,ValueDate,Currency
  PairingViewBPRColumns=RelatedReference,TransRefNumber,AccountIdentification,StatementNumber
  StateChart=FSwiftCustomerStatementIn
  UnpairedBPRQuery=MT940_UnpairedBPR


  FMT940InPairingView =
  AcmObjQueryDerived=MT900Derived_Settlements,MT910Derived_Settlements
  DerivedPanelName=StatementList
  LowerPanelAcmObjTypeDerived=FSettlement
  LowerPanelName=MT940Message
  LowerPanelNameDerived=MT940 Settlements To Pair
  LowerPanelSheetTemplateDerived=MT940Settlements
  LowerPanelSheetTypeDerived=FSettlementSheet
  UnpairedBPRQuery=MT940_UnpairedBPR
  UpperPanelName=MT940 Unpaired BPRs
  UpperPanelNameDerived=Unpaired_MT940_Child_BPRs
  UpperPanelSheetTemplate=MT940UnpairedBPR
  UpperPanelSheetTemplateDerived=MT940ChildUnpairedBPR


  FMT942In_Config =
  EligibilityQuery='eligible_objects_for_pairing insert item query'
  Match={}
  Pair={}
  StateChart=F942StateChart
  UnpairedBPRQuery='unpaired bpr query for pairing view'


  FMT950DerivedIn_Config =
  EligibilityQuery=Settlement_202_210
  Match={'Amount': {'CMP_FUNC': 'precision', 'ARG': '0.01'}, 'ValueDate': {}, 'Currency': {'CMP_FUNC': 'ignore_case'},'AccountIdentification': {}}
  Pair={}
  StateChart=FSwiftStatementMessageDerivedIn


  FMT950In_Config =
  ChildStateChart=FSwiftStatementMessageDerivedIn
  Derived_PairingViewBPRColumns=TransRefNumber,AccountIdentification,ValueDate,Currency,Amount
  PairingViewBPRColumns=TransRefNumber,AccountIdentification,StatementNumber
  StateChart=FSwiftStatementMessageIn
  UnpairedBPRQuery=MT950_UnpairedBPR


  FMT950InPairingView =
  AcmObjQueryDerived=Settlement_202_210
  DerivedPanelName=StatementList950
  LowerPanelAcmObjTypeDerived=FSettlement
  LowerPanelName=MT950Message
  LowerPanelNameDerived=MT950 Settlements To Pair
  LowerPanelSheetTemplateDerived=MT950Settlements
  LowerPanelSheetTypeDerived=FSettlementSheet
  UnpairedBPRQuery=MT950_UnpairedBPR
  UpperPanelName=MT950 Unpaired BPRs
  UpperPanelNameDerived=Unpaired_MT950_Child_BPRs
  UpperPanelSheetTemplate=MT950UnpairedBPR
  UpperPanelSheetTemplateDerived=MT950ChildUnpairedBPR


}

decls[FPythonCode] {
}

clx FObject [FPythonCode] {
  FCashConfirmationInMain
"""----------------------------------------------------------------------------
MODULE
    FCashConfirmationInMain : FCashSettlementConfMain for listening ACM updates and business process update.

FUNCTION
    process_bpr_step_update()
        Handles the business process updates
    process_settlement_update()
        Handles the settlement updates

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FCashConfirmationInSC
"""----------------------------------------------------------------------------
MODULE
    FCashConfirmationInSC: State chart creation for 9XX message

DESCRIPTION
    MT9XX state chart.

FUNCTIONS
    define_state_transition_DebitCredit():
    define_state_transition_DebitCredit_Derived():
    define_state_transition_CustomerStatement():
        Defines the state and transitions of the state chart
    create_state_charts():
    create_9XX_sc():
        Invokes the creation of state charts.

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import FMTStateChart
import FSwiftReaderLogger
notifier = FSwiftReaderLogger.FSwiftReaderLogger('CashConfIn', 'FCashConfirmationInNotify_Config')

def define_state_transition_DebitCredit():
        """
        Creates a state chart with the given name, if required.
        The definition parameter must completely define the content of the business
        process state chart, including all states and transitions between them. Its
        format is a dictionary of states mapped to a dictionary of transitions as
        event->next_state items, e.g.:

          {'state a':  {'event to go to b': 'state b', 'event to go to c': 'state c'}}

        All defined next_states values must be unique within a state's transitions
        (i.e. multiple events cannot lead to the same next_state).
        """

        state_chart_name = 'FSwiftDebitCreditConfIn'
        old_state_chart_name = 'DebitCreditConfMsg'
        state_chart = {
                        'Ready'                 :    {'Identified'                      :    'Paired',
                                                      'NotIdentified'                   :    'Unpaired'},
                        'Paired'                :    {'NoMatch'                         :    'Difference',
                                                      'Match'                           :    'Matched'},
                        'Difference'            :    {'ManuallyMatched'                 :    'Matched',
                                                      'Unpair'                          :    'Unpaired',
                                                      'Re-Match'                        :    'Paired'},
                        'Unpaired'              :    {'Identified'                      :    'Paired',
                                                      'Ignore'                          :    'Ignored'},
                        'Matched'               :    {'Unpair'                          :    'Unpaired'}
                    }
        return state_chart_name, state_chart, old_state_chart_name

def define_state_transition_DebitCredit_Derived():
        """
        Creates a state chart with the given name, if required.
        The definition parameter must completely define the content of the business
        process state chart, including all states and transitions between them. Its
        format is a dictionary of states mapped to a dictionary of transitions as
        event->next_state items, e.g.:

          {'state a':  {'event to go to b': 'state b', 'event to go to c': 'state c'}}

        All defined next_states values must be unique within a state's transitions
        (i.e. multiple events cannot lead to the same next_state).
        """

        state_chart_name = 'FSwiftDerivedDebitCreditConfIn'
        old_state_chart_name = 'DerivedDebitCreditConfMsg'
        state_chart = {
                        'Ready'                 :    {'Identified'                      :    'Paired',
                                                      'NotIdentified'                   :    'Unpaired'},
                        'Paired'                :    {'NoMatch'                         :    'Difference',
                                                      'Match'                           :    'Matched'},
                        'Difference'            :    {'ManuallyMatched'                 :    'Matched',
                                                      'Unpair'                          :    'Unpaired',
                                                      'Re-Match'                        :    'Paired'},
                        'Unpaired'              :    {'Identified'                      :    'Paired',
                                                      'Ignore'                          :    'Ignored'},
                        'Matched'               :    {'Unpair'                          :    'Unpaired'}
                    }
        return state_chart_name, state_chart, old_state_chart_name


def define_state_transition_DebitCredit_Derived_950():
    """
	Creates a state chart with the given name, if required.
	The definition parameter must completely define the content of the business
	process state chart, including all states and transitions between them. Its
	format is a dictionary of states mapped to a dictionary of transitions as
	event->next_state items, e.g.:

	  {'state a':  {'event to go to b': 'state b', 'event to go to c': 'state c'}}

	All defined next_states values must be unique within a state's transitions
	(i.e. multiple events cannot lead to the same next_state).
	"""

    state_chart_name = 'FSwiftStatementMessageDerivedIn'
    old_state_chart_name = 'DerivedDebitCreditConfMsg'
    state_chart = {
                        'Ready'                 :       {'Identified'                   : 'Paired',
                                                          'NotIdentified'               : 'Unpaired'},
                        'Paired'                :       {'NoMatch'                      : 'Difference',
                                                          'Match'                       : 'Matched'},
                        'Difference'            :       {'ManuallyMatched'              : 'Matched',
                                                         'Unpair'                       : 'Unpaired'},
                        'Unpaired'              :       {'Identified'                   : 'Paired',
                                                         'Ignore'                       : 'Ignored'},
                        'Matched'               :       {'Unpair'                       : 'Unpaired'}
    }
    return state_chart_name, state_chart, old_state_chart_name

def define_state_transition_CustomerStatement():
        """
        Creates a state chart with the given name, if required.
        The definition parameter must completely define the content of the business
        process state chart, including all states and transitions between them. Its
        format is a dictionary of states mapped to a dictionary of transitions as
        event->next_state items, e.g.:

          {'state a':  {'event to go to b': 'state b', 'event to go to c': 'state c'}}

        All defined next_states values must be unique within a state's transitions
        (i.e. multiple events cannot lead to the same next_state).
        """

        state_chart_name = 'FSwiftCustomerStatementIn'
        old_state_chart_name = 'CustomerStatementMsg'
        state_chart = {
                         'Ready'                :    {'Split'                           : 'CheckStatements'},
                         'CheckStatements'      :     {'Match'                          : 'Matched'},
                         'Matched'              :     {'NoMatch'                        :  'CheckStatements'}
        }
        return state_chart_name, state_chart, old_state_chart_name


def define_state_transition_CustomerStatement_950():
        """
        Creates a state chart with the given name, if required.
        The definition parameter must completely define the content of the business
        process state chart, including all states and transitions between them. Its
        format is a dictionary of states mapped to a dictionary of transitions as
        event->next_state items, e.g.:

          {'state a':  {'event to go to b': 'state b', 'event to go to c': 'state c'}}

        All defined next_states values must be unique within a state's transitions
        (i.e. multiple events cannot lead to the same next_state).
        """

        state_chart_name = 'FSwiftStatementMessageIn'
        old_state_chart_name = 'CustomerStatementMsg'
        state_chart = {
                        'Ready'                     :           {'Split'      :    'ProcessingMessage'},
                        'ProcessingMessage'          :           {'Match'  :    'AllMatched',
                                                                'NoMatch': 'RowNotMatched',},
                        'AllMatched'                   :           {'NoMatch': 'RowNotMatched'},
                        'RowNotMatched'                :           {'ReCheck': 'AllMatched'},
        }
        return state_chart_name, state_chart, old_state_chart_name


def create_state_charts(state_chart_name,state_chart_dict,old_state_chart_name):
    state_chart = FMTStateChart.create_state_chart(state_chart_name, state_chart_dict, old_state_chart_name)

    # EDIT 'coordinate string' ONLY IF STATE CHART MENTIONED ABOVE IS CHANGED.
    if 'CustomerStatementMsg' == state_chart_name:
        co_string = 'Ready,-500,0;CheckStatements,-300,0;Matched,400,0;UnMatched,-300,-250'
    elif 'FSwiftStatementMessageIn' == state_chart_name:
        co_string = 'Ready,-500,0;ProcessingMessage,-300,0;AllMatched,400,0;RowNotMatched,-300,-250'
    else:
        co_string = 'Ready,-500,0;Paired,-300,0;Matched,400,0;Unpaired,-300,-250;Difference,50,200;Ignored,300,-250;'
    FMTStateChart.layout_state_chart(state_chart_name, co_string)
    notifier.INFO('Done with layout of state chart %s.'%state_chart_name)

def create_9XX_sc():
    state_chart_name,state_chart_dict,old_state_chart_name = define_state_transition_DebitCredit()
    create_state_charts(state_chart_name,state_chart_dict,old_state_chart_name)

    state_chart_name,state_chart_dict,old_state_chart_name = define_state_transition_DebitCredit_Derived()
    create_state_charts(state_chart_name,state_chart_dict,old_state_chart_name)

    state_chart_name,state_chart_dict,old_state_chart_name = define_state_transition_CustomerStatement()
    create_state_charts(state_chart_name,state_chart_dict,old_state_chart_name)

    state_chart_name, state_chart_dict, old_state_chart_name = define_state_transition_DebitCredit_Derived_950()
    create_state_charts(state_chart_name, state_chart_dict, old_state_chart_name)

    state_chart_name, state_chart_dict, old_state_chart_name = define_state_transition_CustomerStatement_950()
    create_state_charts(state_chart_name, state_chart_dict, old_state_chart_name)

...

  FCashConfirmationInSettlementHandler
"""----------------------------------------------------------------------------
MODULE:
    FCashConfirmationInSettlementHandler

DESCRIPTION:
    This module processes the settlement updates.If the settlement received
    is eligible as per eligibility criteria defined in FParameter it is processed.

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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
gJIMwiyJRPrHZtG8bv78f37LjUc=""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FMT900_910InBase
"""----------------------------------------------------------------------------
MODULE
    FMT900_910InBase : FMT900_910Base class for mapping from swift data and acm
    object.

DESCRIPTION
    Default logic for extracting attributes from either swift data or acm
    object.
CLASS
    FMT900_910Base

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import acm
import FMTInBase
import FSwiftMLUtils
import FSwiftReaderLogger
notifier = FSwiftReaderLogger.FSwiftReaderLogger('CashConfIn', 'FCashConfirmationInNotify_Config')

from FStatementLine import *

from ChineseCommercialCode import CCC_simplified_writer, CCC_traditional_writer, CCC_traditional_reader, CCC_simplified_reader
import re
import FSwiftWriterUtils

CONFIG_PARAM = FSwiftMLUtils.Parameters('FSwiftReaderConfig')
chinese_language_version = getattr(CONFIG_PARAM, 'ChineseLanguageVersion', None)
if chinese_language_version:
    if chinese_language_version == 'Simplified':
        lookup = CCC_simplified_writer
    if chinese_language_version == 'Traditional':
        lookup = CCC_traditional_writer
else:
    lookup = CCC_simplified_writer

class FMT900_910Base(FMTInBase.FMTInBase):
    """ Base class for FMT900_910Base mapping"""
    def __init__(self, source, direction, msg_type, isDerived=False):
        try:
            super(FMT900_910Base, self).__init__(source, direction, isDerived)
        except Exception as error:
            if not(isDerived and str(error) == 'Not valid swift data'):
                raise error

        self._message_type = msg_type

        self.config_param = None

        if self.isDerived:
            self.config_param = FSwiftMLUtils.Parameters('F%sDerivedIn_Config'%(self._message_type))
            if self.source == 'SWIFT':
                self.derived_swift_data = self.derived_swift_data
        else:
            self.config_param = FSwiftMLUtils.Parameters('F%sIn_Config'%(self._message_type))

        self._account_identification = None
        self._value_date = None
        self._currency = None
        self._amount = None
        self._relatedReference = None
        self._fundCode = None
        self._transactionType = None
        self._identifiactionCode = None
        self._refAccountOwner = None
        self._refAccountInstitute = None
        self._openingBalanceAmount = None
        self._openingBalanceCurrency = None
        self._openingBalanceDate = None
        self._closingBalanceAmount = None
        self._closingBalanceCurrency = None
        self._closingBalanceDate = None
        self._transRefNumber = None
        self._ordering_customer = None

# ------------------------------------------------------------------------------
    def parseBalanceString(self, balance_str):
        amount = balance_str[10:].replace(',', '.')
        if balance_str[0:1] == 'D':
            amount = '-' + amount
        return [balance_str[1:7], balance_str[7:10], amount]

    def SetAttributes(self):
        """ Set the attributes from incoming swift message/acm object to MT9XX type"""
        try:
            if self.source == 'SWIFT':
                if self.isDerived:
                    statementLine = FStatementLine()
                    statementLine.populateObjectFromString(self.derived_swift_data)
                    self.AccountIdentification(statementLine.getAccountIdentification())
                    self.ValueDate(statementLine.getValueDate())
                    self.Currency(statementLine.getCurrency())
                    self.Amount(statementLine.getAmount(), statementLine.getDebitCreditMark())
                    self.RelatedReference(statementLine.getRelatedReference())
                    self.TransRefNumber(statementLine.getTransRefNumber())
                    self.FundCode(statementLine.getFundCode())
                    self.TransactionType(statementLine.getTransactionType())
                    self.IdentifiactionCode(statementLine.getIdentifiactionCode())
                    self.RefAccountOwner(statementLine.getRefAccountOwner())
                    self.RefAccountInstitute(statementLine.getRefAccountInstitute())

                    openingBal = statementLine.getOpeningBalance()
                    if openingBal:
                        opening_balance = self.parseBalanceString(openingBal)
                        self.OpeningBalanceDate(opening_balance[0])
                        self.OpeningBalanceCurrency(opening_balance[1])
                        self.OpeningBalanceAmount(opening_balance[2])

                    closingBal = statementLine.getClosingBalance()
                    if closingBal:
                        closing_balance = self.parseBalanceString(closingBal)
                        self.ClosingBalanceDate(closing_balance[0])
                        self.ClosingBalanceCurrency(closing_balance[1])
                        self.ClosingBalanceAmount(closing_balance[2])

                    self._identifier = statementLine.getLineIdentification()
                else:
                    self.set_account_identification_from_swift()
                    self.set_value_date_from_swift()
                    self.set_currency_from_swift()
                    self.set_amount_from_swift()
                    self.set_identifier_from_swift()
                    self.set_trans_ref_number_from_swift()
                    self.set_relatedReference_from_swift()
                    self.set_fundCode_from_swift()
                    self.set_transactionType_from_swift()
                    self.set_identifiactionCode_from_swift()
                    self.set_refAccountOwner_from_swift()
                    self.set_refAccountInstitute_from_swift()
                    if self._message_type == 'MT910':
                        self.set_ordering_customer_from_swift()

                self.subject_type = 'Settlement'
                self.ext_ref = self._identifier
            elif self.source == 'ACM':
                self.set_account_identification_from_settlement()
                self.set_value_date_from_settlement()
                self.set_currency_from_settlement()
                self.set_amount_from_settlement()
                self.set_identifier_from_settlement()
                self.set_relatedReference_from_settlement()
                self.set_fundCode_from_settlement()
                self.set_transactionType_from_settlement()
                self.set_identifiactionCode_from_settlement()
                self.set_refAccountOwner_from_settlement()
                self.set_refAccountInstitute_from_settlement()
                #self.set_ordering_customer_from_settlement()

        except Exception as e:
            notifier.ERROR("Exception occurred in SetAttributes : %s"%str(e))

# ------------------------------------------------------------------------------
    # Methods to fetch data from the swift message
    def UniquePair(self):
        """Lookup the unique identifier in the MT54X message and search for the specific settlement"""
        pair_object = None
        if self._message_type in ['MT910','MT900']:
            cash_settlement_out_config = FSwiftWriterUtils.get_config_from_fparameter('FCashOut_Config')
            include_tradeno_in_tag_20 = FSwiftMLUtils.incude_trade_no_in_tag20(cash_settlement_out_config)
            if FSwiftMLUtils.str_to_bool(include_tradeno_in_tag_20):
                settlement_num = self._identifier[1:self._identifier.find('T') - 1]
                pair_object = acm.FSettlement[str(settlement_num)]
                if not pair_object:
                    settlement_num = self._identifier[1:self._identifier.find('T')]
                    pair_object = acm.FSettlement[str(settlement_num)]
            else:
                settlement_num = self._identifier.split('-')[0] if len(self._identifier.split('-')) == 1 else self._identifier.split('-')[1]
                pair_object = acm.FSettlement[str(settlement_num)]
            if not pair_object:
                notifier.INFO('Settlement ' + str(settlement_num) + ' not found')
        return pair_object

    def set_identifier_from_swift(self):
        try:
            self._identifier = str(self.python_object.TransactionReferenceNumber.value())
        except Exception as e:
            notifier.ERROR("Exception occurred in set_identifier_from_swift : %s"%str(e))

    def set_trans_ref_number_from_swift(self):
        try:
            self._transRefNumber = self.python_object.TransactionReferenceNumber.value()
        except Exception as e:
            notifier.ERROR("Exception occurred in set_trans_ref_number_from_swift : %s"%str(e))

    def set_relatedReference_from_swift(self):
        try:
            self._relatedReference = self.python_object.RelatedReference.value()
        except Exception as e:
            notifier.ERROR("Exception occurred in set_relatedReference_from_swift : %s"%str(e))

    def set_account_identification_from_swift(self):
        try:
            self._account_identification = self.python_object.AccountIdentification.value()
        except Exception as e:
            notifier.ERROR("Exception occurred in set_account_identification_from_swift : %s"%str(e))

    def set_value_date_from_swift(self):
        try:
            valueDate = self.python_object.ValueDateCurrencyCodeAmount.value()
            self._value_date = valueDate[0:2] + '-' + valueDate[2:4] + '-' + valueDate[4:6]
        except Exception as e:
            notifier.ERROR("Exception occurred in set_value_date_from_swift : %s"%str(e))

    def set_currency_from_swift(self):
        try:
            currency = self.python_object.ValueDateCurrencyCodeAmount.value()
            self._currency = currency[6:9]
        except Exception as e:
            notifier.ERROR("Exception occurred in set_currency_from_swift : %s"%str(e))

    def set_amount_from_swift(self):
        try:
            amount = self.python_object.ValueDateCurrencyCodeAmount.value()
            self._amount = float(amount[9:].replace(',', '.'))
            if self._message_type == 'MT900':
                self._amount *= -1
        except Exception as e:
            notifier.ERROR("Exception occurred in set_amount_from_swift : %s"%str(e))

    def set_fundCode_from_swift(self):
        pass

    def set_transactionType_from_swift(self):
        pass

    def set_identifiactionCode_from_swift(self):
        pass

    def set_refAccountOwner_from_swift(self):
        pass

    def set_refAccountInstitute_from_swift(self):
        pass

    def set_ordering_customer_from_swift(self):
        try:
            if self.python_object and self.python_object.OrderingCustomer_F:
                msg = self.python_object.OrderingCustomer_F.value()
                ordering_customer_name = ''
                for each in msg.split('\n'):
                    if '1/' in each:
                        ordering_customer_name = ordering_customer_name + each[2:] + ' '
                self._ordering_customer = ordering_customer_name
            else:
                notifier.DEBUG("OrderingCustomer_F not present in incoming message")

        except Exception as e:
            notifier.ERROR("Exception occurred in set_ordering_customer_from_swift : %s"%str(e))

    def decode_incoming_50F(self, msg):
        """This method converts the code to chinese characters that are used in party name of
           ordering customer. Input the value of field 50F to this function and it will return
           the chinese characters associated with the code.
           This function uses
        """
        updated_msg = ''
        lookup = CCC_simplified_reader
        for line in msg.split('\n'):
            list_word = []
            for word in line.split(' '):
                var = re.findall('\\b^([0-9]{4})$|[0-9]\/(?:[A-Z]{2}\/)?([0-9]{4})$\\b',word)

                if not var or len(var) > 1:
                    if word == '':
                        word = ' '
                    list_word.append(word)
                else:
                    if var[0] and var[0][0]:
                        var = var[0][0]
                    else:
                        var = var[0][1]
                    replaced_word = lookup[var]
                    updated_word = re.sub(var,replaced_word,word)
                    list_word.append(updated_word)
            updated_line = ''.join(list_word)
            updated_msg = updated_msg + updated_line + '\n'
        return updated_msg

# ------------------------------------------------------------------------------
    # Method to fetch data from the adm
    def set_identifier_from_settlement(self):
        try:
            self._identifier = self.acm_obj.Oid()
        except Exception as e:
            notifier.ERROR("Exception occurred in set_identifier_from_settlement : %s"%str(e))

    def set_account_identification_from_settlement(self):
        try:
            self._account_identification = self.acm_obj.AcquirerAccount()
        except Exception as e:
            notifier.ERROR("Exception occurred in set_account_identification_from_settlement : %s"%str(e))

    def set_value_date_from_settlement(self):
        try:
            self._value_date = self.acm_obj.ValueDay()[2:]
        except Exception as e:
            notifier.ERROR("Exception occurred in set_value_date_from_settlement : %s"%str(e))

    def set_currency_from_settlement(self):
        try:
            self._currency = self.acm_obj.Currency().Name()
        except Exception as e:
            notifier.ERROR("Exception occurred in set_currency_from_settlement : %s"%str(e))

    def set_amount_from_settlement(self):
        try:
            self._amount = self.acm_obj.Amount()
        except Exception as e:
            notifier.ERROR("Exception occurred in set_amount_from_settlement : %s"%str(e))

    def set_relatedReference_from_settlement(self):
        pass

    def set_fundCode_from_settlement(self):
        pass

    def set_transactionType_from_settlement(self):
        pass

    def set_identifiactionCode_from_settlement(self):
        pass

    def set_refAccountOwner_from_settlement(self):
        pass

    def set_refAccountInstitute_from_settlement(self):
        pass


    def set_ordering_customer_from_settlement(self):
        try:
            ordering_customer_name = self.acm_obj.Counterparty().Fullname()

            char_set = ''
            lookup_temp = lookup
            try:
                char_set = str(self.acm_obj.Counterparty().AdditionalInfo().TraditionalChinese())
            except Exception as e:
                notifier.WARN("Could not find Additional Info 'TraditionalChinese'.")

            if char_set == 'True':
                lookup_temp = CCC_traditional_writer
            elif char_set == 'False':
                lookup_temp = CCC_simplified_writer

            temp_name = ordering_customer_name
            for key in list(lookup_temp.keys()):
                temp_name = temp_name.replace(str(key), lookup_temp[key] + " ")

            self._ordering_customer = temp_name
        except Exception as e:
            notifier.ERROR("Exception occurred in set_account_identification_from_settlement : %s"%str(e))


# ------------------------------------------------------------------------------
    # Method to fetch data used in the Pairing and Matching attributes in the FParameter
    def AccountIdentification(self, account = None):
        if account is not None:
            self._account_identification = account
        return str(self._account_identification)


    def ValueDate(self, valueDate = None):
        if valueDate is not None:
            self._value_date = valueDate
        return str(self._value_date)

    def Currency(self, currency = None):
        if currency is not None:
            self._currency = currency
        return str(self._currency)

    def Amount(self, amount = None, debitCreditMark = None):
        if amount is not None and debitCreditMark is not None:
            self._amount = float(amount)
            if debitCreditMark in ['D','RC']:
                self._amount *= -1
        return self._amount

    def TransRefNumber(self, transRefNo=None):
        if transRefNo is not None:
            self._transRefNumber = transRefNo
        return str(self._transRefNumber)

    def RelatedReference(self, relatedRef = None):
        if relatedRef is not None:
            self._relatedReference = relatedRef
        return str(self._relatedReference)

    def FundCode(self, fundCode = None):
        if fundCode is not None:
            self._fundCode = fundCode
        return str(self._fundCode)

    def TransactionType(self, transactionType = None):
        if transactionType is not None:
            self._transactionType = transactionType
        return str(self._transactionType)

    def IdentifiactionCode(self, identifiactionCode = None):
        if identifiactionCode is not None:
            self._identifiactionCode = identifiactionCode
        return str(self._identifiactionCode)

    def RefAccountOwner(self, refAccountOwner = None):
        if refAccountOwner is not None:
            self._refAccountOwner = refAccountOwner
        return str(self._refAccountOwner)

    def RefAccountInstitute(self, refAccountInstitute = None):
        if refAccountInstitute is not None:
            self._refAccountInstitute = refAccountInstitute
        return str(self._refAccountInstitute)

    def OpeningBalanceAmount(self, openingBalanceAmount = None):
        if openingBalanceAmount is not None:
            self._openingBalanceAmount = openingBalanceAmount
        return str(self._openingBalanceAmount)

    def OpeningBalanceCurrency(self, openingBalanceCurrency = None):
        if openingBalanceCurrency is not None:
            self._openingBalanceCurrency = openingBalanceCurrency
        return str(self._openingBalanceCurrency)

    def OpeningBalanceDate(self, openingBalanceDate = None):
        if openingBalanceDate is not None:
            self._openingBalanceDate = openingBalanceDate
        return str(self._openingBalanceDate)

    def ClosingBalanceAmount(self, closingBalanceAmount = None):
        if closingBalanceAmount is not None:
            self._closingBalanceAmount = closingBalanceAmount
        return str(self._closingBalanceAmount)

    def ClosingBalanceCurrency(self, closingBalanceCurrency = None):
        if closingBalanceCurrency is not None:
            self._closingBalanceCurrency = closingBalanceCurrency
        return str(self._closingBalanceCurrency)

    def ClosingBalanceDate(self, closingBalanceDate = None):
        if closingBalanceDate is not None:
            self._closingBalanceDate = closingBalanceDate
        return str(self._closingBalanceDate)

    def OrderingCustomer(self):
        return str(self._ordering_customer)

# ------------------------------------------------------------------------------


    @staticmethod
    def GetColumnMetaData():
        column_metadata = {
            'TransRefNumber': {'THEIRS_SWIFT_TAG' : '20', 'OURS_SWIFT_TAG' : '20', 'SEQUENCE': 'General Information', 'COLOR': ''},
            'RelatedReference': {'THEIRS_SWIFT_TAG' : '21', 'OURS_SWIFT_TAG' : '21', 'SEQUENCE': 'General Information', 'COLOR': ''},
            'AccountIdentification': {'THEIRS_SWIFT_TAG' : '25A', 'OURS_SWIFT_TAG' : '25A', 'SEQUENCE': 'General Information', 'COLOR': ''},
            'ValueDate': {'THEIRS_SWIFT_TAG' : '32A', 'OURS_SWIFT_TAG' : '32A', 'SEQUENCE': 'General Information', 'COLOR': ''},
            'Currency' : {'THEIRS_SWIFT_TAG' : '32A', 'OURS_SWIFT_TAG' : '32A', 'SEQUENCE': 'General Information', 'COLOR': ''},
            'Amount':{'THEIRS_SWIFT_TAG' : '32A', 'OURS_SWIFT_TAG' : '32A', 'SEQUENCE': 'General Information', 'COLOR': '','FORMAT':'NumDefault'},
            }
        return column_metadata

    @staticmethod
    def GetColumnNamePrefix():
        return 'MT900_910'


...

  FMT900_910InCallbacks
"""----------------------------------------------------------------------------
MODULE:
    FMT900_910InCallbacks

DESCRIPTION:
    OPEN EXTENSION MODULE
    FFXTradeConfMsgCallbacks class for user customization.
    Business process conditional_entry/exit and on_entry/exit callbacks.
    User can override the logic written in the base class FMT910CallbacksBase

    If user wishes to add some extra processing for conditional entry state
     e.g. 'ready' he can implement method as
    def condition_entry_state_ready(self):
        # Custom logic before core logic
        super(FMT910Callbacks, self).condition_entry_state_ready()
        # Custom logic after core logic

FUNCTIONS:
    For sample state xxx there are always the four standard extension points:
        condition_entry_state_xxx():
            To control if all the pre-requisites to performing the action and
            entering the state are defined.
        on_entry_state_xxx():
            Is the place to perform the action.
            For example, the on_ entry_state_matched is the place to set the
            confirmation status to Matched
        condition_exit_state_xxx():
            To control that all pre-requisites for performing the next action
            are fulfilled.
        on_exit_state_xxx():
             Is the place to reset values that you set in the state entry, if
             you are leaving the state to go backwards in the workflow.
             For example if you exit from the Matched state to go and re-pair,
             or to manually cancel, then you would want to remove the
             confirmation Matched status
CLASS
    FMT900_910InCallbacks

VERSION: 3.6.3-0.5.6048

----------------------------------------------------------------------------"""
# The context parameter is an instance of FBusinessProcessCallbackContext
import FMT900_910InCallbacksBase

class FMT900_910InCallbacks(FMT900_910InCallbacksBase.FMT900_910InCallbacksBase):
    def __init__(self):
        super(FMT900_910InCallbacks, self).__init__()

...

  FMT900_910InCallbacksBase
"""----------------------------------------------------------------------------
MODULE:
    FMT900_910InCallbacksBase

DESCRIPTION:
    OPEN EXTENSION MODULE
    This is a READ ONLY module. User can override the default logic in derived
    class FMT9XXCallbacks
    Business process conditional_entry/exit and on_entry/exit callbacks.

FUNCTIONS:
    For sample state xxx there are always the four standard extension points:
        condition_entry_state_xxx():
            To control if all the pre-requisites to performing the action and
            entering the state are defined.
        on_entry_state_xxx():
            Is the place to perform the action.
            For example, the on_ entry_state_matched is the place to set the
            confirmation status to Matched
        condition_exit_state_xxx():
            To control that all pre-requisites for performing the next action
            are fulfilled.
        on_exit_state_xxx():
             Is the place to reset values that you set in the state entry, if
             you are leaving the state to go backwards in the workflow.
             For example if you exit from the "Matched" state to go and re-pair,
             or to manually cancel, then you would want to remove the
             confirmation Matched status

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
# The context parameter is an instance of FBusinessProcessCallbackContext
import FSwiftMLUtils
import acm

import FSwiftReaderLogger
notifier = FSwiftReaderLogger.FSwiftReaderLogger('CashConfIn', 'FCashConfirmationInNotify_Config')

class FMT900_910InCallbacksBase(object):
    def __init__(self):
        pass

    def getStateBeforePairing(self,bpr):
        prevStatus = None
        for step in bpr.Steps():
            if step.State().Name() == 'Paired':
                diaryEntry = step.DiaryEntry()
                if diaryEntry:
                    param = diaryEntry.Parameters()
                    if param:
                        prevStatus = param.At('AcmObjectStatusBeforePairing',None)
                        break
        return prevStatus

    #   condition_entry_state_XXX
    def condition_entry_state_ready(self,context):
        return FSwiftMLUtils.HasUserRights(FSwiftMLUtils.get_operation_name_from_bpr_context(context))

    def condition_entry_state_paired(self,context):
        return FSwiftMLUtils.HasUserRights(FSwiftMLUtils.get_operation_name_from_bpr_context(context))

    def condition_entry_state_difference(self,context):
        return FSwiftMLUtils.HasUserRights(FSwiftMLUtils.get_operation_name_from_bpr_context(context))

    def condition_entry_state_unpaired(self,context):
        return FSwiftMLUtils.HasUserRights(FSwiftMLUtils.get_operation_name_from_bpr_context(context))

    def condition_entry_state_matched(self,context):
        return FSwiftMLUtils.HasUserRights(FSwiftMLUtils.get_operation_name_from_bpr_context(context))

    def condition_entry_state_ignored(self,context):
        return FSwiftMLUtils.HasUserRights(FSwiftMLUtils.get_operation_name_from_bpr_context(context))

    #   condition_exit_state_XXX
    def condition_exit_state_ready(self,context):
        return True

    def condition_exit_state_paired(self,context):
        return True

    def condition_exit_state_difference(self,context):
        return True

    def condition_exit_state_unpaired(self,context):
        return True

    def condition_exit_state_matched(self,context):
        return True

    def condition_exit_state_ignored(self,context):
        return True


    # Entry/Exit callbacks do not return anything
    #
    # Name convention is
    # 'on_' + 'entry_'/'exit_' + state name in lowercase and underscore
    #

    #   on_entry_state_XXX
    def on_entry_state_ready(self,context):
        pass

    def on_entry_state_paired(self,context):
        try:
            bpr = context.CurrentStep().BusinessProcess()
            settle_obj = FSwiftMLUtils.get_acm_object_from_bpr(bpr)
            diary_obj = settle_obj.Diary()
            if not diary_obj:
                diary_obj = acm.FSettlementDiary()

            diary_obj.AddNote('SWIFTREADER_PAIRED: BusinessProcess = %s'%str(bpr.Oid()))
            FSwiftMLUtils.commit_and_retry(diary_obj)
            settle_obj.Diary(diary_obj)
            FSwiftMLUtils.commit_and_retry(settle_obj)
        except Exception as error:
            notifier.ERROR("Error occurred in on_entry_state_paired: %s" % str(error))
            notifier.DEBUG(str(error), exc_info=1)

    def on_entry_state_difference(self,context):
        pass

    def on_entry_state_unpaired(self,context):
        try:
            bp = context.CurrentStep().BusinessProcess()
            acm_object = FSwiftMLUtils.get_acm_object_from_bpr(bp)
            try:
                if acm_object and acm_object.IsKindOf(acm.FSettlement):
                    prevStatus = self.getStateBeforePairing(bp)
                    if prevStatus:
                        acm_object.Status(prevStatus)
                    acm_object.SettledAmount(0)
                    acm_object.SettledDay('')
                    FSwiftMLUtils.commit_and_retry(acm_object)
            except Exception as e:
                notifier.ERROR("Can not move Settlement %s to %s status" % (acm_object.Oid(), prevStatus))
                notifier.DEBUG(str(e), exc_info=1)

            FSwiftMLUtils.FSwiftExternalObject.unlink_acm_object(context.CurrentStep().BusinessProcess(), 'Settlement')
        except Exception as e:
            notifier.ERROR("Error occurred while processing on_entry_state_unpaired: %s"%str(e))

    def on_entry_state_matched(self,context):
        try:
            bp = context.CurrentStep().BusinessProcess()
            acm_obj = FSwiftMLUtils.get_acm_object_from_bpr(bp)
            acm_obj.Status('Acknowledged')
            FSwiftMLUtils.commit_and_retry(acm_obj)
        except Exception as e:
            notifier.ERROR("Error occurred while processing on_entry_state_matched: %s"%str(e))


    def on_entry_state_ignored(self,context):
        pass

    #   on_exit_state_XXX

    def on_exit_state_ready(self,context):
        pass

    def on_exit_state_paired(self,context):
        pass

    def on_exit_state_difference(self,context):
        pass

    def on_exit_state_unpaired(self,context):
        pass

    def on_exit_state_matched(self,context):
        pass

    def on_exit_state_ignored(self,context):
        pass

...

  FMT900_910InDerivedBase
"""----------------------------------------------------------------------------
MODULE
    FMT900_910InDerivedBase class for user customization.

DESCRIPTION
    User can override the mapping defined in the base class. Logic for
    extracting attributes from either swift data or acm object can be
    overridden.
CLASS
    FMT900_910DerivedBase

VERSION: 3.6.3-0.5.6048
----------------------------------------------------------------------------"""
import FMT900_910InBase
class FMT900_910DerivedBase(FMT900_910InBase.FMT900_910Base):
    """ FMT900 class for user customization"""
    def __init__(self, source, direction, msg_type):
        super(FMT900_910DerivedBase, self).__init__(source, direction, msg_type,True)
        self.CustomMappings()

    def CustomMappings(self):
        """ Override/add mappings"""
        ''''
        if self.source == 'SWIFT':
            self.set_color()
        elif self.source == 'ACM':
            self.set_color_from_settlement()
        '''
        pass

    '''
    def set_color(self):
        try:
            self.__color = self.python_object.TRADDET.Color.value()
        except Exception as e:
            self.notifier.DEBUG("Exception occurred in set_color : %s"%str(e))

    def set_color_from_settlement(self):
        try:
            if self.acm_obj.Color():
                self.__color = self.acm_obj.Color()
        except Exception as e:
            self.notifier.DEBUG("Exception occurred in set_color_from_settlement : %s"%str(e))

    def Color(self):
        """ Get the color attribute"""
        return self.__color
    '''


...

  FMT900_910InDerivedCallbacks
"""----------------------------------------------------------------------------
MODULE:
    FMT900_910InDerivedCallbacks

DESCRIPTION:
    OPEN EXTENSION MODULE
    FFXTradeConfMsgCallbacks class for user customization.
    Business process conditional_entry/exit and on_entry/exit callbacks.
    User can override the logic written in the base class FMT910CallbacksBase

    If user wishes to add some extra processing for conditional entry state
     e.g. 'ready' he can implement method as
    def condition_entry_state_ready(self):
        # Custom logic before core logic
        super(FMT910Callbacks, self).condition_entry_state_ready()
        # Custom logic after core logic

FUNCTIONS:
    For sample state xxx there are always the four standard extension points:
        condition_entry_state_xxx():
            To control if all the pre-requisites to performing the action and
            entering the state are defined.
        on_entry_state_xxx():
            Is the place to perform the action.
            For example, the on_ entry_state_matched is the place to set the
            confirmation status to Matched
        condition_exit_state_xxx():
            To control that all pre-requisites for performing the next action
            are fulfilled.
        on_exit_state_xxx():
             Is the place to reset values that you set in the state entry, if
             you are leaving the state to go backwards in the workflow.
             For example if you exit from the Matched state to go and re-pair,
             or to manually cancel, then you would want to remove the
             confirmation Matched status
CLASS
    FMT900_910InDerivedCallbacks

VERSION: 3.6.3-0.5.6048
----------------------------------------------------------------------------"""
# The context parameter is an instance of FBusinessProcessCallbackContext
import FMT900_910InDerivedCallbacksBase

class FMT900_910InDerivedCallbacks(FMT900_910InDerivedCallbacksBase.FMT900_910InDerivedCallbacksBase):
    def __init__(self):
        super(FMT900_910InDerivedCallbacks, self).__init__()

...

  FMT900_910InDerivedCallbacksBase
"""----------------------------------------------------------------------------
MODULE:
    FMT900_910InDerivedCallbacksBase

DESCRIPTION:
    OPEN EXTENSION MODULE
    This is a READ ONLY module. User can override the default logic in derived
    class FMT9XXCallbacks
    Business process conditional_entry/exit and on_entry/exit callbacks.

FUNCTIONS:
    For sample state xxx there are always the four standard extension points:
        condition_entry_state_xxx():
            To control if all the pre-requisites to performing the action and
            entering the state are defined.
        on_entry_state_xxx():
            Is the place to perform the action.
            For example, the on_ entry_state_matched is the place to set the
            confirmation status to Matched
        condition_exit_state_xxx():
            To control that all pre-requisites for performing the next action
            are fulfilled.
        on_exit_state_xxx():
             Is the place to reset values that you set in the state entry, if
             you are leaving the state to go backwards in the workflow.
             For example if you exit from the "Matched" state to go and re-pair,
             or to manually cancel, then you would want to remove the
             confirmation Matched status
CLASS
    FMT900_910InDerivedCallbacksBase

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
# The context parameter is an instance of FBusinessProcessCallbackContext
import FSwiftMLUtils
import acm

import FSwiftReaderLogger
notifier = FSwiftReaderLogger.FSwiftReaderLogger('CashConfIn', 'FCashConfirmationInNotify_Config')

class FMT900_910InDerivedCallbacksBase(object):
    def __init__(self):
        pass

    def getStateBeforePairing(self,bpr):
        prevStatus = None
        for step in bpr.Steps():
            if step.State().Name() == 'Paired':
                diaryEntry = step.DiaryEntry()
                if diaryEntry:
                    param = diaryEntry.Parameters()
                    if param:
                        prevStatus = param.At('AcmObjectStatusBeforePairing',None)
                        break
        return prevStatus

    #   condition_entry_state_XXX
    def condition_entry_state_ready(self,context):
        return FSwiftMLUtils.HasUserRights(FSwiftMLUtils.get_operation_name_from_bpr_context(context))

    def condition_entry_state_paired(self,context):
        return FSwiftMLUtils.HasUserRights(FSwiftMLUtils.get_operation_name_from_bpr_context(context))

    def condition_entry_state_difference(self,context):
        return FSwiftMLUtils.HasUserRights(FSwiftMLUtils.get_operation_name_from_bpr_context(context))

    def condition_entry_state_unpaired(self,context):
        return FSwiftMLUtils.HasUserRights(FSwiftMLUtils.get_operation_name_from_bpr_context(context))

    def condition_entry_state_matched(self,context):
        return FSwiftMLUtils.HasUserRights(FSwiftMLUtils.get_operation_name_from_bpr_context(context))

    def condition_entry_state_ignored(self,context):
        return FSwiftMLUtils.HasUserRights(FSwiftMLUtils.get_operation_name_from_bpr_context(context))

    #   condition_exit_state_XXX
    def condition_exit_state_ready(self,context):
        return True

    def condition_exit_state_paired(self,context):
        return True

    def condition_exit_state_difference(self,context):
        return True

    def condition_exit_state_unpaired(self,context):
        return True

    def condition_exit_state_matched(self,context):
        return True

    def condition_exit_state_ignored(self,context):
        return True


    # Entry/Exit callbacks do not return anything
    #
    # Name convention is
    # 'on_' + 'entry_'/'exit_' + state name in lowercase and underscore
    #

    #   on_entry_state_XXX
    def on_entry_state_ready(self,context):
        pass

    def on_entry_state_paired(self,context):
        try:
            bpr = context.CurrentStep().BusinessProcess()
            settle_obj = FSwiftMLUtils.get_acm_object_from_bpr(bpr)
            diary_obj = settle_obj.Diary()
            if not diary_obj:
                diary_obj = acm.FSettlementDiary()

            diary_obj.AddNote('SWIFTREADER_DERIVED_PAIRED: BusinessProcess = %s' % str(bpr.Oid()))
            FSwiftMLUtils.commit_and_retry(diary_obj)
            settle_obj.Diary(diary_obj)
            FSwiftMLUtils.commit_and_retry(settle_obj)
        except Exception as error:
            notifier.ERROR("Error occurred in on_entry_state_paired: %s" % str(error))
            notifier.DEBUG(str(error), exc_info=1)

    def on_entry_state_difference(self,context):
        pass

    def on_entry_state_unpaired(self,context):
        try:
            bp = context.CurrentStep().BusinessProcess()
            acm_object = FSwiftMLUtils.get_acm_object_from_bpr(bp)
            try:
                if acm_object and acm_object.IsKindOf(acm.FSettlement):
                    prevStatus = self.getStateBeforePairing(bp)
                    if prevStatus:
                        acm_object.Status(prevStatus)
                    acm_object.SettledAmount(0)
                    acm_object.SettledDay('')
                    FSwiftMLUtils.commit_and_retry(acm_object)
            except Exception as e:
                notifier.ERROR("Can not move Settlement %s to %s status" % (acm_object.Oid(), prevStatus))
                notifier.DEBUG(str(e), exc_info=1)

            #FSwiftMLUtils.unlink_acm_object(context.CurrentStep().BusinessProcess())
            FSwiftMLUtils.FSwiftExternalObject.unlink_acm_object(context.CurrentStep().BusinessProcess(), 'Settlement')
        except Exception as e:
            notifier.ERROR("Error occurred while processing on_entry_state_unpaired: %s"%str(e))

    def on_entry_state_matched(self,context):
        try:
            pass
            #Configure the status here.
            #bp = context.CurrentStep().BusinessProcess()
            #acm_obj = FSwiftMLUtils.get_acm_object_from_bpr(bp)
            #acm_obj.Status('Pending Closure')
            #acm_obj.Commit()
        except Exception as e:
            notifier.ERROR("Error occurred while processing on_entry_state_matched: %s"%str(e))


    def on_entry_state_ignored(self,context):
        pass

    #   on_exit_state_XXX

    def on_exit_state_ready(self,context):
        pass

    def on_exit_state_paired(self,context):
        pass

    def on_exit_state_difference(self,context):
        pass

    def on_exit_state_unpaired(self,context):
        pass

    def on_exit_state_matched(self,context):
        pass

    def on_exit_state_ignored(self,context):
        pass

...

  FMT900_910InDerivedProcessing
"""----------------------------------------------------------------------------
MODULE:
    FMT900_910InDerivedProcessing

DESCRIPTION:
    OPEN EXTENSION MODULE
    User can write custom logic to be executed in each state of the
    CreditConfMsg business process. It is derived from
    FMT910ProcessingBase

    The function prototype should be : process_state_xxx(business_process)
    where xxx is state name e.g. process_state_ready

    Base class implements following state processing:
     - process_state_ready
     - process_state_paired
     - process_state_unpaired

    If user wishes to add some extra processing for conditional entry state
     e.g. 'ready' he can implement method as
    def process_state_ready(self):
        # Custom logic before core logic
        super(FMT910Processing, self).process_state_ready()
        # Custom logic after core logic
CLASS
    FMT900_910InDerivedProcessing

VERSION: 3.6.3-0.5.6048
----------------------------------------------------------------------------"""
import FMT900_910InDerivedProcessingBase

import FSwiftReaderLogger
notifier = FSwiftReaderLogger.FSwiftReaderLogger('CashConfIn', 'FCashConfirmationInNotify_Config')

class FMT900_910InDerivedProcessing(FMT900_910InDerivedProcessingBase.FMT900_910InDerivedProcessingBase):
    def __init__(self, bpr):
        super(FMT900_910InDerivedProcessing, self).__init__(bpr)

    def process_state_xxx(self):
        """ process bpr state xxx"""
        try:
            notifier.INFO("Processing BPR step xxx")

            notifier.INFO("Completed processing BPR step xxx")
        except Exception as e:
            pass


...

  FMT900_910InDerivedProcessingBase
"""----------------------------------------------------------------------------
MODULE
    FMT900_910InDerivedProcessingBase :
    User can write custom logic to be executed in each state.

    The function prototype should be : process_state_xxx(business_process)
    where xxx is state name e.g. process_state_ready

DESCRIPTION
    This module contains the logic to handle the business process process updates.

CLASS
    FMT900_910InDerivedProcessingBase

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FMT900_910InProcessing
"""----------------------------------------------------------------------------
MODULE:
    FMT900_910InProcessing

DESCRIPTION:
    OPEN EXTENSION MODULE
    User can write custom logic to be executed in each state of the
    CreditConfMsg business process. It is derived from
    FMT910ProcessingBase

    The function prototype should be : process_state_xxx(business_process)
    where xxx is state name e.g. process_state_ready

    Base class implements following state processing:
     - process_state_ready
     - process_state_paired
     - process_state_unpaired

    If user wishes to add some extra processing for conditional entry state
     e.g. 'ready' he can implement method as
    def process_state_ready(self):
        # Custom logic before core logic
        super(FMT910Processing, self).process_state_ready()
        # Custom logic after core logic

VERSION: 3.6.3-0.5.6048
----------------------------------------------------------------------------"""
import FSwiftReaderLogger
import FMT900_910InProcessingBase
notifier = FSwiftReaderLogger.FSwiftReaderLogger('CashConfIn', 'FCashConfirmationInNotify_Config')

class FMT900_910InProcessing(FMT900_910InProcessingBase.FMT900_910InProcessingBase):
    def __init__(self, bpr):
        super(FMT900_910InProcessing, self).__init__(bpr)

    def process_state_xxx(self):
        """ process bpr state xxx"""
        try:
            notifier.INFO("Processing BPR step xxx")

            notifier.INFO("Completed processing BPR step xxx")
        except Exception as e:
            pass


...

  FMT900_910InProcessingBase
"""----------------------------------------------------------------------------
MODULE
    FMT900_910InProcessingBase :
    User can write custom logic to be executed in each state.

    The function prototype should be : process_state_xxx(business_process)
    where xxx is state name e.g. process_state_ready

DESCRIPTION
    This module contains the logic to handle the business process process updates.

CLASS
    FMT900_910InProcessingBase

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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
gxSleG4Zy7A4PtQiVfo31Xr9Zw==""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FMT900In
"""----------------------------------------------------------------------------
MODULE
    FMT900In class for user customization.

DESCRIPTION
    User can override the mapping defined in the base class. Logic for
    extracting attributes from either swift data or acm object can be
    overridden.

CLASS
     FMT900

VERSION: 3.6.3-0.5.6048
----------------------------------------------------------------------------"""
import FMT900_910InBase

class FMT900(FMT900_910InBase.FMT900_910Base):
    """ FMT900 class for user customization"""
    def __init__(self, source, direction):
        super(FMT900, self).__init__(source, direction, 'MT900')


    def CustomMappings(self):
        """ Override/add mappings"""
        ''''
        if self.source == 'SWIFT':
            self.set_color()
        elif self.source == 'ACM':
            self.set_color_from_settlement()
        '''
        pass

    def SetAttributes(self):
        super(FMT900, self).SetAttributes()
        self.CustomMappings()



...

  FMT900InDerived
"""----------------------------------------------------------------------------
MODULE
    FMT900InDerived : FMT900Derived class for user customization.

DESCRIPTION
    User can override the mapping defined in the base class. Logic for
    extracting attributes from either swift data or acm object can be
    overridden.

VERSION: 3.6.3-0.5.6048
----------------------------------------------------------------------------"""
import FMT900_910InDerivedBase

class FMT900Derived(FMT900_910InDerivedBase.FMT900_910DerivedBase):
    """ FMT900 class for user customization"""
    def __init__(self, source, direction, isSimulated = False):
        super(FMT900Derived, self).__init__(source, direction, 'MT900')


    def CustomMappings(self):
        """ Override/add mappings"""
        ''''
        if self.source == 'SWIFT':
            self.set_color()
        elif self.source == 'ACM':
            self.set_color_from_settlement()
        '''
        pass

    def SetAttributes(self):
        super(FMT900Derived, self).SetAttributes()
        self.CustomMappings()



...

  FMT910In
"""----------------------------------------------------------------------------
MODULE
    FMT910In : FMT910 class for user customization.

DESCRIPTION
    User can override the mapping defined in the base class. Logic for
    extracting attributes from either swift data or acm object can be
    overridden.

VERSION: 3.6.3-0.5.6048
----------------------------------------------------------------------------"""
import FMT900_910InBase

class FMT910(FMT900_910InBase.FMT900_910Base):
    """ FMT910 class for user customization"""
    def __init__(self, source, direction):
        super(FMT910, self).__init__(source, direction, 'MT910')

    def CustomMappings(self):
        """ Override/add mappings"""
        ''''
        if self.source == 'SWIFT':
            self.set_color()
        elif self.source == 'ACM':
            self.set_color_from_settlement()
        '''
        pass

    def SetAttributes(self):
        super(FMT910, self).SetAttributes()
        self.CustomMappings()

    '''
    def set_color(self):
        try:
            self.__color = self.python_object.TRADDET.Color.value()
        except Exception as e:
            self.notifier.DEBUG("Exception occurred in set_color : %s"%str(e))

    def set_color_from_settlement(self):
        try:
            if self.acm_obj.Color():
                self.__color = self.acm_obj.Color()
        except Exception as e:
            self.notifier.DEBUG("Exception occurred in set_color_from_settlement : %s"%str(e))

    def Color(self):
        """ Get the color attribute"""
        return self.__color
    '''

...

  FMT910InDerived
"""----------------------------------------------------------------------------
MODULE
    FMT910InDerived : FMT910 class for user customization.

DESCRIPTION
    User can override the mapping defined in the base class. Logic for
    extracting attributes from either swift data or acm object can be
    overridden.

VERSION: 3.6.3-0.5.6048
----------------------------------------------------------------------------"""
import FMT900_910InDerivedBase

class FMT910Derived(FMT900_910InDerivedBase.FMT900_910DerivedBase):
    """ FMT910 class for user customization"""
    def __init__(self, source, direction):
        super(FMT910Derived, self).__init__(source, direction, 'MT910')

    def CustomMappings(self):
        """ Override/add mappings"""
        ''''
        if self.source == 'SWIFT':
            self.set_color()
        elif self.source == 'ACM':
            self.set_color_from_settlement()
        '''
        pass

    def SetAttributes(self):
        super(FMT910Derived, self).SetAttributes()
        self.CustomMappings()

...

  FMT910PairingViews
"""----------------------------------------------------------------------------
MODULE
    FMT910PairingViews :

DESCRIPTION
    This module implements the logic for the pairing view

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FMT940In
"""----------------------------------------------------------------------------
MODULE
    FMT940In : FMT940 class for user customization.

DESCRIPTION
    User can override the mapping defined in the base class. Logic for
    extracting attributes from either swift data or acm object can be
    overridden.

VERSION: 3.6.3-0.5.6048
----------------------------------------------------------------------------"""
import FMT940InBase

class FMT940(FMT940InBase.FMT940Base):
    """ FMT940 class for user customization"""
    def __init__(self, source, direction):
        super(FMT940, self).__init__(source, direction, 'MT940')

    def CustomMappings(self):
        """ Override/add mappings"""
        ''''
        if self.source == 'SWIFT':
            self.set_color()
        elif self.source == 'ACM':
            self.set_color_from_settlement()
        '''
        pass

    def SetAttributes(self):
        super(FMT940, self).SetAttributes()
        self.CustomMappings()



...

  FMT940InBase
"""----------------------------------------------------------------------------
MODULE
    FMT940InBase : FMT940Base class for mapping from swift data and acm
    object.

DESCRIPTION
    Default logic for extracting attributes from either swift data or acm
    object.

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import FSwiftReaderLogger
notifier = FSwiftReaderLogger.FSwiftReaderLogger('CashConfIn', 'FCashConfirmationInNotify_Config')
import FMTInBase
import FSwiftMLUtils

from FStatementLine import *

class FMT940Base(FMTInBase.FMTInBase):
    """ Base class for MT940 mapping"""
    def __init__(self, source, direction, msg_type):
        super(FMT940Base, self).__init__(source, direction)
        self._message_type = msg_type
        self.config_param = FSwiftMLUtils.Parameters('F%sIn_Config'%(self._message_type))

        self._accountIdentification = None
        self._accountIdentification_P = None
        self._openingBalance = None
        self._closingBalance = None
        self._closingAvailableBalance = None
        self._informationToAccountOwner = None
        self._statementNumber = None
        self._transRefNumber = None
        self._relatedReference = None
        self._statementLines = []
        self._forwardAvailableBalance = []
        self._currency = None
        self._statementNumberSeqNumber = None

# ------------------------------------------------------------------------------
    def SetAttributes(self):
        """ Set the attributes from incoming swift message/acm object to MT940 type"""
        try:
            if self.source == 'SWIFT':
                self.set_identifier_from_swift()
                self.set_account_identification_from_swift()
                self.set_currency_from_swift()
                self.set_related_reference_from_swift()
                self.set_statement_number_from_swift()
                self.set_statement_lines_from_swift()
                self.set_opening_balance_from_swift()
                self.set_closing_balance_from_swift()
                self.set_closing_available_balance_from_swift()
                self.set_information_to_account_owner_from_swift()
                self.set_forward_available_balance_from_swift()
                self.set_statementNumberSeqNumber()
                self.subject_type = 'Settlement'
                self.ext_ref = self.Identifier()
        except Exception as e:
            notifier.ERROR("Exception occurred in SetAttributes : %s"%str(e))
            notifier.DEBUG(str(e), exc_info=1)

# ------------------------------------------------------------------------------
    # Methods to fetch data from the swift message
    def set_statementNumberSeqNumber(self):
        try:
            self._statementNumberSeqNumber = self.python_object.StatementNumberSequenceNumber.value()
        except Exception as e:
            notifier.ERROR("Exception occurred in set_statementNumberSeqNumber : %s"%str(e))

    def set_identifier_from_swift(self):
        try:
            self._identifier = self._transRefNumber = str(self.python_object.TransactionReferenceNumber.value())
        except Exception as e:
            notifier.ERROR("Exception occurred in set_identifier_from_swift : %s"%str(e))

    def set_account_identification_from_swift(self):
        try:
            if self.python_object.AccountIdentification is not None:
                self._accountIdentification = self.python_object.AccountIdentification.value()
            else:
                self._accountIdentificationP = self.python_object.AccountIdentification_P.value()
        except Exception as e:
            notifier.ERROR("Exception occurred in set_account_identification_from_swift : %s"%str(e))

    def set_currency_from_swift(self):
        try:
            #:60F:C161122EUR0,00
            openBal = None
            if self.python_object.OpeningBalance_F is not None:
                openBal = self.python_object.OpeningBalance_F.value()
            else:
                openBal = self.python_object.OpeningBalance_M.value()

            self._currency = str(openBal[7:10])
        except Exception as e:
            notifier.ERROR("Exception occurred in set_currency_from_swift : %s"%str(e))

    def set_related_reference_from_swift(self):
        try:
            if self.python_object.RelatedReference is not None:
                self._relatedReference = self.python_object.RelatedReference.value()
        except Exception as e:
            notifier.ERROR("Exception occurred in set_related_reference_from_swift : %s"%str(e))

    def set_statement_number_from_swift(self):
        try:
            self._statementNumber = self.python_object.StatementNumberSequenceNumber.value()
        except Exception as e:
            notifier.ERROR("Exception occurred in set_statement_number_from_swift : %s"%str(e))

    def set_statement_lines_from_swift(self):
        try:
            for statement in self.python_object.STATELINEDET:
                self._statementLines.append(statement)
        except Exception as e:
            notifier.DEBUG("Exception occurred in set_isin_from_acm : %s"%str(e))
            notifier.DEBUG(str(e), exc_info=1)

    def set_opening_balance_from_swift(self):
        try:
            if self.python_object.OpeningBalance_F is not None:
                self._openingBalance = self.python_object.OpeningBalance_F.value()
            else:
                self._openingBalance = self.python_object.OpeningBalance_M.value()
        except Exception as e:
            notifier.ERROR("Exception occurred in set_opening_balance_from_swift : %s"%str(e))

    def set_closing_balance_from_swift(self):
        try:
            if self.python_object.ClosingBalanceBookedFunds_F is not None:
                self._closingBalance = self.python_object.ClosingBalanceBookedFunds_F.value()
            else:
                self._closingBalance = self.python_object.ClosingBalanceBookedFunds_M.value()
        except Exception as e:
            notifier.ERROR("Exception occurred in set_closing_balance_from_swift : %s"%str(e))

    def set_closing_available_balance_from_swift(self):
        try:
            if self.python_object.ClosingAvailableBalanceAvailableFunds is not None:
                self._closingAvailableBalance = self.python_object.ClosingAvailableBalanceAvailableFunds.value()
        except Exception as e:
            notifier.ERROR("Exception occurred in set_closing_available_balance_from_swift : %s"%str(e))

    def set_information_to_account_owner_from_swift(self):
        try:
            if self.python_object.InformationtoAccountOwner is not None:
                self._informationToAccountOwner = self.python_object.InformationtoAccountOwner.value()
        except Exception as e:
            notifier.ERROR("Exception occurred in set_information_to_account_owner_from_swift : %s"%str(e))


    def set_forward_available_balance_from_swift(self):
        try:
            for bal in self.python_object.ForwardAvailableBalance:
                self._forwardAvailableBalance.append(bal.value())
        except Exception as e:
            notifier.ERROR("Exception occurred in set_forward_available_balance_from_swift : %s"%str(e))


# ------------------------------------------------------------------------------
    # Method to fetch data used in the Pairing and Matching attributes in the FParameter
# ------------------------------------------------------------------------------
    def Currency(self):
        return str(self._currency)

    def AccountIdentification(self):
        if self._accountIdentification:
            return str(self._accountIdentification)
        else:
            return str(self._accountIdentification_P)

    def OpeningBalance(self):
        return str(self._openingBalance)

    def ClosingBalance(self):
        return str(self._closingBalance)

    def StatementNumber(self):
        return str(self._statementNumber)

    def TransRefNumber(self):
        return str(self._transRefNumber)

    def RelatedReference(self):
        return str(self._relatedReference)

    def StatementNumberSeqNumber(self):
        return str(self._statementNumberSeqNumber)

    def getStatements(self):
        statementObjectArray = []
        for statements in self._statementLines:
            if statements.StatementLine:
                statement = statements.StatementLine
                obj = FStatementLine(str(statement.value()))
                obj.setCurrency(self._currency)
                obj.setAccountIdentification(self._accountIdentification)
                obj.setRelatedReference(self._relatedReference)
                obj.setTransRefNumber(self._transRefNumber)
                obj.setOpeningBalance(self._openingBalance)
                obj.setClosingBalance(self._closingBalance)
                obj.setClosingAvailableBalance(self._closingAvailableBalance)
                obj.setInformationToAccountOwner(self._informationToAccountOwner)
                obj.setForwardAvailableBalance(self._forwardAvailableBalance)

                if statements.InformationtoAccountOwner:
                    obj.setInformationToAccountOwnerLine(statements.InformationtoAccountOwner.value())

                statementObjectArray.append(obj)

        return statementObjectArray


    @staticmethod
    def GetColumnMetaData():
        column_metadata = {
            'TransRefNumber': {'THEIRS_SWIFT_TAG' : '20', 'OURS_SWIFT_TAG' : '20', 'SEQUENCE': 'General Information', 'COLOR': ''},
            'RelatedReference': {'THEIRS_SWIFT_TAG' : '21', 'OURS_SWIFT_TAG' : '21', 'SEQUENCE': 'General Information', 'COLOR': ''},
            'AccountIdentification': {'THEIRS_SWIFT_TAG' : '25A', 'OURS_SWIFT_TAG' : '25A', 'SEQUENCE': 'General Information', 'COLOR': ''},
            'StatementNumber' : {'THEIRS_SWIFT_TAG' : '28C', 'OURS_SWIFT_TAG' : '28C', 'SEQUENCE': 'General Information', 'COLOR': ''}
            }
        return column_metadata


    @staticmethod
    def GetColumnNamePrefix():
        return 'MT940'

    @staticmethod
    def GetDerivedColumnNamePrefix():
        return 'MT900_910'

...

  FMT940InCallbacks
"""----------------------------------------------------------------------------
MODULE:
    FMT940InCallbacks

DESCRIPTION:
    OPEN EXTENSION MODULE
    FFXTradeConfMsgCallbacks class for user customization.
    Business process conditional_entry/exit and on_entry/exit callbacks.
    User can override the logic written in the base class FMT910CallbacksBase

    If user wishes to add some extra processing for conditional entry state
     e.g. 'ready' he can implement method as
    def condition_entry_state_ready(self):
        # Custom logic before core logic
        super(FMT910Callbacks, self).condition_entry_state_ready()
        # Custom logic after core logic

FUNCTIONS:
    For sample state xxx there are always the four standard extension points:
        condition_entry_state_xxx():
            To control if all the pre-requisites to performing the action and
            entering the state are defined.
        on_entry_state_xxx():
            Is the place to perform the action.
            For example, the on_ entry_state_matched is the place to set the
            confirmation status to Matched
        condition_exit_state_xxx():
            To control that all pre-requisites for performing the next action
            are fulfilled.
        on_exit_state_xxx():
             Is the place to reset values that you set in the state entry, if
             you are leaving the state to go backwards in the workflow.
             For example if you exit from the Matched state to go and re-pair,
             or to manually cancel, then you would want to remove the
             confirmation Matched status

VERSION: 3.6.3-0.5.6048
----------------------------------------------------------------------------"""
# The context parameter is an instance of FBusinessProcessCallbackContext
import FMT940InCallbacksBase

class FMT940InCallbacks(FMT940InCallbacksBase.FMT940InCallbacksBase):
    def __init__(self):
        super(FMT940InCallbacks, self).__init__()

...

  FMT940InCallbacksBase
"""----------------------------------------------------------------------------
MODULE:
    FMT940InCallbacksBase

DESCRIPTION:
    OPEN EXTENSION MODULE
    This is a READ ONLY module. User can override the default logic in derived
    class FMT9XXCallbacks
    Business process conditional_entry/exit and on_entry/exit callbacks.

FUNCTIONS:
    For sample state xxx there are always the four standard extension points:
        condition_entry_state_xxx():
            To control if all the pre-requisites to performing the action and
            entering the state are defined.
        on_entry_state_xxx():
            Is the place to perform the action.
            For example, the on_ entry_state_matched is the place to set the
            confirmation status to Matched
        condition_exit_state_xxx():
            To control that all pre-requisites for performing the next action
            are fulfilled.
        on_exit_state_xxx():
             Is the place to reset values that you set in the state entry, if
             you are leaving the state to go backwards in the workflow.
             For example if you exit from the "Matched" state to go and re-pair,
             or to manually cancel, then you would want to remove the
             confirmation Matched status

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
# The context parameter is an instance of FBusinessProcessCallbackContext
import FSwiftMLUtils
import acm

import FSwiftReaderLogger
notifier = FSwiftReaderLogger.FSwiftReaderLogger('CashConfIn', 'FCashConfirmationInNotify_Config')

class FMT940InCallbacksBase(object):
    def __init__(self):
        pass

    def getCurrentStateOfBPR(self,bprId):
        bpr = acm.FBusinessProcess[bprId]
        if bpr:
            return bpr.CurrentStep().State().Name()
        return 'NoState'

    #   condition_entry_state_XXX
    def condition_entry_state_ready(self,context):
        return FSwiftMLUtils.HasUserRights(FSwiftMLUtils.get_operation_name_from_bpr_context(context))

    def condition_entry_state_checkstatements(self,context):
        return FSwiftMLUtils.HasUserRights(FSwiftMLUtils.get_operation_name_from_bpr_context(context))

    def condition_entry_state_unmatched(self,context):
        return FSwiftMLUtils.HasUserRights(FSwiftMLUtils.get_operation_name_from_bpr_context(context))

    def condition_entry_state_matched(self,context):
        return FSwiftMLUtils.HasUserRights(FSwiftMLUtils.get_operation_name_from_bpr_context(context))

    #   condition_exit_state_XXX
    def condition_exit_state_ready(self,context):
        return True

    def condition_exit_state_checkstatements(self,context):
        matchStatus = True

        try:
            bp = context.CurrentStep().BusinessProcess()
            targetState = context.TargetState().Name()
            entry = bp.Diary().GetEntry(bp, bp.CurrentStep())
            params = entry.Parameters()

            if targetState == 'Matched':
                for key in params:
                    currrentState = self.getCurrentStateOfBPR(key)
                    if currrentState not in ['Matched','Ignored']:
                        matchStatus = False
                        break
            elif targetState == 'UnMatched':
                matchStatus = True
                '''for key in params:
                    currrentState = getCurrentStateOfBPR(key)
                    if currrentState in ['Unpaired','Difference']:
                        matchStatus = False
                        break'''
        except Exception as e:
            notifier.ERROR("Error occurred in condition_exit_state_checkstatements :  %s"%str(e))
            matchStatus = False
        return matchStatus

    def condition_exit_state_unmatched(self,context):
        return True

    def condition_exit_state_matched(self,context):
        return True


    # Entry/Exit callbacks do not return anything
    #
    # Name convention is
    # 'on_' + 'entry_'/'exit_' + state name in lowercase and underscore
    #

    #   on_entry_state_XXX
    def on_entry_state_ready(self, context):
        pass

    def on_entry_state_checkstatements(self,context):
        pass

    def on_entry_state_unmatched(self,context):
        pass

    def on_entry_state_matched(self,context):
        pass

    #   on_exit_state_XXX

    def on_exit_state_ready(self,context):
        pass

    def on_exit_state_checkstatements(self,context):
        pass

    def on_exit_state_unmatched(self,context):
        pass

    def on_exit_state_matched(self,context):
        pass

...

  FMT940InProcessing
"""----------------------------------------------------------------------------
MODULE
    FMT940InProcessing :
    User can write custom logic to be executed in each state.

    The function prototype should be : process_state_xxx(business_process)
    where xxx is state name e.g. process_state_ready

VERSION: 3.6.3-0.5.6048
----------------------------------------------------------------------------"""
import FSwiftReaderLogger
notifier = FSwiftReaderLogger.FSwiftReaderLogger('CashConfIn', 'FCashConfirmationInNotify_Config')
import FMT940InProcessingBase



class FMT940InProcessing(FMT940InProcessingBase.FMT940InProcessingBase):
    def __init__(self, bpr):
        super(FMT940InProcessing, self).__init__(bpr)

    def process_state_xxx(self):
        """ process bpr state xxx"""
        try:
            notifier.INFO("Processing BPR step xxx")
            # logic to be executed in xxx state
            notifier.INFO("Completed processing BPR step xxx")
        except Exception as e:
            notifier.ERROR("Error occurred while processing BPR step xxx: %s"%str(e))
            notifier.DEBUG(str(e), exc_info=1)


...

  FMT940InProcessingBase
"""----------------------------------------------------------------------------
MODULE
    FMT940InProcessingBase

DESCRIPTION
    User can write custom logic to be executed in each state.

    The function prototype should be : process_state_xxx(business_process)
    where xxx is state name e.g. process_state_ready

CLASS
    FMT940InProcessingBase

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FMT942In
"""----------------------------------------------------------------------------
MODULE
    FMT942In : FMT942 class for user customization.

DESCRIPTION
    User can override the mapping defined in the base class. Logic for
    extracting attributes from either swift data or acm object can be
    overridden.

VERSION: 3.6.3-0.5.6048
----------------------------------------------------------------------------"""
import FMT942InBase

class FMT942(FMT942InBase.FMT942Base):
    """ FMT942 class for user customization"""
    def __init__(self, source, direction):
        super(FMT942, self).__init__(source, direction, 'MT942')
        self.CustomMappings()

    def CustomMappings(self):
        """ Override/add mappings"""
        ''''
        if self.source == 'SWIFT':
            self.set_color()
        elif self.source == 'ACM':
            self.set_color_from_settlement()
        '''
        pass

    '''
    def set_color(self):
        try:
            self.__color = self.python_object.TRADDET.Color.value()
        except Exception as e:
            self.notifier.DEUBG("Exception occurred in set_color : %s"%str(e))

    def set_color_from_settlement(self):
        try:
            if self.acm_obj.Color():
                self.__color = self.acm_obj.Color()
        except Exception as e:
            self.notifier.DEBUG("Exception occurred in set_color_from_settlement : %s"%str(e))

    def Color(self):
        """ Get the color attribute"""
        return self.__color
    '''



...

  FMT942InBase
"""----------------------------------------------------------------------------
MODULE
    FMT942InBase : FMT942Base class for mapping from swift data and acm
    object.

DESCRIPTION
    Default logic for extracting attributes from either swift data or acm
    object.

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import FSwiftReaderLogger
notifier = FSwiftReaderLogger.FSwiftReaderLogger('CashConfIn', 'FCashConfirmationInNotify_Config')
import FMTInBase
import FSwiftMLUtils

class FMT942Base(FMTInBase.FMTInBase):
    """ Base class for MT942 mapping"""
    def __init__(self, source, direction, msg_type):
        super(FMT942Base, self).__init__(source, direction)
        self._message_type = msg_type
        self.config_param = FSwiftMLUtils.Parameters('F%sIn_Config'%(self._message_type))

        self.__isin = None

# ------------------------------------------------------------------------------
    def SetAttributes(self):
        """ Set the attributes from incoming swift message/acm object to MT942 type"""
        try:
            if self.source == 'SWIFT':
                self.set_isin()
                self.subject_type = 'Settlement'
                self.ext_ref = self.Identifier()
            elif self.source == 'ACM':
                self.set_isin_from_acm()
        except Exception as e:
            notifier.ERROR("Exception occurred in SetAttributes : %s"%str(e))
            notifier.DEBUG(str(e), exc_info=1)

# ------------------------------------------------------------------------------
    # Methods to fetch data from the swift message
    def set_isin(self):
        try:
            self.__isin = None
            #self.__isin = self.python_object.TRADDET.IdentificationOfFinancialInstrument.value()[5:]
        except Exception as e:
            notifier.DEBUG("Exception occurred in set_isin : %s"%str(e))

# ------------------------------------------------------------------------------
    # Method to fetch data from the adm
    def set_isin_from_acm(self):
        try:
            self.__isin = None
            #self.__isin = self.acm_obj.Trade().Instrument().Isin()
        except Exception as e:
            notifier.DEBUG("Exception occurred in set_isin_from_acm : %s"%str(e))

# ------------------------------------------------------------------------------
    # Method to fetch data used in the Pairing and Matching attributes in the FParameter
    def Isin(self):
        """ Get the isin attribute"""
        return self.__isin
# ------------------------------------------------------------------------------


...

  FMT942InProcessing
"""----------------------------------------------------------------------------
MODULE
    FMT942InProcessing :
    User can write custom logic to be executed in each state.

    The function prototype should be : process_state_xxx(business_process)
    where xxx is state name e.g. process_state_ready

VERSION: 3.6.3-0.5.6048
----------------------------------------------------------------------------"""
import FSwiftMLUtils
import FSwiftReaderLogger
notifier = FSwiftReaderLogger.FSwiftReaderLogger('CashConfIn', 'FCashConfirmationInNotify_Config')

class FMT942Processing(object):
    def __init__(self, bpr):
        self.business_process = bpr
        self.theirs = FSwiftMLUtils.create_their_object_from_bpr(self.business_process)

    def process_state_ready(self):
        """ process bpr state ready"""
        try:
            notifier.INFO("Processing BPR step ready")
            # logic to be executed in ready state
            notifier.INFO("Completed processing BPR step ready")
        except Exception as e:
            notifier.ERROR("Error occurred while processing BPR step xxx: %s"%str(e))
            notifier.DEBUG(str(e), exc_info=1)

    def process_state_xxx(self):
        """ process bpr state ready"""
        try:
            notifier.INFO("Processing BPR step xxx")
            # logic to be executed in xxx state
            notifier.INFO("Completed processing BPR step xxx")
        except Exception as e:
            notifier.ERROR("Error occurred while processing BPR step xxx: %s"%str(e))
            notifier.DEBUG(str(e), exc_info=1)


...

  FMT942InStateChart
"""----------------------------------------------------------------------------
MODULE
    FMT942InStateChart: State chart creation for 942 message

DESCRIPTION
    MT942 state chart.

FUNCTION
    define_state_transition()
        Defines the states and transition of the state chart.
    create_942_sc()
        Invokes the creation of the state chart.

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import FSwiftReaderLogger
notifier = FSwiftReaderLogger.FSwiftReaderLogger('CashConfIn', 'FCashConfirmationInNotify_Config')
import FMTStateChart

def define_state_transition():
        """
        Creates a state chart with the given name, if required.
        The definition parameter must completely define the content of the business
        process state chart, including all states and transitions between them. Its
        format is a dictionary of states mapped to a dictionary of transitions as
        event->next_state items, e.g.:

          {'state a':  {'event to go to b': 'state b', 'event to go to c': 'state c'}}

        All defined next_states values must be unique within a state's transitions
        (i.e. multiple events cannot lead to the same next_state).
        """

        state_chart_name = 'F942StateChart'
        state_chart = {
                        'Ready'                 :    {'to_a'                      :    'A',
                                                      'to_b'                      :    'B',},
                        'A'                     :    {'to_bb'                     :    'B',},
                        'B'                     :    {'to_c'                      :    'C'},
                    }
        return state_chart_name, state_chart

def create_942_sc():
    state_chart_name, state_chart_dict = define_state_transition()
    state_chart = FMTStateChart.create_state_chart(state_chart_name, state_chart_dict)

    # EDIT 'coordinate string' ONLY IF STATE CHART MENTIONED ABOVE IS CHANGED.
    co_string = 'Ready,-300,0;A,-100,0;B,100,0;C,300,0;'
    try:
        FMTStateChart.layout_state_chart(state_chart_name, co_string)
        notifier.INFO('Done with layout of state chart %s.'%state_chart_name)
    except Exception as e:
        notifier.WARN(str(e))


...

  FMT94XDisplayHelpers
"""----------------------------------------------------------------------------
MODULE
    FMT94XDisplayHelpers : FMT94XDisplayHelpers

DESCRIPTION
    Implement the logic for creating derived panes query. User can override
    these functions to suit his implementation.

FUNCTION
    getChildrenFromBPR():
        Gets the children BPR associated with a BPR
    get_insert_objects_for_upper_child_sheet():
        Gets the BPRs to be filled in the upper panel on pairing view
    get_insert_objects_for_lower_child_sheet():
        Gets the acm object to be filled in the upper panel on pairing view

VERSION: 3.6.3-0.5.6048
----------------------------------------------------------------------------"""
import acm
import FSwiftMLUtils
def getChildrenFromBPR(bprOid):
    bpr = acm.FBusinessProcess[bprOid]
    params = bpr.CurrentStep().DiaryEntry().Parameters()
    child_array = []
    for param in params:
        if acm.FBusinessProcess[param]:
            child_array.append(acm.FBusinessProcess[param])

    child_array.sort()
    return child_array

def get_insert_objects_for_upper_child_sheet(bpr):
    insert_objects = []
    child_bpr = getChildrenFromBPR(bpr.Oid())

    listSize = len(child_bpr)

    if listSize:
        startPos = child_bpr[0].Oid()
        endPos = child_bpr[listSize-1].Oid()

        child_query = acm.CreateFASQLQuery(acm.FBusinessProcess,'AND')
        node = child_query.AddOpNode('AND')
        node.AddAttrNodeNumerical('Oid',startPos,endPos)

        if FSwiftMLUtils.get_acm_version() < 2018.2:
            node.AddAttrNodeString('CurrentStep.State.StateChart.Name', child_bpr[0].CurrentStep().State().StateChart().Name(), 'EQUAL')
            node.AddAttrNodeString('CurrentStep.State.Name', 'Unpaired', 'EQUAL')
        else:
            node.AddAttrNodeString('StateChart.Name', child_bpr[0].StateChart().Name(), 'EQUAL')
            node.AddAttrNodeString('CurrentStateName', 'Unpaired', 'EQUAL')

        unpairedBPRQuery = 'UnpairedBPR'
        storedQuery = acm.FStoredASQLQuery[unpairedBPRQuery]
        if storedQuery is None:
            storedQuery = acm.FStoredASQLQuery()
            storedQuery.Query(child_query)
            storedQuery.Name(unpairedBPRQuery)
            storedQuery.AutoUser(False)
            storedQuery.User(None)
            FSwiftMLUtils.commit_and_retry(storedQuery)
        else:
            storedQuery.Query(child_query)
            FSwiftMLUtils.commit_and_retry(storedQuery)

        child_query = acm.CreateFASQLQuery(acm.FBusinessProcess,'AND')
        node = child_query.AddOpNode('AND')
        node.AddAttrNodeNumerical('Oid',startPos,endPos)
        if FSwiftMLUtils.get_acm_version() < 2018.2:
            node.AddAttrNodeString('CurrentStep.State.StateChart.Name', child_bpr[0].CurrentStep().State().StateChart().Name(), 'EQUAL')
            node.AddAttrNodeString('CurrentStep.State.Name', 'Unpaired', 'EQUAL')
        else:
            node.AddAttrNodeString('StateChart.Name', child_bpr[0].StateChart().Name(), 'EQUAL')
            node.AddAttrNodeString('CurrentStateName', 'Unpaired', 'NOT_EQUAL')

        pairedBPRQuery = 'PairedBPR'
        storedQuery = acm.FStoredASQLQuery[pairedBPRQuery]
        if storedQuery is None:
            storedQuery = acm.FStoredASQLQuery()
            storedQuery.Query(child_query)
            storedQuery.Name(pairedBPRQuery)
            storedQuery.AutoUser(False)
            storedQuery.User(None)
            FSwiftMLUtils.commit_and_retry(storedQuery)
        else:
            storedQuery.Query(child_query)
            FSwiftMLUtils.commit_and_retry(storedQuery)

        insert_objects.append(unpairedBPRQuery)
        insert_objects.append(pairedBPRQuery)

    return insert_objects


def get_insert_objects_for_lower_child_sheet(bpr):
    return []


...

  FMT950In
"""----------------------------------------------------------------------------
MODULE
    FMT950In : FMT950 class for user customization.

DESCRIPTION
    User can override the mapping defined in the base class. Logic for
    extracting attributes from either swift data or acm object can be
    overridden.

VERSION: 3.6.3-0.5.6048
----------------------------------------------------------------------------"""
import FMT950InBase

class FMT950(FMT950InBase.FMT950Base):
    """ FMT950 class for user customization"""
    def __init__(self, source, direction):
        super(FMT950, self).__init__(source, direction, 'MT950')

    def CustomMappings(self):
        """ Override/add mappings"""
        ''''
        if self.source == 'SWIFT':
            self.set_color()
        elif self.source == 'ACM':
            self.set_color_from_settlement()
        '''
        pass

    def SetAttributes(self):
        super(FMT950, self).SetAttributes()
        self.CustomMappings()



...

  FMT950InBase
"""----------------------------------------------------------------------------
MODULE
    FMT950InBase : FMT950Base class for mapping from swift data and acm
    object.

DESCRIPTION
    Default logic for extracting attributes from either swift data or acm
    object.

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import FSwiftReaderLogger
notifier = FSwiftReaderLogger.FSwiftReaderLogger('CashConfIn', 'FCashConfirmationInNotify_Config')
import FMTInBase
import FSwiftMLUtils, acm

from FStatementLine import *

class FMT950Base(FMTInBase.FMTInBase):
    """ Base class for MT950 mapping"""
    def __init__(self, source, direction, msg_type):
        super(FMT950Base, self).__init__(source, direction)
        self._message_type = msg_type
        self.config_param = FSwiftMLUtils.Parameters('F%sIn_Config'%(self._message_type))

        self._accountIdentification = None
        self._transRefNumber = None
        self._openingBalance = None
        self._closingBalance = None
        self._statementLines = []
        self._statementNumberSeqNumber = None

        self._closingAvailableBalance = None
        self._currency = None


# ------------------------------------------------------------------------------
    def SetAttributes(self):
        """ Set the attributes from incoming swift message/acm object to MT950 type"""
        try:
            if self.source == 'SWIFT':
                self.set_identifier_from_swift()
                self.set_account_identification_from_swift()
                self.set_currency_from_swift()
                self.set_statement_lines_from_swift()
                self.set_opening_balance_from_swift()
                self.set_closing_balance_from_swift()
                self.set_closing_available_balance_from_swift()
                self.set_statementNumberSeqNumber()
                self.subject_type = 'Settlement'
                self.ext_ref = self.Identifier()
        except Exception as e:
            notifier.ERROR("Exception occurred in SetAttributes : %s"%str(e))
            notifier.DEBUG(str(e), exc_info=1)

# ------------------------------------------------------------------------------
    # Methods to fetch data from the swift message
    def set_statementNumberSeqNumber(self):
        """ Set the statementNumberSeqNumber from incoming swift message/acm object to MT950 type"""
        try:
            self._statementNumberSeqNumber = self.python_object.StatementNumberSequenceNumber.value()
        except Exception as e:
            notifier.ERROR("Exception occurred in set_statementNumberSeqNumber : %s"%str(e))

    def set_identifier_from_swift(self):
        """ Set the identifier from incoming swift message/acm object to MT950 type"""
        try:
            self._identifier = self._transRefNumber = str(self.python_object.TransactionReferenceNumber.value())
        except Exception as e:
            notifier.ERROR("Exception occurred in set_identifier_from_swift : %s"%str(e))

    def set_account_identification_from_swift(self):
        """ Set the account_identification from incoming swift message/acm object to MT950 type"""
        try:
            self._accountIdentification = self.python_object.AccountIdentification.value()
        except Exception as e:
            notifier.ERROR("Exception occurred in set_account_identification_from_swift : %s"%str(e))

    def set_currency_from_swift(self):
        """ Set the currency from incoming swift message/acm object to MT950 type"""
        try:
            #structure - :60F:C161122EUR0,00
            openBal = None
            if self.python_object.OpeningBalance_F is not None:
                openBal = self.python_object.OpeningBalance_F.value()
            else:
                openBal = self.python_object.OpeningBalance_M.value()

            self._currency = str(openBal[7:10])
        except Exception as e:
            notifier.ERROR("Exception occurred in set_currency_from_swift : %s"%str(e))


    def set_statement_lines_from_swift(self):
        """ Set the statement_lines from incoming swift message/acm object to MT950 type"""
        try:
            for statement in self.python_object.StatementLine:
                self._statementLines.append(statement)
        except Exception as e:
            notifier.DEBUG("Exception occurred in set_isin_from_acm : %s"%str(e))
            notifier.DEBUG(str(e), exc_info=1)

    def set_opening_balance_from_swift(self):
        """ Set the opening_balance from incoming swift message/acm object to MT950 type"""
        try:
            if self.python_object.OpeningBalance_F is not None:
                self._openingBalance = self.python_object.OpeningBalance_F.value()
            else:
                self._openingBalance = self.python_object.OpeningBalance_M.value()
        except Exception as e:
            notifier.ERROR("Exception occurred in set_opening_balance_from_swift : %s"%str(e))

    def set_closing_balance_from_swift(self):
        """ Set the closing_balance from incoming swift message/acm object to MT950 type"""
        try:
            if self.python_object.ClosingBalanceBookedFunds_F is not None:
                self._closingBalance = self.python_object.ClosingBalanceBookedFunds_F.value()
            else:
                self._closingBalance = self.python_object.ClosingBalanceBookedFunds_M.value()
        except Exception as e:
            notifier.ERROR("Exception occurred in set_closing_balance_from_swift : %s"%str(e))

    def set_closing_available_balance_from_swift(self):
        """ Set the closing_available_balance from incoming swift message/acm object to MT950 type"""
        try:
            if self.python_object.ClosingAvailableBalanceAvailableFunds is not None:
                self._closingAvailableBalance = self.python_object.ClosingAvailableBalanceAvailableFunds.value()
        except Exception as e:
            notifier.ERROR("Exception occurred in set_closing_available_balance_from_swift : %s"%str(e))


# ------------------------------------------------------------------------------
    # Method to fetch data used in the Pairing and Matching attributes in the FParameter
# ------------------------------------------------------------------------------
    def Currency(self):
        """ Get the Currency of the MT message"""
        return str(self._currency)

    def AccountIdentification(self):
        """ Get the AccountIdentification of the MT message"""
        if self._accountIdentification:
            return str(self._accountIdentification)


    def OpeningBalance(self):
        """ Get the OpeningBalance of the MT message"""
        return str(self._openingBalance)

    def ClosingBalance(self):
        """ Get the ClosingBalance of the MT message"""
        return str(self._closingBalance)


    def TransRefNumber(self):
        """ Get the TransRefNumber of the MT message"""
        return str(self._transRefNumber)

    def StatementNumber(self):
        """ Get the StatementNumber of the MT message"""
        return str(self._statementNumberSeqNumber)

    def StatementNumberSeqNumber(self):
        """ Get the StatementNumberSeqNumber of the MT message"""
        return str(self._statementNumberSeqNumber)

    def getStatements(self):
        """ Get the getStatements of the MT message"""
        statementObjectArray = []
        for statement in self._statementLines:
            obj = FStatementLine(str(statement.value()))
            obj.setCurrency(self._currency)
            obj.setAccountIdentification(self._accountIdentification)
            obj.setTransRefNumber(self._transRefNumber)
            obj.setOpeningBalance(self._openingBalance)
            obj.setClosingBalance(self._closingBalance)
            obj.setClosingAvailableBalance(self._closingAvailableBalance)

            statementObjectArray.append(obj)

        return statementObjectArray

    @staticmethod
    def GetColumnMetaData():
        """Defining column metadata"""
        column_metadata = {
            'TransRefNumber': {'THEIRS_SWIFT_TAG' : '20', 'OURS_SWIFT_TAG' : '20', 'SEQUENCE': 'General Information', 'COLOR': ''},

            'AccountIdentification': {'THEIRS_SWIFT_TAG' : '25A', 'OURS_SWIFT_TAG' : '25A', 'SEQUENCE': 'General Information', 'COLOR': ''},
            'StatementNumber' : {'THEIRS_SWIFT_TAG' : '28C', 'OURS_SWIFT_TAG' : '28C', 'SEQUENCE': 'General Information', 'COLOR': ''}
            }
        return column_metadata


    @staticmethod
    def GetColumnNamePrefix():
        return 'MT950'

    @staticmethod
    def GetDerivedColumnNamePrefix():
        return 'MT950_Derived'

...

  FMT950InCallbacks
"""----------------------------------------------------------------------------
MODULE:
    FMT950InCallbacks

DESCRIPTION:
    OPEN EXTENSION MODULE
    FFXTradeConfMsgCallbacks class for user customization.
    Business process conditional_entry/exit and on_entry/exit callbacks.
    User can override the logic written in the base class FMT910CallbacksBase

    If user wishes to add some extra processing for conditional entry state
     e.g. 'ready' he can implement method as
    def condition_entry_state_ready(self):
        # Custom logic before core logic
        super(FMT950InCallbacks, self).condition_entry_state_ready()
        # Custom logic after core logic

FUNCTIONS:
    For sample state xxx there are always the four standard extension points:
        condition_entry_state_xxx():
            To control if all the pre-requisites to performing the action and
            entering the state are defined.
        on_entry_state_xxx():
            Is the place to perform the action.
            For example, the on_ entry_state_matched is the place to set the
            confirmation status to Matched
        condition_exit_state_xxx():
            To control that all pre-requisites for performing the next action
            are fulfilled.
        on_exit_state_xxx():
             Is the place to reset values that you set in the state entry, if
             you are leaving the state to go backwards in the workflow.
             For example if you exit from the Matched state to go and re-pair,
             or to manually cancel, then you would want to remove the
             confirmation Matched status

VERSION: 3.6.3-0.5.6048
----------------------------------------------------------------------------"""
# The context parameter is an instance of FBusinessProcessCallbackContext
import FMT950InCallbacksBase

class FMT950InCallbacks(FMT950InCallbacksBase.FMT950InCallbacksBase):
    def __init__(self):
        super(FMT950InCallbacks, self).__init__()

...

  FMT950InCallbacksBase
"""----------------------------------------------------------------------------
MODULE:
    FMT950InCallbacksBase

DESCRIPTION:
    OPEN EXTENSION MODULE
    This is a READ ONLY module. User can override the default logic in derived
    class FMT9XXCallbacks
    Business process conditional_entry/exit and on_entry/exit callbacks.

FUNCTIONS:
    For sample state xxx there are always the four standard extension points:
        condition_entry_state_xxx():
            To control if all the pre-requisites to performing the action and
            entering the state are defined.
        on_entry_state_xxx():
            Is the place to perform the action.
            For example, the on_ entry_state_matched is the place to set the
            confirmation status to Matched
        condition_exit_state_xxx():
            To control that all pre-requisites for performing the next action
            are fulfilled.
        on_exit_state_xxx():
             Is the place to reset values that you set in the state entry, if
             you are leaving the state to go backwards in the workflow.
             For example if you exit from the "Matched" state to go and re-pair,
             or to manually cancel, then you would want to remove the
             confirmation Matched status

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
# The context parameter is an instance of FBusinessProcessCallbackContext
import FSwiftMLUtils
import acm

import FSwiftReaderLogger
notifier = FSwiftReaderLogger.FSwiftReaderLogger('CashConfIn', 'FCashConfirmationInNotify_Config')

class FMT950InCallbacksBase(object):
    def __init__(self):
        pass

    def getCurrentStateOfBPR(self,bprId):
        bpr = acm.FBusinessProcess[bprId]
        if bpr:
            return bpr.CurrentStep().State().Name()
        return 'NoState'

    #   condition_entry_state_XXX
    def condition_entry_state_ready(self,context):
        return FSwiftMLUtils.HasUserRights(FSwiftMLUtils.get_operation_name_from_bpr_context(context))

    def condition_entry_state_processingmessage(self,context):
        return FSwiftMLUtils.HasUserRights(FSwiftMLUtils.get_operation_name_from_bpr_context(context))

    def condition_entry_state_rownotmatched(self,context):
        return FSwiftMLUtils.HasUserRights(FSwiftMLUtils.get_operation_name_from_bpr_context(context))

    def condition_entry_state_allmatched(self,context):
        return FSwiftMLUtils.HasUserRights(FSwiftMLUtils.get_operation_name_from_bpr_context(context))

    #   condition_exit_state_XXX
    def condition_exit_state_ready(self,context):
        return True

    def condition_exit_state_rownotmatched(self,context):
        matchStatus = True

        try:
            bp = context.CurrentStep().BusinessProcess()
            targetState = context.TargetState().Name()
            entry = bp.Diary().GetEntry(bp, bp.CurrentStep())
            params = entry.Parameters()
            if targetState == 'AllMatched':
                for key in params:
                    currrentState = self.getCurrentStateOfBPR(key)

                    if currrentState in 'NoState':
                        continue
                    elif currrentState not in ['Matched', 'Ignored']:
                        matchStatus = False
                        break
        except Exception as e:
            notifier.ERROR("Error occurred in condition_exit_state_processingmessage :  %s"%str(e))
            matchStatus = False
        return matchStatus

    def condition_exit_state_processingmessage(self,context):
        return True

    def condition_exit_state_allmatched(self,context):
        return True


    # Entry/Exit callbacks do not return anything
    #
    # Name convention is
    # 'on_' + 'entry_'/'exit_' + state name in lowercase and underscore
    #

    #   on_entry_state_XXX
    def on_entry_state_ready(self, context):
        pass

    def on_entry_state_processingmessage(self,context):
        pass

    def on_entry_state_rownotmatched(self,context):
        pass

    def on_entry_state_allmatched(self,context):
        pass

    #   on_exit_state_XXX

    def on_exit_state_ready(self,context):
        pass

    def on_exit_state_processingmessage(self,context):
        pass

    def on_exit_state_rownotmatched(self,context):
        pass

    def on_exit_state_allmatched(self,context):
        pass

...

  FMT950InDerived
"""----------------------------------------------------------------------------
MODULE
    FMT950InDerived : FMT950 class for user customization.

DESCRIPTION
    User can override the mapping defined in the base class. Logic for
    extracting attributes from either swift data or acm object can be
    overridden.

VERSION: 3.6.3-0.5.6048
----------------------------------------------------------------------------"""
import FMT950InDerivedBase

class FMT950Derived(FMT950InDerivedBase.FMT950DerivedBase):
    """ FMT950 class for user customization"""
    def __init__(self, source, direction):
        super(FMT950Derived, self).__init__(source, direction, 'MT950Derived', True)

    def CustomMappings(self):
        """ Override/add mappings"""
        ''''
        if self.source == 'SWIFT':
            self.set_color()
        elif self.source == 'ACM':
            self.set_color_from_settlement()
        '''
        pass

    def SetAttributes(self):
        super(FMT950Derived, self).SetAttributes()
        self.CustomMappings()

...

  FMT950InDerivedBase
"""----------------------------------------------------------------------------
MODULE
    FMT950InDerivedBase : FMT950DerivedBase class for mapping from swift data and acm
    object.

DESCRIPTION
    Default logic for extracting attributes from either swift data or acm
    object.
CLASS
    FMT950DerivedBase

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import acm
import FMTInBase
import FSwiftMLUtils
import FSwiftReaderLogger
import FSwiftWriterUtils
notifier = FSwiftReaderLogger.FSwiftReaderLogger('CashConfIn', 'FCashConfirmationInNotify_Config')

from FStatementLine import *

from ChineseCommercialCode import CCC_simplified_writer, CCC_traditional_writer, CCC_traditional_reader, CCC_simplified_reader
import re

CONFIG_PARAM = FSwiftMLUtils.Parameters('FSwiftReaderConfig')
chinese_language_version = getattr(CONFIG_PARAM, 'ChineseLanguageVersion', None)
if chinese_language_version:
    if chinese_language_version == 'Simplified':
        lookup = CCC_simplified_writer
    if chinese_language_version == 'Traditional':
        lookup = CCC_traditional_writer
else:
    lookup = CCC_simplified_writer

class FMT950DerivedBase(FMTInBase.FMTInBase):
    """ Base class for FMT900_910Base mapping"""
    def __init__(self, source, direction, msg_type, isDerived=False):
        try:
            super(FMT950DerivedBase, self).__init__(source, direction, isDerived)
        except Exception as error:
            if not(isDerived and str(error) == 'Not valid swift data'):
                raise error

        self._message_type = msg_type

        self.config_param = None

        if self.isDerived:
            self.config_param = FSwiftMLUtils.Parameters('F%sIn_Config'%(self._message_type))
            if self.source == 'SWIFT':
                self.derived_swift_data = self.derived_swift_data

        self._account_identification = None
        self._value_date = None
        self._currency = None
        self._amount = None
        self._relatedReference = None
        self._fundCode = None
        self._transactionType = None
        self._identifiactionCode = None
        self._refAccountOwner = None
        self._refAccountInstitute = None
        self._openingBalanceAmount = None
        self._openingBalanceCurrency = None
        self._openingBalanceDate = None
        self._closingBalanceAmount = None
        self._closingBalanceCurrency = None
        self._closingBalanceDate = None
        self._transRefNumber = None
        self._ordering_customer = None

# ------------------------------------------------------------------------------
    def parseBalanceString(self, balance_str):
        amount = balance_str[10:].replace(',', '.')
        if balance_str[0:1] == 'D':
            amount = '-' + amount
        return [balance_str[1:7], balance_str[7:10], amount]

    def SetAttributes(self):
        """ Set the attributes from incoming swift message/acm object to MT9XX type"""
        try:
            if self.source == 'SWIFT':
                if self.isDerived:
                    statementLine = FStatementLine()
                    statementLine.populateObjectFromString(self.derived_swift_data)
                    self.AccountIdentification(statementLine.getAccountIdentification())
                    self.ValueDate(statementLine.getValueDate())
                    self.Currency(statementLine.getCurrency())
                    self.Amount(statementLine.getAmount(), statementLine.getDebitCreditMark())
                    self.RelatedReference(statementLine.getRelatedReference())
                    self.TransRefNumber(statementLine.getTransRefNumber())
                    self.FundCode(statementLine.getFundCode())
                    self.TransactionType(statementLine.getTransactionType())
                    self.IdentifiactionCode(statementLine.getIdentifiactionCode())
                    self.RefAccountOwner(statementLine.getRefAccountOwner())
                    self.RefAccountInstitute(statementLine.getRefAccountInstitute())

                    openingBal = statementLine.getOpeningBalance()
                    if openingBal:
                        opening_balance = self.parseBalanceString(openingBal)
                        self.OpeningBalanceDate(opening_balance[0])
                        self.OpeningBalanceCurrency(opening_balance[1])
                        self.OpeningBalanceAmount(opening_balance[2])

                    closingBal = statementLine.getClosingBalance()
                    if closingBal:
                        closing_balance = self.parseBalanceString(closingBal)
                        self.ClosingBalanceDate(closing_balance[0])
                        self.ClosingBalanceCurrency(closing_balance[1])
                        self.ClosingBalanceAmount(closing_balance[2])

                    self._identifier = statementLine.getLineIdentification()

                    self.subject_type = 'Settlement'
                    self.ext_ref = self._identifier
                else:
                    self.set_account_identification_from_swift()
                    self.set_value_date_from_swift()
                    self.set_currency_from_swift()
                    self.set_amount_from_swift()
                    self.set_identifier_from_swift()
                    self.set_trans_ref_number_from_swift()
                    self.set_relatedReference_from_swift()
                    self.set_fundCode_from_swift()
                    self.set_transactionType_from_swift()
                    self.set_identifiactionCode_from_swift()
                    self.set_refAccountOwner_from_swift()
                    self.set_refAccountInstitute_from_swift()

            elif self.source == 'ACM':
                self.set_account_identification_from_settlement()
                self.set_value_date_from_settlement()
                self.set_currency_from_settlement()
                self.set_amount_from_settlement()
                self.set_identifier_from_settlement()
                self.set_relatedReference_from_settlement()
                self.set_fundCode_from_settlement()
                self.set_transactionType_from_settlement()
                self.set_identifiactionCode_from_settlement()
                self.set_refAccountOwner_from_settlement()
                self.set_refAccountInstitute_from_settlement()
                #self.set_ordering_customer_from_settlement()

        except Exception as e:
            notifier.ERROR("Exception occurred in SetAttributes : %s"%str(e))

# ------------------------------------------------------------------------------
    # Methods to fetch data from the swift message
    def UniquePair(self):
        """Lookup the unique identifier in the MT950 message and search for the specific settlement.
        If customization done for Tag 20 of MT202 or MT210 then this function has to override in order
        to identify the settlement number from Tag 61"""
        pair_object = None

        if self._refAccountOwner:
            #FAS1234XX
            import FCashOutUtils
            settlement_prefix =  FCashOutUtils.get_settlement_reference_prefix()
            start_pos =  len(settlement_prefix) if settlement_prefix else 0
            settlement_num = self._refAccountOwner[start_pos:-1]

            pair_object = acm.FSettlement[str(settlement_num)]
            if not pair_object:
                settlement_num = self._refAccountOwner.split('-')[0] if len(self._refAccountOwner.split('-')) == 1 else \
                self._refAccountOwner.split('-')[1]
                pair_object = acm.FSettlement[str(settlement_num)]
                if not pair_object:
                    cash_settlement_out_config = FSwiftWriterUtils.get_config_from_fparameter('FCashOut_Config')
                    include_tradeno_in_tag_20 = FSwiftMLUtils.incude_trade_no_in_tag20(cash_settlement_out_config)
                    if FSwiftMLUtils.str_to_bool(include_tradeno_in_tag_20):
                        settlement_num = self._refAccountOwner[1:self._refAccountOwner.find('T')]
                        pair_object = acm.FSettlement[str(settlement_num)]
                if not pair_object:
                    notifier.INFO('Settlement ' + str(settlement_num) + ' not found')
            return pair_object

    def set_identifier_from_swift(self):
        try:
            self._identifier = str(self.python_object.TransactionReferenceNumber.value())
        except Exception as e:
            notifier.ERROR("Exception occurred in set_identifier_from_swift : %s"%str(e))

    def set_trans_ref_number_from_swift(self):
        try:
            self._transRefNumber = self.python_object.TransactionReferenceNumber.value()
        except Exception as e:
            notifier.ERROR("Exception occurred in set_trans_ref_number_from_swift : %s"%str(e))

    def set_relatedReference_from_swift(self):
        try:
            self._relatedReference = self.python_object.RelatedReference.value()
        except Exception as e:
            notifier.ERROR("Exception occurred in set_relatedReference_from_swift : %s"%str(e))

    def set_account_identification_from_swift(self):
        try:
            self._account_identification = self.python_object.AccountIdentification.value()
        except Exception as e:
            notifier.ERROR("Exception occurred in set_account_identification_from_swift : %s"%str(e))

    def set_value_date_from_swift(self):
        try:
            valueDate = self.python_object.ValueDateCurrencyCodeAmount.value()
            self._value_date = valueDate[0:2] + '-' + valueDate[2:4] + '-' + valueDate[4:6]
        except Exception as e:
            notifier.ERROR("Exception occurred in set_value_date_from_swift : %s"%str(e))

    def set_currency_from_swift(self):
        try:
            currency = self.python_object.ValueDateCurrencyCodeAmount.value()
            self._currency = currency[6:9]
        except Exception as e:
            notifier.ERROR("Exception occurred in set_currency_from_swift : %s"%str(e))

    def set_amount_from_swift(self):
        try:
            amount = self.python_object.ValueDateCurrencyCodeAmount.value()
            self._amount = float(amount[9:].replace(',', '.'))
            if self._message_type == 'MT900':
                self._amount *= -1
        except Exception as e:
            notifier.ERROR("Exception occurred in set_amount_from_swift : %s"%str(e))

    def set_fundCode_from_swift(self):
        pass

    def set_transactionType_from_swift(self):
        pass

    def set_identifiactionCode_from_swift(self):
        pass

    def set_refAccountOwner_from_swift(self):
        pass

    def set_refAccountInstitute_from_swift(self):
        pass

    def set_ordering_customer_from_swift(self):
        try:
            if self.python_object and self.python_object.OrderingCustomer_F:
                msg = self.python_object.OrderingCustomer_F.value()
                ordering_customer_name = ''
                for each in msg.split('\n'):
                    if '1/' in each:
                        ordering_customer_name = ordering_customer_name + each[2:] + ' '
                self._ordering_customer = ordering_customer_name
            else:
                notifier.DEBUG("OrderingCustomer_F not present in incoming message")

        except Exception as e:
            notifier.ERROR("Exception occurred in set_ordering_customer_from_swift : %s"%str(e))

    def decode_incoming_50F(self, msg):
        """This method converts the code to chinese characters that are used in party name of
           ordering customer. Input the value of field 50F to this function and it will return
           the chinese characters associated with the code.
           This function uses
        """
        updated_msg = ''
        lookup = CCC_simplified_reader
        for line in msg.split('\n'):
            list_word = []
            for word in line.split(' '):
                var = re.findall('\\b^([0-9]{4})$|[0-9]\/(?:[A-Z]{2}\/)?([0-9]{4})$\\b',word)

                if not var or len(var) > 1:
                    if word == '':
                        word = ' '
                    list_word.append(word)
                else:
                    if var[0] and var[0][0]:
                        var = var[0][0]
                    else:
                        var = var[0][1]
                    replaced_word = lookup[var]
                    updated_word = re.sub(var,replaced_word,word)
                    list_word.append(updated_word)
            updated_line = ''.join(list_word)
            updated_msg = updated_msg + updated_line + '\n'
        return updated_msg

# ------------------------------------------------------------------------------
    # Method to fetch data from the adm
    def set_identifier_from_settlement(self):
        try:
            self._identifier = self.acm_obj.Oid()
        except Exception as e:
            notifier.ERROR("Exception occurred in set_identifier_from_settlement : %s"%str(e))

    def set_account_identification_from_settlement(self):
        try:
            self._account_identification = self.acm_obj.AcquirerAccount()
        except Exception as e:
            notifier.ERROR("Exception occurred in set_account_identification_from_settlement : %s"%str(e))

    def set_value_date_from_settlement(self):
        try:
            self._value_date = self.acm_obj.ValueDay()[2:]
        except Exception as e:
            notifier.ERROR("Exception occurred in set_value_date_from_settlement : %s"%str(e))

    def set_currency_from_settlement(self):
        try:
            self._currency = self.acm_obj.Currency().Name()
        except Exception as e:
            notifier.ERROR("Exception occurred in set_currency_from_settlement : %s"%str(e))

    def set_amount_from_settlement(self):
        try:
            self._amount = self.acm_obj.Amount()
        except Exception as e:
            notifier.ERROR("Exception occurred in set_amount_from_settlement : %s"%str(e))

    def set_relatedReference_from_settlement(self):
        pass

    def set_fundCode_from_settlement(self):
        pass

    def set_transactionType_from_settlement(self):
        pass

    def set_identifiactionCode_from_settlement(self):
        pass

    def set_refAccountOwner_from_settlement(self):
        pass

    def set_refAccountInstitute_from_settlement(self):
        pass


    def set_ordering_customer_from_settlement(self):
        try:
            ordering_customer_name = self.acm_obj.Counterparty().Fullname()

            char_set = ''
            lookup_temp = lookup
            try:
                char_set = str(self.acm_obj.Counterparty().AdditionalInfo().TraditionalChinese())
            except Exception as e:
                notifier.WARN("Could not find Additional Info 'TraditionalChinese'.")

            if char_set == 'True':
                lookup_temp = CCC_traditional_writer
            elif char_set == 'False':
                lookup_temp = CCC_simplified_writer

            temp_name = ordering_customer_name
            for key in list(lookup_temp.keys()):
                temp_name = temp_name.replace(str(key), lookup_temp[key] + " ")

            self._ordering_customer = temp_name
        except Exception as e:
            notifier.ERROR("Exception occurred in set_account_identification_from_settlement : %s"%str(e))


# ------------------------------------------------------------------------------
    # Method to fetch data used in the Pairing and Matching attributes in the FParameter
    def AccountIdentification(self, account = None):
        if account is not None:
            self._account_identification = account
        return str(self._account_identification)

    def ValueDate(self, valueDate = None):
        if valueDate is not None:
            self._value_date = valueDate
        return str(self._value_date)

    def Currency(self, currency = None):
        if currency is not None:
            self._currency = currency
        return str(self._currency)

    def Amount(self, amount = None, debitCreditMark = None):
        if amount is not None and debitCreditMark is not None:
            self._amount = float(amount)
            if debitCreditMark in ['D','RC']:
                self._amount *= -1
        return self._amount

    def TransRefNumber(self, transRefNo=None):
        if transRefNo is not None:
            self._transRefNumber = transRefNo
        return str(self._transRefNumber)

    def RelatedReference(self, relatedRef = None):
        if relatedRef is not None:
            self._relatedReference = relatedRef
        return str(self._relatedReference)

    def FundCode(self, fundCode = None):
        if fundCode is not None:
            self._fundCode = fundCode
        return str(self._fundCode)

    def TransactionType(self, transactionType = None):
        if transactionType is not None:
            self._transactionType = transactionType
        return str(self._transactionType)

    def IdentifiactionCode(self, identifiactionCode = None):
        if identifiactionCode is not None:
            self._identifiactionCode = identifiactionCode
        return str(self._identifiactionCode)

    def RefAccountOwner(self, refAccountOwner = None):
        if refAccountOwner is not None:
            self._refAccountOwner = refAccountOwner
        return str(self._refAccountOwner)

    def RefAccountInstitute(self, refAccountInstitute = None):
        if refAccountInstitute is not None:
            self._refAccountInstitute = refAccountInstitute
        return str(self._refAccountInstitute)

    def OpeningBalanceAmount(self, openingBalanceAmount = None):
        if openingBalanceAmount is not None:
            self._openingBalanceAmount = openingBalanceAmount
        return str(self._openingBalanceAmount)

    def OpeningBalanceCurrency(self, openingBalanceCurrency = None):
        if openingBalanceCurrency is not None:
            self._openingBalanceCurrency = openingBalanceCurrency
        return str(self._openingBalanceCurrency)

    def OpeningBalanceDate(self, openingBalanceDate = None):
        if openingBalanceDate is not None:
            self._openingBalanceDate = openingBalanceDate
        return str(self._openingBalanceDate)

    def ClosingBalanceAmount(self, closingBalanceAmount = None):
        if closingBalanceAmount is not None:
            self._closingBalanceAmount = closingBalanceAmount
        return str(self._closingBalanceAmount)

    def ClosingBalanceCurrency(self, closingBalanceCurrency = None):
        if closingBalanceCurrency is not None:
            self._closingBalanceCurrency = closingBalanceCurrency
        return str(self._closingBalanceCurrency)

    def ClosingBalanceDate(self, closingBalanceDate = None):
        if closingBalanceDate is not None:
            self._closingBalanceDate = closingBalanceDate
        return str(self._closingBalanceDate)

    def OrderingCustomer(self):
        return str(self._ordering_customer)

# ------------------------------------------------------------------------------
    @staticmethod
    def GetColumnMetaData():
        column_metadata = {
            'TransRefNumber': {'THEIRS_SWIFT_TAG' : '20', 'OURS_SWIFT_TAG' : '20', 'SEQUENCE': 'General Information', 'COLOR': ''},
            'RelatedReference': {'THEIRS_SWIFT_TAG' : '21', 'OURS_SWIFT_TAG' : '21', 'SEQUENCE': 'General Information', 'COLOR': ''},
            'AccountIdentification': {'THEIRS_SWIFT_TAG' : '25A', 'OURS_SWIFT_TAG' : '25A', 'SEQUENCE': 'General Information', 'COLOR': ''},
            'ValueDate': {'THEIRS_SWIFT_TAG' : '32A', 'OURS_SWIFT_TAG' : '32A', 'SEQUENCE': 'General Information', 'COLOR': ''},
            'Currency' : {'THEIRS_SWIFT_TAG' : '32A', 'OURS_SWIFT_TAG' : '32A', 'SEQUENCE': 'General Information', 'COLOR': ''},
            'Amount':{'THEIRS_SWIFT_TAG' : '32A', 'OURS_SWIFT_TAG' : '32A', 'SEQUENCE': 'General Information', 'COLOR': '','FORMAT':'NumDefault'},
            }
        return column_metadata

    @staticmethod
    def GetColumnNamePrefix():
        return 'MT950_Derived'


...

  FMT950InDerivedCallbacks
"""----------------------------------------------------------------------------
MODULE:
    FMT950InDerivedCallbacks

DESCRIPTION:
    OPEN EXTENSION MODULE
    FFXTradeConfMsgCallbacks class for user customization.
    Business process conditional_entry/exit and on_entry/exit callbacks.
    User can override the logic written in the base class FMT910CallbacksBase

    If user wishes to add some extra processing for conditional entry state
     e.g. 'ready' he can implement method as
    def condition_entry_state_ready(self):
        # Custom logic before core logic
        super(FMT910Callbacks, self).condition_entry_state_ready()
        # Custom logic after core logic

FUNCTIONS:
    For sample state xxx there are always the four standard extension points:
        condition_entry_state_xxx():
            To control if all the pre-requisites to performing the action and
            entering the state are defined.
        on_entry_state_xxx():
            Is the place to perform the action.
            For example, the on_ entry_state_matched is the place to set the
            confirmation status to Matched
        condition_exit_state_xxx():
            To control that all pre-requisites for performing the next action
            are fulfilled.
        on_exit_state_xxx():
             Is the place to reset values that you set in the state entry, if
             you are leaving the state to go backwards in the workflow.
             For example if you exit from the Matched state to go and re-pair,
             or to manually cancel, then you would want to remove the
             confirmation Matched status
CLASS
    FMT950InDerivedCallbacks

VERSION: 3.6.3-0.5.6048
----------------------------------------------------------------------------"""
# The context parameter is an instance of FBusinessProcessCallbackContext
import FMT950InDerivedCallbacksBase

class FMT950InDerivedCallbacks(FMT950InDerivedCallbacksBase.FMT950InDerivedCallbacksBase):
    def __init__(self):
        super(FMT950InDerivedCallbacks, self).__init__()

...

  FMT950InDerivedCallbacksBase
"""----------------------------------------------------------------------------
MODULE:
    FMT950InDerivedCallbacksBase

DESCRIPTION:
    OPEN EXTENSION MODULE
    This is a READ ONLY module. User can override the default logic in derived
    class FMT9XXCallbacks
    Business process conditional_entry/exit and on_entry/exit callbacks.

FUNCTIONS:
    For sample state xxx there are always the four standard extension points:
        condition_entry_state_xxx():
            To control if all the pre-requisites to performing the action and
            entering the state are defined.
        on_entry_state_xxx():
            Is the place to perform the action.
            For example, the on_ entry_state_matched is the place to set the
            confirmation status to Matched
        condition_exit_state_xxx():
            To control that all pre-requisites for performing the next action
            are fulfilled.
        on_exit_state_xxx():
             Is the place to reset values that you set in the state entry, if
             you are leaving the state to go backwards in the workflow.
             For example if you exit from the "Matched" state to go and re-pair,
             or to manually cancel, then you would want to remove the
             confirmation Matched status
CLASS
    FMT950InDerivedCallbacksBase

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
# The context parameter is an instance of FBusinessProcessCallbackContext
import FSwiftMLUtils
import acm

import FSwiftReaderLogger
notifier = FSwiftReaderLogger.FSwiftReaderLogger('CashConfIn', 'FCashConfirmationInNotify_Config')

class FMT950InDerivedCallbacksBase(object):
    def __init__(self):
        pass

    def getStateBeforePairing(self,bpr):
        prevStatus = None
        for step in bpr.Steps():
            if step.State().Name() == 'Paired':
                diaryEntry = step.DiaryEntry()
                if diaryEntry:
                    param = diaryEntry.Parameters()
                    if param:
                        prevStatus = param.At('AcmObjectStatusBeforePairing',None)
                        break
        return prevStatus

    #   condition_entry_state_XXX
    def condition_entry_state_ready(self,context):
        return FSwiftMLUtils.HasUserRights(FSwiftMLUtils.get_operation_name_from_bpr_context(context))

    def condition_entry_state_paired(self,context):
        return FSwiftMLUtils.HasUserRights(FSwiftMLUtils.get_operation_name_from_bpr_context(context))

    def condition_entry_state_difference(self,context):
        return FSwiftMLUtils.HasUserRights(FSwiftMLUtils.get_operation_name_from_bpr_context(context))

    def condition_entry_state_unpaired(self,context):
        return FSwiftMLUtils.HasUserRights(FSwiftMLUtils.get_operation_name_from_bpr_context(context))

    def condition_entry_state_matched(self,context):
        return FSwiftMLUtils.HasUserRights(FSwiftMLUtils.get_operation_name_from_bpr_context(context))

    def condition_entry_state_ignored(self,context):
        return FSwiftMLUtils.HasUserRights(FSwiftMLUtils.get_operation_name_from_bpr_context(context))

    #   condition_exit_state_XXX
    def condition_exit_state_ready(self,context):
        return True

    def condition_exit_state_paired(self,context):
        return True

    def condition_exit_state_difference(self,context):
        return True

    def condition_exit_state_unpaired(self,context):
        return True

    def condition_exit_state_matched(self,context):
        return True

    def condition_exit_state_ignored(self,context):
        return True


    # Entry/Exit callbacks do not return anything
    #
    # Name convention is
    # 'on_' + 'entry_'/'exit_' + state name in lowercase and underscore
    #

    #   on_entry_state_XXX
    def on_entry_state_ready(self,context):
        pass

    def on_entry_state_paired(self,context):
        try:
            bpr = context.CurrentStep().BusinessProcess()
            settle_obj = FSwiftMLUtils.get_acm_object_from_bpr(bpr)
            diary_obj = settle_obj.Diary()
            if not diary_obj:
                diary_obj = acm.FSettlementDiary()

            diary_obj.AddNote('SWIFTREADER_DERIVED_PAIRED: BusinessProcess = %s' % str(bpr.Oid()))

            FSwiftMLUtils.commit_and_retry(diary_obj)
            settle_obj.Diary(diary_obj)
            FSwiftMLUtils.commit_and_retry(settle_obj)
        except Exception as error:
            notifier.ERROR("Error occurred in on_entry_state_paired: %s" % str(error))
            notifier.DEBUG(str(error), exc_info=1)

    def on_entry_state_difference(self,context):
        pass

    def on_entry_state_unpaired(self,context):
        try:
            bp = context.CurrentStep().BusinessProcess()
            acm_object = FSwiftMLUtils.get_acm_object_from_bpr(bp)
            prevStatus = None
            try:
                if acm_object and acm_object.IsKindOf(acm.FSettlement):
                    prevStatus = self.getStateBeforePairing(bp)
                    if prevStatus:
                        acm_object.Status(prevStatus)
                    acm_object.SettledAmount(0)
                    acm_object.SettledDay('')
                    FSwiftMLUtils.commit_and_retry(acm_object)
            except Exception as e:
                notifier.ERROR("Can not move Settlement %s to %s status" % (acm_object.Oid(), prevStatus))
                notifier.DEBUG(str(e), exc_info=1)

            #FSwiftMLUtils.unlink_acm_object(context.CurrentStep().BusinessProcess())
            FSwiftMLUtils.FSwiftExternalObject.unlink_acm_object(context.CurrentStep().BusinessProcess(), 'Settlement')
        except Exception as e:
            notifier.ERROR("Error occurred while processing on_entry_state_unpaired: %s"%str(e))

    def on_entry_state_matched(self,context):
        try:
            pass

        except Exception as e:
            notifier.ERROR("Error occurred while processing on_entry_state_matched: %s"%str(e))


    def on_entry_state_ignored(self,context):
        pass

    #   on_exit_state_XXX

    def on_exit_state_ready(self,context):
        pass

    def on_exit_state_paired(self,context):
        pass

    def on_exit_state_difference(self,context):
        pass

    def on_exit_state_unpaired(self,context):
        pass

    def on_exit_state_matched(self,context):
        pass

    def on_exit_state_ignored(self,context):
        pass

...

  FMT950InDerivedProcessing
"""----------------------------------------------------------------------------
MODULE:
    FMT950InDerivedProcessing

DESCRIPTION:
    OPEN EXTENSION MODULE
    User can write custom logic to be executed in each state of the
    CreditConfMsg business process. It is derived from
    FMT910ProcessingBase

    The function prototype should be : process_state_xxx(business_process)
    where xxx is state name e.g. process_state_ready

    Base class implements following state processing:
     - process_state_ready
     - process_state_paired
     - process_state_unpaired

    If user wishes to add some extra processing for conditional entry state
     e.g. 'ready' he can implement method as
    def process_state_ready(self):
        # Custom logic before core logic
        super(FMT910Processing, self).process_state_ready()
        # Custom logic after core logic
CLASS
    FMT950InDerivedProcessing

VERSION: 3.6.3-0.5.6048
----------------------------------------------------------------------------"""
import FMT950InDerivedProcessingBase

import FSwiftReaderLogger
notifier = FSwiftReaderLogger.FSwiftReaderLogger('CashConfIn', 'FCashConfirmationInNotify_Config')

class FMT950InDerivedProcessing(FMT950InDerivedProcessingBase.FMT950InDerivedProcessingBase):
    def __init__(self, bpr):
        super(FMT950InDerivedProcessing, self).__init__(bpr)

    def process_state_xxx(self):
        """ process bpr state xxx"""
        try:
            notifier.INFO("Processing BPR step xxx")

            notifier.INFO("Completed processing BPR step xxx")
        except Exception as e:
            pass

...

  FMT950InDerivedProcessingBase
"""----------------------------------------------------------------------------
MODULE
    FMT950InDerivedProcessingBase :
    User can write custom logic to be executed in each state.

    The function prototype should be : process_state_xxx(business_process)
    where xxx is state name e.g. process_state_ready

DESCRIPTION
    This module contains the logic to handle the business process process updates.

CLASS
    FMT950InDerivedProcessingBase

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FMT950InProcessing
"""----------------------------------------------------------------------------
MODULE
    FMT950InProcessing :
    User can write custom logic to be executed in each state.

    The function prototype should be : process_state_xxx(business_process)
    where xxx is state name e.g. process_state_ready

VERSION: 3.6.3-0.5.6048
----------------------------------------------------------------------------"""
import FSwiftReaderLogger
notifier = FSwiftReaderLogger.FSwiftReaderLogger('CashConfIn', 'FCashConfirmationInNotify_Config')
import FMT950InProcessingBase



class FMT950InProcessing(FMT950InProcessingBase.FMT950InProcessingBase):
    def __init__(self, bpr):
        super(FMT950InProcessing, self).__init__(bpr)

    def process_state_xxx(self):
        """ process bpr state xxx"""
        try:
            notifier.INFO("Processing BPR step xxx")
            # logic to be executed in xxx state
            notifier.INFO("Completed processing BPR step xxx")
        except Exception as e:
            notifier.ERROR("Error occurred while processing BPR step xxx: %s"%str(e))
            notifier.DEBUG(str(e), exc_info=1)


...

  FMT950InProcessingBase
"""----------------------------------------------------------------------------
MODULE
    FMT950InProcessingBase

DESCRIPTION
    User can write custom logic to be executed in each state.

    The function prototype should be : process_state_xxx(business_process)
    where xxx is state name e.g. process_state_ready

CLASS
    FMT950InProcessingBase

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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
yY5X7w==""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FMT9XXProcessFunctions
"""----------------------------------------------------------------------------
MODULE
    FMT9XXProcessFunctions : Process function for FMT940

DESCRIPTION
    Contains the functions to process the matching

FUNCTION
    trigger_match_nomatch():
        Decides whether to trigger match or nomatch

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
eNqtVc1uI0UQ7h7P+KedhKxhd1lAqIWItD7ECbAXIrRi17GRUWJHtrOEuYwm0+14gj0z6mmT2LK5LEeQ9hHsI++AeJC5IU77Clyg
umeSjSB7AG1b/VPVXVVf1VSV/0D/GCbML2HGj2BhyEYMM2OEbczxErMcM1eGbWhezs7p3bRNZrH8j8i2mNFD1cLvPxkIbb/BQQ47
+8cHDUJhNA/7n5+cHInQ43HcnASe9MMgpns0Y9FBxqODUOjXj3YJ2W/06t3WUb/VaWst9TCQrg9ycsivJYAKaZSpURdjV3pDPzgj
pHncrl8LS+GfnXHh6GsnCPX+sLqnL9XY557PeEwvhhzUCKU2k0lVUkCWiRHyrNHtgeY9utXdIqTb6PW7LW2rt3PQOmz1n+jzHil9
UqNPgikdh8wf+J57jVghjT3hR3KHB56YRpIz9Woy4jveiLtgn19K6oWM0wtfgkNaxAsFp34MQCSNJ1EUCpCrkdKnNdofAj/VcPXC
m8QyHPsz93TE4dFn6pHSMY7CgAcS/Jrqdxeh+I66MeWXEfcUEGWRuv/CzUAsBf/KlCvpJIYY8QBwvMn8eakSu22TuhsP4csPWoFN
m1eEL8YaUytoh9IfTB3NPPPMG0VRhklg1lVhDDFCL/DsnkRLPM+t8MJkeGHN0bnBjAkWH6nTwpK5ucVy99HcvI+e40V+bojfpLm0
mDnHy/wKwVpYoexUhFMJJnkNVWbWCit6YN1DK4yRXFuuzzGz5vlVDiOWhzLcWBTmheXGCi2K8+L5W4vSvLTcVFhWWPwK5zvpGaPg
ROMo/C8cxVtxFFMc36DgaxPJygs8PcVoQTCa7YKtt1kJokGe40zGPH8npRlh5Z8NJfctYsaC/EACku67aBfpZrI2+4D2s9rh36eZ
BmWzk5VPgtoJJrPu06Mu3WK0cSm5CNwRDU/PIf0Ua+9KHOo403CY1mBAe9KVnG7FNZh0e/uhvqhubz8GOrE0JaCVodmz/6S/Hb7W
QnaV2bALGT3bbVx6PNJtK/S8iRBQOapOb+s0YHIrfglJiKo4KfJLz/GDQVi9m6xBtztyfaFVJhveOHIEjycj6cRSJCS+8AfSYa50
k5xiFAOV7z4XidlqNzt2ruMzu9CbaNfscl2hCGRP8iixtB+J2XbH3C73XXHGZcpab/aU2sODY+mPYnv9CrGORPL+zQKL66435D2I
04jLMEjWo2lH29L8JAc6k1wURknpOhi21eh2O93E2m88Pf6qWrZLY+mksbfNU2jVdll5GU881bNt8splUYL4CFWzdgG61BjQiDuK
2vAAkuMpk0qTqAAzwfwXJN6F058Pbv9/qUXT5O6tX+M91RJqqkkYJiZYzbyxCfvH+MO/isYGLsIvj9fwRi7lVOC2goWSq+aTguOw
0HMcu5IGsstdxsVBqAyJNeXDplqKalEiGuWN5YGCX/wi7aCPVVLEymmzUgSTYNr8GyHJRQ8=""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FStatementLine
"""----------------------------------------------------------------------------
MODULE
    FStatementLine : Class to parse the StatementLine.

DESCRIPTION
    This module parses the statlement line received.

CLASS
    FStatementLine

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FSwiftCashConfirmationInstalledComponent
"""----------------------------------------------------------------------------
MODULE:
    FSwiftCashConfirmationInstalledComponent

DESCRIPTION:
    This module use to show module in installed component GUI.

CLASS:
    Diagnostics

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FSwiftCashConfirmationValidateSetup
"""----------------------------------------------------------------------------
MODULE:
    FSwiftCashConfirmationValidateSetup

DESCRIPTION:
    A module for validating the setup of Swift Messaging Solution - CashConfirmation

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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
2n9VKZ+f""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FSwiftCustomerStatementIn
"""----------------------------------------------------------------------------
MODULE
    FSwiftCustomerStatementIn

DESCRIPTION
    OPEN EXTENSION MODULE
    Business process state callbacks.

FUNCTION
    condition_entry_state_XXX():
        Check the condition to enter a state
    condition_exit_state_XXX():
        Check the condition to exit a state
    on_entry_state_XXX():
        Defines the processing of the function when the control is in the state
    on_exit_state_XXX():
        Defines the processing of the function when the control is going out of the state

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.

----------------------------------------------------------------------------"""
from FMT940InCallbacks import FMT940InCallbacks

cashConfirmationMsgCallbacks = FMT940InCallbacks()

#   condition_entry_state_XXX
def condition_entry_state_ready(context):
    return cashConfirmationMsgCallbacks.condition_entry_state_ready(context)

def condition_entry_state_checkstatements(context):
    return cashConfirmationMsgCallbacks.condition_entry_state_checkstatements(context)

def condition_entry_state_unmatched(context):
    return cashConfirmationMsgCallbacks.condition_entry_state_unmatched(context)

def condition_entry_state_matched(context):
    return cashConfirmationMsgCallbacks.condition_entry_state_matched(context)

#   condition_exit_state_XXX
def condition_exit_state_ready(context):
    return cashConfirmationMsgCallbacks.condition_exit_state_ready(context)

def condition_exit_state_checkstatements(context):
    return cashConfirmationMsgCallbacks.condition_exit_state_checkstatements(context)


def condition_exit_state_unmatched(context):
    return cashConfirmationMsgCallbacks.condition_exit_state_unmatched(context)

def condition_exit_state_matched(context):
    return cashConfirmationMsgCallbacks.condition_exit_state_matched(context)


# Entry/Exit callbacks do not return anything
#
# Name convention is
# 'on_' + 'entry_'/'exit_' + state name in lowercase and underscore
#

#   on_entry_state_XXX
def on_entry_state_ready(context):
    cashConfirmationMsgCallbacks.on_entry_state_ready(context)

def on_entry_state_checkstatements(context):
    cashConfirmationMsgCallbacks.on_entry_state_checkstatements(context)

def on_entry_state_unmatched(context):
    cashConfirmationMsgCallbacks.on_entry_state_unmatched(context)

def on_entry_state_matched(context):
    cashConfirmationMsgCallbacks.on_entry_state_matched(context)

#   on_exit_state_XXX

def on_exit_state_ready(context):
    cashConfirmationMsgCallbacks.on_exit_state_ready(context)

def on_exit_state_checkstatements(context):
    cashConfirmationMsgCallbacks.on_exit_state_checkstatements(context)

def on_exit_state_unmatched(context):
    cashConfirmationMsgCallbacks.on_exit_state_unmatched(context)

def on_exit_state_matched(context):
    cashConfirmationMsgCallbacks.on_exit_state_matched(context)

...

  FSwiftDebitCreditConfIn
"""----------------------------------------------------------------------------
MODULE:
    FSwiftDebitCreditConfIn

DESCRIPTION:
    OPEN EXTENSION MODULE
    Business process state callbacks.

FUNCTION
    condition_entry_state_XXX():
        Check the condition to enter a state
    condition_exit_state_XXX():
        Check the condition to exit a state
    on_entry_state_XXX():
        Defines the processing of the function when the control is in the state
    on_exit_state_XXX():
        Defines the processing of the function when the control is going out of the state

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
from FMT900_910InCallbacks import FMT900_910InCallbacks

creditConfirmationMsgCallbacks = FMT900_910InCallbacks()

#   condition_entry_state_XXX
def condition_entry_state_ready(context):
    return creditConfirmationMsgCallbacks.condition_entry_state_ready(context)

def condition_entry_state_paired(context):
    return creditConfirmationMsgCallbacks.condition_entry_state_paired(context)

def condition_entry_state_difference(context):
    return creditConfirmationMsgCallbacks.condition_entry_state_difference(context)

def condition_entry_state_unpaired(context):
    return creditConfirmationMsgCallbacks.condition_entry_state_unpaired(context)

def condition_entry_state_matched(context):
    return creditConfirmationMsgCallbacks.condition_entry_state_matched(context)

def condition_entry_state_ignored(context):
    return creditConfirmationMsgCallbacks.condition_entry_state_ignored(context)

#   condition_exit_state_XXX
def condition_exit_state_ready(context):
    return creditConfirmationMsgCallbacks.condition_exit_state_ready(context)

def condition_exit_state_paired(context):
    return creditConfirmationMsgCallbacks.condition_exit_state_paired(context)

def condition_exit_state_difference(context):
    return creditConfirmationMsgCallbacks.condition_exit_state_difference(context)

def condition_exit_state_unpaired(context):
    return creditConfirmationMsgCallbacks.condition_exit_state_unpaired(context)

def condition_exit_state_matched(context):
    return creditConfirmationMsgCallbacks.condition_exit_state_matched(context)

def condition_exit_state_ignored(context):
    return creditConfirmationMsgCallbacks.condition_exit_state_ignored(context)


# Entry/Exit callbacks do not return anything
#
# Name convention is
# 'on_' + 'entry_'/'exit_' + state name in lowercase and underscore
#

#   on_entry_state_XXX
def on_entry_state_ready(context):
    creditConfirmationMsgCallbacks.on_entry_state_ready(context)


def on_entry_state_paired(context):
    creditConfirmationMsgCallbacks.on_entry_state_paired(context)


def on_entry_state_difference(context):
    creditConfirmationMsgCallbacks.on_entry_state_difference(context)


def on_entry_state_unpaired(context):
    creditConfirmationMsgCallbacks.on_entry_state_unpaired(context)


def on_entry_state_matched(context):
    creditConfirmationMsgCallbacks.on_entry_state_matched(context)


def on_entry_state_ignored(context):
    creditConfirmationMsgCallbacks.on_entry_state_ignored(context)


#   on_exit_state_XXX

def on_exit_state_ready(context):
    creditConfirmationMsgCallbacks.on_exit_state_ready(context)

def on_exit_state_paired(context):
    creditConfirmationMsgCallbacks.on_exit_state_paired(context)

def on_exit_state_difference(context):
    creditConfirmationMsgCallbacks.on_exit_state_difference(context)

def on_exit_state_unpaired(context):
    creditConfirmationMsgCallbacks.on_exit_state_unpaired(context)

def on_exit_state_matched(context):
    creditConfirmationMsgCallbacks.on_exit_state_matched(context)

def on_exit_state_ignored(context):
    creditConfirmationMsgCallbacks.on_exit_state_ignored(context)


...

  FSwiftDerivedDebitCreditConfIn
"""----------------------------------------------------------------------------
MODULE:
    FSwiftDerivedDebitCreditConfIn

DESCRIPTION:
    OPEN EXTENSION MODULE
    Business process state callbacks.

FUNCTION
    condition_entry_state_XXX():
        Check the condition to enter a state
    condition_exit_state_XXX():
        Check the condition to exit a state
    on_entry_state_XXX():
        Defines the processing of the function when the control is in the state
    on_exit_state_XXX():
        Defines the processing of the function when the control is going out of the state

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
from FMT900_910InDerivedCallbacks import FMT900_910InDerivedCallbacks

debitCreditConfMsgCallbacks = FMT900_910InDerivedCallbacks()

#   condition_entry_state_XXX
def condition_entry_state_ready(context):
    return debitCreditConfMsgCallbacks.condition_entry_state_ready(context)

def condition_entry_state_paired(context):
    return debitCreditConfMsgCallbacks.condition_entry_state_paired(context)

def condition_entry_state_difference(context):
    return debitCreditConfMsgCallbacks.condition_entry_state_difference(context)

def condition_entry_state_unpaired(context):
    return debitCreditConfMsgCallbacks.condition_entry_state_unpaired(context)

def condition_entry_state_matched(context):
    return debitCreditConfMsgCallbacks.condition_entry_state_matched(context)

def condition_entry_state_ignored(context):
    return debitCreditConfMsgCallbacks.condition_entry_state_ignored(context)

#   condition_exit_state_XXX
def condition_exit_state_ready(context):
    return debitCreditConfMsgCallbacks.condition_exit_state_ready(context)

def condition_exit_state_paired(context):
    return debitCreditConfMsgCallbacks.condition_exit_state_paired(context)

def condition_exit_state_difference(context):
    return debitCreditConfMsgCallbacks.condition_exit_state_difference(context)

def condition_exit_state_unpaired(context):
    return debitCreditConfMsgCallbacks.condition_exit_state_unpaired(context)

def condition_exit_state_matched(context):
    return debitCreditConfMsgCallbacks.condition_exit_state_matched(context)

def condition_exit_state_ignored(context):
    return debitCreditConfMsgCallbacks.condition_exit_state_ignored(context)


# Entry/Exit callbacks do not return anything
#
# Name convention is
# 'on_' + 'entry_'/'exit_' + state name in lowercase and underscore
#

#   on_entry_state_XXX
def on_entry_state_ready(context):
    debitCreditConfMsgCallbacks.on_entry_state_ready(context)


def on_entry_state_paired(context):
    debitCreditConfMsgCallbacks.on_entry_state_paired(context)


def on_entry_state_difference(context):
    debitCreditConfMsgCallbacks.on_entry_state_difference(context)


def on_entry_state_unpaired(context):
    debitCreditConfMsgCallbacks.on_entry_state_unpaired(context)


def on_entry_state_matched(context):
    debitCreditConfMsgCallbacks.on_entry_state_matched(context)


def on_entry_state_ignored(context):
    debitCreditConfMsgCallbacks.on_entry_state_ignored(context)


#   on_exit_state_XXX

def on_exit_state_ready(context):
    debitCreditConfMsgCallbacks.on_exit_state_ready(context)

def on_exit_state_paired(context):
    debitCreditConfMsgCallbacks.on_exit_state_paired(context)

def on_exit_state_difference(context):
    debitCreditConfMsgCallbacks.on_exit_state_difference(context)

def on_exit_state_unpaired(context):
    debitCreditConfMsgCallbacks.on_exit_state_unpaired(context)

def on_exit_state_matched(context):
    debitCreditConfMsgCallbacks.on_exit_state_matched(context)

def on_exit_state_ignored(context):
    debitCreditConfMsgCallbacks.on_exit_state_ignored(context)

...

  FSwiftStatementMessageDerivedIn
"""----------------------------------------------------------------------------
MODULE:
    FSwiftStatementMessageDerivedIn

DESCRIPTION:
    OPEN EXTENSION MODULE
    Business process state callbacks.

FUNCTION
    condition_entry_state_XXX():
        Check the condition to enter a state
    condition_exit_state_XXX():
        Check the condition to exit a state
    on_entry_state_XXX():
        Defines the processing of the function when the control is in the state
    on_exit_state_XXX():
        Defines the processing of the function when the control is going out of the state

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
from FMT950InDerivedCallbacks import FMT950InDerivedCallbacks
import FSwiftReaderLogger,acm
notifier = FSwiftReaderLogger.FSwiftReaderLogger('CashConfIn', 'FCashConfirmationInNotify_Config')
import FSwiftMLUtils

debitCreditConfMsgCallbacks = FMT950InDerivedCallbacks()


#   condition_entry_state_XXX
def condition_entry_state_ready(context):
    return debitCreditConfMsgCallbacks.condition_entry_state_ready(context)

def condition_entry_state_paired(context):
    return debitCreditConfMsgCallbacks.condition_entry_state_paired(context)

def condition_entry_state_difference(context):
    return debitCreditConfMsgCallbacks.condition_entry_state_difference(context)

def condition_entry_state_unpaired(context):
    return debitCreditConfMsgCallbacks.condition_entry_state_unpaired(context)

def condition_entry_state_matched(context):
    return debitCreditConfMsgCallbacks.condition_entry_state_matched(context)

def condition_entry_state_ignored(context):
    return debitCreditConfMsgCallbacks.condition_entry_state_ignored(context)

#   condition_exit_state_XXX
def condition_exit_state_ready(context):
    return debitCreditConfMsgCallbacks.condition_exit_state_ready(context)

def condition_exit_state_paired(context):
    return debitCreditConfMsgCallbacks.condition_exit_state_paired(context)

def condition_exit_state_difference(context):
    return debitCreditConfMsgCallbacks.condition_exit_state_difference(context)

def condition_exit_state_unpaired(context):
    return debitCreditConfMsgCallbacks.condition_exit_state_unpaired(context)

def condition_exit_state_matched(context):
    return debitCreditConfMsgCallbacks.condition_exit_state_matched(context)

def condition_exit_state_ignored(context):
    return debitCreditConfMsgCallbacks.condition_exit_state_ignored(context)


# Entry/Exit callbacks do not return anything
#
# Name convention is
# 'on_' + 'entry_'/'exit_' + state name in lowercase and underscore
#

#   on_entry_state_XXX
def on_entry_state_ready(context):
    debitCreditConfMsgCallbacks.on_entry_state_ready(context)


def on_entry_state_paired(context):
    debitCreditConfMsgCallbacks.on_entry_state_paired(context)


def on_entry_state_difference(context):
    debitCreditConfMsgCallbacks.on_entry_state_difference(context)

    ''' Example code added below which will update settlement status.User can use same or update that code'''

    '''
    try:
        bp = context.CurrentStep().BusinessProcess()
        acm_object = FSwiftMLUtils.get_acm_object_from_bpr(bp)
        if acm_object and acm_object.IsKindOf(acm.FSettlement):
            acm_object.Status('Incorrect Payment')
            FSwiftMLUtils.commit_and_retry(acm_object)
    except Exception as e:
        notifier.ERROR("Error occurred while processing on_entry_state_difference: %s"%str(e))
    
    '''

def on_entry_state_unpaired(context):
    debitCreditConfMsgCallbacks.on_entry_state_unpaired(context)


def on_entry_state_matched(context):
    debitCreditConfMsgCallbacks.on_entry_state_matched(context)


def on_entry_state_ignored(context):
    debitCreditConfMsgCallbacks.on_entry_state_ignored(context)


#   on_exit_state_XXX

def on_exit_state_ready(context):
    debitCreditConfMsgCallbacks.on_exit_state_ready(context)

def on_exit_state_paired(context):
    debitCreditConfMsgCallbacks.on_exit_state_paired(context)

def on_exit_state_difference(context):
    debitCreditConfMsgCallbacks.on_exit_state_difference(context)

def on_exit_state_unpaired(context):
    debitCreditConfMsgCallbacks.on_exit_state_unpaired(context)

def on_exit_state_matched(context):
    debitCreditConfMsgCallbacks.on_exit_state_matched(context)

def on_exit_state_ignored(context):
    debitCreditConfMsgCallbacks.on_exit_state_ignored(context)

...

  FSwiftStatementMessageIn
"""----------------------------------------------------------------------------
MODULE
    FSwiftStatementMessageIn

DESCRIPTION
    OPEN EXTENSION MODULE
    Business process state callbacks.

FUNCTION
    condition_entry_state_XXX():
        Check the condition to enter a state
    condition_exit_state_XXX():
        Check the condition to exit a state
    on_entry_state_XXX():
        Defines the processing of the function when the control is in the state
    on_exit_state_XXX():
        Defines the processing of the function when the control is going out of the state

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.

----------------------------------------------------------------------------"""
from FMT950InCallbacks import FMT950InCallbacks
import FSwiftReaderLogger,acm
notifier = FSwiftReaderLogger.FSwiftReaderLogger('CashConfIn', 'FCashConfirmationInNotify_Config')
import FSwiftMLUtils
cashConfirmationMsgCallbacks = FMT950InCallbacks()

#   condition_entry_state_XXX
def condition_entry_state_ready(context):
    return cashConfirmationMsgCallbacks.condition_entry_state_ready(context)

def condition_entry_state_processingmessage(context):
    return cashConfirmationMsgCallbacks.condition_entry_state_processingmessage(context)

def condition_entry_state_rownotmatched(context):
    return cashConfirmationMsgCallbacks.condition_entry_state_rownotmatched(context)

def condition_entry_state_allmatched(context):
    return cashConfirmationMsgCallbacks.condition_entry_state_allmatched(context)

#   condition_exit_state_XXX
def condition_exit_state_ready(context):
    return cashConfirmationMsgCallbacks.condition_exit_state_ready(context)

def condition_exit_state_processingmessage(context):
    return cashConfirmationMsgCallbacks.condition_exit_state_processingmessage(context)


def condition_exit_state_rownotmatched(context):
    return cashConfirmationMsgCallbacks.condition_exit_state_rownotmatched(context)

def condition_exit_state_allmatched(context):
    return cashConfirmationMsgCallbacks.condition_exit_state_allmatched(context)


# Entry/Exit callbacks do not return anything
#
# Name convention is
# 'on_' + 'entry_'/'exit_' + state name in lowercase and underscore
#

#   on_entry_state_XXX
def on_entry_state_ready(context):
    cashConfirmationMsgCallbacks.on_entry_state_ready(context)

def on_entry_state_processingmessage(context):
    cashConfirmationMsgCallbacks.on_entry_state_processingmessage(context)

def on_entry_state_rownotmatched(context):
    cashConfirmationMsgCallbacks.on_entry_state_rownotmatched(context)

    '''Example code is added under function update_settlement_status where we are updating the status of settlement.
    user can call that function or update that logic 
    #update_settlement_status(context, 'rownotmatched')
    '''


def on_entry_state_allmatched(context):
    cashConfirmationMsgCallbacks.on_entry_state_allmatched(context)

    '''Example code is added under function update_settlement_status to update the status of settlement.
        user can call that function or update that logic 
        #update_settlement_status(context, 'allmatched')
    '''
#   on_exit_state_XXX

def on_exit_state_ready(context):
    cashConfirmationMsgCallbacks.on_exit_state_ready(context)

def on_exit_state_processingmessage(context):
    cashConfirmationMsgCallbacks.on_exit_state_processingmessage(context)

def on_exit_state_rownotmatched(context):
    cashConfirmationMsgCallbacks.on_exit_state_rownotmatched(context)

def on_exit_state_allmatched(context):
    cashConfirmationMsgCallbacks.on_exit_state_allmatched(context)

...

  MT900
# C:\Projects\XSD\MT900.py
# -*- coding: utf-8 -*-
# PyXB bindings for NM:96afad3d20bbfe8d040a1a097fa388d9fecd10e3
# Generated 2021-03-26 11:24:58.931880 by PyXB version 1.2.6 using Python 3.7.4.final.0
# Namespace http://www.w3schools.com

from __future__ import unicode_literals
import pyxb
import pyxb.binding
import pyxb.binding.saxer
import io
import pyxb.utils.utility
import pyxb.utils.domutils
import sys
import pyxb.utils.six as _six
# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:cc458676-8df7-11eb-ba2e-3448ed42967c')

# Version of PyXB used to generate the bindings
_PyXBVersion = '1.2.6'
# Generated bindings are not compatible across PyXB versions
if pyxb.__version__ != _PyXBVersion:
    raise pyxb.PyXBVersionError(_PyXBVersion)

# A holder for module-level binding classes so we can access them from
# inside class definitions where property names may conflict.
_module_typeBindings = pyxb.utils.utility.Object()

# Import bindings for namespaces imported into schema
import pyxb.binding.datatypes

# NOTE: All namespace declarations are reserved within the binding
Namespace = pyxb.namespace.NamespaceForURI('http://www.w3schools.com', create_if_missing=True)
Namespace.configureCategories(['typeBinding', 'elementBinding'])

def CreateFromDocument (xml_text, default_namespace=None, location_base=None):
    """Parse the given XML and use the document element to create a
    Python instance.

    @param xml_text An XML document.  This should be data (Python 2
    str or Python 3 bytes), or a text (Python 2 unicode or Python 3
    str) in the L{pyxb._InputEncoding} encoding.

    @keyword default_namespace The L{pyxb.Namespace} instance to use as the
    default namespace where there is no default namespace in scope.
    If unspecified or C{None}, the namespace of the module containing
    this function will be used.

    @keyword location_base: An object to be recorded as the base of all
    L{pyxb.utils.utility.Location} instances associated with events and
    objects handled by the parser.  You might pass the URI from which
    the document was obtained.
    """

    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement, default_namespace=default_namespace)
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    saxer = pyxb.binding.saxer.make_parser(fallback_namespace=default_namespace, location_base=location_base)
    handler = saxer.getContentHandler()
    xmld = xml_text
    if isinstance(xmld, _six.text_type):
        xmld = xmld.encode(pyxb._InputEncoding)
    saxer.parse(io.BytesIO(xmld))
    instance = handler.rootObject()
    return instance

def CreateFromDOM (node, default_namespace=None):
    """Create a Python instance from the given DOM node.
    The node tag must correspond to an element declaration in this module.

    @deprecated: Forcing use of DOM interface is unnecessary; use L{CreateFromDocument}."""
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return pyxb.binding.basis.element.AnyCreateFromDOM(node, default_namespace)


# Atomic simple type: {http://www.w3schools.com}MT900_20_Type_Pattern
class MT900_20_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT900_20_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 3, 1)
    _Documentation = None
MT900_20_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT900_20_Type_Pattern._CF_pattern.addPattern(pattern="([^/]([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,14}[^/])")
MT900_20_Type_Pattern._InitializeFacetMap(MT900_20_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT900_20_Type_Pattern', MT900_20_Type_Pattern)
_module_typeBindings.MT900_20_Type_Pattern = MT900_20_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT900_21_Type_Pattern
class MT900_21_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT900_21_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 16, 1)
    _Documentation = None
MT900_21_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT900_21_Type_Pattern._CF_pattern.addPattern(pattern="([^/]([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,14}[^/])")
MT900_21_Type_Pattern._InitializeFacetMap(MT900_21_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT900_21_Type_Pattern', MT900_21_Type_Pattern)
_module_typeBindings.MT900_21_Type_Pattern = MT900_21_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT900_25_Type_Pattern
class MT900_25_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT900_25_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 29, 1)
    _Documentation = None
MT900_25_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT900_25_Type_Pattern._CF_pattern.addPattern(pattern="(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35})")
MT900_25_Type_Pattern._InitializeFacetMap(MT900_25_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT900_25_Type_Pattern', MT900_25_Type_Pattern)
_module_typeBindings.MT900_25_Type_Pattern = MT900_25_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT900_25P_Type_Pattern
class MT900_25P_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT900_25P_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 42, 1)
    _Documentation = None
MT900_25P_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT900_25P_Type_Pattern._CF_pattern.addPattern(pattern="(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT900_25P_Type_Pattern._InitializeFacetMap(MT900_25P_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT900_25P_Type_Pattern', MT900_25P_Type_Pattern)
_module_typeBindings.MT900_25P_Type_Pattern = MT900_25P_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT900_13D_Type_Pattern
class MT900_13D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT900_13D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 55, 1)
    _Documentation = None
MT900_13D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT900_13D_Type_Pattern._CF_pattern.addPattern(pattern="([0-9]{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(0[0-9]|[1][0-9]|2[0-3])([0-5][0-9])([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1}(0[0-9]|[1][0-9]|2[0-3])([0-5][0-9]))")
MT900_13D_Type_Pattern._InitializeFacetMap(MT900_13D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT900_13D_Type_Pattern', MT900_13D_Type_Pattern)
_module_typeBindings.MT900_13D_Type_Pattern = MT900_13D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT900_32A_Type_Pattern
class MT900_32A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT900_32A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 68, 1)
    _Documentation = None
MT900_32A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT900_32A_Type_Pattern._CF_pattern.addPattern(pattern='([0-9]{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})')
MT900_32A_Type_Pattern._InitializeFacetMap(MT900_32A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT900_32A_Type_Pattern', MT900_32A_Type_Pattern)
_module_typeBindings.MT900_32A_Type_Pattern = MT900_32A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT900_52A_Type_Pattern
class MT900_52A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT900_52A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 81, 1)
    _Documentation = None
MT900_52A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT900_52A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT900_52A_Type_Pattern._InitializeFacetMap(MT900_52A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT900_52A_Type_Pattern', MT900_52A_Type_Pattern)
_module_typeBindings.MT900_52A_Type_Pattern = MT900_52A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT900_52D_Type_Pattern
class MT900_52D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT900_52D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 94, 1)
    _Documentation = None
MT900_52D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT900_52D_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT900_52D_Type_Pattern._InitializeFacetMap(MT900_52D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT900_52D_Type_Pattern', MT900_52D_Type_Pattern)
_module_typeBindings.MT900_52D_Type_Pattern = MT900_52D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT900_72_Type_Pattern
class MT900_72_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT900_72_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 107, 1)
    _Documentation = None
MT900_72_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT900_72_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,6})")
MT900_72_Type_Pattern._InitializeFacetMap(MT900_72_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT900_72_Type_Pattern', MT900_72_Type_Pattern)
_module_typeBindings.MT900_72_Type_Pattern = MT900_72_Type_Pattern

# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 121, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}TransactionReferenceNumber uses Python identifier TransactionReferenceNumber
    __TransactionReferenceNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TransactionReferenceNumber'), 'TransactionReferenceNumber', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comTransactionReferenceNumber', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 123, 4), )

    
    TransactionReferenceNumber = property(__TransactionReferenceNumber.value, __TransactionReferenceNumber.set, None, None)

    
    # Element {http://www.w3schools.com}RelatedReference uses Python identifier RelatedReference
    __RelatedReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RelatedReference'), 'RelatedReference', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comRelatedReference', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 124, 4), )

    
    RelatedReference = property(__RelatedReference.value, __RelatedReference.set, None, None)

    
    # Element {http://www.w3schools.com}AccountIdentification uses Python identifier AccountIdentification
    __AccountIdentification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AccountIdentification'), 'AccountIdentification', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comAccountIdentification', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 126, 5), )

    
    AccountIdentification = property(__AccountIdentification.value, __AccountIdentification.set, None, None)

    
    # Element {http://www.w3schools.com}AccountIdentification_P uses Python identifier AccountIdentification_P
    __AccountIdentification_P = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AccountIdentification_P'), 'AccountIdentification_P', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comAccountIdentification_P', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 127, 5), )

    
    AccountIdentification_P = property(__AccountIdentification_P.value, __AccountIdentification_P.set, None, None)

    
    # Element {http://www.w3schools.com}DateTimeIndication uses Python identifier DateTimeIndication
    __DateTimeIndication = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DateTimeIndication'), 'DateTimeIndication', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comDateTimeIndication', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 129, 4), )

    
    DateTimeIndication = property(__DateTimeIndication.value, __DateTimeIndication.set, None, None)

    
    # Element {http://www.w3schools.com}ValueDateCurrencyCodeAmount uses Python identifier ValueDateCurrencyCodeAmount
    __ValueDateCurrencyCodeAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ValueDateCurrencyCodeAmount'), 'ValueDateCurrencyCodeAmount', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comValueDateCurrencyCodeAmount', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 130, 4), )

    
    ValueDateCurrencyCodeAmount = property(__ValueDateCurrencyCodeAmount.value, __ValueDateCurrencyCodeAmount.set, None, None)

    
    # Element {http://www.w3schools.com}OrderingInstitution_A uses Python identifier OrderingInstitution_A
    __OrderingInstitution_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OrderingInstitution_A'), 'OrderingInstitution_A', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comOrderingInstitution_A', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 132, 5), )

    
    OrderingInstitution_A = property(__OrderingInstitution_A.value, __OrderingInstitution_A.set, None, None)

    
    # Element {http://www.w3schools.com}OrderingInstitution_D uses Python identifier OrderingInstitution_D
    __OrderingInstitution_D = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OrderingInstitution_D'), 'OrderingInstitution_D', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comOrderingInstitution_D', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 133, 5), )

    
    OrderingInstitution_D = property(__OrderingInstitution_D.value, __OrderingInstitution_D.set, None, None)

    
    # Element {http://www.w3schools.com}SendertoReceiverInformation uses Python identifier SendertoReceiverInformation
    __SendertoReceiverInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SendertoReceiverInformation'), 'SendertoReceiverInformation', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comSendertoReceiverInformation', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 135, 4), )

    
    SendertoReceiverInformation = property(__SendertoReceiverInformation.value, __SendertoReceiverInformation.set, None, None)

    _ElementMap.update({
        __TransactionReferenceNumber.name() : __TransactionReferenceNumber,
        __RelatedReference.name() : __RelatedReference,
        __AccountIdentification.name() : __AccountIdentification,
        __AccountIdentification_P.name() : __AccountIdentification_P,
        __DateTimeIndication.name() : __DateTimeIndication,
        __ValueDateCurrencyCodeAmount.name() : __ValueDateCurrencyCodeAmount,
        __OrderingInstitution_A.name() : __OrderingInstitution_A,
        __OrderingInstitution_D.name() : __OrderingInstitution_D,
        __SendertoReceiverInformation.name() : __SendertoReceiverInformation
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON = CTD_ANON


# Complex type {http://www.w3schools.com}MT900_20_Type with content type SIMPLE
class MT900_20_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT900_20_Type with content type SIMPLE"""
    _TypeDefinition = MT900_20_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT900_20_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 8, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT900_20_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT900_20_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='20')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 11, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 11, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT900_20_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 12, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 12, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT900_20_Type = MT900_20_Type
Namespace.addCategoryObject('typeBinding', 'MT900_20_Type', MT900_20_Type)


# Complex type {http://www.w3schools.com}MT900_21_Type with content type SIMPLE
class MT900_21_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT900_21_Type with content type SIMPLE"""
    _TypeDefinition = MT900_21_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT900_21_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 21, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT900_21_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT900_21_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='21')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 24, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 24, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT900_21_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 25, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 25, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT900_21_Type = MT900_21_Type
Namespace.addCategoryObject('typeBinding', 'MT900_21_Type', MT900_21_Type)


# Complex type {http://www.w3schools.com}MT900_25_Type with content type SIMPLE
class MT900_25_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT900_25_Type with content type SIMPLE"""
    _TypeDefinition = MT900_25_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT900_25_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 34, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT900_25_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT900_25_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='25')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 37, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 37, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT900_25_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 38, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 38, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT900_25_Type = MT900_25_Type
Namespace.addCategoryObject('typeBinding', 'MT900_25_Type', MT900_25_Type)


# Complex type {http://www.w3schools.com}MT900_25P_Type with content type SIMPLE
class MT900_25P_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT900_25P_Type with content type SIMPLE"""
    _TypeDefinition = MT900_25P_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT900_25P_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 47, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT900_25P_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT900_25P_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='25P')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 50, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 50, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT900_25P_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 51, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 51, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT900_25P_Type = MT900_25P_Type
Namespace.addCategoryObject('typeBinding', 'MT900_25P_Type', MT900_25P_Type)


# Complex type {http://www.w3schools.com}MT900_13D_Type with content type SIMPLE
class MT900_13D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT900_13D_Type with content type SIMPLE"""
    _TypeDefinition = MT900_13D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT900_13D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 60, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT900_13D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT900_13D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='13D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 63, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 63, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT900_13D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 64, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 64, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT900_13D_Type = MT900_13D_Type
Namespace.addCategoryObject('typeBinding', 'MT900_13D_Type', MT900_13D_Type)


# Complex type {http://www.w3schools.com}MT900_32A_Type with content type SIMPLE
class MT900_32A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT900_32A_Type with content type SIMPLE"""
    _TypeDefinition = MT900_32A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT900_32A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 73, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT900_32A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT900_32A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='32A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 76, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 76, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT900_32A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 77, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 77, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT900_32A_Type = MT900_32A_Type
Namespace.addCategoryObject('typeBinding', 'MT900_32A_Type', MT900_32A_Type)


# Complex type {http://www.w3schools.com}MT900_52A_Type with content type SIMPLE
class MT900_52A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT900_52A_Type with content type SIMPLE"""
    _TypeDefinition = MT900_52A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT900_52A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 86, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT900_52A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT900_52A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='52A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 89, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 89, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT900_52A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 90, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 90, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT900_52A_Type = MT900_52A_Type
Namespace.addCategoryObject('typeBinding', 'MT900_52A_Type', MT900_52A_Type)


# Complex type {http://www.w3schools.com}MT900_52D_Type with content type SIMPLE
class MT900_52D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT900_52D_Type with content type SIMPLE"""
    _TypeDefinition = MT900_52D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT900_52D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 99, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT900_52D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT900_52D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='52D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 102, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 102, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT900_52D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 103, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 103, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT900_52D_Type = MT900_52D_Type
Namespace.addCategoryObject('typeBinding', 'MT900_52D_Type', MT900_52D_Type)


# Complex type {http://www.w3schools.com}MT900_72_Type with content type SIMPLE
class MT900_72_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT900_72_Type with content type SIMPLE"""
    _TypeDefinition = MT900_72_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT900_72_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 112, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT900_72_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT900_72_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='72')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 115, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 115, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT900_72_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 116, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 116, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT900_72_Type = MT900_72_Type
Namespace.addCategoryObject('typeBinding', 'MT900_72_Type', MT900_72_Type)


MT900 = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MT900'), CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 120, 1))
Namespace.addCategoryObject('elementBinding', MT900.name().localName(), MT900)



CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TransactionReferenceNumber'), MT900_20_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 123, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RelatedReference'), MT900_21_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 124, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AccountIdentification'), MT900_25_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 126, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AccountIdentification_P'), MT900_25P_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 127, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DateTimeIndication'), MT900_13D_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 129, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ValueDateCurrencyCodeAmount'), MT900_32A_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 130, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OrderingInstitution_A'), MT900_52A_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 132, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OrderingInstitution_D'), MT900_52D_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 133, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SendertoReceiverInformation'), MT900_72_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 135, 4)))

def _BuildAutomaton ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton
    del _BuildAutomaton
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 129, 4))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 131, 4))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 132, 5))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 133, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 135, 4))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TransactionReferenceNumber')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 123, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RelatedReference')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 124, 4))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AccountIdentification')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 126, 5))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AccountIdentification_P')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 127, 5))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DateTimeIndication')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 129, 4))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ValueDateCurrencyCodeAmount')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 130, 4))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OrderingInstitution_A')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 132, 5))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OrderingInstitution_D')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 133, 5))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SendertoReceiverInformation')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT900.xsd', 135, 4))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON._Automaton = _BuildAutomaton()



...

  MT910
# C:\Projects\XSD\MT910.py
# -*- coding: utf-8 -*-
# PyXB bindings for NM:96afad3d20bbfe8d040a1a097fa388d9fecd10e3
# Generated 2021-03-26 11:26:01.868181 by PyXB version 1.2.6 using Python 3.7.4.final.0
# Namespace http://www.w3schools.com

from __future__ import unicode_literals
import pyxb
import pyxb.binding
import pyxb.binding.saxer
import io
import pyxb.utils.utility
import pyxb.utils.domutils
import sys
import pyxb.utils.six as _six
# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:f1c94cf6-8df7-11eb-a8bb-3448ed42967c')

# Version of PyXB used to generate the bindings
_PyXBVersion = '1.2.6'
# Generated bindings are not compatible across PyXB versions
if pyxb.__version__ != _PyXBVersion:
    raise pyxb.PyXBVersionError(_PyXBVersion)

# A holder for module-level binding classes so we can access them from
# inside class definitions where property names may conflict.
_module_typeBindings = pyxb.utils.utility.Object()

# Import bindings for namespaces imported into schema
import pyxb.binding.datatypes

# NOTE: All namespace declarations are reserved within the binding
Namespace = pyxb.namespace.NamespaceForURI('http://www.w3schools.com', create_if_missing=True)
Namespace.configureCategories(['typeBinding', 'elementBinding'])

def CreateFromDocument (xml_text, default_namespace=None, location_base=None):
    """Parse the given XML and use the document element to create a
    Python instance.

    @param xml_text An XML document.  This should be data (Python 2
    str or Python 3 bytes), or a text (Python 2 unicode or Python 3
    str) in the L{pyxb._InputEncoding} encoding.

    @keyword default_namespace The L{pyxb.Namespace} instance to use as the
    default namespace where there is no default namespace in scope.
    If unspecified or C{None}, the namespace of the module containing
    this function will be used.

    @keyword location_base: An object to be recorded as the base of all
    L{pyxb.utils.utility.Location} instances associated with events and
    objects handled by the parser.  You might pass the URI from which
    the document was obtained.
    """

    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement, default_namespace=default_namespace)
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    saxer = pyxb.binding.saxer.make_parser(fallback_namespace=default_namespace, location_base=location_base)
    handler = saxer.getContentHandler()
    xmld = xml_text
    if isinstance(xmld, _six.text_type):
        xmld = xmld.encode(pyxb._InputEncoding)
    saxer.parse(io.BytesIO(xmld))
    instance = handler.rootObject()
    return instance

def CreateFromDOM (node, default_namespace=None):
    """Create a Python instance from the given DOM node.
    The node tag must correspond to an element declaration in this module.

    @deprecated: Forcing use of DOM interface is unnecessary; use L{CreateFromDocument}."""
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return pyxb.binding.basis.element.AnyCreateFromDOM(node, default_namespace)


# Atomic simple type: {http://www.w3schools.com}MT910_20_Type_Pattern
class MT910_20_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT910_20_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 3, 1)
    _Documentation = None
MT910_20_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT910_20_Type_Pattern._CF_pattern.addPattern(pattern="([^/]([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,14}[^/])")
MT910_20_Type_Pattern._InitializeFacetMap(MT910_20_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT910_20_Type_Pattern', MT910_20_Type_Pattern)
_module_typeBindings.MT910_20_Type_Pattern = MT910_20_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT910_21_Type_Pattern
class MT910_21_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT910_21_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 16, 1)
    _Documentation = None
MT910_21_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT910_21_Type_Pattern._CF_pattern.addPattern(pattern="([^/]([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,14}[^/])")
MT910_21_Type_Pattern._InitializeFacetMap(MT910_21_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT910_21_Type_Pattern', MT910_21_Type_Pattern)
_module_typeBindings.MT910_21_Type_Pattern = MT910_21_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT910_25_Type_Pattern
class MT910_25_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT910_25_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 29, 1)
    _Documentation = None
MT910_25_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT910_25_Type_Pattern._CF_pattern.addPattern(pattern="(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35})")
MT910_25_Type_Pattern._InitializeFacetMap(MT910_25_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT910_25_Type_Pattern', MT910_25_Type_Pattern)
_module_typeBindings.MT910_25_Type_Pattern = MT910_25_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT910_25P_Type_Pattern
class MT910_25P_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT910_25P_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 42, 1)
    _Documentation = None
MT910_25P_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT910_25P_Type_Pattern._CF_pattern.addPattern(pattern="(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT910_25P_Type_Pattern._InitializeFacetMap(MT910_25P_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT910_25P_Type_Pattern', MT910_25P_Type_Pattern)
_module_typeBindings.MT910_25P_Type_Pattern = MT910_25P_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT910_13D_Type_Pattern
class MT910_13D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT910_13D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 55, 1)
    _Documentation = None
MT910_13D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT910_13D_Type_Pattern._CF_pattern.addPattern(pattern='([0-9]{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(0[0-9]|[1][0-9]|2[0-3])([0-5][0-9])([+]|[-])(0[0-9]|[1][0-9]|2[0-3])([0-5][0-9]))')
MT910_13D_Type_Pattern._InitializeFacetMap(MT910_13D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT910_13D_Type_Pattern', MT910_13D_Type_Pattern)
_module_typeBindings.MT910_13D_Type_Pattern = MT910_13D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT910_32A_Type_Pattern
class MT910_32A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT910_32A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 68, 1)
    _Documentation = None
MT910_32A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT910_32A_Type_Pattern._CF_pattern.addPattern(pattern='([0-9]{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})')
MT910_32A_Type_Pattern._InitializeFacetMap(MT910_32A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT910_32A_Type_Pattern', MT910_32A_Type_Pattern)
_module_typeBindings.MT910_32A_Type_Pattern = MT910_32A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT910_50A_Type_Pattern
class MT910_50A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT910_50A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 81, 1)
    _Documentation = None
MT910_50A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT910_50A_Type_Pattern._CF_pattern.addPattern(pattern="((/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT910_50A_Type_Pattern._InitializeFacetMap(MT910_50A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT910_50A_Type_Pattern', MT910_50A_Type_Pattern)
_module_typeBindings.MT910_50A_Type_Pattern = MT910_50A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT910_50F_Type_Pattern
class MT910_50F_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT910_50F_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 94, 1)
    _Documentation = None
MT910_50F_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT910_50F_Type_Pattern._CF_pattern.addPattern(pattern="(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT910_50F_Type_Pattern._InitializeFacetMap(MT910_50F_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT910_50F_Type_Pattern', MT910_50F_Type_Pattern)
_module_typeBindings.MT910_50F_Type_Pattern = MT910_50F_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT910_50K_Type_Pattern
class MT910_50K_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT910_50K_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 107, 1)
    _Documentation = None
MT910_50K_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT910_50K_Type_Pattern._CF_pattern.addPattern(pattern="((/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT910_50K_Type_Pattern._InitializeFacetMap(MT910_50K_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT910_50K_Type_Pattern', MT910_50K_Type_Pattern)
_module_typeBindings.MT910_50K_Type_Pattern = MT910_50K_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT910_52A_Type_Pattern
class MT910_52A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT910_52A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 120, 1)
    _Documentation = None
MT910_52A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT910_52A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT910_52A_Type_Pattern._InitializeFacetMap(MT910_52A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT910_52A_Type_Pattern', MT910_52A_Type_Pattern)
_module_typeBindings.MT910_52A_Type_Pattern = MT910_52A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT910_52D_Type_Pattern
class MT910_52D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT910_52D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 133, 1)
    _Documentation = None
MT910_52D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT910_52D_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT910_52D_Type_Pattern._InitializeFacetMap(MT910_52D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT910_52D_Type_Pattern', MT910_52D_Type_Pattern)
_module_typeBindings.MT910_52D_Type_Pattern = MT910_52D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT910_56A_Type_Pattern
class MT910_56A_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT910_56A_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 146, 1)
    _Documentation = None
MT910_56A_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT910_56A_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT910_56A_Type_Pattern._InitializeFacetMap(MT910_56A_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT910_56A_Type_Pattern', MT910_56A_Type_Pattern)
_module_typeBindings.MT910_56A_Type_Pattern = MT910_56A_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT910_56D_Type_Pattern
class MT910_56D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT910_56D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 159, 1)
    _Documentation = None
MT910_56D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT910_56D_Type_Pattern._CF_pattern.addPattern(pattern="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,4})")
MT910_56D_Type_Pattern._InitializeFacetMap(MT910_56D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT910_56D_Type_Pattern', MT910_56D_Type_Pattern)
_module_typeBindings.MT910_56D_Type_Pattern = MT910_56D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT910_72_Type_Pattern
class MT910_72_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT910_72_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 172, 1)
    _Documentation = None
MT910_72_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT910_72_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n?){1,6})")
MT910_72_Type_Pattern._InitializeFacetMap(MT910_72_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT910_72_Type_Pattern', MT910_72_Type_Pattern)
_module_typeBindings.MT910_72_Type_Pattern = MT910_72_Type_Pattern

# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 186, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}TransactionReferenceNumber uses Python identifier TransactionReferenceNumber
    __TransactionReferenceNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TransactionReferenceNumber'), 'TransactionReferenceNumber', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comTransactionReferenceNumber', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 188, 4), )

    
    TransactionReferenceNumber = property(__TransactionReferenceNumber.value, __TransactionReferenceNumber.set, None, None)

    
    # Element {http://www.w3schools.com}RelatedReference uses Python identifier RelatedReference
    __RelatedReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RelatedReference'), 'RelatedReference', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comRelatedReference', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 189, 4), )

    
    RelatedReference = property(__RelatedReference.value, __RelatedReference.set, None, None)

    
    # Element {http://www.w3schools.com}AccountIdentification uses Python identifier AccountIdentification
    __AccountIdentification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AccountIdentification'), 'AccountIdentification', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comAccountIdentification', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 191, 5), )

    
    AccountIdentification = property(__AccountIdentification.value, __AccountIdentification.set, None, None)

    
    # Element {http://www.w3schools.com}AccountIdentification_P uses Python identifier AccountIdentification_P
    __AccountIdentification_P = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AccountIdentification_P'), 'AccountIdentification_P', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comAccountIdentification_P', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 192, 5), )

    
    AccountIdentification_P = property(__AccountIdentification_P.value, __AccountIdentification_P.set, None, None)

    
    # Element {http://www.w3schools.com}DateTimeIndication uses Python identifier DateTimeIndication
    __DateTimeIndication = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DateTimeIndication'), 'DateTimeIndication', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comDateTimeIndication', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 194, 4), )

    
    DateTimeIndication = property(__DateTimeIndication.value, __DateTimeIndication.set, None, None)

    
    # Element {http://www.w3schools.com}ValueDateCurrencyCodeAmount uses Python identifier ValueDateCurrencyCodeAmount
    __ValueDateCurrencyCodeAmount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ValueDateCurrencyCodeAmount'), 'ValueDateCurrencyCodeAmount', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comValueDateCurrencyCodeAmount', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 195, 4), )

    
    ValueDateCurrencyCodeAmount = property(__ValueDateCurrencyCodeAmount.value, __ValueDateCurrencyCodeAmount.set, None, None)

    
    # Element {http://www.w3schools.com}OrderingCustomer_A uses Python identifier OrderingCustomer_A
    __OrderingCustomer_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OrderingCustomer_A'), 'OrderingCustomer_A', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comOrderingCustomer_A', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 197, 5), )

    
    OrderingCustomer_A = property(__OrderingCustomer_A.value, __OrderingCustomer_A.set, None, None)

    
    # Element {http://www.w3schools.com}OrderingCustomer_F uses Python identifier OrderingCustomer_F
    __OrderingCustomer_F = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OrderingCustomer_F'), 'OrderingCustomer_F', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comOrderingCustomer_F', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 198, 5), )

    
    OrderingCustomer_F = property(__OrderingCustomer_F.value, __OrderingCustomer_F.set, None, None)

    
    # Element {http://www.w3schools.com}OrderingCustomer_K uses Python identifier OrderingCustomer_K
    __OrderingCustomer_K = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OrderingCustomer_K'), 'OrderingCustomer_K', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comOrderingCustomer_K', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 199, 5), )

    
    OrderingCustomer_K = property(__OrderingCustomer_K.value, __OrderingCustomer_K.set, None, None)

    
    # Element {http://www.w3schools.com}OrderingInstitution_A uses Python identifier OrderingInstitution_A
    __OrderingInstitution_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OrderingInstitution_A'), 'OrderingInstitution_A', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comOrderingInstitution_A', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 202, 5), )

    
    OrderingInstitution_A = property(__OrderingInstitution_A.value, __OrderingInstitution_A.set, None, None)

    
    # Element {http://www.w3schools.com}OrderingInstitution_D uses Python identifier OrderingInstitution_D
    __OrderingInstitution_D = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OrderingInstitution_D'), 'OrderingInstitution_D', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comOrderingInstitution_D', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 203, 5), )

    
    OrderingInstitution_D = property(__OrderingInstitution_D.value, __OrderingInstitution_D.set, None, None)

    
    # Element {http://www.w3schools.com}Intermediary_A uses Python identifier Intermediary_A
    __Intermediary_A = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_A'), 'Intermediary_A', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comIntermediary_A', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 206, 5), )

    
    Intermediary_A = property(__Intermediary_A.value, __Intermediary_A.set, None, None)

    
    # Element {http://www.w3schools.com}Intermediary_D uses Python identifier Intermediary_D
    __Intermediary_D = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_D'), 'Intermediary_D', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comIntermediary_D', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 207, 5), )

    
    Intermediary_D = property(__Intermediary_D.value, __Intermediary_D.set, None, None)

    
    # Element {http://www.w3schools.com}SendertoReceiverInformation uses Python identifier SendertoReceiverInformation
    __SendertoReceiverInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SendertoReceiverInformation'), 'SendertoReceiverInformation', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comSendertoReceiverInformation', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 209, 4), )

    
    SendertoReceiverInformation = property(__SendertoReceiverInformation.value, __SendertoReceiverInformation.set, None, None)

    _ElementMap.update({
        __TransactionReferenceNumber.name() : __TransactionReferenceNumber,
        __RelatedReference.name() : __RelatedReference,
        __AccountIdentification.name() : __AccountIdentification,
        __AccountIdentification_P.name() : __AccountIdentification_P,
        __DateTimeIndication.name() : __DateTimeIndication,
        __ValueDateCurrencyCodeAmount.name() : __ValueDateCurrencyCodeAmount,
        __OrderingCustomer_A.name() : __OrderingCustomer_A,
        __OrderingCustomer_F.name() : __OrderingCustomer_F,
        __OrderingCustomer_K.name() : __OrderingCustomer_K,
        __OrderingInstitution_A.name() : __OrderingInstitution_A,
        __OrderingInstitution_D.name() : __OrderingInstitution_D,
        __Intermediary_A.name() : __Intermediary_A,
        __Intermediary_D.name() : __Intermediary_D,
        __SendertoReceiverInformation.name() : __SendertoReceiverInformation
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON = CTD_ANON


# Complex type {http://www.w3schools.com}MT910_20_Type with content type SIMPLE
class MT910_20_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT910_20_Type with content type SIMPLE"""
    _TypeDefinition = MT910_20_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT910_20_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 8, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT910_20_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT910_20_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='20')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 11, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 11, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT910_20_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 12, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 12, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT910_20_Type = MT910_20_Type
Namespace.addCategoryObject('typeBinding', 'MT910_20_Type', MT910_20_Type)


# Complex type {http://www.w3schools.com}MT910_21_Type with content type SIMPLE
class MT910_21_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT910_21_Type with content type SIMPLE"""
    _TypeDefinition = MT910_21_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT910_21_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 21, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT910_21_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT910_21_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='21')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 24, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 24, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT910_21_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 25, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 25, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT910_21_Type = MT910_21_Type
Namespace.addCategoryObject('typeBinding', 'MT910_21_Type', MT910_21_Type)


# Complex type {http://www.w3schools.com}MT910_25_Type with content type SIMPLE
class MT910_25_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT910_25_Type with content type SIMPLE"""
    _TypeDefinition = MT910_25_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT910_25_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 34, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT910_25_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT910_25_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='25')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 37, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 37, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT910_25_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 38, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 38, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT910_25_Type = MT910_25_Type
Namespace.addCategoryObject('typeBinding', 'MT910_25_Type', MT910_25_Type)


# Complex type {http://www.w3schools.com}MT910_25P_Type with content type SIMPLE
class MT910_25P_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT910_25P_Type with content type SIMPLE"""
    _TypeDefinition = MT910_25P_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT910_25P_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 47, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT910_25P_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT910_25P_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='25P')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 50, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 50, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT910_25P_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 51, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 51, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT910_25P_Type = MT910_25P_Type
Namespace.addCategoryObject('typeBinding', 'MT910_25P_Type', MT910_25P_Type)


# Complex type {http://www.w3schools.com}MT910_13D_Type with content type SIMPLE
class MT910_13D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT910_13D_Type with content type SIMPLE"""
    _TypeDefinition = MT910_13D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT910_13D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 60, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT910_13D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT910_13D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='13D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 63, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 63, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT910_13D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 64, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 64, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT910_13D_Type = MT910_13D_Type
Namespace.addCategoryObject('typeBinding', 'MT910_13D_Type', MT910_13D_Type)


# Complex type {http://www.w3schools.com}MT910_32A_Type with content type SIMPLE
class MT910_32A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT910_32A_Type with content type SIMPLE"""
    _TypeDefinition = MT910_32A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT910_32A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 73, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT910_32A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT910_32A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='32A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 76, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 76, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT910_32A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 77, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 77, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT910_32A_Type = MT910_32A_Type
Namespace.addCategoryObject('typeBinding', 'MT910_32A_Type', MT910_32A_Type)


# Complex type {http://www.w3schools.com}MT910_50A_Type with content type SIMPLE
class MT910_50A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT910_50A_Type with content type SIMPLE"""
    _TypeDefinition = MT910_50A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT910_50A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 86, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT910_50A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT910_50A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='50A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 89, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 89, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT910_50A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 90, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 90, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT910_50A_Type = MT910_50A_Type
Namespace.addCategoryObject('typeBinding', 'MT910_50A_Type', MT910_50A_Type)


# Complex type {http://www.w3schools.com}MT910_50F_Type with content type SIMPLE
class MT910_50F_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT910_50F_Type with content type SIMPLE"""
    _TypeDefinition = MT910_50F_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT910_50F_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 99, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT910_50F_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT910_50F_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='50F')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 102, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 102, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT910_50F_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 103, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 103, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT910_50F_Type = MT910_50F_Type
Namespace.addCategoryObject('typeBinding', 'MT910_50F_Type', MT910_50F_Type)


# Complex type {http://www.w3schools.com}MT910_50K_Type with content type SIMPLE
class MT910_50K_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT910_50K_Type with content type SIMPLE"""
    _TypeDefinition = MT910_50K_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT910_50K_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 112, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT910_50K_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT910_50K_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='50K')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 115, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 115, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT910_50K_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 116, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 116, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT910_50K_Type = MT910_50K_Type
Namespace.addCategoryObject('typeBinding', 'MT910_50K_Type', MT910_50K_Type)


# Complex type {http://www.w3schools.com}MT910_52A_Type with content type SIMPLE
class MT910_52A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT910_52A_Type with content type SIMPLE"""
    _TypeDefinition = MT910_52A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT910_52A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 125, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT910_52A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT910_52A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='52A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 128, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 128, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT910_52A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 129, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 129, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT910_52A_Type = MT910_52A_Type
Namespace.addCategoryObject('typeBinding', 'MT910_52A_Type', MT910_52A_Type)


# Complex type {http://www.w3schools.com}MT910_52D_Type with content type SIMPLE
class MT910_52D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT910_52D_Type with content type SIMPLE"""
    _TypeDefinition = MT910_52D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT910_52D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 138, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT910_52D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT910_52D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='52D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 141, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 141, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT910_52D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 142, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 142, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT910_52D_Type = MT910_52D_Type
Namespace.addCategoryObject('typeBinding', 'MT910_52D_Type', MT910_52D_Type)


# Complex type {http://www.w3schools.com}MT910_56A_Type with content type SIMPLE
class MT910_56A_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT910_56A_Type with content type SIMPLE"""
    _TypeDefinition = MT910_56A_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT910_56A_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 151, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT910_56A_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT910_56A_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='56A')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 154, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 154, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT910_56A_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 155, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 155, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT910_56A_Type = MT910_56A_Type
Namespace.addCategoryObject('typeBinding', 'MT910_56A_Type', MT910_56A_Type)


# Complex type {http://www.w3schools.com}MT910_56D_Type with content type SIMPLE
class MT910_56D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT910_56D_Type with content type SIMPLE"""
    _TypeDefinition = MT910_56D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT910_56D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 164, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT910_56D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT910_56D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='56D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 167, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 167, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT910_56D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 168, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 168, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT910_56D_Type = MT910_56D_Type
Namespace.addCategoryObject('typeBinding', 'MT910_56D_Type', MT910_56D_Type)


# Complex type {http://www.w3schools.com}MT910_72_Type with content type SIMPLE
class MT910_72_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT910_72_Type with content type SIMPLE"""
    _TypeDefinition = MT910_72_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT910_72_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 177, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT910_72_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT910_72_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='72')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 180, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 180, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT910_72_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 181, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 181, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT910_72_Type = MT910_72_Type
Namespace.addCategoryObject('typeBinding', 'MT910_72_Type', MT910_72_Type)


MT910 = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MT910'), CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 185, 1))
Namespace.addCategoryObject('elementBinding', MT910.name().localName(), MT910)



CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TransactionReferenceNumber'), MT910_20_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 188, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RelatedReference'), MT910_21_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 189, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AccountIdentification'), MT910_25_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 191, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AccountIdentification_P'), MT910_25P_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 192, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DateTimeIndication'), MT910_13D_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 194, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ValueDateCurrencyCodeAmount'), MT910_32A_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 195, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OrderingCustomer_A'), MT910_50A_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 197, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OrderingCustomer_F'), MT910_50F_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 198, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OrderingCustomer_K'), MT910_50K_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 199, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OrderingInstitution_A'), MT910_52A_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 202, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OrderingInstitution_D'), MT910_52D_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 203, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_A'), MT910_56A_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 206, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_D'), MT910_56D_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 207, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SendertoReceiverInformation'), MT910_72_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 209, 4)))

def _BuildAutomaton ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton
    del _BuildAutomaton
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 194, 4))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 196, 4))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 197, 5))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 198, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 199, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 201, 4))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 202, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 203, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 205, 4))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 206, 5))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 207, 5))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 209, 4))
    counters.add(cc_11)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TransactionReferenceNumber')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 188, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RelatedReference')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 189, 4))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AccountIdentification')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 191, 5))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AccountIdentification_P')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 192, 5))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DateTimeIndication')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 194, 4))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ValueDateCurrencyCodeAmount')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 195, 4))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OrderingCustomer_A')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 197, 5))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OrderingCustomer_F')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 198, 5))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OrderingCustomer_K')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 199, 5))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OrderingInstitution_A')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 202, 5))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OrderingInstitution_D')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 203, 5))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_A')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 206, 5))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Intermediary_D')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 207, 5))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SendertoReceiverInformation')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT910.xsd', 209, 4))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_4, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False),
        fac.UpdateInstruction(cc_6, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False),
        fac.UpdateInstruction(cc_7, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, True),
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False),
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_13._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON._Automaton = _BuildAutomaton()



...

  MT940
# C:\Projects\Xsds\MT940.py
# -*- coding: utf-8 -*-
# PyXB bindings for NM:96afad3d20bbfe8d040a1a097fa388d9fecd10e3
# Generated 2020-01-23 16:13:49.638914 by PyXB version 1.2.6 using Python 3.7.4.final.0
# Namespace http://www.w3schools.com

from __future__ import unicode_literals
import pyxb
import pyxb.binding
import pyxb.binding.saxer
import io
import pyxb.utils.utility
import pyxb.utils.domutils
import sys
import pyxb.utils.six as _six
# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:3d607164-3dcd-11ea-afa8-509a4c321f2f')

# Version of PyXB used to generate the bindings
_PyXBVersion = '1.2.6'
# Generated bindings are not compatible across PyXB versions
if pyxb.__version__ != _PyXBVersion:
    raise pyxb.PyXBVersionError(_PyXBVersion)

# A holder for module-level binding classes so we can access them from
# inside class definitions where property names may conflict.
_module_typeBindings = pyxb.utils.utility.Object()

# Import bindings for namespaces imported into schema
import pyxb.binding.datatypes

# NOTE: All namespace declarations are reserved within the binding
Namespace = pyxb.namespace.NamespaceForURI('http://www.w3schools.com', create_if_missing=True)
Namespace.configureCategories(['typeBinding', 'elementBinding'])

def CreateFromDocument (xml_text, default_namespace=None, location_base=None):
    """Parse the given XML and use the document element to create a
    Python instance.

    @param xml_text An XML document.  This should be data (Python 2
    str or Python 3 bytes), or a text (Python 2 unicode or Python 3
    str) in the L{pyxb._InputEncoding} encoding.

    @keyword default_namespace The L{pyxb.Namespace} instance to use as the
    default namespace where there is no default namespace in scope.
    If unspecified or C{None}, the namespace of the module containing
    this function will be used.

    @keyword location_base: An object to be recorded as the base of all
    L{pyxb.utils.utility.Location} instances associated with events and
    objects handled by the parser.  You might pass the URI from which
    the document was obtained.
    """

    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement, default_namespace=default_namespace)
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    saxer = pyxb.binding.saxer.make_parser(fallback_namespace=default_namespace, location_base=location_base)
    handler = saxer.getContentHandler()
    xmld = xml_text
    if isinstance(xmld, _six.text_type):
        xmld = xmld.encode(pyxb._InputEncoding)
    saxer.parse(io.BytesIO(xmld))
    instance = handler.rootObject()
    return instance

def CreateFromDOM (node, default_namespace=None):
    """Create a Python instance from the given DOM node.
    The node tag must correspond to an element declaration in this module.

    @deprecated: Forcing use of DOM interface is unnecessary; use L{CreateFromDocument}."""
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return pyxb.binding.basis.element.AnyCreateFromDOM(node, default_namespace)


# Atomic simple type: {http://www.w3schools.com}MT940_20_Type_Pattern
class MT940_20_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT940_20_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 3, 1)
    _Documentation = None
MT940_20_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT940_20_Type_Pattern._CF_pattern.addPattern(pattern="([^/]([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,14}[^/])")
MT940_20_Type_Pattern._InitializeFacetMap(MT940_20_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT940_20_Type_Pattern', MT940_20_Type_Pattern)
_module_typeBindings.MT940_20_Type_Pattern = MT940_20_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT940_21_Type_Pattern
class MT940_21_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT940_21_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 16, 1)
    _Documentation = None
MT940_21_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT940_21_Type_Pattern._CF_pattern.addPattern(pattern="([^/]([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,14}[^/])")
MT940_21_Type_Pattern._InitializeFacetMap(MT940_21_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT940_21_Type_Pattern', MT940_21_Type_Pattern)
_module_typeBindings.MT940_21_Type_Pattern = MT940_21_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT940_25_Type_Pattern
class MT940_25_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT940_25_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 29, 1)
    _Documentation = None
MT940_25_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT940_25_Type_Pattern._CF_pattern.addPattern(pattern="(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35})")
MT940_25_Type_Pattern._InitializeFacetMap(MT940_25_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT940_25_Type_Pattern', MT940_25_Type_Pattern)
_module_typeBindings.MT940_25_Type_Pattern = MT940_25_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT940_25P_Type_Pattern
class MT940_25P_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT940_25P_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 42, 1)
    _Documentation = None
MT940_25P_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT940_25P_Type_Pattern._CF_pattern.addPattern(pattern="(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT940_25P_Type_Pattern._InitializeFacetMap(MT940_25P_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT940_25P_Type_Pattern', MT940_25P_Type_Pattern)
_module_typeBindings.MT940_25P_Type_Pattern = MT940_25P_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT940_28C_Type_Pattern
class MT940_28C_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT940_28C_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 55, 1)
    _Documentation = None
MT940_28C_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT940_28C_Type_Pattern._CF_pattern.addPattern(pattern='([0-9]{1,5}(/[0-9]{1,5})?)')
MT940_28C_Type_Pattern._InitializeFacetMap(MT940_28C_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT940_28C_Type_Pattern', MT940_28C_Type_Pattern)
_module_typeBindings.MT940_28C_Type_Pattern = MT940_28C_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT940_60F_Type_Pattern
class MT940_60F_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT940_60F_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 68, 1)
    _Documentation = None
MT940_60F_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT940_60F_Type_Pattern._CF_pattern.addPattern(pattern='((C|D)[0-9]{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})')
MT940_60F_Type_Pattern._InitializeFacetMap(MT940_60F_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT940_60F_Type_Pattern', MT940_60F_Type_Pattern)
_module_typeBindings.MT940_60F_Type_Pattern = MT940_60F_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT940_60M_Type_Pattern
class MT940_60M_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT940_60M_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 81, 1)
    _Documentation = None
MT940_60M_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT940_60M_Type_Pattern._CF_pattern.addPattern(pattern='((C|D)[0-9]{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})')
MT940_60M_Type_Pattern._InitializeFacetMap(MT940_60M_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT940_60M_Type_Pattern', MT940_60M_Type_Pattern)
_module_typeBindings.MT940_60M_Type_Pattern = MT940_60M_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT940_STATELINEDET_61_Type_Pattern
class MT940_STATELINEDET_61_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT940_STATELINEDET_61_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 94, 1)
    _Documentation = None
MT940_STATELINEDET_61_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT940_STATELINEDET_61_Type_Pattern._CF_pattern.addPattern(pattern="([0-9]{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])([0-9]{4})?(C|D|RC|RD)([A-Z]{1})?[0-9,(?0-9)]{1,15}(S|N|F)[A-Z0-9]{3}([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,16}(//([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,16})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?)")
MT940_STATELINEDET_61_Type_Pattern._InitializeFacetMap(MT940_STATELINEDET_61_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT940_STATELINEDET_61_Type_Pattern', MT940_STATELINEDET_61_Type_Pattern)
_module_typeBindings.MT940_STATELINEDET_61_Type_Pattern = MT940_STATELINEDET_61_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT940_STATELINEDET_86_Type_Pattern
class MT940_STATELINEDET_86_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT940_STATELINEDET_86_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 107, 1)
    _Documentation = None
MT940_STATELINEDET_86_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT940_STATELINEDET_86_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,65}\\n?){1,6})")
MT940_STATELINEDET_86_Type_Pattern._InitializeFacetMap(MT940_STATELINEDET_86_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT940_STATELINEDET_86_Type_Pattern', MT940_STATELINEDET_86_Type_Pattern)
_module_typeBindings.MT940_STATELINEDET_86_Type_Pattern = MT940_STATELINEDET_86_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT940_62F_Type_Pattern
class MT940_62F_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT940_62F_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 120, 1)
    _Documentation = None
MT940_62F_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT940_62F_Type_Pattern._CF_pattern.addPattern(pattern='((C|D)[0-9]{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})')
MT940_62F_Type_Pattern._InitializeFacetMap(MT940_62F_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT940_62F_Type_Pattern', MT940_62F_Type_Pattern)
_module_typeBindings.MT940_62F_Type_Pattern = MT940_62F_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT940_62M_Type_Pattern
class MT940_62M_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT940_62M_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 133, 1)
    _Documentation = None
MT940_62M_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT940_62M_Type_Pattern._CF_pattern.addPattern(pattern='((C|D)[0-9]{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})')
MT940_62M_Type_Pattern._InitializeFacetMap(MT940_62M_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT940_62M_Type_Pattern', MT940_62M_Type_Pattern)
_module_typeBindings.MT940_62M_Type_Pattern = MT940_62M_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT940_64_Type_Pattern
class MT940_64_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT940_64_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 146, 1)
    _Documentation = None
MT940_64_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT940_64_Type_Pattern._CF_pattern.addPattern(pattern='((C|D)[0-9]{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})')
MT940_64_Type_Pattern._InitializeFacetMap(MT940_64_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT940_64_Type_Pattern', MT940_64_Type_Pattern)
_module_typeBindings.MT940_64_Type_Pattern = MT940_64_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT940_65_Type_Pattern
class MT940_65_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT940_65_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 159, 1)
    _Documentation = None
MT940_65_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT940_65_Type_Pattern._CF_pattern.addPattern(pattern='((C|D)[0-9]{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})')
MT940_65_Type_Pattern._InitializeFacetMap(MT940_65_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT940_65_Type_Pattern', MT940_65_Type_Pattern)
_module_typeBindings.MT940_65_Type_Pattern = MT940_65_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT940_86_Type_Pattern
class MT940_86_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT940_86_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 172, 1)
    _Documentation = None
MT940_86_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT940_86_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,65}\\n?){1,6})")
MT940_86_Type_Pattern._InitializeFacetMap(MT940_86_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT940_86_Type_Pattern', MT940_86_Type_Pattern)
_module_typeBindings.MT940_86_Type_Pattern = MT940_86_Type_Pattern

# Complex type {http://www.w3schools.com}MT940_STATELINEDET with content type ELEMENT_ONLY
class MT940_STATELINEDET (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT940_STATELINEDET with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT940_STATELINEDET')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 185, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}StatementLine uses Python identifier StatementLine
    __StatementLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'StatementLine'), 'StatementLine', '__httpwww_w3schools_com_MT940_STATELINEDET_httpwww_w3schools_comStatementLine', False, pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 187, 3), )

    
    StatementLine = property(__StatementLine.value, __StatementLine.set, None, None)

    
    # Element {http://www.w3schools.com}InformationtoAccountOwner uses Python identifier InformationtoAccountOwner
    __InformationtoAccountOwner = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InformationtoAccountOwner'), 'InformationtoAccountOwner', '__httpwww_w3schools_com_MT940_STATELINEDET_httpwww_w3schools_comInformationtoAccountOwner', False, pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 188, 3), )

    
    InformationtoAccountOwner = property(__InformationtoAccountOwner.value, __InformationtoAccountOwner.set, None, None)

    _ElementMap.update({
        __StatementLine.name() : __StatementLine,
        __InformationtoAccountOwner.name() : __InformationtoAccountOwner
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.MT940_STATELINEDET = MT940_STATELINEDET
Namespace.addCategoryObject('typeBinding', 'MT940_STATELINEDET', MT940_STATELINEDET)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 192, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}TransactionReferenceNumber uses Python identifier TransactionReferenceNumber
    __TransactionReferenceNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TransactionReferenceNumber'), 'TransactionReferenceNumber', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comTransactionReferenceNumber', False, pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 194, 4), )

    
    TransactionReferenceNumber = property(__TransactionReferenceNumber.value, __TransactionReferenceNumber.set, None, None)

    
    # Element {http://www.w3schools.com}RelatedReference uses Python identifier RelatedReference
    __RelatedReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RelatedReference'), 'RelatedReference', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comRelatedReference', False, pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 195, 4), )

    
    RelatedReference = property(__RelatedReference.value, __RelatedReference.set, None, None)

    
    # Element {http://www.w3schools.com}AccountIdentification uses Python identifier AccountIdentification
    __AccountIdentification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AccountIdentification'), 'AccountIdentification', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comAccountIdentification', False, pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 197, 5), )

    
    AccountIdentification = property(__AccountIdentification.value, __AccountIdentification.set, None, None)

    
    # Element {http://www.w3schools.com}AccountIdentification_P uses Python identifier AccountIdentification_P
    __AccountIdentification_P = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AccountIdentification_P'), 'AccountIdentification_P', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comAccountIdentification_P', False, pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 198, 5), )

    
    AccountIdentification_P = property(__AccountIdentification_P.value, __AccountIdentification_P.set, None, None)

    
    # Element {http://www.w3schools.com}StatementNumberSequenceNumber uses Python identifier StatementNumberSequenceNumber
    __StatementNumberSequenceNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'StatementNumberSequenceNumber'), 'StatementNumberSequenceNumber', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comStatementNumberSequenceNumber', False, pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 200, 4), )

    
    StatementNumberSequenceNumber = property(__StatementNumberSequenceNumber.value, __StatementNumberSequenceNumber.set, None, None)

    
    # Element {http://www.w3schools.com}OpeningBalance_F uses Python identifier OpeningBalance_F
    __OpeningBalance_F = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OpeningBalance_F'), 'OpeningBalance_F', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comOpeningBalance_F', False, pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 202, 5), )

    
    OpeningBalance_F = property(__OpeningBalance_F.value, __OpeningBalance_F.set, None, None)

    
    # Element {http://www.w3schools.com}OpeningBalance_M uses Python identifier OpeningBalance_M
    __OpeningBalance_M = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OpeningBalance_M'), 'OpeningBalance_M', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comOpeningBalance_M', False, pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 203, 5), )

    
    OpeningBalance_M = property(__OpeningBalance_M.value, __OpeningBalance_M.set, None, None)

    
    # Element {http://www.w3schools.com}STATELINEDET uses Python identifier STATELINEDET
    __STATELINEDET = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'STATELINEDET'), 'STATELINEDET', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comSTATELINEDET', True, pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 205, 4), )

    
    STATELINEDET = property(__STATELINEDET.value, __STATELINEDET.set, None, None)

    
    # Element {http://www.w3schools.com}ClosingBalanceBookedFunds_F uses Python identifier ClosingBalanceBookedFunds_F
    __ClosingBalanceBookedFunds_F = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ClosingBalanceBookedFunds_F'), 'ClosingBalanceBookedFunds_F', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comClosingBalanceBookedFunds_F', False, pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 207, 5), )

    
    ClosingBalanceBookedFunds_F = property(__ClosingBalanceBookedFunds_F.value, __ClosingBalanceBookedFunds_F.set, None, None)

    
    # Element {http://www.w3schools.com}ClosingBalanceBookedFunds_M uses Python identifier ClosingBalanceBookedFunds_M
    __ClosingBalanceBookedFunds_M = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ClosingBalanceBookedFunds_M'), 'ClosingBalanceBookedFunds_M', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comClosingBalanceBookedFunds_M', False, pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 208, 5), )

    
    ClosingBalanceBookedFunds_M = property(__ClosingBalanceBookedFunds_M.value, __ClosingBalanceBookedFunds_M.set, None, None)

    
    # Element {http://www.w3schools.com}ClosingAvailableBalanceAvailableFunds uses Python identifier ClosingAvailableBalanceAvailableFunds
    __ClosingAvailableBalanceAvailableFunds = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ClosingAvailableBalanceAvailableFunds'), 'ClosingAvailableBalanceAvailableFunds', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comClosingAvailableBalanceAvailableFunds', False, pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 210, 4), )

    
    ClosingAvailableBalanceAvailableFunds = property(__ClosingAvailableBalanceAvailableFunds.value, __ClosingAvailableBalanceAvailableFunds.set, None, None)

    
    # Element {http://www.w3schools.com}ForwardAvailableBalance uses Python identifier ForwardAvailableBalance
    __ForwardAvailableBalance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ForwardAvailableBalance'), 'ForwardAvailableBalance', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comForwardAvailableBalance', True, pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 211, 4), )

    
    ForwardAvailableBalance = property(__ForwardAvailableBalance.value, __ForwardAvailableBalance.set, None, None)

    
    # Element {http://www.w3schools.com}InformationtoAccountOwner uses Python identifier InformationtoAccountOwner
    __InformationtoAccountOwner = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InformationtoAccountOwner'), 'InformationtoAccountOwner', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comInformationtoAccountOwner', False, pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 212, 4), )

    
    InformationtoAccountOwner = property(__InformationtoAccountOwner.value, __InformationtoAccountOwner.set, None, None)

    _ElementMap.update({
        __TransactionReferenceNumber.name() : __TransactionReferenceNumber,
        __RelatedReference.name() : __RelatedReference,
        __AccountIdentification.name() : __AccountIdentification,
        __AccountIdentification_P.name() : __AccountIdentification_P,
        __StatementNumberSequenceNumber.name() : __StatementNumberSequenceNumber,
        __OpeningBalance_F.name() : __OpeningBalance_F,
        __OpeningBalance_M.name() : __OpeningBalance_M,
        __STATELINEDET.name() : __STATELINEDET,
        __ClosingBalanceBookedFunds_F.name() : __ClosingBalanceBookedFunds_F,
        __ClosingBalanceBookedFunds_M.name() : __ClosingBalanceBookedFunds_M,
        __ClosingAvailableBalanceAvailableFunds.name() : __ClosingAvailableBalanceAvailableFunds,
        __ForwardAvailableBalance.name() : __ForwardAvailableBalance,
        __InformationtoAccountOwner.name() : __InformationtoAccountOwner
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON = CTD_ANON


# Complex type {http://www.w3schools.com}MT940_20_Type with content type SIMPLE
class MT940_20_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT940_20_Type with content type SIMPLE"""
    _TypeDefinition = MT940_20_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT940_20_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 8, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT940_20_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT940_20_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='20')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 11, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 11, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT940_20_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 12, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 12, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT940_20_Type = MT940_20_Type
Namespace.addCategoryObject('typeBinding', 'MT940_20_Type', MT940_20_Type)


# Complex type {http://www.w3schools.com}MT940_21_Type with content type SIMPLE
class MT940_21_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT940_21_Type with content type SIMPLE"""
    _TypeDefinition = MT940_21_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT940_21_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 21, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT940_21_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT940_21_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='21')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 24, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 24, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT940_21_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 25, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 25, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT940_21_Type = MT940_21_Type
Namespace.addCategoryObject('typeBinding', 'MT940_21_Type', MT940_21_Type)


# Complex type {http://www.w3schools.com}MT940_25_Type with content type SIMPLE
class MT940_25_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT940_25_Type with content type SIMPLE"""
    _TypeDefinition = MT940_25_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT940_25_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 34, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT940_25_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT940_25_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='25')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 37, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 37, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT940_25_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 38, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 38, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT940_25_Type = MT940_25_Type
Namespace.addCategoryObject('typeBinding', 'MT940_25_Type', MT940_25_Type)


# Complex type {http://www.w3schools.com}MT940_25P_Type with content type SIMPLE
class MT940_25P_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT940_25P_Type with content type SIMPLE"""
    _TypeDefinition = MT940_25P_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT940_25P_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 47, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT940_25P_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT940_25P_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='25P')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 50, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 50, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT940_25P_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 51, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 51, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT940_25P_Type = MT940_25P_Type
Namespace.addCategoryObject('typeBinding', 'MT940_25P_Type', MT940_25P_Type)


# Complex type {http://www.w3schools.com}MT940_28C_Type with content type SIMPLE
class MT940_28C_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT940_28C_Type with content type SIMPLE"""
    _TypeDefinition = MT940_28C_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT940_28C_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 60, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT940_28C_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT940_28C_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='28C')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 63, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 63, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT940_28C_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 64, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 64, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT940_28C_Type = MT940_28C_Type
Namespace.addCategoryObject('typeBinding', 'MT940_28C_Type', MT940_28C_Type)


# Complex type {http://www.w3schools.com}MT940_60F_Type with content type SIMPLE
class MT940_60F_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT940_60F_Type with content type SIMPLE"""
    _TypeDefinition = MT940_60F_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT940_60F_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 73, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT940_60F_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT940_60F_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='60F')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 76, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 76, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT940_60F_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 77, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 77, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT940_60F_Type = MT940_60F_Type
Namespace.addCategoryObject('typeBinding', 'MT940_60F_Type', MT940_60F_Type)


# Complex type {http://www.w3schools.com}MT940_60M_Type with content type SIMPLE
class MT940_60M_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT940_60M_Type with content type SIMPLE"""
    _TypeDefinition = MT940_60M_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT940_60M_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 86, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT940_60M_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT940_60M_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='60M')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 89, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 89, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT940_60M_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 90, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 90, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT940_60M_Type = MT940_60M_Type
Namespace.addCategoryObject('typeBinding', 'MT940_60M_Type', MT940_60M_Type)


# Complex type {http://www.w3schools.com}MT940_STATELINEDET_61_Type with content type SIMPLE
class MT940_STATELINEDET_61_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT940_STATELINEDET_61_Type with content type SIMPLE"""
    _TypeDefinition = MT940_STATELINEDET_61_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT940_STATELINEDET_61_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 99, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT940_STATELINEDET_61_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT940_STATELINEDET_61_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='61')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 102, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 102, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT940_STATELINEDET_61_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 103, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 103, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT940_STATELINEDET_61_Type = MT940_STATELINEDET_61_Type
Namespace.addCategoryObject('typeBinding', 'MT940_STATELINEDET_61_Type', MT940_STATELINEDET_61_Type)


# Complex type {http://www.w3schools.com}MT940_STATELINEDET_86_Type with content type SIMPLE
class MT940_STATELINEDET_86_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT940_STATELINEDET_86_Type with content type SIMPLE"""
    _TypeDefinition = MT940_STATELINEDET_86_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT940_STATELINEDET_86_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 112, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT940_STATELINEDET_86_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT940_STATELINEDET_86_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='86')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 115, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 115, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT940_STATELINEDET_86_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 116, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 116, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT940_STATELINEDET_86_Type = MT940_STATELINEDET_86_Type
Namespace.addCategoryObject('typeBinding', 'MT940_STATELINEDET_86_Type', MT940_STATELINEDET_86_Type)


# Complex type {http://www.w3schools.com}MT940_62F_Type with content type SIMPLE
class MT940_62F_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT940_62F_Type with content type SIMPLE"""
    _TypeDefinition = MT940_62F_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT940_62F_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 125, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT940_62F_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT940_62F_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='62F')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 128, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 128, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT940_62F_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 129, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 129, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT940_62F_Type = MT940_62F_Type
Namespace.addCategoryObject('typeBinding', 'MT940_62F_Type', MT940_62F_Type)


# Complex type {http://www.w3schools.com}MT940_62M_Type with content type SIMPLE
class MT940_62M_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT940_62M_Type with content type SIMPLE"""
    _TypeDefinition = MT940_62M_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT940_62M_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 138, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT940_62M_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT940_62M_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='62M')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 141, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 141, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT940_62M_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 142, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 142, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT940_62M_Type = MT940_62M_Type
Namespace.addCategoryObject('typeBinding', 'MT940_62M_Type', MT940_62M_Type)


# Complex type {http://www.w3schools.com}MT940_64_Type with content type SIMPLE
class MT940_64_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT940_64_Type with content type SIMPLE"""
    _TypeDefinition = MT940_64_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT940_64_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 151, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT940_64_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT940_64_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='64')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 154, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 154, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT940_64_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 155, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 155, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT940_64_Type = MT940_64_Type
Namespace.addCategoryObject('typeBinding', 'MT940_64_Type', MT940_64_Type)


# Complex type {http://www.w3schools.com}MT940_65_Type with content type SIMPLE
class MT940_65_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT940_65_Type with content type SIMPLE"""
    _TypeDefinition = MT940_65_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT940_65_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 164, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT940_65_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT940_65_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='65')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 167, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 167, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT940_65_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 168, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 168, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT940_65_Type = MT940_65_Type
Namespace.addCategoryObject('typeBinding', 'MT940_65_Type', MT940_65_Type)


# Complex type {http://www.w3schools.com}MT940_86_Type with content type SIMPLE
class MT940_86_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT940_86_Type with content type SIMPLE"""
    _TypeDefinition = MT940_86_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT940_86_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 177, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT940_86_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT940_86_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='86')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 180, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 180, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT940_86_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 181, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 181, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT940_86_Type = MT940_86_Type
Namespace.addCategoryObject('typeBinding', 'MT940_86_Type', MT940_86_Type)


MT940 = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MT940'), CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 191, 1))
Namespace.addCategoryObject('elementBinding', MT940.name().localName(), MT940)



MT940_STATELINEDET._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StatementLine'), MT940_STATELINEDET_61_Type, scope=MT940_STATELINEDET, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 187, 3)))

MT940_STATELINEDET._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InformationtoAccountOwner'), MT940_STATELINEDET_86_Type, scope=MT940_STATELINEDET, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 188, 3)))

def _BuildAutomaton ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton
    del _BuildAutomaton
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 187, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 188, 3))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MT940_STATELINEDET._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'StatementLine')), pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 187, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(MT940_STATELINEDET._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InformationtoAccountOwner')), pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 188, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
MT940_STATELINEDET._Automaton = _BuildAutomaton()




CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TransactionReferenceNumber'), MT940_20_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 194, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RelatedReference'), MT940_21_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 195, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AccountIdentification'), MT940_25_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 197, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AccountIdentification_P'), MT940_25P_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 198, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StatementNumberSequenceNumber'), MT940_28C_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 200, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OpeningBalance_F'), MT940_60F_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 202, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OpeningBalance_M'), MT940_60M_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 203, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'STATELINEDET'), MT940_STATELINEDET, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 205, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ClosingBalanceBookedFunds_F'), MT940_62F_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 207, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ClosingBalanceBookedFunds_M'), MT940_62M_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 208, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ClosingAvailableBalanceAvailableFunds'), MT940_64_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 210, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ForwardAvailableBalance'), MT940_65_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 211, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InformationtoAccountOwner'), MT940_86_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 212, 4)))

def _BuildAutomaton_ ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_
    del _BuildAutomaton_
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 195, 4))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 205, 4))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 210, 4))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 211, 4))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 212, 4))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TransactionReferenceNumber')), pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 194, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RelatedReference')), pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 195, 4))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AccountIdentification')), pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 197, 5))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AccountIdentification_P')), pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 198, 5))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'StatementNumberSequenceNumber')), pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 200, 4))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OpeningBalance_F')), pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 202, 5))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OpeningBalance_M')), pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 203, 5))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'STATELINEDET')), pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 205, 4))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ClosingBalanceBookedFunds_F')), pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 207, 5))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ClosingBalanceBookedFunds_M')), pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 208, 5))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ClosingAvailableBalanceAvailableFunds')), pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 210, 4))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ForwardAvailableBalance')), pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 211, 4))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InformationtoAccountOwner')), pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT940.xsd', 212, 4))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_12._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON._Automaton = _BuildAutomaton_()



...

  MT942
# C:\Projects\XSD\MT942.py
# -*- coding: utf-8 -*-
# PyXB bindings for NM:96afad3d20bbfe8d040a1a097fa388d9fecd10e3
# Generated 2021-03-26 11:26:51.640407 by PyXB version 1.2.6 using Python 3.7.4.final.0
# Namespace http://www.w3schools.com

from __future__ import unicode_literals
import pyxb
import pyxb.binding
import pyxb.binding.saxer
import io
import pyxb.utils.utility
import pyxb.utils.domutils
import sys
import pyxb.utils.six as _six
# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:0f73a0ec-8df8-11eb-a893-3448ed42967c')

# Version of PyXB used to generate the bindings
_PyXBVersion = '1.2.6'
# Generated bindings are not compatible across PyXB versions
if pyxb.__version__ != _PyXBVersion:
    raise pyxb.PyXBVersionError(_PyXBVersion)

# A holder for module-level binding classes so we can access them from
# inside class definitions where property names may conflict.
_module_typeBindings = pyxb.utils.utility.Object()

# Import bindings for namespaces imported into schema
import pyxb.binding.datatypes

# NOTE: All namespace declarations are reserved within the binding
Namespace = pyxb.namespace.NamespaceForURI('http://www.w3schools.com', create_if_missing=True)
Namespace.configureCategories(['typeBinding', 'elementBinding'])

def CreateFromDocument (xml_text, default_namespace=None, location_base=None):
    """Parse the given XML and use the document element to create a
    Python instance.

    @param xml_text An XML document.  This should be data (Python 2
    str or Python 3 bytes), or a text (Python 2 unicode or Python 3
    str) in the L{pyxb._InputEncoding} encoding.

    @keyword default_namespace The L{pyxb.Namespace} instance to use as the
    default namespace where there is no default namespace in scope.
    If unspecified or C{None}, the namespace of the module containing
    this function will be used.

    @keyword location_base: An object to be recorded as the base of all
    L{pyxb.utils.utility.Location} instances associated with events and
    objects handled by the parser.  You might pass the URI from which
    the document was obtained.
    """

    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement, default_namespace=default_namespace)
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    saxer = pyxb.binding.saxer.make_parser(fallback_namespace=default_namespace, location_base=location_base)
    handler = saxer.getContentHandler()
    xmld = xml_text
    if isinstance(xmld, _six.text_type):
        xmld = xmld.encode(pyxb._InputEncoding)
    saxer.parse(io.BytesIO(xmld))
    instance = handler.rootObject()
    return instance

def CreateFromDOM (node, default_namespace=None):
    """Create a Python instance from the given DOM node.
    The node tag must correspond to an element declaration in this module.

    @deprecated: Forcing use of DOM interface is unnecessary; use L{CreateFromDocument}."""
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return pyxb.binding.basis.element.AnyCreateFromDOM(node, default_namespace)


# Atomic simple type: {http://www.w3schools.com}MT942_20_Type_Pattern
class MT942_20_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT942_20_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 3, 1)
    _Documentation = None
MT942_20_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT942_20_Type_Pattern._CF_pattern.addPattern(pattern="([^/]([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,14}[^/])")
MT942_20_Type_Pattern._InitializeFacetMap(MT942_20_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT942_20_Type_Pattern', MT942_20_Type_Pattern)
_module_typeBindings.MT942_20_Type_Pattern = MT942_20_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT942_21_Type_Pattern
class MT942_21_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT942_21_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 16, 1)
    _Documentation = None
MT942_21_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT942_21_Type_Pattern._CF_pattern.addPattern(pattern="([^/]([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,14}[^/])")
MT942_21_Type_Pattern._InitializeFacetMap(MT942_21_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT942_21_Type_Pattern', MT942_21_Type_Pattern)
_module_typeBindings.MT942_21_Type_Pattern = MT942_21_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT942_25_Type_Pattern
class MT942_25_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT942_25_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 29, 1)
    _Documentation = None
MT942_25_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT942_25_Type_Pattern._CF_pattern.addPattern(pattern="(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35})")
MT942_25_Type_Pattern._InitializeFacetMap(MT942_25_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT942_25_Type_Pattern', MT942_25_Type_Pattern)
_module_typeBindings.MT942_25_Type_Pattern = MT942_25_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT942_25P_Type_Pattern
class MT942_25P_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT942_25P_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 42, 1)
    _Documentation = None
MT942_25P_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT942_25P_Type_Pattern._CF_pattern.addPattern(pattern="(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35}\\n[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)")
MT942_25P_Type_Pattern._InitializeFacetMap(MT942_25P_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT942_25P_Type_Pattern', MT942_25P_Type_Pattern)
_module_typeBindings.MT942_25P_Type_Pattern = MT942_25P_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT942_28C_Type_Pattern
class MT942_28C_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT942_28C_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 55, 1)
    _Documentation = None
MT942_28C_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT942_28C_Type_Pattern._CF_pattern.addPattern(pattern='([0-9]{1,5}(/[0-9]{1,5})?)')
MT942_28C_Type_Pattern._InitializeFacetMap(MT942_28C_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT942_28C_Type_Pattern', MT942_28C_Type_Pattern)
_module_typeBindings.MT942_28C_Type_Pattern = MT942_28C_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT942_34F_Type_Pattern
class MT942_34F_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT942_34F_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 68, 1)
    _Documentation = None
MT942_34F_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT942_34F_Type_Pattern._CF_pattern.addPattern(pattern='((AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)((D|C))?[0-9,(?0-9)]{1,15})')
MT942_34F_Type_Pattern._InitializeFacetMap(MT942_34F_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT942_34F_Type_Pattern', MT942_34F_Type_Pattern)
_module_typeBindings.MT942_34F_Type_Pattern = MT942_34F_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT942_13D_Type_Pattern
class MT942_13D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT942_13D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 81, 1)
    _Documentation = None
MT942_13D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT942_13D_Type_Pattern._CF_pattern.addPattern(pattern='([0-9]{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(0[0-9]|[1][0-9]|2[0-3])([0-5][0-9])([+]|[-])(0[0-9]|[1][0-9]|2[0-3])([0-5][0-9]))')
MT942_13D_Type_Pattern._InitializeFacetMap(MT942_13D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT942_13D_Type_Pattern', MT942_13D_Type_Pattern)
_module_typeBindings.MT942_13D_Type_Pattern = MT942_13D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT942_STATELINEDET_61_Type_Pattern
class MT942_STATELINEDET_61_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT942_STATELINEDET_61_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 94, 1)
    _Documentation = None
MT942_STATELINEDET_61_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT942_STATELINEDET_61_Type_Pattern._CF_pattern.addPattern(pattern="([0-9]{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])([0-9]{4})?(C|D|EC|ED|RC|RD)([A-Z]{1})?[0-9,(?0-9)]{1,15}(S|N|F)[A-Z0-9]{3}([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,16}(//([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,16})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?)")
MT942_STATELINEDET_61_Type_Pattern._InitializeFacetMap(MT942_STATELINEDET_61_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT942_STATELINEDET_61_Type_Pattern', MT942_STATELINEDET_61_Type_Pattern)
_module_typeBindings.MT942_STATELINEDET_61_Type_Pattern = MT942_STATELINEDET_61_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT942_STATELINEDET_86_Type_Pattern
class MT942_STATELINEDET_86_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT942_STATELINEDET_86_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 107, 1)
    _Documentation = None
MT942_STATELINEDET_86_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT942_STATELINEDET_86_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,65}\\n?){1,6})")
MT942_STATELINEDET_86_Type_Pattern._InitializeFacetMap(MT942_STATELINEDET_86_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT942_STATELINEDET_86_Type_Pattern', MT942_STATELINEDET_86_Type_Pattern)
_module_typeBindings.MT942_STATELINEDET_86_Type_Pattern = MT942_STATELINEDET_86_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT942_90D_Type_Pattern
class MT942_90D_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT942_90D_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 120, 1)
    _Documentation = None
MT942_90D_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT942_90D_Type_Pattern._CF_pattern.addPattern(pattern='([0-9]{1,5}(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})')
MT942_90D_Type_Pattern._InitializeFacetMap(MT942_90D_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT942_90D_Type_Pattern', MT942_90D_Type_Pattern)
_module_typeBindings.MT942_90D_Type_Pattern = MT942_90D_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT942_90C_Type_Pattern
class MT942_90C_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT942_90C_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 133, 1)
    _Documentation = None
MT942_90C_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT942_90C_Type_Pattern._CF_pattern.addPattern(pattern='([0-9]{1,5}(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})')
MT942_90C_Type_Pattern._InitializeFacetMap(MT942_90C_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT942_90C_Type_Pattern', MT942_90C_Type_Pattern)
_module_typeBindings.MT942_90C_Type_Pattern = MT942_90C_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT942_86_Type_Pattern
class MT942_86_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT942_86_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 146, 1)
    _Documentation = None
MT942_86_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT942_86_Type_Pattern._CF_pattern.addPattern(pattern="((([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,65}\\n?){1,6})")
MT942_86_Type_Pattern._InitializeFacetMap(MT942_86_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT942_86_Type_Pattern', MT942_86_Type_Pattern)
_module_typeBindings.MT942_86_Type_Pattern = MT942_86_Type_Pattern

# Complex type {http://www.w3schools.com}MT942_STATELINEDET with content type ELEMENT_ONLY
class MT942_STATELINEDET (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT942_STATELINEDET with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT942_STATELINEDET')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 159, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}StatementLine uses Python identifier StatementLine
    __StatementLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'StatementLine'), 'StatementLine', '__httpwww_w3schools_com_MT942_STATELINEDET_httpwww_w3schools_comStatementLine', True, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 161, 3), )

    
    StatementLine = property(__StatementLine.value, __StatementLine.set, None, None)

    
    # Element {http://www.w3schools.com}InformationtoAccountOwner uses Python identifier InformationtoAccountOwner
    __InformationtoAccountOwner = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InformationtoAccountOwner'), 'InformationtoAccountOwner', '__httpwww_w3schools_com_MT942_STATELINEDET_httpwww_w3schools_comInformationtoAccountOwner', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 162, 3), )

    
    InformationtoAccountOwner = property(__InformationtoAccountOwner.value, __InformationtoAccountOwner.set, None, None)

    _ElementMap.update({
        __StatementLine.name() : __StatementLine,
        __InformationtoAccountOwner.name() : __InformationtoAccountOwner
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.MT942_STATELINEDET = MT942_STATELINEDET
Namespace.addCategoryObject('typeBinding', 'MT942_STATELINEDET', MT942_STATELINEDET)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 166, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}TransactionReferenceNumber uses Python identifier TransactionReferenceNumber
    __TransactionReferenceNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TransactionReferenceNumber'), 'TransactionReferenceNumber', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comTransactionReferenceNumber', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 168, 4), )

    
    TransactionReferenceNumber = property(__TransactionReferenceNumber.value, __TransactionReferenceNumber.set, None, None)

    
    # Element {http://www.w3schools.com}RelatedReference uses Python identifier RelatedReference
    __RelatedReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RelatedReference'), 'RelatedReference', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comRelatedReference', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 169, 4), )

    
    RelatedReference = property(__RelatedReference.value, __RelatedReference.set, None, None)

    
    # Element {http://www.w3schools.com}AccountIdentification uses Python identifier AccountIdentification
    __AccountIdentification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AccountIdentification'), 'AccountIdentification', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comAccountIdentification', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 171, 5), )

    
    AccountIdentification = property(__AccountIdentification.value, __AccountIdentification.set, None, None)

    
    # Element {http://www.w3schools.com}AccountIdentification_P uses Python identifier AccountIdentification_P
    __AccountIdentification_P = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AccountIdentification_P'), 'AccountIdentification_P', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comAccountIdentification_P', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 172, 5), )

    
    AccountIdentification_P = property(__AccountIdentification_P.value, __AccountIdentification_P.set, None, None)

    
    # Element {http://www.w3schools.com}StatementNumberSequenceNumber uses Python identifier StatementNumberSequenceNumber
    __StatementNumberSequenceNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'StatementNumberSequenceNumber'), 'StatementNumberSequenceNumber', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comStatementNumberSequenceNumber', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 174, 4), )

    
    StatementNumberSequenceNumber = property(__StatementNumberSequenceNumber.value, __StatementNumberSequenceNumber.set, None, None)

    
    # Element {http://www.w3schools.com}DebitAndCreditFloorLimitIndicator uses Python identifier DebitAndCreditFloorLimitIndicator
    __DebitAndCreditFloorLimitIndicator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DebitAndCreditFloorLimitIndicator'), 'DebitAndCreditFloorLimitIndicator', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comDebitAndCreditFloorLimitIndicator', True, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 175, 4), )

    
    DebitAndCreditFloorLimitIndicator = property(__DebitAndCreditFloorLimitIndicator.value, __DebitAndCreditFloorLimitIndicator.set, None, None)

    
    # Element {http://www.w3schools.com}DateTimeIndication uses Python identifier DateTimeIndication
    __DateTimeIndication = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DateTimeIndication'), 'DateTimeIndication', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comDateTimeIndication', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 176, 4), )

    
    DateTimeIndication = property(__DateTimeIndication.value, __DateTimeIndication.set, None, None)

    
    # Element {http://www.w3schools.com}STATELINEDET uses Python identifier STATELINEDET
    __STATELINEDET = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'STATELINEDET'), 'STATELINEDET', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comSTATELINEDET', True, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 177, 4), )

    
    STATELINEDET = property(__STATELINEDET.value, __STATELINEDET.set, None, None)

    
    # Element {http://www.w3schools.com}NumberAndSumOfDebitEntries uses Python identifier NumberAndSumOfDebitEntries
    __NumberAndSumOfDebitEntries = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NumberAndSumOfDebitEntries'), 'NumberAndSumOfDebitEntries', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comNumberAndSumOfDebitEntries', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 178, 4), )

    
    NumberAndSumOfDebitEntries = property(__NumberAndSumOfDebitEntries.value, __NumberAndSumOfDebitEntries.set, None, None)

    
    # Element {http://www.w3schools.com}NumberAndSumOfCreditEntries uses Python identifier NumberAndSumOfCreditEntries
    __NumberAndSumOfCreditEntries = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NumberAndSumOfCreditEntries'), 'NumberAndSumOfCreditEntries', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comNumberAndSumOfCreditEntries', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 179, 4), )

    
    NumberAndSumOfCreditEntries = property(__NumberAndSumOfCreditEntries.value, __NumberAndSumOfCreditEntries.set, None, None)

    
    # Element {http://www.w3schools.com}InformationtoAccountOwner uses Python identifier InformationtoAccountOwner
    __InformationtoAccountOwner = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InformationtoAccountOwner'), 'InformationtoAccountOwner', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comInformationtoAccountOwner', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 180, 4), )

    
    InformationtoAccountOwner = property(__InformationtoAccountOwner.value, __InformationtoAccountOwner.set, None, None)

    _ElementMap.update({
        __TransactionReferenceNumber.name() : __TransactionReferenceNumber,
        __RelatedReference.name() : __RelatedReference,
        __AccountIdentification.name() : __AccountIdentification,
        __AccountIdentification_P.name() : __AccountIdentification_P,
        __StatementNumberSequenceNumber.name() : __StatementNumberSequenceNumber,
        __DebitAndCreditFloorLimitIndicator.name() : __DebitAndCreditFloorLimitIndicator,
        __DateTimeIndication.name() : __DateTimeIndication,
        __STATELINEDET.name() : __STATELINEDET,
        __NumberAndSumOfDebitEntries.name() : __NumberAndSumOfDebitEntries,
        __NumberAndSumOfCreditEntries.name() : __NumberAndSumOfCreditEntries,
        __InformationtoAccountOwner.name() : __InformationtoAccountOwner
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON = CTD_ANON


# Complex type {http://www.w3schools.com}MT942_20_Type with content type SIMPLE
class MT942_20_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT942_20_Type with content type SIMPLE"""
    _TypeDefinition = MT942_20_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT942_20_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 8, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT942_20_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT942_20_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='20')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 11, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 11, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT942_20_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 12, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 12, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT942_20_Type = MT942_20_Type
Namespace.addCategoryObject('typeBinding', 'MT942_20_Type', MT942_20_Type)


# Complex type {http://www.w3schools.com}MT942_21_Type with content type SIMPLE
class MT942_21_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT942_21_Type with content type SIMPLE"""
    _TypeDefinition = MT942_21_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT942_21_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 21, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT942_21_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT942_21_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='21')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 24, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 24, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT942_21_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 25, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 25, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT942_21_Type = MT942_21_Type
Namespace.addCategoryObject('typeBinding', 'MT942_21_Type', MT942_21_Type)


# Complex type {http://www.w3schools.com}MT942_25_Type with content type SIMPLE
class MT942_25_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT942_25_Type with content type SIMPLE"""
    _TypeDefinition = MT942_25_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT942_25_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 34, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT942_25_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT942_25_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='25')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 37, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 37, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT942_25_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 38, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 38, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT942_25_Type = MT942_25_Type
Namespace.addCategoryObject('typeBinding', 'MT942_25_Type', MT942_25_Type)


# Complex type {http://www.w3schools.com}MT942_25P_Type with content type SIMPLE
class MT942_25P_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT942_25P_Type with content type SIMPLE"""
    _TypeDefinition = MT942_25P_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT942_25P_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 47, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT942_25P_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT942_25P_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='25P')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 50, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 50, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT942_25P_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 51, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 51, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT942_25P_Type = MT942_25P_Type
Namespace.addCategoryObject('typeBinding', 'MT942_25P_Type', MT942_25P_Type)


# Complex type {http://www.w3schools.com}MT942_28C_Type with content type SIMPLE
class MT942_28C_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT942_28C_Type with content type SIMPLE"""
    _TypeDefinition = MT942_28C_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT942_28C_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 60, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT942_28C_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT942_28C_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='28C')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 63, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 63, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT942_28C_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 64, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 64, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT942_28C_Type = MT942_28C_Type
Namespace.addCategoryObject('typeBinding', 'MT942_28C_Type', MT942_28C_Type)


# Complex type {http://www.w3schools.com}MT942_34F_Type with content type SIMPLE
class MT942_34F_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT942_34F_Type with content type SIMPLE"""
    _TypeDefinition = MT942_34F_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT942_34F_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 73, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT942_34F_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT942_34F_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='34F')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 76, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 76, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT942_34F_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 77, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 77, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT942_34F_Type = MT942_34F_Type
Namespace.addCategoryObject('typeBinding', 'MT942_34F_Type', MT942_34F_Type)


# Complex type {http://www.w3schools.com}MT942_13D_Type with content type SIMPLE
class MT942_13D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT942_13D_Type with content type SIMPLE"""
    _TypeDefinition = MT942_13D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT942_13D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 86, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT942_13D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT942_13D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='13D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 89, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 89, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT942_13D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 90, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 90, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT942_13D_Type = MT942_13D_Type
Namespace.addCategoryObject('typeBinding', 'MT942_13D_Type', MT942_13D_Type)


# Complex type {http://www.w3schools.com}MT942_STATELINEDET_61_Type with content type SIMPLE
class MT942_STATELINEDET_61_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT942_STATELINEDET_61_Type with content type SIMPLE"""
    _TypeDefinition = MT942_STATELINEDET_61_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT942_STATELINEDET_61_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 99, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT942_STATELINEDET_61_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT942_STATELINEDET_61_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='61')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 102, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 102, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT942_STATELINEDET_61_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 103, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 103, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT942_STATELINEDET_61_Type = MT942_STATELINEDET_61_Type
Namespace.addCategoryObject('typeBinding', 'MT942_STATELINEDET_61_Type', MT942_STATELINEDET_61_Type)


# Complex type {http://www.w3schools.com}MT942_STATELINEDET_86_Type with content type SIMPLE
class MT942_STATELINEDET_86_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT942_STATELINEDET_86_Type with content type SIMPLE"""
    _TypeDefinition = MT942_STATELINEDET_86_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT942_STATELINEDET_86_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 112, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT942_STATELINEDET_86_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT942_STATELINEDET_86_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='86')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 115, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 115, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT942_STATELINEDET_86_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 116, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 116, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT942_STATELINEDET_86_Type = MT942_STATELINEDET_86_Type
Namespace.addCategoryObject('typeBinding', 'MT942_STATELINEDET_86_Type', MT942_STATELINEDET_86_Type)


# Complex type {http://www.w3schools.com}MT942_90D_Type with content type SIMPLE
class MT942_90D_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT942_90D_Type with content type SIMPLE"""
    _TypeDefinition = MT942_90D_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT942_90D_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 125, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT942_90D_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT942_90D_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='90D')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 128, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 128, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT942_90D_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 129, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 129, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT942_90D_Type = MT942_90D_Type
Namespace.addCategoryObject('typeBinding', 'MT942_90D_Type', MT942_90D_Type)


# Complex type {http://www.w3schools.com}MT942_90C_Type with content type SIMPLE
class MT942_90C_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT942_90C_Type with content type SIMPLE"""
    _TypeDefinition = MT942_90C_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT942_90C_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 138, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT942_90C_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT942_90C_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='90C')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 141, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 141, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT942_90C_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 142, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 142, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT942_90C_Type = MT942_90C_Type
Namespace.addCategoryObject('typeBinding', 'MT942_90C_Type', MT942_90C_Type)


# Complex type {http://www.w3schools.com}MT942_86_Type with content type SIMPLE
class MT942_86_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT942_86_Type with content type SIMPLE"""
    _TypeDefinition = MT942_86_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT942_86_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 151, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT942_86_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT942_86_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='86')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 154, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 154, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT942_86_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 155, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 155, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT942_86_Type = MT942_86_Type
Namespace.addCategoryObject('typeBinding', 'MT942_86_Type', MT942_86_Type)


MT942 = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MT942'), CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 165, 1))
Namespace.addCategoryObject('elementBinding', MT942.name().localName(), MT942)



MT942_STATELINEDET._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StatementLine'), MT942_STATELINEDET_61_Type, scope=MT942_STATELINEDET, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 161, 3)))

MT942_STATELINEDET._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InformationtoAccountOwner'), MT942_STATELINEDET_86_Type, scope=MT942_STATELINEDET, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 162, 3)))

def _BuildAutomaton ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton
    del _BuildAutomaton
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 161, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 162, 3))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MT942_STATELINEDET._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'StatementLine')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 161, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(MT942_STATELINEDET._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InformationtoAccountOwner')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 162, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
MT942_STATELINEDET._Automaton = _BuildAutomaton()




CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TransactionReferenceNumber'), MT942_20_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 168, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RelatedReference'), MT942_21_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 169, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AccountIdentification'), MT942_25_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 171, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AccountIdentification_P'), MT942_25P_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 172, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StatementNumberSequenceNumber'), MT942_28C_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 174, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DebitAndCreditFloorLimitIndicator'), MT942_34F_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 175, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DateTimeIndication'), MT942_13D_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 176, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'STATELINEDET'), MT942_STATELINEDET, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 177, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NumberAndSumOfDebitEntries'), MT942_90D_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 178, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NumberAndSumOfCreditEntries'), MT942_90C_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 179, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InformationtoAccountOwner'), MT942_86_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 180, 4)))

def _BuildAutomaton_ ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_
    del _BuildAutomaton_
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 169, 4))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 177, 4))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 178, 4))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 179, 4))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 180, 4))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TransactionReferenceNumber')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 168, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RelatedReference')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 169, 4))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AccountIdentification')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 171, 5))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AccountIdentification_P')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 172, 5))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'StatementNumberSequenceNumber')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 174, 4))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DebitAndCreditFloorLimitIndicator')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 175, 4))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DateTimeIndication')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 176, 4))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'STATELINEDET')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 177, 4))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NumberAndSumOfDebitEntries')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 178, 4))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NumberAndSumOfCreditEntries')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 179, 4))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InformationtoAccountOwner')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\MT942.xsd', 180, 4))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON._Automaton = _BuildAutomaton_()



...

  MT950
# C:\Projects\Xsds\MT950.py
# -*- coding: utf-8 -*-
# PyXB bindings for NM:96afad3d20bbfe8d040a1a097fa388d9fecd10e3
# Generated 2020-01-23 16:15:26.824064 by PyXB version 1.2.6 using Python 3.7.4.final.0
# Namespace http://www.w3schools.com

from __future__ import unicode_literals
import pyxb
import pyxb.binding
import pyxb.binding.saxer
import io
import pyxb.utils.utility
import pyxb.utils.domutils
import sys
import pyxb.utils.six as _six
# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:77501c74-3dcd-11ea-a3d7-509a4c321f2f')

# Version of PyXB used to generate the bindings
_PyXBVersion = '1.2.6'
# Generated bindings are not compatible across PyXB versions
if pyxb.__version__ != _PyXBVersion:
    raise pyxb.PyXBVersionError(_PyXBVersion)

# A holder for module-level binding classes so we can access them from
# inside class definitions where property names may conflict.
_module_typeBindings = pyxb.utils.utility.Object()

# Import bindings for namespaces imported into schema
import pyxb.binding.datatypes

# NOTE: All namespace declarations are reserved within the binding
Namespace = pyxb.namespace.NamespaceForURI('http://www.w3schools.com', create_if_missing=True)
Namespace.configureCategories(['typeBinding', 'elementBinding'])

def CreateFromDocument (xml_text, default_namespace=None, location_base=None):
    """Parse the given XML and use the document element to create a
    Python instance.

    @param xml_text An XML document.  This should be data (Python 2
    str or Python 3 bytes), or a text (Python 2 unicode or Python 3
    str) in the L{pyxb._InputEncoding} encoding.

    @keyword default_namespace The L{pyxb.Namespace} instance to use as the
    default namespace where there is no default namespace in scope.
    If unspecified or C{None}, the namespace of the module containing
    this function will be used.

    @keyword location_base: An object to be recorded as the base of all
    L{pyxb.utils.utility.Location} instances associated with events and
    objects handled by the parser.  You might pass the URI from which
    the document was obtained.
    """

    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement, default_namespace=default_namespace)
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    saxer = pyxb.binding.saxer.make_parser(fallback_namespace=default_namespace, location_base=location_base)
    handler = saxer.getContentHandler()
    xmld = xml_text
    if isinstance(xmld, _six.text_type):
        xmld = xmld.encode(pyxb._InputEncoding)
    saxer.parse(io.BytesIO(xmld))
    instance = handler.rootObject()
    return instance

def CreateFromDOM (node, default_namespace=None):
    """Create a Python instance from the given DOM node.
    The node tag must correspond to an element declaration in this module.

    @deprecated: Forcing use of DOM interface is unnecessary; use L{CreateFromDocument}."""
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return pyxb.binding.basis.element.AnyCreateFromDOM(node, default_namespace)


# Atomic simple type: {http://www.w3schools.com}MT950_20_Type_Pattern
class MT950_20_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT950_20_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 3, 1)
    _Documentation = None
MT950_20_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT950_20_Type_Pattern._CF_pattern.addPattern(pattern="([^/]([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,14}[^/])")
MT950_20_Type_Pattern._InitializeFacetMap(MT950_20_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT950_20_Type_Pattern', MT950_20_Type_Pattern)
_module_typeBindings.MT950_20_Type_Pattern = MT950_20_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT950_25_Type_Pattern
class MT950_25_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT950_25_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 16, 1)
    _Documentation = None
MT950_25_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT950_25_Type_Pattern._CF_pattern.addPattern(pattern="(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,35})")
MT950_25_Type_Pattern._InitializeFacetMap(MT950_25_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT950_25_Type_Pattern', MT950_25_Type_Pattern)
_module_typeBindings.MT950_25_Type_Pattern = MT950_25_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT950_28C_Type_Pattern
class MT950_28C_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT950_28C_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 29, 1)
    _Documentation = None
MT950_28C_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT950_28C_Type_Pattern._CF_pattern.addPattern(pattern='([0-9]{1,5}(/[0-9]{1,5})?)')
MT950_28C_Type_Pattern._InitializeFacetMap(MT950_28C_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT950_28C_Type_Pattern', MT950_28C_Type_Pattern)
_module_typeBindings.MT950_28C_Type_Pattern = MT950_28C_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT950_60F_Type_Pattern
class MT950_60F_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT950_60F_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 42, 1)
    _Documentation = None
MT950_60F_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT950_60F_Type_Pattern._CF_pattern.addPattern(pattern='((C|D)[0-9]{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})')
MT950_60F_Type_Pattern._InitializeFacetMap(MT950_60F_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT950_60F_Type_Pattern', MT950_60F_Type_Pattern)
_module_typeBindings.MT950_60F_Type_Pattern = MT950_60F_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT950_60M_Type_Pattern
class MT950_60M_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT950_60M_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 55, 1)
    _Documentation = None
MT950_60M_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT950_60M_Type_Pattern._CF_pattern.addPattern(pattern='((C|D)[0-9]{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})')
MT950_60M_Type_Pattern._InitializeFacetMap(MT950_60M_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT950_60M_Type_Pattern', MT950_60M_Type_Pattern)
_module_typeBindings.MT950_60M_Type_Pattern = MT950_60M_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT950_61_Type_Pattern
class MT950_61_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT950_61_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 68, 1)
    _Documentation = None
MT950_61_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT950_61_Type_Pattern._CF_pattern.addPattern(pattern="([0-9]{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])([0-9]{4})?(C|D|RC|RD)([A-Z]{1})?[0-9,(?0-9)]{1,15}(S|N|F)[A-Z0-9]{3}([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,16}(//([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,16})?(\\n)?(([a-zA-Z0-9]|/|-|\\?|:|\\(|\\)|\\.|,|'|\\+|\\n|\\s){1,34})?)")
MT950_61_Type_Pattern._InitializeFacetMap(MT950_61_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT950_61_Type_Pattern', MT950_61_Type_Pattern)
_module_typeBindings.MT950_61_Type_Pattern = MT950_61_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT950_62F_Type_Pattern
class MT950_62F_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT950_62F_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 81, 1)
    _Documentation = None
MT950_62F_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT950_62F_Type_Pattern._CF_pattern.addPattern(pattern='((C|D)[0-9]{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})')
MT950_62F_Type_Pattern._InitializeFacetMap(MT950_62F_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT950_62F_Type_Pattern', MT950_62F_Type_Pattern)
_module_typeBindings.MT950_62F_Type_Pattern = MT950_62F_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT950_62M_Type_Pattern
class MT950_62M_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT950_62M_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 94, 1)
    _Documentation = None
MT950_62M_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT950_62M_Type_Pattern._CF_pattern.addPattern(pattern='((C|D)[0-9]{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})')
MT950_62M_Type_Pattern._InitializeFacetMap(MT950_62M_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT950_62M_Type_Pattern', MT950_62M_Type_Pattern)
_module_typeBindings.MT950_62M_Type_Pattern = MT950_62M_Type_Pattern

# Atomic simple type: {http://www.w3schools.com}MT950_64_Type_Pattern
class MT950_64_Type_Pattern (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT950_64_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 107, 1)
    _Documentation = None
MT950_64_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MT950_64_Type_Pattern._CF_pattern.addPattern(pattern='((C|D)[0-9]{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})')
MT950_64_Type_Pattern._InitializeFacetMap(MT950_64_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MT950_64_Type_Pattern', MT950_64_Type_Pattern)
_module_typeBindings.MT950_64_Type_Pattern = MT950_64_Type_Pattern

# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 121, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3schools.com}TransactionReferenceNumber uses Python identifier TransactionReferenceNumber
    __TransactionReferenceNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TransactionReferenceNumber'), 'TransactionReferenceNumber', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comTransactionReferenceNumber', False, pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 123, 4), )

    
    TransactionReferenceNumber = property(__TransactionReferenceNumber.value, __TransactionReferenceNumber.set, None, None)

    
    # Element {http://www.w3schools.com}AccountIdentification uses Python identifier AccountIdentification
    __AccountIdentification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AccountIdentification'), 'AccountIdentification', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comAccountIdentification', False, pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 124, 4), )

    
    AccountIdentification = property(__AccountIdentification.value, __AccountIdentification.set, None, None)

    
    # Element {http://www.w3schools.com}StatementNumberSequenceNumber uses Python identifier StatementNumberSequenceNumber
    __StatementNumberSequenceNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'StatementNumberSequenceNumber'), 'StatementNumberSequenceNumber', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comStatementNumberSequenceNumber', False, pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 125, 4), )

    
    StatementNumberSequenceNumber = property(__StatementNumberSequenceNumber.value, __StatementNumberSequenceNumber.set, None, None)

    
    # Element {http://www.w3schools.com}OpeningBalance_F uses Python identifier OpeningBalance_F
    __OpeningBalance_F = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OpeningBalance_F'), 'OpeningBalance_F', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comOpeningBalance_F', False, pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 127, 5), )

    
    OpeningBalance_F = property(__OpeningBalance_F.value, __OpeningBalance_F.set, None, None)

    
    # Element {http://www.w3schools.com}OpeningBalance_M uses Python identifier OpeningBalance_M
    __OpeningBalance_M = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OpeningBalance_M'), 'OpeningBalance_M', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comOpeningBalance_M', False, pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 128, 5), )

    
    OpeningBalance_M = property(__OpeningBalance_M.value, __OpeningBalance_M.set, None, None)

    
    # Element {http://www.w3schools.com}StatementLine uses Python identifier StatementLine
    __StatementLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'StatementLine'), 'StatementLine', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comStatementLine', True, pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 130, 4), )

    
    StatementLine = property(__StatementLine.value, __StatementLine.set, None, None)

    
    # Element {http://www.w3schools.com}ClosingBalanceBookedFunds_F uses Python identifier ClosingBalanceBookedFunds_F
    __ClosingBalanceBookedFunds_F = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ClosingBalanceBookedFunds_F'), 'ClosingBalanceBookedFunds_F', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comClosingBalanceBookedFunds_F', False, pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 132, 5), )

    
    ClosingBalanceBookedFunds_F = property(__ClosingBalanceBookedFunds_F.value, __ClosingBalanceBookedFunds_F.set, None, None)

    
    # Element {http://www.w3schools.com}ClosingBalanceBookedFunds_M uses Python identifier ClosingBalanceBookedFunds_M
    __ClosingBalanceBookedFunds_M = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ClosingBalanceBookedFunds_M'), 'ClosingBalanceBookedFunds_M', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comClosingBalanceBookedFunds_M', False, pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 133, 5), )

    
    ClosingBalanceBookedFunds_M = property(__ClosingBalanceBookedFunds_M.value, __ClosingBalanceBookedFunds_M.set, None, None)

    
    # Element {http://www.w3schools.com}ClosingAvailableBalanceAvailableFunds uses Python identifier ClosingAvailableBalanceAvailableFunds
    __ClosingAvailableBalanceAvailableFunds = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ClosingAvailableBalanceAvailableFunds'), 'ClosingAvailableBalanceAvailableFunds', '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comClosingAvailableBalanceAvailableFunds', False, pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 135, 4), )

    
    ClosingAvailableBalanceAvailableFunds = property(__ClosingAvailableBalanceAvailableFunds.value, __ClosingAvailableBalanceAvailableFunds.set, None, None)

    _ElementMap.update({
        __TransactionReferenceNumber.name() : __TransactionReferenceNumber,
        __AccountIdentification.name() : __AccountIdentification,
        __StatementNumberSequenceNumber.name() : __StatementNumberSequenceNumber,
        __OpeningBalance_F.name() : __OpeningBalance_F,
        __OpeningBalance_M.name() : __OpeningBalance_M,
        __StatementLine.name() : __StatementLine,
        __ClosingBalanceBookedFunds_F.name() : __ClosingBalanceBookedFunds_F,
        __ClosingBalanceBookedFunds_M.name() : __ClosingBalanceBookedFunds_M,
        __ClosingAvailableBalanceAvailableFunds.name() : __ClosingAvailableBalanceAvailableFunds
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON = CTD_ANON


# Complex type {http://www.w3schools.com}MT950_20_Type with content type SIMPLE
class MT950_20_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT950_20_Type with content type SIMPLE"""
    _TypeDefinition = MT950_20_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT950_20_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 8, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT950_20_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT950_20_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='20')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 11, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 11, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT950_20_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 12, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 12, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT950_20_Type = MT950_20_Type
Namespace.addCategoryObject('typeBinding', 'MT950_20_Type', MT950_20_Type)


# Complex type {http://www.w3schools.com}MT950_25_Type with content type SIMPLE
class MT950_25_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT950_25_Type with content type SIMPLE"""
    _TypeDefinition = MT950_25_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT950_25_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 21, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT950_25_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT950_25_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='25')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 24, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 24, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT950_25_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 25, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 25, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT950_25_Type = MT950_25_Type
Namespace.addCategoryObject('typeBinding', 'MT950_25_Type', MT950_25_Type)


# Complex type {http://www.w3schools.com}MT950_28C_Type with content type SIMPLE
class MT950_28C_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT950_28C_Type with content type SIMPLE"""
    _TypeDefinition = MT950_28C_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT950_28C_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 34, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT950_28C_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT950_28C_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='28C')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 37, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 37, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT950_28C_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 38, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 38, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT950_28C_Type = MT950_28C_Type
Namespace.addCategoryObject('typeBinding', 'MT950_28C_Type', MT950_28C_Type)


# Complex type {http://www.w3schools.com}MT950_60F_Type with content type SIMPLE
class MT950_60F_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT950_60F_Type with content type SIMPLE"""
    _TypeDefinition = MT950_60F_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT950_60F_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 47, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT950_60F_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT950_60F_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='60F')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 50, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 50, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT950_60F_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 51, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 51, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT950_60F_Type = MT950_60F_Type
Namespace.addCategoryObject('typeBinding', 'MT950_60F_Type', MT950_60F_Type)


# Complex type {http://www.w3schools.com}MT950_60M_Type with content type SIMPLE
class MT950_60M_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT950_60M_Type with content type SIMPLE"""
    _TypeDefinition = MT950_60M_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT950_60M_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 60, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT950_60M_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT950_60M_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='60M')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 63, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 63, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT950_60M_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 64, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 64, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT950_60M_Type = MT950_60M_Type
Namespace.addCategoryObject('typeBinding', 'MT950_60M_Type', MT950_60M_Type)


# Complex type {http://www.w3schools.com}MT950_61_Type with content type SIMPLE
class MT950_61_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT950_61_Type with content type SIMPLE"""
    _TypeDefinition = MT950_61_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT950_61_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 73, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT950_61_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT950_61_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='61')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 76, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 76, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT950_61_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 77, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 77, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT950_61_Type = MT950_61_Type
Namespace.addCategoryObject('typeBinding', 'MT950_61_Type', MT950_61_Type)


# Complex type {http://www.w3schools.com}MT950_62F_Type with content type SIMPLE
class MT950_62F_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT950_62F_Type with content type SIMPLE"""
    _TypeDefinition = MT950_62F_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT950_62F_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 86, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT950_62F_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT950_62F_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='62F')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 89, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 89, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT950_62F_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 90, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 90, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT950_62F_Type = MT950_62F_Type
Namespace.addCategoryObject('typeBinding', 'MT950_62F_Type', MT950_62F_Type)


# Complex type {http://www.w3schools.com}MT950_62M_Type with content type SIMPLE
class MT950_62M_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT950_62M_Type with content type SIMPLE"""
    _TypeDefinition = MT950_62M_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT950_62M_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 99, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT950_62M_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT950_62M_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='62M')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 102, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 102, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT950_62M_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 103, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 103, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT950_62M_Type = MT950_62M_Type
Namespace.addCategoryObject('typeBinding', 'MT950_62M_Type', MT950_62M_Type)


# Complex type {http://www.w3schools.com}MT950_64_Type with content type SIMPLE
class MT950_64_Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MT950_64_Type with content type SIMPLE"""
    _TypeDefinition = MT950_64_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MT950_64_Type')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 112, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MT950_64_Type_Pattern
    
    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag', '__httpwww_w3schools_com_MT950_64_Type_swiftTag', pyxb.binding.datatypes.anySimpleType, fixed=True, unicode_default='64')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 115, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 115, 4)
    
    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    
    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory', '__httpwww_w3schools_com_MT950_64_Type_isMandatory', pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 116, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 116, 4)
    
    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __swiftTag.name() : __swiftTag,
        __isMandatory.name() : __isMandatory
    })
_module_typeBindings.MT950_64_Type = MT950_64_Type
Namespace.addCategoryObject('typeBinding', 'MT950_64_Type', MT950_64_Type)


MT950 = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MT950'), CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 120, 1))
Namespace.addCategoryObject('elementBinding', MT950.name().localName(), MT950)



CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TransactionReferenceNumber'), MT950_20_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 123, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AccountIdentification'), MT950_25_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 124, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StatementNumberSequenceNumber'), MT950_28C_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 125, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OpeningBalance_F'), MT950_60F_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 127, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OpeningBalance_M'), MT950_60M_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 128, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StatementLine'), MT950_61_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 130, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ClosingBalanceBookedFunds_F'), MT950_62F_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 132, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ClosingBalanceBookedFunds_M'), MT950_62M_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 133, 5)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ClosingAvailableBalanceAvailableFunds'), MT950_64_Type, scope=CTD_ANON, location=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 135, 4)))

def _BuildAutomaton ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton
    del _BuildAutomaton
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 130, 4))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 135, 4))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TransactionReferenceNumber')), pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 123, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AccountIdentification')), pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 124, 4))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'StatementNumberSequenceNumber')), pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 125, 4))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OpeningBalance_F')), pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 127, 5))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OpeningBalance_M')), pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 128, 5))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'StatementLine')), pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 130, 4))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ClosingBalanceBookedFunds_F')), pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 132, 5))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ClosingBalanceBookedFunds_M')), pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 133, 5))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ClosingAvailableBalanceAvailableFunds')), pyxb.utils.utility.Location('C:\\Projects\\Xsds\\MT950.xsd', 135, 4))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON._Automaton = _BuildAutomaton()



...

}

decls[FXSLTemplate] {
}

clx FObject [FXSLTemplate] {
  MT900
<?xml version="1.0" ?>
<xs:schema elementFormDefault="qualified" targetNamespace="http://www.w3schools.com" xmlns="http://www.w3schools.com" xmlns:xs="http://www.w3.org/2001/XMLSchema">
 <xs:simpleType name="MT900_20_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([^/]([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,14}[^/])"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT900_20_Type">
  <xs:simpleContent>
   <xs:extension base="MT900_20_Type_Pattern">
    <xs:attribute fixed="20" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT900_21_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([^/]([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,14}[^/])"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT900_21_Type">
  <xs:simpleContent>
   <xs:extension base="MT900_21_Type_Pattern">
    <xs:attribute fixed="21" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT900_25_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT900_25_Type">
  <xs:simpleContent>
   <xs:extension base="MT900_25_Type_Pattern">
    <xs:attribute fixed="25" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT900_25P_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT900_25P_Type">
  <xs:simpleContent>
   <xs:extension base="MT900_25P_Type_Pattern">
    <xs:attribute fixed="25P" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT900_13D_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([0-9]{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(0[0-9]|[1][0-9]|2[0-3])([0-5][0-9])([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1}(0[0-9]|[1][0-9]|2[0-3])([0-5][0-9]))"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT900_13D_Type">
  <xs:simpleContent>
   <xs:extension base="MT900_13D_Type_Pattern">
    <xs:attribute fixed="13D" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT900_32A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([0-9]{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT900_32A_Type">
  <xs:simpleContent>
   <xs:extension base="MT900_32A_Type_Pattern">
    <xs:attribute fixed="32A" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT900_52A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT900_52A_Type">
  <xs:simpleContent>
   <xs:extension base="MT900_52A_Type_Pattern">
    <xs:attribute fixed="52A" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT900_52D_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,4})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT900_52D_Type">
  <xs:simpleContent>
   <xs:extension base="MT900_52D_Type_Pattern">
    <xs:attribute fixed="52D" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT900_72_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,6})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT900_72_Type">
  <xs:simpleContent>
   <xs:extension base="MT900_72_Type_Pattern">
    <xs:attribute fixed="72" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:element name="MT900">
  <xs:complexType>
   <xs:sequence>
    <xs:element name="TransactionReferenceNumber" type="MT900_20_Type"/>
    <xs:element name="RelatedReference" type="MT900_21_Type"/>
    <xs:choice>
     <xs:element name="AccountIdentification" type="MT900_25_Type"/>
     <xs:element name="AccountIdentification_P" type="MT900_25P_Type"/>
    </xs:choice>
    <xs:element minOccurs="0" name="DateTimeIndication" type="MT900_13D_Type"/>
    <xs:element name="ValueDateCurrencyCodeAmount" type="MT900_32A_Type"/>
    <xs:choice minOccurs="0">
     <xs:element minOccurs="0" name="OrderingInstitution_A" type="MT900_52A_Type"/>
     <xs:element minOccurs="0" name="OrderingInstitution_D" type="MT900_52D_Type"/>
    </xs:choice>
    <xs:element minOccurs="0" name="SendertoReceiverInformation" type="MT900_72_Type"/>
   </xs:sequence>
  </xs:complexType>
 </xs:element>
</xs:schema>


...

  MT910
<?xml version="1.0" ?>
<xs:schema elementFormDefault="qualified" targetNamespace="http://www.w3schools.com" xmlns="http://www.w3schools.com" xmlns:xs="http://www.w3.org/2001/XMLSchema">
 <xs:simpleType name="MT910_20_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([^/]([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,14}[^/])"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT910_20_Type">
  <xs:simpleContent>
   <xs:extension base="MT910_20_Type_Pattern">
    <xs:attribute fixed="20" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT910_21_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([^/]([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,14}[^/])"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT910_21_Type">
  <xs:simpleContent>
   <xs:extension base="MT910_21_Type_Pattern">
    <xs:attribute fixed="21" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT910_25_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT910_25_Type">
  <xs:simpleContent>
   <xs:extension base="MT910_25_Type_Pattern">
    <xs:attribute fixed="25" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT910_25P_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT910_25P_Type">
  <xs:simpleContent>
   <xs:extension base="MT910_25P_Type_Pattern">
    <xs:attribute fixed="25P" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT910_13D_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([0-9]{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(0[0-9]|[1][0-9]|2[0-3])([0-5][0-9])([+]|[-])(0[0-9]|[1][0-9]|2[0-3])([0-5][0-9]))"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT910_13D_Type">
  <xs:simpleContent>
   <xs:extension base="MT910_13D_Type_Pattern">
    <xs:attribute fixed="13D" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT910_32A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([0-9]{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT910_32A_Type">
  <xs:simpleContent>
   <xs:extension base="MT910_32A_Type_Pattern">
    <xs:attribute fixed="32A" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT910_50A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT910_50A_Type">
  <xs:simpleContent>
   <xs:extension base="MT910_50A_Type_Pattern">
    <xs:attribute fixed="50A" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT910_50F_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,4})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT910_50F_Type">
  <xs:simpleContent>
   <xs:extension base="MT910_50F_Type_Pattern">
    <xs:attribute fixed="50F" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT910_50K_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,4})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT910_50K_Type">
  <xs:simpleContent>
   <xs:extension base="MT910_50K_Type_Pattern">
    <xs:attribute fixed="50K" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT910_52A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT910_52A_Type">
  <xs:simpleContent>
   <xs:extension base="MT910_52A_Type_Pattern">
    <xs:attribute fixed="52A" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT910_52D_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,4})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT910_52D_Type">
  <xs:simpleContent>
   <xs:extension base="MT910_52D_Type_Pattern">
    <xs:attribute fixed="52D" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT910_56A_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT910_56A_Type">
  <xs:simpleContent>
   <xs:extension base="MT910_56A_Type_Pattern">
    <xs:attribute fixed="56A" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT910_56D_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((/[A-Z]{1})?(/([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,4})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT910_56D_Type">
  <xs:simpleContent>
   <xs:extension base="MT910_56D_Type_Pattern">
    <xs:attribute fixed="56D" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT910_72_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n?){1,6})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT910_72_Type">
  <xs:simpleContent>
   <xs:extension base="MT910_72_Type_Pattern">
    <xs:attribute fixed="72" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:element name="MT910">
  <xs:complexType>
   <xs:sequence>
    <xs:element name="TransactionReferenceNumber" type="MT910_20_Type"/>
    <xs:element name="RelatedReference" type="MT910_21_Type"/>
    <xs:choice>
     <xs:element name="AccountIdentification" type="MT910_25_Type"/>
     <xs:element name="AccountIdentification_P" type="MT910_25P_Type"/>
    </xs:choice>
    <xs:element minOccurs="0" name="DateTimeIndication" type="MT910_13D_Type"/>
    <xs:element name="ValueDateCurrencyCodeAmount" type="MT910_32A_Type"/>
    <xs:choice minOccurs="0">
     <xs:element minOccurs="0" name="OrderingCustomer_A" type="MT910_50A_Type"/>
     <xs:element minOccurs="0" name="OrderingCustomer_F" type="MT910_50F_Type"/>
     <xs:element minOccurs="0" name="OrderingCustomer_K" type="MT910_50K_Type"/>
    </xs:choice>
    <xs:choice minOccurs="0">
     <xs:element minOccurs="0" name="OrderingInstitution_A" type="MT910_52A_Type"/>
     <xs:element minOccurs="0" name="OrderingInstitution_D" type="MT910_52D_Type"/>
    </xs:choice>
    <xs:choice minOccurs="0">
     <xs:element minOccurs="0" name="Intermediary_A" type="MT910_56A_Type"/>
     <xs:element minOccurs="0" name="Intermediary_D" type="MT910_56D_Type"/>
    </xs:choice>
    <xs:element minOccurs="0" name="SendertoReceiverInformation" type="MT910_72_Type"/>
   </xs:sequence>
  </xs:complexType>
 </xs:element>
</xs:schema>


...

  MT940
<?xml version="1.0" ?>
<xs:schema elementFormDefault="qualified" targetNamespace="http://www.w3schools.com" xmlns="http://www.w3schools.com" xmlns:xs="http://www.w3.org/2001/XMLSchema">
 <xs:simpleType name="MT940_20_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([^/]([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,14}[^/])"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT940_20_Type">
  <xs:simpleContent>
   <xs:extension base="MT940_20_Type_Pattern">
    <xs:attribute fixed="20" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT940_21_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([^/]([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,14}[^/])"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT940_21_Type">
  <xs:simpleContent>
   <xs:extension base="MT940_21_Type_Pattern">
    <xs:attribute fixed="21" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT940_25_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT940_25_Type">
  <xs:simpleContent>
   <xs:extension base="MT940_25_Type_Pattern">
    <xs:attribute fixed="25" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT940_25P_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT940_25P_Type">
  <xs:simpleContent>
   <xs:extension base="MT940_25P_Type_Pattern">
    <xs:attribute fixed="25P" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT940_28C_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([0-9]{1,5}(/[0-9]{1,5})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT940_28C_Type">
  <xs:simpleContent>
   <xs:extension base="MT940_28C_Type_Pattern">
    <xs:attribute fixed="28C" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT940_60F_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((C|D)[0-9]{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT940_60F_Type">
  <xs:simpleContent>
   <xs:extension base="MT940_60F_Type_Pattern">
    <xs:attribute fixed="60F" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT940_60M_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((C|D)[0-9]{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT940_60M_Type">
  <xs:simpleContent>
   <xs:extension base="MT940_60M_Type_Pattern">
    <xs:attribute fixed="60M" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT940_STATELINEDET_61_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([0-9]{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])([0-9]{4})?(C|D|RC|RD)([A-Z]{1})?[0-9,(?0-9)]{1,15}(S|N|F)[A-Z0-9]{3}([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,16}(//([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,16})?(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT940_STATELINEDET_61_Type">
  <xs:simpleContent>
   <xs:extension base="MT940_STATELINEDET_61_Type_Pattern">
    <xs:attribute fixed="61" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT940_STATELINEDET_86_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,65}\n?){1,6})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT940_STATELINEDET_86_Type">
  <xs:simpleContent>
   <xs:extension base="MT940_STATELINEDET_86_Type_Pattern">
    <xs:attribute fixed="86" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT940_62F_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((C|D)[0-9]{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT940_62F_Type">
  <xs:simpleContent>
   <xs:extension base="MT940_62F_Type_Pattern">
    <xs:attribute fixed="62F" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT940_62M_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((C|D)[0-9]{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT940_62M_Type">
  <xs:simpleContent>
   <xs:extension base="MT940_62M_Type_Pattern">
    <xs:attribute fixed="62M" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT940_64_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((C|D)[0-9]{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT940_64_Type">
  <xs:simpleContent>
   <xs:extension base="MT940_64_Type_Pattern">
    <xs:attribute fixed="64" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT940_65_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((C|D)[0-9]{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT940_65_Type">
  <xs:simpleContent>
   <xs:extension base="MT940_65_Type_Pattern">
    <xs:attribute fixed="65" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT940_86_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,65}\n?){1,6})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT940_86_Type">
  <xs:simpleContent>
   <xs:extension base="MT940_86_Type_Pattern">
    <xs:attribute fixed="86" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:complexType name="MT940_STATELINEDET">
  <xs:sequence>
   <xs:element minOccurs="0" name="StatementLine" type="MT940_STATELINEDET_61_Type"/>
   <xs:element minOccurs="0" name="InformationtoAccountOwner" type="MT940_STATELINEDET_86_Type"/>
  </xs:sequence>
 </xs:complexType>
 <xs:element name="MT940">
  <xs:complexType>
   <xs:sequence>
    <xs:element name="TransactionReferenceNumber" type="MT940_20_Type"/>
    <xs:element minOccurs="0" name="RelatedReference" type="MT940_21_Type"/>
    <xs:choice>
     <xs:element name="AccountIdentification" type="MT940_25_Type"/>
     <xs:element name="AccountIdentification_P" type="MT940_25P_Type"/>
    </xs:choice>
    <xs:element name="StatementNumberSequenceNumber" type="MT940_28C_Type"/>
    <xs:choice>
     <xs:element name="OpeningBalance_F" type="MT940_60F_Type"/>
     <xs:element name="OpeningBalance_M" type="MT940_60M_Type"/>
    </xs:choice>
    <xs:element maxOccurs="unbounded" minOccurs="0" name="STATELINEDET" type="MT940_STATELINEDET"/>
    <xs:choice>
     <xs:element name="ClosingBalanceBookedFunds_F" type="MT940_62F_Type"/>
     <xs:element name="ClosingBalanceBookedFunds_M" type="MT940_62M_Type"/>
    </xs:choice>
    <xs:element minOccurs="0" name="ClosingAvailableBalanceAvailableFunds" type="MT940_64_Type"/>
    <xs:element maxOccurs="unbounded" minOccurs="0" name="ForwardAvailableBalance" type="MT940_65_Type"/>
    <xs:element minOccurs="0" name="InformationtoAccountOwner" type="MT940_86_Type"/>
   </xs:sequence>
  </xs:complexType>
 </xs:element>
</xs:schema>


...

  MT942
<?xml version="1.0" ?>
<xs:schema elementFormDefault="qualified" targetNamespace="http://www.w3schools.com" xmlns="http://www.w3schools.com" xmlns:xs="http://www.w3.org/2001/XMLSchema">
 <xs:simpleType name="MT942_20_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([^/]([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,14}[^/])"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT942_20_Type">
  <xs:simpleContent>
   <xs:extension base="MT942_20_Type_Pattern">
    <xs:attribute fixed="20" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT942_21_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([^/]([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,14}[^/])"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT942_21_Type">
  <xs:simpleContent>
   <xs:extension base="MT942_21_Type_Pattern">
    <xs:attribute fixed="21" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT942_25_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT942_25_Type">
  <xs:simpleContent>
   <xs:extension base="MT942_25_Type_Pattern">
    <xs:attribute fixed="25" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT942_25P_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35}\n[A-Z]{4}[A-Z]{2}[A-Z0-9]{2}([A-Z0-9]{3})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT942_25P_Type">
  <xs:simpleContent>
   <xs:extension base="MT942_25P_Type_Pattern">
    <xs:attribute fixed="25P" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT942_28C_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([0-9]{1,5}(/[0-9]{1,5})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT942_28C_Type">
  <xs:simpleContent>
   <xs:extension base="MT942_28C_Type_Pattern">
    <xs:attribute fixed="28C" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT942_34F_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)((D|C))?[0-9,(?0-9)]{1,15})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT942_34F_Type">
  <xs:simpleContent>
   <xs:extension base="MT942_34F_Type_Pattern">
    <xs:attribute fixed="34F" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT942_13D_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([0-9]{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(0[0-9]|[1][0-9]|2[0-3])([0-5][0-9])([+]|[-])(0[0-9]|[1][0-9]|2[0-3])([0-5][0-9]))"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT942_13D_Type">
  <xs:simpleContent>
   <xs:extension base="MT942_13D_Type_Pattern">
    <xs:attribute fixed="13D" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT942_STATELINEDET_61_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([0-9]{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])([0-9]{4})?(C|D|EC|ED|RC|RD)([A-Z]{1})?[0-9,(?0-9)]{1,15}(S|N|F)[A-Z0-9]{3}([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,16}(//([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,16})?(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT942_STATELINEDET_61_Type">
  <xs:simpleContent>
   <xs:extension base="MT942_STATELINEDET_61_Type_Pattern">
    <xs:attribute fixed="61" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT942_STATELINEDET_86_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,65}\n?){1,6})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT942_STATELINEDET_86_Type">
  <xs:simpleContent>
   <xs:extension base="MT942_STATELINEDET_86_Type_Pattern">
    <xs:attribute fixed="86" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT942_90D_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([0-9]{1,5}(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT942_90D_Type">
  <xs:simpleContent>
   <xs:extension base="MT942_90D_Type_Pattern">
    <xs:attribute fixed="90D" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT942_90C_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([0-9]{1,5}(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT942_90C_Type">
  <xs:simpleContent>
   <xs:extension base="MT942_90C_Type_Pattern">
    <xs:attribute fixed="90C" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT942_86_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,65}\n?){1,6})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT942_86_Type">
  <xs:simpleContent>
   <xs:extension base="MT942_86_Type_Pattern">
    <xs:attribute fixed="86" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:complexType name="MT942_STATELINEDET">
  <xs:sequence>
   <xs:element maxOccurs="unbounded" minOccurs="0" name="StatementLine" type="MT942_STATELINEDET_61_Type"/>
   <xs:element minOccurs="0" name="InformationtoAccountOwner" type="MT942_STATELINEDET_86_Type"/>
  </xs:sequence>
 </xs:complexType>
 <xs:element name="MT942">
  <xs:complexType>
   <xs:sequence>
    <xs:element name="TransactionReferenceNumber" type="MT942_20_Type"/>
    <xs:element minOccurs="0" name="RelatedReference" type="MT942_21_Type"/>
    <xs:choice>
     <xs:element name="AccountIdentification" type="MT942_25_Type"/>
     <xs:element name="AccountIdentification_P" type="MT942_25P_Type"/>
    </xs:choice>
    <xs:element name="StatementNumberSequenceNumber" type="MT942_28C_Type"/>
    <xs:element maxOccurs="unbounded" name="DebitAndCreditFloorLimitIndicator" type="MT942_34F_Type"/>
    <xs:element name="DateTimeIndication" type="MT942_13D_Type"/>
    <xs:element maxOccurs="unbounded" minOccurs="0" name="STATELINEDET" type="MT942_STATELINEDET"/>
    <xs:element minOccurs="0" name="NumberAndSumOfDebitEntries" type="MT942_90D_Type"/>
    <xs:element minOccurs="0" name="NumberAndSumOfCreditEntries" type="MT942_90C_Type"/>
    <xs:element minOccurs="0" name="InformationtoAccountOwner" type="MT942_86_Type"/>
   </xs:sequence>
  </xs:complexType>
 </xs:element>
</xs:schema>


...

  MT950
<?xml version="1.0" ?>
<xs:schema elementFormDefault="qualified" targetNamespace="http://www.w3schools.com" xmlns="http://www.w3schools.com" xmlns:xs="http://www.w3.org/2001/XMLSchema">
 <xs:simpleType name="MT950_20_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([^/]([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,14}[^/])"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT950_20_Type">
  <xs:simpleContent>
   <xs:extension base="MT950_20_Type_Pattern">
    <xs:attribute fixed="20" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT950_25_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,35})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT950_25_Type">
  <xs:simpleContent>
   <xs:extension base="MT950_25_Type_Pattern">
    <xs:attribute fixed="25" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT950_28C_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([0-9]{1,5}(/[0-9]{1,5})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT950_28C_Type">
  <xs:simpleContent>
   <xs:extension base="MT950_28C_Type_Pattern">
    <xs:attribute fixed="28C" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT950_60F_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((C|D)[0-9]{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT950_60F_Type">
  <xs:simpleContent>
   <xs:extension base="MT950_60F_Type_Pattern">
    <xs:attribute fixed="60F" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT950_60M_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((C|D)[0-9]{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT950_60M_Type">
  <xs:simpleContent>
   <xs:extension base="MT950_60M_Type_Pattern">
    <xs:attribute fixed="60M" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT950_61_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([0-9]{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])([0-9]{4})?(C|D|RC|RD)([A-Z]{1})?[0-9,(?0-9)]{1,15}(S|N|F)[A-Z0-9]{3}([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,16}(//([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,16})?(\n)?(([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,34})?)"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT950_61_Type">
  <xs:simpleContent>
   <xs:extension base="MT950_61_Type_Pattern">
    <xs:attribute fixed="61" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT950_62F_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((C|D)[0-9]{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT950_62F_Type">
  <xs:simpleContent>
   <xs:extension base="MT950_62F_Type_Pattern">
    <xs:attribute fixed="62F" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT950_62M_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((C|D)[0-9]{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT950_62M_Type">
  <xs:simpleContent>
   <xs:extension base="MT950_62M_Type_Pattern">
    <xs:attribute fixed="62M" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MT950_64_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((C|D)[0-9]{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD)[0-9,(?0-9)]{1,15})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MT950_64_Type">
  <xs:simpleContent>
   <xs:extension base="MT950_64_Type_Pattern">
    <xs:attribute fixed="64" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:element name="MT950">
  <xs:complexType>
   <xs:sequence>
    <xs:element name="TransactionReferenceNumber" type="MT950_20_Type"/>
    <xs:element name="AccountIdentification" type="MT950_25_Type"/>
    <xs:element name="StatementNumberSequenceNumber" type="MT950_28C_Type"/>
    <xs:choice>
     <xs:element name="OpeningBalance_F" type="MT950_60F_Type"/>
     <xs:element name="OpeningBalance_M" type="MT950_60M_Type"/>
    </xs:choice>
    <xs:element maxOccurs="unbounded" minOccurs="0" name="StatementLine" type="MT950_61_Type"/>
    <xs:choice>
     <xs:element name="ClosingBalanceBookedFunds_F" type="MT950_62F_Type"/>
     <xs:element name="ClosingBalanceBookedFunds_M" type="MT950_62M_Type"/>
    </xs:choice>
    <xs:element minOccurs="0" name="ClosingAvailableBalanceAvailableFunds" type="MT950_64_Type"/>
   </xs:sequence>
  </xs:complexType>
 </xs:element>
</xs:schema>


...

}

