#
# Front Arena exported extension module.
# source          ""
# timestamp (utc) "2021-11-02 02:17:47.4"
# ***** DO NOT EDIT! *****
#
name        "DC_ExportAccountingPackage"
description ""

groups {
}

decls[FPythonCode] {
}

clx FObject [FPythonCode] {
  ExportAccountingPackage
import acm
import CSVUploadExport
import FRunScriptGUI
from Transporters import FStoredASQLQueryTransporter
from TaskRunner import RunTaskModuleWithDict
import os


def ExportCSV(objects, folder, filename, layout='horizontal'):
    path = os.path.join(folder, filename)
    
    ok = CSVUploadExport.ExportCSV(path, objects, layout, 'utf-8')
    
    if ok:
        print ('created:', path)


def TransporterName(obj):
    if obj.User() is None:
        return obj.Name()
    else:
        return obj.Name() + '@' + obj.User().Name()


def ExportQueryFolders(queryFolders, folder):
    nameParam = ','.join([TransporterName(qf) for qf in queryFolders])
    params    = {'Query Folder': nameParam, 'basepath': folder}

    RunTaskModuleWithDict('TransporterExport', params)


def ExportAccountingPackage(folder):
    csvFolder         = os.path.join(folder, 'CSV')
    transporterFolder = os.path.join(folder, 'Transporter')
    queryFolderFolder = os.path.join(transporterFolder, 'Query_Folder')
    
    if not os.path.exists(csvFolder):
        os.mkdir(csvFolder)
    
    if not os.path.exists(transporterFolder):
        os.mkdir(transporterFolder)    
    
    if not os.path.exists(queryFolderFolder):
        os.mkdir(queryFolderFolder)
    
    '''
    Note: 
    It is essential that records that are referenced by other columns using the seqnbr are exported in increasing order. That is the
    only way the sequence numbers generated by the trigger will match the contents of the file.
    '''
    
    instructions       = sorted(acm.FAccountingInstruction.Select(''), key = lambda instr: instr.JournalValueDefinitions().First().Oid())
    acctInstrMappings  = acm.FAccountingInstructionMapping.Select('')
    books              = acm.FBook.Select('')
    bookLinks          = acm.FBookLink.Select('').SortByProperty('Oid')
    bookMappings       = acm.FBookMapping.Select('')
    taccounts          = acm.FTAccount.Select('')
    taccountallocLinks = acm.FTAccountAllocationLink.Select('').SortByProperty('Oid')
    taccountMappings   = acm.FTAccountMapping.Select('')
    treatments         = acm.FTreatment.Select('')
    treatmentLinks     = acm.FTreatmentLink.Select('').SortByProperty('Oid')
    treatmentMappings  = acm.FTreatmentMapping.Select('')
    queryFolders1      = acm.FStoredASQLQuery.Select('name like "A_AC_*"')
    queryFolders2      = acm.FStoredASQLQuery.Select('name like "A_AI_*"')
    queryFolders3      = acm.FStoredASQLQuery.Select('name like "A_TR_*"')
    queryFolders4      = acm.FStoredASQLQuery.Select('name like "A_BO_*"')
    
    ExportCSV(instructions, csvFolder, 'accounting instructions.csv', 'vertical')
    ExportCSV(acctInstrMappings, csvFolder, 'accounting instruction mappings.csv')
    ExportCSV(books, csvFolder, 'books.csv')
    ExportCSV(bookLinks, csvFolder, 'book links.csv')
    ExportCSV(bookMappings, csvFolder, 'book mappings.csv')
    ExportCSV(taccounts, csvFolder, 'taccounts.csv')
    ExportCSV(taccountallocLinks, csvFolder, 'taccount alloc links.csv')
    ExportCSV(taccountMappings, csvFolder, 'taccount mappings.csv')
    ExportCSV(treatments, csvFolder, 'treatments.csv')
    ExportCSV(treatmentLinks, csvFolder, 'treatment links.csv')
    ExportCSV(treatmentMappings, csvFolder, 'treatment mappings.csv')
    
    ExportQueryFolders(queryFolders1, queryFolderFolder)
    ExportQueryFolders(queryFolders2, queryFolderFolder)
    ExportQueryFolders(queryFolders3, queryFolderFolder)
    ExportQueryFolders(queryFolders4, queryFolderFolder)


directorySelection = FRunScriptGUI.DirectorySelection()


ael_variables = [
    ['dest', 'Destination folder', directorySelection, None, directorySelection, 0, 1, 'Where to export the files', 0, None],
    ['log_folder', 'Log folder_Logging', 'string', None, None, 0, 1, 'Select where to store the log file', 0, None],
    ['log_level', 'Log level_Logging', 'string', ['INFO', 'WARN', 'ERROR', 'DEBUG'], None, 1, 0],
    ['logToConsole', 'Log to console_Logging', 'int', [1, 0], 1, 1, 0, 'Whether logging should be done in the Log Console or not.'],
]


def ael_main(params):
    folder = params['dest'].SelectedDirectory().AsString()

    ExportAccountingPackage(folder)


...

}

