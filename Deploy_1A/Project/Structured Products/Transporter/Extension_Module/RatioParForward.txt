#
# Front Arena exported extension module.
# source          ""
# timestamp (utc) "2023-05-19 10:42:52.0"
# ***** DO NOT EDIT! *****
#
name        "RatioParForward"
description ""

groups {
}

decls[FColumnDefinition] {
  "Current Forward Points" ( "sheet columns.dealpackagesheet" ) "";
  "Current Forward Rate" ( "sheet columns.dealpackagesheet" ) "";
  "NPV Price" ( "sheet columns.dealpackagesheet" "sheet columns.portfoliosheet" ) "";
  "Trade Forward Days" ( "sheet columns.dealpackagesheet" ) "";
  "Trade Points" ( "sheet columns.dealpackagesheet" ) "";
  "Trade Quantity Wide" ( "sheet columns.dealpackagesheet" ) "";
  "WA Price" ( "sheet columns.dealpackagesheet" ) "";
}

clx FTradingSheet [FColumnDefinition] {
  Current Forward Points =
  Access=ReadOnly
  Description=The current forward points at the trades valueday
  ExtensionAttribute=tradeFxForwardPoints
  Format=FXPoints
  GroupLabel=Pricing
  LabelList=Points;TheorPoints
  Name=Forward Points


  Current Forward Rate =
  Access=ReadOnly
  Description=The current forward rate at the trades valueday
  ExtensionAttribute=tradeFxForwardRate
  Format=InstrumentDefinitionFxPrice
  GroupLabel=Pricing
  LabelList=TheorRate
  Name=Forward Rate


  Current Spot Rate =
  Access=ReadOnly
  Description=The current spot rate for ratio par forward
  ExtensionAttribute=tradeFxSpotRate
  Format=InstrumentDefinitionFxPrice
  GroupLabel=Pricing
  LabelList=SpotRate
  Name=Spot Rate


  NPV Points =
  Access=ReadOnly
  Description=The current NPV Points for the par forward
  ExtensionAttribute=npvParForwardPoints
  Format=FXPoints
  GroupLabel=Ratio Par Forward
  LabelList=NPV Points
  Name=NPV Points


  NPV Price =
  Access=ReadOnly
  Description=The current NPV Price for the par forward
  ExtensionAttribute=npvParForwardPrice
  Format=InstrumentDefinitionFxPrice
  GroupLabel=Ratio Par Forward
  LabelList=NPV Px
  Name=NPV Price


  Trade Forward Days =
  Access=ReadWrite
  Class=Trade
  Description=The number of days between trade time and delivery
  GroupLabel=Trade
  LabelList=Days
  Method=TradeForwardDays
  Name=Forward Days


  Trade Points =
  Access=ReadWrite
  Class=Trade
  Description=The points at which the trade was executed.
  GroupLabel=Trade
  LabelList=Points;Trade Points
  Method=TradePoints
  Name=Forward Points


  Trade Quantity Wide =
  InheritsFrom=Trade Quantity
  InitialWidth=100
  Name=Trade Quantity Wide


  WA Points =
  Access=ReadOnly
  Description=The current WA Points for the par forward
  ExtensionAttribute=waParForwardPoints
  Format=FXPoints
  GroupLabel=Ratio Par Forward
  LabelList=WA Points
  Name=WA Points


  WA Price =
  Access=ReadOnly
  Description=The current weighted average Price for the par forward
  ExtensionAttribute=waParForwardPrice
  Format=InstrumentDefinitionFxPrice
  GroupLabel=Ratio Par Forward
  LabelList=WA Px
  Name=WA Price


}

decls[FCustomMethod] {
}

clx FTrade [FCustomMethod] {
  Get_TradeForwardDays =
  Definition=TradeForwardDays: int read
  Function=FXRatioParForwardUtils.GetTradeForwardDays


  Set_TradeForwardDays =
  Definition=TradeForwardDays(int days) write
  Function=FXRatioParForwardUtils.SetTradeForwardDays


}

clx FTradeLogicDecorator [FCustomMethod] {
  Get_TradePoints =
  Definition=TradePoints: double read
  Function=FXRatioParForwardUtils.GetTradePoints


  Set_TradePoints =
  Definition=TradePoints(double points) write
  Function=FXRatioParForwardUtils.SetTradePoints


}

decls[FDealPackageDefinition] {
}

clx FObject [FDealPackageDefinition] {
  FXRatioParForward =
  CustomApplication=Deal Package
  DefinitionClass=FXRatioParForward.FXRatioParForwardDefinition
  Description=
  DisplayName=FX Ratio Par Forward
  Type=Normal


}

decls[FExtensionAttribute] {
}

clx FDealPackageInstrumentAndTrades [FExtensionAttribute] {
  theoreticalCashInventoryValuesDiscountedValues = sumOf(instruments :* "collapse(theoreticalCashInventoryValuesDiscountedValues)" [priceSource, isSplitAllGrouped, valuesOnSpotOverride, positionObject, includeInceptionCash, tradeCategoryInclusionMaskDefault, tradeStatusInclusionMaskDefault]);
  theoreticalValues = sumOf(openInstruments :* "collapse(theoreticalValues)" [priceSource, isSplitAllGrouped, valuesOnSpotOverride, positionObject, filterUnit, groupingSpotDiscountDate, valueAtCostAdjustment, tradeStatusInclusionMaskDefault]);
  tradeStatusInclusionMaskDefault = tradeStatusInclusionMaskAll;
}

clx FFxRate [FExtensionAttribute] {
  theoreticalCashInventoryValuesDiscountedValues = theoreticalInstrumentPositionValues + theoreticalInstrumentPositionValues .* denominatedvalue(float(1 / simplisticFXSpotRate), unit(simplisticFXSpotRate), , date(theoreticalInstrumentPositionValues));
  tradeFxForwardPoints = select(currencyPair, 
  nil->nil, 
  default->(double(tradeFxForwardRate) - double(simplisticFXSpotRate)) / currencyPair.PointValue);
  tradeFxForwardRate = object :* "fxForwardRate" [fxForwardDate = trade.ValueDay];
  tradeFxSpotRate = object :* "fxSpotRate";
}

clx FInstrument [FExtensionAttribute] {
  tradeFxForwardPoints = nil;
  tradeFxForwardRate = nil;
  tradeFxSpotRate = nil;
}

clx FInstrumentAndTrades [FExtensionAttribute] {
  npvParForwardPoints = select(parForwardCurrencyPair, 
  nil->nil, 
  default->(double(npvParForwardPrice) - double(parForwardReferencePrice)) / parForwardCurrencyPair.PointValue);
  npvParForwardPrice = switch(parForwardCurrencyPair, 
  nil->nil, 
  default->abs(parForwardDiscountedPVCurrency1) / abs(parForwardDiscountedPVCurrency2));
  parForwardCurrencies = [parForwardCurrencyPair.Currency1, parForwardCurrencyPair.Currency2];
  parForwardCurrencyPair = object.Trades.AsArray.First.CurrencyPair;
  parForwardDiscountedPVCurrency1 = parForwardDiscountedPVPerCurrency[0];
  parForwardDiscountedPVCurrency2 = parForwardDiscountedPVPerCurrency[1];
  parForwardDiscountedPVPerCurrency = convertToCurrency(object:theoreticalCashInventoryValuesDiscounted [currenciesForVectorColumn = parForwardCurrencies, useFxBaseCurrency, includeInceptionCash, tradeCategoryInclusionMaskDefault := tradeCategoryInclusionMaskParamCollateral, tradeStatusInclusionMaskDefault := tradeStatusInclusionMaskAll, profitAndLossSeparateHistorical, collateralFeesOnly := false, profitAndLossTradeCategoryInclusionMask := tradeCategoryInclusionMaskDefault], displayCurrencyFXRatesForProjectedCashInventory, parForwardCurrencies :* "currencyOrFxBaseCurrency" [useFxBaseCurrency], parForwardCurrencies);
  parForwardFxRate = select(parForwardCurrencyPair, 
  nil->nil, 
  default->CreateFxRate(parForwardCurrencies[0], parForwardCurrencies[1]));
  parForwardReferencePrice = parForwardFxRate :* "simplisticFXSpotRate";
  theoreticalCashInventoryValuesDiscounted = scenarioaxis(stripDateTimePart(discount(valuesInUnit(theoreticalCashInventoryValuesDiscountedValues, theoreticalValueDiscountingUnits, false), theoreticalValueDiscountCurves, displayDate)), projectedCashPerimeterNames, <"refPriceBase", , "fixedvariant", "Theoretical">);
  theoreticalCashInventoryValuesDiscountedValues = sumOf(instruments :* "collapse(theoreticalCashInventoryValuesDiscountedValues)" [priceSource, isSplitAllGrouped, valuesOnSpotOverride, positionObject, includeInceptionCash, tradeCategoryInclusionMaskDefault, tradeStatusInclusionMaskDefault]);
  tradeFxSpotRate = select(parForwardFxRate, 
  nil->nil, 
  default->parForwardFxRate :* "tradeFxSpotRate");
  waParForwardPoints = select(parForwardCurrencyPair, 
  nil->nil, 
  default->(double(waParForwardPrice) - double(parForwardReferencePrice)) / parForwardCurrencyPair.PointValue);
  waParForwardPrice = select(parForwardFxRate, 
  nil->nil, 
  default->sumOf(stripDateTimePart(abs(arrayAny(parForwardFxRate:tradeFxForwardRate [trade = lot(object.Trades)])) .* ((object.Trades) :* "object.Quantity"))) / abs(sumOf((object.Trades) :* "object.Quantity")));
}

clx FTradeRow [FExtensionAttribute] {
  tradeFxForwardPoints = instrument:tradeFxForwardPoints [trade];
  tradeFxForwardRate = instrument:tradeFxForwardRate [trade];
  tradeFxSpotRate = instrument:tradeFxSpotRate [trade];
}

decls[FExtensionValue] {
}

clx FObject [FExtensionValue] {
  CustomLayout_FxRatioParForward
vbox(;
        ipName;
        hbox{;
          vbox[Currency Pair;
            hbox{;
                    currency1;
                    currency2;
            };
            currentSpot;
          ];
        };
        
        hbox{;
            vbox{;
                portfolio;
                counterparty;
                acquirer;
                status;
                hbox(;
                    fill;
                    addTrade;
                    );
                };
            vbox{;
                vbox[Weighted average;
                    hbox(;
                        waPoints;
                        waPrice;
                        );
                    hbox(;
                        fill;
                        useWaPrice;
                        );
                    ];
                referencePrice;
                hbox(;
                    points;
                    price;
                    );
                tradeTime;
                trader;
                hbox(;
                    removeTrade;
                    payments;
                    );
                };
            };

);
...

  CustomLayout_FxRatioParForward_AdditionalInfo
vbox[Trade;
tradeAddInfo;
];
...

  CustomPanes_FxRatioParForward
CustomLayout_FxRatioParForward,General;CustomLayout_FxRatioParForward_AdditionalInfo,Add Info
...

  _CustomPanes_FxRatioParForward
CustomLayout_FxRatioParForward,General;CustomLayout_FxRatioParForward_AdditionalInfo,Add Info;CustomLayout_SP_Operations,Operations
...

}

decls[FMenuExtension] {
}

clx FFrame [FMenuExtension] {
  SP_FxRatioParForward =
  DisplayName=FX Ratio Par Forward
  Function=FXRatioParForward.StartFXRatioParForward
  MenuType=Application
  ParentMenu=Trading/Structured Products
  Standard=Yes


}

decls[FNumFormatter] {
}

clx FObject [FNumFormatter] {
  FXPoints =
  DenominatedValueDateTimeFormatter=
  DigitGrouping=
  DigitGroupingSymbol=
  Epsilon=1e-06
  Expression=x
  Format=
  Fractions=
  InputScaleFactor=
  InputScaleFactorLimit=
  Inverse=
  MaximumSignificantDigits=15
  MinimumSignificantDigits=
  Mnemonic=
  NumDecimals=
  ScaleFactor=1.0
  ShowInf=false
  Tick=
  TruncateTrailingZeros=true
  USTreasuryInput=


}

decls[FPythonCode] {
}

clx FObject [FPythonCode] {
  FXRatioParForward

import acm
from DealPackageDevKit import DealPackageDefinition, Date, DatePeriod, Str, Object, Float, DealPackageException, DealPackageUserException, CalcVal, Delegate, Bool, Action, Settings, TradeActions, CorrectCommand, NovateCommand, CloseCommand, MirrorCommand, Int, CounterpartyChoices, AcquirerChoices, TradeStatusChoices, CounterpartyChoices, AcquirerChoices, DealPackageChoiceListSource, ReturnDomainDecorator
from CompositeAttributes import BuySell, PaymentsDialog
from DealPackageUtil import SetNew
from CompositeAddInfoDefinition import AddInfoDefinition
#from CompositeAttributes import OperationsPanel
from FXRatioParForwardUtils import FxDecimals

DEFAULT_CURR2_DICT = {'USD': 'JPY', 'EUR': 'USD', 'GBP': 'USD', 'AUD': 'USD'}

@TradeActions( mirror = MirrorCommand(statusAttr='status', newStatus='Simulated') )
@Settings(GraphApplicable=False, SheetDefaultColumns=['Trade Forward Days','Trade Value Day','Trade Quantity Wide','Trade Instrument','Current Forward Points', 'Current Forward Rate', 'Trade Price', 'Portfolio Present Value','Net NOP'])
class FXRatioParForwardDefinition(DealPackageDefinition):
    '''******************************************************************************************
    * Attribute Declarations
    ******************************************************************************************'''   
    ''' Strip Dates '''
    
    ipName   =          Object(     label='Name',
                                    objMapping='InstrumentPackage.Name') 
    
    currency1 =         Object(     label='',
                                    choiceListSource = "@ChoicesCurrency1",
                                    onChanged = "@UpdateCurrencyChoices",
                                    objMapping='Currency1') 
    
    price     =         Object(     label = '',
                                    formatter='InstrumentDefinitionFxPrice',
                                    objMapping='Trades.Price')
     
    points     =         Object(     label = 'Points/Price',
                                    formatter='FXPoints',
                                    objMapping='Trades.TradePoints')
                               
    
    npvPrice  =         CalcVal( label = '', calcMapping = 'DealPackageAsPortfolio:FPortfolioSheet:NPV Price') 
    
    waPrice  =          CalcVal( label = '', calcMapping = 'DealPackageAsPortfolio:FPortfolioSheet:WA Price') 
    
    npvPoints  =         CalcVal( label = 'Points/Rate', calcMapping = 'DealPackageAsPortfolio:FPortfolioSheet:NPV Points', valuationDetails=False) 
    
    waPoints  =          CalcVal( label = 'Points/Rate', calcMapping = 'DealPackageAsPortfolio:FPortfolioSheet:WA Points', valuationDetails=False) 
    
    currentSpot  =      CalcVal( label = 'Current Spot', calcMapping = 'DealPackage:FDealPackageSheet:Current Spot Rate', valuationDetails=False)
    
    useNpvPrice =        Action(  label='Use',
                                   action='@UseNPV',
                                   toolTip='Use current NPV Price')
    
    useWaPrice =        Action(  label='Use',
                                   action='@UseWA',
                                   toolTip='Use current WA Price')
    
    currency2 =         Object(     label='',
                                    choiceListSource = "@ChoicesCurrency2",
                                    onChanged = "@UpdateCurrencyChoices",
                                    objMapping='Trades.Currency')   
    # Trade attributes for all
    counterparty =      Object(     objMapping="Trades.Counterparty",
                                    label="Counterparty",
                                    choiceListSource=CounterpartyChoices())

    portfolio =         Object(     objMapping="Trades.Portfolio",
                                    label="Portfolio")

    acquirer =          Object(     objMapping="Trades.Acquirer",
                                    label="Acquirer",
                                    choiceListSource=AcquirerChoices())

    tradeTime =         Object(     objMapping="Trades.TradeTime",
                                    label="Trade Time",
                                    transform="@TransformPeriodToDate",
                                    formatter="DateTime")

    trader =            Object(     objMapping="Trades.Trader",
                                    label="Trader")
                                    
    referencePrice =    Object(     objMapping="Trades.ReferencePrice",
                                    formatter='InstrumentDefinitionFxPrice',
                                    label="Spot Price")

    status =            Object(     objMapping="Trades.Status",
                                    defaultValue="Simulated",
                                    label="Status",
                                    choiceListSource=TradeStatusChoices())

    addTrade =          Action(  label='Add',
                                   action='@AddTrade',
                                   toolTip='Add a new trade to the package')

    removeTrade =          Action(  label='Remove',
                                   action='@RemoveTrade',
                                   toolTip='Remove the lstest trade')

    payments =          PaymentsDialog( trade = 'LeadTrade' )
                    
    tradeAddInfo        = AddInfoDefinition( obj='LeadTrade' )

    #operations          = OperationsPanel()
    
    '''******************************************************************************************
    * Attribute based Changed/Default/Transform/Validate Callbacks 
    ******************************************************************************************'''  

    def UseNPV(self, *args):
        self.price = acm.GetFunction("round", 2)(self.npvPrice.Value(), FxDecimals(self.LeadTrade().CurrencyPair()))
        self.referencePrice = acm.GetFunction("round", 2)(self.currentSpot.Value(), FxDecimals(self.LeadTrade().CurrencyPair()))
 
    def UseWA(self, *args):
        self.price = acm.GetFunction("round", 2)(self.waPrice.Value(), FxDecimals(self.LeadTrade().CurrencyPair()))
        self.referencePrice = acm.GetFunction("round", 2)(self.currentSpot.Value(), FxDecimals(self.LeadTrade().CurrencyPair()))
 
    def CurrencyChoiceEnabled(self, *args):
        return all([trade.DecoratedObject().Originator().IsInfant() for trade in self.Trades()])
    
    def ChoicesCurrency1(self, *args):
        self.UpdateCurrencyChoices()
        return self._currency1Choices.Source()
        
    def DealPackageAsPortfolio(self):
        return self.DealPackage().AsPortfolio()
        
    def ChoicesCurrency2(self, *args):
        self.UpdateCurrencyChoices()
        return self._currency2Choices.Source()
        
    def UpdateCurrencyChoices(self, *args):
        self._currency1Choices.Clear()
        self._currency2Choices.Clear()
        ccy1List = sorted(list({p.Currency1() for p in acm.FCurrencyPair.Select(None)}))

        ccy2List = sorted(list({p.Currency2() for p in acm.FCurrencyPair.Select('currency1 = {0}'.format(self.currency1.Name()))}))
        self._currency1Choices.AddAll(ccy1List)
        self._currency2Choices.AddAll(ccy2List)
    
    # Decorators
    @ReturnDomainDecorator('FCurrency')
    def Currency1(self, value = '*Reading*'):
        if value == '*Reading*':
            return self.Instruments().First()
        else:
            if value:
                if value.CurrencyPair(self.currency2, False):
                    pass
                elif value.Name() in DEFAULT_CURR2_DICT:
                    self.currency2 = DEFAULT_CURR2_DICT[value.Name()]
                else:
                    self.currency2 = acm.FCurrencyPair.Select('currency1 = {0}'.format(value.Name())).First().Currency2()
                self.DealPackage().ReplaceInstrumentAt('Default', value)
                for t in self.Trades():
                    t.Instrument(value)
    
    def AssemblePackage(self):
        trade = acm.DealCapturing.CreateNewTrade('EUR')
        wrap = acm.FBusinessLogicDecorator.WrapObject(trade)
        wrap.Quantity(1000000)
        wrap.Currency('USD')
        wrap.TradeProcess(8192)
        if wrap.CurrencyPair():
            wrap.Price(wrap.CurrencyPair().SpotPrice(wrap.ValueDay(), False))
            self.DealPackage().AddTrade(wrap.DecoratedObject(), 'Default')

    def LastValueDay(self):
        return self.Trades().SortByProperty('ValueDay').Last().ValueDay()

    def AddTrade(self, *args):
        trade = acm.DealCapturing.CreateNewTrade(self.LeadTrade().Instrument())
        deco = acm.FBusinessLogicDecorator.WrapObject(trade)
        for attr in ['Currency', 'Portfolio', 'Trader', 'Status', 'Acquirer', 'Counterparty', 'ReferencePrice', 'Quantity' , 'TradeTime']:
            setattr(deco, attr, getattr(self.LeadTrade(), attr)())
        deco.ValueDay(acm.Time.DateAddDelta(self.LastValueDay(),0,1,0))
        deco.Price(self.price)
        trade = deco.DecoratedObject()
        trade.Simulate()
        self.DealPackage().AddTrade(trade)

    def RemoveTrade(self, *args):
        if self.DealPackage().Trades().Size() > 1:
            trade = self.DealPackage().Trades().Last().DecoratedObject()
            trade.Unsimulate()    
            self.DealPackage().RemoveTrade(trade)

    def OnInit(self):
        super(FXRatioParForwardDefinition, self).OnInit()
        self.RegisterCallbackOnAttributeChanged(self.UpdateSpotReference, ('currency1','currency2'))
        self._currency1Choices = DealPackageChoiceListSource()
        self._currency2Choices = DealPackageChoiceListSource()

    def OnNew(self):
        super(FXRatioParForwardDefinition, self).OnNew()
        self.UpdateSpotReference()
       
    def OnSave(self, saveConfig):
        super(FXRatioParForwardDefinition, self).OnNew()
        self.tradeTime = self.LeadTrade().TradeTime()
        toCommit = acm.FArray()
        toDelete = acm.FArray()
        if not self.DealPackage().Originator().IsInfant():
            toDelete.AddAll(list(set(self.DealPackage().Originator().Trades()) - {t.Originator() for t in self.DealPackage().Trades()}))
        return {'commit': toCommit,
                'delete': toDelete}
 
    def UpdateSpotReference(self, *args):
        if self.currency1 and self.currency2:
            ccyPair = self.currency1.CurrencyPair(self.currency2)
            if ccyPair:
                isInvert = self.currency1 == ccyPair.Currency1()
                self.referencePrice = ccyPair.SpotPrice(ccyPair.SpotDate(self.tradeTime), isInvert)
                self.price = self.referencePrice
                
    def CustomPanes(self):
        return self.GetCustomPanesFromExtValue("CustomPanes_FxRatioParForward")
        
    def TransformPeriodToDate(self, attributeName, dateOrPeriod):
        date = dateOrPeriod
        if acm.Time().PeriodSymbolToDate(dateOrPeriod):
            date = self.Instruments().First().ExpiryDateFromPeriod(dateOrPeriod)
        return date
        
    def LeadTrade(self):
        return self.TradeAt('Default')


def StartFXRatioParForward(eii):
    acm.UX().SessionManager().StartApplication('Deal Package', 'FXRatioParForward') 


    

...

  FXRatioParForwardUtils
import acm
import math

def GetTradePoints(deco):
    if (deco.Instrument().InsType() == 'Curr') and deco.CurrencyPair():
        return (deco.Price() - deco.ReferencePrice()) / deco.CurrencyPair().PointValue()
    
def SetTradePoints(deco, points):
    if (deco.Instrument().InsType() == 'Curr') and deco.CurrencyPair():
        deco.Price = deco.ReferencePrice() + points * deco.CurrencyPair().PointValue()

def GetTradeForwardDays(trade):
    if trade.Instrument().InsType() == 'Curr':
        return acm.Time.DateDifference(trade.ValueDay(), trade.TradeTime())
    
def SetTradeForwardDays(trade, days):
    if trade.Instrument().InsType() == 'Curr':
        if trade.Currency():
            if days>=0:
                deco = acm.FBusinessLogicDecorator.WrapObject(trade)
                newDate = acm.Time.DateAddDelta(deco.TradeTime(), 0, 0, days)
                deco.ValueDay = newDate  
                isInvert = trade.Instrument() == ccyPair.Currency1()
                px = trade.CurrencyPair().SpotPrice(deco.ValueDay(), isInvert)
                deco.Price = acm.GetFunction("round", 2)(px, FxDecimals(trade.CurrencyPair()))

def FxDecimals(currPair):
    if currPair:
        pointValue = currPair.PointValue()
    else:
        pointValue = 0.0001
    return 2+int(-math.log10(pointValue))

...

}

