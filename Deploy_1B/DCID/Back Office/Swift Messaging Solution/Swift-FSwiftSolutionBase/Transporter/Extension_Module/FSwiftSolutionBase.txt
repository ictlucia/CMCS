#
# Front Arena exported extension module.
# source          ""
# timestamp (utc) "2023-02-02 11:10:18.0"
# ***** DO NOT EDIT! *****
#
name        "FSwiftSolutionBase"
description "FSwiftSolutionBase"

groups {
}

decls[FColumnDefinition] {
  "ConfirmationSwiftInMsgTagValue" ( "sheet columns.confirmationsheet" ) "";
  "ConfirmationSwiftOutMsgTagValue" ( "sheet columns.confirmationsheet" ) "";
  "SettlementSwiftInMsgTagValue" ( "sheet columns.settlementsheet" ) "";
  "SettlementSwiftOutMsgTagValue" ( "sheet columns.settlementsheet" ) "";
  "TradeSwiftInMsgTagValue" ( "sheet columns.tradesheet" ) "";
}

clx FTradingSheet [FColumnDefinition] {
  ConfirmationSwiftInMsgTagValue =
  Description=Value of selected tags in Swift message
  ExtensionAttribute=IncomingSwiftConfirmationTagValue
  GroupLabel=Incoming Swift Message
  Name=Incoming Confirmation Swift Message Tags
  Parameters=IncomingSwiftConfirmationParameter


  ConfirmationSwiftOutMsgTagValue =
  Description=Value of selected tags in Swift message
  ExtensionAttribute=OutgoingSwiftConfirmationTagValue
  GroupLabel=Outgoing Swift Message
  Name=Outgoing Confirmation Swift Message Tags
  Parameters=OutgoingSwiftConfirmationParameter


  Parameterize In Swift Confirmation Param =
  ExtensionAttribute=ConfirmationSwiftInParams
  Name=Swift Tag
  Save=Enabled


  Parameterize In Swift Settle Param =
  ExtensionAttribute=SettlementSwiftInParams
  Name=Swift Tag
  Save=Enabled


  Parameterize In Swift Trade Param =
  ExtensionAttribute=TradeSwiftInParams
  Name=Swift Tag
  Save=Enabled


  Parameterize Out Swift Confirmation Param =
  ExtensionAttribute=ConfirmationSwiftOutParams
  Name=Swift Tag
  Save=Enabled


  Parameterize Out Swift Settlement Param =
  ExtensionAttribute=SettlementSwiftOutParams
  Name=Swift Tag
  Save=Enabled


  SettlementSwiftInMsgTagValue =
  Description=Value of selected tags in Swift message
  ExtensionAttribute=IncomingSwiftSettlementTagValue
  GroupLabel=Incoming Swift Message
  Name=Incoming Settlement Swift Message Tags
  Parameters=IncomingSwiftSettlementParameter


  SettlementSwiftOutMsgTagValue =
  Description=Value of selected tags in Swift message
  ExtensionAttribute=OutgoingSwiftSettlementTagValue
  GroupLabel=Outgoing Swift Message
  Name=Outgoing Settlement Swift Message Tags
  Parameters=OutgoingSwiftSettlementParameter


  TradeSwiftInMsgTagValue =
  Description=Value of selected tags in Swift message
  ExtensionAttribute=IncomingSwiftTradeTagValue
  GroupLabel=Incoming Swift Message
  Name=Incoming Trade Swift Message Tags
  Parameters=IncomingSwiftTradeParameter


}

decls[FColumnParameterDefinition] {
}

clx FObject [FColumnParameterDefinition] {
  IncomingSwiftConfirmationParameter =
  ColumnId=Parameterize In Swift Confirmation Param
  Domain=EnumSwiftTagNamesConfirmationIn
  GroupLabel=Swift Message Tag Value


  IncomingSwiftSettlementParameter =
  ColumnId=Parameterize In Swift Settle Param
  Domain=EnumSwiftTagNamesSettlementIn
  GroupLabel=Swift Message Tag Value


  IncomingSwiftTradeParameter =
  ColumnId=Parameterize In Swift Trade Param
  Domain=EnumSwiftTagNamesTradeIn
  GroupLabel=Swift Message Tag Value


  OutgoingSwiftConfirmationParameter =
  ColumnId=Parameterize Out Swift Confirmation Param
  Domain=EnumSwiftTagNamesConfirmationOut
  GroupLabel=Swift Message Tag Value


  OutgoingSwiftSettlementParameter =
  ColumnId=Parameterize Out Swift Settlement Param
  Domain=EnumSwiftTagNamesSettlementOut
  GroupLabel=Swift Message Tag Value


}

decls[FCommandExtension] {
  "Insert Docked Items" ( "active commands" ) "";
  "Pairing View" ( "active commands" ) "";
  "Save Sheet Templates" ( "active commands" ) "";
  "Swift Viewer" ( "active commands" ) "";
  "SwiftViewerGUI" ( "active commands" ) "";
  "SwiftViewerGUI.Category.Actions" ( "active commands" ) "";
  "SwiftViewerGUI.Category.Actions.Panel.Actions" ( "active commands" ) "";
  "SwiftViewerGUI.clearGUI" ( "active commands" ) "";
  "SwiftViewerGUI.findItem" ( "active commands" ) "";
  "SwiftViewerGUI.Global" ( "active commands" ) "";
}

clx CInsDefAppFrame [FCommandExtension] {
  Category.Extensions =
  ChildOrder=Category.Extensions.Panel.SWIFT


  Category.Extensions.Panel.SWIFT =
  Category=Category.Extensions
  ChildOrder=Category.Extensions.Panel.SWIFT.MenuButton.SWIFT
  RibbonLabel=SWIFT
  Type=Panel


  Category.Extensions.Panel.SWIFT.MenuButton.SWIFT =
  Category=Category.Extensions
  ChildOrder=Send Narrative;View Outgoing Narrative
  icon=ActionList
  LargeIcon=Yes
  Panel=Category.Extensions.Panel.SWIFT
  RibbonLabel=SWIFT
  Type=MenuButton


}

clx FBackOfficeManagerFrame [FCommandExtension] {
  Insert Docked Items =
  icon=InsertItems
  LargeIcon=Yes


  Pairing View =
  icon=SettlementMgr


  Save Sheet Templates =
  icon=SaveAll
  LargeIcon=Yes


  SwiftViewerGUI =
  icon=swift


}

clx FUxLayoutApplicationFrame [FCommandExtension] {
  SwiftViewerGUI.Category.Actions =
  ChildOrder=SwiftViewerGUI.Category.Actions.Panel.Actions
  RibbonLabel=Actions
  SubType=SwiftViewerGUI
  Type=Category


  SwiftViewerGUI.Category.Actions.Panel.Actions =
  Category=SwiftViewerGUI.Category.Actions
  ChildOrder=SwiftViewerGUI.clearGUI;SwiftViewerGUI.findItem
  RibbonLabel=Actions
  SubType=SwiftViewerGUI
  Type=Panel


  SwiftViewerGUI.Category.dummy =
  ChildOrder=SwiftViewerGUI.Category.dummy.Panel.dummy #Do Not Remove, this hides the unnessesory menus on SwiftViewerGUI
  RibbonLabel=dummy
  SubType=SwiftViewerGUI
  Type=Category


  SwiftViewerGUI.Category.dummy.Panel.dummy =
  Category=SwiftViewerGUI.Category.dummy #Do Not Remove, this hides the unnessesory menus on SwiftViewerGUI
  RibbonLabel=dummy
  SubType=SwiftViewerGUI
  Type=Panel


  SwiftViewerGUI.clearGUI =
  icon=Clear


  SwiftViewerGUI.findItem =
  icon=Find


  SwiftViewerGUI.Global =
  ChildOrder=SwiftViewerGUI.Category.Actions
  SubType=SwiftViewerGUI
  Type=Ribbon


}

decls[FCustomApplicationDefinition] {
}

clx FObject [FCustomApplicationDefinition] {
  SwiftViewerGridApplication =
  CreationFunction=FSwiftViewerGui.CreateApplicationInstance
  Name=SwiftViewerGUI
  ObjectTypes=
  ProfileComponent=


}

decls[FCustomFunction] {
}

clx FObject [FCustomFunction] {
  get_bpr_from_acm_object =
  Definition=get_bpr_from_acm_object(FObject conf): FBusinessProcess
  Function=FSwiftMLUtils.get_business_process


  get_confirmation_swift_tag_value_in =
  Definition=get_confirmation_swift_tag_value_in(EnumSwiftTagNamesConfirmationIn swiftTags, FObject conf): string
  Function=FSwiftMLUtils.get_confirmation_swift_tag_value_in


  get_confirmation_swift_tag_value_out =
  Definition=get_confirmation_swift_tag_value_out(EnumSwiftTagNamesConfirmationOut swiftTags, FObject conf): string
  Function=FSwiftMLUtils.get_confirmation_swift_tag_value_out


  get_ext_obj_seqnbr =
  Definition=get_ext_obj_seqnbr(FObject conf): string
  Function=FSwiftMLUtils.get_ext_obj_seqnbr


  get_settlement_swift_tag_value_in =
  Definition=get_settlement_swift_tag_value_in(EnumSwiftTagNamesSettlementIn swiftTags, FObject conf, FObject settId): string
  Function=FSwiftMLUtils.get_settlement_swift_tag_value_in


  get_settlement_swift_tag_value_out =
  Definition=get_settlement_swift_tag_value_out(EnumSwiftTagNamesSettlementOut swiftTags, FObject conf, FObject settId): string
  Function=FSwiftMLUtils.get_settlement_swift_tag_value_out


  get_trade_swift_tag_value_in =
  Definition=get_trade_swift_tag_value_in(EnumSwiftTagNamesTradeIn swiftTags, FObject conf): string
  Function=FSwiftMLUtils.get_trade_swift_tag_value_in


}

decls[FEnumFormatter] {
}

clx FObject [FEnumFormatter] {
  EnumSwiftTagNamesConfirmationIn =
  Enum=20_SendersReference;20C_SendersReference;36B_Quantity;19A_SettlementAmount;98A_PreparationDate;82A_PartyA_A;87A_PartyB_A;30T_TradeDate;30V_ValueDate;36_ExchangeRate;30_DateContractAgreedAmended;31G_ExpiryDetails;31E_FinalSettlementDate;17R_PartyARole;ErrorText;BusinessProcessCurrentState;StateChart;32F_QunatityOfTheCommodity;26C_IdentificationOfCommodity;30_ValueDate;MTTypes;SettlementState


  EnumSwiftTagNamesConfirmationOut =
  Enum=20_SendersReference;20C_SendersReference;36B_Quantity;19A_SettlementAmount;98A_PreparationDate;82A_PartyA_A;87A_PartyB_A;30T_TradeDate;30V_ValueDate;36_ExchangeRate;30_DateContractAgreedAmended;31G_ExpiryDetails;31E_FinalSettlementDate;17R_PartyARole;ErrorText;BusinessProcessCurrentState;StateChart;32F_QunatityOfTheCommodity;26C_IdentificationOfCommodity;30_ValueDate;79_Narrative;MTTypes


  EnumSwiftTagNamesSettlementIn =
  Enum=32A_ValueDateCurrencyCodeAmount;ErrorText;21_RelatedReference;60F_OpeningBalance;36B_QuantityOfFinancialInstrument;98A_DateTime_A;35B_IdentificationOfFinancialInstrument;StateChart;BusinessProcessCurrentState;25D_StatusCode;24B_ReasonCode;pacs004T2IntrBkSttlmAmt_Difference;DerivedBusinessProcessCurrentState;DerivedStateChart;MTTypes;SettlementState


  EnumSwiftTagNamesSettlementOut =
  Enum=BusinessProcessCurrentState;ErrorText;36B_QuantityOfFinancialInstrument;98A_DateTime_A;35B_IdentificationOfFinancialInstrument;32A_DateCurrencyAmount;30_ValueDate;79_Narrative;11S_MTAndDateOfTheOriginalMessage;32A_ValueDateCurrencyInterbankSettledAmount;StateChart;23_FurtherIdentification;32F_QunatityOfTheCommodity;26C_IdentificationOfCommodity;79_Narrative;NackStatus;NackStatusCode;MTTypes


  EnumSwiftTagNamesTradeIn =
  Enum=BusinessProcessCurrentState;StateChart;MTTypes


}

decls[FExtensionAttribute] {
}

clx FConfirmation [FExtensionAttribute] {
  Conf_in_ext_obj_nbr = getObject("FClass", "FExternalObject").Select(Conf_in_ext_obj_query);
  Conf_in_ext_obj_query = "confirmation = " + object.Oid + " and integrationType like \'SwiftReader\'";
  Conf_out_ext_obj_nbr = getObject("FClass", "FExternalObject").Select(Conf_out_ext_obj_query);
  Conf_out_ext_obj_query = "confirmation = " + object.Oid + " and integrationType like \'SwiftWriter\'";
  ConfInBPR = getObject("FClass", "FBusinessProcess").Select(ConfInBPRQuery);
  ConfInBPRQuery = "subject_seqnbr in " + get_ext_obj_seqnbr(Conf_in_ext_obj_nbr) + " and subject_type = " + getObject("FEnumeration", "enum(B92RecordType)").Enumeration("ExternalObject");
  ConfirmationSwiftInParams = nil;
  ConfirmationSwiftOutParams = nil;
  ConfOutBPR = getObject("FClass", "FBusinessProcess").Select(ConfOutBPRQuery);
  ConfOutBPRQuery = "subject_seqnbr in " + get_ext_obj_seqnbr(Conf_out_ext_obj_nbr) + " and subject_type = " + getObject("FEnumeration", "enum(B92RecordType)").Enumeration("ExternalObject");
  IncomingSwiftConfirmationTagValue = get_confirmation_swift_tag_value_in(ConfirmationSwiftInParams, ConfInBPR);
  OutgoingSwiftConfirmationTagValue = get_confirmation_swift_tag_value_out(ConfirmationSwiftOutParams, ConfOutBPR);
}

clx FSettlement [FExtensionAttribute] {
  IncomingSwiftSettlementTagValue = get_settlement_swift_tag_value_in(SettlementSwiftInParams, SettleInBPR, object.Oid);
  OutgoingSwiftSettlementTagValue = get_settlement_swift_tag_value_out(SettlementSwiftOutParams, SettleOutBPR, object.Oid);
  Settle_in_ext_obj_nbr = getObject("FClass", "FExternalObject").Select(Settle_in_ext_obj_query);
  Settle_in_ext_obj_query = "settlement = " + object.Oid + " and integrationType like \'SwiftReader\'";
  Settle_out_ext_obj_nbr = getObject("FClass", "FExternalObject").Select(Settle_out_ext_obj_query);
  Settle_out_ext_obj_query = "settlement = " + object.Oid + " and integrationType like \'SwiftWriter\'";
  SettleInBPR = getObject("FClass", "FBusinessProcess").Select(SettleInBPRQuery);
  SettleInBPRQuery = "subject_seqnbr in " + get_ext_obj_seqnbr(Settle_in_ext_obj_nbr) + " and subject_type = " + getObject("FEnumeration", "enum(B92RecordType)").Enumeration("ExternalObject");
  SettlementSwiftInParams = nil;
  SettlementSwiftOutParams = nil;
  SettleOutBPR = getObject("FClass", "FBusinessProcess").Select(SettleOutBPRQuery);
  SettleOutBPRQuery = "subject_seqnbr in " + get_ext_obj_seqnbr(Settle_out_ext_obj_nbr) + " and subject_type = " + getObject("FEnumeration", "enum(B92RecordType)").Enumeration("ExternalObject");
}

clx FTradeRow [FExtensionAttribute] {
  IncomingSwiftTradeTagValue = get_trade_swift_tag_value_in(TradeSwiftInParams, TradeInBPR);
  Trade_in_ext_obj_nbr = getObject("FClass", "FExternalObject").Select(Trade_in_ext_obj_query);
  Trade_in_ext_obj_query = "trade = " + object.Trade.Oid + " and integrationType like \'SwiftReader\'";
  TradeInBPR = getObject("FClass", "FBusinessProcess").Select(TradeInBPRQuery);
  TradeInBPRQuery = "subject_seqnbr in " + get_ext_obj_seqnbr(Trade_in_ext_obj_nbr) + " and subject_type = " + getObject("FEnumeration", "enum(B92RecordType)").Enumeration("ExternalObject");
  TradeSwiftInParams = nil;
}

decls[FMenuExtension] {
}

clx CInsDefAppFrame [FMenuExtension] {
  SWIFTSendNarrative =
  CreateFunction=FMTNarrativeMessageGUI.send_narrative_msg_gui
  DisplayName=Send Narrative
  MenuType=Application
  Parameter=eii
  RibbonPosition=Extensions/SWIFT/SWIFT


  SWIFTViewNarrative =
  CreateFunction=FMTNarrativeMessageGUI.view_outgoing_narrative_msg_gui
  DisplayName=View Outgoing Narrative
  MenuType=Application
  Parameter=eii
  RibbonPosition=Extensions/SWIFT/SWIFT


}

clx CPartyDefinitionFrame [FMenuExtension] {
  SWIFTSendNarrative =
  CreateFunction=FMTNarrativeMessageGUI.send_narrative_msg_gui
  DisplayName=Send Narrative
  MenuType=Application
  Parameter=eii
  RibbonPosition=Extensions/SWIFT/SWIFT


  SWIFTViewAllNarrative =
  CreateFunction=FMTNarrativeMessageGUI.view_all_narrative_msg_gui
  DisplayName=View All Narrative
  MenuType=Application
  Parameter=eii
  RibbonPosition=Extensions/SWIFT/SWIFT


  SWIFTViewIncomingNarrative =
  CreateFunction=FMTNarrativeMessageGUI.view_incoming_narrative_msg_gui
  DisplayName=View Incoming Narrative
  MenuType=Application
  Parameter=eii
  RibbonPosition=Extensions/SWIFT/SWIFT


  SWIFTViewNarrative =
  CreateFunction=FMTNarrativeMessageGUI.view_outgoing_narrative_msg_gui
  DisplayName=View Outgoing Narrative
  MenuType=Application
  Parameter=eii
  RibbonPosition=Extensions/SWIFT/SWIFT


}

clx FBackOfficeManagerFrame [FMenuExtension] {
  Insert Docked Items =
  CreateFunction=FMTDisplayHelpers.create_insert_items_menu_item_for_combined_pairing_view
  DisplayName=Insert Docked Items
  MenuType=Application
  RibbonPosition=Home/Insert


  PairingView =
  CreateFunction=FMTDisplayHelpers.create_menu_item_for_combined_pairing_view
  DisplayName=Pairing View
  MenuType=Application


  SaveSheetTemplates =
  CreateFunction=FMTDisplayHelpers.create_combined_pairing_view_save_sheet_template
  DisplayName=Save Sheet Templates
  MenuType=Application


  SwiftViewerGui =
  CreateFunction=FSwiftMLUtils.create_menu_item_for_swiftviewergui_ribbon
  DisplayName=SwiftViewerGUI
  MenuType=Application


}

clx FBusinessProcessSheet [FMenuExtension] {
  IncomingSwiftBPR =
  DisplayName=Incoming Message
  MenuType=GridRowHeader
  SubMenuCreateFunction=FMTDisplayHelpers.IncomingBPRSubMenuItemCreate


  SwiftBPR =
  DisplayName=Outgoing Message
  MenuType=GridRowHeader
  SubMenuCreateFunction=FSwiftWriterUtils.BPRSubMenuItemCreate


}

clx FConfirmationSheet [FMenuExtension] {
  SwiftConfirmation =
  DisplayName=Outgoing Message
  MenuType=GridRowHeader
  SubMenuCreateFunction=FSwiftWriterUtils.SubMenuItemCreate


}

clx FSettlementSheet [FMenuExtension] {
  SwiftSettlement =
  DisplayName=Outgoing Message
  MenuType=GridRowHeader
  SubMenuCreateFunction=FSwiftWriterUtils.SubMenuItemCreate


}

decls[FNumFormatter] {
}

clx FObject [FNumFormatter] {
  SwiftFiveDecimalPrecision =
  DenominatedValueDateTimeFormatter=
  DigitGrouping=
  DigitGroupingSymbol=
  Epsilon=
  Expression=
  Format=
  Fractions=
  InputScaleFactor=
  InputScaleFactorLimit=
  Inverse=
  MaximumSignificantDigits=15
  MinimumSignificantDigits=
  Mnemonic=
  NumDecimals=5
  ScaleFactor=
  ShowInf=
  Tick=
  TruncateTrailingZeros=
  USTreasuryInput=


}

decls[FParameters] {
}

clx FObject [FParameters] {
  FMTx99In_Config =
  EligibilityQuery=Confirmations_x99
  Match={}
  NarrativeIn_AMBReceiver=NARR_IN_MSG_READER
  Pair={}
  PairingViewAcmObjColumns=TradeOid, ConfirmationStatus, EventType, TradeInsAddr, TradeCurr, TradeNominalAmount, TradeAcquirer, Counterparty, CounterpartyContact, TradeValueDay, Transport, ConfTemplateChlItem, DocumentIds, ConfirmationMTMessages, ConfInstruction, BusinessProcessIdConf, BusinessProcessStateConf, StateChartNameConf
  PairingViewAcmObjQuery=Narrative_Message_For_Confirmations
  PairingViewBPRColumns=TransactionReferenceNumber, RelatedReference
  PairingViewBPRQuery=MTx99_PairedWithPartyBPR
  StateChart=FSwiftNarrativeIn
  UnpairedBPRQuery=MTx99_UnpairedBPR


  FMTx99Out_Config =
  MT999_Confirmation={'Default':'Attn: %s Trade confirmation dated %s has passed the cut-off, and we ask you to immediately attend to it. Regards, OperationsTeam' % (OBJECT.Trade().Counterparty().Name(), datetime.datetime.fromtimestamp(OBJECT.CreateTime()))}
  MT999_Settlement={'Default': 'Attn: %s Trade Settlement dated %s has passed the cut-off, and we ask you to immediately attend to it. Regards, OperationsTeam' %   (OBJECT.Trade().Counterparty().Name(), datetime.datetime.fromtimestamp(OBJECT.CreateTime()))}
  StateChart=FSwiftNarrativeOut
  UseOperationsXML=False


  FSwiftDataPrepNotifyConfig =
  LogLevel=INFO #INFO, DEBUG, ERROR, WARN
  NotificationLevel=TRACK #TRACK, DEBUG, WARNING, ERROR, SUCCESS
  NotificationMedia=OFF #OFF, PRIME_LOG, PRIME_LOG_TRANSIENT
  NotifyUser=


  FSwiftReaderConfig =
  AMBReceiver=SWIFT_READER
  AMBReceiverSubject=SWIFT_MESSAGE
  Modules=['FFXMMConfirmationInMain', 'FIRDConfirmationInMain', 'FSecuritySettlementInMain', 'FCashConfirmationInMain', 'FCorporateActionsInMain', 'FCommodityConfirmationInMain', 'FCashSettlementMX_CBPRPlusInMain'] # FCashSettlementMX_CBPRPlusInMain FCashSettlementMX_T2InMain, 'FFXMMConfirmationInMain', 'FIRDConfirmationInMain', 'FSecuritySettlementInMain', 'FCashConfirmationInMain', 'FCorporateActionsInMain', 'FCommodityConfirmationInMain'
  SaveAMBMessageToExternalObject=True


  FSwiftReaderNotifyConfig =
  LogLevel=INFO #INFO, DEBUG, ERROR, WARN
  NotificationLevel=TRACK #TRACK, DEBUG, WARNING, ERROR, SUCCESS
  NotificationMedia=OFF #OFF, PRIME_LOG, PRIME_LOG_TRANSIENT
  NotifyUser=


  FSwiftSolutionConfig =
  AMBAddress=localhost:9100
  AMBASenderSource=BO
  AMBPassword=
  AMBUser=mb
  KerberosPrincipal=
  SettlementStateStateChart=FSwift_SettlementState
  SwiftIncomingApplication=SwiftReader
  SwiftOutgoingApplication=SwiftWriter
  version=3.6.3-0.5.6048


  FSwiftWriterAMBConfig =
  AMBSender=SWIFT_WRITER_SENDER


  FSwiftWriterConfig =
  AckNakReader=SWIFT_ACKNOWLEDGEMENT
  AckNakSubject=ACKNOWLEDGEMENT
  AMBSender=SWIFT_WRITER
  Modules=['FFXMMConfirmationOutMain', 'FIRDConfirmationOutMain', 'FSecuritySettlementOutMain','FCashOutMain', 'FCommodityConfirmationOutMain', 'FCommoditySettlementOutMain', 'FCollateralOutMain','FCashCBPRPlusOutMain']
  NarrativeSubject=SWIFT_NARRATIVE_SUBJECT
  ReceiverBICLoopBack=
  RoundPerCurrency={'EUR':2, 'USD':2, 'JPY':0, 'KRW':0, 'TRY':0, 'KWD':3, 'AED':2, 'ARS':2, 'AUD':2, 'BAM':2, 'BRL':2, 'BGN':2, 'CAD':2, 'CNY':2, 'CZK':2, 'DKK':2, 'GBP':2, 'HKD':2, 'HRK':2, 'HUF':2, 'ISK':2, 'INR':2, 'IDR':2, 'LVL':2, 'MYR':2, 'MXN':2, 'MXV':2, 'NZD':2, 'NOK':2, 'PHP':2, 'SAR':2, 'SGD':2, 'ZAR':2, 'SEK':2, 'CHF':2, 'TWD':2, 'THB':2}
  SenderBICLoopBack=
  SwiftLoopBack=False
  version=3.6.3-0.5.6048


  FSwiftWriterNotifyConfig =
  LogLevel=INFO #INFO, DEBUG, ERROR, WARN
  NotificationLevel=TRACK #TRACK, DEBUG, WARNING, ERROR, SUCCESS
  NotificationMedia=OFF #OFF, PRIME_LOG, PRIME_LOG_TRANSIENT
  NotifyUser=
  SMTPServer=
  UserEmails=


}

decls[FPythonCode] {
  "FSwiftCashCBPRPlusInstalledComponent" ( "installed component" ) "";
  "FSwiftCashConfirmationInstalledComponent" ( "installed component" ) "";
  "FSwiftCashInstalledComponent" ( "installed component" ) "";
  "FSwiftCashMXInstalledComponent" ( "installed component" ) "";
  "FSwiftCashRTGSInstalledComponent" ( "installed component" ) "";
  "FSwiftCommodityInstalledComponent" ( "installed component" ) "";
  "FSwiftCorporateActionsInstalledComponent" ( "installed component" ) "";
  "FSwiftCustomMessageInstalledComponent" ( "installed component" ) "";
  "FSwiftFundBrokerageInstalledComponent" ( "installed component" ) "";
  "FSwiftFundTradingInstalledComponent" ( "installed component" ) "";
  "FSwiftFXMMConfirmationInstalledComponent" ( "installed component" ) "";
  "FSwiftIRDConfirmationInstalledComponent" ( "installed component" ) "";
  "FSwiftSecuritySettlementInstalledComponent" ( "installed component" ) "";
  "FSwiftSecuritySettlementInstructionInInstalledComponent" ( "installed component" ) "";
  "FSwiftSecuritySettlementMXInstalledComponent" ( "installed component" ) "";
  "FSwiftStatementOfHoldingInstalledComponent" ( "installed component" ) "";
}

clx FObject [FPythonCode] {
  ahV10
# -*- coding: utf-8 -*-
# PyXB bindings for NM:a307c9a32ee2e96d4c7107d92230e20e0fdc0a15
# Generated 2021-05-28 19:06:35.967955 by PyXB version 1.2.6 using Python 3.7.4.final.0
# Namespace urn:swift:xsd:$ahV10

from __future__ import unicode_literals
import pyxb
import pyxb.binding
import pyxb.binding.saxer
import io
import pyxb.utils.utility
import pyxb.utils.domutils
import sys
import pyxb.utils.six as _six

# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:b906366c-bfb9-11eb-93e9-e45e379f6158')

# Version of PyXB used to generate the bindings
_PyXBVersion = '1.2.6'
# Generated bindings are not compatible across PyXB versions
if pyxb.__version__ != _PyXBVersion:
    raise pyxb.PyXBVersionError(_PyXBVersion)

# A holder for module-level binding classes so we can access them from
# inside class definitions where property names may conflict.
_module_typeBindings = pyxb.utils.utility.Object()

# Import bindings for namespaces imported into schema
import pyxb.binding.datatypes

# NOTE: All namespace declarations are reserved within the binding
Namespace = pyxb.namespace.NamespaceForURI('urn:swift:xsd:$ahV10', create_if_missing=True)
Namespace.configureCategories(['typeBinding', 'elementBinding'])


def CreateFromDocument(xml_text, default_namespace=None, location_base=None):
    """Parse the given XML and use the document element to create a
    Python instance.

    @param xml_text An XML document.  This should be data (Python 2
    str or Python 3 bytes), or a text (Python 2 unicode or Python 3
    str) in the L{pyxb._InputEncoding} encoding.

    @keyword default_namespace The L{pyxb.Namespace} instance to use as the
    default namespace where there is no default namespace in scope.
    If unspecified or C{None}, the namespace of the module containing
    this function will be used.

    @keyword location_base: An object to be recorded as the base of all
    L{pyxb.utils.utility.Location} instances associated with events and
    objects handled by the parser.  You might pass the URI from which
    the document was obtained.
    """

    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement, default_namespace=default_namespace)
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    saxer = pyxb.binding.saxer.make_parser(fallback_namespace=default_namespace, location_base=location_base)
    handler = saxer.getContentHandler()
    xmld = xml_text
    if isinstance(xmld, _six.text_type):
        xmld = xmld.encode(pyxb._InputEncoding)
    saxer.parse(io.BytesIO(xmld))
    instance = handler.rootObject()
    return instance


def CreateFromDOM(node, default_namespace=None):
    """Create a Python instance from the given DOM node.
    The node tag must correspond to an element declaration in this module.

    @deprecated: Forcing use of DOM interface is unnecessary; use L{CreateFromDocument}."""
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return pyxb.binding.basis.element.AnyCreateFromDOM(node, default_namespace)


# Atomic simple type: {urn:swift:xsd:$ahV10}ISODateTime
class ISODateTime(pyxb.binding.datatypes.dateTime):
    """ISODateTimeA particular point in the progression of time defined by a mandatory date and a mandatory time component, expressed in either UTC time format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in "XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004" which is aligned with ISO 8601.
Note on the time format:
1) beginning / end of calendar day
00:00:00 = the beginning of a calendar day
24:00:00 = the end of a calendar day
2) fractions of second in time format
Decimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ISODateTime')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E\\Downloads\\$ahV10.xsd', 109, 4)
    _Documentation = 'ISODateTimeA particular point in the progression of time defined by a mandatory date and a mandatory time component, expressed in either UTC time format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in "XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004" which is aligned with ISO 8601.\nNote on the time format:\n1) beginning / end of calendar day\n00:00:00 = the beginning of a calendar day\n24:00:00 = the end of a calendar day\n2) fractions of second in time format\nDecimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed.'


ISODateTime._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'ISODateTime', ISODateTime)
_module_typeBindings.ISODateTime = ISODateTime


# Atomic simple type: {urn:swift:xsd:$ahV10}Max140Text
class Max140Text(pyxb.binding.datatypes.string):
    """Max140TextSpecifies a character string with a maximum length of 140 characters."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Max140Text')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E\\Downloads\\$ahV10.xsd', 122, 4)
    _Documentation = 'Max140TextSpecifies a character string with a maximum length of 140 characters.'


Max140Text._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
Max140Text._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(140))
Max140Text._InitializeFacetMap(Max140Text._CF_minLength,
                               Max140Text._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'Max140Text', Max140Text)
_module_typeBindings.Max140Text = Max140Text


# Atomic simple type: {urn:swift:xsd:$ahV10}Max30Text
class Max30Text(pyxb.binding.datatypes.string):
    """Max30TextSpecifies a character string with a maximum length of 30  characters."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Max30Text')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E\\Downloads\\$ahV10.xsd', 132, 4)
    _Documentation = 'Max30TextSpecifies a character string with a maximum length of 30  characters.'


Max30Text._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(30))
Max30Text._InitializeFacetMap(Max30Text._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'Max30Text', Max30Text)
_module_typeBindings.Max30Text = Max30Text


# Atomic simple type: {urn:swift:xsd:$ahV10}Max4Text
class Max4Text(pyxb.binding.datatypes.string):
    """Max4TextSpecifies a character string with a maximum length of 4 characters."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Max4Text')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E\\Downloads\\$ahV10.xsd', 141, 4)
    _Documentation = 'Max4TextSpecifies a character string with a maximum length of 4 characters.'


Max4Text._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
Max4Text._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(4))
Max4Text._InitializeFacetMap(Max4Text._CF_minLength,
                             Max4Text._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'Max4Text', Max4Text)
_module_typeBindings.Max4Text = Max4Text


# Complex type {urn:swift:xsd:$ahV10}ApplicationHeader with content type ELEMENT_ONLY
class ApplicationHeader(pyxb.binding.basis.complexTypeDefinition):
    """ApplicationHeaderThe application header is the first element of the RequestPayload element. The payload contains the document which contains the business document. This may be an ISO 20022 message or a SWIFT proprietary message."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ApplicationHeader')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E\\Downloads\\$ahV10.xsd', 19, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {urn:swift:xsd:$ahV10}From uses Python identifier From
    __From = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'From'), 'From',
                                                     '__urnswiftxsdahV10_ApplicationHeader_urnswiftxsdahV10From', False,
                                                     pyxb.utils.utility.Location(
                                                         'C:\\Users\\E\\Downloads\\$ahV10.xsd', 25, 12), )

    From = property(__From.value, __From.set, None, 'FromIdentifies the application that has created the document.')

    # Element {urn:swift:xsd:$ahV10}To uses Python identifier To
    __To = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'To'), 'To',
                                                   '__urnswiftxsdahV10_ApplicationHeader_urnswiftxsdahV10To', False,
                                                   pyxb.utils.utility.Location(
                                                       'C:\\Users\\E\\Downloads\\$ahV10.xsd', 31, 12), )

    To = property(__To.value, __To.set, None,
                  'ToIdentifies the receiving application for which the document is created.')

    # Element {urn:swift:xsd:$ahV10}SvcName uses Python identifier SvcName
    __SvcName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SvcName'), 'SvcName',
                                                        '__urnswiftxsdahV10_ApplicationHeader_urnswiftxsdahV10SvcName',
                                                        False, pyxb.utils.utility.Location(
            'C:\\Users\\E\\Downloads\\$ahV10.xsd', 37, 12), )

    SvcName = property(__SvcName.value, __SvcName.set, None,
                       'ServiceNameIdentifies the SWIFTNet service to which the message belongs.')

    # Element {urn:swift:xsd:$ahV10}MsgName uses Python identifier MsgName
    __MsgName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MsgName'), 'MsgName',
                                                        '__urnswiftxsdahV10_ApplicationHeader_urnswiftxsdahV10MsgName',
                                                        False, pyxb.utils.utility.Location(
            'C:\\Users\\E\\Downloads\\$ahV10.xsd', 43, 12), )

    MsgName = property(__MsgName.value, __MsgName.set, None,
                       'MessageNameA unique structured identifier that identifies the message.')

    # Element {urn:swift:xsd:$ahV10}MsgRef uses Python identifier MsgRef
    __MsgRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MsgRef'), 'MsgRef',
                                                       '__urnswiftxsdahV10_ApplicationHeader_urnswiftxsdahV10MsgRef',
                                                       False, pyxb.utils.utility.Location(
            'C:\\Users\\E\\Downloads\\$ahV10.xsd', 49, 12), )

    MsgRef = property(__MsgRef.value, __MsgRef.set, None,
                      'MessageReferenceThe sending application defines this unique identifier for the message.')

    # Element {urn:swift:xsd:$ahV10}CrDate uses Python identifier CrDate
    __CrDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CrDate'), 'CrDate',
                                                       '__urnswiftxsdahV10_ApplicationHeader_urnswiftxsdahV10CrDate',
                                                       False, pyxb.utils.utility.Location(
            'C:\\Users\\E\\Downloads\\$ahV10.xsd', 55, 12), )

    CrDate = property(__CrDate.value, __CrDate.set, None,
                      'CreationDateTimeDate and time at which the message was created.')

    # Element {urn:swift:xsd:$ahV10}Dup uses Python identifier Dup
    __Dup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Dup'), 'Dup',
                                                    '__urnswiftxsdahV10_ApplicationHeader_urnswiftxsdahV10Dup', False,
                                                    pyxb.utils.utility.Location(
                                                        'C:\\Users\\E\\Downloads\\$ahV10.xsd', 61, 12), )

    Dup = property(__Dup.value, __Dup.set, None,
                   'DuplicateUsed when the sending application has already tried to send the document to the receiving application.')

    _ElementMap.update({
        __From.name(): __From,
        __To.name(): __To,
        __SvcName.name(): __SvcName,
        __MsgName.name(): __MsgName,
        __MsgRef.name(): __MsgRef,
        __CrDate.name(): __CrDate,
        __Dup.name(): __Dup
    })
    _AttributeMap.update({

    })


_module_typeBindings.ApplicationHeader = ApplicationHeader
Namespace.addCategoryObject('typeBinding', 'ApplicationHeader', ApplicationHeader)


# Complex type {urn:swift:xsd:$ahV10}DuplicateIndication with content type ELEMENT_ONLY
class DuplicateIndication(pyxb.binding.basis.complexTypeDefinition):
    """DuplicateIndicationReference to another message indicating that the containing message is a	duplicate of the referenced message."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DuplicateIndication')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E\\Downloads\\$ahV10.xsd', 69, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {urn:swift:xsd:$ahV10}Ref uses Python identifier Ref
    __Ref = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Ref'), 'Ref',
                                                    '__urnswiftxsdahV10_DuplicateIndication_urnswiftxsdahV10Ref', False,
                                                    pyxb.utils.utility.Location(
                                                        'C:\\Users\\E\\Downloads\\$ahV10.xsd', 75, 12), )

    Ref = property(__Ref.value, __Ref.set, None,
                   'ReferenceReference of the original message, in case this is a duplicate.')

    # Element {urn:swift:xsd:$ahV10}Info uses Python identifier Info
    __Info = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Info'), 'Info',
                                                     '__urnswiftxsdahV10_DuplicateIndication_urnswiftxsdahV10Info',
                                                     False, pyxb.utils.utility.Location(
            'C:\\Users\\E\\Downloads\\$ahV10.xsd', 81, 12), )

    Info = property(__Info.value, __Info.set, None, 'JustificationInformation about the duplicate.')

    _ElementMap.update({
        __Ref.name(): __Ref,
        __Info.name(): __Info
    })
    _AttributeMap.update({

    })


_module_typeBindings.DuplicateIndication = DuplicateIndication
Namespace.addCategoryObject('typeBinding', 'DuplicateIndication', DuplicateIndication)


# Complex type {urn:swift:xsd:$ahV10}EntityIdentification with content type ELEMENT_ONLY
class EntityIdentification(pyxb.binding.basis.complexTypeDefinition):
    """EntityIdentificationIdentification of a business entity, eg, corporate or financial institution."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EntityIdentification')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E\\Downloads\\$ahV10.xsd', 89, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {urn:swift:xsd:$ahV10}Type uses Python identifier Type
    __Type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Type'), 'Type',
                                                     '__urnswiftxsdahV10_EntityIdentification_urnswiftxsdahV10Type',
                                                     False, pyxb.utils.utility.Location(
            'C:\\Users\\E\\Downloads\\$ahV10.xsd', 95, 12), )

    Type = property(__Type.value, __Type.set, None, 'TypeType of identification, eg, BIC or URI.')

    # Element {urn:swift:xsd:$ahV10}Id uses Python identifier Id
    __Id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Id'), 'Id',
                                                   '__urnswiftxsdahV10_EntityIdentification_urnswiftxsdahV10Id', False,
                                                   pyxb.utils.utility.Location(
                                                       'C:\\Users\\E\\Downloads\\$ahV10.xsd', 101, 12), )

    Id = property(__Id.value, __Id.set, None, 'EntityIdentifierActual identification of the entity.')

    _ElementMap.update({
        __Type.name(): __Type,
        __Id.name(): __Id
    })
    _AttributeMap.update({

    })


_module_typeBindings.EntityIdentification = EntityIdentification
Namespace.addCategoryObject('typeBinding', 'EntityIdentification', EntityIdentification)

AppHdr = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AppHdr'), ApplicationHeader,
                                    location=pyxb.utils.utility.Location('C:\\Users\\E\\Downloads\\$ahV10.xsd',
                                                                         18, 4))
Namespace.addCategoryObject('elementBinding', AppHdr.name().localName(), AppHdr)

ApplicationHeader._AddElement(
    pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'From'), EntityIdentification,
                               scope=ApplicationHeader,
                               documentation='FromIdentifies the application that has created the document.',
                               location=pyxb.utils.utility.Location('C:\\Users\\E\\Downloads\\$ahV10.xsd', 25,
                                                                    12)))

ApplicationHeader._AddElement(
    pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'To'), EntityIdentification,
                               scope=ApplicationHeader,
                               documentation='ToIdentifies the receiving application for which the document is created.',
                               location=pyxb.utils.utility.Location('C:\\Users\\E\\Downloads\\$ahV10.xsd', 31,
                                                                    12)))

ApplicationHeader._AddElement(
    pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SvcName'), Max30Text, scope=ApplicationHeader,
                               documentation='ServiceNameIdentifies the SWIFTNet service to which the message belongs.',
                               location=pyxb.utils.utility.Location('C:\\Users\\E\\Downloads\\$ahV10.xsd', 37,
                                                                    12)))

ApplicationHeader._AddElement(
    pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MsgName'), Max30Text, scope=ApplicationHeader,
                               documentation='MessageNameA unique structured identifier that identifies the message.',
                               location=pyxb.utils.utility.Location('C:\\Users\\E\\Downloads\\$ahV10.xsd', 43,
                                                                    12)))

ApplicationHeader._AddElement(
    pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MsgRef'), Max30Text, scope=ApplicationHeader,
                               documentation='MessageReferenceThe sending application defines this unique identifier for the message.',
                               location=pyxb.utils.utility.Location('C:\\Users\\E\\Downloads\\$ahV10.xsd', 49,
                                                                    12)))

ApplicationHeader._AddElement(
    pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CrDate'), ISODateTime, scope=ApplicationHeader,
                               documentation='CreationDateTimeDate and time at which the message was created.',
                               location=pyxb.utils.utility.Location('C:\\Users\\E\\Downloads\\$ahV10.xsd', 55,
                                                                    12)))

ApplicationHeader._AddElement(
    pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Dup'), DuplicateIndication,
                               scope=ApplicationHeader,
                               documentation='DuplicateUsed when the sending application has already tried to send the document to the receiving application.',
                               location=pyxb.utils.utility.Location('C:\\Users\\E\\Downloads\\$ahV10.xsd', 61,
                                                                    12)))


def _BuildAutomaton():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton
    del _BuildAutomaton
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1,
                                metadata=pyxb.utils.utility.Location('C:\\Users\\E\\Downloads\\$ahV10.xsd', 25,
                                                                     12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1,
                                metadata=pyxb.utils.utility.Location('C:\\Users\\E\\Downloads\\$ahV10.xsd', 31,
                                                                     12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1,
                                metadata=pyxb.utils.utility.Location('C:\\Users\\E\\Downloads\\$ahV10.xsd', 37,
                                                                     12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1,
                                metadata=pyxb.utils.utility.Location('C:\\Users\\E\\Downloads\\$ahV10.xsd', 43,
                                                                     12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1,
                                metadata=pyxb.utils.utility.Location('C:\\Users\\E\\Downloads\\$ahV10.xsd', 61,
                                                                     12))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        ApplicationHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'From')),
        pyxb.utils.utility.Location('C:\\Users\\E\\Downloads\\$ahV10.xsd', 25, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ApplicationHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'To')),
                                             pyxb.utils.utility.Location('C:\\Users\\E\\Downloads\\$ahV10.xsd',
                                                                         31, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        ApplicationHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SvcName')),
        pyxb.utils.utility.Location('C:\\Users\\E\\Downloads\\$ahV10.xsd', 37, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        ApplicationHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MsgName')),
        pyxb.utils.utility.Location('C:\\Users\\E\\Downloads\\$ahV10.xsd', 43, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        ApplicationHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MsgRef')),
        pyxb.utils.utility.Location('C:\\Users\\E\\Downloads\\$ahV10.xsd', 49, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        ApplicationHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CrDate')),
        pyxb.utils.utility.Location('C:\\Users\\E\\Downloads\\$ahV10.xsd', 55, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(
        ApplicationHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Dup')),
        pyxb.utils.utility.Location('C:\\Users\\E\\Downloads\\$ahV10.xsd', 61, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
    ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
    ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True)]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


ApplicationHeader._Automaton = _BuildAutomaton()

DuplicateIndication._AddElement(
    pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Ref'), Max30Text, scope=DuplicateIndication,
                               documentation='ReferenceReference of the original message, in case this is a duplicate.',
                               location=pyxb.utils.utility.Location('C:\\Users\\E\\Downloads\\$ahV10.xsd', 75,
                                                                    12)))

DuplicateIndication._AddElement(
    pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Info'), Max140Text, scope=DuplicateIndication,
                               documentation='JustificationInformation about the duplicate.',
                               location=pyxb.utils.utility.Location('C:\\Users\\E\\Downloads\\$ahV10.xsd', 81,
                                                                    12)))


def _BuildAutomaton_():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_
    del _BuildAutomaton_
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        DuplicateIndication._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Ref')),
        pyxb.utils.utility.Location('C:\\Users\\E\\Downloads\\$ahV10.xsd', 75, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        DuplicateIndication._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Info')),
        pyxb.utils.utility.Location('C:\\Users\\E\\Downloads\\$ahV10.xsd', 81, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
    ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


DuplicateIndication._Automaton = _BuildAutomaton_()

EntityIdentification._AddElement(
    pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Type'), Max4Text, scope=EntityIdentification,
                               documentation='TypeType of identification, eg, BIC or URI.',
                               location=pyxb.utils.utility.Location('C:\\Users\\E\\Downloads\\$ahV10.xsd', 95,
                                                                    12)))

EntityIdentification._AddElement(
    pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Id'), Max30Text, scope=EntityIdentification,
                               documentation='EntityIdentifierActual identification of the entity.',
                               location=pyxb.utils.utility.Location('C:\\Users\\E\\Downloads\\$ahV10.xsd', 101,
                                                                    12)))


def _BuildAutomaton_2():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_2
    del _BuildAutomaton_2
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        EntityIdentification._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Type')),
        pyxb.utils.utility.Location('C:\\Users\\E\\Downloads\\$ahV10.xsd', 95, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(
        EntityIdentification._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Id')),
        pyxb.utils.utility.Location('C:\\Users\\E\\Downloads\\$ahV10.xsd', 101, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
    ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


EntityIdentification._Automaton = _BuildAutomaton_2()



...

  ChineseCommercialCode
"""-------------------------------------------------------------------------------
 MODULE:
     ChineseCommercialCode

 DESCRIPTION:
     This module provides the mapping of the code to Chinese characters.

 FUNCTIONS:
     dictionary : CCC_simplified_reader
-------------------------------------------------------------------------------"""
CCC_simplified_reader = {"0001" : "一",
"0002" : "丁",
"0003" : "七",
"0004" : "丈",
"0005" : "三",
"0006" : "上",
"0007" : "下",
"0008" : "不",
"0009" : "丐",
"0010" : "丑",
"0011" : "且",
"0012" : "丕",
"0013" : "世",
"0014" : "丙",
"0015" : "丞",
"0016" : "丢",
"0017" : "並",
"0018" : "丏",
"0019" : "丨",
"0020" : "个",
"0021" : "丫",
"0022" : "中",
"0023" : "丰",
"0024" : "丱",
"0025" : "串",
"0026" : "锕",
"0027" : "丶",
"0028" : "锿",
"0029" : "丸",
"0030" : "丹",
"0031" : "主",
"0032" : "砹",
"0033" : "丿",
"0034" : "乂",
"0035" : "乃",
"0036" : "久",
"0037" : "之",
"0038" : "乍",
"0039" : "乎",
"0040" : "乏",
"0041" : "乖",
"0042" : "乘",
"0043" : "桉",
"0044" : "乙",
"0045" : "乜",
"0046" : "九",
"0047" : "乞",
"0048" : "也",
"0049" : "亁",
"0050" : "乳",
"0051" : "乾",
"0052" : "乱",
"0053" : "凼",
"0054" : "亅",
"0055" : "了",
"0056" : "予",
"0057" : "事",
"0058" : "苯",
"0059" : "二",
"0060" : "于",
"0061" : "云",
"0062" : "互",
"0063" : "五",
"0064" : "井",
"0065" : "亙",
"0067" : "些",
"0068" : "亚",
"0069" : "亟",
"0070" : "吡",
"0071" : "亠",
"0072" : "亡",
"0073" : "亢",
"0074" : "交",
"0075" : "亥",
"0076" : "亦",
"0077" : "亨",
"0078" : "享",
"0079" : "京",
"0080" : "亭",
"0081" : "亮",
"0082" : "亳",
"0083" : "亶",
"0084" : "亹",
"0085" : "醭",
"0086" : "人",
"0087" : "什",
"0088" : "仁",
"0089" : "仃",
"0090" : "仄",
"0091" : "仆",
"0092" : "仇",
"0093" : "今",
"0094" : "介",
"0095" : "仍",
"0096" : "佣",
"0097" : "佬",
"0098" : "仔",
"0099" : "仕",
"0100" : "他",
"0101" : "仗",
"0102" : "付",
"0103" : "仙",
"0104" : "仝",
"0105" : "仞",
"0106" : "仡",
"0107" : "仟",
"0108" : "代",
"0109" : "令",
"0110" : "以",
"0111" : "仰",
"0112" : "仲",
"0113" : "仳",
"0114" : "仵",
"0115" : "件",
"0116" : "价",
"0117" : "任",
"0118" : "份",
"0119" : "仿",
"0120" : "企",
"0121" : "伉",
"0122" : "伊",
"0123" : "伋",
"0124" : "伍",
"0125" : "伎",
"0126" : "伏",
"0127" : "伐",
"0128" : "休",
"0129" : "伙",
"0130" : "伯",
"0131" : "估",
"0132" : "你",
"0133" : "伴",
"0134" : "伶",
"0135" : "伸",
"0136" : "伺",
"0137" : "伻",
"0138" : "似",
"0139" : "倮",
"0140" : "佃",
"0141" : "但",
"0142" : "佈",
"0143" : "位",
"0144" : "低",
"0145" : "住",
"0146" : "佐",
"0147" : "佑",
"0148" : "佔",
"0149" : "何",
"0150" : "佗",
"0151" : "余",
"0152" : "佘",
"0153" : "佚",
"0154" : "佛",
"0155" : "作",
"0156" : "佞",
"0157" : "佟",
"0158" : "佺",
"0159" : "傢",
"0160" : "佩",
"0161" : "佪",
"0162" : "佯",
"0163" : "佳",
"0164" : "併",
"0165" : "佶",
"0166" : "佸",
"0167" : "佻",
"0168" : "佾",
"0169" : "使",
"0170" : "侃",
"0171" : "来",
"0172" : "侈",
"0173" : "例",
"0174" : "侍",
"0175" : "侏",
"0176" : "侑",
"0177" : "侔",
"0178" : "仑",
"0179" : "侗",
"0180" : "供",
"0181" : "依",
"0182" : "侷",
"0183" : "伕",
"0184" : "佰",
"0185" : "侮",
"0186" : "侯",
"0187" : "侵",
"0188" : "侣",
"0189" : "便",
"0190" : "係",
"0191" : "促",
"0192" : "俄",
"0193" : "俊",
"0194" : "俎",
"0195" : "俏",
"0196" : "俐",
"0197" : "俑",
"0198" : "俗",
"0199" : "俘",
"0200" : "俚",
"0201" : "俛",
"0202" : "保",
"0203" : "俟",
"0204" : "侠",
"0205" : "俞",
"0206" : "俫",
"0207" : "信",
"0208" : "修",
"0209" : "俶",
"0210" : "伥",
"0211" : "働",
"0212" : "倌",
"0213" : "倬",
"0214" : "俯",
"0215" : "俱",
"0216" : "俳",
"0217" : "俵",
"0218" : "俸",
"0219" : "俺",
"0220" : "俾",
"0221" : "仓",
"0222" : "個",
"0223" : "倍",
"0224" : "俩",
"0225" : "倏",
"0226" : "们",
"0227" : "倒",
"0228" : "倖",
"0229" : "倘",
"0230" : "候",
"0231" : "倚",
"0232" : "倜",
"0233" : "倂",
"0234" : "借",
"0235" : "倡",
"0236" : "倣",
"0237" : "值",
"0238" : "倥",
"0239" : "倦",
"0240" : "倨",
"0241" : "倩",
"0242" : "倪",
"0243" : "伦",
"0244" : "倭",
"0245" : "偈",
"0246" : "偎",
"0247" : "傻",
"0248" : "偁",
"0249" : "偃",
"0250" : "假",
"0251" : "伟",
"0252" : "偏",
"0253" : "偕",
"0254" : "做",
"0255" : "停",
"0256" : "健",
"0257" : "偪",
"0258" : "侧",
"0259" : "侦",
"0260" : "偶",
"0261" : "傎",
"0262" : "偷",
"0263" : "伧",
"0264" : "傀",
"0265" : "傅",
"0266" : "傍",
"0267" : "傑",
"0268" : "傒",
"0269" : "傈",
"0270" : "伞",
"0271" : "备",
"0272" : "傚",
"0273" : "傞",
"0274" : "傜",
"0275" : "催",
"0276" : "傭",
"0277" : "傲",
"0278" : "传",
"0279" : "伛",
"0280" : "债",
"0281" : "伤",
"0282" : "倾",
"0283" : "偻",
"0284" : "仅",
"0285" : "僇",
"0286" : "佥",
"0287" : "僳",
"0288" : "像",
"0289" : "僱",
"0291" : "僦",
"0292" : "偾",
"0293" : "僩",
"0294" : "侨",
"0295" : "僕",
"0296" : "僖",
"0297" : "僚",
"0298" : "伪",
"0299" : "侥",
"0300" : "僧",
"0301" : "僭",
"0302" : "僮",
"0303" : "儁",
"0304" : "僵",
"0305" : "價",
"0306" : "僻",
"0307" : "僾",
"0308" : "仪",
"0309" : "侬",
"0310" : "亿",
"0311" : "儆",
"0312" : "侩",
"0313" : "俭",
"0314" : "傤",
"0315" : "儌",
"0316" : "僰",
"0317" : "儋",
"0318" : "儇",
"0319" : "傧",
"0320" : "儒",
"0321" : "俦",
"0322" : "侪",
"0323" : "儗",
"0324" : "儘",
"0325" : "儤",
"0326" : "偿",
"0327" : "优",
"0328" : "储",
"0329" : "儳",
"0330" : "俪",
"0331" : "傥",
"0332" : "俨",
"0333" : "兡",
"0334" : "儿",
"0335" : "兀",
"0336" : "允",
"0337" : "元",
"0338" : "兄",
"0339" : "充",
"0340" : "兆",
"0341" : "先",
"0342" : "光",
"0343" : "兇",
"0344" : "克",
"0345" : "兑",
"0346" : "免",
"0347" : "兔",
"0348" : "兒",
"0349" : "兕",
"0350" : "兖",
"0351" : "兜",
"0352" : "兢",
"0353" : "兣",
"0354" : "入",
"0355" : "内",
"0356" : "全",
"0357" : "两",
"0358" : "兪",
"0359" : "钚",
"0360" : "八",
"0361" : "公",
"0362" : "六",
"0363" : "兮",
"0364" : "共",
"0365" : "兵",
"0366" : "其",
"0367" : "具",
"0368" : "典",
"0369" : "兼",
"0370" : "冀",
"0371" : "糍",
"0372" : "冂",
"0373" : "冉",
"0374" : "册",
"0375" : "再",
"0376" : "冏",
"0377" : "冓",
"0378" : "冑",
"0379" : "冒",
"0380" : "冕",
"0381" : "镩",
"0382" : "冖",
"0383" : "冗",
"0384" : "冞",
"0385" : "冠",
"0386" : "冢",
"0387" : "冤",
"0388" : "冥",
"0389" : "幂",
"0390" : "耖",
"0391" : "冫",
"0392" : "冬",
"0393" : "冰",
"0394" : "冲",
"0395" : "冱",
"0396" : "冶",
"0397" : "冷",
"0398" : "冸",
"0399" : "冽",
"0400" : "况",
"0401" : "凄",
"0402" : "准",
"0403" : "净",
"0404" : "凉",
"0405" : "冼",
"0406" : "凋",
"0407" : "凌",
"0408" : "冻",
"0410" : "凑",
"0411" : "凓",
"0412" : "凛",
"0413" : "凝",
"0414" : "决",
"0415" : "几",
"0416" : "凡",
"0417" : "凭",
"0418" : "凯",
"0419" : "凳",
"0420" : "凰",
"0421" : "茌",
"0422" : "凵",
"0423" : "凶",
"0424" : "凸",
"0425" : "凹",
"0426" : "甴",
"0427" : "出",
"0428" : "函",
"0429" : "菪",
"0430" : "刀",
"0431" : "刁",
"0432" : "刃",
"0433" : "分",
"0434" : "切",
"0435" : "刈",
"0436" : "刊",
"0437" : "刎",
"0438" : "刑",
"0439" : "划",
"0440" : "刖",
"0441" : "列",
"0442" : "刨",
"0443" : "初",
"0444" : "删",
"0445" : "判",
"0446" : "别",
"0447" : "刦",
"0448" : "利",
"0449" : "剁",
"0450" : "刮",
"0451" : "到",
"0452" : "刲",
"0453" : "刳",
"0454" : "刵",
"0455" : "制",
"0456" : "刷",
"0457" : "券",
"0458" : "刹",
"0459" : "刺",
"0460" : "剋",
"0461" : "剃",
"0462" : "刭",
"0463" : "则",
"0464" : "剉",
"0465" : "削",
"0466" : "刻",
"0467" : "前",
"0468" : "剜",
"0469" : "剌",
"0470" : "剡",
"0471" : "剔",
"0472" : "剖",
"0473" : "刬",
"0474" : "刚",
"0475" : "剥",
"0476" : "剩",
"0477" : "剪",
"0478" : "剐",
"0479" : "副",
"0480" : "割",
"0481" : "剀",
"0482" : "创",
"0483" : "剸",
"0484" : "剽",
"0485" : "剿",
"0486" : "剠",
"0487" : "劃",
"0488" : "劄",
"0489" : "剧",
"0490" : "劈",
"0491" : "刘",
"0492" : "刽",
"0493" : "剚",
"0494" : "剑",
"0495" : "剂",
"0496" : "劓",
"0497" : "劘",
"0498" : "剷",
"0499" : "剅",
"0500" : "力",
"0501" : "功",
"0502" : "加",
"0503" : "劣",
"0504" : "助",
"0505" : "努",
"0506" : "劫",
"0507" : "劬",
"0508" : "劭",
"0509" : "効",
"0510" : "劻",
"0511" : "劾",
"0512" : "劼",
"0513" : "劲",
"0514" : "勃",
"0515" : "勅",
"0516" : "勇",
"0517" : "勉",
"0518" : "勍",
"0519" : "勒",
"0520" : "动",
"0521" : "勖",
"0522" : "勘",
"0523" : "务",
"0524" : "胜",
"0525" : "劳",
"0526" : "勠",
"0527" : "募",
"0528" : "势",
"0529" : "勣",
"0530" : "勤",
"0531" : "勦",
"0532" : "勚",
"0533" : "勰",
"0534" : "勳",
"0535" : "劢",
"0536" : "励",
"0537" : "勷",
"0538" : "劝",
"0539" : "锝",
"0540" : "勹",
"0541" : "勺",
"0542" : "匀",
"0543" : "勿",
"0544" : "匃",
"0545" : "包",
"0546" : "匈",
"0547" : "匊",
"0548" : "匍",
"0549" : "匏",
"0550" : "匐",
"0551" : "勾",
"0552" : "匕",
"0553" : "化",
"0554" : "北",
"0555" : "匙",
"0556" : "碲",
"0557" : "匚",
"0558" : "匜",
"0559" : "匝",
"0560" : "匟",
"0561" : "匠",
"0562" : "匡",
"0563" : "匣",
"0564" : "匪",
"0565" : "汇",
"0566" : "匮",
"0567" : "匦",
"0568" : "匳",
"0569" : "匵",
"0570" : "啶",
"0571" : "匸",
"0572" : "匹",
"0573" : "匾",
"0574" : "匿",
"0575" : "区",
"0576" : "铥",
"0577" : "十",
"0578" : "千",
"0579" : "廿",
"0580" : "卅",
"0581" : "升",
"0582" : "午",
"0583" : "卉",
"0584" : "半",
"0585" : "卑",
"0586" : "卒",
"0587" : "卓",
"0588" : "协",
"0589" : "南",
"0590" : "博",
"0591" : "㐅",
"0592" : "卜",
"0593" : "卞",
"0594" : "占",
"0595" : "卡",
"0596" : "卣",
"0597" : "卦",
"0598" : "氡",
"0599" : "卩",
"0600" : "卬",
"0601" : "卭",
"0602" : "卯",
"0603" : "印",
"0604" : "危",
"0605" : "卲",
"0606" : "却",
"0607" : "卵",
"0608" : "卷",
"0609" : "卸",
"0610" : "卺",
"0611" : "卻",
"0612" : "卮",
"0613" : "即",
"0614" : "卹",
"0615" : "卿",
"0616" : "胨",
"0617" : "厂",
"0618" : "厄",
"0619" : "厎",
"0620" : "厓",
"0621" : "厔",
"0622" : "厘",
"0623" : "厍",
"0624" : "厚",
"0625" : "厝",
"0626" : "原",
"0627" : "厕",
"0628" : "厥",
"0629" : "厫",
"0630" : "厌",
"0631" : "厮",
"0632" : "厉",
"0633" : "厦",
"0634" : "胴",
"0635" : "厶",
"0636" : "厹",
"0637" : "去",
"0638" : "叁",
"0639" : "参",
"0640" : "叅",
"0641" : "塅",
"0642" : "又",
"0643" : "叉",
"0644" : "及",
"0645" : "友",
"0646" : "反",
"0647" : "叔",
"0648" : "取",
"0649" : "受",
"0650" : "叙",
"0651" : "叛",
"0652" : "叟",
"0653" : "叡",
"0654" : "丛",
"0655" : "叠",
"0656" : "口",
"0657" : "古",
"0658" : "句",
"0659" : "另",
"0660" : "叨",
"0661" : "叩",
"0662" : "只",
"0663" : "叫",
"0664" : "召",
"0665" : "叭",
"0666" : "叮",
"0667" : "叱",
"0668" : "可",
"0669" : "台",
"0670" : "史",
"0671" : "右",
"0672" : "叵",
"0673" : "叶",
"0674" : "司",
"0675" : "吁",
"0676" : "吃",
"0677" : "各",
"0678" : "合",
"0679" : "吉",
"0680" : "吊",
"0681" : "同",
"0682" : "名",
"0683" : "后",
"0684" : "吏",
"0685" : "吐",
"0686" : "向",
"0687" : "吓",
"0688" : "吒",
"0689" : "君",
"0690" : "吝",
"0691" : "吞",
"0692" : "吟",
"0693" : "吠",
"0694" : "否",
"0695" : "吩",
"0696" : "咐",
"0697" : "吆",
"0698" : "含",
"0699" : "吭",
"0700" : "吮",
"0701" : "呈",
"0702" : "吴",
"0703" : "吵",
"0704" : "呐",
"0705" : "吸",
"0706" : "吹",
"0707" : "告",
"0708" : "吻",
"0709" : "吼",
"0710" : "吾",
"0711" : "呀",
"0712" : "吕",
"0713" : "呃",
"0714" : "呆",
"0715" : "咂",
"0716" : "呢",
"0717" : "呦",
"0718" : "呧",
"0719" : "周",
"0720" : "咒",
"0721" : "吧",
"0722" : "呱",
"0723" : "呫",
"0724" : "味",
"0725" : "呵",
"0726" : "呶",
"0727" : "呷",
"0728" : "呻",
"0729" : "呼",
"0730" : "命",
"0731" : "咀",
"0732" : "咄",
"0733" : "咆",
"0734" : "咕",
"0735" : "和",
"0736" : "咎",
"0737" : "咏",
"0738" : "咋",
"0739" : "咖",
"0740" : "哎",
"0741" : "咤",
"0742" : "响",
"0743" : "咪",
"0744" : "咧",
"0745" : "咨",
"0746" : "咫",
"0747" : "咬",
"0748" : "咯",
"0749" : "咱",
"0750" : "咳",
"0751" : "咷",
"0752" : "咸",
"0753" : "咺",
"0754" : "咽",
"0755" : "哀",
"0756" : "品",
"0757" : "哂",
"0758" : "哄",
"0759" : "啊",
"0760" : "哇",
"0761" : "哈",
"0762" : "哉",
"0763" : "哪",
"0764" : "咿",
"0765" : "员",
"0766" : "哥",
"0767" : "唔",
"0768" : "哦",
"0769" : "哩",
"0770" : "哭",
"0771" : "哮",
"0772" : "哲",
"0773" : "哺",
"0774" : "哼",
"0775" : "哽",
"0776" : "哿",
"0777" : "唁",
"0778" : "唆",
"0779" : "唈",
"0780" : "唉",
"0781" : "唐",
"0782" : "唇",
"0783" : "哨",
"0784" : "啦",
"0785" : "唏",
"0786" : "售",
"0787" : "唯",
"0788" : "唱",
"0789" : "唳",
"0790" : "唾",
"0791" : "啁",
"0792" : "啣",
"0793" : "啄",
"0794" : "商",
"0795" : "问",
"0796" : "启",
"0797" : "啖",
"0798" : "啥",
"0799" : "啜",
"0800" : "哑",
"0801" : "唬",
"0802" : "啤",
"0803" : "啡",
"0804" : "啻",
"0805" : "啼",
"0806" : "喁",
"0807" : "喀",
"0808" : "喂",
"0809" : "喃",
"0810" : "善",
"0811" : "喆",
"0812" : "喇",
"0813" : "喈",
"0814" : "喉",
"0815" : "喊",
"0816" : "喏",
"0817" : "喓",
"0818" : "喋",
"0819" : "喑",
"0820" : "喘",
"0821" : "喙",
"0822" : "唤",
"0823" : "喜",
"0824" : "喝",
"0825" : "唧",
"0826" : "喧",
"0827" : "喻",
"0828" : "丧",
"0829" : "乔",
"0830" : "单",
"0831" : "啾",
"0832" : "嗃",
"0833" : "嗅",
"0834" : "吗",
"0835" : "啬",
"0836" : "嗑",
"0837" : "嗓",
"0838" : "嗔",
"0839" : "呜",
"0840" : "嗛",
"0841" : "嗜",
"0842" : "嗟",
"0843" : "嗣",
"0844" : "嗤",
"0845" : "喔",
"0846" : "喟",
"0847" : "哟",
"0848" : "喫",
"0849" : "喭",
"0850" : "呛",
"0851" : "嗉",
"0852" : "嗒",
"0853" : "喽",
"0854" : "嘅",
"0855" : "叹",
"0856" : "嘈",
"0857" : "嘉",
"0858" : "嘏",
"0859" : "嘛",
"0860" : "唛",
"0861" : "嘒",
"0862" : "啧",
"0863" : "尝",
"0864" : "嘘",
"0865" : "噻",
"0866" : "嚎",
"0867" : "嘎",
"0868" : "呕",
"0869" : "嗷",
"0870" : "嗽",
"0871" : "嗾",
"0872" : "嘬",
"0873" : "哗",
"0874" : "哔",
"0875" : "叽",
"0876" : "啸",
"0877" : "嘲",
"0878" : "嘴",
"0879" : "哓",
"0880" : "嘶",
"0881" : "嗥",
"0882" : "嘹",
"0883" : "嘻",
"0884" : "嘿",
"0885" : "噉",
"0886" : "噌",
"0887" : "噍",
"0888" : "噎",
"0889" : "噢",
"0890" : "噏",
"0891" : "噤",
"0892" : "器",
"0893" : "噩",
"0894" : "噪",
"0895" : "噫",
"0896" : "噬",
"0897" : "嗳",
"0898" : "哙",
"0899" : "喷",
"0900" : "噶",
"0901" : "哝",
"0902" : "哕",
"0903" : "吨",
"0904" : "噱",
"0905" : "咛",
"0906" : "嚅",
"0907" : "嚇",
"0908" : "嚏",
"0909" : "啮",
"0910" : "嚚",
"0911" : "唸",
"0912" : "冁",
"0913" : "嚥",
"0914" : "嚬",
"0915" : "嚮",
"0916" : "嚐",
"0917" : "严",
"0918" : "咙",
"0919" : "嘤",
"0920" : "嚼",
"0921" : "啭",
"0922" : "嗫",
"0923" : "嚣",
"0924" : "嚷",
"0925" : "囉",
"0926" : "囊",
"0927" : "呓",
"0928" : "嘱",
"0929" : "囓",
"0930" : "叻",
"0931" : "囗",
"0932" : "回",
"0933" : "囚",
"0934" : "四",
"0935" : "囱",
"0936" : "因",
"0937" : "囤",
"0938" : "困",
"0939" : "囫",
"0940" : "囷",
"0941" : "囹",
"0942" : "固",
"0943" : "囿",
"0944" : "圃",
"0945" : "圄",
"0946" : "圈",
"0947" : "圉",
"0948" : "国",
"0949" : "圅",
"0950" : "囵",
"0951" : "圂",
"0952" : "囮",
"0953" : "围",
"0954" : "园",
"0955" : "圆",
"0956" : "图",
"0957" : "团",
"0958" : "圜",
"0959" : "圕",
"0960" : "土",
"0961" : "在",
"0962" : "圩",
"0963" : "圬",
"0964" : "圭",
"0965" : "圮",
"0966" : "地",
"0967" : "圻",
"0968" : "址",
"0969" : "圾",
"0970" : "坟",
"0971" : "均",
"0972" : "坊",
"0973" : "坍",
"0974" : "坎",
"0975" : "坏",
"0976" : "坐",
"0977" : "坑",
"0978" : "坂",
"0979" : "坌",
"0980" : "坡",
"0981" : "坤",
"0982" : "坦",
"0983" : "坭",
"0984" : "坩",
"0985" : "坷",
"0986" : "坼",
"0987" : "垂",
"0988" : "坪",
"0989" : "坫",
"0990" : "坰",
"0991" : "坳",
"0992" : "型",
"0993" : "垓",
"0994" : "垝",
"0995" : "垠",
"0996" : "垢",
"0997" : "垣",
"0998" : "垃",
"0999" : "坯",
"1000" : "垛",
"1001" : "坨",
"1002" : "埃",
"1003" : "埋",
"1004" : "城",
"1005" : "埒",
"1006" : "垮",
"1007" : "埏",
"1008" : "域",
"1009" : "埠",
"1010" : "垧",
"1011" : "埭",
"1012" : "垡",
"1013" : "执",
"1014" : "培",
"1015" : "基",
"1016" : "堂",
"1017" : "坚",
"1018" : "堆",
"1019" : "垩",
"1020" : "埤",
"1021" : "埴",
"1022" : "埵",
"1023" : "埸",
"1024" : "堃",
"1025" : "堙",
"1026" : "堞",
"1027" : "堡",
"1028" : "堠",
"1029" : "堤",
"1030" : "堪",
"1031" : "尧",
"1032" : "报",
"1033" : "埔",
"1034" : "场",
"1035" : "堵",
"1036" : "埝",
"1037" : "堰",
"1038" : "堦",
"1039" : "塍",
"1040" : "块",
"1041" : "茔",
"1042" : "塌",
"1043" : "塑",
"1044" : "塔",
"1045" : "墓",
"1046" : "塚",
"1047" : "塗",
"1048" : "塘",
"1049" : "塞",
"1050" : "填",
"1051" : "坞",
"1052" : "垲",
"1053" : "埙",
"1054" : "埘",
"1055" : "塎",
"1056" : "坝",
"1057" : "尘",
"1058" : "堑",
"1059" : "塼",
"1060" : "塾",
"1061" : "塿",
"1062" : "墀",
"1063" : "墁",
"1064" : "境",
"1065" : "墅",
"1066" : "墉",
"1067" : "垫",
"1068" : "墄",
"1069" : "埫",
"1070" : "墐",
"1071" : "坠",
"1072" : "堿",
"1073" : "增",
"1074" : "墟",
"1075" : "墨",
"1076" : "墩",
"1077" : "堕",
"1078" : "墺",
"1079" : "墳",
"1080" : "塄",
"1081" : "塆",
"1082" : "墦",
"1083" : "垦",
"1084" : "壁",
"1085" : "壅",
"1086" : "坛",
"1087" : "𡒄",
"1088" : "壎",
"1089" : "壑",
"1090" : "压",
"1091" : "壕",
"1092" : "壖",
"1093" : "垒",
"1094" : "圹",
"1095" : "壞",
"1096" : "垄",
"1097" : "垆",
"1098" : "壜",
"1099" : "壤",
"1100" : "壩",
"1101" : "圳",
"1102" : "士",
"1103" : "壬",
"1104" : "壮",
"1105" : "壹",
"1106" : "壶",
"1107" : "壻",
"1108" : "寿",
"1109" : "壸",
"1110" : "椴",
"1111" : "夂",
"1112" : "夆",
"1113" : "簖",
"1114" : "夊",
"1115" : "夏",
"1116" : "砘",
"1118" : "跺",
"1119" : "夕",
"1120" : "外",
"1121" : "夙",
"1122" : "多",
"1123" : "夜",
"1124" : "够",
"1125" : "梦",
"1126" : "夤",
"1127" : "夥",
"1128" : "婀",
"1129" : "大",
"1130" : "夭",
"1131" : "天",
"1132" : "太",
"1133" : "夫",
"1134" : "夬",
"1135" : "央",
"1136" : "失",
"1137" : "夯",
"1138" : "夷",
"1139" : "夸",
"1140" : "夹",
"1141" : "奄",
"1142" : "奇",
"1143" : "奈",
"1144" : "奉",
"1145" : "奎",
"1146" : "奏",
"1147" : "奂",
"1148" : "契",
"1149" : "奔",
"1150" : "奕",
"1151" : "奓",
"1152" : "套",
"1153" : "奚",
"1154" : "锇",
"1155" : "奘",
"1156" : "奠",
"1157" : "奡",
"1158" : "奢",
"1159" : "奥",
"1160" : "奁",
"1161" : "夺",
"1162" : "奖",
"1163" : "奭",
"1164" : "奋",
"1165" : "奀",
"1166" : "女",
"1167" : "奴",
"1168" : "奶",
"1169" : "奸",
"1170" : "好",
"1171" : "妁",
"1172" : "如",
"1173" : "妃",
"1174" : "妄",
"1175" : "妊",
"1176" : "妒",
"1177" : "妍",
"1178" : "妓",
"1179" : "妖",
"1180" : "妗",
"1181" : "妙",
"1182" : "妆",
"1183" : "妣",
"1184" : "妤",
"1185" : "妥",
"1186" : "妨",
"1187" : "妯",
"1188" : "妹",
"1189" : "妻",
"1190" : "妾",
"1191" : "姆",
"1192" : "姊",
"1193" : "始",
"1194" : "姗",
"1195" : "姐",
"1196" : "姑",
"1197" : "姒",
"1198" : "姓",
"1199" : "妲",
"1200" : "妮",
"1201" : "委",
"1202" : "姚",
"1203" : "姜",
"1204" : "姝",
"1205" : "姞",
"1206" : "姙",
"1207" : "姣",
"1208" : "姤",
"1209" : "姥",
"1210" : "姨",
"1211" : "姦",
"1212" : "侄",
"1213" : "姬",
"1214" : "姅",
"1215" : "姻",
"1216" : "娃",
"1217" : "姿",
"1218" : "威",
"1219" : "娉",
"1220" : "姮",
"1221" : "姱",
"1222" : "娌",
"1223" : "娑",
"1224" : "娘",
"1225" : "娱",
"1226" : "娜",
"1227" : "娟",
"1228" : "娠",
"1229" : "娣",
"1230" : "娥",
"1231" : "娩",
"1232" : "娓",
"1233" : "娼",
"1234" : "姹",
"1235" : "娶",
"1236" : "娄",
"1237" : "婆",
"1238" : "婉",
"1239" : "婊",
"1240" : "婕",
"1241" : "婚",
"1242" : "婢",
"1243" : "婣",
"1244" : "妇",
"1245" : "婪",
"1246" : "娅",
"1247" : "她",
"1248" : "妳",
"1249" : "婼",
"1250" : "婷",
"1251" : "婺",
"1252" : "媒",
"1253" : "媚",
"1254" : "媛",
"1255" : "媟",
"1256" : "媢",
"1257" : "娲",
"1258" : "媬",
"1259" : "媕",
"1260" : "媖",
"1261" : "媳",
"1262" : "媵",
"1263" : "媸",
"1264" : "媪",
"1265" : "妈",
"1266" : "媾",
"1267" : "媿",
"1268" : "嫁",
"1269" : "嫂",
"1270" : "嫄",
"1271" : "嫉",
"1272" : "嫋",
"1273" : "嫌",
"1274" : "媲",
"1275" : "媺",
"1276" : "嫖",
"1277" : "妪",
"1278" : "嫠",
"1279" : "嫡",
"1280" : "嫣",
"1281" : "嫦",
"1282" : "嫩",
"1283" : "嫪",
"1284" : "嫘",
"1285" : "嫚",
"1286" : "嫜",
"1287" : "嫫",
"1288" : "嫺",
"1289" : "妫",
"1290" : "娆",
"1291" : "嬉",
"1292" : "婵",
"1293" : "娇",
"1294" : "媭",
"1295" : "嬖",
"1296" : "嬗",
"1297" : "嫱",
"1298" : "嬛",
"1299" : "嬴",
"1300" : "嫔",
"1301" : "嬷",
"1302" : "嬭",
"1303" : "嬲",
"1304" : "嬾",
"1305" : "婴",
"1306" : "婶",
"1307" : "孀",
"1308" : "孅",
"1309" : "娈",
"1310" : "妞",
"1311" : "子",
"1312" : "孑",
"1313" : "孔",
"1314" : "孕",
"1315" : "孓",
"1316" : "字",
"1317" : "存",
"1318" : "孚",
"1319" : "孛",
"1320" : "孜",
"1321" : "孝",
"1322" : "孟",
"1323" : "季",
"1324" : "孤",
"1325" : "孥",
"1326" : "孩",
"1327" : "孙",
"1328" : "孰",
"1329" : "孱",
"1330" : "孳",
"1331" : "学",
"1332" : "孺",
"1333" : "孼",
"1334" : "孪",
"1335" : "孵",
"1336" : "宀",
"1337" : "宁",
"1338" : "它",
"1339" : "宄",
"1340" : "宂",
"1341" : "宅",
"1342" : "宇",
"1343" : "守",
"1344" : "安",
"1345" : "宋",
"1346" : "完",
"1347" : "宏",
"1348" : "宓",
"1349" : "宕",
"1350" : "宗",
"1351" : "官",
"1352" : "宙",
"1353" : "定",
"1354" : "宛",
"1355" : "宜",
"1356" : "客",
"1357" : "宣",
"1358" : "室",
"1359" : "宥",
"1360" : "宦",
"1361" : "宬",
"1362" : "宫",
"1363" : "宰",
"1364" : "害",
"1365" : "宴",
"1366" : "宵",
"1367" : "家",
"1368" : "宸",
"1369" : "容",
"1370" : "梥",
"1371" : "寀",
"1372" : "宿",
"1374" : "寂",
"1375" : "寃",
"1376" : "寄",
"1377" : "寅",
"1378" : "密",
"1379" : "寇",
"1380" : "寧",
"1381" : "富",
"1382" : "寐",
"1383" : "寒",
"1384" : "寓",
"1385" : "寔",
"1386" : "寖",
"1387" : "寘",
"1388" : "寎",
"1389" : "寞",
"1390" : "察",
"1391" : "寡",
"1392" : "寝",
"1393" : "寤",
"1394" : "寥",
"1395" : "实",
"1396" : "寨",
"1397" : "寠",
"1398" : "寙",
"1399" : "审",
"1400" : "写",
"1401" : "宽",
"1402" : "寮",
"1403" : "寰",
"1404" : "宠",
"1405" : "宝",
"1406" : "宧",
"1407" : "寸",
"1408" : "寺",
"1409" : "封",
"1410" : "射",
"1411" : "尅",
"1412" : "将",
"1413" : "专",
"1414" : "尉",
"1415" : "尊",
"1416" : "寻",
"1417" : "对",
"1418" : "导",
"1419" : "蒽",
"1420" : "小",
"1421" : "少",
"1422" : "尔",
"1423" : "尖",
"1424" : "尚",
"1425" : "尠",
"1426" : "尞",
"1427" : "尕",
"1428" : "尢",
"1429" : "尤",
"1430" : "尨",
"1431" : "尪",
"1432" : "就",
"1433" : "尰",
"1434" : "尴",
"1435" : "尬",
"1436" : "铒",
"1437" : "尸",
"1438" : "尹",
"1439" : "尺",
"1440" : "尻",
"1441" : "尼",
"1442" : "尾",
"1443" : "尿",
"1444" : "局",
"1445" : "屁",
"1446" : "居",
"1447" : "届",
"1448" : "屈",
"1449" : "屉",
"1450" : "屋",
"1451" : "屍",
"1452" : "屎",
"1453" : "屐",
"1454" : "屑",
"1455" : "展",
"1456" : "屏",
"1457" : "屝",
"1458" : "屠",
"1459" : "屡",
"1460" : "屣",
"1461" : "层",
"1462" : "履",
"1463" : "屧",
"1464" : "屦",
"1465" : "屩",
"1466" : "属",
"1467" : "屭",
"1468" : "砩",
"1469" : "屮",
"1470" : "屯",
"1471" : "岳",
"1472" : "山",
"1473" : "屹",
"1474" : "屺",
"1475" : "峁",
"1476" : "岌",
"1477" : "岐",
"1478" : "岑",
"1479" : "岔",
"1480" : "峿",
"1481" : "冈",
"1482" : "岢",
"1483" : "峫",
"1484" : "岩",
"1485" : "岫",
"1486" : "岱",
"1487" : "岵",
"1488" : "岷",
"1489" : "岸",
"1490" : "岣",
"1491" : "峒",
"1492" : "峙",
"1493" : "峋",
"1494" : "峨",
"1495" : "峭",
"1496" : "峰",
"1497" : "岛",
"1498" : "峻",
"1499" : "峡",
"1500" : "峓",
"1501" : "岘",
"1502" : "峪",
"1503" : "崃",
"1504" : "崇",
"1505" : "崎",
"1506" : "崐",
"1507" : "崑",
"1508" : "崔",
"1509" : "崖",
"1510" : "崙",
"1511" : "岗",
"1512" : "崛",
"1513" : "峥",
"1514" : "崩",
"1515" : "崚",
"1516" : "崧",
"1517" : "崦",
"1518" : "嵇",
"1519" : "崆",
"1520" : "嵋",
"1521" : "嵫",
"1522" : "嵊",
"1523" : "嵌",
"1524" : "崶",
"1525" : "嵎",
"1526" : "岚",
"1527" : "嵒",
"1528" : "崱",
"1529" : "嵩",
"1530" : "嵝",
"1531" : "嵬",
"1532" : "嵯",
"1533" : "嵾",
"1534" : "嶂",
"1535" : "崭",
"1536" : "岖",
"1537" : "嶒",
"1538" : "嵚",
"1539" : "嵘",
"1540" : "峤",
"1541" : "崤",
"1542" : "峄",
"1543" : "嶙",
"1544" : "嶷",
"1545" : "岭",
"1546" : "屿",
"1547" : "嶽",
"1548" : "巉",
"1549" : "嵛",
"1550" : "巍",
"1551" : "峦",
"1552" : "巘",
"1553" : "巅",
"1554" : "巖",
"1555" : "崂",
"1556" : "巛",
"1557" : "川",
"1558" : "州",
"1559" : "巡",
"1560" : "巢",
"1561" : "镄",
"1562" : "工",
"1563" : "左",
"1564" : "巧",
"1565" : "巨",
"1566" : "巫",
"1567" : "差",
"1568" : "酚",
"1569" : "己",
"1570" : "巳",
"1571" : "已",
"1572" : "巴",
"1573" : "巵",
"1574" : "巷",
"1575" : "巽",
"1576" : "钆",
"1577" : "巾",
"1578" : "币",
"1579" : "市",
"1580" : "布",
"1581" : "帆",
"1582" : "帋",
"1583" : "帑",
"1584" : "帕",
"1585" : "希",
"1586" : "帖",
"1587" : "帗",
"1588" : "帘",
"1589" : "帙",
"1590" : "帚",
"1591" : "帛",
"1592" : "帔",
"1593" : "帝",
"1594" : "帡",
"1595" : "帟",
"1596" : "帅",
"1597" : "师",
"1598" : "席",
"1599" : "帨",
"1600" : "帐",
"1601" : "带",
"1602" : "帷",
"1603" : "常",
"1604" : "帽",
"1605" : "帏",
"1606" : "幄",
"1607" : "幅",
"1608" : "帧",
"1609" : "幋",
"1610" : "幌",
"1611" : "幔",
"1612" : "幕",
"1613" : "帼",
"1614" : "帻",
"1615" : "帜",
"1616" : "幡",
"1617" : "幢",
"1618" : "幣",
"1619" : "幪",
"1620" : "帮",
"1621" : "帱",
"1622" : "幭",
"1623" : "幯",
"1624" : "幰",
"1625" : "幛",
"1626" : "干",
"1627" : "平",
"1628" : "年",
"1629" : "并",
"1630" : "幸",
"1631" : "幹",
"1632" : "矸",
"1633" : "幺",
"1634" : "幻",
"1635" : "幼",
"1636" : "幽",
"1637" : "幾",
"1638" : "酐",
"1639" : "广",
"1640" : "庀",
"1641" : "庹",
"1642" : "庇",
"1643" : "床",
"1644" : "庋",
"1645" : "序",
"1646" : "底",
"1647" : "庖",
"1648" : "店",
"1649" : "庚",
"1650" : "府",
"1651" : "庠",
"1652" : "庥",
"1653" : "度",
"1654" : "座",
"1655" : "库",
"1656" : "庭",
"1657" : "庳",
"1658" : "庵",
"1659" : "庶",
"1660" : "康",
"1661" : "庸",
"1662" : "庾",
"1663" : "庬",
"1664" : "庴",
"1665" : "廁",
"1666" : "厢",
"1667" : "廌",
"1668" : "廑",
"1669" : "廈",
"1670" : "廉",
"1671" : "廊",
"1672" : "廋",
"1673" : "厩",
"1674" : "廓",
"1675" : "廖",
"1676" : "厨",
"1677" : "廕",
"1678" : "廝",
"1679" : "廛",
"1680" : "庙",
"1681" : "廠",
"1682" : "庑",
"1683" : "废",
"1684" : "廣",
"1685" : "廨",
"1686" : "廪",
"1687" : "庐",
"1688" : "廱",
"1689" : "厅",
"1690" : "庞",
"1691" : "锆",
"1692" : "廴",
"1693" : "延",
"1694" : "廷",
"1695" : "廹",
"1696" : "建",
"1697" : "廻",
"1698" : "廼",
"1699" : "廾",
"1700" : "廿",
"1701" : "弁",
"1702" : "弄",
"1703" : "弇",
"1704" : "弈",
"1705" : "弊",
"1706" : "茛",
"1707" : "弋",
"1708" : "弍",
"1709" : "式",
"1710" : "弑",
"1711" : "瀔",
"1712" : "弓",
"1713" : "弔",
"1714" : "引",
"1715" : "弗",
"1716" : "弛",
"1717" : "弟",
"1718" : "弢",
"1719" : "弣",
"1720" : "弦",
"1721" : "弧",
"1722" : "弩",
"1723" : "弤",
"1724" : "弨",
"1725" : "弭",
"1726" : "弱",
"1727" : "弰",
"1728" : "张",
"1729" : "彄",
"1730" : "强",
"1731" : "弸",
"1732" : "弼",
"1733" : "彀",
"1734" : "弹",
"1735" : "彊",
"1736" : "弥",
"1737" : "弯",
"1738" : "弘",
"1739" : "彐",
"1740" : "彖",
"1741" : "彗",
"1742" : "彘",
"1743" : "彙",
"1744" : "彝",
"1745" : "彟",
"1746" : "臌",
"1747" : "彡",
"1748" : "形",
"1749" : "彤",
"1750" : "彦",
"1751" : "彧",
"1752" : "彩",
"1753" : "彪",
"1754" : "彫",
"1755" : "彬",
"1756" : "彭",
"1757" : "彰",
"1758" : "影",
"1759" : "彨",
"1760" : "铪",
"1761" : "彳",
"1762" : "彷",
"1763" : "役",
"1764" : "彼",
"1765" : "彿",
"1766" : "往",
"1767" : "征",
"1768" : "徂",
"1769" : "待",
"1770" : "徇",
"1771" : "很",
"1772" : "徉",
"1773" : "徊",
"1774" : "律",
"1775" : "後",
"1776" : "徐",
"1777" : "径",
"1778" : "徒",
"1779" : "得",
"1780" : "徘",
"1781" : "徙",
"1782" : "徜",
"1783" : "从",
"1784" : "徕",
"1785" : "御",
"1786" : "徧",
"1787" : "徨",
"1788" : "复",
"1789" : "循",
"1790" : "徬",
"1791" : "徭",
"1792" : "微",
"1793" : "徯",
"1794" : "徵",
"1795" : "德",
"1796" : "彻",
"1797" : "徼",
"1798" : "徽",
"1799" : "焓",
"1800" : "心",
"1801" : "必",
"1802" : "忉",
"1803" : "忌",
"1804" : "忍",
"1805" : "忒",
"1806" : "忖",
"1807" : "志",
"1808" : "忘",
"1809" : "忐",
"1810" : "忑",
"1811" : "忙",
"1812" : "忝",
"1813" : "忠",
"1814" : "忡",
"1815" : "恬",
"1816" : "快",
"1817" : "忭",
"1818" : "忮",
"1819" : "念",
"1820" : "忱",
"1821" : "忸",
"1822" : "忤",
"1823" : "忻",
"1824" : "忽",
"1825" : "忿",
"1826" : "怍",
"1827" : "怎",
"1828" : "怏",
"1829" : "怒",
"1830" : "怕",
"1831" : "怖",
"1832" : "怗",
"1833" : "怙",
"1834" : "怛",
"1835" : "思",
"1836" : "怠",
"1837" : "怡",
"1838" : "急",
"1839" : "怦",
"1840" : "性",
"1841" : "怨",
"1842" : "怩",
"1843" : "怪",
"1844" : "怫",
"1845" : "怯",
"1846" : "怱",
"1847" : "怵",
"1849" : "您",
"1850" : "怔",
"1851" : "恁",
"1852" : "恂",
"1853" : "恃",
"1854" : "恒",
"1855" : "惦",
"1856" : "恌",
"1857" : "恍",
"1858" : "恐",
"1859" : "恕",
"1860" : "恙",
"1861" : "恚",
"1862" : "恝",
"1863" : "恢",
"1864" : "恣",
"1865" : "恤",
"1866" : "恥",
"1867" : "恧",
"1868" : "恨",
"1869" : "恩",
"1870" : "恪",
"1871" : "恫",
"1872" : "恭",
"1873" : "息",
"1874" : "恰",
"1875" : "悃",
"1876" : "恉",
"1877" : "悄",
"1878" : "悦",
"1879" : "悌",
"1880" : "悍",
"1881" : "悒",
"1882" : "悔",
"1883" : "悖",
"1884" : "悚",
"1885" : "悉",
"1886" : "悛",
"1887" : "悝",
"1888" : "悮",
"1889" : "悟",
"1890" : "悠",
"1891" : "患",
"1892" : "悤",
"1893" : "悁",
"1894" : "悱",
"1895" : "惪",
"1896" : "悲",
"1897" : "悴",
"1898" : "怅",
"1899" : "闷",
"1900" : "悸",
"1901" : "悻",
"1902" : "悼",
"1903" : "悽",
"1904" : "悾",
"1905" : "惄",
"1906" : "情",
"1907" : "惆",
"1908" : "惇",
"1909" : "惎",
"1910" : "惑",
"1911" : "惓",
"1912" : "惕",
"1913" : "惘",
"1914" : "惙",
"1915" : "惚",
"1916" : "惛",
"1917" : "惜",
"1918" : "惝",
"1919" : "惟",
"1920" : "惠",
"1921" : "恶",
"1922" : "悰",
"1923" : "惋",
"1924" : "惰",
"1925" : "恼",
"1926" : "恽",
"1927" : "想",
"1928" : "惴",
"1929" : "惶",
"1930" : "惸",
"1931" : "惹",
"1932" : "惺",
"1933" : "恻",
"1934" : "愀",
"1935" : "愁",
"1936" : "愆",
"1937" : "愈",
"1938" : "愉",
"1939" : "愊",
"1940" : "愍",
"1941" : "愎",
"1942" : "意",
"1943" : "愒",
"1944" : "愔",
"1945" : "愕",
"1946" : "愚",
"1947" : "爱",
"1948" : "惬",
"1949" : "感",
"1950" : "愠",
"1951" : "愧",
"1952" : "悫",
"1953" : "愫",
"1954" : "愬",
"1955" : "怆",
"1956" : "恺",
"1957" : "慎",
"1958" : "忾",
"1959" : "愿",
"1960" : "恿",
"1961" : "慄",
"1962" : "慆",
"1963" : "慇",
"1964" : "慈",
"1965" : "慊",
"1966" : "态",
"1967" : "慌",
"1968" : "慁",
"1969" : "慓",
"1970" : "慕",
"1971" : "惨",
"1972" : "慙",
"1973" : "慝",
"1974" : "惭",
"1975" : "恸",
"1976" : "慢",
"1977" : "惯",
"1978" : "慩",
"1979" : "慧",
"1980" : "慨",
"1981" : "怂",
"1982" : "虑",
"1983" : "慰",
"1984" : "悭",
"1985" : "慴",
"1986" : "慵",
"1987" : "庆",
"1988" : "慷",
"1989" : "慼",
"1990" : "慾",
"1991" : "憁",
"1992" : "忧",
"1993" : "慥",
"1994" : "惫",
"1995" : "怜",
"1996" : "憑",
"1997" : "憔",
"1998" : "惮",
"1999" : "憎",
"2000" : "憝",
"2001" : "愤",
"2002" : "憧",
"2003" : "憨",
"2004" : "憩",
"2005" : "憬",
"2006" : "悯",
"2007" : "怃",
"2008" : "憯",
"2009" : "宪",
"2010" : "憍",
"2011" : "忆",
"2012" : "憸",
"2013" : "憾",
"2014" : "懃",
"2015" : "懆",
"2016" : "懂",
"2017" : "恳",
"2018" : "懈",
"2019" : "应",
"2020" : "懊",
"2021" : "懋",
"2022" : "怿",
"2023" : "懔",
"2024" : "懓",
"2025" : "愦",
"2026" : "憗",
"2027" : "憦",
"2028" : "憏",
"2029" : "怼",
"2030" : "懑",
"2031" : "懥",
"2032" : "懦",
"2033" : "惩",
"2034" : "懿",
"2035" : "懵",
"2036" : "懒",
"2037" : "怀",
"2038" : "悬",
"2039" : "忏",
"2040" : "惧",
"2041" : "懽",
"2042" : "慑",
"2043" : "恋",
"2044" : "恹",
"2045" : "戆",
"2046" : "慜",
"2047" : "戈",
"2048" : "戊",
"2049" : "戌",
"2050" : "戍",
"2051" : "戎",
"2052" : "成",
"2053" : "我",
"2054" : "戒",
"2055" : "戋",
"2056" : "戕",
"2057" : "或",
"2058" : "戚",
"2059" : "戛",
"2060" : "戟",
"2061" : "戢",
"2062" : "戥",
"2063" : "戡",
"2064" : "戣",
"2065" : "戬",
"2066" : "截",
"2067" : "戳",
"2068" : "戮",
"2069" : "战",
"2070" : "戏",
"2071" : "戴",
"2072" : "戤",
"2073" : "户",
"2074" : "戾",
"2075" : "房",
"2076" : "所",
"2077" : "戽",
"2078" : "扁",
"2079" : "扃",
"2080" : "扅",
"2081" : "扆",
"2082" : "扇",
"2083" : "扈",
"2084" : "扉",
"2085" : "扊",
"2086" : "槲",
"2087" : "手",
"2088" : "才",
"2089" : "扎",
"2090" : "扑",
"2091" : "扒",
"2092" : "打",
"2093" : "扔",
"2094" : "托",
"2095" : "扛",
"2096" : "扠",
"2097" : "抃",
"2098" : "扞",
"2099" : "扣",
"2100" : "扭",
"2101" : "扮",
"2102" : "扯",
"2103" : "扱",
"2104" : "扳",
"2105" : "扶",
"2106" : "批",
"2107" : "抵",
"2108" : "扼",
"2109" : "找",
"2110" : "承",
"2111" : "技",
"2113" : "抄",
"2114" : "抆",
"2115" : "抉",
"2116" : "把",
"2117" : "抑",
"2118" : "抒",
"2119" : "抓",
"2120" : "抔",
"2121" : "投",
"2122" : "抖",
"2123" : "抗",
"2124" : "折",
"2125" : "抨",
"2126" : "披",
"2127" : "抬",
"2128" : "抱",
"2129" : "抿",
"2130" : "抹",
"2131" : "押",
"2132" : "抽",
"2133" : "拂",
"2134" : "拄",
"2135" : "拆",
"2136" : "拇",
"2137" : "担",
"2138" : "拈",
"2139" : "拉",
"2140" : "拊",
"2141" : "抛",
"2142" : "拌",
"2143" : "拍",
"2144" : "拏",
"2145" : "拐",
"2146" : "拎",
"2147" : "拒",
"2148" : "拓",
"2149" : "拔",
"2150" : "挐",
"2151" : "拖",
"2152" : "拗",
"2153" : "拘",
"2154" : "拙",
"2155" : "拚",
"2156" : "招",
"2157" : "拜",
"2158" : "捂",
"2159" : "拮",
"2160" : "拭",
"2161" : "括",
"2162" : "拱",
"2163" : "拯",
"2164" : "拳",
"2165" : "拴",
"2166" : "拷",
"2167" : "拽",
"2168" : "拾",
"2169" : "拿",
"2170" : "持",
"2171" : "挂",
"2172" : "指",
"2173" : "挈",
"2174" : "按",
"2175" : "挍",
"2176" : "挑",
"2177" : "挖",
"2178" : "拼",
"2179" : "挨",
"2180" : "挪",
"2181" : "挫",
"2182" : "振",
"2183" : "挶",
"2184" : "挹",
"2185" : "挺",
"2186" : "挼",
"2187" : "挽",
"2188" : "挟",
"2189" : "捄",
"2190" : "捆",
"2191" : "捉",
"2192" : "捋",
"2193" : "捌",
"2194" : "捍",
"2195" : "掂",
"2196" : "捐",
"2197" : "挣",
"2198" : "捕",
"2199" : "挲",
"2200" : "捎",
"2201" : "捧",
"2202" : "捨",
"2203" : "捩",
"2204" : "扪",
"2205" : "捺",
"2206" : "捭",
"2207" : "据",
"2208" : "捲",
"2209" : "捱",
"2211" : "捶",
"2212" : "捷",
"2213" : "揍",
"2214" : "捻",
"2215" : "捽",
"2216" : "掀",
"2217" : "扫",
"2218" : "掇",
"2219" : "授",
"2220" : "掉",
"2221" : "掊",
"2222" : "掌",
"2223" : "掏",
"2224" : "掎",
"2225" : "掐",
"2226" : "排",
"2227" : "掖",
"2228" : "掘",
"2229" : "掛",
"2230" : "掠",
"2231" : "採",
"2232" : "探",
"2233" : "掣",
"2234" : "接",
"2235" : "控",
"2236" : "推",
"2237" : "掩",
"2238" : "措",
"2239" : "掬",
"2240" : "掯",
"2241" : "抡",
"2242" : "掞",
"2243" : "揹",
"2244" : "掫",
"2245" : "拣",
"2246" : "揄",
"2247" : "揆",
"2248" : "揉",
"2249" : "描",
"2250" : "捏",
"2251" : "提",
"2252" : "插",
"2253" : "揖",
"2254" : "扬",
"2255" : "换",
"2256" : "揜",
"2257" : "揠",
"2258" : "搽",
"2259" : "握",
"2260" : "揣",
"2261" : "揩",
"2262" : "揪",
"2263" : "揭",
"2264" : "挥",
"2265" : "搾",
"2266" : "援",
"2267" : "掽",
"2268" : "掾",
"2269" : "搞",
"2270" : "搕",
"2271" : "搧",
"2272" : "搯",
"2273" : "搆",
"2274" : "搉",
"2275" : "损",
"2276" : "搏",
"2277" : "搒",
"2278" : "搓",
"2279" : "搔",
"2280" : "摇",
"2281" : "捣",
"2282" : "搜",
"2283" : "搠",
"2284" : "搰",
"2285" : "搥",
"2286" : "搦",
"2287" : "搨",
"2288" : "搪",
"2289" : "搬",
"2290" : "搭",
"2291" : "搴",
"2292" : "摔",
"2293" : "抢",
"2294" : "搐",
"2295" : "摏",
"2296" : "掺",
"2297" : "撂",
"2298" : "摘",
"2299" : "搂",
"2300" : "撑",
"2301" : "摧",
"2302" : "摩",
"2303" : "摭",
"2304" : "挚",
"2305" : "抠",
"2306" : "抟",
"2307" : "摸",
"2308" : "摹",
"2309" : "摺",
"2310" : "掴",
"2311" : "摒",
"2312" : "摛",
"2313" : "撅",
"2314" : "摴",
"2315" : "摽",
"2316" : "撩",
"2317" : "撇",
"2318" : "捞",
"2319" : "撐",
"2320" : "撒",
"2321" : "挠",
"2322" : "撕",
"2323" : "撙",
"2324" : "撚",
"2325" : "撝",
"2326" : "撞",
"2327" : "撤",
"2328" : "拨",
"2329" : "抚",
"2330" : "播",
"2331" : "撮",
"2332" : "撰",
"2333" : "撲",
"2334" : "撬",
"2335" : "掼",
"2336" : "攉",
"2337" : "挞",
"2338" : "撼",
"2339" : "挝",
"2340" : "拥",
"2341" : "擂",
"2342" : "掳",
"2343" : "擅",
"2344" : "择",
"2345" : "击",
"2346" : "挡",
"2347" : "操",
"2348" : "擎",
"2349" : "拧",
"2350" : "擒",
"2351" : "擔",
"2352" : "擗",
"2353" : "擘",
"2354" : "據",
"2355" : "撷",
"2356" : "搀",
"2357" : "挤",
"2358" : "擡",
"2359" : "擢",
"2360" : "擣",
"2361" : "擦",
"2362" : "拟",
"2363" : "摈",
"2364" : "搁",
"2365" : "撵",
"2366" : "擭",
"2367" : "掷",
"2368" : "扩",
"2369" : "摆",
"2370" : "擞",
"2371" : "扰",
"2372" : "攀",
"2373" : "摅",
"2374" : "拦",
"2375" : "撄",
"2376" : "攘",
"2377" : "携",
"2378" : "摄",
"2379" : "拢",
"2380" : "攒",
"2381" : "挛",
"2382" : "摊",
"2383" : "搅",
"2384" : "攫",
"2385" : "揽",
"2386" : "攩",
"2387" : "拃",
"2388" : "支",
"2389" : "敧",
"2390" : "塃",
"2391" : "攴",
"2392" : "收",
"2393" : "攷",
"2394" : "攸",
"2395" : "攺",
"2396" : "攻",
"2397" : "放",
"2398" : "政",
"2399" : "故",
"2400" : "效",
"2401" : "敉",
"2402" : "敍",
"2403" : "教",
"2404" : "敏",
"2405" : "救",
"2406" : "敕",
"2407" : "敖",
"2408" : "败",
"2409" : "敔",
"2410" : "敂",
"2411" : "敝",
"2412" : "敞",
"2413" : "敢",
"2414" : "散",
"2415" : "敦",
"2416" : "夐",
"2417" : "敬",
"2418" : "敲",
"2419" : "整",
"2420" : "敌",
"2421" : "敷",
"2422" : "数",
"2423" : "敺",
"2424" : "斁",
"2425" : "敛",
"2426" : "毙",
"2427" : "敩",
"2428" : "敭",
"2429" : "文",
"2430" : "斌",
"2431" : "斐",
"2432" : "斑",
"2433" : "斓",
"2434" : "蟥",
"2435" : "斗",
"2436" : "料",
"2437" : "斛",
"2438" : "斜",
"2439" : "斝",
"2440" : "斟",
"2441" : "斡",
"2442" : "斢",
"2443" : "斤",
"2444" : "斥",
"2445" : "斧",
"2446" : "斨",
"2447" : "斩",
"2448" : "斯",
"2450" : "新",
"2451" : "断",
"2452" : "斲",
"2453" : "斸",
"2454" : "䐵",
"2455" : "方",
"2456" : "於",
"2457" : "施",
"2458" : "斿",
"2459" : "旎",
"2460" : "旁",
"2461" : "旂",
"2462" : "旃",
"2463" : "旄",
"2464" : "旅",
"2465" : "旆",
"2466" : "旐",
"2467" : "旋",
"2468" : "旌",
"2469" : "族",
"2470" : "旖",
"2471" : "旒",
"2472" : "旜",
"2473" : "旛",
"2474" : "旟",
"2475" : "旗",
"2476" : "烩",
"2477" : "无",
"2478" : "既",
"2479" : "曆",
"2480" : "日",
"2481" : "旦",
"2482" : "旨",
"2483" : "早",
"2484" : "旬",
"2485" : "旭",
"2486" : "旰",
"2487" : "旱",
"2488" : "晒",
"2489" : "旺",
"2490" : "昌",
"2491" : "昂",
"2492" : "昆",
"2493" : "昃",
"2494" : "明",
"2495" : "昏",
"2496" : "易",
"2497" : "昔",
"2498" : "晗",
"2499" : "昉",
"2500" : "昕",
"2501" : "昝",
"2502" : "星",
"2503" : "映",
"2504" : "春",
"2505" : "昧",
"2506" : "昨",
"2507" : "昭",
"2508" : "是",
"2509" : "昱",
"2510" : "昴",
"2511" : "昵",
"2512" : "昶",
"2513" : "晁",
"2514" : "时",
"2515" : "晃",
"2516" : "晋",
"2517" : "晌",
"2518" : "晏",
"2519" : "晚",
"2520" : "晢",
"2521" : "昼",
"2522" : "晞",
"2523" : "晡",
"2524" : "晤",
"2525" : "晨",
"2526" : "晦",
"2527" : "暎",
"2528" : "普",
"2529" : "景",
"2530" : "晰",
"2531" : "晳",
"2532" : "晴",
"2533" : "晶",
"2534" : "晷",
"2535" : "智",
"2536" : "晬",
"2537" : "暄",
"2538" : "暇",
"2539" : "暍",
"2540" : "暑",
"2541" : "暖",
"2542" : "暗",
"2543" : "旸",
"2544" : "暝",
"2545" : "畅",
"2546" : "晕",
"2547" : "晖",
"2548" : "暂",
"2549" : "𣊓",
"2550" : "暮",
"2551" : "暱",
"2552" : "暴",
"2553" : "暵",
"2554" : "暹",
"2555" : "暨",
"2556" : "晓",
"2557" : "暾",
"2558" : "曀",
"2559" : "曈",
"2560" : "昙",
"2561" : "曏",
"2562" : "曙",
"2563" : "曚",
"2564" : "曛",
"2565" : "曜",
"2566" : "曝",
"2567" : "曡",
"2568" : "旷",
"2569" : "曦",
"2570" : "昽",
"2571" : "曩",
"2572" : "曬",
"2573" : "昇",
"2574" : "曰",
"2575" : "曲",
"2576" : "曳",
"2577" : "更",
"2578" : "曷",
"2579" : "书",
"2580" : "曹",
"2581" : "曼",
"2582" : "曾",
"2583" : "替",
"2584" : "最",
"2585" : "会",
"2586" : "朅",
"2587" : "朂",
"2588" : "月",
"2589" : "有",
"2590" : "朋",
"2591" : "服",
"2592" : "朔",
"2593" : "朐",
"2594" : "朓",
"2595" : "朏",
"2596" : "朕",
"2597" : "朗",
"2598" : "望",
"2599" : "朞",
"2600" : "朝",
"2601" : "期",
"2602" : "朢",
"2603" : "朦",
"2604" : "胧",
"2605" : "耠",
"2606" : "木",
"2607" : "未",
"2608" : "末",
"2609" : "本",
"2610" : "札",
"2611" : "术",
"2612" : "朱",
"2613" : "朴",
"2614" : "朵",
"2615" : "朽",
"2616" : "杆",
"2617" : "杈",
"2618" : "杷",
"2619" : "杉",
"2620" : "杌",
"2621" : "李",
"2622" : "杏",
"2623" : "机",
"2624" : "材",
"2625" : "村",
"2626" : "杓",
"2627" : "杖",
"2628" : "柈",
"2629" : "杜",
"2630" : "𣏌",
"2631" : "束",
"2632" : "梠",
"2633" : "栓",
"2634" : "杪",
"2635" : "杭",
"2636" : "柿",
"2637" : "杯",
"2638" : "杰",
"2639" : "东",
"2640" : "杲",
"2641" : "杳",
"2642" : "椗",
"2643" : "杵",
"2644" : "棵",
"2645" : "杼",
"2646" : "松",
"2647" : "板",
"2648" : "枉",
"2649" : "析",
"2650" : "枕",
"2651" : "林",
"2652" : "枙",
"2653" : "枚",
"2654" : "果",
"2655" : "枝",
"2656" : "楻",
"2657" : "枇",
"2658" : "枋",
"2659" : "枌",
"2660" : "枘",
"2661" : "枯",
"2662" : "枲",
"2663" : "枳",
"2664" : "枵",
"2665" : "架",
"2666" : "枷",
"2667" : "枸",
"2668" : "柎",
"2669" : "枻",
"2670" : "柁",
"2671" : "柄",
"2672" : "柏",
"2673" : "某",
"2674" : "柑",
"2675" : "柒",
"2676" : "染",
"2677" : "柔",
"2678" : "柘",
"2679" : "柙",
"2680" : "柚",
"2681" : "柜",
"2682" : "柝",
"2683" : "柞",
"2684" : "柟",
"2685" : "柢",
"2686" : "查",
"2687" : "柬",
"2688" : "柯",
"2689" : "柮",
"2690" : "柰",
"2691" : "柱",
"2692" : "柳",
"2693" : "柴",
"2694" : "栅",
"2695" : "枰",
"2696" : "枹",
"2697" : "樋",
"2698" : "栗",
"2699" : "校",
"2700" : "栩",
"2701" : "株",
"2702" : "核",
"2703" : "栱",
"2704" : "根",
"2705" : "槾",
"2706" : "格",
"2707" : "栽",
"2708" : "桀",
"2709" : "桁",
"2710" : "桂",
"2711" : "桃",
"2712" : "桅",
"2713" : "框",
"2714" : "案",
"2715" : "桌",
"2716" : "桎",
"2717" : "桐",
"2718" : "桑",
"2719" : "桓",
"2720" : "桔",
"2721" : "桕",
"2722" : "栖",
"2723" : "栲",
"2724" : "栳",
"2725" : "桄",
"2726" : "桫",
"2727" : "桴",
"2728" : "桹",
"2729" : "桶",
"2730" : "桷",
"2731" : "桿",
"2732" : "梃",
"2733" : "梁",
"2734" : "梅",
"2735" : "梆",
"2736" : "梏",
"2737" : "梓",
"2738" : "栀",
"2739" : "梗",
"2740" : "桚",
"2741" : "梜",
"2742" : "条",
"2743" : "枭",
"2744" : "梢",
"2745" : "梧",
"2746" : "梨",
"2747" : "梭",
"2748" : "梯",
"2749" : "梱",
"2750" : "械",
"2751" : "棁",
"2752" : "梳",
"2753" : "梵",
"2754" : "桮",
"2755" : "梐",
"2756" : "桯",
"2757" : "弃",
"2758" : "棉",
"2759" : "棋",
"2760" : "棍",
"2761" : "棒",
"2762" : "棕",
"2763" : "枨",
"2764" : "枣",
"2765" : "棘",
"2766" : "棚",
"2767" : "栋",
"2768" : "棠",
"2769" : "棣",
"2770" : "栈",
"2771" : "棫",
"2772" : "棬",
"2773" : "森",
"2774" : "棰",
"2775" : "楦",
"2776" : "棲",
"2777" : "棹",
"2778" : "棺",
"2779" : "椁",
"2780" : "棻",
"2781" : "棼",
"2782" : "椀",
"2783" : "椅",
"2784" : "植",
"2785" : "椎",
"2786" : "椒",
"2787" : "棐",
"2788" : "棓",
"2789" : "棱",
"2790" : "棨",
"2791" : "椐",
"2792" : "椓",
"2793" : "椷",
"2794" : "椰",
"2795" : "椹",
"2796" : "椽",
"2797" : "椿",
"2798" : "楅",
"2799" : "杨",
"2800" : "枫",
"2801" : "楔",
"2802" : "栉",
"2803" : "楗",
"2804" : "橺",
"2805" : "楘",
"2806" : "楚",
"2807" : "楞",
"2808" : "楝",
"2809" : "楠",
"2810" : "榆",
"2811" : "楢",
"2812" : "楣",
"2813" : "楫",
"2814" : "业",
"2815" : "楯",
"2816" : "楮",
"2817" : "极",
"2818" : "楷",
"2819" : "楹",
"2820" : "椶",
"2821" : "椸",
"2822" : "楛",
"2823" : "桢",
"2824" : "楩",
"2825" : "楸",
"2826" : "榔",
"2827" : "榕",
"2828" : "榖",
"2829" : "榘",
"2830" : "榛",
"2831" : "榜",
"2832" : "榦",
"2833" : "榧",
"2834" : "榨",
"2835" : "榫",
"2836" : "榭",
"2837" : "荣",
"2838" : "榱",
"2839" : "榴",
"2840" : "榻",
"2841" : "榾",
"2842" : "槁",
"2843" : "槅",
"2844" : "槊",
"2845" : "构",
"2846" : "槌",
"2847" : "枪",
"2848" : "槎",
"2849" : "槐",
"2850" : "槓",
"2851" : "榎",
"2852" : "榤",
"2853" : "榥",
"2854" : "榷",
"2855" : "榼",
"2856" : "樑",
"2857" : "槃",
"2858" : "椠",
"2859" : "槨",
"2860" : "橌",
"2861" : "概",
"2862" : "桨",
"2863" : "槔",
"2864" : "槽",
"2865" : "槿",
"2866" : "桩",
"2867" : "乐",
"2868" : "樊",
"2869" : "楼",
"2870" : "樕",
"2871" : "标",
"2872" : "樛",
"2873" : "枢",
"2874" : "樟",
"2875" : "模",
"2876" : "样",
"2877" : "槥",
"2878" : "枞",
"2879" : "樏",
"2880" : "樗",
"2881" : "槱",
"2882" : "檩",
"2883" : "樸",
"2884" : "樵",
"2885" : "树",
"2886" : "樽",
"2887" : "樾",
"2888" : "橄",
"2889" : "桡",
"2890" : "桥",
"2891" : "橐",
"2892" : "橙",
"2893" : "橛",
"2894" : "機",
"2895" : "橡",
"2896" : "橧",
"2897" : "横",
"2898" : "樨",
"2899" : "柠",
"2900" : "椭",
"2901" : "桦",
"2902" : "橁",
"2903" : "檖",
"2904" : "橘",
"2905" : "檀",
"2906" : "柽",
"2907" : "檄",
"2908" : "檐",
"2909" : "档",
"2910" : "桧",
"2911" : "槚",
"2912" : "檝",
"2913" : "檠",
"2914" : "检",
"2915" : "樯",
"2916" : "檬",
"2917" : "梼",
"2918" : "檯",
"2919" : "槟",
"2920" : "槛",
"2921" : "櫂",
"2922" : "櫃",
"2923" : "櫈",
"2924" : "橹",
"2925" : "榈",
"2926" : "櫜",
"2927" : "椟",
"2928" : "橼",
"2929" : "栎",
"2930" : "櫱",
"2931" : "枥",
"2932" : "榇",
"2933" : "棂",
"2934" : "栊",
"2935" : "櫽",
"2936" : "栏",
"2937" : "樱",
"2938" : "权",
"2939" : "欝",
"2940" : "栾",
"2941" : "榄",
"2942" : "欃",
"2943" : "柩",
"2944" : "欠",
"2945" : "次",
"2946" : "欣",
"2947" : "欬",
"2948" : "欲",
"2949" : "款",
"2950" : "欷",
"2951" : "欹",
"2952" : "欺",
"2953" : "钦",
"2954" : "欿",
"2955" : "歃",
"2956" : "歆",
"2957" : "歇",
"2958" : "歕",
"2959" : "歉",
"2960" : "歌",
"2961" : "歎",
"2962" : "欧",
"2963" : "歔",
"2964" : "欻",
"2965" : "歙",
"2966" : "歛",
"2967" : "歝",
"2968" : "欤",
"2969" : "歠",
"2970" : "欢",
"2971" : "歞",
"2972" : "止",
"2973" : "正",
"2974" : "此",
"2975" : "步",
"2976" : "武",
"2977" : "歪",
"2978" : "歧",
"2979" : "岁",
"2980" : "历",
"2981" : "归",
"2982" : "钬",
"2983" : "歹",
"2984" : "死",
"2985" : "殁",
"2986" : "殀",
"2987" : "殂",
"2988" : "殃",
"2989" : "殄",
"2990" : "殆",
"2991" : "殉",
"2992" : "殊",
"2993" : "殍",
"2994" : "殖",
"2995" : "残",
"2996" : "殕",
"2997" : "殛",
"2998" : "殒",
"2999" : "殇",
"3000" : "殚",
"3001" : "殢",
"3002" : "殪",
"3003" : "殓",
"3004" : "殡",
"3005" : "歼",
"3006" : "镓",
"3007" : "殳",
"3008" : "段",
"3009" : "殷",
"3010" : "杀",
"3011" : "殼",
"3012" : "殽",
"3013" : "殿",
"3014" : "毁",
"3015" : "毅",
"3016" : "殴",
"3017" : "椵",
"3018" : "母",
"3019" : "毋",
"3020" : "每",
"3021" : "毒",
"3022" : "毓",
"3023" : "伢",
"3024" : "比",
"3025" : "毖",
"3026" : "毗",
"3027" : "毘",
"3028" : "鲣",
"3029" : "毛",
"3030" : "毡",
"3031" : "毧",
"3032" : "毫",
"3033" : "毬",
"3034" : "毯",
"3035" : "毳",
"3036" : "牦",
"3037" : "氅",
"3038" : "毸",
"3039" : "毹",
"3040" : "氄",
"3041" : "氈",
"3042" : "氍",
"3043" : "毜",
"3044" : "氏",
"3045" : "氐",
"3046" : "民",
"3047" : "氓",
"3048" : "氯",
"3049" : "气",
"3050" : "氛",
"3051" : "氣",
"3052" : "氤",
"3053" : "氲",
"3054" : "浠",
"3055" : "水",
"3056" : "氷",
"3057" : "永",
"3058" : "氾",
"3059" : "汁",
"3060" : "汀",
"3061" : "求",
"3062" : "汎",
"3063" : "汗",
"3064" : "污",
"3065" : "汛",
"3066" : "汜",
"3067" : "汝",
"3068" : "江",
"3069" : "池",
"3070" : "汊",
"3071" : "汐",
"3072" : "汔",
"3073" : "汕",
"3074" : "汞",
"3075" : "汨",
"3076" : "汪",
"3077" : "汰",
"3078" : "汲",
"3079" : "汴",
"3080" : "汶",
"3081" : "汹",
"3082" : "決",
"3083" : "汾",
"3084" : "沁",
"3085" : "沂",
"3086" : "汽",
"3087" : "沃",
"3088" : "沈",
"3089" : "沉",
"3090" : "沌",
"3091" : "沍",
"3092" : "沐",
"3093" : "没",
"3094" : "沔",
"3095" : "沖",
"3096" : "沗",
"3097" : "沙",
"3098" : "沚",
"3099" : "沛",
"3100" : "沆",
"3101" : "沓",
"3102" : "汩",
"3103" : "汭",
"3104" : "沅",
"3105" : "沬",
"3106" : "沫",
"3107" : "沮",
"3108" : "沱",
"3109" : "河",
"3110" : "沸",
"3111" : "油",
"3112" : "治",
"3113" : "沼",
"3114" : "沽",
"3115" : "沾",
"3116" : "沿",
"3117" : "洺",
"3118" : "泄",
"3119" : "泵",
"3120" : "泅",
"3121" : "泔",
"3122" : "泆",
"3123" : "泉",
"3124" : "泊",
"3125" : "泌",
"3126" : "泓",
"3127" : "法",
"3128" : "泗",
"3129" : "洩",
"3130" : "泙",
"3131" : "泛",
"3132" : "泠",
"3133" : "泡",
"3134" : "波",
"3135" : "泣",
"3136" : "泥",
"3137" : "注",
"3138" : "泫",
"3139" : "泯",
"3140" : "泮",
"3141" : "泰",
"3142" : "泱",
"3143" : "泲",
"3144" : "泳",
"3145" : "沭",
"3146" : "沴",
"3147" : "泐",
"3148" : "泖",
"3149" : "泝",
"3150" : "洄",
"3151" : "洊",
"3152" : "洋",
"3153" : "洌",
"3154" : "洎",
"3155" : "洒",
"3156" : "洗",
"3157" : "洛",
"3158" : "洟",
"3159" : "洞",
"3160" : "津",
"3161" : "洧",
"3162" : "汧",
"3163" : "洪",
"3164" : "洫",
"3165" : "洮",
"3166" : "洲",
"3167" : "洱",
"3168" : "洳",
"3169" : "洵",
"3170" : "洶",
"3171" : "洸",
"3172" : "活",
"3173" : "洼",
"3174" : "洽",
"3175" : "派",
"3176" : "洿",
"3177" : "流",
"3178" : "洙",
"3179" : "洚",
"3180" : "洹",
"3181" : "浙",
"3182" : "浚",
"3183" : "浣",
"3184" : "浦",
"3185" : "浩",
"3186" : "浪",
"3187" : "浮",
"3188" : "浴",
"3189" : "海",
"3190" : "浸",
"3191" : "浃",
"3192" : "浬",
"3193" : "泾",
"3194" : "消",
"3195" : "涉",
"3196" : "淳",
"3197" : "涓",
"3198" : "涔",
"3199" : "涕",
"3200" : "涞",
"3201" : "涘",
"3202" : "浡",
"3203" : "浜",
"3204" : "浥",
"3205" : "涂",
"3206" : "涅",
"3207" : "湟",
"3208" : "涑",
"3209" : "涯",
"3210" : "液",
"3211" : "涵",
"3212" : "涸",
"3213" : "涼",
"3214" : "涿",
"3215" : "淅",
"3216" : "淆",
"3217" : "淇",
"3218" : "淋",
"3219" : "淑",
"3220" : "渊",
"3221" : "淘",
"3222" : "淙",
"3223" : "泪",
"3224" : "淝",
"3225" : "淡",
"3226" : "淤",
"3227" : "淦",
"3228" : "浄",
"3229" : "沦",
"3230" : "淫",
"3231" : "淬",
"3232" : "淮",
"3233" : "淰",
"3234" : "深",
"3235" : "菏",
"3236" : "混",
"3237" : "清",
"3238" : "淹",
"3239" : "浅",
"3240" : "添",
"3241" : "涎",
"3242" : "涪",
"3243" : "涴",
"3244" : "淀",
"3245" : "淄",
"3246" : "淒",
"3247" : "淞",
"3248" : "汋",
"3249" : "淩",
"3250" : "滧",
"3251" : "涣",
"3252" : "渚",
"3253" : "減",
"3254" : "渝",
"3255" : "渠",
"3256" : "渡",
"3257" : "渣",
"3258" : "渤",
"3259" : "渥",
"3260" : "涡",
"3261" : "测",
"3262" : "渭",
"3263" : "港",
"3264" : "渰",
"3265" : "渴",
"3266" : "游",
"3267" : "渺",
"3268" : "浑",
"3269" : "湃",
"3270" : "湄",
"3271" : "湅",
"3272" : "湊",
"3273" : "湍",
"3274" : "湎",
"3275" : "湖",
"3276" : "湘",
"3277" : "湛",
"3278" : "湝",
"3279" : "湧",
"3280" : "湫",
"3281" : "湮",
"3282" : "汤",
"3283" : "湲",
"3284" : "湱",
"3285" : "濉",
"3286" : "㶍",
"3287" : "灕",
"3288" : "湓",
"3289" : "湔",
"3290" : "湜",
"3291" : "湏",
"3292" : "㶞",
"3293" : "源",
"3294" : "準",
"3295" : "溛",
"3296" : "溜",
"3297" : "沟",
"3298" : "溟",
"3299" : "溠",
"3300" : "溢",
"3301" : "溤",
"3302" : "溥",
"3303" : "溧",
"3304" : "汍",
"3305" : "溪",
"3306" : "温",
"3307" : "溯",
"3308" : "溱",
"3309" : "溲",
"3310" : "溶",
"3311" : "溷",
"3312" : "溺",
"3313" : "溼",
"3314" : "溽",
"3315" : "滁",
"3316" : "滂",
"3317" : "滃",
"3318" : "沧",
"3319" : "灭",
"3320" : "滋",
"3321" : "涤",
"3322" : "荥",
"3323" : "滑",
"3324" : "滓",
"3325" : "滔",
"3326" : "滕",
"3327" : "泩",
"3328" : "溘",
"3329" : "滇",
"3330" : "滘",
"3331" : "滫",
"3332" : "滮",
"3333" : "滞",
"3334" : "渗",
"3335" : "澝",
"3336" : "滴",
"3337" : "沪",
"3338" : "浒",
"3339" : "洑",
"3340" : "滚",
"3341" : "满",
"3342" : "渔",
"3343" : "漂",
"3344" : "漆",
"3345" : "漏",
"3346" : "溉",
"3347" : "漓",
"3348" : "演",
"3349" : "漘",
"3350" : "漙",
"3351" : "漠",
"3352" : "汉",
"3353" : "涟",
"3354" : "漪",
"3355" : "漫",
"3356" : "渍",
"3357" : "漭",
"3358" : "淌",
"3359" : "漱",
"3360" : "涨",
"3361" : "漳",
"3362" : "渐",
"3363" : "漾",
"3364" : "浆",
"3365" : "滊",
"3366" : "滷",
"3367" : "滹",
"3368" : "漈",
"3369" : "漉",
"3370" : "溎",
"3371" : "沤",
"3372" : "漦",
"3373" : "漩",
"3374" : "漯",
"3375" : "溆",
"3376" : "漶",
"3377" : "溇",
"3378" : "漕",
"3379" : "颍",
"3380" : "泼",
"3381" : "洁",
"3382" : "潘",
"3383" : "潜",
"3384" : "潟",
"3385" : "潢",
"3386" : "涧",
"3387" : "润",
"3388" : "潦",
"3389" : "潭",
"3390" : "潮",
"3391" : "溃",
"3392" : "潼",
"3393" : "潴",
"3394" : "潸",
"3395" : "潺",
"3396" : "涩",
"3397" : "澄",
"3398" : "浇",
"3399" : "涝",
"3400" : "澈",
"3401" : "澔",
"3402" : "澌",
"3403" : "澎",
"3404" : "潏",
"3405" : "潝",
"3406" : "潞",
"3407" : "潠",
"3408" : "潀",
"3409" : "濆",
"3410" : "浔",
"3411" : "潾",
"3412" : "澍",
"3413" : "澂",
"3414" : "澒",
"3415" : "沩",
"3416" : "澡",
"3417" : "澟",
"3418" : "澣",
"3419" : "泽",
"3420" : "浍",
"3421" : "澳",
"3422" : "澹",
"3423" : "激",
"3424" : "浊",
"3425" : "濂",
"3426" : "浓",
"3427" : "渑",
"3428" : "澥",
"3429" : "滪",
"3430" : "澧",
"3431" : "澨",
"3432" : "澰",
"3433" : "澴",
"3434" : "澱",
"3435" : "濇",
"3436" : "澶",
"3437" : "澼",
"3438" : "泞",
"3439" : "澬",
"3440" : "湿",
"3441" : "濈",
"3442" : "濊",
"3443" : "濛",
"3444" : "济",
"3445" : "濠",
"3446" : "濡",
"3447" : "涛",
"3448" : "滥",
"3449" : "濬",
"3450" : "濮",
"3451" : "濯",
"3452" : "潍",
"3453" : "滨",
"3454" : "泻",
"3455" : "濩",
"3456" : "濞",
"3457" : "溅",
"3458" : "泺",
"3459" : "滤",
"3460" : "渎",
"3461" : "浏",
"3462" : "瀑",
"3463" : "瀁",
"3464" : "濒",
"3465" : "灠",
"3466" : "瀚",
"3467" : "瀛",
"3468" : "沥",
"3469" : "潇",
"3470" : "瀠",
"3471" : "濑",
"3472" : "泸",
"3473" : "瀡",
"3474" : "瀣",
"3475" : "瀼",
"3476" : "瀋",
"3477" : "瀍",
"3478" : "泷",
"3479" : "瀦",
"3480" : "濳",
"3481" : "潋",
"3482" : "澜",
"3483" : "瀰",
"3484" : "溁",
"3485" : "瀹",
"3486" : "瀺",
"3487" : "灌",
"3488" : "沣",
"3489" : "灉",
"3490" : "滠",
"3491" : "灑",
"3492" : "滩",
"3493" : "灏",
"3494" : "湾",
"3495" : "滟",
"3496" : "灞",
"3497" : "滦",
"3498" : "炸",
"3499" : "火",
"3500" : "灰",
"3501" : "灶",
"3502" : "灸",
"3503" : "灿",
"3504" : "灼",
"3505" : "災",
"3506" : "灾",
"3507" : "炊",
"3508" : "炎",
"3509" : "炒",
"3510" : "炕",
"3511" : "炙",
"3512" : "炘",
"3513" : "炞",
"3514" : "炫",
"3515" : "炬",
"3516" : "炭",
"3517" : "炮",
"3518" : "炯",
"3519" : "炰",
"3520" : "炱",
"3521" : "炳",
"3522" : "炷",
"3523" : "炧",
"3524" : "畑",
"3525" : "烈",
"3526" : "烋",
"3527" : "乌",
"3529" : "烙",
"3530" : "烘",
"3531" : "烜",
"3532" : "烝",
"3533" : "烟",
"3534" : "烹",
"3535" : "烺",
"3536" : "烽",
"3537" : "焌",
"3538" : "焙",
"3539" : "焚",
"3540" : "焜",
"3541" : "無",
"3542" : "焦",
"3543" : "焰",
"3544" : "然",
"3545" : "焞",
"3546" : "焠",
"3547" : "焉",
"3548" : "煅",
"3549" : "焊",
"3550" : "炼",
"3551" : "煊",
"3552" : "煌",
"3553" : "煎",
"3554" : "煮",
"3555" : "炜",
"3556" : "熙",
"3557" : "煖",
"3558" : "煜",
"3559" : "煞",
"3560" : "茕",
"3561" : "煤",
"3562" : "焕",
"3563" : "煦",
"3564" : "照",
"3565" : "烦",
"3566" : "煨",
"3567" : "煏",
"3568" : "炀",
"3569" : "煽",
"3570" : "熀",
"3571" : "熄",
"3572" : "煴",
"3573" : "熇",
"3574" : "熊",
"3575" : "熏",
"3576" : "荧",
"3577" : "熛",
"3578" : "熟",
"3579" : "熔",
"3580" : "熨",
"3581" : "熬",
"3582" : "熯",
"3583" : "热",
"3584" : "熠",
"3585" : "颎",
"3586" : "熸",
"3587" : "熺",
"3588" : "熹",
"3589" : "炽",
"3590" : "燀",
"3591" : "煙",
"3592" : "燐",
"3593" : "燖",
"3594" : "烫",
"3595" : "燃",
"3596" : "燄",
"3597" : "灯",
"3598" : "燎",
"3599" : "烧",
"3600" : "燔",
"3601" : "燕",
"3602" : "营",
"3603" : "燠",
"3604" : "燥",
"3605" : "燦",
"3606" : "燧",
"3607" : "燬",
"3608" : "烛",
"3609" : "燻",
"3610" : "燮",
"3611" : "燹",
"3612" : "烬",
"3613" : "燿",
"3614" : "焘",
"3615" : "爆",
"3616" : "爇",
"3617" : "烁",
"3618" : "爓",
"3619" : "炉",
"3620" : "烂",
"3621" : "爚",
"3622" : "爝",
"3623" : "爟",
"3624" : "焮",
"3625" : "炖",
"3626" : "焖",
"3627" : "爨",
"3628" : "烤",
"3629" : "爪",
"3630" : "争",
"3631" : "爮",
"3632" : "爬",
"3633" : "爰",
"3634" : "为",
"3635" : "爵",
"3636" : "睑",
"3637" : "父",
"3638" : "爹",
"3639" : "爷",
"3640" : "爸",
"3641" : "爻",
"3642" : "爽",
"3643" : "爾",
"3644" : "趼",
"3645" : "爿",
"3646" : "牀",
"3647" : "牂",
"3648" : "牁",
"3649" : "牆",
"3650" : "藠",
"3651" : "片",
"3652" : "版",
"3653" : "牋",
"3654" : "牌",
"3655" : "牒",
"3656" : "牕",
"3657" : "牖",
"3658" : "牍",
"3659" : "牓",
"3660" : "牙",
"3661" : "肼",
"3662" : "牛",
"3663" : "牝",
"3664" : "牟",
"3665" : "牡",
"3666" : "牢",
"3667" : "牣",
"3668" : "牧",
"3669" : "牴",
"3670" : "物",
"3671" : "牠",
"3672" : "牯",
"3673" : "牲",
"3674" : "犋",
"3675" : "牷",
"3676" : "特",
"3677" : "牵",
"3678" : "牿",
"3679" : "犀",
"3680" : "犁",
"3681" : "犉",
"3682" : "犍",
"3683" : "犒",
"3684" : "荦",
"3685" : "犊",
"3686" : "牺",
"3687" : "犨",
"3688" : "牳",
"3689" : "犬",
"3690" : "犯",
"3691" : "犴",
"3692" : "状",
"3693" : "狂",
"3694" : "狃",
"3695" : "狄",
"3696" : "狁",
"3697" : "狎",
"3698" : "狐",
"3699" : "狗",
"3700" : "狙",
"3701" : "狡",
"3702" : "狥",
"3703" : "狠",
"3704" : "狩",
"3705" : "狴",
"3706" : "狸",
"3707" : "狭",
"3708" : "狼",
"3709" : "狈",
"3710" : "狻",
"3711" : "狺",
"3712" : "狷",
"3713" : "狢",
"3714" : "猁",
"3715" : "猖",
"3716" : "猗",
"3717" : "狰",
"3718" : "猛",
"3719" : "猜",
"3720" : "猝",
"3721" : "猞",
"3722" : "猊",
"3723" : "猘",
"3724" : "猢",
"3725" : "猥",
"3726" : "猩",
"3727" : "猪",
"3728" : "猫",
"3729" : "猴",
"3730" : "犹",
"3731" : "猷",
"3732" : "猔",
"3733" : "猱",
"3734" : "猺",
"3735" : "狲",
"3736" : "猾",
"3737" : "猿",
"3738" : "獃",
"3739" : "狱",
"3740" : "狮",
"3741" : "獍",
"3742" : "獐",
"3743" : "獒",
"3744" : "獗",
"3745" : "獘",
"3746" : "獧",
"3747" : "独",
"3748" : "狯",
"3749" : "獬",
"3750" : "獠",
"3751" : "狝",
"3752" : "获",
"3753" : "獯",
"3754" : "獳",
"3755" : "犷",
"3756" : "猎",
"3757" : "兽",
"3758" : "獭",
"3759" : "献",
"3760" : "玁",
"3761" : "狞",
"3762" : "猡",
"3763" : "玄",
"3764" : "率",
"3765" : "玅",
"3766" : "玈",
"3767" : "锔",
"3768" : "玉",
"3769" : "王",
"3770" : "玎",
"3771" : "玕",
"3772" : "玔",
"3773" : "玖",
"3774" : "玟",
"3775" : "玠",
"3776" : "玢",
"3777" : "玦",
"3778" : "珏",
"3779" : "玩",
"3780" : "玫",
"3781" : "玲",
"3782" : "玳",
"3783" : "玷",
"3784" : "珂",
"3785" : "珇",
"3786" : "珈",
"3787" : "珉",
"3788" : "玻",
"3789" : "珀",
"3790" : "珊",
"3791" : "珍",
"3792" : "珌",
"3793" : "玼",
"3794" : "珞",
"3795" : "珓",
"3796" : "珠",
"3797" : "珙",
"3798" : "珖",
"3799" : "珥",
"3800" : "珣",
"3801" : "珩",
"3802" : "珪",
"3803" : "班",
"3804" : "珧",
"3805" : "珮",
"3806" : "珽",
"3807" : "现",
"3808" : "球",
"3809" : "琅",
"3810" : "理",
"3811" : "琇",
"3812" : "琉",
"3813" : "珶",
"3814" : "珷",
"3815" : "琊",
"3816" : "琕",
"3817" : "琖",
"3818" : "琚",
"3819" : "琛",
"3820" : "琢",
"3821" : "琤",
"3822" : "琥",
"3823" : "琦",
"3824" : "琨",
"3825" : "琪",
"3826" : "琭",
"3827" : "琮",
"3828" : "琯",
"3829" : "琳",
"3830" : "琴",
"3831" : "琶",
"3832" : "琵",
"3833" : "琫",
"3834" : "琬",
"3835" : "玤",
"3836" : "琲",
"3837" : "玮",
"3838" : "瑕",
"3839" : "瑙",
"3840" : "瑚",
"3841" : "瑛",
"3842" : "瑜",
"3843" : "瑞",
"3844" : "瑟",
"3845" : "瑠",
"3846" : "瑀",
"3847" : "瑁",
"3848" : "瑇",
"3849" : "瑑",
"3850" : "瑗",
"3851" : "琐",
"3852" : "瑶",
"3853" : "莹",
"3854" : "玛",
"3855" : "瑰",
"3856" : "玱",
"3857" : "瑬",
"3858" : "瑯",
"3859" : "瑱",
"3860" : "瑳",
"3861" : "瑴",
"3862" : "璀",
"3863" : "璃",
"3864" : "璋",
"3865" : "瑽",
"3866" : "瑾",
"3867" : "璁",
"3868" : "璆",
"3869" : "𤨢",
"3870" : "璈",
"3871" : "琎",
"3872" : "璇",
"3873" : "璐",
"3874" : "璜",
"3875" : "玑",
"3876" : "璘",
"3877" : "璞",
"3878" : "璟",
"3879" : "璠",
"3880" : "璧",
"3881" : "璨",
"3882" : "璯",
"3883" : "环",
"3884" : "璪",
"3885" : "珰",
"3886" : "玺",
"3887" : "璲",
"3888" : "瑸",
"3889" : "玙",
"3890" : "瓊",
"3891" : "珑",
"3892" : "璎",
"3893" : "瓛",
"3894" : "璿",
"3895" : "瓒",
"3896" : "瓈",
"3897" : "瓀",
"3898" : "瓘",
"3899" : "璥",
"3900" : "瓜",
"3901" : "瓞",
"3902" : "瓠",
"3903" : "瓢",
"3904" : "瓣",
"3905" : "瓤",
"3906" : "佧",
"3907" : "瓦",
"3908" : "瓮",
"3909" : "瓴",
"3910" : "瓶",
"3911" : "瓷",
"3912" : "瓻",
"3913" : "甃",
"3914" : "甄",
"3915" : "甇",
"3916" : "瓿",
"3917" : "瓯",
"3918" : "甍",
"3919" : "甎",
"3920" : "甑",
"3921" : "甓",
"3922" : "甕",
"3923" : "甗",
"3924" : "甔",
"3925" : "甖",
"3926" : "瓩",
"3927" : "甘",
"3928" : "甚",
"3929" : "甜",
"3930" : "甞",
"3931" : "咔",
"3932" : "生",
"3933" : "甡",
"3934" : "产",
"3935" : "甥",
"3936" : "甦",
"3937" : "㽓",
"3938" : "用",
"3939" : "甪",
"3940" : "甫",
"3941" : "甬",
"3942" : "甯",
"3943" : "甩",
"3944" : "田",
"3945" : "由",
"3946" : "甲",
"3947" : "申",
"3948" : "男",
"3949" : "甸",
"3950" : "甽",
"3951" : "甾",
"3952" : "畀",
"3953" : "畋",
"3954" : "界",
"3955" : "畎",
"3956" : "畏",
"3957" : "町",
"3958" : "畊",
"3959" : "甿",
"3960" : "畇",
"3961" : "畔",
"3962" : "畚",
"3963" : "畛",
"3964" : "畜",
"3965" : "亩",
"3966" : "留",
"3967" : "畟",
"3968" : "毕",
"3969" : "畤",
"3970" : "略",
"3971" : "畦",
"3972" : "番",
"3973" : "画",
"3974" : "畬",
"3975" : "畯",
"3976" : "異",
"3977" : "畮",
"3978" : "畷",
"3979" : "畹",
"3980" : "畽",
"3981" : "当",
"3982" : "畸",
"3983" : "畿",
"3984" : "疆",
"3985" : "畴",
"3986" : "疊",
"3987" : "锎",
"3988" : "疋",
"3989" : "疎",
"3990" : "疏",
"3991" : "疐",
"3992" : "疑",
"3993" : "钪",
"3994" : "疒",
"3995" : "疔",
"3996" : "痃",
"3997" : "痉",
"3998" : "疚",
"3999" : "疝",
"4000" : "痠",
"4001" : "疣",
"4002" : "疤",
"4003" : "疥",
"4004" : "疫",
"4005" : "痚",
"4006" : "疲",
"4007" : "疳",
"4008" : "疴",
"4009" : "疵",
"4010" : "疸",
"4011" : "疹",
"4012" : "疼",
"4013" : "疽",
"4014" : "疾",
"4015" : "疿",
"4016" : "病",
"4017" : "症",
"4018" : "痂",
"4019" : "痊",
"4020" : "痌",
"4021" : "痍",
"4022" : "痒",
"4023" : "痔",
"4024" : "痕",
"4025" : "痧",
"4026" : "痘",
"4027" : "痛",
"4028" : "痞",
"4029" : "痣",
"4030" : "痡",
"4031" : "痢",
"4032" : "痱",
"4033" : "痰",
"4034" : "痳",
"4035" : "痴",
"4036" : "痹",
"4037" : "痼",
"4038" : "痾",
"4039" : "痿",
"4040" : "瘀",
"4041" : "瘁",
"4042" : "瘂",
"4043" : "瘇",
"4044" : "瘉",
"4045" : "疯",
"4046" : "疡",
"4047" : "瘏",
"4048" : "瘝",
"4049" : "瘐",
"4050" : "痪",
"4051" : "瘕",
"4052" : "瘖",
"4053" : "瘗",
"4054" : "瘟",
"4055" : "瘠",
"4056" : "疮",
"4057" : "瘢",
"4058" : "瘤",
"4059" : "瘥",
"4060" : "瘦",
"4061" : "疟",
"4062" : "痵",
"4063" : "瘸",
"4064" : "瘰",
"4065" : "瘳",
"4066" : "瘴",
"4067" : "瘵",
"4068" : "瘘",
"4069" : "瘼",
"4070" : "疗",
"4071" : "癃",
"4072" : "痨",
"4073" : "痫",
"4074" : "癌",
"4075" : "癖",
"4076" : "瘺",
"4077" : "癑",
"4078" : "疠",
"4079" : "瘩",
"4080" : "癜",
"4081" : "疖",
"4082" : "癡",
"4083" : "癢",
"4084" : "癥",
"4085" : "瘪",
"4086" : "瘿",
"4087" : "疬",
"4088" : "癞",
"4089" : "癣",
"4090" : "瘾",
"4091" : "癯",
"4092" : "痈",
"4093" : "瘫",
"4094" : "癫",
"4095" : "疙",
"4096" : "癶",
"4097" : "癸",
"4098" : "登",
"4099" : "发",
"4100" : "钶",
"4101" : "白",
"4102" : "百",
"4103" : "皂",
"4104" : "的",
"4105" : "皆",
"4106" : "皇",
"4107" : "皈",
"4108" : "皋",
"4109" : "皎",
"4110" : "皓",
"4111" : "皖",
"4112" : "皙",
"4113" : "皜",
"4114" : "皑",
"4115" : "皤",
"4116" : "皞",
"4117" : "皦",
"4118" : "皭",
"4119" : "皪",
"4120" : "皫",
"4121" : "氪",
"4122" : "皮",
"4123" : "皴",
"4124" : "皷",
"4125" : "皲",
"4126" : "皱",
"4127" : "皽",
"4128" : "醌",
"4129" : "皿",
"4130" : "盂",
"4131" : "盃",
"4132" : "盅",
"4133" : "盆",
"4134" : "盈",
"4135" : "益",
"4136" : "盌",
"4137" : "盍",
"4138" : "盎",
"4139" : "盒",
"4140" : "盔",
"4141" : "盛",
"4142" : "盗",
"4143" : "盝",
"4144" : "盏",
"4145" : "盟",
"4146" : "葢",
"4147" : "尽",
"4148" : "监",
"4149" : "盘",
"4150" : "盥",
"4151" : "卢",
"4152" : "盦",
"4153" : "盭",
"4154" : "盩",
"4155" : "盪",
"4156" : "盬",
"4157" : "蛞",
"4158" : "目",
"4159" : "盲",
"4160" : "直",
"4161" : "相",
"4162" : "盼",
"4163" : "盾",
"4164" : "省",
"4165" : "眄",
"4166" : "眇",
"4167" : "眈",
"4168" : "眉",
"4169" : "盯",
"4170" : "看",
"4171" : "盻",
"4172" : "眨",
"4173" : "盱",
"4174" : "睬",
"4175" : "眛",
"4176" : "真",
"4177" : "眠",
"4178" : "瞄",
"4179" : "眥",
"4180" : "眦",
"4181" : "眩",
"4182" : "眙",
"4183" : "眯",
"4184" : "眵",
"4185" : "瞇",
"4186" : "眶",
"4187" : "眷",
"4188" : "眸",
"4189" : "眺",
"4190" : "眼",
"4191" : "眾",
"4192" : "着",
"4193" : "眹",
"4194" : "睨",
"4195" : "睇",
"4196" : "睆",
"4197" : "瞅",
"4198" : "睍",
"4199" : "睚",
"4200" : "睛",
"4201" : "睁",
"4202" : "睐",
"4203" : "睾",
"4204" : "睡",
"4205" : "睢",
"4206" : "督",
"4207" : "睦",
"4208" : "睫",
"4209" : "瞌",
"4210" : "睟",
"4211" : "睥",
"4212" : "睹",
"4213" : "睿",
"4214" : "瞀",
"4215" : "睘",
"4216" : "睯",
"4217" : "瞋",
"4218" : "瞍",
"4219" : "瞎",
"4220" : "瞑",
"4221" : "瞒",
"4222" : "瞠",
"4223" : "瞪",
"4224" : "瞥",
"4225" : "瞧",
"4226" : "瞬",
"4227" : "瞳",
"4228" : "瞯",
"4229" : "瞭",
"4230" : "瞰",
"4231" : "瞆",
"4232" : "瞻",
"4233" : "瞽",
"4234" : "瞿",
"4235" : "矇",
"4236" : "矍",
"4237" : "眬",
"4238" : "矗",
"4239" : "矙",
"4240" : "瞢",
"4241" : "瞩",
"4242" : "眭",
"4243" : "矛",
"4244" : "矜",
"4245" : "矞",
"4246" : "砬",
"4247" : "矢",
"4248" : "矣",
"4249" : "知",
"4250" : "矧",
"4251" : "矩",
"4252" : "短",
"4253" : "矮",
"4254" : "矰",
"4255" : "矫",
"4256" : "矱",
"4257" : "鑞",
"4258" : "石",
"4259" : "矴",
"4260" : "矼",
"4261" : "砆",
"4262" : "矻",
"4263" : "砂",
"4264" : "砉",
"4265" : "砌",
"4266" : "砍",
"4267" : "砑",
"4268" : "砒",
"4269" : "砭",
"4270" : "砟",
"4271" : "砸",
"4272" : "砥",
"4273" : "斫",
"4274" : "砦",
"4275" : "破",
"4276" : "砲",
"4277" : "砜",
"4278" : "砧",
"4279" : "砮",
"4280" : "砰",
"4281" : "硃",
"4282" : "研",
"4283" : "硎",
"4284" : "硁",
"4285" : "硝",
"4286" : "硖",
"4287" : "砗",
"4288" : "硫",
"4289" : "硬",
"4290" : "碘",
"4291" : "砚",
"4292" : "确",
"4293" : "碍",
"4294" : "碌",
"4295" : "碎",
"4296" : "硼",
"4297" : "碗",
"4298" : "碁",
"4299" : "碇",
"4300" : "碔",
"4301" : "碑",
"4302" : "碓",
"4303" : "硾",
"4304" : "碡",
"4305" : "碪",
"4306" : "碉",
"4307" : "砀",
"4308" : "碟",
"4309" : "碣",
"4310" : "碧",
"4311" : "硕",
"4312" : "碬",
"4313" : "碯",
"4314" : "碰",
"4315" : "確",
"4316" : "码",
"4317" : "碾",
"4318" : "磁",
"4319" : "磅",
"4320" : "磊",
"4321" : "磇",
"4322" : "磋",
"4323" : "磐",
"4324" : "磓",
"4325" : "磔",
"4326" : "磕",
"4327" : "磉",
"4328" : "硙",
"4329" : "碴",
"4330" : "硵",
"4331" : "砖",
"4332" : "碛",
"4333" : "磨",
"4334" : "磬",
"4335" : "矶",
"4336" : "磲",
"4337" : "磺",
"4338" : "硗",
"4339" : "礁",
"4340" : "磷",
"4341" : "磻",
"4342" : "础",
"4343" : "磈",
"4344" : "礙",
"4345" : "矾",
"4346" : "礧",
"4347" : "磴",
"4348" : "礮",
"4349" : "矿",
"4350" : "砺",
"4351" : "砾",
"4352" : "砻",
"4353" : "礴",
"4354" : "碱",
"4355" : "示",
"4356" : "礽",
"4357" : "社",
"4358" : "祀",
"4359" : "祁",
"4360" : "祆",
"4361" : "祇",
"4362" : "祈",
"4363" : "祉",
"4364" : "礿",
"4365" : "祕",
"4366" : "祊",
"4367" : "祏",
"4368" : "祐",
"4369" : "祓",
"4370" : "祔",
"4371" : "祖",
"4372" : "祗",
"4373" : "祚",
"4374" : "祛",
"4375" : "祜",
"4376" : "祝",
"4377" : "神",
"4378" : "祟",
"4379" : "祠",
"4380" : "祫",
"4381" : "祲",
"4382" : "祥",
"4383" : "祧",
"4384" : "票",
"4385" : "祭",
"4386" : "禆",
"4387" : "祼",
"4388" : "祺",
"4389" : "禄",
"4390" : "禀",
"4391" : "禁",
"4392" : "禋",
"4393" : "祸",
"4394" : "祯",
"4395" : "福",
"4396" : "禘",
"4397" : "禊",
"4398" : "禔",
"4399" : "禖",
"4400" : "祎",
"4401" : "祃",
"4402" : "禝",
"4403" : "禦",
"4404" : "禠",
"4405" : "禫",
"4406" : "禧",
"4407" : "禅",
"4408" : "禨",
"4409" : "礼",
"4410" : "祢",
"4411" : "祷",
"4412" : "禳",
"4414" : "铼",
"4415" : "禸",
"4416" : "禹",
"4417" : "禺",
"4418" : "离",
"4419" : "禽",
"4420" : "镧",
"4421" : "禾",
"4422" : "秃",
"4423" : "秀",
"4424" : "私",
"4425" : "秈",
"4426" : "秉",
"4427" : "秆",
"4428" : "秋",
"4429" : "种",
"4430" : "科",
"4431" : "秕",
"4432" : "秒",
"4433" : "秔",
"4434" : "秘",
"4435" : "秪",
"4436" : "租",
"4437" : "秠",
"4438" : "秣",
"4439" : "秤",
"4440" : "秦",
"4441" : "秧",
"4442" : "秩",
"4443" : "秫",
"4444" : "秭",
"4445" : "秬",
"4446" : "秷",
"4447" : "秸",
"4448" : "移",
"4449" : "稀",
"4450" : "稂",
"4451" : "税",
"4452" : "稈",
"4453" : "程",
"4454" : "稌",
"4455" : "稍",
"4456" : "稊",
"4457" : "稔",
"4458" : "稗",
"4459" : "稞",
"4460" : "稚",
"4461" : "稛",
"4462" : "稜",
"4463" : "稟",
"4464" : "稠",
"4465" : "稭",
"4466" : "稹",
"4467" : "種",
"4468" : "称",
"4469" : "稷",
"4470" : "稻",
"4471" : "稼",
"4472" : "稽",
"4473" : "稿",
"4474" : "穀",
"4475" : "穄",
"4476" : "穆",
"4477" : "穉",
"4478" : "穋",
"4479" : "稣",
"4480" : "积",
"4481" : "颖",
"4482" : "穗",
"4483" : "穜",
"4484" : "穑",
"4485" : "穟",
"4486" : "秽",
"4487" : "秾",
"4488" : "穨",
"4489" : "稳",
"4490" : "穫",
"4491" : "穞",
"4492" : "穰",
"4493" : "罱",
"4494" : "穴",
"4495" : "穵",
"4496" : "究",
"4497" : "穸",
"4498" : "穹",
"4499" : "突",
"4500" : "空",
"4501" : "穽",
"4502" : "穿",
"4503" : "窀",
"4504" : "窄",
"4505" : "窅",
"4506" : "窆",
"4507" : "窈",
"4508" : "窋",
"4509" : "窌",
"4510" : "窒",
"4511" : "窕",
"4512" : "窖",
"4513" : "窞",
"4514" : "窗",
"4515" : "窘",
"4516" : "窟",
"4517" : "窠",
"4518" : "窨",
"4519" : "窝",
"4520" : "窪",
"4521" : "窬",
"4522" : "穷",
"4523" : "窑",
"4524" : "窳",
"4525" : "窎",
"4526" : "窭",
"4527" : "窸",
"4528" : "窣",
"4529" : "窥",
"4530" : "窾",
"4531" : "竂",
"4532" : "竁",
"4533" : "窜",
"4534" : "窍",
"4535" : "窦",
"4536" : "竈",
"4537" : "窃",
"4538" : "蒗",
"4539" : "立",
"4540" : "竑",
"4541" : "站",
"4542" : "竚",
"4543" : "竝",
"4544" : "竟",
"4545" : "章",
"4546" : "竣",
"4547" : "童",
"4548" : "竦",
"4549" : "竖",
"4550" : "竭",
"4551" : "端",
"4552" : "竞",
"4553" : "铑",
"4554" : "竹",
"4555" : "竺",
"4556" : "竽",
"4557" : "竿",
"4558" : "笄",
"4559" : "笈",
"4560" : "笊",
"4561" : "笏",
"4562" : "笑",
"4563" : "笙",
"4564" : "笛",
"4565" : "笞",
"4566" : "笤",
"4567" : "笠",
"4568" : "笥",
"4569" : "符",
"4570" : "笨",
"4571" : "笋",
"4572" : "笪",
"4573" : "笫",
"4574" : "第",
"4575" : "笮",
"4576" : "笆",
"4577" : "笎",
"4578" : "笱",
"4579" : "笳",
"4580" : "筅",
"4581" : "笔",
"4582" : "筇",
"4583" : "等",
"4584" : "筊",
"4585" : "筋",
"4586" : "筌",
"4587" : "筍",
"4588" : "筎",
"4589" : "筏",
"4590" : "筐",
"4591" : "筑",
"4592" : "筒",
"4593" : "筓",
"4594" : "答",
"4595" : "策",
"4596" : "筠",
"4597" : "筤",
"4598" : "筥",
"4599" : "筷",
"4600" : "笕",
"4601" : "筩",
"4602" : "筮",
"4603" : "筲",
"4604" : "筴",
"4605" : "筵",
"4606" : "筯",
"4607" : "筱",
"4608" : "笺",
"4609" : "箎",
"4610" : "箂",
"4611" : "箍",
"4612" : "箇",
"4613" : "箔",
"4614" : "箕",
"4615" : "算",
"4616" : "箛",
"4617" : "箝",
"4618" : "箠",
"4619" : "管",
"4620" : "筝",
"4621" : "箐",
"4622" : "箒",
"4623" : "箑",
"4624" : "箘",
"4625" : "箜",
"4626" : "箊",
"4627" : "箬",
"4628" : "箭",
"4629" : "箯",
"4630" : "箱",
"4631" : "箴",
"4632" : "箸",
"4633" : "箾",
"4634" : "节",
"4635" : "篁",
"4636" : "範",
"4637" : "篆",
"4638" : "篇",
"4639" : "築",
"4640" : "箧",
"4641" : "篘",
"4642" : "篔",
"4643" : "篙",
"4644" : "篚",
"4645" : "篝",
"4646" : "筿",
"4647" : "篡",
"4648" : "笃",
"4649" : "簑",
"4650" : "篧",
"4651" : "篨",
"4652" : "筛",
"4653" : "篦",
"4654" : "篪",
"4655" : "篲",
"4656" : "筚",
"4657" : "篺",
"4658" : "篴",
"4659" : "篷",
"4660" : "箦",
"4661" : "簆",
"4662" : "簇",
"4663" : "簋",
"4664" : "篓",
"4665" : "簌",
"4666" : "簏",
"4667" : "篌",
"4668" : "篾",
"4669" : "簃",
"4670" : "簚",
"4671" : "簜",
"4672" : "簟",
"4673" : "箪",
"4674" : "簠",
"4675" : "简",
"4676" : "篑",
"4677" : "簥",
"4678" : "簦",
"4679" : "簧",
"4680" : "簨",
"4681" : "簪",
"4682" : "箫",
"4683" : "簷",
"4684" : "簸",
"4685" : "簵",
"4686" : "簻",
"4687" : "签",
"4688" : "簾",
"4689" : "簿",
"4690" : "𥳁",
"4691" : "篮",
"4692" : "籊",
"4693" : "筹",
"4694" : "籍",
"4695" : "籄",
"4696" : "籐",
"4697" : "籔",
"4698" : "籓",
"4699" : "籀",
"4700" : "箓",
"4701" : "籚",
"4702" : "篯",
"4703" : "箨",
"4704" : "籁",
"4705" : "笼",
"4706" : "籤",
"4707" : "籥",
"4708" : "籨",
"4709" : "籧",
"4710" : "笾",
"4711" : "籫",
"4712" : "箩",
"4713" : "篱",
"4714" : "籯",
"4715" : "籲",
"4716" : "篰",
"4717" : "米",
"4718" : "粃",
"4719" : "籹",
"4720" : "粉",
"4721" : "粒",
"4722" : "粕",
"4723" : "粗",
"4724" : "粘",
"4725" : "粟",
"4726" : "粢",
"4727" : "粤",
"4728" : "粥",
"4729" : "籼",
"4730" : "粧",
"4731" : "粱",
"4732" : "粲",
"4733" : "粹",
"4734" : "粳",
"4735" : "粺",
"4736" : "粼",
"4737" : "精",
"4738" : "糈",
"4739" : "糊",
"4740" : "糉",
"4741" : "糕",
"4742" : "糇",
"4743" : "糖",
"4744" : "糗",
"4745" : "糜",
"4746" : "糁",
"4747" : "粪",
"4748" : "糟",
"4749" : "糠",
"4750" : "籽",
"4751" : "糙",
"4752" : "糧",
"4754" : "糯",
"4755" : "粝",
"4756" : "籴",
"4757" : "粑",
"4758" : "糵",
"4759" : "粜",
"4760" : "糎",
"4761" : "糸",
"4762" : "系",
"4763" : "纠",
"4764" : "纪",
"4765" : "纣",
"4766" : "约",
"4767" : "红",
"4768" : "纡",
"4769" : "纥",
"4770" : "纨",
"4771" : "纫",
"4772" : "紊",
"4773" : "纹",
"4774" : "紵",
"4775" : "缐",
"4776" : "紏",
"4777" : "纴",
"4778" : "紞",
"4779" : "紽",
"4780" : "纳",
"4781" : "纽",
"4782" : "纾",
"4783" : "纯",
"4784" : "纱",
"4785" : "纮",
"4786" : "纸",
"4787" : "级",
"4788" : "纷",
"4789" : "纭",
"4790" : "素",
"4791" : "纺",
"4792" : "索",
"4793" : "紫",
"4794" : "缏",
"4795" : "紬",
"4796" : "紮",
"4797" : "累",
"4798" : "细",
"4799" : "缩",
"4800" : "绅",
"4801" : "绍",
"4802" : "绀",
"4803" : "绋",
"4804" : "紾",
"4805" : "绐",
"4806" : "绌",
"4807" : "终",
"4808" : "絃",
"4809" : "组",
"4810" : "绊",
"4811" : "绂",
"4812" : "絅",
"4813" : "絏",
"4814" : "结",
"4815" : "绝",
"4816" : "絛",
"4817" : "絜",
"4818" : "绔",
"4819" : "绞",
"4820" : "络",
"4821" : "绚",
"4822" : "给",
"4823" : "绒",
"4824" : "絪",
"4825" : "絮",
"4826" : "绖",
"4827" : "统",
"4828" : "丝",
"4829" : "绛",
"4830" : "絖",
"4831" : "绢",
"4832" : "絺",
"4833" : "絿",
"4834" : "绑",
"4835" : "绨",
"4836" : "绣",
"4837" : "绠",
"4838" : "綌",
"4839" : "綍",
"4840" : "绥",
"4841" : "綑",
"4842" : "经",
"4843" : "绡",
"4844" : "综",
"4845" : "绿",
"4846" : "绸",
"4847" : "綦",
"4848" : "线",
"4849" : "绶",
"4850" : "维",
"4851" : "綮",
"4852" : "绾",
"4853" : "網",
"4854" : "纲",
"4855" : "绷",
"4856" : "缀",
"4857" : "綵",
"4858" : "纶",
"4859" : "绺",
"4860" : "绮",
"4861" : "绽",
"4862" : "绰",
"4863" : "緅",
"4864" : "緌",
"4865" : "緎",
"4866" : "绫",
"4867" : "缁",
"4868" : "紧",
"4869" : "绯",
"4870" : "绻",
"4871" : "綯",
"4872" : "绪",
"4873" : "缄",
"4874" : "缉",
"4875" : "绵",
"4876" : "缎",
"4877" : "缔",
"4878" : "缘",
"4879" : "緤",
"4880" : "缌",
"4881" : "緵",
"4882" : "编",
"4883" : "缓",
"4884" : "缅",
"4885" : "纬",
"4886" : "练",
"4887" : "緻",
"4888" : "缊",
"4889" : "缃",
"4890" : "繃",
"4891" : "缗",
"4892" : "緥",
"4893" : "缈",
"4894" : "繖",
"4895" : "缇",
"4896" : "萦",
"4897" : "缙",
"4898" : "缢",
"4899" : "缒",
"4900" : "绉",
"4901" : "缞",
"4902" : "缚",
"4903" : "缜",
"4904" : "缛",
"4905" : "县",
"4906" : "缣",
"4907" : "繁",
"4908" : "缟",
"4909" : "縠",
"4910" : "縢",
"4911" : "缝",
"4912" : "纵",
"4913" : "缧",
"4914" : "縳",
"4915" : "缦",
"4916" : "絷",
"4917" : "缕",
"4918" : "缥",
"4919" : "縻",
"4920" : "总",
"4921" : "绩",
"4922" : "繄",
"4923" : "缫",
"4924" : "缪",
"4925" : "繇",
"4926" : "缡",
"4927" : "縰",
"4928" : "縴",
"4929" : "繈",
"4930" : "织",
"4931" : "缮",
"4932" : "繙",
"4933" : "缭",
"4934" : "繐",
"4935" : "绕",
"4936" : "繢",
"4937" : "繡",
"4938" : "缯",
"4939" : "绳",
"4940" : "绘",
"4941" : "繫",
"4942" : "茧",
"4943" : "缰",
"4944" : "缳",
"4945" : "缴",
"4946" : "绎",
"4947" : "辫",
"4948" : "繻",
"4949" : "继",
"4950" : "纁",
"4951" : "纂",
"4952" : "缤",
"4953" : "缱",
"4954" : "纆",
"4955" : "纇",
"4956" : "缬",
"4957" : "缵",
"4958" : "续",
"4959" : "纍",
"4960" : "纤",
"4961" : "缠",
"4962" : "纩",
"4963" : "纑",
"4964" : "缨",
"4965" : "纔",
"4966" : "纛",
"4967" : "纚",
"4968" : "缆",
"4969" : "绦",
"4970" : "缶",
"4971" : "缸",
"4972" : "缺",
"4973" : "缾",
"4974" : "罀",
"4975" : "罃",
"4976" : "罁",
"4977" : "罄",
"4978" : "罅",
"4979" : "罇",
"4980" : "罋",
"4981" : "罂",
"4982" : "罍",
"4983" : "罏",
"4984" : "罐",
"4985" : "罆",
"4986" : "网",
"4987" : "罔",
"4988" : "罕",
"4989" : "罘",
"4990" : "罛",
"4991" : "罝",
"4992" : "罟",
"4993" : "罡",
"4994" : "罣",
"4996" : "罩",
"4997" : "罪",
"4998" : "罭",
"4999" : "置",
"5000" : "罚",
"5001" : "罨",
"5002" : "署",
"5003" : "罳",
"5004" : "罫",
"5005" : "罶",
"5006" : "骂",
"5007" : "罢",
"5008" : "罹",
"5009" : "羃",
"5010" : "罽",
"5011" : "罿",
"5012" : "罗",
"5013" : "罴",
"5014" : "羇",
"5015" : "羁",
"5016" : "鳓",
"5017" : "羊",
"5018" : "羌",
"5019" : "美",
"5020" : "羑",
"5021" : "羔",
"5023" : "羜",
"5024" : "羚",
"5025" : "羝",
"5026" : "羞",
"5027" : "羢",
"5028" : "群",
"5029" : "羡",
"5030" : "义",
"5031" : "羯",
"5032" : "羲",
"5033" : "羵",
"5034" : "羶",
"5035" : "羸",
"5036" : "羹",
"5037" : "羼",
"5038" : "羽",
"5039" : "翀",
"5040" : "翁",
"5041" : "翅",
"5042" : "翊",
"5043" : "翌",
"5044" : "翎",
"5045" : "习",
"5046" : "翔",
"5047" : "翕",
"5048" : "翛",
"5049" : "翟",
"5050" : "翠",
"5051" : "翡",
"5052" : "翣",
"5053" : "翥",
"5054" : "翦",
"5055" : "翩",
"5056" : "羿",
"5057" : "翚",
"5058" : "翮",
"5059" : "翯",
"5060" : "翰",
"5061" : "翳",
"5062" : "翘",
"5063" : "翱",
"5064" : "翻",
"5065" : "翼",
"5066" : "翽",
"5067" : "翾",
"5068" : "翿",
"5069" : "耀",
"5070" : "喱",
"5071" : "老",
"5072" : "考",
"5073" : "耄",
"5074" : "者",
"5075" : "耆",
"5076" : "耈",
"5077" : "耋",
"5078" : "佝",
"5079" : "而",
"5080" : "耍",
"5081" : "耎",
"5082" : "耐",
"5083" : "耑",
"5084" : "唡",
"5085" : "耒",
"5086" : "耔",
"5087" : "耕",
"5088" : "耗",
"5089" : "耘",
"5090" : "耙",
"5091" : "耜",
"5092" : "耝",
"5093" : "耞",
"5094" : "耡",
"5095" : "耩",
"5096" : "耦",
"5097" : "耨",
"5098" : "耧",
"5099" : "耰",
"5100" : "钌",
"5101" : "耳",
"5102" : "耶",
"5103" : "耻",
"5104" : "耽",
"5105" : "耿",
"5106" : "佡",
"5107" : "聆",
"5108" : "聊",
"5109" : "聒",
"5110" : "圣",
"5111" : "聘",
"5112" : "聚",
"5113" : "闻",
"5114" : "联",
"5115" : "聪",
"5116" : "声",
"5117" : "耸",
"5118" : "聩",
"5119" : "聂",
"5120" : "职",
"5121" : "聽",
"5122" : "聋",
"5123" : "啉",
"5124" : "聿",
"5125" : "肄",
"5126" : "肃",
"5127" : "肆",
"5128" : "肇",
"5129" : "呤",
"5130" : "馏",
"5131" : "肉",
"5132" : "肋",
"5133" : "肌",
"5134" : "肓",
"5135" : "肖",
"5136" : "肘",
"5137" : "肚",
"5138" : "肛",
"5139" : "肝",
"5140" : "股",
"5141" : "肢",
"5142" : "肥",
"5143" : "胺",
"5144" : "肩",
"5145" : "肫",
"5146" : "肯",
"5147" : "肱",
"5148" : "育",
"5149" : "肴",
"5150" : "肸",
"5151" : "肺",
"5152" : "胃",
"5153" : "胄",
"5154" : "背",
"5155" : "胗",
"5156" : "胔",
"5157" : "胍",
"5158" : "胎",
"5159" : "胏",
"5160" : "胖",
"5161" : "胙",
"5162" : "胚",
"5163" : "胳",
"5164" : "胝",
"5165" : "胞",
"5166" : "胰",
"5167" : "胠",
"5168" : "胭",
"5169" : "胯",
"5170" : "胡",
"5171" : "胥",
"5172" : "胸",
"5173" : "胼",
"5174" : "能",
"5175" : "胾",
"5176" : "脂",
"5177" : "腺",
"5178" : "胁",
"5179" : "脇",
"5180" : "胱",
"5181" : "脈",
"5182" : "脊",
"5183" : "脚",
"5184" : "脘",
"5185" : "胫",
"5186" : "脆",
"5187" : "脤",
"5188" : "脣",
"5189" : "朘",
"5190" : "脩",
"5191" : "膨",
"5192" : "脱",
"5193" : "脬",
"5194" : "脯",
"5195" : "胀",
"5196" : "脾",
"5197" : "腆",
"5198" : "腊",
"5199" : "腋",
"5200" : "肾",
"5201" : "腐",
"5202" : "腑",
"5203" : "腓",
"5204" : "腔",
"5205" : "腕",
"5206" : "腥",
"5207" : "脑",
"5208" : "腴",
"5209" : "肿",
"5210" : "腮",
"5211" : "膵",
"5212" : "腰",
"5213" : "腱",
"5214" : "肠",
"5215" : "腹",
"5216" : "腠",
"5217" : "腿",
"5218" : "膀",
"5219" : "膂",
"5220" : "膋",
"5221" : "膏",
"5222" : "肷",
"5223" : "腳",
"5224" : "膈",
"5225" : "膊",
"5226" : "腘",
"5227" : "肤",
"5228" : "膛",
"5229" : "膜",
"5230" : "膝",
"5231" : "胶",
"5232" : "腻",
"5233" : "膰",
"5234" : "膳",
"5235" : "膺",
"5236" : "膴",
"5237" : "膽",
"5238" : "膻",
"5239" : "脍",
"5240" : "脓",
"5241" : "臀",
"5242" : "臂",
"5243" : "臄",
"5244" : "臆",
"5245" : "脸",
"5246" : "臊",
"5247" : "脐",
"5248" : "臘",
"5249" : "臙",
"5250" : "臃",
"5251" : "胪",
"5252" : "臝",
"5253" : "脏",
"5254" : "脔",
"5255" : "胤",
"5256" : "臣",
"5257" : "卧",
"5258" : "臧",
"5259" : "临",
"5260" : "栌",
"5261" : "自",
"5262" : "臬",
"5263" : "臭",
"5264" : "臯",
"5265" : "臲",
"5266" : "镥",
"5267" : "至",
"5268" : "致",
"5269" : "臶",
"5270" : "臺",
"5271" : "臻",
"5272" : "氇",
"5273" : "臼",
"5274" : "臾",
"5275" : "舁",
"5276" : "舀",
"5277" : "舂",
"5278" : "舄",
"5279" : "舅",
"5280" : "与",
"5281" : "兴",
"5282" : "举",
"5283" : "旧",
"5284" : "舋",
"5285" : "摞",
"5286" : "舌",
"5287" : "舍",
"5288" : "舐",
"5289" : "舒",
"5290" : "舘",
"5291" : "舖",
"5292" : "舛",
"5293" : "舜",
"5294" : "舞",
"5295" : "舝",
"5296" : "镅",
"5297" : "舟",
"5298" : "舠",
"5299" : "舡",
"5300" : "航",
"5301" : "般",
"5302" : "舫",
"5303" : "舩",
"5304" : "舷",
"5305" : "舵",
"5306" : "舶",
"5307" : "船",
"5308" : "舸",
"5309" : "舲",
"5310" : "舳",
"5311" : "舴",
"5312" : "艇",
"5313" : "艋",
"5314" : "艄",
"5315" : "艖",
"5316" : "艗",
"5317" : "艎",
"5318" : "艘",
"5319" : "舱",
"5320" : "舣",
"5321" : "艟",
"5322" : "艨",
"5323" : "艭",
"5324" : "舰",
"5325" : "舻",
"5326" : "酶",
"5327" : "艮",
"5328" : "良",
"5329" : "艰",
"5330" : "钔",
"5331" : "色",
"5332" : "艴",
"5333" : "艳",
"5334" : "蓢",
"5335" : "艸",
"5336" : "艽",
"5337" : "艾",
"5338" : "芃",
"5339" : "芄",
"5340" : "芊",
"5341" : "芋",
"5342" : "芍",
"5343" : "芎",
"5344" : "芑",
"5345" : "芒",
"5346" : "芙",
"5347" : "芝",
"5348" : "芟",
"5349" : "芡",
"5350" : "芣",
"5351" : "芤",
"5352" : "芧",
"5353" : "芨",
"5354" : "芥",
"5355" : "芩",
"5356" : "芪",
"5357" : "芫",
"5358" : "芬",
"5359" : "芭",
"5360" : "芮",
"5361" : "芯",
"5362" : "芰",
"5363" : "花",
"5364" : "芳",
"5365" : "芷",
"5366" : "芸",
"5367" : "芹",
"5368" : "刍",
"5369" : "芼",
"5370" : "芽",
"5371" : "莜",
"5372" : "芾",
"5373" : "苑",
"5374" : "茆",
"5375" : "苒",
"5376" : "苓",
"5377" : "苔",
"5378" : "苕",
"5379" : "苗",
"5380" : "苙",
"5381" : "苛",
"5382" : "苜",
"5383" : "苞",
"5384" : "苟",
"5385" : "苣",
"5386" : "苡",
"5387" : "若",
"5388" : "苦",
"5389" : "苎",
"5390" : "苫",
"5391" : "英",
"5392" : "苴",
"5393" : "苹",
"5394" : "苻",
"5395" : "苽",
"5396" : "苾",
"5397" : "茀",
"5398" : "茁",
"5399" : "茂",
"5400" : "范",
"5401" : "茄",
"5402" : "茈",
"5403" : "茅",
"5404" : "茇",
"5405" : "苢",
"5406" : "茉",
"5407" : "茗",
"5408" : "荔",
"5409" : "茜",
"5410" : "茢",
"5411" : "茦",
"5412" : "茨",
"5413" : "茫",
"5414" : "茭",
"5415" : "茯",
"5416" : "茱",
"5417" : "兹",
"5418" : "茴",
"5419" : "茵",
"5420" : "茶",
"5421" : "茷",
"5422" : "茸",
"5423" : "茹",
"5424" : "荀",
"5425" : "荃",
"5426" : "萄",
"5427" : "荆",
"5428" : "荸",
"5429" : "荇",
"5430" : "草",
"5431" : "荍",
"5432" : "荏",
"5433" : "荐",
"5434" : "荑",
"5435" : "荒",
"5436" : "茝",
"5437" : "荄",
"5438" : "莛",
"5439" : "荳",
"5440" : "荷",
"5441" : "荻",
"5442" : "荼",
"5443" : "荽",
"5444" : "莅",
"5445" : "莊",
"5446" : "莎",
"5447" : "莒",
"5448" : "莓",
"5449" : "茎",
"5450" : "莘",
"5451" : "莞",
"5452" : "莠",
"5453" : "荚",
"5454" : "苋",
"5455" : "莆",
"5456" : "莨",
"5457" : "莩",
"5458" : "莪",
"5459" : "莫",
"5460" : "菟",
"5461" : "莉",
"5462" : "莽",
"5463" : "菀",
"5464" : "菁",
"5465" : "菅",
"5466" : "菇",
"5467" : "菉",
"5468" : "菊",
"5469" : "菑",
"5470" : "菓",
"5471" : "菖",
"5472" : "菔",
"5473" : "菘",
"5474" : "菠",
"5475" : "菜",
"5476" : "菩",
"5477" : "堇",
"5478" : "华",
"5479" : "菰",
"5480" : "菱",
"5481" : "菲",
"5482" : "菴",
"5483" : "莙",
"5484" : "菹",
"5485" : "菼",
"5486" : "菽",
"5487" : "萁",
"5488" : "萃",
"5489" : "萆",
"5490" : "莱",
"5491" : "萋",
"5492" : "萌",
"5493" : "萍",
"5494" : "萎",
"5495" : "萑",
"5496" : "菡",
"5497" : "菌",
"5498" : "萩",
"5499" : "𦯶",
"5500" : "苌",
"5501" : "萼",
"5502" : "萬",
"5503" : "萱",
"5504" : "莴",
"5505" : "萸",
"5506" : "萹",
"5507" : "落",
"5508" : "葆",
"5509" : "葉",
"5510" : "菸",
"5511" : "著",
"5512" : "葘",
"5513" : "葚",
"5514" : "葛",
"5515" : "葡",
"5516" : "董",
"5517" : "苇",
"5518" : "葩",
"5519" : "葫",
"5520" : "葬",
"5521" : "葭",
"5522" : "药",
"5523" : "葱",
"5524" : "葳",
"5525" : "葵",
"5526" : "荤",
"5527" : "葸",
"5528" : "葺",
"5529" : "葽",
"5530" : "蒂",
"5531" : "葑",
"5532" : "葹",
"5533" : "蒐",
"5534" : "葊",
"5535" : "莳",
"5536" : "蒙",
"5537" : "蒜",
"5538" : "蒡",
"5539" : "蒞",
"5540" : "蒟",
"5541" : "蒨",
"5542" : "蒭",
"5543" : "蒲",
"5544" : "蒸",
"5545" : "蒹",
"5546" : "蒺",
"5547" : "苍",
"5548" : "蒿",
"5549" : "荪",
"5550" : "蓁",
"5551" : "蓂",
"5552" : "蓄",
"5553" : "蓆",
"5554" : "蓉",
"5555" : "蓊",
"5556" : "盖",
"5557" : "蓖",
"5558" : "蓍",
"5559" : "蓏",
"5560" : "蓑",
"5561" : "蔀",
"5562" : "蓐",
"5563" : "蓓",
"5564" : "萏",
"5565" : "蔌",
"5566" : "蒯",
"5567" : "蒱",
"5568" : "蓧",
"5569" : "蓫",
"5570" : "蓬",
"5571" : "莲",
"5572" : "蓰",
"5573" : "莼",
"5574" : "蓴",
"5575" : "蔻",
"5576" : "蔫",
"5577" : "芗",
"5578" : "蓼",
"5579" : "蔆",
"5580" : "蔇",
"5581" : "蓿",
"5582" : "蔂",
"5583" : "蔑",
"5584" : "蕻",
"5585" : "蔓",
"5586" : "蔕",
"5587" : "蔗",
"5588" : "蔚",
"5589" : "蒌",
"5590" : "蔟",
"5591" : "蔡",
"5592" : "蒋",
"5593" : "荫",
"5594" : "蔴",
"5595" : "蔥",
"5596" : "茑",
"5597" : "蔔",
"5598" : "荜",
"5599" : "蔽",
"5600" : "蔬",
"5601" : "蕺",
"5602" : "蔾",
"5603" : "蕃",
"5604" : "蕉",
"5605" : "蕊",
"5606" : "荞",
"5607" : "莸",
"5608" : "蕖",
"5609" : "荛",
"5610" : "蕙",
"5611" : "蕝",
"5612" : "蕞",
"5613" : "蕡",
"5614" : "蒉",
"5615" : "蕨",
"5616" : "荡",
"5617" : "芜",
"5618" : "萧",
"5619" : "蕰",
"5620" : "薯",
"5621" : "蒇",
"5622" : "蕈",
"5623" : "蕳",
"5624" : "蕤",
"5625" : "薁",
"5626" : "蓣",
"5627" : "蕸",
"5628" : "蕾",
"5629" : "薐",
"5630" : "薢",
"5631" : "薄",
"5632" : "薅",
"5633" : "薇",
"5634" : "荟",
"5635" : "薉",
"5636" : "蓟",
"5637" : "薑",
"5638" : "蔷",
"5639" : "薖",
"5640" : "薙",
"5641" : "薛",
"5642" : "孽",
"5643" : "薜",
"5644" : "薦",
"5645" : "薨",
"5646" : "萨",
"5647" : "薪",
"5648" : "薤",
"5649" : "蘖",
"5650" : "薏",
"5651" : "薰",
"5652" : "薳",
"5653" : "薹",
"5654" : "荠",
"5655" : "薽",
"5656" : "薿",
"5657" : "藄",
"5658" : "藇",
"5659" : "藉",
"5660" : "荩",
"5661" : "藏",
"5662" : "藐",
"5663" : "蓝",
"5664" : "藁",
"5665" : "藕",
"5666" : "蒍",
"5667" : "藚",
"5668" : "藜",
"5669" : "艺",
"5670" : "藟",
"5671" : "藤",
"5672" : "藩",
"5673" : "藥",
"5674" : "薮",
"5675" : "藷",
"5676" : "蔼",
"5677" : "蔺",
"5679" : "藻",
"5680" : "藾",
"5681" : "藿",
"5682" : "蕲",
"5683" : "蘅",
"5684" : "芦",
"5685" : "苏",
"5686" : "蕴",
"5687" : "蘂",
"5688" : "夔",
"5689" : "蘋",
"5690" : "萚",
"5691" : "藓",
"5692" : "蔹",
"5693" : "茏",
"5694" : "蘩",
"5695" : "兰",
"5696" : "蘨",
"5697" : "虀",
"5698" : "蘧",
"5699" : "蘸",
"5700" : "萝",
"5701" : "蘼",
"5702" : "虉",
"5703" : "虆",
"5704" : "蘑",
"5705" : "虍",
"5706" : "虎",
"5707" : "虐",
"5708" : "虓",
"5709" : "虔",
"5710" : "处",
"5711" : "虚",
"5712" : "虏",
"5713" : "虞",
"5714" : "号",
"5715" : "虡",
"5716" : "虢",
"5717" : "虥",
"5718" : "虣",
"5719" : "亏",
"5720" : "𧈅",
"5721" : "醚",
"5722" : "虫",
"5723" : "虱",
"5724" : "虻",
"5725" : "虹",
"5726" : "虺",
"5727" : "蚓",
"5728" : "蚡",
"5729" : "蚕",
"5730" : "蚊",
"5731" : "蚋",
"5732" : "蚌",
"5733" : "蚣",
"5734" : "蚤",
"5735" : "蚧",
"5736" : "蚩",
"5737" : "蚪",
"5738" : "蚨",
"5739" : "蚯",
"5740" : "蚰",
"5741" : "蚱",
"5742" : "蚜",
"5743" : "蚶",
"5744" : "蚒",
"5745" : "蛄",
"5746" : "蛀",
"5747" : "蛆",
"5748" : "蛇",
"5749" : "蛉",
"5750" : "蛑",
"5751" : "蛋",
"5752" : "蛙",
"5753" : "蛛",
"5754" : "蛟",
"5755" : "蛣",
"5756" : "蛤",
"5757" : "蛩",
"5758" : "蛱",
"5759" : "蛭",
"5760" : "蛾",
"5761" : "蜹",
"5762" : "蜂",
"5763" : "蜃",
"5764" : "蜇",
"5765" : "蜈",
"5766" : "蜋",
"5767" : "蜓",
"5768" : "蛸",
"5769" : "蛹",
"5770" : "蜕",
"5771" : "蜀",
"5772" : "蜉",
"5773" : "蜍",
"5774" : "蜊",
"5775" : "蜎",
"5776" : "蜘",
"5777" : "蜚",
"5778" : "蜜",
"5779" : "蜡",
"5780" : "蜣",
"5781" : "蜩",
"5782" : "蜥",
"5783" : "蜒",
"5784" : "蛔",
"5785" : "蜴",
"5786" : "蜞",
"5787" : "蝀",
"5788" : "螂",
"5789" : "蜢",
"5790" : "蜮",
"5791" : "蝎",
"5792" : "蛐",
"5793" : "蚀",
"5794" : "蝗",
"5795" : "蝘",
"5796" : "蝙",
"5797" : "蜅",
"5798" : "猬",
"5799" : "蝠",
"5800" : "蜿",
"5801" : "蝥",
"5802" : "虾",
"5803" : "蝮",
"5804" : "蝱",
"5805" : "蝶",
"5806" : "蜷",
"5807" : "蟮",
"5808" : "蜻",
"5809" : "蝌",
"5810" : "蝨",
"5811" : "蜾",
"5812" : "蝣",
"5813" : "蝻",
"5814" : "蝴",
"5815" : "蜗",
"5816" : "融",
"5817" : "蠓",
"5818" : "蚂",
"5819" : "螘",
"5820" : "螟",
"5821" : "萤",
"5822" : "螣",
"5823" : "蚝",
"5824" : "螃",
"5825" : "蛳",
"5826" : "螫",
"5827" : "螱",
"5828" : "螺",
"5829" : "蝼",
"5830" : "螽",
"5832" : "蛰",
"5833" : "蟊",
"5834" : "螬",
"5835" : "螭",
"5836" : "螮",
"5837" : "螯",
"5838" : "螳",
"5839" : "蟀",
"5840" : "蟆",
"5841" : "蝈",
"5842" : "蟋",
"5843" : "虮",
"5844" : "蟪",
"5845" : "蟒",
"5846" : "蟛",
"5847" : "蟠",
"5848" : "蝉",
"5849" : "蟲",
"5850" : "蟭",
"5851" : "蟹",
"5852" : "蚁",
"5853" : "蟾",
"5854" : "蟳",
"5855" : "蛏",
"5856" : "蠃",
"5857" : "蟿",
"5858" : "蚃",
"5859" : "蝇",
"5860" : "虿",
"5861" : "蠍",
"5862" : "蠕",
"5863" : "蠖",
"5864" : "蠛",
"5865" : "蠜",
"5866" : "蠟",
"5867" : "蠡",
"5868" : "蠢",
"5869" : "蛎",
"5870" : "蟏",
"5871" : "蠹",
"5872" : "蛊",
"5873" : "蠲",
"5874" : "蠶",
"5875" : "蛮",
"5876" : "虬",
"5877" : "血",
"5878" : "嘧",
"5879" : "𥁃",
"5880" : "衄",
"5881" : "衅",
"5882" : "衂",
"5883" : "众",
"5884" : "衇",
"5885" : "衊",
"5886" : "嚜",
"5887" : "行",
"5888" : "衍",
"5889" : "衎",
"5890" : "術",
"5891" : "衒",
"5892" : "衕",
"5893" : "衖",
"5894" : "街",
"5895" : "衙",
"5896" : "衚",
"5897" : "衝",
"5898" : "卫",
"5899" : "衡",
"5900" : "衢",
"5901" : "衜",
"5902" : "衣",
"5903" : "表",
"5904" : "衫",
"5905" : "衰",
"5906" : "衲",
"5907" : "衷",
"5908" : "衩",
"5909" : "衵",
"5910" : "衽",
"5911" : "衾",
"5912" : "衿",
"5913" : "袁",
"5914" : "袈",
"5915" : "袋",
"5916" : "袍",
"5917" : "袒",
"5918" : "袖",
"5919" : "袗",
"5920" : "袜",
"5921" : "袚",
"5922" : "袞",
"5923" : "袠",
"5924" : "袤",
"5925" : "袪",
"5926" : "被",
"5927" : "袂",
"5928" : "袴",
"5929" : "袵",
"5930" : "袷",
"5931" : "袱",
"5932" : "裁",
"5933" : "裂",
"5934" : "袅",
"5935" : "裎",
"5936" : "裀",
"5937" : "裏",
"5938" : "裒",
"5939" : "裔",
"5940" : "裕",
"5941" : "裘",
"5942" : "裙",
"5943" : "补",
"5944" : "装",
"5945" : "裟",
"5946" : "褎",
"5947" : "裨",
"5948" : "裯",
"5949" : "裰",
"5950" : "裱",
"5951" : "裳",
"5952" : "裴",
"5953" : "裸",
"5954" : "裼",
"5955" : "裹",
"5956" : "製",
"5957" : "裾",
"5958" : "複",
"5959" : "褊",
"5960" : "裈",
"5961" : "褉",
"5962" : "褂",
"5963" : "褪",
"5964" : "褐",
"5965" : "褓",
"5966" : "袆",
"5967" : "褙",
"5968" : "褡",
"5969" : "褚",
"5970" : "褥",
"5971" : "褧",
"5972" : "褫",
"5973" : "褰",
"5974" : "裤",
"5975" : "褦",
"5976" : "褵",
"5977" : "褶",
"5978" : "亵",
"5979" : "襃",
"5980" : "襄",
"5981" : "衮",
"5982" : "襁",
"5983" : "袢",
"5984" : "袄",
"5985" : "襚",
"5986" : "襌",
"5987" : "裡",
"5988" : "褒",
"5989" : "裦",
"5990" : "裣",
"5991" : "裆",
"5992" : "襟",
"5993" : "襦",
"5994" : "襪",
"5995" : "襏",
"5996" : "褴",
"5997" : "褛",
"5998" : "襫",
"5999" : "襭",
"6000" : "衬",
"6001" : "襴",
"6002" : "袭",
"6003" : "襼",
"6004" : "襶",
"6005" : "裌",
"6006" : "襾",
"6007" : "西",
"6008" : "要",
"6009" : "覃",
"6010" : "覆",
"6011" : "覇",
"6012" : "覈",
"6013" : "覊",
"6014" : "镎",
"6015" : "见",
"6016" : "规",
"6017" : "觅",
"6018" : "视",
"6019" : "觇",
"6020" : "覜",
"6021" : "觋",
"6022" : "觎",
"6023" : "覩",
"6024" : "亲",
"6025" : "觊",
"6026" : "觏",
"6027" : "觐",
"6028" : "觑",
"6029" : "覵",
"6030" : "觉",
"6031" : "览",
"6032" : "觌",
"6033" : "觍",
"6034" : "观",
"6035" : "覼",
"6036" : "氖",
"6037" : "角",
"6038" : "觔",
"6039" : "觖",
"6040" : "觚",
"6041" : "觝",
"6042" : "觕",
"6043" : "解",
"6044" : "觥",
"6045" : "觩",
"6046" : "觫",
"6047" : "觭",
"6048" : "觱",
"6049" : "觳",
"6050" : "觞",
"6051" : "触",
"6052" : "觶",
"6053" : "觼",
"6054" : "觿",
"6055" : "萘",
"6056" : "言",
"6057" : "订",
"6058" : "讣",
"6059" : "訇",
"6060" : "计",
"6061" : "讯",
"6062" : "讨",
"6063" : "讦",
"6064" : "训",
"6065" : "讪",
"6066" : "讫",
"6067" : "讬",
"6068" : "记",
"6069" : "讧",
"6070" : "訏",
"6071" : "訑",
"6072" : "讱",
"6073" : "讹",
"6074" : "讶",
"6075" : "讼",
"6076" : "诀",
"6077" : "讷",
"6078" : "访",
"6079" : "许",
"6080" : "设",
"6081" : "讻",
"6082" : "訢",
"6083" : "诉",
"6084" : "诃",
"6085" : "诊",
"6086" : "证",
"6087" : "註",
"6088" : "訾",
"6089" : "诂",
"6090" : "诋",
"6091" : "詈",
"6092" : "詋",
"6093" : "讵",
"6094" : "诈",
"6095" : "诒",
"6096" : "诏",
"6097" : "评",
"6098" : "詖",
"6099" : "诎",
"6100" : "诅",
"6101" : "词",
"6102" : "詠",
"6103" : "诩",
"6104" : "询",
"6105" : "诣",
"6106" : "詤",
"6107" : "试",
"6108" : "诗",
"6109" : "诧",
"6110" : "诟",
"6111" : "诡",
"6112" : "诠",
"6113" : "诘",
"6114" : "话",
"6115" : "该",
"6116" : "详",
"6117" : "诙",
"6118" : "诖",
"6119" : "诓",
"6120" : "诔",
"6121" : "诛",
"6122" : "誇",
"6123" : "詵",
"6124" : "詹",
"6125" : "誌",
"6126" : "认",
"6127" : "誐",
"6128" : "诳",
"6129" : "誓",
"6130" : "诞",
"6131" : "诱",
"6132" : "诮",
"6133" : "语",
"6134" : "诚",
"6135" : "诫",
"6136" : "诬",
"6137" : "误",
"6138" : "诰",
"6139" : "诵",
"6140" : "诲",
"6141" : "说",
"6142" : "谁",
"6143" : "课",
"6144" : "谇",
"6145" : "诽",
"6146" : "谊",
"6147" : "訚",
"6148" : "调",
"6149" : "谄",
"6150" : "谆",
"6151" : "谈",
"6152" : "诿",
"6153" : "请",
"6154" : "诤",
"6155" : "诹",
"6156" : "谅",
"6157" : "诼",
"6158" : "论",
"6159" : "谂",
"6160" : "諐",
"6161" : "谀",
"6162" : "谞",
"6163" : "谝",
"6164" : "諟",
"6165" : "諠",
"6166" : "谔",
"6167" : "谛",
"6168" : "谐",
"6169" : "谏",
"6170" : "谕",
"6171" : "谘",
"6172" : "讳",
"6173" : "谙",
"6174" : "讽",
"6175" : "诸",
"6176" : "谚",
"6177" : "諵",
"6178" : "谖",
"6179" : "诺",
"6180" : "谋",
"6181" : "谒",
"6182" : "谓",
"6183" : "谍",
"6184" : "諡",
"6185" : "諴",
"6186" : "谌",
"6187" : "誊",
"6188" : "诌",
"6189" : "謆",
"6190" : "謇",
"6192" : "谎",
"6193" : "谜",
"6194" : "谧",
"6195" : "谑",
"6196" : "谤",
"6197" : "谦",
"6198" : "谥",
"6199" : "讲",
"6200" : "谢",
"6201" : "謟",
"6202" : "谣",
"6203" : "謏",
"6204" : "谡",
"6205" : "謦",
"6206" : "谟",
"6207" : "谪",
"6208" : "谬",
"6209" : "讴",
"6210" : "谨",
"6211" : "谩",
"6212" : "譁",
"6213" : "謿",
"6214" : "證",
"6215" : "譌",
"6216" : "谲",
"6217" : "讥",
"6218" : "譒",
"6219" : "譔",
"6220" : "谮",
"6221" : "识",
"6222" : "谯",
"6223" : "谭",
"6224" : "譍",
"6225" : "谱",
"6226" : "警",
"6227" : "譟",
"6228" : "谵",
"6229" : "譬",
"6230" : "译",
"6231" : "议",
"6232" : "谴",
"6233" : "护",
"6234" : "诪",
"6235" : "誉",
"6236" : "读",
"6237" : "谫",
"6238" : "讁",
"6239" : "变",
"6240" : "讌",
"6241" : "雠",
"6242" : "詟",
"6243" : "谗",
"6244" : "谶",
"6245" : "让",
"6246" : "讙",
"6247" : "讚",
"6248" : "讛",
"6249" : "谠",
"6250" : "谳",
"6251" : "讟",
"6252" : "誯",
"6253" : "谷",
"6254" : "谿",
"6255" : "豁",
"6256" : "豄",
"6257" : "硇",
"6258" : "豆",
"6259" : "岂",
"6260" : "豋",
"6261" : "豌",
"6262" : "豉",
"6263" : "豇",
"6264" : "豎",
"6265" : "豐",
"6266" : "豒",
"6267" : "豔",
"6268" : "豏",
"6269" : "豕",
"6270" : "豚",
"6271" : "豝",
"6272" : "象",
"6273" : "豢",
"6274" : "豨",
"6275" : "豪",
"6276" : "豫",
"6277" : "豬",
"6278" : "豭",
"6279" : "豳",
"6280" : "豵",
"6281" : "铌",
"6282" : "豸",
"6283" : "豹",
"6284" : "豺",
"6285" : "貂",
"6286" : "貆",
"6287" : "貅",
"6288" : "貉",
"6289" : "貊",
"6290" : "貎",
"6291" : "貍",
"6292" : "貓",
"6293" : "貔",
"6294" : "貛",
"6295" : "脲",
"6296" : "贝",
"6297" : "贞",
"6298" : "负",
"6299" : "财",
"6300" : "贡",
"6301" : "貤",
"6302" : "贫",
"6303" : "货",
"6304" : "贪",
"6305" : "贩",
"6306" : "贯",
"6307" : "责",
"6308" : "贮",
"6309" : "貲",
"6310" : "贰",
"6311" : "贵",
"6312" : "贬",
"6313" : "贷",
"6314" : "买",
"6315" : "贶",
"6316" : "费",
"6317" : "贴",
"6318" : "贻",
"6319" : "贸",
"6320" : "贺",
"6321" : "贲",
"6322" : "贳",
"6323" : "赂",
"6324" : "赁",
"6325" : "贿",
"6326" : "赅",
"6327" : "资",
"6328" : "贾",
"6329" : "贼",
"6330" : "賉",
"6331" : "赈",
"6332" : "赊",
"6333" : "宾",
"6334" : "赇",
"6335" : "赒",
"6336" : "赉",
"6337" : "赐",
"6338" : "賝",
"6339" : "赏",
"6340" : "赍",
"6341" : "赔",
"6342" : "赓",
"6343" : "贤",
"6344" : "卖",
"6345" : "贱",
"6346" : "赋",
"6347" : "质",
"6348" : "账",
"6349" : "賟",
"6350" : "赌",
"6351" : "赖",
"6352" : "赗",
"6353" : "賮",
"6354" : "赚",
"6355" : "赙",
"6356" : "购",
"6357" : "赛",
"6358" : "赜",
"6359" : "賸",
"6360" : "贽",
"6361" : "赘",
"6362" : "赠",
"6363" : "赞",
"6364" : "贇",
"6365" : "赡",
"6366" : "赢",
"6367" : "赆",
"6368" : "赃",
"6369" : "赑",
"6370" : "赎",
"6371" : "贑",
"6372" : "赝",
"6373" : "赣",
"6374" : "贉",
"6375" : "赤",
"6376" : "赦",
"6377" : "赧",
"6378" : "赫",
"6379" : "赭",
"6380" : "赪",
"6381" : "钕",
"6382" : "走",
"6383" : "赳",
"6384" : "赴",
"6385" : "赶",
"6386" : "起",
"6387" : "趁",
"6388" : "趄",
"6389" : "超",
"6390" : "越",
"6391" : "趕",
"6392" : "赵",
"6393" : "趣",
"6394" : "趑",
"6395" : "趋",
"6396" : "趟",
"6397" : "蒎",
"6398" : "足",
"6399" : "趵",
"6400" : "趾",
"6401" : "跴",
"6402" : "趺",
"6403" : "趹",
"6404" : "跂",
"6405" : "跋",
"6406" : "跅",
"6407" : "跌",
"6408" : "跎",
"6409" : "跏",
"6410" : "跑",
"6411" : "跕",
"6412" : "跖",
"6413" : "跚",
"6414" : "跛",
"6415" : "距",
"6416" : "跗",
"6417" : "跫",
"6418" : "跟",
"6419" : "跡",
"6420" : "跣",
"6421" : "跨",
"6422" : "跪",
"6423" : "跬",
"6424" : "路",
"6425" : "踩",
"6426" : "跳",
"6427" : "跽",
"6428" : "踉",
"6429" : "踊",
"6430" : "跼",
"6431" : "踏",
"6432" : "践",
"6433" : "踔",
"6434" : "踖",
"6435" : "踝",
"6436" : "踞",
"6437" : "踢",
"6438" : "踣",
"6439" : "踧",
"6440" : "踘",
"6441" : "踡",
"6442" : "踟",
"6443" : "踮",
"6444" : "踰",
"6445" : "踴",
"6446" : "踵",
"6447" : "踹",
"6448" : "蹓",
"6449" : "踽",
"6450" : "蹁",
"6451" : "蹂",
"6452" : "蹄",
"6453" : "踱",
"6454" : "蹀",
"6455" : "蹐",
"6456" : "蹇",
"6457" : "蹈",
"6458" : "蹉",
"6459" : "蹊",
"6460" : "跃",
"6461" : "跄",
"6462" : "跸",
"6463" : "蹔",
"6464" : "蹙",
"6465" : "蹟",
"6466" : "蹒",
"6467" : "蹤",
"6468" : "蹜",
"6469" : "𨄮",
"6470" : "蹠",
"6471" : "蹯",
"6472" : "蹲",
"6473" : "蹴",
"6474" : "蹶",
"6475" : "跷",
"6476" : "蹡",
"6477" : "蹢",
"6478" : "蹬",
"6479" : "蹭",
"6480" : "蹰",
"6481" : "躁",
"6482" : "躄",
"6483" : "躅",
"6484" : "躇",
"6485" : "趸",
"6486" : "踌",
"6487" : "跻",
"6488" : "蹋",
"6489" : "躐",
"6490" : "踯",
"6491" : "躒",
"6492" : "踬",
"6493" : "躔",
"6494" : "跹",
"6495" : "蹑",
"6496" : "躩",
"6497" : "躏",
"6498" : "蹦",
"6499" : "蹚",
"6500" : "身",
"6501" : "躬",
"6502" : "躭",
"6503" : "躲",
"6504" : "躯",
"6505" : "躶",
"6506" : "軃",
"6507" : "躺",
"6508" : "车",
"6509" : "轧",
"6510" : "轨",
"6511" : "军",
"6512" : "軏",
"6513" : "轩",
"6514" : "轫",
"6515" : "轭",
"6516" : "软",
"6517" : "軨",
"6518" : "轸",
"6519" : "轴",
"6520" : "轵",
"6521" : "軷",
"6522" : "轶",
"6523" : "轺",
"6524" : "轼",
"6525" : "较",
"6526" : "辂",
"6527" : "輈",
"6528" : "载",
"6529" : "輀",
"6530" : "輇",
"6531" : "轾",
"6532" : "辄",
"6533" : "輓",
"6534" : "辅",
"6535" : "轻",
"6536" : "輗",
"6537" : "輙",
"6538" : "辆",
"6539" : "辎",
"6540" : "辉",
"6541" : "辍",
"6542" : "辇",
"6543" : "辈",
"6544" : "轮",
"6545" : "辋",
"6546" : "輠",
"6547" : "辊",
"6548" : "輧",
"6549" : "辑",
"6550" : "辏",
"6551" : "输",
"6552" : "輹",
"6553" : "辐",
"6554" : "輭",
"6555" : "輮",
"6556" : "輴",
"6557" : "輶",
"6558" : "辗",
"6559" : "舆",
"6560" : "毂",
"6561" : "辖",
"6562" : "辕",
"6563" : "轀",
"6564" : "辘",
"6565" : "轇",
"6566" : "轕",
"6567" : "转",
"6568" : "辙",
"6569" : "轿",
"6570" : "轏",
"6571" : "轒",
"6572" : "轖",
"6573" : "轘",
"6574" : "轞",
"6575" : "轰",
"6576" : "辔",
"6577" : "轹",
"6578" : "轳",
"6579" : "軕",
"6580" : "辛",
"6581" : "辜",
"6582" : "辟",
"6583" : "辠",
"6584" : "辣",
"6585" : "辥",
"6586" : "办",
"6587" : "辨",
"6588" : "辞",
"6589" : "辩",
"6590" : "耪",
"6591" : "辰",
"6592" : "辱",
"6593" : "农",
"6594" : "狍",
"6595" : "辵",
"6596" : "迂",
"6597" : "迄",
"6598" : "迅",
"6599" : "𨑳",
"6600" : "迍",
"6601" : "迎",
"6602" : "近",
"6603" : "迓",
"6604" : "返",
"6605" : "迕",
"6606" : "迢",
"6607" : "迤",
"6608" : "迥",
"6609" : "迦",
"6610" : "迨",
"6611" : "迪",
"6612" : "迫",
"6613" : "迭",
"6614" : "逄",
"6615" : "述",
"6616" : "迴",
"6617" : "迷",
"6618" : "迸",
"6619" : "迹",
"6620" : "追",
"6621" : "迺",
"6622" : "退",
"6623" : "送",
"6624" : "适",
"6625" : "逃",
"6626" : "逅",
"6627" : "逆",
"6628" : "逋",
"6629" : "逯",
"6630" : "逍",
"6631" : "透",
"6632" : "逐",
"6633" : "逑",
"6634" : "途",
"6635" : "迳",
"6636" : "逖",
"6637" : "逗",
"6638" : "这",
"6639" : "通",
"6640" : "逛",
"6641" : "逝",
"6642" : "逞",
"6643" : "速",
"6644" : "造",
"6645" : "逡",
"6646" : "逢",
"6647" : "连",
"6648" : "逭",
"6649" : "逮",
"6650" : "週",
"6651" : "进",
"6652" : "逵",
"6653" : "逶",
"6654" : "逸",
"6655" : "逷",
"6656" : "逼",
"6657" : "遇",
"6658" : "遁",
"6659" : "遂",
"6660" : "遄",
"6661" : "逾",
"6662" : "遊",
"6663" : "运",
"6664" : "遍",
"6665" : "过",
"6666" : "遏",
"6667" : "遐",
"6668" : "遑",
"6669" : "遒",
"6670" : "道",
"6671" : "达",
"6672" : "违",
"6673" : "遘",
"6674" : "遥",
"6675" : "遛",
"6676" : "逊",
"6677" : "递",
"6678" : "远",
"6679" : "遡",
"6680" : "遣",
"6681" : "遢",
"6682" : "遝",
"6683" : "遨",
"6684" : "適",
"6685" : "遭",
"6686" : "遮",
"6687" : "遯",
"6688" : "迟",
"6689" : "遴",
"6690" : "遵",
"6691" : "遶",
"6692" : "迁",
"6693" : "选",
"6694" : "遹",
"6695" : "遗",
"6696" : "遆",
"6697" : "辽",
"6698" : "遽",
"6699" : "避",
"6700" : "邀",
"6701" : "迈",
"6702" : "邂",
"6703" : "还",
"6704" : "邅",
"6705" : "迩",
"6706" : "邃",
"6707" : "邈",
"6708" : "边",
"6709" : "逻",
"6710" : "逦",
"6711" : "疱",
"6712" : "邑",
"6713" : "邛",
"6714" : "邗",
"6715" : "邙",
"6716" : "邕",
"6717" : "邢",
"6718" : "鄮",
"6719" : "那",
"6720" : "邡",
"6721" : "邦",
"6722" : "邨",
"6723" : "邪",
"6724" : "邠",
"6725" : "邯",
"6726" : "邱",
"6727" : "邲",
"6728" : "邴",
"6729" : "邳",
"6730" : "邵",
"6731" : "邶",
"6732" : "邸",
"6733" : "邰",
"6734" : "邽",
"6735" : "郁",
"6736" : "郅",
"6737" : "郇",
"6738" : "郊",
"6739" : "邾",
"6740" : "郃",
"6741" : "郗",
"6742" : "郄",
"6743" : "郕",
"6744" : "郛",
"6745" : "郎",
"6746" : "郡",
"6747" : "郢",
"6748" : "郤",
"6749" : "郙",
"6750" : "郜",
"6751" : "郏",
"6752" : "部",
"6753" : "郭",
"6754" : "郴",
"6755" : "邮",
"6756" : "郯",
"6757" : "都",
"6758" : "郿",
"6759" : "鄂",
"6760" : "邹",
"6761" : "鄄",
"6762" : "邬",
"6763" : "乡",
"6764" : "鄗",
"6765" : "郧",
"6766" : "鄙",
"6767" : "鄘",
"6768" : "鄢",
"6769" : "鄞",
"6770" : "鄠",
"6771" : "鄜",
"6772" : "邓",
"6773" : "鄫",
"6774" : "郑",
"6775" : "邻",
"6776" : "鄱",
"6777" : "邺",
"6778" : "郐",
"6779" : "郸",
"6780" : "鄹",
"6781" : "鄯",
"6782" : "邝",
"6783" : "酂",
"6784" : "酃",
"6785" : "酆",
"6786" : "郦",
"6787" : "郝",
"6788" : "酉",
"6789" : "酊",
"6790" : "酋",
"6791" : "酌",
"6792" : "配",
"6793" : "酎",
"6794" : "酒",
"6795" : "酖",
"6796" : "酗",
"6797" : "酢",
"6798" : "酥",
"6799" : "酣",
"6800" : "酤",
"6801" : "酡",
"6802" : "酩",
"6803" : "酪",
"6804" : "酬",
"6805" : "酲",
"6806" : "酵",
"6807" : "酷",
"6808" : "酸",
"6809" : "酴",
"6810" : "酹",
"6811" : "酺",
"6812" : "醃",
"6813" : "醅",
"6814" : "醆",
"6815" : "醇",
"6816" : "醉",
"6817" : "醊",
"6818" : "醋",
"6819" : "醍",
"6820" : "醐",
"6821" : "醒",
"6822" : "醓",
"6823" : "醜",
"6824" : "酝",
"6825" : "醡",
"6826" : "醢",
"6827" : "醩",
"6828" : "醪",
"6829" : "医",
"6830" : "酱",
"6831" : "醮",
"6832" : "醯",
"6833" : "醴",
"6834" : "醲",
"6835" : "醵",
"6836" : "醺",
"6837" : "醽",
"6838" : "醁",
"6839" : "醼",
"6840" : "酿",
"6841" : "釁",
"6842" : "釂",
"6843" : "釄",
"6844" : "锫",
"6845" : "釆",
"6846" : "采",
"6847" : "释",
"6848" : "釉",
"6849" : "里",
"6850" : "重",
"6851" : "野",
"6852" : "量",
"6853" : "釐",
"6854" : "锌",
"6855" : "金",
"6856" : "钊",
"6857" : "钉",
"6858" : "釜",
"6859" : "针",
"6860" : "钓",
"6861" : "钏",
"6862" : "钙",
"6863" : "釦",
"6864" : "釭",
"6865" : "钗",
"6866" : "鈇",
"6867" : "钯",
"6868" : "钝",
"6869" : "钩",
"6870" : "钤",
"6871" : "钠",
"6872" : "钞",
"6873" : "钮",
"6874" : "钧",
"6875" : "铃",
"6876" : "钹",
"6877" : "钰",
"6878" : "鉁",
"6879" : "钿",
"6880" : "钜",
"6881" : "铉",
"6882" : "鉏",
"6883" : "钳",
"6884" : "铅",
"6885" : "钺",
"6886" : "钵",
"6887" : "鉤",
"6888" : "铇",
"6889" : "铏",
"6890" : "铰",
"6891" : "钲",
"6892" : "银",
"6893" : "铳",
"6894" : "铜",
"6895" : "钴",
"6896" : "铂",
"6897" : "铣",
"6898" : "铨",
"6899" : "铢",
"6900" : "铭",
"6901" : "铦",
"6902" : "衔",
"6903" : "铫",
"6904" : "锐",
"6905" : "钾",
"6906" : "销",
"6907" : "锈",
"6908" : "锉",
"6909" : "鋈",
"6910" : "铤",
"6911" : "铗",
"6912" : "锋",
"6913" : "锓",
"6914" : "铀",
"6915" : "锄",
"6916" : "铓",
"6917" : "铺",
"6918" : "铻",
"6919" : "銲",
"6920" : "锯",
"6921" : "钢",
"6922" : "录",
"6923" : "锥",
"6924" : "锟",
"6925" : "锤",
"6926" : "锱",
"6927" : "铮",
"6928" : "锭",
"6929" : "钱",
"6930" : "锦",
"6931" : "锚",
"6932" : "锡",
"6933" : "锢",
"6934" : "错",
"6935" : "錞",
"6936" : "锜",
"6937" : "鍊",
"6938" : "锅",
"6939" : "锻",
"6940" : "铋",
"6941" : "铵",
"6942" : "锹",
"6943" : "键",
"6944" : "鍼",
"6945" : "锺",
"6946" : "锴",
"6947" : "镀",
"6948" : "锷",
"6949" : "锽",
"6950" : "锸",
"6951" : "锲",
"6952" : "鍭",
"6953" : "锾",
"6954" : "鎔",
"6955" : "銾",
"6956" : "锁",
"6957" : "鎗",
"6958" : "鎚",
"6959" : "鎛",
"6960" : "鎞",
"6961" : "镃",
"6962" : "鎌",
"6963" : "铠",
"6964" : "镐",
"6965" : "镒",
"6966" : "镇",
"6967" : "镑",
"6968" : "镞",
"6969" : "链",
"6970" : "镝",
"6971" : "鏖",
"6972" : "铿",
"6973" : "锵",
"6974" : "镗",
"6975" : "镜",
"6976" : "镘",
"6977" : "镖",
"6978" : "镛",
"6979" : "镂",
"6980" : "铲",
"6981" : "鏐",
"6982" : "锑",
"6983" : "錾",
"6984" : "铙",
"6985" : "铧",
"6986" : "铝",
"6987" : "镪",
"6988" : "钟",
"6989" : "镫",
"6990" : "镌",
"6991" : "镰",
"6992" : "镯",
"6993" : "铁",
"6994" : "镮",
"6995" : "铎",
"6996" : "镍",
"6997" : "铛",
"6998" : "鐻",
"6999" : "铸",
"7000" : "镬",
"7001" : "镔",
"7002" : "鑑",
"7003" : "鉴",
"7004" : "鑤",
"7005" : "钨",
"7006" : "鑛",
"7007" : "铄",
"7008" : "鑢",
"7009" : "镳",
"7010" : "鑪",
"7011" : "钥",
"7012" : "镭",
"7013" : "镶",
"7014" : "鑵",
"7015" : "镊",
"7017" : "锣",
"7018" : "鑽",
"7019" : "銮",
"7020" : "凿",
"7021" : "锰",
"7022" : "长",
"7023" : "蜱",
"7024" : "门",
"7025" : "闩",
"7026" : "闪",
"7027" : "闫",
"7028" : "闭",
"7029" : "闬",
"7030" : "开",
"7031" : "闳",
"7032" : "闰",
"7033" : "闲",
"7034" : "閒",
"7035" : "间",
"7036" : "闵",
"7037" : "闸",
"7038" : "閟",
"7039" : "阂",
"7040" : "閤",
"7041" : "阁",
"7042" : "阀",
"7043" : "闺",
"7044" : "闽",
"7045" : "阃",
"7046" : "阆",
"7047" : "闾",
"7048" : "阅",
"7049" : "阊",
"7050" : "阉",
"7051" : "阎",
"7052" : "阏",
"7053" : "阍",
"7054" : "阈",
"7055" : "阒",
"7056" : "闇",
"7057" : "闱",
"7058" : "闉",
"7059" : "阔",
"7060" : "阕",
"7061" : "阑",
"7062" : "阇",
"7063" : "阗",
"7064" : "阌",
"7065" : "闿",
"7066" : "阖",
"7067" : "阙",
"7068" : "闯",
"7069" : "闒",
"7070" : "关",
"7071" : "闚",
"7072" : "阓",
"7073" : "阐",
"7074" : "阚",
"7075" : "闢",
"7076" : "阛",
"7077" : "闼",
"7078" : "闆",
"7079" : "阜",
"7080" : "阝",
"7081" : "阞",
"7082" : "阡",
"7083" : "阤",
"7084" : "阨",
"7085" : "阬",
"7086" : "阮",
"7087" : "阯",
"7088" : "阱",
"7089" : "防",
"7090" : "阪",
"7091" : "阻",
"7092" : "阼",
"7093" : "阿",
"7094" : "陀",
"7095" : "陂",
"7096" : "附",
"7097" : "陋",
"7098" : "限",
"7099" : "陌",
"7100" : "降",
"7101" : "陔",
"7102" : "陉",
"7103" : "陛",
"7104" : "陕",
"7105" : "陞",
"7106" : "陟",
"7107" : "陡",
"7108" : "院",
"7109" : "阵",
"7110" : "除",
"7111" : "陪",
"7112" : "陬",
"7113" : "阴",
"7114" : "陲",
"7115" : "陈",
"7116" : "陴",
"7117" : "陵",
"7118" : "陶",
"7119" : "陷",
"7120" : "陆",
"7121" : "陼",
"7122" : "阳",
"7123" : "陻",
"7124" : "隍",
"7125" : "隄",
"7126" : "隅",
"7127" : "隆",
"7128" : "隈",
"7129" : "陧",
"7130" : "队",
"7131" : "隋",
"7132" : "阶",
"7133" : "隔",
"7134" : "陨",
"7135" : "隖",
"7136" : "隗",
"7137" : "隘",
"7138" : "隙",
"7139" : "际",
"7140" : "障",
"7141" : "隣",
"7142" : "隤",
"7143" : "隧",
"7144" : "隩",
"7145" : "险",
"7146" : "隮",
"7147" : "隰",
"7148" : "隐",
"7149" : "隳",
"7150" : "陇",
"7151" : "随",
"7152" : "隶",
"7153" : "隸",
"7154" : "苤",
"7155" : "隹",
"7156" : "隻",
"7157" : "隼",
"7158" : "雀",
"7159" : "雁",
"7160" : "雄",
"7161" : "雅",
"7162" : "集",
"7163" : "雇",
"7164" : "雉",
"7165" : "隽",
"7166" : "雌",
"7167" : "雍",
"7168" : "雎",
"7169" : "雊",
"7170" : "𨿅",
"7171" : "雕",
"7172" : "巂",
"7173" : "虽",
"7174" : "雘",
"7175" : "双",
"7176" : "雏",
"7177" : "杂",
"7178" : "雝",
"7179" : "雞",
"7180" : "離",
"7181" : "难",
"7182" : "钷",
"7183" : "雨",
"7184" : "雩",
"7185" : "雪",
"7186" : "雯",
"7187" : "雰",
"7188" : "雱",
"7189" : "雲",
"7190" : "零",
"7191" : "雷",
"7192" : "雹",
"7193" : "电",
"7194" : "需",
"7195" : "霂",
"7196" : "霅",
"7197" : "霄",
"7198" : "霈",
"7199" : "霉",
"7200" : "霆",
"7201" : "震",
"7202" : "霍",
"7203" : "霎",
"7204" : "霏",
"7205" : "霑",
"7206" : "霓",
"7207" : "霖",
"7208" : "霜",
"7209" : "霞",
"7210" : "霢",
"7211" : "霤",
"7212" : "雾",
"7213" : "霰",
"7214" : "霪",
"7215" : "霱",
"7216" : "露",
"7217" : "霶",
"7218" : "霸",
"7219" : "霹",
"7220" : "霮",
"7221" : "霁",
"7222" : "靀",
"7223" : "霾",
"7224" : "霭",
"7225" : "雳",
"7226" : "叇",
"7227" : "灵",
"7228" : "叆",
"7229" : "霨",
"7230" : "青",
"7231" : "靖",
"7232" : "靓",
"7233" : "靛",
"7234" : "静",
"7235" : "镤",
"7236" : "非",
"7237" : "靠",
"7238" : "靡",
"7239" : "氆",
"7240" : "面",
"7241" : "靦",
"7242" : "靧",
"7243" : "靥",
"7244" : "钎",
"7245" : "革",
"7246" : "靳",
"7247" : "靴",
"7248" : "鞅",
"7249" : "靶",
"7250" : "靷",
"7251" : "靸",
"7252" : "鞀",
"7253" : "鞉",
"7254" : "鞍",
"7255" : "巩",
"7256" : "鞋",
"7257" : "鞗",
"7258" : "鞘",
"7259" : "鞙",
"7260" : "鞞",
"7261" : "鞚",
"7262" : "鞟",
"7263" : "鞠",
"7264" : "鞦",
"7265" : "鞫",
"7267" : "鞭",
"7268" : "鞮",
"7269" : "鞱",
"7270" : "鞶",
"7271" : "鞲",
"7272" : "鞴",
"7273" : "鞾",
"7274" : "韁",
"7275" : "鞑",
"7276" : "韆",
"7277" : "鞯",
"7278" : "羟",
"7279" : "韦",
"7280" : "韨",
"7281" : "韩",
"7282" : "韧",
"7283" : "韎",
"7284" : "韐",
"7285" : "韒",
"7286" : "韔",
"7287" : "韝",
"7288" : "韘",
"7289" : "韪",
"7290" : "韬",
"7291" : "韫",
"7292" : "韤",
"7293" : "韠",
"7294" : "炝",
"7295" : "韭",
"7296" : "韮",
"7297" : "韱",
"7298" : "仫",
"7299" : "音",
"7300" : "韶",
"7301" : "韵",
"7302" : "響",
"7303" : "韺",
"7304" : "頀",
"7305" : "苘",
"7306" : "页",
"7307" : "顶",
"7308" : "顷",
"7309" : "项",
"7310" : "顸",
"7311" : "顺",
"7312" : "须",
"7313" : "颂",
"7314" : "颃",
"7315" : "预",
"7316" : "顽",
"7317" : "颁",
"7318" : "颔",
"7319" : "顿",
"7320" : "顼",
"7321" : "頍",
"7322" : "颀",
"7323" : "頖",
"7324" : "颇",
"7325" : "领",
"7326" : "頞",
"7327" : "颉",
"7328" : "颐",
"7329" : "颚",
"7330" : "𩓐",
"7331" : "颏",
"7332" : "頫",
"7333" : "头",
"7334" : "颒",
"7335" : "颊",
"7336" : "颕",
"7337" : "頳",
"7338" : "颈",
"7339" : "颓",
"7340" : "频",
"7341" : "颗",
"7342" : "顇",
"7343" : "顋",
"7344" : "题",
"7345" : "额",
"7346" : "颜",
"7347" : "頿",
"7348" : "颛",
"7349" : "願",
"7350" : "颡",
"7351" : "颠",
"7352" : "类",
"7353" : "顜",
"7354" : "颟",
"7355" : "颢",
"7356" : "顦",
"7357" : "顾",
"7358" : "颤",
"7359" : "显",
"7360" : "颦",
"7361" : "颅",
"7362" : "颧",
"7363" : "粬",
"7364" : "风",
"7365" : "颭",
"7366" : "飒",
"7367" : "飓",
"7368" : "飔",
"7369" : "颿",
"7370" : "飏",
"7371" : "飖",
"7372" : "飕",
"7373" : "飘",
"7374" : "飙",
"7375" : "飗",
"7376" : "颱",
"7377" : "颳",
"7378" : "飞",
"7379" : "醛",
"7380" : "食",
"7381" : "飡",
"7382" : "饥",
"7383" : "饤",
"7384" : "飦",
"7385" : "飧",
"7386" : "饨",
"7387" : "饪",
"7388" : "饫",
"7389" : "饬",
"7390" : "饮",
"7391" : "饭",
"7392" : "饴",
"7393" : "饲",
"7394" : "饱",
"7395" : "饰",
"7396" : "飶",
"7397" : "餂",
"7398" : "饺",
"7399" : "饼",
"7400" : "饻",
"7401" : "饷",
"7402" : "养",
"7403" : "饵",
"7404" : "餐",
"7405" : "饾",
"7406" : "餗",
"7407" : "馁",
"7408" : "饿",
"7409" : "餔",
"7410" : "馂",
"7411" : "馀",
"7412" : "馄",
"7413" : "餚",
"7414" : "馅",
"7415" : "饯",
"7416" : "饽",
"7417" : "餟",
"7418" : "馍",
"7419" : "馆",
"7420" : "餬",
"7421" : "餮",
"7422" : "餱",
"7423" : "餲",
"7424" : "饧",
"7425" : "餹",
"7426" : "饩",
"7427" : "餽",
"7428" : "饁",
"7429" : "馒",
"7430" : "𩝭",
"7431" : "馑",
"7432" : "馈",
"7433" : "馔",
"7434" : "饎",
"7435" : "饐",
"7436" : "饑",
"7437" : "饶",
"7438" : "饔",
"7439" : "饕",
"7440" : "飨",
"7441" : "餍",
"7442" : "饟",
"7443" : "馋",
"7445" : "首",
"7446" : "馘",
"7447" : "馗",
"7448" : "炔",
"7449" : "香",
"7450" : "馥",
"7451" : "馨",
"7452" : "馝",
"7453" : "馡",
"7454" : "馣",
"7455" : "蛲",
"7456" : "马",
"7457" : "驭",
"7458" : "冯",
"7459" : "驰",
"7460" : "驯",
"7461" : "驮",
"7462" : "驲",
"7463" : "驳",
"7464" : "駃",
"7465" : "驻",
"7466" : "驽",
"7467" : "驹",
"7468" : "驾",
"7469" : "骀",
"7470" : "驸",
"7471" : "驶",
"7472" : "駋",
"7473" : "駜",
"7474" : "驼",
"7475" : "驷",
"7476" : "駪",
"7477" : "駉",
"7478" : "骈",
"7479" : "駬",
"7480" : "骇",
"7481" : "駮",
"7482" : "骆",
"7483" : "駵",
"7484" : "骃",
"7485" : "骎",
"7486" : "骏",
"7487" : "骔",
"7488" : "骋",
"7489" : "骓",
"7490" : "骍",
"7491" : "騃",
"7492" : "隲",
"7493" : "騑",
"7494" : "骑",
"7495" : "騋",
"7496" : "骐",
"7497" : "骛",
"7498" : "騄",
"7499" : "骗",
"7500" : "骢",
"7501" : "騠",
"7502" : "騣",
"7503" : "騤",
"7504" : "騧",
"7505" : "骞",
"7506" : "腾",
"7507" : "驺",
"7508" : "騵",
"7509" : "骟",
"7510" : "骚",
"7511" : "骝",
"7512" : "骡",
"7513" : "蓦",
"7514" : "骜",
"7515" : "骖",
"7516" : "骠",
"7517" : "驱",
"7518" : "驈",
"7519" : "騻",
"7520" : "骅",
"7521" : "驔",
"7522" : "骁",
"7523" : "驖",
"7524" : "骄",
"7525" : "骕",
"7526" : "验",
"7527" : "驒",
"7528" : "惊",
"7529" : "驘",
"7530" : "驙",
"7531" : "驿",
"7532" : "骤",
"7533" : "驴",
"7534" : "骧",
"7535" : "骥",
"7536" : "驩",
"7537" : "骊",
"7538" : "駗",
"7539" : "骨",
"7540" : "骩",
"7541" : "骭",
"7542" : "骯",
"7543" : "骱",
"7544" : "骰",
"7545" : "骷",
"7546" : "骸",
"7547" : "骼",
"7548" : "骽",
"7549" : "髀",
"7550" : "骾",
"7551" : "髅",
"7552" : "髆",
"7553" : "髑",
"7554" : "髒",
"7555" : "体",
"7556" : "髋",
"7557" : "髓",
"7558" : "鞣",
"7559" : "高",
"7560" : "铷",
"7561" : "髟",
"7562" : "髡",
"7563" : "髢",
"7564" : "髣",
"7565" : "髦",
"7566" : "髧",
"7567" : "髫",
"7568" : "髭",
"7569" : "髮",
"7570" : "髯",
"7571" : "鬃",
"7572" : "髴",
"7573" : "髻",
"7574" : "髹",
"7575" : "鬆",
"7576" : "鬈",
"7577" : "鬅",
"7578" : "鬋",
"7579" : "鬍",
"7580" : "鬐",
"7581" : "鬒",
"7582" : "鬑",
"7583" : "鬘",
"7584" : "鬔",
"7585" : "鬙",
"7586" : "鬚",
"7587" : "鬟",
"7588" : "鬣",
"7589" : "鬓",
"7590" : "鬎",
"7591" : "鬥",
"7592" : "鬨",
"7593" : "鬧",
"7594" : "阋",
"7595" : "鬭",
"7596" : "阄",
"7597" : "铯",
"7598" : "鬯",
"7599" : "鬱",
"7600" : "锶",
"7601" : "鬲",
"7602" : "鬴",
"7603" : "鬵",
"7604" : "鬷",
"7605" : "鬻",
"7606" : "雟",
"7607" : "鬼",
"7608" : "魁",
"7609" : "魂",
"7610" : "魃",
"7611" : "魄",
"7612" : "魊",
"7613" : "魅",
"7614" : "魏",
"7615" : "魐",
"7616" : "魀",
"7617" : "魈",
"7618" : "魍",
"7619" : "魉",
"7620" : "魑",
"7621" : "魔",
"7622" : "𩴾",
"7623" : "魇",
"7624" : "唢",
"7625" : "鱼",
"7626" : "鱿",
"7627" : "鲁",
"7628" : "䱅",
"7629" : "鲂",
"7630" : "鲇",
"7631" : "鲋",
"7632" : "鲐",
"7633" : "鲊",
"7634" : "鲑",
"7635" : "鲔",
"7636" : "鮆",
"7637" : "鲍",
"7638" : "鲞",
"7639" : "鲜",
"7640" : "鲛",
"7641" : "鲧",
"7642" : "鲤",
"7643" : "鲠",
"7644" : "鲨",
"7645" : "鲭",
"7646" : "鲵",
"7647" : "鲳",
"7648" : "鲓",
"7649" : "鲲",
"7650" : "鲸",
"7651" : "鲫",
"7652" : "𩸞",
"7653" : "鳊",
"7654" : "鲽",
"7655" : "鳅",
"7656" : "鰌",
"7657" : "鰕",
"7658" : "鳃",
"7659" : "鳏",
"7660" : "鳒",
"7661" : "鲥",
"7662" : "鳍",
"7663" : "鳌",
"7664" : "鲶",
"7665" : "鳗",
"7666" : "鳀",
"7667" : "鳖",
"7668" : "鳝",
"7669" : "鲟",
"7670" : "鲎",
"7671" : "鲙",
"7672" : "鳣",
"7673" : "鳞",
"7674" : "鳔",
"7675" : "鳜",
"7676" : "鳘",
"7677" : "鱷",
"7678" : "鲈",
"7679" : "鲄",
"7680" : "鸟",
"7681" : "鳦",
"7682" : "鸠",
"7683" : "凫",
"7684" : "鳲",
"7685" : "凤",
"7686" : "鸣",
"7687" : "鸢",
"7688" : "鴄",
"7689" : "鸱",
"7690" : "鸩",
"7691" : "鸨",
"7692" : "鴈",
"7693" : "鸦",
"7694" : "鴃",
"7696" : "鸳",
"7697" : "鸮",
"7698" : "鸪",
"7699" : "鸯",
"7700" : "鸭",
"7701" : "鸰",
"7702" : "鸲",
"7703" : "鸿",
"7704" : "鸽",
"7705" : "鴽",
"7706" : "鵀",
"7707" : "鸺",
"7708" : "鹈",
"7709" : "鹅",
"7710" : "鹃",
"7711" : "鹄",
"7712" : "鹁",
"7713" : "鹉",
"7714" : "鹆",
"7715" : "鹌",
"7716" : "鵰",
"7717" : "鹊",
"7718" : "鹑",
"7719" : "鵩",
"7720" : "鹏",
"7721" : "鹍",
"7722" : "鶃",
"7723" : "鹙",
"7724" : "鹕",
"7725" : "鹗",
"7726" : "鹜",
"7727" : "莺",
"7728" : "鶱",
"7729" : "鹤",
"7730" : "鶵",
"7731" : "鹡",
"7732" : "鹚",
"7733" : "鹒",
"7734" : "鷇",
"7735" : "鸧",
"7736" : "鶹",
"7737" : "鹘",
"7738" : "鹣",
"7739" : "鹢",
"7740" : "鹞",
"7741" : "鸡",
"7742" : "鷃",
"7743" : "鸥",
"7744" : "鹧",
"7745" : "鷕",
"7746" : "鹥",
"7747" : "鸷",
"7748" : "鸶",
"7749" : "鷩",
"7750" : "鹫",
"7751" : "鹰",
"7752" : "鹭",
"7753" : "鹪",
"7754" : "鹩",
"7755" : "鷼",
"7756" : "鹬",
"7757" : "鹯",
"7758" : "鸑",
"7759" : "鸴",
"7760" : "鸬",
"7761" : "鹦",
"7762" : "鸾",
"7763" : "鷟",
"7764" : "鹳",
"7765" : "鹂",
"7766" : "鴹",
"7767" : "卤",
"7768" : "鹹",
"7769" : "鹼",
"7770" : "盐",
"7771" : "鹾",
"7772" : "熵",
"7773" : "鹿",
"7774" : "麂",
"7775" : "铈",
"7776" : "麀",
"7777" : "麃",
"7778" : "麇",
"7779" : "麈",
"7780" : "麋",
"7781" : "麌",
"7782" : "麐",
"7783" : "麑",
"7784" : "麒",
"7785" : "麓",
"7786" : "麕",
"7787" : "丽",
"7788" : "麚",
"7789" : "麛",
"7790" : "麝",
"7791" : "麞",
"7792" : "麟",
"7793" : "麢",
"7794" : "麤",
"7795" : "涮",
"7796" : "麦",
"7797" : "麪",
"7798" : "麯",
"7799" : "麰",
"7800" : "麹",
"7801" : "蒴",
"7802" : "麻",
"7803" : "麽",
"7804" : "麾",
"7805" : "黁",
"7806" : "黄",
"7807" : "黈",
"7808" : "黉",
"7809" : "铊",
"7810" : "黍",
"7811" : "黏",
"7812" : "黎",
"7813" : "黐",
"7814" : "溚",
"7815" : "黑",
"7816" : "黔",
"7817" : "默",
"7818" : "黛",
"7819" : "黜",
"7820" : "点",
"7821" : "黝",
"7822" : "黠",
"7823" : "黥",
"7824" : "黧",
"7825" : "黨",
"7826" : "黯",
"7827" : "黴",
"7828" : "黮",
"7829" : "黡",
"7830" : "黩",
"7831" : "傣",
"7832" : "黹",
"7833" : "黻",
"7834" : "黼",
"7835" : "钛",
"7836" : "黾",
"7837" : "鼋",
"7838" : "鼃",
"7839" : "鼌",
"7840" : "鼇",
"7841" : "鼈",
"7842" : "鼍",
"7843" : "钽",
"7844" : "鼎",
"7845" : "鼐",
"7846" : "鼏",
"7847" : "鼒",
"7848" : "冇",
"7849" : "鼓",
"7850" : "鼕",
"7851" : "鼗",
"7852" : "鼖",
"7853" : "鼙",
"7854" : "鼛",
"7855" : "鼚",
"7856" : "羰",
"7857" : "鼠",
"7858" : "鼢",
"7859" : "鼫",
"7860" : "鼬",
"7861" : "鼯",
"7862" : "鼹",
"7863" : "鼷",
"7864" : "醣",
"7865" : "鼻",
"7866" : "鼽",
"7867" : "鼾",
"7868" : "齁",
"7869" : "齅",
"7870" : "铽",
"7871" : "齐",
"7872" : "斋",
"7873" : "齎",
"7874" : "齑",
"7875" : "菾",
"7876" : "齿",
"7877" : "龀",
"7878" : "龁",
"7879" : "龂",
"7880" : "龃",
"7881" : "龄",
"7882" : "龆",
"7883" : "龈",
"7884" : "齧",
"7885" : "齩",
"7886" : "龉",
"7887" : "龊",
"7888" : "齮",
"7889" : "龋",
"7890" : "腭",
"7891" : "龌",
"7892" : "齣",
"7893" : "龙",
"7894" : "厐",
"7895" : "龚",
"7896" : "龛",
"7897" : "舔",
"7898" : "龟",
"7899" : "烃",
"7900" : "龠",
"7901" : "龢",
"7902" : "龥",
"7903" : "楟",
"7904" : "酮",
"7905" : "茼",
"7906" : "烔",
"7907" : "钍",
"7908" : "佤",
"7909" : "烷",
"7910" : "烯",
"7911" : "螅",
"7912" : "氙",
"7913" : "酰",
"7914" : "鳕",
"7915" : "荨",
"7916" : "垭",
"7917" : "铱",
"7918" : "钇",
"7919" : "镱",
"7920" : "铟",
"7921" : "铕",
"7922" : "冮",
"7923" : "鳟",
"7924" : "蟑",
"7925" : "礃",
"7926" : "锗",
"7927" : "酯",
"7928" : "勐",
"7929" : "呋",
"7930" : "喹",
"7931" : "嗪",
"7932" : "嗡",
"7933" : "圐",
"7934" : "圙",
"7935" : "坬",
"7936" : "垾",
"7937" : "堼",
"7938" : "塂",
"7939" : "墈",
"7940" : "岽",
"7941" : "峧",
"7942" : "崀",
"7943" : "崅",
"7944" : "崌",
"7945" : "崾",
"7946" : "嶅",
"7947" : "挎",
"7948" : "捅",
"7949" : "改",
"7950" : "旻",
"7951" : "杞",
"7952" : "朿",
"7953" : "槠",
"7954" : "浐",
"7955" : "浕",
"7956" : "浉",
"7957" : "浈",
"7958" : "洨",
"7959" : "涢",
"7960" : "浛",
"7961" : "涠",
"7962" : "浯",
"7963" : "涭",
"7964" : "溵",
"7965" : "潖",
"7966" : "澛",
"7967" : "潵",
"7968" : "榃",
"7969" : "痄",
"7970" : "疰",
"7971" : "砼",
"7972" : "磜",
"7973" : "礅",
"7974" : "磙",
"7975" : "礳",
"7976" : "簕",
"7977" : "羧",
"7978" : "耢",
"7979" : "朊",
"7980" : "胂",
"7981" : "腈",
"7982" : "脿",
"7983" : "腩",
"7984" : "艿",
"7985" : "苄",
"7986" : "萜",
"7987" : "蚍",
"7988" : "蚴",
"7989" : "蛘",
"7990" : "觃",
"7991" : "轱",
"7992" : "轷",
"7993" : "鄌",
"7994" : "酞",
"7995" : "铹",
"7996" : "锛",
"7997" : "锘",
"7998" : "雒",
"7999" : "靰",
"8000" : "丌",
"8001" : "万",
"8002" : "丘",
"8003" : "乒",
"8004" : "乓",
"8005" : "甭",
"8006" : "孬",
"8007" : "饸",
"8008" : "饹",
"8009" : "丳",
"8010" : "么",
"8011" : "骶",
"8012" : "乩",
"8013" : "亄",
"8014" : "肮",
"8015" : "亍",
"8016" : "亓",
"8017" : "亘",
"8018" : "亝",
"8019" : "鲖",
"8020" : "仈",
"8021" : "仂",
"8022" : "仉",
"8023" : "伈",
"8024" : "伃",
"8025" : "伀",
"8026" : "伽",
"8027" : "佉",
"8028" : "伫",
"8029" : "佂",
"8030" : "伾",
"8031" : "佽",
"8032" : "佼",
"8033" : "佹",
"8034" : "佴",
"8035" : "佫",
"8036" : "佌",
"8037" : "侢",
"8038" : "侜",
"8039" : "侚",
"8040" : "侘",
"8041" : "侐",
"8042" : "侁",
"8043" : "侀",
"8044" : "伣",
"8045" : "俅",
"8046" : "伡",
"8047" : "俌",
"8049" : "俁",
"8050" : "俤",
"8051" : "侴",
"8052" : "倅",
"8053" : "倢",
"8054" : "倞",
"8055" : "倴",
"8056" : "倔",
"8057" : "俴",
"8059" : "偲",
"8060" : "偫",
"8061" : "偘",
"8062" : "傁",
"8063" : "偯",
"8064" : "偬",
"8065" : "偩",
"8066" : "偝",
"8067" : "偌",
"8068" : "傔",
"8069" : "傺",
"8070" : "僊",
"8071" : "僎",
"8072" : "僬",
"8073" : "㒆",
"8074" : "僤",
"8075" : "僼",
"8077" : "儩",
"8078" : "儦",
"8079" : "儡",
"8080" : "傩",
"8081" : "儸",
"8082" : "鲘",
"8083" : "鲩",
"8084" : "鲡",
"8085" : "鲮",
"8086" : "屲",
"8087" : "岜",
"8088" : "兙",
"8089" : "兛",
"8090" : "峃",
"8091" : "兝",
"8092" : "兞",
"8093" : "党",
"8094" : "凃",
"8095" : "凊",
"8096" : "减",
"8097" : "掰",
"8098" : "冔",
"8099" : "冨",
"8100" : "氕",
"8101" : "刓",
"8102" : "刜",
"8103" : "剙",
"8104" : "剞",
"8105" : "劂",
"8106" : "刿",
"8107" : "劖",
"8108" : "劚",
"8109" : "鲝",
"8110" : "鲱",
"8111" : "勑",
"8112" : "勔",
"8113" : "勋",
"8114" : "勡",
"8115" : "鲴",
"8116" : "匆",
"8117" : "卼",
"8118" : "厖",
"8119" : "叐",
"8120" : "吋",
"8121" : "吔",
"8122" : "吪",
"8123" : "吱",
"8124" : "吽",
"8125" : "呎",
"8126" : "听",
"8127" : "吰",
"8128" : "呭",
"8129" : "咈",
"8130" : "咍",
"8131" : "咚",
"8132" : "咡",
"8133" : "咢",
"8134" : "咥",
"8135" : "哆",
"8136" : "咻",
"8137" : "咟",
"8138" : "咮",
"8139" : "呙",
"8140" : "唎",
"8141" : "哤",
"8142" : "呗",
"8143" : "唑",
"8144" : "哢",
"8145" : "啗",
"8146" : "唪",
"8147" : "唼",
"8148" : "啐",
"8149" : "啍",
"8150" : "唶",
"8151" : "喤",
"8152" : "啳",
"8153" : "喴",
"8154" : "喨",
"8155" : "喌",
"8156" : "唝",
"8157" : "嗈",
"8158" : "嗁",
"8159" : "嗀",
"8160" : "嗿",
"8161" : "嘐",
"8162" : "嘑",
"8163" : "嗹",
"8164" : "嘂",
"8165" : "啯",
"8166" : "嘌",
"8167" : "唠",
"8168" : "噙",
"8169" : "噂",
"8170" : "噀",
"8171" : "嘽",
"8172" : "呒",
"8173" : "噹",
"8174" : "哒",
"8175" : "噳",
"8176" : "噭",
"8177" : "嚌",
"8178" : "嚆",
"8179" : "嚄",
"8180" : "嚃",
"8181" : "嚭",
"8182" : "呖",
"8183" : "噜",
"8184" : "嚲",
"8185" : "喾",
"8186" : "啃",
"8187" : "鳁",
"8188" : "囝",
"8189" : "囡",
"8190" : "囥",
"8191" : "圊",
"8192" : "圌",
"8193" : "圛",
"8194" : "圞",
"8195" : "鳎",
"8196" : "鳙",
"8197" : "圯",
"8198" : "圪",
"8199" : "壳",
"8200" : "𡊐",
"8201" : "坻",
"8202" : "坵",
"8203" : "坱",
"8204" : "坴",
"8205" : "坿",
"8206" : "垇",
"8207" : "垊",
"8208" : "垞",
"8209" : "垤",
"8210" : "垚",
"8211" : "垌",
"8212" : "垗",
"8213" : "垟",
"8214" : "垕",
"8215" : "𡋟",
"8216" : "㘾",
"8217" : "埂",
"8218" : "垻",
"8219" : "垸",
"8220" : "埗",
"8221" : "埆",
"8222" : "埌",
"8223" : "埇",
"8224" : "埕",
"8225" : "埦",
"8226" : "埶",
"8227" : "埽",
"8228" : "堄",
"8229" : "堋",
"8230" : "堉",
"8231" : "堎",
"8232" : "堀",
"8233" : "堌",
"8234" : "埰",
"8235" : "堲",
"8236" : "堧",
"8237" : "塓",
"8238" : "堨",
"8239" : "堍",
"8240" : "堳",
"8241" : "埚",
"8242" : "塬",
"8243" : "塱",
"8244" : "塝",
"8245" : "堽",
"8246" : "墘",
"8247" : "塥",
"8248" : "塷",
"8249" : "塽",
"8250" : "墕",
"8251" : "塈",
"8252" : "墝",
"8253" : "墠",
"8254" : "墫",
"8255" : "垱",
"8256" : "㙮",
"8257" : "𡑍",
"8258" : "墰",
"8259" : "墙",
"8261" : "壒",
"8262" : "墒",
"8263" : "垅",
"8264" : "橦",
"8265" : "螨",
"8266" : "岈",
"8267" : "脒",
"8268" : "夼",
"8269" : "奜",
"8270" : "㚟",
"8271" : "奰",
"8272" : "貌",
"8273" : "妵",
"8274" : "姁",
"8275" : "妸",
"8276" : "姶",
"8277" : "姺",
"8278" : "姽",
"8279" : "娀",
"8280" : "姘",
"8281" : "娒",
"8282" : "娵",
"8283" : "婐",
"8284" : "婞",
"8285" : "娸",
"8286" : "娬",
"8287" : "婤",
"8288" : "嫏",
"8289" : "婥",
"8290" : "媊",
"8291" : "媜",
"8292" : "媄",
"8293" : "媞",
"8294" : "嫈",
"8295" : "媮",
"8296" : "婿",
"8297" : "嫳",
"8298" : "嫽",
"8299" : "婳",
"8300" : "娴",
"8301" : "妩",
"8302" : "嫒",
"8303" : "嬝",
"8304" : "孃",
"8305" : "鞡",
"8311" : "孖",
"8312" : "孻",
"8314" : "寪",
"8315" : "尀",
"8316" : "尟",
"8317" : "屄",
"8318" : "屜",
"8319" : "屪",
"8320" : "屫",
"8321" : "屴",
"8322" : "屼",
"8323" : "岅",
"8324" : "岙",
"8325" : "岍",
"8326" : "岊",
"8327" : "岨",
"8328" : "岬",
"8329" : "岞",
"8330" : "岧",
"8331" : "峇",
"8332" : "峢",
"8333" : "峝",
"8334" : "峹",
"8335" : "峱",
"8337" : "崟",
"8338" : "崞",
"8339" : "崮",
"8340" : "崿",
"8341" : "嶞",
"8342" : "崽",
"8343" : "崴",
"8344" : "峣",
"8345" : "嵂",
"8346" : "嵼",
"8347" : "嶥",
"8348" : "嶓",
"8349" : "崄",
"8350" : "嶰",
"8351" : "嶴",
"8352" : "巃",
"8353" : "巇",
"8354" : "岿",
"8360" : "巯",
"8361" : "帣",
"8362" : "幈",
"8363" : "幞",
"8364" : "幠",
"8365" : "幩",
"8366" : "幦",
"8367" : "幨",
"8369" : "庄",
"8370" : "庈",
"8371" : "庤",
"8372" : "𢊈",
"8373" : "廒",
"8374" : "廍",
"8375" : "庼",
"8376" : "廧",
"8381" : "异",
"8382" : "弌",
"8383" : "弎",
"8384" : "甙",
"8385" : "彴",
"8386" : "彽",
"8388" : "忪",
"8389" : "怈",
"8390" : "怳",
"8391" : "怭",
"8392" : "怲",
"8393" : "恇",
"8394" : "恓",
"8395" : "恔",
"8396" : "恵",
"8397" : "惔",
"8398" : "惽",
"8399" : "愃",
"8400" : "愓",
"8401" : "惷",
"8402" : "慉",
"8403" : "憃",
"8404" : "憙",
"8405" : "懠",
"8406" : "懰",
"8407" : "懮",
"8408" : "戁",
"8409" : "戄",
"8414" : "戭",
"8415" : "戹",
"8416" : "戺",
"8418" : "扐",
"8419" : "扢",
"8420" : "扤",
"8421" : "扡",
"8422" : "扦",
"8423" : "拤",
"8424" : "抶",
"8425" : "拑",
"8427" : "拕",
"8428" : "𢪘",
"8429" : "拶",
"8430" : "捚",
"8431" : "挱",
"8432" : "捃",
"8433" : "捘",
"8434" : "捓",
"8435" : "捬",
"8436" : "挜",
"8437" : "掤",
"8438" : "掮",
"8439" : "揸",
"8440" : "揲",
"8441" : "揅",
"8442" : "揗",
"8443" : "揰",
"8444" : "揫",
"8445" : "揎",
"8446" : "揕",
"8447" : "揥",
"8448" : "揶",
"8449" : "揵",
"8450" : "搸",
"8451" : "掔",
"8452" : "搢",
"8453" : "揾",
"8454" : "搊",
"8455" : "搘",
"8456" : "摉",
"8457" : "搌",
"8458" : "搤",
"8459" : "搡",
"8460" : "摠",
"8461" : "撱",
"8462" : "摦",
"8463" : "摲",
"8464" : "摷",
"8465" : "撦",
"8466" : "搿",
"8467" : "𢴇",
"8468" : "𢵧",
"8469" : "挦",
"8470" : "撶",
"8471" : "揿",
"8472" : "𢵈",
"8473" : "掸",
"8474" : "擐",
"8475" : "擖",
"8476" : "擫",
"8477" : "擥",
"8478" : "攟",
"8479" : "掱",
"8489" : "敜",
"8490" : "敫",
"8491" : "敳",
"8492" : "敹",
"8493" : "敿",
"8494" : "斏",
"8496" : "斚",
"8497" : "斠",
"8498" : "斮",
"8499" : "旝",
"8501" : "旴",
"8502" : "昀",
"8503" : "昄",
"8504" : "昊",
"8505" : "昰",
"8506" : "昺",
"8507" : "晅",
"8508" : "晟",
"8509" : "晛",
"8510" : "晧",
"8511" : "晜",
"8512" : "晾",
"8513" : "暋",
"8514" : "暌",
"8515" : "暓",
"8516" : "暔",
"8517" : "暲",
"8518" : "晔",
"8519" : "暧",
"8524" : "朌",
"8525" : "朣",
"8527" : "朾",
"8528" : "杇",
"8529" : "杕",
"8530" : "杠",
"8531" : "杗",
"8532" : "杝",
"8533" : "杅",
"8534" : "杙",
"8535" : "杶",
"8536" : "枤",
"8537" : "杻",
"8538" : "枬",
"8539" : "枓",
"8540" : "柷",
"8541" : "枒",
"8542" : "枴",
"8543" : "柂",
"8544" : "柅",
"8545" : "柣",
"8546" : "柤",
"8547" : "柲",
"8548" : "柶",
"8549" : "柸",
"8550" : "栻",
"8551" : "栔",
"8552" : "栝",
"8553" : "栞",
"8554" : "栫",
"8555" : "栭",
"8556" : "栵",
"8557" : "桋",
"8558" : "栒",
"8559" : "栟",
"8560" : "桬",
"8561" : "桭",
"8562" : "梡",
"8563" : "梩",
"8564" : "梴",
"8565" : "枧",
"8566" : "棑",
"8567" : "棜",
"8568" : "棪",
"8569" : "棸",
"8570" : "椌",
"8571" : "椏",
"8572" : "椑",
"8573" : "楰",
"8574" : "楙",
"8575" : "楀",
"8576" : "楂",
"8577" : "楄",
"8578" : "楎",
"8579" : "楬",
"8580" : "𣗬",
"8581" : "槩",
"8582" : "樲",
"8583" : "樠",
"8584" : "椝",
"8585" : "𣛮",
"8586" : "椫",
"8587" : "橇",
"8588" : "橤",
"8589" : "檎",
"8590" : "燊",
"8591" : "桪",
"8592" : "枟",
"8593" : "槜",
"8594" : "檑",
"8595" : "橚",
"8596" : "檴",
"8597" : "橣",
"8598" : "檿",
"8599" : "橱",
"8600" : "檙",
"8601" : "橥",
"8602" : "櫌",
"8603" : "榉",
"8604" : "欑",
"8605" : "欙",
"8606" : "樴",
"8616" : "欼",
"8617" : "歈",
"8618" : "歁",
"8619" : "歊",
"8620" : "歗",
"8621" : "歜",
"8623" : "歾",
"8624" : "殈",
"8625" : "殣",
"8626" : "殭",
"8628" : "毈",
"8632" : "毚",
"8633" : "毵",
"8635" : "氞",
"8636" : "氟",
"8637" : "氨",
"8638" : "氧",
"8639" : "氥",
"8640" : "氦",
"8641" : "氢",
"8642" : "氰",
"8643" : "氱",
"8644" : "氮",
"8645" : "氩",
"8646" : "㲶",
"8647" : "氘",
"8648" : "氚",
"8659" : "氿",
"8660" : "汆",
"8661" : "沄",
"8662" : "沇",
"8663" : "沕",
"8664" : "泂",
"8665" : "況",
"8666" : "泒",
"8667" : "泃",
"8668" : "泜",
"8669" : "泚",
"8670" : "洏",
"8671" : "洴",
"8672" : "洤",
"8673" : "涌",
"8674" : "涖",
"8675" : "涒",
"8676" : "浭",
"8677" : "浤",
"8678" : "浧",
"8679" : "涊",
"8680" : "浼",
"8681" : "淖",
"8682" : "淟",
"8683" : "淜",
"8684" : "淓",
"8685" : "淠",
"8686" : "淢",
"8687" : "渟",
"8688" : "沨",
"8689" : "湑",
"8690" : "湩",
"8691" : "溦",
"8692" : "渌",
"8693" : "淼",
"8694" : "渲",
"8695" : "渼",
"8696" : "湢",
"8697" : "溏",
"8698" : "湋",
"8699" : "渫",
"8700" : "溴",
"8701" : "滉",
"8702" : "滏",
"8703" : "滺",
"8704" : "漰",
"8705" : "潌",
"8706" : "漎",
"8707" : "漋",
"8708" : "漷",
"8709" : "澉",
"8710" : "澐",
"8711" : "潚",
"8712" : "沵",
"8713" : "濙",
"8714" : "滢",
"8715" : "瀌",
"8716" : "瀞",
"8717" : "瀵",
"8718" : "瀳",
"8719" : "灋",
"8720" : "灥",
"8721" : "澁",
"8731" : "灺",
"8732" : "炅",
"8733" : "𤆬",
"8734" : "炤",
"8735" : "炁",
"8736" : "烖",
"8737" : "烓",
"8738" : "烚",
"8739" : "烳",
"8740" : "焄",
"8741" : "烱",
"8742" : "焫",
"8743" : "焯",
"8744" : "焻",
"8745" : "𤉶",
"8746" : "焱",
"8747" : "焴",
"8748" : "煇",
"8749" : "煃",
"8750" : "煁",
"8751" : "煐",
"8752" : "煝",
"8753" : "煚",
"8754" : "煟",
"8755" : "𤌚",
"8756" : "熉",
"8757" : "熿",
"8758" : "熤",
"8759" : "熳",
"8760" : "燂",
"8761" : "燋",
"8762" : "燏",
"8763" : "烨",
"8764" : "燨",
"8765" : "燡",
"8766" : "燫",
"8767" : "爥",
"8778" : "牏",
"8779" : "牐",
"8781" : "牮",
"8782" : "牶",
"8783" : "牼",
"8784" : "㹀",
"8785" : "犆",
"8786" : "犇",
"8787" : "犄",
"8788" : "犔",
"8789" : "犛",
"8790" : "犫",
"8794" : "犵",
"8795" : "犺",
"8796" : "狅",
"8797" : "狉",
"8798" : "狘",
"8799" : "狨",
"8800" : "狫",
"8801" : "狧",
"8802" : "猈",
"8803" : "猋",
"8804" : "猨",
"8805" : "猆",
"8806" : "猲",
"8807" : "獀",
"8808" : "獆",
"8809" : "獝",
"8810" : "獢",
"8811" : "猃",
"8812" : "𤢛",
"8813" : "猕",
"8814" : "獾",
"8818" : "玗",
"8819" : "玥",
"8820" : "玶",
"8821" : "珛",
"8822" : "珔",
"8823" : "珺",
"8824" : "琱",
"8825" : "琼",
"8826" : "琷",
"8827" : "琰",
"8828" : "珐",
"8829" : "珲",
"8830" : "瑄",
"8831" : "瑂",
"8832" : "瑔",
"8833" : "瑢",
"8834" : "琏",
"8835" : "瑭",
"8836" : "璂",
"8837" : "璅",
"8838" : "璊",
"8839" : "璚",
"8840" : "璩",
"8841" : "璭",
"8842" : "瑷",
"8843" : "瓌",
"8844" : "瓖",
"8846" : "瓗",
"8850" : "甀",
"8851" : "甆",
"8852" : "甒",
"8853" : "甏",
"8856" : "甤",
"8858" : "畈",
"8859" : "疃",
"8861" : "疕",
"8862" : "疘",
"8863" : "疞",
"8864" : "疢",
"8865" : "疷",
"8867" : "痁",
"8868" : "疶",
"8869" : "痐",
"8870" : "痗",
"8871" : "痤",
"8872" : "痯",
"8873" : "瘃",
"8874" : "痻",
"8875" : "瘄",
"8876" : "瘈",
"8877" : "瘌",
"8878" : "瘨",
"8879" : "瘬",
"8880" : "瘭",
"8881" : "瘯",
"8882" : "瘶",
"8883" : "瘅",
"8884" : "癒",
"8885" : "癙",
"8886" : "癏",
"8887" : "癠",
"8888" : "癳",
"8895" : "癿",
"8896" : "盚",
"8898" : "盵",
"8899" : "盰",
"8900" : "眊",
"8901" : "盹",
"8902" : "眂",
"8903" : "眅",
"8904" : "眚",
"8905" : "眢",
"8906" : "眎",
"8907" : "眏",
"8908" : "眕",
"8909" : "眴",
"8910" : "睊",
"8911" : "睅",
"8912" : "睠",
"8913" : "睒",
"8914" : "睙",
"8915" : "睽",
"8916" : "睻",
"8917" : "瞏",
"8918" : "瞟",
"8919" : "瞫",
"8920" : "矔",
"8925" : "矟",
"8926" : "矬",
"8928" : "矽",
"8929" : "砃",
"8930" : "砅",
"8931" : "砢",
"8932" : "砣",
"8933" : "砠",
"8934" : "砞",
"8935" : "砝",
"8936" : "砫",
"8937" : "砵",
"8938" : "砷",
"8939" : "砳",
"8940" : "砽",
"8941" : "硍",
"8942" : "硈",
"8943" : "硐",
"8944" : "硅",
"8945" : "硔",
"8946" : "硋",
"8947" : "硭",
"8948" : "硪",
"8949" : "碆",
"8950" : "碏",
"8951" : "碚",
"8952" : "碈",
"8954" : "碞",
"8955" : "碳",
"8956" : "碶",
"8957" : "硻",
"8958" : "磒",
"8959" : "碻",
"8960" : "磛",
"8961" : "磟",
"8962" : "磡",
"8963" : "𥕕",
"8964" : "𥖁",
"8965" : "硚",
"8966" : "磵",
"8967" : "磹",
"8968" : "礞",
"8969" : "硷",
"8970" : "硒",
"8972" : "碃",
"8980" : "祙",
"8981" : "禚",
"8982" : "禜",
"8983" : "禤",
"8984" : "禴",
"8986" : "秴",
"8987" : "稙",
"8988" : "稑",
"8989" : "稺",
"8990" : "穈",
"8991" : "穧",
"8992" : "穮",
"8993" : "稖",
"8999" : "窊",
"9000" : "窔",
"9001" : "窴",
"9002" : "窿",
"9003" : "竏",
"9004" : "竢",
"9005" : "竜",
"9006" : "竾",
"9007" : "笰",
"9008" : "笲",
"9009" : "笵",
"9010" : "筘",
"9011" : "筳",
"9012" : "筦",
"9013" : "筭",
"9014" : "箄",
"9015" : "箙",
"9016" : "篜",
"9017" : "篟",
"9018" : "篥",
"9019" : "篹",
"9020" : "簉",
"9021" : "篢",
"9022" : "簹",
"9023" : "簰",
"9024" : "籝",
"9025" : "籣",
"9026" : "籭",
"9032" : "粁",
"9033" : "粍",
"9034" : "粎",
"9035" : "粞",
"9036" : "粦",
"9037" : "粮",
"9038" : "粻",
"9039" : "粿",
"9040" : "粽",
"9041" : "糅",
"9042" : "糓",
"9043" : "糔",
"9044" : "糢",
"9045" : "糦",
"9046" : "糰",
"9047" : "糳",
"9048" : "糌",
"9052" : "紃",
"9053" : "纼",
"9054" : "紑",
"9055" : "纰",
"9056" : "紩",
"9057" : "绁",
"9058" : "絓",
"9059" : "綎",
"9060" : "綖",
"9061" : "絻",
"9062" : "綅",
"9063" : "綪",
"9064" : "绲",
"9065" : "缂",
"9066" : "緜",
"9067" : "緰",
"9068" : "縇",
"9069" : "绬",
"9070" : "縏",
"9071" : "缑",
"9072" : "縚",
"9073" : "縿",
"9074" : "繘",
"9075" : "繠",
"9076" : "纕",
"9077" : "纙",
"9083" : "缽",
"9084" : "罎",
"9086" : "罦",
"9087" : "罻",
"9088" : "罾",
"9090" : "芈",
"9091" : "羖",
"9092" : "羭",
"9093" : "羱",
"9095" : "羾",
"9096" : "翃",
"9097" : "翫",
"9098" : "翪",
"9100" : "耏",
"9101" : "耤",
"9102" : "耯",
"9105" : "聓",
"9106" : "聝",
"9107" : "聱",
"9109" : "肜",
"9110" : "肧",
"9111" : "肵",
"9112" : "肪",
"9113" : "胛",
"9114" : "胟",
"9115" : "脉",
"9116" : "胆",
"9117" : "脃",
"9118" : "胹",
"9119" : "脄",
"9120" : "脞",
"9121" : "脡",
"9122" : "脥",
"9123" : "脢",
"9124" : "脝",
"9125" : "脰",
"9126" : "脖",
"9127" : "脗",
"9128" : "腂",
"9129" : "腍",
"9130" : "腒",
"9131" : "腌",
"9132" : "腯",
"9133" : "腶",
"9134" : "膇",
"9135" : "膆",
"9136" : "膘",
"9137" : "膟",
"9138" : "膷",
"9139" : "臈",
"9140" : "臑",
"9141" : "膑",
"9142" : "臐",
"9143" : "臛",
"9152" : "舢",
"9153" : "舨",
"9154" : "舺",
"9155" : "舿",
"9156" : "𦩀",
"9157" : "艌",
"9158" : "艑",
"9159" : "艚",
"9160" : "艥",
"9161" : "艣",
"9162" : "艩",
"9163" : "艬",
"9166" : "茓",
"9167" : "芘",
"9168" : "苐",
"9169" : "苠",
"9170" : "荁",
"9171" : "荅",
"9173" : "茬",
"9174" : "莦",
"9175" : "菶",
"9176" : "萐",
"9177" : "菆",
"9178" : "菻",
"9179" : "葍",
"9180" : "蓌",
"9181" : "荝",
"9182" : "葄",
"9183" : "葓",
"9184" : "蒢",
"9185" : "葠",
"9186" : "蓪",
"9187" : "蓘",
"9188" : "蓺",
"9189" : "蔒",
"9190" : "苁",
"9191" : "蓷",
"9192" : "蔋",
"9193" : "蔙",
"9194" : "𦼖",
"9195" : "薸",
"9196" : "薾",
"9197" : "藘",
"9198" : "藙",
"9199" : "蘐",
"9200" : "蘤",
"9201" : "蘺",
"9213" : "虒",
"9214" : "虖",
"9217" : "虯",
"9218" : "蚔",
"9219" : "蚠",
"9220" : "蚳",
"9221" : "蛓",
"9222" : "蜑",
"9223" : "蚬",
"9224" : "蜺",
"9225" : "蝃",
"9226" : "蜨",
"9227" : "蝓",
"9228" : "蝏",
"9229" : "蝡",
"9230" : "蝤",
"9231" : "螓",
"9232" : "蝯",
"9233" : "蝝",
"9234" : "螥",
"9235" : "螉",
"9236" : "螗",
"9237" : "螵",
"9238" : "蟁",
"9239" : "蟜",
"9240" : "蟢",
"9241" : "蠋",
"9242" : "蛴",
"9243" : "蠙",
"9244" : "蠭",
"9245" : "蠮",
"9252" : "袇",
"9253" : "衺",
"9254" : "袲",
"9255" : "袺",
"9256" : "袽",
"9257" : "袿",
"9258" : "裋",
"9259" : "褕",
"9260" : "裢",
"9261" : "褽",
"9262" : "襔",
"9263" : "𧝞",
"9264" : "襛",
"9265" : "襍",
"9266" : "𧞅",
"9267" : "襜",
"9268" : "襞",
"9269" : "襡",
"9270" : "襢",
"9271" : "襋",
"9272" : "襆",
"9273" : "襮",
"9274" : "襬",
"9278" : "觜",
"9279" : "觡",
"9280" : "觷",
"9282" : "訆",
"9283" : "訧",
"9284" : "訽",
"9285" : "詉",
"9286" : "詊",
"9287" : "诇",
"9288" : "詧",
"9289" : "詻",
"9290" : "詾",
"9291" : "誃",
"9292" : "詨",
"9293" : "諆",
"9294" : "诨",
"9295" : "謌",
"9296" : "謷",
"9297" : "譈",
"9298" : "譆",
"9299" : "譅",
"9300" : "谉",
"9301" : "谰",
"9302" : "讑",
"9303" : "讇",
"9314" : "豀",
"9315" : "豗",
"9316" : "豜",
"9317" : "豶",
"9318" : "豷",
"9320" : "豻",
"9321" : "貜",
"9322" : "贠",
"9323" : "賩",
"9324" : "𧶔",
"9325" : "趡",
"9326" : "趫",
"9327" : "趯",
"9328" : "趱",
"9330" : "跁",
"9331" : "跱",
"9332" : "跤",
"9333" : "跦",
"9334" : "跲",
"9335" : "跧",
"9337" : "踦",
"9338" : "踪",
"9339" : "䠀",
"9340" : "踤",
"9341" : "踶",
"9342" : "蹆",
"9343" : "蹏",
"9344" : "蹝",
"9345" : "蹩",
"9346" : "蹧",
"9347" : "蹷",
"9348" : "蹻",
"9349" : "蹼",
"9350" : "躗",
"9351" : "躞",
"9352" : "躘",
"9353" : "躧",
"9359" : "軘",
"9360" : "軜",
"9361" : "軝",
"9362" : "軥",
"9363" : "轲",
"9364" : "轊",
"9365" : "轑",
"9366" : "轗",
"9367" : "轝",
"9368" : "辚",
"9374" : "迮",
"9375" : "𨔁",
"9376" : "逴",
"9377" : "遫",
"9378" : "遰",
"9379" : "遻",
"9380" : "邋",
"9386" : "邘",
"9387" : "邧",
"9388" : "郉",
"9389" : "邿",
"9390" : "郈",
"9391" : "郔",
"9392" : "郚",
"9393" : "郠",
"9394" : "郪",
"9395" : "郫",
"9396" : "郳",
"9397" : "鄀",
"9398" : "郓",
"9399" : "鄇",
"9400" : "鄋",
"9401" : "郾",
"9402" : "鄓",
"9403" : "鄍",
"9404" : "鄎",
"9405" : "鄏",
"9406" : "鄐",
"9407" : "鄑",
"9408" : "鄈",
"9409" : "鄚",
"9410" : "鄣",
"9411" : "鄤",
"9412" : "鄩",
"9413" : "鄬",
"9414" : "鄻",
"9415" : "鄿",
"9416" : "鄾",
"9417" : "酅",
"9426" : "酏",
"9427" : "醎",
"9428" : "醑",
"9429" : "醝",
"9430" : "醹",
"9431" : "醻",
"9432" : "酾",
"9433" : "酽",
"9437" : "钋",
"9438" : "钐",
"9439" : "釬",
"9440" : "钒",
"9441" : "釸",
"9442" : "钑",
"9443" : "钫",
"9444" : "鈊",
"9445" : "钭",
"9446" : "钘",
"9447" : "鉌",
"9448" : "铍",
"9449" : "钻",
"9450" : "铆",
"9451" : "鉎",
"9452" : "鉥",
"9453" : "钼",
"9454" : "銎",
"9455" : "銍",
"9456" : "铐",
"9457" : "鉷",
"9458" : "銈",
"9459" : "铬",
"9460" : "銶",
"9461" : "鋘",
"9462" : "鋆",
"9463" : "鋕",
"9464" : "鋐",
"9465" : "锂",
"9466" : "鋝",
"9467" : "锒",
"9468" : "钡",
"9469" : "鋂",
"9470" : "錀",
"9471" : "錖",
"9472" : "铔",
"9473" : "錶",
"9474" : "錔",
"9475" : "锨",
"9476" : "錂",
"9477" : "锬",
"9478" : "锖",
"9479" : "鉼",
"9480" : "锠",
"9481" : "锞",
"9482" : "鍪",
"9483" : "鍫",
"9484" : "铡",
"9485" : "镁",
"9486" : "钖",
"9487" : "锳",
"9488" : "鍹",
"9489" : "鎉",
"9490" : "镏",
"9491" : "鎤",
"9492" : "鍏",
"9493" : "镉",
"9494" : "铩",
"9495" : "鏊",
"9496" : "蓥",
"9497" : "鎏",
"9498" : "鏦",
"9499" : "鐄",
"9500" : "鏇",
"9501" : "鏛",
"9502" : "鏚",
"9503" : "镦",
"9504" : "鐉",
"9505" : "锏",
"9506" : "镨",
"9507" : "镣",
"9508" : "鐏",
"9509" : "镡",
"9510" : "镢",
"9511" : "鐩",
"9512" : "鏻",
"9513" : "鑅",
"9514" : "锧",
"9515" : "鑫",
"9516" : "鑯",
"9527" : "闹",
"9528" : "閧",
"9529" : "闑",
"9532" : "阽",
"9533" : "陑",
"9534" : "陾",
"9535" : "隃",
"9536" : "随",
"9537" : "隵",
"9538" : "𨻧",
"9540" : "雂",
"9541" : "雃",
"9544" : "𩂯",
"9545" : "霙",
"9546" : "霣",
"9547" : "靁",
"9552" : "靔",
"9554" : "靮",
"9555" : "靺",
"9556" : "鞃",
"9557" : "靼",
"9558" : "鞌",
"9559" : "鞛",
"9560" : "鞨",
"9561" : "鞸",
"9562" : "鞹",
"9563" : "韅",
"9570" : "韡",
"9571" : "韣",
"9573" : "韹",
"9575" : "頄",
"9576" : "颋",
"9577" : "颌",
"9578" : "頟",
"9579" : "頠",
"9580" : "𩓚",
"9581" : "颙",
"9582" : "顗",
"9587" : "颮",
"9588" : "𩗗",
"9589" : "颽",
"9592" : "飜",
"9594" : "饦",
"9595" : "餈",
"9596" : "餤",
"9597" : "餵",
"9598" : "餪",
"9599" : "餫",
"9600" : "馊",
"9601" : "馎",
"9602" : "餻",
"9603" : "饍",
"9604" : "饘",
"9606" : "馃",
"9611" : "馪",
"9613" : "馵",
"9614" : "駓",
"9615" : "驵",
"9616" : "駴",
"9617" : "駽",
"9618" : "駾",
"9619" : "騆",
"9620" : "騢",
"9621" : "騯",
"9622" : "骦",
"9623" : "骉",
"9629" : "髁",
"9631" : "髳",
"9632" : "髽",
"9633" : "鬁",
"9635" : "魆",
"9636" : "魋",
"9637" : "魗",
"9639" : "鲀",
"9640" : "鮀",
"9641" : "鲅",
"9642" : "鮞",
"9643" : "鲒",
"9644" : "鯈",
"9645" : "鮿",
"9646" : "鲰",
"9647" : "鲻",
"9648" : "鲷",
"9649" : "鲗",
"9650" : "鳇",
"9651" : "鰋",
"9652" : "鳆",
"9653" : "鳄",
"9654" : "鲢",
"9655" : "鲦",
"9656" : "鱄",
"9657" : "鱎",
"9658" : "鱏",
"9659" : "鱓",
"9660" : "鱐",
"9661" : "鳢",
"9662" : "鲚",
"9663" : "鱮",
"9664" : "鳠",
"9665" : "鲿",
"9666" : "鱻",
"9667" : "鳛",
"9673" : "鳷",
"9674" : "瞗",
"9675" : "鴥",
"9676" : "鸵",
"9677" : "鹓",
"9678" : "鵻",
"9679" : "鹖",
"9680" : "鷊",
"9681" : "鹔",
"9682" : "鸂",
"9683" : "𪆵",
"9684" : "鹴",
"9690" : "麸",
"9691" : "麱",
"9692" : "麵",
"9694" : "黟",
"9695" : "黰",
"9696" : "鼪",
"9697" : "鼴",
"9699" : "龡"}


CCC_traditional_reader = {"0001" : "一",
"0002" : "丁",
"0003" : "七",
"0004" : "丈",
"0005" : "三",
"0006" : "上",
"0007" : "下",
"0008" : "不",
"0009" : "丐",
"0010" : "丑",
"0011" : "且",
"0012" : "丕",
"0013" : "世",
"0014" : "丙",
"0015" : "丞",
"0016" : "丟",
"0017" : "並",
"0018" : "丏",
"0019" : "丨",
"0020" : "个",
"0021" : "丫",
"0022" : "中",
"0023" : "丰",
"0024" : "丱",
"0025" : "串",
"0026" : "錒",
"0027" : "丶",
"0028" : "鎄",
"0029" : "丸",
"0030" : "丹",
"0031" : "主",
"0032" : "砹",
"0033" : "丿",
"0034" : "乂",
"0035" : "乃",
"0036" : "久",
"0037" : "之",
"0038" : "乍",
"0039" : "乎",
"0040" : "乏",
"0041" : "乖",
"0042" : "乘",
"0043" : "桉",
"0044" : "乙",
"0045" : "乜",
"0046" : "九",
"0047" : "乞",
"0048" : "也",
"0049" : "亁",
"0050" : "乳",
"0051" : "乾",
"0052" : "亂",
"0053" : "氹",
"0054" : "亅",
"0055" : "了",
"0056" : "予",
"0057" : "事",
"0058" : "苯",
"0059" : "二",
"0060" : "于",
"0061" : "云",
"0062" : "互",
"0063" : "五",
"0064" : "井",
"0065" : "亙",
"0067" : "些",
"0068" : "亞",
"0069" : "亟",
"0070" : "吡",
"0071" : "亠",
"0072" : "亡",
"0073" : "亢",
"0074" : "交",
"0075" : "亥",
"0076" : "亦",
"0077" : "亨",
"0078" : "享",
"0079" : "京",
"0080" : "亭",
"0081" : "亮",
"0082" : "亳",
"0083" : "亶",
"0084" : "亹",
"0085" : "醭",
"0086" : "人",
"0087" : "什",
"0088" : "仁",
"0089" : "仃",
"0090" : "仄",
"0091" : "仆",
"0092" : "仇",
"0093" : "今",
"0094" : "介",
"0095" : "仍",
"0096" : "佣",
"0097" : "佬",
"0098" : "仔",
"0099" : "仕",
"0100" : "他",
"0101" : "仗",
"0102" : "付",
"0103" : "仙",
"0104" : "仝",
"0105" : "仞",
"0106" : "仡",
"0107" : "仟",
"0108" : "代",
"0109" : "令",
"0110" : "以",
"0111" : "仰",
"0112" : "仲",
"0113" : "仳",
"0114" : "仵",
"0115" : "件",
"0116" : "价",
"0117" : "任",
"0118" : "份",
"0119" : "仿",
"0120" : "企",
"0121" : "伉",
"0122" : "伊",
"0123" : "伋",
"0124" : "伍",
"0125" : "伎",
"0126" : "伏",
"0127" : "伐",
"0128" : "休",
"0129" : "伙",
"0130" : "伯",
"0131" : "估",
"0132" : "你",
"0133" : "伴",
"0134" : "伶",
"0135" : "伸",
"0136" : "伺",
"0137" : "伻",
"0138" : "似",
"0139" : "倮",
"0140" : "佃",
"0141" : "但",
"0142" : "佈",
"0143" : "位",
"0144" : "低",
"0145" : "住",
"0146" : "佐",
"0147" : "佑",
"0148" : "佔",
"0149" : "何",
"0150" : "佗",
"0151" : "余",
"0152" : "佘",
"0153" : "佚",
"0154" : "佛",
"0155" : "作",
"0156" : "佞",
"0157" : "佟",
"0158" : "佺",
"0159" : "傢",
"0160" : "佩",
"0161" : "佪",
"0162" : "佯",
"0163" : "佳",
"0164" : "併",
"0165" : "佶",
"0166" : "佸",
"0167" : "佻",
"0168" : "佾",
"0169" : "使",
"0170" : "侃",
"0171" : "來",
"0172" : "侈",
"0173" : "例",
"0174" : "侍",
"0175" : "侏",
"0176" : "侑",
"0177" : "侔",
"0178" : "侖",
"0179" : "侗",
"0180" : "供",
"0181" : "依",
"0182" : "侷",
"0183" : "伕",
"0184" : "佰",
"0185" : "侮",
"0186" : "侯",
"0187" : "侵",
"0188" : "侶",
"0189" : "便",
"0190" : "係",
"0191" : "促",
"0192" : "俄",
"0193" : "俊",
"0194" : "俎",
"0195" : "俏",
"0196" : "俐",
"0197" : "俑",
"0198" : "俗",
"0199" : "俘",
"0200" : "俚",
"0201" : "俛",
"0202" : "保",
"0203" : "俟",
"0204" : "俠",
"0205" : "俞",
"0206" : "倈",
"0207" : "信",
"0208" : "修",
"0209" : "俶",
"0210" : "倀",
"0211" : "働",
"0212" : "倌",
"0213" : "倬",
"0214" : "俯",
"0215" : "俱",
"0216" : "俳",
"0217" : "俵",
"0218" : "俸",
"0219" : "俺",
"0220" : "俾",
"0221" : "倉",
"0222" : "個",
"0223" : "倍",
"0224" : "倆",
"0225" : "倏",
"0226" : "們",
"0227" : "倒",
"0228" : "倖",
"0229" : "倘",
"0230" : "候",
"0231" : "倚",
"0232" : "倜",
"0233" : "倂",
"0234" : "借",
"0235" : "倡",
"0236" : "倣",
"0237" : "值",
"0238" : "倥",
"0239" : "倦",
"0240" : "倨",
"0241" : "倩",
"0242" : "倪",
"0243" : "倫",
"0244" : "倭",
"0245" : "偈",
"0246" : "偎",
"0247" : "儍",
"0248" : "偁",
"0249" : "偃",
"0250" : "假",
"0251" : "偉",
"0252" : "偏",
"0253" : "偕",
"0254" : "做",
"0255" : "停",
"0256" : "健",
"0257" : "偪",
"0258" : "側",
"0259" : "偵",
"0260" : "偶",
"0261" : "傎",
"0262" : "偷",
"0263" : "傖",
"0264" : "傀",
"0265" : "傅",
"0266" : "傍",
"0267" : "傑",
"0268" : "傒",
"0269" : "傈",
"0270" : "傘",
"0271" : "備",
"0272" : "傚",
"0273" : "傞",
"0274" : "傜",
"0275" : "催",
"0276" : "傭",
"0277" : "傲",
"0278" : "傳",
"0279" : "傴",
"0280" : "債",
"0281" : "傷",
"0282" : "傾",
"0283" : "僂",
"0284" : "僅",
"0285" : "僇",
"0286" : "僉",
"0287" : "僳",
"0288" : "像",
"0289" : "僱",
"0291" : "僦",
"0292" : "僨",
"0293" : "僩",
"0294" : "僑",
"0295" : "僕",
"0296" : "僖",
"0297" : "僚",
"0298" : "偽",
"0299" : "僥",
"0300" : "僧",
"0301" : "僭",
"0302" : "僮",
"0303" : "儁",
"0304" : "僵",
"0305" : "價",
"0306" : "僻",
"0307" : "僾",
"0308" : "儀",
"0309" : "儂",
"0310" : "億",
"0311" : "儆",
"0312" : "儈",
"0313" : "儉",
"0314" : "儎",
"0315" : "儌",
"0316" : "僰",
"0317" : "儋",
"0318" : "儇",
"0319" : "儐",
"0320" : "儒",
"0321" : "儔",
"0322" : "儕",
"0323" : "儗",
"0324" : "儘",
"0325" : "儤",
"0326" : "償",
"0327" : "優",
"0328" : "儲",
"0329" : "儳",
"0330" : "儷",
"0331" : "儻",
"0332" : "儼",
"0333" : "兡",
"0334" : "儿",
"0335" : "兀",
"0336" : "允",
"0337" : "元",
"0338" : "兄",
"0339" : "充",
"0340" : "兆",
"0341" : "先",
"0342" : "光",
"0343" : "兇",
"0344" : "克",
"0345" : "兌",
"0346" : "免",
"0347" : "兔",
"0348" : "兒",
"0349" : "兕",
"0350" : "兗",
"0351" : "兜",
"0352" : "兢",
"0353" : "兣",
"0354" : "入",
"0355" : "內",
"0356" : "全",
"0357" : "兩",
"0358" : "兪",
"0359" : "鈈",
"0360" : "八",
"0361" : "公",
"0362" : "六",
"0363" : "兮",
"0364" : "共",
"0365" : "兵",
"0366" : "其",
"0367" : "具",
"0368" : "典",
"0369" : "兼",
"0370" : "冀",
"0371" : "糍",
"0372" : "冂",
"0373" : "冉",
"0374" : "册",
"0375" : "再",
"0376" : "冏",
"0377" : "冓",
"0378" : "冑",
"0379" : "冒",
"0380" : "冕",
"0381" : "鑹",
"0382" : "冖",
"0383" : "冗",
"0384" : "冞",
"0385" : "冠",
"0386" : "冢",
"0387" : "冤",
"0388" : "冥",
"0389" : "冪",
"0390" : "耖",
"0391" : "冫",
"0392" : "冬",
"0393" : "冰",
"0394" : "冲",
"0395" : "冱",
"0396" : "冶",
"0397" : "冷",
"0398" : "冸",
"0399" : "冽",
"0400" : "况",
"0401" : "凄",
"0402" : "准",
"0403" : "凈",
"0404" : "凉",
"0405" : "冼",
"0406" : "凋",
"0407" : "凌",
"0408" : "凍",
"0410" : "凑",
"0411" : "凓",
"0412" : "凜",
"0413" : "凝",
"0414" : "决",
"0415" : "几",
"0416" : "凡",
"0417" : "凭",
"0418" : "凱",
"0419" : "凳",
"0420" : "凰",
"0421" : "茌",
"0422" : "凵",
"0423" : "凶",
"0424" : "凸",
"0425" : "凹",
"0426" : "甴",
"0427" : "出",
"0428" : "函",
"0429" : "菪",
"0430" : "刀",
"0431" : "刁",
"0432" : "刃",
"0433" : "分",
"0434" : "切",
"0435" : "刈",
"0436" : "刊",
"0437" : "刎",
"0438" : "刑",
"0439" : "划",
"0440" : "刖",
"0441" : "列",
"0442" : "刨",
"0443" : "初",
"0444" : "删",
"0445" : "判",
"0446" : "別",
"0447" : "刦",
"0448" : "利",
"0449" : "剁",
"0450" : "刮",
"0451" : "到",
"0452" : "刲",
"0453" : "刳",
"0454" : "刵",
"0455" : "制",
"0456" : "刷",
"0457" : "券",
"0458" : "刹",
"0459" : "刺",
"0460" : "剋",
"0461" : "剃",
"0462" : "剄",
"0463" : "則",
"0464" : "剉",
"0465" : "削",
"0466" : "刻",
"0467" : "前",
"0468" : "剜",
"0469" : "剌",
"0470" : "剡",
"0471" : "剔",
"0472" : "剖",
"0473" : "剗",
"0474" : "剛",
"0475" : "剝",
"0476" : "剩",
"0477" : "剪",
"0478" : "剮",
"0479" : "副",
"0480" : "割",
"0481" : "剴",
"0482" : "創",
"0483" : "剸",
"0484" : "剽",
"0485" : "剿",
"0486" : "剠",
"0487" : "劃",
"0488" : "劄",
"0489" : "劇",
"0490" : "劈",
"0491" : "劉",
"0492" : "劊",
"0493" : "剚",
"0494" : "劍",
"0495" : "劑",
"0496" : "劓",
"0497" : "劘",
"0498" : "剷",
"0499" : "剅",
"0500" : "力",
"0501" : "功",
"0502" : "加",
"0503" : "劣",
"0504" : "助",
"0505" : "努",
"0506" : "劫",
"0507" : "劬",
"0508" : "劭",
"0509" : "効",
"0510" : "劻",
"0511" : "劾",
"0512" : "劼",
"0513" : "勁",
"0514" : "勃",
"0515" : "勅",
"0516" : "勇",
"0517" : "勉",
"0518" : "勍",
"0519" : "勒",
"0520" : "動",
"0521" : "勖",
"0522" : "勘",
"0523" : "務",
"0524" : "勝",
"0525" : "勞",
"0526" : "勠",
"0527" : "募",
"0528" : "勢",
"0529" : "勣",
"0530" : "勤",
"0531" : "勦",
"0532" : "勩",
"0533" : "勰",
"0534" : "勳",
"0535" : "勱",
"0536" : "勵",
"0537" : "勷",
"0538" : "勸",
"0539" : "鍀",
"0540" : "勹",
"0541" : "勺",
"0542" : "勻",
"0543" : "勿",
"0544" : "匃",
"0545" : "包",
"0546" : "匈",
"0547" : "匊",
"0548" : "匍",
"0549" : "匏",
"0550" : "匐",
"0551" : "勾",
"0552" : "匕",
"0553" : "化",
"0554" : "北",
"0555" : "匙",
"0556" : "碲",
"0557" : "匚",
"0558" : "匜",
"0559" : "匝",
"0560" : "匟",
"0561" : "匠",
"0562" : "匡",
"0563" : "匣",
"0564" : "匪",
"0565" : "匯",
"0566" : "匱",
"0567" : "匭",
"0568" : "匳",
"0569" : "匵",
"0570" : "啶",
"0571" : "匸",
"0572" : "匹",
"0573" : "匾",
"0574" : "匿",
"0575" : "區",
"0576" : "銩",
"0577" : "十",
"0578" : "千",
"0579" : "卄",
"0580" : "卅",
"0581" : "升",
"0582" : "午",
"0583" : "卉",
"0584" : "半",
"0585" : "卑",
"0586" : "卒",
"0587" : "卓",
"0588" : "協",
"0589" : "南",
"0590" : "博",
"0591" : "㐅",
"0592" : "卜",
"0593" : "卞",
"0594" : "占",
"0595" : "卡",
"0596" : "卣",
"0597" : "卦",
"0598" : "氡",
"0599" : "卩",
"0600" : "卬",
"0601" : "卭",
"0602" : "卯",
"0603" : "印",
"0604" : "危",
"0605" : "卲",
"0606" : "却",
"0607" : "卵",
"0608" : "卷",
"0609" : "卸",
"0610" : "卺",
"0611" : "卻",
"0612" : "卮",
"0613" : "卽",
"0614" : "卹",
"0615" : "卿",
"0616" : "腖",
"0617" : "厂",
"0618" : "厄",
"0619" : "厎",
"0620" : "厓",
"0621" : "厔",
"0622" : "厘",
"0623" : "厙",
"0624" : "厚",
"0625" : "厝",
"0626" : "原",
"0627" : "厠",
"0628" : "厥",
"0629" : "厫",
"0630" : "厭",
"0631" : "厮",
"0632" : "厲",
"0633" : "厦",
"0634" : "胴",
"0635" : "厶",
"0636" : "厹",
"0637" : "去",
"0638" : "叁",
"0639" : "參",
"0640" : "叅",
"0641" : "塅",
"0642" : "又",
"0643" : "叉",
"0644" : "及",
"0645" : "友",
"0646" : "反",
"0647" : "叔",
"0648" : "取",
"0649" : "受",
"0650" : "叙",
"0651" : "叛",
"0652" : "叟",
"0653" : "叡",
"0654" : "叢",
"0655" : "叠",
"0656" : "口",
"0657" : "古",
"0658" : "句",
"0659" : "另",
"0660" : "叨",
"0661" : "叩",
"0662" : "只",
"0663" : "叫",
"0664" : "召",
"0665" : "叭",
"0666" : "叮",
"0667" : "叱",
"0668" : "可",
"0669" : "台",
"0670" : "史",
"0671" : "右",
"0672" : "叵",
"0673" : "叶",
"0674" : "司",
"0675" : "吁",
"0676" : "吃",
"0677" : "各",
"0678" : "合",
"0679" : "吉",
"0680" : "吊",
"0681" : "同",
"0682" : "名",
"0683" : "后",
"0684" : "吏",
"0685" : "吐",
"0686" : "向",
"0687" : "吓",
"0688" : "吒",
"0689" : "君",
"0690" : "吝",
"0691" : "吞",
"0692" : "吟",
"0693" : "吠",
"0694" : "否",
"0695" : "吩",
"0696" : "咐",
"0698" : "含",
"0699" : "吭",
"0700" : "吮",
"0701" : "呈",
"0702" : "吳",
"0703" : "吵",
"0704" : "吶",
"0705" : "吸",
"0706" : "吹",
"0707" : "告",
"0708" : "吻",
"0709" : "吼",
"0710" : "吾",
"0711" : "呀",
"0712" : "呂",
"0713" : "呃",
"0714" : "呆",
"0715" : "咂",
"0716" : "呢",
"0717" : "呦",
"0718" : "呧",
"0719" : "周",
"0720" : "咒",
"0721" : "吧",
"0722" : "呱",
"0723" : "呫",
"0724" : "味",
"0725" : "呵",
"0726" : "呶",
"0727" : "呷",
"0728" : "呻",
"0729" : "呼",
"0730" : "命",
"0731" : "咀",
"0732" : "咄",
"0733" : "咆",
"0734" : "咕",
"0735" : "和",
"0736" : "咎",
"0737" : "咏",
"0738" : "咋",
"0739" : "咖",
"0740" : "哎",
"0741" : "咤",
"0742" : "响",
"0743" : "咪",
"0744" : "咧",
"0745" : "咨",
"0746" : "咫",
"0747" : "咬",
"0748" : "咯",
"0749" : "咱",
"0750" : "咳",
"0751" : "咷",
"0752" : "咸",
"0753" : "咺",
"0754" : "咽",
"0755" : "哀",
"0756" : "品",
"0757" : "哂",
"0758" : "哄",
"0759" : "啊",
"0760" : "哇",
"0761" : "哈",
"0762" : "哉",
"0763" : "哪",
"0764" : "咿",
"0765" : "員",
"0766" : "哥",
"0767" : "唔",
"0768" : "哦",
"0769" : "哩",
"0770" : "哭",
"0771" : "哮",
"0772" : "哲",
"0773" : "哺",
"0774" : "哼",
"0775" : "哽",
"0776" : "哿",
"0777" : "唁",
"0778" : "唆",
"0779" : "唈",
"0780" : "唉",
"0781" : "唐",
"0782" : "唇",
"0783" : "哨",
"0784" : "啦",
"0785" : "唏",
"0786" : "售",
"0787" : "唯",
"0788" : "唱",
"0789" : "唳",
"0790" : "唾",
"0791" : "啁",
"0792" : "啣",
"0793" : "啄",
"0794" : "商",
"0795" : "問",
"0796" : "啓",
"0797" : "啖",
"0798" : "啥",
"0799" : "啜",
"0800" : "啞",
"0801" : "唬",
"0802" : "啤",
"0803" : "啡",
"0804" : "啻",
"0805" : "啼",
"0806" : "喁",
"0807" : "喀",
"0808" : "喂",
"0809" : "喃",
"0810" : "善",
"0811" : "喆",
"0812" : "喇",
"0813" : "喈",
"0814" : "喉",
"0815" : "喊",
"0816" : "喏",
"0817" : "喓",
"0818" : "喋",
"0819" : "喑",
"0820" : "喘",
"0821" : "喙",
"0822" : "喚",
"0823" : "喜",
"0824" : "喝",
"0825" : "喞",
"0826" : "喧",
"0827" : "喻",
"0828" : "喪",
"0829" : "喬",
"0830" : "單",
"0831" : "啾",
"0832" : "嗃",
"0833" : "嗅",
"0834" : "嗎",
"0835" : "嗇",
"0836" : "嗑",
"0837" : "嗓",
"0838" : "嗔",
"0839" : "嗚",
"0840" : "嗛",
"0841" : "嗜",
"0842" : "嗟",
"0843" : "嗣",
"0844" : "嗤",
"0845" : "喔",
"0846" : "喟",
"0847" : "喲",
"0848" : "喫",
"0849" : "喭",
"0850" : "嗆",
"0851" : "嗉",
"0852" : "嗒",
"0853" : "嘍",
"0854" : "嘅",
"0855" : "嘆",
"0856" : "嘈",
"0857" : "嘉",
"0858" : "嘏",
"0859" : "嘛",
"0860" : "嘜",
"0861" : "嘒",
"0862" : "嘖",
"0863" : "嘗",
"0864" : "噓",
"0865" : "噻",
"0866" : "嚎",
"0867" : "嘠",
"0868" : "嘔",
"0869" : "嗷",
"0870" : "嗽",
"0871" : "嗾",
"0872" : "嘬",
"0873" : "嘩",
"0874" : "嗶",
"0875" : "嘰",
"0876" : "嘯",
"0877" : "嘲",
"0878" : "嘴",
"0879" : "嘵",
"0880" : "嘶",
"0881" : "嘷",
"0882" : "嘹",
"0883" : "嘻",
"0884" : "嘿",
"0885" : "噉",
"0886" : "噌",
"0887" : "噍",
"0888" : "噎",
"0889" : "噢",
"0890" : "噏",
"0891" : "噤",
"0892" : "器",
"0893" : "噩",
"0894" : "噪",
"0895" : "噫",
"0896" : "噬",
"0897" : "噯",
"0898" : "噲",
"0899" : "噴",
"0900" : "噶",
"0901" : "噥",
"0902" : "噦",
"0903" : "噸",
"0904" : "噱",
"0905" : "嚀",
"0906" : "嚅",
"0907" : "嚇",
"0908" : "嚏",
"0909" : "嚙",
"0910" : "嚚",
"0911" : "唸",
"0912" : "囅",
"0913" : "嚥",
"0914" : "嚬",
"0915" : "嚮",
"0916" : "嚐",
"0917" : "嚴",
"0918" : "嚨",
"0919" : "嚶",
"0920" : "嚼",
"0921" : "囀",
"0922" : "囁",
"0923" : "囂",
"0924" : "嚷",
"0925" : "囉",
"0926" : "囊",
"0927" : "囈",
"0928" : "囑",
"0929" : "囓",
"0930" : "叻",
"0931" : "囗",
"0932" : "回",
"0933" : "囚",
"0934" : "四",
"0935" : "囱",
"0936" : "因",
"0937" : "囤",
"0938" : "困",
"0939" : "囫",
"0940" : "囷",
"0941" : "囹",
"0942" : "固",
"0943" : "囿",
"0944" : "圃",
"0945" : "圄",
"0946" : "圈",
"0947" : "圉",
"0948" : "國",
"0949" : "圅",
"0950" : "圇",
"0951" : "圂",
"0952" : "囮",
"0953" : "圍",
"0954" : "園",
"0955" : "圓",
"0956" : "圖",
"0957" : "團",
"0958" : "圜",
"0959" : "圕",
"0960" : "土",
"0961" : "在",
"0962" : "圩",
"0963" : "圬",
"0964" : "圭",
"0965" : "圮",
"0966" : "地",
"0967" : "圻",
"0968" : "址",
"0969" : "圾",
"0970" : "坟",
"0971" : "均",
"0972" : "坊",
"0973" : "坍",
"0974" : "坎",
"0975" : "坏",
"0976" : "坐",
"0977" : "坑",
"0978" : "坂",
"0979" : "坌",
"0980" : "坡",
"0981" : "坤",
"0982" : "坦",
"0983" : "坭",
"0984" : "坩",
"0985" : "坷",
"0986" : "坼",
"0987" : "垂",
"0988" : "坪",
"0989" : "坫",
"0990" : "坰",
"0991" : "坳",
"0992" : "型",
"0993" : "垓",
"0994" : "垝",
"0995" : "垠",
"0996" : "垢",
"0997" : "垣",
"0998" : "垃",
"0999" : "坯",
"1000" : "垜",
"1001" : "坨",
"1002" : "埃",
"1003" : "埋",
"1004" : "城",
"1005" : "埒",
"1006" : "垮",
"1007" : "埏",
"1008" : "域",
"1009" : "埠",
"1010" : "垧",
"1011" : "埭",
"1012" : "垡",
"1013" : "執",
"1014" : "培",
"1015" : "基",
"1016" : "堂",
"1017" : "堅",
"1018" : "堆",
"1019" : "堊",
"1020" : "埤",
"1021" : "埴",
"1022" : "埵",
"1023" : "埸",
"1024" : "堃",
"1025" : "堙",
"1026" : "堞",
"1027" : "堡",
"1028" : "堠",
"1029" : "堤",
"1030" : "堪",
"1031" : "堯",
"1032" : "報",
"1033" : "埔",
"1034" : "場",
"1035" : "堵",
"1036" : "埝",
"1037" : "堰",
"1038" : "堦",
"1039" : "塍",
"1040" : "塊",
"1041" : "塋",
"1042" : "塌",
"1043" : "塑",
"1044" : "塔",
"1045" : "墓",
"1046" : "塚",
"1047" : "塗",
"1048" : "塘",
"1049" : "塞",
"1050" : "塡",
"1051" : "塢",
"1052" : "塏",
"1053" : "塤",
"1054" : "塒",
"1055" : "塎",
"1057" : "塵",
"1058" : "塹",
"1059" : "塼",
"1060" : "塾",
"1061" : "塿",
"1062" : "墀",
"1063" : "墁",
"1064" : "境",
"1065" : "墅",
"1066" : "墉",
"1067" : "墊",
"1068" : "墄",
"1069" : "埫",
"1070" : "墐",
"1071" : "墜",
"1072" : "堿",
"1073" : "增",
"1074" : "墟",
"1075" : "墨",
"1076" : "墩",
"1077" : "墮",
"1078" : "墺",
"1079" : "墳",
"1080" : "塄",
"1081" : "壪",
"1082" : "墦",
"1083" : "墾",
"1084" : "壁",
"1085" : "壅",
"1086" : "壇",
"1087" : "𡒄",
"1088" : "壎",
"1089" : "壑",
"1090" : "壓",
"1091" : "壕",
"1092" : "壖",
"1093" : "壘",
"1094" : "壙",
"1095" : "壞",
"1096" : "壟",
"1097" : "壚",
"1098" : "壜",
"1099" : "壤",
"1100" : "壩",
"1101" : "圳",
"1102" : "士",
"1103" : "壬",
"1104" : "壯",
"1105" : "壹",
"1106" : "壺",
"1107" : "壻",
"1108" : "壽",
"1109" : "壼",
"1110" : "椴",
"1111" : "夂",
"1112" : "夆",
"1113" : "籪",
"1114" : "夊",
"1115" : "夏",
"1116" : "砘",
"1118" : "跺",
"1119" : "夕",
"1120" : "外",
"1121" : "夙",
"1122" : "多",
"1123" : "夜",
"1124" : "夠",
"1125" : "夢",
"1126" : "夤",
"1127" : "夥",
"1128" : "婀",
"1129" : "大",
"1130" : "夭",
"1131" : "天",
"1132" : "太",
"1133" : "夫",
"1134" : "夬",
"1135" : "央",
"1136" : "失",
"1137" : "夯",
"1138" : "夷",
"1139" : "夸",
"1140" : "夾",
"1141" : "奄",
"1142" : "奇",
"1143" : "奈",
"1144" : "奉",
"1145" : "奎",
"1146" : "奏",
"1147" : "奐",
"1148" : "契",
"1149" : "奔",
"1150" : "奕",
"1151" : "奓",
"1152" : "套",
"1153" : "奚",
"1154" : "鋨",
"1155" : "奘",
"1156" : "奠",
"1157" : "奡",
"1158" : "奢",
"1159" : "奧",
"1160" : "奩",
"1161" : "奪",
"1162" : "奬",
"1163" : "奭",
"1164" : "奮",
"1165" : "奀",
"1166" : "女",
"1167" : "奴",
"1168" : "奶",
"1169" : "奸",
"1170" : "好",
"1171" : "妁",
"1172" : "如",
"1173" : "妃",
"1174" : "妄",
"1175" : "妊",
"1176" : "妒",
"1177" : "姸",
"1178" : "妓",
"1179" : "妖",
"1180" : "妗",
"1181" : "妙",
"1182" : "妝",
"1183" : "妣",
"1184" : "妤",
"1185" : "妥",
"1186" : "妨",
"1187" : "妯",
"1188" : "妹",
"1189" : "妻",
"1190" : "妾",
"1191" : "姆",
"1192" : "姊",
"1193" : "始",
"1194" : "姗",
"1195" : "姐",
"1196" : "姑",
"1197" : "姒",
"1198" : "姓",
"1199" : "妲",
"1200" : "妮",
"1201" : "委",
"1202" : "姚",
"1203" : "姜",
"1204" : "姝",
"1205" : "姞",
"1206" : "姙",
"1207" : "姣",
"1208" : "姤",
"1209" : "姥",
"1210" : "姨",
"1211" : "姦",
"1212" : "姪",
"1213" : "姬",
"1214" : "姅",
"1215" : "姻",
"1216" : "娃",
"1217" : "姿",
"1218" : "威",
"1219" : "娉",
"1220" : "姮",
"1221" : "姱",
"1222" : "娌",
"1223" : "娑",
"1224" : "娘",
"1225" : "娛",
"1226" : "娜",
"1227" : "娟",
"1228" : "娠",
"1229" : "娣",
"1230" : "娥",
"1231" : "娩",
"1232" : "娓",
"1233" : "娼",
"1234" : "姹",
"1235" : "娶",
"1236" : "婁",
"1237" : "婆",
"1238" : "婉",
"1239" : "婊",
"1240" : "婕",
"1241" : "婚",
"1242" : "婢",
"1243" : "婣",
"1244" : "婦",
"1245" : "婪",
"1246" : "婭",
"1247" : "她",
"1248" : "妳",
"1249" : "婼",
"1250" : "婷",
"1251" : "婺",
"1252" : "媒",
"1253" : "媚",
"1254" : "媛",
"1255" : "媟",
"1256" : "媢",
"1257" : "媧",
"1258" : "媬",
"1259" : "媕",
"1260" : "媖",
"1261" : "媳",
"1262" : "媵",
"1263" : "媸",
"1264" : "媪",
"1265" : "媽",
"1266" : "媾",
"1267" : "媿",
"1268" : "嫁",
"1269" : "嫂",
"1270" : "嫄",
"1271" : "嫉",
"1272" : "嫋",
"1273" : "嫌",
"1274" : "嫓",
"1275" : "媺",
"1276" : "嫖",
"1277" : "嫗",
"1278" : "嫠",
"1279" : "嫡",
"1280" : "嫣",
"1281" : "嫦",
"1282" : "嫩",
"1283" : "嫪",
"1284" : "嫘",
"1285" : "嫚",
"1286" : "嫜",
"1287" : "嫫",
"1288" : "嫺",
"1289" : "媯",
"1290" : "嬈",
"1291" : "嬉",
"1292" : "嬋",
"1293" : "嬌",
"1294" : "嬃",
"1295" : "嬖",
"1296" : "嬗",
"1297" : "嬙",
"1298" : "嬛",
"1299" : "嬴",
"1300" : "嬪",
"1301" : "嬤",
"1302" : "嬭",
"1303" : "嬲",
"1304" : "嬾",
"1305" : "嬰",
"1306" : "嬸",
"1307" : "孀",
"1308" : "孅",
"1309" : "孌",
"1310" : "妞",
"1311" : "子",
"1312" : "孑",
"1313" : "孔",
"1314" : "孕",
"1315" : "孓",
"1316" : "字",
"1317" : "存",
"1318" : "孚",
"1319" : "孛",
"1320" : "孜",
"1321" : "孝",
"1322" : "孟",
"1323" : "季",
"1324" : "孤",
"1325" : "孥",
"1326" : "孩",
"1327" : "孫",
"1328" : "孰",
"1329" : "孱",
"1330" : "孳",
"1331" : "學",
"1332" : "孺",
"1333" : "孼",
"1334" : "孿",
"1335" : "孵",
"1336" : "宀",
"1337" : "宁",
"1338" : "它",
"1339" : "宄",
"1340" : "宂",
"1341" : "宅",
"1342" : "宇",
"1343" : "守",
"1344" : "安",
"1345" : "宋",
"1346" : "完",
"1347" : "宏",
"1348" : "宓",
"1349" : "宕",
"1350" : "宗",
"1351" : "官",
"1352" : "宙",
"1353" : "定",
"1354" : "宛",
"1355" : "宜",
"1356" : "客",
"1357" : "宣",
"1358" : "室",
"1359" : "宥",
"1360" : "宦",
"1361" : "宬",
"1362" : "宮",
"1363" : "宰",
"1364" : "害",
"1365" : "宴",
"1366" : "宵",
"1367" : "家",
"1368" : "宸",
"1369" : "容",
"1370" : "梥",
"1371" : "寀",
"1372" : "宿",
"1374" : "寂",
"1375" : "寃",
"1376" : "寄",
"1377" : "寅",
"1378" : "密",
"1379" : "寇",
"1380" : "寧",
"1381" : "富",
"1382" : "寐",
"1383" : "寒",
"1384" : "寓",
"1385" : "寔",
"1386" : "寖",
"1387" : "寘",
"1388" : "寎",
"1389" : "寞",
"1390" : "察",
"1391" : "寡",
"1392" : "寢",
"1393" : "寤",
"1394" : "寥",
"1395" : "實",
"1396" : "寨",
"1397" : "寠",
"1398" : "寙",
"1399" : "審",
"1400" : "寫",
"1401" : "寬",
"1402" : "寮",
"1403" : "寰",
"1404" : "寵",
"1405" : "寳",
"1406" : "宧",
"1407" : "寸",
"1408" : "寺",
"1409" : "封",
"1410" : "射",
"1411" : "尅",
"1412" : "將",
"1413" : "專",
"1414" : "尉",
"1415" : "尊",
"1416" : "尋",
"1417" : "對",
"1418" : "導",
"1419" : "蒽",
"1420" : "小",
"1421" : "少",
"1422" : "尔",
"1423" : "尖",
"1424" : "尚",
"1425" : "尠",
"1426" : "尞",
"1427" : "尕",
"1428" : "尢",
"1429" : "尤",
"1430" : "尨",
"1432" : "就",
"1433" : "尰",
"1434" : "尲",
"1435" : "尬",
"1436" : "鉺",
"1437" : "尸",
"1438" : "尹",
"1439" : "尺",
"1440" : "尻",
"1441" : "尼",
"1442" : "尾",
"1443" : "尿",
"1444" : "局",
"1445" : "屁",
"1446" : "居",
"1447" : "屆",
"1448" : "屈",
"1449" : "屉",
"1450" : "屋",
"1451" : "屍",
"1452" : "屎",
"1453" : "屐",
"1454" : "屑",
"1455" : "展",
"1456" : "屛",
"1457" : "屝",
"1458" : "屠",
"1459" : "屢",
"1460" : "屣",
"1461" : "層",
"1462" : "履",
"1463" : "屧",
"1464" : "屨",
"1465" : "屩",
"1466" : "屬",
"1467" : "屭",
"1468" : "砩",
"1469" : "屮",
"1470" : "屯",
"1471" : "岳",
"1472" : "山",
"1473" : "屹",
"1474" : "𡵆",
"1475" : "峁",
"1476" : "岌",
"1477" : "岐",
"1478" : "岑",
"1479" : "岔",
"1480" : "峿",
"1481" : "岡",
"1482" : "岢",
"1483" : "峫",
"1484" : "岩",
"1485" : "岫",
"1486" : "岱",
"1487" : "岵",
"1488" : "岷",
"1489" : "岸",
"1490" : "岣",
"1491" : "峒",
"1492" : "峙",
"1493" : "峋",
"1494" : "峨",
"1495" : "峭",
"1496" : "峯",
"1497" : "島",
"1498" : "峻",
"1499" : "峽",
"1500" : "峓",
"1501" : "峴",
"1502" : "峪",
"1503" : "崍",
"1504" : "崇",
"1505" : "崎",
"1506" : "崐",
"1507" : "崑",
"1508" : "崔",
"1509" : "崖",
"1510" : "崙",
"1511" : "崗",
"1512" : "崛",
"1513" : "崢",
"1514" : "崩",
"1515" : "崚",
"1516" : "崧",
"1517" : "崦",
"1518" : "嵇",
"1519" : "崆",
"1520" : "嵋",
"1521" : "嵫",
"1522" : "嵊",
"1523" : "嵌",
"1524" : "崶",
"1525" : "嵎",
"1526" : "嵐",
"1527" : "嵒",
"1528" : "崱",
"1529" : "嵩",
"1530" : "嶁",
"1531" : "嵬",
"1532" : "嵯",
"1533" : "嵾",
"1534" : "嶂",
"1535" : "嶄",
"1536" : "嶇",
"1537" : "嶒",
"1538" : "嶔",
"1539" : "嶸",
"1540" : "嶠",
"1541" : "崤",
"1542" : "嶧",
"1543" : "嶙",
"1544" : "嶷",
"1545" : "嶺",
"1546" : "嶼",
"1547" : "嶽",
"1548" : "巉",
"1549" : "嵛",
"1550" : "巍",
"1551" : "巒",
"1552" : "巘",
"1553" : "巓",
"1554" : "巖",
"1555" : "嶗",
"1556" : "巛",
"1557" : "川",
"1558" : "州",
"1559" : "巡",
"1560" : "巢",
"1561" : "鐨",
"1562" : "工",
"1563" : "左",
"1564" : "巧",
"1565" : "巨",
"1566" : "巫",
"1567" : "差",
"1568" : "酚",
"1569" : "己",
"1570" : "巳",
"1571" : "已",
"1572" : "巴",
"1573" : "巵",
"1574" : "巷",
"1575" : "巽",
"1576" : "釓",
"1577" : "巾",
"1578" : "币",
"1579" : "市",
"1580" : "布",
"1581" : "帆",
"1582" : "帋",
"1583" : "帑",
"1584" : "帕",
"1585" : "希",
"1586" : "帖",
"1587" : "帗",
"1588" : "帘",
"1589" : "帙",
"1590" : "帚",
"1591" : "帛",
"1592" : "帔",
"1593" : "帝",
"1594" : "帲",
"1595" : "帟",
"1596" : "帥",
"1597" : "師",
"1598" : "席",
"1599" : "帨",
"1600" : "帳",
"1601" : "帶",
"1602" : "帷",
"1603" : "常",
"1604" : "帽",
"1605" : "幃",
"1606" : "幄",
"1607" : "幅",
"1608" : "幀",
"1609" : "幋",
"1610" : "幌",
"1611" : "幔",
"1612" : "幕",
"1613" : "幗",
"1614" : "幘",
"1615" : "幟",
"1616" : "幡",
"1617" : "幢",
"1618" : "幣",
"1619" : "幪",
"1620" : "幫",
"1621" : "幬",
"1622" : "幭",
"1623" : "幯",
"1624" : "幰",
"1625" : "幛",
"1626" : "干",
"1627" : "平",
"1628" : "年",
"1629" : "幷",
"1630" : "幸",
"1631" : "幹",
"1632" : "矸",
"1633" : "幺",
"1634" : "幻",
"1635" : "幼",
"1636" : "幽",
"1637" : "幾",
"1638" : "酐",
"1639" : "广",
"1640" : "庀",
"1641" : "庹",
"1642" : "庇",
"1643" : "床",
"1644" : "庋",
"1645" : "序",
"1646" : "底",
"1647" : "庖",
"1648" : "店",
"1649" : "庚",
"1650" : "府",
"1651" : "庠",
"1652" : "庥",
"1653" : "度",
"1654" : "座",
"1655" : "庫",
"1656" : "庭",
"1657" : "庳",
"1658" : "庵",
"1659" : "庶",
"1660" : "康",
"1661" : "庸",
"1662" : "庾",
"1663" : "庬",
"1664" : "庴",
"1665" : "廁",
"1666" : "廂",
"1667" : "廌",
"1668" : "廑",
"1669" : "廈",
"1670" : "廉",
"1671" : "廊",
"1672" : "廋",
"1673" : "廐",
"1674" : "廓",
"1675" : "廖",
"1676" : "廚",
"1677" : "廕",
"1678" : "廝",
"1680" : "廟",
"1681" : "廠",
"1682" : "廡",
"1683" : "廢",
"1684" : "廣",
"1685" : "廨",
"1686" : "廩",
"1687" : "廬",
"1688" : "廱",
"1689" : "廳",
"1690" : "龐",
"1691" : "鋯",
"1692" : "廴",
"1693" : "延",
"1694" : "廷",
"1695" : "廹",
"1696" : "建",
"1697" : "廻",
"1698" : "廼",
"1699" : "廾",
"1700" : "廿",
"1701" : "弁",
"1702" : "弄",
"1703" : "弇",
"1704" : "弈",
"1705" : "弊",
"1706" : "茛",
"1707" : "弋",
"1708" : "弍",
"1709" : "式",
"1710" : "弒",
"1711" : "濲",
"1712" : "弓",
"1713" : "弔",
"1714" : "引",
"1715" : "弗",
"1716" : "弛",
"1717" : "弟",
"1718" : "弢",
"1719" : "弣",
"1720" : "弦",
"1721" : "弧",
"1722" : "弩",
"1723" : "弤",
"1724" : "弨",
"1725" : "弭",
"1726" : "弱",
"1727" : "弰",
"1728" : "張",
"1729" : "彄",
"1730" : "強",
"1731" : "弸",
"1732" : "弼",
"1733" : "彀",
"1734" : "彈",
"1735" : "彊",
"1736" : "彌",
"1737" : "彎",
"1738" : "弘",
"1739" : "彐",
"1740" : "彖",
"1741" : "彗",
"1742" : "彘",
"1743" : "彙",
"1744" : "彝",
"1745" : "彠",
"1746" : "臌",
"1747" : "彡",
"1748" : "形",
"1749" : "彤",
"1750" : "彥",
"1751" : "彧",
"1752" : "彩",
"1753" : "彪",
"1754" : "彫",
"1755" : "彬",
"1756" : "彭",
"1757" : "彰",
"1758" : "影",
"1759" : "彲",
"1760" : "鉿",
"1761" : "彳",
"1762" : "彷",
"1763" : "役",
"1764" : "彼",
"1765" : "彿",
"1766" : "往",
"1767" : "征",
"1768" : "徂",
"1769" : "待",
"1770" : "徇",
"1771" : "很",
"1772" : "徉",
"1773" : "徊",
"1774" : "律",
"1775" : "後",
"1776" : "徐",
"1777" : "徑",
"1778" : "徒",
"1779" : "得",
"1780" : "徘",
"1781" : "徙",
"1782" : "徜",
"1783" : "從",
"1784" : "徠",
"1786" : "徧",
"1787" : "徨",
"1788" : "復",
"1789" : "循",
"1790" : "徬",
"1791" : "徭",
"1792" : "微",
"1793" : "徯",
"1794" : "徵",
"1795" : "德",
"1796" : "徹",
"1797" : "徼",
"1798" : "徽",
"1799" : "焓",
"1800" : "心",
"1801" : "必",
"1802" : "忉",
"1803" : "忌",
"1804" : "忍",
"1805" : "忒",
"1806" : "忖",
"1807" : "志",
"1808" : "忘",
"1809" : "忐",
"1810" : "忑",
"1811" : "忙",
"1812" : "忝",
"1813" : "忠",
"1814" : "忡",
"1815" : "恬",
"1816" : "快",
"1817" : "忭",
"1818" : "忮",
"1819" : "念",
"1820" : "忱",
"1821" : "忸",
"1822" : "忤",
"1823" : "忻",
"1824" : "忽",
"1825" : "忿",
"1826" : "怍",
"1827" : "怎",
"1828" : "怏",
"1829" : "怒",
"1830" : "怕",
"1831" : "怖",
"1832" : "怗",
"1833" : "怙",
"1834" : "怛",
"1835" : "思",
"1836" : "怠",
"1837" : "怡",
"1838" : "急",
"1839" : "怦",
"1840" : "性",
"1841" : "怨",
"1842" : "怩",
"1843" : "怪",
"1844" : "怫",
"1845" : "怯",
"1846" : "怱",
"1847" : "怵",
"1849" : "您",
"1850" : "怔",
"1851" : "恁",
"1852" : "恂",
"1853" : "恃",
"1854" : "恆",
"1855" : "惦",
"1856" : "恌",
"1857" : "恍",
"1858" : "恐",
"1859" : "恕",
"1860" : "恙",
"1861" : "恚",
"1862" : "恝",
"1863" : "恢",
"1864" : "恣",
"1865" : "恤",
"1866" : "恥",
"1867" : "恧",
"1868" : "恨",
"1869" : "恩",
"1870" : "恪",
"1871" : "恫",
"1872" : "恭",
"1873" : "息",
"1874" : "恰",
"1875" : "悃",
"1876" : "恉",
"1877" : "悄",
"1878" : "悅",
"1879" : "悌",
"1880" : "悍",
"1881" : "悒",
"1882" : "悔",
"1883" : "悖",
"1884" : "悚",
"1885" : "悉",
"1886" : "悛",
"1887" : "悝",
"1888" : "悞",
"1889" : "悟",
"1890" : "悠",
"1891" : "患",
"1892" : "悤",
"1893" : "悁",
"1894" : "悱",
"1895" : "惪",
"1896" : "悲",
"1897" : "悴",
"1898" : "悵",
"1899" : "悶",
"1900" : "悸",
"1901" : "悻",
"1902" : "悼",
"1903" : "悽",
"1904" : "悾",
"1905" : "惄",
"1906" : "情",
"1907" : "惆",
"1908" : "惇",
"1909" : "惎",
"1910" : "惑",
"1911" : "惓",
"1912" : "惕",
"1913" : "惘",
"1914" : "惙",
"1915" : "惚",
"1916" : "惛",
"1917" : "惜",
"1918" : "惝",
"1919" : "惟",
"1920" : "惠",
"1921" : "惡",
"1922" : "悰",
"1923" : "惋",
"1924" : "惰",
"1925" : "惱",
"1926" : "惲",
"1927" : "想",
"1928" : "惴",
"1929" : "惶",
"1930" : "惸",
"1931" : "惹",
"1932" : "惺",
"1933" : "惻",
"1934" : "愀",
"1935" : "愁",
"1936" : "愆",
"1937" : "愈",
"1938" : "愉",
"1939" : "愊",
"1940" : "愍",
"1941" : "愎",
"1942" : "意",
"1943" : "愒",
"1944" : "愔",
"1945" : "愕",
"1946" : "愚",
"1947" : "愛",
"1948" : "愜",
"1949" : "感",
"1950" : "愠",
"1951" : "愧",
"1952" : "慤",
"1953" : "愫",
"1954" : "愬",
"1955" : "愴",
"1956" : "愷",
"1957" : "愼",
"1958" : "愾",
"1959" : "愿",
"1960" : "慂",
"1961" : "慄",
"1962" : "慆",
"1963" : "慇",
"1964" : "慈",
"1965" : "慊",
"1966" : "態",
"1967" : "慌",
"1968" : "慁",
"1969" : "慓",
"1970" : "慕",
"1971" : "慘",
"1972" : "慙",
"1973" : "慝",
"1974" : "慚",
"1975" : "慟",
"1976" : "慢",
"1977" : "慣",
"1978" : "慩",
"1979" : "慧",
"1980" : "慨",
"1981" : "慫",
"1982" : "慮",
"1983" : "慰",
"1984" : "慳",
"1985" : "慴",
"1986" : "慵",
"1987" : "慶",
"1988" : "慷",
"1989" : "慼",
"1990" : "慾",
"1991" : "憁",
"1992" : "憂",
"1993" : "慥",
"1994" : "憊",
"1995" : "憐",
"1996" : "憑",
"1997" : "憔",
"1998" : "憚",
"1999" : "憎",
"2000" : "憝",
"2001" : "憤",
"2002" : "憧",
"2003" : "憨",
"2004" : "憩",
"2005" : "憬",
"2006" : "憫",
"2007" : "憮",
"2008" : "憯",
"2009" : "憲",
"2010" : "憍",
"2011" : "憶",
"2012" : "憸",
"2013" : "憾",
"2014" : "懃",
"2015" : "懆",
"2016" : "懂",
"2017" : "懇",
"2018" : "懈",
"2019" : "應",
"2020" : "懊",
"2021" : "懋",
"2022" : "懌",
"2023" : "懍",
"2024" : "懓",
"2025" : "憒",
"2026" : "憗",
"2027" : "憦",
"2028" : "憏",
"2029" : "懟",
"2030" : "懣",
"2031" : "懥",
"2032" : "懦",
"2033" : "懲",
"2034" : "懿",
"2035" : "懵",
"2036" : "懶",
"2037" : "懷",
"2038" : "懸",
"2039" : "懺",
"2040" : "懼",
"2041" : "懽",
"2042" : "懾",
"2043" : "戀",
"2044" : "懨",
"2045" : "戇",
"2046" : "慜",
"2047" : "戈",
"2048" : "戊",
"2049" : "戌",
"2050" : "戍",
"2051" : "戎",
"2052" : "成",
"2053" : "我",
"2054" : "戒",
"2055" : "戔",
"2056" : "戕",
"2057" : "或",
"2058" : "戚",
"2059" : "戛",
"2060" : "戟",
"2061" : "戢",
"2062" : "戥",
"2063" : "戡",
"2064" : "戣",
"2065" : "戩",
"2066" : "截",
"2067" : "戳",
"2068" : "戮",
"2069" : "戰",
"2070" : "戲",
"2071" : "戴",
"2072" : "戤",
"2073" : "戶",
"2074" : "戾",
"2075" : "房",
"2076" : "所",
"2077" : "戽",
"2078" : "扁",
"2079" : "扃",
"2080" : "扅",
"2081" : "扆",
"2082" : "扇",
"2083" : "扈",
"2084" : "扉",
"2085" : "扊",
"2086" : "槲",
"2087" : "手",
"2088" : "才",
"2089" : "扎",
"2090" : "扑",
"2091" : "扒",
"2092" : "打",
"2093" : "扔",
"2094" : "托",
"2095" : "扛",
"2097" : "抃",
"2098" : "扞",
"2099" : "扣",
"2100" : "扭",
"2101" : "扮",
"2102" : "扯",
"2103" : "扱",
"2104" : "扳",
"2105" : "扶",
"2106" : "批",
"2107" : "抵",
"2108" : "扼",
"2109" : "找",
"2110" : "承",
"2111" : "技",
"2113" : "抄",
"2114" : "抆",
"2115" : "抉",
"2116" : "把",
"2117" : "抑",
"2118" : "抒",
"2119" : "抓",
"2120" : "抔",
"2121" : "投",
"2122" : "抖",
"2123" : "抗",
"2124" : "折",
"2125" : "抨",
"2126" : "披",
"2127" : "抬",
"2128" : "抱",
"2129" : "抿",
"2130" : "抹",
"2131" : "押",
"2132" : "抽",
"2133" : "拂",
"2134" : "拄",
"2135" : "拆",
"2136" : "拇",
"2137" : "担",
"2138" : "拈",
"2139" : "拉",
"2140" : "拊",
"2141" : "拋",
"2142" : "拌",
"2143" : "拍",
"2144" : "拏",
"2145" : "拐",
"2147" : "拒",
"2148" : "拓",
"2149" : "拔",
"2150" : "挐",
"2151" : "拖",
"2152" : "拗",
"2153" : "拘",
"2154" : "拙",
"2155" : "拚",
"2156" : "招",
"2157" : "拜",
"2159" : "拮",
"2160" : "拭",
"2161" : "括",
"2162" : "拱",
"2163" : "拯",
"2164" : "拳",
"2165" : "拴",
"2166" : "拷",
"2167" : "拽",
"2168" : "拾",
"2169" : "拿",
"2170" : "持",
"2171" : "挂",
"2172" : "指",
"2173" : "挈",
"2174" : "按",
"2175" : "挍",
"2176" : "挑",
"2177" : "挖",
"2178" : "拼",
"2179" : "挨",
"2180" : "挪",
"2181" : "挫",
"2182" : "振",
"2183" : "挶",
"2184" : "挹",
"2185" : "挺",
"2186" : "挼",
"2187" : "挽",
"2188" : "挾",
"2189" : "捄",
"2190" : "捆",
"2191" : "捉",
"2192" : "捋",
"2193" : "捌",
"2194" : "捍",
"2195" : "掂",
"2196" : "捐",
"2197" : "掙",
"2198" : "捕",
"2199" : "挲",
"2200" : "捎",
"2201" : "捧",
"2202" : "捨",
"2203" : "捩",
"2204" : "捫",
"2205" : "捺",
"2206" : "捭",
"2207" : "据",
"2208" : "捲",
"2209" : "捱",
"2211" : "捶",
"2212" : "捷",
"2213" : "揍",
"2214" : "捻",
"2215" : "捽",
"2216" : "掀",
"2217" : "掃",
"2218" : "掇",
"2219" : "授",
"2220" : "掉",
"2221" : "掊",
"2222" : "掌",
"2223" : "掏",
"2224" : "掎",
"2225" : "掐",
"2226" : "排",
"2227" : "掖",
"2228" : "掘",
"2229" : "掛",
"2230" : "掠",
"2231" : "採",
"2232" : "探",
"2233" : "掣",
"2234" : "接",
"2235" : "控",
"2236" : "推",
"2237" : "掩",
"2238" : "措",
"2239" : "掬",
"2240" : "掯",
"2241" : "掄",
"2242" : "掞",
"2243" : "揹",
"2244" : "掫",
"2245" : "揀",
"2246" : "揄",
"2247" : "揆",
"2248" : "揉",
"2249" : "描",
"2250" : "揑",
"2251" : "提",
"2252" : "插",
"2253" : "揖",
"2254" : "揚",
"2255" : "換",
"2256" : "揜",
"2257" : "揠",
"2258" : "搽",
"2259" : "握",
"2260" : "揣",
"2261" : "揩",
"2262" : "揪",
"2263" : "揭",
"2264" : "揮",
"2265" : "搾",
"2266" : "援",
"2267" : "掽",
"2268" : "掾",
"2269" : "搞",
"2270" : "搕",
"2271" : "搧",
"2272" : "搯",
"2273" : "搆",
"2274" : "搉",
"2275" : "損",
"2276" : "搏",
"2277" : "搒",
"2278" : "搓",
"2279" : "搔",
"2280" : "搖",
"2281" : "搗",
"2282" : "搜",
"2283" : "搠",
"2284" : "搰",
"2285" : "搥",
"2286" : "搦",
"2287" : "搨",
"2288" : "搪",
"2289" : "搬",
"2290" : "搭",
"2291" : "搴",
"2292" : "摔",
"2293" : "搶",
"2294" : "搐",
"2295" : "摏",
"2296" : "摻",
"2297" : "撂",
"2298" : "摘",
"2299" : "摟",
"2300" : "撑",
"2301" : "摧",
"2302" : "摩",
"2303" : "摭",
"2304" : "摯",
"2305" : "摳",
"2306" : "摶",
"2307" : "摸",
"2308" : "摹",
"2309" : "摺",
"2310" : "摑",
"2311" : "摒",
"2312" : "摛",
"2313" : "撅",
"2314" : "摴",
"2315" : "摽",
"2316" : "撩",
"2317" : "撇",
"2318" : "撈",
"2319" : "撐",
"2320" : "撒",
"2321" : "撓",
"2322" : "撕",
"2323" : "撙",
"2324" : "撚",
"2325" : "撝",
"2326" : "撞",
"2327" : "撤",
"2328" : "撥",
"2329" : "撫",
"2330" : "播",
"2331" : "撮",
"2332" : "撰",
"2333" : "撲",
"2334" : "撬",
"2335" : "摜",
"2337" : "撻",
"2338" : "撼",
"2339" : "撾",
"2340" : "擁",
"2341" : "擂",
"2342" : "擄",
"2343" : "擅",
"2344" : "擇",
"2345" : "擊",
"2346" : "擋",
"2347" : "操",
"2348" : "擎",
"2349" : "擰",
"2350" : "擒",
"2351" : "擔",
"2352" : "擗",
"2353" : "擘",
"2354" : "據",
"2355" : "擷",
"2356" : "攙",
"2357" : "擠",
"2358" : "擡",
"2359" : "擢",
"2360" : "擣",
"2361" : "擦",
"2362" : "擬",
"2363" : "擯",
"2364" : "擱",
"2365" : "攆",
"2366" : "擭",
"2367" : "擲",
"2368" : "擴",
"2369" : "擺",
"2370" : "擻",
"2371" : "擾",
"2372" : "攀",
"2373" : "攄",
"2374" : "攔",
"2375" : "攖",
"2376" : "攘",
"2377" : "攜",
"2378" : "攝",
"2379" : "攏",
"2380" : "攢",
"2381" : "攣",
"2382" : "攤",
"2383" : "攪",
"2384" : "攫",
"2385" : "攬",
"2386" : "攩",
"2387" : "拃",
"2388" : "支",
"2389" : "敧",
"2390" : "塃",
"2391" : "攴",
"2392" : "收",
"2393" : "攷",
"2394" : "攸",
"2395" : "攺",
"2396" : "攻",
"2397" : "放",
"2398" : "政",
"2399" : "故",
"2400" : "效",
"2401" : "敉",
"2402" : "敍",
"2403" : "敎",
"2404" : "敏",
"2405" : "救",
"2406" : "敕",
"2407" : "敖",
"2408" : "敗",
"2409" : "敔",
"2410" : "敂",
"2411" : "敝",
"2412" : "敞",
"2413" : "敢",
"2414" : "散",
"2415" : "敦",
"2416" : "敻",
"2417" : "敬",
"2418" : "敲",
"2419" : "整",
"2420" : "敵",
"2421" : "敷",
"2422" : "數",
"2423" : "敺",
"2424" : "斁",
"2425" : "斂",
"2426" : "斃",
"2427" : "斆",
"2428" : "敭",
"2429" : "文",
"2430" : "斌",
"2431" : "斐",
"2432" : "斑",
"2433" : "斕",
"2434" : "蟥",
"2435" : "斗",
"2436" : "料",
"2437" : "斛",
"2438" : "斜",
"2439" : "斝",
"2440" : "斟",
"2441" : "斡",
"2442" : "斢",
"2443" : "斤",
"2444" : "斥",
"2445" : "斧",
"2446" : "斨",
"2447" : "斬",
"2448" : "斯",
"2450" : "新",
"2451" : "斷",
"2452" : "斲",
"2453" : "斸",
"2454" : "䐵",
"2455" : "方",
"2456" : "於",
"2457" : "施",
"2458" : "斿",
"2459" : "旎",
"2460" : "旁",
"2461" : "旂",
"2462" : "旃",
"2463" : "旄",
"2464" : "旅",
"2465" : "旆",
"2466" : "旐",
"2467" : "旋",
"2468" : "旌",
"2469" : "族",
"2470" : "旑",
"2471" : "旒",
"2472" : "旜",
"2473" : "旛",
"2474" : "旟",
"2475" : "旗",
"2476" : "燴",
"2477" : "无",
"2478" : "旣",
"2479" : "曆",
"2480" : "日",
"2481" : "旦",
"2482" : "旨",
"2483" : "早",
"2484" : "旬",
"2485" : "旭",
"2486" : "旰",
"2487" : "旱",
"2488" : "晒",
"2489" : "旺",
"2490" : "昌",
"2491" : "昂",
"2492" : "昆",
"2493" : "昃",
"2494" : "明",
"2495" : "昏",
"2496" : "易",
"2497" : "昔",
"2498" : "晗",
"2499" : "昉",
"2500" : "昕",
"2501" : "昝",
"2502" : "星",
"2503" : "映",
"2504" : "春",
"2505" : "昧",
"2506" : "昨",
"2507" : "昭",
"2508" : "是",
"2509" : "昱",
"2510" : "昴",
"2511" : "昵",
"2512" : "昶",
"2513" : "晁",
"2514" : "時",
"2515" : "晃",
"2516" : "晉",
"2517" : "晌",
"2518" : "晏",
"2519" : "晚",
"2520" : "晢",
"2521" : "晝",
"2522" : "晞",
"2523" : "晡",
"2524" : "晤",
"2525" : "晨",
"2526" : "晦",
"2527" : "暎",
"2528" : "普",
"2529" : "景",
"2530" : "晰",
"2531" : "晳",
"2532" : "晴",
"2533" : "晶",
"2534" : "晷",
"2535" : "智",
"2536" : "晬",
"2537" : "暄",
"2538" : "暇",
"2539" : "暍",
"2540" : "暑",
"2541" : "暖",
"2542" : "暗",
"2543" : "暘",
"2544" : "暝",
"2545" : "暢",
"2546" : "暈",
"2547" : "暉",
"2548" : "暫",
"2549" : "𣊓",
"2550" : "暮",
"2551" : "暱",
"2552" : "暴",
"2553" : "暵",
"2554" : "暹",
"2555" : "曁",
"2556" : "曉",
"2557" : "暾",
"2558" : "曀",
"2559" : "曈",
"2560" : "曇",
"2561" : "曏",
"2562" : "曙",
"2563" : "曚",
"2564" : "曛",
"2565" : "曜",
"2566" : "曝",
"2567" : "曡",
"2568" : "曠",
"2569" : "曦",
"2570" : "曨",
"2571" : "曩",
"2572" : "曬",
"2573" : "昇",
"2574" : "曰",
"2575" : "曲",
"2576" : "曳",
"2577" : "更",
"2578" : "曷",
"2579" : "書",
"2580" : "曹",
"2581" : "曼",
"2582" : "曾",
"2583" : "替",
"2584" : "最",
"2585" : "會",
"2586" : "朅",
"2587" : "朂",
"2588" : "月",
"2589" : "有",
"2590" : "朋",
"2591" : "服",
"2592" : "朔",
"2593" : "朐",
"2594" : "朓",
"2595" : "朏",
"2596" : "朕",
"2597" : "朗",
"2598" : "望",
"2599" : "朞",
"2600" : "朝",
"2601" : "期",
"2602" : "朢",
"2604" : "朧",
"2605" : "耠",
"2606" : "木",
"2607" : "未",
"2608" : "末",
"2609" : "本",
"2610" : "札",
"2611" : "朮",
"2612" : "朱",
"2613" : "朴",
"2614" : "朵",
"2615" : "朽",
"2616" : "杆",
"2618" : "杷",
"2619" : "杉",
"2620" : "杌",
"2621" : "李",
"2622" : "杏",
"2623" : "机",
"2624" : "材",
"2625" : "村",
"2626" : "杓",
"2627" : "杖",
"2628" : "柈",
"2629" : "杜",
"2630" : "𣏌",
"2631" : "束",
"2632" : "梠",
"2633" : "栓",
"2634" : "杪",
"2635" : "杭",
"2636" : "柿",
"2637" : "杯",
"2638" : "杰",
"2639" : "東",
"2640" : "杲",
"2641" : "杳",
"2642" : "椗",
"2643" : "杵",
"2644" : "棵",
"2645" : "杼",
"2646" : "松",
"2647" : "板",
"2648" : "枉",
"2649" : "析",
"2650" : "枕",
"2651" : "林",
"2652" : "枙",
"2653" : "枚",
"2654" : "果",
"2655" : "枝",
"2656" : "楻",
"2657" : "枇",
"2658" : "枋",
"2659" : "枌",
"2660" : "枘",
"2661" : "枯",
"2662" : "枲",
"2663" : "枳",
"2664" : "枵",
"2665" : "架",
"2666" : "枷",
"2667" : "枸",
"2668" : "柎",
"2669" : "枻",
"2670" : "柁",
"2671" : "柄",
"2672" : "柏",
"2673" : "某",
"2674" : "柑",
"2675" : "柒",
"2676" : "染",
"2677" : "柔",
"2678" : "柘",
"2679" : "柙",
"2680" : "柚",
"2681" : "柜",
"2682" : "柝",
"2683" : "柞",
"2684" : "柟",
"2685" : "柢",
"2686" : "查",
"2687" : "柬",
"2688" : "柯",
"2689" : "柮",
"2690" : "柰",
"2691" : "柱",
"2692" : "柳",
"2693" : "柴",
"2694" : "柵",
"2695" : "枰",
"2696" : "枹",
"2697" : "樋",
"2698" : "栗",
"2699" : "校",
"2700" : "栩",
"2701" : "株",
"2702" : "核",
"2703" : "栱",
"2704" : "根",
"2705" : "槾",
"2706" : "格",
"2707" : "栽",
"2708" : "桀",
"2709" : "桁",
"2710" : "桂",
"2711" : "桃",
"2712" : "桅",
"2713" : "框",
"2714" : "案",
"2715" : "桌",
"2716" : "桎",
"2717" : "桐",
"2718" : "桑",
"2719" : "桓",
"2720" : "桔",
"2721" : "桕",
"2722" : "栖",
"2723" : "栲",
"2724" : "栳",
"2725" : "桄",
"2726" : "桫",
"2727" : "桴",
"2728" : "桹",
"2729" : "桶",
"2730" : "桷",
"2731" : "桿",
"2732" : "梃",
"2733" : "梁",
"2734" : "梅",
"2735" : "梆",
"2736" : "梏",
"2737" : "梓",
"2738" : "梔",
"2739" : "梗",
"2740" : "桚",
"2741" : "梜",
"2742" : "條",
"2743" : "梟",
"2744" : "梢",
"2745" : "梧",
"2746" : "棃",
"2747" : "梭",
"2748" : "梯",
"2749" : "梱",
"2750" : "械",
"2751" : "梲",
"2752" : "梳",
"2753" : "梵",
"2754" : "桮",
"2755" : "梐",
"2756" : "桯",
"2757" : "棄",
"2758" : "棉",
"2759" : "棋",
"2760" : "棍",
"2761" : "棒",
"2762" : "棕",
"2763" : "棖",
"2764" : "棗",
"2765" : "棘",
"2766" : "棚",
"2767" : "棟",
"2768" : "棠",
"2769" : "棣",
"2770" : "棧",
"2771" : "棫",
"2772" : "棬",
"2773" : "森",
"2774" : "棰",
"2775" : "楦",
"2776" : "棲",
"2777" : "棹",
"2778" : "棺",
"2779" : "椁",
"2780" : "棻",
"2781" : "棼",
"2782" : "椀",
"2783" : "椅",
"2784" : "植",
"2785" : "椎",
"2786" : "椒",
"2787" : "棐",
"2788" : "棓",
"2789" : "棱",
"2790" : "棨",
"2791" : "椐",
"2792" : "椓",
"2793" : "椷",
"2794" : "椰",
"2795" : "椹",
"2796" : "椽",
"2797" : "椿",
"2798" : "楅",
"2799" : "楊",
"2800" : "楓",
"2801" : "楔",
"2802" : "櫛",
"2803" : "楗",
"2804" : "橺",
"2805" : "楘",
"2806" : "楚",
"2807" : "楞",
"2808" : "楝",
"2809" : "楠",
"2810" : "榆",
"2811" : "楢",
"2812" : "楣",
"2813" : "楫",
"2814" : "業",
"2815" : "楯",
"2816" : "楮",
"2817" : "極",
"2818" : "楷",
"2819" : "楹",
"2820" : "椶",
"2821" : "椸",
"2822" : "楛",
"2823" : "楨",
"2824" : "楩",
"2825" : "楸",
"2826" : "榔",
"2827" : "榕",
"2828" : "榖",
"2829" : "榘",
"2830" : "榛",
"2831" : "榜",
"2832" : "榦",
"2833" : "榧",
"2834" : "榨",
"2835" : "榫",
"2836" : "榭",
"2837" : "榮",
"2838" : "榱",
"2839" : "榴",
"2840" : "榻",
"2841" : "榾",
"2842" : "槁",
"2843" : "槅",
"2844" : "槊",
"2845" : "構",
"2846" : "槌",
"2847" : "槍",
"2848" : "槎",
"2849" : "槐",
"2850" : "槓",
"2851" : "榎",
"2852" : "榤",
"2853" : "榥",
"2854" : "榷",
"2855" : "榼",
"2856" : "樑",
"2857" : "槃",
"2858" : "槧",
"2859" : "槨",
"2860" : "橌",
"2861" : "槪",
"2862" : "槳",
"2863" : "橰",
"2864" : "槽",
"2865" : "槿",
"2866" : "樁",
"2867" : "樂",
"2868" : "樊",
"2869" : "樓",
"2870" : "樕",
"2871" : "標",
"2872" : "樛",
"2873" : "樞",
"2874" : "樟",
"2875" : "模",
"2876" : "樣",
"2877" : "槥",
"2878" : "樅",
"2879" : "樏",
"2880" : "樗",
"2881" : "槱",
"2882" : "檩",
"2883" : "樸",
"2884" : "樵",
"2885" : "樹",
"2886" : "樽",
"2887" : "樾",
"2888" : "橄",
"2889" : "橈",
"2890" : "橋",
"2891" : "橐",
"2892" : "橙",
"2893" : "橛",
"2894" : "機",
"2895" : "橡",
"2896" : "橧",
"2897" : "橫",
"2898" : "樨",
"2899" : "檸",
"2900" : "橢",
"2901" : "樺",
"2902" : "橁",
"2903" : "檖",
"2904" : "橘",
"2905" : "檀",
"2906" : "檉",
"2907" : "檄",
"2908" : "檐",
"2909" : "檔",
"2910" : "檜",
"2911" : "檟",
"2912" : "檝",
"2913" : "檠",
"2914" : "檢",
"2915" : "檣",
"2916" : "檬",
"2917" : "檮",
"2918" : "檯",
"2919" : "檳",
"2920" : "檻",
"2921" : "櫂",
"2922" : "櫃",
"2923" : "櫈",
"2924" : "櫓",
"2925" : "櫚",
"2926" : "櫜",
"2927" : "櫝",
"2928" : "櫞",
"2929" : "櫟",
"2930" : "櫱",
"2931" : "櫪",
"2932" : "櫬",
"2933" : "櫺",
"2934" : "櫳",
"2935" : "櫽",
"2936" : "欄",
"2937" : "櫻",
"2938" : "權",
"2939" : "欝",
"2940" : "欒",
"2941" : "欖",
"2942" : "欃",
"2943" : "柩",
"2944" : "欠",
"2945" : "次",
"2946" : "欣",
"2947" : "欬",
"2948" : "欲",
"2949" : "款",
"2950" : "欷",
"2951" : "欹",
"2952" : "欺",
"2953" : "欽",
"2954" : "欿",
"2955" : "歃",
"2956" : "歆",
"2957" : "歇",
"2958" : "歕",
"2959" : "歉",
"2960" : "歌",
"2961" : "歎",
"2962" : "歐",
"2963" : "歔",
"2964" : "欻",
"2965" : "歙",
"2966" : "歛",
"2967" : "歝",
"2968" : "歟",
"2969" : "歠",
"2970" : "歡",
"2971" : "歞",
"2972" : "止",
"2973" : "正",
"2974" : "此",
"2975" : "步",
"2976" : "武",
"2977" : "歪",
"2978" : "歧",
"2979" : "歲",
"2980" : "歷",
"2981" : "歸",
"2982" : "鈥",
"2983" : "歹",
"2984" : "死",
"2985" : "歿",
"2986" : "殀",
"2987" : "殂",
"2988" : "殃",
"2989" : "殄",
"2990" : "殆",
"2991" : "殉",
"2992" : "殊",
"2993" : "殍",
"2994" : "殖",
"2995" : "殘",
"2996" : "殕",
"2997" : "殛",
"2998" : "殞",
"2999" : "殤",
"3000" : "殫",
"3001" : "殢",
"3002" : "殪",
"3003" : "殮",
"3004" : "殯",
"3005" : "殲",
"3006" : "鎵",
"3007" : "殳",
"3008" : "段",
"3009" : "殷",
"3010" : "殺",
"3011" : "殼",
"3012" : "殽",
"3013" : "殿",
"3014" : "毀",
"3015" : "毅",
"3016" : "毆",
"3017" : "椵",
"3018" : "母",
"3019" : "毋",
"3020" : "每",
"3021" : "毒",
"3022" : "毓",
"3023" : "伢",
"3024" : "比",
"3025" : "毖",
"3026" : "毗",
"3027" : "毘",
"3029" : "毛",
"3030" : "毡",
"3031" : "毧",
"3032" : "毫",
"3033" : "毬",
"3034" : "毯",
"3035" : "毳",
"3036" : "氂",
"3037" : "氅",
"3038" : "毸",
"3039" : "毹",
"3040" : "氄",
"3041" : "氈",
"3042" : "氍",
"3043" : "毜",
"3044" : "氏",
"3045" : "氐",
"3046" : "民",
"3047" : "氓",
"3048" : "氯",
"3049" : "气",
"3050" : "氛",
"3051" : "氣",
"3052" : "氤",
"3053" : "氲",
"3054" : "浠",
"3055" : "水",
"3056" : "氷",
"3057" : "永",
"3058" : "氾",
"3059" : "汁",
"3060" : "汀",
"3061" : "求",
"3062" : "汎",
"3063" : "汗",
"3064" : "汚",
"3065" : "汛",
"3066" : "汜",
"3067" : "汝",
"3068" : "江",
"3069" : "池",
"3071" : "汐",
"3072" : "汔",
"3073" : "汕",
"3074" : "汞",
"3075" : "汨",
"3076" : "汪",
"3077" : "汰",
"3078" : "汲",
"3079" : "汴",
"3080" : "汶",
"3081" : "汹",
"3082" : "決",
"3083" : "汾",
"3084" : "沁",
"3085" : "沂",
"3086" : "汽",
"3087" : "沃",
"3088" : "沈",
"3089" : "沉",
"3090" : "沌",
"3091" : "沍",
"3092" : "沐",
"3093" : "沒",
"3094" : "沔",
"3095" : "沖",
"3096" : "沗",
"3097" : "沙",
"3098" : "沚",
"3099" : "沛",
"3100" : "沆",
"3101" : "沓",
"3102" : "汩",
"3103" : "汭",
"3104" : "沅",
"3105" : "沬",
"3106" : "沫",
"3107" : "沮",
"3108" : "沱",
"3109" : "河",
"3110" : "沸",
"3111" : "油",
"3112" : "治",
"3113" : "沼",
"3114" : "沽",
"3115" : "沾",
"3116" : "沿",
"3117" : "洺",
"3118" : "泄",
"3119" : "泵",
"3120" : "泅",
"3121" : "泔",
"3122" : "泆",
"3123" : "泉",
"3124" : "泊",
"3125" : "泌",
"3126" : "泓",
"3127" : "法",
"3128" : "泗",
"3129" : "洩",
"3130" : "泙",
"3131" : "泛",
"3132" : "泠",
"3133" : "泡",
"3134" : "波",
"3135" : "泣",
"3136" : "泥",
"3137" : "注",
"3138" : "泫",
"3139" : "泯",
"3140" : "泮",
"3141" : "泰",
"3142" : "泱",
"3143" : "泲",
"3144" : "泳",
"3145" : "沭",
"3146" : "沴",
"3147" : "泐",
"3148" : "泖",
"3149" : "泝",
"3150" : "洄",
"3151" : "洊",
"3152" : "洋",
"3153" : "洌",
"3154" : "洎",
"3155" : "洒",
"3156" : "洗",
"3157" : "洛",
"3158" : "洟",
"3159" : "洞",
"3160" : "津",
"3161" : "洧",
"3162" : "汧",
"3163" : "洪",
"3164" : "洫",
"3165" : "洮",
"3166" : "洲",
"3167" : "洱",
"3168" : "洳",
"3169" : "洵",
"3170" : "洶",
"3171" : "洸",
"3172" : "活",
"3173" : "洼",
"3174" : "洽",
"3175" : "派",
"3176" : "洿",
"3177" : "流",
"3178" : "洙",
"3179" : "洚",
"3180" : "洹",
"3181" : "浙",
"3182" : "浚",
"3183" : "浣",
"3184" : "浦",
"3185" : "浩",
"3186" : "浪",
"3187" : "浮",
"3188" : "浴",
"3189" : "海",
"3190" : "浸",
"3191" : "浹",
"3192" : "浬",
"3193" : "涇",
"3194" : "消",
"3195" : "涉",
"3196" : "淳",
"3197" : "涓",
"3198" : "涔",
"3199" : "涕",
"3200" : "淶",
"3201" : "涘",
"3202" : "浡",
"3203" : "浜",
"3204" : "浥",
"3205" : "涂",
"3206" : "湼",
"3207" : "湟",
"3208" : "涑",
"3209" : "涯",
"3210" : "液",
"3211" : "涵",
"3212" : "涸",
"3213" : "涼",
"3214" : "涿",
"3215" : "淅",
"3216" : "淆",
"3217" : "淇",
"3218" : "淋",
"3219" : "淑",
"3220" : "淵",
"3221" : "淘",
"3222" : "淙",
"3223" : "淚",
"3224" : "淝",
"3225" : "淡",
"3226" : "淤",
"3227" : "淦",
"3228" : "淨",
"3229" : "淪",
"3230" : "淫",
"3231" : "淬",
"3232" : "淮",
"3233" : "淰",
"3234" : "深",
"3235" : "渮",
"3236" : "混",
"3237" : "淸",
"3238" : "淹",
"3239" : "淺",
"3240" : "添",
"3241" : "涎",
"3242" : "涪",
"3243" : "涴",
"3244" : "淀",
"3245" : "淄",
"3246" : "淒",
"3247" : "淞",
"3248" : "汋",
"3249" : "淩",
"3250" : "滧",
"3251" : "渙",
"3252" : "渚",
"3253" : "減",
"3254" : "渝",
"3255" : "渠",
"3256" : "渡",
"3257" : "渣",
"3258" : "渤",
"3259" : "渥",
"3260" : "渦",
"3261" : "測",
"3262" : "渭",
"3263" : "港",
"3264" : "渰",
"3265" : "渴",
"3266" : "游",
"3267" : "渺",
"3268" : "渾",
"3269" : "湃",
"3270" : "湄",
"3271" : "湅",
"3272" : "湊",
"3273" : "湍",
"3274" : "湎",
"3275" : "湖",
"3276" : "湘",
"3277" : "湛",
"3278" : "湝",
"3279" : "湧",
"3280" : "湫",
"3281" : "湮",
"3282" : "湯",
"3283" : "湲",
"3284" : "湱",
"3285" : "濉",
"3286" : "㶍",
"3287" : "灕",
"3288" : "湓",
"3289" : "湔",
"3290" : "湜",
"3291" : "湏",
"3292" : "㶞",
"3293" : "源",
"3294" : "準",
"3295" : "溛",
"3296" : "溜",
"3297" : "溝",
"3298" : "溟",
"3299" : "溠",
"3300" : "溢",
"3301" : "溤",
"3302" : "溥",
"3303" : "溧",
"3304" : "汍",
"3305" : "溪",
"3306" : "温",
"3307" : "溯",
"3308" : "溱",
"3309" : "溲",
"3310" : "溶",
"3311" : "溷",
"3312" : "溺",
"3313" : "溼",
"3314" : "溽",
"3315" : "滁",
"3316" : "滂",
"3317" : "滃",
"3318" : "滄",
"3319" : "滅",
"3320" : "滋",
"3321" : "滌",
"3322" : "滎",
"3323" : "滑",
"3324" : "滓",
"3325" : "滔",
"3326" : "滕",
"3327" : "泩",
"3328" : "溘",
"3329" : "滇",
"3330" : "滘",
"3331" : "滫",
"3332" : "滮",
"3333" : "滯",
"3334" : "滲",
"3335" : "澝",
"3336" : "滴",
"3337" : "滬",
"3338" : "滸",
"3339" : "洑",
"3340" : "滾",
"3341" : "滿",
"3342" : "漁",
"3343" : "漂",
"3344" : "漆",
"3345" : "漏",
"3346" : "漑",
"3347" : "漓",
"3348" : "演",
"3349" : "漘",
"3350" : "漙",
"3351" : "漠",
"3352" : "漢",
"3353" : "漣",
"3354" : "漪",
"3355" : "漫",
"3356" : "漬",
"3357" : "漭",
"3358" : "淌",
"3359" : "漱",
"3360" : "漲",
"3361" : "漳",
"3362" : "漸",
"3363" : "漾",
"3364" : "漿",
"3365" : "滊",
"3366" : "滷",
"3367" : "滹",
"3368" : "漈",
"3369" : "漉",
"3370" : "溎",
"3371" : "漚",
"3372" : "漦",
"3373" : "漩",
"3374" : "漯",
"3375" : "漵",
"3376" : "漶",
"3377" : "漊",
"3378" : "漕",
"3379" : "潁",
"3380" : "潑",
"3381" : "潔",
"3382" : "潘",
"3383" : "潛",
"3384" : "潟",
"3385" : "潢",
"3386" : "澗",
"3387" : "潤",
"3388" : "潦",
"3389" : "潭",
"3390" : "潮",
"3391" : "潰",
"3392" : "潼",
"3393" : "潴",
"3394" : "澘",
"3395" : "潺",
"3396" : "澀",
"3397" : "澄",
"3398" : "澆",
"3399" : "澇",
"3400" : "澈",
"3401" : "澔",
"3402" : "澌",
"3403" : "澎",
"3404" : "潏",
"3405" : "潝",
"3406" : "潞",
"3407" : "潠",
"3408" : "潀",
"3409" : "濆",
"3410" : "潯",
"3411" : "潾",
"3412" : "澍",
"3413" : "澂",
"3414" : "澒",
"3415" : "溈",
"3416" : "澡",
"3417" : "澟",
"3418" : "澣",
"3419" : "澤",
"3420" : "澮",
"3421" : "澳",
"3422" : "澹",
"3423" : "激",
"3424" : "濁",
"3425" : "濂",
"3426" : "濃",
"3427" : "澠",
"3428" : "澥",
"3429" : "澦",
"3430" : "澧",
"3431" : "澨",
"3432" : "澰",
"3433" : "澴",
"3434" : "澱",
"3435" : "濇",
"3436" : "澶",
"3437" : "澼",
"3438" : "濘",
"3439" : "澬",
"3440" : "濕",
"3441" : "濈",
"3442" : "濊",
"3443" : "濛",
"3444" : "濟",
"3445" : "濠",
"3446" : "濡",
"3447" : "濤",
"3448" : "濫",
"3449" : "濬",
"3450" : "濮",
"3451" : "濯",
"3452" : "濰",
"3453" : "濱",
"3454" : "瀉",
"3455" : "濩",
"3456" : "濞",
"3457" : "濺",
"3458" : "濼",
"3459" : "濾",
"3460" : "瀆",
"3461" : "瀏",
"3462" : "瀑",
"3463" : "瀁",
"3464" : "瀕",
"3465" : "灠",
"3466" : "瀚",
"3467" : "瀛",
"3468" : "瀝",
"3469" : "瀟",
"3470" : "瀠",
"3471" : "瀨",
"3472" : "瀘",
"3473" : "瀡",
"3474" : "瀣",
"3475" : "瀼",
"3476" : "瀋",
"3477" : "瀍",
"3478" : "瀧",
"3479" : "瀦",
"3480" : "濳",
"3481" : "瀲",
"3482" : "瀾",
"3483" : "瀰",
"3484" : "濚",
"3485" : "瀹",
"3486" : "瀺",
"3487" : "灌",
"3488" : "灃",
"3489" : "灉",
"3490" : "灄",
"3491" : "灑",
"3492" : "灘",
"3493" : "灝",
"3494" : "灣",
"3495" : "灩",
"3496" : "灞",
"3497" : "灤",
"3498" : "炸",
"3499" : "火",
"3500" : "灰",
"3501" : "灶",
"3502" : "灸",
"3503" : "灿",
"3504" : "灼",
"3505" : "災",
"3506" : "灾",
"3507" : "炊",
"3508" : "炎",
"3509" : "炒",
"3510" : "炕",
"3511" : "炙",
"3512" : "炘",
"3513" : "炞",
"3514" : "炫",
"3515" : "炬",
"3516" : "炭",
"3517" : "炮",
"3518" : "炯",
"3519" : "炰",
"3520" : "炱",
"3521" : "炳",
"3522" : "炷",
"3523" : "炧",
"3524" : "畑",
"3525" : "烈",
"3526" : "烋",
"3527" : "烏",
"3529" : "烙",
"3530" : "烘",
"3531" : "烜",
"3532" : "烝",
"3533" : "烟",
"3534" : "烹",
"3535" : "烺",
"3536" : "烽",
"3537" : "焌",
"3538" : "焙",
"3539" : "焚",
"3540" : "焜",
"3541" : "無",
"3542" : "焦",
"3543" : "焰",
"3544" : "然",
"3545" : "焞",
"3546" : "焠",
"3547" : "焉",
"3548" : "煅",
"3549" : "焊",
"3550" : "煉",
"3551" : "煊",
"3552" : "煌",
"3553" : "煎",
"3554" : "煑",
"3555" : "煒",
"3556" : "熙",
"3557" : "煖",
"3558" : "煜",
"3559" : "煞",
"3561" : "煤",
"3562" : "煥",
"3563" : "煦",
"3564" : "照",
"3565" : "煩",
"3566" : "煨",
"3567" : "煏",
"3568" : "煬",
"3569" : "煽",
"3570" : "熀",
"3571" : "熄",
"3572" : "煴",
"3573" : "熇",
"3574" : "熊",
"3575" : "熏",
"3576" : "熒",
"3577" : "熛",
"3578" : "熟",
"3579" : "熔",
"3580" : "熨",
"3581" : "熬",
"3582" : "熯",
"3583" : "熱",
"3584" : "熠",
"3585" : "熲",
"3586" : "熸",
"3587" : "熺",
"3588" : "熹",
"3589" : "熾",
"3590" : "燀",
"3591" : "煙",
"3592" : "燐",
"3593" : "燖",
"3594" : "燙",
"3595" : "燃",
"3596" : "燄",
"3597" : "燈",
"3598" : "燎",
"3599" : "燒",
"3600" : "燔",
"3601" : "燕",
"3602" : "營",
"3603" : "燠",
"3604" : "燥",
"3605" : "燦",
"3606" : "燧",
"3607" : "燬",
"3608" : "燭",
"3609" : "燻",
"3610" : "燮",
"3611" : "燹",
"3612" : "燼",
"3613" : "燿",
"3614" : "燾",
"3615" : "爆",
"3616" : "爇",
"3617" : "爍",
"3618" : "爓",
"3619" : "爐",
"3620" : "爛",
"3621" : "爚",
"3622" : "爝",
"3623" : "爟",
"3624" : "焮",
"3625" : "燉",
"3626" : "燜",
"3627" : "爨",
"3628" : "烤",
"3629" : "爪",
"3630" : "爭",
"3631" : "爮",
"3632" : "爬",
"3633" : "爰",
"3634" : "爲",
"3635" : "爵",
"3636" : "瞼",
"3637" : "父",
"3638" : "爹",
"3639" : "爺",
"3640" : "爸",
"3641" : "爻",
"3642" : "爽",
"3643" : "爾",
"3644" : "趼",
"3645" : "爿",
"3646" : "牀",
"3647" : "牂",
"3648" : "牁",
"3649" : "牆",
"3650" : "藠",
"3651" : "片",
"3652" : "版",
"3653" : "牋",
"3654" : "牌",
"3655" : "牒",
"3656" : "牕",
"3657" : "牗",
"3658" : "牘",
"3659" : "牓",
"3660" : "牙",
"3661" : "肼",
"3662" : "牛",
"3663" : "牝",
"3664" : "牟",
"3665" : "牡",
"3666" : "牢",
"3667" : "牣",
"3668" : "牧",
"3669" : "牴",
"3670" : "物",
"3671" : "牠",
"3672" : "牯",
"3673" : "牲",
"3674" : "犋",
"3675" : "牷",
"3676" : "特",
"3677" : "牽",
"3678" : "牿",
"3679" : "犀",
"3680" : "犂",
"3681" : "犉",
"3682" : "犍",
"3683" : "犒",
"3684" : "犖",
"3685" : "犢",
"3686" : "犧",
"3687" : "犨",
"3688" : "牳",
"3689" : "犬",
"3690" : "犯",
"3691" : "犴",
"3692" : "狀",
"3693" : "狂",
"3694" : "狃",
"3695" : "狄",
"3696" : "狁",
"3697" : "狎",
"3698" : "狐",
"3699" : "狗",
"3700" : "狙",
"3701" : "狡",
"3702" : "狥",
"3703" : "狠",
"3704" : "狩",
"3705" : "狴",
"3706" : "狸",
"3707" : "狹",
"3708" : "狼",
"3709" : "狽",
"3710" : "狻",
"3711" : "狺",
"3712" : "狷",
"3713" : "狢",
"3714" : "猁",
"3715" : "猖",
"3716" : "猗",
"3717" : "猙",
"3718" : "猛",
"3719" : "猜",
"3720" : "猝",
"3721" : "猞",
"3723" : "猘",
"3724" : "猢",
"3725" : "猥",
"3726" : "猩",
"3727" : "猪",
"3728" : "猫",
"3729" : "猴",
"3730" : "猶",
"3731" : "猷",
"3732" : "猔",
"3733" : "猱",
"3734" : "猺",
"3735" : "猻",
"3736" : "猾",
"3737" : "猿",
"3738" : "獃",
"3739" : "獄",
"3740" : "獅",
"3741" : "獍",
"3742" : "獐",
"3743" : "獒",
"3744" : "獗",
"3745" : "獘",
"3746" : "獧",
"3747" : "獨",
"3748" : "獪",
"3749" : "獬",
"3750" : "獠",
"3751" : "獮",
"3752" : "獲",
"3753" : "獯",
"3754" : "獳",
"3755" : "獷",
"3756" : "獵",
"3757" : "獸",
"3758" : "獺",
"3759" : "獻",
"3760" : "玁",
"3761" : "獰",
"3762" : "玀",
"3763" : "玄",
"3764" : "率",
"3765" : "玅",
"3766" : "玈",
"3767" : "鋦",
"3768" : "玉",
"3769" : "王",
"3770" : "玎",
"3771" : "玕",
"3772" : "玔",
"3773" : "玖",
"3774" : "玟",
"3775" : "玠",
"3776" : "玢",
"3777" : "玦",
"3778" : "珏",
"3779" : "玩",
"3780" : "玫",
"3781" : "玲",
"3782" : "玳",
"3783" : "玷",
"3784" : "珂",
"3785" : "珇",
"3786" : "珈",
"3787" : "珉",
"3788" : "玻",
"3789" : "珀",
"3790" : "珊",
"3791" : "珍",
"3792" : "珌",
"3793" : "玼",
"3794" : "珞",
"3795" : "珓",
"3796" : "珠",
"3797" : "珙",
"3798" : "珖",
"3799" : "珥",
"3800" : "珣",
"3801" : "珩",
"3802" : "珪",
"3803" : "班",
"3804" : "珧",
"3805" : "珮",
"3806" : "珽",
"3807" : "現",
"3808" : "球",
"3809" : "琅",
"3810" : "理",
"3811" : "琇",
"3812" : "琉",
"3813" : "珶",
"3814" : "珷",
"3815" : "琊",
"3816" : "琕",
"3817" : "琖",
"3818" : "琚",
"3819" : "琛",
"3820" : "琢",
"3821" : "琤",
"3822" : "琥",
"3823" : "琦",
"3824" : "琨",
"3825" : "琪",
"3826" : "琭",
"3827" : "琮",
"3828" : "琯",
"3829" : "琳",
"3830" : "琴",
"3831" : "琶",
"3832" : "琵",
"3833" : "琫",
"3834" : "琬",
"3835" : "玤",
"3836" : "琲",
"3837" : "瑋",
"3838" : "瑕",
"3839" : "瑙",
"3840" : "瑚",
"3841" : "瑛",
"3842" : "瑜",
"3843" : "瑞",
"3844" : "瑟",
"3845" : "瑠",
"3846" : "瑀",
"3847" : "瑁",
"3848" : "瑇",
"3849" : "瑑",
"3850" : "瑗",
"3851" : "瑣",
"3852" : "瑤",
"3853" : "瑩",
"3854" : "瑪",
"3855" : "瑰",
"3856" : "瑲",
"3857" : "瑬",
"3858" : "瑯",
"3859" : "瑱",
"3860" : "瑳",
"3861" : "瑴",
"3862" : "璀",
"3863" : "璃",
"3864" : "璋",
"3865" : "瑽",
"3866" : "瑾",
"3867" : "璁",
"3868" : "璆",
"3869" : "𤨢",
"3870" : "璈",
"3871" : "璡",
"3872" : "璇",
"3873" : "璐",
"3874" : "璜",
"3875" : "璣",
"3876" : "璘",
"3877" : "璞",
"3878" : "璟",
"3879" : "璠",
"3880" : "璧",
"3881" : "璨",
"3882" : "璯",
"3883" : "環",
"3884" : "璪",
"3885" : "璫",
"3886" : "璽",
"3887" : "璲",
"3888" : "璸",
"3889" : "璵",
"3890" : "瓊",
"3891" : "瓏",
"3892" : "瓔",
"3893" : "瓛",
"3894" : "璿",
"3895" : "瓚",
"3896" : "瓈",
"3897" : "瓀",
"3898" : "瓘",
"3899" : "璥",
"3900" : "瓜",
"3901" : "瓞",
"3902" : "瓠",
"3903" : "瓢",
"3904" : "瓣",
"3905" : "瓤",
"3906" : "佧",
"3907" : "瓦",
"3908" : "瓮",
"3909" : "瓴",
"3910" : "瓶",
"3911" : "瓷",
"3912" : "瓻",
"3913" : "甃",
"3914" : "甄",
"3915" : "甇",
"3916" : "瓿",
"3917" : "甌",
"3918" : "甍",
"3919" : "甎",
"3920" : "甑",
"3921" : "甓",
"3922" : "甕",
"3923" : "甗",
"3924" : "甔",
"3925" : "甖",
"3926" : "瓩",
"3927" : "甘",
"3928" : "甚",
"3929" : "甜",
"3930" : "甞",
"3931" : "咔",
"3932" : "生",
"3933" : "甡",
"3934" : "產",
"3935" : "甥",
"3936" : "甦",
"3937" : "㽓",
"3938" : "用",
"3939" : "甪",
"3940" : "甫",
"3941" : "甬",
"3942" : "甯",
"3943" : "甩",
"3944" : "田",
"3945" : "由",
"3946" : "甲",
"3947" : "申",
"3948" : "男",
"3949" : "甸",
"3950" : "甽",
"3951" : "甾",
"3952" : "畀",
"3953" : "畋",
"3954" : "界",
"3955" : "畎",
"3956" : "畏",
"3957" : "町",
"3958" : "畊",
"3959" : "甿",
"3960" : "畇",
"3961" : "畔",
"3962" : "畚",
"3963" : "畛",
"3964" : "畜",
"3965" : "畝",
"3966" : "留",
"3967" : "畟",
"3968" : "畢",
"3969" : "畤",
"3970" : "略",
"3971" : "畦",
"3972" : "番",
"3973" : "畫",
"3974" : "畬",
"3975" : "畯",
"3976" : "異",
"3977" : "畮",
"3978" : "畷",
"3979" : "畹",
"3980" : "畽",
"3981" : "當",
"3982" : "畸",
"3983" : "畿",
"3984" : "疆",
"3985" : "疇",
"3986" : "疊",
"3987" : "鐦",
"3988" : "疋",
"3989" : "疎",
"3990" : "疏",
"3991" : "疐",
"3992" : "疑",
"3993" : "鈧",
"3994" : "疒",
"3995" : "疔",
"3996" : "痃",
"3997" : "痙",
"3998" : "疚",
"3999" : "疝",
"4000" : "痠",
"4001" : "疣",
"4002" : "疤",
"4003" : "疥",
"4004" : "疫",
"4005" : "痚",
"4006" : "疲",
"4007" : "疳",
"4008" : "疴",
"4009" : "疵",
"4010" : "疸",
"4011" : "疹",
"4012" : "疼",
"4013" : "疽",
"4014" : "疾",
"4015" : "疿",
"4016" : "病",
"4017" : "症",
"4018" : "痂",
"4019" : "痊",
"4020" : "痌",
"4021" : "痍",
"4022" : "痒",
"4023" : "痔",
"4024" : "痕",
"4025" : "痧",
"4026" : "痘",
"4027" : "痛",
"4028" : "痞",
"4029" : "痣",
"4030" : "痡",
"4031" : "痢",
"4032" : "痱",
"4033" : "痰",
"4034" : "痲",
"4035" : "痴",
"4036" : "痺",
"4037" : "痼",
"4038" : "痾",
"4039" : "痿",
"4040" : "瘀",
"4041" : "瘁",
"4042" : "瘂",
"4043" : "瘇",
"4044" : "瘉",
"4045" : "瘋",
"4046" : "瘍",
"4047" : "瘏",
"4048" : "瘝",
"4049" : "瘐",
"4050" : "瘓",
"4051" : "瘕",
"4052" : "瘖",
"4053" : "瘞",
"4054" : "瘟",
"4055" : "瘠",
"4056" : "瘡",
"4057" : "瘢",
"4058" : "瘤",
"4059" : "瘥",
"4060" : "瘦",
"4061" : "瘧",
"4062" : "痵",
"4063" : "瘸",
"4064" : "瘰",
"4065" : "瘳",
"4066" : "瘴",
"4067" : "瘵",
"4068" : "瘻",
"4069" : "瘼",
"4070" : "療",
"4071" : "癃",
"4072" : "癆",
"4073" : "癇",
"4074" : "癌",
"4075" : "癖",
"4076" : "瘺",
"4077" : "癑",
"4078" : "癘",
"4079" : "𤺥",
"4080" : "癜",
"4081" : "癤",
"4082" : "癡",
"4083" : "癢",
"4084" : "癥",
"4085" : "㿜",
"4086" : "癭",
"4087" : "癧",
"4088" : "癩",
"4089" : "癬",
"4090" : "癮",
"4091" : "癯",
"4092" : "癰",
"4093" : "癱",
"4094" : "癲",
"4095" : "疙",
"4096" : "癶",
"4097" : "癸",
"4098" : "登",
"4099" : "發",
"4100" : "鈳",
"4101" : "白",
"4102" : "百",
"4103" : "皂",
"4104" : "的",
"4105" : "皆",
"4106" : "皇",
"4107" : "皈",
"4108" : "皐",
"4109" : "皎",
"4110" : "皓",
"4111" : "皖",
"4112" : "皙",
"4113" : "皜",
"4114" : "皚",
"4115" : "皤",
"4117" : "皦",
"4118" : "皭",
"4119" : "皪",
"4120" : "皫",
"4121" : "氪",
"4122" : "皮",
"4123" : "皴",
"4124" : "皷",
"4125" : "皸",
"4126" : "皺",
"4127" : "皽",
"4128" : "醌",
"4129" : "皿",
"4130" : "盂",
"4131" : "盃",
"4132" : "盅",
"4133" : "盆",
"4134" : "盈",
"4135" : "益",
"4136" : "盌",
"4137" : "盍",
"4138" : "盎",
"4139" : "盒",
"4140" : "盔",
"4141" : "盛",
"4142" : "盜",
"4143" : "盝",
"4144" : "盞",
"4145" : "盟",
"4146" : "葢",
"4147" : "盡",
"4148" : "監",
"4149" : "盤",
"4150" : "盥",
"4151" : "盧",
"4152" : "盦",
"4153" : "盭",
"4154" : "盩",
"4155" : "盪",
"4156" : "盬",
"4157" : "蛞",
"4158" : "目",
"4159" : "盲",
"4160" : "直",
"4161" : "相",
"4162" : "盼",
"4163" : "盾",
"4164" : "省",
"4165" : "眄",
"4166" : "眇",
"4167" : "眈",
"4168" : "眉",
"4169" : "盯",
"4170" : "看",
"4171" : "盻",
"4172" : "眨",
"4173" : "盱",
"4174" : "睬",
"4175" : "眛",
"4176" : "真",
"4177" : "眠",
"4178" : "瞄",
"4179" : "眥",
"4180" : "眦",
"4181" : "眩",
"4182" : "眙",
"4183" : "眯",
"4184" : "眵",
"4185" : "瞇",
"4186" : "眶",
"4187" : "眷",
"4188" : "眸",
"4189" : "眺",
"4190" : "眼",
"4191" : "眾",
"4192" : "着",
"4193" : "眹",
"4194" : "睨",
"4195" : "睇",
"4196" : "睆",
"4197" : "瞅",
"4198" : "睍",
"4199" : "睚",
"4200" : "睛",
"4201" : "睜",
"4202" : "睞",
"4203" : "睪",
"4204" : "睡",
"4205" : "睢",
"4206" : "督",
"4207" : "睦",
"4208" : "睫",
"4209" : "瞌",
"4210" : "睟",
"4211" : "睥",
"4212" : "睹",
"4213" : "睿",
"4214" : "瞀",
"4215" : "睘",
"4216" : "睯",
"4217" : "瞋",
"4218" : "瞍",
"4219" : "瞎",
"4220" : "瞑",
"4221" : "瞞",
"4222" : "瞠",
"4223" : "瞪",
"4224" : "瞥",
"4225" : "瞧",
"4226" : "瞬",
"4227" : "瞳",
"4228" : "瞯",
"4229" : "瞭",
"4230" : "瞰",
"4231" : "瞶",
"4232" : "瞻",
"4233" : "瞽",
"4234" : "瞿",
"4235" : "矇",
"4236" : "矍",
"4237" : "矓",
"4238" : "矗",
"4239" : "矙",
"4240" : "瞢",
"4241" : "矚",
"4242" : "眭",
"4243" : "矛",
"4244" : "矜",
"4245" : "矞",
"4246" : "砬",
"4247" : "矢",
"4248" : "矣",
"4249" : "知",
"4250" : "矧",
"4251" : "矩",
"4252" : "短",
"4253" : "矮",
"4254" : "矰",
"4255" : "矯",
"4256" : "矱",
"4257" : "鑞",
"4258" : "石",
"4259" : "矴",
"4260" : "矼",
"4261" : "砆",
"4262" : "矻",
"4263" : "砂",
"4264" : "砉",
"4265" : "砌",
"4266" : "砍",
"4267" : "砑",
"4268" : "砒",
"4269" : "砭",
"4270" : "砟",
"4271" : "砸",
"4272" : "砥",
"4273" : "斫",
"4274" : "砦",
"4275" : "破",
"4276" : "砲",
"4278" : "砧",
"4279" : "砮",
"4280" : "砰",
"4281" : "硃",
"4282" : "研",
"4283" : "硎",
"4284" : "硜",
"4285" : "硝",
"4286" : "硤",
"4287" : "硨",
"4288" : "硫",
"4289" : "硬",
"4290" : "碘",
"4291" : "硯",
"4292" : "确",
"4293" : "碍",
"4294" : "碌",
"4295" : "碎",
"4296" : "硼",
"4297" : "碗",
"4298" : "碁",
"4299" : "碇",
"4300" : "碔",
"4301" : "碑",
"4302" : "碓",
"4303" : "硾",
"4304" : "碡",
"4305" : "碪",
"4306" : "碉",
"4307" : "碭",
"4308" : "碟",
"4309" : "碣",
"4310" : "碧",
"4311" : "碩",
"4312" : "碬",
"4313" : "碯",
"4314" : "碰",
"4315" : "確",
"4316" : "碼",
"4317" : "碾",
"4318" : "磁",
"4319" : "磅",
"4320" : "磊",
"4321" : "磇",
"4322" : "磋",
"4323" : "磐",
"4324" : "磓",
"4325" : "磔",
"4326" : "磕",
"4327" : "磉",
"4328" : "磑",
"4329" : "碴",
"4330" : "磠",
"4331" : "磚",
"4332" : "磧",
"4333" : "磨",
"4334" : "磬",
"4335" : "磯",
"4336" : "磲",
"4337" : "磺",
"4338" : "磽",
"4339" : "礁",
"4340" : "磷",
"4341" : "磻",
"4342" : "礎",
"4343" : "磈",
"4344" : "礙",
"4345" : "礬",
"4346" : "礧",
"4347" : "磴",
"4348" : "礮",
"4349" : "礦",
"4350" : "礪",
"4351" : "礫",
"4352" : "礱",
"4353" : "礴",
"4354" : "碱",
"4355" : "示",
"4356" : "礽",
"4357" : "社",
"4358" : "祀",
"4359" : "祁",
"4360" : "祅",
"4361" : "祇",
"4362" : "祈",
"4363" : "祉",
"4364" : "礿",
"4365" : "祕",
"4366" : "祊",
"4367" : "祏",
"4368" : "祐",
"4369" : "祓",
"4370" : "祔",
"4371" : "祖",
"4372" : "祗",
"4373" : "祚",
"4374" : "祛",
"4375" : "祜",
"4376" : "祝",
"4377" : "神",
"4378" : "祟",
"4379" : "祠",
"4380" : "祫",
"4381" : "祲",
"4382" : "祥",
"4383" : "祧",
"4384" : "票",
"4385" : "祭",
"4386" : "禆",
"4387" : "祼",
"4388" : "祺",
"4389" : "祿",
"4390" : "禀",
"4391" : "禁",
"4392" : "禋",
"4393" : "禍",
"4394" : "禎",
"4395" : "福",
"4396" : "禘",
"4397" : "禊",
"4398" : "禔",
"4399" : "禖",
"4400" : "禕",
"4401" : "禡",
"4402" : "禝",
"4403" : "禦",
"4404" : "禠",
"4405" : "禫",
"4406" : "禧",
"4407" : "禪",
"4408" : "禨",
"4409" : "禮",
"4410" : "禰",
"4411" : "禱",
"4412" : "禳",
"4414" : "錸",
"4415" : "禸",
"4416" : "禹",
"4417" : "禺",
"4418" : "离",
"4419" : "禽",
"4420" : "鑭",
"4421" : "禾",
"4422" : "禿",
"4423" : "秀",
"4424" : "私",
"4425" : "秈",
"4426" : "秉",
"4427" : "秆",
"4428" : "秋",
"4429" : "种",
"4430" : "科",
"4431" : "秕",
"4432" : "秒",
"4433" : "秔",
"4434" : "秘",
"4435" : "秪",
"4436" : "租",
"4437" : "秠",
"4438" : "秣",
"4439" : "秤",
"4440" : "秦",
"4441" : "秧",
"4442" : "秩",
"4443" : "秫",
"4444" : "秭",
"4445" : "秬",
"4446" : "秷",
"4447" : "秸",
"4448" : "移",
"4449" : "稀",
"4450" : "稂",
"4451" : "稅",
"4452" : "稈",
"4453" : "程",
"4454" : "稌",
"4455" : "稍",
"4456" : "稊",
"4457" : "稔",
"4458" : "稗",
"4459" : "稞",
"4460" : "稚",
"4461" : "稛",
"4462" : "稜",
"4463" : "稟",
"4464" : "稠",
"4465" : "稭",
"4466" : "稹",
"4467" : "種",
"4468" : "稱",
"4469" : "稷",
"4470" : "稻",
"4471" : "稼",
"4472" : "稽",
"4473" : "稿",
"4474" : "穀",
"4475" : "穄",
"4476" : "穆",
"4477" : "穉",
"4478" : "穋",
"4479" : "穌",
"4480" : "積",
"4481" : "穎",
"4482" : "穗",
"4483" : "穜",
"4484" : "穡",
"4485" : "穟",
"4486" : "穢",
"4487" : "穠",
"4488" : "穨",
"4489" : "穩",
"4490" : "穫",
"4491" : "穭",
"4492" : "穰",
"4493" : "罱",
"4494" : "穴",
"4495" : "穵",
"4496" : "究",
"4497" : "穸",
"4498" : "穹",
"4499" : "突",
"4500" : "空",
"4501" : "穽",
"4502" : "穿",
"4503" : "窀",
"4504" : "窄",
"4505" : "窅",
"4506" : "窆",
"4507" : "窈",
"4508" : "窋",
"4509" : "窌",
"4510" : "窒",
"4511" : "窕",
"4512" : "窖",
"4513" : "窞",
"4514" : "窗",
"4515" : "窘",
"4516" : "窟",
"4517" : "窠",
"4518" : "窨",
"4519" : "窩",
"4520" : "窪",
"4521" : "窬",
"4522" : "窮",
"4523" : "窰",
"4524" : "窳",
"4525" : "窵",
"4526" : "窶",
"4527" : "窸",
"4528" : "窣",
"4529" : "窺",
"4530" : "窾",
"4531" : "竂",
"4532" : "竁",
"4533" : "竄",
"4534" : "竅",
"4535" : "竇",
"4536" : "竈",
"4537" : "竊",
"4538" : "蒗",
"4539" : "立",
"4540" : "竑",
"4541" : "站",
"4542" : "竚",
"4543" : "竝",
"4544" : "竟",
"4545" : "章",
"4546" : "竣",
"4547" : "童",
"4548" : "竦",
"4549" : "竪",
"4550" : "竭",
"4551" : "端",
"4552" : "競",
"4553" : "銠",
"4554" : "竹",
"4555" : "竺",
"4556" : "竽",
"4557" : "竿",
"4558" : "笄",
"4559" : "笈",
"4560" : "笊",
"4561" : "笏",
"4562" : "笑",
"4563" : "笙",
"4564" : "笛",
"4565" : "笞",
"4566" : "笤",
"4567" : "笠",
"4568" : "笥",
"4569" : "符",
"4570" : "笨",
"4571" : "笋",
"4572" : "笪",
"4573" : "笫",
"4574" : "第",
"4575" : "笮",
"4576" : "笆",
"4577" : "笎",
"4578" : "笱",
"4579" : "笳",
"4580" : "筅",
"4581" : "筆",
"4582" : "笻",
"4583" : "等",
"4584" : "筊",
"4585" : "筋",
"4586" : "筌",
"4587" : "筍",
"4588" : "筎",
"4589" : "筏",
"4590" : "筐",
"4591" : "筑",
"4592" : "筒",
"4593" : "筓",
"4594" : "答",
"4595" : "策",
"4596" : "筠",
"4597" : "筤",
"4598" : "筥",
"4599" : "筷",
"4600" : "筧",
"4601" : "筩",
"4602" : "筮",
"4603" : "筲",
"4604" : "筴",
"4605" : "筵",
"4606" : "筯",
"4607" : "筱",
"4608" : "箋",
"4609" : "箎",
"4610" : "箂",
"4611" : "箍",
"4612" : "箇",
"4613" : "箔",
"4614" : "箕",
"4615" : "算",
"4616" : "箛",
"4617" : "箝",
"4618" : "箠",
"4619" : "管",
"4620" : "箏",
"4621" : "箐",
"4622" : "箒",
"4623" : "箑",
"4624" : "箘",
"4625" : "箜",
"4626" : "箊",
"4627" : "箬",
"4628" : "箭",
"4629" : "箯",
"4630" : "箱",
"4631" : "箴",
"4632" : "箸",
"4633" : "箾",
"4634" : "節",
"4635" : "篁",
"4636" : "範",
"4637" : "篆",
"4638" : "篇",
"4639" : "築",
"4640" : "篋",
"4641" : "篘",
"4642" : "篔",
"4643" : "篙",
"4644" : "篚",
"4645" : "篝",
"4646" : "篠",
"4647" : "篡",
"4648" : "篤",
"4649" : "簑",
"4650" : "篧",
"4651" : "篨",
"4652" : "篩",
"4653" : "篦",
"4654" : "篪",
"4655" : "篲",
"4656" : "篳",
"4657" : "篺",
"4658" : "篴",
"4659" : "篷",
"4660" : "簀",
"4661" : "簆",
"4662" : "簇",
"4663" : "簋",
"4664" : "簍",
"4665" : "簌",
"4666" : "簏",
"4667" : "篌",
"4668" : "篾",
"4669" : "簃",
"4670" : "簚",
"4671" : "簜",
"4672" : "簟",
"4673" : "簞",
"4674" : "簠",
"4675" : "簡",
"4676" : "簣",
"4677" : "簥",
"4678" : "簦",
"4679" : "簧",
"4680" : "簨",
"4681" : "簪",
"4682" : "簫",
"4683" : "簷",
"4684" : "簸",
"4685" : "簵",
"4686" : "簻",
"4687" : "簽",
"4688" : "簾",
"4689" : "簿",
"4690" : "𥳁",
"4691" : "籃",
"4692" : "籊",
"4693" : "籌",
"4694" : "籍",
"4695" : "籄",
"4696" : "籐",
"4697" : "籔",
"4698" : "籓",
"4699" : "籀",
"4700" : "籙",
"4701" : "籚",
"4702" : "籛",
"4703" : "籜",
"4704" : "籟",
"4705" : "籠",
"4706" : "籤",
"4707" : "籥",
"4708" : "籨",
"4709" : "籧",
"4710" : "籩",
"4711" : "籫",
"4712" : "籮",
"4713" : "籬",
"4714" : "籯",
"4715" : "籲",
"4716" : "篰",
"4717" : "米",
"4718" : "粃",
"4719" : "籹",
"4720" : "粉",
"4721" : "粒",
"4722" : "粕",
"4723" : "粗",
"4724" : "粘",
"4725" : "粟",
"4726" : "粢",
"4727" : "粵",
"4728" : "粥",
"4729" : "籼",
"4730" : "粧",
"4731" : "粱",
"4732" : "粲",
"4733" : "粹",
"4734" : "粳",
"4735" : "粺",
"4736" : "粼",
"4737" : "精",
"4738" : "糈",
"4739" : "糊",
"4740" : "糉",
"4741" : "糕",
"4742" : "糇",
"4743" : "糖",
"4744" : "糗",
"4745" : "糜",
"4746" : "糝",
"4747" : "糞",
"4748" : "糟",
"4749" : "糠",
"4750" : "籽",
"4751" : "糙",
"4752" : "糧",
"4754" : "糯",
"4755" : "糲",
"4756" : "糴",
"4757" : "粑",
"4758" : "糵",
"4759" : "糶",
"4760" : "糎",
"4761" : "糸",
"4762" : "系",
"4763" : "糾",
"4764" : "紀",
"4765" : "紂",
"4766" : "約",
"4767" : "紅",
"4768" : "紆",
"4769" : "紇",
"4770" : "紈",
"4771" : "紉",
"4772" : "紊",
"4773" : "紋",
"4774" : "紵",
"4775" : "線",
"4776" : "紏",
"4777" : "紝",
"4778" : "紞",
"4779" : "紽",
"4780" : "納",
"4781" : "紐",
"4782" : "紓",
"4783" : "純",
"4784" : "紗",
"4785" : "紘",
"4786" : "紙",
"4787" : "級",
"4788" : "紛",
"4789" : "紜",
"4790" : "素",
"4791" : "紡",
"4792" : "索",
"4793" : "紫",
"4794" : "緶",
"4795" : "紬",
"4796" : "紮",
"4797" : "累",
"4798" : "細",
"4799" : "縮",
"4800" : "紳",
"4801" : "紹",
"4802" : "紺",
"4803" : "紼",
"4804" : "紾",
"4805" : "紿",
"4806" : "絀",
"4807" : "終",
"4808" : "絃",
"4809" : "組",
"4810" : "絆",
"4811" : "紱",
"4812" : "絅",
"4813" : "絏",
"4814" : "結",
"4815" : "絕",
"4816" : "絛",
"4817" : "絜",
"4818" : "絝",
"4819" : "絞",
"4820" : "絡",
"4821" : "絢",
"4822" : "給",
"4823" : "絨",
"4824" : "絪",
"4825" : "絮",
"4826" : "絰",
"4827" : "統",
"4828" : "絲",
"4829" : "絳",
"4830" : "絖",
"4831" : "絹",
"4832" : "絺",
"4833" : "絿",
"4834" : "綁",
"4835" : "綈",
"4836" : "綉",
"4837" : "綆",
"4838" : "綌",
"4839" : "綍",
"4840" : "綏",
"4841" : "綑",
"4842" : "經",
"4843" : "綃",
"4844" : "綜",
"4845" : "綠",
"4846" : "綢",
"4847" : "綦",
"4848" : "綫",
"4849" : "綬",
"4850" : "維",
"4851" : "綮",
"4852" : "綰",
"4853" : "網",
"4854" : "綱",
"4855" : "綳",
"4856" : "綴",
"4857" : "綵",
"4858" : "綸",
"4859" : "綹",
"4860" : "綺",
"4861" : "綻",
"4862" : "綽",
"4863" : "緅",
"4864" : "緌",
"4865" : "緎",
"4866" : "綾",
"4867" : "緇",
"4868" : "緊",
"4869" : "緋",
"4870" : "綣",
"4871" : "綯",
"4872" : "緒",
"4873" : "緘",
"4874" : "緝",
"4875" : "綿",
"4876" : "緞",
"4877" : "締",
"4878" : "緣",
"4879" : "緤",
"4880" : "緦",
"4881" : "緵",
"4882" : "編",
"4883" : "緩",
"4884" : "緬",
"4885" : "緯",
"4886" : "練",
"4887" : "緻",
"4888" : "縕",
"4889" : "緗",
"4890" : "繃",
"4891" : "緡",
"4892" : "緥",
"4893" : "緲",
"4894" : "繖",
"4895" : "緹",
"4896" : "縈",
"4897" : "縉",
"4898" : "縊",
"4899" : "縋",
"4900" : "縐",
"4901" : "縗",
"4902" : "縛",
"4903" : "縝",
"4904" : "縟",
"4905" : "縣",
"4906" : "縑",
"4907" : "繁",
"4908" : "縞",
"4909" : "縠",
"4910" : "縢",
"4911" : "縫",
"4912" : "縱",
"4913" : "縲",
"4914" : "縳",
"4915" : "縵",
"4916" : "縶",
"4917" : "縷",
"4918" : "縹",
"4919" : "縻",
"4920" : "總",
"4921" : "績",
"4922" : "繄",
"4923" : "繅",
"4924" : "繆",
"4925" : "繇",
"4926" : "縭",
"4927" : "縰",
"4928" : "縴",
"4929" : "繈",
"4930" : "織",
"4931" : "繕",
"4932" : "繙",
"4933" : "繚",
"4934" : "繐",
"4935" : "繞",
"4936" : "繢",
"4937" : "繡",
"4938" : "繒",
"4939" : "繩",
"4940" : "繪",
"4941" : "繫",
"4942" : "繭",
"4943" : "繮",
"4944" : "繯",
"4945" : "繳",
"4946" : "繹",
"4947" : "辮",
"4948" : "繻",
"4949" : "繼",
"4950" : "纁",
"4951" : "纂",
"4952" : "繽",
"4953" : "繾",
"4954" : "纆",
"4955" : "纇",
"4956" : "纈",
"4957" : "纘",
"4958" : "續",
"4959" : "纍",
"4960" : "纖",
"4961" : "纏",
"4962" : "纊",
"4963" : "纑",
"4964" : "纓",
"4965" : "纔",
"4966" : "纛",
"4967" : "纚",
"4968" : "纜",
"4969" : "縧",
"4970" : "缶",
"4971" : "缸",
"4972" : "缺",
"4973" : "缾",
"4974" : "罀",
"4975" : "罃",
"4976" : "罁",
"4977" : "罄",
"4978" : "罅",
"4979" : "罇",
"4980" : "罋",
"4981" : "罌",
"4982" : "罍",
"4983" : "罏",
"4984" : "罐",
"4985" : "罆",
"4986" : "网",
"4987" : "罔",
"4988" : "罕",
"4989" : "罘",
"4990" : "罛",
"4991" : "罝",
"4992" : "罟",
"4993" : "罡",
"4994" : "罣",
"4996" : "罩",
"4997" : "罪",
"4998" : "罭",
"4999" : "置",
"5000" : "罰",
"5001" : "罨",
"5002" : "署",
"5003" : "罳",
"5004" : "罫",
"5005" : "罶",
"5006" : "罵",
"5007" : "罷",
"5008" : "罹",
"5009" : "羃",
"5010" : "罽",
"5011" : "罿",
"5012" : "羅",
"5013" : "羆",
"5014" : "羇",
"5015" : "羈",
"5016" : "鰳",
"5017" : "羊",
"5018" : "羌",
"5019" : "美",
"5021" : "羔",
"5023" : "羜",
"5024" : "羚",
"5025" : "羝",
"5026" : "羞",
"5027" : "羢",
"5028" : "羣",
"5029" : "羨",
"5030" : "義",
"5031" : "羯",
"5032" : "羲",
"5033" : "羵",
"5034" : "羶",
"5035" : "羸",
"5036" : "羹",
"5037" : "羼",
"5038" : "羽",
"5039" : "翀",
"5040" : "翁",
"5041" : "翅",
"5042" : "翊",
"5043" : "翌",
"5044" : "翎",
"5045" : "習",
"5046" : "翔",
"5047" : "翕",
"5048" : "翛",
"5049" : "翟",
"5050" : "翠",
"5051" : "翡",
"5052" : "翣",
"5053" : "翥",
"5054" : "翦",
"5055" : "翩",
"5056" : "羿",
"5057" : "翬",
"5058" : "翮",
"5059" : "翯",
"5060" : "翰",
"5061" : "翳",
"5062" : "翹",
"5063" : "翱",
"5064" : "翻",
"5065" : "翼",
"5066" : "翽",
"5067" : "翾",
"5068" : "翿",
"5069" : "耀",
"5070" : "喱",
"5071" : "老",
"5072" : "考",
"5073" : "耄",
"5074" : "者",
"5075" : "耆",
"5076" : "耈",
"5077" : "耋",
"5078" : "佝",
"5079" : "而",
"5080" : "耍",
"5081" : "耎",
"5082" : "耐",
"5083" : "耑",
"5084" : "啢",
"5085" : "耒",
"5086" : "耔",
"5087" : "耕",
"5088" : "耗",
"5089" : "耘",
"5090" : "耙",
"5091" : "耜",
"5092" : "耝",
"5093" : "耞",
"5094" : "耡",
"5095" : "耩",
"5096" : "耦",
"5097" : "耨",
"5098" : "耬",
"5099" : "耰",
"5100" : "釕",
"5101" : "耳",
"5102" : "耶",
"5103" : "耻",
"5104" : "耽",
"5105" : "耿",
"5106" : "佡",
"5107" : "聆",
"5108" : "聊",
"5109" : "聒",
"5110" : "聖",
"5111" : "聘",
"5112" : "聚",
"5113" : "聞",
"5114" : "聯",
"5115" : "聰",
"5116" : "聲",
"5117" : "聳",
"5118" : "聵",
"5119" : "聶",
"5120" : "職",
"5121" : "聽",
"5122" : "聾",
"5123" : "啉",
"5124" : "聿",
"5125" : "肄",
"5126" : "肅",
"5127" : "肆",
"5128" : "肇",
"5129" : "呤",
"5130" : "餾",
"5131" : "肉",
"5132" : "肋",
"5133" : "肌",
"5134" : "肓",
"5135" : "肖",
"5136" : "肘",
"5137" : "肚",
"5138" : "肛",
"5139" : "肝",
"5140" : "股",
"5141" : "肢",
"5142" : "肥",
"5143" : "胺",
"5144" : "肩",
"5145" : "肫",
"5146" : "肯",
"5147" : "肱",
"5148" : "育",
"5149" : "肴",
"5150" : "肸",
"5151" : "肺",
"5152" : "胃",
"5153" : "胄",
"5154" : "背",
"5155" : "胗",
"5156" : "胔",
"5157" : "胍",
"5158" : "胎",
"5159" : "胏",
"5160" : "胖",
"5161" : "胙",
"5162" : "胚",
"5163" : "胳",
"5164" : "胝",
"5165" : "胞",
"5166" : "胰",
"5167" : "胠",
"5168" : "胭",
"5169" : "胯",
"5170" : "胡",
"5171" : "胥",
"5172" : "胸",
"5173" : "胼",
"5174" : "能",
"5175" : "胾",
"5176" : "脂",
"5177" : "腺",
"5178" : "脅",
"5179" : "脇",
"5180" : "胱",
"5181" : "脈",
"5182" : "脊",
"5183" : "脚",
"5184" : "脘",
"5185" : "脛",
"5186" : "脆",
"5187" : "脤",
"5188" : "脣",
"5189" : "脧",
"5190" : "脩",
"5191" : "膨",
"5192" : "脫",
"5193" : "脬",
"5194" : "脯",
"5195" : "脹",
"5196" : "脾",
"5197" : "腆",
"5198" : "腊",
"5199" : "腋",
"5200" : "腎",
"5201" : "腐",
"5202" : "腑",
"5203" : "腓",
"5204" : "腔",
"5205" : "腕",
"5206" : "腥",
"5207" : "腦",
"5208" : "腴",
"5209" : "腫",
"5210" : "腮",
"5211" : "膵",
"5212" : "腰",
"5213" : "腱",
"5214" : "腸",
"5215" : "腹",
"5216" : "腠",
"5217" : "腿",
"5218" : "膀",
"5219" : "膂",
"5220" : "膋",
"5221" : "膏",
"5222" : "肷",
"5223" : "腳",
"5224" : "膈",
"5225" : "膊",
"5226" : "膕",
"5227" : "膚",
"5228" : "膛",
"5229" : "膜",
"5230" : "膝",
"5231" : "膠",
"5232" : "膩",
"5233" : "膰",
"5234" : "膳",
"5235" : "膺",
"5236" : "膴",
"5237" : "膽",
"5238" : "膻",
"5239" : "膾",
"5240" : "膿",
"5241" : "臀",
"5242" : "臂",
"5243" : "臄",
"5244" : "臆",
"5245" : "臉",
"5246" : "臊",
"5247" : "臍",
"5248" : "臘",
"5249" : "臙",
"5250" : "臃",
"5251" : "臚",
"5252" : "臝",
"5253" : "臟",
"5254" : "臠",
"5255" : "胤",
"5256" : "臣",
"5257" : "臥",
"5258" : "臧",
"5259" : "臨",
"5260" : "櫨",
"5261" : "自",
"5262" : "臬",
"5263" : "臭",
"5264" : "臯",
"5265" : "臲",
"5266" : "鑥",
"5267" : "至",
"5268" : "致",
"5269" : "臶",
"5270" : "臺",
"5271" : "臻",
"5272" : "氌",
"5273" : "臼",
"5274" : "臾",
"5275" : "舁",
"5276" : "舀",
"5277" : "舂",
"5278" : "舄",
"5279" : "舅",
"5280" : "與",
"5281" : "興",
"5282" : "舉",
"5283" : "舊",
"5284" : "舋",
"5285" : "摞",
"5286" : "舌",
"5287" : "舍",
"5288" : "舐",
"5289" : "舒",
"5290" : "舘",
"5291" : "舖",
"5292" : "舛",
"5293" : "舜",
"5294" : "舞",
"5295" : "舝",
"5296" : "鎇",
"5297" : "舟",
"5298" : "舠",
"5299" : "舡",
"5300" : "航",
"5301" : "般",
"5302" : "舫",
"5303" : "舩",
"5304" : "舷",
"5305" : "舵",
"5306" : "舶",
"5307" : "船",
"5308" : "舸",
"5309" : "舲",
"5310" : "舳",
"5311" : "舴",
"5312" : "艇",
"5313" : "艋",
"5314" : "艄",
"5315" : "艖",
"5316" : "艗",
"5317" : "艎",
"5318" : "艘",
"5319" : "艙",
"5320" : "艤",
"5321" : "艟",
"5322" : "艨",
"5323" : "艭",
"5324" : "艦",
"5325" : "艫",
"5326" : "酶",
"5327" : "艮",
"5328" : "良",
"5329" : "艱",
"5330" : "鍆",
"5331" : "色",
"5332" : "艴",
"5333" : "艷",
"5334" : "蓢",
"5335" : "艸",
"5336" : "艽",
"5337" : "艾",
"5338" : "芃",
"5339" : "芄",
"5340" : "芊",
"5341" : "芋",
"5342" : "芍",
"5343" : "芎",
"5344" : "𦬊",
"5345" : "芒",
"5346" : "芙",
"5347" : "芝",
"5348" : "芟",
"5349" : "芡",
"5350" : "芣",
"5351" : "芤",
"5352" : "芧",
"5353" : "芨",
"5354" : "芥",
"5355" : "芩",
"5356" : "芪",
"5357" : "芫",
"5358" : "芬",
"5359" : "芭",
"5360" : "芮",
"5361" : "芯",
"5362" : "芰",
"5363" : "花",
"5364" : "芳",
"5365" : "芷",
"5366" : "芸",
"5367" : "芹",
"5368" : "芻",
"5369" : "芼",
"5370" : "芽",
"5371" : "莜",
"5372" : "芾",
"5373" : "苑",
"5374" : "茆",
"5375" : "苒",
"5376" : "苓",
"5377" : "苔",
"5378" : "苕",
"5379" : "苗",
"5380" : "苙",
"5381" : "苛",
"5382" : "苜",
"5383" : "苞",
"5384" : "苟",
"5385" : "苣",
"5386" : "苡",
"5387" : "若",
"5388" : "苦",
"5389" : "苧",
"5390" : "苫",
"5391" : "英",
"5392" : "苴",
"5393" : "苹",
"5394" : "苻",
"5395" : "苽",
"5396" : "苾",
"5397" : "茀",
"5398" : "茁",
"5399" : "茂",
"5400" : "范",
"5401" : "茄",
"5402" : "茈",
"5403" : "茅",
"5404" : "茇",
"5405" : "苢",
"5406" : "茉",
"5407" : "茗",
"5408" : "荔",
"5409" : "茜",
"5410" : "茢",
"5411" : "茦",
"5412" : "茨",
"5413" : "茫",
"5414" : "茭",
"5415" : "茯",
"5416" : "茱",
"5417" : "茲",
"5418" : "茴",
"5419" : "茵",
"5420" : "茶",
"5421" : "茷",
"5422" : "茸",
"5423" : "茹",
"5424" : "荀",
"5425" : "荃",
"5426" : "萄",
"5427" : "荊",
"5428" : "荸",
"5429" : "荇",
"5430" : "草",
"5431" : "荍",
"5432" : "荏",
"5433" : "荐",
"5434" : "荑",
"5435" : "荒",
"5436" : "茝",
"5437" : "荄",
"5438" : "莛",
"5439" : "荳",
"5440" : "荷",
"5441" : "荻",
"5442" : "荼",
"5443" : "荽",
"5444" : "莅",
"5445" : "莊",
"5446" : "莎",
"5447" : "莒",
"5448" : "莓",
"5449" : "莖",
"5450" : "莘",
"5451" : "莞",
"5452" : "莠",
"5453" : "莢",
"5454" : "莧",
"5455" : "莆",
"5456" : "莨",
"5457" : "莩",
"5458" : "莪",
"5459" : "莫",
"5460" : "菟",
"5461" : "莉",
"5462" : "莽",
"5463" : "菀",
"5464" : "菁",
"5465" : "菅",
"5466" : "菇",
"5467" : "菉",
"5468" : "菊",
"5469" : "菑",
"5470" : "菓",
"5471" : "菖",
"5472" : "菔",
"5473" : "菘",
"5474" : "菠",
"5475" : "菜",
"5476" : "菩",
"5477" : "堇",
"5478" : "華",
"5479" : "菰",
"5480" : "菱",
"5481" : "菲",
"5482" : "菴",
"5483" : "莙",
"5484" : "菹",
"5485" : "菼",
"5486" : "菽",
"5487" : "萁",
"5488" : "萃",
"5489" : "萆",
"5490" : "萊",
"5491" : "萋",
"5492" : "萌",
"5493" : "萍",
"5494" : "萎",
"5495" : "萑",
"5496" : "菡",
"5497" : "菌",
"5498" : "萩",
"5499" : "𦯶",
"5500" : "萇",
"5501" : "萼",
"5502" : "萬",
"5503" : "萱",
"5504" : "萵",
"5505" : "萸",
"5506" : "萹",
"5507" : "落",
"5508" : "葆",
"5509" : "葉",
"5510" : "菸",
"5511" : "著",
"5512" : "葘",
"5513" : "葚",
"5514" : "葛",
"5515" : "葡",
"5516" : "董",
"5517" : "葦",
"5518" : "葩",
"5519" : "葫",
"5520" : "葬",
"5521" : "葭",
"5522" : "葯",
"5523" : "葱",
"5524" : "葳",
"5525" : "葵",
"5526" : "葷",
"5527" : "葸",
"5528" : "葺",
"5529" : "葽",
"5530" : "蒂",
"5531" : "葑",
"5532" : "葹",
"5533" : "蒐",
"5534" : "葊",
"5535" : "蒔",
"5536" : "蒙",
"5537" : "蒜",
"5538" : "蒡",
"5539" : "蒞",
"5540" : "蒟",
"5541" : "蒨",
"5542" : "蒭",
"5543" : "蒲",
"5544" : "蒸",
"5545" : "蒹",
"5546" : "蒺",
"5547" : "蒼",
"5548" : "蒿",
"5549" : "蓀",
"5550" : "蓁",
"5551" : "蓂",
"5552" : "蓄",
"5553" : "蓆",
"5554" : "蓉",
"5555" : "蓊",
"5556" : "蓋",
"5557" : "蓖",
"5558" : "蓍",
"5559" : "蓏",
"5560" : "蓑",
"5561" : "蔀",
"5562" : "蓐",
"5563" : "蓓",
"5564" : "萏",
"5565" : "蔌",
"5566" : "蒯",
"5567" : "蒱",
"5568" : "蓧",
"5569" : "蓫",
"5570" : "蓬",
"5571" : "蓮",
"5572" : "蓰",
"5573" : "蒓",
"5574" : "蓴",
"5575" : "蔻",
"5576" : "蔫",
"5577" : "薌",
"5578" : "蓼",
"5579" : "蔆",
"5580" : "蔇",
"5581" : "蓿",
"5582" : "蔂",
"5583" : "蔑",
"5584" : "蕻",
"5585" : "蔓",
"5586" : "蔕",
"5587" : "蔗",
"5588" : "蔚",
"5589" : "蔞",
"5590" : "蔟",
"5591" : "蔡",
"5592" : "蔣",
"5593" : "蔭",
"5594" : "蔴",
"5595" : "蔥",
"5596" : "蔦",
"5597" : "蔔",
"5598" : "蓽",
"5599" : "蔽",
"5600" : "蔬",
"5601" : "蕺",
"5602" : "蔾",
"5603" : "蕃",
"5604" : "蕉",
"5605" : "蕊",
"5606" : "蕎",
"5607" : "蕕",
"5608" : "蕖",
"5609" : "蕘",
"5610" : "蕙",
"5611" : "蕝",
"5612" : "蕞",
"5613" : "蕡",
"5614" : "蕢",
"5615" : "蕨",
"5616" : "蕩",
"5617" : "蕪",
"5618" : "蕭",
"5619" : "薀",
"5620" : "薯",
"5621" : "蕆",
"5622" : "蕈",
"5623" : "蕳",
"5624" : "蕤",
"5625" : "薁",
"5626" : "蕷",
"5627" : "蕸",
"5628" : "蕾",
"5629" : "薐",
"5630" : "薢",
"5631" : "薄",
"5632" : "薅",
"5633" : "薇",
"5634" : "薈",
"5635" : "薉",
"5636" : "薊",
"5637" : "薑",
"5638" : "薔",
"5639" : "薖",
"5640" : "薙",
"5641" : "薛",
"5642" : "孽",
"5643" : "薜",
"5644" : "薦",
"5645" : "薨",
"5646" : "薩",
"5647" : "薪",
"5648" : "薤",
"5649" : "蘖",
"5650" : "薏",
"5651" : "薰",
"5652" : "薳",
"5653" : "薹",
"5654" : "薺",
"5655" : "薽",
"5656" : "薿",
"5657" : "藄",
"5658" : "藇",
"5659" : "藉",
"5660" : "藎",
"5661" : "藏",
"5662" : "藐",
"5663" : "藍",
"5664" : "藁",
"5665" : "藕",
"5666" : "蒍",
"5667" : "藚",
"5668" : "藜",
"5669" : "藝",
"5670" : "藟",
"5671" : "藤",
"5672" : "藩",
"5673" : "藥",
"5674" : "藪",
"5675" : "藷",
"5676" : "藹",
"5677" : "藺",
"5679" : "藻",
"5680" : "藾",
"5681" : "藿",
"5682" : "蘄",
"5683" : "蘅",
"5684" : "蘆",
"5685" : "蘇",
"5686" : "蘊",
"5687" : "蘂",
"5688" : "夔",
"5689" : "蘋",
"5690" : "蘀",
"5691" : "蘚",
"5692" : "蘞",
"5693" : "蘢",
"5694" : "蘩",
"5695" : "蘭",
"5696" : "蘨",
"5697" : "虀",
"5698" : "蘧",
"5699" : "蘸",
"5700" : "蘿",
"5701" : "蘼",
"5702" : "虉",
"5703" : "虆",
"5704" : "蘑",
"5705" : "虍",
"5706" : "虎",
"5707" : "虐",
"5708" : "虓",
"5709" : "虔",
"5710" : "處",
"5711" : "虛",
"5712" : "虜",
"5713" : "虞",
"5714" : "號",
"5715" : "虡",
"5716" : "虢",
"5717" : "虥",
"5718" : "虣",
"5719" : "虧",
"5720" : "𧈅",
"5721" : "醚",
"5722" : "虫",
"5723" : "虱",
"5724" : "虻",
"5725" : "虹",
"5726" : "虺",
"5727" : "蚓",
"5728" : "蚡",
"5729" : "蚕",
"5730" : "蚊",
"5731" : "蚋",
"5732" : "蚌",
"5733" : "蚣",
"5734" : "蚤",
"5735" : "蚧",
"5736" : "蚩",
"5737" : "蚪",
"5738" : "蚨",
"5739" : "蚯",
"5740" : "蚰",
"5741" : "蚱",
"5742" : "蚜",
"5743" : "蚶",
"5744" : "蚒",
"5745" : "蛄",
"5746" : "蛀",
"5747" : "蛆",
"5748" : "蛇",
"5749" : "蛉",
"5750" : "蛑",
"5751" : "蛋",
"5752" : "蛙",
"5753" : "蛛",
"5754" : "蛟",
"5755" : "蛣",
"5756" : "蛤",
"5757" : "蛩",
"5758" : "蛺",
"5759" : "蛭",
"5760" : "蛾",
"5761" : "蜹",
"5762" : "蜂",
"5763" : "蜃",
"5764" : "蜇",
"5765" : "蜈",
"5766" : "蜋",
"5767" : "蜓",
"5768" : "蛸",
"5769" : "蛹",
"5770" : "蛻",
"5771" : "蜀",
"5772" : "蜉",
"5773" : "蜍",
"5774" : "蜊",
"5775" : "蜎",
"5776" : "蜘",
"5777" : "蜚",
"5778" : "蜜",
"5779" : "蜡",
"5780" : "蜣",
"5781" : "蜩",
"5782" : "蜥",
"5783" : "蜒",
"5784" : "蛔",
"5785" : "蜴",
"5786" : "蜞",
"5787" : "蝀",
"5788" : "螂",
"5789" : "蜢",
"5790" : "蜮",
"5791" : "蝎",
"5792" : "蛐",
"5793" : "蝕",
"5794" : "蝗",
"5795" : "蝘",
"5796" : "蝙",
"5797" : "蜅",
"5798" : "蝟",
"5799" : "蝠",
"5800" : "蜿",
"5801" : "蝥",
"5802" : "蝦",
"5803" : "蝮",
"5804" : "蝱",
"5805" : "蝶",
"5806" : "蜷",
"5807" : "蟮",
"5808" : "蜻",
"5809" : "蝌",
"5810" : "蝨",
"5811" : "蜾",
"5812" : "蝣",
"5813" : "蝻",
"5814" : "蝴",
"5815" : "蝸",
"5816" : "融",
"5817" : "蠓",
"5818" : "螞",
"5819" : "螘",
"5820" : "螟",
"5821" : "螢",
"5822" : "螣",
"5823" : "蠔",
"5824" : "螃",
"5825" : "螄",
"5826" : "螫",
"5827" : "螱",
"5828" : "螺",
"5829" : "螻",
"5830" : "螽",
"5832" : "蟄",
"5833" : "蟊",
"5834" : "螬",
"5835" : "螭",
"5836" : "螮",
"5837" : "螯",
"5838" : "螳",
"5839" : "蟀",
"5840" : "蟆",
"5841" : "蟈",
"5842" : "蟋",
"5843" : "蟣",
"5844" : "蟪",
"5845" : "蟒",
"5846" : "蟚",
"5847" : "蟠",
"5848" : "蟬",
"5849" : "蟲",
"5850" : "蟭",
"5851" : "蟹",
"5852" : "蟻",
"5853" : "蟾",
"5854" : "蟳",
"5855" : "蟶",
"5856" : "蠃",
"5857" : "蟿",
"5858" : "蠁",
"5859" : "蠅",
"5860" : "蠆",
"5861" : "蠍",
"5862" : "蠕",
"5863" : "蠖",
"5864" : "蠛",
"5865" : "蠜",
"5866" : "蠟",
"5867" : "蠡",
"5868" : "蠢",
"5869" : "蠣",
"5870" : "蠨",
"5871" : "蠹",
"5872" : "蠱",
"5873" : "蠲",
"5874" : "蠶",
"5875" : "蠻",
"5876" : "虬",
"5877" : "血",
"5878" : "嘧",
"5879" : "𥁃",
"5880" : "衄",
"5881" : "衅",
"5882" : "衂",
"5883" : "衆",
"5884" : "衇",
"5885" : "衊",
"5886" : "嚜",
"5887" : "行",
"5888" : "衍",
"5889" : "衎",
"5890" : "術",
"5891" : "衒",
"5892" : "衕",
"5893" : "衖",
"5894" : "街",
"5895" : "衙",
"5896" : "衚",
"5897" : "衝",
"5898" : "衛",
"5899" : "衡",
"5900" : "衢",
"5901" : "衜",
"5902" : "衣",
"5903" : "表",
"5904" : "衫",
"5905" : "衰",
"5906" : "衲",
"5907" : "衷",
"5909" : "衵",
"5910" : "衽",
"5911" : "衾",
"5912" : "衿",
"5913" : "袁",
"5914" : "袈",
"5915" : "袋",
"5916" : "袍",
"5917" : "袒",
"5918" : "袖",
"5919" : "袗",
"5920" : "袜",
"5921" : "袚",
"5922" : "袞",
"5923" : "袠",
"5924" : "袤",
"5925" : "袪",
"5926" : "被",
"5927" : "袂",
"5928" : "袴",
"5929" : "袵",
"5930" : "袷",
"5931" : "袱",
"5932" : "裁",
"5933" : "裂",
"5934" : "裊",
"5935" : "裎",
"5936" : "裀",
"5937" : "裏",
"5938" : "裒",
"5939" : "裔",
"5940" : "裕",
"5941" : "裘",
"5942" : "裙",
"5943" : "補",
"5944" : "裝",
"5945" : "裟",
"5946" : "褎",
"5947" : "裨",
"5948" : "裯",
"5949" : "裰",
"5950" : "裱",
"5951" : "裳",
"5952" : "裴",
"5953" : "裸",
"5954" : "裼",
"5955" : "裹",
"5956" : "製",
"5957" : "裾",
"5958" : "複",
"5959" : "褊",
"5960" : "褌",
"5961" : "褉",
"5962" : "褂",
"5963" : "褪",
"5964" : "褐",
"5965" : "褓",
"5966" : "褘",
"5967" : "褙",
"5968" : "褡",
"5969" : "褚",
"5970" : "褥",
"5971" : "褧",
"5972" : "褫",
"5973" : "褰",
"5974" : "褲",
"5975" : "褦",
"5976" : "褵",
"5977" : "褶",
"5978" : "褻",
"5979" : "襃",
"5980" : "襄",
"5981" : "衮",
"5982" : "襁",
"5983" : "袢",
"5984" : "襖",
"5985" : "襚",
"5986" : "襌",
"5987" : "裡",
"5988" : "褒",
"5989" : "裦",
"5990" : "襝",
"5991" : "襠",
"5992" : "襟",
"5993" : "襦",
"5994" : "襪",
"5995" : "襏",
"5996" : "襤",
"5997" : "褸",
"5998" : "襫",
"5999" : "襭",
"6000" : "襯",
"6001" : "襴",
"6002" : "襲",
"6003" : "襼",
"6004" : "襶",
"6005" : "裌",
"6006" : "襾",
"6007" : "西",
"6009" : "覃",
"6010" : "覆",
"6011" : "覇",
"6012" : "覈",
"6013" : "覊",
"6014" : "鎿",
"6015" : "見",
"6016" : "規",
"6017" : "覓",
"6018" : "視",
"6019" : "覘",
"6020" : "覜",
"6021" : "覡",
"6022" : "覦",
"6023" : "覩",
"6024" : "親",
"6025" : "覬",
"6026" : "覯",
"6027" : "覲",
"6028" : "覷",
"6029" : "覵",
"6030" : "覺",
"6031" : "覽",
"6032" : "覿",
"6033" : "覥",
"6034" : "觀",
"6035" : "覼",
"6036" : "氖",
"6037" : "角",
"6038" : "觔",
"6039" : "觖",
"6040" : "觚",
"6041" : "觝",
"6042" : "觕",
"6043" : "解",
"6044" : "觥",
"6045" : "觩",
"6046" : "觫",
"6047" : "觭",
"6048" : "觱",
"6049" : "觳",
"6050" : "觴",
"6051" : "觸",
"6052" : "觶",
"6053" : "觼",
"6054" : "觿",
"6055" : "萘",
"6056" : "言",
"6057" : "訂",
"6058" : "訃",
"6059" : "訇",
"6060" : "計",
"6061" : "訊",
"6062" : "討",
"6063" : "訐",
"6064" : "訓",
"6065" : "訕",
"6066" : "訖",
"6067" : "託",
"6068" : "記",
"6069" : "訌",
"6070" : "訏",
"6071" : "訑",
"6072" : "訒",
"6073" : "訛",
"6074" : "訝",
"6075" : "訟",
"6076" : "訣",
"6077" : "訥",
"6078" : "訪",
"6079" : "許",
"6080" : "設",
"6081" : "訩",
"6082" : "訢",
"6083" : "訴",
"6084" : "訶",
"6085" : "診",
"6086" : "証",
"6087" : "註",
"6088" : "訾",
"6089" : "詁",
"6090" : "詆",
"6091" : "詈",
"6092" : "詋",
"6093" : "詎",
"6094" : "詐",
"6095" : "詒",
"6096" : "詔",
"6097" : "評",
"6098" : "詖",
"6099" : "詘",
"6100" : "詛",
"6101" : "詞",
"6102" : "詠",
"6103" : "詡",
"6104" : "詢",
"6105" : "詣",
"6106" : "詤",
"6107" : "試",
"6108" : "詩",
"6109" : "詫",
"6110" : "詬",
"6111" : "詭",
"6112" : "詮",
"6113" : "詰",
"6114" : "話",
"6115" : "該",
"6116" : "詳",
"6117" : "詼",
"6118" : "詿",
"6119" : "誆",
"6120" : "誄",
"6121" : "誅",
"6122" : "誇",
"6123" : "詵",
"6124" : "詹",
"6125" : "誌",
"6126" : "認",
"6127" : "誐",
"6128" : "誑",
"6129" : "誓",
"6130" : "誕",
"6131" : "誘",
"6132" : "誚",
"6133" : "語",
"6134" : "誠",
"6135" : "誡",
"6136" : "誣",
"6137" : "誤",
"6138" : "誥",
"6139" : "誦",
"6140" : "誨",
"6141" : "說",
"6142" : "誰",
"6143" : "課",
"6144" : "誶",
"6145" : "誹",
"6146" : "誼",
"6147" : "誾",
"6148" : "調",
"6149" : "諂",
"6150" : "諄",
"6151" : "談",
"6152" : "諉",
"6153" : "請",
"6154" : "諍",
"6155" : "諏",
"6156" : "諒",
"6157" : "諑",
"6158" : "論",
"6159" : "諗",
"6160" : "諐",
"6161" : "諛",
"6162" : "諝",
"6163" : "諞",
"6164" : "諟",
"6165" : "諠",
"6166" : "諤",
"6167" : "諦",
"6168" : "諧",
"6169" : "諫",
"6170" : "諭",
"6171" : "諮",
"6172" : "諱",
"6173" : "諳",
"6174" : "諷",
"6175" : "諸",
"6176" : "諺",
"6177" : "諵",
"6178" : "諼",
"6179" : "諾",
"6180" : "謀",
"6181" : "謁",
"6182" : "謂",
"6183" : "諜",
"6184" : "諡",
"6185" : "諴",
"6186" : "諶",
"6187" : "謄",
"6188" : "謅",
"6189" : "謆",
"6190" : "謇",
"6192" : "謊",
"6193" : "謎",
"6194" : "謐",
"6195" : "謔",
"6196" : "謗",
"6197" : "謙",
"6198" : "謚",
"6199" : "講",
"6200" : "謝",
"6201" : "謟",
"6202" : "謠",
"6203" : "謏",
"6204" : "謖",
"6205" : "謦",
"6206" : "謨",
"6207" : "謫",
"6208" : "謬",
"6209" : "謳",
"6210" : "謹",
"6211" : "謾",
"6212" : "譁",
"6213" : "謿",
"6214" : "證",
"6215" : "譌",
"6216" : "譎",
"6217" : "譏",
"6218" : "譒",
"6219" : "譔",
"6220" : "譖",
"6221" : "識",
"6222" : "譙",
"6223" : "譚",
"6224" : "譍",
"6225" : "譜",
"6226" : "警",
"6227" : "譟",
"6228" : "譫",
"6229" : "譬",
"6230" : "譯",
"6231" : "議",
"6232" : "譴",
"6233" : "護",
"6234" : "譸",
"6235" : "譽",
"6236" : "讀",
"6237" : "譾",
"6238" : "讁",
"6239" : "變",
"6240" : "讌",
"6241" : "讎",
"6242" : "讋",
"6243" : "讒",
"6244" : "讖",
"6245" : "讓",
"6246" : "讙",
"6247" : "讚",
"6248" : "讛",
"6249" : "讜",
"6250" : "讞",
"6251" : "讟",
"6252" : "誯",
"6253" : "谷",
"6254" : "谿",
"6255" : "豁",
"6256" : "豄",
"6257" : "𥓁",
"6258" : "豆",
"6259" : "豈",
"6260" : "豋",
"6261" : "豌",
"6262" : "豉",
"6263" : "豇",
"6264" : "豎",
"6265" : "豐",
"6266" : "豒",
"6267" : "豔",
"6268" : "豏",
"6269" : "豕",
"6270" : "豚",
"6271" : "豝",
"6272" : "象",
"6273" : "豢",
"6274" : "豨",
"6275" : "豪",
"6276" : "豫",
"6277" : "豬",
"6278" : "豭",
"6279" : "豳",
"6280" : "豵",
"6281" : "鈮",
"6282" : "豸",
"6283" : "豹",
"6284" : "豺",
"6285" : "貂",
"6286" : "貆",
"6287" : "貅",
"6288" : "貉",
"6289" : "貊",
"6290" : "貎",
"6291" : "貍",
"6292" : "貓",
"6293" : "貔",
"6294" : "貛",
"6295" : "脲",
"6296" : "貝",
"6297" : "貞",
"6298" : "負",
"6299" : "財",
"6300" : "貢",
"6301" : "貤",
"6302" : "貧",
"6303" : "貨",
"6304" : "貪",
"6305" : "販",
"6306" : "貫",
"6307" : "責",
"6308" : "貯",
"6309" : "貲",
"6310" : "貳",
"6311" : "貴",
"6312" : "貶",
"6313" : "貸",
"6314" : "買",
"6315" : "貺",
"6316" : "費",
"6317" : "貼",
"6318" : "貽",
"6319" : "貿",
"6320" : "賀",
"6321" : "賁",
"6322" : "貰",
"6323" : "賂",
"6324" : "賃",
"6325" : "賄",
"6326" : "賅",
"6327" : "資",
"6328" : "賈",
"6329" : "賊",
"6330" : "賉",
"6331" : "賑",
"6332" : "賒",
"6333" : "賓",
"6334" : "賕",
"6335" : "賙",
"6336" : "賚",
"6337" : "賜",
"6338" : "賝",
"6339" : "賞",
"6340" : "賫",
"6341" : "賠",
"6342" : "賡",
"6343" : "賢",
"6344" : "賣",
"6345" : "賤",
"6346" : "賦",
"6347" : "質",
"6348" : "賬",
"6349" : "賟",
"6350" : "賭",
"6351" : "賴",
"6352" : "賵",
"6353" : "賮",
"6354" : "賺",
"6355" : "賻",
"6356" : "購",
"6357" : "賽",
"6358" : "賾",
"6359" : "賸",
"6360" : "贄",
"6361" : "贅",
"6362" : "贈",
"6363" : "贊",
"6364" : "贇",
"6365" : "贍",
"6366" : "贏",
"6367" : "贐",
"6368" : "贓",
"6369" : "贔",
"6370" : "贖",
"6371" : "贑",
"6372" : "贗",
"6373" : "贛",
"6374" : "贉",
"6375" : "赤",
"6376" : "赦",
"6377" : "赧",
"6378" : "赫",
"6379" : "赭",
"6380" : "赬",
"6381" : "釹",
"6382" : "走",
"6383" : "赳",
"6384" : "赴",
"6385" : "赶",
"6386" : "起",
"6387" : "趁",
"6388" : "趄",
"6389" : "超",
"6390" : "越",
"6391" : "趕",
"6392" : "趙",
"6393" : "趣",
"6394" : "趦",
"6395" : "趨",
"6396" : "趟",
"6397" : "蒎",
"6398" : "足",
"6399" : "趵",
"6400" : "趾",
"6401" : "跴",
"6402" : "趺",
"6403" : "趹",
"6404" : "跂",
"6405" : "跋",
"6406" : "跅",
"6407" : "跌",
"6408" : "跎",
"6409" : "跏",
"6410" : "跑",
"6411" : "跕",
"6412" : "跖",
"6413" : "跚",
"6414" : "跛",
"6415" : "距",
"6416" : "跗",
"6417" : "跫",
"6418" : "跟",
"6419" : "跡",
"6420" : "跣",
"6421" : "跨",
"6422" : "跪",
"6423" : "跬",
"6424" : "路",
"6425" : "踩",
"6426" : "跳",
"6427" : "跽",
"6428" : "踉",
"6429" : "踊",
"6430" : "跼",
"6431" : "踏",
"6432" : "踐",
"6433" : "踔",
"6434" : "踖",
"6435" : "踝",
"6436" : "踞",
"6437" : "踢",
"6438" : "踣",
"6439" : "踧",
"6440" : "踘",
"6441" : "踡",
"6442" : "踟",
"6443" : "踮",
"6444" : "踰",
"6445" : "踴",
"6446" : "踵",
"6447" : "踹",
"6448" : "蹓",
"6449" : "踽",
"6450" : "蹁",
"6451" : "蹂",
"6452" : "蹄",
"6453" : "踱",
"6454" : "蹀",
"6455" : "蹐",
"6456" : "蹇",
"6457" : "蹈",
"6458" : "蹉",
"6459" : "蹊",
"6460" : "躍",
"6461" : "蹌",
"6462" : "蹕",
"6463" : "蹔",
"6464" : "蹙",
"6465" : "蹟",
"6466" : "蹣",
"6467" : "蹤",
"6468" : "蹜",
"6469" : "𨄮",
"6470" : "蹠",
"6471" : "蹯",
"6472" : "蹲",
"6473" : "蹴",
"6474" : "蹶",
"6475" : "蹺",
"6476" : "蹡",
"6477" : "蹢",
"6478" : "蹬",
"6479" : "蹭",
"6480" : "𨆼",
"6481" : "躁",
"6482" : "躄",
"6483" : "躅",
"6484" : "躇",
"6485" : "躉",
"6486" : "躊",
"6487" : "躋",
"6488" : "蹋",
"6489" : "躐",
"6490" : "躑",
"6491" : "躒",
"6492" : "躓",
"6493" : "躔",
"6494" : "躚",
"6495" : "躡",
"6496" : "躩",
"6497" : "躪",
"6498" : "蹦",
"6499" : "蹚",
"6500" : "身",
"6501" : "躬",
"6502" : "躭",
"6503" : "躱",
"6504" : "軀",
"6505" : "躶",
"6506" : "軃",
"6507" : "躺",
"6508" : "車",
"6509" : "軋",
"6510" : "軌",
"6511" : "軍",
"6512" : "軏",
"6513" : "軒",
"6514" : "軔",
"6515" : "軛",
"6516" : "軟",
"6517" : "軨",
"6518" : "軫",
"6519" : "軸",
"6520" : "軹",
"6521" : "軷",
"6522" : "軼",
"6523" : "軺",
"6524" : "軾",
"6525" : "較",
"6526" : "輅",
"6527" : "輈",
"6528" : "載",
"6529" : "輀",
"6530" : "輇",
"6531" : "輊",
"6532" : "輒",
"6533" : "輓",
"6534" : "輔",
"6535" : "輕",
"6536" : "輗",
"6537" : "輙",
"6538" : "輛",
"6539" : "輜",
"6540" : "輝",
"6541" : "輟",
"6542" : "輦",
"6543" : "輩",
"6544" : "輪",
"6545" : "輞",
"6546" : "輠",
"6547" : "輥",
"6548" : "輧",
"6549" : "輯",
"6550" : "輳",
"6551" : "輸",
"6552" : "輹",
"6553" : "輻",
"6554" : "輭",
"6555" : "輮",
"6556" : "輴",
"6557" : "輶",
"6558" : "輾",
"6559" : "輿",
"6560" : "轂",
"6561" : "轄",
"6562" : "轅",
"6563" : "轀",
"6564" : "轆",
"6565" : "轇",
"6566" : "轕",
"6567" : "轉",
"6568" : "轍",
"6569" : "轎",
"6570" : "轏",
"6571" : "轒",
"6572" : "轖",
"6573" : "轘",
"6574" : "轞",
"6575" : "轟",
"6576" : "轡",
"6577" : "轢",
"6578" : "轤",
"6579" : "軕",
"6580" : "辛",
"6581" : "辜",
"6582" : "辟",
"6583" : "辠",
"6584" : "辣",
"6585" : "辥",
"6586" : "辦",
"6587" : "辨",
"6588" : "辭",
"6589" : "辯",
"6590" : "耪",
"6591" : "辰",
"6592" : "辱",
"6593" : "農",
"6594" : "狍",
"6595" : "辵",
"6596" : "迂",
"6597" : "迄",
"6598" : "迅",
"6599" : "𨑳",
"6600" : "迍",
"6601" : "迎",
"6602" : "近",
"6603" : "迓",
"6604" : "返",
"6605" : "迕",
"6606" : "迢",
"6607" : "迤",
"6608" : "迥",
"6609" : "迦",
"6610" : "迨",
"6611" : "迪",
"6612" : "迫",
"6613" : "迭",
"6614" : "逄",
"6615" : "述",
"6616" : "迴",
"6617" : "迷",
"6618" : "迸",
"6619" : "迹",
"6620" : "追",
"6621" : "迺",
"6622" : "退",
"6623" : "送",
"6624" : "适",
"6625" : "逃",
"6626" : "逅",
"6627" : "逆",
"6628" : "逋",
"6629" : "逯",
"6630" : "逍",
"6631" : "透",
"6632" : "逐",
"6633" : "逑",
"6634" : "途",
"6635" : "逕",
"6636" : "逖",
"6637" : "逗",
"6638" : "這",
"6639" : "通",
"6640" : "逛",
"6641" : "逝",
"6642" : "逞",
"6643" : "速",
"6644" : "造",
"6645" : "逡",
"6646" : "逢",
"6647" : "連",
"6648" : "逭",
"6649" : "逮",
"6650" : "週",
"6651" : "進",
"6652" : "逵",
"6653" : "逶",
"6654" : "逸",
"6655" : "逷",
"6656" : "逼",
"6657" : "遇",
"6658" : "遁",
"6659" : "遂",
"6660" : "遄",
"6661" : "逾",
"6662" : "遊",
"6663" : "運",
"6664" : "遍",
"6665" : "過",
"6666" : "遏",
"6667" : "遐",
"6668" : "遑",
"6669" : "遒",
"6670" : "道",
"6671" : "達",
"6672" : "違",
"6673" : "遘",
"6674" : "遙",
"6675" : "遛",
"6676" : "遜",
"6677" : "遞",
"6678" : "遠",
"6679" : "遡",
"6680" : "遣",
"6681" : "遢",
"6682" : "遝",
"6683" : "遨",
"6684" : "適",
"6685" : "遭",
"6686" : "遮",
"6687" : "遯",
"6688" : "遲",
"6689" : "遴",
"6690" : "遵",
"6691" : "遶",
"6692" : "遷",
"6693" : "選",
"6694" : "遹",
"6695" : "遺",
"6696" : "遆",
"6697" : "遼",
"6698" : "遽",
"6699" : "避",
"6700" : "邀",
"6701" : "邁",
"6702" : "邂",
"6703" : "還",
"6704" : "邅",
"6705" : "邇",
"6706" : "邃",
"6707" : "邈",
"6708" : "邊",
"6709" : "邏",
"6710" : "邐",
"6711" : "疱",
"6712" : "邑",
"6713" : "邛",
"6714" : "邗",
"6715" : "邙",
"6716" : "邕",
"6717" : "邢",
"6718" : "鄮",
"6719" : "那",
"6720" : "邡",
"6721" : "邦",
"6722" : "邨",
"6723" : "邪",
"6724" : "邠",
"6725" : "邯",
"6726" : "邱",
"6727" : "邲",
"6728" : "邴",
"6729" : "邳",
"6730" : "邵",
"6731" : "邶",
"6732" : "邸",
"6733" : "邰",
"6734" : "邽",
"6735" : "郁",
"6736" : "郅",
"6737" : "郇",
"6738" : "郊",
"6739" : "邾",
"6740" : "郃",
"6741" : "郗",
"6742" : "郄",
"6743" : "郕",
"6744" : "郛",
"6745" : "郎",
"6746" : "郡",
"6747" : "郢",
"6748" : "郤",
"6749" : "郙",
"6750" : "郜",
"6751" : "郟",
"6752" : "部",
"6753" : "郭",
"6754" : "郴",
"6755" : "郵",
"6756" : "郯",
"6757" : "都",
"6758" : "郿",
"6759" : "鄂",
"6760" : "鄒",
"6761" : "鄄",
"6762" : "鄔",
"6763" : "鄕",
"6764" : "鄗",
"6765" : "鄖",
"6766" : "鄙",
"6767" : "鄘",
"6768" : "鄢",
"6769" : "鄞",
"6770" : "鄠",
"6771" : "鄜",
"6772" : "鄧",
"6773" : "鄫",
"6774" : "鄭",
"6775" : "鄰",
"6776" : "鄱",
"6777" : "鄴",
"6778" : "鄶",
"6779" : "鄲",
"6780" : "鄹",
"6781" : "鄯",
"6782" : "鄺",
"6783" : "酇",
"6784" : "酃",
"6785" : "酆",
"6786" : "酈",
"6787" : "郝",
"6788" : "酉",
"6789" : "酊",
"6790" : "酋",
"6791" : "酌",
"6792" : "配",
"6793" : "酎",
"6794" : "酒",
"6795" : "酖",
"6796" : "酗",
"6797" : "酢",
"6798" : "酥",
"6799" : "酣",
"6800" : "酤",
"6801" : "酡",
"6802" : "酩",
"6803" : "酪",
"6804" : "酬",
"6805" : "酲",
"6806" : "酵",
"6807" : "酷",
"6808" : "酸",
"6809" : "酴",
"6811" : "酺",
"6812" : "醃 ",
"6813" : "醅",
"6814" : "醆",
"6815" : "醇",
"6816" : "醉",
"6817" : "醊",
"6818" : "醋",
"6819" : "醍",
"6820" : "醐",
"6821" : "醒",
"6822" : "醓",
"6823" : "醜",
"6824" : "醖",
"6825" : "醡",
"6826" : "醢",
"6827" : "醩",
"6828" : "醪",
"6829" : "醫",
"6830" : "醬",
"6831" : "醮",
"6832" : "醯",
"6833" : "醴",
"6834" : "醲",
"6835" : "醵",
"6836" : "醺",
"6837" : "醽",
"6838" : "醁",
"6839" : "醼",
"6840" : "釀",
"6841" : "釁",
"6842" : "釂",
"6843" : "釄",
"6844" : "錇",
"6845" : "釆",
"6846" : "采",
"6847" : "釋",
"6848" : "釉",
"6849" : "里",
"6850" : "重",
"6851" : "野",
"6852" : "量",
"6853" : "釐",
"6854" : "鋅",
"6855" : "金",
"6856" : "釗",
"6857" : "釘",
"6858" : "釜",
"6859" : "針",
"6860" : "釣",
"6861" : "釧",
"6862" : "鈣",
"6863" : "釦",
"6864" : "釭",
"6866" : "鈇",
"6867" : "鈀",
"6868" : "鈍",
"6869" : "鈎",
"6870" : "鈐",
"6871" : "鈉",
"6872" : "鈔",
"6873" : "鈕",
"6874" : "鈞",
"6875" : "鈴",
"6876" : "鈸",
"6877" : "鈺",
"6878" : "鉁",
"6879" : "鈿",
"6880" : "鉅",
"6881" : "鉉",
"6882" : "鉏",
"6883" : "鉗",
"6884" : "鉛",
"6885" : "鉞",
"6886" : "鉢",
"6887" : "鉤",
"6888" : "鉋",
"6889" : "鉶",
"6890" : "鉸",
"6891" : "鉦",
"6892" : "銀",
"6893" : "銃",
"6894" : "銅",
"6895" : "鈷",
"6896" : "鉑",
"6897" : "銑",
"6898" : "銓",
"6899" : "銖",
"6900" : "銘",
"6901" : "銛",
"6902" : "銜",
"6903" : "銚",
"6904" : "銳",
"6905" : "鉀",
"6906" : "銷",
"6907" : "銹",
"6908" : "銼",
"6909" : "鋈",
"6910" : "鋌",
"6911" : "鋏",
"6912" : "鋒",
"6913" : "鋟",
"6914" : "鈾",
"6915" : "鋤",
"6916" : "鋩",
"6917" : "鋪",
"6918" : "鋙",
"6919" : "銲",
"6920" : "鋸",
"6921" : "鋼",
"6922" : "錄",
"6923" : "錐",
"6924" : "錕",
"6925" : "錘",
"6926" : "錙",
"6927" : "錚",
"6928" : "錠",
"6929" : "錢",
"6930" : "錦",
"6931" : "錨",
"6932" : "錫",
"6933" : "錮",
"6934" : "錯",
"6935" : "錞",
"6936" : "錡",
"6937" : "鍊",
"6938" : "鍋",
"6939" : "鍛",
"6940" : "鉍",
"6941" : "銨",
"6942" : "鍬",
"6943" : "鍵",
"6944" : "鍼",
"6945" : "鍾",
"6946" : "鍇",
"6947" : "鍍",
"6948" : "鍔",
"6949" : "鍠",
"6950" : "鍤",
"6951" : "鍥",
"6952" : "鍭",
"6953" : "鍰",
"6954" : "鎔",
"6955" : "銾",
"6956" : "鎖",
"6957" : "鎗",
"6958" : "鎚",
"6959" : "鎛",
"6960" : "鎞",
"6961" : "鎡",
"6962" : "鎌",
"6963" : "鎧",
"6964" : "鎬",
"6965" : "鎰",
"6966" : "鎭",
"6967" : "鎊",
"6968" : "鏃",
"6969" : "鏈",
"6970" : "鏑",
"6971" : "鏖",
"6972" : "鏗",
"6973" : "鏘",
"6974" : "鏜",
"6975" : "鏡",
"6976" : "鏝",
"6977" : "鏢",
"6978" : "鏞",
"6979" : "鏤",
"6980" : "鏟",
"6981" : "鏐",
"6982" : "銻",
"6983" : "鏨",
"6984" : "鐃",
"6985" : "鏵",
"6986" : "鋁",
"6987" : "鏹",
"6988" : "鐘",
"6989" : "鐙",
"6990" : "鐫",
"6991" : "鐮",
"6992" : "鐲",
"6993" : "鐵",
"6994" : "鐶",
"6995" : "鐸",
"6996" : "鎳",
"6997" : "鐺",
"6998" : "鐻",
"6999" : "鑄",
"7000" : "鑊",
"7001" : "鑌",
"7002" : "鑑",
"7003" : "鑒",
"7004" : "鑤",
"7005" : "鎢",
"7006" : "鑛",
"7007" : "鑠",
"7008" : "鑢",
"7009" : "鑣",
"7010" : "鑪",
"7011" : "鑰",
"7012" : "鐳",
"7013" : "鑲",
"7014" : "鑵",
"7015" : "鑷",
"7017" : "鑼",
"7018" : "鑽",
"7019" : "鑾",
"7020" : "鑿",
"7021" : "錳",
"7022" : "長",
"7023" : "蜱",
"7024" : "門",
"7025" : "閂",
"7026" : "閃",
"7027" : "閆",
"7028" : "閉",
"7029" : "閈",
"7030" : "開",
"7031" : "閎",
"7032" : "閏",
"7033" : "閑",
"7034" : "閒",
"7035" : "間",
"7036" : "閔",
"7037" : "閘",
"7038" : "閟",
"7039" : "閡",
"7040" : "閤",
"7041" : "閣",
"7042" : "閥",
"7043" : "閨",
"7044" : "閩",
"7045" : "閫",
"7046" : "閬",
"7047" : "閭",
"7048" : "閱",
"7049" : "閶",
"7050" : "閹",
"7051" : "閻",
"7052" : "閼",
"7053" : "閽",
"7054" : "閾",
"7055" : "闃",
"7056" : "闇",
"7057" : "闈",
"7058" : "闉",
"7059" : "闊",
"7060" : "闋",
"7061" : "闌",
"7062" : "闍",
"7063" : "闐",
"7064" : "閿",
"7065" : "闓",
"7066" : "闔",
"7067" : "闕",
"7068" : "闖",
"7069" : "闒",
"7070" : "關",
"7071" : "闚",
"7072" : "闠",
"7073" : "闡",
"7074" : "闞",
"7075" : "闢",
"7076" : "闤",
"7077" : "闥",
"7078" : "闆",
"7079" : "阜",
"7080" : "阝",
"7081" : "阞",
"7082" : "阡",
"7083" : "阤",
"7084" : "阨",
"7085" : "阬",
"7086" : "阮",
"7087" : "阯",
"7088" : "阱",
"7089" : "防",
"7090" : "阪",
"7091" : "阻",
"7092" : "阼",
"7093" : "阿",
"7094" : "陀",
"7095" : "陂",
"7096" : "附",
"7097" : "陋",
"7098" : "限",
"7099" : "陌",
"7100" : "降",
"7101" : "陔",
"7102" : "陘",
"7103" : "陛",
"7104" : "陝",
"7105" : "陞",
"7106" : "陟",
"7107" : "陡",
"7108" : "院",
"7109" : "陣",
"7110" : "除",
"7111" : "陪",
"7112" : "陬",
"7113" : "陰",
"7114" : "陲",
"7115" : "陳",
"7116" : "陴",
"7117" : "陵",
"7118" : "陶",
"7119" : "陷",
"7120" : "陸",
"7121" : "陼",
"7122" : "陽",
"7123" : "陻",
"7124" : "隍",
"7125" : "隄",
"7126" : "隅",
"7127" : "隆",
"7128" : "隈",
"7129" : "隉",
"7130" : "隊",
"7131" : "隋",
"7132" : "階",
"7133" : "隔",
"7134" : "隕",
"7135" : "隖",
"7136" : "隗",
"7137" : "隘",
"7138" : "隙",
"7139" : "際",
"7140" : "障",
"7141" : "隣",
"7142" : "隤",
"7143" : "隧",
"7144" : "隩",
"7145" : "險",
"7146" : "隮",
"7147" : "隰",
"7148" : "隱",
"7149" : "隳",
"7150" : "隴",
"7151" : "隨",
"7152" : "隶",
"7153" : "隸",
"7154" : "苤",
"7155" : "隹",
"7156" : "隻",
"7157" : "隼",
"7158" : "雀",
"7159" : "雁",
"7160" : "雄",
"7161" : "雅",
"7162" : "集",
"7163" : "雇",
"7164" : "雉",
"7165" : "雋",
"7166" : "雌",
"7167" : "雍",
"7168" : "雎",
"7169" : "雊",
"7170" : "𨿅",
"7171" : "雕",
"7172" : "巂",
"7173" : "雖",
"7174" : "雘",
"7175" : "雙",
"7176" : "雛",
"7177" : "雜",
"7178" : "雝",
"7179" : "雞",
"7180" : "離",
"7181" : "難",
"7182" : "鉕",
"7183" : "雨",
"7184" : "雩",
"7185" : "雪",
"7186" : "雯",
"7187" : "雰",
"7188" : "雱",
"7189" : "雲",
"7190" : "零",
"7191" : "雷",
"7192" : "雹",
"7193" : "電",
"7194" : "需",
"7195" : "霂",
"7196" : "霅",
"7197" : "霄",
"7198" : "霈",
"7199" : "霉",
"7200" : "霆",
"7201" : "震",
"7202" : "霍",
"7203" : "霎",
"7204" : "霏",
"7205" : "霑",
"7206" : "霓",
"7207" : "霖",
"7208" : "霜",
"7209" : "霞",
"7210" : "霢",
"7211" : "霤",
"7212" : "霧",
"7213" : "霰",
"7214" : "霪",
"7215" : "霱",
"7216" : "露",
"7217" : "霶",
"7218" : "霸",
"7219" : "霹",
"7220" : "霮",
"7221" : "霽",
"7222" : "靀",
"7223" : "霾",
"7224" : "靄",
"7225" : "靂",
"7226" : "靆",
"7227" : "靈",
"7228" : "靉",
"7229" : "霨",
"7230" : "青",
"7231" : "靖",
"7232" : "靚",
"7233" : "靛",
"7234" : "靜",
"7235" : "鏷",
"7236" : "非",
"7237" : "靠",
"7238" : "靡",
"7239" : "氆",
"7240" : "面",
"7241" : "靦",
"7242" : "靧",
"7243" : "靨",
"7244" : "釺",
"7245" : "革",
"7246" : "靳",
"7247" : "靴",
"7248" : "鞅",
"7249" : "靶",
"7250" : "靷",
"7251" : "靸",
"7252" : "鞀",
"7253" : "鞉",
"7254" : "鞍",
"7255" : "鞏",
"7256" : "鞋",
"7257" : "鞗",
"7258" : "鞘",
"7259" : "鞙",
"7260" : "鞞",
"7261" : "鞚",
"7262" : "鞟",
"7263" : "鞠",
"7264" : "鞦",
"7265" : "鞫",
"7267" : "鞭",
"7268" : "鞮",
"7269" : "鞱",
"7270" : "鞶",
"7271" : "鞲",
"7272" : "鞴",
"7273" : "鞾",
"7274" : "韁",
"7275" : "韃",
"7276" : "韆",
"7277" : "韀",
"7278" : "羥",
"7279" : "韋",
"7280" : "韍",
"7281" : "韓",
"7282" : "韌",
"7283" : "韎",
"7284" : "韐",
"7285" : "韒",
"7286" : "韔",
"7287" : "韝",
"7288" : "韘",
"7289" : "韙",
"7290" : "韜",
"7291" : "韞",
"7292" : "韤",
"7293" : "韠",
"7294" : "熗",
"7295" : "韭",
"7296" : "韮",
"7297" : "韱",
"7298" : "仫",
"7299" : "音",
"7300" : "韶",
"7301" : "韻",
"7302" : "響",
"7303" : "韺",
"7304" : "頀",
"7305" : "苘",
"7306" : "頁",
"7307" : "頂",
"7308" : "頃",
"7309" : "項",
"7310" : "頇",
"7311" : "順",
"7312" : "須",
"7313" : "頌",
"7314" : "頏",
"7315" : "預",
"7316" : "頑",
"7317" : "頒",
"7318" : "頷",
"7319" : "頓",
"7320" : "頊",
"7321" : "頍",
"7322" : "頎",
"7323" : "頖",
"7324" : "頗",
"7325" : "領",
"7326" : "頞",
"7327" : "頡",
"7328" : "頤",
"7329" : "顎",
"7330" : "𩓐",
"7331" : "頦",
"7332" : "頫",
"7333" : "頭",
"7334" : "頮",
"7335" : "頰",
"7336" : "頴",
"7337" : "頳",
"7338" : "頸",
"7339" : "頹",
"7340" : "頻",
"7341" : "顆",
"7342" : "顇",
"7343" : "顋",
"7344" : "題",
"7345" : "額",
"7346" : "顏",
"7347" : "頿",
"7348" : "顓",
"7349" : "願",
"7350" : "顙",
"7351" : "顚",
"7352" : "類",
"7353" : "顜",
"7354" : "顢",
"7355" : "顥",
"7356" : "顦",
"7357" : "顧",
"7358" : "顫",
"7359" : "顯",
"7360" : "顰",
"7361" : "顱",
"7362" : "顴",
"7363" : "粬",
"7364" : "風",
"7365" : "颭",
"7366" : "颯",
"7367" : "颶",
"7368" : "颸",
"7369" : "颿",
"7370" : "颺",
"7371" : "颻",
"7372" : "颼",
"7373" : "飄",
"7374" : "飆",
"7375" : "飀",
"7376" : "颱",
"7377" : "颳",
"7378" : "飛",
"7379" : "醛",
"7380" : "食",
"7381" : "飡",
"7382" : "飢",
"7383" : "飣",
"7384" : "飦",
"7385" : "飧",
"7386" : "飩",
"7387" : "飪",
"7388" : "飫",
"7389" : "飭",
"7390" : "飲",
"7391" : "飯",
"7392" : "飴",
"7393" : "飼",
"7394" : "飽",
"7395" : "飾",
"7396" : "飶",
"7397" : "餂",
"7398" : "餃",
"7399" : "餅",
"7400" : "餏",
"7401" : "餉",
"7402" : "養",
"7403" : "餌",
"7404" : "餐",
"7405" : "餖",
"7406" : "餗",
"7407" : "餒",
"7408" : "餓",
"7409" : "餔",
"7410" : "餕",
"7411" : "餘",
"7412" : "餛",
"7413" : "餚",
"7414" : "餡",
"7415" : "餞",
"7416" : "餑",
"7417" : "餟",
"7418" : "饃",
"7419" : "館",
"7420" : "餬",
"7421" : "餮",
"7422" : "餱",
"7423" : "餲",
"7424" : "餳",
"7425" : "餹",
"7426" : "餼",
"7427" : "餽",
"7428" : "饁",
"7429" : "饅",
"7430" : "𩝭",
"7431" : "饉",
"7432" : "饋",
"7433" : "饌",
"7434" : "饎",
"7435" : "饐",
"7436" : "饑",
"7437" : "饒",
"7438" : "饔",
"7439" : "饕",
"7440" : "饗",
"7441" : "饜",
"7442" : "饟",
"7443" : "饞",
"7445" : "首",
"7446" : "馘",
"7447" : "馗",
"7448" : "炔",
"7449" : "香",
"7450" : "馥",
"7451" : "馨",
"7452" : "馝",
"7453" : "馡",
"7454" : "馣",
"7455" : "蟯",
"7456" : "馬",
"7457" : "馭",
"7458" : "馮",
"7459" : "馳",
"7460" : "馴",
"7461" : "馱",
"7462" : "馹",
"7463" : "駁",
"7464" : "駃",
"7465" : "駐",
"7466" : "駑",
"7467" : "駒",
"7468" : "駕",
"7469" : "駘",
"7470" : "駙",
"7471" : "駛",
"7472" : "駋",
"7473" : "駜",
"7474" : "駝",
"7475" : "駟",
"7476" : "駪",
"7477" : "駉",
"7478" : "駢",
"7479" : "駬",
"7480" : "駭",
"7481" : "駮",
"7482" : "駱",
"7483" : "駵",
"7484" : "駰",
"7485" : "駸",
"7486" : "駿",
"7487" : "騌",
"7488" : "騁",
"7489" : "騅",
"7490" : "騂",
"7491" : "騃",
"7492" : "隲",
"7493" : "騑",
"7494" : "騎",
"7495" : "騋",
"7496" : "騏",
"7497" : "騖",
"7498" : "騄",
"7499" : "騙",
"7500" : "驄",
"7501" : "騠",
"7502" : "騣",
"7503" : "騤",
"7504" : "騧",
"7505" : "騫",
"7506" : "騰",
"7507" : "騶",
"7508" : "騵",
"7509" : "騸",
"7510" : "騷",
"7511" : "騮",
"7512" : "騾",
"7513" : "驀",
"7514" : "驁",
"7515" : "驂",
"7516" : "驃",
"7517" : "驅",
"7518" : "驈",
"7519" : "騻",
"7520" : "驊",
"7521" : "驔",
"7522" : "驍",
"7523" : "驖",
"7524" : "驕",
"7525" : "驌",
"7526" : "驗",
"7527" : "驒",
"7528" : "驚",
"7529" : "驘",
"7530" : "驙",
"7531" : "驛",
"7532" : "驟",
"7533" : "驢",
"7534" : "驤",
"7535" : "驥",
"7536" : "驩",
"7537" : "驪",
"7538" : "駗",
"7539" : "骨",
"7540" : "骩",
"7541" : "骭",
"7542" : "骯",
"7543" : "骱",
"7544" : "骰",
"7545" : "骷",
"7546" : "骸",
"7547" : "骼",
"7548" : "骽",
"7549" : "髀",
"7550" : "骾",
"7551" : "髏",
"7552" : "髆",
"7553" : "髑",
"7554" : "髒",
"7555" : "體",
"7556" : "髖",
"7557" : "髓",
"7558" : "鞣",
"7559" : "高",
"7560" : "銣",
"7561" : "髟",
"7562" : "髠",
"7563" : "髢",
"7564" : "髣",
"7565" : "髦",
"7566" : "髧",
"7567" : "髫",
"7568" : "髭",
"7569" : "髮",
"7570" : "髯",
"7571" : "鬃",
"7572" : "髴",
"7573" : "髻",
"7574" : "髹",
"7575" : "鬆",
"7576" : "鬈",
"7577" : "鬅",
"7578" : "鬋",
"7579" : "鬍",
"7580" : "鬐",
"7581" : "鬒",
"7582" : "鬑",
"7583" : "鬘",
"7584" : "鬔",
"7585" : "鬙",
"7586" : "鬚",
"7587" : "鬟",
"7588" : "鬣",
"7589" : "鬢",
"7590" : "鬎",
"7591" : "鬥",
"7592" : "鬨",
"7593" : "鬧",
"7594" : "鬩",
"7595" : "鬭",
"7596" : "鬮",
"7597" : "銫",
"7598" : "鬯",
"7599" : "鬱",
"7600" : "鍶",
"7601" : "鬲",
"7602" : "鬴",
"7603" : "鬵",
"7604" : "鬷",
"7605" : "鬻",
"7606" : "雟",
"7607" : "鬼",
"7608" : "魁",
"7609" : "魂",
"7610" : "魃",
"7611" : "魄",
"7612" : "魊",
"7613" : "魅",
"7614" : "魏",
"7615" : "魐",
"7616" : "魀",
"7617" : "魈",
"7618" : "魍",
"7619" : "魎",
"7620" : "魑",
"7621" : "魔",
"7622" : "𩴾",
"7623" : "魘",
"7624" : "嗩",
"7625" : "魚",
"7626" : "魷",
"7627" : "魯",
"7628" : "䱅",
"7629" : "魴",
"7630" : "鮎",
"7631" : "鮒",
"7632" : "鮐",
"7633" : "鮓",
"7634" : "鮭",
"7635" : "鮪",
"7636" : "鮆",
"7637" : "鮑",
"7638" : "鯗",
"7639" : "鮮",
"7640" : "鮫",
"7641" : "鯀",
"7642" : "鯉",
"7643" : "鯁",
"7644" : "鯊",
"7645" : "鯖",
"7646" : "鯢",
"7647" : "鯧",
"7648" : "鮳",
"7649" : "鯤",
"7650" : "鯨",
"7651" : "鯽",
"7652" : "𩸞",
"7653" : "鯿",
"7654" : "鰈",
"7655" : "鰍",
"7656" : "鰌",
"7657" : "鰕",
"7658" : "鰓",
"7659" : "鰥",
"7660" : "鰜",
"7661" : "鰣",
"7662" : "鰭",
"7663" : "鰲",
"7664" : "鯰",
"7665" : "鰻",
"7666" : "鯷",
"7667" : "鱉",
"7668" : "鱔",
"7669" : "鱘",
"7670" : "鱟",
"7671" : "鱠",
"7672" : "鱣",
"7673" : "鱗",
"7674" : "鰾",
"7675" : "鱖",
"7676" : "鰵",
"7677" : "鱷",
"7678" : "鱸",
"7679" : "魺",
"7680" : "鳥",
"7681" : "鳦",
"7682" : "鳩",
"7683" : "鳧",
"7684" : "鳲",
"7685" : "鳳",
"7686" : "鳴",
"7687" : "鳶",
"7688" : "鴄",
"7689" : "鴟",
"7690" : "鴆",
"7691" : "鴇",
"7692" : "鴈",
"7693" : "鴉",
"7694" : "鴃",
"7696" : "鴛",
"7697" : "鴞",
"7698" : "鴣",
"7699" : "鴦",
"7700" : "鴨",
"7701" : "鴒",
"7702" : "鴝",
"7703" : "鴻",
"7704" : "鴿",
"7705" : "鴽",
"7706" : "鵀",
"7707" : "鵂",
"7708" : "鵜",
"7709" : "鵝",
"7710" : "鵑",
"7711" : "鵠",
"7712" : "鵓",
"7713" : "鵡",
"7714" : "鵒",
"7715" : "鵪",
"7716" : "鵰",
"7717" : "鵲",
"7718" : "鶉",
"7719" : "鵩",
"7720" : "鵬",
"7721" : "鵾",
"7722" : "鶃",
"7723" : "鶖",
"7724" : "鶘",
"7725" : "鶚",
"7726" : "鶩",
"7727" : "鶯",
"7728" : "鶱",
"7729" : "鶴",
"7730" : "鶵",
"7731" : "鶺",
"7732" : "鶿",
"7733" : "鶊",
"7734" : "鷇",
"7735" : "鶬",
"7736" : "鶹",
"7737" : "鶻",
"7738" : "鶼",
"7739" : "鷁",
"7740" : "鷂",
"7741" : "鷄",
"7742" : "鷃",
"7743" : "鷗",
"7744" : "鷓",
"7745" : "鷕",
"7746" : "鷖",
"7747" : "鷙",
"7748" : "鷥",
"7749" : "鷩",
"7750" : "鷲",
"7751" : "鷹",
"7752" : "鷺",
"7753" : "鷦",
"7754" : "鷯",
"7755" : "鷼",
"7756" : "鷸",
"7757" : "鸇",
"7758" : "鸑",
"7759" : "鷽",
"7760" : "鸕",
"7761" : "鸚",
"7762" : "鸞",
"7763" : "鷟",
"7764" : "鸛",
"7765" : "鸝",
"7766" : "鴹",
"7767" : "鹵",
"7768" : "鹹",
"7769" : "鹼",
"7770" : "鹽",
"7771" : "鹺",
"7772" : "熵",
"7773" : "鹿",
"7774" : "麂",
"7775" : "鈰",
"7776" : "麀",
"7777" : "麃",
"7778" : "麇",
"7779" : "麈",
"7780" : "麋",
"7781" : "麌",
"7782" : "麐",
"7783" : "麑",
"7784" : "麒",
"7785" : "麓",
"7786" : "麕",
"7787" : "麗",
"7788" : "麚",
"7789" : "麛",
"7790" : "麝",
"7791" : "麞",
"7792" : "麟",
"7793" : "麢",
"7794" : "麤",
"7795" : "涮",
"7796" : "麥",
"7797" : "麪",
"7798" : "麯",
"7799" : "麰",
"7800" : "麴",
"7801" : "蒴",
"7802" : "麻",
"7803" : "麽",
"7804" : "麾",
"7805" : "黁",
"7806" : "黃",
"7807" : "黈",
"7808" : "黌",
"7809" : "鉈",
"7810" : "黍",
"7811" : "黏",
"7812" : "黎",
"7813" : "黐",
"7814" : "溚",
"7815" : "黑",
"7816" : "黔",
"7817" : "默",
"7818" : "黛",
"7819" : "黜",
"7820" : "點",
"7821" : "黝",
"7822" : "黠",
"7823" : "黥",
"7824" : "黧",
"7825" : "黨",
"7826" : "黯",
"7827" : "黴",
"7828" : "黮",
"7829" : "黶",
"7830" : "黷",
"7831" : "傣",
"7832" : "黹",
"7833" : "黻",
"7834" : "黼",
"7835" : "鈦",
"7836" : "黽",
"7837" : "黿",
"7838" : "鼃",
"7839" : "鼂",
"7840" : "鼇",
"7841" : "鼈",
"7842" : "鼉",
"7843" : "鉭",
"7844" : "鼎",
"7845" : "鼐",
"7846" : "鼏",
"7847" : "鼒",
"7848" : "冇",
"7849" : "鼓",
"7850" : "鼕",
"7851" : "鼗",
"7852" : "鼖",
"7853" : "鼙",
"7854" : "鼛",
"7855" : "鼚",
"7856" : "羰",
"7857" : "鼠",
"7858" : "鼢",
"7859" : "鼫",
"7860" : "鼬",
"7861" : "鼯",
"7862" : "鼹",
"7863" : "鼷",
"7864" : "醣",
"7865" : "鼻",
"7866" : "鼽",
"7867" : "鼾",
"7868" : "齁",
"7869" : "齅",
"7870" : "鋱",
"7871" : "齊",
"7872" : "齋",
"7873" : "齎",
"7874" : "齏",
"7875" : "菾",
"7876" : "齒",
"7877" : "齔",
"7878" : "齕",
"7879" : "齗",
"7880" : "齟",
"7881" : "齡",
"7882" : "齠",
"7883" : "齦",
"7884" : "齧",
"7885" : "齩",
"7886" : "齬",
"7887" : "齪",
"7888" : "齮",
"7889" : "齲",
"7890" : "齶",
"7891" : "齷",
"7892" : "齣",
"7893" : "龍",
"7894" : "龎",
"7895" : "龔",
"7896" : "龕",
"7897" : "舔",
"7898" : "龜",
"7899" : "烴",
"7900" : "龠",
"7901" : "龢",
"7902" : "龥",
"7903" : "楟",
"7904" : "酮",
"7905" : "茼",
"7906" : "烔",
"7907" : "釷",
"7908" : "佤",
"7909" : "烷",
"7910" : "烯",
"7911" : "螅",
"7912" : "氙",
"7913" : "酰",
"7914" : "鱈",
"7915" : "蕁",
"7916" : "埡",
"7917" : "銥",
"7918" : "釔",
"7919" : "鐿",
"7920" : "銦",
"7921" : "銪",
"7922" : "冮",
"7923" : "鱒",
"7924" : "蟑",
"7925" : "礃",
"7926" : "鍺",
"7927" : "酯",
"7928" : "勐",
"7929" : "呋",
"7930" : "喹",
"7931" : "嗪",
"7932" : "嗡",
"7933" : "圐",
"7934" : "圙",
"7935" : "坬",
"7936" : "垾",
"7937" : "堼",
"7938" : "塂",
"7939" : "墈",
"7940" : "岽",
"7941" : "峧",
"7942" : "崀",
"7943" : "崅",
"7944" : "崌",
"7945" : "崾",
"7946" : "嶅",
"7947" : "挎",
"7948" : "捅",
"7949" : "改",
"7950" : "旻",
"7951" : "杞",
"7952" : "朿",
"7953" : "槠",
"7954" : "浐",
"7955" : "浕",
"7956" : "浉",
"7957" : "浈",
"7958" : "洨",
"7959" : "涢",
"7960" : "浛",
"7961" : "涠",
"7962" : "浯",
"7963" : "涭",
"7964" : "溵",
"7965" : "潖",
"7966" : "澛",
"7967" : "潵",
"7968" : "榃",
"7969" : "痄",
"7970" : "疰",
"7971" : "砼",
"7972" : "磜",
"7973" : "礅",
"7974" : "磙",
"7975" : "礳",
"7976" : "簕",
"7977" : "羧",
"7978" : "耢",
"7979" : "朊",
"7980" : "胂",
"7981" : "腈",
"7982" : "脿",
"7983" : "腩",
"7984" : "艿",
"7985" : "苄",
"7986" : "萜",
"7987" : "蚍",
"7988" : "蚴",
"7989" : "蛘",
"7990" : "觃",
"7991" : "轱",
"7992" : "轷",
"7993" : "鄌",
"7994" : "酞",
"7995" : "铹",
"7996" : "锛",
"7997" : "锘",
"7998" : "雒",
"7999" : "靰",
"8000" : "丌",
"8001" : "万",
"8002" : "丘",
"8003" : "乒",
"8004" : "乓",
"8005" : "甭",
"8006" : "孬",
"8007" : "饸",
"8008" : "饹",
"8009" : "丳",
"8010" : "么",
"8011" : "骶",
"8012" : "乩",
"8013" : "亄",
"8014" : "肮",
"8015" : "亍",
"8016" : "亓",
"8017" : "亘",
"8018" : "亝",
"8019" : "鲖",
"8020" : "仈",
"8021" : "仂",
"8022" : "仉",
"8023" : "伈",
"8024" : "伃",
"8025" : "伀",
"8026" : "伽",
"8027" : "佉",
"8028" : "佇",
"8029" : "佂",
"8030" : "伾",
"8031" : "佽",
"8032" : "佼",
"8033" : "佹",
"8034" : "佴",
"8035" : "佫",
"8036" : "佌",
"8037" : "侢",
"8038" : "侜",
"8039" : "侚",
"8040" : "侘",
"8041" : "侐",
"8042" : "侁",
"8043" : "侀",
"8044" : "俔",
"8045" : "俅",
"8046" : "俥",
"8047" : "俌",
"8049" : "俁",
"8050" : "俤",
"8051" : "侴",
"8052" : "倅",
"8053" : "倢",
"8054" : "倞",
"8055" : "倴",
"8056" : "倔",
"8057" : "俴",
"8059" : "偲",
"8060" : "偫",
"8061" : "偘",
"8062" : "傁",
"8063" : "偯",
"8064" : "偬",
"8065" : "偩",
"8066" : "偝",
"8067" : "偌",
"8068" : "傔",
"8069" : "傺",
"8070" : "僊",
"8071" : "僎",
"8072" : "僬",
"8073" : "㒆",
"8074" : "僤",
"8075" : "僼",
"8077" : "儩",
"8078" : "儦",
"8079" : "儡",
"8080" : "儺",
"8081" : "儸",
"8082" : "鲘",
"8083" : "鲩",
"8084" : "鲡",
"8085" : "鲮",
"8086" : "屲",
"8087" : "岜",
"8088" : "兙",
"8089" : "兛",
"8090" : "峃",
"8091" : "兝",
"8092" : "兞",
"8093" : "党",
"8094" : "凃",
"8095" : "凊",
"8096" : "减",
"8097" : "掰",
"8098" : "冔",
"8099" : "冨",
"8100" : "氕",
"8101" : "刓",
"8102" : "刜",
"8103" : "剙",
"8104" : "剞",
"8105" : "劂",
"8106" : "劌",
"8107" : "劖",
"8108" : "劚",
"8109" : "鲝",
"8110" : "鲱",
"8111" : "勑",
"8112" : "勔",
"8113" : "勛",
"8114" : "勡",
"8115" : "鲴",
"8116" : "匆",
"8117" : "卼",
"8118" : "厖",
"8119" : "叐",
"8120" : "吋",
"8121" : "吔",
"8122" : "吪",
"8123" : "吱",
"8124" : "吽",
"8125" : "呎",
"8126" : "听",
"8127" : "吰",
"8128" : "呭",
"8129" : "咈",
"8130" : "咍",
"8131" : "咚",
"8132" : "咡",
"8133" : "咢",
"8134" : "咥",
"8135" : "哆",
"8136" : "咻",
"8137" : "咟",
"8138" : "咮",
"8139" : "咼",
"8140" : "唎",
"8141" : "哤",
"8142" : "唄",
"8143" : "唑",
"8144" : "哢",
"8145" : "啗",
"8146" : "唪",
"8147" : "唼",
"8148" : "啐",
"8149" : "啍",
"8150" : "唶",
"8151" : "喤",
"8152" : "啳",
"8153" : "喴",
"8154" : "喨",
"8155" : "喌",
"8156" : "嗊",
"8157" : "嗈",
"8158" : "嗁",
"8159" : "嗀",
"8160" : "嗿",
"8161" : "嘐",
"8162" : "嘑",
"8163" : "嗹",
"8164" : "嘂",
"8165" : "嘓",
"8166" : "嘌",
"8167" : "嘮",
"8168" : "噙",
"8169" : "噂",
"8170" : "噀",
"8171" : "嘽",
"8172" : "嘸",
"8173" : "噹",
"8174" : "噠",
"8175" : "噳",
"8176" : "噭",
"8177" : "嚌",
"8178" : "嚆",
"8179" : "嚄",
"8180" : "嚃",
"8181" : "嚭",
"8182" : "嚦",
"8183" : "嚕",
"8184" : "嚲",
"8185" : "嚳",
"8186" : "啃",
"8187" : "鳁",
"8188" : "囝",
"8189" : "囡",
"8190" : "囥",
"8191" : "圊",
"8192" : "圌",
"8193" : "圛",
"8194" : "圞",
"8195" : "鳎",
"8196" : "鳙",
"8197" : "圯",
"8198" : "圪",
"8199" : "壳",
"8200" : "𡊐",
"8201" : "坻",
"8202" : "坵",
"8203" : "坱",
"8204" : "坴",
"8205" : "坿",
"8206" : "垇",
"8207" : "垊",
"8208" : "垞",
"8209" : "垤",
"8210" : "垚",
"8211" : "垌",
"8212" : "垗",
"8213" : "垟",
"8214" : "垕",
"8215" : "𡋟",
"8216" : "㘾",
"8217" : "埂",
"8218" : "垻",
"8219" : "垸",
"8220" : "埗",
"8221" : "埆",
"8222" : "埌",
"8223" : "埇",
"8224" : "埕",
"8225" : "埦",
"8226" : "埶",
"8227" : "埽",
"8228" : "堄",
"8229" : "堋",
"8230" : "堉",
"8231" : "堎",
"8232" : "堀",
"8233" : "堌",
"8234" : "埰",
"8235" : "堲",
"8236" : "堧",
"8237" : "塓",
"8238" : "堨",
"8239" : "堍",
"8240" : "堳",
"8241" : "堝",
"8242" : "塬",
"8243" : "塱",
"8244" : "塝",
"8245" : "堽",
"8246" : "墘",
"8247" : "塥",
"8248" : "塷",
"8249" : "塽",
"8250" : "墕",
"8251" : "塈",
"8252" : "墝",
"8253" : "墠",
"8254" : "墫",
"8255" : "壋",
"8256" : "㙮",
"8257" : "𡑍",
"8258" : "墰",
"8259" : "墙",
"8261" : "壒",
"8262" : "墒",
"8263" : "壠",
"8264" : "橦",
"8265" : "螨",
"8266" : "岈",
"8267" : "脒",
"8268" : "夼",
"8269" : "奜",
"8270" : "㚟",
"8271" : "奰",
"8272" : "貌",
"8273" : "妵",
"8274" : "姁",
"8275" : "妸",
"8276" : "姶",
"8277" : "姺",
"8278" : "姽",
"8279" : "娀",
"8280" : "姘",
"8281" : "娒",
"8282" : "娵",
"8283" : "婐",
"8284" : "婞",
"8285" : "娸",
"8286" : "娬",
"8287" : "婤",
"8288" : "嫏",
"8289" : "婥",
"8290" : "媊",
"8291" : "媜",
"8292" : "媄",
"8293" : "媞",
"8294" : "嫈",
"8295" : "媮",
"8296" : "婿",
"8297" : "嫳",
"8298" : "嫽",
"8299" : "嫿",
"8300" : "嫻",
"8301" : "嫵",
"8302" : "嬡",
"8303" : "嬝",
"8304" : "孃",
"8305" : "鞡",
"8311" : "孖",
"8312" : "孻",
"8314" : "寪",
"8315" : "尀",
"8316" : "尟",
"8317" : "屄",
"8318" : "屜",
"8319" : "屪",
"8320" : "屫",
"8321" : "屴",
"8322" : "屼",
"8323" : "岅",
"8324" : "岙",
"8325" : "岍",
"8326" : "岊",
"8327" : "岨",
"8328" : "岬",
"8329" : "岞",
"8330" : "岧",
"8331" : "峇",
"8332" : "峢",
"8333" : "峝",
"8334" : "峹",
"8335" : "峱",
"8337" : "崟",
"8338" : "崞",
"8339" : "崮",
"8340" : "崿",
"8341" : "嶞",
"8342" : "崽",
"8343" : "崴",
"8344" : "嶢",
"8345" : "嵂",
"8346" : "嵼",
"8347" : "嶥",
"8348" : "嶓",
"8349" : "嶮",
"8350" : "嶰",
"8351" : "嶴",
"8352" : "巃",
"8353" : "巇",
"8354" : "巋",
"8360" : "巯",
"8361" : "帣",
"8362" : "幈",
"8363" : "幞",
"8364" : "幠",
"8365" : "幩",
"8366" : "幦",
"8367" : "幨",
"8369" : "庄",
"8370" : "庈",
"8371" : "庤",
"8372" : "𢊈",
"8373" : "廒",
"8374" : "廍",
"8375" : "廎",
"8376" : "廧",
"8381" : "异",
"8382" : "弌",
"8383" : "弎",
"8384" : "甙",
"8385" : "彴",
"8386" : "彽",
"8388" : "忪",
"8389" : "怈",
"8390" : "怳",
"8391" : "怭",
"8392" : "怲",
"8393" : "恇",
"8394" : "恓",
"8395" : "恔",
"8396" : "恵",
"8397" : "惔",
"8398" : "惽",
"8399" : "愃",
"8400" : "愓",
"8401" : "惷",
"8402" : "慉",
"8403" : "憃",
"8404" : "憙",
"8405" : "懠",
"8406" : "懰",
"8407" : "懮",
"8408" : "戁",
"8409" : "戄",
"8414" : "戭",
"8415" : "戹",
"8416" : "戺",
"8418" : "扐",
"8419" : "扢",
"8420" : "扤",
"8421" : "扡",
"8422" : "扦",
"8423" : "拤",
"8424" : "抶",
"8425" : "拑",
"8427" : "拕",
"8428" : "𢪘",
"8429" : "拶",
"8430" : "捚",
"8431" : "挱",
"8432" : "捃",
"8433" : "捘",
"8434" : "捓",
"8435" : "捬",
"8436" : "掗",
"8437" : "掤",
"8438" : "掮",
"8439" : "揸",
"8440" : "揲",
"8441" : "揅",
"8442" : "揗",
"8443" : "揰",
"8444" : "揫",
"8445" : "揎",
"8446" : "揕",
"8447" : "揥",
"8448" : "揶",
"8449" : "揵",
"8450" : "搸",
"8451" : "掔",
"8452" : "搢",
"8453" : "搵",
"8454" : "搊",
"8455" : "搘",
"8456" : "摉",
"8457" : "搌",
"8458" : "搤",
"8459" : "搡",
"8460" : "摠",
"8461" : "撱",
"8462" : "摦",
"8463" : "摲",
"8464" : "摷",
"8465" : "撦",
"8466" : "搿",
"8467" : "𢴇",
"8468" : "𢵧",
"8469" : "撏",
"8470" : "撶",
"8471" : "撳",
"8472" : "𢵈",
"8473" : "撣",
"8474" : "擐",
"8475" : "擖",
"8476" : "擫",
"8477" : "擥",
"8478" : "攟",
"8479" : "掱",
"8489" : "敜",
"8490" : "敫",
"8491" : "敳",
"8492" : "敹",
"8493" : "敿",
"8494" : "斏",
"8496" : "斚",
"8497" : "斠",
"8498" : "斮",
"8499" : "旝",
"8501" : "旴",
"8502" : "昀",
"8503" : "昄",
"8504" : "昊",
"8505" : "昰",
"8506" : "昺",
"8507" : "晅",
"8508" : "晟",
"8509" : "晛",
"8510" : "晧",
"8511" : "晜",
"8512" : "晾",
"8513" : "暋",
"8514" : "暌",
"8515" : "暓",
"8516" : "暔",
"8517" : "暲",
"8518" : "曄",
"8519" : "曖",
"8524" : "朌",
"8525" : "朣",
"8527" : "朾",
"8528" : "杇",
"8529" : "杕",
"8530" : "杠",
"8531" : "杗",
"8532" : "杝",
"8533" : "杅",
"8534" : "杙",
"8535" : "杶",
"8536" : "枤",
"8537" : "杻",
"8538" : "枬",
"8539" : "枓",
"8540" : "柷",
"8541" : "枒",
"8542" : "枴",
"8543" : "柂",
"8544" : "柅",
"8545" : "柣",
"8546" : "柤",
"8547" : "柲",
"8548" : "柶",
"8549" : "柸",
"8550" : "栻",
"8551" : "栔",
"8552" : "栝",
"8553" : "栞",
"8554" : "栫",
"8555" : "栭",
"8556" : "栵",
"8557" : "桋",
"8558" : "栒",
"8559" : "栟",
"8560" : "桬",
"8561" : "桭",
"8562" : "梡",
"8563" : "梩",
"8564" : "梴",
"8565" : "梘",
"8566" : "棑",
"8567" : "棜",
"8568" : "棪",
"8569" : "棸",
"8570" : "椌",
"8571" : "椏",
"8572" : "椑",
"8573" : "楰",
"8574" : "楙",
"8575" : "楀",
"8576" : "楂",
"8577" : "楄",
"8578" : "楎",
"8579" : "楬",
"8580" : "𣗬",
"8581" : "槩",
"8582" : "樲",
"8583" : "樠",
"8584" : "槼",
"8585" : "𣛮",
"8586" : "樿",
"8587" : "橇",
"8588" : "橤",
"8589" : "檎",
"8590" : "燊",
"8591" : "樳",
"8592" : "橒",
"8593" : "檇",
"8594" : "檑",
"8595" : "橚",
"8596" : "檴",
"8597" : "橣",
"8598" : "檿",
"8599" : "櫉",
"8600" : "檙",
"8601" : "櫫",
"8602" : "櫌",
"8603" : "櫸",
"8604" : "欑",
"8605" : "欙",
"8606" : "樴",
"8616" : "欼",
"8617" : "歈",
"8618" : "歁",
"8619" : "歊",
"8620" : "歗",
"8621" : "歜",
"8623" : "歾",
"8624" : "殈",
"8625" : "殣",
"8626" : "殭",
"8628" : "毈",
"8632" : "毚",
"8633" : "毿",
"8635" : "氞",
"8636" : "氟",
"8637" : "氨",
"8638" : "氧",
"8639" : "氥",
"8640" : "氦",
"8641" : "氫",
"8642" : "氰",
"8643" : "氱",
"8644" : "氮",
"8645" : "氬",
"8646" : "㲶",
"8647" : "氘",
"8648" : "氚",
"8659" : "氿",
"8660" : "汆",
"8661" : "沄",
"8662" : "沇",
"8663" : "沕",
"8664" : "泂",
"8665" : "況",
"8666" : "泒",
"8667" : "泃",
"8668" : "泜",
"8669" : "泚",
"8670" : "洏",
"8671" : "洴",
"8672" : "洤",
"8673" : "涌",
"8674" : "涖",
"8675" : "涒",
"8676" : "浭",
"8677" : "浤",
"8678" : "浧",
"8679" : "涊",
"8680" : "浼",
"8681" : "淖",
"8682" : "淟",
"8683" : "淜",
"8684" : "淓",
"8685" : "淠",
"8686" : "淢",
"8687" : "渟",
"8688" : "渢",
"8689" : "湑",
"8690" : "湩",
"8691" : "溦",
"8692" : "淥",
"8693" : "淼",
"8694" : "渲",
"8695" : "渼",
"8696" : "湢",
"8697" : "溏",
"8698" : "湋",
"8699" : "渫",
"8700" : "溴",
"8701" : "滉",
"8702" : "滏",
"8703" : "滺",
"8704" : "漰",
"8705" : "潌",
"8706" : "漎",
"8707" : "漋",
"8708" : "漷",
"8709" : "澉",
"8710" : "澐",
"8711" : "潚",
"8712" : "濔",
"8713" : "濙",
"8714" : "瀅",
"8715" : "瀌",
"8716" : "瀞",
"8717" : "瀵",
"8718" : "瀳",
"8719" : "灋",
"8720" : "灥",
"8721" : "澁",
"8731" : "灺",
"8732" : "炅",
"8733" : "𤆬",
"8734" : "炤",
"8735" : "炁",
"8736" : "烖",
"8737" : "烓",
"8738" : "烚",
"8739" : "烳",
"8740" : "焄",
"8741" : "烱",
"8742" : "焫",
"8743" : "焯",
"8744" : "焻",
"8745" : "𤉶",
"8746" : "焱",
"8747" : "焴",
"8748" : "煇",
"8749" : "煃",
"8750" : "煁",
"8751" : "煐",
"8752" : "煝",
"8753" : "煚",
"8754" : "煟",
"8755" : "𤌚",
"8756" : "熉",
"8757" : "熿",
"8758" : "熤",
"8759" : "熳",
"8760" : "燂",
"8761" : "燋",
"8762" : "燏",
"8763" : "烨",
"8764" : "燨",
"8765" : "燡",
"8766" : "燫",
"8767" : "爥",
"8778" : "牏",
"8779" : "牐",
"8781" : "牮",
"8782" : "牶",
"8783" : "牼",
"8784" : "㹀",
"8785" : "犆",
"8786" : "犇",
"8787" : "犄",
"8788" : "犔",
"8789" : "犛",
"8790" : "犫",
"8794" : "犵",
"8795" : "犺",
"8796" : "狅",
"8797" : "狉",
"8798" : "狘",
"8799" : "狨",
"8800" : "狫",
"8801" : "狧",
"8802" : "猈",
"8803" : "猋",
"8804" : "猨",
"8805" : "猆",
"8806" : "猲",
"8807" : "獀",
"8808" : "獆",
"8809" : "獝",
"8810" : "獢",
"8811" : "獫",
"8812" : "𤢛",
"8813" : "獼",
"8814" : "獾",
"8818" : "玗",
"8819" : "玥",
"8820" : "玶",
"8821" : "珛",
"8822" : "珔",
"8823" : "珺",
"8824" : "琱",
"8825" : "琼",
"8826" : "琷",
"8827" : "琰",
"8828" : "琺",
"8829" : "琿",
"8830" : "瑄",
"8831" : "瑂",
"8832" : "瑔",
"8833" : "瑢",
"8834" : "璉",
"8835" : "瑭",
"8836" : "璂",
"8837" : "璅",
"8838" : "璊",
"8839" : "璚",
"8840" : "璩",
"8841" : "璭",
"8842" : "璦",
"8843" : "瓌",
"8844" : "瓖",
"8846" : "瓗",
"8850" : "甀",
"8851" : "甆",
"8852" : "甒",
"8853" : "甏",
"8856" : "甤",
"8858" : "畈",
"8859" : "疃",
"8861" : "疕",
"8862" : "疘",
"8863" : "疞",
"8864" : "疢",
"8865" : "疷",
"8867" : "痁",
"8868" : "疶",
"8869" : "痐",
"8870" : "痗",
"8871" : "痤",
"8872" : "痯",
"8873" : "瘃",
"8874" : "痻",
"8875" : "瘄",
"8876" : "瘈",
"8877" : "瘌",
"8878" : "瘨",
"8879" : "瘬",
"8880" : "瘭",
"8881" : "瘯",
"8882" : "瘶",
"8883" : "癉",
"8884" : "癒",
"8885" : "癙",
"8886" : "癏",
"8887" : "癠",
"8888" : "癳",
"8895" : "癿",
"8896" : "盚",
"8898" : "盵",
"8899" : "盰",
"8900" : "眊",
"8901" : "盹",
"8902" : "眂",
"8903" : "眅",
"8904" : "眚",
"8905" : "眢",
"8906" : "眎",
"8907" : "眏",
"8908" : "眕",
"8909" : "眴",
"8910" : "睊",
"8911" : "睅",
"8912" : "睠",
"8913" : "睒",
"8914" : "睙",
"8915" : "睽",
"8916" : "睻",
"8917" : "瞏",
"8918" : "瞟",
"8919" : "瞫",
"8920" : "矔",
"8925" : "矟",
"8926" : "矬",
"8928" : "矽",
"8929" : "砃",
"8930" : "砅",
"8931" : "砢",
"8932" : "砣",
"8933" : "砠",
"8934" : "砞",
"8935" : "砝",
"8936" : "砫",
"8937" : "砵",
"8938" : "砷",
"8939" : "砳",
"8940" : "砽",
"8941" : "硍",
"8942" : "硈",
"8943" : "硐",
"8944" : "硅",
"8945" : "硔",
"8946" : "硋",
"8947" : "硭",
"8948" : "硪",
"8949" : "碆",
"8950" : "碏",
"8951" : "碚",
"8952" : "碈",
"8954" : "碞",
"8955" : "碳",
"8956" : "碶",
"8957" : "硻",
"8958" : "磒",
"8959" : "碻",
"8960" : "磛",
"8961" : "磟",
"8962" : "磡",
"8963" : "𥕕",
"8964" : "𥖁",
"8965" : "礄",
"8966" : "磵",
"8967" : "磹",
"8968" : "礞",
"8969" : "礆",
"8970" : "硒",
"8972" : "碃",
"8980" : "祙",
"8981" : "禚",
"8982" : "禜",
"8983" : "禤",
"8984" : "禴",
"8986" : "秴",
"8987" : "稙",
"8988" : "稑",
"8989" : "稺",
"8990" : "穈",
"8991" : "穧",
"8992" : "穮",
"8993" : "稖",
"8999" : "窊",
"9000" : "窔",
"9001" : "窴",
"9002" : "窿",
"9003" : "竏",
"9004" : "竢",
"9005" : "竜",
"9006" : "竾",
"9007" : "笰",
"9008" : "笲",
"9009" : "笵",
"9010" : "筘",
"9011" : "筳",
"9012" : "筦",
"9013" : "筭",
"9014" : "箄",
"9015" : "箙",
"9016" : "篜",
"9017" : "篟",
"9018" : "篥",
"9019" : "篹",
"9020" : "簉",
"9021" : "篢",
"9022" : "簹",
"9023" : "簰",
"9024" : "籝",
"9025" : "籣",
"9026" : "籭",
"9032" : "粁",
"9033" : "粍",
"9034" : "粎",
"9035" : "粞",
"9036" : "粦",
"9037" : "粮",
"9038" : "粻",
"9039" : "粿",
"9040" : "粽",
"9041" : "糅",
"9042" : "糓",
"9043" : "糔",
"9044" : "糢",
"9045" : "糦",
"9046" : "糰",
"9047" : "糳",
"9048" : "糌",
"9052" : "紃",
"9053" : "紖",
"9054" : "紑",
"9055" : "紕",
"9056" : "紩",
"9057" : "紲",
"9058" : "絓",
"9059" : "綎",
"9060" : "綖",
"9061" : "絻",
"9062" : "綅",
"9063" : "綪",
"9064" : "緄",
"9065" : "緙",
"9066" : "緜",
"9067" : "緰",
"9068" : "縇",
"9069" : "緓",
"9070" : "縏",
"9071" : "緱",
"9072" : "縚",
"9073" : "縿",
"9074" : "繘",
"9075" : "繠",
"9076" : "纕",
"9077" : "纙",
"9083" : "缽",
"9084" : "罎",
"9086" : "罦",
"9087" : "罻",
"9088" : "罾",
"9090" : "羋",
"9091" : "羖",
"9092" : "羭",
"9093" : "羱",
"9095" : "羾",
"9096" : "翃",
"9097" : "翫",
"9098" : "翪",
"9100" : "耏",
"9101" : "耤",
"9102" : "耯",
"9105" : "聓",
"9106" : "聝",
"9107" : "聱",
"9109" : "肜",
"9110" : "肧",
"9111" : "肵",
"9112" : "肪",
"9113" : "胛",
"9114" : "胟",
"9115" : "脉",
"9116" : "胆",
"9117" : "脃",
"9118" : "胹",
"9119" : "脄",
"9120" : "脞",
"9121" : "脡",
"9122" : "脥",
"9123" : "脢",
"9124" : "脝",
"9125" : "脰",
"9126" : "脖",
"9127" : "脗",
"9128" : "腂",
"9129" : "腍",
"9130" : "腒",
"9131" : "腌",
"9132" : "腯",
"9133" : "腶",
"9134" : "膇",
"9135" : "膆",
"9136" : "膘",
"9137" : "膟",
"9138" : "膷",
"9139" : "臈",
"9140" : "臑",
"9141" : "臏",
"9142" : "臐",
"9143" : "臛",
"9152" : "舢",
"9153" : "舨",
"9154" : "舺",
"9155" : "舿",
"9156" : "𦩀",
"9157" : "艌",
"9158" : "艑",
"9159" : "艚",
"9160" : "艥",
"9161" : "艣",
"9162" : "艩",
"9163" : "艬",
"9166" : "茓",
"9167" : "芘",
"9168" : "苐",
"9169" : "苠",
"9170" : "荁",
"9171" : "荅",
"9173" : "茬",
"9174" : "莦",
"9175" : "菶",
"9176" : "萐",
"9177" : "菆",
"9178" : "菻",
"9179" : "葍",
"9180" : "蓌",
"9181" : "萴",
"9182" : "葄",
"9183" : "葓",
"9184" : "蒢",
"9185" : "葠",
"9186" : "蓪",
"9187" : "蓘",
"9188" : "蓺",
"9189" : "蔒",
"9190" : "蓯",
"9191" : "蓷",
"9192" : "蔋",
"9193" : "蔙",
"9194" : "𦼖",
"9195" : "薸",
"9196" : "薾",
"9197" : "藘",
"9198" : "藙",
"9199" : "蘐",
"9200" : "蘤",
"9201" : "蘺",
"9213" : "虒",
"9214" : "虖",
"9217" : "虯",
"9218" : "蚔",
"9219" : "蚠",
"9220" : "蚳",
"9221" : "蛓",
"9222" : "蜑",
"9223" : "蜆",
"9224" : "蜺",
"9225" : "蝃",
"9226" : "蜨",
"9227" : "蝓",
"9228" : "蝏",
"9229" : "蝡",
"9230" : "蝤",
"9231" : "螓",
"9232" : "蝯",
"9233" : "蝝",
"9234" : "螥",
"9235" : "螉",
"9236" : "螗",
"9237" : "螵",
"9238" : "蟁",
"9239" : "蟜",
"9240" : "蟢",
"9241" : "蠋",
"9242" : "蠐",
"9243" : "蠙",
"9244" : "蠭",
"9245" : "蠮",
"9252" : "袇",
"9253" : "衺",
"9254" : "袲",
"9255" : "袺",
"9256" : "袽",
"9257" : "袿",
"9258" : "裋",
"9259" : "褕",
"9260" : "褳",
"9261" : "褽",
"9262" : "襔",
"9263" : "𧝞",
"9264" : "襛",
"9265" : "襍",
"9266" : "𧞅",
"9267" : "襜",
"9268" : "襞",
"9269" : "襡",
"9270" : "襢",
"9271" : "襋",
"9272" : "襆",
"9273" : "襮",
"9274" : "襬",
"9278" : "觜",
"9279" : "觡",
"9280" : "觷",
"9282" : "訆",
"9283" : "訧",
"9284" : "訽",
"9285" : "詉",
"9286" : "詊",
"9287" : "詗",
"9288" : "詧",
"9289" : "詻",
"9290" : "詾",
"9291" : "誃",
"9292" : "詨",
"9293" : "諆",
"9294" : "諢",
"9295" : "謌",
"9296" : "謷",
"9297" : "譈",
"9298" : "譆",
"9299" : "譅",
"9300" : "讅",
"9301" : "讕",
"9302" : "讑",
"9303" : "讇",
"9314" : "豀",
"9315" : "豗",
"9316" : "豜",
"9317" : "豶",
"9318" : "豷",
"9320" : "豻",
"9321" : "貜",
"9322" : "貟",
"9323" : "賩",
"9324" : "𧶔",
"9325" : "趡",
"9326" : "趫",
"9327" : "趯",
"9328" : "趲",
"9330" : "跁",
"9331" : "跱",
"9332" : "跤",
"9333" : "跦",
"9334" : "跲",
"9335" : "跧",
"9337" : "踦",
"9338" : "踪",
"9339" : "䠀",
"9340" : "踤",
"9341" : "踶",
"9342" : "蹆",
"9343" : "蹏",
"9344" : "蹝",
"9345" : "蹩",
"9346" : "蹧",
"9347" : "蹷",
"9348" : "蹻",
"9349" : "蹼",
"9350" : "躗",
"9351" : "躞",
"9352" : "躘",
"9353" : "躧",
"9359" : "軘",
"9360" : "軜",
"9361" : "軝",
"9362" : "軥",
"9363" : "軻",
"9364" : "轊",
"9365" : "轑",
"9366" : "轗",
"9367" : "轝",
"9368" : "轔",
"9374" : "迮",
"9375" : "𨔁",
"9376" : "逴",
"9377" : "遫",
"9378" : "遰",
"9379" : "遻",
"9380" : "邋",
"9386" : "邘",
"9387" : "邧",
"9388" : "郉",
"9389" : "邿",
"9390" : "郈",
"9391" : "郔",
"9392" : "郚",
"9393" : "郠",
"9394" : "郪",
"9395" : "郫",
"9396" : "郳",
"9397" : "鄀",
"9398" : "鄆",
"9399" : "鄇",
"9400" : "鄋",
"9401" : "郾",
"9402" : "鄓",
"9403" : "鄍",
"9404" : "鄎",
"9405" : "鄏",
"9406" : "鄐",
"9407" : "鄑",
"9408" : "鄈",
"9409" : "鄚",
"9410" : "鄣",
"9411" : "鄤",
"9412" : "鄩",
"9413" : "鄬",
"9414" : "鄻",
"9415" : "鄿",
"9416" : "鄾",
"9417" : "酅",
"9426" : "酏",
"9427" : "醎",
"9428" : "醑",
"9429" : "醝",
"9430" : "醹",
"9431" : "醻",
"9432" : "釃",
"9433" : "釅",
"9437" : "釙",
"9438" : "釤",
"9439" : "釬",
"9441" : "釸",
"9442" : "鈒",
"9443" : "鈁",
"9444" : "鈊",
"9445" : "鈄",
"9446" : "鈃",
"9447" : "鉌",
"9448" : "鈹",
"9449" : "鉆",
"9450" : "鉚",
"9451" : "鉎",
"9452" : "鉥",
"9453" : "鉬",
"9454" : "銎",
"9455" : "銍",
"9456" : "銬",
"9457" : "鉷",
"9458" : "銈",
"9459" : "鉻",
"9460" : "銶",
"9461" : "鋘",
"9462" : "鋆",
"9463" : "鋕",
"9464" : "鋐",
"9465" : "鋰",
"9466" : "鋝",
"9467" : "鋃",
"9468" : "鋇",
"9469" : "鋂",
"9470" : "錀",
"9471" : "錖",
"9472" : "錏",
"9473" : "錶",
"9474" : "錔",
"9475" : "鍁",
"9476" : "錂",
"9477" : "錟",
"9478" : "錆",
"9479" : "鉼",
"9480" : "錩",
"9481" : "錁",
"9482" : "鍪",
"9483" : "鍫",
"9484" : "鍘",
"9485" : "鎂",
"9486" : "鍚",
"9487" : "鍈",
"9488" : "鍹",
"9489" : "鎉",
"9490" : "鎦",
"9491" : "鎤",
"9492" : "鍏",
"9493" : "鎘",
"9494" : "鎩",
"9495" : "鏊",
"9496" : "蓥",
"9497" : "鎏",
"9498" : "鏦",
"9499" : "鐄",
"9500" : "鏇",
"9501" : "鏛",
"9502" : "鏚",
"9503" : "鐓",
"9504" : "鐉",
"9505" : "鐧",
"9506" : "鐠",
"9507" : "鐐",
"9508" : "鐏",
"9509" : "鐔",
"9510" : "鐝",
"9511" : "鐩",
"9512" : "鏻",
"9513" : "鑅",
"9514" : "鑕",
"9515" : "鑫",
"9516" : "鑯",
"9527" : "閙",
"9528" : "閧",
"9529" : "闑",
"9532" : "阽",
"9533" : "陑",
"9534" : "陾",
"9535" : "隃",
"9536" : "随",
"9537" : "隵",
"9538" : "𨻧",
"9540" : "雂",
"9541" : "雃",
"9544" : "𩂯",
"9545" : "霙",
"9546" : "霣",
"9547" : "靁",
"9552" : "靝",
"9554" : "靮",
"9555" : "靺",
"9556" : "鞃",
"9557" : "靼",
"9558" : "鞌",
"9559" : "鞛",
"9560" : "鞨",
"9561" : "鞸",
"9562" : "鞹",
"9563" : "韅",
"9570" : "韡",
"9571" : "韣",
"9573" : "韹",
"9575" : "頄",
"9576" : "頲",
"9577" : "頜",
"9578" : "頟",
"9579" : "頠",
"9580" : "𩓚",
"9581" : "顒",
"9582" : "顗",
"9587" : "颮",
"9588" : "𩗗",
"9589" : "颽",
"9592" : "飜",
"9594" : "飥",
"9595" : "餈",
"9596" : "餤",
"9597" : "餵",
"9598" : "餪",
"9599" : "餫",
"9600" : "餿",
"9601" : "餺",
"9602" : "餻",
"9603" : "饍",
"9604" : "饘",
"9606" : "餜",
"9611" : "馪",
"9613" : "馵",
"9614" : "駓",
"9615" : "駔",
"9616" : "駴",
"9617" : "駽",
"9618" : "駾",
"9619" : "騆",
"9620" : "騢",
"9621" : "騯",
"9622" : "驦",
"9623" : "驫",
"9629" : "髁",
"9631" : "髳",
"9632" : "髽",
"9633" : "鬁",
"9635" : "魆",
"9636" : "魋",
"9637" : "魗",
"9639" : "魨",
"9640" : "鮀",
"9642" : "鮞",
"9643" : "鮚",
"9644" : "鯈",
"9645" : "鮿",
"9646" : "鯫",
"9647" : "鯔",
"9648" : "鯛",
"9649" : "鰂",
"9650" : "鰉",
"9651" : "鰋",
"9652" : "鰒",
"9653" : "鰐",
"9654" : "鰱",
"9655" : "鰷",
"9656" : "鱄",
"9657" : "鱎",
"9658" : "鱏",
"9659" : "鱓",
"9660" : "鱐",
"9661" : "鱧",
"9662" : "鱭",
"9663" : "鱮",
"9664" : "鱯",
"9665" : "鱨",
"9666" : "鱻",
"9667" : "鰼",
"9673" : "鳷",
"9674" : "瞗",
"9675" : "鴥",
"9676" : "鴕",
"9677" : "鵷",
"9678" : "鵻",
"9679" : "鶡",
"9680" : "鷊",
"9681" : "鷫",
"9682" : "鸂",
"9683" : "𪆵",
"9684" : "鸘",
"9690" : "麩",
"9691" : "麱",
"9692" : "麵",
"9694" : "黟",
"9695" : "黰",
"9696" : "鼪",
"9697" : "鼴",
"9699" : "龡"}

CCC_simplified_writer = {"一" : "0001",
"丁" : "0002",
"七" : "0003",
"丈" : "0004",
"三" : "0005",
"上" : "0006",
"下" : "0007",
"不" : "0008",
"丐" : "0009",
"丑" : "0010",
"且" : "0011",
"丕" : "0012",
"世" : "0013",
"丙" : "0014",
"丞" : "0015",
"丢" : "0016",
"並" : "0017",
"丏" : "0018",
"丨" : "0019",
"个" : "0020",
"丫" : "0021",
"中" : "0022",
"丰" : "0023",
"丱" : "0024",
"串" : "0025",
"锕" : "0026",
"丶" : "0027",
"锿" : "0028",
"丸" : "0029",
"丹" : "0030",
"主" : "0031",
"砹" : "0032",
"丿" : "0033",
"乂" : "0034",
"乃" : "0035",
"久" : "0036",
"之" : "0037",
"乍" : "0038",
"乎" : "0039",
"乏" : "0040",
"乖" : "0041",
"乘" : "0042",
"桉" : "0043",
"乙" : "0044",
"乜" : "0045",
"九" : "0046",
"乞" : "0047",
"也" : "0048",
"亁" : "0049",
"乳" : "0050",
"乾" : "0051",
"乱" : "0052",
"凼" : "0053",
"亅" : "0054",
"了" : "0055",
"予" : "0056",
"事" : "0057",
"苯" : "0058",
"二" : "0059",
"于" : "0060",
"云" : "0061",
"互" : "0062",
"五" : "0063",
"井" : "0064",
"亙" : "0065",
"些" : "0067",
"亚" : "0068",
"亟" : "0069",
"吡" : "0070",
"亠" : "0071",
"亡" : "0072",
"亢" : "0073",
"交" : "0074",
"亥" : "0075",
"亦" : "0076",
"亨" : "0077",
"享" : "0078",
"京" : "0079",
"亭" : "0080",
"亮" : "0081",
"亳" : "0082",
"亶" : "0083",
"亹" : "0084",
"醭" : "0085",
"人" : "0086",
"什" : "0087",
"仁" : "0088",
"仃" : "0089",
"仄" : "0090",
"仆" : "0091",
"仇" : "0092",
"今" : "0093",
"介" : "0094",
"仍" : "0095",
"佣" : "0096",
"佬" : "0097",
"仔" : "0098",
"仕" : "0099",
"他" : "0100",
"仗" : "0101",
"付" : "0102",
"仙" : "0103",
"仝" : "0104",
"仞" : "0105",
"仡" : "0106",
"仟" : "0107",
"代" : "0108",
"令" : "0109",
"以" : "0110",
"仰" : "0111",
"仲" : "0112",
"仳" : "0113",
"仵" : "0114",
"件" : "0115",
"价" : "0116",
"任" : "0117",
"份" : "0118",
"仿" : "0119",
"企" : "0120",
"伉" : "0121",
"伊" : "0122",
"伋" : "0123",
"伍" : "0124",
"伎" : "0125",
"伏" : "0126",
"伐" : "0127",
"休" : "0128",
"伙" : "0129",
"伯" : "0130",
"估" : "0131",
"你" : "0132",
"伴" : "0133",
"伶" : "0134",
"伸" : "0135",
"伺" : "0136",
"伻" : "0137",
"似" : "0138",
"倮" : "0139",
"佃" : "0140",
"但" : "0141",
"佈" : "0142",
"位" : "0143",
"低" : "0144",
"住" : "0145",
"佐" : "0146",
"佑" : "0147",
"佔" : "0148",
"何" : "0149",
"佗" : "0150",
"余" : "0151",
"佘" : "0152",
"佚" : "0153",
"佛" : "0154",
"作" : "0155",
"佞" : "0156",
"佟" : "0157",
"佺" : "0158",
"傢" : "0159",
"佩" : "0160",
"佪" : "0161",
"佯" : "0162",
"佳" : "0163",
"併" : "0164",
"佶" : "0165",
"佸" : "0166",
"佻" : "0167",
"佾" : "0168",
"使" : "0169",
"侃" : "0170",
"来" : "0171",
"侈" : "0172",
"例" : "0173",
"侍" : "0174",
"侏" : "0175",
"侑" : "0176",
"侔" : "0177",
"仑" : "0178",
"侗" : "0179",
"供" : "0180",
"依" : "0181",
"侷" : "0182",
"伕" : "0183",
"佰" : "0184",
"侮" : "0185",
"侯" : "0186",
"侵" : "0187",
"侣" : "0188",
"便" : "0189",
"係" : "0190",
"促" : "0191",
"俄" : "0192",
"俊" : "0193",
"俎" : "0194",
"俏" : "0195",
"俐" : "0196",
"俑" : "0197",
"俗" : "0198",
"俘" : "0199",
"俚" : "0200",
"俛" : "0201",
"保" : "0202",
"俟" : "0203",
"侠" : "0204",
"俞" : "0205",
"俫" : "0206",
"信" : "0207",
"修" : "0208",
"俶" : "0209",
"伥" : "0210",
"働" : "0211",
"倌" : "0212",
"倬" : "0213",
"俯" : "0214",
"俱" : "0215",
"俳" : "0216",
"俵" : "0217",
"俸" : "0218",
"俺" : "0219",
"俾" : "0220",
"仓" : "0221",
"個" : "0222",
"倍" : "0223",
"俩" : "0224",
"倏" : "0225",
"们" : "0226",
"倒" : "0227",
"倖" : "0228",
"倘" : "0229",
"候" : "0230",
"倚" : "0231",
"倜" : "0232",
"倂" : "0233",
"借" : "0234",
"倡" : "0235",
"倣" : "0236",
"值" : "0237",
"倥" : "0238",
"倦" : "0239",
"倨" : "0240",
"倩" : "0241",
"倪" : "0242",
"伦" : "0243",
"倭" : "0244",
"偈" : "0245",
"偎" : "0246",
"傻" : "0247",
"偁" : "0248",
"偃" : "0249",
"假" : "0250",
"伟" : "0251",
"偏" : "0252",
"偕" : "0253",
"做" : "0254",
"停" : "0255",
"健" : "0256",
"偪" : "0257",
"侧" : "0258",
"侦" : "0259",
"偶" : "0260",
"傎" : "0261",
"偷" : "0262",
"伧" : "0263",
"傀" : "0264",
"傅" : "0265",
"傍" : "0266",
"傑" : "0267",
"傒" : "0268",
"傈" : "0269",
"伞" : "0270",
"备" : "0271",
"傚" : "0272",
"傞" : "0273",
"傜" : "0274",
"催" : "0275",
"傭" : "0276",
"傲" : "0277",
"传" : "0278",
"伛" : "0279",
"债" : "0280",
"伤" : "0281",
"倾" : "0282",
"偻" : "0283",
"仅" : "0284",
"僇" : "0285",
"佥" : "0286",
"僳" : "0287",
"像" : "0288",
"僱" : "0289",
"僦" : "0291",
"偾" : "0292",
"僩" : "0293",
"侨" : "0294",
"僕" : "0295",
"僖" : "0296",
"僚" : "0297",
"伪" : "0298",
"侥" : "0299",
"僧" : "0300",
"僭" : "0301",
"僮" : "0302",
"儁" : "0303",
"僵" : "0304",
"價" : "0305",
"僻" : "0306",
"僾" : "0307",
"仪" : "0308",
"侬" : "0309",
"亿" : "0310",
"儆" : "0311",
"侩" : "0312",
"俭" : "0313",
"傤" : "0314",
"儌" : "0315",
"僰" : "0316",
"儋" : "0317",
"儇" : "0318",
"傧" : "0319",
"儒" : "0320",
"俦" : "0321",
"侪" : "0322",
"儗" : "0323",
"儘" : "0324",
"儤" : "0325",
"偿" : "0326",
"优" : "0327",
"储" : "0328",
"儳" : "0329",
"俪" : "0330",
"傥" : "0331",
"俨" : "0332",
"兡" : "0333",
"儿" : "0334",
"兀" : "0335",
"允" : "0336",
"元" : "0337",
"兄" : "0338",
"充" : "0339",
"兆" : "0340",
"先" : "0341",
"光" : "0342",
"兇" : "0343",
"克" : "0344",
"兑" : "0345",
"免" : "0346",
"兔" : "0347",
"兒" : "0348",
"兕" : "0349",
"兖" : "0350",
"兜" : "0351",
"兢" : "0352",
"兣" : "0353",
"入" : "0354",
"内" : "0355",
"全" : "0356",
"两" : "0357",
"兪" : "0358",
"钚" : "0359",
"八" : "0360",
"公" : "0361",
"六" : "0362",
"兮" : "0363",
"共" : "0364",
"兵" : "0365",
"其" : "0366",
"具" : "0367",
"典" : "0368",
"兼" : "0369",
"冀" : "0370",
"糍" : "0371",
"冂" : "0372",
"冉" : "0373",
"册" : "0374",
"再" : "0375",
"冏" : "0376",
"冓" : "0377",
"冑" : "0378",
"冒" : "0379",
"冕" : "0380",
"镩" : "0381",
"冖" : "0382",
"冗" : "0383",
"冞" : "0384",
"冠" : "0385",
"冢" : "0386",
"冤" : "0387",
"冥" : "0388",
"幂" : "0389",
"耖" : "0390",
"冫" : "0391",
"冬" : "0392",
"冰" : "0393",
"冲" : "0394",
"冱" : "0395",
"冶" : "0396",
"冷" : "0397",
"冸" : "0398",
"冽" : "0399",
"况" : "0400",
"凄" : "0401",
"准" : "0402",
"净" : "0403",
"凉" : "0404",
"冼" : "0405",
"凋" : "0406",
"凌" : "0407",
"冻" : "0408",
"凑" : "0410",
"凓" : "0411",
"凛" : "0412",
"凝" : "0413",
"决" : "0414",
"几" : "0415",
"凡" : "0416",
"凭" : "0417",
"凯" : "0418",
"凳" : "0419",
"凰" : "0420",
"茌" : "0421",
"凵" : "0422",
"凶" : "0423",
"凸" : "0424",
"凹" : "0425",
"甴" : "0426",
"出" : "0427",
"函" : "0428",
"菪" : "0429",
"刀" : "0430",
"刁" : "0431",
"刃" : "0432",
"分" : "0433",
"切" : "0434",
"刈" : "0435",
"刊" : "0436",
"刎" : "0437",
"刑" : "0438",
"划" : "0439",
"刖" : "0440",
"列" : "0441",
"刨" : "0442",
"初" : "0443",
"删" : "0444",
"判" : "0445",
"别" : "0446",
"刦" : "0447",
"利" : "0448",
"剁" : "0449",
"刮" : "0450",
"到" : "0451",
"刲" : "0452",
"刳" : "0453",
"刵" : "0454",
"制" : "0455",
"刷" : "0456",
"券" : "0457",
"刹" : "0458",
"刺" : "0459",
"剋" : "0460",
"剃" : "0461",
"刭" : "0462",
"则" : "0463",
"剉" : "0464",
"削" : "0465",
"刻" : "0466",
"前" : "0467",
"剜" : "0468",
"剌" : "0469",
"剡" : "0470",
"剔" : "0471",
"剖" : "0472",
"刬" : "0473",
"刚" : "0474",
"剥" : "0475",
"剩" : "0476",
"剪" : "0477",
"剐" : "0478",
"副" : "0479",
"割" : "0480",
"剀" : "0481",
"创" : "0482",
"剸" : "0483",
"剽" : "0484",
"剿" : "0485",
"剠" : "0486",
"劃" : "0487",
"劄" : "0488",
"剧" : "0489",
"劈" : "0490",
"刘" : "0491",
"刽" : "0492",
"剚" : "0493",
"剑" : "0494",
"剂" : "0495",
"劓" : "0496",
"劘" : "0497",
"剷" : "0498",
"剅" : "0499",
"力" : "0500",
"功" : "0501",
"加" : "0502",
"劣" : "0503",
"助" : "0504",
"努" : "0505",
"劫" : "0506",
"劬" : "0507",
"劭" : "0508",
"効" : "0509",
"劻" : "0510",
"劾" : "0511",
"劼" : "0512",
"劲" : "0513",
"勃" : "0514",
"勅" : "0515",
"勇" : "0516",
"勉" : "0517",
"勍" : "0518",
"勒" : "0519",
"动" : "0520",
"勖" : "0521",
"勘" : "0522",
"务" : "0523",
"胜" : "0524",
"劳" : "0525",
"勠" : "0526",
"募" : "0527",
"势" : "0528",
"勣" : "0529",
"勤" : "0530",
"勦" : "0531",
"勚" : "0532",
"勰" : "0533",
"勳" : "0534",
"劢" : "0535",
"励" : "0536",
"勷" : "0537",
"劝" : "0538",
"锝" : "0539",
"勹" : "0540",
"勺" : "0541",
"匀" : "0542",
"勿" : "0543",
"匃" : "0544",
"包" : "0545",
"匈" : "0546",
"匊" : "0547",
"匍" : "0548",
"匏" : "0549",
"匐" : "0550",
"勾" : "0551",
"匕" : "0552",
"化" : "0553",
"北" : "0554",
"匙" : "0555",
"碲" : "0556",
"匚" : "0557",
"匜" : "0558",
"匝" : "0559",
"匟" : "0560",
"匠" : "0561",
"匡" : "0562",
"匣" : "0563",
"匪" : "0564",
"汇" : "0565",
"匮" : "0566",
"匦" : "0567",
"匳" : "0568",
"匵" : "0569",
"啶" : "0570",
"匸" : "0571",
"匹" : "0572",
"匾" : "0573",
"匿" : "0574",
"区" : "0575",
"铥" : "0576",
"十" : "0577",
"千" : "0578",
"廿" : "0579",
"卅" : "0580",
"升" : "0581",
"午" : "0582",
"卉" : "0583",
"半" : "0584",
"卑" : "0585",
"卒" : "0586",
"卓" : "0587",
"协" : "0588",
"南" : "0589",
"博" : "0590",
"㐅" : "0591",
"卜" : "0592",
"卞" : "0593",
"占" : "0594",
"卡" : "0595",
"卣" : "0596",
"卦" : "0597",
"氡" : "0598",
"卩" : "0599",
"卬" : "0600",
"卭" : "0601",
"卯" : "0602",
"印" : "0603",
"危" : "0604",
"卲" : "0605",
"却" : "0606",
"卵" : "0607",
"卷" : "0608",
"卸" : "0609",
"卺" : "0610",
"卻" : "0611",
"卮" : "0612",
"即" : "0613",
"卹" : "0614",
"卿" : "0615",
"胨" : "0616",
"厂" : "0617",
"厄" : "0618",
"厎" : "0619",
"厓" : "0620",
"厔" : "0621",
"厘" : "0622",
"厍" : "0623",
"厚" : "0624",
"厝" : "0625",
"原" : "0626",
"厕" : "0627",
"厥" : "0628",
"厫" : "0629",
"厌" : "0630",
"厮" : "0631",
"厉" : "0632",
"厦" : "0633",
"胴" : "0634",
"厶" : "0635",
"厹" : "0636",
"去" : "0637",
"叁" : "0638",
"参" : "0639",
"叅" : "0640",
"塅" : "0641",
"又" : "0642",
"叉" : "0643",
"及" : "0644",
"友" : "0645",
"反" : "0646",
"叔" : "0647",
"取" : "0648",
"受" : "0649",
"叙" : "0650",
"叛" : "0651",
"叟" : "0652",
"叡" : "0653",
"丛" : "0654",
"叠" : "0655",
"口" : "0656",
"古" : "0657",
"句" : "0658",
"另" : "0659",
"叨" : "0660",
"叩" : "0661",
"只" : "0662",
"叫" : "0663",
"召" : "0664",
"叭" : "0665",
"叮" : "0666",
"叱" : "0667",
"可" : "0668",
"台" : "0669",
"史" : "0670",
"右" : "0671",
"叵" : "0672",
"叶" : "0673",
"司" : "0674",
"吁" : "0675",
"吃" : "0676",
"各" : "0677",
"合" : "0678",
"吉" : "0679",
"吊" : "0680",
"同" : "0681",
"名" : "0682",
"后" : "0683",
"吏" : "0684",
"吐" : "0685",
"向" : "0686",
"吓" : "0687",
"吒" : "0688",
"君" : "0689",
"吝" : "0690",
"吞" : "0691",
"吟" : "0692",
"吠" : "0693",
"否" : "0694",
"吩" : "0695",
"咐" : "0696",
"吆" : "0697",
"含" : "0698",
"吭" : "0699",
"吮" : "0700",
"呈" : "0701",
"吴" : "0702",
"吵" : "0703",
"呐" : "0704",
"吸" : "0705",
"吹" : "0706",
"告" : "0707",
"吻" : "0708",
"吼" : "0709",
"吾" : "0710",
"呀" : "0711",
"吕" : "0712",
"呃" : "0713",
"呆" : "0714",
"咂" : "0715",
"呢" : "0716",
"呦" : "0717",
"呧" : "0718",
"周" : "0719",
"咒" : "0720",
"吧" : "0721",
"呱" : "0722",
"呫" : "0723",
"味" : "0724",
"呵" : "0725",
"呶" : "0726",
"呷" : "0727",
"呻" : "0728",
"呼" : "0729",
"命" : "0730",
"咀" : "0731",
"咄" : "0732",
"咆" : "0733",
"咕" : "0734",
"和" : "0735",
"咎" : "0736",
"咏" : "0737",
"咋" : "0738",
"咖" : "0739",
"哎" : "0740",
"咤" : "0741",
"响" : "0742",
"咪" : "0743",
"咧" : "0744",
"咨" : "0745",
"咫" : "0746",
"咬" : "0747",
"咯" : "0748",
"咱" : "0749",
"咳" : "0750",
"咷" : "0751",
"咸" : "0752",
"咺" : "0753",
"咽" : "0754",
"哀" : "0755",
"品" : "0756",
"哂" : "0757",
"哄" : "0758",
"啊" : "0759",
"哇" : "0760",
"哈" : "0761",
"哉" : "0762",
"哪" : "0763",
"咿" : "0764",
"员" : "0765",
"哥" : "0766",
"唔" : "0767",
"哦" : "0768",
"哩" : "0769",
"哭" : "0770",
"哮" : "0771",
"哲" : "0772",
"哺" : "0773",
"哼" : "0774",
"哽" : "0775",
"哿" : "0776",
"唁" : "0777",
"唆" : "0778",
"唈" : "0779",
"唉" : "0780",
"唐" : "0781",
"唇" : "0782",
"哨" : "0783",
"啦" : "0784",
"唏" : "0785",
"售" : "0786",
"唯" : "0787",
"唱" : "0788",
"唳" : "0789",
"唾" : "0790",
"啁" : "0791",
"啣" : "0792",
"啄" : "0793",
"商" : "0794",
"问" : "0795",
"启" : "0796",
"啖" : "0797",
"啥" : "0798",
"啜" : "0799",
"哑" : "0800",
"唬" : "0801",
"啤" : "0802",
"啡" : "0803",
"啻" : "0804",
"啼" : "0805",
"喁" : "0806",
"喀" : "0807",
"喂" : "0808",
"喃" : "0809",
"善" : "0810",
"喆" : "0811",
"喇" : "0812",
"喈" : "0813",
"喉" : "0814",
"喊" : "0815",
"喏" : "0816",
"喓" : "0817",
"喋" : "0818",
"喑" : "0819",
"喘" : "0820",
"喙" : "0821",
"唤" : "0822",
"喜" : "0823",
"喝" : "0824",
"唧" : "0825",
"喧" : "0826",
"喻" : "0827",
"丧" : "0828",
"乔" : "0829",
"单" : "0830",
"啾" : "0831",
"嗃" : "0832",
"嗅" : "0833",
"吗" : "0834",
"啬" : "0835",
"嗑" : "0836",
"嗓" : "0837",
"嗔" : "0838",
"呜" : "0839",
"嗛" : "0840",
"嗜" : "0841",
"嗟" : "0842",
"嗣" : "0843",
"嗤" : "0844",
"喔" : "0845",
"喟" : "0846",
"哟" : "0847",
"喫" : "0848",
"喭" : "0849",
"呛" : "0850",
"嗉" : "0851",
"嗒" : "0852",
"喽" : "0853",
"嘅" : "0854",
"叹" : "0855",
"嘈" : "0856",
"嘉" : "0857",
"嘏" : "0858",
"嘛" : "0859",
"唛" : "0860",
"嘒" : "0861",
"啧" : "0862",
"尝" : "0863",
"嘘" : "0864",
"噻" : "0865",
"嚎" : "0866",
"嘎" : "0867",
"呕" : "0868",
"嗷" : "0869",
"嗽" : "0870",
"嗾" : "0871",
"嘬" : "0872",
"哗" : "0873",
"哔" : "0874",
"叽" : "0875",
"啸" : "0876",
"嘲" : "0877",
"嘴" : "0878",
"哓" : "0879",
"嘶" : "0880",
"嗥" : "0881",
"嘹" : "0882",
"嘻" : "0883",
"嘿" : "0884",
"噉" : "0885",
"噌" : "0886",
"噍" : "0887",
"噎" : "0888",
"噢" : "0889",
"噏" : "0890",
"噤" : "0891",
"器" : "0892",
"噩" : "0893",
"噪" : "0894",
"噫" : "0895",
"噬" : "0896",
"嗳" : "0897",
"哙" : "0898",
"喷" : "0899",
"噶" : "0900",
"哝" : "0901",
"哕" : "0902",
"吨" : "0903",
"噱" : "0904",
"咛" : "0905",
"嚅" : "0906",
"嚇" : "0907",
"嚏" : "0908",
"啮" : "0909",
"嚚" : "0910",
"唸" : "0911",
"冁" : "0912",
"嚥" : "0913",
"嚬" : "0914",
"嚮" : "0915",
"嚐" : "0916",
"严" : "0917",
"咙" : "0918",
"嘤" : "0919",
"嚼" : "0920",
"啭" : "0921",
"嗫" : "0922",
"嚣" : "0923",
"嚷" : "0924",
"囉" : "0925",
"囊" : "0926",
"呓" : "0927",
"嘱" : "0928",
"囓" : "0929",
"叻" : "0930",
"囗" : "0931",
"回" : "0932",
"囚" : "0933",
"四" : "0934",
"囱" : "0935",
"因" : "0936",
"囤" : "0937",
"困" : "0938",
"囫" : "0939",
"囷" : "0940",
"囹" : "0941",
"固" : "0942",
"囿" : "0943",
"圃" : "0944",
"圄" : "0945",
"圈" : "0946",
"圉" : "0947",
"国" : "0948",
"圅" : "0949",
"囵" : "0950",
"圂" : "0951",
"囮" : "0952",
"围" : "0953",
"园" : "0954",
"圆" : "0955",
"图" : "0956",
"团" : "0957",
"圜" : "0958",
"圕" : "0959",
"土" : "0960",
"在" : "0961",
"圩" : "0962",
"圬" : "0963",
"圭" : "0964",
"圮" : "0965",
"地" : "0966",
"圻" : "0967",
"址" : "0968",
"圾" : "0969",
"坟" : "0970",
"均" : "0971",
"坊" : "0972",
"坍" : "0973",
"坎" : "0974",
"坏" : "0975",
"坐" : "0976",
"坑" : "0977",
"坂" : "0978",
"坌" : "0979",
"坡" : "0980",
"坤" : "0981",
"坦" : "0982",
"坭" : "0983",
"坩" : "0984",
"坷" : "0985",
"坼" : "0986",
"垂" : "0987",
"坪" : "0988",
"坫" : "0989",
"坰" : "0990",
"坳" : "0991",
"型" : "0992",
"垓" : "0993",
"垝" : "0994",
"垠" : "0995",
"垢" : "0996",
"垣" : "0997",
"垃" : "0998",
"坯" : "0999",
"垛" : "1000",
"坨" : "1001",
"埃" : "1002",
"埋" : "1003",
"城" : "1004",
"埒" : "1005",
"垮" : "1006",
"埏" : "1007",
"域" : "1008",
"埠" : "1009",
"垧" : "1010",
"埭" : "1011",
"垡" : "1012",
"执" : "1013",
"培" : "1014",
"基" : "1015",
"堂" : "1016",
"坚" : "1017",
"堆" : "1018",
"垩" : "1019",
"埤" : "1020",
"埴" : "1021",
"埵" : "1022",
"埸" : "1023",
"堃" : "1024",
"堙" : "1025",
"堞" : "1026",
"堡" : "1027",
"堠" : "1028",
"堤" : "1029",
"堪" : "1030",
"尧" : "1031",
"报" : "1032",
"埔" : "1033",
"场" : "1034",
"堵" : "1035",
"埝" : "1036",
"堰" : "1037",
"堦" : "1038",
"塍" : "1039",
"块" : "1040",
"茔" : "1041",
"塌" : "1042",
"塑" : "1043",
"塔" : "1044",
"墓" : "1045",
"塚" : "1046",
"塗" : "1047",
"塘" : "1048",
"塞" : "1049",
"填" : "1050",
"坞" : "1051",
"垲" : "1052",
"埙" : "1053",
"埘" : "1054",
"塎" : "1055",
"坝" : "1056",
"尘" : "1057",
"堑" : "1058",
"塼" : "1059",
"塾" : "1060",
"塿" : "1061",
"墀" : "1062",
"墁" : "1063",
"境" : "1064",
"墅" : "1065",
"墉" : "1066",
"垫" : "1067",
"墄" : "1068",
"埫" : "1069",
"墐" : "1070",
"坠" : "1071",
"堿" : "1072",
"增" : "1073",
"墟" : "1074",
"墨" : "1075",
"墩" : "1076",
"堕" : "1077",
"墺" : "1078",
"墳" : "1079",
"塄" : "1080",
"塆" : "1081",
"墦" : "1082",
"垦" : "1083",
"壁" : "1084",
"壅" : "1085",
"坛" : "1086",
"𡒄" : "1087",
"壎" : "1088",
"壑" : "1089",
"压" : "1090",
"壕" : "1091",
"壖" : "1092",
"垒" : "1093",
"圹" : "1094",
"壞" : "1095",
"垄" : "1096",
"垆" : "1097",
"壜" : "1098",
"壤" : "1099",
"壩" : "1100",
"圳" : "1101",
"士" : "1102",
"壬" : "1103",
"壮" : "1104",
"壹" : "1105",
"壶" : "1106",
"壻" : "1107",
"寿" : "1108",
"壸" : "1109",
"椴" : "1110",
"夂" : "1111",
"夆" : "1112",
"簖" : "1113",
"夊" : "1114",
"夏" : "1115",
"砘" : "1116",
"跺" : "1118",
"夕" : "1119",
"外" : "1120",
"夙" : "1121",
"多" : "1122",
"夜" : "1123",
"够" : "1124",
"梦" : "1125",
"夤" : "1126",
"夥" : "1127",
"婀" : "1128",
"大" : "1129",
"夭" : "1130",
"天" : "1131",
"太" : "1132",
"夫" : "1133",
"夬" : "1134",
"央" : "1135",
"失" : "1136",
"夯" : "1137",
"夷" : "1138",
"夸" : "1139",
"夹" : "1140",
"奄" : "1141",
"奇" : "1142",
"奈" : "1143",
"奉" : "1144",
"奎" : "1145",
"奏" : "1146",
"奂" : "1147",
"契" : "1148",
"奔" : "1149",
"奕" : "1150",
"奓" : "1151",
"套" : "1152",
"奚" : "1153",
"锇" : "1154",
"奘" : "1155",
"奠" : "1156",
"奡" : "1157",
"奢" : "1158",
"奥" : "1159",
"奁" : "1160",
"夺" : "1161",
"奖" : "1162",
"奭" : "1163",
"奋" : "1164",
"奀" : "1165",
"女" : "1166",
"奴" : "1167",
"奶" : "1168",
"奸" : "1169",
"好" : "1170",
"妁" : "1171",
"如" : "1172",
"妃" : "1173",
"妄" : "1174",
"妊" : "1175",
"妒" : "1176",
"妍" : "1177",
"妓" : "1178",
"妖" : "1179",
"妗" : "1180",
"妙" : "1181",
"妆" : "1182",
"妣" : "1183",
"妤" : "1184",
"妥" : "1185",
"妨" : "1186",
"妯" : "1187",
"妹" : "1188",
"妻" : "1189",
"妾" : "1190",
"姆" : "1191",
"姊" : "1192",
"始" : "1193",
"姗" : "1194",
"姐" : "1195",
"姑" : "1196",
"姒" : "1197",
"姓" : "1198",
"妲" : "1199",
"妮" : "1200",
"委" : "1201",
"姚" : "1202",
"姜" : "1203",
"姝" : "1204",
"姞" : "1205",
"姙" : "1206",
"姣" : "1207",
"姤" : "1208",
"姥" : "1209",
"姨" : "1210",
"姦" : "1211",
"侄" : "1212",
"姬" : "1213",
"姅" : "1214",
"姻" : "1215",
"娃" : "1216",
"姿" : "1217",
"威" : "1218",
"娉" : "1219",
"姮" : "1220",
"姱" : "1221",
"娌" : "1222",
"娑" : "1223",
"娘" : "1224",
"娱" : "1225",
"娜" : "1226",
"娟" : "1227",
"娠" : "1228",
"娣" : "1229",
"娥" : "1230",
"娩" : "1231",
"娓" : "1232",
"娼" : "1233",
"姹" : "1234",
"娶" : "1235",
"娄" : "1236",
"婆" : "1237",
"婉" : "1238",
"婊" : "1239",
"婕" : "1240",
"婚" : "1241",
"婢" : "1242",
"婣" : "1243",
"妇" : "1244",
"婪" : "1245",
"娅" : "1246",
"她" : "1247",
"妳" : "1248",
"婼" : "1249",
"婷" : "1250",
"婺" : "1251",
"媒" : "1252",
"媚" : "1253",
"媛" : "1254",
"媟" : "1255",
"媢" : "1256",
"娲" : "1257",
"媬" : "1258",
"媕" : "1259",
"媖" : "1260",
"媳" : "1261",
"媵" : "1262",
"媸" : "1263",
"媪" : "1264",
"妈" : "1265",
"媾" : "1266",
"媿" : "1267",
"嫁" : "1268",
"嫂" : "1269",
"嫄" : "1270",
"嫉" : "1271",
"嫋" : "1272",
"嫌" : "1273",
"媲" : "1274",
"媺" : "1275",
"嫖" : "1276",
"妪" : "1277",
"嫠" : "1278",
"嫡" : "1279",
"嫣" : "1280",
"嫦" : "1281",
"嫩" : "1282",
"嫪" : "1283",
"嫘" : "1284",
"嫚" : "1285",
"嫜" : "1286",
"嫫" : "1287",
"嫺" : "1288",
"妫" : "1289",
"娆" : "1290",
"嬉" : "1291",
"婵" : "1292",
"娇" : "1293",
"媭" : "1294",
"嬖" : "1295",
"嬗" : "1296",
"嫱" : "1297",
"嬛" : "1298",
"嬴" : "1299",
"嫔" : "1300",
"嬷" : "1301",
"嬭" : "1302",
"嬲" : "1303",
"嬾" : "1304",
"婴" : "1305",
"婶" : "1306",
"孀" : "1307",
"孅" : "1308",
"娈" : "1309",
"妞" : "1310",
"子" : "1311",
"孑" : "1312",
"孔" : "1313",
"孕" : "1314",
"孓" : "1315",
"字" : "1316",
"存" : "1317",
"孚" : "1318",
"孛" : "1319",
"孜" : "1320",
"孝" : "1321",
"孟" : "1322",
"季" : "1323",
"孤" : "1324",
"孥" : "1325",
"孩" : "1326",
"孙" : "1327",
"孰" : "1328",
"孱" : "1329",
"孳" : "1330",
"学" : "1331",
"孺" : "1332",
"孼" : "1333",
"孪" : "1334",
"孵" : "1335",
"宀" : "1336",
"宁" : "1337",
"它" : "1338",
"宄" : "1339",
"宂" : "1340",
"宅" : "1341",
"宇" : "1342",
"守" : "1343",
"安" : "1344",
"宋" : "1345",
"完" : "1346",
"宏" : "1347",
"宓" : "1348",
"宕" : "1349",
"宗" : "1350",
"官" : "1351",
"宙" : "1352",
"定" : "1353",
"宛" : "1354",
"宜" : "1355",
"客" : "1356",
"宣" : "1357",
"室" : "1358",
"宥" : "1359",
"宦" : "1360",
"宬" : "1361",
"宫" : "1362",
"宰" : "1363",
"害" : "1364",
"宴" : "1365",
"宵" : "1366",
"家" : "1367",
"宸" : "1368",
"容" : "1369",
"梥" : "1370",
"寀" : "1371",
"宿" : "1372",
"寂" : "1374",
"寃" : "1375",
"寄" : "1376",
"寅" : "1377",
"密" : "1378",
"寇" : "1379",
"寧" : "1380",
"富" : "1381",
"寐" : "1382",
"寒" : "1383",
"寓" : "1384",
"寔" : "1385",
"寖" : "1386",
"寘" : "1387",
"寎" : "1388",
"寞" : "1389",
"察" : "1390",
"寡" : "1391",
"寝" : "1392",
"寤" : "1393",
"寥" : "1394",
"实" : "1395",
"寨" : "1396",
"寠" : "1397",
"寙" : "1398",
"审" : "1399",
"写" : "1400",
"宽" : "1401",
"寮" : "1402",
"寰" : "1403",
"宠" : "1404",
"宝" : "1405",
"宧" : "1406",
"寸" : "1407",
"寺" : "1408",
"封" : "1409",
"射" : "1410",
"尅" : "1411",
"将" : "1412",
"专" : "1413",
"尉" : "1414",
"尊" : "1415",
"寻" : "1416",
"对" : "1417",
"导" : "1418",
"蒽" : "1419",
"小" : "1420",
"少" : "1421",
"尔" : "1422",
"尖" : "1423",
"尚" : "1424",
"尠" : "1425",
"尞" : "1426",
"尕" : "1427",
"尢" : "1428",
"尤" : "1429",
"尨" : "1430",
"尪" : "1431",
"就" : "1432",
"尰" : "1433",
"尴" : "1434",
"尬" : "1435",
"铒" : "1436",
"尸" : "1437",
"尹" : "1438",
"尺" : "1439",
"尻" : "1440",
"尼" : "1441",
"尾" : "1442",
"尿" : "1443",
"局" : "1444",
"屁" : "1445",
"居" : "1446",
"届" : "1447",
"屈" : "1448",
"屉" : "1449",
"屋" : "1450",
"屍" : "1451",
"屎" : "1452",
"屐" : "1453",
"屑" : "1454",
"展" : "1455",
"屏" : "1456",
"屝" : "1457",
"屠" : "1458",
"屡" : "1459",
"屣" : "1460",
"层" : "1461",
"履" : "1462",
"屧" : "1463",
"屦" : "1464",
"屩" : "1465",
"属" : "1466",
"屭" : "1467",
"砩" : "1468",
"屮" : "1469",
"屯" : "1470",
"岳" : "1471",
"山" : "1472",
"屹" : "1473",
"屺" : "1474",
"峁" : "1475",
"岌" : "1476",
"岐" : "1477",
"岑" : "1478",
"岔" : "1479",
"峿" : "1480",
"冈" : "1481",
"岢" : "1482",
"峫" : "1483",
"岩" : "1484",
"岫" : "1485",
"岱" : "1486",
"岵" : "1487",
"岷" : "1488",
"岸" : "1489",
"岣" : "1490",
"峒" : "1491",
"峙" : "1492",
"峋" : "1493",
"峨" : "1494",
"峭" : "1495",
"峰" : "1496",
"岛" : "1497",
"峻" : "1498",
"峡" : "1499",
"峓" : "1500",
"岘" : "1501",
"峪" : "1502",
"崃" : "1503",
"崇" : "1504",
"崎" : "1505",
"崐" : "1506",
"崑" : "1507",
"崔" : "1508",
"崖" : "1509",
"崙" : "1510",
"岗" : "1511",
"崛" : "1512",
"峥" : "1513",
"崩" : "1514",
"崚" : "1515",
"崧" : "1516",
"崦" : "1517",
"嵇" : "1518",
"崆" : "1519",
"嵋" : "1520",
"嵫" : "1521",
"嵊" : "1522",
"嵌" : "1523",
"崶" : "1524",
"嵎" : "1525",
"岚" : "1526",
"嵒" : "1527",
"崱" : "1528",
"嵩" : "1529",
"嵝" : "1530",
"嵬" : "1531",
"嵯" : "1532",
"嵾" : "1533",
"嶂" : "1534",
"崭" : "1535",
"岖" : "1536",
"嶒" : "1537",
"嵚" : "1538",
"嵘" : "1539",
"峤" : "1540",
"崤" : "1541",
"峄" : "1542",
"嶙" : "1543",
"嶷" : "1544",
"岭" : "1545",
"屿" : "1546",
"嶽" : "1547",
"巉" : "1548",
"嵛" : "1549",
"巍" : "1550",
"峦" : "1551",
"巘" : "1552",
"巅" : "1553",
"巖" : "1554",
"崂" : "1555",
"巛" : "1556",
"川" : "1557",
"州" : "1558",
"巡" : "1559",
"巢" : "1560",
"镄" : "1561",
"工" : "1562",
"左" : "1563",
"巧" : "1564",
"巨" : "1565",
"巫" : "1566",
"差" : "1567",
"酚" : "1568",
"己" : "1569",
"巳" : "1570",
"已" : "1571",
"巴" : "1572",
"巵" : "1573",
"巷" : "1574",
"巽" : "1575",
"钆" : "1576",
"巾" : "1577",
"币" : "1578",
"市" : "1579",
"布" : "1580",
"帆" : "1581",
"帋" : "1582",
"帑" : "1583",
"帕" : "1584",
"希" : "1585",
"帖" : "1586",
"帗" : "1587",
"帘" : "1588",
"帙" : "1589",
"帚" : "1590",
"帛" : "1591",
"帔" : "1592",
"帝" : "1593",
"帡" : "1594",
"帟" : "1595",
"帅" : "1596",
"师" : "1597",
"席" : "1598",
"帨" : "1599",
"帐" : "1600",
"带" : "1601",
"帷" : "1602",
"常" : "1603",
"帽" : "1604",
"帏" : "1605",
"幄" : "1606",
"幅" : "1607",
"帧" : "1608",
"幋" : "1609",
"幌" : "1610",
"幔" : "1611",
"幕" : "1612",
"帼" : "1613",
"帻" : "1614",
"帜" : "1615",
"幡" : "1616",
"幢" : "1617",
"幣" : "1618",
"幪" : "1619",
"帮" : "1620",
"帱" : "1621",
"幭" : "1622",
"幯" : "1623",
"幰" : "1624",
"幛" : "1625",
"干" : "1626",
"平" : "1627",
"年" : "1628",
"并" : "1629",
"幸" : "1630",
"幹" : "1631",
"矸" : "1632",
"幺" : "1633",
"幻" : "1634",
"幼" : "1635",
"幽" : "1636",
"幾" : "1637",
"酐" : "1638",
"广" : "1639",
"庀" : "1640",
"庹" : "1641",
"庇" : "1642",
"床" : "1643",
"庋" : "1644",
"序" : "1645",
"底" : "1646",
"庖" : "1647",
"店" : "1648",
"庚" : "1649",
"府" : "1650",
"庠" : "1651",
"庥" : "1652",
"度" : "1653",
"座" : "1654",
"库" : "1655",
"庭" : "1656",
"庳" : "1657",
"庵" : "1658",
"庶" : "1659",
"康" : "1660",
"庸" : "1661",
"庾" : "1662",
"庬" : "1663",
"庴" : "1664",
"廁" : "1665",
"厢" : "1666",
"廌" : "1667",
"廑" : "1668",
"廈" : "1669",
"廉" : "1670",
"廊" : "1671",
"廋" : "1672",
"厩" : "1673",
"廓" : "1674",
"廖" : "1675",
"厨" : "1676",
"廕" : "1677",
"廝" : "1678",
"廛" : "1679",
"庙" : "1680",
"廠" : "1681",
"庑" : "1682",
"废" : "1683",
"廣" : "1684",
"廨" : "1685",
"廪" : "1686",
"庐" : "1687",
"廱" : "1688",
"厅" : "1689",
"庞" : "1690",
"锆" : "1691",
"廴" : "1692",
"延" : "1693",
"廷" : "1694",
"廹" : "1695",
"建" : "1696",
"廻" : "1697",
"廼" : "1698",
"廾" : "1699",
"廿" : "1700",
"弁" : "1701",
"弄" : "1702",
"弇" : "1703",
"弈" : "1704",
"弊" : "1705",
"茛" : "1706",
"弋" : "1707",
"弍" : "1708",
"式" : "1709",
"弑" : "1710",
"瀔" : "1711",
"弓" : "1712",
"弔" : "1713",
"引" : "1714",
"弗" : "1715",
"弛" : "1716",
"弟" : "1717",
"弢" : "1718",
"弣" : "1719",
"弦" : "1720",
"弧" : "1721",
"弩" : "1722",
"弤" : "1723",
"弨" : "1724",
"弭" : "1725",
"弱" : "1726",
"弰" : "1727",
"张" : "1728",
"彄" : "1729",
"强" : "1730",
"弸" : "1731",
"弼" : "1732",
"彀" : "1733",
"弹" : "1734",
"彊" : "1735",
"弥" : "1736",
"弯" : "1737",
"弘" : "1738",
"彐" : "1739",
"彖" : "1740",
"彗" : "1741",
"彘" : "1742",
"彙" : "1743",
"彝" : "1744",
"彟" : "1745",
"臌" : "1746",
"彡" : "1747",
"形" : "1748",
"彤" : "1749",
"彦" : "1750",
"彧" : "1751",
"彩" : "1752",
"彪" : "1753",
"彫" : "1754",
"彬" : "1755",
"彭" : "1756",
"彰" : "1757",
"影" : "1758",
"彨" : "1759",
"铪" : "1760",
"彳" : "1761",
"彷" : "1762",
"役" : "1763",
"彼" : "1764",
"彿" : "1765",
"往" : "1766",
"征" : "1767",
"徂" : "1768",
"待" : "1769",
"徇" : "1770",
"很" : "1771",
"徉" : "1772",
"徊" : "1773",
"律" : "1774",
"後" : "1775",
"徐" : "1776",
"径" : "1777",
"徒" : "1778",
"得" : "1779",
"徘" : "1780",
"徙" : "1781",
"徜" : "1782",
"从" : "1783",
"徕" : "1784",
"御" : "1785",
"徧" : "1786",
"徨" : "1787",
"复" : "1788",
"循" : "1789",
"徬" : "1790",
"徭" : "1791",
"微" : "1792",
"徯" : "1793",
"徵" : "1794",
"德" : "1795",
"彻" : "1796",
"徼" : "1797",
"徽" : "1798",
"焓" : "1799",
"心" : "1800",
"必" : "1801",
"忉" : "1802",
"忌" : "1803",
"忍" : "1804",
"忒" : "1805",
"忖" : "1806",
"志" : "1807",
"忘" : "1808",
"忐" : "1809",
"忑" : "1810",
"忙" : "1811",
"忝" : "1812",
"忠" : "1813",
"忡" : "1814",
"恬" : "1815",
"快" : "1816",
"忭" : "1817",
"忮" : "1818",
"念" : "1819",
"忱" : "1820",
"忸" : "1821",
"忤" : "1822",
"忻" : "1823",
"忽" : "1824",
"忿" : "1825",
"怍" : "1826",
"怎" : "1827",
"怏" : "1828",
"怒" : "1829",
"怕" : "1830",
"怖" : "1831",
"怗" : "1832",
"怙" : "1833",
"怛" : "1834",
"思" : "1835",
"怠" : "1836",
"怡" : "1837",
"急" : "1838",
"怦" : "1839",
"性" : "1840",
"怨" : "1841",
"怩" : "1842",
"怪" : "1843",
"怫" : "1844",
"怯" : "1845",
"怱" : "1846",
"怵" : "1847",
"您" : "1849",
"怔" : "1850",
"恁" : "1851",
"恂" : "1852",
"恃" : "1853",
"恒" : "1854",
"惦" : "1855",
"恌" : "1856",
"恍" : "1857",
"恐" : "1858",
"恕" : "1859",
"恙" : "1860",
"恚" : "1861",
"恝" : "1862",
"恢" : "1863",
"恣" : "1864",
"恤" : "1865",
"恥" : "1866",
"恧" : "1867",
"恨" : "1868",
"恩" : "1869",
"恪" : "1870",
"恫" : "1871",
"恭" : "1872",
"息" : "1873",
"恰" : "1874",
"悃" : "1875",
"恉" : "1876",
"悄" : "1877",
"悦" : "1878",
"悌" : "1879",
"悍" : "1880",
"悒" : "1881",
"悔" : "1882",
"悖" : "1883",
"悚" : "1884",
"悉" : "1885",
"悛" : "1886",
"悝" : "1887",
"悮" : "1888",
"悟" : "1889",
"悠" : "1890",
"患" : "1891",
"悤" : "1892",
"悁" : "1893",
"悱" : "1894",
"惪" : "1895",
"悲" : "1896",
"悴" : "1897",
"怅" : "1898",
"闷" : "1899",
"悸" : "1900",
"悻" : "1901",
"悼" : "1902",
"悽" : "1903",
"悾" : "1904",
"惄" : "1905",
"情" : "1906",
"惆" : "1907",
"惇" : "1908",
"惎" : "1909",
"惑" : "1910",
"惓" : "1911",
"惕" : "1912",
"惘" : "1913",
"惙" : "1914",
"惚" : "1915",
"惛" : "1916",
"惜" : "1917",
"惝" : "1918",
"惟" : "1919",
"惠" : "1920",
"恶" : "1921",
"悰" : "1922",
"惋" : "1923",
"惰" : "1924",
"恼" : "1925",
"恽" : "1926",
"想" : "1927",
"惴" : "1928",
"惶" : "1929",
"惸" : "1930",
"惹" : "1931",
"惺" : "1932",
"恻" : "1933",
"愀" : "1934",
"愁" : "1935",
"愆" : "1936",
"愈" : "1937",
"愉" : "1938",
"愊" : "1939",
"愍" : "1940",
"愎" : "1941",
"意" : "1942",
"愒" : "1943",
"愔" : "1944",
"愕" : "1945",
"愚" : "1946",
"爱" : "1947",
"惬" : "1948",
"感" : "1949",
"愠" : "1950",
"愧" : "1951",
"悫" : "1952",
"愫" : "1953",
"愬" : "1954",
"怆" : "1955",
"恺" : "1956",
"慎" : "1957",
"忾" : "1958",
"愿" : "1959",
"恿" : "1960",
"慄" : "1961",
"慆" : "1962",
"慇" : "1963",
"慈" : "1964",
"慊" : "1965",
"态" : "1966",
"慌" : "1967",
"慁" : "1968",
"慓" : "1969",
"慕" : "1970",
"惨" : "1971",
"慙" : "1972",
"慝" : "1973",
"惭" : "1974",
"恸" : "1975",
"慢" : "1976",
"惯" : "1977",
"慩" : "1978",
"慧" : "1979",
"慨" : "1980",
"怂" : "1981",
"虑" : "1982",
"慰" : "1983",
"悭" : "1984",
"慴" : "1985",
"慵" : "1986",
"庆" : "1987",
"慷" : "1988",
"慼" : "1989",
"慾" : "1990",
"憁" : "1991",
"忧" : "1992",
"慥" : "1993",
"惫" : "1994",
"怜" : "1995",
"憑" : "1996",
"憔" : "1997",
"惮" : "1998",
"憎" : "1999",
"憝" : "2000",
"愤" : "2001",
"憧" : "2002",
"憨" : "2003",
"憩" : "2004",
"憬" : "2005",
"悯" : "2006",
"怃" : "2007",
"憯" : "2008",
"宪" : "2009",
"憍" : "2010",
"忆" : "2011",
"憸" : "2012",
"憾" : "2013",
"懃" : "2014",
"懆" : "2015",
"懂" : "2016",
"恳" : "2017",
"懈" : "2018",
"应" : "2019",
"懊" : "2020",
"懋" : "2021",
"怿" : "2022",
"懔" : "2023",
"懓" : "2024",
"愦" : "2025",
"憗" : "2026",
"憦" : "2027",
"憏" : "2028",
"怼" : "2029",
"懑" : "2030",
"懥" : "2031",
"懦" : "2032",
"惩" : "2033",
"懿" : "2034",
"懵" : "2035",
"懒" : "2036",
"怀" : "2037",
"悬" : "2038",
"忏" : "2039",
"惧" : "2040",
"懽" : "2041",
"慑" : "2042",
"恋" : "2043",
"恹" : "2044",
"戆" : "2045",
"慜" : "2046",
"戈" : "2047",
"戊" : "2048",
"戌" : "2049",
"戍" : "2050",
"戎" : "2051",
"成" : "2052",
"我" : "2053",
"戒" : "2054",
"戋" : "2055",
"戕" : "2056",
"或" : "2057",
"戚" : "2058",
"戛" : "2059",
"戟" : "2060",
"戢" : "2061",
"戥" : "2062",
"戡" : "2063",
"戣" : "2064",
"戬" : "2065",
"截" : "2066",
"戳" : "2067",
"戮" : "2068",
"战" : "2069",
"戏" : "2070",
"戴" : "2071",
"戤" : "2072",
"户" : "2073",
"戾" : "2074",
"房" : "2075",
"所" : "2076",
"戽" : "2077",
"扁" : "2078",
"扃" : "2079",
"扅" : "2080",
"扆" : "2081",
"扇" : "2082",
"扈" : "2083",
"扉" : "2084",
"扊" : "2085",
"槲" : "2086",
"手" : "2087",
"才" : "2088",
"扎" : "2089",
"扑" : "2090",
"扒" : "2091",
"打" : "2092",
"扔" : "2093",
"托" : "2094",
"扛" : "2095",
"扠" : "2096",
"抃" : "2097",
"扞" : "2098",
"扣" : "2099",
"扭" : "2100",
"扮" : "2101",
"扯" : "2102",
"扱" : "2103",
"扳" : "2104",
"扶" : "2105",
"批" : "2106",
"抵" : "2107",
"扼" : "2108",
"找" : "2109",
"承" : "2110",
"技" : "2111",
"抄" : "2113",
"抆" : "2114",
"抉" : "2115",
"把" : "2116",
"抑" : "2117",
"抒" : "2118",
"抓" : "2119",
"抔" : "2120",
"投" : "2121",
"抖" : "2122",
"抗" : "2123",
"折" : "2124",
"抨" : "2125",
"披" : "2126",
"抬" : "2127",
"抱" : "2128",
"抿" : "2129",
"抹" : "2130",
"押" : "2131",
"抽" : "2132",
"拂" : "2133",
"拄" : "2134",
"拆" : "2135",
"拇" : "2136",
"担" : "2137",
"拈" : "2138",
"拉" : "2139",
"拊" : "2140",
"抛" : "2141",
"拌" : "2142",
"拍" : "2143",
"拏" : "2144",
"拐" : "2145",
"拎" : "2146",
"拒" : "2147",
"拓" : "2148",
"拔" : "2149",
"挐" : "2150",
"拖" : "2151",
"拗" : "2152",
"拘" : "2153",
"拙" : "2154",
"拚" : "2155",
"招" : "2156",
"拜" : "2157",
"捂" : "2158",
"拮" : "2159",
"拭" : "2160",
"括" : "2161",
"拱" : "2162",
"拯" : "2163",
"拳" : "2164",
"拴" : "2165",
"拷" : "2166",
"拽" : "2167",
"拾" : "2168",
"拿" : "2169",
"持" : "2170",
"挂" : "2171",
"指" : "2172",
"挈" : "2173",
"按" : "2174",
"挍" : "2175",
"挑" : "2176",
"挖" : "2177",
"拼" : "2178",
"挨" : "2179",
"挪" : "2180",
"挫" : "2181",
"振" : "2182",
"挶" : "2183",
"挹" : "2184",
"挺" : "2185",
"挼" : "2186",
"挽" : "2187",
"挟" : "2188",
"捄" : "2189",
"捆" : "2190",
"捉" : "2191",
"捋" : "2192",
"捌" : "2193",
"捍" : "2194",
"掂" : "2195",
"捐" : "2196",
"挣" : "2197",
"捕" : "2198",
"挲" : "2199",
"捎" : "2200",
"捧" : "2201",
"捨" : "2202",
"捩" : "2203",
"扪" : "2204",
"捺" : "2205",
"捭" : "2206",
"据" : "2207",
"捲" : "2208",
"捱" : "2209",
"捶" : "2211",
"捷" : "2212",
"揍" : "2213",
"捻" : "2214",
"捽" : "2215",
"掀" : "2216",
"扫" : "2217",
"掇" : "2218",
"授" : "2219",
"掉" : "2220",
"掊" : "2221",
"掌" : "2222",
"掏" : "2223",
"掎" : "2224",
"掐" : "2225",
"排" : "2226",
"掖" : "2227",
"掘" : "2228",
"掛" : "2229",
"掠" : "2230",
"採" : "2231",
"探" : "2232",
"掣" : "2233",
"接" : "2234",
"控" : "2235",
"推" : "2236",
"掩" : "2237",
"措" : "2238",
"掬" : "2239",
"掯" : "2240",
"抡" : "2241",
"掞" : "2242",
"揹" : "2243",
"掫" : "2244",
"拣" : "2245",
"揄" : "2246",
"揆" : "2247",
"揉" : "2248",
"描" : "2249",
"捏" : "2250",
"提" : "2251",
"插" : "2252",
"揖" : "2253",
"扬" : "2254",
"换" : "2255",
"揜" : "2256",
"揠" : "2257",
"搽" : "2258",
"握" : "2259",
"揣" : "2260",
"揩" : "2261",
"揪" : "2262",
"揭" : "2263",
"挥" : "2264",
"搾" : "2265",
"援" : "2266",
"掽" : "2267",
"掾" : "2268",
"搞" : "2269",
"搕" : "2270",
"搧" : "2271",
"搯" : "2272",
"搆" : "2273",
"搉" : "2274",
"损" : "2275",
"搏" : "2276",
"搒" : "2277",
"搓" : "2278",
"搔" : "2279",
"摇" : "2280",
"捣" : "2281",
"搜" : "2282",
"搠" : "2283",
"搰" : "2284",
"搥" : "2285",
"搦" : "2286",
"搨" : "2287",
"搪" : "2288",
"搬" : "2289",
"搭" : "2290",
"搴" : "2291",
"摔" : "2292",
"抢" : "2293",
"搐" : "2294",
"摏" : "2295",
"掺" : "2296",
"撂" : "2297",
"摘" : "2298",
"搂" : "2299",
"撑" : "2300",
"摧" : "2301",
"摩" : "2302",
"摭" : "2303",
"挚" : "2304",
"抠" : "2305",
"抟" : "2306",
"摸" : "2307",
"摹" : "2308",
"摺" : "2309",
"掴" : "2310",
"摒" : "2311",
"摛" : "2312",
"撅" : "2313",
"摴" : "2314",
"摽" : "2315",
"撩" : "2316",
"撇" : "2317",
"捞" : "2318",
"撐" : "2319",
"撒" : "2320",
"挠" : "2321",
"撕" : "2322",
"撙" : "2323",
"撚" : "2324",
"撝" : "2325",
"撞" : "2326",
"撤" : "2327",
"拨" : "2328",
"抚" : "2329",
"播" : "2330",
"撮" : "2331",
"撰" : "2332",
"撲" : "2333",
"撬" : "2334",
"掼" : "2335",
"攉" : "2336",
"挞" : "2337",
"撼" : "2338",
"挝" : "2339",
"拥" : "2340",
"擂" : "2341",
"掳" : "2342",
"擅" : "2343",
"择" : "2344",
"击" : "2345",
"挡" : "2346",
"操" : "2347",
"擎" : "2348",
"拧" : "2349",
"擒" : "2350",
"擔" : "2351",
"擗" : "2352",
"擘" : "2353",
"據" : "2354",
"撷" : "2355",
"搀" : "2356",
"挤" : "2357",
"擡" : "2358",
"擢" : "2359",
"擣" : "2360",
"擦" : "2361",
"拟" : "2362",
"摈" : "2363",
"搁" : "2364",
"撵" : "2365",
"擭" : "2366",
"掷" : "2367",
"扩" : "2368",
"摆" : "2369",
"擞" : "2370",
"扰" : "2371",
"攀" : "2372",
"摅" : "2373",
"拦" : "2374",
"撄" : "2375",
"攘" : "2376",
"携" : "2377",
"摄" : "2378",
"拢" : "2379",
"攒" : "2380",
"挛" : "2381",
"摊" : "2382",
"搅" : "2383",
"攫" : "2384",
"揽" : "2385",
"攩" : "2386",
"拃" : "2387",
"支" : "2388",
"敧" : "2389",
"塃" : "2390",
"攴" : "2391",
"收" : "2392",
"攷" : "2393",
"攸" : "2394",
"攺" : "2395",
"攻" : "2396",
"放" : "2397",
"政" : "2398",
"故" : "2399",
"效" : "2400",
"敉" : "2401",
"敍" : "2402",
"教" : "2403",
"敏" : "2404",
"救" : "2405",
"敕" : "2406",
"敖" : "2407",
"败" : "2408",
"敔" : "2409",
"敂" : "2410",
"敝" : "2411",
"敞" : "2412",
"敢" : "2413",
"散" : "2414",
"敦" : "2415",
"夐" : "2416",
"敬" : "2417",
"敲" : "2418",
"整" : "2419",
"敌" : "2420",
"敷" : "2421",
"数" : "2422",
"敺" : "2423",
"斁" : "2424",
"敛" : "2425",
"毙" : "2426",
"敩" : "2427",
"敭" : "2428",
"文" : "2429",
"斌" : "2430",
"斐" : "2431",
"斑" : "2432",
"斓" : "2433",
"蟥" : "2434",
"斗" : "2435",
"料" : "2436",
"斛" : "2437",
"斜" : "2438",
"斝" : "2439",
"斟" : "2440",
"斡" : "2441",
"斢" : "2442",
"斤" : "2443",
"斥" : "2444",
"斧" : "2445",
"斨" : "2446",
"斩" : "2447",
"斯" : "2448",
"新" : "2450",
"断" : "2451",
"斲" : "2452",
"斸" : "2453",
"䐵" : "2454",
"方" : "2455",
"於" : "2456",
"施" : "2457",
"斿" : "2458",
"旎" : "2459",
"旁" : "2460",
"旂" : "2461",
"旃" : "2462",
"旄" : "2463",
"旅" : "2464",
"旆" : "2465",
"旐" : "2466",
"旋" : "2467",
"旌" : "2468",
"族" : "2469",
"旖" : "2470",
"旒" : "2471",
"旜" : "2472",
"旛" : "2473",
"旟" : "2474",
"旗" : "2475",
"烩" : "2476",
"无" : "2477",
"既" : "2478",
"曆" : "2479",
"日" : "2480",
"旦" : "2481",
"旨" : "2482",
"早" : "2483",
"旬" : "2484",
"旭" : "2485",
"旰" : "2486",
"旱" : "2487",
"晒" : "2488",
"旺" : "2489",
"昌" : "2490",
"昂" : "2491",
"昆" : "2492",
"昃" : "2493",
"明" : "2494",
"昏" : "2495",
"易" : "2496",
"昔" : "2497",
"晗" : "2498",
"昉" : "2499",
"昕" : "2500",
"昝" : "2501",
"星" : "2502",
"映" : "2503",
"春" : "2504",
"昧" : "2505",
"昨" : "2506",
"昭" : "2507",
"是" : "2508",
"昱" : "2509",
"昴" : "2510",
"昵" : "2511",
"昶" : "2512",
"晁" : "2513",
"时" : "2514",
"晃" : "2515",
"晋" : "2516",
"晌" : "2517",
"晏" : "2518",
"晚" : "2519",
"晢" : "2520",
"昼" : "2521",
"晞" : "2522",
"晡" : "2523",
"晤" : "2524",
"晨" : "2525",
"晦" : "2526",
"暎" : "2527",
"普" : "2528",
"景" : "2529",
"晰" : "2530",
"晳" : "2531",
"晴" : "2532",
"晶" : "2533",
"晷" : "2534",
"智" : "2535",
"晬" : "2536",
"暄" : "2537",
"暇" : "2538",
"暍" : "2539",
"暑" : "2540",
"暖" : "2541",
"暗" : "2542",
"旸" : "2543",
"暝" : "2544",
"畅" : "2545",
"晕" : "2546",
"晖" : "2547",
"暂" : "2548",
"𣊓" : "2549",
"暮" : "2550",
"暱" : "2551",
"暴" : "2552",
"暵" : "2553",
"暹" : "2554",
"暨" : "2555",
"晓" : "2556",
"暾" : "2557",
"曀" : "2558",
"曈" : "2559",
"昙" : "2560",
"曏" : "2561",
"曙" : "2562",
"曚" : "2563",
"曛" : "2564",
"曜" : "2565",
"曝" : "2566",
"曡" : "2567",
"旷" : "2568",
"曦" : "2569",
"昽" : "2570",
"曩" : "2571",
"曬" : "2572",
"昇" : "2573",
"曰" : "2574",
"曲" : "2575",
"曳" : "2576",
"更" : "2577",
"曷" : "2578",
"书" : "2579",
"曹" : "2580",
"曼" : "2581",
"曾" : "2582",
"替" : "2583",
"最" : "2584",
"会" : "2585",
"朅" : "2586",
"朂" : "2587",
"月" : "2588",
"有" : "2589",
"朋" : "2590",
"服" : "2591",
"朔" : "2592",
"朐" : "2593",
"朓" : "2594",
"朏" : "2595",
"朕" : "2596",
"朗" : "2597",
"望" : "2598",
"朞" : "2599",
"朝" : "2600",
"期" : "2601",
"朢" : "2602",
"朦" : "2603",
"胧" : "2604",
"耠" : "2605",
"木" : "2606",
"未" : "2607",
"末" : "2608",
"本" : "2609",
"札" : "2610",
"术" : "2611",
"朱" : "2612",
"朴" : "2613",
"朵" : "2614",
"朽" : "2615",
"杆" : "2616",
"杈" : "2617",
"杷" : "2618",
"杉" : "2619",
"杌" : "2620",
"李" : "2621",
"杏" : "2622",
"机" : "2623",
"材" : "2624",
"村" : "2625",
"杓" : "2626",
"杖" : "2627",
"柈" : "2628",
"杜" : "2629",
"𣏌" : "2630",
"束" : "2631",
"梠" : "2632",
"栓" : "2633",
"杪" : "2634",
"杭" : "2635",
"柿" : "2636",
"杯" : "2637",
"杰" : "2638",
"东" : "2639",
"杲" : "2640",
"杳" : "2641",
"椗" : "2642",
"杵" : "2643",
"棵" : "2644",
"杼" : "2645",
"松" : "2646",
"板" : "2647",
"枉" : "2648",
"析" : "2649",
"枕" : "2650",
"林" : "2651",
"枙" : "2652",
"枚" : "2653",
"果" : "2654",
"枝" : "2655",
"楻" : "2656",
"枇" : "2657",
"枋" : "2658",
"枌" : "2659",
"枘" : "2660",
"枯" : "2661",
"枲" : "2662",
"枳" : "2663",
"枵" : "2664",
"架" : "2665",
"枷" : "2666",
"枸" : "2667",
"柎" : "2668",
"枻" : "2669",
"柁" : "2670",
"柄" : "2671",
"柏" : "2672",
"某" : "2673",
"柑" : "2674",
"柒" : "2675",
"染" : "2676",
"柔" : "2677",
"柘" : "2678",
"柙" : "2679",
"柚" : "2680",
"柜" : "2681",
"柝" : "2682",
"柞" : "2683",
"柟" : "2684",
"柢" : "2685",
"查" : "2686",
"柬" : "2687",
"柯" : "2688",
"柮" : "2689",
"柰" : "2690",
"柱" : "2691",
"柳" : "2692",
"柴" : "2693",
"栅" : "2694",
"枰" : "2695",
"枹" : "2696",
"樋" : "2697",
"栗" : "2698",
"校" : "2699",
"栩" : "2700",
"株" : "2701",
"核" : "2702",
"栱" : "2703",
"根" : "2704",
"槾" : "2705",
"格" : "2706",
"栽" : "2707",
"桀" : "2708",
"桁" : "2709",
"桂" : "2710",
"桃" : "2711",
"桅" : "2712",
"框" : "2713",
"案" : "2714",
"桌" : "2715",
"桎" : "2716",
"桐" : "2717",
"桑" : "2718",
"桓" : "2719",
"桔" : "2720",
"桕" : "2721",
"栖" : "2722",
"栲" : "2723",
"栳" : "2724",
"桄" : "2725",
"桫" : "2726",
"桴" : "2727",
"桹" : "2728",
"桶" : "2729",
"桷" : "2730",
"桿" : "2731",
"梃" : "2732",
"梁" : "2733",
"梅" : "2734",
"梆" : "2735",
"梏" : "2736",
"梓" : "2737",
"栀" : "2738",
"梗" : "2739",
"桚" : "2740",
"梜" : "2741",
"条" : "2742",
"枭" : "2743",
"梢" : "2744",
"梧" : "2745",
"梨" : "2746",
"梭" : "2747",
"梯" : "2748",
"梱" : "2749",
"械" : "2750",
"棁" : "2751",
"梳" : "2752",
"梵" : "2753",
"桮" : "2754",
"梐" : "2755",
"桯" : "2756",
"弃" : "2757",
"棉" : "2758",
"棋" : "2759",
"棍" : "2760",
"棒" : "2761",
"棕" : "2762",
"枨" : "2763",
"枣" : "2764",
"棘" : "2765",
"棚" : "2766",
"栋" : "2767",
"棠" : "2768",
"棣" : "2769",
"栈" : "2770",
"棫" : "2771",
"棬" : "2772",
"森" : "2773",
"棰" : "2774",
"楦" : "2775",
"棲" : "2776",
"棹" : "2777",
"棺" : "2778",
"椁" : "2779",
"棻" : "2780",
"棼" : "2781",
"椀" : "2782",
"椅" : "2783",
"植" : "2784",
"椎" : "2785",
"椒" : "2786",
"棐" : "2787",
"棓" : "2788",
"棱" : "2789",
"棨" : "2790",
"椐" : "2791",
"椓" : "2792",
"椷" : "2793",
"椰" : "2794",
"椹" : "2795",
"椽" : "2796",
"椿" : "2797",
"楅" : "2798",
"杨" : "2799",
"枫" : "2800",
"楔" : "2801",
"栉" : "2802",
"楗" : "2803",
"橺" : "2804",
"楘" : "2805",
"楚" : "2806",
"楞" : "2807",
"楝" : "2808",
"楠" : "2809",
"榆" : "2810",
"楢" : "2811",
"楣" : "2812",
"楫" : "2813",
"业" : "2814",
"楯" : "2815",
"楮" : "2816",
"极" : "2817",
"楷" : "2818",
"楹" : "2819",
"椶" : "2820",
"椸" : "2821",
"楛" : "2822",
"桢" : "2823",
"楩" : "2824",
"楸" : "2825",
"榔" : "2826",
"榕" : "2827",
"榖" : "2828",
"榘" : "2829",
"榛" : "2830",
"榜" : "2831",
"榦" : "2832",
"榧" : "2833",
"榨" : "2834",
"榫" : "2835",
"榭" : "2836",
"荣" : "2837",
"榱" : "2838",
"榴" : "2839",
"榻" : "2840",
"榾" : "2841",
"槁" : "2842",
"槅" : "2843",
"槊" : "2844",
"构" : "2845",
"槌" : "2846",
"枪" : "2847",
"槎" : "2848",
"槐" : "2849",
"槓" : "2850",
"榎" : "2851",
"榤" : "2852",
"榥" : "2853",
"榷" : "2854",
"榼" : "2855",
"樑" : "2856",
"槃" : "2857",
"椠" : "2858",
"槨" : "2859",
"橌" : "2860",
"概" : "2861",
"桨" : "2862",
"槔" : "2863",
"槽" : "2864",
"槿" : "2865",
"桩" : "2866",
"乐" : "2867",
"樊" : "2868",
"楼" : "2869",
"樕" : "2870",
"标" : "2871",
"樛" : "2872",
"枢" : "2873",
"樟" : "2874",
"模" : "2875",
"样" : "2876",
"槥" : "2877",
"枞" : "2878",
"樏" : "2879",
"樗" : "2880",
"槱" : "2881",
"檩" : "2882",
"樸" : "2883",
"樵" : "2884",
"树" : "2885",
"樽" : "2886",
"樾" : "2887",
"橄" : "2888",
"桡" : "2889",
"桥" : "2890",
"橐" : "2891",
"橙" : "2892",
"橛" : "2893",
"機" : "2894",
"橡" : "2895",
"橧" : "2896",
"横" : "2897",
"樨" : "2898",
"柠" : "2899",
"椭" : "2900",
"桦" : "2901",
"橁" : "2902",
"檖" : "2903",
"橘" : "2904",
"檀" : "2905",
"柽" : "2906",
"檄" : "2907",
"檐" : "2908",
"档" : "2909",
"桧" : "2910",
"槚" : "2911",
"檝" : "2912",
"檠" : "2913",
"检" : "2914",
"樯" : "2915",
"檬" : "2916",
"梼" : "2917",
"檯" : "2918",
"槟" : "2919",
"槛" : "2920",
"櫂" : "2921",
"櫃" : "2922",
"櫈" : "2923",
"橹" : "2924",
"榈" : "2925",
"櫜" : "2926",
"椟" : "2927",
"橼" : "2928",
"栎" : "2929",
"櫱" : "2930",
"枥" : "2931",
"榇" : "2932",
"棂" : "2933",
"栊" : "2934",
"櫽" : "2935",
"栏" : "2936",
"樱" : "2937",
"权" : "2938",
"欝" : "2939",
"栾" : "2940",
"榄" : "2941",
"欃" : "2942",
"柩" : "2943",
"欠" : "2944",
"次" : "2945",
"欣" : "2946",
"欬" : "2947",
"欲" : "2948",
"款" : "2949",
"欷" : "2950",
"欹" : "2951",
"欺" : "2952",
"钦" : "2953",
"欿" : "2954",
"歃" : "2955",
"歆" : "2956",
"歇" : "2957",
"歕" : "2958",
"歉" : "2959",
"歌" : "2960",
"歎" : "2961",
"欧" : "2962",
"歔" : "2963",
"欻" : "2964",
"歙" : "2965",
"歛" : "2966",
"歝" : "2967",
"欤" : "2968",
"歠" : "2969",
"欢" : "2970",
"歞" : "2971",
"止" : "2972",
"正" : "2973",
"此" : "2974",
"步" : "2975",
"武" : "2976",
"歪" : "2977",
"歧" : "2978",
"岁" : "2979",
"历" : "2980",
"归" : "2981",
"钬" : "2982",
"歹" : "2983",
"死" : "2984",
"殁" : "2985",
"殀" : "2986",
"殂" : "2987",
"殃" : "2988",
"殄" : "2989",
"殆" : "2990",
"殉" : "2991",
"殊" : "2992",
"殍" : "2993",
"殖" : "2994",
"残" : "2995",
"殕" : "2996",
"殛" : "2997",
"殒" : "2998",
"殇" : "2999",
"殚" : "3000",
"殢" : "3001",
"殪" : "3002",
"殓" : "3003",
"殡" : "3004",
"歼" : "3005",
"镓" : "3006",
"殳" : "3007",
"段" : "3008",
"殷" : "3009",
"杀" : "3010",
"殼" : "3011",
"殽" : "3012",
"殿" : "3013",
"毁" : "3014",
"毅" : "3015",
"殴" : "3016",
"椵" : "3017",
"母" : "3018",
"毋" : "3019",
"每" : "3020",
"毒" : "3021",
"毓" : "3022",
"伢" : "3023",
"比" : "3024",
"毖" : "3025",
"毗" : "3026",
"毘" : "3027",
"鲣" : "3028",
"毛" : "3029",
"毡" : "3030",
"毧" : "3031",
"毫" : "3032",
"毬" : "3033",
"毯" : "3034",
"毳" : "3035",
"牦" : "3036",
"氅" : "3037",
"毸" : "3038",
"毹" : "3039",
"氄" : "3040",
"氈" : "3041",
"氍" : "3042",
"毜" : "3043",
"氏" : "3044",
"氐" : "3045",
"民" : "3046",
"氓" : "3047",
"氯" : "3048",
"气" : "3049",
"氛" : "3050",
"氣" : "3051",
"氤" : "3052",
"氲" : "3053",
"浠" : "3054",
"水" : "3055",
"氷" : "3056",
"永" : "3057",
"氾" : "3058",
"汁" : "3059",
"汀" : "3060",
"求" : "3061",
"汎" : "3062",
"汗" : "3063",
"污" : "3064",
"汛" : "3065",
"汜" : "3066",
"汝" : "3067",
"江" : "3068",
"池" : "3069",
"汊" : "3070",
"汐" : "3071",
"汔" : "3072",
"汕" : "3073",
"汞" : "3074",
"汨" : "3075",
"汪" : "3076",
"汰" : "3077",
"汲" : "3078",
"汴" : "3079",
"汶" : "3080",
"汹" : "3081",
"決" : "3082",
"汾" : "3083",
"沁" : "3084",
"沂" : "3085",
"汽" : "3086",
"沃" : "3087",
"沈" : "3088",
"沉" : "3089",
"沌" : "3090",
"沍" : "3091",
"沐" : "3092",
"没" : "3093",
"沔" : "3094",
"沖" : "3095",
"沗" : "3096",
"沙" : "3097",
"沚" : "3098",
"沛" : "3099",
"沆" : "3100",
"沓" : "3101",
"汩" : "3102",
"汭" : "3103",
"沅" : "3104",
"沬" : "3105",
"沫" : "3106",
"沮" : "3107",
"沱" : "3108",
"河" : "3109",
"沸" : "3110",
"油" : "3111",
"治" : "3112",
"沼" : "3113",
"沽" : "3114",
"沾" : "3115",
"沿" : "3116",
"洺" : "3117",
"泄" : "3118",
"泵" : "3119",
"泅" : "3120",
"泔" : "3121",
"泆" : "3122",
"泉" : "3123",
"泊" : "3124",
"泌" : "3125",
"泓" : "3126",
"法" : "3127",
"泗" : "3128",
"洩" : "3129",
"泙" : "3130",
"泛" : "3131",
"泠" : "3132",
"泡" : "3133",
"波" : "3134",
"泣" : "3135",
"泥" : "3136",
"注" : "3137",
"泫" : "3138",
"泯" : "3139",
"泮" : "3140",
"泰" : "3141",
"泱" : "3142",
"泲" : "3143",
"泳" : "3144",
"沭" : "3145",
"沴" : "3146",
"泐" : "3147",
"泖" : "3148",
"泝" : "3149",
"洄" : "3150",
"洊" : "3151",
"洋" : "3152",
"洌" : "3153",
"洎" : "3154",
"洒" : "3155",
"洗" : "3156",
"洛" : "3157",
"洟" : "3158",
"洞" : "3159",
"津" : "3160",
"洧" : "3161",
"汧" : "3162",
"洪" : "3163",
"洫" : "3164",
"洮" : "3165",
"洲" : "3166",
"洱" : "3167",
"洳" : "3168",
"洵" : "3169",
"洶" : "3170",
"洸" : "3171",
"活" : "3172",
"洼" : "3173",
"洽" : "3174",
"派" : "3175",
"洿" : "3176",
"流" : "3177",
"洙" : "3178",
"洚" : "3179",
"洹" : "3180",
"浙" : "3181",
"浚" : "3182",
"浣" : "3183",
"浦" : "3184",
"浩" : "3185",
"浪" : "3186",
"浮" : "3187",
"浴" : "3188",
"海" : "3189",
"浸" : "3190",
"浃" : "3191",
"浬" : "3192",
"泾" : "3193",
"消" : "3194",
"涉" : "3195",
"淳" : "3196",
"涓" : "3197",
"涔" : "3198",
"涕" : "3199",
"涞" : "3200",
"涘" : "3201",
"浡" : "3202",
"浜" : "3203",
"浥" : "3204",
"涂" : "3205",
"涅" : "3206",
"湟" : "3207",
"涑" : "3208",
"涯" : "3209",
"液" : "3210",
"涵" : "3211",
"涸" : "3212",
"涼" : "3213",
"涿" : "3214",
"淅" : "3215",
"淆" : "3216",
"淇" : "3217",
"淋" : "3218",
"淑" : "3219",
"渊" : "3220",
"淘" : "3221",
"淙" : "3222",
"泪" : "3223",
"淝" : "3224",
"淡" : "3225",
"淤" : "3226",
"淦" : "3227",
"浄" : "3228",
"沦" : "3229",
"淫" : "3230",
"淬" : "3231",
"淮" : "3232",
"淰" : "3233",
"深" : "3234",
"菏" : "3235",
"混" : "3236",
"清" : "3237",
"淹" : "3238",
"浅" : "3239",
"添" : "3240",
"涎" : "3241",
"涪" : "3242",
"涴" : "3243",
"淀" : "3244",
"淄" : "3245",
"淒" : "3246",
"淞" : "3247",
"汋" : "3248",
"淩" : "3249",
"滧" : "3250",
"涣" : "3251",
"渚" : "3252",
"減" : "3253",
"渝" : "3254",
"渠" : "3255",
"渡" : "3256",
"渣" : "3257",
"渤" : "3258",
"渥" : "3259",
"涡" : "3260",
"测" : "3261",
"渭" : "3262",
"港" : "3263",
"渰" : "3264",
"渴" : "3265",
"游" : "3266",
"渺" : "3267",
"浑" : "3268",
"湃" : "3269",
"湄" : "3270",
"湅" : "3271",
"湊" : "3272",
"湍" : "3273",
"湎" : "3274",
"湖" : "3275",
"湘" : "3276",
"湛" : "3277",
"湝" : "3278",
"湧" : "3279",
"湫" : "3280",
"湮" : "3281",
"汤" : "3282",
"湲" : "3283",
"湱" : "3284",
"濉" : "3285",
"㶍" : "3286",
"灕" : "3287",
"湓" : "3288",
"湔" : "3289",
"湜" : "3290",
"湏" : "3291",
"㶞" : "3292",
"源" : "3293",
"準" : "3294",
"溛" : "3295",
"溜" : "3296",
"沟" : "3297",
"溟" : "3298",
"溠" : "3299",
"溢" : "3300",
"溤" : "3301",
"溥" : "3302",
"溧" : "3303",
"汍" : "3304",
"溪" : "3305",
"温" : "3306",
"溯" : "3307",
"溱" : "3308",
"溲" : "3309",
"溶" : "3310",
"溷" : "3311",
"溺" : "3312",
"溼" : "3313",
"溽" : "3314",
"滁" : "3315",
"滂" : "3316",
"滃" : "3317",
"沧" : "3318",
"灭" : "3319",
"滋" : "3320",
"涤" : "3321",
"荥" : "3322",
"滑" : "3323",
"滓" : "3324",
"滔" : "3325",
"滕" : "3326",
"泩" : "3327",
"溘" : "3328",
"滇" : "3329",
"滘" : "3330",
"滫" : "3331",
"滮" : "3332",
"滞" : "3333",
"渗" : "3334",
"澝" : "3335",
"滴" : "3336",
"沪" : "3337",
"浒" : "3338",
"洑" : "3339",
"滚" : "3340",
"满" : "3341",
"渔" : "3342",
"漂" : "3343",
"漆" : "3344",
"漏" : "3345",
"溉" : "3346",
"漓" : "3347",
"演" : "3348",
"漘" : "3349",
"漙" : "3350",
"漠" : "3351",
"汉" : "3352",
"涟" : "3353",
"漪" : "3354",
"漫" : "3355",
"渍" : "3356",
"漭" : "3357",
"淌" : "3358",
"漱" : "3359",
"涨" : "3360",
"漳" : "3361",
"渐" : "3362",
"漾" : "3363",
"浆" : "3364",
"滊" : "3365",
"滷" : "3366",
"滹" : "3367",
"漈" : "3368",
"漉" : "3369",
"溎" : "3370",
"沤" : "3371",
"漦" : "3372",
"漩" : "3373",
"漯" : "3374",
"溆" : "3375",
"漶" : "3376",
"溇" : "3377",
"漕" : "3378",
"颍" : "3379",
"泼" : "3380",
"洁" : "3381",
"潘" : "3382",
"潜" : "3383",
"潟" : "3384",
"潢" : "3385",
"涧" : "3386",
"润" : "3387",
"潦" : "3388",
"潭" : "3389",
"潮" : "3390",
"溃" : "3391",
"潼" : "3392",
"潴" : "3393",
"潸" : "3394",
"潺" : "3395",
"涩" : "3396",
"澄" : "3397",
"浇" : "3398",
"涝" : "3399",
"澈" : "3400",
"澔" : "3401",
"澌" : "3402",
"澎" : "3403",
"潏" : "3404",
"潝" : "3405",
"潞" : "3406",
"潠" : "3407",
"潀" : "3408",
"濆" : "3409",
"浔" : "3410",
"潾" : "3411",
"澍" : "3412",
"澂" : "3413",
"澒" : "3414",
"沩" : "3415",
"澡" : "3416",
"澟" : "3417",
"澣" : "3418",
"泽" : "3419",
"浍" : "3420",
"澳" : "3421",
"澹" : "3422",
"激" : "3423",
"浊" : "3424",
"濂" : "3425",
"浓" : "3426",
"渑" : "3427",
"澥" : "3428",
"滪" : "3429",
"澧" : "3430",
"澨" : "3431",
"澰" : "3432",
"澴" : "3433",
"澱" : "3434",
"濇" : "3435",
"澶" : "3436",
"澼" : "3437",
"泞" : "3438",
"澬" : "3439",
"湿" : "3440",
"濈" : "3441",
"濊" : "3442",
"濛" : "3443",
"济" : "3444",
"濠" : "3445",
"濡" : "3446",
"涛" : "3447",
"滥" : "3448",
"濬" : "3449",
"濮" : "3450",
"濯" : "3451",
"潍" : "3452",
"滨" : "3453",
"泻" : "3454",
"濩" : "3455",
"濞" : "3456",
"溅" : "3457",
"泺" : "3458",
"滤" : "3459",
"渎" : "3460",
"浏" : "3461",
"瀑" : "3462",
"瀁" : "3463",
"濒" : "3464",
"灠" : "3465",
"瀚" : "3466",
"瀛" : "3467",
"沥" : "3468",
"潇" : "3469",
"瀠" : "3470",
"濑" : "3471",
"泸" : "3472",
"瀡" : "3473",
"瀣" : "3474",
"瀼" : "3475",
"瀋" : "3476",
"瀍" : "3477",
"泷" : "3478",
"瀦" : "3479",
"濳" : "3480",
"潋" : "3481",
"澜" : "3482",
"瀰" : "3483",
"溁" : "3484",
"瀹" : "3485",
"瀺" : "3486",
"灌" : "3487",
"沣" : "3488",
"灉" : "3489",
"滠" : "3490",
"灑" : "3491",
"滩" : "3492",
"灏" : "3493",
"湾" : "3494",
"滟" : "3495",
"灞" : "3496",
"滦" : "3497",
"炸" : "3498",
"火" : "3499",
"灰" : "3500",
"灶" : "3501",
"灸" : "3502",
"灿" : "3503",
"灼" : "3504",
"災" : "3505",
"灾" : "3506",
"炊" : "3507",
"炎" : "3508",
"炒" : "3509",
"炕" : "3510",
"炙" : "3511",
"炘" : "3512",
"炞" : "3513",
"炫" : "3514",
"炬" : "3515",
"炭" : "3516",
"炮" : "3517",
"炯" : "3518",
"炰" : "3519",
"炱" : "3520",
"炳" : "3521",
"炷" : "3522",
"炧" : "3523",
"畑" : "3524",
"烈" : "3525",
"烋" : "3526",
"乌" : "3527",
"烙" : "3529",
"烘" : "3530",
"烜" : "3531",
"烝" : "3532",
"烟" : "3533",
"烹" : "3534",
"烺" : "3535",
"烽" : "3536",
"焌" : "3537",
"焙" : "3538",
"焚" : "3539",
"焜" : "3540",
"無" : "3541",
"焦" : "3542",
"焰" : "3543",
"然" : "3544",
"焞" : "3545",
"焠" : "3546",
"焉" : "3547",
"煅" : "3548",
"焊" : "3549",
"炼" : "3550",
"煊" : "3551",
"煌" : "3552",
"煎" : "3553",
"煮" : "3554",
"炜" : "3555",
"熙" : "3556",
"煖" : "3557",
"煜" : "3558",
"煞" : "3559",
"茕" : "3560",
"煤" : "3561",
"焕" : "3562",
"煦" : "3563",
"照" : "3564",
"烦" : "3565",
"煨" : "3566",
"煏" : "3567",
"炀" : "3568",
"煽" : "3569",
"熀" : "3570",
"熄" : "3571",
"煴" : "3572",
"熇" : "3573",
"熊" : "3574",
"熏" : "3575",
"荧" : "3576",
"熛" : "3577",
"熟" : "3578",
"熔" : "3579",
"熨" : "3580",
"熬" : "3581",
"熯" : "3582",
"热" : "3583",
"熠" : "3584",
"颎" : "3585",
"熸" : "3586",
"熺" : "3587",
"熹" : "3588",
"炽" : "3589",
"燀" : "3590",
"煙" : "3591",
"燐" : "3592",
"燖" : "3593",
"烫" : "3594",
"燃" : "3595",
"燄" : "3596",
"灯" : "3597",
"燎" : "3598",
"烧" : "3599",
"燔" : "3600",
"燕" : "3601",
"营" : "3602",
"燠" : "3603",
"燥" : "3604",
"燦" : "3605",
"燧" : "3606",
"燬" : "3607",
"烛" : "3608",
"燻" : "3609",
"燮" : "3610",
"燹" : "3611",
"烬" : "3612",
"燿" : "3613",
"焘" : "3614",
"爆" : "3615",
"爇" : "3616",
"烁" : "3617",
"爓" : "3618",
"炉" : "3619",
"烂" : "3620",
"爚" : "3621",
"爝" : "3622",
"爟" : "3623",
"焮" : "3624",
"炖" : "3625",
"焖" : "3626",
"爨" : "3627",
"烤" : "3628",
"爪" : "3629",
"争" : "3630",
"爮" : "3631",
"爬" : "3632",
"爰" : "3633",
"为" : "3634",
"爵" : "3635",
"睑" : "3636",
"父" : "3637",
"爹" : "3638",
"爷" : "3639",
"爸" : "3640",
"爻" : "3641",
"爽" : "3642",
"爾" : "3643",
"趼" : "3644",
"爿" : "3645",
"牀" : "3646",
"牂" : "3647",
"牁" : "3648",
"牆" : "3649",
"藠" : "3650",
"片" : "3651",
"版" : "3652",
"牋" : "3653",
"牌" : "3654",
"牒" : "3655",
"牕" : "3656",
"牖" : "3657",
"牍" : "3658",
"牓" : "3659",
"牙" : "3660",
"肼" : "3661",
"牛" : "3662",
"牝" : "3663",
"牟" : "3664",
"牡" : "3665",
"牢" : "3666",
"牣" : "3667",
"牧" : "3668",
"牴" : "3669",
"物" : "3670",
"牠" : "3671",
"牯" : "3672",
"牲" : "3673",
"犋" : "3674",
"牷" : "3675",
"特" : "3676",
"牵" : "3677",
"牿" : "3678",
"犀" : "3679",
"犁" : "3680",
"犉" : "3681",
"犍" : "3682",
"犒" : "3683",
"荦" : "3684",
"犊" : "3685",
"牺" : "3686",
"犨" : "3687",
"牳" : "3688",
"犬" : "3689",
"犯" : "3690",
"犴" : "3691",
"状" : "3692",
"狂" : "3693",
"狃" : "3694",
"狄" : "3695",
"狁" : "3696",
"狎" : "3697",
"狐" : "3698",
"狗" : "3699",
"狙" : "3700",
"狡" : "3701",
"狥" : "3702",
"狠" : "3703",
"狩" : "3704",
"狴" : "3705",
"狸" : "3706",
"狭" : "3707",
"狼" : "3708",
"狈" : "3709",
"狻" : "3710",
"狺" : "3711",
"狷" : "3712",
"狢" : "3713",
"猁" : "3714",
"猖" : "3715",
"猗" : "3716",
"狰" : "3717",
"猛" : "3718",
"猜" : "3719",
"猝" : "3720",
"猞" : "3721",
"猊" : "3722",
"猘" : "3723",
"猢" : "3724",
"猥" : "3725",
"猩" : "3726",
"猪" : "3727",
"猫" : "3728",
"猴" : "3729",
"犹" : "3730",
"猷" : "3731",
"猔" : "3732",
"猱" : "3733",
"猺" : "3734",
"狲" : "3735",
"猾" : "3736",
"猿" : "3737",
"獃" : "3738",
"狱" : "3739",
"狮" : "3740",
"獍" : "3741",
"獐" : "3742",
"獒" : "3743",
"獗" : "3744",
"獘" : "3745",
"獧" : "3746",
"独" : "3747",
"狯" : "3748",
"獬" : "3749",
"獠" : "3750",
"狝" : "3751",
"获" : "3752",
"獯" : "3753",
"獳" : "3754",
"犷" : "3755",
"猎" : "3756",
"兽" : "3757",
"獭" : "3758",
"献" : "3759",
"玁" : "3760",
"狞" : "3761",
"猡" : "3762",
"玄" : "3763",
"率" : "3764",
"玅" : "3765",
"玈" : "3766",
"锔" : "3767",
"玉" : "3768",
"王" : "3769",
"玎" : "3770",
"玕" : "3771",
"玔" : "3772",
"玖" : "3773",
"玟" : "3774",
"玠" : "3775",
"玢" : "3776",
"玦" : "3777",
"珏" : "3778",
"玩" : "3779",
"玫" : "3780",
"玲" : "3781",
"玳" : "3782",
"玷" : "3783",
"珂" : "3784",
"珇" : "3785",
"珈" : "3786",
"珉" : "3787",
"玻" : "3788",
"珀" : "3789",
"珊" : "3790",
"珍" : "3791",
"珌" : "3792",
"玼" : "3793",
"珞" : "3794",
"珓" : "3795",
"珠" : "3796",
"珙" : "3797",
"珖" : "3798",
"珥" : "3799",
"珣" : "3800",
"珩" : "3801",
"珪" : "3802",
"班" : "3803",
"珧" : "3804",
"珮" : "3805",
"珽" : "3806",
"现" : "3807",
"球" : "3808",
"琅" : "3809",
"理" : "3810",
"琇" : "3811",
"琉" : "3812",
"珶" : "3813",
"珷" : "3814",
"琊" : "3815",
"琕" : "3816",
"琖" : "3817",
"琚" : "3818",
"琛" : "3819",
"琢" : "3820",
"琤" : "3821",
"琥" : "3822",
"琦" : "3823",
"琨" : "3824",
"琪" : "3825",
"琭" : "3826",
"琮" : "3827",
"琯" : "3828",
"琳" : "3829",
"琴" : "3830",
"琶" : "3831",
"琵" : "3832",
"琫" : "3833",
"琬" : "3834",
"玤" : "3835",
"琲" : "3836",
"玮" : "3837",
"瑕" : "3838",
"瑙" : "3839",
"瑚" : "3840",
"瑛" : "3841",
"瑜" : "3842",
"瑞" : "3843",
"瑟" : "3844",
"瑠" : "3845",
"瑀" : "3846",
"瑁" : "3847",
"瑇" : "3848",
"瑑" : "3849",
"瑗" : "3850",
"琐" : "3851",
"瑶" : "3852",
"莹" : "3853",
"玛" : "3854",
"瑰" : "3855",
"玱" : "3856",
"瑬" : "3857",
"瑯" : "3858",
"瑱" : "3859",
"瑳" : "3860",
"瑴" : "3861",
"璀" : "3862",
"璃" : "3863",
"璋" : "3864",
"瑽" : "3865",
"瑾" : "3866",
"璁" : "3867",
"璆" : "3868",
"𤨢" : "3869",
"璈" : "3870",
"琎" : "3871",
"璇" : "3872",
"璐" : "3873",
"璜" : "3874",
"玑" : "3875",
"璘" : "3876",
"璞" : "3877",
"璟" : "3878",
"璠" : "3879",
"璧" : "3880",
"璨" : "3881",
"璯" : "3882",
"环" : "3883",
"璪" : "3884",
"珰" : "3885",
"玺" : "3886",
"璲" : "3887",
"瑸" : "3888",
"玙" : "3889",
"瓊" : "3890",
"珑" : "3891",
"璎" : "3892",
"瓛" : "3893",
"璿" : "3894",
"瓒" : "3895",
"瓈" : "3896",
"瓀" : "3897",
"瓘" : "3898",
"璥" : "3899",
"瓜" : "3900",
"瓞" : "3901",
"瓠" : "3902",
"瓢" : "3903",
"瓣" : "3904",
"瓤" : "3905",
"佧" : "3906",
"瓦" : "3907",
"瓮" : "3908",
"瓴" : "3909",
"瓶" : "3910",
"瓷" : "3911",
"瓻" : "3912",
"甃" : "3913",
"甄" : "3914",
"甇" : "3915",
"瓿" : "3916",
"瓯" : "3917",
"甍" : "3918",
"甎" : "3919",
"甑" : "3920",
"甓" : "3921",
"甕" : "3922",
"甗" : "3923",
"甔" : "3924",
"甖" : "3925",
"瓩" : "3926",
"甘" : "3927",
"甚" : "3928",
"甜" : "3929",
"甞" : "3930",
"咔" : "3931",
"生" : "3932",
"甡" : "3933",
"产" : "3934",
"甥" : "3935",
"甦" : "3936",
"㽓" : "3937",
"用" : "3938",
"甪" : "3939",
"甫" : "3940",
"甬" : "3941",
"甯" : "3942",
"甩" : "3943",
"田" : "3944",
"由" : "3945",
"甲" : "3946",
"申" : "3947",
"男" : "3948",
"甸" : "3949",
"甽" : "3950",
"甾" : "3951",
"畀" : "3952",
"畋" : "3953",
"界" : "3954",
"畎" : "3955",
"畏" : "3956",
"町" : "3957",
"畊" : "3958",
"甿" : "3959",
"畇" : "3960",
"畔" : "3961",
"畚" : "3962",
"畛" : "3963",
"畜" : "3964",
"亩" : "3965",
"留" : "3966",
"畟" : "3967",
"毕" : "3968",
"畤" : "3969",
"略" : "3970",
"畦" : "3971",
"番" : "3972",
"画" : "3973",
"畬" : "3974",
"畯" : "3975",
"異" : "3976",
"畮" : "3977",
"畷" : "3978",
"畹" : "3979",
"畽" : "3980",
"当" : "3981",
"畸" : "3982",
"畿" : "3983",
"疆" : "3984",
"畴" : "3985",
"疊" : "3986",
"锎" : "3987",
"疋" : "3988",
"疎" : "3989",
"疏" : "3990",
"疐" : "3991",
"疑" : "3992",
"钪" : "3993",
"疒" : "3994",
"疔" : "3995",
"痃" : "3996",
"痉" : "3997",
"疚" : "3998",
"疝" : "3999",
"痠" : "4000",
"疣" : "4001",
"疤" : "4002",
"疥" : "4003",
"疫" : "4004",
"痚" : "4005",
"疲" : "4006",
"疳" : "4007",
"疴" : "4008",
"疵" : "4009",
"疸" : "4010",
"疹" : "4011",
"疼" : "4012",
"疽" : "4013",
"疾" : "4014",
"疿" : "4015",
"病" : "4016",
"症" : "4017",
"痂" : "4018",
"痊" : "4019",
"痌" : "4020",
"痍" : "4021",
"痒" : "4022",
"痔" : "4023",
"痕" : "4024",
"痧" : "4025",
"痘" : "4026",
"痛" : "4027",
"痞" : "4028",
"痣" : "4029",
"痡" : "4030",
"痢" : "4031",
"痱" : "4032",
"痰" : "4033",
"痳" : "4034",
"痴" : "4035",
"痹" : "4036",
"痼" : "4037",
"痾" : "4038",
"痿" : "4039",
"瘀" : "4040",
"瘁" : "4041",
"瘂" : "4042",
"瘇" : "4043",
"瘉" : "4044",
"疯" : "4045",
"疡" : "4046",
"瘏" : "4047",
"瘝" : "4048",
"瘐" : "4049",
"痪" : "4050",
"瘕" : "4051",
"瘖" : "4052",
"瘗" : "4053",
"瘟" : "4054",
"瘠" : "4055",
"疮" : "4056",
"瘢" : "4057",
"瘤" : "4058",
"瘥" : "4059",
"瘦" : "4060",
"疟" : "4061",
"痵" : "4062",
"瘸" : "4063",
"瘰" : "4064",
"瘳" : "4065",
"瘴" : "4066",
"瘵" : "4067",
"瘘" : "4068",
"瘼" : "4069",
"疗" : "4070",
"癃" : "4071",
"痨" : "4072",
"痫" : "4073",
"癌" : "4074",
"癖" : "4075",
"瘺" : "4076",
"癑" : "4077",
"疠" : "4078",
"瘩" : "4079",
"癜" : "4080",
"疖" : "4081",
"癡" : "4082",
"癢" : "4083",
"癥" : "4084",
"瘪" : "4085",
"瘿" : "4086",
"疬" : "4087",
"癞" : "4088",
"癣" : "4089",
"瘾" : "4090",
"癯" : "4091",
"痈" : "4092",
"瘫" : "4093",
"癫" : "4094",
"疙" : "4095",
"癶" : "4096",
"癸" : "4097",
"登" : "4098",
"发" : "4099",
"钶" : "4100",
"白" : "4101",
"百" : "4102",
"皂" : "4103",
"的" : "4104",
"皆" : "4105",
"皇" : "4106",
"皈" : "4107",
"皋" : "4108",
"皎" : "4109",
"皓" : "4110",
"皖" : "4111",
"皙" : "4112",
"皜" : "4113",
"皑" : "4114",
"皤" : "4115",
"皞" : "4116",
"皦" : "4117",
"皭" : "4118",
"皪" : "4119",
"皫" : "4120",
"氪" : "4121",
"皮" : "4122",
"皴" : "4123",
"皷" : "4124",
"皲" : "4125",
"皱" : "4126",
"皽" : "4127",
"醌" : "4128",
"皿" : "4129",
"盂" : "4130",
"盃" : "4131",
"盅" : "4132",
"盆" : "4133",
"盈" : "4134",
"益" : "4135",
"盌" : "4136",
"盍" : "4137",
"盎" : "4138",
"盒" : "4139",
"盔" : "4140",
"盛" : "4141",
"盗" : "4142",
"盝" : "4143",
"盏" : "4144",
"盟" : "4145",
"葢" : "4146",
"尽" : "4147",
"监" : "4148",
"盘" : "4149",
"盥" : "4150",
"卢" : "4151",
"盦" : "4152",
"盭" : "4153",
"盩" : "4154",
"盪" : "4155",
"盬" : "4156",
"蛞" : "4157",
"目" : "4158",
"盲" : "4159",
"直" : "4160",
"相" : "4161",
"盼" : "4162",
"盾" : "4163",
"省" : "4164",
"眄" : "4165",
"眇" : "4166",
"眈" : "4167",
"眉" : "4168",
"盯" : "4169",
"看" : "4170",
"盻" : "4171",
"眨" : "4172",
"盱" : "4173",
"睬" : "4174",
"眛" : "4175",
"真" : "4176",
"眠" : "4177",
"瞄" : "4178",
"眥" : "4179",
"眦" : "4180",
"眩" : "4181",
"眙" : "4182",
"眯" : "4183",
"眵" : "4184",
"瞇" : "4185",
"眶" : "4186",
"眷" : "4187",
"眸" : "4188",
"眺" : "4189",
"眼" : "4190",
"眾" : "4191",
"着" : "4192",
"眹" : "4193",
"睨" : "4194",
"睇" : "4195",
"睆" : "4196",
"瞅" : "4197",
"睍" : "4198",
"睚" : "4199",
"睛" : "4200",
"睁" : "4201",
"睐" : "4202",
"睾" : "4203",
"睡" : "4204",
"睢" : "4205",
"督" : "4206",
"睦" : "4207",
"睫" : "4208",
"瞌" : "4209",
"睟" : "4210",
"睥" : "4211",
"睹" : "4212",
"睿" : "4213",
"瞀" : "4214",
"睘" : "4215",
"睯" : "4216",
"瞋" : "4217",
"瞍" : "4218",
"瞎" : "4219",
"瞑" : "4220",
"瞒" : "4221",
"瞠" : "4222",
"瞪" : "4223",
"瞥" : "4224",
"瞧" : "4225",
"瞬" : "4226",
"瞳" : "4227",
"瞯" : "4228",
"瞭" : "4229",
"瞰" : "4230",
"瞆" : "4231",
"瞻" : "4232",
"瞽" : "4233",
"瞿" : "4234",
"矇" : "4235",
"矍" : "4236",
"眬" : "4237",
"矗" : "4238",
"矙" : "4239",
"瞢" : "4240",
"瞩" : "4241",
"眭" : "4242",
"矛" : "4243",
"矜" : "4244",
"矞" : "4245",
"砬" : "4246",
"矢" : "4247",
"矣" : "4248",
"知" : "4249",
"矧" : "4250",
"矩" : "4251",
"短" : "4252",
"矮" : "4253",
"矰" : "4254",
"矫" : "4255",
"矱" : "4256",
"鑞" : "4257",
"石" : "4258",
"矴" : "4259",
"矼" : "4260",
"砆" : "4261",
"矻" : "4262",
"砂" : "4263",
"砉" : "4264",
"砌" : "4265",
"砍" : "4266",
"砑" : "4267",
"砒" : "4268",
"砭" : "4269",
"砟" : "4270",
"砸" : "4271",
"砥" : "4272",
"斫" : "4273",
"砦" : "4274",
"破" : "4275",
"砲" : "4276",
"砜" : "4277",
"砧" : "4278",
"砮" : "4279",
"砰" : "4280",
"硃" : "4281",
"研" : "4282",
"硎" : "4283",
"硁" : "4284",
"硝" : "4285",
"硖" : "4286",
"砗" : "4287",
"硫" : "4288",
"硬" : "4289",
"碘" : "4290",
"砚" : "4291",
"确" : "4292",
"碍" : "4293",
"碌" : "4294",
"碎" : "4295",
"硼" : "4296",
"碗" : "4297",
"碁" : "4298",
"碇" : "4299",
"碔" : "4300",
"碑" : "4301",
"碓" : "4302",
"硾" : "4303",
"碡" : "4304",
"碪" : "4305",
"碉" : "4306",
"砀" : "4307",
"碟" : "4308",
"碣" : "4309",
"碧" : "4310",
"硕" : "4311",
"碬" : "4312",
"碯" : "4313",
"碰" : "4314",
"確" : "4315",
"码" : "4316",
"碾" : "4317",
"磁" : "4318",
"磅" : "4319",
"磊" : "4320",
"磇" : "4321",
"磋" : "4322",
"磐" : "4323",
"磓" : "4324",
"磔" : "4325",
"磕" : "4326",
"磉" : "4327",
"硙" : "4328",
"碴" : "4329",
"硵" : "4330",
"砖" : "4331",
"碛" : "4332",
"磨" : "4333",
"磬" : "4334",
"矶" : "4335",
"磲" : "4336",
"磺" : "4337",
"硗" : "4338",
"礁" : "4339",
"磷" : "4340",
"磻" : "4341",
"础" : "4342",
"磈" : "4343",
"礙" : "4344",
"矾" : "4345",
"礧" : "4346",
"磴" : "4347",
"礮" : "4348",
"矿" : "4349",
"砺" : "4350",
"砾" : "4351",
"砻" : "4352",
"礴" : "4353",
"碱" : "4354",
"示" : "4355",
"礽" : "4356",
"社" : "4357",
"祀" : "4358",
"祁" : "4359",
"祆" : "4360",
"祇" : "4361",
"祈" : "4362",
"祉" : "4363",
"礿" : "4364",
"祕" : "4365",
"祊" : "4366",
"祏" : "4367",
"祐" : "4368",
"祓" : "4369",
"祔" : "4370",
"祖" : "4371",
"祗" : "4372",
"祚" : "4373",
"祛" : "4374",
"祜" : "4375",
"祝" : "4376",
"神" : "4377",
"祟" : "4378",
"祠" : "4379",
"祫" : "4380",
"祲" : "4381",
"祥" : "4382",
"祧" : "4383",
"票" : "4384",
"祭" : "4385",
"禆" : "4386",
"祼" : "4387",
"祺" : "4388",
"禄" : "4389",
"禀" : "4390",
"禁" : "4391",
"禋" : "4392",
"祸" : "4393",
"祯" : "4394",
"福" : "4395",
"禘" : "4396",
"禊" : "4397",
"禔" : "4398",
"禖" : "4399",
"祎" : "4400",
"祃" : "4401",
"禝" : "4402",
"禦" : "4403",
"禠" : "4404",
"禫" : "4405",
"禧" : "4406",
"禅" : "4407",
"禨" : "4408",
"礼" : "4409",
"祢" : "4410",
"祷" : "4411",
"禳" : "4412",
"铼" : "4414",
"禸" : "4415",
"禹" : "4416",
"禺" : "4417",
"离" : "4418",
"禽" : "4419",
"镧" : "4420",
"禾" : "4421",
"秃" : "4422",
"秀" : "4423",
"私" : "4424",
"秈" : "4425",
"秉" : "4426",
"秆" : "4427",
"秋" : "4428",
"种" : "4429",
"科" : "4430",
"秕" : "4431",
"秒" : "4432",
"秔" : "4433",
"秘" : "4434",
"秪" : "4435",
"租" : "4436",
"秠" : "4437",
"秣" : "4438",
"秤" : "4439",
"秦" : "4440",
"秧" : "4441",
"秩" : "4442",
"秫" : "4443",
"秭" : "4444",
"秬" : "4445",
"秷" : "4446",
"秸" : "4447",
"移" : "4448",
"稀" : "4449",
"稂" : "4450",
"税" : "4451",
"稈" : "4452",
"程" : "4453",
"稌" : "4454",
"稍" : "4455",
"稊" : "4456",
"稔" : "4457",
"稗" : "4458",
"稞" : "4459",
"稚" : "4460",
"稛" : "4461",
"稜" : "4462",
"稟" : "4463",
"稠" : "4464",
"稭" : "4465",
"稹" : "4466",
"種" : "4467",
"称" : "4468",
"稷" : "4469",
"稻" : "4470",
"稼" : "4471",
"稽" : "4472",
"稿" : "4473",
"穀" : "4474",
"穄" : "4475",
"穆" : "4476",
"穉" : "4477",
"穋" : "4478",
"稣" : "4479",
"积" : "4480",
"颖" : "4481",
"穗" : "4482",
"穜" : "4483",
"穑" : "4484",
"穟" : "4485",
"秽" : "4486",
"秾" : "4487",
"穨" : "4488",
"稳" : "4489",
"穫" : "4490",
"穞" : "4491",
"穰" : "4492",
"罱" : "4493",
"穴" : "4494",
"穵" : "4495",
"究" : "4496",
"穸" : "4497",
"穹" : "4498",
"突" : "4499",
"空" : "4500",
"穽" : "4501",
"穿" : "4502",
"窀" : "4503",
"窄" : "4504",
"窅" : "4505",
"窆" : "4506",
"窈" : "4507",
"窋" : "4508",
"窌" : "4509",
"窒" : "4510",
"窕" : "4511",
"窖" : "4512",
"窞" : "4513",
"窗" : "4514",
"窘" : "4515",
"窟" : "4516",
"窠" : "4517",
"窨" : "4518",
"窝" : "4519",
"窪" : "4520",
"窬" : "4521",
"穷" : "4522",
"窑" : "4523",
"窳" : "4524",
"窎" : "4525",
"窭" : "4526",
"窸" : "4527",
"窣" : "4528",
"窥" : "4529",
"窾" : "4530",
"竂" : "4531",
"竁" : "4532",
"窜" : "4533",
"窍" : "4534",
"窦" : "4535",
"竈" : "4536",
"窃" : "4537",
"蒗" : "4538",
"立" : "4539",
"竑" : "4540",
"站" : "4541",
"竚" : "4542",
"竝" : "4543",
"竟" : "4544",
"章" : "4545",
"竣" : "4546",
"童" : "4547",
"竦" : "4548",
"竖" : "4549",
"竭" : "4550",
"端" : "4551",
"竞" : "4552",
"铑" : "4553",
"竹" : "4554",
"竺" : "4555",
"竽" : "4556",
"竿" : "4557",
"笄" : "4558",
"笈" : "4559",
"笊" : "4560",
"笏" : "4561",
"笑" : "4562",
"笙" : "4563",
"笛" : "4564",
"笞" : "4565",
"笤" : "4566",
"笠" : "4567",
"笥" : "4568",
"符" : "4569",
"笨" : "4570",
"笋" : "4571",
"笪" : "4572",
"笫" : "4573",
"第" : "4574",
"笮" : "4575",
"笆" : "4576",
"笎" : "4577",
"笱" : "4578",
"笳" : "4579",
"筅" : "4580",
"笔" : "4581",
"筇" : "4582",
"等" : "4583",
"筊" : "4584",
"筋" : "4585",
"筌" : "4586",
"筍" : "4587",
"筎" : "4588",
"筏" : "4589",
"筐" : "4590",
"筑" : "4591",
"筒" : "4592",
"筓" : "4593",
"答" : "4594",
"策" : "4595",
"筠" : "4596",
"筤" : "4597",
"筥" : "4598",
"筷" : "4599",
"笕" : "4600",
"筩" : "4601",
"筮" : "4602",
"筲" : "4603",
"筴" : "4604",
"筵" : "4605",
"筯" : "4606",
"筱" : "4607",
"笺" : "4608",
"箎" : "4609",
"箂" : "4610",
"箍" : "4611",
"箇" : "4612",
"箔" : "4613",
"箕" : "4614",
"算" : "4615",
"箛" : "4616",
"箝" : "4617",
"箠" : "4618",
"管" : "4619",
"筝" : "4620",
"箐" : "4621",
"箒" : "4622",
"箑" : "4623",
"箘" : "4624",
"箜" : "4625",
"箊" : "4626",
"箬" : "4627",
"箭" : "4628",
"箯" : "4629",
"箱" : "4630",
"箴" : "4631",
"箸" : "4632",
"箾" : "4633",
"节" : "4634",
"篁" : "4635",
"範" : "4636",
"篆" : "4637",
"篇" : "4638",
"築" : "4639",
"箧" : "4640",
"篘" : "4641",
"篔" : "4642",
"篙" : "4643",
"篚" : "4644",
"篝" : "4645",
"筿" : "4646",
"篡" : "4647",
"笃" : "4648",
"簑" : "4649",
"篧" : "4650",
"篨" : "4651",
"筛" : "4652",
"篦" : "4653",
"篪" : "4654",
"篲" : "4655",
"筚" : "4656",
"篺" : "4657",
"篴" : "4658",
"篷" : "4659",
"箦" : "4660",
"簆" : "4661",
"簇" : "4662",
"簋" : "4663",
"篓" : "4664",
"簌" : "4665",
"簏" : "4666",
"篌" : "4667",
"篾" : "4668",
"簃" : "4669",
"簚" : "4670",
"簜" : "4671",
"簟" : "4672",
"箪" : "4673",
"簠" : "4674",
"简" : "4675",
"篑" : "4676",
"簥" : "4677",
"簦" : "4678",
"簧" : "4679",
"簨" : "4680",
"簪" : "4681",
"箫" : "4682",
"簷" : "4683",
"簸" : "4684",
"簵" : "4685",
"簻" : "4686",
"签" : "4687",
"簾" : "4688",
"簿" : "4689",
"𥳁" : "4690",
"篮" : "4691",
"籊" : "4692",
"筹" : "4693",
"籍" : "4694",
"籄" : "4695",
"籐" : "4696",
"籔" : "4697",
"籓" : "4698",
"籀" : "4699",
"箓" : "4700",
"籚" : "4701",
"篯" : "4702",
"箨" : "4703",
"籁" : "4704",
"笼" : "4705",
"籤" : "4706",
"籥" : "4707",
"籨" : "4708",
"籧" : "4709",
"笾" : "4710",
"籫" : "4711",
"箩" : "4712",
"篱" : "4713",
"籯" : "4714",
"籲" : "4715",
"篰" : "4716",
"米" : "4717",
"粃" : "4718",
"籹" : "4719",
"粉" : "4720",
"粒" : "4721",
"粕" : "4722",
"粗" : "4723",
"粘" : "4724",
"粟" : "4725",
"粢" : "4726",
"粤" : "4727",
"粥" : "4728",
"籼" : "4729",
"粧" : "4730",
"粱" : "4731",
"粲" : "4732",
"粹" : "4733",
"粳" : "4734",
"粺" : "4735",
"粼" : "4736",
"精" : "4737",
"糈" : "4738",
"糊" : "4739",
"糉" : "4740",
"糕" : "4741",
"糇" : "4742",
"糖" : "4743",
"糗" : "4744",
"糜" : "4745",
"糁" : "4746",
"粪" : "4747",
"糟" : "4748",
"糠" : "4749",
"籽" : "4750",
"糙" : "4751",
"糧" : "4752",
"糯" : "4754",
"粝" : "4755",
"籴" : "4756",
"粑" : "4757",
"糵" : "4758",
"粜" : "4759",
"糎" : "4760",
"糸" : "4761",
"系" : "4762",
"纠" : "4763",
"纪" : "4764",
"纣" : "4765",
"约" : "4766",
"红" : "4767",
"纡" : "4768",
"纥" : "4769",
"纨" : "4770",
"纫" : "4771",
"紊" : "4772",
"纹" : "4773",
"紵" : "4774",
"缐" : "4775",
"紏" : "4776",
"纴" : "4777",
"紞" : "4778",
"紽" : "4779",
"纳" : "4780",
"纽" : "4781",
"纾" : "4782",
"纯" : "4783",
"纱" : "4784",
"纮" : "4785",
"纸" : "4786",
"级" : "4787",
"纷" : "4788",
"纭" : "4789",
"素" : "4790",
"纺" : "4791",
"索" : "4792",
"紫" : "4793",
"缏" : "4794",
"紬" : "4795",
"紮" : "4796",
"累" : "4797",
"细" : "4798",
"缩" : "4799",
"绅" : "4800",
"绍" : "4801",
"绀" : "4802",
"绋" : "4803",
"紾" : "4804",
"绐" : "4805",
"绌" : "4806",
"终" : "4807",
"絃" : "4808",
"组" : "4809",
"绊" : "4810",
"绂" : "4811",
"絅" : "4812",
"絏" : "4813",
"结" : "4814",
"绝" : "4815",
"絛" : "4816",
"絜" : "4817",
"绔" : "4818",
"绞" : "4819",
"络" : "4820",
"绚" : "4821",
"给" : "4822",
"绒" : "4823",
"絪" : "4824",
"絮" : "4825",
"绖" : "4826",
"统" : "4827",
"丝" : "4828",
"绛" : "4829",
"絖" : "4830",
"绢" : "4831",
"絺" : "4832",
"絿" : "4833",
"绑" : "4834",
"绨" : "4835",
"绣" : "4836",
"绠" : "4837",
"綌" : "4838",
"綍" : "4839",
"绥" : "4840",
"綑" : "4841",
"经" : "4842",
"绡" : "4843",
"综" : "4844",
"绿" : "4845",
"绸" : "4846",
"綦" : "4847",
"线" : "4848",
"绶" : "4849",
"维" : "4850",
"綮" : "4851",
"绾" : "4852",
"網" : "4853",
"纲" : "4854",
"绷" : "4855",
"缀" : "4856",
"綵" : "4857",
"纶" : "4858",
"绺" : "4859",
"绮" : "4860",
"绽" : "4861",
"绰" : "4862",
"緅" : "4863",
"緌" : "4864",
"緎" : "4865",
"绫" : "4866",
"缁" : "4867",
"紧" : "4868",
"绯" : "4869",
"绻" : "4870",
"綯" : "4871",
"绪" : "4872",
"缄" : "4873",
"缉" : "4874",
"绵" : "4875",
"缎" : "4876",
"缔" : "4877",
"缘" : "4878",
"緤" : "4879",
"缌" : "4880",
"緵" : "4881",
"编" : "4882",
"缓" : "4883",
"缅" : "4884",
"纬" : "4885",
"练" : "4886",
"緻" : "4887",
"缊" : "4888",
"缃" : "4889",
"繃" : "4890",
"缗" : "4891",
"緥" : "4892",
"缈" : "4893",
"繖" : "4894",
"缇" : "4895",
"萦" : "4896",
"缙" : "4897",
"缢" : "4898",
"缒" : "4899",
"绉" : "4900",
"缞" : "4901",
"缚" : "4902",
"缜" : "4903",
"缛" : "4904",
"县" : "4905",
"缣" : "4906",
"繁" : "4907",
"缟" : "4908",
"縠" : "4909",
"縢" : "4910",
"缝" : "4911",
"纵" : "4912",
"缧" : "4913",
"縳" : "4914",
"缦" : "4915",
"絷" : "4916",
"缕" : "4917",
"缥" : "4918",
"縻" : "4919",
"总" : "4920",
"绩" : "4921",
"繄" : "4922",
"缫" : "4923",
"缪" : "4924",
"繇" : "4925",
"缡" : "4926",
"縰" : "4927",
"縴" : "4928",
"繈" : "4929",
"织" : "4930",
"缮" : "4931",
"繙" : "4932",
"缭" : "4933",
"繐" : "4934",
"绕" : "4935",
"繢" : "4936",
"繡" : "4937",
"缯" : "4938",
"绳" : "4939",
"绘" : "4940",
"繫" : "4941",
"茧" : "4942",
"缰" : "4943",
"缳" : "4944",
"缴" : "4945",
"绎" : "4946",
"辫" : "4947",
"繻" : "4948",
"继" : "4949",
"纁" : "4950",
"纂" : "4951",
"缤" : "4952",
"缱" : "4953",
"纆" : "4954",
"纇" : "4955",
"缬" : "4956",
"缵" : "4957",
"续" : "4958",
"纍" : "4959",
"纤" : "4960",
"缠" : "4961",
"纩" : "4962",
"纑" : "4963",
"缨" : "4964",
"纔" : "4965",
"纛" : "4966",
"纚" : "4967",
"缆" : "4968",
"绦" : "4969",
"缶" : "4970",
"缸" : "4971",
"缺" : "4972",
"缾" : "4973",
"罀" : "4974",
"罃" : "4975",
"罁" : "4976",
"罄" : "4977",
"罅" : "4978",
"罇" : "4979",
"罋" : "4980",
"罂" : "4981",
"罍" : "4982",
"罏" : "4983",
"罐" : "4984",
"罆" : "4985",
"网" : "4986",
"罔" : "4987",
"罕" : "4988",
"罘" : "4989",
"罛" : "4990",
"罝" : "4991",
"罟" : "4992",
"罡" : "4993",
"罣" : "4994",
"罩" : "4996",
"罪" : "4997",
"罭" : "4998",
"置" : "4999",
"罚" : "5000",
"罨" : "5001",
"署" : "5002",
"罳" : "5003",
"罫" : "5004",
"罶" : "5005",
"骂" : "5006",
"罢" : "5007",
"罹" : "5008",
"羃" : "5009",
"罽" : "5010",
"罿" : "5011",
"罗" : "5012",
"罴" : "5013",
"羇" : "5014",
"羁" : "5015",
"鳓" : "5016",
"羊" : "5017",
"羌" : "5018",
"美" : "5019",
"羑" : "5020",
"羔" : "5021",
"羜" : "5023",
"羚" : "5024",
"羝" : "5025",
"羞" : "5026",
"羢" : "5027",
"群" : "5028",
"羡" : "5029",
"义" : "5030",
"羯" : "5031",
"羲" : "5032",
"羵" : "5033",
"羶" : "5034",
"羸" : "5035",
"羹" : "5036",
"羼" : "5037",
"羽" : "5038",
"翀" : "5039",
"翁" : "5040",
"翅" : "5041",
"翊" : "5042",
"翌" : "5043",
"翎" : "5044",
"习" : "5045",
"翔" : "5046",
"翕" : "5047",
"翛" : "5048",
"翟" : "5049",
"翠" : "5050",
"翡" : "5051",
"翣" : "5052",
"翥" : "5053",
"翦" : "5054",
"翩" : "5055",
"羿" : "5056",
"翚" : "5057",
"翮" : "5058",
"翯" : "5059",
"翰" : "5060",
"翳" : "5061",
"翘" : "5062",
"翱" : "5063",
"翻" : "5064",
"翼" : "5065",
"翽" : "5066",
"翾" : "5067",
"翿" : "5068",
"耀" : "5069",
"喱" : "5070",
"老" : "5071",
"考" : "5072",
"耄" : "5073",
"者" : "5074",
"耆" : "5075",
"耈" : "5076",
"耋" : "5077",
"佝" : "5078",
"而" : "5079",
"耍" : "5080",
"耎" : "5081",
"耐" : "5082",
"耑" : "5083",
"唡" : "5084",
"耒" : "5085",
"耔" : "5086",
"耕" : "5087",
"耗" : "5088",
"耘" : "5089",
"耙" : "5090",
"耜" : "5091",
"耝" : "5092",
"耞" : "5093",
"耡" : "5094",
"耩" : "5095",
"耦" : "5096",
"耨" : "5097",
"耧" : "5098",
"耰" : "5099",
"钌" : "5100",
"耳" : "5101",
"耶" : "5102",
"耻" : "5103",
"耽" : "5104",
"耿" : "5105",
"佡" : "5106",
"聆" : "5107",
"聊" : "5108",
"聒" : "5109",
"圣" : "5110",
"聘" : "5111",
"聚" : "5112",
"闻" : "5113",
"联" : "5114",
"聪" : "5115",
"声" : "5116",
"耸" : "5117",
"聩" : "5118",
"聂" : "5119",
"职" : "5120",
"聽" : "5121",
"聋" : "5122",
"啉" : "5123",
"聿" : "5124",
"肄" : "5125",
"肃" : "5126",
"肆" : "5127",
"肇" : "5128",
"呤" : "5129",
"馏" : "5130",
"肉" : "5131",
"肋" : "5132",
"肌" : "5133",
"肓" : "5134",
"肖" : "5135",
"肘" : "5136",
"肚" : "5137",
"肛" : "5138",
"肝" : "5139",
"股" : "5140",
"肢" : "5141",
"肥" : "5142",
"胺" : "5143",
"肩" : "5144",
"肫" : "5145",
"肯" : "5146",
"肱" : "5147",
"育" : "5148",
"肴" : "5149",
"肸" : "5150",
"肺" : "5151",
"胃" : "5152",
"胄" : "5153",
"背" : "5154",
"胗" : "5155",
"胔" : "5156",
"胍" : "5157",
"胎" : "5158",
"胏" : "5159",
"胖" : "5160",
"胙" : "5161",
"胚" : "5162",
"胳" : "5163",
"胝" : "5164",
"胞" : "5165",
"胰" : "5166",
"胠" : "5167",
"胭" : "5168",
"胯" : "5169",
"胡" : "5170",
"胥" : "5171",
"胸" : "5172",
"胼" : "5173",
"能" : "5174",
"胾" : "5175",
"脂" : "5176",
"腺" : "5177",
"胁" : "5178",
"脇" : "5179",
"胱" : "5180",
"脈" : "5181",
"脊" : "5182",
"脚" : "5183",
"脘" : "5184",
"胫" : "5185",
"脆" : "5186",
"脤" : "5187",
"脣" : "5188",
"朘" : "5189",
"脩" : "5190",
"膨" : "5191",
"脱" : "5192",
"脬" : "5193",
"脯" : "5194",
"胀" : "5195",
"脾" : "5196",
"腆" : "5197",
"腊" : "5198",
"腋" : "5199",
"肾" : "5200",
"腐" : "5201",
"腑" : "5202",
"腓" : "5203",
"腔" : "5204",
"腕" : "5205",
"腥" : "5206",
"脑" : "5207",
"腴" : "5208",
"肿" : "5209",
"腮" : "5210",
"膵" : "5211",
"腰" : "5212",
"腱" : "5213",
"肠" : "5214",
"腹" : "5215",
"腠" : "5216",
"腿" : "5217",
"膀" : "5218",
"膂" : "5219",
"膋" : "5220",
"膏" : "5221",
"肷" : "5222",
"腳" : "5223",
"膈" : "5224",
"膊" : "5225",
"腘" : "5226",
"肤" : "5227",
"膛" : "5228",
"膜" : "5229",
"膝" : "5230",
"胶" : "5231",
"腻" : "5232",
"膰" : "5233",
"膳" : "5234",
"膺" : "5235",
"膴" : "5236",
"膽" : "5237",
"膻" : "5238",
"脍" : "5239",
"脓" : "5240",
"臀" : "5241",
"臂" : "5242",
"臄" : "5243",
"臆" : "5244",
"脸" : "5245",
"臊" : "5246",
"脐" : "5247",
"臘" : "5248",
"臙" : "5249",
"臃" : "5250",
"胪" : "5251",
"臝" : "5252",
"脏" : "5253",
"脔" : "5254",
"胤" : "5255",
"臣" : "5256",
"卧" : "5257",
"臧" : "5258",
"临" : "5259",
"栌" : "5260",
"自" : "5261",
"臬" : "5262",
"臭" : "5263",
"臯" : "5264",
"臲" : "5265",
"镥" : "5266",
"至" : "5267",
"致" : "5268",
"臶" : "5269",
"臺" : "5270",
"臻" : "5271",
"氇" : "5272",
"臼" : "5273",
"臾" : "5274",
"舁" : "5275",
"舀" : "5276",
"舂" : "5277",
"舄" : "5278",
"舅" : "5279",
"与" : "5280",
"兴" : "5281",
"举" : "5282",
"旧" : "5283",
"舋" : "5284",
"摞" : "5285",
"舌" : "5286",
"舍" : "5287",
"舐" : "5288",
"舒" : "5289",
"舘" : "5290",
"舖" : "5291",
"舛" : "5292",
"舜" : "5293",
"舞" : "5294",
"舝" : "5295",
"镅" : "5296",
"舟" : "5297",
"舠" : "5298",
"舡" : "5299",
"航" : "5300",
"般" : "5301",
"舫" : "5302",
"舩" : "5303",
"舷" : "5304",
"舵" : "5305",
"舶" : "5306",
"船" : "5307",
"舸" : "5308",
"舲" : "5309",
"舳" : "5310",
"舴" : "5311",
"艇" : "5312",
"艋" : "5313",
"艄" : "5314",
"艖" : "5315",
"艗" : "5316",
"艎" : "5317",
"艘" : "5318",
"舱" : "5319",
"舣" : "5320",
"艟" : "5321",
"艨" : "5322",
"艭" : "5323",
"舰" : "5324",
"舻" : "5325",
"酶" : "5326",
"艮" : "5327",
"良" : "5328",
"艰" : "5329",
"钔" : "5330",
"色" : "5331",
"艴" : "5332",
"艳" : "5333",
"蓢" : "5334",
"艸" : "5335",
"艽" : "5336",
"艾" : "5337",
"芃" : "5338",
"芄" : "5339",
"芊" : "5340",
"芋" : "5341",
"芍" : "5342",
"芎" : "5343",
"芑" : "5344",
"芒" : "5345",
"芙" : "5346",
"芝" : "5347",
"芟" : "5348",
"芡" : "5349",
"芣" : "5350",
"芤" : "5351",
"芧" : "5352",
"芨" : "5353",
"芥" : "5354",
"芩" : "5355",
"芪" : "5356",
"芫" : "5357",
"芬" : "5358",
"芭" : "5359",
"芮" : "5360",
"芯" : "5361",
"芰" : "5362",
"花" : "5363",
"芳" : "5364",
"芷" : "5365",
"芸" : "5366",
"芹" : "5367",
"刍" : "5368",
"芼" : "5369",
"芽" : "5370",
"莜" : "5371",
"芾" : "5372",
"苑" : "5373",
"茆" : "5374",
"苒" : "5375",
"苓" : "5376",
"苔" : "5377",
"苕" : "5378",
"苗" : "5379",
"苙" : "5380",
"苛" : "5381",
"苜" : "5382",
"苞" : "5383",
"苟" : "5384",
"苣" : "5385",
"苡" : "5386",
"若" : "5387",
"苦" : "5388",
"苎" : "5389",
"苫" : "5390",
"英" : "5391",
"苴" : "5392",
"苹" : "5393",
"苻" : "5394",
"苽" : "5395",
"苾" : "5396",
"茀" : "5397",
"茁" : "5398",
"茂" : "5399",
"范" : "5400",
"茄" : "5401",
"茈" : "5402",
"茅" : "5403",
"茇" : "5404",
"苢" : "5405",
"茉" : "5406",
"茗" : "5407",
"荔" : "5408",
"茜" : "5409",
"茢" : "5410",
"茦" : "5411",
"茨" : "5412",
"茫" : "5413",
"茭" : "5414",
"茯" : "5415",
"茱" : "5416",
"兹" : "5417",
"茴" : "5418",
"茵" : "5419",
"茶" : "5420",
"茷" : "5421",
"茸" : "5422",
"茹" : "5423",
"荀" : "5424",
"荃" : "5425",
"萄" : "5426",
"荆" : "5427",
"荸" : "5428",
"荇" : "5429",
"草" : "5430",
"荍" : "5431",
"荏" : "5432",
"荐" : "5433",
"荑" : "5434",
"荒" : "5435",
"茝" : "5436",
"荄" : "5437",
"莛" : "5438",
"荳" : "5439",
"荷" : "5440",
"荻" : "5441",
"荼" : "5442",
"荽" : "5443",
"莅" : "5444",
"莊" : "5445",
"莎" : "5446",
"莒" : "5447",
"莓" : "5448",
"茎" : "5449",
"莘" : "5450",
"莞" : "5451",
"莠" : "5452",
"荚" : "5453",
"苋" : "5454",
"莆" : "5455",
"莨" : "5456",
"莩" : "5457",
"莪" : "5458",
"莫" : "5459",
"菟" : "5460",
"莉" : "5461",
"莽" : "5462",
"菀" : "5463",
"菁" : "5464",
"菅" : "5465",
"菇" : "5466",
"菉" : "5467",
"菊" : "5468",
"菑" : "5469",
"菓" : "5470",
"菖" : "5471",
"菔" : "5472",
"菘" : "5473",
"菠" : "5474",
"菜" : "5475",
"菩" : "5476",
"堇" : "5477",
"华" : "5478",
"菰" : "5479",
"菱" : "5480",
"菲" : "5481",
"菴" : "5482",
"莙" : "5483",
"菹" : "5484",
"菼" : "5485",
"菽" : "5486",
"萁" : "5487",
"萃" : "5488",
"萆" : "5489",
"莱" : "5490",
"萋" : "5491",
"萌" : "5492",
"萍" : "5493",
"萎" : "5494",
"萑" : "5495",
"菡" : "5496",
"菌" : "5497",
"萩" : "5498",
"𦯶" : "5499",
"苌" : "5500",
"萼" : "5501",
"萬" : "5502",
"萱" : "5503",
"莴" : "5504",
"萸" : "5505",
"萹" : "5506",
"落" : "5507",
"葆" : "5508",
"葉" : "5509",
"菸" : "5510",
"著" : "5511",
"葘" : "5512",
"葚" : "5513",
"葛" : "5514",
"葡" : "5515",
"董" : "5516",
"苇" : "5517",
"葩" : "5518",
"葫" : "5519",
"葬" : "5520",
"葭" : "5521",
"药" : "5522",
"葱" : "5523",
"葳" : "5524",
"葵" : "5525",
"荤" : "5526",
"葸" : "5527",
"葺" : "5528",
"葽" : "5529",
"蒂" : "5530",
"葑" : "5531",
"葹" : "5532",
"蒐" : "5533",
"葊" : "5534",
"莳" : "5535",
"蒙" : "5536",
"蒜" : "5537",
"蒡" : "5538",
"蒞" : "5539",
"蒟" : "5540",
"蒨" : "5541",
"蒭" : "5542",
"蒲" : "5543",
"蒸" : "5544",
"蒹" : "5545",
"蒺" : "5546",
"苍" : "5547",
"蒿" : "5548",
"荪" : "5549",
"蓁" : "5550",
"蓂" : "5551",
"蓄" : "5552",
"蓆" : "5553",
"蓉" : "5554",
"蓊" : "5555",
"盖" : "5556",
"蓖" : "5557",
"蓍" : "5558",
"蓏" : "5559",
"蓑" : "5560",
"蔀" : "5561",
"蓐" : "5562",
"蓓" : "5563",
"萏" : "5564",
"蔌" : "5565",
"蒯" : "5566",
"蒱" : "5567",
"蓧" : "5568",
"蓫" : "5569",
"蓬" : "5570",
"莲" : "5571",
"蓰" : "5572",
"莼" : "5573",
"蓴" : "5574",
"蔻" : "5575",
"蔫" : "5576",
"芗" : "5577",
"蓼" : "5578",
"蔆" : "5579",
"蔇" : "5580",
"蓿" : "5581",
"蔂" : "5582",
"蔑" : "5583",
"蕻" : "5584",
"蔓" : "5585",
"蔕" : "5586",
"蔗" : "5587",
"蔚" : "5588",
"蒌" : "5589",
"蔟" : "5590",
"蔡" : "5591",
"蒋" : "5592",
"荫" : "5593",
"蔴" : "5594",
"蔥" : "5595",
"茑" : "5596",
"蔔" : "5597",
"荜" : "5598",
"蔽" : "5599",
"蔬" : "5600",
"蕺" : "5601",
"蔾" : "5602",
"蕃" : "5603",
"蕉" : "5604",
"蕊" : "5605",
"荞" : "5606",
"莸" : "5607",
"蕖" : "5608",
"荛" : "5609",
"蕙" : "5610",
"蕝" : "5611",
"蕞" : "5612",
"蕡" : "5613",
"蒉" : "5614",
"蕨" : "5615",
"荡" : "5616",
"芜" : "5617",
"萧" : "5618",
"蕰" : "5619",
"薯" : "5620",
"蒇" : "5621",
"蕈" : "5622",
"蕳" : "5623",
"蕤" : "5624",
"薁" : "5625",
"蓣" : "5626",
"蕸" : "5627",
"蕾" : "5628",
"薐" : "5629",
"薢" : "5630",
"薄" : "5631",
"薅" : "5632",
"薇" : "5633",
"荟" : "5634",
"薉" : "5635",
"蓟" : "5636",
"薑" : "5637",
"蔷" : "5638",
"薖" : "5639",
"薙" : "5640",
"薛" : "5641",
"孽" : "5642",
"薜" : "5643",
"薦" : "5644",
"薨" : "5645",
"萨" : "5646",
"薪" : "5647",
"薤" : "5648",
"蘖" : "5649",
"薏" : "5650",
"薰" : "5651",
"薳" : "5652",
"薹" : "5653",
"荠" : "5654",
"薽" : "5655",
"薿" : "5656",
"藄" : "5657",
"藇" : "5658",
"藉" : "5659",
"荩" : "5660",
"藏" : "5661",
"藐" : "5662",
"蓝" : "5663",
"藁" : "5664",
"藕" : "5665",
"蒍" : "5666",
"藚" : "5667",
"藜" : "5668",
"艺" : "5669",
"藟" : "5670",
"藤" : "5671",
"藩" : "5672",
"藥" : "5673",
"薮" : "5674",
"藷" : "5675",
"蔼" : "5676",
"蔺" : "5677",
"藻" : "5679",
"藾" : "5680",
"藿" : "5681",
"蕲" : "5682",
"蘅" : "5683",
"芦" : "5684",
"苏" : "5685",
"蕴" : "5686",
"蘂" : "5687",
"夔" : "5688",
"蘋" : "5689",
"萚" : "5690",
"藓" : "5691",
"蔹" : "5692",
"茏" : "5693",
"蘩" : "5694",
"兰" : "5695",
"蘨" : "5696",
"虀" : "5697",
"蘧" : "5698",
"蘸" : "5699",
"萝" : "5700",
"蘼" : "5701",
"虉" : "5702",
"虆" : "5703",
"蘑" : "5704",
"虍" : "5705",
"虎" : "5706",
"虐" : "5707",
"虓" : "5708",
"虔" : "5709",
"处" : "5710",
"虚" : "5711",
"虏" : "5712",
"虞" : "5713",
"号" : "5714",
"虡" : "5715",
"虢" : "5716",
"虥" : "5717",
"虣" : "5718",
"亏" : "5719",
"𧈅" : "5720",
"醚" : "5721",
"虫" : "5722",
"虱" : "5723",
"虻" : "5724",
"虹" : "5725",
"虺" : "5726",
"蚓" : "5727",
"蚡" : "5728",
"蚕" : "5729",
"蚊" : "5730",
"蚋" : "5731",
"蚌" : "5732",
"蚣" : "5733",
"蚤" : "5734",
"蚧" : "5735",
"蚩" : "5736",
"蚪" : "5737",
"蚨" : "5738",
"蚯" : "5739",
"蚰" : "5740",
"蚱" : "5741",
"蚜" : "5742",
"蚶" : "5743",
"蚒" : "5744",
"蛄" : "5745",
"蛀" : "5746",
"蛆" : "5747",
"蛇" : "5748",
"蛉" : "5749",
"蛑" : "5750",
"蛋" : "5751",
"蛙" : "5752",
"蛛" : "5753",
"蛟" : "5754",
"蛣" : "5755",
"蛤" : "5756",
"蛩" : "5757",
"蛱" : "5758",
"蛭" : "5759",
"蛾" : "5760",
"蜹" : "5761",
"蜂" : "5762",
"蜃" : "5763",
"蜇" : "5764",
"蜈" : "5765",
"蜋" : "5766",
"蜓" : "5767",
"蛸" : "5768",
"蛹" : "5769",
"蜕" : "5770",
"蜀" : "5771",
"蜉" : "5772",
"蜍" : "5773",
"蜊" : "5774",
"蜎" : "5775",
"蜘" : "5776",
"蜚" : "5777",
"蜜" : "5778",
"蜡" : "5779",
"蜣" : "5780",
"蜩" : "5781",
"蜥" : "5782",
"蜒" : "5783",
"蛔" : "5784",
"蜴" : "5785",
"蜞" : "5786",
"蝀" : "5787",
"螂" : "5788",
"蜢" : "5789",
"蜮" : "5790",
"蝎" : "5791",
"蛐" : "5792",
"蚀" : "5793",
"蝗" : "5794",
"蝘" : "5795",
"蝙" : "5796",
"蜅" : "5797",
"猬" : "5798",
"蝠" : "5799",
"蜿" : "5800",
"蝥" : "5801",
"虾" : "5802",
"蝮" : "5803",
"蝱" : "5804",
"蝶" : "5805",
"蜷" : "5806",
"蟮" : "5807",
"蜻" : "5808",
"蝌" : "5809",
"蝨" : "5810",
"蜾" : "5811",
"蝣" : "5812",
"蝻" : "5813",
"蝴" : "5814",
"蜗" : "5815",
"融" : "5816",
"蠓" : "5817",
"蚂" : "5818",
"螘" : "5819",
"螟" : "5820",
"萤" : "5821",
"螣" : "5822",
"蚝" : "5823",
"螃" : "5824",
"蛳" : "5825",
"螫" : "5826",
"螱" : "5827",
"螺" : "5828",
"蝼" : "5829",
"螽" : "5830",
"蛰" : "5832",
"蟊" : "5833",
"螬" : "5834",
"螭" : "5835",
"螮" : "5836",
"螯" : "5837",
"螳" : "5838",
"蟀" : "5839",
"蟆" : "5840",
"蝈" : "5841",
"蟋" : "5842",
"虮" : "5843",
"蟪" : "5844",
"蟒" : "5845",
"蟛" : "5846",
"蟠" : "5847",
"蝉" : "5848",
"蟲" : "5849",
"蟭" : "5850",
"蟹" : "5851",
"蚁" : "5852",
"蟾" : "5853",
"蟳" : "5854",
"蛏" : "5855",
"蠃" : "5856",
"蟿" : "5857",
"蚃" : "5858",
"蝇" : "5859",
"虿" : "5860",
"蠍" : "5861",
"蠕" : "5862",
"蠖" : "5863",
"蠛" : "5864",
"蠜" : "5865",
"蠟" : "5866",
"蠡" : "5867",
"蠢" : "5868",
"蛎" : "5869",
"蟏" : "5870",
"蠹" : "5871",
"蛊" : "5872",
"蠲" : "5873",
"蠶" : "5874",
"蛮" : "5875",
"虬" : "5876",
"血" : "5877",
"嘧" : "5878",
"𥁃" : "5879",
"衄" : "5880",
"衅" : "5881",
"衂" : "5882",
"众" : "5883",
"衇" : "5884",
"衊" : "5885",
"嚜" : "5886",
"行" : "5887",
"衍" : "5888",
"衎" : "5889",
"術" : "5890",
"衒" : "5891",
"衕" : "5892",
"衖" : "5893",
"街" : "5894",
"衙" : "5895",
"衚" : "5896",
"衝" : "5897",
"卫" : "5898",
"衡" : "5899",
"衢" : "5900",
"衜" : "5901",
"衣" : "5902",
"表" : "5903",
"衫" : "5904",
"衰" : "5905",
"衲" : "5906",
"衷" : "5907",
"衩" : "5908",
"衵" : "5909",
"衽" : "5910",
"衾" : "5911",
"衿" : "5912",
"袁" : "5913",
"袈" : "5914",
"袋" : "5915",
"袍" : "5916",
"袒" : "5917",
"袖" : "5918",
"袗" : "5919",
"袜" : "5920",
"袚" : "5921",
"袞" : "5922",
"袠" : "5923",
"袤" : "5924",
"袪" : "5925",
"被" : "5926",
"袂" : "5927",
"袴" : "5928",
"袵" : "5929",
"袷" : "5930",
"袱" : "5931",
"裁" : "5932",
"裂" : "5933",
"袅" : "5934",
"裎" : "5935",
"裀" : "5936",
"裏" : "5937",
"裒" : "5938",
"裔" : "5939",
"裕" : "5940",
"裘" : "5941",
"裙" : "5942",
"补" : "5943",
"装" : "5944",
"裟" : "5945",
"褎" : "5946",
"裨" : "5947",
"裯" : "5948",
"裰" : "5949",
"裱" : "5950",
"裳" : "5951",
"裴" : "5952",
"裸" : "5953",
"裼" : "5954",
"裹" : "5955",
"製" : "5956",
"裾" : "5957",
"複" : "5958",
"褊" : "5959",
"裈" : "5960",
"褉" : "5961",
"褂" : "5962",
"褪" : "5963",
"褐" : "5964",
"褓" : "5965",
"袆" : "5966",
"褙" : "5967",
"褡" : "5968",
"褚" : "5969",
"褥" : "5970",
"褧" : "5971",
"褫" : "5972",
"褰" : "5973",
"裤" : "5974",
"褦" : "5975",
"褵" : "5976",
"褶" : "5977",
"亵" : "5978",
"襃" : "5979",
"襄" : "5980",
"衮" : "5981",
"襁" : "5982",
"袢" : "5983",
"袄" : "5984",
"襚" : "5985",
"襌" : "5986",
"裡" : "5987",
"褒" : "5988",
"裦" : "5989",
"裣" : "5990",
"裆" : "5991",
"襟" : "5992",
"襦" : "5993",
"襪" : "5994",
"襏" : "5995",
"褴" : "5996",
"褛" : "5997",
"襫" : "5998",
"襭" : "5999",
"衬" : "6000",
"襴" : "6001",
"袭" : "6002",
"襼" : "6003",
"襶" : "6004",
"裌" : "6005",
"襾" : "6006",
"西" : "6007",
"要" : "6008",
"覃" : "6009",
"覆" : "6010",
"覇" : "6011",
"覈" : "6012",
"覊" : "6013",
"镎" : "6014",
"见" : "6015",
"规" : "6016",
"觅" : "6017",
"视" : "6018",
"觇" : "6019",
"覜" : "6020",
"觋" : "6021",
"觎" : "6022",
"覩" : "6023",
"亲" : "6024",
"觊" : "6025",
"觏" : "6026",
"觐" : "6027",
"觑" : "6028",
"覵" : "6029",
"觉" : "6030",
"览" : "6031",
"觌" : "6032",
"觍" : "6033",
"观" : "6034",
"覼" : "6035",
"氖" : "6036",
"角" : "6037",
"觔" : "6038",
"觖" : "6039",
"觚" : "6040",
"觝" : "6041",
"觕" : "6042",
"解" : "6043",
"觥" : "6044",
"觩" : "6045",
"觫" : "6046",
"觭" : "6047",
"觱" : "6048",
"觳" : "6049",
"觞" : "6050",
"触" : "6051",
"觶" : "6052",
"觼" : "6053",
"觿" : "6054",
"萘" : "6055",
"言" : "6056",
"订" : "6057",
"讣" : "6058",
"訇" : "6059",
"计" : "6060",
"讯" : "6061",
"讨" : "6062",
"讦" : "6063",
"训" : "6064",
"讪" : "6065",
"讫" : "6066",
"讬" : "6067",
"记" : "6068",
"讧" : "6069",
"訏" : "6070",
"訑" : "6071",
"讱" : "6072",
"讹" : "6073",
"讶" : "6074",
"讼" : "6075",
"诀" : "6076",
"讷" : "6077",
"访" : "6078",
"许" : "6079",
"设" : "6080",
"讻" : "6081",
"訢" : "6082",
"诉" : "6083",
"诃" : "6084",
"诊" : "6085",
"证" : "6086",
"註" : "6087",
"訾" : "6088",
"诂" : "6089",
"诋" : "6090",
"詈" : "6091",
"詋" : "6092",
"讵" : "6093",
"诈" : "6094",
"诒" : "6095",
"诏" : "6096",
"评" : "6097",
"詖" : "6098",
"诎" : "6099",
"诅" : "6100",
"词" : "6101",
"詠" : "6102",
"诩" : "6103",
"询" : "6104",
"诣" : "6105",
"詤" : "6106",
"试" : "6107",
"诗" : "6108",
"诧" : "6109",
"诟" : "6110",
"诡" : "6111",
"诠" : "6112",
"诘" : "6113",
"话" : "6114",
"该" : "6115",
"详" : "6116",
"诙" : "6117",
"诖" : "6118",
"诓" : "6119",
"诔" : "6120",
"诛" : "6121",
"誇" : "6122",
"詵" : "6123",
"詹" : "6124",
"誌" : "6125",
"认" : "6126",
"誐" : "6127",
"诳" : "6128",
"誓" : "6129",
"诞" : "6130",
"诱" : "6131",
"诮" : "6132",
"语" : "6133",
"诚" : "6134",
"诫" : "6135",
"诬" : "6136",
"误" : "6137",
"诰" : "6138",
"诵" : "6139",
"诲" : "6140",
"说" : "6141",
"谁" : "6142",
"课" : "6143",
"谇" : "6144",
"诽" : "6145",
"谊" : "6146",
"訚" : "6147",
"调" : "6148",
"谄" : "6149",
"谆" : "6150",
"谈" : "6151",
"诿" : "6152",
"请" : "6153",
"诤" : "6154",
"诹" : "6155",
"谅" : "6156",
"诼" : "6157",
"论" : "6158",
"谂" : "6159",
"諐" : "6160",
"谀" : "6161",
"谞" : "6162",
"谝" : "6163",
"諟" : "6164",
"諠" : "6165",
"谔" : "6166",
"谛" : "6167",
"谐" : "6168",
"谏" : "6169",
"谕" : "6170",
"谘" : "6171",
"讳" : "6172",
"谙" : "6173",
"讽" : "6174",
"诸" : "6175",
"谚" : "6176",
"諵" : "6177",
"谖" : "6178",
"诺" : "6179",
"谋" : "6180",
"谒" : "6181",
"谓" : "6182",
"谍" : "6183",
"諡" : "6184",
"諴" : "6185",
"谌" : "6186",
"誊" : "6187",
"诌" : "6188",
"謆" : "6189",
"謇" : "6190",
"谎" : "6192",
"谜" : "6193",
"谧" : "6194",
"谑" : "6195",
"谤" : "6196",
"谦" : "6197",
"谥" : "6198",
"讲" : "6199",
"谢" : "6200",
"謟" : "6201",
"谣" : "6202",
"謏" : "6203",
"谡" : "6204",
"謦" : "6205",
"谟" : "6206",
"谪" : "6207",
"谬" : "6208",
"讴" : "6209",
"谨" : "6210",
"谩" : "6211",
"譁" : "6212",
"謿" : "6213",
"證" : "6214",
"譌" : "6215",
"谲" : "6216",
"讥" : "6217",
"譒" : "6218",
"譔" : "6219",
"谮" : "6220",
"识" : "6221",
"谯" : "6222",
"谭" : "6223",
"譍" : "6224",
"谱" : "6225",
"警" : "6226",
"譟" : "6227",
"谵" : "6228",
"譬" : "6229",
"译" : "6230",
"议" : "6231",
"谴" : "6232",
"护" : "6233",
"诪" : "6234",
"誉" : "6235",
"读" : "6236",
"谫" : "6237",
"讁" : "6238",
"变" : "6239",
"讌" : "6240",
"雠" : "6241",
"詟" : "6242",
"谗" : "6243",
"谶" : "6244",
"让" : "6245",
"讙" : "6246",
"讚" : "6247",
"讛" : "6248",
"谠" : "6249",
"谳" : "6250",
"讟" : "6251",
"誯" : "6252",
"谷" : "6253",
"谿" : "6254",
"豁" : "6255",
"豄" : "6256",
"硇" : "6257",
"豆" : "6258",
"岂" : "6259",
"豋" : "6260",
"豌" : "6261",
"豉" : "6262",
"豇" : "6263",
"豎" : "6264",
"豐" : "6265",
"豒" : "6266",
"豔" : "6267",
"豏" : "6268",
"豕" : "6269",
"豚" : "6270",
"豝" : "6271",
"象" : "6272",
"豢" : "6273",
"豨" : "6274",
"豪" : "6275",
"豫" : "6276",
"豬" : "6277",
"豭" : "6278",
"豳" : "6279",
"豵" : "6280",
"铌" : "6281",
"豸" : "6282",
"豹" : "6283",
"豺" : "6284",
"貂" : "6285",
"貆" : "6286",
"貅" : "6287",
"貉" : "6288",
"貊" : "6289",
"貎" : "6290",
"貍" : "6291",
"貓" : "6292",
"貔" : "6293",
"貛" : "6294",
"脲" : "6295",
"贝" : "6296",
"贞" : "6297",
"负" : "6298",
"财" : "6299",
"贡" : "6300",
"貤" : "6301",
"贫" : "6302",
"货" : "6303",
"贪" : "6304",
"贩" : "6305",
"贯" : "6306",
"责" : "6307",
"贮" : "6308",
"貲" : "6309",
"贰" : "6310",
"贵" : "6311",
"贬" : "6312",
"贷" : "6313",
"买" : "6314",
"贶" : "6315",
"费" : "6316",
"贴" : "6317",
"贻" : "6318",
"贸" : "6319",
"贺" : "6320",
"贲" : "6321",
"贳" : "6322",
"赂" : "6323",
"赁" : "6324",
"贿" : "6325",
"赅" : "6326",
"资" : "6327",
"贾" : "6328",
"贼" : "6329",
"賉" : "6330",
"赈" : "6331",
"赊" : "6332",
"宾" : "6333",
"赇" : "6334",
"赒" : "6335",
"赉" : "6336",
"赐" : "6337",
"賝" : "6338",
"赏" : "6339",
"赍" : "6340",
"赔" : "6341",
"赓" : "6342",
"贤" : "6343",
"卖" : "6344",
"贱" : "6345",
"赋" : "6346",
"质" : "6347",
"账" : "6348",
"賟" : "6349",
"赌" : "6350",
"赖" : "6351",
"赗" : "6352",
"賮" : "6353",
"赚" : "6354",
"赙" : "6355",
"购" : "6356",
"赛" : "6357",
"赜" : "6358",
"賸" : "6359",
"贽" : "6360",
"赘" : "6361",
"赠" : "6362",
"赞" : "6363",
"贇" : "6364",
"赡" : "6365",
"赢" : "6366",
"赆" : "6367",
"赃" : "6368",
"赑" : "6369",
"赎" : "6370",
"贑" : "6371",
"赝" : "6372",
"赣" : "6373",
"贉" : "6374",
"赤" : "6375",
"赦" : "6376",
"赧" : "6377",
"赫" : "6378",
"赭" : "6379",
"赪" : "6380",
"钕" : "6381",
"走" : "6382",
"赳" : "6383",
"赴" : "6384",
"赶" : "6385",
"起" : "6386",
"趁" : "6387",
"趄" : "6388",
"超" : "6389",
"越" : "6390",
"趕" : "6391",
"赵" : "6392",
"趣" : "6393",
"趑" : "6394",
"趋" : "6395",
"趟" : "6396",
"蒎" : "6397",
"足" : "6398",
"趵" : "6399",
"趾" : "6400",
"跴" : "6401",
"趺" : "6402",
"趹" : "6403",
"跂" : "6404",
"跋" : "6405",
"跅" : "6406",
"跌" : "6407",
"跎" : "6408",
"跏" : "6409",
"跑" : "6410",
"跕" : "6411",
"跖" : "6412",
"跚" : "6413",
"跛" : "6414",
"距" : "6415",
"跗" : "6416",
"跫" : "6417",
"跟" : "6418",
"跡" : "6419",
"跣" : "6420",
"跨" : "6421",
"跪" : "6422",
"跬" : "6423",
"路" : "6424",
"踩" : "6425",
"跳" : "6426",
"跽" : "6427",
"踉" : "6428",
"踊" : "6429",
"跼" : "6430",
"踏" : "6431",
"践" : "6432",
"踔" : "6433",
"踖" : "6434",
"踝" : "6435",
"踞" : "6436",
"踢" : "6437",
"踣" : "6438",
"踧" : "6439",
"踘" : "6440",
"踡" : "6441",
"踟" : "6442",
"踮" : "6443",
"踰" : "6444",
"踴" : "6445",
"踵" : "6446",
"踹" : "6447",
"蹓" : "6448",
"踽" : "6449",
"蹁" : "6450",
"蹂" : "6451",
"蹄" : "6452",
"踱" : "6453",
"蹀" : "6454",
"蹐" : "6455",
"蹇" : "6456",
"蹈" : "6457",
"蹉" : "6458",
"蹊" : "6459",
"跃" : "6460",
"跄" : "6461",
"跸" : "6462",
"蹔" : "6463",
"蹙" : "6464",
"蹟" : "6465",
"蹒" : "6466",
"蹤" : "6467",
"蹜" : "6468",
"𨄮" : "6469",
"蹠" : "6470",
"蹯" : "6471",
"蹲" : "6472",
"蹴" : "6473",
"蹶" : "6474",
"跷" : "6475",
"蹡" : "6476",
"蹢" : "6477",
"蹬" : "6478",
"蹭" : "6479",
"蹰" : "6480",
"躁" : "6481",
"躄" : "6482",
"躅" : "6483",
"躇" : "6484",
"趸" : "6485",
"踌" : "6486",
"跻" : "6487",
"蹋" : "6488",
"躐" : "6489",
"踯" : "6490",
"躒" : "6491",
"踬" : "6492",
"躔" : "6493",
"跹" : "6494",
"蹑" : "6495",
"躩" : "6496",
"躏" : "6497",
"蹦" : "6498",
"蹚" : "6499",
"身" : "6500",
"躬" : "6501",
"躭" : "6502",
"躲" : "6503",
"躯" : "6504",
"躶" : "6505",
"軃" : "6506",
"躺" : "6507",
"车" : "6508",
"轧" : "6509",
"轨" : "6510",
"军" : "6511",
"軏" : "6512",
"轩" : "6513",
"轫" : "6514",
"轭" : "6515",
"软" : "6516",
"軨" : "6517",
"轸" : "6518",
"轴" : "6519",
"轵" : "6520",
"軷" : "6521",
"轶" : "6522",
"轺" : "6523",
"轼" : "6524",
"较" : "6525",
"辂" : "6526",
"輈" : "6527",
"载" : "6528",
"輀" : "6529",
"輇" : "6530",
"轾" : "6531",
"辄" : "6532",
"輓" : "6533",
"辅" : "6534",
"轻" : "6535",
"輗" : "6536",
"輙" : "6537",
"辆" : "6538",
"辎" : "6539",
"辉" : "6540",
"辍" : "6541",
"辇" : "6542",
"辈" : "6543",
"轮" : "6544",
"辋" : "6545",
"輠" : "6546",
"辊" : "6547",
"輧" : "6548",
"辑" : "6549",
"辏" : "6550",
"输" : "6551",
"輹" : "6552",
"辐" : "6553",
"輭" : "6554",
"輮" : "6555",
"輴" : "6556",
"輶" : "6557",
"辗" : "6558",
"舆" : "6559",
"毂" : "6560",
"辖" : "6561",
"辕" : "6562",
"轀" : "6563",
"辘" : "6564",
"轇" : "6565",
"轕" : "6566",
"转" : "6567",
"辙" : "6568",
"轿" : "6569",
"轏" : "6570",
"轒" : "6571",
"轖" : "6572",
"轘" : "6573",
"轞" : "6574",
"轰" : "6575",
"辔" : "6576",
"轹" : "6577",
"轳" : "6578",
"軕" : "6579",
"辛" : "6580",
"辜" : "6581",
"辟" : "6582",
"辠" : "6583",
"辣" : "6584",
"辥" : "6585",
"办" : "6586",
"辨" : "6587",
"辞" : "6588",
"辩" : "6589",
"耪" : "6590",
"辰" : "6591",
"辱" : "6592",
"农" : "6593",
"狍" : "6594",
"辵" : "6595",
"迂" : "6596",
"迄" : "6597",
"迅" : "6598",
"𨑳" : "6599",
"迍" : "6600",
"迎" : "6601",
"近" : "6602",
"迓" : "6603",
"返" : "6604",
"迕" : "6605",
"迢" : "6606",
"迤" : "6607",
"迥" : "6608",
"迦" : "6609",
"迨" : "6610",
"迪" : "6611",
"迫" : "6612",
"迭" : "6613",
"逄" : "6614",
"述" : "6615",
"迴" : "6616",
"迷" : "6617",
"迸" : "6618",
"迹" : "6619",
"追" : "6620",
"迺" : "6621",
"退" : "6622",
"送" : "6623",
"适" : "6624",
"逃" : "6625",
"逅" : "6626",
"逆" : "6627",
"逋" : "6628",
"逯" : "6629",
"逍" : "6630",
"透" : "6631",
"逐" : "6632",
"逑" : "6633",
"途" : "6634",
"迳" : "6635",
"逖" : "6636",
"逗" : "6637",
"这" : "6638",
"通" : "6639",
"逛" : "6640",
"逝" : "6641",
"逞" : "6642",
"速" : "6643",
"造" : "6644",
"逡" : "6645",
"逢" : "6646",
"连" : "6647",
"逭" : "6648",
"逮" : "6649",
"週" : "6650",
"进" : "6651",
"逵" : "6652",
"逶" : "6653",
"逸" : "6654",
"逷" : "6655",
"逼" : "6656",
"遇" : "6657",
"遁" : "6658",
"遂" : "6659",
"遄" : "6660",
"逾" : "6661",
"遊" : "6662",
"运" : "6663",
"遍" : "6664",
"过" : "6665",
"遏" : "6666",
"遐" : "6667",
"遑" : "6668",
"遒" : "6669",
"道" : "6670",
"达" : "6671",
"违" : "6672",
"遘" : "6673",
"遥" : "6674",
"遛" : "6675",
"逊" : "6676",
"递" : "6677",
"远" : "6678",
"遡" : "6679",
"遣" : "6680",
"遢" : "6681",
"遝" : "6682",
"遨" : "6683",
"適" : "6684",
"遭" : "6685",
"遮" : "6686",
"遯" : "6687",
"迟" : "6688",
"遴" : "6689",
"遵" : "6690",
"遶" : "6691",
"迁" : "6692",
"选" : "6693",
"遹" : "6694",
"遗" : "6695",
"遆" : "6696",
"辽" : "6697",
"遽" : "6698",
"避" : "6699",
"邀" : "6700",
"迈" : "6701",
"邂" : "6702",
"还" : "6703",
"邅" : "6704",
"迩" : "6705",
"邃" : "6706",
"邈" : "6707",
"边" : "6708",
"逻" : "6709",
"逦" : "6710",
"疱" : "6711",
"邑" : "6712",
"邛" : "6713",
"邗" : "6714",
"邙" : "6715",
"邕" : "6716",
"邢" : "6717",
"鄮" : "6718",
"那" : "6719",
"邡" : "6720",
"邦" : "6721",
"邨" : "6722",
"邪" : "6723",
"邠" : "6724",
"邯" : "6725",
"邱" : "6726",
"邲" : "6727",
"邴" : "6728",
"邳" : "6729",
"邵" : "6730",
"邶" : "6731",
"邸" : "6732",
"邰" : "6733",
"邽" : "6734",
"郁" : "6735",
"郅" : "6736",
"郇" : "6737",
"郊" : "6738",
"邾" : "6739",
"郃" : "6740",
"郗" : "6741",
"郄" : "6742",
"郕" : "6743",
"郛" : "6744",
"郎" : "6745",
"郡" : "6746",
"郢" : "6747",
"郤" : "6748",
"郙" : "6749",
"郜" : "6750",
"郏" : "6751",
"部" : "6752",
"郭" : "6753",
"郴" : "6754",
"邮" : "6755",
"郯" : "6756",
"都" : "6757",
"郿" : "6758",
"鄂" : "6759",
"邹" : "6760",
"鄄" : "6761",
"邬" : "6762",
"乡" : "6763",
"鄗" : "6764",
"郧" : "6765",
"鄙" : "6766",
"鄘" : "6767",
"鄢" : "6768",
"鄞" : "6769",
"鄠" : "6770",
"鄜" : "6771",
"邓" : "6772",
"鄫" : "6773",
"郑" : "6774",
"邻" : "6775",
"鄱" : "6776",
"邺" : "6777",
"郐" : "6778",
"郸" : "6779",
"鄹" : "6780",
"鄯" : "6781",
"邝" : "6782",
"酂" : "6783",
"酃" : "6784",
"酆" : "6785",
"郦" : "6786",
"郝" : "6787",
"酉" : "6788",
"酊" : "6789",
"酋" : "6790",
"酌" : "6791",
"配" : "6792",
"酎" : "6793",
"酒" : "6794",
"酖" : "6795",
"酗" : "6796",
"酢" : "6797",
"酥" : "6798",
"酣" : "6799",
"酤" : "6800",
"酡" : "6801",
"酩" : "6802",
"酪" : "6803",
"酬" : "6804",
"酲" : "6805",
"酵" : "6806",
"酷" : "6807",
"酸" : "6808",
"酴" : "6809",
"酹" : "6810",
"酺" : "6811",
"醃" : "6812",
"醅" : "6813",
"醆" : "6814",
"醇" : "6815",
"醉" : "6816",
"醊" : "6817",
"醋" : "6818",
"醍" : "6819",
"醐" : "6820",
"醒" : "6821",
"醓" : "6822",
"醜" : "6823",
"酝" : "6824",
"醡" : "6825",
"醢" : "6826",
"醩" : "6827",
"醪" : "6828",
"医" : "6829",
"酱" : "6830",
"醮" : "6831",
"醯" : "6832",
"醴" : "6833",
"醲" : "6834",
"醵" : "6835",
"醺" : "6836",
"醽" : "6837",
"醁" : "6838",
"醼" : "6839",
"酿" : "6840",
"釁" : "6841",
"釂" : "6842",
"釄" : "6843",
"锫" : "6844",
"釆" : "6845",
"采" : "6846",
"释" : "6847",
"釉" : "6848",
"里" : "6849",
"重" : "6850",
"野" : "6851",
"量" : "6852",
"釐" : "6853",
"锌" : "6854",
"金" : "6855",
"钊" : "6856",
"钉" : "6857",
"釜" : "6858",
"针" : "6859",
"钓" : "6860",
"钏" : "6861",
"钙" : "6862",
"釦" : "6863",
"釭" : "6864",
"钗" : "6865",
"鈇" : "6866",
"钯" : "6867",
"钝" : "6868",
"钩" : "6869",
"钤" : "6870",
"钠" : "6871",
"钞" : "6872",
"钮" : "6873",
"钧" : "6874",
"铃" : "6875",
"钹" : "6876",
"钰" : "6877",
"鉁" : "6878",
"钿" : "6879",
"钜" : "6880",
"铉" : "6881",
"鉏" : "6882",
"钳" : "6883",
"铅" : "6884",
"钺" : "6885",
"钵" : "6886",
"鉤" : "6887",
"铇" : "6888",
"铏" : "6889",
"铰" : "6890",
"钲" : "6891",
"银" : "6892",
"铳" : "6893",
"铜" : "6894",
"钴" : "6895",
"铂" : "6896",
"铣" : "6897",
"铨" : "6898",
"铢" : "6899",
"铭" : "6900",
"铦" : "6901",
"衔" : "6902",
"铫" : "6903",
"锐" : "6904",
"钾" : "6905",
"销" : "6906",
"锈" : "6907",
"锉" : "6908",
"鋈" : "6909",
"铤" : "6910",
"铗" : "6911",
"锋" : "6912",
"锓" : "6913",
"铀" : "6914",
"锄" : "6915",
"铓" : "6916",
"铺" : "6917",
"铻" : "6918",
"銲" : "6919",
"锯" : "6920",
"钢" : "6921",
"录" : "6922",
"锥" : "6923",
"锟" : "6924",
"锤" : "6925",
"锱" : "6926",
"铮" : "6927",
"锭" : "6928",
"钱" : "6929",
"锦" : "6930",
"锚" : "6931",
"锡" : "6932",
"锢" : "6933",
"错" : "6934",
"錞" : "6935",
"锜" : "6936",
"鍊" : "6937",
"锅" : "6938",
"锻" : "6939",
"铋" : "6940",
"铵" : "6941",
"锹" : "6942",
"键" : "6943",
"鍼" : "6944",
"锺" : "6945",
"锴" : "6946",
"镀" : "6947",
"锷" : "6948",
"锽" : "6949",
"锸" : "6950",
"锲" : "6951",
"鍭" : "6952",
"锾" : "6953",
"鎔" : "6954",
"銾" : "6955",
"锁" : "6956",
"鎗" : "6957",
"鎚" : "6958",
"鎛" : "6959",
"鎞" : "6960",
"镃" : "6961",
"鎌" : "6962",
"铠" : "6963",
"镐" : "6964",
"镒" : "6965",
"镇" : "6966",
"镑" : "6967",
"镞" : "6968",
"链" : "6969",
"镝" : "6970",
"鏖" : "6971",
"铿" : "6972",
"锵" : "6973",
"镗" : "6974",
"镜" : "6975",
"镘" : "6976",
"镖" : "6977",
"镛" : "6978",
"镂" : "6979",
"铲" : "6980",
"鏐" : "6981",
"锑" : "6982",
"錾" : "6983",
"铙" : "6984",
"铧" : "6985",
"铝" : "6986",
"镪" : "6987",
"钟" : "6988",
"镫" : "6989",
"镌" : "6990",
"镰" : "6991",
"镯" : "6992",
"铁" : "6993",
"镮" : "6994",
"铎" : "6995",
"镍" : "6996",
"铛" : "6997",
"鐻" : "6998",
"铸" : "6999",
"镬" : "7000",
"镔" : "7001",
"鑑" : "7002",
"鉴" : "7003",
"鑤" : "7004",
"钨" : "7005",
"鑛" : "7006",
"铄" : "7007",
"鑢" : "7008",
"镳" : "7009",
"鑪" : "7010",
"钥" : "7011",
"镭" : "7012",
"镶" : "7013",
"鑵" : "7014",
"镊" : "7015",
"锣" : "7017",
"鑽" : "7018",
"銮" : "7019",
"凿" : "7020",
"锰" : "7021",
"长" : "7022",
"蜱" : "7023",
"门" : "7024",
"闩" : "7025",
"闪" : "7026",
"闫" : "7027",
"闭" : "7028",
"闬" : "7029",
"开" : "7030",
"闳" : "7031",
"闰" : "7032",
"闲" : "7033",
"閒" : "7034",
"间" : "7035",
"闵" : "7036",
"闸" : "7037",
"閟" : "7038",
"阂" : "7039",
"閤" : "7040",
"阁" : "7041",
"阀" : "7042",
"闺" : "7043",
"闽" : "7044",
"阃" : "7045",
"阆" : "7046",
"闾" : "7047",
"阅" : "7048",
"阊" : "7049",
"阉" : "7050",
"阎" : "7051",
"阏" : "7052",
"阍" : "7053",
"阈" : "7054",
"阒" : "7055",
"闇" : "7056",
"闱" : "7057",
"闉" : "7058",
"阔" : "7059",
"阕" : "7060",
"阑" : "7061",
"阇" : "7062",
"阗" : "7063",
"阌" : "7064",
"闿" : "7065",
"阖" : "7066",
"阙" : "7067",
"闯" : "7068",
"闒" : "7069",
"关" : "7070",
"闚" : "7071",
"阓" : "7072",
"阐" : "7073",
"阚" : "7074",
"闢" : "7075",
"阛" : "7076",
"闼" : "7077",
"闆" : "7078",
"阜" : "7079",
"阝" : "7080",
"阞" : "7081",
"阡" : "7082",
"阤" : "7083",
"阨" : "7084",
"阬" : "7085",
"阮" : "7086",
"阯" : "7087",
"阱" : "7088",
"防" : "7089",
"阪" : "7090",
"阻" : "7091",
"阼" : "7092",
"阿" : "7093",
"陀" : "7094",
"陂" : "7095",
"附" : "7096",
"陋" : "7097",
"限" : "7098",
"陌" : "7099",
"降" : "7100",
"陔" : "7101",
"陉" : "7102",
"陛" : "7103",
"陕" : "7104",
"陞" : "7105",
"陟" : "7106",
"陡" : "7107",
"院" : "7108",
"阵" : "7109",
"除" : "7110",
"陪" : "7111",
"陬" : "7112",
"阴" : "7113",
"陲" : "7114",
"陈" : "7115",
"陴" : "7116",
"陵" : "7117",
"陶" : "7118",
"陷" : "7119",
"陆" : "7120",
"陼" : "7121",
"阳" : "7122",
"陻" : "7123",
"隍" : "7124",
"隄" : "7125",
"隅" : "7126",
"隆" : "7127",
"隈" : "7128",
"陧" : "7129",
"队" : "7130",
"隋" : "7131",
"阶" : "7132",
"隔" : "7133",
"陨" : "7134",
"隖" : "7135",
"隗" : "7136",
"隘" : "7137",
"隙" : "7138",
"际" : "7139",
"障" : "7140",
"隣" : "7141",
"隤" : "7142",
"隧" : "7143",
"隩" : "7144",
"险" : "7145",
"隮" : "7146",
"隰" : "7147",
"隐" : "7148",
"隳" : "7149",
"陇" : "7150",
"随" : "7151",
"隶" : "7152",
"隸" : "7153",
"苤" : "7154",
"隹" : "7155",
"隻" : "7156",
"隼" : "7157",
"雀" : "7158",
"雁" : "7159",
"雄" : "7160",
"雅" : "7161",
"集" : "7162",
"雇" : "7163",
"雉" : "7164",
"隽" : "7165",
"雌" : "7166",
"雍" : "7167",
"雎" : "7168",
"雊" : "7169",
"𨿅" : "7170",
"雕" : "7171",
"巂" : "7172",
"虽" : "7173",
"雘" : "7174",
"双" : "7175",
"雏" : "7176",
"杂" : "7177",
"雝" : "7178",
"雞" : "7179",
"離" : "7180",
"难" : "7181",
"钷" : "7182",
"雨" : "7183",
"雩" : "7184",
"雪" : "7185",
"雯" : "7186",
"雰" : "7187",
"雱" : "7188",
"雲" : "7189",
"零" : "7190",
"雷" : "7191",
"雹" : "7192",
"电" : "7193",
"需" : "7194",
"霂" : "7195",
"霅" : "7196",
"霄" : "7197",
"霈" : "7198",
"霉" : "7199",
"霆" : "7200",
"震" : "7201",
"霍" : "7202",
"霎" : "7203",
"霏" : "7204",
"霑" : "7205",
"霓" : "7206",
"霖" : "7207",
"霜" : "7208",
"霞" : "7209",
"霢" : "7210",
"霤" : "7211",
"雾" : "7212",
"霰" : "7213",
"霪" : "7214",
"霱" : "7215",
"露" : "7216",
"霶" : "7217",
"霸" : "7218",
"霹" : "7219",
"霮" : "7220",
"霁" : "7221",
"靀" : "7222",
"霾" : "7223",
"霭" : "7224",
"雳" : "7225",
"叇" : "7226",
"灵" : "7227",
"叆" : "7228",
"霨" : "7229",
"青" : "7230",
"靖" : "7231",
"靓" : "7232",
"靛" : "7233",
"静" : "7234",
"镤" : "7235",
"非" : "7236",
"靠" : "7237",
"靡" : "7238",
"氆" : "7239",
"面" : "7240",
"靦" : "7241",
"靧" : "7242",
"靥" : "7243",
"钎" : "7244",
"革" : "7245",
"靳" : "7246",
"靴" : "7247",
"鞅" : "7248",
"靶" : "7249",
"靷" : "7250",
"靸" : "7251",
"鞀" : "7252",
"鞉" : "7253",
"鞍" : "7254",
"巩" : "7255",
"鞋" : "7256",
"鞗" : "7257",
"鞘" : "7258",
"鞙" : "7259",
"鞞" : "7260",
"鞚" : "7261",
"鞟" : "7262",
"鞠" : "7263",
"鞦" : "7264",
"鞫" : "7265",
"鞭" : "7267",
"鞮" : "7268",
"鞱" : "7269",
"鞶" : "7270",
"鞲" : "7271",
"鞴" : "7272",
"鞾" : "7273",
"韁" : "7274",
"鞑" : "7275",
"韆" : "7276",
"鞯" : "7277",
"羟" : "7278",
"韦" : "7279",
"韨" : "7280",
"韩" : "7281",
"韧" : "7282",
"韎" : "7283",
"韐" : "7284",
"韒" : "7285",
"韔" : "7286",
"韝" : "7287",
"韘" : "7288",
"韪" : "7289",
"韬" : "7290",
"韫" : "7291",
"韤" : "7292",
"韠" : "7293",
"炝" : "7294",
"韭" : "7295",
"韮" : "7296",
"韱" : "7297",
"仫" : "7298",
"音" : "7299",
"韶" : "7300",
"韵" : "7301",
"響" : "7302",
"韺" : "7303",
"頀" : "7304",
"苘" : "7305",
"页" : "7306",
"顶" : "7307",
"顷" : "7308",
"项" : "7309",
"顸" : "7310",
"顺" : "7311",
"须" : "7312",
"颂" : "7313",
"颃" : "7314",
"预" : "7315",
"顽" : "7316",
"颁" : "7317",
"颔" : "7318",
"顿" : "7319",
"顼" : "7320",
"頍" : "7321",
"颀" : "7322",
"頖" : "7323",
"颇" : "7324",
"领" : "7325",
"頞" : "7326",
"颉" : "7327",
"颐" : "7328",
"颚" : "7329",
"𩓐" : "7330",
"颏" : "7331",
"頫" : "7332",
"头" : "7333",
"颒" : "7334",
"颊" : "7335",
"颕" : "7336",
"頳" : "7337",
"颈" : "7338",
"颓" : "7339",
"频" : "7340",
"颗" : "7341",
"顇" : "7342",
"顋" : "7343",
"题" : "7344",
"额" : "7345",
"颜" : "7346",
"頿" : "7347",
"颛" : "7348",
"願" : "7349",
"颡" : "7350",
"颠" : "7351",
"类" : "7352",
"顜" : "7353",
"颟" : "7354",
"颢" : "7355",
"顦" : "7356",
"顾" : "7357",
"颤" : "7358",
"显" : "7359",
"颦" : "7360",
"颅" : "7361",
"颧" : "7362",
"粬" : "7363",
"风" : "7364",
"颭" : "7365",
"飒" : "7366",
"飓" : "7367",
"飔" : "7368",
"颿" : "7369",
"飏" : "7370",
"飖" : "7371",
"飕" : "7372",
"飘" : "7373",
"飙" : "7374",
"飗" : "7375",
"颱" : "7376",
"颳" : "7377",
"飞" : "7378",
"醛" : "7379",
"食" : "7380",
"飡" : "7381",
"饥" : "7382",
"饤" : "7383",
"飦" : "7384",
"飧" : "7385",
"饨" : "7386",
"饪" : "7387",
"饫" : "7388",
"饬" : "7389",
"饮" : "7390",
"饭" : "7391",
"饴" : "7392",
"饲" : "7393",
"饱" : "7394",
"饰" : "7395",
"飶" : "7396",
"餂" : "7397",
"饺" : "7398",
"饼" : "7399",
"饻" : "7400",
"饷" : "7401",
"养" : "7402",
"饵" : "7403",
"餐" : "7404",
"饾" : "7405",
"餗" : "7406",
"馁" : "7407",
"饿" : "7408",
"餔" : "7409",
"馂" : "7410",
"馀" : "7411",
"馄" : "7412",
"餚" : "7413",
"馅" : "7414",
"饯" : "7415",
"饽" : "7416",
"餟" : "7417",
"馍" : "7418",
"馆" : "7419",
"餬" : "7420",
"餮" : "7421",
"餱" : "7422",
"餲" : "7423",
"饧" : "7424",
"餹" : "7425",
"饩" : "7426",
"餽" : "7427",
"饁" : "7428",
"馒" : "7429",
"𩝭" : "7430",
"馑" : "7431",
"馈" : "7432",
"馔" : "7433",
"饎" : "7434",
"饐" : "7435",
"饑" : "7436",
"饶" : "7437",
"饔" : "7438",
"饕" : "7439",
"飨" : "7440",
"餍" : "7441",
"饟" : "7442",
"馋" : "7443",
"首" : "7445",
"馘" : "7446",
"馗" : "7447",
"炔" : "7448",
"香" : "7449",
"馥" : "7450",
"馨" : "7451",
"馝" : "7452",
"馡" : "7453",
"馣" : "7454",
"蛲" : "7455",
"马" : "7456",
"驭" : "7457",
"冯" : "7458",
"驰" : "7459",
"驯" : "7460",
"驮" : "7461",
"驲" : "7462",
"驳" : "7463",
"駃" : "7464",
"驻" : "7465",
"驽" : "7466",
"驹" : "7467",
"驾" : "7468",
"骀" : "7469",
"驸" : "7470",
"驶" : "7471",
"駋" : "7472",
"駜" : "7473",
"驼" : "7474",
"驷" : "7475",
"駪" : "7476",
"駉" : "7477",
"骈" : "7478",
"駬" : "7479",
"骇" : "7480",
"駮" : "7481",
"骆" : "7482",
"駵" : "7483",
"骃" : "7484",
"骎" : "7485",
"骏" : "7486",
"骔" : "7487",
"骋" : "7488",
"骓" : "7489",
"骍" : "7490",
"騃" : "7491",
"隲" : "7492",
"騑" : "7493",
"骑" : "7494",
"騋" : "7495",
"骐" : "7496",
"骛" : "7497",
"騄" : "7498",
"骗" : "7499",
"骢" : "7500",
"騠" : "7501",
"騣" : "7502",
"騤" : "7503",
"騧" : "7504",
"骞" : "7505",
"腾" : "7506",
"驺" : "7507",
"騵" : "7508",
"骟" : "7509",
"骚" : "7510",
"骝" : "7511",
"骡" : "7512",
"蓦" : "7513",
"骜" : "7514",
"骖" : "7515",
"骠" : "7516",
"驱" : "7517",
"驈" : "7518",
"騻" : "7519",
"骅" : "7520",
"驔" : "7521",
"骁" : "7522",
"驖" : "7523",
"骄" : "7524",
"骕" : "7525",
"验" : "7526",
"驒" : "7527",
"惊" : "7528",
"驘" : "7529",
"驙" : "7530",
"驿" : "7531",
"骤" : "7532",
"驴" : "7533",
"骧" : "7534",
"骥" : "7535",
"驩" : "7536",
"骊" : "7537",
"駗" : "7538",
"骨" : "7539",
"骩" : "7540",
"骭" : "7541",
"骯" : "7542",
"骱" : "7543",
"骰" : "7544",
"骷" : "7545",
"骸" : "7546",
"骼" : "7547",
"骽" : "7548",
"髀" : "7549",
"骾" : "7550",
"髅" : "7551",
"髆" : "7552",
"髑" : "7553",
"髒" : "7554",
"体" : "7555",
"髋" : "7556",
"髓" : "7557",
"鞣" : "7558",
"高" : "7559",
"铷" : "7560",
"髟" : "7561",
"髡" : "7562",
"髢" : "7563",
"髣" : "7564",
"髦" : "7565",
"髧" : "7566",
"髫" : "7567",
"髭" : "7568",
"髮" : "7569",
"髯" : "7570",
"鬃" : "7571",
"髴" : "7572",
"髻" : "7573",
"髹" : "7574",
"鬆" : "7575",
"鬈" : "7576",
"鬅" : "7577",
"鬋" : "7578",
"鬍" : "7579",
"鬐" : "7580",
"鬒" : "7581",
"鬑" : "7582",
"鬘" : "7583",
"鬔" : "7584",
"鬙" : "7585",
"鬚" : "7586",
"鬟" : "7587",
"鬣" : "7588",
"鬓" : "7589",
"鬎" : "7590",
"鬥" : "7591",
"鬨" : "7592",
"鬧" : "7593",
"阋" : "7594",
"鬭" : "7595",
"阄" : "7596",
"铯" : "7597",
"鬯" : "7598",
"鬱" : "7599",
"锶" : "7600",
"鬲" : "7601",
"鬴" : "7602",
"鬵" : "7603",
"鬷" : "7604",
"鬻" : "7605",
"雟" : "7606",
"鬼" : "7607",
"魁" : "7608",
"魂" : "7609",
"魃" : "7610",
"魄" : "7611",
"魊" : "7612",
"魅" : "7613",
"魏" : "7614",
"魐" : "7615",
"魀" : "7616",
"魈" : "7617",
"魍" : "7618",
"魉" : "7619",
"魑" : "7620",
"魔" : "7621",
"𩴾" : "7622",
"魇" : "7623",
"唢" : "7624",
"鱼" : "7625",
"鱿" : "7626",
"鲁" : "7627",
"䱅" : "7628",
"鲂" : "7629",
"鲇" : "7630",
"鲋" : "7631",
"鲐" : "7632",
"鲊" : "7633",
"鲑" : "7634",
"鲔" : "7635",
"鮆" : "7636",
"鲍" : "7637",
"鲞" : "7638",
"鲜" : "7639",
"鲛" : "7640",
"鲧" : "7641",
"鲤" : "7642",
"鲠" : "7643",
"鲨" : "7644",
"鲭" : "7645",
"鲵" : "7646",
"鲳" : "7647",
"鲓" : "7648",
"鲲" : "7649",
"鲸" : "7650",
"鲫" : "7651",
"𩸞" : "7652",
"鳊" : "7653",
"鲽" : "7654",
"鳅" : "7655",
"鰌" : "7656",
"鰕" : "7657",
"鳃" : "7658",
"鳏" : "7659",
"鳒" : "7660",
"鲥" : "7661",
"鳍" : "7662",
"鳌" : "7663",
"鲶" : "7664",
"鳗" : "7665",
"鳀" : "7666",
"鳖" : "7667",
"鳝" : "7668",
"鲟" : "7669",
"鲎" : "7670",
"鲙" : "7671",
"鳣" : "7672",
"鳞" : "7673",
"鳔" : "7674",
"鳜" : "7675",
"鳘" : "7676",
"鱷" : "7677",
"鲈" : "7678",
"鲄" : "7679",
"鸟" : "7680",
"鳦" : "7681",
"鸠" : "7682",
"凫" : "7683",
"鳲" : "7684",
"凤" : "7685",
"鸣" : "7686",
"鸢" : "7687",
"鴄" : "7688",
"鸱" : "7689",
"鸩" : "7690",
"鸨" : "7691",
"鴈" : "7692",
"鸦" : "7693",
"鴃" : "7694",
"鸳" : "7696",
"鸮" : "7697",
"鸪" : "7698",
"鸯" : "7699",
"鸭" : "7700",
"鸰" : "7701",
"鸲" : "7702",
"鸿" : "7703",
"鸽" : "7704",
"鴽" : "7705",
"鵀" : "7706",
"鸺" : "7707",
"鹈" : "7708",
"鹅" : "7709",
"鹃" : "7710",
"鹄" : "7711",
"鹁" : "7712",
"鹉" : "7713",
"鹆" : "7714",
"鹌" : "7715",
"鵰" : "7716",
"鹊" : "7717",
"鹑" : "7718",
"鵩" : "7719",
"鹏" : "7720",
"鹍" : "7721",
"鶃" : "7722",
"鹙" : "7723",
"鹕" : "7724",
"鹗" : "7725",
"鹜" : "7726",
"莺" : "7727",
"鶱" : "7728",
"鹤" : "7729",
"鶵" : "7730",
"鹡" : "7731",
"鹚" : "7732",
"鹒" : "7733",
"鷇" : "7734",
"鸧" : "7735",
"鶹" : "7736",
"鹘" : "7737",
"鹣" : "7738",
"鹢" : "7739",
"鹞" : "7740",
"鸡" : "7741",
"鷃" : "7742",
"鸥" : "7743",
"鹧" : "7744",
"鷕" : "7745",
"鹥" : "7746",
"鸷" : "7747",
"鸶" : "7748",
"鷩" : "7749",
"鹫" : "7750",
"鹰" : "7751",
"鹭" : "7752",
"鹪" : "7753",
"鹩" : "7754",
"鷼" : "7755",
"鹬" : "7756",
"鹯" : "7757",
"鸑" : "7758",
"鸴" : "7759",
"鸬" : "7760",
"鹦" : "7761",
"鸾" : "7762",
"鷟" : "7763",
"鹳" : "7764",
"鹂" : "7765",
"鴹" : "7766",
"卤" : "7767",
"鹹" : "7768",
"鹼" : "7769",
"盐" : "7770",
"鹾" : "7771",
"熵" : "7772",
"鹿" : "7773",
"麂" : "7774",
"铈" : "7775",
"麀" : "7776",
"麃" : "7777",
"麇" : "7778",
"麈" : "7779",
"麋" : "7780",
"麌" : "7781",
"麐" : "7782",
"麑" : "7783",
"麒" : "7784",
"麓" : "7785",
"麕" : "7786",
"丽" : "7787",
"麚" : "7788",
"麛" : "7789",
"麝" : "7790",
"麞" : "7791",
"麟" : "7792",
"麢" : "7793",
"麤" : "7794",
"涮" : "7795",
"麦" : "7796",
"麪" : "7797",
"麯" : "7798",
"麰" : "7799",
"麹" : "7800",
"蒴" : "7801",
"麻" : "7802",
"麽" : "7803",
"麾" : "7804",
"黁" : "7805",
"黄" : "7806",
"黈" : "7807",
"黉" : "7808",
"铊" : "7809",
"黍" : "7810",
"黏" : "7811",
"黎" : "7812",
"黐" : "7813",
"溚" : "7814",
"黑" : "7815",
"黔" : "7816",
"默" : "7817",
"黛" : "7818",
"黜" : "7819",
"点" : "7820",
"黝" : "7821",
"黠" : "7822",
"黥" : "7823",
"黧" : "7824",
"黨" : "7825",
"黯" : "7826",
"黴" : "7827",
"黮" : "7828",
"黡" : "7829",
"黩" : "7830",
"傣" : "7831",
"黹" : "7832",
"黻" : "7833",
"黼" : "7834",
"钛" : "7835",
"黾" : "7836",
"鼋" : "7837",
"鼃" : "7838",
"鼌" : "7839",
"鼇" : "7840",
"鼈" : "7841",
"鼍" : "7842",
"钽" : "7843",
"鼎" : "7844",
"鼐" : "7845",
"鼏" : "7846",
"鼒" : "7847",
"冇" : "7848",
"鼓" : "7849",
"鼕" : "7850",
"鼗" : "7851",
"鼖" : "7852",
"鼙" : "7853",
"鼛" : "7854",
"鼚" : "7855",
"羰" : "7856",
"鼠" : "7857",
"鼢" : "7858",
"鼫" : "7859",
"鼬" : "7860",
"鼯" : "7861",
"鼹" : "7862",
"鼷" : "7863",
"醣" : "7864",
"鼻" : "7865",
"鼽" : "7866",
"鼾" : "7867",
"齁" : "7868",
"齅" : "7869",
"铽" : "7870",
"齐" : "7871",
"斋" : "7872",
"齎" : "7873",
"齑" : "7874",
"菾" : "7875",
"齿" : "7876",
"龀" : "7877",
"龁" : "7878",
"龂" : "7879",
"龃" : "7880",
"龄" : "7881",
"龆" : "7882",
"龈" : "7883",
"齧" : "7884",
"齩" : "7885",
"龉" : "7886",
"龊" : "7887",
"齮" : "7888",
"龋" : "7889",
"腭" : "7890",
"龌" : "7891",
"齣" : "7892",
"龙" : "7893",
"厐" : "7894",
"龚" : "7895",
"龛" : "7896",
"舔" : "7897",
"龟" : "7898",
"烃" : "7899",
"龠" : "7900",
"龢" : "7901",
"龥" : "7902",
"楟" : "7903",
"酮" : "7904",
"茼" : "7905",
"烔" : "7906",
"钍" : "7907",
"佤" : "7908",
"烷" : "7909",
"烯" : "7910",
"螅" : "7911",
"氙" : "7912",
"酰" : "7913",
"鳕" : "7914",
"荨" : "7915",
"垭" : "7916",
"铱" : "7917",
"钇" : "7918",
"镱" : "7919",
"铟" : "7920",
"铕" : "7921",
"冮" : "7922",
"鳟" : "7923",
"蟑" : "7924",
"礃" : "7925",
"锗" : "7926",
"酯" : "7927",
"勐" : "7928",
"呋" : "7929",
"喹" : "7930",
"嗪" : "7931",
"嗡" : "7932",
"圐" : "7933",
"圙" : "7934",
"坬" : "7935",
"垾" : "7936",
"堼" : "7937",
"塂" : "7938",
"墈" : "7939",
"岽" : "7940",
"峧" : "7941",
"崀" : "7942",
"崅" : "7943",
"崌" : "7944",
"崾" : "7945",
"嶅" : "7946",
"挎" : "7947",
"捅" : "7948",
"改" : "7949",
"旻" : "7950",
"杞" : "7951",
"朿" : "7952",
"槠" : "7953",
"浐" : "7954",
"浕" : "7955",
"浉" : "7956",
"浈" : "7957",
"洨" : "7958",
"涢" : "7959",
"浛" : "7960",
"涠" : "7961",
"浯" : "7962",
"涭" : "7963",
"溵" : "7964",
"潖" : "7965",
"澛" : "7966",
"潵" : "7967",
"榃" : "7968",
"痄" : "7969",
"疰" : "7970",
"砼" : "7971",
"磜" : "7972",
"礅" : "7973",
"磙" : "7974",
"礳" : "7975",
"簕" : "7976",
"羧" : "7977",
"耢" : "7978",
"朊" : "7979",
"胂" : "7980",
"腈" : "7981",
"脿" : "7982",
"腩" : "7983",
"艿" : "7984",
"苄" : "7985",
"萜" : "7986",
"蚍" : "7987",
"蚴" : "7988",
"蛘" : "7989",
"觃" : "7990",
"轱" : "7991",
"轷" : "7992",
"鄌" : "7993",
"酞" : "7994",
"铹" : "7995",
"锛" : "7996",
"锘" : "7997",
"雒" : "7998",
"靰" : "7999",
"丌" : "8000",
"万" : "8001",
"丘" : "8002",
"乒" : "8003",
"乓" : "8004",
"甭" : "8005",
"孬" : "8006",
"饸" : "8007",
"饹" : "8008",
"丳" : "8009",
"么" : "8010",
"骶" : "8011",
"乩" : "8012",
"亄" : "8013",
"肮" : "8014",
"亍" : "8015",
"亓" : "8016",
"亘" : "8017",
"亝" : "8018",
"鲖" : "8019",
"仈" : "8020",
"仂" : "8021",
"仉" : "8022",
"伈" : "8023",
"伃" : "8024",
"伀" : "8025",
"伽" : "8026",
"佉" : "8027",
"伫" : "8028",
"佂" : "8029",
"伾" : "8030",
"佽" : "8031",
"佼" : "8032",
"佹" : "8033",
"佴" : "8034",
"佫" : "8035",
"佌" : "8036",
"侢" : "8037",
"侜" : "8038",
"侚" : "8039",
"侘" : "8040",
"侐" : "8041",
"侁" : "8042",
"侀" : "8043",
"伣" : "8044",
"俅" : "8045",
"伡" : "8046",
"俌" : "8047",
"俁" : "8049",
"俤" : "8050",
"侴" : "8051",
"倅" : "8052",
"倢" : "8053",
"倞" : "8054",
"倴" : "8055",
"倔" : "8056",
"俴" : "8057",
"偲" : "8059",
"偫" : "8060",
"偘" : "8061",
"傁" : "8062",
"偯" : "8063",
"偬" : "8064",
"偩" : "8065",
"偝" : "8066",
"偌" : "8067",
"傔" : "8068",
"傺" : "8069",
"僊" : "8070",
"僎" : "8071",
"僬" : "8072",
"㒆" : "8073",
"僤" : "8074",
"僼" : "8075",
"儩" : "8077",
"儦" : "8078",
"儡" : "8079",
"傩" : "8080",
"儸" : "8081",
"鲘" : "8082",
"鲩" : "8083",
"鲡" : "8084",
"鲮" : "8085",
"屲" : "8086",
"岜" : "8087",
"兙" : "8088",
"兛" : "8089",
"峃" : "8090",
"兝" : "8091",
"兞" : "8092",
"党" : "8093",
"凃" : "8094",
"凊" : "8095",
"减" : "8096",
"掰" : "8097",
"冔" : "8098",
"冨" : "8099",
"氕" : "8100",
"刓" : "8101",
"刜" : "8102",
"剙" : "8103",
"剞" : "8104",
"劂" : "8105",
"刿" : "8106",
"劖" : "8107",
"劚" : "8108",
"鲝" : "8109",
"鲱" : "8110",
"勑" : "8111",
"勔" : "8112",
"勋" : "8113",
"勡" : "8114",
"鲴" : "8115",
"匆" : "8116",
"卼" : "8117",
"厖" : "8118",
"叐" : "8119",
"吋" : "8120",
"吔" : "8121",
"吪" : "8122",
"吱" : "8123",
"吽" : "8124",
"呎" : "8125",
"听" : "8126",
"吰" : "8127",
"呭" : "8128",
"咈" : "8129",
"咍" : "8130",
"咚" : "8131",
"咡" : "8132",
"咢" : "8133",
"咥" : "8134",
"哆" : "8135",
"咻" : "8136",
"咟" : "8137",
"咮" : "8138",
"呙" : "8139",
"唎" : "8140",
"哤" : "8141",
"呗" : "8142",
"唑" : "8143",
"哢" : "8144",
"啗" : "8145",
"唪" : "8146",
"唼" : "8147",
"啐" : "8148",
"啍" : "8149",
"唶" : "8150",
"喤" : "8151",
"啳" : "8152",
"喴" : "8153",
"喨" : "8154",
"喌" : "8155",
"唝" : "8156",
"嗈" : "8157",
"嗁" : "8158",
"嗀" : "8159",
"嗿" : "8160",
"嘐" : "8161",
"嘑" : "8162",
"嗹" : "8163",
"嘂" : "8164",
"啯" : "8165",
"嘌" : "8166",
"唠" : "8167",
"噙" : "8168",
"噂" : "8169",
"噀" : "8170",
"嘽" : "8171",
"呒" : "8172",
"噹" : "8173",
"哒" : "8174",
"噳" : "8175",
"噭" : "8176",
"嚌" : "8177",
"嚆" : "8178",
"嚄" : "8179",
"嚃" : "8180",
"嚭" : "8181",
"呖" : "8182",
"噜" : "8183",
"嚲" : "8184",
"喾" : "8185",
"啃" : "8186",
"鳁" : "8187",
"囝" : "8188",
"囡" : "8189",
"囥" : "8190",
"圊" : "8191",
"圌" : "8192",
"圛" : "8193",
"圞" : "8194",
"鳎" : "8195",
"鳙" : "8196",
"圯" : "8197",
"圪" : "8198",
"壳" : "8199",
"𡊐" : "8200",
"坻" : "8201",
"坵" : "8202",
"坱" : "8203",
"坴" : "8204",
"坿" : "8205",
"垇" : "8206",
"垊" : "8207",
"垞" : "8208",
"垤" : "8209",
"垚" : "8210",
"垌" : "8211",
"垗" : "8212",
"垟" : "8213",
"垕" : "8214",
"𡋟" : "8215",
"㘾" : "8216",
"埂" : "8217",
"垻" : "8218",
"垸" : "8219",
"埗" : "8220",
"埆" : "8221",
"埌" : "8222",
"埇" : "8223",
"埕" : "8224",
"埦" : "8225",
"埶" : "8226",
"埽" : "8227",
"堄" : "8228",
"堋" : "8229",
"堉" : "8230",
"堎" : "8231",
"堀" : "8232",
"堌" : "8233",
"埰" : "8234",
"堲" : "8235",
"堧" : "8236",
"塓" : "8237",
"堨" : "8238",
"堍" : "8239",
"堳" : "8240",
"埚" : "8241",
"塬" : "8242",
"塱" : "8243",
"塝" : "8244",
"堽" : "8245",
"墘" : "8246",
"塥" : "8247",
"塷" : "8248",
"塽" : "8249",
"墕" : "8250",
"塈" : "8251",
"墝" : "8252",
"墠" : "8253",
"墫" : "8254",
"垱" : "8255",
"㙮" : "8256",
"𡑍" : "8257",
"墰" : "8258",
"墙" : "8259",
"壒" : "8261",
"墒" : "8262",
"垅" : "8263",
"橦" : "8264",
"螨" : "8265",
"岈" : "8266",
"脒" : "8267",
"夼" : "8268",
"奜" : "8269",
"㚟" : "8270",
"奰" : "8271",
"貌" : "8272",
"妵" : "8273",
"姁" : "8274",
"妸" : "8275",
"姶" : "8276",
"姺" : "8277",
"姽" : "8278",
"娀" : "8279",
"姘" : "8280",
"娒" : "8281",
"娵" : "8282",
"婐" : "8283",
"婞" : "8284",
"娸" : "8285",
"娬" : "8286",
"婤" : "8287",
"嫏" : "8288",
"婥" : "8289",
"媊" : "8290",
"媜" : "8291",
"媄" : "8292",
"媞" : "8293",
"嫈" : "8294",
"媮" : "8295",
"婿" : "8296",
"嫳" : "8297",
"嫽" : "8298",
"婳" : "8299",
"娴" : "8300",
"妩" : "8301",
"嫒" : "8302",
"嬝" : "8303",
"孃" : "8304",
"鞡" : "8305",
"孖" : "8311",
"孻" : "8312",
"寪" : "8314",
"尀" : "8315",
"尟" : "8316",
"屄" : "8317",
"屜" : "8318",
"屪" : "8319",
"屫" : "8320",
"屴" : "8321",
"屼" : "8322",
"岅" : "8323",
"岙" : "8324",
"岍" : "8325",
"岊" : "8326",
"岨" : "8327",
"岬" : "8328",
"岞" : "8329",
"岧" : "8330",
"峇" : "8331",
"峢" : "8332",
"峝" : "8333",
"峹" : "8334",
"峱" : "8335",
"崟" : "8337",
"崞" : "8338",
"崮" : "8339",
"崿" : "8340",
"嶞" : "8341",
"崽" : "8342",
"崴" : "8343",
"峣" : "8344",
"嵂" : "8345",
"嵼" : "8346",
"嶥" : "8347",
"嶓" : "8348",
"崄" : "8349",
"嶰" : "8350",
"嶴" : "8351",
"巃" : "8352",
"巇" : "8353",
"岿" : "8354",
"巯" : "8360",
"帣" : "8361",
"幈" : "8362",
"幞" : "8363",
"幠" : "8364",
"幩" : "8365",
"幦" : "8366",
"幨" : "8367",
"庄" : "8369",
"庈" : "8370",
"庤" : "8371",
"𢊈" : "8372",
"廒" : "8373",
"廍" : "8374",
"庼" : "8375",
"廧" : "8376",
"异" : "8381",
"弌" : "8382",
"弎" : "8383",
"甙" : "8384",
"彴" : "8385",
"彽" : "8386",
"忪" : "8388",
"怈" : "8389",
"怳" : "8390",
"怭" : "8391",
"怲" : "8392",
"恇" : "8393",
"恓" : "8394",
"恔" : "8395",
"恵" : "8396",
"惔" : "8397",
"惽" : "8398",
"愃" : "8399",
"愓" : "8400",
"惷" : "8401",
"慉" : "8402",
"憃" : "8403",
"憙" : "8404",
"懠" : "8405",
"懰" : "8406",
"懮" : "8407",
"戁" : "8408",
"戄" : "8409",
"戭" : "8414",
"戹" : "8415",
"戺" : "8416",
"扐" : "8418",
"扢" : "8419",
"扤" : "8420",
"扡" : "8421",
"扦" : "8422",
"拤" : "8423",
"抶" : "8424",
"拑" : "8425",
"拕" : "8427",
"𢪘" : "8428",
"拶" : "8429",
"捚" : "8430",
"挱" : "8431",
"捃" : "8432",
"捘" : "8433",
"捓" : "8434",
"捬" : "8435",
"挜" : "8436",
"掤" : "8437",
"掮" : "8438",
"揸" : "8439",
"揲" : "8440",
"揅" : "8441",
"揗" : "8442",
"揰" : "8443",
"揫" : "8444",
"揎" : "8445",
"揕" : "8446",
"揥" : "8447",
"揶" : "8448",
"揵" : "8449",
"搸" : "8450",
"掔" : "8451",
"搢" : "8452",
"揾" : "8453",
"搊" : "8454",
"搘" : "8455",
"摉" : "8456",
"搌" : "8457",
"搤" : "8458",
"搡" : "8459",
"摠" : "8460",
"撱" : "8461",
"摦" : "8462",
"摲" : "8463",
"摷" : "8464",
"撦" : "8465",
"搿" : "8466",
"𢴇" : "8467",
"𢵧" : "8468",
"挦" : "8469",
"撶" : "8470",
"揿" : "8471",
"𢵈" : "8472",
"掸" : "8473",
"擐" : "8474",
"擖" : "8475",
"擫" : "8476",
"擥" : "8477",
"攟" : "8478",
"掱" : "8479",
"敜" : "8489",
"敫" : "8490",
"敳" : "8491",
"敹" : "8492",
"敿" : "8493",
"斏" : "8494",
"斚" : "8496",
"斠" : "8497",
"斮" : "8498",
"旝" : "8499",
"旴" : "8501",
"昀" : "8502",
"昄" : "8503",
"昊" : "8504",
"昰" : "8505",
"昺" : "8506",
"晅" : "8507",
"晟" : "8508",
"晛" : "8509",
"晧" : "8510",
"晜" : "8511",
"晾" : "8512",
"暋" : "8513",
"暌" : "8514",
"暓" : "8515",
"暔" : "8516",
"暲" : "8517",
"晔" : "8518",
"暧" : "8519",
"朌" : "8524",
"朣" : "8525",
"朾" : "8527",
"杇" : "8528",
"杕" : "8529",
"杠" : "8530",
"杗" : "8531",
"杝" : "8532",
"杅" : "8533",
"杙" : "8534",
"杶" : "8535",
"枤" : "8536",
"杻" : "8537",
"枬" : "8538",
"枓" : "8539",
"柷" : "8540",
"枒" : "8541",
"枴" : "8542",
"柂" : "8543",
"柅" : "8544",
"柣" : "8545",
"柤" : "8546",
"柲" : "8547",
"柶" : "8548",
"柸" : "8549",
"栻" : "8550",
"栔" : "8551",
"栝" : "8552",
"栞" : "8553",
"栫" : "8554",
"栭" : "8555",
"栵" : "8556",
"桋" : "8557",
"栒" : "8558",
"栟" : "8559",
"桬" : "8560",
"桭" : "8561",
"梡" : "8562",
"梩" : "8563",
"梴" : "8564",
"枧" : "8565",
"棑" : "8566",
"棜" : "8567",
"棪" : "8568",
"棸" : "8569",
"椌" : "8570",
"椏" : "8571",
"椑" : "8572",
"楰" : "8573",
"楙" : "8574",
"楀" : "8575",
"楂" : "8576",
"楄" : "8577",
"楎" : "8578",
"楬" : "8579",
"𣗬" : "8580",
"槩" : "8581",
"樲" : "8582",
"樠" : "8583",
"椝" : "8584",
"𣛮" : "8585",
"椫" : "8586",
"橇" : "8587",
"橤" : "8588",
"檎" : "8589",
"燊" : "8590",
"桪" : "8591",
"枟" : "8592",
"槜" : "8593",
"檑" : "8594",
"橚" : "8595",
"檴" : "8596",
"橣" : "8597",
"檿" : "8598",
"橱" : "8599",
"檙" : "8600",
"橥" : "8601",
"櫌" : "8602",
"榉" : "8603",
"欑" : "8604",
"欙" : "8605",
"樴" : "8606",
"欼" : "8616",
"歈" : "8617",
"歁" : "8618",
"歊" : "8619",
"歗" : "8620",
"歜" : "8621",
"歾" : "8623",
"殈" : "8624",
"殣" : "8625",
"殭" : "8626",
"毈" : "8628",
"毚" : "8632",
"毵" : "8633",
"氞" : "8635",
"氟" : "8636",
"氨" : "8637",
"氧" : "8638",
"氥" : "8639",
"氦" : "8640",
"氢" : "8641",
"氰" : "8642",
"氱" : "8643",
"氮" : "8644",
"氩" : "8645",
"㲶" : "8646",
"氘" : "8647",
"氚" : "8648",
"氿" : "8659",
"汆" : "8660",
"沄" : "8661",
"沇" : "8662",
"沕" : "8663",
"泂" : "8664",
"況" : "8665",
"泒" : "8666",
"泃" : "8667",
"泜" : "8668",
"泚" : "8669",
"洏" : "8670",
"洴" : "8671",
"洤" : "8672",
"涌" : "8673",
"涖" : "8674",
"涒" : "8675",
"浭" : "8676",
"浤" : "8677",
"浧" : "8678",
"涊" : "8679",
"浼" : "8680",
"淖" : "8681",
"淟" : "8682",
"淜" : "8683",
"淓" : "8684",
"淠" : "8685",
"淢" : "8686",
"渟" : "8687",
"沨" : "8688",
"湑" : "8689",
"湩" : "8690",
"溦" : "8691",
"渌" : "8692",
"淼" : "8693",
"渲" : "8694",
"渼" : "8695",
"湢" : "8696",
"溏" : "8697",
"湋" : "8698",
"渫" : "8699",
"溴" : "8700",
"滉" : "8701",
"滏" : "8702",
"滺" : "8703",
"漰" : "8704",
"潌" : "8705",
"漎" : "8706",
"漋" : "8707",
"漷" : "8708",
"澉" : "8709",
"澐" : "8710",
"潚" : "8711",
"沵" : "8712",
"濙" : "8713",
"滢" : "8714",
"瀌" : "8715",
"瀞" : "8716",
"瀵" : "8717",
"瀳" : "8718",
"灋" : "8719",
"灥" : "8720",
"澁" : "8721",
"灺" : "8731",
"炅" : "8732",
"𤆬" : "8733",
"炤" : "8734",
"炁" : "8735",
"烖" : "8736",
"烓" : "8737",
"烚" : "8738",
"烳" : "8739",
"焄" : "8740",
"烱" : "8741",
"焫" : "8742",
"焯" : "8743",
"焻" : "8744",
"𤉶" : "8745",
"焱" : "8746",
"焴" : "8747",
"煇" : "8748",
"煃" : "8749",
"煁" : "8750",
"煐" : "8751",
"煝" : "8752",
"煚" : "8753",
"煟" : "8754",
"𤌚" : "8755",
"熉" : "8756",
"熿" : "8757",
"熤" : "8758",
"熳" : "8759",
"燂" : "8760",
"燋" : "8761",
"燏" : "8762",
"烨" : "8763",
"燨" : "8764",
"燡" : "8765",
"燫" : "8766",
"爥" : "8767",
"牏" : "8778",
"牐" : "8779",
"牮" : "8781",
"牶" : "8782",
"牼" : "8783",
"㹀" : "8784",
"犆" : "8785",
"犇" : "8786",
"犄" : "8787",
"犔" : "8788",
"犛" : "8789",
"犫" : "8790",
"犵" : "8794",
"犺" : "8795",
"狅" : "8796",
"狉" : "8797",
"狘" : "8798",
"狨" : "8799",
"狫" : "8800",
"狧" : "8801",
"猈" : "8802",
"猋" : "8803",
"猨" : "8804",
"猆" : "8805",
"猲" : "8806",
"獀" : "8807",
"獆" : "8808",
"獝" : "8809",
"獢" : "8810",
"猃" : "8811",
"𤢛" : "8812",
"猕" : "8813",
"獾" : "8814",
"玗" : "8818",
"玥" : "8819",
"玶" : "8820",
"珛" : "8821",
"珔" : "8822",
"珺" : "8823",
"琱" : "8824",
"琼" : "8825",
"琷" : "8826",
"琰" : "8827",
"珐" : "8828",
"珲" : "8829",
"瑄" : "8830",
"瑂" : "8831",
"瑔" : "8832",
"瑢" : "8833",
"琏" : "8834",
"瑭" : "8835",
"璂" : "8836",
"璅" : "8837",
"璊" : "8838",
"璚" : "8839",
"璩" : "8840",
"璭" : "8841",
"瑷" : "8842",
"瓌" : "8843",
"瓖" : "8844",
"瓗" : "8846",
"甀" : "8850",
"甆" : "8851",
"甒" : "8852",
"甏" : "8853",
"甤" : "8856",
"畈" : "8858",
"疃" : "8859",
"疕" : "8861",
"疘" : "8862",
"疞" : "8863",
"疢" : "8864",
"疷" : "8865",
"痁" : "8867",
"疶" : "8868",
"痐" : "8869",
"痗" : "8870",
"痤" : "8871",
"痯" : "8872",
"瘃" : "8873",
"痻" : "8874",
"瘄" : "8875",
"瘈" : "8876",
"瘌" : "8877",
"瘨" : "8878",
"瘬" : "8879",
"瘭" : "8880",
"瘯" : "8881",
"瘶" : "8882",
"瘅" : "8883",
"癒" : "8884",
"癙" : "8885",
"癏" : "8886",
"癠" : "8887",
"癳" : "8888",
"癿" : "8895",
"盚" : "8896",
"盵" : "8898",
"盰" : "8899",
"眊" : "8900",
"盹" : "8901",
"眂" : "8902",
"眅" : "8903",
"眚" : "8904",
"眢" : "8905",
"眎" : "8906",
"眏" : "8907",
"眕" : "8908",
"眴" : "8909",
"睊" : "8910",
"睅" : "8911",
"睠" : "8912",
"睒" : "8913",
"睙" : "8914",
"睽" : "8915",
"睻" : "8916",
"瞏" : "8917",
"瞟" : "8918",
"瞫" : "8919",
"矔" : "8920",
"矟" : "8925",
"矬" : "8926",
"矽" : "8928",
"砃" : "8929",
"砅" : "8930",
"砢" : "8931",
"砣" : "8932",
"砠" : "8933",
"砞" : "8934",
"砝" : "8935",
"砫" : "8936",
"砵" : "8937",
"砷" : "8938",
"砳" : "8939",
"砽" : "8940",
"硍" : "8941",
"硈" : "8942",
"硐" : "8943",
"硅" : "8944",
"硔" : "8945",
"硋" : "8946",
"硭" : "8947",
"硪" : "8948",
"碆" : "8949",
"碏" : "8950",
"碚" : "8951",
"碈" : "8952",
"碞" : "8954",
"碳" : "8955",
"碶" : "8956",
"硻" : "8957",
"磒" : "8958",
"碻" : "8959",
"磛" : "8960",
"磟" : "8961",
"磡" : "8962",
"𥕕" : "8963",
"𥖁" : "8964",
"硚" : "8965",
"磵" : "8966",
"磹" : "8967",
"礞" : "8968",
"硷" : "8969",
"硒" : "8970",
"碃" : "8972",
"祙" : "8980",
"禚" : "8981",
"禜" : "8982",
"禤" : "8983",
"禴" : "8984",
"秴" : "8986",
"稙" : "8987",
"稑" : "8988",
"稺" : "8989",
"穈" : "8990",
"穧" : "8991",
"穮" : "8992",
"稖" : "8993",
"窊" : "8999",
"窔" : "9000",
"窴" : "9001",
"窿" : "9002",
"竏" : "9003",
"竢" : "9004",
"竜" : "9005",
"竾" : "9006",
"笰" : "9007",
"笲" : "9008",
"笵" : "9009",
"筘" : "9010",
"筳" : "9011",
"筦" : "9012",
"筭" : "9013",
"箄" : "9014",
"箙" : "9015",
"篜" : "9016",
"篟" : "9017",
"篥" : "9018",
"篹" : "9019",
"簉" : "9020",
"篢" : "9021",
"簹" : "9022",
"簰" : "9023",
"籝" : "9024",
"籣" : "9025",
"籭" : "9026",
"粁" : "9032",
"粍" : "9033",
"粎" : "9034",
"粞" : "9035",
"粦" : "9036",
"粮" : "9037",
"粻" : "9038",
"粿" : "9039",
"粽" : "9040",
"糅" : "9041",
"糓" : "9042",
"糔" : "9043",
"糢" : "9044",
"糦" : "9045",
"糰" : "9046",
"糳" : "9047",
"糌" : "9048",
"紃" : "9052",
"纼" : "9053",
"紑" : "9054",
"纰" : "9055",
"紩" : "9056",
"绁" : "9057",
"絓" : "9058",
"綎" : "9059",
"綖" : "9060",
"絻" : "9061",
"綅" : "9062",
"綪" : "9063",
"绲" : "9064",
"缂" : "9065",
"緜" : "9066",
"緰" : "9067",
"縇" : "9068",
"绬" : "9069",
"縏" : "9070",
"缑" : "9071",
"縚" : "9072",
"縿" : "9073",
"繘" : "9074",
"繠" : "9075",
"纕" : "9076",
"纙" : "9077",
"缽" : "9083",
"罎" : "9084",
"罦" : "9086",
"罻" : "9087",
"罾" : "9088",
"芈" : "9090",
"羖" : "9091",
"羭" : "9092",
"羱" : "9093",
"羾" : "9095",
"翃" : "9096",
"翫" : "9097",
"翪" : "9098",
"耏" : "9100",
"耤" : "9101",
"耯" : "9102",
"聓" : "9105",
"聝" : "9106",
"聱" : "9107",
"肜" : "9109",
"肧" : "9110",
"肵" : "9111",
"肪" : "9112",
"胛" : "9113",
"胟" : "9114",
"脉" : "9115",
"胆" : "9116",
"脃" : "9117",
"胹" : "9118",
"脄" : "9119",
"脞" : "9120",
"脡" : "9121",
"脥" : "9122",
"脢" : "9123",
"脝" : "9124",
"脰" : "9125",
"脖" : "9126",
"脗" : "9127",
"腂" : "9128",
"腍" : "9129",
"腒" : "9130",
"腌" : "9131",
"腯" : "9132",
"腶" : "9133",
"膇" : "9134",
"膆" : "9135",
"膘" : "9136",
"膟" : "9137",
"膷" : "9138",
"臈" : "9139",
"臑" : "9140",
"膑" : "9141",
"臐" : "9142",
"臛" : "9143",
"舢" : "9152",
"舨" : "9153",
"舺" : "9154",
"舿" : "9155",
"𦩀" : "9156",
"艌" : "9157",
"艑" : "9158",
"艚" : "9159",
"艥" : "9160",
"艣" : "9161",
"艩" : "9162",
"艬" : "9163",
"茓" : "9166",
"芘" : "9167",
"苐" : "9168",
"苠" : "9169",
"荁" : "9170",
"荅" : "9171",
"茬" : "9173",
"莦" : "9174",
"菶" : "9175",
"萐" : "9176",
"菆" : "9177",
"菻" : "9178",
"葍" : "9179",
"蓌" : "9180",
"荝" : "9181",
"葄" : "9182",
"葓" : "9183",
"蒢" : "9184",
"葠" : "9185",
"蓪" : "9186",
"蓘" : "9187",
"蓺" : "9188",
"蔒" : "9189",
"苁" : "9190",
"蓷" : "9191",
"蔋" : "9192",
"蔙" : "9193",
"𦼖" : "9194",
"薸" : "9195",
"薾" : "9196",
"藘" : "9197",
"藙" : "9198",
"蘐" : "9199",
"蘤" : "9200",
"蘺" : "9201",
"虒" : "9213",
"虖" : "9214",
"虯" : "9217",
"蚔" : "9218",
"蚠" : "9219",
"蚳" : "9220",
"蛓" : "9221",
"蜑" : "9222",
"蚬" : "9223",
"蜺" : "9224",
"蝃" : "9225",
"蜨" : "9226",
"蝓" : "9227",
"蝏" : "9228",
"蝡" : "9229",
"蝤" : "9230",
"螓" : "9231",
"蝯" : "9232",
"蝝" : "9233",
"螥" : "9234",
"螉" : "9235",
"螗" : "9236",
"螵" : "9237",
"蟁" : "9238",
"蟜" : "9239",
"蟢" : "9240",
"蠋" : "9241",
"蛴" : "9242",
"蠙" : "9243",
"蠭" : "9244",
"蠮" : "9245",
"袇" : "9252",
"衺" : "9253",
"袲" : "9254",
"袺" : "9255",
"袽" : "9256",
"袿" : "9257",
"裋" : "9258",
"褕" : "9259",
"裢" : "9260",
"褽" : "9261",
"襔" : "9262",
"𧝞" : "9263",
"襛" : "9264",
"襍" : "9265",
"𧞅" : "9266",
"襜" : "9267",
"襞" : "9268",
"襡" : "9269",
"襢" : "9270",
"襋" : "9271",
"襆" : "9272",
"襮" : "9273",
"襬" : "9274",
"觜" : "9278",
"觡" : "9279",
"觷" : "9280",
"訆" : "9282",
"訧" : "9283",
"訽" : "9284",
"詉" : "9285",
"詊" : "9286",
"诇" : "9287",
"詧" : "9288",
"詻" : "9289",
"詾" : "9290",
"誃" : "9291",
"詨" : "9292",
"諆" : "9293",
"诨" : "9294",
"謌" : "9295",
"謷" : "9296",
"譈" : "9297",
"譆" : "9298",
"譅" : "9299",
"谉" : "9300",
"谰" : "9301",
"讑" : "9302",
"讇" : "9303",
"豀" : "9314",
"豗" : "9315",
"豜" : "9316",
"豶" : "9317",
"豷" : "9318",
"豻" : "9320",
"貜" : "9321",
"贠" : "9322",
"賩" : "9323",
"𧶔" : "9324",
"趡" : "9325",
"趫" : "9326",
"趯" : "9327",
"趱" : "9328",
"跁" : "9330",
"跱" : "9331",
"跤" : "9332",
"跦" : "9333",
"跲" : "9334",
"跧" : "9335",
"踦" : "9337",
"踪" : "9338",
"䠀" : "9339",
"踤" : "9340",
"踶" : "9341",
"蹆" : "9342",
"蹏" : "9343",
"蹝" : "9344",
"蹩" : "9345",
"蹧" : "9346",
"蹷" : "9347",
"蹻" : "9348",
"蹼" : "9349",
"躗" : "9350",
"躞" : "9351",
"躘" : "9352",
"躧" : "9353",
"軘" : "9359",
"軜" : "9360",
"軝" : "9361",
"軥" : "9362",
"轲" : "9363",
"轊" : "9364",
"轑" : "9365",
"轗" : "9366",
"轝" : "9367",
"辚" : "9368",
"迮" : "9374",
"𨔁" : "9375",
"逴" : "9376",
"遫" : "9377",
"遰" : "9378",
"遻" : "9379",
"邋" : "9380",
"邘" : "9386",
"邧" : "9387",
"郉" : "9388",
"邿" : "9389",
"郈" : "9390",
"郔" : "9391",
"郚" : "9392",
"郠" : "9393",
"郪" : "9394",
"郫" : "9395",
"郳" : "9396",
"鄀" : "9397",
"郓" : "9398",
"鄇" : "9399",
"鄋" : "9400",
"郾" : "9401",
"鄓" : "9402",
"鄍" : "9403",
"鄎" : "9404",
"鄏" : "9405",
"鄐" : "9406",
"鄑" : "9407",
"鄈" : "9408",
"鄚" : "9409",
"鄣" : "9410",
"鄤" : "9411",
"鄩" : "9412",
"鄬" : "9413",
"鄻" : "9414",
"鄿" : "9415",
"鄾" : "9416",
"酅" : "9417",
"酏" : "9426",
"醎" : "9427",
"醑" : "9428",
"醝" : "9429",
"醹" : "9430",
"醻" : "9431",
"酾" : "9432",
"酽" : "9433",
"钋" : "9437",
"钐" : "9438",
"釬" : "9439",
"钒" : "9440",
"釸" : "9441",
"钑" : "9442",
"钫" : "9443",
"鈊" : "9444",
"钭" : "9445",
"钘" : "9446",
"鉌" : "9447",
"铍" : "9448",
"钻" : "9449",
"铆" : "9450",
"鉎" : "9451",
"鉥" : "9452",
"钼" : "9453",
"銎" : "9454",
"銍" : "9455",
"铐" : "9456",
"鉷" : "9457",
"銈" : "9458",
"铬" : "9459",
"銶" : "9460",
"鋘" : "9461",
"鋆" : "9462",
"鋕" : "9463",
"鋐" : "9464",
"锂" : "9465",
"鋝" : "9466",
"锒" : "9467",
"钡" : "9468",
"鋂" : "9469",
"錀" : "9470",
"錖" : "9471",
"铔" : "9472",
"錶" : "9473",
"錔" : "9474",
"锨" : "9475",
"錂" : "9476",
"锬" : "9477",
"锖" : "9478",
"鉼" : "9479",
"锠" : "9480",
"锞" : "9481",
"鍪" : "9482",
"鍫" : "9483",
"铡" : "9484",
"镁" : "9485",
"钖" : "9486",
"锳" : "9487",
"鍹" : "9488",
"鎉" : "9489",
"镏" : "9490",
"鎤" : "9491",
"鍏" : "9492",
"镉" : "9493",
"铩" : "9494",
"鏊" : "9495",
"蓥" : "9496",
"鎏" : "9497",
"鏦" : "9498",
"鐄" : "9499",
"鏇" : "9500",
"鏛" : "9501",
"鏚" : "9502",
"镦" : "9503",
"鐉" : "9504",
"锏" : "9505",
"镨" : "9506",
"镣" : "9507",
"鐏" : "9508",
"镡" : "9509",
"镢" : "9510",
"鐩" : "9511",
"鏻" : "9512",
"鑅" : "9513",
"锧" : "9514",
"鑫" : "9515",
"鑯" : "9516",
"闹" : "9527",
"閧" : "9528",
"闑" : "9529",
"阽" : "9532",
"陑" : "9533",
"陾" : "9534",
"隃" : "9535",
"随" : "9536",
"隵" : "9537",
"𨻧" : "9538",
"雂" : "9540",
"雃" : "9541",
"𩂯" : "9544",
"霙" : "9545",
"霣" : "9546",
"靁" : "9547",
"靔" : "9552",
"靮" : "9554",
"靺" : "9555",
"鞃" : "9556",
"靼" : "9557",
"鞌" : "9558",
"鞛" : "9559",
"鞨" : "9560",
"鞸" : "9561",
"鞹" : "9562",
"韅" : "9563",
"韡" : "9570",
"韣" : "9571",
"韹" : "9573",
"頄" : "9575",
"颋" : "9576",
"颌" : "9577",
"頟" : "9578",
"頠" : "9579",
"𩓚" : "9580",
"颙" : "9581",
"顗" : "9582",
"颮" : "9587",
"𩗗" : "9588",
"颽" : "9589",
"飜" : "9592",
"饦" : "9594",
"餈" : "9595",
"餤" : "9596",
"餵" : "9597",
"餪" : "9598",
"餫" : "9599",
"馊" : "9600",
"馎" : "9601",
"餻" : "9602",
"饍" : "9603",
"饘" : "9604",
"馃" : "9606",
"馪" : "9611",
"馵" : "9613",
"駓" : "9614",
"驵" : "9615",
"駴" : "9616",
"駽" : "9617",
"駾" : "9618",
"騆" : "9619",
"騢" : "9620",
"騯" : "9621",
"骦" : "9622",
"骉" : "9623",
"髁" : "9629",
"髳" : "9631",
"髽" : "9632",
"鬁" : "9633",
"魆" : "9635",
"魋" : "9636",
"魗" : "9637",
"鲀" : "9639",
"鮀" : "9640",
"鲅" : "9641",
"鮞" : "9642",
"鲒" : "9643",
"鯈" : "9644",
"鮿" : "9645",
"鲰" : "9646",
"鲻" : "9647",
"鲷" : "9648",
"鲗" : "9649",
"鳇" : "9650",
"鰋" : "9651",
"鳆" : "9652",
"鳄" : "9653",
"鲢" : "9654",
"鲦" : "9655",
"鱄" : "9656",
"鱎" : "9657",
"鱏" : "9658",
"鱓" : "9659",
"鱐" : "9660",
"鳢" : "9661",
"鲚" : "9662",
"鱮" : "9663",
"鳠" : "9664",
"鲿" : "9665",
"鱻" : "9666",
"鳛" : "9667",
"鳷" : "9673",
"瞗" : "9674",
"鴥" : "9675",
"鸵" : "9676",
"鹓" : "9677",
"鵻" : "9678",
"鹖" : "9679",
"鷊" : "9680",
"鹔" : "9681",
"鸂" : "9682",
"𪆵" : "9683",
"鹴" : "9684",
"麸" : "9690",
"麱" : "9691",
"麵" : "9692",
"黟" : "9694",
"黰" : "9695",
"鼪" : "9696",
"鼴" : "9697",
"龡" : "9699"}


CCC_traditional_writer = {"一" : "0001",
"丁" : "0002",
"七" : "0003",
"丈" : "0004",
"三" : "0005",
"上" : "0006",
"下" : "0007",
"不" : "0008",
"丐" : "0009",
"丑" : "0010",
"且" : "0011",
"丕" : "0012",
"世" : "0013",
"丙" : "0014",
"丞" : "0015",
"丟" : "0016",
"並" : "0017",
"丏" : "0018",
"丨" : "0019",
"个" : "0020",
"丫" : "0021",
"中" : "0022",
"丰" : "0023",
"丱" : "0024",
"串" : "0025",
"錒" : "0026",
"丶" : "0027",
"鎄" : "0028",
"丸" : "0029",
"丹" : "0030",
"主" : "0031",
"砹" : "0032",
"丿" : "0033",
"乂" : "0034",
"乃" : "0035",
"久" : "0036",
"之" : "0037",
"乍" : "0038",
"乎" : "0039",
"乏" : "0040",
"乖" : "0041",
"乘" : "0042",
"桉" : "0043",
"乙" : "0044",
"乜" : "0045",
"九" : "0046",
"乞" : "0047",
"也" : "0048",
"亁" : "0049",
"乳" : "0050",
"乾" : "0051",
"亂" : "0052",
"氹" : "0053",
"亅" : "0054",
"了" : "0055",
"予" : "0056",
"事" : "0057",
"苯" : "0058",
"二" : "0059",
"于" : "0060",
"云" : "0061",
"互" : "0062",
"五" : "0063",
"井" : "0064",
"亙" : "0065",
"些" : "0067",
"亞" : "0068",
"亟" : "0069",
"吡" : "0070",
"亠" : "0071",
"亡" : "0072",
"亢" : "0073",
"交" : "0074",
"亥" : "0075",
"亦" : "0076",
"亨" : "0077",
"享" : "0078",
"京" : "0079",
"亭" : "0080",
"亮" : "0081",
"亳" : "0082",
"亶" : "0083",
"亹" : "0084",
"醭" : "0085",
"人" : "0086",
"什" : "0087",
"仁" : "0088",
"仃" : "0089",
"仄" : "0090",
"仆" : "0091",
"仇" : "0092",
"今" : "0093",
"介" : "0094",
"仍" : "0095",
"佣" : "0096",
"佬" : "0097",
"仔" : "0098",
"仕" : "0099",
"他" : "0100",
"仗" : "0101",
"付" : "0102",
"仙" : "0103",
"仝" : "0104",
"仞" : "0105",
"仡" : "0106",
"仟" : "0107",
"代" : "0108",
"令" : "0109",
"以" : "0110",
"仰" : "0111",
"仲" : "0112",
"仳" : "0113",
"仵" : "0114",
"件" : "0115",
"价" : "0116",
"任" : "0117",
"份" : "0118",
"仿" : "0119",
"企" : "0120",
"伉" : "0121",
"伊" : "0122",
"伋" : "0123",
"伍" : "0124",
"伎" : "0125",
"伏" : "0126",
"伐" : "0127",
"休" : "0128",
"伙" : "0129",
"伯" : "0130",
"估" : "0131",
"你" : "0132",
"伴" : "0133",
"伶" : "0134",
"伸" : "0135",
"伺" : "0136",
"伻" : "0137",
"似" : "0138",
"倮" : "0139",
"佃" : "0140",
"但" : "0141",
"佈" : "0142",
"位" : "0143",
"低" : "0144",
"住" : "0145",
"佐" : "0146",
"佑" : "0147",
"佔" : "0148",
"何" : "0149",
"佗" : "0150",
"余" : "0151",
"佘" : "0152",
"佚" : "0153",
"佛" : "0154",
"作" : "0155",
"佞" : "0156",
"佟" : "0157",
"佺" : "0158",
"傢" : "0159",
"佩" : "0160",
"佪" : "0161",
"佯" : "0162",
"佳" : "0163",
"併" : "0164",
"佶" : "0165",
"佸" : "0166",
"佻" : "0167",
"佾" : "0168",
"使" : "0169",
"侃" : "0170",
"來" : "0171",
"侈" : "0172",
"例" : "0173",
"侍" : "0174",
"侏" : "0175",
"侑" : "0176",
"侔" : "0177",
"侖" : "0178",
"侗" : "0179",
"供" : "0180",
"依" : "0181",
"侷" : "0182",
"伕" : "0183",
"佰" : "0184",
"侮" : "0185",
"侯" : "0186",
"侵" : "0187",
"侶" : "0188",
"便" : "0189",
"係" : "0190",
"促" : "0191",
"俄" : "0192",
"俊" : "0193",
"俎" : "0194",
"俏" : "0195",
"俐" : "0196",
"俑" : "0197",
"俗" : "0198",
"俘" : "0199",
"俚" : "0200",
"俛" : "0201",
"保" : "0202",
"俟" : "0203",
"俠" : "0204",
"俞" : "0205",
"倈" : "0206",
"信" : "0207",
"修" : "0208",
"俶" : "0209",
"倀" : "0210",
"働" : "0211",
"倌" : "0212",
"倬" : "0213",
"俯" : "0214",
"俱" : "0215",
"俳" : "0216",
"俵" : "0217",
"俸" : "0218",
"俺" : "0219",
"俾" : "0220",
"倉" : "0221",
"個" : "0222",
"倍" : "0223",
"倆" : "0224",
"倏" : "0225",
"們" : "0226",
"倒" : "0227",
"倖" : "0228",
"倘" : "0229",
"候" : "0230",
"倚" : "0231",
"倜" : "0232",
"倂" : "0233",
"借" : "0234",
"倡" : "0235",
"倣" : "0236",
"值" : "0237",
"倥" : "0238",
"倦" : "0239",
"倨" : "0240",
"倩" : "0241",
"倪" : "0242",
"倫" : "0243",
"倭" : "0244",
"偈" : "0245",
"偎" : "0246",
"儍" : "0247",
"偁" : "0248",
"偃" : "0249",
"假" : "0250",
"偉" : "0251",
"偏" : "0252",
"偕" : "0253",
"做" : "0254",
"停" : "0255",
"健" : "0256",
"偪" : "0257",
"側" : "0258",
"偵" : "0259",
"偶" : "0260",
"傎" : "0261",
"偷" : "0262",
"傖" : "0263",
"傀" : "0264",
"傅" : "0265",
"傍" : "0266",
"傑" : "0267",
"傒" : "0268",
"傈" : "0269",
"傘" : "0270",
"備" : "0271",
"傚" : "0272",
"傞" : "0273",
"傜" : "0274",
"催" : "0275",
"傭" : "0276",
"傲" : "0277",
"傳" : "0278",
"傴" : "0279",
"債" : "0280",
"傷" : "0281",
"傾" : "0282",
"僂" : "0283",
"僅" : "0284",
"僇" : "0285",
"僉" : "0286",
"僳" : "0287",
"像" : "0288",
"僱" : "0289",
"僦" : "0291",
"僨" : "0292",
"僩" : "0293",
"僑" : "0294",
"僕" : "0295",
"僖" : "0296",
"僚" : "0297",
"偽" : "0298",
"僥" : "0299",
"僧" : "0300",
"僭" : "0301",
"僮" : "0302",
"儁" : "0303",
"僵" : "0304",
"價" : "0305",
"僻" : "0306",
"僾" : "0307",
"儀" : "0308",
"儂" : "0309",
"億" : "0310",
"儆" : "0311",
"儈" : "0312",
"儉" : "0313",
"儎" : "0314",
"儌" : "0315",
"僰" : "0316",
"儋" : "0317",
"儇" : "0318",
"儐" : "0319",
"儒" : "0320",
"儔" : "0321",
"儕" : "0322",
"儗" : "0323",
"儘" : "0324",
"儤" : "0325",
"償" : "0326",
"優" : "0327",
"儲" : "0328",
"儳" : "0329",
"儷" : "0330",
"儻" : "0331",
"儼" : "0332",
"兡" : "0333",
"儿" : "0334",
"兀" : "0335",
"允" : "0336",
"元" : "0337",
"兄" : "0338",
"充" : "0339",
"兆" : "0340",
"先" : "0341",
"光" : "0342",
"兇" : "0343",
"克" : "0344",
"兌" : "0345",
"免" : "0346",
"兔" : "0347",
"兒" : "0348",
"兕" : "0349",
"兗" : "0350",
"兜" : "0351",
"兢" : "0352",
"兣" : "0353",
"入" : "0354",
"內" : "0355",
"全" : "0356",
"兩" : "0357",
"兪" : "0358",
"鈈" : "0359",
"八" : "0360",
"公" : "0361",
"六" : "0362",
"兮" : "0363",
"共" : "0364",
"兵" : "0365",
"其" : "0366",
"具" : "0367",
"典" : "0368",
"兼" : "0369",
"冀" : "0370",
"糍" : "0371",
"冂" : "0372",
"冉" : "0373",
"册" : "0374",
"再" : "0375",
"冏" : "0376",
"冓" : "0377",
"冑" : "0378",
"冒" : "0379",
"冕" : "0380",
"鑹" : "0381",
"冖" : "0382",
"冗" : "0383",
"冞" : "0384",
"冠" : "0385",
"冢" : "0386",
"冤" : "0387",
"冥" : "0388",
"冪" : "0389",
"耖" : "0390",
"冫" : "0391",
"冬" : "0392",
"冰" : "0393",
"冲" : "0394",
"冱" : "0395",
"冶" : "0396",
"冷" : "0397",
"冸" : "0398",
"冽" : "0399",
"况" : "0400",
"凄" : "0401",
"准" : "0402",
"凈" : "0403",
"凉" : "0404",
"冼" : "0405",
"凋" : "0406",
"凌" : "0407",
"凍" : "0408",
"凑" : "0410",
"凓" : "0411",
"凜" : "0412",
"凝" : "0413",
"决" : "0414",
"几" : "0415",
"凡" : "0416",
"凭" : "0417",
"凱" : "0418",
"凳" : "0419",
"凰" : "0420",
"茌" : "0421",
"凵" : "0422",
"凶" : "0423",
"凸" : "0424",
"凹" : "0425",
"甴" : "0426",
"出" : "0427",
"函" : "0428",
"菪" : "0429",
"刀" : "0430",
"刁" : "0431",
"刃" : "0432",
"分" : "0433",
"切" : "0434",
"刈" : "0435",
"刊" : "0436",
"刎" : "0437",
"刑" : "0438",
"划" : "0439",
"刖" : "0440",
"列" : "0441",
"刨" : "0442",
"初" : "0443",
"删" : "0444",
"判" : "0445",
"別" : "0446",
"刦" : "0447",
"利" : "0448",
"剁" : "0449",
"刮" : "0450",
"到" : "0451",
"刲" : "0452",
"刳" : "0453",
"刵" : "0454",
"制" : "0455",
"刷" : "0456",
"券" : "0457",
"刹" : "0458",
"刺" : "0459",
"剋" : "0460",
"剃" : "0461",
"剄" : "0462",
"則" : "0463",
"剉" : "0464",
"削" : "0465",
"刻" : "0466",
"前" : "0467",
"剜" : "0468",
"剌" : "0469",
"剡" : "0470",
"剔" : "0471",
"剖" : "0472",
"剗" : "0473",
"剛" : "0474",
"剝" : "0475",
"剩" : "0476",
"剪" : "0477",
"剮" : "0478",
"副" : "0479",
"割" : "0480",
"剴" : "0481",
"創" : "0482",
"剸" : "0483",
"剽" : "0484",
"剿" : "0485",
"剠" : "0486",
"劃" : "0487",
"劄" : "0488",
"劇" : "0489",
"劈" : "0490",
"劉" : "0491",
"劊" : "0492",
"剚" : "0493",
"劍" : "0494",
"劑" : "0495",
"劓" : "0496",
"劘" : "0497",
"剷" : "0498",
"剅" : "0499",
"力" : "0500",
"功" : "0501",
"加" : "0502",
"劣" : "0503",
"助" : "0504",
"努" : "0505",
"劫" : "0506",
"劬" : "0507",
"劭" : "0508",
"効" : "0509",
"劻" : "0510",
"劾" : "0511",
"劼" : "0512",
"勁" : "0513",
"勃" : "0514",
"勅" : "0515",
"勇" : "0516",
"勉" : "0517",
"勍" : "0518",
"勒" : "0519",
"動" : "0520",
"勖" : "0521",
"勘" : "0522",
"務" : "0523",
"勝" : "0524",
"勞" : "0525",
"勠" : "0526",
"募" : "0527",
"勢" : "0528",
"勣" : "0529",
"勤" : "0530",
"勦" : "0531",
"勩" : "0532",
"勰" : "0533",
"勳" : "0534",
"勱" : "0535",
"勵" : "0536",
"勷" : "0537",
"勸" : "0538",
"鍀" : "0539",
"勹" : "0540",
"勺" : "0541",
"勻" : "0542",
"勿" : "0543",
"匃" : "0544",
"包" : "0545",
"匈" : "0546",
"匊" : "0547",
"匍" : "0548",
"匏" : "0549",
"匐" : "0550",
"勾" : "0551",
"匕" : "0552",
"化" : "0553",
"北" : "0554",
"匙" : "0555",
"碲" : "0556",
"匚" : "0557",
"匜" : "0558",
"匝" : "0559",
"匟" : "0560",
"匠" : "0561",
"匡" : "0562",
"匣" : "0563",
"匪" : "0564",
"匯" : "0565",
"匱" : "0566",
"匭" : "0567",
"匳" : "0568",
"匵" : "0569",
"啶" : "0570",
"匸" : "0571",
"匹" : "0572",
"匾" : "0573",
"匿" : "0574",
"區" : "0575",
"銩" : "0576",
"十" : "0577",
"千" : "0578",
"卄" : "0579",
"卅" : "0580",
"升" : "0581",
"午" : "0582",
"卉" : "0583",
"半" : "0584",
"卑" : "0585",
"卒" : "0586",
"卓" : "0587",
"協" : "0588",
"南" : "0589",
"博" : "0590",
"㐅" : "0591",
"卜" : "0592",
"卞" : "0593",
"占" : "0594",
"卡" : "0595",
"卣" : "0596",
"卦" : "0597",
"氡" : "0598",
"卩" : "0599",
"卬" : "0600",
"卭" : "0601",
"卯" : "0602",
"印" : "0603",
"危" : "0604",
"卲" : "0605",
"却" : "0606",
"卵" : "0607",
"卷" : "0608",
"卸" : "0609",
"卺" : "0610",
"卻" : "0611",
"卮" : "0612",
"卽" : "0613",
"卹" : "0614",
"卿" : "0615",
"腖" : "0616",
"厂" : "0617",
"厄" : "0618",
"厎" : "0619",
"厓" : "0620",
"厔" : "0621",
"厘" : "0622",
"厙" : "0623",
"厚" : "0624",
"厝" : "0625",
"原" : "0626",
"厠" : "0627",
"厥" : "0628",
"厫" : "0629",
"厭" : "0630",
"厮" : "0631",
"厲" : "0632",
"厦" : "0633",
"胴" : "0634",
"厶" : "0635",
"厹" : "0636",
"去" : "0637",
"叁" : "0638",
"參" : "0639",
"叅" : "0640",
"塅" : "0641",
"又" : "0642",
"叉" : "0643",
"及" : "0644",
"友" : "0645",
"反" : "0646",
"叔" : "0647",
"取" : "0648",
"受" : "0649",
"叙" : "0650",
"叛" : "0651",
"叟" : "0652",
"叡" : "0653",
"叢" : "0654",
"叠" : "0655",
"口" : "0656",
"古" : "0657",
"句" : "0658",
"另" : "0659",
"叨" : "0660",
"叩" : "0661",
"只" : "0662",
"叫" : "0663",
"召" : "0664",
"叭" : "0665",
"叮" : "0666",
"叱" : "0667",
"可" : "0668",
"台" : "0669",
"史" : "0670",
"右" : "0671",
"叵" : "0672",
"叶" : "0673",
"司" : "0674",
"吁" : "0675",
"吃" : "0676",
"各" : "0677",
"合" : "0678",
"吉" : "0679",
"吊" : "0680",
"同" : "0681",
"名" : "0682",
"后" : "0683",
"吏" : "0684",
"吐" : "0685",
"向" : "0686",
"吓" : "0687",
"吒" : "0688",
"君" : "0689",
"吝" : "0690",
"吞" : "0691",
"吟" : "0692",
"吠" : "0693",
"否" : "0694",
"吩" : "0695",
"咐" : "0696",
"含" : "0698",
"吭" : "0699",
"吮" : "0700",
"呈" : "0701",
"吳" : "0702",
"吵" : "0703",
"吶" : "0704",
"吸" : "0705",
"吹" : "0706",
"告" : "0707",
"吻" : "0708",
"吼" : "0709",
"吾" : "0710",
"呀" : "0711",
"呂" : "0712",
"呃" : "0713",
"呆" : "0714",
"咂" : "0715",
"呢" : "0716",
"呦" : "0717",
"呧" : "0718",
"周" : "0719",
"咒" : "0720",
"吧" : "0721",
"呱" : "0722",
"呫" : "0723",
"味" : "0724",
"呵" : "0725",
"呶" : "0726",
"呷" : "0727",
"呻" : "0728",
"呼" : "0729",
"命" : "0730",
"咀" : "0731",
"咄" : "0732",
"咆" : "0733",
"咕" : "0734",
"和" : "0735",
"咎" : "0736",
"咏" : "0737",
"咋" : "0738",
"咖" : "0739",
"哎" : "0740",
"咤" : "0741",
"响" : "0742",
"咪" : "0743",
"咧" : "0744",
"咨" : "0745",
"咫" : "0746",
"咬" : "0747",
"咯" : "0748",
"咱" : "0749",
"咳" : "0750",
"咷" : "0751",
"咸" : "0752",
"咺" : "0753",
"咽" : "0754",
"哀" : "0755",
"品" : "0756",
"哂" : "0757",
"哄" : "0758",
"啊" : "0759",
"哇" : "0760",
"哈" : "0761",
"哉" : "0762",
"哪" : "0763",
"咿" : "0764",
"員" : "0765",
"哥" : "0766",
"唔" : "0767",
"哦" : "0768",
"哩" : "0769",
"哭" : "0770",
"哮" : "0771",
"哲" : "0772",
"哺" : "0773",
"哼" : "0774",
"哽" : "0775",
"哿" : "0776",
"唁" : "0777",
"唆" : "0778",
"唈" : "0779",
"唉" : "0780",
"唐" : "0781",
"唇" : "0782",
"哨" : "0783",
"啦" : "0784",
"唏" : "0785",
"售" : "0786",
"唯" : "0787",
"唱" : "0788",
"唳" : "0789",
"唾" : "0790",
"啁" : "0791",
"啣" : "0792",
"啄" : "0793",
"商" : "0794",
"問" : "0795",
"啓" : "0796",
"啖" : "0797",
"啥" : "0798",
"啜" : "0799",
"啞" : "0800",
"唬" : "0801",
"啤" : "0802",
"啡" : "0803",
"啻" : "0804",
"啼" : "0805",
"喁" : "0806",
"喀" : "0807",
"喂" : "0808",
"喃" : "0809",
"善" : "0810",
"喆" : "0811",
"喇" : "0812",
"喈" : "0813",
"喉" : "0814",
"喊" : "0815",
"喏" : "0816",
"喓" : "0817",
"喋" : "0818",
"喑" : "0819",
"喘" : "0820",
"喙" : "0821",
"喚" : "0822",
"喜" : "0823",
"喝" : "0824",
"喞" : "0825",
"喧" : "0826",
"喻" : "0827",
"喪" : "0828",
"喬" : "0829",
"單" : "0830",
"啾" : "0831",
"嗃" : "0832",
"嗅" : "0833",
"嗎" : "0834",
"嗇" : "0835",
"嗑" : "0836",
"嗓" : "0837",
"嗔" : "0838",
"嗚" : "0839",
"嗛" : "0840",
"嗜" : "0841",
"嗟" : "0842",
"嗣" : "0843",
"嗤" : "0844",
"喔" : "0845",
"喟" : "0846",
"喲" : "0847",
"喫" : "0848",
"喭" : "0849",
"嗆" : "0850",
"嗉" : "0851",
"嗒" : "0852",
"嘍" : "0853",
"嘅" : "0854",
"嘆" : "0855",
"嘈" : "0856",
"嘉" : "0857",
"嘏" : "0858",
"嘛" : "0859",
"嘜" : "0860",
"嘒" : "0861",
"嘖" : "0862",
"嘗" : "0863",
"噓" : "0864",
"噻" : "0865",
"嚎" : "0866",
"嘠" : "0867",
"嘔" : "0868",
"嗷" : "0869",
"嗽" : "0870",
"嗾" : "0871",
"嘬" : "0872",
"嘩" : "0873",
"嗶" : "0874",
"嘰" : "0875",
"嘯" : "0876",
"嘲" : "0877",
"嘴" : "0878",
"嘵" : "0879",
"嘶" : "0880",
"嘷" : "0881",
"嘹" : "0882",
"嘻" : "0883",
"嘿" : "0884",
"噉" : "0885",
"噌" : "0886",
"噍" : "0887",
"噎" : "0888",
"噢" : "0889",
"噏" : "0890",
"噤" : "0891",
"器" : "0892",
"噩" : "0893",
"噪" : "0894",
"噫" : "0895",
"噬" : "0896",
"噯" : "0897",
"噲" : "0898",
"噴" : "0899",
"噶" : "0900",
"噥" : "0901",
"噦" : "0902",
"噸" : "0903",
"噱" : "0904",
"嚀" : "0905",
"嚅" : "0906",
"嚇" : "0907",
"嚏" : "0908",
"嚙" : "0909",
"嚚" : "0910",
"唸" : "0911",
"囅" : "0912",
"嚥" : "0913",
"嚬" : "0914",
"嚮" : "0915",
"嚐" : "0916",
"嚴" : "0917",
"嚨" : "0918",
"嚶" : "0919",
"嚼" : "0920",
"囀" : "0921",
"囁" : "0922",
"囂" : "0923",
"嚷" : "0924",
"囉" : "0925",
"囊" : "0926",
"囈" : "0927",
"囑" : "0928",
"囓" : "0929",
"叻" : "0930",
"囗" : "0931",
"回" : "0932",
"囚" : "0933",
"四" : "0934",
"囱" : "0935",
"因" : "0936",
"囤" : "0937",
"困" : "0938",
"囫" : "0939",
"囷" : "0940",
"囹" : "0941",
"固" : "0942",
"囿" : "0943",
"圃" : "0944",
"圄" : "0945",
"圈" : "0946",
"圉" : "0947",
"國" : "0948",
"圅" : "0949",
"圇" : "0950",
"圂" : "0951",
"囮" : "0952",
"圍" : "0953",
"園" : "0954",
"圓" : "0955",
"圖" : "0956",
"團" : "0957",
"圜" : "0958",
"圕" : "0959",
"土" : "0960",
"在" : "0961",
"圩" : "0962",
"圬" : "0963",
"圭" : "0964",
"圮" : "0965",
"地" : "0966",
"圻" : "0967",
"址" : "0968",
"圾" : "0969",
"坟" : "0970",
"均" : "0971",
"坊" : "0972",
"坍" : "0973",
"坎" : "0974",
"坏" : "0975",
"坐" : "0976",
"坑" : "0977",
"坂" : "0978",
"坌" : "0979",
"坡" : "0980",
"坤" : "0981",
"坦" : "0982",
"坭" : "0983",
"坩" : "0984",
"坷" : "0985",
"坼" : "0986",
"垂" : "0987",
"坪" : "0988",
"坫" : "0989",
"坰" : "0990",
"坳" : "0991",
"型" : "0992",
"垓" : "0993",
"垝" : "0994",
"垠" : "0995",
"垢" : "0996",
"垣" : "0997",
"垃" : "0998",
"坯" : "0999",
"垜" : "1000",
"坨" : "1001",
"埃" : "1002",
"埋" : "1003",
"城" : "1004",
"埒" : "1005",
"垮" : "1006",
"埏" : "1007",
"域" : "1008",
"埠" : "1009",
"垧" : "1010",
"埭" : "1011",
"垡" : "1012",
"執" : "1013",
"培" : "1014",
"基" : "1015",
"堂" : "1016",
"堅" : "1017",
"堆" : "1018",
"堊" : "1019",
"埤" : "1020",
"埴" : "1021",
"埵" : "1022",
"埸" : "1023",
"堃" : "1024",
"堙" : "1025",
"堞" : "1026",
"堡" : "1027",
"堠" : "1028",
"堤" : "1029",
"堪" : "1030",
"堯" : "1031",
"報" : "1032",
"埔" : "1033",
"場" : "1034",
"堵" : "1035",
"埝" : "1036",
"堰" : "1037",
"堦" : "1038",
"塍" : "1039",
"塊" : "1040",
"塋" : "1041",
"塌" : "1042",
"塑" : "1043",
"塔" : "1044",
"墓" : "1045",
"塚" : "1046",
"塗" : "1047",
"塘" : "1048",
"塞" : "1049",
"塡" : "1050",
"塢" : "1051",
"塏" : "1052",
"塤" : "1053",
"塒" : "1054",
"塎" : "1055",
"塵" : "1057",
"塹" : "1058",
"塼" : "1059",
"塾" : "1060",
"塿" : "1061",
"墀" : "1062",
"墁" : "1063",
"境" : "1064",
"墅" : "1065",
"墉" : "1066",
"墊" : "1067",
"墄" : "1068",
"埫" : "1069",
"墐" : "1070",
"墜" : "1071",
"堿" : "1072",
"增" : "1073",
"墟" : "1074",
"墨" : "1075",
"墩" : "1076",
"墮" : "1077",
"墺" : "1078",
"墳" : "1079",
"塄" : "1080",
"壪" : "1081",
"墦" : "1082",
"墾" : "1083",
"壁" : "1084",
"壅" : "1085",
"壇" : "1086",
"𡒄" : "1087",
"壎" : "1088",
"壑" : "1089",
"壓" : "1090",
"壕" : "1091",
"壖" : "1092",
"壘" : "1093",
"壙" : "1094",
"壞" : "1095",
"壟" : "1096",
"壚" : "1097",
"壜" : "1098",
"壤" : "1099",
"壩" : "1100",
"圳" : "1101",
"士" : "1102",
"壬" : "1103",
"壯" : "1104",
"壹" : "1105",
"壺" : "1106",
"壻" : "1107",
"壽" : "1108",
"壼" : "1109",
"椴" : "1110",
"夂" : "1111",
"夆" : "1112",
"籪" : "1113",
"夊" : "1114",
"夏" : "1115",
"砘" : "1116",
"跺" : "1118",
"夕" : "1119",
"外" : "1120",
"夙" : "1121",
"多" : "1122",
"夜" : "1123",
"夠" : "1124",
"夢" : "1125",
"夤" : "1126",
"夥" : "1127",
"婀" : "1128",
"大" : "1129",
"夭" : "1130",
"天" : "1131",
"太" : "1132",
"夫" : "1133",
"夬" : "1134",
"央" : "1135",
"失" : "1136",
"夯" : "1137",
"夷" : "1138",
"夸" : "1139",
"夾" : "1140",
"奄" : "1141",
"奇" : "1142",
"奈" : "1143",
"奉" : "1144",
"奎" : "1145",
"奏" : "1146",
"奐" : "1147",
"契" : "1148",
"奔" : "1149",
"奕" : "1150",
"奓" : "1151",
"套" : "1152",
"奚" : "1153",
"鋨" : "1154",
"奘" : "1155",
"奠" : "1156",
"奡" : "1157",
"奢" : "1158",
"奧" : "1159",
"奩" : "1160",
"奪" : "1161",
"奬" : "1162",
"奭" : "1163",
"奮" : "1164",
"奀" : "1165",
"女" : "1166",
"奴" : "1167",
"奶" : "1168",
"奸" : "1169",
"好" : "1170",
"妁" : "1171",
"如" : "1172",
"妃" : "1173",
"妄" : "1174",
"妊" : "1175",
"妒" : "1176",
"姸" : "1177",
"妓" : "1178",
"妖" : "1179",
"妗" : "1180",
"妙" : "1181",
"妝" : "1182",
"妣" : "1183",
"妤" : "1184",
"妥" : "1185",
"妨" : "1186",
"妯" : "1187",
"妹" : "1188",
"妻" : "1189",
"妾" : "1190",
"姆" : "1191",
"姊" : "1192",
"始" : "1193",
"姗" : "1194",
"姐" : "1195",
"姑" : "1196",
"姒" : "1197",
"姓" : "1198",
"妲" : "1199",
"妮" : "1200",
"委" : "1201",
"姚" : "1202",
"姜" : "1203",
"姝" : "1204",
"姞" : "1205",
"姙" : "1206",
"姣" : "1207",
"姤" : "1208",
"姥" : "1209",
"姨" : "1210",
"姦" : "1211",
"姪" : "1212",
"姬" : "1213",
"姅" : "1214",
"姻" : "1215",
"娃" : "1216",
"姿" : "1217",
"威" : "1218",
"娉" : "1219",
"姮" : "1220",
"姱" : "1221",
"娌" : "1222",
"娑" : "1223",
"娘" : "1224",
"娛" : "1225",
"娜" : "1226",
"娟" : "1227",
"娠" : "1228",
"娣" : "1229",
"娥" : "1230",
"娩" : "1231",
"娓" : "1232",
"娼" : "1233",
"姹" : "1234",
"娶" : "1235",
"婁" : "1236",
"婆" : "1237",
"婉" : "1238",
"婊" : "1239",
"婕" : "1240",
"婚" : "1241",
"婢" : "1242",
"婣" : "1243",
"婦" : "1244",
"婪" : "1245",
"婭" : "1246",
"她" : "1247",
"妳" : "1248",
"婼" : "1249",
"婷" : "1250",
"婺" : "1251",
"媒" : "1252",
"媚" : "1253",
"媛" : "1254",
"媟" : "1255",
"媢" : "1256",
"媧" : "1257",
"媬" : "1258",
"媕" : "1259",
"媖" : "1260",
"媳" : "1261",
"媵" : "1262",
"媸" : "1263",
"媪" : "1264",
"媽" : "1265",
"媾" : "1266",
"媿" : "1267",
"嫁" : "1268",
"嫂" : "1269",
"嫄" : "1270",
"嫉" : "1271",
"嫋" : "1272",
"嫌" : "1273",
"嫓" : "1274",
"媺" : "1275",
"嫖" : "1276",
"嫗" : "1277",
"嫠" : "1278",
"嫡" : "1279",
"嫣" : "1280",
"嫦" : "1281",
"嫩" : "1282",
"嫪" : "1283",
"嫘" : "1284",
"嫚" : "1285",
"嫜" : "1286",
"嫫" : "1287",
"嫺" : "1288",
"媯" : "1289",
"嬈" : "1290",
"嬉" : "1291",
"嬋" : "1292",
"嬌" : "1293",
"嬃" : "1294",
"嬖" : "1295",
"嬗" : "1296",
"嬙" : "1297",
"嬛" : "1298",
"嬴" : "1299",
"嬪" : "1300",
"嬤" : "1301",
"嬭" : "1302",
"嬲" : "1303",
"嬾" : "1304",
"嬰" : "1305",
"嬸" : "1306",
"孀" : "1307",
"孅" : "1308",
"孌" : "1309",
"妞" : "1310",
"子" : "1311",
"孑" : "1312",
"孔" : "1313",
"孕" : "1314",
"孓" : "1315",
"字" : "1316",
"存" : "1317",
"孚" : "1318",
"孛" : "1319",
"孜" : "1320",
"孝" : "1321",
"孟" : "1322",
"季" : "1323",
"孤" : "1324",
"孥" : "1325",
"孩" : "1326",
"孫" : "1327",
"孰" : "1328",
"孱" : "1329",
"孳" : "1330",
"學" : "1331",
"孺" : "1332",
"孼" : "1333",
"孿" : "1334",
"孵" : "1335",
"宀" : "1336",
"宁" : "1337",
"它" : "1338",
"宄" : "1339",
"宂" : "1340",
"宅" : "1341",
"宇" : "1342",
"守" : "1343",
"安" : "1344",
"宋" : "1345",
"完" : "1346",
"宏" : "1347",
"宓" : "1348",
"宕" : "1349",
"宗" : "1350",
"官" : "1351",
"宙" : "1352",
"定" : "1353",
"宛" : "1354",
"宜" : "1355",
"客" : "1356",
"宣" : "1357",
"室" : "1358",
"宥" : "1359",
"宦" : "1360",
"宬" : "1361",
"宮" : "1362",
"宰" : "1363",
"害" : "1364",
"宴" : "1365",
"宵" : "1366",
"家" : "1367",
"宸" : "1368",
"容" : "1369",
"梥" : "1370",
"寀" : "1371",
"宿" : "1372",
"寂" : "1374",
"寃" : "1375",
"寄" : "1376",
"寅" : "1377",
"密" : "1378",
"寇" : "1379",
"寧" : "1380",
"富" : "1381",
"寐" : "1382",
"寒" : "1383",
"寓" : "1384",
"寔" : "1385",
"寖" : "1386",
"寘" : "1387",
"寎" : "1388",
"寞" : "1389",
"察" : "1390",
"寡" : "1391",
"寢" : "1392",
"寤" : "1393",
"寥" : "1394",
"實" : "1395",
"寨" : "1396",
"寠" : "1397",
"寙" : "1398",
"審" : "1399",
"寫" : "1400",
"寬" : "1401",
"寮" : "1402",
"寰" : "1403",
"寵" : "1404",
"寳" : "1405",
"宧" : "1406",
"寸" : "1407",
"寺" : "1408",
"封" : "1409",
"射" : "1410",
"尅" : "1411",
"將" : "1412",
"專" : "1413",
"尉" : "1414",
"尊" : "1415",
"尋" : "1416",
"對" : "1417",
"導" : "1418",
"蒽" : "1419",
"小" : "1420",
"少" : "1421",
"尔" : "1422",
"尖" : "1423",
"尚" : "1424",
"尠" : "1425",
"尞" : "1426",
"尕" : "1427",
"尢" : "1428",
"尤" : "1429",
"尨" : "1430",
"就" : "1432",
"尰" : "1433",
"尲" : "1434",
"尬" : "1435",
"鉺" : "1436",
"尸" : "1437",
"尹" : "1438",
"尺" : "1439",
"尻" : "1440",
"尼" : "1441",
"尾" : "1442",
"尿" : "1443",
"局" : "1444",
"屁" : "1445",
"居" : "1446",
"屆" : "1447",
"屈" : "1448",
"屉" : "1449",
"屋" : "1450",
"屍" : "1451",
"屎" : "1452",
"屐" : "1453",
"屑" : "1454",
"展" : "1455",
"屛" : "1456",
"屝" : "1457",
"屠" : "1458",
"屢" : "1459",
"屣" : "1460",
"層" : "1461",
"履" : "1462",
"屧" : "1463",
"屨" : "1464",
"屩" : "1465",
"屬" : "1466",
"屭" : "1467",
"砩" : "1468",
"屮" : "1469",
"屯" : "1470",
"岳" : "1471",
"山" : "1472",
"屹" : "1473",
"𡵆" : "1474",
"峁" : "1475",
"岌" : "1476",
"岐" : "1477",
"岑" : "1478",
"岔" : "1479",
"峿" : "1480",
"岡" : "1481",
"岢" : "1482",
"峫" : "1483",
"岩" : "1484",
"岫" : "1485",
"岱" : "1486",
"岵" : "1487",
"岷" : "1488",
"岸" : "1489",
"岣" : "1490",
"峒" : "1491",
"峙" : "1492",
"峋" : "1493",
"峨" : "1494",
"峭" : "1495",
"峯" : "1496",
"島" : "1497",
"峻" : "1498",
"峽" : "1499",
"峓" : "1500",
"峴" : "1501",
"峪" : "1502",
"崍" : "1503",
"崇" : "1504",
"崎" : "1505",
"崐" : "1506",
"崑" : "1507",
"崔" : "1508",
"崖" : "1509",
"崙" : "1510",
"崗" : "1511",
"崛" : "1512",
"崢" : "1513",
"崩" : "1514",
"崚" : "1515",
"崧" : "1516",
"崦" : "1517",
"嵇" : "1518",
"崆" : "1519",
"嵋" : "1520",
"嵫" : "1521",
"嵊" : "1522",
"嵌" : "1523",
"崶" : "1524",
"嵎" : "1525",
"嵐" : "1526",
"嵒" : "1527",
"崱" : "1528",
"嵩" : "1529",
"嶁" : "1530",
"嵬" : "1531",
"嵯" : "1532",
"嵾" : "1533",
"嶂" : "1534",
"嶄" : "1535",
"嶇" : "1536",
"嶒" : "1537",
"嶔" : "1538",
"嶸" : "1539",
"嶠" : "1540",
"崤" : "1541",
"嶧" : "1542",
"嶙" : "1543",
"嶷" : "1544",
"嶺" : "1545",
"嶼" : "1546",
"嶽" : "1547",
"巉" : "1548",
"嵛" : "1549",
"巍" : "1550",
"巒" : "1551",
"巘" : "1552",
"巓" : "1553",
"巖" : "1554",
"嶗" : "1555",
"巛" : "1556",
"川" : "1557",
"州" : "1558",
"巡" : "1559",
"巢" : "1560",
"鐨" : "1561",
"工" : "1562",
"左" : "1563",
"巧" : "1564",
"巨" : "1565",
"巫" : "1566",
"差" : "1567",
"酚" : "1568",
"己" : "1569",
"巳" : "1570",
"已" : "1571",
"巴" : "1572",
"巵" : "1573",
"巷" : "1574",
"巽" : "1575",
"釓" : "1576",
"巾" : "1577",
"币" : "1578",
"市" : "1579",
"布" : "1580",
"帆" : "1581",
"帋" : "1582",
"帑" : "1583",
"帕" : "1584",
"希" : "1585",
"帖" : "1586",
"帗" : "1587",
"帘" : "1588",
"帙" : "1589",
"帚" : "1590",
"帛" : "1591",
"帔" : "1592",
"帝" : "1593",
"帲" : "1594",
"帟" : "1595",
"帥" : "1596",
"師" : "1597",
"席" : "1598",
"帨" : "1599",
"帳" : "1600",
"帶" : "1601",
"帷" : "1602",
"常" : "1603",
"帽" : "1604",
"幃" : "1605",
"幄" : "1606",
"幅" : "1607",
"幀" : "1608",
"幋" : "1609",
"幌" : "1610",
"幔" : "1611",
"幕" : "1612",
"幗" : "1613",
"幘" : "1614",
"幟" : "1615",
"幡" : "1616",
"幢" : "1617",
"幣" : "1618",
"幪" : "1619",
"幫" : "1620",
"幬" : "1621",
"幭" : "1622",
"幯" : "1623",
"幰" : "1624",
"幛" : "1625",
"干" : "1626",
"平" : "1627",
"年" : "1628",
"幷" : "1629",
"幸" : "1630",
"幹" : "1631",
"矸" : "1632",
"幺" : "1633",
"幻" : "1634",
"幼" : "1635",
"幽" : "1636",
"幾" : "1637",
"酐" : "1638",
"广" : "1639",
"庀" : "1640",
"庹" : "1641",
"庇" : "1642",
"床" : "1643",
"庋" : "1644",
"序" : "1645",
"底" : "1646",
"庖" : "1647",
"店" : "1648",
"庚" : "1649",
"府" : "1650",
"庠" : "1651",
"庥" : "1652",
"度" : "1653",
"座" : "1654",
"庫" : "1655",
"庭" : "1656",
"庳" : "1657",
"庵" : "1658",
"庶" : "1659",
"康" : "1660",
"庸" : "1661",
"庾" : "1662",
"庬" : "1663",
"庴" : "1664",
"廁" : "1665",
"廂" : "1666",
"廌" : "1667",
"廑" : "1668",
"廈" : "1669",
"廉" : "1670",
"廊" : "1671",
"廋" : "1672",
"廐" : "1673",
"廓" : "1674",
"廖" : "1675",
"廚" : "1676",
"廕" : "1677",
"廝" : "1678",
"廟" : "1680",
"廠" : "1681",
"廡" : "1682",
"廢" : "1683",
"廣" : "1684",
"廨" : "1685",
"廩" : "1686",
"廬" : "1687",
"廱" : "1688",
"廳" : "1689",
"龐" : "1690",
"鋯" : "1691",
"廴" : "1692",
"延" : "1693",
"廷" : "1694",
"廹" : "1695",
"建" : "1696",
"廻" : "1697",
"廼" : "1698",
"廾" : "1699",
"廿" : "1700",
"弁" : "1701",
"弄" : "1702",
"弇" : "1703",
"弈" : "1704",
"弊" : "1705",
"茛" : "1706",
"弋" : "1707",
"弍" : "1708",
"式" : "1709",
"弒" : "1710",
"濲" : "1711",
"弓" : "1712",
"弔" : "1713",
"引" : "1714",
"弗" : "1715",
"弛" : "1716",
"弟" : "1717",
"弢" : "1718",
"弣" : "1719",
"弦" : "1720",
"弧" : "1721",
"弩" : "1722",
"弤" : "1723",
"弨" : "1724",
"弭" : "1725",
"弱" : "1726",
"弰" : "1727",
"張" : "1728",
"彄" : "1729",
"強" : "1730",
"弸" : "1731",
"弼" : "1732",
"彀" : "1733",
"彈" : "1734",
"彊" : "1735",
"彌" : "1736",
"彎" : "1737",
"弘" : "1738",
"彐" : "1739",
"彖" : "1740",
"彗" : "1741",
"彘" : "1742",
"彙" : "1743",
"彝" : "1744",
"彠" : "1745",
"臌" : "1746",
"彡" : "1747",
"形" : "1748",
"彤" : "1749",
"彥" : "1750",
"彧" : "1751",
"彩" : "1752",
"彪" : "1753",
"彫" : "1754",
"彬" : "1755",
"彭" : "1756",
"彰" : "1757",
"影" : "1758",
"彲" : "1759",
"鉿" : "1760",
"彳" : "1761",
"彷" : "1762",
"役" : "1763",
"彼" : "1764",
"彿" : "1765",
"往" : "1766",
"征" : "1767",
"徂" : "1768",
"待" : "1769",
"徇" : "1770",
"很" : "1771",
"徉" : "1772",
"徊" : "1773",
"律" : "1774",
"後" : "1775",
"徐" : "1776",
"徑" : "1777",
"徒" : "1778",
"得" : "1779",
"徘" : "1780",
"徙" : "1781",
"徜" : "1782",
"從" : "1783",
"徠" : "1784",
"徧" : "1786",
"徨" : "1787",
"復" : "1788",
"循" : "1789",
"徬" : "1790",
"徭" : "1791",
"微" : "1792",
"徯" : "1793",
"徵" : "1794",
"德" : "1795",
"徹" : "1796",
"徼" : "1797",
"徽" : "1798",
"焓" : "1799",
"心" : "1800",
"必" : "1801",
"忉" : "1802",
"忌" : "1803",
"忍" : "1804",
"忒" : "1805",
"忖" : "1806",
"志" : "1807",
"忘" : "1808",
"忐" : "1809",
"忑" : "1810",
"忙" : "1811",
"忝" : "1812",
"忠" : "1813",
"忡" : "1814",
"恬" : "1815",
"快" : "1816",
"忭" : "1817",
"忮" : "1818",
"念" : "1819",
"忱" : "1820",
"忸" : "1821",
"忤" : "1822",
"忻" : "1823",
"忽" : "1824",
"忿" : "1825",
"怍" : "1826",
"怎" : "1827",
"怏" : "1828",
"怒" : "1829",
"怕" : "1830",
"怖" : "1831",
"怗" : "1832",
"怙" : "1833",
"怛" : "1834",
"思" : "1835",
"怠" : "1836",
"怡" : "1837",
"急" : "1838",
"怦" : "1839",
"性" : "1840",
"怨" : "1841",
"怩" : "1842",
"怪" : "1843",
"怫" : "1844",
"怯" : "1845",
"怱" : "1846",
"怵" : "1847",
"您" : "1849",
"怔" : "1850",
"恁" : "1851",
"恂" : "1852",
"恃" : "1853",
"恆" : "1854",
"惦" : "1855",
"恌" : "1856",
"恍" : "1857",
"恐" : "1858",
"恕" : "1859",
"恙" : "1860",
"恚" : "1861",
"恝" : "1862",
"恢" : "1863",
"恣" : "1864",
"恤" : "1865",
"恥" : "1866",
"恧" : "1867",
"恨" : "1868",
"恩" : "1869",
"恪" : "1870",
"恫" : "1871",
"恭" : "1872",
"息" : "1873",
"恰" : "1874",
"悃" : "1875",
"恉" : "1876",
"悄" : "1877",
"悅" : "1878",
"悌" : "1879",
"悍" : "1880",
"悒" : "1881",
"悔" : "1882",
"悖" : "1883",
"悚" : "1884",
"悉" : "1885",
"悛" : "1886",
"悝" : "1887",
"悞" : "1888",
"悟" : "1889",
"悠" : "1890",
"患" : "1891",
"悤" : "1892",
"悁" : "1893",
"悱" : "1894",
"惪" : "1895",
"悲" : "1896",
"悴" : "1897",
"悵" : "1898",
"悶" : "1899",
"悸" : "1900",
"悻" : "1901",
"悼" : "1902",
"悽" : "1903",
"悾" : "1904",
"惄" : "1905",
"情" : "1906",
"惆" : "1907",
"惇" : "1908",
"惎" : "1909",
"惑" : "1910",
"惓" : "1911",
"惕" : "1912",
"惘" : "1913",
"惙" : "1914",
"惚" : "1915",
"惛" : "1916",
"惜" : "1917",
"惝" : "1918",
"惟" : "1919",
"惠" : "1920",
"惡" : "1921",
"悰" : "1922",
"惋" : "1923",
"惰" : "1924",
"惱" : "1925",
"惲" : "1926",
"想" : "1927",
"惴" : "1928",
"惶" : "1929",
"惸" : "1930",
"惹" : "1931",
"惺" : "1932",
"惻" : "1933",
"愀" : "1934",
"愁" : "1935",
"愆" : "1936",
"愈" : "1937",
"愉" : "1938",
"愊" : "1939",
"愍" : "1940",
"愎" : "1941",
"意" : "1942",
"愒" : "1943",
"愔" : "1944",
"愕" : "1945",
"愚" : "1946",
"愛" : "1947",
"愜" : "1948",
"感" : "1949",
"愠" : "1950",
"愧" : "1951",
"慤" : "1952",
"愫" : "1953",
"愬" : "1954",
"愴" : "1955",
"愷" : "1956",
"愼" : "1957",
"愾" : "1958",
"愿" : "1959",
"慂" : "1960",
"慄" : "1961",
"慆" : "1962",
"慇" : "1963",
"慈" : "1964",
"慊" : "1965",
"態" : "1966",
"慌" : "1967",
"慁" : "1968",
"慓" : "1969",
"慕" : "1970",
"慘" : "1971",
"慙" : "1972",
"慝" : "1973",
"慚" : "1974",
"慟" : "1975",
"慢" : "1976",
"慣" : "1977",
"慩" : "1978",
"慧" : "1979",
"慨" : "1980",
"慫" : "1981",
"慮" : "1982",
"慰" : "1983",
"慳" : "1984",
"慴" : "1985",
"慵" : "1986",
"慶" : "1987",
"慷" : "1988",
"慼" : "1989",
"慾" : "1990",
"憁" : "1991",
"憂" : "1992",
"慥" : "1993",
"憊" : "1994",
"憐" : "1995",
"憑" : "1996",
"憔" : "1997",
"憚" : "1998",
"憎" : "1999",
"憝" : "2000",
"憤" : "2001",
"憧" : "2002",
"憨" : "2003",
"憩" : "2004",
"憬" : "2005",
"憫" : "2006",
"憮" : "2007",
"憯" : "2008",
"憲" : "2009",
"憍" : "2010",
"憶" : "2011",
"憸" : "2012",
"憾" : "2013",
"懃" : "2014",
"懆" : "2015",
"懂" : "2016",
"懇" : "2017",
"懈" : "2018",
"應" : "2019",
"懊" : "2020",
"懋" : "2021",
"懌" : "2022",
"懍" : "2023",
"懓" : "2024",
"憒" : "2025",
"憗" : "2026",
"憦" : "2027",
"憏" : "2028",
"懟" : "2029",
"懣" : "2030",
"懥" : "2031",
"懦" : "2032",
"懲" : "2033",
"懿" : "2034",
"懵" : "2035",
"懶" : "2036",
"懷" : "2037",
"懸" : "2038",
"懺" : "2039",
"懼" : "2040",
"懽" : "2041",
"懾" : "2042",
"戀" : "2043",
"懨" : "2044",
"戇" : "2045",
"慜" : "2046",
"戈" : "2047",
"戊" : "2048",
"戌" : "2049",
"戍" : "2050",
"戎" : "2051",
"成" : "2052",
"我" : "2053",
"戒" : "2054",
"戔" : "2055",
"戕" : "2056",
"或" : "2057",
"戚" : "2058",
"戛" : "2059",
"戟" : "2060",
"戢" : "2061",
"戥" : "2062",
"戡" : "2063",
"戣" : "2064",
"戩" : "2065",
"截" : "2066",
"戳" : "2067",
"戮" : "2068",
"戰" : "2069",
"戲" : "2070",
"戴" : "2071",
"戤" : "2072",
"戶" : "2073",
"戾" : "2074",
"房" : "2075",
"所" : "2076",
"戽" : "2077",
"扁" : "2078",
"扃" : "2079",
"扅" : "2080",
"扆" : "2081",
"扇" : "2082",
"扈" : "2083",
"扉" : "2084",
"扊" : "2085",
"槲" : "2086",
"手" : "2087",
"才" : "2088",
"扎" : "2089",
"扑" : "2090",
"扒" : "2091",
"打" : "2092",
"扔" : "2093",
"托" : "2094",
"扛" : "2095",
"抃" : "2097",
"扞" : "2098",
"扣" : "2099",
"扭" : "2100",
"扮" : "2101",
"扯" : "2102",
"扱" : "2103",
"扳" : "2104",
"扶" : "2105",
"批" : "2106",
"抵" : "2107",
"扼" : "2108",
"找" : "2109",
"承" : "2110",
"技" : "2111",
"抄" : "2113",
"抆" : "2114",
"抉" : "2115",
"把" : "2116",
"抑" : "2117",
"抒" : "2118",
"抓" : "2119",
"抔" : "2120",
"投" : "2121",
"抖" : "2122",
"抗" : "2123",
"折" : "2124",
"抨" : "2125",
"披" : "2126",
"抬" : "2127",
"抱" : "2128",
"抿" : "2129",
"抹" : "2130",
"押" : "2131",
"抽" : "2132",
"拂" : "2133",
"拄" : "2134",
"拆" : "2135",
"拇" : "2136",
"担" : "2137",
"拈" : "2138",
"拉" : "2139",
"拊" : "2140",
"拋" : "2141",
"拌" : "2142",
"拍" : "2143",
"拏" : "2144",
"拐" : "2145",
"拒" : "2147",
"拓" : "2148",
"拔" : "2149",
"挐" : "2150",
"拖" : "2151",
"拗" : "2152",
"拘" : "2153",
"拙" : "2154",
"拚" : "2155",
"招" : "2156",
"拜" : "2157",
"拮" : "2159",
"拭" : "2160",
"括" : "2161",
"拱" : "2162",
"拯" : "2163",
"拳" : "2164",
"拴" : "2165",
"拷" : "2166",
"拽" : "2167",
"拾" : "2168",
"拿" : "2169",
"持" : "2170",
"挂" : "2171",
"指" : "2172",
"挈" : "2173",
"按" : "2174",
"挍" : "2175",
"挑" : "2176",
"挖" : "2177",
"拼" : "2178",
"挨" : "2179",
"挪" : "2180",
"挫" : "2181",
"振" : "2182",
"挶" : "2183",
"挹" : "2184",
"挺" : "2185",
"挼" : "2186",
"挽" : "2187",
"挾" : "2188",
"捄" : "2189",
"捆" : "2190",
"捉" : "2191",
"捋" : "2192",
"捌" : "2193",
"捍" : "2194",
"掂" : "2195",
"捐" : "2196",
"掙" : "2197",
"捕" : "2198",
"挲" : "2199",
"捎" : "2200",
"捧" : "2201",
"捨" : "2202",
"捩" : "2203",
"捫" : "2204",
"捺" : "2205",
"捭" : "2206",
"据" : "2207",
"捲" : "2208",
"捱" : "2209",
"捶" : "2211",
"捷" : "2212",
"揍" : "2213",
"捻" : "2214",
"捽" : "2215",
"掀" : "2216",
"掃" : "2217",
"掇" : "2218",
"授" : "2219",
"掉" : "2220",
"掊" : "2221",
"掌" : "2222",
"掏" : "2223",
"掎" : "2224",
"掐" : "2225",
"排" : "2226",
"掖" : "2227",
"掘" : "2228",
"掛" : "2229",
"掠" : "2230",
"採" : "2231",
"探" : "2232",
"掣" : "2233",
"接" : "2234",
"控" : "2235",
"推" : "2236",
"掩" : "2237",
"措" : "2238",
"掬" : "2239",
"掯" : "2240",
"掄" : "2241",
"掞" : "2242",
"揹" : "2243",
"掫" : "2244",
"揀" : "2245",
"揄" : "2246",
"揆" : "2247",
"揉" : "2248",
"描" : "2249",
"揑" : "2250",
"提" : "2251",
"插" : "2252",
"揖" : "2253",
"揚" : "2254",
"換" : "2255",
"揜" : "2256",
"揠" : "2257",
"搽" : "2258",
"握" : "2259",
"揣" : "2260",
"揩" : "2261",
"揪" : "2262",
"揭" : "2263",
"揮" : "2264",
"搾" : "2265",
"援" : "2266",
"掽" : "2267",
"掾" : "2268",
"搞" : "2269",
"搕" : "2270",
"搧" : "2271",
"搯" : "2272",
"搆" : "2273",
"搉" : "2274",
"損" : "2275",
"搏" : "2276",
"搒" : "2277",
"搓" : "2278",
"搔" : "2279",
"搖" : "2280",
"搗" : "2281",
"搜" : "2282",
"搠" : "2283",
"搰" : "2284",
"搥" : "2285",
"搦" : "2286",
"搨" : "2287",
"搪" : "2288",
"搬" : "2289",
"搭" : "2290",
"搴" : "2291",
"摔" : "2292",
"搶" : "2293",
"搐" : "2294",
"摏" : "2295",
"摻" : "2296",
"撂" : "2297",
"摘" : "2298",
"摟" : "2299",
"撑" : "2300",
"摧" : "2301",
"摩" : "2302",
"摭" : "2303",
"摯" : "2304",
"摳" : "2305",
"摶" : "2306",
"摸" : "2307",
"摹" : "2308",
"摺" : "2309",
"摑" : "2310",
"摒" : "2311",
"摛" : "2312",
"撅" : "2313",
"摴" : "2314",
"摽" : "2315",
"撩" : "2316",
"撇" : "2317",
"撈" : "2318",
"撐" : "2319",
"撒" : "2320",
"撓" : "2321",
"撕" : "2322",
"撙" : "2323",
"撚" : "2324",
"撝" : "2325",
"撞" : "2326",
"撤" : "2327",
"撥" : "2328",
"撫" : "2329",
"播" : "2330",
"撮" : "2331",
"撰" : "2332",
"撲" : "2333",
"撬" : "2334",
"摜" : "2335",
"撻" : "2337",
"撼" : "2338",
"撾" : "2339",
"擁" : "2340",
"擂" : "2341",
"擄" : "2342",
"擅" : "2343",
"擇" : "2344",
"擊" : "2345",
"擋" : "2346",
"操" : "2347",
"擎" : "2348",
"擰" : "2349",
"擒" : "2350",
"擔" : "2351",
"擗" : "2352",
"擘" : "2353",
"據" : "2354",
"擷" : "2355",
"攙" : "2356",
"擠" : "2357",
"擡" : "2358",
"擢" : "2359",
"擣" : "2360",
"擦" : "2361",
"擬" : "2362",
"擯" : "2363",
"擱" : "2364",
"攆" : "2365",
"擭" : "2366",
"擲" : "2367",
"擴" : "2368",
"擺" : "2369",
"擻" : "2370",
"擾" : "2371",
"攀" : "2372",
"攄" : "2373",
"攔" : "2374",
"攖" : "2375",
"攘" : "2376",
"攜" : "2377",
"攝" : "2378",
"攏" : "2379",
"攢" : "2380",
"攣" : "2381",
"攤" : "2382",
"攪" : "2383",
"攫" : "2384",
"攬" : "2385",
"攩" : "2386",
"拃" : "2387",
"支" : "2388",
"敧" : "2389",
"塃" : "2390",
"攴" : "2391",
"收" : "2392",
"攷" : "2393",
"攸" : "2394",
"攺" : "2395",
"攻" : "2396",
"放" : "2397",
"政" : "2398",
"故" : "2399",
"效" : "2400",
"敉" : "2401",
"敍" : "2402",
"敎" : "2403",
"敏" : "2404",
"救" : "2405",
"敕" : "2406",
"敖" : "2407",
"敗" : "2408",
"敔" : "2409",
"敂" : "2410",
"敝" : "2411",
"敞" : "2412",
"敢" : "2413",
"散" : "2414",
"敦" : "2415",
"敻" : "2416",
"敬" : "2417",
"敲" : "2418",
"整" : "2419",
"敵" : "2420",
"敷" : "2421",
"數" : "2422",
"敺" : "2423",
"斁" : "2424",
"斂" : "2425",
"斃" : "2426",
"斆" : "2427",
"敭" : "2428",
"文" : "2429",
"斌" : "2430",
"斐" : "2431",
"斑" : "2432",
"斕" : "2433",
"蟥" : "2434",
"斗" : "2435",
"料" : "2436",
"斛" : "2437",
"斜" : "2438",
"斝" : "2439",
"斟" : "2440",
"斡" : "2441",
"斢" : "2442",
"斤" : "2443",
"斥" : "2444",
"斧" : "2445",
"斨" : "2446",
"斬" : "2447",
"斯" : "2448",
"新" : "2450",
"斷" : "2451",
"斲" : "2452",
"斸" : "2453",
"䐵" : "2454",
"方" : "2455",
"於" : "2456",
"施" : "2457",
"斿" : "2458",
"旎" : "2459",
"旁" : "2460",
"旂" : "2461",
"旃" : "2462",
"旄" : "2463",
"旅" : "2464",
"旆" : "2465",
"旐" : "2466",
"旋" : "2467",
"旌" : "2468",
"族" : "2469",
"旑" : "2470",
"旒" : "2471",
"旜" : "2472",
"旛" : "2473",
"旟" : "2474",
"旗" : "2475",
"燴" : "2476",
"无" : "2477",
"旣" : "2478",
"曆" : "2479",
"日" : "2480",
"旦" : "2481",
"旨" : "2482",
"早" : "2483",
"旬" : "2484",
"旭" : "2485",
"旰" : "2486",
"旱" : "2487",
"晒" : "2488",
"旺" : "2489",
"昌" : "2490",
"昂" : "2491",
"昆" : "2492",
"昃" : "2493",
"明" : "2494",
"昏" : "2495",
"易" : "2496",
"昔" : "2497",
"晗" : "2498",
"昉" : "2499",
"昕" : "2500",
"昝" : "2501",
"星" : "2502",
"映" : "2503",
"春" : "2504",
"昧" : "2505",
"昨" : "2506",
"昭" : "2507",
"是" : "2508",
"昱" : "2509",
"昴" : "2510",
"昵" : "2511",
"昶" : "2512",
"晁" : "2513",
"時" : "2514",
"晃" : "2515",
"晉" : "2516",
"晌" : "2517",
"晏" : "2518",
"晚" : "2519",
"晢" : "2520",
"晝" : "2521",
"晞" : "2522",
"晡" : "2523",
"晤" : "2524",
"晨" : "2525",
"晦" : "2526",
"暎" : "2527",
"普" : "2528",
"景" : "2529",
"晰" : "2530",
"晳" : "2531",
"晴" : "2532",
"晶" : "2533",
"晷" : "2534",
"智" : "2535",
"晬" : "2536",
"暄" : "2537",
"暇" : "2538",
"暍" : "2539",
"暑" : "2540",
"暖" : "2541",
"暗" : "2542",
"暘" : "2543",
"暝" : "2544",
"暢" : "2545",
"暈" : "2546",
"暉" : "2547",
"暫" : "2548",
"𣊓" : "2549",
"暮" : "2550",
"暱" : "2551",
"暴" : "2552",
"暵" : "2553",
"暹" : "2554",
"曁" : "2555",
"曉" : "2556",
"暾" : "2557",
"曀" : "2558",
"曈" : "2559",
"曇" : "2560",
"曏" : "2561",
"曙" : "2562",
"曚" : "2563",
"曛" : "2564",
"曜" : "2565",
"曝" : "2566",
"曡" : "2567",
"曠" : "2568",
"曦" : "2569",
"曨" : "2570",
"曩" : "2571",
"曬" : "2572",
"昇" : "2573",
"曰" : "2574",
"曲" : "2575",
"曳" : "2576",
"更" : "2577",
"曷" : "2578",
"書" : "2579",
"曹" : "2580",
"曼" : "2581",
"曾" : "2582",
"替" : "2583",
"最" : "2584",
"會" : "2585",
"朅" : "2586",
"朂" : "2587",
"月" : "2588",
"有" : "2589",
"朋" : "2590",
"服" : "2591",
"朔" : "2592",
"朐" : "2593",
"朓" : "2594",
"朏" : "2595",
"朕" : "2596",
"朗" : "2597",
"望" : "2598",
"朞" : "2599",
"朝" : "2600",
"期" : "2601",
"朢" : "2602",
"朧" : "2604",
"耠" : "2605",
"木" : "2606",
"未" : "2607",
"末" : "2608",
"本" : "2609",
"札" : "2610",
"朮" : "2611",
"朱" : "2612",
"朴" : "2613",
"朵" : "2614",
"朽" : "2615",
"杆" : "2616",
"杷" : "2618",
"杉" : "2619",
"杌" : "2620",
"李" : "2621",
"杏" : "2622",
"机" : "2623",
"材" : "2624",
"村" : "2625",
"杓" : "2626",
"杖" : "2627",
"柈" : "2628",
"杜" : "2629",
"𣏌" : "2630",
"束" : "2631",
"梠" : "2632",
"栓" : "2633",
"杪" : "2634",
"杭" : "2635",
"柿" : "2636",
"杯" : "2637",
"杰" : "2638",
"東" : "2639",
"杲" : "2640",
"杳" : "2641",
"椗" : "2642",
"杵" : "2643",
"棵" : "2644",
"杼" : "2645",
"松" : "2646",
"板" : "2647",
"枉" : "2648",
"析" : "2649",
"枕" : "2650",
"林" : "2651",
"枙" : "2652",
"枚" : "2653",
"果" : "2654",
"枝" : "2655",
"楻" : "2656",
"枇" : "2657",
"枋" : "2658",
"枌" : "2659",
"枘" : "2660",
"枯" : "2661",
"枲" : "2662",
"枳" : "2663",
"枵" : "2664",
"架" : "2665",
"枷" : "2666",
"枸" : "2667",
"柎" : "2668",
"枻" : "2669",
"柁" : "2670",
"柄" : "2671",
"柏" : "2672",
"某" : "2673",
"柑" : "2674",
"柒" : "2675",
"染" : "2676",
"柔" : "2677",
"柘" : "2678",
"柙" : "2679",
"柚" : "2680",
"柜" : "2681",
"柝" : "2682",
"柞" : "2683",
"柟" : "2684",
"柢" : "2685",
"查" : "2686",
"柬" : "2687",
"柯" : "2688",
"柮" : "2689",
"柰" : "2690",
"柱" : "2691",
"柳" : "2692",
"柴" : "2693",
"柵" : "2694",
"枰" : "2695",
"枹" : "2696",
"樋" : "2697",
"栗" : "2698",
"校" : "2699",
"栩" : "2700",
"株" : "2701",
"核" : "2702",
"栱" : "2703",
"根" : "2704",
"槾" : "2705",
"格" : "2706",
"栽" : "2707",
"桀" : "2708",
"桁" : "2709",
"桂" : "2710",
"桃" : "2711",
"桅" : "2712",
"框" : "2713",
"案" : "2714",
"桌" : "2715",
"桎" : "2716",
"桐" : "2717",
"桑" : "2718",
"桓" : "2719",
"桔" : "2720",
"桕" : "2721",
"栖" : "2722",
"栲" : "2723",
"栳" : "2724",
"桄" : "2725",
"桫" : "2726",
"桴" : "2727",
"桹" : "2728",
"桶" : "2729",
"桷" : "2730",
"桿" : "2731",
"梃" : "2732",
"梁" : "2733",
"梅" : "2734",
"梆" : "2735",
"梏" : "2736",
"梓" : "2737",
"梔" : "2738",
"梗" : "2739",
"桚" : "2740",
"梜" : "2741",
"條" : "2742",
"梟" : "2743",
"梢" : "2744",
"梧" : "2745",
"棃" : "2746",
"梭" : "2747",
"梯" : "2748",
"梱" : "2749",
"械" : "2750",
"梲" : "2751",
"梳" : "2752",
"梵" : "2753",
"桮" : "2754",
"梐" : "2755",
"桯" : "2756",
"棄" : "2757",
"棉" : "2758",
"棋" : "2759",
"棍" : "2760",
"棒" : "2761",
"棕" : "2762",
"棖" : "2763",
"棗" : "2764",
"棘" : "2765",
"棚" : "2766",
"棟" : "2767",
"棠" : "2768",
"棣" : "2769",
"棧" : "2770",
"棫" : "2771",
"棬" : "2772",
"森" : "2773",
"棰" : "2774",
"楦" : "2775",
"棲" : "2776",
"棹" : "2777",
"棺" : "2778",
"椁" : "2779",
"棻" : "2780",
"棼" : "2781",
"椀" : "2782",
"椅" : "2783",
"植" : "2784",
"椎" : "2785",
"椒" : "2786",
"棐" : "2787",
"棓" : "2788",
"棱" : "2789",
"棨" : "2790",
"椐" : "2791",
"椓" : "2792",
"椷" : "2793",
"椰" : "2794",
"椹" : "2795",
"椽" : "2796",
"椿" : "2797",
"楅" : "2798",
"楊" : "2799",
"楓" : "2800",
"楔" : "2801",
"櫛" : "2802",
"楗" : "2803",
"橺" : "2804",
"楘" : "2805",
"楚" : "2806",
"楞" : "2807",
"楝" : "2808",
"楠" : "2809",
"榆" : "2810",
"楢" : "2811",
"楣" : "2812",
"楫" : "2813",
"業" : "2814",
"楯" : "2815",
"楮" : "2816",
"極" : "2817",
"楷" : "2818",
"楹" : "2819",
"椶" : "2820",
"椸" : "2821",
"楛" : "2822",
"楨" : "2823",
"楩" : "2824",
"楸" : "2825",
"榔" : "2826",
"榕" : "2827",
"榖" : "2828",
"榘" : "2829",
"榛" : "2830",
"榜" : "2831",
"榦" : "2832",
"榧" : "2833",
"榨" : "2834",
"榫" : "2835",
"榭" : "2836",
"榮" : "2837",
"榱" : "2838",
"榴" : "2839",
"榻" : "2840",
"榾" : "2841",
"槁" : "2842",
"槅" : "2843",
"槊" : "2844",
"構" : "2845",
"槌" : "2846",
"槍" : "2847",
"槎" : "2848",
"槐" : "2849",
"槓" : "2850",
"榎" : "2851",
"榤" : "2852",
"榥" : "2853",
"榷" : "2854",
"榼" : "2855",
"樑" : "2856",
"槃" : "2857",
"槧" : "2858",
"槨" : "2859",
"橌" : "2860",
"槪" : "2861",
"槳" : "2862",
"橰" : "2863",
"槽" : "2864",
"槿" : "2865",
"樁" : "2866",
"樂" : "2867",
"樊" : "2868",
"樓" : "2869",
"樕" : "2870",
"標" : "2871",
"樛" : "2872",
"樞" : "2873",
"樟" : "2874",
"模" : "2875",
"樣" : "2876",
"槥" : "2877",
"樅" : "2878",
"樏" : "2879",
"樗" : "2880",
"槱" : "2881",
"檩" : "2882",
"樸" : "2883",
"樵" : "2884",
"樹" : "2885",
"樽" : "2886",
"樾" : "2887",
"橄" : "2888",
"橈" : "2889",
"橋" : "2890",
"橐" : "2891",
"橙" : "2892",
"橛" : "2893",
"機" : "2894",
"橡" : "2895",
"橧" : "2896",
"橫" : "2897",
"樨" : "2898",
"檸" : "2899",
"橢" : "2900",
"樺" : "2901",
"橁" : "2902",
"檖" : "2903",
"橘" : "2904",
"檀" : "2905",
"檉" : "2906",
"檄" : "2907",
"檐" : "2908",
"檔" : "2909",
"檜" : "2910",
"檟" : "2911",
"檝" : "2912",
"檠" : "2913",
"檢" : "2914",
"檣" : "2915",
"檬" : "2916",
"檮" : "2917",
"檯" : "2918",
"檳" : "2919",
"檻" : "2920",
"櫂" : "2921",
"櫃" : "2922",
"櫈" : "2923",
"櫓" : "2924",
"櫚" : "2925",
"櫜" : "2926",
"櫝" : "2927",
"櫞" : "2928",
"櫟" : "2929",
"櫱" : "2930",
"櫪" : "2931",
"櫬" : "2932",
"櫺" : "2933",
"櫳" : "2934",
"櫽" : "2935",
"欄" : "2936",
"櫻" : "2937",
"權" : "2938",
"欝" : "2939",
"欒" : "2940",
"欖" : "2941",
"欃" : "2942",
"柩" : "2943",
"欠" : "2944",
"次" : "2945",
"欣" : "2946",
"欬" : "2947",
"欲" : "2948",
"款" : "2949",
"欷" : "2950",
"欹" : "2951",
"欺" : "2952",
"欽" : "2953",
"欿" : "2954",
"歃" : "2955",
"歆" : "2956",
"歇" : "2957",
"歕" : "2958",
"歉" : "2959",
"歌" : "2960",
"歎" : "2961",
"歐" : "2962",
"歔" : "2963",
"欻" : "2964",
"歙" : "2965",
"歛" : "2966",
"歝" : "2967",
"歟" : "2968",
"歠" : "2969",
"歡" : "2970",
"歞" : "2971",
"止" : "2972",
"正" : "2973",
"此" : "2974",
"步" : "2975",
"武" : "2976",
"歪" : "2977",
"歧" : "2978",
"歲" : "2979",
"歷" : "2980",
"歸" : "2981",
"鈥" : "2982",
"歹" : "2983",
"死" : "2984",
"歿" : "2985",
"殀" : "2986",
"殂" : "2987",
"殃" : "2988",
"殄" : "2989",
"殆" : "2990",
"殉" : "2991",
"殊" : "2992",
"殍" : "2993",
"殖" : "2994",
"殘" : "2995",
"殕" : "2996",
"殛" : "2997",
"殞" : "2998",
"殤" : "2999",
"殫" : "3000",
"殢" : "3001",
"殪" : "3002",
"殮" : "3003",
"殯" : "3004",
"殲" : "3005",
"鎵" : "3006",
"殳" : "3007",
"段" : "3008",
"殷" : "3009",
"殺" : "3010",
"殼" : "3011",
"殽" : "3012",
"殿" : "3013",
"毀" : "3014",
"毅" : "3015",
"毆" : "3016",
"椵" : "3017",
"母" : "3018",
"毋" : "3019",
"每" : "3020",
"毒" : "3021",
"毓" : "3022",
"伢" : "3023",
"比" : "3024",
"毖" : "3025",
"毗" : "3026",
"毘" : "3027",
"毛" : "3029",
"毡" : "3030",
"毧" : "3031",
"毫" : "3032",
"毬" : "3033",
"毯" : "3034",
"毳" : "3035",
"氂" : "3036",
"氅" : "3037",
"毸" : "3038",
"毹" : "3039",
"氄" : "3040",
"氈" : "3041",
"氍" : "3042",
"毜" : "3043",
"氏" : "3044",
"氐" : "3045",
"民" : "3046",
"氓" : "3047",
"氯" : "3048",
"气" : "3049",
"氛" : "3050",
"氣" : "3051",
"氤" : "3052",
"氲" : "3053",
"浠" : "3054",
"水" : "3055",
"氷" : "3056",
"永" : "3057",
"氾" : "3058",
"汁" : "3059",
"汀" : "3060",
"求" : "3061",
"汎" : "3062",
"汗" : "3063",
"汚" : "3064",
"汛" : "3065",
"汜" : "3066",
"汝" : "3067",
"江" : "3068",
"池" : "3069",
"汐" : "3071",
"汔" : "3072",
"汕" : "3073",
"汞" : "3074",
"汨" : "3075",
"汪" : "3076",
"汰" : "3077",
"汲" : "3078",
"汴" : "3079",
"汶" : "3080",
"汹" : "3081",
"決" : "3082",
"汾" : "3083",
"沁" : "3084",
"沂" : "3085",
"汽" : "3086",
"沃" : "3087",
"沈" : "3088",
"沉" : "3089",
"沌" : "3090",
"沍" : "3091",
"沐" : "3092",
"沒" : "3093",
"沔" : "3094",
"沖" : "3095",
"沗" : "3096",
"沙" : "3097",
"沚" : "3098",
"沛" : "3099",
"沆" : "3100",
"沓" : "3101",
"汩" : "3102",
"汭" : "3103",
"沅" : "3104",
"沬" : "3105",
"沫" : "3106",
"沮" : "3107",
"沱" : "3108",
"河" : "3109",
"沸" : "3110",
"油" : "3111",
"治" : "3112",
"沼" : "3113",
"沽" : "3114",
"沾" : "3115",
"沿" : "3116",
"洺" : "3117",
"泄" : "3118",
"泵" : "3119",
"泅" : "3120",
"泔" : "3121",
"泆" : "3122",
"泉" : "3123",
"泊" : "3124",
"泌" : "3125",
"泓" : "3126",
"法" : "3127",
"泗" : "3128",
"洩" : "3129",
"泙" : "3130",
"泛" : "3131",
"泠" : "3132",
"泡" : "3133",
"波" : "3134",
"泣" : "3135",
"泥" : "3136",
"注" : "3137",
"泫" : "3138",
"泯" : "3139",
"泮" : "3140",
"泰" : "3141",
"泱" : "3142",
"泲" : "3143",
"泳" : "3144",
"沭" : "3145",
"沴" : "3146",
"泐" : "3147",
"泖" : "3148",
"泝" : "3149",
"洄" : "3150",
"洊" : "3151",
"洋" : "3152",
"洌" : "3153",
"洎" : "3154",
"洒" : "3155",
"洗" : "3156",
"洛" : "3157",
"洟" : "3158",
"洞" : "3159",
"津" : "3160",
"洧" : "3161",
"汧" : "3162",
"洪" : "3163",
"洫" : "3164",
"洮" : "3165",
"洲" : "3166",
"洱" : "3167",
"洳" : "3168",
"洵" : "3169",
"洶" : "3170",
"洸" : "3171",
"活" : "3172",
"洼" : "3173",
"洽" : "3174",
"派" : "3175",
"洿" : "3176",
"流" : "3177",
"洙" : "3178",
"洚" : "3179",
"洹" : "3180",
"浙" : "3181",
"浚" : "3182",
"浣" : "3183",
"浦" : "3184",
"浩" : "3185",
"浪" : "3186",
"浮" : "3187",
"浴" : "3188",
"海" : "3189",
"浸" : "3190",
"浹" : "3191",
"浬" : "3192",
"涇" : "3193",
"消" : "3194",
"涉" : "3195",
"淳" : "3196",
"涓" : "3197",
"涔" : "3198",
"涕" : "3199",
"淶" : "3200",
"涘" : "3201",
"浡" : "3202",
"浜" : "3203",
"浥" : "3204",
"涂" : "3205",
"湼" : "3206",
"湟" : "3207",
"涑" : "3208",
"涯" : "3209",
"液" : "3210",
"涵" : "3211",
"涸" : "3212",
"涼" : "3213",
"涿" : "3214",
"淅" : "3215",
"淆" : "3216",
"淇" : "3217",
"淋" : "3218",
"淑" : "3219",
"淵" : "3220",
"淘" : "3221",
"淙" : "3222",
"淚" : "3223",
"淝" : "3224",
"淡" : "3225",
"淤" : "3226",
"淦" : "3227",
"淨" : "3228",
"淪" : "3229",
"淫" : "3230",
"淬" : "3231",
"淮" : "3232",
"淰" : "3233",
"深" : "3234",
"渮" : "3235",
"混" : "3236",
"淸" : "3237",
"淹" : "3238",
"淺" : "3239",
"添" : "3240",
"涎" : "3241",
"涪" : "3242",
"涴" : "3243",
"淀" : "3244",
"淄" : "3245",
"淒" : "3246",
"淞" : "3247",
"汋" : "3248",
"淩" : "3249",
"滧" : "3250",
"渙" : "3251",
"渚" : "3252",
"減" : "3253",
"渝" : "3254",
"渠" : "3255",
"渡" : "3256",
"渣" : "3257",
"渤" : "3258",
"渥" : "3259",
"渦" : "3260",
"測" : "3261",
"渭" : "3262",
"港" : "3263",
"渰" : "3264",
"渴" : "3265",
"游" : "3266",
"渺" : "3267",
"渾" : "3268",
"湃" : "3269",
"湄" : "3270",
"湅" : "3271",
"湊" : "3272",
"湍" : "3273",
"湎" : "3274",
"湖" : "3275",
"湘" : "3276",
"湛" : "3277",
"湝" : "3278",
"湧" : "3279",
"湫" : "3280",
"湮" : "3281",
"湯" : "3282",
"湲" : "3283",
"湱" : "3284",
"濉" : "3285",
"㶍" : "3286",
"灕" : "3287",
"湓" : "3288",
"湔" : "3289",
"湜" : "3290",
"湏" : "3291",
"㶞" : "3292",
"源" : "3293",
"準" : "3294",
"溛" : "3295",
"溜" : "3296",
"溝" : "3297",
"溟" : "3298",
"溠" : "3299",
"溢" : "3300",
"溤" : "3301",
"溥" : "3302",
"溧" : "3303",
"汍" : "3304",
"溪" : "3305",
"温" : "3306",
"溯" : "3307",
"溱" : "3308",
"溲" : "3309",
"溶" : "3310",
"溷" : "3311",
"溺" : "3312",
"溼" : "3313",
"溽" : "3314",
"滁" : "3315",
"滂" : "3316",
"滃" : "3317",
"滄" : "3318",
"滅" : "3319",
"滋" : "3320",
"滌" : "3321",
"滎" : "3322",
"滑" : "3323",
"滓" : "3324",
"滔" : "3325",
"滕" : "3326",
"泩" : "3327",
"溘" : "3328",
"滇" : "3329",
"滘" : "3330",
"滫" : "3331",
"滮" : "3332",
"滯" : "3333",
"滲" : "3334",
"澝" : "3335",
"滴" : "3336",
"滬" : "3337",
"滸" : "3338",
"洑" : "3339",
"滾" : "3340",
"滿" : "3341",
"漁" : "3342",
"漂" : "3343",
"漆" : "3344",
"漏" : "3345",
"漑" : "3346",
"漓" : "3347",
"演" : "3348",
"漘" : "3349",
"漙" : "3350",
"漠" : "3351",
"漢" : "3352",
"漣" : "3353",
"漪" : "3354",
"漫" : "3355",
"漬" : "3356",
"漭" : "3357",
"淌" : "3358",
"漱" : "3359",
"漲" : "3360",
"漳" : "3361",
"漸" : "3362",
"漾" : "3363",
"漿" : "3364",
"滊" : "3365",
"滷" : "3366",
"滹" : "3367",
"漈" : "3368",
"漉" : "3369",
"溎" : "3370",
"漚" : "3371",
"漦" : "3372",
"漩" : "3373",
"漯" : "3374",
"漵" : "3375",
"漶" : "3376",
"漊" : "3377",
"漕" : "3378",
"潁" : "3379",
"潑" : "3380",
"潔" : "3381",
"潘" : "3382",
"潛" : "3383",
"潟" : "3384",
"潢" : "3385",
"澗" : "3386",
"潤" : "3387",
"潦" : "3388",
"潭" : "3389",
"潮" : "3390",
"潰" : "3391",
"潼" : "3392",
"潴" : "3393",
"澘" : "3394",
"潺" : "3395",
"澀" : "3396",
"澄" : "3397",
"澆" : "3398",
"澇" : "3399",
"澈" : "3400",
"澔" : "3401",
"澌" : "3402",
"澎" : "3403",
"潏" : "3404",
"潝" : "3405",
"潞" : "3406",
"潠" : "3407",
"潀" : "3408",
"濆" : "3409",
"潯" : "3410",
"潾" : "3411",
"澍" : "3412",
"澂" : "3413",
"澒" : "3414",
"溈" : "3415",
"澡" : "3416",
"澟" : "3417",
"澣" : "3418",
"澤" : "3419",
"澮" : "3420",
"澳" : "3421",
"澹" : "3422",
"激" : "3423",
"濁" : "3424",
"濂" : "3425",
"濃" : "3426",
"澠" : "3427",
"澥" : "3428",
"澦" : "3429",
"澧" : "3430",
"澨" : "3431",
"澰" : "3432",
"澴" : "3433",
"澱" : "3434",
"濇" : "3435",
"澶" : "3436",
"澼" : "3437",
"濘" : "3438",
"澬" : "3439",
"濕" : "3440",
"濈" : "3441",
"濊" : "3442",
"濛" : "3443",
"濟" : "3444",
"濠" : "3445",
"濡" : "3446",
"濤" : "3447",
"濫" : "3448",
"濬" : "3449",
"濮" : "3450",
"濯" : "3451",
"濰" : "3452",
"濱" : "3453",
"瀉" : "3454",
"濩" : "3455",
"濞" : "3456",
"濺" : "3457",
"濼" : "3458",
"濾" : "3459",
"瀆" : "3460",
"瀏" : "3461",
"瀑" : "3462",
"瀁" : "3463",
"瀕" : "3464",
"灠" : "3465",
"瀚" : "3466",
"瀛" : "3467",
"瀝" : "3468",
"瀟" : "3469",
"瀠" : "3470",
"瀨" : "3471",
"瀘" : "3472",
"瀡" : "3473",
"瀣" : "3474",
"瀼" : "3475",
"瀋" : "3476",
"瀍" : "3477",
"瀧" : "3478",
"瀦" : "3479",
"濳" : "3480",
"瀲" : "3481",
"瀾" : "3482",
"瀰" : "3483",
"濚" : "3484",
"瀹" : "3485",
"瀺" : "3486",
"灌" : "3487",
"灃" : "3488",
"灉" : "3489",
"灄" : "3490",
"灑" : "3491",
"灘" : "3492",
"灝" : "3493",
"灣" : "3494",
"灩" : "3495",
"灞" : "3496",
"灤" : "3497",
"炸" : "3498",
"火" : "3499",
"灰" : "3500",
"灶" : "3501",
"灸" : "3502",
"灿" : "3503",
"灼" : "3504",
"災" : "3505",
"灾" : "3506",
"炊" : "3507",
"炎" : "3508",
"炒" : "3509",
"炕" : "3510",
"炙" : "3511",
"炘" : "3512",
"炞" : "3513",
"炫" : "3514",
"炬" : "3515",
"炭" : "3516",
"炮" : "3517",
"炯" : "3518",
"炰" : "3519",
"炱" : "3520",
"炳" : "3521",
"炷" : "3522",
"炧" : "3523",
"畑" : "3524",
"烈" : "3525",
"烋" : "3526",
"烏" : "3527",
"烙" : "3529",
"烘" : "3530",
"烜" : "3531",
"烝" : "3532",
"烟" : "3533",
"烹" : "3534",
"烺" : "3535",
"烽" : "3536",
"焌" : "3537",
"焙" : "3538",
"焚" : "3539",
"焜" : "3540",
"無" : "3541",
"焦" : "3542",
"焰" : "3543",
"然" : "3544",
"焞" : "3545",
"焠" : "3546",
"焉" : "3547",
"煅" : "3548",
"焊" : "3549",
"煉" : "3550",
"煊" : "3551",
"煌" : "3552",
"煎" : "3553",
"煑" : "3554",
"煒" : "3555",
"熙" : "3556",
"煖" : "3557",
"煜" : "3558",
"煞" : "3559",
"煤" : "3561",
"煥" : "3562",
"煦" : "3563",
"照" : "3564",
"煩" : "3565",
"煨" : "3566",
"煏" : "3567",
"煬" : "3568",
"煽" : "3569",
"熀" : "3570",
"熄" : "3571",
"煴" : "3572",
"熇" : "3573",
"熊" : "3574",
"熏" : "3575",
"熒" : "3576",
"熛" : "3577",
"熟" : "3578",
"熔" : "3579",
"熨" : "3580",
"熬" : "3581",
"熯" : "3582",
"熱" : "3583",
"熠" : "3584",
"熲" : "3585",
"熸" : "3586",
"熺" : "3587",
"熹" : "3588",
"熾" : "3589",
"燀" : "3590",
"煙" : "3591",
"燐" : "3592",
"燖" : "3593",
"燙" : "3594",
"燃" : "3595",
"燄" : "3596",
"燈" : "3597",
"燎" : "3598",
"燒" : "3599",
"燔" : "3600",
"燕" : "3601",
"營" : "3602",
"燠" : "3603",
"燥" : "3604",
"燦" : "3605",
"燧" : "3606",
"燬" : "3607",
"燭" : "3608",
"燻" : "3609",
"燮" : "3610",
"燹" : "3611",
"燼" : "3612",
"燿" : "3613",
"燾" : "3614",
"爆" : "3615",
"爇" : "3616",
"爍" : "3617",
"爓" : "3618",
"爐" : "3619",
"爛" : "3620",
"爚" : "3621",
"爝" : "3622",
"爟" : "3623",
"焮" : "3624",
"燉" : "3625",
"燜" : "3626",
"爨" : "3627",
"烤" : "3628",
"爪" : "3629",
"爭" : "3630",
"爮" : "3631",
"爬" : "3632",
"爰" : "3633",
"爲" : "3634",
"爵" : "3635",
"瞼" : "3636",
"父" : "3637",
"爹" : "3638",
"爺" : "3639",
"爸" : "3640",
"爻" : "3641",
"爽" : "3642",
"爾" : "3643",
"趼" : "3644",
"爿" : "3645",
"牀" : "3646",
"牂" : "3647",
"牁" : "3648",
"牆" : "3649",
"藠" : "3650",
"片" : "3651",
"版" : "3652",
"牋" : "3653",
"牌" : "3654",
"牒" : "3655",
"牕" : "3656",
"牗" : "3657",
"牘" : "3658",
"牓" : "3659",
"牙" : "3660",
"肼" : "3661",
"牛" : "3662",
"牝" : "3663",
"牟" : "3664",
"牡" : "3665",
"牢" : "3666",
"牣" : "3667",
"牧" : "3668",
"牴" : "3669",
"物" : "3670",
"牠" : "3671",
"牯" : "3672",
"牲" : "3673",
"犋" : "3674",
"牷" : "3675",
"特" : "3676",
"牽" : "3677",
"牿" : "3678",
"犀" : "3679",
"犂" : "3680",
"犉" : "3681",
"犍" : "3682",
"犒" : "3683",
"犖" : "3684",
"犢" : "3685",
"犧" : "3686",
"犨" : "3687",
"牳" : "3688",
"犬" : "3689",
"犯" : "3690",
"犴" : "3691",
"狀" : "3692",
"狂" : "3693",
"狃" : "3694",
"狄" : "3695",
"狁" : "3696",
"狎" : "3697",
"狐" : "3698",
"狗" : "3699",
"狙" : "3700",
"狡" : "3701",
"狥" : "3702",
"狠" : "3703",
"狩" : "3704",
"狴" : "3705",
"狸" : "3706",
"狹" : "3707",
"狼" : "3708",
"狽" : "3709",
"狻" : "3710",
"狺" : "3711",
"狷" : "3712",
"狢" : "3713",
"猁" : "3714",
"猖" : "3715",
"猗" : "3716",
"猙" : "3717",
"猛" : "3718",
"猜" : "3719",
"猝" : "3720",
"猞" : "3721",
"猘" : "3723",
"猢" : "3724",
"猥" : "3725",
"猩" : "3726",
"猪" : "3727",
"猫" : "3728",
"猴" : "3729",
"猶" : "3730",
"猷" : "3731",
"猔" : "3732",
"猱" : "3733",
"猺" : "3734",
"猻" : "3735",
"猾" : "3736",
"猿" : "3737",
"獃" : "3738",
"獄" : "3739",
"獅" : "3740",
"獍" : "3741",
"獐" : "3742",
"獒" : "3743",
"獗" : "3744",
"獘" : "3745",
"獧" : "3746",
"獨" : "3747",
"獪" : "3748",
"獬" : "3749",
"獠" : "3750",
"獮" : "3751",
"獲" : "3752",
"獯" : "3753",
"獳" : "3754",
"獷" : "3755",
"獵" : "3756",
"獸" : "3757",
"獺" : "3758",
"獻" : "3759",
"玁" : "3760",
"獰" : "3761",
"玀" : "3762",
"玄" : "3763",
"率" : "3764",
"玅" : "3765",
"玈" : "3766",
"鋦" : "3767",
"玉" : "3768",
"王" : "3769",
"玎" : "3770",
"玕" : "3771",
"玔" : "3772",
"玖" : "3773",
"玟" : "3774",
"玠" : "3775",
"玢" : "3776",
"玦" : "3777",
"珏" : "3778",
"玩" : "3779",
"玫" : "3780",
"玲" : "3781",
"玳" : "3782",
"玷" : "3783",
"珂" : "3784",
"珇" : "3785",
"珈" : "3786",
"珉" : "3787",
"玻" : "3788",
"珀" : "3789",
"珊" : "3790",
"珍" : "3791",
"珌" : "3792",
"玼" : "3793",
"珞" : "3794",
"珓" : "3795",
"珠" : "3796",
"珙" : "3797",
"珖" : "3798",
"珥" : "3799",
"珣" : "3800",
"珩" : "3801",
"珪" : "3802",
"班" : "3803",
"珧" : "3804",
"珮" : "3805",
"珽" : "3806",
"現" : "3807",
"球" : "3808",
"琅" : "3809",
"理" : "3810",
"琇" : "3811",
"琉" : "3812",
"珶" : "3813",
"珷" : "3814",
"琊" : "3815",
"琕" : "3816",
"琖" : "3817",
"琚" : "3818",
"琛" : "3819",
"琢" : "3820",
"琤" : "3821",
"琥" : "3822",
"琦" : "3823",
"琨" : "3824",
"琪" : "3825",
"琭" : "3826",
"琮" : "3827",
"琯" : "3828",
"琳" : "3829",
"琴" : "3830",
"琶" : "3831",
"琵" : "3832",
"琫" : "3833",
"琬" : "3834",
"玤" : "3835",
"琲" : "3836",
"瑋" : "3837",
"瑕" : "3838",
"瑙" : "3839",
"瑚" : "3840",
"瑛" : "3841",
"瑜" : "3842",
"瑞" : "3843",
"瑟" : "3844",
"瑠" : "3845",
"瑀" : "3846",
"瑁" : "3847",
"瑇" : "3848",
"瑑" : "3849",
"瑗" : "3850",
"瑣" : "3851",
"瑤" : "3852",
"瑩" : "3853",
"瑪" : "3854",
"瑰" : "3855",
"瑲" : "3856",
"瑬" : "3857",
"瑯" : "3858",
"瑱" : "3859",
"瑳" : "3860",
"瑴" : "3861",
"璀" : "3862",
"璃" : "3863",
"璋" : "3864",
"瑽" : "3865",
"瑾" : "3866",
"璁" : "3867",
"璆" : "3868",
"𤨢" : "3869",
"璈" : "3870",
"璡" : "3871",
"璇" : "3872",
"璐" : "3873",
"璜" : "3874",
"璣" : "3875",
"璘" : "3876",
"璞" : "3877",
"璟" : "3878",
"璠" : "3879",
"璧" : "3880",
"璨" : "3881",
"璯" : "3882",
"環" : "3883",
"璪" : "3884",
"璫" : "3885",
"璽" : "3886",
"璲" : "3887",
"璸" : "3888",
"璵" : "3889",
"瓊" : "3890",
"瓏" : "3891",
"瓔" : "3892",
"瓛" : "3893",
"璿" : "3894",
"瓚" : "3895",
"瓈" : "3896",
"瓀" : "3897",
"瓘" : "3898",
"璥" : "3899",
"瓜" : "3900",
"瓞" : "3901",
"瓠" : "3902",
"瓢" : "3903",
"瓣" : "3904",
"瓤" : "3905",
"佧" : "3906",
"瓦" : "3907",
"瓮" : "3908",
"瓴" : "3909",
"瓶" : "3910",
"瓷" : "3911",
"瓻" : "3912",
"甃" : "3913",
"甄" : "3914",
"甇" : "3915",
"瓿" : "3916",
"甌" : "3917",
"甍" : "3918",
"甎" : "3919",
"甑" : "3920",
"甓" : "3921",
"甕" : "3922",
"甗" : "3923",
"甔" : "3924",
"甖" : "3925",
"瓩" : "3926",
"甘" : "3927",
"甚" : "3928",
"甜" : "3929",
"甞" : "3930",
"咔" : "3931",
"生" : "3932",
"甡" : "3933",
"產" : "3934",
"甥" : "3935",
"甦" : "3936",
"㽓" : "3937",
"用" : "3938",
"甪" : "3939",
"甫" : "3940",
"甬" : "3941",
"甯" : "3942",
"甩" : "3943",
"田" : "3944",
"由" : "3945",
"甲" : "3946",
"申" : "3947",
"男" : "3948",
"甸" : "3949",
"甽" : "3950",
"甾" : "3951",
"畀" : "3952",
"畋" : "3953",
"界" : "3954",
"畎" : "3955",
"畏" : "3956",
"町" : "3957",
"畊" : "3958",
"甿" : "3959",
"畇" : "3960",
"畔" : "3961",
"畚" : "3962",
"畛" : "3963",
"畜" : "3964",
"畝" : "3965",
"留" : "3966",
"畟" : "3967",
"畢" : "3968",
"畤" : "3969",
"略" : "3970",
"畦" : "3971",
"番" : "3972",
"畫" : "3973",
"畬" : "3974",
"畯" : "3975",
"異" : "3976",
"畮" : "3977",
"畷" : "3978",
"畹" : "3979",
"畽" : "3980",
"當" : "3981",
"畸" : "3982",
"畿" : "3983",
"疆" : "3984",
"疇" : "3985",
"疊" : "3986",
"鐦" : "3987",
"疋" : "3988",
"疎" : "3989",
"疏" : "3990",
"疐" : "3991",
"疑" : "3992",
"鈧" : "3993",
"疒" : "3994",
"疔" : "3995",
"痃" : "3996",
"痙" : "3997",
"疚" : "3998",
"疝" : "3999",
"痠" : "4000",
"疣" : "4001",
"疤" : "4002",
"疥" : "4003",
"疫" : "4004",
"痚" : "4005",
"疲" : "4006",
"疳" : "4007",
"疴" : "4008",
"疵" : "4009",
"疸" : "4010",
"疹" : "4011",
"疼" : "4012",
"疽" : "4013",
"疾" : "4014",
"疿" : "4015",
"病" : "4016",
"症" : "4017",
"痂" : "4018",
"痊" : "4019",
"痌" : "4020",
"痍" : "4021",
"痒" : "4022",
"痔" : "4023",
"痕" : "4024",
"痧" : "4025",
"痘" : "4026",
"痛" : "4027",
"痞" : "4028",
"痣" : "4029",
"痡" : "4030",
"痢" : "4031",
"痱" : "4032",
"痰" : "4033",
"痲" : "4034",
"痴" : "4035",
"痺" : "4036",
"痼" : "4037",
"痾" : "4038",
"痿" : "4039",
"瘀" : "4040",
"瘁" : "4041",
"瘂" : "4042",
"瘇" : "4043",
"瘉" : "4044",
"瘋" : "4045",
"瘍" : "4046",
"瘏" : "4047",
"瘝" : "4048",
"瘐" : "4049",
"瘓" : "4050",
"瘕" : "4051",
"瘖" : "4052",
"瘞" : "4053",
"瘟" : "4054",
"瘠" : "4055",
"瘡" : "4056",
"瘢" : "4057",
"瘤" : "4058",
"瘥" : "4059",
"瘦" : "4060",
"瘧" : "4061",
"痵" : "4062",
"瘸" : "4063",
"瘰" : "4064",
"瘳" : "4065",
"瘴" : "4066",
"瘵" : "4067",
"瘻" : "4068",
"瘼" : "4069",
"療" : "4070",
"癃" : "4071",
"癆" : "4072",
"癇" : "4073",
"癌" : "4074",
"癖" : "4075",
"瘺" : "4076",
"癑" : "4077",
"癘" : "4078",
"𤺥" : "4079",
"癜" : "4080",
"癤" : "4081",
"癡" : "4082",
"癢" : "4083",
"癥" : "4084",
"㿜" : "4085",
"癭" : "4086",
"癧" : "4087",
"癩" : "4088",
"癬" : "4089",
"癮" : "4090",
"癯" : "4091",
"癰" : "4092",
"癱" : "4093",
"癲" : "4094",
"疙" : "4095",
"癶" : "4096",
"癸" : "4097",
"登" : "4098",
"發" : "4099",
"鈳" : "4100",
"白" : "4101",
"百" : "4102",
"皂" : "4103",
"的" : "4104",
"皆" : "4105",
"皇" : "4106",
"皈" : "4107",
"皐" : "4108",
"皎" : "4109",
"皓" : "4110",
"皖" : "4111",
"皙" : "4112",
"皜" : "4113",
"皚" : "4114",
"皤" : "4115",
"皦" : "4117",
"皭" : "4118",
"皪" : "4119",
"皫" : "4120",
"氪" : "4121",
"皮" : "4122",
"皴" : "4123",
"皷" : "4124",
"皸" : "4125",
"皺" : "4126",
"皽" : "4127",
"醌" : "4128",
"皿" : "4129",
"盂" : "4130",
"盃" : "4131",
"盅" : "4132",
"盆" : "4133",
"盈" : "4134",
"益" : "4135",
"盌" : "4136",
"盍" : "4137",
"盎" : "4138",
"盒" : "4139",
"盔" : "4140",
"盛" : "4141",
"盜" : "4142",
"盝" : "4143",
"盞" : "4144",
"盟" : "4145",
"葢" : "4146",
"盡" : "4147",
"監" : "4148",
"盤" : "4149",
"盥" : "4150",
"盧" : "4151",
"盦" : "4152",
"盭" : "4153",
"盩" : "4154",
"盪" : "4155",
"盬" : "4156",
"蛞" : "4157",
"目" : "4158",
"盲" : "4159",
"直" : "4160",
"相" : "4161",
"盼" : "4162",
"盾" : "4163",
"省" : "4164",
"眄" : "4165",
"眇" : "4166",
"眈" : "4167",
"眉" : "4168",
"盯" : "4169",
"看" : "4170",
"盻" : "4171",
"眨" : "4172",
"盱" : "4173",
"睬" : "4174",
"眛" : "4175",
"真" : "4176",
"眠" : "4177",
"瞄" : "4178",
"眥" : "4179",
"眦" : "4180",
"眩" : "4181",
"眙" : "4182",
"眯" : "4183",
"眵" : "4184",
"瞇" : "4185",
"眶" : "4186",
"眷" : "4187",
"眸" : "4188",
"眺" : "4189",
"眼" : "4190",
"眾" : "4191",
"着" : "4192",
"眹" : "4193",
"睨" : "4194",
"睇" : "4195",
"睆" : "4196",
"瞅" : "4197",
"睍" : "4198",
"睚" : "4199",
"睛" : "4200",
"睜" : "4201",
"睞" : "4202",
"睪" : "4203",
"睡" : "4204",
"睢" : "4205",
"督" : "4206",
"睦" : "4207",
"睫" : "4208",
"瞌" : "4209",
"睟" : "4210",
"睥" : "4211",
"睹" : "4212",
"睿" : "4213",
"瞀" : "4214",
"睘" : "4215",
"睯" : "4216",
"瞋" : "4217",
"瞍" : "4218",
"瞎" : "4219",
"瞑" : "4220",
"瞞" : "4221",
"瞠" : "4222",
"瞪" : "4223",
"瞥" : "4224",
"瞧" : "4225",
"瞬" : "4226",
"瞳" : "4227",
"瞯" : "4228",
"瞭" : "4229",
"瞰" : "4230",
"瞶" : "4231",
"瞻" : "4232",
"瞽" : "4233",
"瞿" : "4234",
"矇" : "4235",
"矍" : "4236",
"矓" : "4237",
"矗" : "4238",
"矙" : "4239",
"瞢" : "4240",
"矚" : "4241",
"眭" : "4242",
"矛" : "4243",
"矜" : "4244",
"矞" : "4245",
"砬" : "4246",
"矢" : "4247",
"矣" : "4248",
"知" : "4249",
"矧" : "4250",
"矩" : "4251",
"短" : "4252",
"矮" : "4253",
"矰" : "4254",
"矯" : "4255",
"矱" : "4256",
"鑞" : "4257",
"石" : "4258",
"矴" : "4259",
"矼" : "4260",
"砆" : "4261",
"矻" : "4262",
"砂" : "4263",
"砉" : "4264",
"砌" : "4265",
"砍" : "4266",
"砑" : "4267",
"砒" : "4268",
"砭" : "4269",
"砟" : "4270",
"砸" : "4271",
"砥" : "4272",
"斫" : "4273",
"砦" : "4274",
"破" : "4275",
"砲" : "4276",
"砧" : "4278",
"砮" : "4279",
"砰" : "4280",
"硃" : "4281",
"研" : "4282",
"硎" : "4283",
"硜" : "4284",
"硝" : "4285",
"硤" : "4286",
"硨" : "4287",
"硫" : "4288",
"硬" : "4289",
"碘" : "4290",
"硯" : "4291",
"确" : "4292",
"碍" : "4293",
"碌" : "4294",
"碎" : "4295",
"硼" : "4296",
"碗" : "4297",
"碁" : "4298",
"碇" : "4299",
"碔" : "4300",
"碑" : "4301",
"碓" : "4302",
"硾" : "4303",
"碡" : "4304",
"碪" : "4305",
"碉" : "4306",
"碭" : "4307",
"碟" : "4308",
"碣" : "4309",
"碧" : "4310",
"碩" : "4311",
"碬" : "4312",
"碯" : "4313",
"碰" : "4314",
"確" : "4315",
"碼" : "4316",
"碾" : "4317",
"磁" : "4318",
"磅" : "4319",
"磊" : "4320",
"磇" : "4321",
"磋" : "4322",
"磐" : "4323",
"磓" : "4324",
"磔" : "4325",
"磕" : "4326",
"磉" : "4327",
"磑" : "4328",
"碴" : "4329",
"磠" : "4330",
"磚" : "4331",
"磧" : "4332",
"磨" : "4333",
"磬" : "4334",
"磯" : "4335",
"磲" : "4336",
"磺" : "4337",
"磽" : "4338",
"礁" : "4339",
"磷" : "4340",
"磻" : "4341",
"礎" : "4342",
"磈" : "4343",
"礙" : "4344",
"礬" : "4345",
"礧" : "4346",
"磴" : "4347",
"礮" : "4348",
"礦" : "4349",
"礪" : "4350",
"礫" : "4351",
"礱" : "4352",
"礴" : "4353",
"碱" : "4354",
"示" : "4355",
"礽" : "4356",
"社" : "4357",
"祀" : "4358",
"祁" : "4359",
"祅" : "4360",
"祇" : "4361",
"祈" : "4362",
"祉" : "4363",
"礿" : "4364",
"祕" : "4365",
"祊" : "4366",
"祏" : "4367",
"祐" : "4368",
"祓" : "4369",
"祔" : "4370",
"祖" : "4371",
"祗" : "4372",
"祚" : "4373",
"祛" : "4374",
"祜" : "4375",
"祝" : "4376",
"神" : "4377",
"祟" : "4378",
"祠" : "4379",
"祫" : "4380",
"祲" : "4381",
"祥" : "4382",
"祧" : "4383",
"票" : "4384",
"祭" : "4385",
"禆" : "4386",
"祼" : "4387",
"祺" : "4388",
"祿" : "4389",
"禀" : "4390",
"禁" : "4391",
"禋" : "4392",
"禍" : "4393",
"禎" : "4394",
"福" : "4395",
"禘" : "4396",
"禊" : "4397",
"禔" : "4398",
"禖" : "4399",
"禕" : "4400",
"禡" : "4401",
"禝" : "4402",
"禦" : "4403",
"禠" : "4404",
"禫" : "4405",
"禧" : "4406",
"禪" : "4407",
"禨" : "4408",
"禮" : "4409",
"禰" : "4410",
"禱" : "4411",
"禳" : "4412",
"錸" : "4414",
"禸" : "4415",
"禹" : "4416",
"禺" : "4417",
"离" : "4418",
"禽" : "4419",
"鑭" : "4420",
"禾" : "4421",
"禿" : "4422",
"秀" : "4423",
"私" : "4424",
"秈" : "4425",
"秉" : "4426",
"秆" : "4427",
"秋" : "4428",
"种" : "4429",
"科" : "4430",
"秕" : "4431",
"秒" : "4432",
"秔" : "4433",
"秘" : "4434",
"秪" : "4435",
"租" : "4436",
"秠" : "4437",
"秣" : "4438",
"秤" : "4439",
"秦" : "4440",
"秧" : "4441",
"秩" : "4442",
"秫" : "4443",
"秭" : "4444",
"秬" : "4445",
"秷" : "4446",
"秸" : "4447",
"移" : "4448",
"稀" : "4449",
"稂" : "4450",
"稅" : "4451",
"稈" : "4452",
"程" : "4453",
"稌" : "4454",
"稍" : "4455",
"稊" : "4456",
"稔" : "4457",
"稗" : "4458",
"稞" : "4459",
"稚" : "4460",
"稛" : "4461",
"稜" : "4462",
"稟" : "4463",
"稠" : "4464",
"稭" : "4465",
"稹" : "4466",
"種" : "4467",
"稱" : "4468",
"稷" : "4469",
"稻" : "4470",
"稼" : "4471",
"稽" : "4472",
"稿" : "4473",
"穀" : "4474",
"穄" : "4475",
"穆" : "4476",
"穉" : "4477",
"穋" : "4478",
"穌" : "4479",
"積" : "4480",
"穎" : "4481",
"穗" : "4482",
"穜" : "4483",
"穡" : "4484",
"穟" : "4485",
"穢" : "4486",
"穠" : "4487",
"穨" : "4488",
"穩" : "4489",
"穫" : "4490",
"穭" : "4491",
"穰" : "4492",
"罱" : "4493",
"穴" : "4494",
"穵" : "4495",
"究" : "4496",
"穸" : "4497",
"穹" : "4498",
"突" : "4499",
"空" : "4500",
"穽" : "4501",
"穿" : "4502",
"窀" : "4503",
"窄" : "4504",
"窅" : "4505",
"窆" : "4506",
"窈" : "4507",
"窋" : "4508",
"窌" : "4509",
"窒" : "4510",
"窕" : "4511",
"窖" : "4512",
"窞" : "4513",
"窗" : "4514",
"窘" : "4515",
"窟" : "4516",
"窠" : "4517",
"窨" : "4518",
"窩" : "4519",
"窪" : "4520",
"窬" : "4521",
"窮" : "4522",
"窰" : "4523",
"窳" : "4524",
"窵" : "4525",
"窶" : "4526",
"窸" : "4527",
"窣" : "4528",
"窺" : "4529",
"窾" : "4530",
"竂" : "4531",
"竁" : "4532",
"竄" : "4533",
"竅" : "4534",
"竇" : "4535",
"竈" : "4536",
"竊" : "4537",
"蒗" : "4538",
"立" : "4539",
"竑" : "4540",
"站" : "4541",
"竚" : "4542",
"竝" : "4543",
"竟" : "4544",
"章" : "4545",
"竣" : "4546",
"童" : "4547",
"竦" : "4548",
"竪" : "4549",
"竭" : "4550",
"端" : "4551",
"競" : "4552",
"銠" : "4553",
"竹" : "4554",
"竺" : "4555",
"竽" : "4556",
"竿" : "4557",
"笄" : "4558",
"笈" : "4559",
"笊" : "4560",
"笏" : "4561",
"笑" : "4562",
"笙" : "4563",
"笛" : "4564",
"笞" : "4565",
"笤" : "4566",
"笠" : "4567",
"笥" : "4568",
"符" : "4569",
"笨" : "4570",
"笋" : "4571",
"笪" : "4572",
"笫" : "4573",
"第" : "4574",
"笮" : "4575",
"笆" : "4576",
"笎" : "4577",
"笱" : "4578",
"笳" : "4579",
"筅" : "4580",
"筆" : "4581",
"笻" : "4582",
"等" : "4583",
"筊" : "4584",
"筋" : "4585",
"筌" : "4586",
"筍" : "4587",
"筎" : "4588",
"筏" : "4589",
"筐" : "4590",
"筑" : "4591",
"筒" : "4592",
"筓" : "4593",
"答" : "4594",
"策" : "4595",
"筠" : "4596",
"筤" : "4597",
"筥" : "4598",
"筷" : "4599",
"筧" : "4600",
"筩" : "4601",
"筮" : "4602",
"筲" : "4603",
"筴" : "4604",
"筵" : "4605",
"筯" : "4606",
"筱" : "4607",
"箋" : "4608",
"箎" : "4609",
"箂" : "4610",
"箍" : "4611",
"箇" : "4612",
"箔" : "4613",
"箕" : "4614",
"算" : "4615",
"箛" : "4616",
"箝" : "4617",
"箠" : "4618",
"管" : "4619",
"箏" : "4620",
"箐" : "4621",
"箒" : "4622",
"箑" : "4623",
"箘" : "4624",
"箜" : "4625",
"箊" : "4626",
"箬" : "4627",
"箭" : "4628",
"箯" : "4629",
"箱" : "4630",
"箴" : "4631",
"箸" : "4632",
"箾" : "4633",
"節" : "4634",
"篁" : "4635",
"範" : "4636",
"篆" : "4637",
"篇" : "4638",
"築" : "4639",
"篋" : "4640",
"篘" : "4641",
"篔" : "4642",
"篙" : "4643",
"篚" : "4644",
"篝" : "4645",
"篠" : "4646",
"篡" : "4647",
"篤" : "4648",
"簑" : "4649",
"篧" : "4650",
"篨" : "4651",
"篩" : "4652",
"篦" : "4653",
"篪" : "4654",
"篲" : "4655",
"篳" : "4656",
"篺" : "4657",
"篴" : "4658",
"篷" : "4659",
"簀" : "4660",
"簆" : "4661",
"簇" : "4662",
"簋" : "4663",
"簍" : "4664",
"簌" : "4665",
"簏" : "4666",
"篌" : "4667",
"篾" : "4668",
"簃" : "4669",
"簚" : "4670",
"簜" : "4671",
"簟" : "4672",
"簞" : "4673",
"簠" : "4674",
"簡" : "4675",
"簣" : "4676",
"簥" : "4677",
"簦" : "4678",
"簧" : "4679",
"簨" : "4680",
"簪" : "4681",
"簫" : "4682",
"簷" : "4683",
"簸" : "4684",
"簵" : "4685",
"簻" : "4686",
"簽" : "4687",
"簾" : "4688",
"簿" : "4689",
"𥳁" : "4690",
"籃" : "4691",
"籊" : "4692",
"籌" : "4693",
"籍" : "4694",
"籄" : "4695",
"籐" : "4696",
"籔" : "4697",
"籓" : "4698",
"籀" : "4699",
"籙" : "4700",
"籚" : "4701",
"籛" : "4702",
"籜" : "4703",
"籟" : "4704",
"籠" : "4705",
"籤" : "4706",
"籥" : "4707",
"籨" : "4708",
"籧" : "4709",
"籩" : "4710",
"籫" : "4711",
"籮" : "4712",
"籬" : "4713",
"籯" : "4714",
"籲" : "4715",
"篰" : "4716",
"米" : "4717",
"粃" : "4718",
"籹" : "4719",
"粉" : "4720",
"粒" : "4721",
"粕" : "4722",
"粗" : "4723",
"粘" : "4724",
"粟" : "4725",
"粢" : "4726",
"粵" : "4727",
"粥" : "4728",
"籼" : "4729",
"粧" : "4730",
"粱" : "4731",
"粲" : "4732",
"粹" : "4733",
"粳" : "4734",
"粺" : "4735",
"粼" : "4736",
"精" : "4737",
"糈" : "4738",
"糊" : "4739",
"糉" : "4740",
"糕" : "4741",
"糇" : "4742",
"糖" : "4743",
"糗" : "4744",
"糜" : "4745",
"糝" : "4746",
"糞" : "4747",
"糟" : "4748",
"糠" : "4749",
"籽" : "4750",
"糙" : "4751",
"糧" : "4752",
"糯" : "4754",
"糲" : "4755",
"糴" : "4756",
"粑" : "4757",
"糵" : "4758",
"糶" : "4759",
"糎" : "4760",
"糸" : "4761",
"系" : "4762",
"糾" : "4763",
"紀" : "4764",
"紂" : "4765",
"約" : "4766",
"紅" : "4767",
"紆" : "4768",
"紇" : "4769",
"紈" : "4770",
"紉" : "4771",
"紊" : "4772",
"紋" : "4773",
"紵" : "4774",
"線" : "4775",
"紏" : "4776",
"紝" : "4777",
"紞" : "4778",
"紽" : "4779",
"納" : "4780",
"紐" : "4781",
"紓" : "4782",
"純" : "4783",
"紗" : "4784",
"紘" : "4785",
"紙" : "4786",
"級" : "4787",
"紛" : "4788",
"紜" : "4789",
"素" : "4790",
"紡" : "4791",
"索" : "4792",
"紫" : "4793",
"緶" : "4794",
"紬" : "4795",
"紮" : "4796",
"累" : "4797",
"細" : "4798",
"縮" : "4799",
"紳" : "4800",
"紹" : "4801",
"紺" : "4802",
"紼" : "4803",
"紾" : "4804",
"紿" : "4805",
"絀" : "4806",
"終" : "4807",
"絃" : "4808",
"組" : "4809",
"絆" : "4810",
"紱" : "4811",
"絅" : "4812",
"絏" : "4813",
"結" : "4814",
"絕" : "4815",
"絛" : "4816",
"絜" : "4817",
"絝" : "4818",
"絞" : "4819",
"絡" : "4820",
"絢" : "4821",
"給" : "4822",
"絨" : "4823",
"絪" : "4824",
"絮" : "4825",
"絰" : "4826",
"統" : "4827",
"絲" : "4828",
"絳" : "4829",
"絖" : "4830",
"絹" : "4831",
"絺" : "4832",
"絿" : "4833",
"綁" : "4834",
"綈" : "4835",
"綉" : "4836",
"綆" : "4837",
"綌" : "4838",
"綍" : "4839",
"綏" : "4840",
"綑" : "4841",
"經" : "4842",
"綃" : "4843",
"綜" : "4844",
"綠" : "4845",
"綢" : "4846",
"綦" : "4847",
"綫" : "4848",
"綬" : "4849",
"維" : "4850",
"綮" : "4851",
"綰" : "4852",
"網" : "4853",
"綱" : "4854",
"綳" : "4855",
"綴" : "4856",
"綵" : "4857",
"綸" : "4858",
"綹" : "4859",
"綺" : "4860",
"綻" : "4861",
"綽" : "4862",
"緅" : "4863",
"緌" : "4864",
"緎" : "4865",
"綾" : "4866",
"緇" : "4867",
"緊" : "4868",
"緋" : "4869",
"綣" : "4870",
"綯" : "4871",
"緒" : "4872",
"緘" : "4873",
"緝" : "4874",
"綿" : "4875",
"緞" : "4876",
"締" : "4877",
"緣" : "4878",
"緤" : "4879",
"緦" : "4880",
"緵" : "4881",
"編" : "4882",
"緩" : "4883",
"緬" : "4884",
"緯" : "4885",
"練" : "4886",
"緻" : "4887",
"縕" : "4888",
"緗" : "4889",
"繃" : "4890",
"緡" : "4891",
"緥" : "4892",
"緲" : "4893",
"繖" : "4894",
"緹" : "4895",
"縈" : "4896",
"縉" : "4897",
"縊" : "4898",
"縋" : "4899",
"縐" : "4900",
"縗" : "4901",
"縛" : "4902",
"縝" : "4903",
"縟" : "4904",
"縣" : "4905",
"縑" : "4906",
"繁" : "4907",
"縞" : "4908",
"縠" : "4909",
"縢" : "4910",
"縫" : "4911",
"縱" : "4912",
"縲" : "4913",
"縳" : "4914",
"縵" : "4915",
"縶" : "4916",
"縷" : "4917",
"縹" : "4918",
"縻" : "4919",
"總" : "4920",
"績" : "4921",
"繄" : "4922",
"繅" : "4923",
"繆" : "4924",
"繇" : "4925",
"縭" : "4926",
"縰" : "4927",
"縴" : "4928",
"繈" : "4929",
"織" : "4930",
"繕" : "4931",
"繙" : "4932",
"繚" : "4933",
"繐" : "4934",
"繞" : "4935",
"繢" : "4936",
"繡" : "4937",
"繒" : "4938",
"繩" : "4939",
"繪" : "4940",
"繫" : "4941",
"繭" : "4942",
"繮" : "4943",
"繯" : "4944",
"繳" : "4945",
"繹" : "4946",
"辮" : "4947",
"繻" : "4948",
"繼" : "4949",
"纁" : "4950",
"纂" : "4951",
"繽" : "4952",
"繾" : "4953",
"纆" : "4954",
"纇" : "4955",
"纈" : "4956",
"纘" : "4957",
"續" : "4958",
"纍" : "4959",
"纖" : "4960",
"纏" : "4961",
"纊" : "4962",
"纑" : "4963",
"纓" : "4964",
"纔" : "4965",
"纛" : "4966",
"纚" : "4967",
"纜" : "4968",
"縧" : "4969",
"缶" : "4970",
"缸" : "4971",
"缺" : "4972",
"缾" : "4973",
"罀" : "4974",
"罃" : "4975",
"罁" : "4976",
"罄" : "4977",
"罅" : "4978",
"罇" : "4979",
"罋" : "4980",
"罌" : "4981",
"罍" : "4982",
"罏" : "4983",
"罐" : "4984",
"罆" : "4985",
"网" : "4986",
"罔" : "4987",
"罕" : "4988",
"罘" : "4989",
"罛" : "4990",
"罝" : "4991",
"罟" : "4992",
"罡" : "4993",
"罣" : "4994",
"罩" : "4996",
"罪" : "4997",
"罭" : "4998",
"置" : "4999",
"罰" : "5000",
"罨" : "5001",
"署" : "5002",
"罳" : "5003",
"罫" : "5004",
"罶" : "5005",
"罵" : "5006",
"罷" : "5007",
"罹" : "5008",
"羃" : "5009",
"罽" : "5010",
"罿" : "5011",
"羅" : "5012",
"羆" : "5013",
"羇" : "5014",
"羈" : "5015",
"鰳" : "5016",
"羊" : "5017",
"羌" : "5018",
"美" : "5019",
"羔" : "5021",
"羜" : "5023",
"羚" : "5024",
"羝" : "5025",
"羞" : "5026",
"羢" : "5027",
"羣" : "5028",
"羨" : "5029",
"義" : "5030",
"羯" : "5031",
"羲" : "5032",
"羵" : "5033",
"羶" : "5034",
"羸" : "5035",
"羹" : "5036",
"羼" : "5037",
"羽" : "5038",
"翀" : "5039",
"翁" : "5040",
"翅" : "5041",
"翊" : "5042",
"翌" : "5043",
"翎" : "5044",
"習" : "5045",
"翔" : "5046",
"翕" : "5047",
"翛" : "5048",
"翟" : "5049",
"翠" : "5050",
"翡" : "5051",
"翣" : "5052",
"翥" : "5053",
"翦" : "5054",
"翩" : "5055",
"羿" : "5056",
"翬" : "5057",
"翮" : "5058",
"翯" : "5059",
"翰" : "5060",
"翳" : "5061",
"翹" : "5062",
"翱" : "5063",
"翻" : "5064",
"翼" : "5065",
"翽" : "5066",
"翾" : "5067",
"翿" : "5068",
"耀" : "5069",
"喱" : "5070",
"老" : "5071",
"考" : "5072",
"耄" : "5073",
"者" : "5074",
"耆" : "5075",
"耈" : "5076",
"耋" : "5077",
"佝" : "5078",
"而" : "5079",
"耍" : "5080",
"耎" : "5081",
"耐" : "5082",
"耑" : "5083",
"啢" : "5084",
"耒" : "5085",
"耔" : "5086",
"耕" : "5087",
"耗" : "5088",
"耘" : "5089",
"耙" : "5090",
"耜" : "5091",
"耝" : "5092",
"耞" : "5093",
"耡" : "5094",
"耩" : "5095",
"耦" : "5096",
"耨" : "5097",
"耬" : "5098",
"耰" : "5099",
"釕" : "5100",
"耳" : "5101",
"耶" : "5102",
"耻" : "5103",
"耽" : "5104",
"耿" : "5105",
"佡" : "5106",
"聆" : "5107",
"聊" : "5108",
"聒" : "5109",
"聖" : "5110",
"聘" : "5111",
"聚" : "5112",
"聞" : "5113",
"聯" : "5114",
"聰" : "5115",
"聲" : "5116",
"聳" : "5117",
"聵" : "5118",
"聶" : "5119",
"職" : "5120",
"聽" : "5121",
"聾" : "5122",
"啉" : "5123",
"聿" : "5124",
"肄" : "5125",
"肅" : "5126",
"肆" : "5127",
"肇" : "5128",
"呤" : "5129",
"餾" : "5130",
"肉" : "5131",
"肋" : "5132",
"肌" : "5133",
"肓" : "5134",
"肖" : "5135",
"肘" : "5136",
"肚" : "5137",
"肛" : "5138",
"肝" : "5139",
"股" : "5140",
"肢" : "5141",
"肥" : "5142",
"胺" : "5143",
"肩" : "5144",
"肫" : "5145",
"肯" : "5146",
"肱" : "5147",
"育" : "5148",
"肴" : "5149",
"肸" : "5150",
"肺" : "5151",
"胃" : "5152",
"胄" : "5153",
"背" : "5154",
"胗" : "5155",
"胔" : "5156",
"胍" : "5157",
"胎" : "5158",
"胏" : "5159",
"胖" : "5160",
"胙" : "5161",
"胚" : "5162",
"胳" : "5163",
"胝" : "5164",
"胞" : "5165",
"胰" : "5166",
"胠" : "5167",
"胭" : "5168",
"胯" : "5169",
"胡" : "5170",
"胥" : "5171",
"胸" : "5172",
"胼" : "5173",
"能" : "5174",
"胾" : "5175",
"脂" : "5176",
"腺" : "5177",
"脅" : "5178",
"脇" : "5179",
"胱" : "5180",
"脈" : "5181",
"脊" : "5182",
"脚" : "5183",
"脘" : "5184",
"脛" : "5185",
"脆" : "5186",
"脤" : "5187",
"脣" : "5188",
"脧" : "5189",
"脩" : "5190",
"膨" : "5191",
"脫" : "5192",
"脬" : "5193",
"脯" : "5194",
"脹" : "5195",
"脾" : "5196",
"腆" : "5197",
"腊" : "5198",
"腋" : "5199",
"腎" : "5200",
"腐" : "5201",
"腑" : "5202",
"腓" : "5203",
"腔" : "5204",
"腕" : "5205",
"腥" : "5206",
"腦" : "5207",
"腴" : "5208",
"腫" : "5209",
"腮" : "5210",
"膵" : "5211",
"腰" : "5212",
"腱" : "5213",
"腸" : "5214",
"腹" : "5215",
"腠" : "5216",
"腿" : "5217",
"膀" : "5218",
"膂" : "5219",
"膋" : "5220",
"膏" : "5221",
"肷" : "5222",
"腳" : "5223",
"膈" : "5224",
"膊" : "5225",
"膕" : "5226",
"膚" : "5227",
"膛" : "5228",
"膜" : "5229",
"膝" : "5230",
"膠" : "5231",
"膩" : "5232",
"膰" : "5233",
"膳" : "5234",
"膺" : "5235",
"膴" : "5236",
"膽" : "5237",
"膻" : "5238",
"膾" : "5239",
"膿" : "5240",
"臀" : "5241",
"臂" : "5242",
"臄" : "5243",
"臆" : "5244",
"臉" : "5245",
"臊" : "5246",
"臍" : "5247",
"臘" : "5248",
"臙" : "5249",
"臃" : "5250",
"臚" : "5251",
"臝" : "5252",
"臟" : "5253",
"臠" : "5254",
"胤" : "5255",
"臣" : "5256",
"臥" : "5257",
"臧" : "5258",
"臨" : "5259",
"櫨" : "5260",
"自" : "5261",
"臬" : "5262",
"臭" : "5263",
"臯" : "5264",
"臲" : "5265",
"鑥" : "5266",
"至" : "5267",
"致" : "5268",
"臶" : "5269",
"臺" : "5270",
"臻" : "5271",
"氌" : "5272",
"臼" : "5273",
"臾" : "5274",
"舁" : "5275",
"舀" : "5276",
"舂" : "5277",
"舄" : "5278",
"舅" : "5279",
"與" : "5280",
"興" : "5281",
"舉" : "5282",
"舊" : "5283",
"舋" : "5284",
"摞" : "5285",
"舌" : "5286",
"舍" : "5287",
"舐" : "5288",
"舒" : "5289",
"舘" : "5290",
"舖" : "5291",
"舛" : "5292",
"舜" : "5293",
"舞" : "5294",
"舝" : "5295",
"鎇" : "5296",
"舟" : "5297",
"舠" : "5298",
"舡" : "5299",
"航" : "5300",
"般" : "5301",
"舫" : "5302",
"舩" : "5303",
"舷" : "5304",
"舵" : "5305",
"舶" : "5306",
"船" : "5307",
"舸" : "5308",
"舲" : "5309",
"舳" : "5310",
"舴" : "5311",
"艇" : "5312",
"艋" : "5313",
"艄" : "5314",
"艖" : "5315",
"艗" : "5316",
"艎" : "5317",
"艘" : "5318",
"艙" : "5319",
"艤" : "5320",
"艟" : "5321",
"艨" : "5322",
"艭" : "5323",
"艦" : "5324",
"艫" : "5325",
"酶" : "5326",
"艮" : "5327",
"良" : "5328",
"艱" : "5329",
"鍆" : "5330",
"色" : "5331",
"艴" : "5332",
"艷" : "5333",
"蓢" : "5334",
"艸" : "5335",
"艽" : "5336",
"艾" : "5337",
"芃" : "5338",
"芄" : "5339",
"芊" : "5340",
"芋" : "5341",
"芍" : "5342",
"芎" : "5343",
"𦬊" : "5344",
"芒" : "5345",
"芙" : "5346",
"芝" : "5347",
"芟" : "5348",
"芡" : "5349",
"芣" : "5350",
"芤" : "5351",
"芧" : "5352",
"芨" : "5353",
"芥" : "5354",
"芩" : "5355",
"芪" : "5356",
"芫" : "5357",
"芬" : "5358",
"芭" : "5359",
"芮" : "5360",
"芯" : "5361",
"芰" : "5362",
"花" : "5363",
"芳" : "5364",
"芷" : "5365",
"芸" : "5366",
"芹" : "5367",
"芻" : "5368",
"芼" : "5369",
"芽" : "5370",
"莜" : "5371",
"芾" : "5372",
"苑" : "5373",
"茆" : "5374",
"苒" : "5375",
"苓" : "5376",
"苔" : "5377",
"苕" : "5378",
"苗" : "5379",
"苙" : "5380",
"苛" : "5381",
"苜" : "5382",
"苞" : "5383",
"苟" : "5384",
"苣" : "5385",
"苡" : "5386",
"若" : "5387",
"苦" : "5388",
"苧" : "5389",
"苫" : "5390",
"英" : "5391",
"苴" : "5392",
"苹" : "5393",
"苻" : "5394",
"苽" : "5395",
"苾" : "5396",
"茀" : "5397",
"茁" : "5398",
"茂" : "5399",
"范" : "5400",
"茄" : "5401",
"茈" : "5402",
"茅" : "5403",
"茇" : "5404",
"苢" : "5405",
"茉" : "5406",
"茗" : "5407",
"荔" : "5408",
"茜" : "5409",
"茢" : "5410",
"茦" : "5411",
"茨" : "5412",
"茫" : "5413",
"茭" : "5414",
"茯" : "5415",
"茱" : "5416",
"茲" : "5417",
"茴" : "5418",
"茵" : "5419",
"茶" : "5420",
"茷" : "5421",
"茸" : "5422",
"茹" : "5423",
"荀" : "5424",
"荃" : "5425",
"萄" : "5426",
"荊" : "5427",
"荸" : "5428",
"荇" : "5429",
"草" : "5430",
"荍" : "5431",
"荏" : "5432",
"荐" : "5433",
"荑" : "5434",
"荒" : "5435",
"茝" : "5436",
"荄" : "5437",
"莛" : "5438",
"荳" : "5439",
"荷" : "5440",
"荻" : "5441",
"荼" : "5442",
"荽" : "5443",
"莅" : "5444",
"莊" : "5445",
"莎" : "5446",
"莒" : "5447",
"莓" : "5448",
"莖" : "5449",
"莘" : "5450",
"莞" : "5451",
"莠" : "5452",
"莢" : "5453",
"莧" : "5454",
"莆" : "5455",
"莨" : "5456",
"莩" : "5457",
"莪" : "5458",
"莫" : "5459",
"菟" : "5460",
"莉" : "5461",
"莽" : "5462",
"菀" : "5463",
"菁" : "5464",
"菅" : "5465",
"菇" : "5466",
"菉" : "5467",
"菊" : "5468",
"菑" : "5469",
"菓" : "5470",
"菖" : "5471",
"菔" : "5472",
"菘" : "5473",
"菠" : "5474",
"菜" : "5475",
"菩" : "5476",
"堇" : "5477",
"華" : "5478",
"菰" : "5479",
"菱" : "5480",
"菲" : "5481",
"菴" : "5482",
"莙" : "5483",
"菹" : "5484",
"菼" : "5485",
"菽" : "5486",
"萁" : "5487",
"萃" : "5488",
"萆" : "5489",
"萊" : "5490",
"萋" : "5491",
"萌" : "5492",
"萍" : "5493",
"萎" : "5494",
"萑" : "5495",
"菡" : "5496",
"菌" : "5497",
"萩" : "5498",
"𦯶" : "5499",
"萇" : "5500",
"萼" : "5501",
"萬" : "5502",
"萱" : "5503",
"萵" : "5504",
"萸" : "5505",
"萹" : "5506",
"落" : "5507",
"葆" : "5508",
"葉" : "5509",
"菸" : "5510",
"著" : "5511",
"葘" : "5512",
"葚" : "5513",
"葛" : "5514",
"葡" : "5515",
"董" : "5516",
"葦" : "5517",
"葩" : "5518",
"葫" : "5519",
"葬" : "5520",
"葭" : "5521",
"葯" : "5522",
"葱" : "5523",
"葳" : "5524",
"葵" : "5525",
"葷" : "5526",
"葸" : "5527",
"葺" : "5528",
"葽" : "5529",
"蒂" : "5530",
"葑" : "5531",
"葹" : "5532",
"蒐" : "5533",
"葊" : "5534",
"蒔" : "5535",
"蒙" : "5536",
"蒜" : "5537",
"蒡" : "5538",
"蒞" : "5539",
"蒟" : "5540",
"蒨" : "5541",
"蒭" : "5542",
"蒲" : "5543",
"蒸" : "5544",
"蒹" : "5545",
"蒺" : "5546",
"蒼" : "5547",
"蒿" : "5548",
"蓀" : "5549",
"蓁" : "5550",
"蓂" : "5551",
"蓄" : "5552",
"蓆" : "5553",
"蓉" : "5554",
"蓊" : "5555",
"蓋" : "5556",
"蓖" : "5557",
"蓍" : "5558",
"蓏" : "5559",
"蓑" : "5560",
"蔀" : "5561",
"蓐" : "5562",
"蓓" : "5563",
"萏" : "5564",
"蔌" : "5565",
"蒯" : "5566",
"蒱" : "5567",
"蓧" : "5568",
"蓫" : "5569",
"蓬" : "5570",
"蓮" : "5571",
"蓰" : "5572",
"蒓" : "5573",
"蓴" : "5574",
"蔻" : "5575",
"蔫" : "5576",
"薌" : "5577",
"蓼" : "5578",
"蔆" : "5579",
"蔇" : "5580",
"蓿" : "5581",
"蔂" : "5582",
"蔑" : "5583",
"蕻" : "5584",
"蔓" : "5585",
"蔕" : "5586",
"蔗" : "5587",
"蔚" : "5588",
"蔞" : "5589",
"蔟" : "5590",
"蔡" : "5591",
"蔣" : "5592",
"蔭" : "5593",
"蔴" : "5594",
"蔥" : "5595",
"蔦" : "5596",
"蔔" : "5597",
"蓽" : "5598",
"蔽" : "5599",
"蔬" : "5600",
"蕺" : "5601",
"蔾" : "5602",
"蕃" : "5603",
"蕉" : "5604",
"蕊" : "5605",
"蕎" : "5606",
"蕕" : "5607",
"蕖" : "5608",
"蕘" : "5609",
"蕙" : "5610",
"蕝" : "5611",
"蕞" : "5612",
"蕡" : "5613",
"蕢" : "5614",
"蕨" : "5615",
"蕩" : "5616",
"蕪" : "5617",
"蕭" : "5618",
"薀" : "5619",
"薯" : "5620",
"蕆" : "5621",
"蕈" : "5622",
"蕳" : "5623",
"蕤" : "5624",
"薁" : "5625",
"蕷" : "5626",
"蕸" : "5627",
"蕾" : "5628",
"薐" : "5629",
"薢" : "5630",
"薄" : "5631",
"薅" : "5632",
"薇" : "5633",
"薈" : "5634",
"薉" : "5635",
"薊" : "5636",
"薑" : "5637",
"薔" : "5638",
"薖" : "5639",
"薙" : "5640",
"薛" : "5641",
"孽" : "5642",
"薜" : "5643",
"薦" : "5644",
"薨" : "5645",
"薩" : "5646",
"薪" : "5647",
"薤" : "5648",
"蘖" : "5649",
"薏" : "5650",
"薰" : "5651",
"薳" : "5652",
"薹" : "5653",
"薺" : "5654",
"薽" : "5655",
"薿" : "5656",
"藄" : "5657",
"藇" : "5658",
"藉" : "5659",
"藎" : "5660",
"藏" : "5661",
"藐" : "5662",
"藍" : "5663",
"藁" : "5664",
"藕" : "5665",
"蒍" : "5666",
"藚" : "5667",
"藜" : "5668",
"藝" : "5669",
"藟" : "5670",
"藤" : "5671",
"藩" : "5672",
"藥" : "5673",
"藪" : "5674",
"藷" : "5675",
"藹" : "5676",
"藺" : "5677",
"藻" : "5679",
"藾" : "5680",
"藿" : "5681",
"蘄" : "5682",
"蘅" : "5683",
"蘆" : "5684",
"蘇" : "5685",
"蘊" : "5686",
"蘂" : "5687",
"夔" : "5688",
"蘋" : "5689",
"蘀" : "5690",
"蘚" : "5691",
"蘞" : "5692",
"蘢" : "5693",
"蘩" : "5694",
"蘭" : "5695",
"蘨" : "5696",
"虀" : "5697",
"蘧" : "5698",
"蘸" : "5699",
"蘿" : "5700",
"蘼" : "5701",
"虉" : "5702",
"虆" : "5703",
"蘑" : "5704",
"虍" : "5705",
"虎" : "5706",
"虐" : "5707",
"虓" : "5708",
"虔" : "5709",
"處" : "5710",
"虛" : "5711",
"虜" : "5712",
"虞" : "5713",
"號" : "5714",
"虡" : "5715",
"虢" : "5716",
"虥" : "5717",
"虣" : "5718",
"虧" : "5719",
"𧈅" : "5720",
"醚" : "5721",
"虫" : "5722",
"虱" : "5723",
"虻" : "5724",
"虹" : "5725",
"虺" : "5726",
"蚓" : "5727",
"蚡" : "5728",
"蚕" : "5729",
"蚊" : "5730",
"蚋" : "5731",
"蚌" : "5732",
"蚣" : "5733",
"蚤" : "5734",
"蚧" : "5735",
"蚩" : "5736",
"蚪" : "5737",
"蚨" : "5738",
"蚯" : "5739",
"蚰" : "5740",
"蚱" : "5741",
"蚜" : "5742",
"蚶" : "5743",
"蚒" : "5744",
"蛄" : "5745",
"蛀" : "5746",
"蛆" : "5747",
"蛇" : "5748",
"蛉" : "5749",
"蛑" : "5750",
"蛋" : "5751",
"蛙" : "5752",
"蛛" : "5753",
"蛟" : "5754",
"蛣" : "5755",
"蛤" : "5756",
"蛩" : "5757",
"蛺" : "5758",
"蛭" : "5759",
"蛾" : "5760",
"蜹" : "5761",
"蜂" : "5762",
"蜃" : "5763",
"蜇" : "5764",
"蜈" : "5765",
"蜋" : "5766",
"蜓" : "5767",
"蛸" : "5768",
"蛹" : "5769",
"蛻" : "5770",
"蜀" : "5771",
"蜉" : "5772",
"蜍" : "5773",
"蜊" : "5774",
"蜎" : "5775",
"蜘" : "5776",
"蜚" : "5777",
"蜜" : "5778",
"蜡" : "5779",
"蜣" : "5780",
"蜩" : "5781",
"蜥" : "5782",
"蜒" : "5783",
"蛔" : "5784",
"蜴" : "5785",
"蜞" : "5786",
"蝀" : "5787",
"螂" : "5788",
"蜢" : "5789",
"蜮" : "5790",
"蝎" : "5791",
"蛐" : "5792",
"蝕" : "5793",
"蝗" : "5794",
"蝘" : "5795",
"蝙" : "5796",
"蜅" : "5797",
"蝟" : "5798",
"蝠" : "5799",
"蜿" : "5800",
"蝥" : "5801",
"蝦" : "5802",
"蝮" : "5803",
"蝱" : "5804",
"蝶" : "5805",
"蜷" : "5806",
"蟮" : "5807",
"蜻" : "5808",
"蝌" : "5809",
"蝨" : "5810",
"蜾" : "5811",
"蝣" : "5812",
"蝻" : "5813",
"蝴" : "5814",
"蝸" : "5815",
"融" : "5816",
"蠓" : "5817",
"螞" : "5818",
"螘" : "5819",
"螟" : "5820",
"螢" : "5821",
"螣" : "5822",
"蠔" : "5823",
"螃" : "5824",
"螄" : "5825",
"螫" : "5826",
"螱" : "5827",
"螺" : "5828",
"螻" : "5829",
"螽" : "5830",
"蟄" : "5832",
"蟊" : "5833",
"螬" : "5834",
"螭" : "5835",
"螮" : "5836",
"螯" : "5837",
"螳" : "5838",
"蟀" : "5839",
"蟆" : "5840",
"蟈" : "5841",
"蟋" : "5842",
"蟣" : "5843",
"蟪" : "5844",
"蟒" : "5845",
"蟚" : "5846",
"蟠" : "5847",
"蟬" : "5848",
"蟲" : "5849",
"蟭" : "5850",
"蟹" : "5851",
"蟻" : "5852",
"蟾" : "5853",
"蟳" : "5854",
"蟶" : "5855",
"蠃" : "5856",
"蟿" : "5857",
"蠁" : "5858",
"蠅" : "5859",
"蠆" : "5860",
"蠍" : "5861",
"蠕" : "5862",
"蠖" : "5863",
"蠛" : "5864",
"蠜" : "5865",
"蠟" : "5866",
"蠡" : "5867",
"蠢" : "5868",
"蠣" : "5869",
"蠨" : "5870",
"蠹" : "5871",
"蠱" : "5872",
"蠲" : "5873",
"蠶" : "5874",
"蠻" : "5875",
"虬" : "5876",
"血" : "5877",
"嘧" : "5878",
"𥁃" : "5879",
"衄" : "5880",
"衅" : "5881",
"衂" : "5882",
"衆" : "5883",
"衇" : "5884",
"衊" : "5885",
"嚜" : "5886",
"行" : "5887",
"衍" : "5888",
"衎" : "5889",
"術" : "5890",
"衒" : "5891",
"衕" : "5892",
"衖" : "5893",
"街" : "5894",
"衙" : "5895",
"衚" : "5896",
"衝" : "5897",
"衛" : "5898",
"衡" : "5899",
"衢" : "5900",
"衜" : "5901",
"衣" : "5902",
"表" : "5903",
"衫" : "5904",
"衰" : "5905",
"衲" : "5906",
"衷" : "5907",
"衵" : "5909",
"衽" : "5910",
"衾" : "5911",
"衿" : "5912",
"袁" : "5913",
"袈" : "5914",
"袋" : "5915",
"袍" : "5916",
"袒" : "5917",
"袖" : "5918",
"袗" : "5919",
"袜" : "5920",
"袚" : "5921",
"袞" : "5922",
"袠" : "5923",
"袤" : "5924",
"袪" : "5925",
"被" : "5926",
"袂" : "5927",
"袴" : "5928",
"袵" : "5929",
"袷" : "5930",
"袱" : "5931",
"裁" : "5932",
"裂" : "5933",
"裊" : "5934",
"裎" : "5935",
"裀" : "5936",
"裏" : "5937",
"裒" : "5938",
"裔" : "5939",
"裕" : "5940",
"裘" : "5941",
"裙" : "5942",
"補" : "5943",
"裝" : "5944",
"裟" : "5945",
"褎" : "5946",
"裨" : "5947",
"裯" : "5948",
"裰" : "5949",
"裱" : "5950",
"裳" : "5951",
"裴" : "5952",
"裸" : "5953",
"裼" : "5954",
"裹" : "5955",
"製" : "5956",
"裾" : "5957",
"複" : "5958",
"褊" : "5959",
"褌" : "5960",
"褉" : "5961",
"褂" : "5962",
"褪" : "5963",
"褐" : "5964",
"褓" : "5965",
"褘" : "5966",
"褙" : "5967",
"褡" : "5968",
"褚" : "5969",
"褥" : "5970",
"褧" : "5971",
"褫" : "5972",
"褰" : "5973",
"褲" : "5974",
"褦" : "5975",
"褵" : "5976",
"褶" : "5977",
"褻" : "5978",
"襃" : "5979",
"襄" : "5980",
"衮" : "5981",
"襁" : "5982",
"袢" : "5983",
"襖" : "5984",
"襚" : "5985",
"襌" : "5986",
"裡" : "5987",
"褒" : "5988",
"裦" : "5989",
"襝" : "5990",
"襠" : "5991",
"襟" : "5992",
"襦" : "5993",
"襪" : "5994",
"襏" : "5995",
"襤" : "5996",
"褸" : "5997",
"襫" : "5998",
"襭" : "5999",
"襯" : "6000",
"襴" : "6001",
"襲" : "6002",
"襼" : "6003",
"襶" : "6004",
"裌" : "6005",
"襾" : "6006",
"西" : "6007",
"覃" : "6009",
"覆" : "6010",
"覇" : "6011",
"覈" : "6012",
"覊" : "6013",
"鎿" : "6014",
"見" : "6015",
"規" : "6016",
"覓" : "6017",
"視" : "6018",
"覘" : "6019",
"覜" : "6020",
"覡" : "6021",
"覦" : "6022",
"覩" : "6023",
"親" : "6024",
"覬" : "6025",
"覯" : "6026",
"覲" : "6027",
"覷" : "6028",
"覵" : "6029",
"覺" : "6030",
"覽" : "6031",
"覿" : "6032",
"覥" : "6033",
"觀" : "6034",
"覼" : "6035",
"氖" : "6036",
"角" : "6037",
"觔" : "6038",
"觖" : "6039",
"觚" : "6040",
"觝" : "6041",
"觕" : "6042",
"解" : "6043",
"觥" : "6044",
"觩" : "6045",
"觫" : "6046",
"觭" : "6047",
"觱" : "6048",
"觳" : "6049",
"觴" : "6050",
"觸" : "6051",
"觶" : "6052",
"觼" : "6053",
"觿" : "6054",
"萘" : "6055",
"言" : "6056",
"訂" : "6057",
"訃" : "6058",
"訇" : "6059",
"計" : "6060",
"訊" : "6061",
"討" : "6062",
"訐" : "6063",
"訓" : "6064",
"訕" : "6065",
"訖" : "6066",
"託" : "6067",
"記" : "6068",
"訌" : "6069",
"訏" : "6070",
"訑" : "6071",
"訒" : "6072",
"訛" : "6073",
"訝" : "6074",
"訟" : "6075",
"訣" : "6076",
"訥" : "6077",
"訪" : "6078",
"許" : "6079",
"設" : "6080",
"訩" : "6081",
"訢" : "6082",
"訴" : "6083",
"訶" : "6084",
"診" : "6085",
"証" : "6086",
"註" : "6087",
"訾" : "6088",
"詁" : "6089",
"詆" : "6090",
"詈" : "6091",
"詋" : "6092",
"詎" : "6093",
"詐" : "6094",
"詒" : "6095",
"詔" : "6096",
"評" : "6097",
"詖" : "6098",
"詘" : "6099",
"詛" : "6100",
"詞" : "6101",
"詠" : "6102",
"詡" : "6103",
"詢" : "6104",
"詣" : "6105",
"詤" : "6106",
"試" : "6107",
"詩" : "6108",
"詫" : "6109",
"詬" : "6110",
"詭" : "6111",
"詮" : "6112",
"詰" : "6113",
"話" : "6114",
"該" : "6115",
"詳" : "6116",
"詼" : "6117",
"詿" : "6118",
"誆" : "6119",
"誄" : "6120",
"誅" : "6121",
"誇" : "6122",
"詵" : "6123",
"詹" : "6124",
"誌" : "6125",
"認" : "6126",
"誐" : "6127",
"誑" : "6128",
"誓" : "6129",
"誕" : "6130",
"誘" : "6131",
"誚" : "6132",
"語" : "6133",
"誠" : "6134",
"誡" : "6135",
"誣" : "6136",
"誤" : "6137",
"誥" : "6138",
"誦" : "6139",
"誨" : "6140",
"說" : "6141",
"誰" : "6142",
"課" : "6143",
"誶" : "6144",
"誹" : "6145",
"誼" : "6146",
"誾" : "6147",
"調" : "6148",
"諂" : "6149",
"諄" : "6150",
"談" : "6151",
"諉" : "6152",
"請" : "6153",
"諍" : "6154",
"諏" : "6155",
"諒" : "6156",
"諑" : "6157",
"論" : "6158",
"諗" : "6159",
"諐" : "6160",
"諛" : "6161",
"諝" : "6162",
"諞" : "6163",
"諟" : "6164",
"諠" : "6165",
"諤" : "6166",
"諦" : "6167",
"諧" : "6168",
"諫" : "6169",
"諭" : "6170",
"諮" : "6171",
"諱" : "6172",
"諳" : "6173",
"諷" : "6174",
"諸" : "6175",
"諺" : "6176",
"諵" : "6177",
"諼" : "6178",
"諾" : "6179",
"謀" : "6180",
"謁" : "6181",
"謂" : "6182",
"諜" : "6183",
"諡" : "6184",
"諴" : "6185",
"諶" : "6186",
"謄" : "6187",
"謅" : "6188",
"謆" : "6189",
"謇" : "6190",
"謊" : "6192",
"謎" : "6193",
"謐" : "6194",
"謔" : "6195",
"謗" : "6196",
"謙" : "6197",
"謚" : "6198",
"講" : "6199",
"謝" : "6200",
"謟" : "6201",
"謠" : "6202",
"謏" : "6203",
"謖" : "6204",
"謦" : "6205",
"謨" : "6206",
"謫" : "6207",
"謬" : "6208",
"謳" : "6209",
"謹" : "6210",
"謾" : "6211",
"譁" : "6212",
"謿" : "6213",
"證" : "6214",
"譌" : "6215",
"譎" : "6216",
"譏" : "6217",
"譒" : "6218",
"譔" : "6219",
"譖" : "6220",
"識" : "6221",
"譙" : "6222",
"譚" : "6223",
"譍" : "6224",
"譜" : "6225",
"警" : "6226",
"譟" : "6227",
"譫" : "6228",
"譬" : "6229",
"譯" : "6230",
"議" : "6231",
"譴" : "6232",
"護" : "6233",
"譸" : "6234",
"譽" : "6235",
"讀" : "6236",
"譾" : "6237",
"讁" : "6238",
"變" : "6239",
"讌" : "6240",
"讎" : "6241",
"讋" : "6242",
"讒" : "6243",
"讖" : "6244",
"讓" : "6245",
"讙" : "6246",
"讚" : "6247",
"讛" : "6248",
"讜" : "6249",
"讞" : "6250",
"讟" : "6251",
"誯" : "6252",
"谷" : "6253",
"谿" : "6254",
"豁" : "6255",
"豄" : "6256",
"𥓁" : "6257",
"豆" : "6258",
"豈" : "6259",
"豋" : "6260",
"豌" : "6261",
"豉" : "6262",
"豇" : "6263",
"豎" : "6264",
"豐" : "6265",
"豒" : "6266",
"豔" : "6267",
"豏" : "6268",
"豕" : "6269",
"豚" : "6270",
"豝" : "6271",
"象" : "6272",
"豢" : "6273",
"豨" : "6274",
"豪" : "6275",
"豫" : "6276",
"豬" : "6277",
"豭" : "6278",
"豳" : "6279",
"豵" : "6280",
"鈮" : "6281",
"豸" : "6282",
"豹" : "6283",
"豺" : "6284",
"貂" : "6285",
"貆" : "6286",
"貅" : "6287",
"貉" : "6288",
"貊" : "6289",
"貎" : "6290",
"貍" : "6291",
"貓" : "6292",
"貔" : "6293",
"貛" : "6294",
"脲" : "6295",
"貝" : "6296",
"貞" : "6297",
"負" : "6298",
"財" : "6299",
"貢" : "6300",
"貤" : "6301",
"貧" : "6302",
"貨" : "6303",
"貪" : "6304",
"販" : "6305",
"貫" : "6306",
"責" : "6307",
"貯" : "6308",
"貲" : "6309",
"貳" : "6310",
"貴" : "6311",
"貶" : "6312",
"貸" : "6313",
"買" : "6314",
"貺" : "6315",
"費" : "6316",
"貼" : "6317",
"貽" : "6318",
"貿" : "6319",
"賀" : "6320",
"賁" : "6321",
"貰" : "6322",
"賂" : "6323",
"賃" : "6324",
"賄" : "6325",
"賅" : "6326",
"資" : "6327",
"賈" : "6328",
"賊" : "6329",
"賉" : "6330",
"賑" : "6331",
"賒" : "6332",
"賓" : "6333",
"賕" : "6334",
"賙" : "6335",
"賚" : "6336",
"賜" : "6337",
"賝" : "6338",
"賞" : "6339",
"賫" : "6340",
"賠" : "6341",
"賡" : "6342",
"賢" : "6343",
"賣" : "6344",
"賤" : "6345",
"賦" : "6346",
"質" : "6347",
"賬" : "6348",
"賟" : "6349",
"賭" : "6350",
"賴" : "6351",
"賵" : "6352",
"賮" : "6353",
"賺" : "6354",
"賻" : "6355",
"購" : "6356",
"賽" : "6357",
"賾" : "6358",
"賸" : "6359",
"贄" : "6360",
"贅" : "6361",
"贈" : "6362",
"贊" : "6363",
"贇" : "6364",
"贍" : "6365",
"贏" : "6366",
"贐" : "6367",
"贓" : "6368",
"贔" : "6369",
"贖" : "6370",
"贑" : "6371",
"贗" : "6372",
"贛" : "6373",
"贉" : "6374",
"赤" : "6375",
"赦" : "6376",
"赧" : "6377",
"赫" : "6378",
"赭" : "6379",
"赬" : "6380",
"釹" : "6381",
"走" : "6382",
"赳" : "6383",
"赴" : "6384",
"赶" : "6385",
"起" : "6386",
"趁" : "6387",
"趄" : "6388",
"超" : "6389",
"越" : "6390",
"趕" : "6391",
"趙" : "6392",
"趣" : "6393",
"趦" : "6394",
"趨" : "6395",
"趟" : "6396",
"蒎" : "6397",
"足" : "6398",
"趵" : "6399",
"趾" : "6400",
"跴" : "6401",
"趺" : "6402",
"趹" : "6403",
"跂" : "6404",
"跋" : "6405",
"跅" : "6406",
"跌" : "6407",
"跎" : "6408",
"跏" : "6409",
"跑" : "6410",
"跕" : "6411",
"跖" : "6412",
"跚" : "6413",
"跛" : "6414",
"距" : "6415",
"跗" : "6416",
"跫" : "6417",
"跟" : "6418",
"跡" : "6419",
"跣" : "6420",
"跨" : "6421",
"跪" : "6422",
"跬" : "6423",
"路" : "6424",
"踩" : "6425",
"跳" : "6426",
"跽" : "6427",
"踉" : "6428",
"踊" : "6429",
"跼" : "6430",
"踏" : "6431",
"踐" : "6432",
"踔" : "6433",
"踖" : "6434",
"踝" : "6435",
"踞" : "6436",
"踢" : "6437",
"踣" : "6438",
"踧" : "6439",
"踘" : "6440",
"踡" : "6441",
"踟" : "6442",
"踮" : "6443",
"踰" : "6444",
"踴" : "6445",
"踵" : "6446",
"踹" : "6447",
"蹓" : "6448",
"踽" : "6449",
"蹁" : "6450",
"蹂" : "6451",
"蹄" : "6452",
"踱" : "6453",
"蹀" : "6454",
"蹐" : "6455",
"蹇" : "6456",
"蹈" : "6457",
"蹉" : "6458",
"蹊" : "6459",
"躍" : "6460",
"蹌" : "6461",
"蹕" : "6462",
"蹔" : "6463",
"蹙" : "6464",
"蹟" : "6465",
"蹣" : "6466",
"蹤" : "6467",
"蹜" : "6468",
"𨄮" : "6469",
"蹠" : "6470",
"蹯" : "6471",
"蹲" : "6472",
"蹴" : "6473",
"蹶" : "6474",
"蹺" : "6475",
"蹡" : "6476",
"蹢" : "6477",
"蹬" : "6478",
"蹭" : "6479",
"𨆼" : "6480",
"躁" : "6481",
"躄" : "6482",
"躅" : "6483",
"躇" : "6484",
"躉" : "6485",
"躊" : "6486",
"躋" : "6487",
"蹋" : "6488",
"躐" : "6489",
"躑" : "6490",
"躒" : "6491",
"躓" : "6492",
"躔" : "6493",
"躚" : "6494",
"躡" : "6495",
"躩" : "6496",
"躪" : "6497",
"蹦" : "6498",
"蹚" : "6499",
"身" : "6500",
"躬" : "6501",
"躭" : "6502",
"躱" : "6503",
"軀" : "6504",
"躶" : "6505",
"軃" : "6506",
"躺" : "6507",
"車" : "6508",
"軋" : "6509",
"軌" : "6510",
"軍" : "6511",
"軏" : "6512",
"軒" : "6513",
"軔" : "6514",
"軛" : "6515",
"軟" : "6516",
"軨" : "6517",
"軫" : "6518",
"軸" : "6519",
"軹" : "6520",
"軷" : "6521",
"軼" : "6522",
"軺" : "6523",
"軾" : "6524",
"較" : "6525",
"輅" : "6526",
"輈" : "6527",
"載" : "6528",
"輀" : "6529",
"輇" : "6530",
"輊" : "6531",
"輒" : "6532",
"輓" : "6533",
"輔" : "6534",
"輕" : "6535",
"輗" : "6536",
"輙" : "6537",
"輛" : "6538",
"輜" : "6539",
"輝" : "6540",
"輟" : "6541",
"輦" : "6542",
"輩" : "6543",
"輪" : "6544",
"輞" : "6545",
"輠" : "6546",
"輥" : "6547",
"輧" : "6548",
"輯" : "6549",
"輳" : "6550",
"輸" : "6551",
"輹" : "6552",
"輻" : "6553",
"輭" : "6554",
"輮" : "6555",
"輴" : "6556",
"輶" : "6557",
"輾" : "6558",
"輿" : "6559",
"轂" : "6560",
"轄" : "6561",
"轅" : "6562",
"轀" : "6563",
"轆" : "6564",
"轇" : "6565",
"轕" : "6566",
"轉" : "6567",
"轍" : "6568",
"轎" : "6569",
"轏" : "6570",
"轒" : "6571",
"轖" : "6572",
"轘" : "6573",
"轞" : "6574",
"轟" : "6575",
"轡" : "6576",
"轢" : "6577",
"轤" : "6578",
"軕" : "6579",
"辛" : "6580",
"辜" : "6581",
"辟" : "6582",
"辠" : "6583",
"辣" : "6584",
"辥" : "6585",
"辦" : "6586",
"辨" : "6587",
"辭" : "6588",
"辯" : "6589",
"耪" : "6590",
"辰" : "6591",
"辱" : "6592",
"農" : "6593",
"狍" : "6594",
"辵" : "6595",
"迂" : "6596",
"迄" : "6597",
"迅" : "6598",
"𨑳" : "6599",
"迍" : "6600",
"迎" : "6601",
"近" : "6602",
"迓" : "6603",
"返" : "6604",
"迕" : "6605",
"迢" : "6606",
"迤" : "6607",
"迥" : "6608",
"迦" : "6609",
"迨" : "6610",
"迪" : "6611",
"迫" : "6612",
"迭" : "6613",
"逄" : "6614",
"述" : "6615",
"迴" : "6616",
"迷" : "6617",
"迸" : "6618",
"迹" : "6619",
"追" : "6620",
"迺" : "6621",
"退" : "6622",
"送" : "6623",
"适" : "6624",
"逃" : "6625",
"逅" : "6626",
"逆" : "6627",
"逋" : "6628",
"逯" : "6629",
"逍" : "6630",
"透" : "6631",
"逐" : "6632",
"逑" : "6633",
"途" : "6634",
"逕" : "6635",
"逖" : "6636",
"逗" : "6637",
"這" : "6638",
"通" : "6639",
"逛" : "6640",
"逝" : "6641",
"逞" : "6642",
"速" : "6643",
"造" : "6644",
"逡" : "6645",
"逢" : "6646",
"連" : "6647",
"逭" : "6648",
"逮" : "6649",
"週" : "6650",
"進" : "6651",
"逵" : "6652",
"逶" : "6653",
"逸" : "6654",
"逷" : "6655",
"逼" : "6656",
"遇" : "6657",
"遁" : "6658",
"遂" : "6659",
"遄" : "6660",
"逾" : "6661",
"遊" : "6662",
"運" : "6663",
"遍" : "6664",
"過" : "6665",
"遏" : "6666",
"遐" : "6667",
"遑" : "6668",
"遒" : "6669",
"道" : "6670",
"達" : "6671",
"違" : "6672",
"遘" : "6673",
"遙" : "6674",
"遛" : "6675",
"遜" : "6676",
"遞" : "6677",
"遠" : "6678",
"遡" : "6679",
"遣" : "6680",
"遢" : "6681",
"遝" : "6682",
"遨" : "6683",
"適" : "6684",
"遭" : "6685",
"遮" : "6686",
"遯" : "6687",
"遲" : "6688",
"遴" : "6689",
"遵" : "6690",
"遶" : "6691",
"遷" : "6692",
"選" : "6693",
"遹" : "6694",
"遺" : "6695",
"遆" : "6696",
"遼" : "6697",
"遽" : "6698",
"避" : "6699",
"邀" : "6700",
"邁" : "6701",
"邂" : "6702",
"還" : "6703",
"邅" : "6704",
"邇" : "6705",
"邃" : "6706",
"邈" : "6707",
"邊" : "6708",
"邏" : "6709",
"邐" : "6710",
"疱" : "6711",
"邑" : "6712",
"邛" : "6713",
"邗" : "6714",
"邙" : "6715",
"邕" : "6716",
"邢" : "6717",
"鄮" : "6718",
"那" : "6719",
"邡" : "6720",
"邦" : "6721",
"邨" : "6722",
"邪" : "6723",
"邠" : "6724",
"邯" : "6725",
"邱" : "6726",
"邲" : "6727",
"邴" : "6728",
"邳" : "6729",
"邵" : "6730",
"邶" : "6731",
"邸" : "6732",
"邰" : "6733",
"邽" : "6734",
"郁" : "6735",
"郅" : "6736",
"郇" : "6737",
"郊" : "6738",
"邾" : "6739",
"郃" : "6740",
"郗" : "6741",
"郄" : "6742",
"郕" : "6743",
"郛" : "6744",
"郎" : "6745",
"郡" : "6746",
"郢" : "6747",
"郤" : "6748",
"郙" : "6749",
"郜" : "6750",
"郟" : "6751",
"部" : "6752",
"郭" : "6753",
"郴" : "6754",
"郵" : "6755",
"郯" : "6756",
"都" : "6757",
"郿" : "6758",
"鄂" : "6759",
"鄒" : "6760",
"鄄" : "6761",
"鄔" : "6762",
"鄕" : "6763",
"鄗" : "6764",
"鄖" : "6765",
"鄙" : "6766",
"鄘" : "6767",
"鄢" : "6768",
"鄞" : "6769",
"鄠" : "6770",
"鄜" : "6771",
"鄧" : "6772",
"鄫" : "6773",
"鄭" : "6774",
"鄰" : "6775",
"鄱" : "6776",
"鄴" : "6777",
"鄶" : "6778",
"鄲" : "6779",
"鄹" : "6780",
"鄯" : "6781",
"鄺" : "6782",
"酇" : "6783",
"酃" : "6784",
"酆" : "6785",
"酈" : "6786",
"郝" : "6787",
"酉" : "6788",
"酊" : "6789",
"酋" : "6790",
"酌" : "6791",
"配" : "6792",
"酎" : "6793",
"酒" : "6794",
"酖" : "6795",
"酗" : "6796",
"酢" : "6797",
"酥" : "6798",
"酣" : "6799",
"酤" : "6800",
"酡" : "6801",
"酩" : "6802",
"酪" : "6803",
"酬" : "6804",
"酲" : "6805",
"酵" : "6806",
"酷" : "6807",
"酸" : "6808",
"酴" : "6809",
"酺" : "6811",
"醃" : "6812",
"醅" : "6813",
"醆" : "6814",
"醇" : "6815",
"醉" : "6816",
"醊" : "6817",
"醋" : "6818",
"醍" : "6819",
"醐" : "6820",
"醒" : "6821",
"醓" : "6822",
"醜" : "6823",
"醖" : "6824",
"醡" : "6825",
"醢" : "6826",
"醩" : "6827",
"醪" : "6828",
"醫" : "6829",
"醬" : "6830",
"醮" : "6831",
"醯" : "6832",
"醴" : "6833",
"醲" : "6834",
"醵" : "6835",
"醺" : "6836",
"醽" : "6837",
"醁" : "6838",
"醼" : "6839",
"釀" : "6840",
"釁" : "6841",
"釂" : "6842",
"釄" : "6843",
"錇" : "6844",
"釆" : "6845",
"采" : "6846",
"釋" : "6847",
"釉" : "6848",
"里" : "6849",
"重" : "6850",
"野" : "6851",
"量" : "6852",
"釐" : "6853",
"鋅" : "6854",
"金" : "6855",
"釗" : "6856",
"釘" : "6857",
"釜" : "6858",
"針" : "6859",
"釣" : "6860",
"釧" : "6861",
"鈣" : "6862",
"釦" : "6863",
"釭" : "6864",
"鈇" : "6866",
"鈀" : "6867",
"鈍" : "6868",
"鈎" : "6869",
"鈐" : "6870",
"鈉" : "6871",
"鈔" : "6872",
"鈕" : "6873",
"鈞" : "6874",
"鈴" : "6875",
"鈸" : "6876",
"鈺" : "6877",
"鉁" : "6878",
"鈿" : "6879",
"鉅" : "6880",
"鉉" : "6881",
"鉏" : "6882",
"鉗" : "6883",
"鉛" : "6884",
"鉞" : "6885",
"鉢" : "6886",
"鉤" : "6887",
"鉋" : "6888",
"鉶" : "6889",
"鉸" : "6890",
"鉦" : "6891",
"銀" : "6892",
"銃" : "6893",
"銅" : "6894",
"鈷" : "6895",
"鉑" : "6896",
"銑" : "6897",
"銓" : "6898",
"銖" : "6899",
"銘" : "6900",
"銛" : "6901",
"銜" : "6902",
"銚" : "6903",
"銳" : "6904",
"鉀" : "6905",
"銷" : "6906",
"銹" : "6907",
"銼" : "6908",
"鋈" : "6909",
"鋌" : "6910",
"鋏" : "6911",
"鋒" : "6912",
"鋟" : "6913",
"鈾" : "6914",
"鋤" : "6915",
"鋩" : "6916",
"鋪" : "6917",
"鋙" : "6918",
"銲" : "6919",
"鋸" : "6920",
"鋼" : "6921",
"錄" : "6922",
"錐" : "6923",
"錕" : "6924",
"錘" : "6925",
"錙" : "6926",
"錚" : "6927",
"錠" : "6928",
"錢" : "6929",
"錦" : "6930",
"錨" : "6931",
"錫" : "6932",
"錮" : "6933",
"錯" : "6934",
"錞" : "6935",
"錡" : "6936",
"鍊" : "6937",
"鍋" : "6938",
"鍛" : "6939",
"鉍" : "6940",
"銨" : "6941",
"鍬" : "6942",
"鍵" : "6943",
"鍼" : "6944",
"鍾" : "6945",
"鍇" : "6946",
"鍍" : "6947",
"鍔" : "6948",
"鍠" : "6949",
"鍤" : "6950",
"鍥" : "6951",
"鍭" : "6952",
"鍰" : "6953",
"鎔" : "6954",
"銾" : "6955",
"鎖" : "6956",
"鎗" : "6957",
"鎚" : "6958",
"鎛" : "6959",
"鎞" : "6960",
"鎡" : "6961",
"鎌" : "6962",
"鎧" : "6963",
"鎬" : "6964",
"鎰" : "6965",
"鎭" : "6966",
"鎊" : "6967",
"鏃" : "6968",
"鏈" : "6969",
"鏑" : "6970",
"鏖" : "6971",
"鏗" : "6972",
"鏘" : "6973",
"鏜" : "6974",
"鏡" : "6975",
"鏝" : "6976",
"鏢" : "6977",
"鏞" : "6978",
"鏤" : "6979",
"鏟" : "6980",
"鏐" : "6981",
"銻" : "6982",
"鏨" : "6983",
"鐃" : "6984",
"鏵" : "6985",
"鋁" : "6986",
"鏹" : "6987",
"鐘" : "6988",
"鐙" : "6989",
"鐫" : "6990",
"鐮" : "6991",
"鐲" : "6992",
"鐵" : "6993",
"鐶" : "6994",
"鐸" : "6995",
"鎳" : "6996",
"鐺" : "6997",
"鐻" : "6998",
"鑄" : "6999",
"鑊" : "7000",
"鑌" : "7001",
"鑑" : "7002",
"鑒" : "7003",
"鑤" : "7004",
"鎢" : "7005",
"鑛" : "7006",
"鑠" : "7007",
"鑢" : "7008",
"鑣" : "7009",
"鑪" : "7010",
"鑰" : "7011",
"鐳" : "7012",
"鑲" : "7013",
"鑵" : "7014",
"鑷" : "7015",
"鑼" : "7017",
"鑽" : "7018",
"鑾" : "7019",
"鑿" : "7020",
"錳" : "7021",
"長" : "7022",
"蜱" : "7023",
"門" : "7024",
"閂" : "7025",
"閃" : "7026",
"閆" : "7027",
"閉" : "7028",
"閈" : "7029",
"開" : "7030",
"閎" : "7031",
"閏" : "7032",
"閑" : "7033",
"閒" : "7034",
"間" : "7035",
"閔" : "7036",
"閘" : "7037",
"閟" : "7038",
"閡" : "7039",
"閤" : "7040",
"閣" : "7041",
"閥" : "7042",
"閨" : "7043",
"閩" : "7044",
"閫" : "7045",
"閬" : "7046",
"閭" : "7047",
"閱" : "7048",
"閶" : "7049",
"閹" : "7050",
"閻" : "7051",
"閼" : "7052",
"閽" : "7053",
"閾" : "7054",
"闃" : "7055",
"闇" : "7056",
"闈" : "7057",
"闉" : "7058",
"闊" : "7059",
"闋" : "7060",
"闌" : "7061",
"闍" : "7062",
"闐" : "7063",
"閿" : "7064",
"闓" : "7065",
"闔" : "7066",
"闕" : "7067",
"闖" : "7068",
"闒" : "7069",
"關" : "7070",
"闚" : "7071",
"闠" : "7072",
"闡" : "7073",
"闞" : "7074",
"闢" : "7075",
"闤" : "7076",
"闥" : "7077",
"闆" : "7078",
"阜" : "7079",
"阝" : "7080",
"阞" : "7081",
"阡" : "7082",
"阤" : "7083",
"阨" : "7084",
"阬" : "7085",
"阮" : "7086",
"阯" : "7087",
"阱" : "7088",
"防" : "7089",
"阪" : "7090",
"阻" : "7091",
"阼" : "7092",
"阿" : "7093",
"陀" : "7094",
"陂" : "7095",
"附" : "7096",
"陋" : "7097",
"限" : "7098",
"陌" : "7099",
"降" : "7100",
"陔" : "7101",
"陘" : "7102",
"陛" : "7103",
"陝" : "7104",
"陞" : "7105",
"陟" : "7106",
"陡" : "7107",
"院" : "7108",
"陣" : "7109",
"除" : "7110",
"陪" : "7111",
"陬" : "7112",
"陰" : "7113",
"陲" : "7114",
"陳" : "7115",
"陴" : "7116",
"陵" : "7117",
"陶" : "7118",
"陷" : "7119",
"陸" : "7120",
"陼" : "7121",
"陽" : "7122",
"陻" : "7123",
"隍" : "7124",
"隄" : "7125",
"隅" : "7126",
"隆" : "7127",
"隈" : "7128",
"隉" : "7129",
"隊" : "7130",
"隋" : "7131",
"階" : "7132",
"隔" : "7133",
"隕" : "7134",
"隖" : "7135",
"隗" : "7136",
"隘" : "7137",
"隙" : "7138",
"際" : "7139",
"障" : "7140",
"隣" : "7141",
"隤" : "7142",
"隧" : "7143",
"隩" : "7144",
"險" : "7145",
"隮" : "7146",
"隰" : "7147",
"隱" : "7148",
"隳" : "7149",
"隴" : "7150",
"隨" : "7151",
"隶" : "7152",
"隸" : "7153",
"苤" : "7154",
"隹" : "7155",
"隻" : "7156",
"隼" : "7157",
"雀" : "7158",
"雁" : "7159",
"雄" : "7160",
"雅" : "7161",
"集" : "7162",
"雇" : "7163",
"雉" : "7164",
"雋" : "7165",
"雌" : "7166",
"雍" : "7167",
"雎" : "7168",
"雊" : "7169",
"𨿅" : "7170",
"雕" : "7171",
"巂" : "7172",
"雖" : "7173",
"雘" : "7174",
"雙" : "7175",
"雛" : "7176",
"雜" : "7177",
"雝" : "7178",
"雞" : "7179",
"離" : "7180",
"難" : "7181",
"鉕" : "7182",
"雨" : "7183",
"雩" : "7184",
"雪" : "7185",
"雯" : "7186",
"雰" : "7187",
"雱" : "7188",
"雲" : "7189",
"零" : "7190",
"雷" : "7191",
"雹" : "7192",
"電" : "7193",
"需" : "7194",
"霂" : "7195",
"霅" : "7196",
"霄" : "7197",
"霈" : "7198",
"霉" : "7199",
"霆" : "7200",
"震" : "7201",
"霍" : "7202",
"霎" : "7203",
"霏" : "7204",
"霑" : "7205",
"霓" : "7206",
"霖" : "7207",
"霜" : "7208",
"霞" : "7209",
"霢" : "7210",
"霤" : "7211",
"霧" : "7212",
"霰" : "7213",
"霪" : "7214",
"霱" : "7215",
"露" : "7216",
"霶" : "7217",
"霸" : "7218",
"霹" : "7219",
"霮" : "7220",
"霽" : "7221",
"靀" : "7222",
"霾" : "7223",
"靄" : "7224",
"靂" : "7225",
"靆" : "7226",
"靈" : "7227",
"靉" : "7228",
"霨" : "7229",
"青" : "7230",
"靖" : "7231",
"靚" : "7232",
"靛" : "7233",
"靜" : "7234",
"鏷" : "7235",
"非" : "7236",
"靠" : "7237",
"靡" : "7238",
"氆" : "7239",
"面" : "7240",
"靦" : "7241",
"靧" : "7242",
"靨" : "7243",
"釺" : "7244",
"革" : "7245",
"靳" : "7246",
"靴" : "7247",
"鞅" : "7248",
"靶" : "7249",
"靷" : "7250",
"靸" : "7251",
"鞀" : "7252",
"鞉" : "7253",
"鞍" : "7254",
"鞏" : "7255",
"鞋" : "7256",
"鞗" : "7257",
"鞘" : "7258",
"鞙" : "7259",
"鞞" : "7260",
"鞚" : "7261",
"鞟" : "7262",
"鞠" : "7263",
"鞦" : "7264",
"鞫" : "7265",
"鞭" : "7267",
"鞮" : "7268",
"鞱" : "7269",
"鞶" : "7270",
"鞲" : "7271",
"鞴" : "7272",
"鞾" : "7273",
"韁" : "7274",
"韃" : "7275",
"韆" : "7276",
"韀" : "7277",
"羥" : "7278",
"韋" : "7279",
"韍" : "7280",
"韓" : "7281",
"韌" : "7282",
"韎" : "7283",
"韐" : "7284",
"韒" : "7285",
"韔" : "7286",
"韝" : "7287",
"韘" : "7288",
"韙" : "7289",
"韜" : "7290",
"韞" : "7291",
"韤" : "7292",
"韠" : "7293",
"熗" : "7294",
"韭" : "7295",
"韮" : "7296",
"韱" : "7297",
"仫" : "7298",
"音" : "7299",
"韶" : "7300",
"韻" : "7301",
"響" : "7302",
"韺" : "7303",
"頀" : "7304",
"苘" : "7305",
"頁" : "7306",
"頂" : "7307",
"頃" : "7308",
"項" : "7309",
"頇" : "7310",
"順" : "7311",
"須" : "7312",
"頌" : "7313",
"頏" : "7314",
"預" : "7315",
"頑" : "7316",
"頒" : "7317",
"頷" : "7318",
"頓" : "7319",
"頊" : "7320",
"頍" : "7321",
"頎" : "7322",
"頖" : "7323",
"頗" : "7324",
"領" : "7325",
"頞" : "7326",
"頡" : "7327",
"頤" : "7328",
"顎" : "7329",
"𩓐" : "7330",
"頦" : "7331",
"頫" : "7332",
"頭" : "7333",
"頮" : "7334",
"頰" : "7335",
"頴" : "7336",
"頳" : "7337",
"頸" : "7338",
"頹" : "7339",
"頻" : "7340",
"顆" : "7341",
"顇" : "7342",
"顋" : "7343",
"題" : "7344",
"額" : "7345",
"顏" : "7346",
"頿" : "7347",
"顓" : "7348",
"願" : "7349",
"顙" : "7350",
"顚" : "7351",
"類" : "7352",
"顜" : "7353",
"顢" : "7354",
"顥" : "7355",
"顦" : "7356",
"顧" : "7357",
"顫" : "7358",
"顯" : "7359",
"顰" : "7360",
"顱" : "7361",
"顴" : "7362",
"粬" : "7363",
"風" : "7364",
"颭" : "7365",
"颯" : "7366",
"颶" : "7367",
"颸" : "7368",
"颿" : "7369",
"颺" : "7370",
"颻" : "7371",
"颼" : "7372",
"飄" : "7373",
"飆" : "7374",
"飀" : "7375",
"颱" : "7376",
"颳" : "7377",
"飛" : "7378",
"醛" : "7379",
"食" : "7380",
"飡" : "7381",
"飢" : "7382",
"飣" : "7383",
"飦" : "7384",
"飧" : "7385",
"飩" : "7386",
"飪" : "7387",
"飫" : "7388",
"飭" : "7389",
"飲" : "7390",
"飯" : "7391",
"飴" : "7392",
"飼" : "7393",
"飽" : "7394",
"飾" : "7395",
"飶" : "7396",
"餂" : "7397",
"餃" : "7398",
"餅" : "7399",
"餏" : "7400",
"餉" : "7401",
"養" : "7402",
"餌" : "7403",
"餐" : "7404",
"餖" : "7405",
"餗" : "7406",
"餒" : "7407",
"餓" : "7408",
"餔" : "7409",
"餕" : "7410",
"餘" : "7411",
"餛" : "7412",
"餚" : "7413",
"餡" : "7414",
"餞" : "7415",
"餑" : "7416",
"餟" : "7417",
"饃" : "7418",
"館" : "7419",
"餬" : "7420",
"餮" : "7421",
"餱" : "7422",
"餲" : "7423",
"餳" : "7424",
"餹" : "7425",
"餼" : "7426",
"餽" : "7427",
"饁" : "7428",
"饅" : "7429",
"𩝭" : "7430",
"饉" : "7431",
"饋" : "7432",
"饌" : "7433",
"饎" : "7434",
"饐" : "7435",
"饑" : "7436",
"饒" : "7437",
"饔" : "7438",
"饕" : "7439",
"饗" : "7440",
"饜" : "7441",
"饟" : "7442",
"饞" : "7443",
"首" : "7445",
"馘" : "7446",
"馗" : "7447",
"炔" : "7448",
"香" : "7449",
"馥" : "7450",
"馨" : "7451",
"馝" : "7452",
"馡" : "7453",
"馣" : "7454",
"蟯" : "7455",
"馬" : "7456",
"馭" : "7457",
"馮" : "7458",
"馳" : "7459",
"馴" : "7460",
"馱" : "7461",
"馹" : "7462",
"駁" : "7463",
"駃" : "7464",
"駐" : "7465",
"駑" : "7466",
"駒" : "7467",
"駕" : "7468",
"駘" : "7469",
"駙" : "7470",
"駛" : "7471",
"駋" : "7472",
"駜" : "7473",
"駝" : "7474",
"駟" : "7475",
"駪" : "7476",
"駉" : "7477",
"駢" : "7478",
"駬" : "7479",
"駭" : "7480",
"駮" : "7481",
"駱" : "7482",
"駵" : "7483",
"駰" : "7484",
"駸" : "7485",
"駿" : "7486",
"騌" : "7487",
"騁" : "7488",
"騅" : "7489",
"騂" : "7490",
"騃" : "7491",
"隲" : "7492",
"騑" : "7493",
"騎" : "7494",
"騋" : "7495",
"騏" : "7496",
"騖" : "7497",
"騄" : "7498",
"騙" : "7499",
"驄" : "7500",
"騠" : "7501",
"騣" : "7502",
"騤" : "7503",
"騧" : "7504",
"騫" : "7505",
"騰" : "7506",
"騶" : "7507",
"騵" : "7508",
"騸" : "7509",
"騷" : "7510",
"騮" : "7511",
"騾" : "7512",
"驀" : "7513",
"驁" : "7514",
"驂" : "7515",
"驃" : "7516",
"驅" : "7517",
"驈" : "7518",
"騻" : "7519",
"驊" : "7520",
"驔" : "7521",
"驍" : "7522",
"驖" : "7523",
"驕" : "7524",
"驌" : "7525",
"驗" : "7526",
"驒" : "7527",
"驚" : "7528",
"驘" : "7529",
"驙" : "7530",
"驛" : "7531",
"驟" : "7532",
"驢" : "7533",
"驤" : "7534",
"驥" : "7535",
"驩" : "7536",
"驪" : "7537",
"駗" : "7538",
"骨" : "7539",
"骩" : "7540",
"骭" : "7541",
"骯" : "7542",
"骱" : "7543",
"骰" : "7544",
"骷" : "7545",
"骸" : "7546",
"骼" : "7547",
"骽" : "7548",
"髀" : "7549",
"骾" : "7550",
"髏" : "7551",
"髆" : "7552",
"髑" : "7553",
"髒" : "7554",
"體" : "7555",
"髖" : "7556",
"髓" : "7557",
"鞣" : "7558",
"高" : "7559",
"銣" : "7560",
"髟" : "7561",
"髠" : "7562",
"髢" : "7563",
"髣" : "7564",
"髦" : "7565",
"髧" : "7566",
"髫" : "7567",
"髭" : "7568",
"髮" : "7569",
"髯" : "7570",
"鬃" : "7571",
"髴" : "7572",
"髻" : "7573",
"髹" : "7574",
"鬆" : "7575",
"鬈" : "7576",
"鬅" : "7577",
"鬋" : "7578",
"鬍" : "7579",
"鬐" : "7580",
"鬒" : "7581",
"鬑" : "7582",
"鬘" : "7583",
"鬔" : "7584",
"鬙" : "7585",
"鬚" : "7586",
"鬟" : "7587",
"鬣" : "7588",
"鬢" : "7589",
"鬎" : "7590",
"鬥" : "7591",
"鬨" : "7592",
"鬧" : "7593",
"鬩" : "7594",
"鬭" : "7595",
"鬮" : "7596",
"銫" : "7597",
"鬯" : "7598",
"鬱" : "7599",
"鍶" : "7600",
"鬲" : "7601",
"鬴" : "7602",
"鬵" : "7603",
"鬷" : "7604",
"鬻" : "7605",
"雟" : "7606",
"鬼" : "7607",
"魁" : "7608",
"魂" : "7609",
"魃" : "7610",
"魄" : "7611",
"魊" : "7612",
"魅" : "7613",
"魏" : "7614",
"魐" : "7615",
"魀" : "7616",
"魈" : "7617",
"魍" : "7618",
"魎" : "7619",
"魑" : "7620",
"魔" : "7621",
"𩴾" : "7622",
"魘" : "7623",
"嗩" : "7624",
"魚" : "7625",
"魷" : "7626",
"魯" : "7627",
"䱅" : "7628",
"魴" : "7629",
"鮎" : "7630",
"鮒" : "7631",
"鮐" : "7632",
"鮓" : "7633",
"鮭" : "7634",
"鮪" : "7635",
"鮆" : "7636",
"鮑" : "7637",
"鯗" : "7638",
"鮮" : "7639",
"鮫" : "7640",
"鯀" : "7641",
"鯉" : "7642",
"鯁" : "7643",
"鯊" : "7644",
"鯖" : "7645",
"鯢" : "7646",
"鯧" : "7647",
"鮳" : "7648",
"鯤" : "7649",
"鯨" : "7650",
"鯽" : "7651",
"𩸞" : "7652",
"鯿" : "7653",
"鰈" : "7654",
"鰍" : "7655",
"鰌" : "7656",
"鰕" : "7657",
"鰓" : "7658",
"鰥" : "7659",
"鰜" : "7660",
"鰣" : "7661",
"鰭" : "7662",
"鰲" : "7663",
"鯰" : "7664",
"鰻" : "7665",
"鯷" : "7666",
"鱉" : "7667",
"鱔" : "7668",
"鱘" : "7669",
"鱟" : "7670",
"鱠" : "7671",
"鱣" : "7672",
"鱗" : "7673",
"鰾" : "7674",
"鱖" : "7675",
"鰵" : "7676",
"鱷" : "7677",
"鱸" : "7678",
"魺" : "7679",
"鳥" : "7680",
"鳦" : "7681",
"鳩" : "7682",
"鳧" : "7683",
"鳲" : "7684",
"鳳" : "7685",
"鳴" : "7686",
"鳶" : "7687",
"鴄" : "7688",
"鴟" : "7689",
"鴆" : "7690",
"鴇" : "7691",
"鴈" : "7692",
"鴉" : "7693",
"鴃" : "7694",
"鴛" : "7696",
"鴞" : "7697",
"鴣" : "7698",
"鴦" : "7699",
"鴨" : "7700",
"鴒" : "7701",
"鴝" : "7702",
"鴻" : "7703",
"鴿" : "7704",
"鴽" : "7705",
"鵀" : "7706",
"鵂" : "7707",
"鵜" : "7708",
"鵝" : "7709",
"鵑" : "7710",
"鵠" : "7711",
"鵓" : "7712",
"鵡" : "7713",
"鵒" : "7714",
"鵪" : "7715",
"鵰" : "7716",
"鵲" : "7717",
"鶉" : "7718",
"鵩" : "7719",
"鵬" : "7720",
"鵾" : "7721",
"鶃" : "7722",
"鶖" : "7723",
"鶘" : "7724",
"鶚" : "7725",
"鶩" : "7726",
"鶯" : "7727",
"鶱" : "7728",
"鶴" : "7729",
"鶵" : "7730",
"鶺" : "7731",
"鶿" : "7732",
"鶊" : "7733",
"鷇" : "7734",
"鶬" : "7735",
"鶹" : "7736",
"鶻" : "7737",
"鶼" : "7738",
"鷁" : "7739",
"鷂" : "7740",
"鷄" : "7741",
"鷃" : "7742",
"鷗" : "7743",
"鷓" : "7744",
"鷕" : "7745",
"鷖" : "7746",
"鷙" : "7747",
"鷥" : "7748",
"鷩" : "7749",
"鷲" : "7750",
"鷹" : "7751",
"鷺" : "7752",
"鷦" : "7753",
"鷯" : "7754",
"鷼" : "7755",
"鷸" : "7756",
"鸇" : "7757",
"鸑" : "7758",
"鷽" : "7759",
"鸕" : "7760",
"鸚" : "7761",
"鸞" : "7762",
"鷟" : "7763",
"鸛" : "7764",
"鸝" : "7765",
"鴹" : "7766",
"鹵" : "7767",
"鹹" : "7768",
"鹼" : "7769",
"鹽" : "7770",
"鹺" : "7771",
"熵" : "7772",
"鹿" : "7773",
"麂" : "7774",
"鈰" : "7775",
"麀" : "7776",
"麃" : "7777",
"麇" : "7778",
"麈" : "7779",
"麋" : "7780",
"麌" : "7781",
"麐" : "7782",
"麑" : "7783",
"麒" : "7784",
"麓" : "7785",
"麕" : "7786",
"麗" : "7787",
"麚" : "7788",
"麛" : "7789",
"麝" : "7790",
"麞" : "7791",
"麟" : "7792",
"麢" : "7793",
"麤" : "7794",
"涮" : "7795",
"麥" : "7796",
"麪" : "7797",
"麯" : "7798",
"麰" : "7799",
"麴" : "7800",
"蒴" : "7801",
"麻" : "7802",
"麽" : "7803",
"麾" : "7804",
"黁" : "7805",
"黃" : "7806",
"黈" : "7807",
"黌" : "7808",
"鉈" : "7809",
"黍" : "7810",
"黏" : "7811",
"黎" : "7812",
"黐" : "7813",
"溚" : "7814",
"黑" : "7815",
"黔" : "7816",
"默" : "7817",
"黛" : "7818",
"黜" : "7819",
"點" : "7820",
"黝" : "7821",
"黠" : "7822",
"黥" : "7823",
"黧" : "7824",
"黨" : "7825",
"黯" : "7826",
"黴" : "7827",
"黮" : "7828",
"黶" : "7829",
"黷" : "7830",
"傣" : "7831",
"黹" : "7832",
"黻" : "7833",
"黼" : "7834",
"鈦" : "7835",
"黽" : "7836",
"黿" : "7837",
"鼃" : "7838",
"鼂" : "7839",
"鼇" : "7840",
"鼈" : "7841",
"鼉" : "7842",
"鉭" : "7843",
"鼎" : "7844",
"鼐" : "7845",
"鼏" : "7846",
"鼒" : "7847",
"冇" : "7848",
"鼓" : "7849",
"鼕" : "7850",
"鼗" : "7851",
"鼖" : "7852",
"鼙" : "7853",
"鼛" : "7854",
"鼚" : "7855",
"羰" : "7856",
"鼠" : "7857",
"鼢" : "7858",
"鼫" : "7859",
"鼬" : "7860",
"鼯" : "7861",
"鼹" : "7862",
"鼷" : "7863",
"醣" : "7864",
"鼻" : "7865",
"鼽" : "7866",
"鼾" : "7867",
"齁" : "7868",
"齅" : "7869",
"鋱" : "7870",
"齊" : "7871",
"齋" : "7872",
"齎" : "7873",
"齏" : "7874",
"菾" : "7875",
"齒" : "7876",
"齔" : "7877",
"齕" : "7878",
"齗" : "7879",
"齟" : "7880",
"齡" : "7881",
"齠" : "7882",
"齦" : "7883",
"齧" : "7884",
"齩" : "7885",
"齬" : "7886",
"齪" : "7887",
"齮" : "7888",
"齲" : "7889",
"齶" : "7890",
"齷" : "7891",
"齣" : "7892",
"龍" : "7893",
"龎" : "7894",
"龔" : "7895",
"龕" : "7896",
"舔" : "7897",
"龜" : "7898",
"烴" : "7899",
"龠" : "7900",
"龢" : "7901",
"龥" : "7902",
"楟" : "7903",
"酮" : "7904",
"茼" : "7905",
"烔" : "7906",
"釷" : "7907",
"佤" : "7908",
"烷" : "7909",
"烯" : "7910",
"螅" : "7911",
"氙" : "7912",
"酰" : "7913",
"鱈" : "7914",
"蕁" : "7915",
"埡" : "7916",
"銥" : "7917",
"釔" : "7918",
"鐿" : "7919",
"銦" : "7920",
"銪" : "7921",
"冮" : "7922",
"鱒" : "7923",
"蟑" : "7924",
"礃" : "7925",
"鍺" : "7926",
"酯" : "7927",
"勐" : "7928",
"呋" : "7929",
"喹" : "7930",
"嗪" : "7931",
"嗡" : "7932",
"圐" : "7933",
"圙" : "7934",
"坬" : "7935",
"垾" : "7936",
"堼" : "7937",
"塂" : "7938",
"墈" : "7939",
"岽" : "7940",
"峧" : "7941",
"崀" : "7942",
"崅" : "7943",
"崌" : "7944",
"崾" : "7945",
"嶅" : "7946",
"挎" : "7947",
"捅" : "7948",
"改" : "7949",
"旻" : "7950",
"杞" : "7951",
"朿" : "7952",
"槠" : "7953",
"浐" : "7954",
"浕" : "7955",
"浉" : "7956",
"浈" : "7957",
"洨" : "7958",
"涢" : "7959",
"浛" : "7960",
"涠" : "7961",
"浯" : "7962",
"涭" : "7963",
"溵" : "7964",
"潖" : "7965",
"澛" : "7966",
"潵" : "7967",
"榃" : "7968",
"痄" : "7969",
"疰" : "7970",
"砼" : "7971",
"磜" : "7972",
"礅" : "7973",
"磙" : "7974",
"礳" : "7975",
"簕" : "7976",
"羧" : "7977",
"耢" : "7978",
"朊" : "7979",
"胂" : "7980",
"腈" : "7981",
"脿" : "7982",
"腩" : "7983",
"艿" : "7984",
"苄" : "7985",
"萜" : "7986",
"蚍" : "7987",
"蚴" : "7988",
"蛘" : "7989",
"觃" : "7990",
"轱" : "7991",
"轷" : "7992",
"鄌" : "7993",
"酞" : "7994",
"铹" : "7995",
"锛" : "7996",
"锘" : "7997",
"雒" : "7998",
"靰" : "7999",
"丌" : "8000",
"万" : "8001",
"丘" : "8002",
"乒" : "8003",
"乓" : "8004",
"甭" : "8005",
"孬" : "8006",
"饸" : "8007",
"饹" : "8008",
"丳" : "8009",
"么" : "8010",
"骶" : "8011",
"乩" : "8012",
"亄" : "8013",
"肮" : "8014",
"亍" : "8015",
"亓" : "8016",
"亘" : "8017",
"亝" : "8018",
"鲖" : "8019",
"仈" : "8020",
"仂" : "8021",
"仉" : "8022",
"伈" : "8023",
"伃" : "8024",
"伀" : "8025",
"伽" : "8026",
"佉" : "8027",
"佇" : "8028",
"佂" : "8029",
"伾" : "8030",
"佽" : "8031",
"佼" : "8032",
"佹" : "8033",
"佴" : "8034",
"佫" : "8035",
"佌" : "8036",
"侢" : "8037",
"侜" : "8038",
"侚" : "8039",
"侘" : "8040",
"侐" : "8041",
"侁" : "8042",
"侀" : "8043",
"俔" : "8044",
"俅" : "8045",
"俥" : "8046",
"俌" : "8047",
"俁" : "8049",
"俤" : "8050",
"侴" : "8051",
"倅" : "8052",
"倢" : "8053",
"倞" : "8054",
"倴" : "8055",
"倔" : "8056",
"俴" : "8057",
"偲" : "8059",
"偫" : "8060",
"偘" : "8061",
"傁" : "8062",
"偯" : "8063",
"偬" : "8064",
"偩" : "8065",
"偝" : "8066",
"偌" : "8067",
"傔" : "8068",
"傺" : "8069",
"僊" : "8070",
"僎" : "8071",
"僬" : "8072",
"㒆" : "8073",
"僤" : "8074",
"僼" : "8075",
"儩" : "8077",
"儦" : "8078",
"儡" : "8079",
"儺" : "8080",
"儸" : "8081",
"鲘" : "8082",
"鲩" : "8083",
"鲡" : "8084",
"鲮" : "8085",
"屲" : "8086",
"岜" : "8087",
"兙" : "8088",
"兛" : "8089",
"峃" : "8090",
"兝" : "8091",
"兞" : "8092",
"党" : "8093",
"凃" : "8094",
"凊" : "8095",
"减" : "8096",
"掰" : "8097",
"冔" : "8098",
"冨" : "8099",
"氕" : "8100",
"刓" : "8101",
"刜" : "8102",
"剙" : "8103",
"剞" : "8104",
"劂" : "8105",
"劌" : "8106",
"劖" : "8107",
"劚" : "8108",
"鲝" : "8109",
"鲱" : "8110",
"勑" : "8111",
"勔" : "8112",
"勛" : "8113",
"勡" : "8114",
"鲴" : "8115",
"匆" : "8116",
"卼" : "8117",
"厖" : "8118",
"叐" : "8119",
"吋" : "8120",
"吔" : "8121",
"吪" : "8122",
"吱" : "8123",
"吽" : "8124",
"呎" : "8125",
"听" : "8126",
"吰" : "8127",
"呭" : "8128",
"咈" : "8129",
"咍" : "8130",
"咚" : "8131",
"咡" : "8132",
"咢" : "8133",
"咥" : "8134",
"哆" : "8135",
"咻" : "8136",
"咟" : "8137",
"咮" : "8138",
"咼" : "8139",
"唎" : "8140",
"哤" : "8141",
"唄" : "8142",
"唑" : "8143",
"哢" : "8144",
"啗" : "8145",
"唪" : "8146",
"唼" : "8147",
"啐" : "8148",
"啍" : "8149",
"唶" : "8150",
"喤" : "8151",
"啳" : "8152",
"喴" : "8153",
"喨" : "8154",
"喌" : "8155",
"嗊" : "8156",
"嗈" : "8157",
"嗁" : "8158",
"嗀" : "8159",
"嗿" : "8160",
"嘐" : "8161",
"嘑" : "8162",
"嗹" : "8163",
"嘂" : "8164",
"嘓" : "8165",
"嘌" : "8166",
"嘮" : "8167",
"噙" : "8168",
"噂" : "8169",
"噀" : "8170",
"嘽" : "8171",
"嘸" : "8172",
"噹" : "8173",
"噠" : "8174",
"噳" : "8175",
"噭" : "8176",
"嚌" : "8177",
"嚆" : "8178",
"嚄" : "8179",
"嚃" : "8180",
"嚭" : "8181",
"嚦" : "8182",
"嚕" : "8183",
"嚲" : "8184",
"嚳" : "8185",
"啃" : "8186",
"鳁" : "8187",
"囝" : "8188",
"囡" : "8189",
"囥" : "8190",
"圊" : "8191",
"圌" : "8192",
"圛" : "8193",
"圞" : "8194",
"鳎" : "8195",
"鳙" : "8196",
"圯" : "8197",
"圪" : "8198",
"壳" : "8199",
"𡊐" : "8200",
"坻" : "8201",
"坵" : "8202",
"坱" : "8203",
"坴" : "8204",
"坿" : "8205",
"垇" : "8206",
"垊" : "8207",
"垞" : "8208",
"垤" : "8209",
"垚" : "8210",
"垌" : "8211",
"垗" : "8212",
"垟" : "8213",
"垕" : "8214",
"𡋟" : "8215",
"㘾" : "8216",
"埂" : "8217",
"垻" : "8218",
"垸" : "8219",
"埗" : "8220",
"埆" : "8221",
"埌" : "8222",
"埇" : "8223",
"埕" : "8224",
"埦" : "8225",
"埶" : "8226",
"埽" : "8227",
"堄" : "8228",
"堋" : "8229",
"堉" : "8230",
"堎" : "8231",
"堀" : "8232",
"堌" : "8233",
"埰" : "8234",
"堲" : "8235",
"堧" : "8236",
"塓" : "8237",
"堨" : "8238",
"堍" : "8239",
"堳" : "8240",
"堝" : "8241",
"塬" : "8242",
"塱" : "8243",
"塝" : "8244",
"堽" : "8245",
"墘" : "8246",
"塥" : "8247",
"塷" : "8248",
"塽" : "8249",
"墕" : "8250",
"塈" : "8251",
"墝" : "8252",
"墠" : "8253",
"墫" : "8254",
"壋" : "8255",
"㙮" : "8256",
"𡑍" : "8257",
"墰" : "8258",
"墙" : "8259",
"壒" : "8261",
"墒" : "8262",
"壠" : "8263",
"橦" : "8264",
"螨" : "8265",
"岈" : "8266",
"脒" : "8267",
"夼" : "8268",
"奜" : "8269",
"㚟" : "8270",
"奰" : "8271",
"貌" : "8272",
"妵" : "8273",
"姁" : "8274",
"妸" : "8275",
"姶" : "8276",
"姺" : "8277",
"姽" : "8278",
"娀" : "8279",
"姘" : "8280",
"娒" : "8281",
"娵" : "8282",
"婐" : "8283",
"婞" : "8284",
"娸" : "8285",
"娬" : "8286",
"婤" : "8287",
"嫏" : "8288",
"婥" : "8289",
"媊" : "8290",
"媜" : "8291",
"媄" : "8292",
"媞" : "8293",
"嫈" : "8294",
"媮" : "8295",
"婿" : "8296",
"嫳" : "8297",
"嫽" : "8298",
"嫿" : "8299",
"嫻" : "8300",
"嫵" : "8301",
"嬡" : "8302",
"嬝" : "8303",
"孃" : "8304",
"鞡" : "8305",
"孖" : "8311",
"孻" : "8312",
"寪" : "8314",
"尀" : "8315",
"尟" : "8316",
"屄" : "8317",
"屜" : "8318",
"屪" : "8319",
"屫" : "8320",
"屴" : "8321",
"屼" : "8322",
"岅" : "8323",
"岙" : "8324",
"岍" : "8325",
"岊" : "8326",
"岨" : "8327",
"岬" : "8328",
"岞" : "8329",
"岧" : "8330",
"峇" : "8331",
"峢" : "8332",
"峝" : "8333",
"峹" : "8334",
"峱" : "8335",
"崟" : "8337",
"崞" : "8338",
"崮" : "8339",
"崿" : "8340",
"嶞" : "8341",
"崽" : "8342",
"崴" : "8343",
"嶢" : "8344",
"嵂" : "8345",
"嵼" : "8346",
"嶥" : "8347",
"嶓" : "8348",
"嶮" : "8349",
"嶰" : "8350",
"嶴" : "8351",
"巃" : "8352",
"巇" : "8353",
"巋" : "8354",
"巯" : "8360",
"帣" : "8361",
"幈" : "8362",
"幞" : "8363",
"幠" : "8364",
"幩" : "8365",
"幦" : "8366",
"幨" : "8367",
"庄" : "8369",
"庈" : "8370",
"庤" : "8371",
"𢊈" : "8372",
"廒" : "8373",
"廍" : "8374",
"廎" : "8375",
"廧" : "8376",
"异" : "8381",
"弌" : "8382",
"弎" : "8383",
"甙" : "8384",
"彴" : "8385",
"彽" : "8386",
"忪" : "8388",
"怈" : "8389",
"怳" : "8390",
"怭" : "8391",
"怲" : "8392",
"恇" : "8393",
"恓" : "8394",
"恔" : "8395",
"恵" : "8396",
"惔" : "8397",
"惽" : "8398",
"愃" : "8399",
"愓" : "8400",
"惷" : "8401",
"慉" : "8402",
"憃" : "8403",
"憙" : "8404",
"懠" : "8405",
"懰" : "8406",
"懮" : "8407",
"戁" : "8408",
"戄" : "8409",
"戭" : "8414",
"戹" : "8415",
"戺" : "8416",
"扐" : "8418",
"扢" : "8419",
"扤" : "8420",
"扡" : "8421",
"扦" : "8422",
"拤" : "8423",
"抶" : "8424",
"拑" : "8425",
"拕" : "8427",
"𢪘" : "8428",
"拶" : "8429",
"捚" : "8430",
"挱" : "8431",
"捃" : "8432",
"捘" : "8433",
"捓" : "8434",
"捬" : "8435",
"掗" : "8436",
"掤" : "8437",
"掮" : "8438",
"揸" : "8439",
"揲" : "8440",
"揅" : "8441",
"揗" : "8442",
"揰" : "8443",
"揫" : "8444",
"揎" : "8445",
"揕" : "8446",
"揥" : "8447",
"揶" : "8448",
"揵" : "8449",
"搸" : "8450",
"掔" : "8451",
"搢" : "8452",
"搵" : "8453",
"搊" : "8454",
"搘" : "8455",
"摉" : "8456",
"搌" : "8457",
"搤" : "8458",
"搡" : "8459",
"摠" : "8460",
"撱" : "8461",
"摦" : "8462",
"摲" : "8463",
"摷" : "8464",
"撦" : "8465",
"搿" : "8466",
"𢴇" : "8467",
"𢵧" : "8468",
"撏" : "8469",
"撶" : "8470",
"撳" : "8471",
"𢵈" : "8472",
"撣" : "8473",
"擐" : "8474",
"擖" : "8475",
"擫" : "8476",
"擥" : "8477",
"攟" : "8478",
"掱" : "8479",
"敜" : "8489",
"敫" : "8490",
"敳" : "8491",
"敹" : "8492",
"敿" : "8493",
"斏" : "8494",
"斚" : "8496",
"斠" : "8497",
"斮" : "8498",
"旝" : "8499",
"旴" : "8501",
"昀" : "8502",
"昄" : "8503",
"昊" : "8504",
"昰" : "8505",
"昺" : "8506",
"晅" : "8507",
"晟" : "8508",
"晛" : "8509",
"晧" : "8510",
"晜" : "8511",
"晾" : "8512",
"暋" : "8513",
"暌" : "8514",
"暓" : "8515",
"暔" : "8516",
"暲" : "8517",
"曄" : "8518",
"曖" : "8519",
"朌" : "8524",
"朣" : "8525",
"朾" : "8527",
"杇" : "8528",
"杕" : "8529",
"杠" : "8530",
"杗" : "8531",
"杝" : "8532",
"杅" : "8533",
"杙" : "8534",
"杶" : "8535",
"枤" : "8536",
"杻" : "8537",
"枬" : "8538",
"枓" : "8539",
"柷" : "8540",
"枒" : "8541",
"枴" : "8542",
"柂" : "8543",
"柅" : "8544",
"柣" : "8545",
"柤" : "8546",
"柲" : "8547",
"柶" : "8548",
"柸" : "8549",
"栻" : "8550",
"栔" : "8551",
"栝" : "8552",
"栞" : "8553",
"栫" : "8554",
"栭" : "8555",
"栵" : "8556",
"桋" : "8557",
"栒" : "8558",
"栟" : "8559",
"桬" : "8560",
"桭" : "8561",
"梡" : "8562",
"梩" : "8563",
"梴" : "8564",
"梘" : "8565",
"棑" : "8566",
"棜" : "8567",
"棪" : "8568",
"棸" : "8569",
"椌" : "8570",
"椏" : "8571",
"椑" : "8572",
"楰" : "8573",
"楙" : "8574",
"楀" : "8575",
"楂" : "8576",
"楄" : "8577",
"楎" : "8578",
"楬" : "8579",
"𣗬" : "8580",
"槩" : "8581",
"樲" : "8582",
"樠" : "8583",
"槼" : "8584",
"𣛮" : "8585",
"樿" : "8586",
"橇" : "8587",
"橤" : "8588",
"檎" : "8589",
"燊" : "8590",
"樳" : "8591",
"橒" : "8592",
"檇" : "8593",
"檑" : "8594",
"橚" : "8595",
"檴" : "8596",
"橣" : "8597",
"檿" : "8598",
"櫉" : "8599",
"檙" : "8600",
"櫫" : "8601",
"櫌" : "8602",
"櫸" : "8603",
"欑" : "8604",
"欙" : "8605",
"樴" : "8606",
"欼" : "8616",
"歈" : "8617",
"歁" : "8618",
"歊" : "8619",
"歗" : "8620",
"歜" : "8621",
"歾" : "8623",
"殈" : "8624",
"殣" : "8625",
"殭" : "8626",
"毈" : "8628",
"毚" : "8632",
"毿" : "8633",
"氞" : "8635",
"氟" : "8636",
"氨" : "8637",
"氧" : "8638",
"氥" : "8639",
"氦" : "8640",
"氫" : "8641",
"氰" : "8642",
"氱" : "8643",
"氮" : "8644",
"氬" : "8645",
"㲶" : "8646",
"氘" : "8647",
"氚" : "8648",
"氿" : "8659",
"汆" : "8660",
"沄" : "8661",
"沇" : "8662",
"沕" : "8663",
"泂" : "8664",
"況" : "8665",
"泒" : "8666",
"泃" : "8667",
"泜" : "8668",
"泚" : "8669",
"洏" : "8670",
"洴" : "8671",
"洤" : "8672",
"涌" : "8673",
"涖" : "8674",
"涒" : "8675",
"浭" : "8676",
"浤" : "8677",
"浧" : "8678",
"涊" : "8679",
"浼" : "8680",
"淖" : "8681",
"淟" : "8682",
"淜" : "8683",
"淓" : "8684",
"淠" : "8685",
"淢" : "8686",
"渟" : "8687",
"渢" : "8688",
"湑" : "8689",
"湩" : "8690",
"溦" : "8691",
"淥" : "8692",
"淼" : "8693",
"渲" : "8694",
"渼" : "8695",
"湢" : "8696",
"溏" : "8697",
"湋" : "8698",
"渫" : "8699",
"溴" : "8700",
"滉" : "8701",
"滏" : "8702",
"滺" : "8703",
"漰" : "8704",
"潌" : "8705",
"漎" : "8706",
"漋" : "8707",
"漷" : "8708",
"澉" : "8709",
"澐" : "8710",
"潚" : "8711",
"濔" : "8712",
"濙" : "8713",
"瀅" : "8714",
"瀌" : "8715",
"瀞" : "8716",
"瀵" : "8717",
"瀳" : "8718",
"灋" : "8719",
"灥" : "8720",
"澁" : "8721",
"灺" : "8731",
"炅" : "8732",
"𤆬" : "8733",
"炤" : "8734",
"炁" : "8735",
"烖" : "8736",
"烓" : "8737",
"烚" : "8738",
"烳" : "8739",
"焄" : "8740",
"烱" : "8741",
"焫" : "8742",
"焯" : "8743",
"焻" : "8744",
"𤉶" : "8745",
"焱" : "8746",
"焴" : "8747",
"煇" : "8748",
"煃" : "8749",
"煁" : "8750",
"煐" : "8751",
"煝" : "8752",
"煚" : "8753",
"煟" : "8754",
"𤌚" : "8755",
"熉" : "8756",
"熿" : "8757",
"熤" : "8758",
"熳" : "8759",
"燂" : "8760",
"燋" : "8761",
"燏" : "8762",
"烨" : "8763",
"燨" : "8764",
"燡" : "8765",
"燫" : "8766",
"爥" : "8767",
"牏" : "8778",
"牐" : "8779",
"牮" : "8781",
"牶" : "8782",
"牼" : "8783",
"㹀" : "8784",
"犆" : "8785",
"犇" : "8786",
"犄" : "8787",
"犔" : "8788",
"犛" : "8789",
"犫" : "8790",
"犵" : "8794",
"犺" : "8795",
"狅" : "8796",
"狉" : "8797",
"狘" : "8798",
"狨" : "8799",
"狫" : "8800",
"狧" : "8801",
"猈" : "8802",
"猋" : "8803",
"猨" : "8804",
"猆" : "8805",
"猲" : "8806",
"獀" : "8807",
"獆" : "8808",
"獝" : "8809",
"獢" : "8810",
"獫" : "8811",
"𤢛" : "8812",
"獼" : "8813",
"獾" : "8814",
"玗" : "8818",
"玥" : "8819",
"玶" : "8820",
"珛" : "8821",
"珔" : "8822",
"珺" : "8823",
"琱" : "8824",
"琼" : "8825",
"琷" : "8826",
"琰" : "8827",
"琺" : "8828",
"琿" : "8829",
"瑄" : "8830",
"瑂" : "8831",
"瑔" : "8832",
"瑢" : "8833",
"璉" : "8834",
"瑭" : "8835",
"璂" : "8836",
"璅" : "8837",
"璊" : "8838",
"璚" : "8839",
"璩" : "8840",
"璭" : "8841",
"璦" : "8842",
"瓌" : "8843",
"瓖" : "8844",
"瓗" : "8846",
"甀" : "8850",
"甆" : "8851",
"甒" : "8852",
"甏" : "8853",
"甤" : "8856",
"畈" : "8858",
"疃" : "8859",
"疕" : "8861",
"疘" : "8862",
"疞" : "8863",
"疢" : "8864",
"疷" : "8865",
"痁" : "8867",
"疶" : "8868",
"痐" : "8869",
"痗" : "8870",
"痤" : "8871",
"痯" : "8872",
"瘃" : "8873",
"痻" : "8874",
"瘄" : "8875",
"瘈" : "8876",
"瘌" : "8877",
"瘨" : "8878",
"瘬" : "8879",
"瘭" : "8880",
"瘯" : "8881",
"瘶" : "8882",
"癉" : "8883",
"癒" : "8884",
"癙" : "8885",
"癏" : "8886",
"癠" : "8887",
"癳" : "8888",
"癿" : "8895",
"盚" : "8896",
"盵" : "8898",
"盰" : "8899",
"眊" : "8900",
"盹" : "8901",
"眂" : "8902",
"眅" : "8903",
"眚" : "8904",
"眢" : "8905",
"眎" : "8906",
"眏" : "8907",
"眕" : "8908",
"眴" : "8909",
"睊" : "8910",
"睅" : "8911",
"睠" : "8912",
"睒" : "8913",
"睙" : "8914",
"睽" : "8915",
"睻" : "8916",
"瞏" : "8917",
"瞟" : "8918",
"瞫" : "8919",
"矔" : "8920",
"矟" : "8925",
"矬" : "8926",
"矽" : "8928",
"砃" : "8929",
"砅" : "8930",
"砢" : "8931",
"砣" : "8932",
"砠" : "8933",
"砞" : "8934",
"砝" : "8935",
"砫" : "8936",
"砵" : "8937",
"砷" : "8938",
"砳" : "8939",
"砽" : "8940",
"硍" : "8941",
"硈" : "8942",
"硐" : "8943",
"硅" : "8944",
"硔" : "8945",
"硋" : "8946",
"硭" : "8947",
"硪" : "8948",
"碆" : "8949",
"碏" : "8950",
"碚" : "8951",
"碈" : "8952",
"碞" : "8954",
"碳" : "8955",
"碶" : "8956",
"硻" : "8957",
"磒" : "8958",
"碻" : "8959",
"磛" : "8960",
"磟" : "8961",
"磡" : "8962",
"𥕕" : "8963",
"𥖁" : "8964",
"礄" : "8965",
"磵" : "8966",
"磹" : "8967",
"礞" : "8968",
"礆" : "8969",
"硒" : "8970",
"碃" : "8972",
"祙" : "8980",
"禚" : "8981",
"禜" : "8982",
"禤" : "8983",
"禴" : "8984",
"秴" : "8986",
"稙" : "8987",
"稑" : "8988",
"稺" : "8989",
"穈" : "8990",
"穧" : "8991",
"穮" : "8992",
"稖" : "8993",
"窊" : "8999",
"窔" : "9000",
"窴" : "9001",
"窿" : "9002",
"竏" : "9003",
"竢" : "9004",
"竜" : "9005",
"竾" : "9006",
"笰" : "9007",
"笲" : "9008",
"笵" : "9009",
"筘" : "9010",
"筳" : "9011",
"筦" : "9012",
"筭" : "9013",
"箄" : "9014",
"箙" : "9015",
"篜" : "9016",
"篟" : "9017",
"篥" : "9018",
"篹" : "9019",
"簉" : "9020",
"篢" : "9021",
"簹" : "9022",
"簰" : "9023",
"籝" : "9024",
"籣" : "9025",
"籭" : "9026",
"粁" : "9032",
"粍" : "9033",
"粎" : "9034",
"粞" : "9035",
"粦" : "9036",
"粮" : "9037",
"粻" : "9038",
"粿" : "9039",
"粽" : "9040",
"糅" : "9041",
"糓" : "9042",
"糔" : "9043",
"糢" : "9044",
"糦" : "9045",
"糰" : "9046",
"糳" : "9047",
"糌" : "9048",
"紃" : "9052",
"紖" : "9053",
"紑" : "9054",
"紕" : "9055",
"紩" : "9056",
"紲" : "9057",
"絓" : "9058",
"綎" : "9059",
"綖" : "9060",
"絻" : "9061",
"綅" : "9062",
"綪" : "9063",
"緄" : "9064",
"緙" : "9065",
"緜" : "9066",
"緰" : "9067",
"縇" : "9068",
"緓" : "9069",
"縏" : "9070",
"緱" : "9071",
"縚" : "9072",
"縿" : "9073",
"繘" : "9074",
"繠" : "9075",
"纕" : "9076",
"纙" : "9077",
"缽" : "9083",
"罎" : "9084",
"罦" : "9086",
"罻" : "9087",
"罾" : "9088",
"羋" : "9090",
"羖" : "9091",
"羭" : "9092",
"羱" : "9093",
"羾" : "9095",
"翃" : "9096",
"翫" : "9097",
"翪" : "9098",
"耏" : "9100",
"耤" : "9101",
"耯" : "9102",
"聓" : "9105",
"聝" : "9106",
"聱" : "9107",
"肜" : "9109",
"肧" : "9110",
"肵" : "9111",
"肪" : "9112",
"胛" : "9113",
"胟" : "9114",
"脉" : "9115",
"胆" : "9116",
"脃" : "9117",
"胹" : "9118",
"脄" : "9119",
"脞" : "9120",
"脡" : "9121",
"脥" : "9122",
"脢" : "9123",
"脝" : "9124",
"脰" : "9125",
"脖" : "9126",
"脗" : "9127",
"腂" : "9128",
"腍" : "9129",
"腒" : "9130",
"腌" : "9131",
"腯" : "9132",
"腶" : "9133",
"膇" : "9134",
"膆" : "9135",
"膘" : "9136",
"膟" : "9137",
"膷" : "9138",
"臈" : "9139",
"臑" : "9140",
"臏" : "9141",
"臐" : "9142",
"臛" : "9143",
"舢" : "9152",
"舨" : "9153",
"舺" : "9154",
"舿" : "9155",
"𦩀" : "9156",
"艌" : "9157",
"艑" : "9158",
"艚" : "9159",
"艥" : "9160",
"艣" : "9161",
"艩" : "9162",
"艬" : "9163",
"茓" : "9166",
"芘" : "9167",
"苐" : "9168",
"苠" : "9169",
"荁" : "9170",
"荅" : "9171",
"茬" : "9173",
"莦" : "9174",
"菶" : "9175",
"萐" : "9176",
"菆" : "9177",
"菻" : "9178",
"葍" : "9179",
"蓌" : "9180",
"萴" : "9181",
"葄" : "9182",
"葓" : "9183",
"蒢" : "9184",
"葠" : "9185",
"蓪" : "9186",
"蓘" : "9187",
"蓺" : "9188",
"蔒" : "9189",
"蓯" : "9190",
"蓷" : "9191",
"蔋" : "9192",
"蔙" : "9193",
"𦼖" : "9194",
"薸" : "9195",
"薾" : "9196",
"藘" : "9197",
"藙" : "9198",
"蘐" : "9199",
"蘤" : "9200",
"蘺" : "9201",
"虒" : "9213",
"虖" : "9214",
"虯" : "9217",
"蚔" : "9218",
"蚠" : "9219",
"蚳" : "9220",
"蛓" : "9221",
"蜑" : "9222",
"蜆" : "9223",
"蜺" : "9224",
"蝃" : "9225",
"蜨" : "9226",
"蝓" : "9227",
"蝏" : "9228",
"蝡" : "9229",
"蝤" : "9230",
"螓" : "9231",
"蝯" : "9232",
"蝝" : "9233",
"螥" : "9234",
"螉" : "9235",
"螗" : "9236",
"螵" : "9237",
"蟁" : "9238",
"蟜" : "9239",
"蟢" : "9240",
"蠋" : "9241",
"蠐" : "9242",
"蠙" : "9243",
"蠭" : "9244",
"蠮" : "9245",
"袇" : "9252",
"衺" : "9253",
"袲" : "9254",
"袺" : "9255",
"袽" : "9256",
"袿" : "9257",
"裋" : "9258",
"褕" : "9259",
"褳" : "9260",
"褽" : "9261",
"襔" : "9262",
"𧝞" : "9263",
"襛" : "9264",
"襍" : "9265",
"𧞅" : "9266",
"襜" : "9267",
"襞" : "9268",
"襡" : "9269",
"襢" : "9270",
"襋" : "9271",
"襆" : "9272",
"襮" : "9273",
"襬" : "9274",
"觜" : "9278",
"觡" : "9279",
"觷" : "9280",
"訆" : "9282",
"訧" : "9283",
"訽" : "9284",
"詉" : "9285",
"詊" : "9286",
"詗" : "9287",
"詧" : "9288",
"詻" : "9289",
"詾" : "9290",
"誃" : "9291",
"詨" : "9292",
"諆" : "9293",
"諢" : "9294",
"謌" : "9295",
"謷" : "9296",
"譈" : "9297",
"譆" : "9298",
"譅" : "9299",
"讅" : "9300",
"讕" : "9301",
"讑" : "9302",
"讇" : "9303",
"豀" : "9314",
"豗" : "9315",
"豜" : "9316",
"豶" : "9317",
"豷" : "9318",
"豻" : "9320",
"貜" : "9321",
"貟" : "9322",
"賩" : "9323",
"𧶔" : "9324",
"趡" : "9325",
"趫" : "9326",
"趯" : "9327",
"趲" : "9328",
"跁" : "9330",
"跱" : "9331",
"跤" : "9332",
"跦" : "9333",
"跲" : "9334",
"跧" : "9335",
"踦" : "9337",
"踪" : "9338",
"䠀" : "9339",
"踤" : "9340",
"踶" : "9341",
"蹆" : "9342",
"蹏" : "9343",
"蹝" : "9344",
"蹩" : "9345",
"蹧" : "9346",
"蹷" : "9347",
"蹻" : "9348",
"蹼" : "9349",
"躗" : "9350",
"躞" : "9351",
"躘" : "9352",
"躧" : "9353",
"軘" : "9359",
"軜" : "9360",
"軝" : "9361",
"軥" : "9362",
"軻" : "9363",
"轊" : "9364",
"轑" : "9365",
"轗" : "9366",
"轝" : "9367",
"轔" : "9368",
"迮" : "9374",
"𨔁" : "9375",
"逴" : "9376",
"遫" : "9377",
"遰" : "9378",
"遻" : "9379",
"邋" : "9380",
"邘" : "9386",
"邧" : "9387",
"郉" : "9388",
"邿" : "9389",
"郈" : "9390",
"郔" : "9391",
"郚" : "9392",
"郠" : "9393",
"郪" : "9394",
"郫" : "9395",
"郳" : "9396",
"鄀" : "9397",
"鄆" : "9398",
"鄇" : "9399",
"鄋" : "9400",
"郾" : "9401",
"鄓" : "9402",
"鄍" : "9403",
"鄎" : "9404",
"鄏" : "9405",
"鄐" : "9406",
"鄑" : "9407",
"鄈" : "9408",
"鄚" : "9409",
"鄣" : "9410",
"鄤" : "9411",
"鄩" : "9412",
"鄬" : "9413",
"鄻" : "9414",
"鄿" : "9415",
"鄾" : "9416",
"酅" : "9417",
"酏" : "9426",
"醎" : "9427",
"醑" : "9428",
"醝" : "9429",
"醹" : "9430",
"醻" : "9431",
"釃" : "9432",
"釅" : "9433",
"釙" : "9437",
"釤" : "9438",
"釬" : "9439",
"釸" : "9441",
"鈒" : "9442",
"鈁" : "9443",
"鈊" : "9444",
"鈄" : "9445",
"鈃" : "9446",
"鉌" : "9447",
"鈹" : "9448",
"鉆" : "9449",
"鉚" : "9450",
"鉎" : "9451",
"鉥" : "9452",
"鉬" : "9453",
"銎" : "9454",
"銍" : "9455",
"銬" : "9456",
"鉷" : "9457",
"銈" : "9458",
"鉻" : "9459",
"銶" : "9460",
"鋘" : "9461",
"鋆" : "9462",
"鋕" : "9463",
"鋐" : "9464",
"鋰" : "9465",
"鋝" : "9466",
"鋃" : "9467",
"鋇" : "9468",
"鋂" : "9469",
"錀" : "9470",
"錖" : "9471",
"錏" : "9472",
"錶" : "9473",
"錔" : "9474",
"鍁" : "9475",
"錂" : "9476",
"錟" : "9477",
"錆" : "9478",
"鉼" : "9479",
"錩" : "9480",
"錁" : "9481",
"鍪" : "9482",
"鍫" : "9483",
"鍘" : "9484",
"鎂" : "9485",
"鍚" : "9486",
"鍈" : "9487",
"鍹" : "9488",
"鎉" : "9489",
"鎦" : "9490",
"鎤" : "9491",
"鍏" : "9492",
"鎘" : "9493",
"鎩" : "9494",
"鏊" : "9495",
"蓥" : "9496",
"鎏" : "9497",
"鏦" : "9498",
"鐄" : "9499",
"鏇" : "9500",
"鏛" : "9501",
"鏚" : "9502",
"鐓" : "9503",
"鐉" : "9504",
"鐧" : "9505",
"鐠" : "9506",
"鐐" : "9507",
"鐏" : "9508",
"鐔" : "9509",
"鐝" : "9510",
"鐩" : "9511",
"鏻" : "9512",
"鑅" : "9513",
"鑕" : "9514",
"鑫" : "9515",
"鑯" : "9516",
"閙" : "9527",
"閧" : "9528",
"闑" : "9529",
"阽" : "9532",
"陑" : "9533",
"陾" : "9534",
"隃" : "9535",
"随" : "9536",
"隵" : "9537",
"𨻧" : "9538",
"雂" : "9540",
"雃" : "9541",
"𩂯" : "9544",
"霙" : "9545",
"霣" : "9546",
"靁" : "9547",
"靝" : "9552",
"靮" : "9554",
"靺" : "9555",
"鞃" : "9556",
"靼" : "9557",
"鞌" : "9558",
"鞛" : "9559",
"鞨" : "9560",
"鞸" : "9561",
"鞹" : "9562",
"韅" : "9563",
"韡" : "9570",
"韣" : "9571",
"韹" : "9573",
"頄" : "9575",
"頲" : "9576",
"頜" : "9577",
"頟" : "9578",
"頠" : "9579",
"𩓚" : "9580",
"顒" : "9581",
"顗" : "9582",
"颮" : "9587",
"𩗗" : "9588",
"颽" : "9589",
"飜" : "9592",
"飥" : "9594",
"餈" : "9595",
"餤" : "9596",
"餵" : "9597",
"餪" : "9598",
"餫" : "9599",
"餿" : "9600",
"餺" : "9601",
"餻" : "9602",
"饍" : "9603",
"饘" : "9604",
"餜" : "9606",
"馪" : "9611",
"馵" : "9613",
"駓" : "9614",
"駔" : "9615",
"駴" : "9616",
"駽" : "9617",
"駾" : "9618",
"騆" : "9619",
"騢" : "9620",
"騯" : "9621",
"驦" : "9622",
"驫" : "9623",
"髁" : "9629",
"髳" : "9631",
"髽" : "9632",
"鬁" : "9633",
"魆" : "9635",
"魋" : "9636",
"魗" : "9637",
"魨" : "9639",
"鮀" : "9640",
"鮞" : "9642",
"鮚" : "9643",
"鯈" : "9644",
"鮿" : "9645",
"鯫" : "9646",
"鯔" : "9647",
"鯛" : "9648",
"鰂" : "9649",
"鰉" : "9650",
"鰋" : "9651",
"鰒" : "9652",
"鰐" : "9653",
"鰱" : "9654",
"鰷" : "9655",
"鱄" : "9656",
"鱎" : "9657",
"鱏" : "9658",
"鱓" : "9659",
"鱐" : "9660",
"鱧" : "9661",
"鱭" : "9662",
"鱮" : "9663",
"鱯" : "9664",
"鱨" : "9665",
"鱻" : "9666",
"鰼" : "9667",
"鳷" : "9673",
"瞗" : "9674",
"鴥" : "9675",
"鴕" : "9676",
"鵷" : "9677",
"鵻" : "9678",
"鶡" : "9679",
"鷊" : "9680",
"鷫" : "9681",
"鸂" : "9682",
"𪆵" : "9683",
"鸘" : "9684",
"麩" : "9690",
"麱" : "9691",
"麵" : "9692",
"黟" : "9694",
"黰" : "9695",
"鼪" : "9696",
"鼴" : "9697",
"龡" : "9699"}


...

  ConfirmationProcessFunctions
"""----------------------------------------------------------------------------
MODULE:
    ConfirmationProcessFunctions

DESCRIPTION:
    Processing functions for MT messages.

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  ConfirmationsCacheSingleton
"""-------------------------------------------------------------------------------
 MODULE:
     ConfirmationsCacheSingleton

 DESCRIPTION:
     This module provides Singleton class implementation for pyObjectCache.

VERSION: 3.6.3-0.5.6048
 -------------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
eNqtUk9rE0EUn5ndbNJtilBEBKEMaME92Is3KSKkQQqaSFI97OWx7kzMlv3nzERpyS2Bfg099ivtTfwWnnwzSTUWyakD83Z2Zt77
/Xnzk9waPs5XOPVDDILE5DURVLAlEUzShRcz4Y1J5P94Tgl5drcj5G+HJ+/f9F+E3I5eVU4yVSQmq0rdS9KpHGflp1yaqgxDftIf
90an785Oh4P1/bNppnlRiVkuea2qL5mQmv9J4WmeaM2zos5lIUvjyvJJpXh9Mfx4LlPjII7C8EN/NLZV+eHoMOR3rDG97be3/uqn
GCSJKXrOBI29KzJB34W37MS+8EVrSeLWFbYnDtD/oHm0xZ5BSjcQ6BrFTn2AYU7Osb2GGjYnC/bNm5PvdE7A7WNtOoj8ZgeyUpuk
TGXT0rNaKsUws2kDlPIrQEQbL831NcWL4JwFuCa/DraQOqovVAtr3LM0AkcsoPv08vG2nDXcf/X0bKEHGAwyF3TB9L6hC1wDE1YH
GzR7//Q28pr2NNGJMarxRZYatYvZKMXXMp+oHfxZhdBK7QBakBmA+xbHd8ghvXyyne4qJWrb9DIpJEATAqxeJa67AJ9nSb46UVaF
80RZU5q9tZWpzHM8/cunfUPKNaF7Y2CH+qzbcnsDqw1AVCmCBJXT7A42qmxIO14Remmt1Paav/sb3lP1MA==""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FCashSettlementMXCommonInProcessingBase
"""----------------------------------------------------------------------------
MODULE
    FCashSettlementMXCommonInProcessingBase :
    User can write custom logic to be executed in each state.

    The function prototype should be : process_state_xxx(business_process)
    where xxx is state name e.g. process_state_ready

DESCRIPTION
    This module contains the logic to handle the business process process updates.

CLASS
    Fpacs002_InProcessingBase

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FCommonGroupOutBase
"""----------------------------------------------------------------------------
MODULE:
    FCommonGroupOutBase

DESCRIPTION:
    A module for common functions used across out base files

VERSION: 3.6.3-0.5.6048
----------------------------------------------------------------------------"""

from FMTOutBase import FMTOutBase


class FCommonGroupOutBase(FMTOutBase):
    def __init__(self, acm_obj, swift_obj):
        super(FCommonGroupOutBase, self).__init__(acm_obj, swift_obj)



...

  FExternalObject
"""----------------------------------------------------------------------------
MODULE:
    FExternalObject

DESCRIPTION:
    Wraparound to simplify external object storage in the ADS. The idea is to
    use existing tables in 2016.2, and then possibly add read tables for
    external objects in 2016.4.

FUNCTIONS:
    Derived classes from this class implements following methods.
    Read():
        Read the existing FExternalObject from database using its Oid().
    New():
        Creates a new FExternalObject.
    Commit():
        Commits the FExternalObject in the database.
    Delete():
        Deletes the FExternalObject from the database.
    pp():
        Prints the details of created / Committed FExternalObject
    ExtType():
        Get and Set FExternalObject Type.
    Subject():
        Set or Get ACM object for which the FExternalObject is created.
    SubjectType():
        Get and Set type of ACM object like FInstrument, FTrade.
    SubType():
        Get and Set the sub message type for ExternalObject like "MT545".
        Possible values in extendable ChoiceList XOBJextType
    Data():
        Get and Set data to the FExternalObject.
    DataSize():
        Get method for fetching size of data in FExternalObject.
    StorageType():
        Get and Set the type of data to store in FExternalObject like
        "PythonDict", "TXT" etc. Possible values in extendable ChoiceList
        XOBJstorageType
    Source():
        Get and Set the source of the data stored in the FExternalObject,
        a string like the AMB message ID, file name, etc.
    SourceType():
        Get and Set the type of the External source id like "ISIN", or
        "CustodianID" of the FExternalObject. Possible values in extendable
        ChoiceList XOBJsourceType
    ReconciliationDocument():
        Get and Set the ReconciliationDocument to created FExternalObject.
    ReconciliationItem():
        Get and Set the ReconciliationItem linked to FExternalObject
    Oid():
        Get unique oid for created FExternalObject.
    ExtReferences(sourceKey=None, subject=None, extType=None, sourceType=None,
        subtype=None, subjectType=None):
        Get the external item based on the search criteria.
    GetExtObjectFromReconItem(rItem=None):
        Get FExternalObject object from given ReconciliationItem

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FFreeFormatOutBase
"""----------------------------------------------------------------------------
MODULE:
    FFreeFormatOutBase

DESCRIPTION:
    A module for common functions used across free format messages out base files

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import FSwiftWriterUtils
import FFreeFormatUtils
from FCommonGroupOutBase import FCommonGroupOutBase
import FSwiftMLUtils

class FFreeFormatOutBase(FCommonGroupOutBase):
    def __init__(self, acm_obj, swift_obj):
        super(FFreeFormatOutBase, self).__init__(acm_obj, swift_obj)
        
    # getter
    def transaction_reference_20(self):
        """ Returns a dictionary as {'seqnbr': <value>, 'seq_ref': <value>} """
        settlement_prefix = FFreeFormatUtils.get_settlement_reference_prefix()
        cash_settlement_out_config = FSwiftWriterUtils.get_config_from_fparameter('FCashOut_Config')
        include_tradeno_in_tag_20 = FSwiftMLUtils.incude_trade_no_in_tag20(cash_settlement_out_config)
        val = FSwiftMLUtils.get_sender_ref(self.acm_obj, settlement_prefix, True, include_tradeno_in_tag_20)
        return val


    # formatter
    def _format_transaction_reference_20(self, val):
        senders_reference = FSwiftMLUtils.format_sender_reference(val)
        senders_reference = '{}{}'.format(senders_reference, self.sender_ref_end_char)
        return senders_reference

    # getter
    def related_reference_21(self):
        """ Returns related settlement number as string. """
        msg_typ = self.child_mt_type[2:]
        related_ref = "%s-%s-%s-%s" % (str(FFreeFormatUtils.get_settlement_reference_prefix()), str(self.acm_obj.Oid()),
                                        str(FFreeFormatUtils.get_message_version_number(self.acm_obj)),str(msg_typ)[0:3])
        return related_ref

    # formatter
    def _format_related_reference_21(self, val):
        return val

    # getter
    def narrative_79(self):
        """ Returns the narrative description as string """
        values_dict = {}
        values_dict['narrative'] = FFreeFormatUtils.get_narrative_description(self.acm_obj, self.swift_message_type)
        return values_dict

    # formatter
    def _format_narrative_79(self, val):
        narrative = val.get('narrative')
        sep = val.get('sep')
        lines = FSwiftWriterUtils.split_text_on_character_limit(narrative, 50)
        val = FSwiftWriterUtils.allocate_space_for_n_lines(35, lines)
        return str(val)


...

  FFreeFormatUtils
"""----------------------------------------------------------------------------
MODULE:
    FFreeFormatUtils

DESCRIPTION:
    A module for common functions used across Free Format messages.

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""

import FSwiftWriterUtils
import FSwiftMLUtils

writer_config = FSwiftMLUtils.Parameters('FSwiftWriterConfig')

def get_sequence_number(settlement):
    """ Get the sequence number for the Settlement
    :return:
    """
    seq_number = ''
    if settlement:
        seq_number = settlement.Oid()
    return seq_number


def get_settlement_reference_prefix():
    """ Method to get settlement reference prefix to be sent in the MT message. """
    cash_settlement_out_config = FSwiftWriterUtils.get_config_from_fparameter('FCashOut_Config')
    prefix = getattr(cash_settlement_out_config, 'SettlementMsgIdPrefix', None)
    if not prefix:
        prefix = str(getattr(writer_config, 'SettlementMsgIdPrefix', 'FAS'))
    return prefix


def get_message_version_number(fObject, is_free_text_msg = False, child_mt_type=''):
    """ Method to get the message version number
    :param fObject: object from which message version number is to be fetched
    :param is_free_text_msg: flag indicating is_free_text_msg
    :return: message version number
    """
    msg_version_number = fObject.VersionId()
    if is_free_text_msg:
        msg_version_number = str(msg_version_number) + 'F'
        if child_mt_type and child_mt_type == 'MT103':
            msg_version_number = str(msg_version_number) + 'O'
        elif child_mt_type and child_mt_type == 'MT199':
            msg_version_number = str(msg_version_number) + 'F'
    return str(msg_version_number)


def get_narrative_description(settlement, mt_type=None):
    """ Optional field 79 for n92 Settlement.
    :param settlement: settlement object
    :param mt_type: message type
    :return: narrative description
    """
    narrative_description = ''
    if mt_type in ['MT199', 'MT299']:
        ccy = settlement.Currency().Name()
        amount = str(abs(settlement.Amount()))
        value_date = settlement.ValueDay()
        original_value_day = settlement.Children()[-1].ValueDay()
        related_ref = "%s-%s-%s" % (str(get_settlement_reference_prefix()), str(settlement.Oid()), str(get_message_version_number(settlement)))
        narrative_description = """TODAY WE HAVE SENT YOU A PAYMENT INSTRUCTION UNDER REFERENCE {0} FOR {1} {2} WITH VALUE DATE {3}.WITH REGARDS TO THIS PAYMENT WE HEREBY INSTRUCT YOU TO ARRANGE A BACKVALUATION FROM VALUE DATE {3} TO VALUE DATE {4}.""".format(related_ref, ccy, amount, value_date, original_value_day)
    else:
        pass
        """if is_cancellation(settlement):
            related_settlement = get_related_settlement(settlement)
            narrative_description = 'Settlement Id %s was due to %s' % (related_settlement.Oid(), related_settlement.ValueDay())
        elif is_nak_cancellation(settlement):
            narrative_description = 'Cancelling previous MT%s' % (get_original_message_type(settlement))"""

    return narrative_description


...

  FMT0Out
"""----------------------------------------------------------------------------
MODULE:
    FMT0Out

DESCRIPTION:
    A default template for confirmations that do not have any MT type.

VERSION: 3.6.3-0.5.6048
----------------------------------------------------------------------------"""
import FMT0OutBase
import FSwiftWriterLogger
notifier = FSwiftWriterLogger.FSwiftWriterLogger('SwiftWriter', 'FSwiftWriterNotifyConfig')

class FMT0(FMT0OutBase.FMT0Base):

    def __init__(self, acm_obj, swift_obj):
        self.acm_obj = acm_obj
        self.swift_obj = swift_obj
        super(FMT0, self).__init__(acm_obj, swift_obj)

    # To override existing mappings use below methods to write your own logic
    # As well as a new get_method could be added, value returned by such get_method would be considered in calculating checksum
    """
                'get_codeword_newline',
                'get_narrative_saperator',
                'get_swift_message_type',
                'get_partyA_option',
                'get_partyA_account',
                'get_partyA_bic',
                'get_partyA_name',
                'get_partyA_address',
                'get_partyB_option',
                'get_partyB_account',
                'get_partyB_bic',
                'get_partyB_name',
                'get_partyB_address',
                'get_receiver_bic',
                'get_sender_bic',                
                'get_network',
                'get_trade_date',
                'get_confirmation_template',
                'get_confirmation_event_name',
                'get_confirmation_reset_oid',
                'get_confirmation_transport',
                'get_confirmation_trade_oid',
                'get_confirmation_cashflow'
    """

...

  FMT0OutBase
"""----------------------------------------------------------------------------
MODULE:
    FMT0OutBase

DESCRIPTION:
    Base class for a default template for confirmations that do not have any MT type (FMT0Out).

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import acm
import FSwiftMLUtils
import FSwiftWriterLogger
import FSwiftOperationsAPI
#from FSettlementEnums import SettlementType
SettlementType = FSwiftOperationsAPI.GetSettlementTypeEnum()
#from FConfirmationEnums import ConfirmationType


notifier = FSwiftWriterLogger.FSwiftWriterLogger('SwiftWriter', 'FSwiftWriterNotifyConfig')
writer_config = FSwiftMLUtils.Parameters('FSwiftWriterConfig')

sharedVariables = dict()

def set_money_flows(confirmation):
    global sharedVariables
    sharedVariables.clear()
    calcSpace = None
    trade = confirmation.Trade()
    mt = FSwiftMLUtils.calculate_mt_type_from_acm_object(confirmation)
    resetCashFlow = ''
    if confirmation.Reset():
        resetCashFlow = confirmation.Reset().CashFlow()
    moneyflows = trade.MoneyFlows(None, None)
    for aMoneyFlow in moneyflows:
        if aMoneyFlow.Type() == SettlementType.REDEMPTION_AMOUNT and mt == '330':
            sharedVariables['moneyFlow'] = aMoneyFlow
        if resetCashFlow == aMoneyFlow.SourceObject() and mt == '362':
            sharedVariables['moneyFlow'] = aMoneyFlow
        elif aMoneyFlow.Type() in [SettlementType.PREMIUM, SettlementType.PREMIUM_2]:
            if not calcSpace:
                calcSpace = FSwiftMLUtils.get_calculation_space()
                sharedVariables['calcSpace'] = calcSpace
            calcValue = aMoneyFlow.Calculation().Projected(calcSpace)
            if calcValue:
                amount = calcValue.Number()
                if acm.Operations.IsValueInfNanOrQNan(amount):
                    amount = 0
                if amount > 0:
                    sharedVariables['buyMoneyFlow'] = aMoneyFlow
                    sharedVariables['buyAmount'] = amount
                else:
                    sharedVariables['sellMoneyFlow'] = aMoneyFlow
                    sharedVariables['sellAmount'] = amount

            if aMoneyFlow.Type() == SettlementType.PREMIUM:
                sharedVariables['moneyFlow'] = aMoneyFlow

class FMT0Base(object):
    def __init__(self, acm_obj, swift_obj):
        self.acm_obj = acm_obj
        self.swift_obj = swift_obj
        self.swift_message_type = 'MT0'
        set_money_flows(self.acm_obj)

    # SwiftMTBase
    # ------------------------------ value of codeword newline ----------------------
    def get_codeword_newline(self):
        codeword_newline = getattr(writer_config,"CodewordNewline",'codeword')
        return codeword_newline

    # -------------------------- value of narrative separator -----------------------
    def get_narrative_saperator(self):
        separator = getattr(writer_config,"Separator",'newline')
        return separator

    # -------------------------- value of swift message type ------------------------
    def get_swift_message_type(self):
        return FSwiftMLUtils.calculate_mt_type_from_acm_object(self.acm_obj)

    # SwiftMTConfirmation
    # ------------------------ value of partyA option ----------------------
    def get_partyA_option(self):
        return ''

    # ------------------------ value of partyA account ----------------------
    def get_partyA_account(self):
        partyAAccount = ''
        moneyFlow = sharedVariables.get('moneyFlow')
        if moneyFlow:
            acqaccount = moneyFlow.AcquirerAccount()
            if acqaccount:
                partyAAccount = acqaccount.Account()
        return partyAAccount

    # ------------------------ value of partyA bic ------------------------
    def get_partyA_bic(self):
        partyABic = ''
        moneyFlow = sharedVariables.get('moneyFlow')
        if moneyFlow:
            acqaccount = moneyFlow.AcquirerAccount()
            if acqaccount:
                partyABic = FSwiftMLUtils.get_party_bic(acqaccount)
        return partyABic

    # ------------------------- value of partyA name ------------------------
    def get_partyA_name(self):
        partyAName = ''
        moneyFlow = sharedVariables.get('moneyFlow')
        if moneyFlow:
            use_party_fullname = getattr(writer_config, "UsePartyName",FSwiftMLUtils.USE_PARTY_FULL_NAME)
            partyAName = FSwiftMLUtils.get_party_full_name(moneyFlow.Acquirer(),use_party_fullname)
        return partyAName

    # ------------------------- value of partyA address ------------------------
    def get_partyA_address(self):
        partyAAddress = ''
        moneyFlow = sharedVariables.get('moneyFlow')
        if moneyFlow:
            partyAAddress = FSwiftMLUtils.get_party_address(moneyFlow.Acquirer())
        return partyAAddress

    # ----------------- value of partyB option ----------------
    def get_partyB_option(self):
        partyBOption = ''
        return partyBOption

    # ---------------- value of partyB account ---------------
    def get_partyB_account(self):
        partyBAccount = ''
        moneyFlow = sharedVariables.get('moneyFlow')
        if moneyFlow:
            cpaccount = moneyFlow.CounterpartyAccount()
            if cpaccount:
                partyBAccount = cpaccount.Account()
        return partyBAccount

    # --------------- value of partyB bic ---------------
    def get_partyB_bic(self):
        partyBBic = ''
        moneyFlow = sharedVariables.get('moneyFlow')
        if moneyFlow:
            cp = moneyFlow.Counterparty()
            if cp:
                partyBBic = cp.Swift()
            cpaccount = moneyFlow.CounterpartyAccount()
            if cpaccount:
                partyBBic = FSwiftMLUtils.get_party_bic(cpaccount)
        return partyBBic

    # --------------- get partyB name ----------------
    def get_partyB_name(self):
        partyBName = ''
        moneyFlow = sharedVariables.get('moneyFlow')
        if moneyFlow:
            cp = moneyFlow.Counterparty()
            if cp:
                use_party_fullname = getattr(writer_config,"UsePartyName",FSwiftMLUtils.USE_PARTY_FULL_NAME)
                partyBName = FSwiftMLUtils.get_party_full_name(cp,use_party_fullname)
        return partyBName

    # -------------- get partyB address -----------------
    def get_partyB_address(self):
        partyBAddress = ''
        moneyFlow = sharedVariables.get('moneyFlow')
        if moneyFlow:
            cp = moneyFlow.Counterparty()
            if cp:
                partyBAddress = FSwiftMLUtils.get_party_address(cp)
        return partyBAddress

    # --------------- get receiver bic ----------------
    def get_receiver_bic(self):
        '''Returns SWIFT bic code of settlement receiver.
        This field goes into {2:Application Header Block} -- Receiver Information.'''

        if str(getattr(writer_config, 'SwiftLoopBack',"")) == 'True':
            return str(getattr(writer_config, 'ReceiverBICLoopBack',""))
        else:
            return self.acm_obj.CounterpartyAddress()

    # --------------- get senders bic ----------------
    def get_sender_bic(self):
        '''Returns SWIFT bic code of the Acquirer of the settlement.
        This field goes into {1: Basic Header Block} -- Address of the Sender'''

        if str(getattr(writer_config, 'SwiftLoopBack',"")) == 'True':
            return str(getattr(writer_config, 'SenderBICLoopBack',""))
        else:
            return self.acm_obj.AcquirerAddress()


    # ------------- get network ----------------
    def get_network(self):
        network = ''
        confirmation = self.acm_obj
        if confirmation.ConfTemplateChlItem():
            if confirmation.ConfTemplateChlItem().Name() == 'SWIFT':
                network = confirmation.ConfTemplateChlItem().Name()
        return network

    # ------------- get trade date ------------
    def get_trade_date(self):
        confirmation = self.acm_obj
        assert confirmation.Trade(), "The confirmation has no trade reference"
        return confirmation.Trade().TradeTime()[:10]

    # Confirmation
    # -------------- get template name -------------
    def get_confirmation_template(self):
        return self.acm_obj.ConfTemplateChlItem().Name()

    # -------------- get event name --------------
    def get_confirmation_event_name(self):
        return self.acm_obj.EventChlItem().Name()

    # -------------- get reset oid ---------------
    def get_confirmation_reset_oid(self):
        if self.acm_obj.Reset():
            return self.acm_obj.Reset().Oid()
        return None

    # ------------- get confirmation transport -----------
    def get_confirmation_transport(self):
        return self.acm_obj.Transport()

    # ------------- get confirmation trade oid -------------
    def get_confirmation_trade_oid(self):
        return self.acm_obj.Trade().Oid()

    # ------------ get confirmation cashflow -------------
    def get_confirmation_cashflow(self):
        return self.acm_obj.CashFlow()

    def _attributes_to_compare_for_amendment_generation(self):
        """ Return a list of swift fields whose values will be used to create a checksum. There should be a method corresponding to
           swift field in the class. This method should return value of that field taken from acm API."""

        return [get_func for get_func in dir(self) if get_func.startswith('get_')]


...

  FMT999Out
"""----------------------------------------------------------------------------
MODULE:
    FMTx99Out

DESCRIPTION:
    OPEN EXTENSION MODULE
    FMT699 class for user customization.
    User can override the mapping defined in the base class FMT699OutBase.
    This class can be populated using either swift data or an acm object.
    See FMT699OutBase for extracting the values from acm

VERSION: 3.6.3-0.5.6048
----------------------------------------------------------------------------"""


import FMTx99OutBase
import FSwiftWriterLogger

notifier = FSwiftWriterLogger.FSwiftWriterLogger('SwiftWriter', 'FSwiftWriterNotifyConfig')


class FMT999(FMTx99OutBase.FMTx99Base):

    def __init__(self, acm_obj, swift_obj):
        swift_message_type = 'MT999'
        super(FMT999, self).__init__(acm_obj, swift_message_type, swift_obj)

    # To override existing mappings use below methods to write your own logic
    """
    narrative_79
    related_reference_21
    transaction_reference_20
    get_user_data
    """


class FMT999MessageHeader(FMTx99OutBase.FMTx99OutBaseMessageHeader):

    def __init__(self, acm_obj, swift_msg_tags):
        self.acm_obj = acm_obj
        self.swift_msg_tags = swift_msg_tags
        self.mt_type = '999'
        super(FMT999MessageHeader, self).__init__(self.acm_obj, self.mt_type, swift_msg_tags)

    # To override existing mappings use below methods to write your own logic

    """
    application_id
    service_id
    sender_logical_terminal_address
    session_number
    sequence_number
    input_or_output
    message_priority
    message_type
    receiver_logical_terminal_address
    delivery_monitoring
    non_delivery_notification_period
    service_identifier
    banking_priority_code
    message_user_reference
    validation_flag
    """



class FMT999NetworkRules(FMTx99OutBase.FMTx99OutBaseNetworkRules):

    def __init__(self, swift_message_obj, swift_message, acm_obj):
        super(FMT999NetworkRules, self).__init__(swift_message_obj, swift_message, acm_obj)


...

  FMTColumnCreator
"""----------------------------------------------------------------------------
MODULE
    FMTColumnCreator

DESCRIPTION
    Creates the package specific extension modules like F54XColumns/
    MT30XColumns. The columns created by package dataPrep script are used in the
    matching and pairing views.
    Based on the attributes defined FMTnnn_Match columns are created to show the
    ours and theirs value.

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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
/+85""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FMTColumnHook
"""----------------------------------------------------------------------------
MODULE:
    FMTColumnHook

DESCRIPTION:
    This module provides the functions to regulate the contents of the parameterize
    columns on the settlement/confirmation sheet.

FUNCTIONS:
          get_column_value_for_incoming_confirmation_msg() - Implementation for the incoming confirmation Swift messages.
          get_column_value_for_outgoing_confirmation_msg() - Implementation for the outgoing confirmation Swift messages.
          get_column_value_for_incoming_settlement_msg()   - Implementation for the incoming settlement Swift messages.
          get_column_value_for_outgoing_settlement_msg() - Implementation for the outgoing confirmation Swift messages.
          get_column_value_for_incoming_trade_msg() - Implementation for the incoming trade Swift messages.


VERSION: 3.6.3-0.5.6048
----------------------------------------------------------------------------"""
try:
    import FMTColumnHookBase
    import FSwiftWriterLogger
    import FSwiftWriterAPIs
    import acm
    notifier = FSwiftWriterLogger.FSwiftWriterLogger('SwiftWriter', 'FSwiftWriterNotifyConfig')
except Exception as e:
    import FSwiftReaderLogger

    notifier = FSwiftReaderLogger.FSwiftReaderLogger('SwiftReader', 'FSwiftReaderNotifyConfig')
import FSwiftMLUtils

class FMTColumnHook(FMTColumnHookBase.FMTColumnHookBase):    
     
    
    '''---------------------------------------------------------------------------------------
       Modify or Provide your implementation to control the values on the columns for
       incoming Swift confirmation messages.e.g. MT300, MT305, MT320, MT330
       ---------------------------------------------------------------------------------------'''
    
    """
    def get_column_value_for_incoming_confirmation_msg(self, enum_val, bpr_list):
         Get value of the enum for populating incoming confirmation message column in GUI
        :param enum_val: enum value of the column
        :param bpr_list: list of bpr on settlement object
        :return: tag value
    
        

    
    def get_column_value_for_outgoing_confirmation_msg(self, enum_val, bpr_list):
        Get value of the enum for populating confirmation column in GUI
        :param enum_val: enum value of the column
        :param bpr_list: list of bpr on confirmation object
        :return: tag value
             
    
    
    '''---------------------------------------------------------------------------------------
       Modify or Provide your implementation to control the values on the columns for
       incoming Swift settlement messages.e.g. MT544-MT547, MT900
       ---------------------------------------------------------------------------------------'''
    
    
    def get_column_value_for_incoming_settlement_msg(self, enum_val, bpr_list, sett_id):
        Get value of the enum for populating incoming settlement message column in GUI
        :param enum_val: enum value of the column
        :param bpr_list: list of bpr on settlement object
        :param sett_id: settlement object Id
        :return: tag value
        
    
    
    
    '''---------------------------------------------------------------------------------------
       Modify or Provide your implementation to control the values on the columns for
       outgoing Swift settlement messages.e.g. MT540-MT543, MT210, MT103
       ---------------------------------------------------------------------------------------'''
    
    
    def get_column_value_for_outgoing_settlement_msg(self, enum_val, bpr_list, sett_id):
        Get value of the enum for populating settlement column in GUI
        :param enum_val: enum value of the column
        :param bpr_list: list of bpr on settlement object
        :param sett_id: Id of settlement object
        :return: tag value
    
    
    '''---------------------------------------------------------------------------------------
       Modify or Provide your implementation to control the values on the columns for
       incoming Swift  messages.e.g. MT515
       ---------------------------------------------------------------------------------------'''
    
    def get_column_value_for_incoming_trade_msg(self, enum_val, bpr_list):
        Get value of the enum for populating trade column in GUI
        :param enum_val: enum value of the column
        :param bpr_list: list of bpr on trade object
        :return: tag value
    
    
    
    
    """





...

  FMTColumnHookBase
"""----------------------------------------------------------------------------
MODULE:
    FMTColumnHookBase

DESCRIPTION:
    This module provides the base class for the FMTColumnHook  implementation

CLASS:
    FMTColumnHookBase

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user end.
    ----------------------------------------------------------------------------"""

try:
    import FSwiftWriterLogger
    import FSwiftWriterAPIs
    import acm
    notifier = FSwiftWriterLogger.FSwiftWriterLogger('SwiftWriter', 'FSwiftWriterNotifyConfig')
except Exception as e:
    import FSwiftReaderLogger

    notifier = FSwiftReaderLogger.FSwiftReaderLogger('SwiftReader', 'FSwiftReaderNotifyConfig')
import FSwiftMLUtils

    
    
class FMTColumnHookBase(object):    
        
        
    def get_bpr_details_settlement_in(self, bpr_list):
        """ Get bpr details for incoming settlements
        :param bpr_list: list of bprs on settlement
        :return: list of tags of the swift message on the bpr
        """
        tag_val_list = []
        parent_bpr = None
    
        for bpr in bpr_list:
            mt_msg, isderived = FSwiftMLUtils.get_generic_swift_data_from_bpr(bpr)
            bpr_mt_type = FSwiftMLUtils.FSwiftExternalObject.get_mt_type_from_external_object(bpr.Subject())
            if FSwiftWriterAPIs.get_swift_format_of_message(bpr_mt_type) == 'MT':
                if not isderived:
                    tag_val_list += FSwiftMLUtils.swift_message_to_list(mt_msg)
                else:
                    parent_bpr = FSwiftMLUtils.get_parent_bpr(bpr)
                    mt_msg, isderived = FSwiftMLUtils.get_generic_swift_data_from_bpr(parent_bpr)
                    tag_val_list = FSwiftMLUtils.swift_message_to_list(mt_msg)
    
        return tag_val_list, parent_bpr


    def get_details_from_bpr(self, bpr_list):
        """ Get dictionary of bpr id and tag value list
        :param bpr_list: list of the bpr
        :return: dict: #{bpr.Oid():(mt_type, tag_value_list)}
        """
    
        tag_val_list = []
        mt_type = None
        bpr = None
        dict_bpr = {}
        for bpr in bpr_list:
            bpr_mt_type = FSwiftMLUtils.FSwiftExternalObject.get_mt_type_from_external_object(bpr.Subject())
    
            if FSwiftWriterAPIs.get_swift_format_of_message(bpr_mt_type) == 'MT':
                mt_msg = FSwiftMLUtils.get_swift_data_from_bpr(bpr)
                if mt_msg:
                    mt_type = FSwiftMLUtils.get_mt_type_from_swift(mt_msg)
                    tag_val_list = FSwiftMLUtils.swift_message_to_list(mt_msg)
                    dict_bpr[bpr.Oid()] = (mt_type, tag_val_list)
                else:
                    dict_bpr[bpr.Oid()] = (None, None)
            elif FSwiftWriterAPIs.get_swift_format_of_message(bpr_mt_type) == 'MX':
                dict_bpr[bpr.Oid()] = (None, None)
        return dict_bpr
    
    
    def _get_column_value_for_outgoing_object(self, enum_val, bpr_list, sett_id= None):
        """ Get value of the enum for populating into the column in GUI
        :param enum_val: enum of the tag name
        :param bpr_list: list of the bpr on current object
        :return:
        """
        try:
            tag_name = self.get_tag_name(enum_val)
            dict_bpr = self.get_details_from_bpr(bpr_list)
            for bpr in bpr_list:
                #ext_item = FSwiftMLUtils.FSwiftExternalObject.get_external_object_from_bpr(bpr)
                #bpr_mt_type = FSwiftMLUtils.FSwiftExternalObject.get_mt_type_from_external_object(ext_item)
                if tag_name in ['ErrorText', 'BusinessProcessCurrentState', 'StateChart', 'NackStatusCode',
                                'NackStatus', 'MTTypes']:
                    if not dict_bpr:
                        bpr_text = self.handle_bpr_text(tag_name, bpr)
                    else:
                        bpr_text = self.handle_bprs_text(dict_bpr, tag_name)
                    if bpr_text is not None:
                        bpr_text.replace("Narrative", "")
                        return bpr_text
    
            tag_name_final = ''
            for mt_type_frm_bpr, swift_msg_list in list(dict_bpr.values()):
                if swift_msg_list:
                    for tags in swift_msg_list:
                        if tag_name == tags[0]:
                            tag_name_final += tags[1] + '; '
    
            return tag_name_final[:-2] if tag_name_final else ''
        except Exception as e:
            return "Error occurred while processing _get_column_value_for_outgoing_object: %s" % str(e)
    
    
    def handle_bprs_text(self, dict_bpr, tag_name):
        """ tag_name : tag_name provided by user on column to be fetched Ex: StateChart
        mt_type : In case user specifies the tag_name for specific MT_TYPE like MT103:StateChart, then mt_type will be MT103
        :param dict_bpr: dictionary of bpr id and tag value list
    
        :param tag_name: name of the swift tag
        :return:
        """
        import acm
        bpr_text = ''
        for bpr_id, mttype_tagvalue in dict_bpr.items():
            bpr = acm.FBusinessProcess[bpr_id]
            #mt_type_from_dict, tag_value_list = mttype_tagvalue
            text = self.handle_bpr_text(tag_name, bpr)
            if  text:
                bpr_text = bpr_text + text + '; '
        return bpr_text[:-2] if bpr_text else ''
    
    
    def handle_bpr_text(self, tag, bpr):
        """ Get bpr name as text
        :param tag: name of the tag
        :param bpr: bpr of to check tag on
        :return: str: name of the state chart or error
        """
        if bpr:
            if 'ErrorText' == tag:
                params = bpr.CurrentStep().DiaryEntry().Parameters()
                if params.HasKey('Error'):
                    return str(params['Error'])
                elif params.HasKey('Error1'):
                    return str(params['Error1'])
            elif tag in ['BusinessProcessCurrentState', 'DerivedBusinessProcessCurrentState']:
                return bpr.CurrentStep().State().Name()
            elif tag in ['StateChart', 'DerivedStateChart']:
                return bpr.StateChart().Name()
            elif tag == 'NackStatus':
                params = bpr.CurrentStep().DiaryEntry().Parameters()
                if params.HasKey('error_desc'):
                    return str(params['error_desc'])
            elif tag == 'NackStatusCode':
                params = bpr.CurrentStep().DiaryEntry().Parameters()
                if params.HasKey('error_code'):
                    return str(params['error_code'])
            elif tag == 'MTTypes':
                ext_item = FSwiftMLUtils.FSwiftExternalObject.get_external_object_from_bpr(bpr)
                bpr_mt_type = FSwiftMLUtils.FSwiftExternalObject.get_mt_type_from_external_object(ext_item)
                return bpr_mt_type
        return None
    
    
    def get_tag_name(self, tags):
        """ Get tag name when using tag on specific MT type.
        possible values of tags StateChart
        25D_Status
        StateChart or BusinessProcessCurrentState
        :param tags: tag name
        :return: tag name
        """
        tag_list = tags.split('_', 1)
        tag_mt = tag_list[0]
        return tag_mt
    
    
    def get_column_value_for_incoming_trade_msg(self, enum_val, bpr_list):
        """ Get value of the enum for populating incoming trade message column in GUI
            :param enum_val: enum value of the column
            :param bpr_list: list of bpr on trade object
            :return: tag value
        """
        try:
            tag_name_final = self.get_column_value_for_incoming_confirmation_msg(enum_val, bpr_list)
            return tag_name_final[:-2] if tag_name_final else ''
        except Exception as e:
            return "Error occurred while processing get_column_value_for_incoming_trade_msg: %s" % str(e)
    
    def get_column_value_for_incoming_confirmation_msg(self, enum_val, bpr_list):
        """ Get value of the enum for populating incoming confirmation message column in GUI
            :param enum_val: enum value of the column
            :param bpr_list: list of bpr on settlement object
            :return: tag value
        """
        try:
            dict_bpr = self.get_details_from_bpr(bpr_list)  # {bpr.Oid():(mt_type, tag_value_list)}
            tag_name = self.get_tag_name(enum_val)
            if tag_name in ['ErrorText', 'BusinessProcessCurrentState', \
                            'DerivedBusinessProcessCurrentState', 'StateChart', 'DerivedStateChart', 'MTTypes']:
                bpr_text = self.handle_bprs_text(dict_bpr, tag_name)
                if bpr_text is not None:
                    return bpr_text
    
            tag_name_final = ''
            for mt_type_frm_bpr, swift_msg_list in list(dict_bpr.values()):
                if swift_msg_list:
                    for tags in swift_msg_list:
                        if tag_name == tags[0] :
                            tag_name_final += tags[1] + '; '
    
            return tag_name_final[:-2] if tag_name_final else ''
        except Exception as e:
            return "Error occurred while processing get_column_value_for_incoming_confirmation_msg: %s" % str(e)
    
    def get_settlement_state_bpr_state(self, sett_id, settlement_state_statechart_name):
        """This function return the current state for the BPR FSwiftSettlementState attached to acm object which is link to give BPR in bpr_list"""
        try:
            import acm
            acm_obj = acm.FSettlement[str(sett_id)]
            settlement_state_bpr = FSwiftMLUtils.get_bpr_from_subject_statechart(acm_obj, settlement_state_statechart_name)
            if not settlement_state_bpr:
                settlement_state_statechart_name = FSwiftMLUtils.CBPRPlus_SETTLEMENT_STATE_STATE_CHART_NAME
                if settlement_state_statechart_name:
                    settlement_state_bpr = FSwiftMLUtils.get_bpr_from_subject_statechart(acm_obj,
                                                                                     settlement_state_statechart_name)
            if not settlement_state_bpr:
                settlement_state_statechart_name = FSwiftMLUtils.SAMOS_SETTLEMENT_STATE_STATE_CHART_NAME
                if settlement_state_statechart_name:
                    settlement_state_bpr = FSwiftMLUtils.get_bpr_from_subject_statechart(acm_obj,
                                                                                     settlement_state_statechart_name)
            if settlement_state_bpr:
                current_state = settlement_state_bpr.CurrentStep().State().Name()
                return current_state
        except:
            import  traceback
            traceback.print_exc()              
    
    def get_column_value_for_outgoing_confirmation_msg(self, enum_val, bpr_list):
        """ Get value of the enum for populating confirmation column in GUI
        :param enum_val: enum value of the column
        :param bpr_list: list of bpr on confirmation object
        :return: tag value
        """
        return self._get_column_value_for_outgoing_object(enum_val, bpr_list)    
    
    '''---------------------------------------------------------------------------------------
       Modify or Provide your implementation to control the values on the columns for
       incoming Swift settlement messages.e.g. MT544-MT547, MT900
       ---------------------------------------------------------------------------------------'''  
    
        
    
    def get_column_value_for_incoming_settlement_msg(self, enum_val, bpr_list, sett_id):
        """ Get value of the enum for populating incoming settlement message column in GUI
            :param enum_val: enum value of the column
            :param bpr_list: list of bpr on settlement object
            :param sett_id: settlement object Id
            :return: tag value
        """
        try:
            swift_msg_list, parent_bpr = self.get_bpr_details_settlement_in(bpr_list)
            tag_name = self.get_tag_name(enum_val)
            bpr_text = None
            settlement_state_chart_name = FSwiftMLUtils.SETTLEMENT_STATE_STATE_CHART_NAME
            tag_name_final = ''
            for tags in swift_msg_list:
                if tag_name == tags[0]:
                    tag_name_final += tags[1] + ', '

            if tag_name == '24B':
                tag_name_final = self.get_value_for_reason_desc(swift_msg_list, tag_name_final[:-2])
                return tag_name_final
    
            if tag_name == 'pacs004T2IntrBkSttlmAmt':
                tag_name_final = self.get_difference(bpr_list)
                return tag_name_final
    
            if tag_name == 'SettlementState' :
                bpr_state = self.get_settlement_state_bpr_state(sett_id, settlement_state_chart_name)
                return bpr_state
    
            if tag_name_final:
                return tag_name_final[:-2]
            for bpr in bpr_list:
                #bpr_mt_type = bpr.AdditionalInfo().SwiftMessageType()
                if parent_bpr:
                    # bpr = parent_bpr
                    bpr_text = self.handle_bpr_text(tag_name, parent_bpr)
                    if bpr_text == 'MT950':
                        bpr_text = 'FSwiftParent'
                if bpr_text:
                    temp_bpr_text = self.handle_bpr_text(tag_name, bpr)
                    if temp_bpr_text:
                        temp_bpr_text = temp_bpr_text.replace("MT950Derived", "MT950")
                        bpr_text = bpr_text + ' ;' + temp_bpr_text
                else:
                    bpr_text = self.handle_bpr_text(tag_name, bpr)
    
            if bpr_text is not None:
                return bpr_text
        except Exception as e:
            return "Error occurred while processing get_column_value_for_incoming_settlement_msg: %s" % str(e)
    
    
    def get_value_for_reason_desc(self, swift_msg_list, qualifier):
        for tags in swift_msg_list:
            if tags[0] == '24B':
                tag_values = tags[1].split('/')
                qualifier = tag_values[0]
                reason_code = tag_values[-1]
                qualifier = qualifier.strip(':')
                desc = FSwiftMLUtils.get_reason_codes_desc(qualifier, reason_code)
                return desc
    
    def get_difference(self, bpr_list):
        difference = ''
    
        for bpr in bpr_list:
            if bpr.StateChart().Name() == 'FSwift_T2_PaymentReturnIn' or bpr.StateChart().Name() == 'FSwiftCBPRPaymentReturnIn':
                differenceState = None
                for step in bpr.Steps():
                    if step.State().Name() == 'Difference':
                        differenceState = step
                        break
    
                entry = bpr.Diary().GetEntry(bpr, differenceState)
                params_dict = entry.Parameters()
                mismatch_string = params_dict['Amount Mismatch']
                theirs, ours = mismatch_string.split('and')
                their_amount = theirs.strip('Theirs ')
                our_amount = ours.strip('Ours ')
                if their_amount and our_amount:
                    difference = round(float(our_amount) - float(their_amount), 2)
    
        return difference
    


    
    '''---------------------------------------------------------------------------------------
       Modify or Provide your implementation to control the values on the columns for
       outgoing Swift settlement messages.e.g. MT540-MT543, MT210, MT103
       ---------------------------------------------------------------------------------------'''
    
    
    def get_column_value_for_outgoing_settlement_msg(self, enum_val, bpr_list, sett_id):
        """ Get value of the enum for populating settlement column in GUI
            :param enum_val: enum value of the column
            :param bpr_list: list of bpr on settlement object
            :param sett_id: Id of settlement object
            :return: tag value
        """
        return self._get_column_value_for_outgoing_object(enum_val, bpr_list, sett_id)

...

  FMTConfirmationWrapper
"""-------------------------------------------------------------------------------
MODULE:
    FMTConfirmationWrapper

DESCRIPTION:
    This module provides the wrappers around the confirmation object to calculate the moneyflows involved
    depending on the MT type of the confirmation.

FUNCTIONS:
    class : FMTConfirmationWrapper

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
-------------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
eNqtF01v28iVpCiJomTJjmPHyWYTJt1sq0Md2ynSItguIsjyQoAlpZKcNNMWBM0Z2bQpUhlSdmTIpwbFIqc991Kpt5x76w/YU3sP
eGrRU/9ADz31zZCyKCcqYmAlzJs3b97XvJk3fPMv4dJPhfYUmvctACwgAYtYskUknuU4JiHpheB8IQskMfhKFJAsCme5F8JLAUtI
/o3sqGG/IWyEkkmUJMmj5Cg1FlCapHHiWKAdmJFtpZtBGVFwFCKNVJjNcP4syn4j4CROvRFw6vcSymGpJRTT//yLJAg//WF/aq2x
vbdbeaJq8Nuptcuu07Fo1/At13lBjV6PUFXdrrTKzeqzdrVRDxnbh5andV3ct4nWo+6JhYmn+YdEOw1FPM2gbt/BnGbGVGru/hEx
fc13NdOwzb5t+IQzdV2HDDq2e+pplnPi2icEc0uY9IiDLedAA2HGWGtr/qBHNLfzgfJ1Vd3Zq5eZm63QT9M2PE97MndhzyvNFluU
9qD5QFWblVa7WQ3lH+5Wa9V2KdKV2VzXSs6ALdnqWCZX4rFFMBc8k1o9/yFxTDro+QRHgXlo2sSgmk9e++AlhthY/qHlRF5TokEI
HdfXvH6v51KQW1czW+szoY04zL7nu13rzNi3CTA9YkxMR7cHQXN8rWsMON+pS481w9PI6x7EGBxhFjXjA78xiIXOT00Zvtb3CNUg
2OvqD3zG/s1yqn7w97/B79s/PS2KQb5FfN8mXfC+DZtpXk5AaZKANgAiIBGSUGKp8UZACZzAMvRymCAoidNYgT6FM1iFPo2zOAe9
ghdw/g1LqQJehF7FS/ga9Fm8jK9Dn8MreBX6BXwDr0GfxzchyW4Fqx8/LKZ0yb8EtDLzcR/AUBwJY2Eo6OJQOBJHEscTQJU5lgQs
xbG0r4wyQ3EMfLqKGSXLYY7DBQ7zHBaGwmiRcYpwBbWEd2K9uISSbWpgEqR0n/VIrTqeT/ssjkFWty4GSCmZr/oWJTTI6EaEolwZ
ctIntGdQfxAs6ObMcKd1anX82u6eb9keuneRnnrX11nG6R3qdkFZVw9zGDR3vQM+Bbb3+wPd6DKFQYEPeELrLKODnO4R255ML4aj
2Hw2PijAtK9Pr4OiFMgg0Aly8VR/J9DrEPb/3vz4Zq33BoGiQ0AsX9e/YJu0yrZNVMUcNAZTF/+zu3N0TORNMbbzYtT4zqfYzgtH
sDs0CWhRpIzyTqTXoOMOhmAFQJDkW7bJ5PhREs9uzzHMGa9iNc2M3PiITXV6JH4WM3xvjuEp91WsK/OsK5OT9/OY7XnRnvBexXJm
nuVc/Gg/iVn/0Rzrcf6reJCd50HeY9l0kSG/jPnwYI4PsxJX8WJx7v5PE+vpJ+z/lPsq1hfmxmD2Hih/QgxmJa7iRWGeF4VL181O
zI0v523FrMhV/MjN3YvpFVn9hL2Ycl/Fen6e9WzsCt6Nmb///yIQ2Y9/+diBlyf2/wGeYPFc8uGbB006kM4T4E8CSycC/ckwMZKB
mmRfMGeV0xPHEv06oqcYHb6L6bFAm2E/UsbCuQScmZGKZSyPpXMZ9Cehpbh8EvT+AbDsKAecSY4tAJYaytvCd+Lv6ufpYXqUHwug
vwBtscM8eX8h+x5mQXKYBD++H6bhK7vE4bWIngL6e05ZvtBzHWj/4RpSHJvwh7Mrx9J3Il2brI7jIYcEPKtjgdN+wefTET6r4Qan
/pZzKBHOOV69DXmGCfD8rb82ugkrVYB2CyL12VAZi+eZYQbLfRFkvh9mRrdhXvU/P7ozujtUx4z6Z5w5V4cqzhzLMPprtDIVoObk
ovWz0b0Lb0RY49uJfSxDRaSe/XE2K6GixNqlDIF6n7ACEkOxSil8QOwBFOwAOi6Fkv3RxgaXAuzxprZPTAN4of40/B972ukhoYSX
69FvM1JiDlgFvO/2Dw59Lj474bk2DuDQowSoB7C1US9K0D/eZIBRHjHweAslHm9tUHaKi/cpK9tQ+lmzUqvu1VAmQvQtfpUHKXb6
HYxSz0ovG3ttlNup/rqyrZdqjb16GyWbBIoTpJQN73AHVs0/90itsTCwsce/xDAfeYnyLZ9ax2QyDmRW7SI1VNostSuA7zZKbY6H
Vxi/y9mVipaale1Kjb+6Jg4UwK1apd7WJ/7nWm6fmqTBKzK02KqU95rV9ku93qhV66Vdyl6yaOUAKqpJPQc5rns9wyQoW56SIBDU
PeKvhiBV73f3oXJMQK2H1AbcBuG7AS1XveeG3SdVp1M3nAb9FcDwvmPXTjEblj3LzGSBskiBUe+Qnw9UmJ4V3bY8H2WnBA/loPLQ
J3uLCh6PWoxADPMwdtqQylYTLSPET5hjKBXeWJcuP7oEoMEurOfsCkvIvArM8zpQgZYXZfir0f9OVB0yuAbtNrRbvAdeSeFyCpdR
gapIwCvl539KLpWz9WKBVaaO0SW6Hqi6Hr6/AM/p+qu+YYczlNWrdI2BmwzcYuAzBm4z8DkDdxi4y4DGwL3JSmOrn4aA3dn3WQiY
TkVSFpTEh3/OVVwI0rqOXRO84MdnOXwZTA9C6Vk1yFRem6THhoFI0NJOFcqng3A+fEAU2KFjr4UTQj12wrLxweLO9AVYcfpdL8zL
lW+IP/s0ZJP0y8kKPra0QPkqjOHX4mR98jVFlPjGrsJW8e2SYH3S/wCXUpdz""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FMTCustomComparator
"""----------------------------------------------------------------------------
MODULE
    FMTCustomComparator

DESCRIPTION
    OPEN EXTENSION MODULE.
    Possible to define custom functions for comparisons
    in the Pairing and/or Matching logic. The calling of the function is defined
    in the corresponding FParameters, either FMTnnn_Pair or FMTnnn_Match,
    with function parameters. The function should follow the prototype
    func_name(their_object, our_object, arguments, attribute_to_check)

    # Sample method for customizing precision
    def myprecision(theirs, ours, compare_mode, tolerance = 0, attribute = None):
        is_match = False
        if attribute:
            # Override the tolerance from FParameter
            curr = getattr(theirs, 'Currency')()
            if curr == 'JPY':
                tolerance = 99
            their_value = getattr(theirs, attribute)()
            our_value = getattr(ours, attribute)()
            if abs(float(our_value) - float(their_value)) <= float(tolerance):
                is_match = True
        return is_match

VERSION: 3.6.3-0.5.6048
----------------------------------------------------------------------------"""

'''
# Sample method for customizing precision
def myprecision(theirs, ours, compare_mode, tolerance = 0, attribute = None):
    is_match = False
    if attribute:
        # Override the tolerance from FParameter
        curr = getattr(theirs, 'Currency')()
        if curr == 'JPY':
            tolerance = 99
        their_value = getattr(theirs, attribute)()
        our_value = getattr(ours, attribute)()
        if abs(float(our_value) - float(their_value)) <= float(tolerance):
            is_match = True
    return is_match
'''

...

  FMTDisplayHelpers
"""----------------------------------------------------------------------------
MODULE
    FMTDisplayHelpers

DESCRIPTION
    This module contains the classes and helper functions for defining pairing
    views and menu items on it. This module also contains implementation for the
    following menu items defined by SwiftReader.

    Display name : View Business Process
        A menu item defined on Settlement and Confirmation record to view the
        paired business process.

    Display name : View Difference
        A menu item defined on the Settlement and Confirmation record to display
        the difference view.

    Display name : Unpair Settlement
        A menu item defined on the Settlement record to unpair the record from
        the business process.

    Display name : Unpair
        A menu item defined on the Confirmation record to unpair the record from
        the business process.

    Display name : View Incoming MT Message
        A menu item defined on the Settlement and Confirmation records to
        display the incoming swift message from the paired business process.
        This menu item is defined on the business process record as well.

    Display name : View Outgoing MT Message
        A menu item defined on the Settlement, Confirmation record to display
        outgoing swift message which is attached to the record. This menu item
        is defined on business process record as well.

    Display name : View Paired Object
        A menu item defined on the Business Process record to display the paired
        acm record.

    Display name : Re-Match
        A menu item defined on the Business Process record to re match the
        record with the incoming swift message.

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
eNq8vQlgXGd1KDx3mZk7i0ajxbK8xJk4tmNlcZQ9MSF4VSKwZWMp2zRkGOu7skcezch3rmxremUWpYXyWFza8qDllVFKKaa0pXuh
baCUQl+bRzdK6X2UtkBp6d5Xfn5+N4/855zvu+vcK8lOWie6d+53l2895zv7+Voi9G8D/O2Dv9azyUSCJcoJJjG5LpUlOstlmc5K
WaGzWlbpnCwn9WQnyRSmrsjlFJWly2k6a2WNzplyhs7ZcpbOuXKOzvlyHs7Jes9cT7lH4vUVygU695Z76VwsF/VCp7CSKPedSlT7
a4nqwKkESz0rlQcfTrA0055JME3fsKyUh1iGZZ9JlDeyHMvDeZj1sAKcN8FzvawIzxX1zfDcFrjuY/1w3a9nZrdCyXVQMsAGoWRQ
lGyDkg1sCEqG6NvXw/VGNgzXw3RdgutNbDNcb16WyzewLWwr1LSdXce2wflGdj0rwXkHu4Fth/NOePpGtgOe3kFv74LrnWwXXO+i
65vg+ia2G653Q/27oWQESkbYzVBysyi5md3CboVv3QJ3bmN74M4evKPvWlbLt0LZ7WwUykap7CYou43dwe6E5/fAvbvY3XDvbvf5
26HsHnYvlN3rPj8KZfex+6Hsfn0U6rsDrh9ge+F6L13fyV7BHoTv3cVeyR6C893sVWwfnO9h+9kBON/LDrJDcL4P3jvMxuC9Mffb
97OH2SNw7wE2zl4N573sNewInF9xKjEjsaNs4hmp/CA7xo5D2SvZa9kJOD/EJtkUnF/FHmWPwXkfe5w9Aef98P0nWRm+XxYjc4B9
D3sK7hxkr2NPw/kQq7DXw/kwPFllJ+HJk+LJMTbNGNx5GO7obAbuzLhtfISdYqfh3jirsVk4v5qdYXU4vwaenWMNeLYhvnKENdk8
3DnKzjIDzhOsxUw4H4MnF9g5ePKcePI4O88uwJ3XskXWhvMJ9r3MgvMkPLnELsKTF8WTU1DyBvZGKHmjPgXXj7I3sTfDk4+xZfYM
nB9n38e+H85PwHNvYW+F594q3nyS/QB7G9wps//G3g7n74En3sHeCU+8UzzxFHsXuwR3Xsd+kL0bzk+zH2I/DOcK+xH2Hji/Ht74
7+y98MZ7xRtV9j72o3DnJPsx9n44T8MT/4P9ODzx4+IJBiUfYB0o6YgSHUpW2LNQ8qwomYGSn2AfhJIPipJTUPKT7ENQ8iFa96fh
+qfYh+H6w3RdY5fZR6C+Wfb37KPsZ2BVnGE/y34OSursY+zn4TzHfoH9Ipwb7JfYL8O5yX6F/Sqc59k/sI+zT8AbZ9mvs9+AEoP9
JnsOzi32SfYpOJtQ12+xT0Ndn4bWLEBt59hvs8/AnfPsd9hn4XyBfY79LpwX2f9kvwfnNvt99jycv5f9L/Z5OFvwhT9gfwhf+ENq
7RL7I/bH7E/YF9ifwq8/Yl9kf8a+xP6c2ex/sy+zv4Czzb5Cv/7y/YPli/D2X7G/hrf/WtT/Bij5KvsalHxNlLxRLy0nym9iX2d/
A/W9mX2D/S2cl+G5v2PfhOe+KZ57hsmTiZF//OtRLZG47WX8lz167NCjRw5nS/Bv7OjUoVprvl5dfESvz+tGK5s9dHjy4Inx41Pj
xybokanTtVZprskW6npputkwq7VGq2Sehot6tdXSW6Vqg5VO09ulmYXGtFlrwgMzTaPE9Jlao9Y4VZqv1gw40+fO1fTz/J05vbFQ
qpn6XKvUbMCPPYGqqvVW06uvNjdf1+EFs4qfp69DE+iDM816vXkeq/F9kKrWWenkYmnyfG3GPKFXmW7sydIboselRnVOL+0tPQYt
Kh1YaMELrVbpuNGchjM9iP/2e591vwotmNRNk7eI+nKw2ZipGXO8dYY+3TRYyWxSZ92G4j8cCWyWU9s8r22Vhh2qzczoht6Y1tdq
Es7J+prFeD3uB/FN5tZDrY5u0aMN7ICvlqtsk9eEBf4lvC8KZ4zmXKBF6xsk3qT1tCNmMF62ltB0jTemm3O4GI9OlY7Co9VTL9O8
Acw13S+JCaRXa06NLVzoUAVVSp2g+7FLzvkYhzq3ZbVWuHHhV51xqrZK5/V6fZXROLZgnmq+lNG4db1LuOnUFByF86dr06exS1XT
rE6f1uldb6r3hDrvfi44CNc+AMf54B87OatPrwtYwniou8u+SXU/WJ2ec3oU2ZYT+m1Hq+b06ZfYAkMvzeFnAihN3D5fM0+vsh6h
XY8dPjEJm8re0s4TO7PZE4cnp06MH8RtZvL2I+NHx6f20++99OE79pT2NxZxL6jN1KarfE8RU9eaNmrz5u2AqozFeRMazneM26fr
ehXgWL9gwr7BdGpRjfcJWqjjnDaaZqm1MD/fNOA9DgF3Brcd8dD0QsuEXrSrJ+s6f+4ufA6/NDffbCCczuHwwqPnm8YZXAn6hXmY
Y12MRLWr9Qxe413wbXJmaaEF+6begNa8nHv8N5HVm7Bzvs3PHh7zXU00zdrMIgHXqRHJ7h07fMHUjUa1zpfqSMbOHee7Nq5je6DW
ONc8o1fETl7BLcLeCDuzbpiVswu6sVipNcxmpXVa100bsCDeGMeteKp5qDl9RmeTeOcoLDostQfw4wIjuIXDp3SzMjNfNWDRQmMq
1ValSa2xd+Edf92Vk/MG1VvTWxVEdRVzcV63b+56DiADPxLx7ICvf04TpsPcsuJwy9vgoCeAS04Ah5xiMlOACgVumCWBdgMeGSi1
tN0zRr08pAPRUm9NTGu+L+FvGf4O4tfuhoMlWYlKwpLhKFkKHGWWgKNiqXBUrSQck1YKjikrDcc0S0wmLksTI5qdpVGuIGw7v6lH
BfFbB2Kpaup2ks9G8nyNmaft1Gm9duq0aaenm/WFuUbL7uHzBrM2U6vX4btqS6/P2Cp+1+iHFhoDeECBgTGEh41wKOforanmGLxz
OWFsgbIrg11k5J75RVurwJqomZXKMexyEQdBSgX+aw8FBmyP88K05Bs4HLSkM3A3w8FMdKSVxBIM36xs7LKkjgIlMAUrVNJJriRW
ZAmGF6ZEnrCTVMNIylZgKZRzY4dqRKFWjUXqXjm53zy+YJbTY5OLcyebdTs/ZVQZLAv+mmxsgodsiVFH+WErlvTQfYAfE3BB60ls
G822pEG/hqX2lmDPAk9DsyZGkjg+ONSVip2tVDhCgN/5CqzVap3fMa7DCre7VQcbYfQikGPVKi4wKZulkmnZN3oF+Ms6o3crjKuV
6CRWaAQ7MowiLL+OAmeFJZbU9qAJ42gmLXlZGkosS0vq44nGDjVhphanpMRSUkq0848nnkzAs8mLyUaWn0cTowlLvSQZu2HpKpW0
qVkqAsiyspSi3yr9hgW8pFkp4zlLmc10slB/biVxKPG64aWMlenkVxJW6oxsXLIyS5qUOPuRs5cszfdsj6WtSFKCJa30uQTUtVn0
owBtz1rZTi+cc1YOvnfvUt7KU996RG96nN6I1iSwNfTlopVmKVwtZ/+qUXBL0liC4DaiTVwpju1sjTf8uLDw6Dws8ePVhl6fQBBM
2IUjzfP+kuzhuXlzka7Hpkb6bHXK0PVy78O6OanXaZMgfJeGgkNVs2r3wI/jVSC+TazAyOECU1qmYWcOX5jW53G92j1VWLfn9Mo0
oWw7DZgOaBrDzi1gawDpQWV2YT899DhsSSebzTN2itZdy1axWeUeuguYgUrtHNR6otkkNG1rB0/X6gyaYBcmTzfPI85+vNZgzfMj
BVsBBGqnqi3c38p5saFzlJObp2bz/SBJqNuWdLvoaxTHU8U6DpGvpNwnsFWzUhXNslUdaDRbM2G0sGHlnmnRKNpJ7CRd2tpc6xTV
HobJoWMNHGg+xjBmB09XG6d09npc+vcTcBYBPFVJlgalgjREKCgv5WUVyvrhlwrXqlSUs/Bbo/+K8KtfNg4hVCk+qBqEv5wDVaME
VYdgVb5ux5LSzpsJSxGwMwqwIy2OCdgZ9mDnrBoHR4ZqyhYKXXGVpgBe+LXMVy39Vui3Rr/5as6YiqWx5LK8lIVfGfqVo/spup+H
GnqsHEssJAzbVLF9nSSsc2mpYBU6KQawtdRrFWAD6v0+eVNiqWimO5pVhNIeM4MCV3g3x/IASSm47oENKYvX8Hx+OX1KXuozs1Yf
9LkfsDFA9Wze6rdSrIACWdb3juTSgNUPECwjBJ9VCbL6J+ziIdiSz+nMhZvyZg+OaIlOwSSLh+xt4Xtil3Pve1AZdX+q3L9/eg6I
m9fi9uW8JI3ZPUHg7qXPEDBwKNkw5hDEgh6m4tozsBy+eQVXXS81zHuj3T8JkMl5OUHhtMrJE7j3jo1I5Z4WgNc4bHO1ar2+OFIg
aDdux8Md+Ll+JGGCG7mxB2+k6oARavN20gByndlF2HMP0k5+0NCrZtMo7+kifhjvJhFLYtf3CCDaK+wc36do3OxeJAIbLQAdTgXa
Q/Rt/SBRwx5OgN3Pj7BGBu3BQL0cR7VsRa/V7GLgFqASAwkq40E8vBKbUGThdTBQ714H5S316AVAb2xZiJ59urkx5s3yxpi3yhrQ
CrRQiOaxc3OcwqogTh72XVRaCyfxBKOiX7DT4o6db/n2/nK2XmuZAkHnGRHD/CqMvwamabT9YNF6M2KYA4S8soC48oC4tgOSytMf
Iq+slKUrDe7gr6ycl+QXZbmAx/+rpjS6K383pRgVRGN+0qrPj8aGZSStlpGwkpA8uCQbg/BLxl+twUtS+6OmsswJBhU2XiASUHPD
lBV1SbHkTsqSELzNNDyjIkLDzdYCMmxZAWJMJfR4ZCnF1KU0oMiMlQJ0oQkUmV18FlBkxociMxczZ5/yfhOKhDOhSM14yswhuiPU
lqXfHM3l6Heaozz6rdHvHqvH+I6ZBySWYQmWZdnl5ClAfWaPVYBW9DbmrTyQFK82C1ae5QB1Fq0iXN9s5gHlZa1ixBvbWA6QcR5Q
YTbyi+K+lYu+745hLzyRI0SpAkJVVzQYyyTU/X7xRC/wATkkRxqqlVuC551xPvuUeKKIqJkTvB0ZfsE9GNVX46hekhf7xbiOmn2d
flY0B6wMEkM0U32zg/wa9WTvkPG9qPEmdD0AvKRAZkTLaC5mU4/oM+ZYeSACdRsjuKo3xiBu4zDeVacOPzFlHIGfU+WhSFR7Z0z5
XeXUgaYJeMnYDW+3d7mkUgmY/uPN+QWsxIfaW6W9pZ2tb+L6vyzZmn5hGsB2pjmywd7YhTgF25k9oZ8C2NUN2CoyzieZgQSFMYmH
KTw8iv24ldC2I1qo+IkkwLlNI/B9gsQQ4id0bJzAA5L05R5Et+ONSUBgU9WTBtIvttZArr0GvHzy8IkTx07wjSF56PCBRx8e6TMe
x5efwJezSEIJJPM0lj6GpZmZmgGYyITPIQouD8yLLvFNgRg7Dy+Xh/wkm8dmGq/CSjdH3HQmFrkh43XELPI7vCED3RyMPRg1UT+J
6GhW8IuDkiqnJMRmqpyFX6qCOE8N4MK8IOP6JXwiK6VkIPNehDeUrKzKBXoT7yIuBKLvu6qSArIO3yzCN4pwx2ggbozi/vFfq+Tj
/muJsvIW1GgC9ntGK6tvSajARQKMKHZmErpQ181mI4Bm8TPIofUStYisP/w3mzgnGbtMCai0xLI8q1hSLWHJH5TeiVws3H8wwc+b
APwMZJ5HVOATa42WWW0ADABzvwBzYTRpXQDLDNREpQJtUKbrQO9XDdh+U2fO4xlWewYeQG0NcJQe92jA4W+xSSmxvWyVgHZxerDH
/WbKuBEf34GHnXiYd962e8R3p3V80je559xasIFf93hUVaaSeEHL035BCw4xDDeaHZCYJclScE5yg4BySpgCpIUpgMaGEJU+I5Uz
SHdCSZb1swE459gg2wBnQNgwURsJzAJssuyXzmx1pTMkkYGZJukMHhWSwsgTYyMqrXDjFTgMmVqLE0qAJhyYYkJ2gAQfwgDj1ECY
hUcG/5896YGQiwz6qDJPKhLb4KyvwWK1XJaoaZd5I+h3uGrEW9/C1+m7UnuTv9IAgRfgfZJ+ecwhWs2zCWMfHCXgvu+EDUyZlS0J
ePk8/FJwk4LNSYZ7ReDAk1hmqcvIc++Gv31n826bYaW1HdRhIG1iDNIiO6HPNc/p++v1E83zLQMHaiTJ5TIZGlsi8rhc6jiqJJmd
8xFgdpIjtjCxxWWUnNAFPIsvfAe7VBATgYRVVkGyqn29f2Qi3gvMjCL+aHz2OONzsxifrUBAye74yM74wEjc7B+JZNRIGBdxRhU+
o2/AwxsjUGr2IMrBqV1AefHF4fbHFbnxvniPBrqAoJpyuvCU04UnsAstPOJkHqKOKNSRfvilouANJ3o21UmjMA6eGVxSgAqEe5bS
yawkaNLvZSTxhF9PnO0n2kKZuCLdOjWS5V3+3ph+G8O017Xm6zWT1gD8Rn4IADE0Hm+KGBTN2WeykiuLzIshQfwfhjnn8QAel8Tf
QQdp4rCIGTMsDnSbIgDtNpQYSDGAFhD9TMSvpAOivlYWB82SiJffhlPCpE0wJZMJscKGfROzA9eaDI2eTJzdQYMtTxgybSa+BTbo
jvZyROtR8r1R8gGGCrsr5zvafQGUQesoPGAukiqIDiBvIXmICtAk4dDcIR3ms7lIErAfiJjCnkeqDVbXxWPb48Yz8FSgNSm/KPQz
SDO+lQsRUZTckZCuRu6GVvcsoTHA9gsoapQ7sIJnk3BfpVIc2gmv1FIqqbO+pzrplQSWwVWqo/EygAxlNmNsNrOdHJbjFQkeNwO1
fi9Q6/nF54SYaJvZ0ykw2QTa36HVo4VFAnqMk9iX4cNADBhI+/IR4BsSULwjRTvPL45UF5sLJlApusl/8unvJ6zxMJdPG826B3jl
IpYS8+/cu8dRBBivJfqtypgrWnD0P5yoRQLOOIOHPRy3E8Yu1KnmysmFWh2VUil+TZBb5nyzU9UrIxZB3t+5nZLYrBNADWoCmhGq
i3I/oO2UNITIe7h7dfDXu2g0lxW2/FoGZKuADiEWKzGrwOKYIAhTmQLL4ADcTyLSg780/GnAyKkrSZxYuJPBOwzvq0MJ/xOwWLIr
iZW0eC5HIIHKnjzpLdITtjrRbOjE2tD8fvNF+NfWaID27GxNjfQY15PwZOzRC3wyD4gRzR8ApqXxGOxRB5oXvBkup/czNqVfMPn0
ulqdcgbK+RyTosFOHW4wfBPxw4gi9B8nOZIIoYa3w+FenIQhofrgKHWzvFVKvYhEeCo0/P51OCJNQCdCpOV1DmFioODDeAYPb3Vw
KKEi47/h4d1O9ZF6ESTv/gkncpBoTi2lqVpOS2tZTcnmNEXr4wRgLA06djU0KIoHckBzphlQl0SFIg0K48oyMJN9xC3GY0VEgURl
OrSmhxdtFbk4TrpFIEQaqzFJUNYJ2sJ8LHq0Mi2whalUt7OBbYmrBwf81X50668lHt1m/XTiexKO5imIbDsASR0FyQUSSajLCRIm
UQkgWyIqloBmJIIjZSU7KbhOm2kUH3U0gEppSbO0ToYp8CtjaTCIGZJga1a6k+U6I/iV47/OPgRfzDPV7LESK4rQ8SQn7Nyc1yPj
EezzOMFWWJMwUuBr7h14uAUP78RDDQ/3IixpCEuks0CcZ6Di0zhOWsYj1ZN63U5Pco1POYcPAnt1sjp9htQLQP4Q6XAJDz/osuyp
uQotgv1YQkx7Bq+pjnKmjuYJKIcEXt35GRBJhqcSweaohzU1on6QNOTqDiFBhL/2cPckR2DNgG52TxzWlDoEPSyJYw5XnCNAPJea
MH4I20Vo7kcRzeFC+eYgJ4ERwRk/gof3uAgMB+O/c7KBxuu9MWjpdR7pq5GkQAv1yY+KJuJZqyKxVkZWaOs9gm9EMt7na8f7ItqB
K4RJLoON6qV20d8GPFwVV0dUprEUw8zV4oA0yMxdFUkbiREQGdfjKgsQtIjks5FIPoTGb3ER/21xWB0R6SGHENVkwOmKVtTS2aSm
cCQbi8/f5sPnusJdGgiH30AGHBJg8RRLkyRBYxnC4YjTEYdznJ4VOD0n5Ap5IVfoEXKFAhtiG+Hcy4bZJjgX2Wa2Bc59bCu7Ds79
bBu7Hs4DrASrfruRWnVP2BXeE3zyBy71RdsQWhSLnLS6kyhon0jOztdaFVcUYffAleHJMod9JjncBGjBICsle0DoJ7jMgutxYjef
83720pFc+AR57hY0dg3wBbxUxxNg2Mlz1fpCWONrnIbDxRCEbfC3wBXado120j/aiLaYZMpoCrEik/1NgnO0nRQjtaXDqfYfm9cN
YdF1tNqARW/Yg1Hi6ZG0INAmzaph7p8HvpVbgnHCmdR8OpoJVM4LbT3NonEXsasT+nn6SiQnlOW4Czu47O3//cDb+7vuPRQP8Rr1
/c2ST2xkD0w0zXHH3FpnxFZENiPvDC7W8RYfOhiOmoGrQj2AXO+MQT5kLIEf45vS2/xoyF9v4KmrGAHjZ+Iq1ohDr87p7/DVGVjv
zgMvR3XGs3C45Ktph7+mOADuqtmVHwzSCJskJXgwIVAKF2ZOjSh2LykmWhWugmQV4zy2YSVuLPKOZgRb80PuIpSzodn3PxaP8Da7
1KExZJIV1ysTnriVIznVOIW1/yIeVm9b9tGGU+17XdwgI30TBBDvsXWvS0BKcdVS837cN19DUeMQgYjcURhyR0FK1GieKvJFn6BE
MX7Z7fx8XCtwq1vxMCJsk1J7Y2DleGKW+KYMB2Q19EsOSG0uKwSg5fQJ+FzT0IHyFUY80cvFuYvV/pSHs8LLxf/Y1SCLn4hbC1vQ
xCoGVn7aN1k3hVDHuuErUryFg+XNmofWc9w8Kx6zD6GJGN4dM5pznkHLz/pauj3U0ojHu0h0t5H9RJGS6aSvoSgU3M3b+gFsRR8X
B3DamL5InLdjDDnsV/059rWR9lj+5nla4J/30IW6Sn98NnUj0tjIYJiKbJJypVKZ082qo9y6ziEKjI/i4efw8DE8/LyDUY1fwsMv
OwBL8GL8Gh4+jodfx8NzcRQoLjxTEvpA1GUR9Yl0KP8vqaXgmOIlnMiLpUkvriZjuJ7oUQkoVE6PpgQ92i1jiNNzcXq0R9CjBUGP
9gp6tMi2wbSX7IGDzbmTaPzvm4T4Jb7Vo0slH12aCCNqWvAdF0ePxgFnhqjDc1Wj9XEprAG7LqJle9zn49uY9yFR5sMQn1pNivJJ
H3xtjar4pRCyxgfx8JMRVeNC/XSIeo3sdzQVm/OLLCckx3rHJNbbJMUS0bJJSyLrm+1LcjtvptC4d0kRljfpxaelxJLqs7xRL6pn
t3q/Sd4MZ7K8UYytZKmumRlLESaJSfqtCHPFJDyRMra270bDxHp2KY3CF5YUYpq8xSXhidlkpweNd9Fux9JWlKWMsFlJX5IWNdGi
UbO3U2Rps89SHTl48M0VGd+LaqmJ5ocamkNa2UuScauV6QxY2c4gvLlhhX8p0xnirTE3doatDImHtsLK2eSsnJHMhPFTOE03kRVL
jHkhaVOM1+DhwyiGfw0XwzenpxfQ8ef86VpdL7V000SPGHRFIY+c5kzA1cbxtOHS3RL/BAp5N3PZEglCLjtCd+MjeLgzaEIy6hoQ
Cou+R020PStyLoBKJnVzYb6c5c2vmXWdNiXjpx1hva0+vv/EBJdcTbh25yWSazmm6yT/Rz8H9CQ5eoQqsYvTzbk5AA8gtYHLNI1F
QrwjOS4ZeYwahZa9Dj/pmpgYD5Epid9YOGRK8mmyZmm5zedi6AhLEkL4n5NcS98UGoP4jES4pa8mO4qCYakIpdkXVXk3EK30tJyX
2tuiwC+Gk9rgh78vSZ71HEHbZwnapAC0yYtHIqAtGwttWYI2BQ12hUFwkn7LjnEwrG1UqaeYAmsdYO2S1ALOtZOyCOLQiJeeV5dl
Eo9mjN+zMocSrystZU08D6HJvJU9B5ukmbU0K0sa2o+d/bCZw3Z38gS5aE7fw1JoDGyhyW8PCVgLZqHTaxXQcBh+FeHtXhT2UX3c
Aq9Iv7kFXp9VhN70GVlobZ/T2lbWbWGGWtgP8N3X6SfD4wFroDMA8AowC7ijH1prLA2yrDVI5v/vpPZvpvbzknnqwSD24JJ0dr6x
j4k7rWdZXjzzma63PhR460ONbOD66bOkbB3pmSAkYPwWmakVucupzg4cP8GNRF2RMVm8GVUyffKZG9vyPXfbygOjo3C4Y3RkA4fq
COAluLP7Kg4d9HjNPI0MpfEZ0p2hwrtxCv2i0KTUzuoNlPqyyhzXiIeEzoQsytGuU93WwO9ykIo94Cr9PItf4zcc/Qu0nsxa/Ba/
jzsWv8ZnA6a9BN/G51yQJZ1i/4IYPteHaxF6guiB/5ahN2V8+nvw8JSrb0SzM2OOiD6/U9ciN3DbF4ESEAv9HaKEx2i3TkUgBLIW
Iym46sjAZU8KnidHALQ2K8Kz/DeXmQ/ys9wurbZfE8qI1ejfGuIYHN09CqFIe1+wHN19wSNlVI+fMNCNjDCy0NNx1V7UUPw+HDbL
LqmB3g7tnZGUTnjpBdrf40d5qIKvJZaA2FhSTOBWLQXQgmrBxg9tv1doAlCHI1sKbbRAklgq/UoIvQ7aK/zSUorIEjQITrtkyZsB
UWo+RKld1M4e8H4TooQzIcq0ccDUrDSTAa1krLSVmoFRtDIPJqhUIa+IxCygv03kI0Tt+yK0IcN9hqB9Gbd9ZEALZVmmWqSg95Um
Ozn+6+wB1CMJ8iHcK0SXOV5i5Um/RJyAh0HKyRYSAUKDW948dqA6febYzExtWhcSRcd/h2vbEfaN3yFt0Nh+w6guhi1HX0N6oanm
fmP6NLCXtrKfMVobUAXB6sYYw9TyBv/WS947lbnqfDnviCTJskpzrsop2ohbIQN+H5QTgKuAXLps22/AheX0C30HdeasMM5mt67H
5fmgoIRVoZOCrVpGGYYHt1mhZBZ3BaRmBWS274lb1KvWHc9PZIljdpUwv4Ad+pU4XgJ5y/2yx0tEIof1icT6PZFYQXBbLoclc9Y1
VhKF3O0h2RWyaDFkzTXIv+K7ji16xNf1bat1fTUp2KCPgbMijIWIdf/UauKv1/i6rravj2rIyyMEM341rhkoUDgh+8VckUshVtyV
FEZ41I5HiO3mQpslGUlKQQwqQCLeSz6vCmJYwrXkVkB6calRoHspKElznSw3F0K7e+PVOJqaj/KgXeXzeHC3er7JfMKzt+TUNwH+
kyTW83vuhMcARSmPya61Hey4cp7bXMsFuX1z1HisQ5yl+UfmohgZRm4pMDoKjI5DKsNoGGNidAAbw26T9I8OPcnZVrkxSleqIKv5
O0jwIvtK76wkxBvc6UQGLl+ekbkGm8bzKEkbPZkVp/58DmzcGWIw6omR1OrzAPPkjf5vBqbA+BOXNPpAxDpESRaThYSd41VnFgpA
6TiW82vPRkgY1xcWxn3K1euGpG9IeBh/vKrgbXWZ2yfh8KuOyQJsBSlNySa1G7Q7taS2XVNI1paGY4Ge7JK3yY68beuqNj04k3Yf
N/MYbyBK1OfNphEwfO71Ez/zEi09pd1vArGGRpgcJIXDtLy4V3B6+RgJBfpSwZIUkhkkgdQACSQvvjWCVxyL+RoQQaIFmqUZY8gh
1pNADElojStcpxNLWaYAwaMYV4Cv1IAIuoLWuUgGoTHassRULPNKGPJ5RM6Y+dmeFcm4wpLwfn4pS98tAKckPI+cWtANu1NEXhFK
swB+mU6flSXOMfhMP0tbPfQuSWa4Iyo8H34qBRwm8qRjwh2bAxtO6piBcz1FgMex2SAHoFGXOHK5LBsDFDxw9xPBGAUeqNlKXW+g
XaQw97H7HT/tE83z3NK7ZWvjrdcAL3RsxjG8C0lvyEWHAy1arJV3I+MlImRwfyLuCMRJLnJlFuaSb17tcS5s9z0+0suxwROEgYVX
ON0pD/GrsF8tp9KQCfLxZ4Q9/oyoSoM6aafRM/XxBiunUfwCJeUBP3koGiWcM4OFYWpv0xwRsq4DKn8Yuc+27PJjqixLaKc5JKdk
jzPjvox5wlV54LOK/LeMfjroA6QSxya/iDSh/F1VyRIv51y3b+mC4T2xbZlWfdA97IfuFyTUvbafA7iSAS6AGbskGc9xv0gkAihk
gkrmaritwPYAG3FyNrWUIv9H2DYIrmeWNPSjA9gGqATYzgjYzix+P8B21gfb2YvZs/u83wTbcCb2JmPsM7NWhtgblFwglO6zMlay
kqJyRfg74m8VnulhSavnHEKUBIxID4cg8nA85PVgqdfqxaALSwCtKJ1BKanZYxUxoAL0OE09vpVfMw3wQL/V3+k1i7N9KxI92w9w
278i0b0++O4gwLOE0tXOEPxttPoIB0A5ywhpDt4bXiEJa2czsbuHlgZhhGFkOlsY4oAN1obOVvRhXBqyNrCENUSSpo3WYOc6YIk3
UptOwtU24TKx75J09uTZfUAmXm8lvb6tkC8jWVVnLkmL3xZjvdUsdW5g6J6fXZZWPH/H0Hg7Ep8fc5m2w65k52bXWG3awUPcG9CV
ALU3BfwQJ3XjnG48Os+AyhvZzgU0LlXF2bsZd9ccDSAtH4NHmOXP8fAlPNh4+N+uYPjLDpNoX4845JTegJU+XaHwSxWouMqlPCfn
jTB9937X8gqtF437guKjW8kamGNC4y8DJt0jw5yxTLX0BsCVsZc4UDdyT7nPj5Yo3AOhK97DECLyWMgnXVrmKy4z2cs/0XJRc9br
l61An8o9DktLgF3OkCgJA1uFpUhhnbR/bn7SRUuATgpkFKmRIiroapil0jyd8/QL40kMC3KqXyKXQ7jmIiQ0OszKKGkGdqgLLfmr
nwACO0RR0YB/PY4q+iIcLjgMBlBFt1BJPC+zp4uram23BD/DI8BIiYbGjcv8/FaSk20hou7XSKdmD0T4zIYbmobDn8o+W0zi22Uq
79JTu6Kx+7ube6vTXKKcJG6fxX2hqeGpYMPT4YZ/0SGuy/n9jB3S53HlNkzeF9n4G5LZ1rz56fJUjYiAdcdXZKFydHqWgmVgfCPs
Xaj47c1GyQRoFtixTci2yK2SSQbPQP9Jnp6L/OtlNxCNMtG+cf/ka4+USOTJQ4yRJmknj1c2b+gAiqadGz+2/3hl8tiJqcOHgK0Q
lMokmmgwfJ/LqwmOf9uRGNt5v0vbiMIBL8ujQxHsRnhUkcD572RXbZulGCpUGm+DlBWmdhZ00uPoCXVljzvIozUilXt9UcCoBaHK
ET/+iydtoOt4VftD1+JSWiBVu1TWWA7Gv9cecmKEBaMBraUQjrDsvyyTp7atOWDj2Dim9As4CVEa6m/Jfjv/66Pbsg6T/6swd0uS
L/Z3fDKdrTHV0oMvS51Zjyn+D1/FN8RU7D29ll0OopLQJLiGhHzdG/8U16jhA0D2Oy2YanqvfNfXxNtjmhj3bqDBGT/t+TwcTnE3
iQRRST++JLePoFYfA+gsKaaCIg6g81T6hVRh0kRcyIXQqdm0pQJmScHdlJVclokelTqaleaeZGfzSBeZ2Rl58cNCyD5q5jp5pgD9
p7nRIXKzBX6NJtK+6BAoiM97wvezeRLiD5EzRy+20PiYq7b4GOGu1EQ5dZTCm5WTB9FQp10WI8Tj4woU5oShnDeawHTUF/eUjtf1
aksXNzCGowED54ZObDAegRjJrDEXe3DCjCFmKRr/6orP/95Vj2cWUGeNYGdvqs2hVNyJvUZUElex2UprsWWn+Y2WnarO43ZhF/ab
cPvkgqmTih6wLX2Am8gG/d2MOmnyxls05RTGYQybOJLhlFPGAX4uTS/nfIFzxAWvvZzld7CrdoqX8bUa4R9n/DsuRkB8rd2EAZGF
koVjXFbQJP3EWgGlArTKzVxoviNm8QYAZBUnie2E6lpZksHBxmZsRpEIytEWYAFgcERXeH1Z4Y0n3vtxn4f6P0X05gV0PVVc4oHH
58rL7d0x7e0ebWkCBjzK/YCWxr/h4VvOuFF1kdTWP8Dh352tHrZ5x+JriO7Ebzx71rPxZMnGC30Q0gAsOXubr3NR5llXv+EY/4iH
f44xfrpB8W8tN61ee/wWsxbCNf5PnLAcJ2Cn4qHS+9ZowrpQaoCcLCWCoY2MreR5BsQj/HJWp7DW9NixF3zuPU/EwNpuxWe4RrB0
6xqt/0+AKeO7eHgxBoD2RADQ6BqNjASkdCQgrQN8cH2UnIES4JOi0nhx7a1XRbNNov9cYdWgHhHeVMDC9AfjliGSdaYcNsFIeLnf
t1S3RsSQXQeIDLueckw6A23BQP9M4TM6ok787V34b+kD+6bGLgvyuBc5ezR7AJYR47PFUE/cy+RkXX+F4ur685Iqt7dFNdR7fA0f
UcnRfMb5iNrpw9wUZb9vcLZE1Sme65onxY/FTMH0LUtB3V/amReHYlYreq0WbktqnDi1Q76mbI5qCn9s4nL0uk7i9KfwkJFi1jUu
uPt86xpNfxW+DF/GdW1viYBQN2DxVa73dEXwGHG7wbhv1HasUvFLX+UG0JSJsSkDg5RE7gs4A0dC63jXak16+dYzTfwJ31DcuFq9
UWtaCSvzaf+RuUFgcFXTjvMNnxWPJsXsOLgSHw1s19tXa5dY4EY2bgHn4MYjXQsYS7sCZwQ8ubm7HGlRZWAzJB7td1mC/gEjwlRi
U2RiT5LijmqiWSLpYRmwJecSrQmWxrPxTjM9m57VLBnpIGQ03Ots6DoXus6L64wFmIKEtuVBbpk62awvkN82p6ez+48eQJsY1NKQ
9BbHr9xHMdCFV95RndWq5czxE+NHD1eOHHu4POD+rEyd2D8xOX54YqqcG3sCw0Pr+N0R2S44oseTBgy0UR5qNReMab3SnKk0fN82
FKLwJ/XpSd2s47vlDMYIXWgdbZ2CjcvjUPZ4YUD9wdqPNE+dgs8XedB2T1JiPE9mgWP7/T0pF/hjJ/RpvQbbBc3nSIqI7fIGLj1t
ifHhNj8to0dCszpq86IoK/f7u1CZo/EZ6i6rYFjSEAa+mXuRVTDHAIliSZM1LZZqQIRWVoQLZoLs6dC2LktheuUXU0rXUTaKLzfV
kAlTDap/tZ9wgh9NOJYg4peMWA0FeNzQnruKwp10R0PCF1WoTF7hNhoYKiaL1gauOE/lUXimjL/lhtL/5KrFn3PE+rb86BN2+lCt
Wm+eatnDXAwvdJG+8PpclIRBzut1zs98k1sJbnIYLNs1l+Th4DVx2YrCLoZHLGJovBKQi+2b1ormLxBN/E6wI7gTbA1KnmFHkPmu
cFkRu8JllQOFKjkU5guJVXaJRY8Kp8jNcvuWNdu8ns3iKrw1kZ98o2/D2LVmA142qRlN+7Kv7nV03hWcRZD1tA6I/PGY5KjdAyFn
3t09ZC0N/ykcnmIBdMe6ABRV/XbUVu/rmEsBvRxb/Q/4Rm/P+up1d/31rnqif7pWPs4uRtcyhlcjg97uX+AYf6t9xzpb6VvmfiSX
9kd4+5iD5D7qIjn6NSujfsL4KGzkfpOzvXTNfRDURp6uFNfk6t2m8JtHszOUO64QMjTRi0FdloE4UJaSVA9amCRRUmklob4U/nVy
VpIH5G9s9n0nD9/pwXDlTHNRaEbYgnwBD39KyJTUsX/LQ8MhPmzfSZldmo7HflcGGMojNr1gYLQK4XwzUvAhY88qixStfThF/XgY
kJwIsBjXjSNtxLv2BhEJ40DzwngDvs7zFtkZd88GcPNoPM8Qg6y6hrBsgxRN9/2QIoQCThR7NIsokDHXEPmxFGQ0Xh+EbbJ92zoX
hyAQuyN8plwUEMv8bIIbb3Goc4B+RUtTWTw8aIKzW5Y8tzx847LEI9eGiIj7BBEhbGIor9t6KIrLHiwb21alFg69lFCjPOtohvVO
oqQ5u6r2db373zowwc91bXXbIlLprLa7BeaDC+o8/nBw8nRzoc44buMfbizEos1fCXP74WbEcfuru2telmwVv+aIhh+PYYU+Hubw
w9XH0CXXur//hhKKNRGu7+Xd0j/pqy56kuPVX9dS5w3w0qeVUBiPcJ1Y9rLUdj289Du+2nZH1Ra1GiMCCoVkNR7Zgl2imiJRGALt
zyheQKG068itcIAOYw7HXowsRVzM0U/RoDEjVMaXEYoHFFq3AzdFkUZN80Ak4RMxOGPTyYiovMhqtjBgICWWSpADoXDU5pz6skxm
YMCzGA/yM26zJppdEodyLtHgoYbkBmXqoHRUGioMMU41bNCSGw5HnRgjO6Yr0t6RPJoieqEA7D4yl3DyKFFWnHyt5aElO3262sIE
Nj5LKOJ+vx9x/3WHmsDEPlat19A6hq/zsaYhBsQ4iw/eKAmR1eWkD01gTEhjFx5GJCcOdVDC9fuKaw/Nfc2zcupFNN1JEZ+JFtLt
29c3BdGhmVW/ifoBvuk59sFAT1FM0YdqFOhuOYEa3AcTXC2BE0C/Zfqtwm9HXJacKKe4yKC8lQ8H8IG84IAOW6ETPx3jcODdcUYA
MKJwaYJyrMYwmj1m6iOLc84f2mkxZ+Vci75VwQSudsFlGKkwvDEXT6F/IBFNvAVfUtzosNwgKsutyu9b5yiGv9cVRtCN2joF43xJ
bst8y3hKXkKRk0Tm+hIJnWBB4y9izckVbSFhHDCTThSnxxM8eC46RCBlii5orrWzci5hMIbLPQf0aa51wcxj0horuYJ2h38HXymw
pKWgZTIw9EU6wu8ZRdjsAMVwRja+Qe3pI4eMlJWikNhpeLcfU1fFvUvvDEBdlHrq7McaBbdEESH0nFZyy8w3o2Ul92anUo2XUhsz
FllPwxEtMfkv37ORVxvR/hKvZ5KuBdIw2RtoMKabYP0C/rK0FWDIG4xqyV9TLT1r1AJUlahlM9SymfUGRkt2ouFSrIAtl+TFCTe/
BT5dNLf68lskZ/v59bryWxD3cGUE0E6pWjqHmKc77SeyC4LU3DOi2n1cRjdRNZC/OKePN+wCLzoIyE034FqI8UQM3WrrNJRtFGX1
BsWWOb5gTAKzMt6YurLzSK2BOLPkJGMscaO60k6RVXJnC37a6enqnDl6zwPGHRKqhniOUfRoAy7DXLyCfsn4RsRH9pamjBrKErES
/RylKKo2FjATkchUiqmNTR44eA9Wd9ttu4NPjNx220Nwwy4Ei6/08GuRmfTKU1fViHE0xcPMFpEN8O46lWe9oit5UTFlJr2ye2dr
rzAoqTZKer12qga7jVO7bwKvDAUThmAOYEwQ4jMguc7G+MdC5jbVxEe4Nk5ImYMpM+2tFNJNlAlzSM/09q9cA9rfJqHtfsZqlIiw
joyiXeQRFUQcRdxBszQMsJIMk2+PuKHZ+bGjU4RDsbf2JlqobhAeX54RWx2fGDtm3IKbIKb9s6/D1jn51MLNbHFzle11WH/O17D1
ZjP8pJ1zUbU+byepjXZ6ckHcnKoaUA+VGrdjtT0mn+sKTTS3j7ndDQrNg57aWfQEF/ajt+FbGtTKbXi/ShJMLrV20ythXgp8onnS
bNl5Mvjll7PGHinGMgZJwa8qgjhKkBo8RQ4FZKVLtrxFnm5EGn5RVTSxlclSP1nK9CsFeTddb0P74P8LZcksJREJl2xTMKB8+5Z1
bn5dBHUgTDmarrafdsQyPK4qdz/ALQ6pN+75hjQcbXoKbFDhJ9AvMGWmZ7UVyXgMfmeoTLbUGflxQH6UgOlDIvg4NwWTzR4v+Lgw
BYNrZI59iDQqHHmSI9L29gB0hcEoDGm9XOjy646duxN6lxxwDgJ2bNkZ1xWHi1tc+3c7M0Y6GbhvJ+lXVPxxWuBOEPIMrjfue3Pc
lbncFrdy9sGNIdWNco32VJg/cFAEB0CLqnWTOuGB6ErH5c78oMyFcpdko3hJaj/vrAFO9Dg6CJxv2Pi/YKFTxhdQ4+ZQ9NxthYwE
pVBZkrJ1foESTX3Bu4vuXhRfGciWTtrUZjOwXt4Ov7NUpnQ9l7Zk+gI+nUNXMgzi0fwUXkP78hT0p+st+nIPD0dCb2t4ZMpSFsij
AiclcMtnKgXo0FhyCddYzuyb7Z8dsDBSa5Kl34GObDm4/wTcz1Pez9JSjznY2YBuKEw7R04q8NU8BfKYgL9byQXmiVPo858mogVr
yVAtJn3LDN3LElH1afr66FIBW9DZyEOeWL1w521Wb2cY3VWYfAbH8m1EYALJDrW9DX4lgdTMUh/h660v8BIgXu4HiNsExEsBYK5I
Af83d7awPBArxVDA/+LFIkEYnAnCFO6a4jqfjI3ItuaEIzHug8U0ZWtOCvrLCkemRbRqP8VFoCJrJyJQkVb+smwnj07d9cAD/HTP
iExkhXEnvrqNb3TCoeyQfrJmHoSaakS4jDfaaSBY9HG290ow+1YU204gP3IdB/TnXGj/kuva8ijW+pgUcG15nDThkiOFJeaO3F1e
g7+OSA7nSMqi/djigYhNGC3gsRuPG7ClGPuPj7d4yi//uLQWTlIYlMOoCe0VH4Exmqmc0RdtFVMuRqY16OO8J2EQEuI+ia3YeqxR
XzzWQJzkILJjDaCIeErJ66Pucr6NP5CHCxfd2fkD84Z31UdcceCB66go5I7o3e6H98cbzirhO3ZO7Jfk0ddHmdMr/qJe/6aKOPdf
eCAmrt+GIYnElChpuVF1k3dp5EuTJTe+QToCxpQHyQhNexGjL8no+PciJutSZZRnD5GrX4qyB9BTPEoTvdEvjrgzD6H3jUypHqTd
UvsV68S+UeuyKwuEa4l0MlJ/MysDtMvGNqHNUYQcF+UpT1uE6eiccjG1BNfAcGKE+laZfqmAV59GXMCEBznpPI0HcQ09gDA8ovnU
nzcFdaAkzcItyS4crDZ4eNvDSFs5iYGOu5tZhPj4MVXkMk/geGMiNZk7rpDb5Ysy/smqHKleuko587Xo4U6rq+vhXj4Zs1HCEdoe
o2w542vHbetsBxc2o3d8PtKgDMlhLpDc50olQ4LLC8Fh8ZKooazrfyrCOk6TCz1aVrtb69Hu0vo1he7Gyyp3BTLXR8kq3Qx2aXud
gz7WNIjS6pZBphwZJLe5xWi+y3KH4iVYGIdBlbhVmuKPaETyPMOR53FB3s0x4rum6looFIQL8HqpL6fV0bZrAdgf63JAMw5wrQ2d
FRe65Y5qJmdTANEHLPrjya+MA461G9p6IGRPjQFUR4Cxj5BNcULWwNgCxtkYCF5QHWGbC7mb0UrjgascAw9yccmm4m0gYxclTlhD
dTP7FVJUEr8Q7/UvxOx6hOa0MLlV/P3r696kPr0Au/zipG6aPIL5y7lEzfUt0TdFLNH919r+dSzWp4X+nvJSFRDVWm7QGlqyZb5k
6az6lm4SvYX4tmTg1kQJVVqP0S/YrowyU7mpObB1gf0pE7sr+Yi3Fl6uupbfojqi+MBOVPTvRAeveeBi9qZNfi7rQY/Luh+4rG+t
ymW9QFzWC1fFZb1AXNYLkVxWHEf1Aue/zIzgqD4qOKpsLEeVmc25HNULxFG9AHxMHu5RsFQUbkOLiI/iQmjkb5byLk+lWnmWJJ4q
S+8iv/KC2dcZRKcx4Ks2zG7oDCFnRfniN/LwAfDkp+BqGIMIwLObgAMszG5mKQrl2HcKQwb0Aed0fGkA2rfFGtiUWBq0Bi8hPdTf
2cqd+tGVnwTBGOBx+9IG6On1KwlrAx6J+3orOvoD55QmruqtGJSR3Pg1Ic7PIBXFEvXtS0PWUOdG4s42WhvhzW/Dt3YQF4dz9216
K+e9xb8puLGdwI3dC9zYMHFjpc4u4MZusoZD3NjwxWHixuDsDxTghQIo4zr/Hom8nIgCwyw0dnqudQr5rvLQCX2+SSapwi6kRe64
U23dYdlKwqAULVUwRixwJCUDXqIIsnxZk+PbfJWEp0KqKcxaqlhs4nvR9YyV1eP7T0y1p1arDT9Rq9bXVaHzDn6VJBkju9fN3nlW
NbFM3UH8hQlfPPbOwHQ6ZWLeIsIb2Nmxo1Nj1WmzaSwCdUzmI0enOBdUvn68BTwqeeFzcVFojGyVUlY/Tx7i3A+PW8Iaf+f45uoN
Vk5yD+q/psgJUkCkOwS133P3E4L/GltoUMCCVjmLqVj4sJY3HOc/PDRFtd4eZCo3RTGVxmk81KhOPJzBA2bhMebw0MBDE4cnj9It
seZ0EqCWe8zTes1oCWaunKq1sPsUFqHcz4XktTpgTx5Rs1UuOoJzVz78BzydMzmS85imKcEZfi/Wmam1RM9iGcP3ILI/F8MYxjOF
mP+Zsja/yBm+PHnZayJ4ryqEt8gW9pNrI4p0MfVclkS5/ArZxPbRa95I1mQbe/1byu9xHeWFdesoZVdHqQj0JMfqKFXSUSZRR8lS
FKos1/qKp6dE0R1cS50CadXSVtr4CFo21Xsp/nYR0TlqEKEU7m2EDYdpVtpKomZtKYM54qEeiroLX96AgjAGm8oKCueyKA4zvsKS
ota/t1KwaT4N7d7IcrApDZOWbhMdhwNa0Twh8qdoDDaTXjRHIrW7YQNKdrbA2/m4t+mdrdC3/AqPyLtDaEa3RmhGe6ie70CJ2Fio
tMBLqZ29cG+YtJHX81g0wWcjr0qs2KWzvIFGtwfGebsloQUHbI2OZnQj67+mWgbWqGWADYpaUDN6I9sQGK+gZnQHbGefge2sIDSj
N7Ihc6dV8GlGt/BrtpENuwJ9ealwsQAbHJ1pg0PxxKb2U2RFOSPwWYk1SYVWqk7POfsB6iabCyZXm3JTy5OLJUCirRrjar6Flm60
StM+fIuKvpq5hzbOCWNU4sYKjuTRuItYJls+OtW+4AjJ/JuSs/fsbDm7EdfZ+jR8XGXapcT13ry1dKhZWmwulFpmrV4vna/Cd80m
ttKsNRb0V5VzPhvOcvrAgmk2G3cY92D77iWhJB5Q6mrc79DGxl48vIKsO0mhgIeH8PAqyQkbRCqPXZxc9ra2A3gIagl9W+Bhd1sk
uxbM+2g8jJj3hulqfZqiDTv6Mb4felo8R0/NxZ88ZPtGvn3y3qG/iiAFQoau5V7PnvVJvTXR5IwPGb0+IjlbIOoXjXFJKFkMzBXp
28sx36CB6Qm4BOSY5Gx1nhqwNyy5ei0evkqpPLEVGuygNL3lvjnT6yItBwPzf9kK7HflHK6yyvTpZm1aNybxE1N4WFUl+Lwq8r1i
MpJIlaDMY0WrFOJEo6A+eWkr7kAkshymkD9BZeHg1SoLX3nNexM+hQy8Fs/AX+8KnmJZeWRs36C6pvyFlNar3UulXWI91e/njea8
iI+ZtKxQHpn2545O3TV6T8mRNpcOHD/R2otlo91ld0aU3RVRdu8dXWX3Rnzv3qjvPfBAV9k9d9wf8VyozSNcrMYFMz1jfkrRuK6b
nbUPCWtlP4ojXbwbcXkdpst9Sc90+c3XMPgDRIB2dcR0O5Ib85ZOZDcOiG54mPaqO7HZ14lnojqRDLv68k4weVnlkY7eeXTqgdHR
ChzvCM+oc4U37x6lNKgVMYUP3BN+WJjJRJXeeU9l6s7QjfnqdGt09M6uG1P+tWAskwwoYugOOiuAFGS0EK567LYlXetuHs/Q+L7w
CKb9y+CSGEGMB2OYQlApzm6cQhFZCtUW5M9hAjWhbOJBbVGU4ZgGmPBb0FLkyWECbYr0pgn3c0tJM28hNZfExRYoSWHQXKAnU5Ue
K8WjdH4iECJvRELd4j133EML9I4QpJFH5thIwdgtOXHxPIaR+MeQUvDLwZ2RxEyGoykZSQunN1fFj7HjOO9EHNNTLs/5QITTwXU0
Y8LcRMwbkhEVE3nGG5OO9gSQNg9MyUPoqiIuHP9DoUX3pLnL/v3+SXtGTNoza0zaMzGT9kxo0p5ZZdJ6LJo4lLIiqLnXGk1gBiaw
QBOY7ZrAZBkn8O67+ekefrqXn+4rp1t6SweQao9E4J+94mawtP0CwXgpCsYJtLvL7ukuu2P0rq6yO0fvfGlogN94IA4/3L1+xLG3
yuZqo6P3dWMUseZ7r3XNExIitH5jaOEbb3FFBcHlXk4bOjeRCi35kbgl79sDMMFPs3F30gksFLn8iXZSAW/J8v9VUwUEhB+QXmJI
5s2TVZEvz0m4FO/495/heHcsGXa82xnfojhnu2Iga4ZMoWW/yuMBWDIFiv3DJQWDOVPCIPKWd4NATwm7rGHP5upsIdr+CqC/YCoA
/xgcLEW/ZEq0k5hVZ5NOHHhgvCdIGIB+ymiwfNHMiCwZwOqTwfQvmNlODvAJXDthwwCPaBY8t6xIiDcy+DyFYP382YtUE4+djmKC
xIJE6XiwNIkha+lXCn7lRUsKGPBZhIom+XJEucZlzeJr74c25v1tREueQCvzopUFaGU+2MrGrdSCDLWQtyYLX+p1a+11aoWv9Vg9
RsHKwUhmrFyoxt8L1JgTNUI9Vi5YI84QyZVlYMS3ihnchuIVljMHPMu6Vezo8v6UQ9zTEXWSxsNOsHmKeU2phig0bbs0Vq3VAb8A
A9uCFcrdGUtOIi20vRmMjC3rReMKppThKcCIatxAeknHl8NZ9vbGKiz3RSdjV9NN2mUPYAPCmbxCoWdDZjRFnwvHY24Sm2B82PKg
Pxy18+Eyzx0kfNvd6p6kF/yhqt0XtjqRoCM/1+d/h4fV7utKUMaj1EYYDjyG+KLhBlsKR4/NyoMieqwm0pZgOP4sT3PCg1i/qHq/
lKyb2CRPCYiyFBghr2i+8iIKN29YBSs5Xp7JSLepWAdPzKw8kXTVu1qaSq7OvfNtccTyqMsuRVDBlYj1c8nHVbwr3I6kvx1jbroM
JzXRMjeBRTJrt6XOAtIFJLebydybGe6gsSwmL5KcELgiWYY6MTYlCCBfXLA7XRWHSI1Bq/YvSHFQnTYXqvXKDHr7lrfW/A6rgh90
OhkV4MXeycM8+WInk6CDfKk4S1lrzDR/OCnypPCMDirJv1VyB9Yk41JU+BZXOv0hEV2yPWNBd7iMGkeGFHWoE0Z98RBPQkXjM4QK
R27i0BoTvwFpG0OmhoTnbJYSbsjvkIn8HKKY4xSJ8uyQiMGdX+y4KLCnU2CK2bsWChSjT7q0EdnTpbXv9OwMKcUiUlS1Rgnt1mER
ha3auc1hkZsU9zhiRG5PnB9vPULBVfAyTG69ySWygqon4/9zkWcIgaVoAdhFryXcY9lWp+H7dtYTx3HhVoQ8yt4Y041nPbYD0YlK
DuCatBXzmZHHGobq2C0Z75FCoUySfrbjQT7z8ilMkyKC8MKcKR1ZJKtSuIYCE1nhxogMChpovIO81nA+2q8OSoLPo9QUqMoFo1Gq
wk9MaamH/D2wS7gnnYIl3fDJjKf43Ao96dPOBMM44oiXb0RAaC6Yp5oIL65gE/hm30DSZLQl/wQBNJLNa7/urBPShGG6PK4c09zL
gxEzcAPBX70OYMZVpF1z8YtJEc8J5YUqD6tJ+qqUTNnGu/CSC3ltkXu5vTcAdbtdqOv3QV2/B3X4e0k62y+gKb1oirwg2xACmWxm
vfyoBE2SyA4iuZkkKfFP+w3ZEvwLTiGfvZZfst5ypO1wG2eU8BC9upf0oSU/ftpbok1HTCp/in9zb8kna6IbE+090dDr1OjjODjk
5jhX9IM4u++OMA8mCI2CxiRHx1nvg8YP47M/Egd6AxFt+LSLZlMIdhzoimTxv1s23rcqmv1RB82WA5P9yFqT3TrgQ7H9OMFOZicD
1UpZgVqdxZBb/GEXtWKSTsksrAu1yhPt21bFpJ5DjkCivWtMRRBj2oMISI7qpSJUL+vGnlg7YU9v1mzNKYycv/7udv9pUsSg41jT
w5kuvvwfUkQMetWfiIzTM5T6iXx4HUHrUa5RGT9xyC8YHm/cysvHnjh6NPKGI8AP3rws06Zt906ebp4/cPyEQ7mJQOE0NuEOlxxB
LbxCvUZCA4cHSXX8/Df8okRkzY2Va+7u3mDrPbj2OoZW5VgiNBbCY2C8Yfw4zmAnggTcGtcD/Pw/Jn3p64xnr7nlj63uwHCrczu6
/Bp6tT2uV97n/803M6RwMn5iVTHJ/QExSVkhq0kUkXCryaSwmkwJq8m0CDWgMcw+2WN8AOmm7yG0j20pYWNQZ4qaUiREncTUXYpS
DlJCI+ou19v9Slged1cNWXu6hom73RiUFI1AQmIDrWNFUuPErLSMv5MU+0ueML6P44K85Cx6DAbAvfmRtjF+CE2rRGizf3EhY1dM
oNb/SAaSyuel9nAIwNYRxLJfLK5ZycgzqSEzGfmby8oExma11ZPNZp2aFWvSLqU8U/KN4fqjYkgFiIZPOKadKJch0872fChn7FPk
FYjmndu4lSHJi7f5zDsnxG+UF28zM7CLoGVjboUzQNtgVoSlIJaeS2DUHG6Ecnab2GcKi7/kEh2YlF3xJ2WPTkmGbb2MDNSVHdE7
jQsifIPp55O5jg3/Te4uMwy7TMjt5cAiZbzaFdSZR+w5TtQIjy74WlxQdeST1ZQQWFKqC8pcxfeTAjmlFGhHaW8OT3CMRHBt/4QR
yc64I2SkY/wUNvgW11C47ojoN4G1hVnK2kco8NerQ2vqTndNDTlrCg2UaN2kxbohBpBJ3AzHZfaylLmXrxTHk3StlcITnFwZdqay
JOaydEg3q7V6y/gIUvaF+AVCTNpPu5E/aKlcjpl346MRY/kzUDaccrlqWViUae7stjd1oQ5ncrojzNvpSoU1pysVroQPBdP6mTiB
CyLq7yTdKPMq5TrU+jSF7nTtf8lgdHO+/1mSsZXvgacAAp+lfVBg18uKE3mgi2yxh+PoFnvregiXIbRXOFSbmdENvTHtmitEbpA3
ig2SBD0M3nF3SNKxkd50V8qN+otmFcavrrr/bwv2f7NDA5zy997eHE/DGL8ct5tvi28sboO3hNr5iWuYJ2SyT8lOSzE/60kc0o0x
lEl8W3fGt9Wnkr4j1OTf+M8kPX4FSY9Prk16MHfp4Mbg8N5keOzIAFxbZRSIrUGQELeJ/8Yxql/zfMtfAdbXrLPS+erirWQ3hkiH
N6Ohny9N6S3TW8mlhx8d7yJvQiH6/eSNCLPkEDaqP5GWR9UECRrjJ2Pol1ekAvQL5v2JhrNrJmOMD2HVP7Ua+bLft8Nsi6l+TSoG
g1u3PxLaY97j7jFFxzuC0yvGXnGNxq9yQ/NRNUVByWSAqpkVv7O+3zl4uyjMYROzBbFTFXnQHgokA6XnEv4SJp2TMKqwoHiKYh/r
W/wrdx/r7wwAxTO45j6mkqPMiOKg0zD7ANDrGjhOtR+MJouix3ivR0gQuTQ2smE99JLnP+1RTq2IHXNVSilyx8T97FBKYDXcMftJ
OIIS6K1kw40753ZZ0EU3xKycl0IeFT1Mx78aSyU97lvD18W0JIJYCgh00C+gfemUSMPtW8YTJNLBZTyIzoC+ZfyQuMZlrDQ0frWk
EAGuCAIcBTuDsMDzQrAzaJFduOu2I8NifQZJbpHpLgu/+/hvsVD7Fz/rioAGOoOwUDesS8EoQlCPyPb1azG7v4lofCR6ufowK04H
kfJDV7c0Q2uRhETegnwtCvKG69WFxvRp394mdHjlYvhOjHyJki5hnBmiLPXWeuj+51BgnHJl77JwP+ervCDy0+ZpjbdvikPNoUUa
kY/o51yvwhCl+FwcpYj76n0pj1KkuP3aAFCKvxKlonMD/e7yWx5tR/rDlGcVrvICelEGelH16JBP8AByv4Ct+EUKISQCV6ExCOsi
BmGLQ2sWezOOxJR+wYwgCD1RIdm8RGkGd/vJGBP1KDFEYjPlSz5YkFIvGp+WYpIxkfvpIyFaxnVA1dZDz1DUxgw5pGYnkRn5LQSK
74umbZDoQKLCBxwndfO8rq9B3LQ8YsShYYAmqS/CW6bRZAvTAHPBkUUCpdTl4ep4hxL95vdw5XoeFL9QWEeV6JYkhXtMUdKoNB01
N7UQrFbyfP0td426FAzptET8Ubu31jrmT8VlpwDUMKl0ij804o/R+NtBSijCg7adciMKFgXxQwTQjfFrK95P1sXh78YvP0YM75hJ
qZRmeSY9kU3UlMyUJaH7ojEl8osmCJNPkSAeSlYkDJjUKASvXdb37YCJ5QDrK4cwsXxRJkwMZx/rS/Gr4yTyyGgu1FnlpF7ROaHF
BSYF4zNSwIiDolV/Nohlf9tBsKSM9hRqws6raprV6dN6dGgTEU/iNymgtk457sJS9+62LQe56II0TH5cRZm46NtWm7+ub70sISXe
5dv8t69SfVQYiQAF0ME5YghNHSQuFe7BRUlPEuTTlZhNrgDdj3E9jZNAdp5EM03EMESGisAfSyrXm6PBJmrK0Y+JEd5h2kra3dXz
iz8a0JlnAG2vZ1fPijiGUg9PdLIZsdSmycfHx6ZKYl8vAf5Gd05MI9Uuur6g4m67eMxBSk4wutUo1ZjB5NSUozna44boIfeW3yH+
NqzgdRxQPksus4Y+X68CSbdV6gq+Xi4EKw2tXbHXU4D1ctZBt0enylmntqNTNCzG52LIxXenfLG+BqWirJGlziBsMRps9pyYXbXj
XWSkKxH/Q6EEJiT0ZuTHyL9cpl8K9+mmBfQ8LKDnHYKSbHtdv2/0LEdrPvTphmeSvt8qvo9onGciMTPIHeEzojzH1CWpgdK+vO/L
6tpfwEXIkaETHtV4Hr9lOcEBZMdgeAomnBCTF9HtOZcaxMzlZXWy1tZpFYQNXD/rbgwk3t3oJD0LxVJ0wrilDB1jBJezZJ9Fiuhy
lsy3+O9+eBZnhXsA7zeM6mK5H74XKgtjtRwGexJR2j6QElllHHsu7v6Tl4fpN9pvFcguK0VorkBurO1dq6wQ38e7REUB9TEP+0eC
//7HCduZtFgw2JjxVDD0EO7iPOiQ8ZiThAaxDAYNOEdlaLjI9yr8kotlUH0sBSxzpBCWkS5KhGXg7OMdxk7N4L9nPrCvve+qsUOI
lx0penMezvhCK+nzksAaPraAKIffjdP/i8Dxn4thXD+eclXDsnD00siebpCMOQDGd66r+SO5eFr+d4OhfT4vrRlPBWmscw7hg1R9
PqPlga7v0TbTvXhvIMeRhst8GUkTkaz4ecSBm8Z8SauOtk4J4ToGiJNs2hFFyUSzcQSoUrTzRFbQJdqjqPSbBJU+v9A6zeFS+OVg
yGjh6oJE+u954kY0kjH+aF1eTSi79XrxcewFMKkRkluvL8YfxJkajqyjqVyE+AceqWD88boGnAtvMcUZ56h/Hes/SW6ZY9yJ6YE7
RscbgpX2WnsAwwPHtviW9QxutXUaJ/RPQgP8J9JqCWnvDMtzc2RvL62S7wItv/LGHyId8VGX2xn3MTvzbq9Ihaw3fCrklrkwfcYJ
r4sOvBTZly3oZKbcnNNLRFfuyXoCW0O/zWXSXb104KO1PfqeEiB8dF7lj1DoX2wABcConqrWGnsmurgiV6J0sxse/xTPUQvLDSW3
gjMiyS3xR6SYHpEn7JSIfZzinM8G2Fha440QwNjFRrCgZed5hmme/ZpIEjtVodw0AYaIkNmfSYJei5IFf9nh9rksmLtbtG9ZG3qj
2SLVv9n8MW4272FEk5zjmw2PdOfGmsUt5lDidSdJYosR7nbAOSVksheBSnGiheJvImxp68GvYYkThybnyl8vwhmFWhSU/ewOV/q6
w+zDOxhp9owqYtP2Lz4Pm5TiCrhUcwP6SAQ2KeWiQpsUnP2RaO+guHoUj/aR+F1qjQEM71ZDfLq0oOdOrJzry0FxlucX/UU8/Kkr
8fpSnG2U6tNTH5dW2dW+7hfH4q42JCzWii/K8uB3ZaUgZ+Wiy4atu9sBlijnXzno6Y3zDGvjBIlBPbHoPqRiOwpar7WGkFU2RvFI
0vwk5Y5UMecEF48CMw105wp5lHAh79mhs6n2L5iU/ZivBuMShuafJUNtXEm4qs5JxiUoQ9IFENgKgnQPCUsTFGE2Kdo2AyxaX6df
tG+Av4vh+c1BC5/pIS+ZNDLrSxqUaSxlpYYS5C+SsTLGP1qZZfR1edbc0BliaVqjPcsSnFPLkhN64eyzwudj4yVp8RCs2Cyt2A2d
YabBk9nQis1ezNKKhbO7YjMTBP9X9j7ZXMAwC6idOo2+HIDs5motZNgQbwrUx40zHWPNKtlz8nAK5bTYcIgHbBcF4hTbx85W+36O
kDB4AmvqrcZNJgU9ALSJQdOrTpL7UvjFPe1D1wxGNR9LuImve4SFco6Cl1IEyxaPFvYlPEQwfsYW1zvOgyfCmr+Ph/8HL7/tgI2d
JEaAg9odwagKbrQdoN+8ZFxf43IOClO+mWLazNEoAbFezk97+Sn0co+35dFNPjwitk6BX01X6/WT1ekzsVzmt1MiQTwlvoS/IWlQ
zssywOcQ8Jx5KsmLCKhoJ1Z4sQDQ2x5Zx1ivlffoKsQn/WlPfHLzOqoWYhTMF67FE8eejDsVJ+NGiuNLKRFID6nhrKb1a1up/KXZ
Qhgf4xmkyXRhI3fMdHOqrGq74BBmC/SOnzXtFk9vTAcV7V956TYM7XuvzZrR+HKczcBta3fIZzuwLdSlv3qJXTJ+jUJ/xTVu19qN
Q7p9R6hVf70qBXwgTAH3rkkBhzO+yZTx7S+QIn7iqGgJUcK8obH2lGS54IuaQ3RsjCVDN/XqjuveNa0OyFQLrlDCTZtiiqjZtKc9
1eKtEUjykvPMqVuEjx1yNWR1GUeu3pYOkKvIYPdL7VIMrK2DRm04zhM3iz19G9GeedzTMWglLjEKfwn9Onvr2TzsxXvJf/a0oB23
49uYq5cpZnIt+tFx/rJTvMXtA9HbXlx/DlYbIsUJ7Wt800sZX3UDYq5C5/2v1VSSdm/o0/ekXVmlSlSfKvwCUT25W2rftM4mXlWW
QOPrq1mMHPDtGNfHVR+XMt1d5fvcalt3k9kKRiSTiHwkE+JQ4mWZk4/kv5d2LAVQeEAr9M8lWvNfX5O6sPu7sU0gK/vmmN38cNpn
bT8kDSntbXFdj9iclbCfUPshsczJENPQeH4wyguWmMU8Vb4SMmDRXBZKE7I9lfyEuDaKYsuZ6TW1UcKARSKN/1T7lVe16rtNVDS+
4kNCuyhbXDHEq1rgHk0LwUtCLHTXumR73FDHRIBN+f3xUSXR/qAY7vfy4SYVD19k0qzCw/URP0PycuRbmOCERYJb/stV68Rc5RFT
4bUT5A3q6cGcfLh06atYR2EFc+4p+E0nDJ47qb2LtqsWSnWKwAv3rUstlJy4MnVVCZn4iEYlY+J3RCIm42vIr9ziBrfYyb2F+FYX
dgXEO3vah68OlXbDo2Mu/lXXduR5KRBDzQvL+YgbfywUWnTCiURmZw7Wq0DNos347VE2I5wtSLcWPN/NclZcVWoscrX+DTz0RFoE
ohCrVcnKmPyARwDb9l31RVXNC6IeGPKb1999pKyz8ZT114NiZyK0/yaOxkYa5ua0J3GWgcbu0RRN03J072Wkszcg73B0SsigV6Wy
A4as6PrpkNTkyunQfvMhsu+fXhZi9B/iiNFSqFFIqgXacz7Unn9+qe35y1Xbc1OoPf6oU/5mLYWa9S+r2vs+cs32vtw+RmQ1zbLi
JKZG+Uekkd/lTDbRyKzWmq9XFxHTuKYwFHsmaOAr8EmYht5T6ja4AUSi14DgNoLhJXn8CzTG8bm2YlmXPa8a767EKWvS7XvUdNKj
o32+SnafYPwxYVulAQilxbET4akfi/Rc+tcY8vn702HL322R4PPSDH9HZOPDTttiqbm3p0O2k92NiEvAofjVOkjLealjnTTPfd76
FQs31ojzXb6GbI1uiKCsYt3RHiK5v7EXIxackVuDmHsVWAYUZicw9i5TKQbEEFpknJHJDDnBUk45MQXpCQxl9sDoKJ3uGLUzhw4f
GT9aeeDu0W9i4+w8RaoSHLp7955RIKq+30flU1q7TK3lPJibM72QzSFQz/IonYeqZvXdHl+lUuAPtENsl6KHw3stntjEbbK9R1A/
2+OITUmojX3EJQsQl/I6iEuuIptqvyJehNjVhyia8seCNOW/xtCUxjdixOQ/GqYjXe+tmHGMkYQP+sfxIg/6/BA330WToI5E4XsV
S2l93pQ7ionmZFBC2cJko8PjuVEAaBWuX43qew4gZz9vkgofmBoM6ZxEg2HMF2DmZtGyPcVSzrdgvOWltFmw0iy9LFNUp14rSUZ+
Gtq2Y+6+Th+P4NTYA7RlP49eZHye2peB9mWtrPF5K8uDPvNEsnhNGQ9k46Hull+SjJ8Ntp2ysCksUd+wlKPz0FI+2AMrj6GkMbZS
Z6OVZBkqo8DFSwWWXepluaWilcMEsIBykwyjOPVaxZkUsXRT/ymjcQlGgIJRPwXfXOoDeluMwFK/1S9CSX+RaXCV6Gyxklaf1b+i
eLVbfTA6XhsKVj+vvdHvtcspW1+LhPZg6yV58QLA1gDB1nWdbazXvN4aCMHWwMUBgi04uzR+ccL4YUQX8tEnSAtg50gaiGtaNwjh
XEkBAW5eMG3pPKGve0ZtebxhIEIYmzK+g6T80E4HJVUcyzB8I04AErMrhZE6J9lLXLZ0U1RoAK7mdoNtkJ8/BvY13oAHHQ8zlMuu
0miiV/U56lVl7gLP+kYJ23hwekoJwANBzdTqup2FW3jBaoYtN1u2Ol81T9vqbLPWsNXmvN6wk+cxMLKdnK43W7qdgW3cMOnV1PEq
Cv29uHt275hvTB9eqNkaLzh6xO6/MFenfKkNo4YmlXBp9497GeYmeYI5e+iEjllzJ7EWgVkoqCyZxr0QJxwa9GQQdm8oJonxfp7l
r+Vv26PjfI+hgahg57Xmglmhfkkz5aF56lo4vEm5V5S7wRb6ZJSPyKi4nqOneERBSmzRy5owHUjsnKudwqBbV7D5/xEXbvnf4cYH
EfnOiw1MI/Q7CGyRRmb0mjQs4lrlZZ5GfBAYJ67HzFLQBicrK4VkflFTgu8UyE5PpedS0qDcL+4UMELWTetcq/Hazmdxr5zBRO51
Ci0FZ8TvEtnsqWhJ30GMqBB2UyhfK2bSTAJGU6lM5TleWHJJYynAw3InDRhPxRCqVhrj63GMJ/ZYbfH9rhYRsA5Lm7l1aRE1bgJK
yIDH0JZxDgnK2/uvCo5DsMbBOO+tCV90pBReDuABE5caG+SYhezXuHnfGZKdtm6RnaCVryNBnRwnEYIbf5N2fbJlQQsFF0gWeetd
6+vcxGrGXB5D/YLLVf+7JJoRyVoj67PsUBquMy+y1lltP939r/JU4A4Z7gBMNH1ezO0PvQTmzHVaOA3wD082mt38mhdy6OXl2Rwv
B9KghnN4rWAwRtSHqKQPUXhaRvJxoOA37R9wPUSdLC2oV0dWqlat19rCSTToSyqCHwHCPHZydm+4OBATKXyzizH0npgYSXMHi+tk
Z629z9XMMFcp828xfhLfcbn7NAYW5P4R0VMdr2RxhTqvFkoWILikWbJxx1XHVB4BzBjDYKWv27HECULkl5BLKjHUNaWATShhnCog
X8fOljiv1H7K7Wd01KmIgGHe2LlhpIJp1r2howhiU8ZT3BfFDbVrD/E9GX5WTujTem3e3D99ZrwBIx0K5va+AG1BnITgz8o5Q2SA
hVaV+/zRwLCkVS6Gi8LwjxUomuMLkaTsARSrDTcswE5ye88qcxWRxDZem18QMUKMLC5vUk8q7UrM0DN9usYAZmsz3HIOoZI7XpRO
wmRwVn5P9ywcaDbrerXhfXXssrR64JNBzWHYk9zxIqavVys+4CBcj+kfNzNpeZ2jOFJhiKzotdpe8p06TQlUu/s70WzovqX2f7Cn
caKJLW5PU9w5IKana5llRE7kyWuayKrLs65rLo2SvEoQ5Bt9M7lzlf7FMMppPxH1S0hEXeBsMjHCm72pbTzl5ElC9pKIJhlxDXnN
pogJVBixYPwJwfKpQBjxAMNAanXy3KgQfvUQg5XqFLhvratC+Vkgq1JEVhU7fUBW9aMZl4+s0pZSF1NAVtGZyCoNjbParZiZ0C/o
0wtm15oTJlmRS2/dK4+Tct+VAvTci3iJMNJ+eB3kXGgXiOTNJkYGOCkTIujSeNDwkMFDFg85OYA183jZg4cCHnrjCL+0j/CjXgzj
k5vwsFlehWO4WXNs9VMyeV70izBunLIHAu/Wq+nualQei9Cd/PuqJvu4a38r7TfZz2l9WhqovDTd64J1xe/V7pi6L8tC/XBZsknG
Ou56LYX1JasZuFNX3X1JCBS5nkIoA16leQbuN8rrscQXGh1ZaHOMG+Q1rOwjG8EH3wmE5mvEjqtsxIg8MaJ4VvbGJ1dt0+iqbfIr
TETTHvE1baf8X6gowaDw7YtH9asmxbuzWxGx4CJ9wlTwf/VctVYnMSrm5gq/xGlsJS6/7KirFyHvYMmUUdhryqcSyxLJz1ErQhEO
TnXlzSWJRVqEZbRVkm//q+Sp/B9fTQ/yWs1NpItaEGDxZM7OxQJIvEbkWowfn/TWA9/44uu9xizkq9IVT/mq37F69TGkRbwVD6Ca
XKXWclxtY/f+iq8Nu1dvg2/797Nrmn8pPcNVMG9cQwXzFFfBtO6GM+YoOET30+79B6EcJdVvDHspkDcjSpilJQrDYSU3oawY3bVT
JOvFpIgSd5T9FlkN4+HbePh/8SAhLvkOGeXjwsUEJ3fdU85wQSBsLCNZEZNQFkYFdvZQrWosHm6YxqLx9yR/3W/6LP9dt9cRzdP8
eIIyO0VUQcvOeoK3cg+VObFMbcwfKsJdhGcIpREnNZ8JWFH8h9kwcYssyGvNWoyWSPPbyKC28JLUfj1XJKLL/CXJeL0z9v7fOA/h
a+49ckl63VbXf2Sfz39kn89/ZJ/nP4IaCFobF5kismOUzDxTzR5uvbeMM1zA3DZkp48ZM3YQefdZQd7lhYyME3MJh5ijrMwPYvuc
c6eIBGLwqtNH/XiQOb65bmmnH1WC6C+A980BK019HKS8z2nSGzzolTFtk9fLDVA2RFq1jedwDBBtDlNay9ef3Sfk/72XJHL95gTq
ps5mloEep0Jyv3CfErPDmCnDl7vnO+5q3kUG827GCDepT5wlzqrLZW/JhzS4PHALT2JzVf4wXiabnKuvu8M1zQ+liviS4zkc1voR
EHqO35rPUWaXK0Z8MphIYjACz90MD89rQkGMUHQz8OjcdYakiTKPH4wC6CG5IA1K8otZGWENkzVslYrykMgVuFuY56+yPXmjFwC3
Hj+4fYqD2xv9kYZwQREQzRAQqSI0Y5IDkZsOCiP3O+mgFI5kjeOY6UAAUI4pZt4HQD0onA4AUGHxvesAII3a1isAx3eFaq3uEuCz
kgg0wGulqTcDBC4pAhfNK2NpDi5eH8zBzgbk6AB1a0sZ2MKGKBGNsqIsaeZGUiFmKe35mLlpdnNniwV8m6UQX5hr9LtlGafM3Grl
KP1L3sp3rrMojTj82ka84qbO9TytC4WzRHAsADh+wgVHSiEO47cGODoJXNaGQUNBwq93ZyugbeO83auvATzjVG/b/0vA0wvxQFLy
WOYximX0wLjHA2M7eXL+mKNyigJkbzMNcZMRjOS7NUG3I4Rz+M672gIPvlMCvjl0DyEOQDtTOahSoqQrt1/lXKxTxZB09QyImDgH
GqViQKbhqOapGFC5oNB/BW073Y1nP7O+SFAh5vOYGybjqpnPQDyPMPP56z7m6u5r4PuSvkhUw5GBTKHl9qboSKZwS8TeWxcDG+5I
gEv8pK8j963KJe57yVziJCbHvQs+WEXL8zhlTXSQzBje0PW1ninVzJuANSz5sgN3v2SexqhVZmm+Nn2mVVqYd+tgNQO+Vl/klcVI
6UOVnKCMK90u3V2VNBeCHaqa5nT1NI9GLmxheb372f9f3bfAx3GV9+6cnd2dfWq1WsmSLNsbxXkIYpGkaQomDXHsKHHwC0tx0i1B
KJq1LHm9kmZHjrWsDMWBUnqhKiU8UgrrtBdwoS2Xvm5pKdy+butLW2hzKXdvS2nobaGltLeFlroF9/u+85jHzqwkk/D71f5pdh5n
zjlzHt/5zvf4fzNAI8+Gb15foDavtkbbVk1sW3cS/8XUtpU529YoJ5c3Mclp3MyCN6iXDZehnrM9DZ1Cz+329DP+7Wl4uc/H9vQZ
//Y0vPgtb0+tsW4C6T/xb0rDSw5xATDcMukBDZuc1Poa8Eqs8Y4A5/fzFHYTNy8lxHUS4TZLsN2Umxc8d5zfM6gRI9gcnVyRY/A8
Rml7Lmr1N4nzvOu8F/OANwpoIoSmAzDHo2hkt9xaLgE/UtNhIC/0rX4W+BHok8Yw8kb2QDNxQXPxIonzidoB/ntrRLgj58Ubo/DG
IGyh6B3OweD3ut5MyTeBz2PciZ6ReVC33UJo6wfsFobKwxNHlyrcJqZ+YHF2BbW8kxXrLAbtvkan+n/wugIorNN2fmL/orW0CKVV
9pE03rqMBvyDvnLVp3E2pKqYnhf5NhfltHzz8KJJG3MpP6Fdx21MBjB/NsyTBZf0tiHoUkREDReO+tECma/spqNOJi+jGsYHHxb7
ii50JWRfkXKPc2TSGu/t3FU8+ka1pygG7CmKPGQAN2a0inNo7JJspZvRJjdriUGKDGpb1uJ2jmAd4qbGgaSEAVyvCDCJBnAFZQDX
Rzx3rlXkBnDLRaGh6V99BsZrkjjugdY2GK+DzaSP406eT9JYhV+3kwty0rKRiJMmJnsjdrpLswaz00NbG6jOyLy8Zb44SJWScm10
nSH3b1vVrPyT4XJRGRAMMR96PKTrgGJ2c4LZ3UJLdfVS8TG73flcZH9+23CULLqREHzuED3bDJ4QYawz7hL43VjanawbM3jbRsyg
CvEumUIj6TCFL70mzQ95yHT6oQdVbwfVy+UQ7WG0866q3H1NWp67wtqlo2APY1x0Ffyya+gYR68TWoHdHRUIUOMMuepxz3eCQf9e
JDAvC+POhbmUy/M7kD3vYGEVdzTg079wxrWDXaXAd3m/sZFH0bIvhI8tJZWXkONuskk/7WvlXm9I+jxLNuclvBVscFeswDAm9uak
z61kUw673w7z+kJXiaXgEkOY1qRbSNjUuLHWuta4I1BQOEyLOC7qw8JzFZfvYVfs+GF37Hj0GCUBIbMzHOn+AiLkoCV7lASEMSUg
fLtgJzMhjGPM+poQ/8FS7z5HUaD/utVLsKjAGlhfswvAFjjiQTQv+5pzx4wTNmYU5epSlm4mTvNv2qZk64PAeA+j5BxN1GCibId7
261h00DjtHVt+cXLwy7hniW+Zac90tphJuHbEz5Ww/d19k6ESCRJ+0S4XK+8EcR/wOTys8q7viNCO59nLDHV+5iHa9mjeXgQdBob
S3Kq8hLmYUS2InEfTwo4Dh7F1pG4u6RxhGmnU/i6+FUW5TK5QS3PboR0cWJU8iq+QNcmDV+LFoTVVUtDE27Yj42oKxiY1i02a8U4
OBq5o+xVTzE254P0lKmnzruIG32SnkblU4m7/wFCZToGFHq1dKBykuxOF2uN/oO1um3R7sJ1G3Yee8KCYGGMo3J8gnLicR2CiM5+
lBMmlePYCDUt8XQ3hjSbj3humZXbH2YVjQvljqTL4diICVZuFz3brMASMfkGJRq9Z4NXP1gD+r8dP8z3pCtH1U+fPAtvTHOzLWIm
HnExEhNdGZqMi6GRuJUHGEJxHa/MnqrMnoZKDR6vCPAkgazctUbDVsW2VqdXavWVJcQQrJjKr/eVrmo9wJ7H+D33QUZXHvTwNTZH
CiCogOOVPYcl8mKQWQlC3AvmR9iwhkrpRjtYHCdSIN3hoXR+ikPRGErF90bJ1bSzqvfIHPfeEE5nNukPCri7y1gJ53hUzQep51vc
PViYmy9AnU9HHSMYh5RSpR9kXdii+aSKfJkTBt1hlbsvhLR1tfrIIVF0zEND2ZQzLjblxm61CLH69LiZHkGKV8BmMoUftbLHjK4+
oFxJ0XSD2fFNouY3UsdXaqXJWWt+yQ7DKulS8b1ukPKEK2jcg6w7SonRDTx8yRlfjEeOG+3WeAG8pQf36B0S9+hEgNjmbsXhDXIO
j6CeIgtxuIajEkzyK49ock1bHhQdkF1dV/iauVYPdEB+U/hI0SMT3YSCoTPKM/yo9S/1bsDp0KwJlf7tC+sv3c+jBHXaIXh6NqmC
FkhxHPqeDXO34Bds/nO2Et3lUNgiiVT31UlvHEAdlsg4PXneN7P3Y70OYkmhjvTdqDWBJmyCWtsu9CnpFe/sUf9vGDJCB/m+LmxV
3QTtLjnRVfks4aEdYORP0i7WCYMStY4x+RVLXfESki485hxrlEKrt3Xqbb28277ybS6CfX1oqZuh1qgkb2TkvlqQCW31XkWnWStq
ara+KTqN4aODqURYHT2EOdZOTVsVGUA8yM//MAumxE+6KXEGKfGu0Fb5T06G791aAwfRYOsINuNRFkwgf7wrgbxpkwV1DPWMbF9b
MFGcO8B2pV+dtzFGVqHr+MWIhAwOuHbSJHksFrx/MiGgtlItDFuB0xt4DPQQlFzEoS0BY91QDwLFgoHKAbEadxyeqa1AJoK8UfRs
5P8dPx2u0J6vlxRjPz6WceFVEY15oUKuOsZC4KuIqTwaRoteAa99IKmQLuLQT0Wt+E0jloE9dBf64Ey2jXd9vrXsFWELGq4oFzy7
vjh5w8aNDD17vpe0ds/xCm1U1IYrcHljnThAfHmjI+NW7nwzQoucgwN0Ke5a5PZICUo7uSTNhgl18FLHKhcGn/nLSR98JgllB31f
8dyKYz/hWj62+Uu6hrWqqwz0d1yFDfsLC1miPAT5dbhEHeDEGDmPOoplyJlsgUcMjRIqqHAf44SiSaGYBEik4VrakqsNRXqBTJi6
NJHcEGH+iiH3wA7Q5JXbwqix9zPdq1zWxVl0B6g0YIJSuINuHK8DVRm2Tfm9pAqwhosjIlbSEjkQXMsOnbISQ/+CI4ZeChRDnwgS
QzsiaJOHNpJiaEcEHQsQQTs2qusbiKB16xvkSfkNxw7VfU6C6G902KiSIDpACP0Nmu/FAFG0EEOj+FkYf4/C3UF+B/IfOgttUD/h
S2mQ36P6ajPpu05xoTaUOWxvb40IQfYOMy1E2LZHhP2zSlu+s7XLzEDbbaAtJ74h20V8XU65wmuVCVMRZVmppZnZ+q233jE9dfuU
9TDcGSt9R0TUU6ybnPrGbsJqqSv3yalJRP3KADl10HxBkeYzOF8O+ITVGRJAO8LqfICwuoiGYexVWpxlHHH19g5K3kVQrWjeqY2Y
JObQui7XBqGQJlwopGjeAU8pVF1Uiakbj2yJMZKEMIg9ks8kaugJMkvQCA4klPHZOs/zCGTw9aTLZWy3NvotIxawcAoauhUWhwTb
j4SxOMfhwS94WByDrBTSxnX07DvB4uxHPlMhe9yzWbEtnFQ7kRYr9eeQP7Imsd0eChHJXg3jdjwf9NxyO4mUZEAYcjvekp5rbift
KmzYX9h/Im6nnRCV3wyz4/3Ka2d2aPcUuPH/vpCNf0/K4W0Y8Ta65G2CKuXp5g6sAtr12wG7/lf6d/0evmbQz9dgCEZY5Qfhnghe
QwEX8TqLfAe8EVvjiKM5JRPwYxXEO7AKOr1zOErlBK3Y7WEZ2vuMffTkA4tVjNdxvDKL4Zqt72eEnoLLeN+1LuOOEHZJUfAuzv+h
q3CYpeRISiI8Md1lpIYL6Sgdc2I59ZGKkOU05u7d9zxPy6kZpfCezHqXSiNHAY6YNHGZMFZgDA2u6Wg5iVaTTX0oghEocAFePk8T
LnGk8fBWl2Bqh+AlmB7JFRg7f6Kc34+0/94lq76f7N1MWpkb20XOMJXFa5gj38yO5be2Yt+CSdAv1trDPAu4Gk4itES5Z6ZaJTg5
WpqhLuOkP8UQFNPzZjlJ6xQ6xfoHyqOQbk9KCaheoI1eNaLIhxXIenEgaC0RdGXLDMCjYQxAGR5808UAaMAA6PA/a/TSs82jfZkM
Fv8oLPysHCfkL2QEjHKiYnBW4IIGiz5nBlKCGUgT2hfqbDPtwtEVa/9ideVMDQaNNTNrL1pXHi4RyjkJo6ijS2fs0izdEngBpQlE
3Zo5UylBA8tRVlvE8OPyygGXmavU0IC7YnLj8A5BclRsEHmoEgHvYt1hI3AAwnQBkbvIg+xR4G0MXbqgc/RTusbYs7oKVdLOwmy2
CDRxGqrD4bKmkbolpvHG9HQ7CaxB3Z7B3QrBtffy4MIWWmzy2rf7xCV9tbh5KWrVVdiBlUgnxNZjUMrxlGIoU1qBTFQaw51tPC7q
0rGIK2VDVSgb6imOw4zBBUSYATTMepD2qw/CesCpDzTB6Wh9gvsc0HUcz2Bn+CCsSaSmsE6JIAT4NCGenqKnbDJyKdoYK+2Xskfe
gO7+hMEAfcnHgzmFyLqznp1UO3miYmHMsYNmu0ci3p/lt/ik/xsZqmRMdxqynXL11ZMB26kZKOX7UtJnXc8x8lO/yrTCVcZ0NowB
dEsBDewZBeEmgSkXc6q03lSzS8wVZSKADz2VcoRS2wN7WDCgLMzAHtkiVH80PkcWAbJr23BFHf1KtqYTNiR1sWSTHbah/qA4R3XB
e5ox6xx0sPSHj6NZPbAMJ2HoxO0MoswCsx1twpKxxpbbdCeHkSMQNgkWmh55B2YV5wTvFrnnIXesUy8KFtYSIl3CRAQGyMt5b83A
fJoGf1+IHArr2mpRiRxkRMaNRA7CmUS5xJajRx+aarwsmHsMaPyOGS2DMTo7f/I8PYVjeJ7J0emzmiIbKYd9eZwiE/C1T8DeHp7i
xlDWOXQU6d9nLqzU7Yn5StWsTy3yyOkVbnx1Wetuno/DrJxxkxyXawj5rCLrU+7FryJkFxkCvZyxT1XmLWm5GsQbmfCBp1MqgJwM
/UMBqQlfjvu1FliOgsilyK4uz0j4sHszrQtMetC6OOttXaSP7TR935mKfWrRpMktwJRYN+AkpN+HUgKfnrvgwn+WScCH5IwoPQ9f
Mu8JWDJpqcRQXkY5VonzYF6wVCZEOC9DhPNygDHT7eIUtrOvLaxXQ9FHnuc1jbcTrWSLTDQkb1wioX3YH3wQOCtYv7rhXsOskyx4
3frhgHVrJOiDA1euTvwfz8pFq88tHCieVh8KrQmrzy1y9bHmGKnNZxWL+EWuR3dW3AUWvDi8LSUVt7A40HIwGljva18QrNNYdDVE
HvEe1zqwI6TFAlaChBtKc11ahXGqzzB6kPUErAVPoPuUtJeALWHUuqNJ6nSMiFobpCdR8eQQPUEaTUjrQ7iN1GTQK1oPUDhdNeNw
HiMbhifsOCqc8QrXhckIXRvovEUbCo50Q0hy/6pJia+iyWNJlwv/nCYNNrz00jpDE1tzdnVf9HjiE8eOcDLldKU2u2hWTLzg2zxf
Yy9BTu9TOzxC70Uahru6FDMYp2E0cG8O7IaAWRLiYT+rJlmNiVHGqdRSVyqFc/MHUy6mXlCoJFAofObpf8/m8lVcdMAawyLKS9SG
VXgBuIAL7EIEXS4pPl109RFYSXVyzSTjt6Zmx9H6XkaVpdU0uqaf12E1pV+1muqNncCJ2yWg26WzM9UV6fWt+Hce/XXPQ7QRRnYP
LUrnYatIrzhRXmGTeB9G4eZAgAmivVwsXwnbz8do69fWIaN6O4krB9WgnZ1drCJwqSClQRHssnKtoTc+qmQ1tME3yGTuFs1awexj
EzPVesVjNOrx230rb2SYPGt644Bo6FgztoAThpG85e6mjqyXHV1AX8U4RUZEEo1MU7SWsRN4RV0ShS65i2C33yR0S7sJdhsIexMR
JhPQKVFXp+hC56QrnROa/cYaJeoUGpZduqWtT1krlcadAZ3DX3V3zx74hzt5Vy9l+LqxjJxU3/0Ve6I6v7RUMffJt6wJAmjff/Tw
senDRw/cN31439T+B2h6l7djD5zkL0yrcnh/uNQxvi43qMvLWapeXbxXzmE+TibtNJ+PfDTEeVrLplpSyvq8WaHk09X5uh0c4tCZ
1pTNx1MSAJJxpA6DAqDnkJ8B/mZcs17jn4o9HmsmjqZjiPEBq9MCTkdGV0BYF6IYKNpDVpHNfjGx2UhMcRHHANGxloHEWChMgG2H
cZSwkwvpi7FXRhGdZi1FaXTu30ryvfNmDFbM+Fq6cagZtz5lJpqJsxHrXRgQYigCT4y1DKTEACCfamZIL/hRM7mWrg3DVQquPmmm
4SoDVxlMgzkJNjwDbHgcRmqW2HAMgZ21e5pZDxueW8uez8IYpV8co6530ZorJ97Nmz3wbs73bu58jt6FXxrfaQwy0bi/NMu5YA6S
rYjP2bp30C/CGC7NAUvNA0qXUL8w554GCmptiodo/zLO83Ls0H0n7jvU1g7T2tTWjhIuW1vb37jemSs4w0hKVKrCjKm6JkbjFmdH
MTuzMnfKxv2EqDEfT655NNbLiR3ROTWhXAsezZcCDkgas8DkzlB8iXLf5OMzS/5tAc65ckYWhm9Y57wUlKRm40o52SPIKCblGwEv
/bRo4vC54H3SkN425ZyvZgbKPpdXZqrWKqapk+J29swS8Er1lapdTlPDTVPD8fkXoPNEQu5qsj9MCV8CnIIw/RAMRyzPuLkYpg0G
47EcxPSMC3eeW1DjyawfYAHR0OLeaGgoiCWVv4aCEZsiK5jRC9GLPBrrlczEDfWDtWmCdZkr9x3jsXbROPfeY8dfAbRrlUjrJZ1r
l/nGUKqYYfOPRZWz5L07N81h9/wcCWqh/jGlDPAzGt35NituvR77YMBVX+5y41TZuoBd9UQAP4q4YP/iqVA2SOIWc6OdmBrsTjCa
HFuJWAM2AVnUSBuk4lkyM3KRcS3vdnQSLX1vafQ1t66NksvGSr1iwY3X3LbGJ+ZYrB3nKIG0ky4bD0ECipj4wzjgjUmKQX/rbcDc
D4uwVtP1UzB4TOsHArg+9AX4d+eTRjS649nsZd1tXIVCgGmGv5kI4kPDBwlUDh6VC72zLhJdPxB5tIFI0U2KDHtBayVQNm/dbBvy
DiIXYIgO7tBI5xz9LA4lAKUnJvoc2QoSyB+dxWALl9gWQRdFKGEAAyjZkbOa9WZg8DMYREmLLL95+WYq/9eBG4mtpeAv7akH+op9
0Ea90VNrGVgFMmcj9S+YBv6uo+4nwdPC3SumIc/xSTONTD6cmU0sjZ6QlgFWieXLzYwr7Z3eFMuXzRTmb+GvSGVdbqZo03C5I7fU
8uXlDzZR75A+Uk6jTxn0MDAS9XLBNXK5atQqJw5PTa0uVepw8gidcLdH7DTr9/BwWRmU/C4H9fp9KYkp9xJWUA3liDCXbSBq5V5g
YQ5UTs4AgRK3SIVQzsP9fdWqSl8n4tk2KjWz/vi8fYrP9Nu80/1fqcDykAjGPS1cu2jaU/gF2JmcI5dxKjvD0TbFqnSPNAopZw5P
TeOnESGHq0dcV8aZcxSqrQ5nNj+zPo0vJYFfhZxXajYQ3Zn6KXGeqMwAzT1j++fCPM6AtIM8yDAaGex94Jih/zqcpyg0jiH2RzoB
YN9CIZ7j5Mg3Qk8oL6Im4V5WJSeocoFkGBwqXexT3S7UjLd/D2qnV6cWpypnlqozdmUsWk6snJtEuGDrrbTZm53hwCm+D/sv6Fqd
doWeTGl0L9zovIybFQEGn5HRcVlTMCRitzQlTND5bknDMOekjGMX2cZm6OMTM/NVDiFVnwFGm0cbscWnlYD+jZeOV2bqi7W9SPzG
jLKxb8VeRGrHR9dvB/DGb2BC3QXU7620ZQ6D3HgLPB1PK6EMt0nPaXR/Y6QETsYJooH7/LcHJPIcrH6TK48p21biWYZlQBIfGsD0
fC3Q23AkODMuGr0z7fgb/pCf1zbEH9X2w8qXVmg7eaxuWBFRG259EFbKqKTepK9ADbhuskEeTA455vcKdCXEleFYNQkRSMm4GLHe
TneSwH3HiSdPwA5N5yHXIMccUPYYCrFRXA3PepDuAiU8AXx5HvNcfgByx7Po8qDQsZYzk1P7pu47dPDIfQfum3Js4GCHBtThy1fh
dGqst5ycnrPmzf22VS33HF98fMqqVKCBrBlgxsr6xHzNtF6I7a5jq5WTkzZSnpdXVsupCdgB2aRnLRfuxyxIiOG8ewRpUALo3P5K
tYqLKVDAKnB4yh6iHKcbdfil3ijr9y5CZml8cXL+sSoUBEM1OrO0VM5Rd6MDMWyvapVywlp8HEsqp1AZw8/b0aXFuoV+1zB5F6t4
i6vkfSNi8NT83Kkq/NnT3lz3pgUliRA8jK7YPkMEn88BRcowmPBv6Wr4ZHuEuCZ7IlKOkgAXjZ9IfFuOCeFtXAhvE2bazJAwN2vm
yPipx8yTHrTXLKAe1Owzi/CbMfvNAfjNmtvMQfjNmUPmMPz2mNuhz0esN7EAKqkEhq93BIYamTdxdDjui6px7yZu3kQhhfCYIOMn
g86TlCZF52k6z9B5ls5zdN5D53k676XzAp330XnR8TvqJ8uMMrJU3JO2nCKxJzHx5X44P7MI09xenK7hmkY9VU6L1OjC7diklzMO
kE19rp1xkYZ6e8iHkc81EQQ/XQp+5Lh1iJed3Dte7njkermHUvCPo1eGfTfciQc6v5be2RFw3/VaXjQYhbSjF7Z57niTkmWAJ6nr
jstzNgwU8GhawXvF/f9Z8F9jVzD9DQ/a5JixOAbYUxyfG81OLjDpiYyklrSMcL4Ql65JGLOTOydx9xmTnUUg3wN20pMD2oWmRA5p
T3ou3MDRioC44h3yoANCfIHMmOAqJ97t8byL4o6P0bs9HXn+g50PzK0XrnpFbgUzRu+JiJ0DGG+1X73lvKdD2gG4GhDvbbMHPV83
hAba4tkw5bjdHlnYQZDGj5jxNU2IS3aua6tvUzZzu1olM2Fft5HNnD0qcEKMIxNjjJDk77yD/7yYjLOsN2J07CxsaoUrDvT+VFiA
vuDhsbeEyE9ivJ+dsbhO9HrCfuUmXW/Fsx9h0pBlXRlMOzIOxF2wfowss5iwZLWK+OCdePYuJoxbrHfj4Snmsfr6NJ49iffewQRS
l/WjeHhbgMdukA3fB52YW2QdVk6dWTRXqhXaXgZJB3PeL66lpWSCWGME60X2uUgKzwLMrUHxW9AGMXYMG4Zjnv4Mbot9Q9jM85Tj
YXmS7vmHLE9jSUaF5DzrAo8rG13T5Qwk0WIMRYpmFNgW3TqOAHvwNMHRAkwdWZpmQsS8HXE/bUa9T1V8yPfDmDRUfMiYnW4avjFp
nDdoTMKv4oTjIj4kD/vaOLiVATcuY6koSs7jJ3oiQzo6JN9I61fD0hkKv6kEzEmXd1Qv61CUd48H2d4WUrMn00JMEyHJMRrqc1Uz
8ClXDR2PFCVyfGsf3MECp9wRLhoPqCihDDU/ckwQZOgEXOscFBTGQhyNR5H2UBzQCLfo8PRzYvW8wigyWklgd1MbYRQJe13uy5F2
wftONCauobsxcCxij7j7Ou3qawfZ4vLG3Wz4u/lRzQOaGdrDxaDKfCAtlQPUvRy5MEXdK8J/vnALn9ahz1NCKPwcW21rYH3QqYcZ
Gf1GbZznMWkaeoF0uXDHsKq4uYFV7REeNxpWuBisu4xcUTNo2IfmnuI6C9cwCqBf8R6sndbrxZMeeJIQd/PWJ8XdXrhryPSu/D8p
ypTpCpAuKd7usz4r7hbhbkrc7be+Iu4OwN20uLsNv1LcH4T7GV5Xch3iFGQNGuWvn3o3/HvD++4h0cOVXSgkUqOpdHgKB5crLnFj
0JvghnpJeKA2CvTkGMeL4UY4IrVEnXSn3uV90lEQt2Q1pElso3AYOMTS1GIJt03cOnZsiBandmLioXM4LFwBp8cDqNe6Gu86xTTa
Z5q0336vAq/E9bPdN+3jX1GqhMthu+CHk6zPWe+Ta2w7P71UsVDMqhz8nvLf5qbw7+CldHK8wpCWplY7UV+sqo8iKdUihcsOsJf/
xbQyJOJy+0E6osFQkSGsNULiZ4h4oi8TAV2jUn5HyMzaMl7emGb9RDf/ic848ofGdSGF7gv3Mr8W/5BnXEXuDClyw8CVBSUN4eBA
bgFblLNNSRU6ZTTAVPKDkORPXDV5QRgt6xwM11qrd25cq/eT1ZdTq5vCauUb0NdapXdvXKUPQJI/21qVaDJda5V+dOMq/VdI8heu
Ko1ttA4ponCtlfqxjSv1U5DkLzczoDppWHit8k6tOqTIP6LqFFQdpJp/7arOzV2r4wEXzvvtfMich8gIEeT3MQ8sHdny43Si0Uvj
hXqIWiQcehgFRUewgsNkAGTsMm4yCkbOGBGodVEC5olygZJfSxjzQoQ1hYYQVXMCcDcqI1sQ6C3B3/4Kri27hNtOxbZxpVqRO8R9
JqKVH6xZ6HV9iVnrmPiGSRUs2x3xAgGL9rlwhFsBMr5S8Kv4Dpc1/m1aYajg0hC/av1M1y8dDvlSk13QCW0D9ggUs/HjWHMRq+OI
fXJq8fjsWf6pxytL8IG7kMZsdwI5TxycWpw4eOwMtEf9+JJ9sNbu64jyDDcH3Tfr1bNHT8JiVMcnQ86TYzOr+MXHKd4qPBKtvR8G
3bHqSr2zqBFvguCc6akvZ/Hi5L7DRyc7sp2wPoRjL7Bf9s/UTzl9I701nX75J0ePQP0SZf9u/fIWxyDiT6t+se6AN7vUaNuUNWNW
Oivyb2mlyDU0678HVUF3wxh3VkFMAuu7sNTQ8m/ev1K3F89gu3hGakeFrnoq9Cvf1ryMOxFnrE+S1xoefoHCyGhE3mgCjoTVKHTe
7ez+DdGM+xt+dcv9SpjabhDKEQcqU6BkHpmxMATDWSQmoY0+FAB6xmuY8tTw18KMtUnOb/qNtYdIyq+VdXOYPJq0ckz4M8WFP1NC
ODcbIkxq0sybvSTnL5h9JOcvmv0k5x8wt5GcfxC+dnu73zVnoK4PUIRlq1HmYVC5wxMPu8yDNZPzC22FT1Lg5nrJrCxVaqbwjMYk
qNvFx3WVc4n4qxIXnE/NJnwmwLrbXZ/UApGmTiBpMY7a7Ya0JMEsF8qikDNBQlGDjkKNQIqINIxL9jSpEiiiiBCOXmQy2iqiQMHO
+k7sxJ0uqIbbgd6hIvqMfevt3+06fwme94g0kq6Ve8RDdSMrcyEKNtZj/ZmCrnlS7vkFdKo5f5IDsEtz9cHAqLvwsIz+XKgm503a
TtJbqJwUigQnK5dcfmSlJlUaEvrd9XRXYGEuWT2Fob1eZc+hLXgh6HLoSkk7vA+5zJtJUkEf/kkVDwi/vp2er09WZvmQC9IDFDLK
tDlAC0D/U6yxM3DMKsE/1+jHfR5HSTnInqJBxr0RhBELOpa+fs0QodQNuJ9sJq0CaszxyjlrJs7CVTPRiss7PHA6mT+ebaLpY2TB
gGFrzDGTyTRc3rBcEM+TYc9NJED6X6BfcAm2yk5g9NJKDWNA4eSCPeoKzT96aC+StkhCZPkDp1NnocXGXp68OvNYpVrCG8KVTUDu
V8xx/6tiL7zXVyCvyOOn5mdPleorj4kq1kszplkx/XngzooPvPpevPD446Ixq/8FMVL3ltzxIl7koiPecFzyNTS8W6zB873OaXjT
BAeNx3jxVxIkIUFj4VQ7BT0gGGonxHt7DA0bJfDDtAB+mEZz5Wn5gVKA4cR7R+sa6ydJBsG5co9ctN3rm4n1OeEPJeY52fZcIntL
FbMgqT60najzWpazOIGR+JKhcDshmj/Iea/dCx02DS/y+YxjbHdGMKORZIp8CDIEe4266czVeBSPjZuCJ15HXp6Nz4BwA4qSBjuB
iuL1hLU0FxE+MTciS0PG/nDVjF5gaLVBz6LrzHq1CfS/qq/paLWGQt+LuGqTkB8VYOgnTlE5hdXZWqyptzI8GpSdvcAt1FBJ9lGy
NbsdJnkO3fMu8nfylDJp97YKaJWG+UPaBkzwPh7nchnOoS6Ux7pmnbCLiOBo6qcxoucJsqTDHFKU+zknd+tzdmqhHyNvwtN0Mw3X
CfkM6ovWyTySZ9FMrCVrmWaa4PgxNqe/Np9rplqodhtuGqbR2t5EC/x0a4SEpoTKt/y5da2WctWMAYnC+rzfqQ+UdMpbI7jzEadU
yH8HWcR9BL5Jlkai1tormwbG+lzLNrOuXLKQS66ZwzvNnOwJRGXid8R9f+6nZO7AtVDu69ryqdoR0b7MOkb9uusiWg469Ui3tsvv
ED3v+vpa3p8nnJcgr3Pi/nVwPyPuj8L9dXH/erifFfd344hUIw1HXtya2twoM3PQJzgqe8wecZZ3j7z1qHU79cadmxl7UL9/dkbf
Olv+Z9f40627XL0MVzQnemj84VkeznqprGdcPR+1HiNHP+QHjR+KcH5wrfCmCKq+1tKbqBPkAONFtyJiJN5gpmgBw9EYaxaaqERj
vDeavSJFMSxF7Q5fLv2YBhbSzrddT9ajy4+tJ5aXXN8fs2z81nXt0RJ8rXds69aXOsY2vydH6gC15/vFWKC64CifY9CeWMui+4m8
C/2wDd6LWTVoqxshl8HTMbwSaW8S9R6iHN7omje6dcQ3b+COb97wO/46H+lSD8pV1cNJ66nHur58pPanwKIMUM3f48qPYbwxz1c/
IUZa3DJMjAIcb8Y8My661mduD7xf9OcLefZRXTXVp/J+kcoaDHjD/XUwI11fB1eurxPpxRdqtRGacf009m9xxj7R2Lj1KjMh2hPO
m/1qdsWX4YrKKTb7xahKWBlzZK3HNbP6Ic8TrvkEW1wfLe8czxkxnlOe8bwDn5g7+TyA0j9aM81dgrb14xchOwl0pNRxL+9e/Vzt
1u9pN6el5f08vw9s5XVHrPcwGWrlm9KR8QpF0CrdK5GshNCMNkQkUGokXrNW2lN6zRr3PSH3uJ2B75RKIuWVHnruwOFdKT5EG5HS
ofnaab+iSqm14G2pqLop7IlPYeXZ4kur3T7pcWyiqXvEutMWGNW86epo8s3hiIprDIggu0D3rRIspHcul7CxPDEIkO2zfg8//nu4
zPgPpc8xWQRe0toJ4gklyArtZf43AgBnhPiZ21lkmHQxj2uNPcGMFFcDjd9VXZydqdbvHhcZB/rMTuJ3HhOiDNSykqMWwS3RYhNt
ilCczQjhG+hNnVtUNNGhj+B3RMjMYjNOITMPLRebzPG3JrPx/H7Ud9dIpkoWJuXYpF1ZqpdjB+ZnrNWycX/Fvq9mW6suwJoX8p0g
NdEfkgOc4ES5mqWt1yGHdqyCr5XT3KsEtpizdrlANt+e1B2MK7aJJ8UHnXbOEFqgIQwW4qzxPZtvZ2+puB1oMBj25OmLWlurhd92
EedEKXR8iinQGO+WwjuIacrsEPLY0r7Z07XFx6sVc45veMjvqqG/Zg0yzfn0wtt9iuNHXIVwBP6Qh74ajN3MRRPv0njwFQQsqXBV
Lql3f5fJjfx4pNPVqwf2avCGPS3s+0kb3NbJV1Ftgcrof9ZpWX1ykfyQ8bX2kPupkm9Mn5lZakfhZb6J+px3RjpWVbi7sn5Gk9bl
n2VS6JJnEmrpf+AGrMcnz7B+A+8OdEpKTq7UZq3fxJf/FxP6a+syOnwPcBGHsx97pyYbintLcb+f6UXSupTzJ+erNuJCyQHGp0Si
PkvfZ/2BpCZl2OyJ/Vs7x4Gj1CsvwkSvw3akPd58TWwdywWx96OW5Pes/8NIe415oZ10QZ65Xsu496p8cj3D3Prtl+KceoHG5TA6
yV3yAkiMwrkz7quGZ2gZhgGmUnQdJwRPAavBcDbeGM2JsPHDWoFCwsdFSKphbSCaIoPoYdhg5uGZ/DPIqzkl/sdF3qlYQcuJslI8
z6yRoSfRAqQa1XazYW00imVDaawAf0VtEOrCIH93yUVN3k/FUtpORrld5RYwVDM2CMcCPDeicdLcG3A/F40TZeFl56D+o6xIev5B
bTDaGOlGazo07MpM5k+FKtD6sBsxz9TOapYHQw+5Lbh3iBvOkPlTZCFBhp4GCp2Qj0Tpp512Pycjm4ww7MyiyYxIl7N7OvJBM9K8
eN4Ly0eBduSRBTRpRQlq70V9MmL3beq93osiGARqBaLWj+OgREvOO15MfMhY0W8r8lt4+UtKFeuITX9dmWLiDLb+TBPGlu3ejllL
s9n6Cqb4BJ7h/G0XOQrX9GNu+2ZrRzfriURWhXlFSDTqZPQougpDmnHDDljIv6XreN4oBXd8iHmFtJu/X6oimhqs1zm0kUIqg8YW
y7qJ6/D7pX5BRtGxyccCBSz+Sj+LwH9Zl+IRBTiNFwRXLKg9PCxGxm2cV8KV8Fn3SITq/gF5qgB7YeU5omMrZscpfttecW2gxwgG
iscr4c2iW6fs5ALuoWV878/b8VbG1GCXhwxIvhm18naylW0iOCePk/xmbwozOoeSHRyNPc34BfJngfrcRXGS0UsFBbctUUqS+PeU
1QI+vBfqVBCG1C2RZ+oijxSeF0bLfeva6rAWWUuT4WCx1W/G7IFm2mc4mD6fJsNB+HUbiP4s9tb344H4bK1LAOVNaZ/Hp6GfHkf2
j1sPbuNTojvW5MN4+YiC/XVWSorS9JRc5fl6n/dOwCAEg4xLnv929aLDAdPah6tgOeUIe60vkAd3mFMXrtKjOFbvVCGfDFhFcsxQ
cZRz8pfF5WQTtLsYRTvlxq4QDYBssmuyB4Fp9usb24N8HpLszzoGGDcEV8XHZ1yrgcpfbFyhP0dcSleFbgmuUDCLc20mKp/oaqKC
DNNBV4Vu6tJCbql3B0ic8pH7KlmhcfNgdNLmSPLW35CZcNQJIUeo8UhvkNacoKeS0qA/m8AiJXnwCdItoqFxQhmfx9e4TEOkWzNM
fS3plgGSH/BHEDnW1hZSC9wkNY4eV2+JUo0+QjrJqJlEumR9GqhfVqydaLCebBrN5EmiZLVh17NMM+5+RhQlJQxGybmO9t7YM2QE
wqkMbUxWEAtirMdlWKwrdwXf9P6CLwIYnplqSisDZAnF5hgb02z/AvOgFt3KPCbmvgGAfPIhZ4Ybwso4LtzdisAZklE5cGh4zTT2
rTihjyLnOEJm5o2xLoPGqz85MqZNjWkkmhjLhUOTftpr3fSs2jDghKZJxDn9y2FwpR+HBz0ZsWgjXnmqkNpmvDZy2Og34sZ13LiJ
UjW2o9FFyU3cufksfk2jt+Nho3+yAqvDvL3qvT3CzXsIYcBxeClxk6ZGYfLhgxNTpSOL9vxJWMTpjcHAjGAb2Bjk1iClzsJ30C2n
uUui1OMVDLVjtfGDdk4cRENgOAp7HW+ixnWH5pdX5k0qmKKLl6asmVodiF9J7GwRcVipEhdPQpXOVur2/Byvw4DMltsBKUnQ7v3V
ebzt+Rp4+9iKBRvFeuVFk5VqFXhJrzGY9dPYh2jG4VhOcRsUspj5WSncsn4ODx/Bw3/Dw0fx8PPEh+LhDnoNz36xq7XGuNtaI01g
9GizwcHodQFG77LXQMxZ68MIJT0b87lEKCX10xFEcCBLCGa9FwNNN5mL/zpG3r0k3rFjFFV3r7hOkIiHe/4Ou9IAL1R/zHWdomDW
dL0WWx4mFfgtawk73co0kY/jkUmywGlpTYZYTkORZmIO+LALMdKLLTnrQU87Q/t1biZiuViUUO6EeBeCl3wxtu+fEmPPpKoU55DH
6YE4H7Ii+G1lSIHsSJnVZ4PMCN6QFRH3IixOTEWenJsMwkyFPyY3q8WrjfFNcmMbehUiflljFP0KsemgOfPEJEOnWRmTrWnLmab2
MDQaMJqMMMy4bxwsWGbUjm0GT966hAQ6bv2V2hEF8WzcNaw8MANfNVMHpqzmZvTLOvZVIGOGOT6ZVfGvmNjqxgkzoXHr5trpOTYq
f5+Lj9izuRoE2ZjrbiujGyNuxxRrFPku2oKRYwoHeFguOKJQnY/ep7HV/0quIp74i5cIWlmO/wB/gaezLuNDbNYMc/Np3T6Hyw9w
kbNSYTa3SEyekNs/GNl5IwVL0Ye7Uq2zz6cv+Q6yMtPQyswcIm/yYXM7eZOPAPXbaX2sazCxE1yqzS64fMl5qAwZKdPvS05HjxEY
97PlvuRkEJZ1PMRz1juwJX8MKUh+vo4u+qcrJjoDoBQ/wGCL7wuI6yUZBIoZykOdHLUA0OdyQ8M/ShwqFkCyPpyV5hdEmAIsn1jj
hm5Wk8EU6hqkDdYXA5y0kV36eIeA4bauFQqUM4SSzwMcc04XwUUjVvFhqp5P8nCC9F8oeRjlwJ7CUTtG8zimokmMihA9+CzN4Z0h
BUNZGDo6492zmAej6BH4Ltos6CQVywu5V9rlRl2gkvrsovs5yb36PW7TBZfbtDcf7jpdkK7Tre2C+0d52ja0X7io4/IgZBEj69rq
3WqR2NHaaTJ716aCjnSJbtm1u/Z5o1uOlcIFDk961/UfUAKHD6kQU85O40avYC9MnMe3ugECPM6qh690XDDxxbCYGFjUb2aFTjBC
xDdOeEApcnnWCegXr3SS7qXQ2ol++TVwDVdTeh52sZtsvI4dtQeuR0TPIGQaPo7FmXB4xn1n4BXhcuG1CkFltJK4F1Y7xuiRxqu2
FPuCh92srnJLZYw43xkDg/sWihAY5bz/FdgtOiB9m41DFQAi3C5MryyZqP8BCkx6opX6XzqsCEJY7kTgpm/qV/VY40Xd6WBHTh36
U9UlH0GejcTsluUjNGUl4hzwCTGPIcvdSijRwhL5GEsR5UAzag3YMSA+jhBzwJtCeCmnV39ahapBZPooMNsbhKoRccZcwsaf1ggU
MXSq+uSATsj2p7TugWdCZX5hMr2vZBXIDSOxOd/3eyV6FN79xu79p4R4zwUD+S0XA7m7a7nfjm+i9f9YF3GhlnNJ57rWoZvU0BND
8qvcwIFxwGxTQzsRRGhdiC7oXELWJG7OjL0FLdp0GNAfW4vh81ZMWEfGFxItA/H7EBXKTqKDvMlO69armwmSsOGKOW4zGMiMwhoY
FFIhSUMVXfAxIjNr5URsZtbqgTOKCRlyVTBhX4nXioKxVl+TwV2YFJQrllGE9MlmDPOU2MHL4zTsk0ccpCka+1OwAJAT/FlNCqJe
hYe/pvUAD1/SCA/IscT9LY/oqz0iY3Sg+tRv1cs9nXuknYsQwLSHEbnq3tVJ/ua+mkkkcz+qrbl6+lOKFjqkMZQqEkH8sl/uRvOM
tMmGEKvXrSmscBQq3NYxvk/ZIMc+dA5Iy7PpeTNIOKznXFEPciyHK1uUqzDJIAV3wzonsTu/BQRWR1Fd7mrju7oO1a3Kk7vLuT+x
sZwbpXO7XDNpfOOZFCpd9qAdY2GNv1TwE0joIwua9SwPbk842HhFs2xNzC4i68+KhSBGQKFxujJodiXoPEnnBuSA2iiDZlqSxxo1
NZhp55tJyjOKmJqnmfU04mCSXBiRkuMwyxLNlJAX34MWYTD/0nYeudFmGnGRBzDHjN2HOMgXGFoatopNwm+Ds34MYGfnWwNojaZC
kWwDvnJE4RgPtobMpD3swzGOCBzjiMQx7pRIkxQYjWRILD1l7cX+ww5vvPwaWM8AqS7nQbdzEXQov0lTOc6kgYmwJQm2x/8yxeDA
w98yaUpCYu8E7dZoAOIhhYc0HjJ4yOIhh4ceFoLP0eMXmdP83aaE59RY/4ZV/Qpe/p2C8BjEsyGsfhIxFadPzlcDIXxIKD2KY/8O
idvBCEKOSfh/OZm5pixDE7wg7CQQ8LJx61Y7oNOLxiOgvMfjRaPEh6hyQfFhDkWLGL8DhnJijpmafCJ8XXK454R5/zvYAv8TXYbH
YtzQyCHWPynF8VIW+CnmMbwh2v/7ePkHqql97YZC/3tyMlZmkov9yJWhO/Xo9GhwQ9/FBRtJDbHkClthVWmF1WUYI6VxQvegKlwn
EDaMzhlHRiezPMPUZQ6wDkc5IAoPZ0Dmeinaa0a5dbvUN6M7pfUM4WEJzr50H7L1VxLIuSO3biguPRO4BPpMqMhm6neVmRe1/pcY
CRyHpCkfb30yVxrgbPa9SxZXBQhfmXKGgs5Jzxkfm3+dp2HtxU5e/WhOcf0pckFBZ5TBqzpr3L35HgvKODwEFSKNmNIb5XbfNmCQ
SwUpZiXXLSILf/vyIA9KYh3ivqPAW8WarBkDKqzbcYm/uc6stzZ1OiK0zbcQPRlofxRofxsmSIriGiaIO7sH1gmUvaPs4nV2dkFa
5QNf1kI5Qi/6Y8gUdqGZ5LG2aZTghHod5ZJfw9ClxabRJDik5d+p7YZy+Ps6RuCGEsnjAdLQNU+HgDbrmnXeqR9cnaQaJoJqiDG7
5blpEAzeqKgnbJbI1jkpn/P6rWvLo7VBURdMQ6XPMQXSg9A5X/WU/1kqP6XKv9VT/tOivEFRXrqjvKdVeYOu8iSAzxD2iqs8Zh2A
Vhk2M02ElWIXdVg7MY449BClzLZ2wNzNno6J3hw2czwlykDfEoMV+kFR2k6zV5VGfidd8pFv9Kg3ctwCHuZ44Yj1apycMyrqzGdw
8n1VWXH/EZ5Nk6HqDXXrj3Hx7eWW1rDkYnBCpAJ+M+vDU1K55hi00kI+pnFaSnrUXeEbynepSJRPK1UzraU+6u2jM46B5rgiNn+v
BKqfV7KfP1din09LA9Ry33xdLEowxZdQ4VgxXRaZbs55j1QNuWwzL3mXiKBYdsh5PpITCKsRTVf7V64+MghgGtnijLBFxN/Bq4jq
n0eLFNRZ05MRWl1S0UF1J+O5k9eGMf75VSNaIHuWYbIy1KON67tSN6UE4N0TjOTxrJKsfUk1djxMw/1p1QHJMK0CCuk/lHWQPHpJ
zW0YBVJ1b4e/nakeI8mF+X49g2evbjuwRe3C3LQHZVxZoPpKP4lhpRx2n667AyRxn35XSTjyCYShrqAFgoCcBzvTcZf9p13F/2NX
YN67vi1lyiSqJP6/HyXaE5GrqAB2Od4CjyHOrSv18g4OVgB8wJK9un+xet+5pcX6ilXBIMYHa+Xd/LEI1xeSynoV8qG7wqIfExzz
wdoY41hZA2oiuq2664EbNxycH8gp9IO4xi3XvS0eHqu8KwjWS7qZcf6ca7e4I6DI505X2Y5z6dHPu0ocCiiRpwqPRTHiUU1yDEQc
TwpHLnqE++D0HV2q1FBgSwWUCF7eo6gkd+M0zTCb6jAW9Sksg2jgL+Vc+PP54G8ICQGu1KtNEQKcI+ua7AK6YtJWGpgodSYhzdcY
Mk60CBMyIKRgGLeNDLCQOU7YBsX2PAfnIq4nKnGIMc7C3MItMHqxnEP0WRXK+2Nqp4ptfSV3vIKA9SZvrvoUzLebNdkYTgzvhzS5
mAXF8H55Z3BmISxt6yerM3PWD2KCU3g4TQsddkGKWp+HbvI1OI7dX80ptR8PDFMQsbozZLGAi0/g0HVF63YPprSbr0UZYeNpyc9a
LX9Edmh6nZpeE03fEh6BMdH0UpfWgnMRj1vozfCO0KShBJA6o4f2M/AO2eEmmnFysTKAT+uFfApNY4hL885Dij5TbyYEYOeEHrGL
q18S4VHHyQu3H+12WwMkwdjWGgTOd2ijcKlyX+TICP+ZYKuwEV4SLJMIaFfXhOESiOGtjRFnO/VPLHjIlGMTh3AwfCYig6tekki/
7STGKqo8NjN7upxcgiUSPUBm/dKGtGMMHjTirG8wCnE0e2baGXrlGJ1z2cK/Bkz+r8O9yzll9c48I7EAYzHFnTLIcA/PuBdgeOsd
GUsGMinEn3xN8R1Ev78eZnKHa+L75fbd4PHBo0bM6KEnQP7P8h9iit7Ajf1IhvMvESnXoa7JKWlsj/JbQgjL/YtWhUdoxDhU1iuo
gjzeysGaXZmziBt7yJ6v1rmHD7G3X8dkFJvl5yM8pDaGYZ+2mvgQJYvWAYrXiocaHm4ikQUByx6aWV1csY/N1CpV6zg+e7WKAfMJ
4oup4nj4KzzgkscDtvwtHiIETKmYmRw9JVNu+nK8HCI8GzwgHbCuxzMLDzYeXo+HJ8hNCg9vwsMP4eHNePgRwuzEwzsUp/9uPPwE
Hi7i4WkSzODhfXj4ZTx8DA+/pkkt72+QbhcPn8HDH+HhjzWJfP15skUlfa8m1b9/h4ev4uHvNan+Jf+M6/GwGw83kH6FrPLIFVNB
Z78UD3fj4WV4uIdJeO4JPDxAIg483K+AugmZe1qFL8OwiRQOjwJuUfAqChhFIZZ4hBiMwkIxRyiUB8VoKCekhONNxGvjAdHECM+L
MLQIhIpwnsiejdu4oUkO8cvWPzDB4xJnSeM5aAq0jbs4uvfduN7WUeij384dpAwR79P5T86P3IyeGbF8wRg1rjdelk8WHi7cmt+f
f23k3tyjRtJIGQlDz+/Jbyv0FgrGQHFbcdTQiyPF10ZuzPdCqj5Io8Ms6zWGi/fCWc7ozfQYfcT/x4xEYRyOcSNeeLGRKE7BOaQt
vAzyxHsT4nc5/3LKI1aowW+8sJ/mLqQtvBR+9cL1hdsKBwtH8y/Nv9BIpwpQzxj9vykVp5TFwmsjOw2DznXIMwb1em1khmmb+v+V
+LbCTZDDYjwKtdH/A3SGW+0=""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FMTFactory
"""----------------------------------------------------------------------------
MODULE:
    FMTFactory

DESCRIPTION:
    OPEN EXTENSION MODULE
    This module creates the FMTnnn object. The object can be created using
    either swift data or an acm object. It is derived from the FMTFactoryBase

FUNCTIONS:
    CreateMTObject(swift_data, acm_object=None):
        Returns Created FMTnnn object

    # Sample code if user intend to develop MT123, he needs to import the FMT123
    try:
        import FMT123
    except Exception, e:
        pass
    class FMTFactory(FMTFactoryBase.FMTFactoryBase):
        @staticmethod
        def CreateMTObject(swift_data, acm_object=None, direction='IN'):
            mt_type = FSwiftMLUtils.get_mt_type_from_swift(swift_data)
            source = acm_object if acm_object else swift_data
            # ADD FOLLOWING CODE BLOCK
            if mt_type == 'MT123':
                # Create object of the FMT123
                return FMT123.FMT123(source, direction)
            else:
                return FMTFactoryBase.FMTFactoryBase.CreateMTObject(
                swift_data, acm_object, direction)

VERSION: 3.6.3-0.5.6048
----------------------------------------------------------------------------"""
import acm
import FSwiftReaderLogger
notifier = FSwiftReaderLogger.FSwiftReaderLogger('SwiftReader', 'FSwiftReaderNotifyConfig')
import FSwiftMLUtils
import FMTFactoryBase

'''
# If user intend to develop MT123, he need to import the FMT123
try:
    import FMT123
except Exception, e:
    pass
'''
class FMTFactory(FMTFactoryBase.FMTFactoryBase):
    """ FMTFactory class to create MT object as per message type"""
    @staticmethod
    def CreateMTObject(swift_data, acm_object=None, direction='IN'):
        if swift_data.startswith('{1:'):
            mt_type = FSwiftMLUtils.get_mt_type_from_swift(swift_data)
        else:
            mt_type = FSwiftMLUtils.get_mt_type_from_xml(swift_data)
            mt_type = mt_type[0:7]
        source = acm_object if acm_object else swift_data
        if mt_type == 'MT123':
            '''
            # Create object of the FMT123
            mtObj = FMT123.FMT123(source, direction)
            mtObj.SetAttributes()
            return mtObj
            '''
            pass
        else:
            mtObj = FMTFactoryBase.FMTFactoryBase.CreateMTObject(swift_data, acm_object, direction)
            '''To make mappings configurable depending on incoming swift msg, set the swift data in case of creating the object from ACM object.'''
            if not isinstance(source,str) and source.IsKindOf(acm.FObject):
                mtObj.SetAdditionalSwiftData(swift_data)
            if mtObj:
                mtObj.SetAttributes()
                return mtObj


    @staticmethod
    def CreateMTObjectFromACM(mt_type, acm_object, direction='IN'):
        if mt_type == 'MT123':
            '''
            # Create object of the FMT123
            mtObj = FMT123.FMT123(source, direction)
            mtObj.SetAttributes()
            return mtObj
            '''
            pass
        else:
            mtObj = FMTFactoryBase.FMTFactoryBase.CreateMTObjectFromACM(mt_type, acm_object, direction)
            mtObj.SetAttributes()
            return mtObj

    @staticmethod
    def CreateDerivedMTObject(swift_data,acm_object, mt_type, direction='IN'):
        source = acm_object if acm_object else swift_data
        if mt_type == 'MT123':
            '''
            # Create object of the FMT123
            return FMT123.FMT123(source, direction)
            '''
            pass
        else:
            mtObj = FMTFactoryBase.FMTFactoryBase.CreateDerivedMTObject(swift_data,acm_object, mt_type, direction)
            if not isinstance(source,str) and source.IsKindOf(acm.FObject):
                mtObj.SetAdditionalSwiftData(swift_data)

            mtObj.SetAttributes()
            return mtObj

...

  FMTFactoryBase
"""----------------------------------------------------------------------------
MODULE:
    FMTFactoryBase

DESCRIPTION:
    This module creates the FMTnnn object. The object can be created using
    either swift data or an acm object.

FUNCTIONS:
    CreateMTObject(swift_data, acm_object=None):
        Returns Created FMTnnn object

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
eNqtVs1vG0UU35n98HrjpmnSph9QWKFGIhIkKiAOpSDaJK6MEgc5CYcV0mq7M3G32LtmdtzG6fqUcoQ/gJN9ROLA37M3xKn/Qk68
N7tO7FCgh240b2dm3/f7vef8pV14DFhfw0rvA2GapzHCaId4hJMRYTozxtSj6k73dPU2POORxkxmvdSYxc0T3bMY3dNWK3/+QTXt
47f4ODu7mwfbW/ccF576zn49CGUiBg+DlDvO5tbeRqvx7X5jt1kw7D+JUrebsH6Hu6HggeSpK59wFIzj2E0eP+WhXAM2Xu7dMIjd
xxNm5vbTKG4rVTwCQeGmz6ND6bJABm4iXGAOwu5Ej+PUD5obaH2vML+htOzs76rvHypZH2U/QjG/EPuymcR8tRDAp8VlX8RpKcxm
fXWc77Zaexifu9JacZzW1t5+q1HYXN9u7DT2H5T2q3fX3AfxAKOPDqMwkFECSmWi4k9DEfXkOo9DMeihkSJH62GHB8KV/AgSkTDu
Poego1iJhIngLmQzTqSb9nu9RIDcmlP9ZG0myyVH2E9l0o2Og8cdDkyfFjkOk24Pgo2l2w0Giu95In5wg9TlRz2IDhxBi5DWi34z
ECucPzcVSCgPlITH4MfbxNgrbIKmN7eH9WrxgHHh3ahPnZqJjA4HG0l8GLXDf+2ez4FwzSPQQZTrrIqd85KcEM+Ak6O6BU8mnOZY
hdnqZDECfVPL52ex3cxpoxnqU2aqsExYG2jqdyCZNoJGHROxLMmIZtqYDPUY93qxz3RGmf4TvanBnojPMhID19CQxsgYa0MTOE3F
aUny1Mr0zGLGzxR4zVGFmSM708egfVjJKszqE/GrrI4cVsn0ZZAhmpyDe1vWMv2ELGsndGhndmZk9ATGAHBeYtUJJ7MgQOf0Vgnw
1zTksf7i7j0Bg0N7VQGySrw5IdupL3g76vJTs/5i2Iibp0tKAfSnu5JOWvBUr6+kp3cO4jOIuqpubpenadAGDA163IXmSddW53Mn
lYGQKWIuv1QUeGf7QEad1Ftuc+l3pY/8/qFIur7qXu/qP+6Pup38Sr0RS94WCq2FgiVkLDw+4/Muh0n8jAvQcKQ05DejLrrpF5Au
DUkBQeXWYSK6gcztGNEWcZGbm1sPDx7lFdAcSClyHThzo9Gs765WPed8uuTO+XTJqywS8Aa/8krpd26lSV+EPK/20VXk9KzC1dwB
h0pvchv4w06Qpr9p4l0oxOmVWVCu9Qb5/OyMewfRiLya7pAahQV/NnHIPFmA9zxZJA49vn1Bz6yOGZhb0zD/HogEmI8Rwjr8FpVA
B1gamcEowPIbqY8MBpAvYWnCvSGtTCthaWZmRkpY6gjsCaf6vbIE2hKIuqawcYttJhxEoS0u4X4eyWUkC0iuIFlEsoTkKnJa4jru
ryFZRnITyS0kmB+Vy4LcBpJfmw2/Dhh4sLGzjgHPq0za07m785+5K4VDYyqF9nQKf8FJQYR91v1FOk0GSXmmiXsZxbQyOqZDCp0P
EwPmB1UptuKFizcwIzRIegYzxGTQ7WXS8d6UFUhzkXSYGTALdJV0Y2Qza8LJNPwnoelVNrmInnGWa8c11d3l+fjWVI+Xd5NWP3bq
Z3dFhaqqQnlF8F4nCPmblMr2Flmhwj/vn6Jy18/Kd+ONa1i6M6nGF5hxVKHRGrWhhjWySP+3lheUrNKmMNQYnHlVctv34wCmi587
/mSA+HnN93/sB53ySw0mnIzCLpdPEibeQ3/fR/LBbAxngQjsPYwyrSFyCCW1JVhzlKgvYLXi+ywJfd9bnP5F3E7abS6KPKNkUQmr
KJUSfZ213L5f+P0VQZNYROOqrSaGTf8GNGPGyQ==""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FMTHooks
"""----------------------------------------------------------------------------
MODULE:
    FMTHooks

DESCRIPTION:
    OPEN EXTENSION MODULE
    This module provides extension points for user customization at the entry
    point of the message processing, to allow for detailed filtering and even
    modification of the incoming message, and at the two points before and after
    the pairing and the matching functionality

FUNCTIONS:
    on_entry(mt_object):
        a) Provision to override the FParameters FMTnnn_Config
        b) Option to ignore certain MT message types.
        Since the available object is the incoming MT message, it is possible
        to do direct Swift attribute controls and checks.
        Returns the resulting mt_object.

    message_entry_hook(swift_data, param='IncomingMessage'):
        Provision to override the swift data before any processing takes place.
        Returns swift message object in swift message format.

    pre_pair(mt_object):
        method to override the default pairing logic to identify an object in
        the database. Input is the corresponding MT class object which has
        various access methods to allow the user to write the logic.
        If you do not want any further (default) pairing logic after the
        pre_pair (you have established that there is no suitable pair) you can
        raise an exception, and the processing will be stopped, and the BPR will
        land in the Unpaired state.
        Returns the resulting mt_object.

    post_pair(mt_object, paired_objects):
        Method to enhance the default pairing logic.
        Input is the MT class object and paired confirmations/settlements if found.
        User can add additional checks or adjustments here, for example logic
        to choose when more than one object is paired.
        Returns the resulting mt_object

    pre_match(their_mt_object, our_mt_object):
        User specific logic to be performed just before the matching functionality.
        Return a tuple with possibly modified their_mt_object and our_mt_object.

    post_match(their_mt_object, our_mt_object, cmp_success, cmp_result):
        User specific logic for adding functionality post matching.
        Returns a tuple (cmp _success, cmp_result) where cmp_success (in and out)
        is a Boolean and cmp_result is a dictionary of tuples (their, our).
        E.g. the cmp_result could be { "amount":("3000","4000") }

    post_processing_before_commit(swift_message, commit_dict):
        Customisation only specific to MT535-
        User specific logic for changing input commit_dict
        The dictionary of trades and instruments for a given ISIN before commit are provided for any changes to be done
        Returns dict consisting of key as ISIN and tuple of trade, instrument for the respective ISIN.

    trigger_reconciliation_flow_extension(swift_message, safekeeping_account_number):
        Customisation only specific to MT535-
        User specific logic for determining whether reconciliation flow should be triggered.
        Input : swift_message to infer the incoming message,
                safekeeping_account_number to infer the account number from the incoming message
                for determining account and its party linked
        Function should return tuple: boolean value 'True' and party object to which message should be linked,
        if user wants reconciliation flow to be triggered.
        Function should return tuple: boolean value 'False' and party_object = None,
        if user wants trade creation flow to be triggered


VERSION: 3.6.3-0.5.6048
----------------------------------------------------------------------------"""
import FSwiftReaderLogger

notifier = FSwiftReaderLogger.FSwiftReaderLogger('SwiftReader', 'FSwiftReaderNotifyConfig')


def on_entry(mt_object):
    """
    # Sample to change the pairing attribute list/matching attribute list/eligibility query
    # If want to compare attribute with multiple attributes having possibility of OR condition, then use CMP_OR as mentioned below
    mt_type = mt_object.Type()
    if mt_type == 'MT123':
        if mt_object.Counterparty() == 'XYZ':
            setattr(mt_object.config_param, 'Pair', "{'Amount':{'CMP_OR':['AttributeToCompareWith_1', 'AttributeToCompareWith_2',...], 'CMP_FUNC':'myprecision','ARG':'100','LEVEL':'M'}, 'ValueDate':{'LEVEL':'O'}}")
            setattr(mt_object.config_param, 'EligibilityQuery', 'MyEligibility')
            setattr(mt_object.config_param, 'Match', "{'Amount':{'CMP_OR':['AttributeToCompareWith_1', 'AttributeToCompareWith_2',...], 'CMP_FUNC':'myprecision','ARG':'100','LEVEL':'M'}, 'ValueDate':{'LEVEL':'O'}}")
    return mt_object
    # Sample to ignore message
    mt_type = mt_object.Type()
    if mt_type == 'MT456':
        return None
    elif mt_type == 'MT123' and mt_object.Counterparty() == 'XYZ':
        return None
    """
    return mt_object


def message_entry_hook(swift_data, param = 'IncomingMessage'):
    ''' User can override the swift data before any processing takes place.  '''
    
    """If user does not want this message to be processed for any specific reason, then this extension point should return None"""
    if param == 'AckNack':
        return swift_data
    if param == 'IncomingMessage':
        return swift_data


def pre_pair(mt_object):
    """ User specific logic to find the paring object. If object is determined then that will be used for pairing"""
    return ''


def post_pair(mt_object, paired_objects):
    """  User specific logic for additional checks or adjustments"""
    pair_object = None
    if len(paired_objects) == 1:
        pair_object = paired_objects[0]
        notifier.INFO('Selecting object %s with oid %d for pairing' % (pair_object.Class().Name(), pair_object.Oid()))
    return pair_object


def pre_match(their_mt_object, our_mt_object):
    """ User specific logic to be performed just before matching functionality"""
    return their_mt_object, our_mt_object


def post_match(their_mt_object, our_mt_object, cmp_success, cmp_result):
    """ User specific logic for adding functionality post matching. Returns tuple (match_success, cmp_result)"""
    return cmp_success, cmp_result


def eligibility_extension(eligible_objects, mt_object):
    """ User specific logic for filtering eligible objects for pairing using incoming message"""
    return eligible_objects


def eligibility_query_extension(eligibility_query_list, mt_type, mt_object):
    '''User specific logic for extending the existing eligibility query

    :param eligibility_query_list: list of eligibility query
    :param mt_type: swift mt type
    :param mt_object: object of message specific base class
    :return: list of eligibility query

    '''
    import acm
    import FSwiftMLUtils
    if mt_type == 'MT300':
        query = acm.CreateFASQLQuery(acm.FConfirmation, 'AND')
        node = query.AddOpNode('AND')
        if FSwiftMLUtils.get_acm_version() < 2020.1:
            node.AddAttrNodeNumerical('Documents.SwiftMessageType', '300', '300')
        else:
            node.AddAttrNodeString('Documents.SwiftMessageType', '300', 'RE_LIKE_NOCASE')

        node.AddAttrNodeEnum('Status', ['Pending Matching'])
        node.AddAttrNodeEnum('Type', 'Cancellation').Not(True)
        node.AddAttrNodeUTCTime('trade.valueDay', mt_object.ValueDate(), mt_object.ValueDate())
        storedQuery = acm.FStoredASQLQuery()
        storedQuery.Query(query)

        if storedQuery:
            eligibility_query_list = []
            eligibility_query_list.append(storedQuery)

    return eligibility_query_list


def post_processing_before_commit(swift_message, commit_dict):
    """Customisation only specific to MT535
     The dictionary of trades and instruments for a given ISIN before commit are provided for any changes to be done"""
    # sample code to set the counterparty is as show below
    '''
    import acm
    key = commit_dict.keys()[0]
    val = commit_dict[key]
    if not val[0].Counterparty():
        val[0].Counterparty(acm.FParty['____'])
    commit_dict[key] = val
    '''
    return commit_dict


def trigger_reconciliation_flow_extension(swift_message, safekeeping_account_number):
    """
    Customisation only specific to MT535-
    User specific logic for determining whether reconciliation flow should be triggered.
    Input : swift_message to infer the incoming message,
            safekeeping_account_number to infer the account number from the incoming message
            for determining account and its party linked
    Function should return tuple: boolean value 'True' and party object to which message should be linked,
    if user wants reconciliation flow to be triggered.
    Function should return tuple: boolean value 'False' and party_object = None,
    if user wants trade creation flow to be triggered
    """
    import acm
    flag = None
    party_object = None
    """
    #Ex:
    flag = True

    if flag:
        party_name = "Goldman Sachs London"
        party_object = acm.FParty[party_name]
    """

    return flag, party_object


def statement_message_validation_check(settlement_obj, statement_line, statement_line_obj, cmp_success=None):
    """function to check that settlement_obj need to process for MT950 message
    settlement_obj : acm object of settlement or some time None in case if not paired with any settlement object
    statement_line : line correspond to settlement in statement
    statement_line_obj : Object of statement line
    cmp_success : True/False depend on matching result
    """

    '''
    
    import acm
    write your logic
    '''
    return True


def alter_external_object(external_object):
    """
    This function lets you specify the attributes on the FExternalObject and the linked FCustomTextObject
    before it is committed to database.
    :param external_object: FExternalObject infant object
    :return: FExternalObject
    e.g.
    if external_object.Settlement():
        parent_owner = external_object.Settlement().Owner()
    elif external_object.Confirmation():
        parent_owner = external_object.Confirmation().Owner()
    else:
        parent_owner = acm.FUser['ARENASYS']
    """
    import acm
    parent_owner = None
    if parent_owner:
        external_object.Owner(parent_owner)
        f_custom_text_object = external_object.Data()
        f_custom_text_object.Owner(parent_owner)

    return external_object


...

  FMTInBase
"""----------------------------------------------------------------------------
MODULE:
    FMTInBase

DESCRIPTION:
    Base class of all FMTnnn, to be used for open extension module FMTnnn
    User may instantiate/override class FMTnnn e.g. FMT545 which is derived from
    this Base class

FUNCTIONS:
    Derived classes from this class implements the following methods.
    Type():
        Get the type of the MT message e.g. "123" for an MT123 message.
    AcmObject():
        Get the underlying acm object from which the object is constructed
    SwiftData():
        Get the swift data from which the object is constructed
    PythonObject():
        Get the pyxb python object. This object can be used to extract the
        values from the incoming message.
    ProcessMTMessage():
        Processes the incoming MT message. For each message that SwiftReader
        main module receives from the AMB, it calls FMTnnn.ProcessMTMessage().
        User can write logic specific to FMTnnn here. e.g.
        Storing incoming message in FExternalObject, creating business process
        etc.
    SwiftXml():
        Get the SwiftData in xml format.
    MessageFunction():
        Returns function of the message e.g. AMND, CANC, NEWM

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FMTNarrativeMessageGUI
"""------------------------------------------------------------------------
MODULE
    FMTNarrativeMessageGUI -
DESCRIPTION:
    This file creats the GUI layout for MT999 text editor. The GUI can be used for generating
    MT999 outgoing swift message for commodity settlements and confirmations.

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user end.
--------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
eNrVfG2QG0d2GOYDwOBjsVjscrn81JASP0BJK+pb5J0UkftB7ZmL5e0uJd1EVzAWPbvEEhhAPQOSi4Cyczzbl8S6yDmXfRVXYuxV
2TFTF6fiOMnl6nK5xF/J+RKnkrNSnlxsJ/mRuir/8I9UKqVKWXnvdc9ggMVS0n2k6rhE98yb/nz9+vV7r1/3/4gN/dPh9zL83F9V
YjEWs2JMYWpdsRSKVUulWLM0inVLpzhuxSlOWAmKk1aSYsMyKE5ZKYrTVprijJWhOGtlIdbqY40xa0zBuvR6rpGzcoqod9wat8d7
+d2YNWErPYXFWWJXtQosyYzPxqxJlmJpiKeuxFiGZT8bY1lb3T5wT7OmATLGcgDJSchBgIyzPEDyEjIDkAlWAEhBQg6xSTYF5R1m
B9g0xEfYQTYD8VF2iB2G+Bg7wo5CfBxyHmPHIedxyPkQ5DTZQ8yELyfYCXYS4pPsYfYIxA+zU+w0xI+wM+wsxKdYkZ2D+DR7lD0G
8Rn2OJuF+Cx7gp2HuMieZE9BfI49zZ6B+FH2LHsO4sfY8+wFiB9nF9hFiGfZx9jHIX6CqWux4ov/7efUWOzxH9C/9PLK/PWrC2kT
/i0ur5cqnFe82i172XbdypZ95fqS+Xh6fmFtbnXp2vrSSukipVy/UXPNzVrdNqvcrniu6d2wTUxbr+w025652eTm8vqFCxdMz77j
mTareU0+C9lEqmrFMTdss+3ajJJu2Y6N1TpbVLrICeVsNQFkurdrm57ZEA2i9NVmo9GEMndM1/a8ut2wHWhDxWHwxdms8QaU1XTc
2XT61YXVNWy1eWr1VDq9urC2vro0h/1Ye+Lq0vLS+iV6Fp16cta85OyYWPJmrSqKML0m9c2t8lrLe8J2qnyn5UGzIVW7bj9RrdsV
LjpZbTLbvF3zbtQcylJtctsENDlNz3TbrVaTQ75ZqumpWYFBUUiQqNp2vWaj1qls1G2R7mmBMuhuq+lAH81GZYeS3m7ym2bFNe07
LbuKzcF6AQHDrWeQTXShX1vFQ8Rz03agNY//wP59F/lJqaj4U0BGa+GwvMYrrZbNAT4N8LnI8MgvVjakuZW2Z80sruFwv8Zrns1L
Ta+2uUOZtqrqEN+Kw28Oedc5CLxYV7mn3FU9hWLNU3vabqynwy/ejXXVrrarIZeB+aN2OubajeZtk9Uq9eaWudl2qtgewvjFVoVX
GqZ7w67XLxKtNje2AcXRj5VqowzQi2a0NyaQZb/XA7m47bW5I2isVEz42TmcM/ZVmip+3hmacr4GFVjq9det5Dy10LUOYHvniDwE
aLnJKvWi7sepoX5SNslKbrRrdQZITQlimq9v3Y/xNCDovUOjZ/dsa8efWLUr9frOmlfhnij/YcRrAjGdMBRD5Vl4qiqRAcBnNRgA
QwxA7B6g976CNDDtAnWVuf1m23a9MmCkXYbxbNxX/ARMlZWNbWqTCDIQyAwhKsoNd6u81a49gcXTwCt8AtswvICpwQJ2FAI7BgtX
TCxawC41pjEdYp3FYdgTPIcFqEOZw05gW7pKN1aGdXAtxsfgFZprNMqiwfdVX3ft+ibPhw3vt94ol2tOzSuXn+m3t/PQaBzMBmkH
mpKQP2pKN4aL8V21s8mAlOEHy+7deOc44ngb+nZPvat1NT6Lbz11N3Y3/lrMOa3E8E+m0SCN3tX5KqXRMM2nYo56Pubp9F3vxln8
bZgSkDMrcorv2PliouTH/LEVXtuqOZX6Oq8w2x+ba3MOpL1ClO3ra9A7QEo26KC307L9tCRESHE/7ie3bK/ieZxPIqZmMDiE6Jpq
8WYVKLCMfCjA0P0EPwAfLQPw7RAxp5vQAECW63HLoGePMytFTy3u7Uhgcy81JZacW82b9guITJNGQ1dVRac/VcmqupJTE0oW3vLq
FDx1ju0zVqKcEvQFhtipNOxy2U+Xy4KTwnO2XH6zXamLL3waG3BykD7CRhH5PY0tQuYFs0oXBPl9ULT/0K2afbscLJR72/+RqJ0X
MJga0XLs1ycjlH32A6r90SBxfnCAKt8bexV6Za7IXvEj+OE4BidGoARH+fo+5AVhThkgr9MfhDBJZ/zh/YjnDATXBojnzA+GeGoO
SBc/bOKp7yGe/av9USaeJdmrD0E8rY9IPA9A2AcSTxGCmwPEU/x+iecwNQqkhh8q3fxMhG4e3r/GH02SMYhkLtXrH4Ja/saHppYT
D0DTBxLKoxD89AChPPqhBT8azqJCpMXHRwhJQ/xmj6y3G5H1Hv/I1Z55cLUh791T7a9Eqp39yNU+ul+1/Qmyp8b7kRpRwK1qkRo1
qd1Qja/ThGHKTZVPYc1doFMl5rwMMBVg50DbARhQJlCdcw6gOkBfltA4QacAmgDouoQmEEoUmSzxw9jccyTBhqzrLL2Gy+Bj2E/V
z0SUA/9ks2U7kX7VnDLp6GXsM0h00Mei5mt2rcaRlfBjI0gNifkfYB/zhAgDaNgAWhY/+jowmbXoZEYpu5PvxnoxUO8UmIgqTLkp
MeW6EiKnpgqqn4JIk6rfjkkdIQVd6n8bzTtR7Q5aLRQ/W6hyPzjNT7PGF+54tuNCJiFFW/E11N9IvSpqHPvFUxgYIzD2FARfCdho
LKkqeZj5OZXge3i5FvDyLw3wcuDjQC7Ex4GTQxxnCZaEOMEMloI4ydIsA7HBsmwM4hTLsXGI0yzPJiDOsAKbhDjLptgBiMfYNDsI
cY7NsEMQj7MzZDZTrLwwmlkT0lhWkMaySWksm5LGsgPsMIzMWY6j2zlnCi03GBuyLgF+0bRzA4K6zc1qveK6s+b+y0y3v8xgqFCo
MhVCjUK9BmRSjtNzgsIkhQaFKQrTW5gmwzQIswQZYwjJUThOYZ7gExQWKP0kzSy9xLExxPAXi1M0pKhJbrbvgELuH2iUgRu36hXP
LqPlqFx1PF4HlNqblXbdI5ifbAQqFaCC75RZDZQu0JLrZO8pV5ttx4OpBnTp7fgHQ3il+ma7xsMPuf4kpVIPwncOmUGTc1tNhwHB
ljcqzk3/6D4fSOnxJ1A9Cgot12uuZxVqbrkBra21QBESn/2xRtkFha/tispMtwYpKtTcetNF7luaXyz3TXZ+oXVzS2Yuu22hWE7c
JtNPudLYCMotcFsUw+3NstNubABs2uMVx62Q5SYKL7SaLVkpsltEYVElzVLMrBFSxjeRaM4SG0p8qL/OoWGbzWgJJAm/dECVwINg
9biHMsg3UAZBmYHPQ0iWqrsK8vRbMf5MV+npIGwpu0hVcScP7wmm7QJvPySoNg554tOxu3on5yV7RlffhdKGZQ5MwxIHSXLppXZj
B0FaAfnm8166q3Xjtdg97a4K77/QVd0vYyksiaUMfFX5b3sZLwtrDrYI2MOuihY2qOk5PeaN7fxfJXY3ocRAhsr1xlkaUibuKdOx
XQUloE/FWOZu4q2Ekxbx+Ri0Ca3X2c6fmKt2hZmL15Cl2jDUNLvtW5V6G4bNBG0fKMU1a040CZK/sIl+7+w4ypLN6MSQcxHruEg1
QTEw59CY7FVgXJ2tsHksbN8mBza12Apa2G8cTfv76nvjy+tPXrjweGhzQ8BTAwDlceITnbHFUy4suGVh6PSVsp9fXF6/c+FCH2gl
Vi5/YmFuvZNFI9Ss7HnniYU7VbtF3QZ8bdleZFXGBpY3wwaaF81TbqmY93XsoeBJMGGlWZ1YTfKK7c1XvIqf5DagpGrz5zFV3G3V
a54/Jiyzy1eve7W666fDwYHnVRtYB1uHQvhDmEVHfPka4MpPhU30DQftuTWYpfGF1dWV1WJSTEyqpbB3RKwxMudvlakTrnUk+op2
ObGWEo+yJgY+EttS7GGp7NgDUfSnOE/P48yNJxSUshNKGqSRvJqHWCVJO6FMATyrGgBBqXsGoGeVzuwehvDAivbYskOJ7zDJmD1Y
s3bRmg28AVYydZe0ExRgSvzHUFbQOdpj+Cr2aSJqMRdjM4m1C2a92SYRtGFDHrKvxQluzfQbB7Ix8UqBQF/H1MN88tNSGhZGYRU7
33lkZKeHqh0Qp/XoMj0PQQ0YH6plwKZi/DCKqNsxZDJO2kOYhs9dFc34iAD3BXiOi2f+MiIk1COLCY7iDke5h+sBt7fGYbbUy42m
Y0OT6s3bVm6jvRN5l0jxMzi9bZdYgJW5LXYmcIb56X7iYWIiLPc/u7i6JRBHU0JRIwLKqmnVUHUgI30/jA0VMYAxRHcqwNgfoxKr
AMYUgTEgE3VX4V8jIUVAYCnhXw6eaPtD8eLbCUgloMndmJfcNuCXgl96U4Ml50tBelgA4tuZXhYWAa03thuDMEfhOIV5Cid2Y7sJ
VIR7BVimNCDNeDcOZcTlAgXt6E2iBP6m702J8ewdwHfnuGxzHFrj4zMuer3p3RjmxHFGNblzCpgQieeEFpPQYkoBALeyBEMnJgss
Kcr5hdTlJxbJYF08KOWuJffHag5b2SQC8eP00UovoVm5jUsEx2XaSi4utmFlsIFf3QIgsjJrsrTwWnl99dL8QvnS8kJpHn7rVioE
WtP973OXSnMLV6/SdqKVpTou0TriWuk5EH5sWe0lIZ/NV3Ys41WkOXxKllD1qtSt5DVuN2rthmVcq+zQpqY1eUXsjdr9Nc3llZDK
fxzbnl5GVC0iporSih73yGifidCWlUW1DdYu0ZSxQCajlFYheO2LZ8P0Pj5ErNNI648RPwBaV7NA7SYoJfr7CeAPOeAQ2b/QNWSS
aSWt5uk7cA3zg+bAAP2rUpch+kd2J2kI2CMX9KTuEu2iWO9MA+3FhTDVS/ThQsSH1DovQQoDn3YVEvuRqeqdMwHNDQjAJgrAtN8c
SNV+ZrE/DESCpWJKyJUMsV6Qw8svVUlAX7U3rYm5aJmXoUj+ccxwg/jTUAb+YsBsA6F1a4Rt4QhibB+B/TwOSo5Ql1UKqiFXrc5j
I9G+TyF7mHYoxf46fHlH6ThiGHblhN9W3bPIrkFOVIT8h54KKIPKNAl4TrhXZRptIE0S07g35De9/83DgUrh13s4WGl4S7vvyHTx
oXSZMF0W3rLuV2S6xEBd2XcUnvbG4CkX1HxPJXIZx6+7YrkBRtebQImYGTc1zCHLSmGaQMINay6ENU/C2ySkr4+sAZnh5D411CM1
TEZrgDC9BkPgHXhH2fk1kLg1krinewdZBmrXBiRu+PqWBhI3xShxkzaaLXUOX6vbFRdka1ITQVwm5ZFW6sXO0cGPAUWa1/DzcFZJ
PCbyx84R+c3G0vrzmtwhOrMDHyPaGjDzTZvbTtU2hc5G6a3skgMMscaIK373ffgH0i3nMPseh6Z4UIiDAjlwbRDJPfNWrSmWhI0d
kxZvkG7XO6cH5OHqDbt6E61R5VtYslAPUAwuzvi5RqBDExp4CWfXBamoCy3WT65JeTjVKFcEVvhFTLeMAW7/8Ocw+BhmyzaQkzrQ
OegVnycBAdiKMPSsbIIoP4eGC7EonQxaZJeH9FiBmfJT5/04dcvXN2H18scbZbkGygpwNvrH+8VEVOSgiCf5q9i61zB4XUiNJOxM
DFokcas1ZSOm8ZVbIxjO1ChMfgw5zVUp6gjm3v+lKcyLN2D+AmooBYin8Ol9XQV4CCkQl8ornVN7+NSouvesEaEzCCMBGo34aPbZ
1nB6MJUkE92L9xKC999VaHIaIDkpNWJZ8h1N+ToqzANQVLnTfag06L+XRQHXfNE8eco9aQrhI7VGJovLS3P+mHikabQEIwg6kg3d
CgDFDAkeIK4QwE+s0QwjAvMLg3YckkTzUv9CxVCI+QVk4Ru1qlAvBB2/QGW2W0gUvrrEiN7kYmINFwt5h4c6B+t/YJKBz7YSGBxB
1cnCAE0rnYf2DNFgngHtJh4dHFMhAVYNVg+yYr88uIxvow37GTlUMbRKgDIQ7yW7Cj1/K8yrQbruiLwtSG2MzPtOmBfSAdfNeikY
1gwNL/F1lgBBVB9R5rshbAxFWSpTQqjkQr8W4PSUBleA3jhLdtWQlPDdAMF5LEJeCEt1tQhhpcVOkZ/uixp+NirnchtHawcDMjOi
vZP/FVJjAhoD+ivmhWCyRswpyvJ9vYQaHjI7/pNIFkeRjrjM6hJFRaTAv4pJju9NEnW1I1LmdzF4CwPikvcwQHrkn0EajAvu07dh
BsWRMwf1Ar1JJAxJ8ydGsKK8KxtyqyZSNZBCT8utsRywkhwIPjJWkV7hCQQhUuThuXNiJPVGS9yjnRsB/b6i9LVzJSZ8zISASTRB
tuRttN6pIMfEaaVPoqSCCiuwkYSXAupIM0iHtrRdVYkRPCnhySG4IeHGEDwl4akheFrC00PwjIRnhuBA/yQ5ZVF+CaFjEjo2AM3J
MnJDZYxL+PgAHNRGiFVUHBWBsbyQeoS0QqreROeMGSg3rllpbPRdPNG01ui7fHbOBenMS8uXBzxB+0KH3O4sdbQnZ89b42uvLS2u
l0uXVldBJ3t1wTo4BCivLnzy+sLauj8W2uPW0WidkVRBtizcf+Yd2s5b7y/Tq8ESW5Km6FWx9g7BQdmbW4bln1RJQzwvzdNEJWLv
PEz8PNKFoGOg5WI/X0RJZYLWbz8+v3D5+hX+Bs7FA4O2JWk455cwnQZ4tCYaG5sow3AvMO9ZuT6IzPf0XmGsLMyZJMz4GhQcYRra
So1ZWUyIzlGUbTx4C8qdQoBQycteU5YWmJpSsAhVxM5FMsiQaGyQmDE0rU9KF2Cb7P4ycRlGuN/Rz4UTHSZzGib7FIQzkb9p+MPY
IKmi8/QIjeeD6thjewkVn7NKTDoC3FNg6TjeeVdsK0nBHeO+JEFKDqo/AxBcWBIDEFx4kgGEFi0NZRMvRUwiuYtsJdXLEJOBydob
w22t7SwpF+qu/oZ6V4PlSuNf7+r867C04MZUClvl5bugONxT+TdJCpooF5wsy9B3arU3SerIuGwLtn58U30tFqoah0HViJOqMdmb
BkZxsBsfUjXib8VJ1YAYVQ0nwcbExhhM7Vxpkb+NY/t5DP4mBu8gQUwJEWatWW/jRJKm7TQQ+yUGgq3rdp4tDU/ocFa47So6DaJl
Ef2+0bYPCwXOlNl1P9W8Wd5oe17T6Ty1fxGblVpdWJEG83eeG7KjB+7oe/lLWBbqEZ1nSgNKj1mvNWqeefbpZ889ex7UjwoHjgHr
ZRFdvG2owmY2mwXt40jNFdJseXCDrly3HVInrAx5JApFpL+IkqmclAtSAPgvYEBMgWwCpDGUm5sRUzPSt+AYe/bV+GXiJm5kPpcR
JZiEuAn/Szg1kzcqLnlx/iK9LTjon84EW9KXSosrQs14PdCJAhPU2ICaARxHVrHBmzeBayZgvNt1zzJAKwI+VWOjNQ8UoofdlneR
EzxFS35WUUFvKIg/WPCzShq4Q+J9QzVIo0DTU4K0kBws/+fUEfrFqBoG+EA86nvwGQWt1pHNZVTuSRAErvAWzuCoCCtMHUwX+ob7
On7nr3vGNs7weKifJEg/SZK2AbOdJSH/1/ZPhQs2LKtjPTIx7Cpuj+oyInXFUKyEL1+lL+ngi3MtrCNzC1ucRXF8VE24QdnLdzXJ
IbC87C5wPjdLJY5F+0U9V2T/wx7A+ycg7QTLBVCKC7uxTVVwEuf4iO+T/e/QgqldIZAf6E1DeJBqHQcOk++8Yr4iHQJQDgjOn0in
DfMMjuqZJ86s2kjeZ2b3bABWBvfr1juHLze9GyYJyHQ+BY9ZbADXgWm0+F4moumR0G3FhXlke01Ks4FRRZhNwoMaNyrAGkCmxIMq
yHeAO0Br3R3XsxuUACcTfuC4JyrmJaVvCeuJx3fMylal5pw4QYJIh4UVYkU1kJx+CFUVNf5TOAVJ0UCHMJKEInW3vo9OBjrKPnV3
QqFwQND7+Cn3JeC5GJWKM4Ijkn5wJzDcCKUjtHYIQWZIL0G5hn82UHxIteFfwOBnMfglDP4aBj+Pwd/BoIGBEzBDqcRYE+jY1eex
0G+OLnr8rxPrFpytvNFs1of5WUYQ7aVWq77zDWRjnyAlA1mUTkaTNBlTcFtxhpyidEV9X1fRui6e0Eiig6CDFnb5jVibqR6H9J2j
e9hbpMLS/v6Rfy41c/JiiXW+BRpMrE7aLP9cV2Ggbf+Ueoj0Zn4NGIW2jb4K11jirhSAQBwJGEVcPL/57Ug+ZGjfBgFF5Ps2S+2f
z7kapvv1B6ULW/HtB7Vi2C+ic4t6hhtYyLDOR9qYJpb1OohJOpZLz9kHtPPsh025TxuSd+PUht+MtGGM2vAdYIlxWfJ32PgD2/Ah
U470Sc1Ln1Skiu/iiucrT1k58lIIF0T+CsGfRPiTUfgVgj9txZfXn75woTNOUd+5wVeexU/Pik/PRj8VDb5Ayv7iXMW9sdL2lmHi
WwfWrl+7trK6vjBfXl4vLy+srV26srBGplY/CeLhEjATP4Ebsw7zZxYXX19ejhpFZDH+4cU1u9oGUWenbz6R36RgQjIUKC7SOwjV
lsBniKMzKP81DO6PEEYytFMl/LIQX+6GtH6itwBu8B6myZsLYlVM5mBS50kiwZQJ5bhMkf0QX0ZM6khDBkSVZNSX4P/I7TL+p/1N
M/d4ZOP4rBBcgI5e8TRPx5NyaDW7p5A3EtrXNplOs0X1NLRlhN81Uho0Fn8bqTCN5XQDxcbopcSuCxlNM+LZy/ZwTwQEkbs6+gth
SV2dNo8xVZ7sBXEZA6Qbv6nx/0WlTYhv87FP5+8mRPldKvPNbzlTg/WJ3gTerdWA9/vKeaLxokJjjwR5YYAgC/09PP73Q9s+ulhY
J6qVepWII0C4sLb2DzoFhlnhgHHp2pJrTeD4CJdYmUlsGfwqBkj7/O+R9FxttnZ8g9l2i54GPDleaTZvutZjqHbUuD1wNk4K0gH1
kgB/A5L7utvknh+fw0Op0rnGSgKhkzHjy/iWH+hEs+VaqWAiuNbRvb5zIh0Wbhl2pXpjlO4+eU1mi5hOTFUezESfuhnc/yW1PE+T
Ikt/OXKuSUsXm5H+JCMK3l8y/12lb/nfVYhcFMkOiTTfzMqvqvyq0galZJZvnkPtHNjoVzHuJVFyd7flsx55jqMUzNepZAPJrXOY
DGaJXno3hlKsMKeRS95xeYBAfI98C5z00MgWWANQq5fTZhwkb/k2UPpEWIK+p/TIt9AFEEvVImVqoe2hED4jBvTwuRB5ngynMfY7
Sf0W2AGpXG5cfl6WhtDsbiC1H0DdQ+YUaVWZNz4ibVo+TdPkzZCT4BUzGHsTjUgmKOZR8V4434UeaHuk+0HhvlNAUn7x5JJDu4jz
oOmf5DWkX2TgxCcWiVF0MpEk740NiPTv5QZ3RkvFg8PSZT2c481QACWe8o9CnkIS9edCOXMbA3IHeCnkCkZQjxA7/zZxCiR9/8Cr
crcP5XDPrjJqCP+NiGBaoEk64B1sZQkmNzCtFHobi/OTKdwOEtb3oSmdDbCP258XVemtFdPzJGuii/5xkD0TalpVYbGDGU6OBjkl
eBMzPEsKOeYowCynUO0c23eWY137e8b9uDzBI89DzAR7OXdVpxCchyBvWoJ1Vf6Gp23DmsZg5SKlVj8kHMfe8ICckfzdN+TqEY9s
6vF/jEj4TQz+biAbdR4dULp2TNa03b2aDxqPvNliWtBBKaSDISrpax6hbhEYTMfQGCn2R0CksdJilw4nwEjn5X8GwaYacTgTpyhQ
2pgidaJzeg+yR5LQwAmUuJQjCOvvKoEvfV+GCHY+aFdDZ0LW1BDTwChV+Qx/4TOZMuk5IfyI5XOaZcI0WTYmn5N45CDcX8jjrR1s
kk3uxgmSIoapITuEWAH5YqqLTmjAxntZdoDcelDSGOvl2DS1TAd4nuDjxAZz7GAIzxIcmW0e4DMhPE7wCTSdAvxQCNcIXiCvjxw7
HMITu6H/B8CPhHCD4CilTAH8aAhPE/wAGTZy7JjYEwH4cYKjqQM9PB6STHS6N8NM+VzoHWInvMPdGN5nQO3D9yPh+yS9Hw3f8/R+
LHjvHScmexJo/eFO2RQ3EQBrrYWsVRyzGHa1ZvWti8MwcdfHxf2Zb2eibx4NLjfQS03HtoL9SMHAiB/+E5wAieV18izJRv1MrKnB
zRexvdKJQk0Az5ql5qyVH96M6UxIiBmCfCP0MDbWg6e0sL9WNuy6lZm3xYUfOAvHBg5r1B6DGfFdPIrL8Uilpa03W77avNkpoMXJ
pF2mwHDROVYatbeDViXA9Gznxas1F9jGphnUYDJ7s+ZAUwed3zcqeFEK9DIsBLAy2zkSLkhoIAm2VU3y5+tciO74ojmGDtawWsXB
Civ755ztnO23WnRnOVLtQAeeX3+QW89A2YNNXwvGpJ8J0XADInnpQJgBSr59o1a9MWKfrOZGW+MnhLV8sfPoAquh0al5CzEajqS0
+xN2wy5ayTmg+C2blYoP8WdJYJ6rtMI9bRDur98RN3VcFldr+NnLNrTwVZt7l5t3rCyopriAtXB/DNZuUFSdVtuz8OkqERMqr+vk
4QQPazbOHa/J/cSCw4ICgIZEHVb6iu2BWuvxZp3s7VZyvdmsr9da5GnkZ/pHh1yxuNRDfyQ8UczbwbpiGYgENLzRCmNloJq5Sr2+
Uane9KdXnCh5BKubf3DFCWhq8MOBFScig4fgwooTzJ8Axr8SkUY0YBt+oi675jVbl4PrSbygx3skD2GvEowJV1/y+owlEkpWE073
JFeIH0gUeD0JwbQIfOiXQDuZRqlAghF/I+SQaM17ToEqwYqokxwSHF9OC7XywAhrwZgoD1gJjObOb6j9o8zH96laJi0qpeI0fwQL
OoXBaTKBlMusWQ0umfjLgZuocAW+EcqSd0ID58+G+0Nkx/zlULdFcZFGieQH/m8w+Lf7nQhG7er3YnLj1VB01Zg2TCNh5I3DRsY4
ZxjGEeOQ8ZBRTD8PkMeMrPEy5dlzOi904s2RVaIXY32PF7VEAtd9hVp0X+VYo69W2XBrfhuCf9pHJL1/1JpIvvt9DL41or+/BcFX
IzX81qgTwaFMepZqYMqtGJ+mmlRyiI85ua60sZDUCWmg7njHopURfY2X12llE3pMyCMlNHridEDXDxJe3Hu6lC9i65eCU4fC3KHy
FXy+RjTqHxhZ1jDVpqB5YhH+uirPPOMdQDk1p/A/GEZ3PIqMZ+jYpUA3CeDn4U3pojauklsUXsKk0G5OqJfShWZa5zPUhzVAzAMX
lGaEb5M6SHuuQ+d3o1KJBO3xdxyBwPVSMW7N7OeMaZm4j9qoePu6a3Ie8mDkt/fjRMT8NgZl5IVZUYDNynQ0CoJh1B8EBFD/QxmH
fGHd31fDQ7/CkJhW+H8cNRQh5T81PBSzYiikf9r+A/FWOBB7F+j/X4MwNcqV1ToaDMBIR9db4dpHOvN/GMGOJ6FXfdlQYPaPBjGL
tij+n4YxO7BPMh+5a4wpqFne1TyY6V1tOnaPNCPQN0EPQnspOkzgViaaZLqAbbzP8G06LoP2yY64605K4MKUKPjBCDYQnHT8XlhD
JyGOF3ZStQZeQod+C/FT7ixE2iIeCVSslLBVQg2gif6BOMB3x67y9ciePimg/z60n6ehMHkPkmU0vDKdyhbkPsRS34TgfyKis4Ro
g7RUdCalL3sUfm2QuW7H6FI3OsWP17p1QfnD8/yAYPkkT/Z/oX8xIfyvgqhjoqyD17sRNxFC5O0awLeAvinBkEhthqr3B9Dyh0V9
CdCZCnBAc5bIC6C/F2IzFbKJYU/cwC6yWLPrzP3fITtOJgSl/uEoHhBq7n8eHpaRJkbQ2Vlgo9fpmIxKpjh4cl+grXdN6PLOSbSL
uJb0jtWCVIEVBU/KA0/5M0zF/wwt+x6ud+PIX+4pfY2af9ObIA20gGbJ+dinL9K+Qaw3KY2PGovfVMmEGIO644EzUk+jXKDX49JB
xtnPe6grG3j/BfEt0I6FodKbCW7FYAmaVSfNuf7QgwIyYnyFTfDEyDMR0sCzWeMgioUGICs5L87ml4qH+L8OLXrPhQxnObT41EPD
zoj9Z1+ruKAH1NG+X6mX8ZCsMAuSPPcpmnikR+g37R1XmBK/QG4woeuacHKio5VCQYiTlkHEUJSLzr8LiMsaI9NfqO2m66gQkB47
PEt/B6cezD33kfCAJxIZ3pN2FOJp8rLJhnMXZu/vPPCOjuci5EdL0OlwaHGjSQ2G1slGSVMuQ2xoEEP9WAzWiNkZvXx0742N1ZEi
kzi/lRADWhoc0E8FqC9qfZxaE6EpYB/xif8uBIe0UHDCVWVGJej+XsWXxbFOlW54UeRNRC91tdBD/iW0t+FRha7i6Wgtw/m0qUkn
GU0endQ7XzKDc2zS0U1cpHr52mqwvgh1me5dxfMxSP+gd3M7IK/0yOP11aHj9e7o4/Xh2XrIaG60eFAp5ECjj+CIfl66d0BZi9TK
ztoizD1m2hVer8EMPOVii9G9Dttoh455qN3b/baidx4kwQ/om3O57dYcmOvXxNWCxYQ8HdEiD7hyw6MT7nl5ieEalkVe8OQv8nOh
ff7nBXuWN3bITTArLfCJpfkaBMOsGi/DIDc2qq4C3WCnkQhmiCvrZPzWyVMt8T6oou/ruq7yP3ng6nd6FFGcjBDFSdYf+F805+1q
jdkmma+kRBYYjTYkZkx56yJ9Tn/v4yyHWdRFvOSiSbYvyLE6SEnigiGfLHvCEwt0kv+CsO/08cz/K8kT/eL4H4+QIv4Igue1QFwL
cUrw/a+GfSnE4raCXq4Mtw+0tzWQJACfnn5PdU93tS1y0OcXaX8wjuLboZgQnElta9G0wvGVEwppmyQ1nGpI7BI73z9SpdjAnxSc
h86w52uwMG2JGSPIMSkJkyyQwMA+GfGtxRuGuFOpywuG6Iy6LWHBhnW65uKtmhUQnvl/xrxFmiqSTsrB7Zy09TuUNzpmNE7W+FCK
4YHD4Z7Tgk2KBG5SqIr6FwktrSRUvLaMUuw50BVeEzAjD72Lm7eA9HU+BaQPvJBI/87QuUMTFo7mbbyno9YhCyH54r4eccadHamV
XBS5gUEKPWNgVCSMbKTB5FmvvZvA630UX6vbTlG1UmFZlhG49w4j44sQvBouD3FU5oATfHH4ErB4dHlADzFcL2HOZ3EDDI9TiEsh
Qv/vF+iiCNyowQuO9K66SZsvTs6LbIBJE4heoju9Fjuz5FInziAEFl7c02pxm7yjhVslYFCOvKSzaaErkGt/BT2H5T1F44L+XqUr
wK60a9Z05FZhdD+Tl1ILjvtLQlwJb7yyJgKZmtV4sP3Vr8nKNLzQJ2EYqXip6oYWKBjkiJNXad19ehRlhQaLN+RdG/LAuCqlY6Wn
CTsOPeshNC53nBJ4dZb8mgj3thS8WiEaA6qNzpFAv4vcix64qvJ/jo3/F6HJ5msYHKbje1WcmnV05Gi66C5FUuTXMfiXGHyD7Alk
hn6lyTtoRUYj8yLoNlYKHi6TjMj/lbAB0VqmbAxjDWmsEc5LeaFJmgS8LFlVKUXxPP8m7StHXVOuNre2bG4lF6/fmWtyWzTvb9GS
iVuLXg3W1XcRhhe88f+OwT8MHGrIW13sgYZ3dViTovSVlhQM3EvXliwQFLzwLoYFPPO6GTp44kjThdCWsWw7bfQNo9t0xTWAxeAu
Q7pHkG71o4v26Fo5ui/NKgjr83plY8Nm4lo7sluSSZGsfqQH93U2ocL9YSAqk0hHSzitQGJR+2JAjYS6UfZU3/i40JlfUgIK1MeF
Y4wx9EfDAMOS1YysoReOFY7gn6HTX8YYL/xEDP84vY8ZOfgbh3gafhOQYxJ+mf8HIDNBJQ==""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FMTOutBase
"""----------------------------------------------------------------------------
MODULE:
    FMTOutBase

DESCRIPTION:
    A module for common functions used across out base files

VERSION: 3.6.3-0.5.6048
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
eNqtVUFv40QU9thO4niT7m67KwGCZZCohIXYwx4rhIBtiirRdNUGDr6MJp7Jxovt8c6M2yb0BHviH3CDY/+Sb4gTf4ETb+wkddsE
IbRjzZvkvTcz3/ve8/Of1q3hwvwSpsIgmBVaDDE7QSH6xmIOc99YzOX2z07oMPvUClp/dJFlffYWh390vP/dt4M9H8M4OBodF/pr
qrjv7w9On58cvhgdHg9r41c4FaxIOJ4IiSORpiLDkyKLdCwyhQvFGaaRFEphUWg8hkPwJE648v3vByen5hi8e7Lrv03wfxkGh9Ft
Tu0lp/sguBUi4NU2vL6xgMeK1dBlLdaGtcU6zIO1zbrMh7XD7rEerB7rsy1Yu+w+8P6g9K+5iZzGXc5iPjf3PQNxiS4tAlkEiS5t
kHb124ktkC4zmpZu/9Zhzu8IQcbhdHdYwoX7Yij0Ec0PAq/s0CglYvwq3Fbn8USTlCtFX3KiZzkvu7UOzGU/msYJI6muLOEWv4h4
bhJCWBzp0GeCZAK207x089nFOHz8QnLF5Rk/zPJCj+KUhyLjgVO6iicT2YIAZBvElSV9WP7uX4f9NJ+VHiFxFmtC+ibcLUMAajee
+U7Df+kboQZfaDErvjwQ2voJGRau0DBA5Q5wcJjmCU95pjkbSCnkFZJdg8tfiXsgyu0VK4q/LngWcfWuOdSurpl/0ERyx3MzJhP9
pfUKEEkTZIAqPuT9NQgekToT+UxPgXJICI/0kwaGD5sY1vhG9q2qtZco/OtKaiDpmMWu2Ag7i6TfBvVQcU1ulMVHDUTvNxDdcdxM
iulSsSlVNP8Vj6YcM6op/iSeYJrNAiy5LmQGDWAiRYqnXHJ8HicJHnOs6BnooVVo2JXE2Q/wb3ChucxoclyRABaqoaFkmsbQSIzf
qaGqajpmLJL3dKXYq+/bw6bI91bqmoR1ieq/hFChQ0licH+84qM1f6fBxw2nf+eCIeDCnv+4uns0jdWqG2LGo5hxhc+nHMKRWAuc
S3EGuiq8eFngtPI2/dSoIwqVmSSV8m6sYyESTq8NB5vDfU9NRQFpndKMJZw0z/20EftusxY27vhPRPyygYhF1Or/h60L2ITFBFev
z7IWoOwYrl8lXL9Kq52BPRxupmZnTYTPGpw8aXCyxnUY+KYHZjTlhJQ+IfUnEX73CHld0KS2yJ658IERD43YNmLHiEdGPL4JbIVO
mg9Jb9lZPeT1vJbnwNPxOpUtcMsOIUxEcIXpnWW7Dr4yrjux9D6vEX6Blhlzu579D5I1C/M=""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FMTPairMatch
"""----------------------------------------------------------------------------
MODULE:
    FMTPairMatch

DESCRIPTION:
    Performs the pairing and the matching.
    For pairing and matching 2 instances of FMTnnn class are created.
    1. their_mt_object is instance populated with the incoming swift data
    2. our_mt_object is instance populated with underlying acm object (e.g. 545)
       or outgoing swift message (e.g. 300)
       (The security settlement comparison is ACM object vs Swift message.
        The FX Trade comparison is Swift message against Swift message).
    Based on the pairing and matching criteria defined in the FParameter
    FMTnnn_Config i.e. FMTnnn_Pair and FMTnnn_Match the above 2 objects are
    compared.

FUNCTIONS:
    get_pairing_object(their_mt_object):
        Returns the paired object for the given incoming message.
        their_mt_object is an instance of the FMTnnn class populated with the
        incoming swift message.
        It searches in the following order and breaks if searched for object is
        found
        1. FMTHooks.pre_pair
        2. FMTnnn.UniquePair
        3. attribute pair as per FMTnnn_Pair
        Finally FMTHooks.post_pair is called.

        Note that a wide pairing hook might find more than one object, and that
        in such a case, the post_pair hook can be used to choose the best of the
        set. If the whole pairing returns more than one object, the pairing is
        deemed to have failed.

    attribute_pair(their_mt_object):
        an our_mt_object is created for each acm object returned by the
        eligibility query set in the FParameter FMTnnn_EligibilityQuery. This
        our_mt_object is compared with the their_mt_object based on the
        configuration in FMTnnn_Pair.
        All the paired "our" objects are returned as a list of paired_objects

    do_matching(their_mt_object, our_mt_object):
        The their_mt_object is compared with the our_mt_object based on the
        configuration in FMTnnn_Match.
        Returns a tuple (cmp _success, cmp_result) where cmp_success is a
        Boolean and cmp_result is a dictionary of tuples (their_value, our_value)
        E.g. the cmp_result could be { "amount":("3000","4000") }

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
eNrVW1tsHNd5ntvuzs4uVxRFUVfLY1m3Vai1LF9iy7JriSJtOiKlkPQlUyeb1Z4hNdRyljozlMz1rNBGbq0AbqH2IehDHpZAUFRF
UBRtYKRB8tKnoiiKIijyMEADFAVaJE9FCxSFUVT9///MbZdL20nz0IramZ0z5/pfvv9yzv6TNPBPh8+r8PFelSWJSZbEZKa0ZEum
u2IpttJTmMq0LcVSqUyzNLrnrBzd81ae7gWrQHfd0lnOKrK8ZbCCVeqM2vJq2RqBa8UaeVtyJzTJ3rXZkSX8Y7pV+orkKmcl9jwr
MuMD2RplX2QlVoZvu9kIq3wgWWPsBbaLjULJHrabjUHJONvDxuG+l+1lE3CfYPvYfrjvYwfYQbjvZ4fYYbgfYI+xI3A/yB5nJtwP
sSfYUbgfZk+yY3B/jB1nJ+B+hJ1kp+D+uF1khWWFVdlpGM1kX2CTUPoEO8NqcD/KXmRn2dPw5kl2np1jz8C3Y+xZ9hy8O86URan6
0j+eNiTpzK/wnzF39fKbV6bPGyb8m5lbutZw+FzDb94wjMvTi1MLs9eWZq/Oi9fXbL7c5mue6d+wzXWo6LgrZsNl9LyGjaCgJnpq
874a8VvznOm4nt9wm7ZntpdxRNd1zWar4Xlmg9tmk9sN32ail6dr2LXD62t+vX191W76puMlHZjr7fWNFtY27zj+DZqF4zbbaziO
d8dZ9k3W8BvU07ma2d74nP1suMzmrU2aenPNjBqcsmsrNfO5Z5+rUofwD5bY3vBX2ulwa7bnNVbsqO4zZ88mdU8tweQ8u7nBHX8T
vvh+y16zXd+E6a43uOO1XZzSxam5eLzbnrmY7bQWd2ViVzPvmEu8weyB9n0tzMZKA9fYX1oVHV1qeLBeaDXIy4RTTZiqzZ2Gyexl
x4XKjqg8c63BG2s2vItlBjhYn2q7y86K6dTsWlyEokRdRs8kVtRF43r7tg2iIJZKjKe+xGKQ+8bMm/NTKHmLQvRWbL8ezTLi4KkB
yaieTwi0YPsb3E3FFBcqiAriS6Urzm3bTYVlG4mHSF3DTQUGBJcokRXe7cKY9DYglNtGm/VBIhq8ecP2YiIvt1ut9h1s0+YgjUTG
66AaN6HGclyb0XqSKSb9LbdBhJOnp4khr7fbN73aOreJjMnLczG3am+6zq0N+1r25TM1s+H73Lm+4QtCmg1YJ8wmw+Ck8ozjNlqt
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""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FMTSettlementWrapper
"""-------------------------------------------------------------------------------
MODULE:
    FMTSettlementWrapper

DESCRIPTION:
    This module provides the wrappers around the settlement object to calculate the money flows involved
    depending on the MT type of the settlement.

FUNCTIONS:
    class : FMTSettlementWrapper

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
-------------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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
fpnp8Cs0lk9fNpEqqjS0DiayhMlUMJ76P0NJBa8=""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FMTStandardComparator
"""----------------------------------------------------------------------------
MODULE:
    FMTStandardComparator

DESCRIPTION:
    Standard comparator functions for comparison. The entry of the function
    needs to be made in FParameter. Function should follow the prototype
    func_name(their_object, our_object, arguments, attribute_to_check)

FUNCTIONS:
    precision(theirs, ours, tolerance = 0, attribute = None):
        Compares the attributes for a given tolerance
    ignore_case(theirs, ours, arg = None, attribute = None):
        Performs case insensitive search
    bic_comparator(theirs, ours, arg = None, attribute = None):
        Performs bic comparison by stripping XXX at the end.
    compare_sequential_flow(theirs, ours, arg = None, attribute = None):
        Perform customized logic for MT103/MT202
    date_tolerance(theirs, ours, arg = None, attribute = None):
        Compare date attribute for a given tolerance

VERSION: 3.6.3-0.5.6048
----------------------------------------------------------------------------"""
from decimal import *
import FSwiftReaderLogger
import FSwiftMLUtils
from datetime import datetime

notifier = FSwiftReaderLogger.FSwiftReaderLogger('SwiftReader', 'FSwiftReaderNotifyConfig')


def get_attribute_value(attribute, fmt_object, is_theirs, compare_mode):
    """
    :param compare_mode: Match or Pair
    :param attribute: attribute to fetch value for
    :param fmt_object: ours/theirs MT Objects
    :param is_theirs: bool flag
    :return: value of attribute
    This function checks if the theirs object has any flipped attribute
    associated to compare with. If the attribute is to flipped using an
    utils attribute, the attribute to be compared is called with utils
    attribute.
    e.g.
    'AcquirerRole':{'FLIP_SIDE':'INVERT'} will result in calling theirs._utils_INVERT('AcquirerRole')
    'Acquirer':{'FLIP_SIDE':'Counterparty',...} will result in calling theirs.Counterparty()
    'SellAmount':{'FLIP_SIDE':['BuyAmount','NEGATE']} will result in calling theirs._utils_NEGATE('BuyAmount')
    """
    attrib_value = None
    if is_theirs:
        flipped_attribute_list = fmt_object.GetFlippedAttribute(attribute, compare_mode)
        if flipped_attribute_list:
            attrib_value = FSwiftMLUtils.get_flipped_attribute_value(fmt_object, attribute, flipped_attribute_list)
        else:
            attrib_value = getattr(fmt_object, attribute)()
    else:
        attrib_value = getattr(fmt_object, attribute)()

    return attrib_value


def precision(theirs, ours, compare_mode, tolerance=0, attribute=None, their_attribute=None):
    """
        :param theirs: theirs fmt object
        :param ours: ours fmt object
        :param compare_mode: whether it's a match or pair
        :param tolerance: tolerance for matching
        :param attribute: attribute to compare
        :return: true if our and their value precision is acceptable
    """
    is_match = False
    their_value = None
    our_value = None
    if attribute:
        if their_attribute:
            their_value = get_attribute_value(their_attribute, theirs, True, compare_mode)
        else:
            their_value = get_attribute_value(attribute, theirs, True, compare_mode)
        our_value = get_attribute_value(attribute, ours, False, compare_mode)
        if (their_value is None or their_value == 'None') and (our_value is None or our_value == 'None'):
            is_match = True
        if (their_value is not None) and (our_value is not None):
            if abs(Decimal(str(our_value)) - Decimal(str(their_value))) <= Decimal(str(tolerance)):
                is_match = True
            notifier.DEBUG('precision : %s --> Theirs: %s Ours: %s Tolerance: %s isMatch: %r' % (
                attribute, Decimal(str(their_value)), Decimal(str(our_value)), Decimal(str(tolerance)), is_match))
    return is_match


def ignore_case(theirs, ours, compare_mode, arg=None, attribute=None, their_attribute=None):
    """
        perform case insensitive comparison
        :param theirs: theirs fmt object
        :param ours: ours fmt object
        :param compare_mode: whether it's a match or pair
        :param arg: None
        :param attribute: attribute to compare
        :return: true if our and their value is acceptable
    """
    is_match = False
    their_value = None
    our_value = None
    if attribute:
        if their_attribute:
            their_value = get_attribute_value(their_attribute, theirs, True, compare_mode)
        else:
            their_value = get_attribute_value(attribute, theirs, True, compare_mode)
        our_value = get_attribute_value(attribute, ours, False, compare_mode)
        if their_value and our_value:
            if their_value.upper() == our_value.upper():
                is_match = True
            notifier.DEBUG(
                'ignore_case : %s --> Theirs: %s Ours: %s isMatch: %r' % (attribute, their_value, our_value, is_match))
        if (their_value is None or their_value == 'None') and (our_value is None or our_value == 'None'):
            is_match = True
    return is_match


def bic_comparator(theirs, ours, compare_mode, arg=None, attribute=None, their_attribute=None):
    """ perform bic comparison by stripping XXX at the end

        Incoming	    Outgoing	    Match
        --------------------------------------
        HSBCHKHHXXX	    HSBCHKHH	    Yes
        HSBCHKHHXXX	    HSBCHKHHHKH	    No
        HSBCHKHHXXX	    HSBCHKHHXXX	    Yes

        HSBCHKHHHKH	    HSBCHKHHXXX	    No
        HSBCHKHHHKH	    HSBCHKHHHKH	    Yes
        HSBCHKHHHKH	    HSBCHKHH	    No

        HSBCHKHH	    HSBCHKHHXXX	    Yes
        HSBCHKHH	    HSBCHKHH	    Yes
        HSBCHKHH        HSBCHKHHHKH     No
    """

    is_match = False
    their_value = None
    our_value = None
    if attribute:
        if their_attribute:
            their_value = get_attribute_value(their_attribute, theirs, True, compare_mode)
        else:
            their_value = get_attribute_value(attribute, theirs, True, compare_mode)
        our_value = get_attribute_value(attribute, ours, False, compare_mode)
        if their_value and our_value:
            their_value_orig = their_value
            our_value_orig = our_value
            their_value = their_value[:len(their_value) - 3] if their_value.endswith('XXX') else their_value
            our_value = our_value[:len(our_value) - 3] if our_value.endswith('XXX') else our_value
            if their_value.upper() == our_value.upper():
                is_match = True
            notifier.DEBUG('bic_comparator : %s --> Theirs: %s Ours: %s isMatch: %r' % (
                attribute, their_value_orig, our_value_orig, is_match))
        if (their_value is None or their_value == 'None') and (our_value is None or our_value == 'None'):
            is_match = True
    return is_match

def compare_sequential_flow(theirs, ours, compare_mode, arg=None, attribute=None):
    """This logic is specific to Custom cash messages 103/202"""
    is_match = False
    their_value = None
    our_value = None
    if attribute:

        attribute_to_compare = 'OrderingCustomer'
        if theirs._message_type == 'MT202':
            their_value = get_attribute_value('RelatedReferenceNumber', theirs, True, compare_mode)
            our_value = get_attribute_value('RelatedReferenceNumber', ours, False, compare_mode)
            attribute_to_compare = 'OrderingInstitution'
            if their_value and our_value:
                if their_value == our_value:
                    is_match = True
        if not is_match:
            is_match = bic_comparator(theirs, ours, compare_mode, arg, attribute_to_compare)
            if not is_match:
                is_match = bic_comparator(theirs, ours, compare_mode, arg, 'Sender')
        return is_match


def date_tolerance(theirs, ours, compare_mode, tolerance=0, attribute=None):
    """
        :param theirs: theirs fmt object
        :param ours: ours fmt object
        :param compare_mode: whether it's a match or pair
        :param tolerance: tolerance for matching
        :param attribute: attribute to compare
        :return: true if our and their value precision is acceptable
    """
    is_match = False
    their_value = None
    our_value = None
    if attribute:
        their_value = get_attribute_value(attribute, theirs, True, compare_mode)
        our_value = get_attribute_value(attribute, ours, False, compare_mode)
        if (their_value is not None) and (our_value is not None):
            date_difference = datetime.strptime(our_value, '%y%m%d') - datetime.strptime(their_value, '%y%m%d')
            if abs(date_difference.days) <= int(tolerance):
                is_match = True
            notifier.DEBUG('date_tolerance : %s --> Theirs: %s Ours: %s Tolerance: %s isMatch: %r' % (
                attribute, str(their_value), str(our_value), str(tolerance), is_match))
    return is_match


...

  FMTStateChart
"""----------------------------------------------------------------------------
MODULE:
    FMTStatechart

DESCRIPTION:
    This module creates a state chart

FUNCTIONS:
    create_state_chart(state_chart_name, definition):
        Returns created state chart of name state_chart_name.
        definition is a transition dictionary
        e.g.
        {'state a': {'event to go to b':'state b',
                     'event to go to c':'state c'
                    }
        }

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FMTx99InBase
"""----------------------------------------------------------------------------
MODULE:
    FMTx99InBase

DESCRIPTION:
    OPEN EXTENSION MODULE
    This is a READ ONLY module opened to display the logic to extract attributes
    from swift message and an acm object but the user should NOT edit it. User
    can extend/override the default mapping in derived class i.e. FMT399In
    Base class for mapping attributes.
    Default logic for extracting attributes from swift data.

FUNCTIONS:
    ProcessMTMessage():
        Process the incoming MTx99 message. It stores the incoming message in
        FExternalItem and creates the business process on it.
    UniquePair():
        Return paired object if incoming message has a unique identifier to get
        the object from acm. User can configure this.


VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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
""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FMTx99OutBase
"""----------------------------------------------------------------------------
MODULE:
    FMTx99OutBase

DESCRIPTION:
    OPEN EXTENSION MODULE
    This is a READ ONLY module opened to display the logic to extract attributes
    from swift message and an acm object but the user should NOT edit it.
    User can extend/override default mapping in derived class i.e. FMTx99
    Base class for mapping attributes.
    Default logic for extracting attributes from confirmation object.

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FMXOutBase
"""----------------------------------------------------------------------------
MODULE:
    FMXOutBase

DESCRIPTION:
    A base module for MX messages.
    solution.

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
eNqtWFtz3EgV1m0uHo/txHZuu7n0Jphkwu7ksssCKYoi2J4tg+2kbO8mCKpUsrrHVqKRtK2WHU9soEjggeKJB96osh/zB/gD/Au9
UTzlL+wLnNPSjDUTjZMsO/YcSdOnu79z6dNf6z/K0MeA78/hG62BoIqpUJVqnmqq8qqZmrzqpg5X3TM6hmmoCjNeKGbpC4UatPRS
oSVWfqGbFXgu0wo8V+RzlWrrSqP674qmKJ98h5/ayoOFL5cX79UIfForjx/E4hd2xGq1hcX1+bWlhxtLD1bTxvtkExpIJ6Cxx0g7
4GTlMemwKLK3WNSUKlHgxcIN/Gat9tXi2jp2JXNrc7Xa2uL6xtrSPA62fmt5aWVp4768v1cbu9Mk9/09HNZtu46N3SMiAiK2GYkc
7obiFvMdvhcKRrPJbzkeszkR7JkgTkAZ2XXFtuvLLk7AGXEj4geCRHEYBhz6NWtjd5tkYxt+z+BnGk4ciaDjdu1Nj4HSp6iEY3TC
wGe+IB17T+rtBvwpsSPCnoXMQSA4I7HfwE2hWwr+eCpbkDhinDAfcHyXoXuNGbfaUJNqa33XbYuVZWc4H7VePm6DYArkoYI5CPmn
Uf2lYhppzpmlNNfMMq3SMbhWaI2Ow7VK63QCrmN0kk7BtUZP0dNwHafTdAaudTpLz8B1gp6l5+A6Sc9Dll5Izjy0udi7TymH/FiP
Q8YxqbpPZQjgHyMls8nx7CiSyRRiD2KnXZpkwW23GccYtGPfQe8Sx/bJJiPBDuPchahDxLP0IxGEBcNAglikYzYdLeeHEnxr8J1H
XzwGsa/yjX11X7GUbh3WouKpB9ojxb9tKELba6nKga4q3fNUOzCEvm+8UFXlkfJrWNEH+u90v5Zebyu3lX3t0NhXj3CkElXAdn2V
48Td9hrbij1bBHxv2d1Emzn7OnY55A5aOx/EvuB7Mn2bZNGPYkjb4y7gDecpGnYDcpxx3/ZubcauJz5x/QaO5XayxG6Uk5L0XDLZ
GpgxGV+SOoucBxx0uOsLsy7DAnpLfjtIqmH21CglRsS8Nkc38TKIRGXmhBdsWZGwBetAGF4pvA4N30wc14hmuJdULcv1XWFZH6Bn
T6GvVUMtq5paVyfh7rLavVyYC81eR0fNxamcxUrG6SXWUPUAfPtEOVSPFP4HiIfWezrUjhSqX4BI7OuHOrTepga0avyrAY0S1f+k
gZZByxAp40g9KPm1nsZBab+UjV+S41cOy/v95yMN2lSsuvFDgCJzt5+MW+4OpJ3gjAni2x0oiDzoDCfxut0JsQKkz2T5X//cZf4W
ZCcjdz9NlNbr/8JnY/UblXRLzw/I84NGRcYgqWTuSkpR6LkiqbgRdbfgxngSuL5ZzZrvJmVIpo4tGmWO6W1O2JRbu4G16W1ZfieZ
dSO4pT48xB0rhC4QyWQM1oewnG2bm2WwABTNEkK8IyOciglEMZ7aZ6F938OIXJQ1xVBrENlptQrSUM+qda0mf5tWux8Vxzo3zkC4
jaxEyXD/cjjcrXcKd+sNjTRope5ngxHbdT0vDRsuJer6WwS8sgmVWYYuCxKfAhgtjpm80TDSFTGNYgbFLAj4Vfq6DJ4F3/Fz2HC+
77lj90315rHSeX6EVk4XuBAcN1fsuKERBpynZl/pPEM6D8zWunNvNxvisCqBvlKlLcPIJ47nBVU5gaymWvfa23AOh3gUyhujUOLW
0PYCqJGpzSlQ/mEBzJLU+yIH78NieFLvDVj9zEMX9LIIwKnd6yeBCwMoip6s3A1NJohZMd1wHp4LUY6nHSzs8Ksc1hFrJaf9Hogv
SsQZGcqjFcGu34NpzLtirxDjGKrJ4D3IIbxSjLCv+x7pOAIZ8YKUOp0Q5Wk5X09RTryeA3njBJADnf4/tNSFIuY6Ird4CtFO9BTl
nI/evnQG9N8J48ejMDoZqYjiTcC740YnO3Y207dA3+rp/yaH+GYx4qJu75GqNwsWF2ci5v6AEdn6GsPErT+JOe6AskehLZUeqBz8
SyfCX21MIXtBr1tWUrOslK7Dfd2yvo5tL2upWBYNHMvikzjZBRTIdTjuhfwSissorqAgKD5CcRXFtUGgfbQcg4nbRoTbBuwBWrVW
nanWq0b+T2qNZvS/HWD0VAP2rVOdGpLVA5+XrL5Cq5LVj9GaZPXjtC5Z/QSdlKx+ip6SrP40nZasfobOSlZ/BiJ1Nqkdcz1Hz2HQ
s6+M78eSTSOT3ofN2lJdiLYFiEDqFO8NUTosU+0IOHTGkM3qQrAaiBU73GhUkortdKxg80kyFuEpBm/NSfbMYaFcuhh1QBhYcA6z
OnZongMes2OFe882LeF2WBeOXFbbs7cSA38zzzxEmsN32JIfxmIDNEzQaOjpRtdAcbMgJJPSnWBPXWZwuf/Xnckx3kLSOrBOqyCE
8kcVTX2l4ulsBkxdQh6INJpRSciLC52VHWesCI4KcOhlUdhPZ7V7KY/jDc3RiMrZAlxXOMaqoab2F1YEKw1BuCe2wfUQCTjtihyG
K3kMBbqjy0Dql34RuLwmV3x6EnRiLk96FM4aBGPabGjJWGsBHmX8Jt0osGLhQArsWqJbCP3UPGey1vd6dfO0IAd7WG/gnKgNl1xJ
JWF7bUmaXYxWooBSJVnhaScb38L2fnMO6Xkr5ezWMJLf5zeLvKNH6A84WxtOQkml0w3jat7ZGecN2kRw249sWVOj12oP5KvMkGk/
sIK2lVd6I11W5VgP2hs5pT/3XIcsdyBhirTfyftX28feH4E/RfVZQWJc7LmvaPq/5lx+vcDl3xry54ObXM6AleyVxQJrYy3B1iUK
+eS2XcbzqZToO7Y3bM21HrJsmONRjgf5W86oZoFRJ3R9J/7xXL7rw8+gkUBYXcoisrvNwFCO78FCHuzgqxo03O3VQLvnknQ52VC+
PE/+2B/4XkoI7pHNIPCYfdzQGk1nPoi2gxiOZNu2T2Efz4/7975HSt25nEdG93gnR/xlhCMyq6Nvb7aI8b0B5Lissf3XXICTpPWW
pPW237OhrZ7A9GYKLPxHzieXcz4pUF1tTHA8//M5FN/vbZe8ieIWijso7qL4IYrPUfwYxU9Q3BvFg27It+SAY1byoOo48J5ytVSt
gCzDfUVqNMb4ddT+gXzD0XvX+aVwvYjfxgZdcsR0O+p4kkuUU/9IDiUHKZo/qf40JX0/w+hGaJMxBTDgr66W9VMr/wPCVRVV""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FNarrativeInProcessingBase
"""----------------------------------------------------------------------------
MODULE:
    FNarrativeInProcessingBase

DESCRIPTION:
    Base class for logic to be executed in each state. User can override/extend
    the default behavior in FCommodityConfirmationInProcessing class derived from this
    class.

FUNCTIONS:
    process_state_ready():
        Pairing is performed in this state and either the 'Identified'/
        'NotIdentified' event is triggered.

    process_state_paired():
        Matching/Cancellation is performed in this state and either the 'Match'/
        'NoMatch'/'Cancel' event is triggered.

    process_state_unpaired():
        Performs the unpairing the acm object from business process.

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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
IutlWCnW+7axCAnTf/M/Ik7wlQ==""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FNarrativeOutCallbacks
"""----------------------------------------------------------------------------
MODULE:
    FNarrativeOutCallbacks

DESCRIPTION:
    OPEN EXTENSION MODULE
    FFXTradeConfMsgCallbacks class for user customization.
    Business process conditional_entry/exit and on_entry/exit callbacks.
    User can override the logic written in the base class FFXTradeConfMsgCallbacksBase

    If user wishes to add some extra processing for conditional entry state
     e.g. 'ready' he can implement method as
    def condition_entry_state_ready(self):
        # Custom logic before core logic
        super(FFXTradeConfMsgCallbacks, self).condition_entry_state_ready()
        # Custom logic after core logic

FUNCTIONS:
    For sample state xxx there are always the four standard extension points:
        condition_entry_state_xxx():
            To control if all the pre-requisites to performing the action and
            entering the state are defined.
        on_entry_state_xxx():
            Is the place to perform the action.
            For example, the on_ entry_state_matched is the place to set the
            confirmation status to Matched
        condition_exit_state_xxx():
            To control that all pre-requisites for performing the next action
            are fulfilled.
        on_exit_state_xxx():
             Is the place to reset values that you set in the state entry, if
             you are leaving the state to go backwards in the workflow.
             For example if you exit from the ?Matched? state to go and re-pair,
             or to manually cancel, then you would want to remove the
             confirmation Matched status

VERSION: 3.6.3-0.5.6048
----------------------------------------------------------------------------"""
# The context parameter is an instance of FBusinessProcessCallbackContext
import FNarrativeOutCallbacksBase
import FSwiftWriterLogger
notifier = FSwiftWriterLogger.FSwiftWriterLogger('SwiftWriter', 'FSwiftWriterNotifyConfig')

class FNarrativeOutCallbacks(FNarrativeOutCallbacksBase.FNarrativeOutCallbacksBase):
    def __init__(self):
        super(FNarrativeOutCallbacks, self).__init__()



...

  FNarrativeOutCallbacksBase
"""----------------------------------------------------------------------------
MODULE:
    FNarrativeOutCallbacksBase

DESCRIPTION:
    OPEN EXTENSION MODULE
    This is a READ ONLY module. User can override the default logic in derived
    class FFXTradeConfMsgCallbacks
    Business process conditional_entry/exit and on_entry/exit callbacks.

FUNCTIONS:
    For sample state xxx there are always the four standard extension points:
        condition_entry_state_xxx():
            To control if all the pre-requisites to performing the action and
            entering the state are defined.
        on_entry_state_xxx():
            Is the place to perform the action.
            For example, the on_ entry_state_matched is the place to set the
            confirmation status to Matched
        condition_exit_state_xxx():
            To control that all pre-requisites for performing the next action
            are fulfilled.
        on_exit_state_xxx():
             Is the place to reset values that you set in the state entry, if
             you are leaving the state to go backwards in the workflow.
             For example if you exit from the "Matched" state to go and re-pair,
             or to manually cancel, then you would want to remove the
             confirmation Matched status

MAPPING:
    Below is the mapping of Settlement status against its corresponding document status.
    Settlement Status                   Document Status
    -------------------                 ---------------
    NEW                                 NEW
    EXCEPTION                           EXCEPTION
    PENDING_DOCUMENT_GENERATION         PENDING_GENERATION
    PENDING_APPROVAL                    PENDING_GENERATION
    AUTHORISED                          PENDING_GENERATION
    RELEASED                            GENERATED
    ACKNOWLEDGED                        SENT_SUCCESSFULLY
    NOT_ACKNOWLEDGED                    SEND_FAILED
    PENDING_CLOSURE                     SENT_SUCCESSFULLY
    PENDING_CANCELLATION                SENT_SUCCESSFULLY
    PENDING_MATCHING                    SENT_SUCCESSFULLY

VERSION:  3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.

----------------------------------------------------------------------------"""
# The context parameter is an instance of FBusinessProcessCallbackContext
import time
import acm
import FSwiftWriterLogger
import FSwiftMLUtils
import FSwiftWriterUtils

notifier = FSwiftWriterLogger.FSwiftWriterLogger('SwiftWriter', 'FSwiftWriterNotifyConfig')

class FNarrativeOutCallbacksBase(object):
    def __init__(self):
        pass


    # Conditions return True or False
    # Name convention is
    # 'condition_' + 'entry_'/'exit_' + state name in lowercase and underscore
    def condition_entry_state_ready(self, context):
        return FSwiftMLUtils.HasUserRights(FSwiftMLUtils.get_operation_name_from_bpr_context(context))

    def condition_entry_state_swiftmsggenerated(self, context):
        return FSwiftMLUtils.HasUserRights(FSwiftMLUtils.get_operation_name_from_bpr_context(context))

    def condition_entry_state_generationfailed(self, context):
        return FSwiftMLUtils.HasUserRights(FSwiftMLUtils.get_operation_name_from_bpr_context(context))

    def condition_entry_state_sendfailed(self, context):
        return FSwiftMLUtils.HasUserRights(FSwiftMLUtils.get_operation_name_from_bpr_context(context))

    def condition_entry_state_sent(self, context):
        return FSwiftMLUtils.HasUserRights(FSwiftMLUtils.get_operation_name_from_bpr_context(context))

    def condition_entry_state_acknowledged(self, context):
        return FSwiftMLUtils.HasUserRights(FSwiftMLUtils.get_operation_name_from_bpr_context(context))

# ------------------------------------------------------------------------------
    def condition_exit_state_ready(self, context):
        return True

    def condition_exit_state_swiftmsggenerated(self, context):
        return True

    def condition_exit_state_generationfailed(self, context):
        return True

    def condition_exit_state_sendfailed(self, context):
        return True

    def condition_exit_state_sent(self, context):
        return True

    def condition_exit_state_acknowledged(self, context):
        return True

# ------------------------------------------------------------------------------
    # Entry/Exit callbacks do not return anything
    # Name convention is
    # 'on_' + 'entry_'/'exit_' + state name in lowercase and underscore
    def on_entry_state_ready(self, context):
        pass

    def on_entry_state_swiftmsggenerated(self, context):
        pass

    def _trigger_event_on_parent_bpr(self, acm_obj, state):
        ext_obj = FSwiftMLUtils.FSwiftExternalObject.get_external_object(acm_obj=acm_obj, msg_typ='FSwiftParent',
                                                                         integration_type='Outgoing')
        if ext_obj:
            bpr = FSwiftMLUtils.FSwiftExternalObject.get_business_process_from_external_object(ext_obj)
            if bpr:
                FSwiftMLUtils.trigger_event(bpr, state, state)

    def on_entry_state_generationfailed(self, context):
        msg_type = ''
        try:
            acm_obj, sub_typ, msg_type = FSwiftWriterUtils.get_acmobj_subtyp_msgtyp(context)
            max_retries = FSwiftWriterUtils.get_max_commit_retries()
            bpr = context.CurrentStep().BusinessProcess()
            doc_id = FSwiftMLUtils.get_parameters_from_bpr_state(bpr, 'Ready', 'DOCUMENT_ID')

            counter = 1
            while counter <=max_retries:
                try:
                    FSwiftMLUtils.set_document_status_on_acm_object(acm_obj, 'EXCEPTION', sub_typ, doc_id=doc_id)
                    self._trigger_event_on_parent_bpr(acm_obj, 'Fail')
                except Exception as e:
                    #raise e
                    if 'Update collision' in str(e):
                        counter = counter + 1
                        notifier.ERROR("{0} Retrying after 8 seconds due to update collision".format(msg_type))
                        time.sleep(8)
                        continue
                    notifier.ERROR('%s Exception in on_entry_state_generationfailed : %s' % (msg_type, str(e)))
                break
        except Exception as e:
            notifier.ERROR('%s Exception caught in on_entry_state_generationfailed : %s' % (msg_type, str(e)))



    def on_entry_state_sendfailed(self, context):
        msg_type = ''
        try:
            acm_obj, sub_typ, msg_type = FSwiftWriterUtils.get_acmobj_subtyp_msgtyp(context)
            max_retries = FSwiftWriterUtils.get_max_commit_retries()
            bpr = context.CurrentStep().BusinessProcess()
            doc_id = FSwiftMLUtils.get_parameters_from_bpr_state(bpr, 'Ready', 'DOCUMENT_ID')

            counter = 1
            while counter <=max_retries:
                event = context.Event().Name()
                if event == 'Nack':
                    try:
                        FSwiftMLUtils.set_document_status_on_acm_object(acm_obj, 'SEND_FAILED', sub_typ, doc_id=doc_id)
                        self._trigger_event_on_parent_bpr(acm_obj, 'Fail')
                    except Exception as e:
                        if 'Update collision' in str(e):
                            counter = counter + 1
                            notifier.ERROR("{0} Retrying after 8 seconds due to update collision".format(msg_type))
                            time.sleep(8)
                            continue
                        notifier.ERROR('%s Exception in on_entry_state_sendfailed : %s' % (msg_type, str(e)))
                break
        except Exception as e:
            notifier.ERROR('%s Exception caught in on_entry_state_sendfailed : %s' % (msg_type, str(e)))


    def on_entry_state_sent(self, context):
        pass


    def on_entry_state_acknowledged(self, context):
        msg_type = ''
        try:
            acm_obj, sub_typ, msg_type = FSwiftWriterUtils.get_acmobj_subtyp_msgtyp(context)
            bpr = context.CurrentStep().BusinessProcess()
            doc_id = FSwiftMLUtils.get_parameters_from_bpr_state(bpr, 'Ready', 'DOCUMENT_ID')
            max_retries = FSwiftWriterUtils.get_max_commit_retries()
            counter = 1
            while counter <= max_retries:
                try:
                    if acm_obj.IsKindOf(acm.FSettlement):
                        FSwiftMLUtils.set_document_status_on_acm_object(acm_obj, 'SENT_SUCCESSFULLY', sub_typ, doc_id=doc_id)
                    self._trigger_event_on_parent_bpr(acm_obj, 'RcvdAck')
                except Exception as e:
                    if 'Update collision' in str(e):
                        counter = counter + 1
                        notifier.ERROR("{0} Retrying after 8 seconds due to update collision".format(msg_type))
                        time.sleep(8)
                        continue
                    notifier.ERROR('%s Exception in on_entry_state_acknowledged : %s' % (msg_type, str(e)))
                break
        except Exception as e:
            notifier.ERROR('%s Exception caught in on_entry_state_acknowledged : %s' % (msg_type, str(e)))

# ------------------------------------------------------------------------------
    def on_exit_state_ready(self, context):
        pass

    def on_exit_state_swiftmsggenerated(self, context):
        pass

    def on_exit_state_generationfailed(self, context):
        pass

    def on_exit_state_sendfailed(self, context):
        pass

    def on_exit_state_sent(self, context):
        pass

    def on_exit_state_acknowledged(self, context):
        pass


...

  FNarrativeProcessFunctions
"""----------------------------------------------------------------------------
MODULE:
    FNarrativeProcessFunctions

DESCRIPTION:
    Processing functions for the MTx99 messages. This module is used by
    FNarrativeInProcessingBase

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
eNqtlE9v2zYUwElJjm3FaVO36LquA3iYgRlYkm47DA2Coo3rFAZiJ7CdddNFkEU6YWtTBkU3seH00u2472Af93120m3YKV9hl+09
yWnTFu2pEsR/ev/4+Hv8h7z3OPA9gi/egYYTj3DKrQH1qKBzym3uLCzPStdsz057x3N4jq/8Rrwcz/MC9Cvc6pBq8e+mRcjGZ3zc
5sGTo/36tsvg2WsFWgdGvhSHOgpFHO+NVWhkpGLXfVLv1NqNw27joJUJL0WkOmb9SzHWjzQzJ4I1u2cPHrAh/A+ORbzJuicyZsOI
jweCwWgcC856k/ecNtRbm7tBLFz353q7gw5ZpV1x3Xa90203ahhCZ2u/0Wx0H6fjbbf4/SZ7rCboQfZlGGTBmCiNJQ61HJktoUI9
GRlwnMWxFQ5EANGKM8PCiAt2Ks2JVKlKGOk0ThUZFo9Ho0iD3qZb/OGDnaBEOI5NNJTToDcQIPQjCqGN4ShSQhk2DCap3GmkX7Ag
ZuJsJEIMBD2y4IO4Oahlwb91FRhMmmZCQRyfE4ALJLTlla4eg3dnr3Mq+6YtAi50KzKyP6lFqi+PQ3qF6xx8Lnw1ZHuKbNNzOt2Z
keeEW9gi3QvKnS/I79aX5NyawQtrOVij6Yo9s/kKz6dj+oyoTYcYa6IoOXcomd429tzhhQWl5Bn5Fa07rxzlZv19cp+Y3HxlRhcU
K2O6yZ4Kk50engeXgWJcmEAOAEsdDZdcXkLZ0lBJ5F96fkHTfvsCy/TiOjTTRl1rAPn0RELmtTBaipfI+bvGdxu1zPBJmiY2CrRh
Uf/SAdupxA+r+cSNMZU+D0yQOH2peFKsn4VihGedFBQmVwqd5Ort9kE7Wcsy39w/MhC4Vz4WxkfDEx9d+T0ZVnNJcWj8qPccIPLc
GIgQGn94q32pY+P3BlH4wrt5ZeIv85BQ8SfR67jfrz9e65ujSVKsXW7zDh4uqhDLoRa9S8t0nV6jzNJlWAutj/GQYCJnhszIa4on
D5VG59aMzpAMe2FTojzjzHOczuh8ZUGgzS/IclSAURE+9yOzVW4tKM77udsE+TCl+dqM8je2gaVfgKVrk7+AJZhPH+E9O7h+7syc
+fqCgIYzv8FzpjyzX9OlDef5zWyOTP5hLalzzu1XNlCX9kgdd4C3wvQe62p5fIw1+TKrchOebKko7ae93cM2q3BWPzNCq2DAsvPC
pe1LRUQq04USa3AYIAqcRYp1TGAEq8DNWYnZxsa37whUNzYewrq39s5qynNr+tMbuFgUhmOtwSDeaplLX76R9+GuztCCiCqxRvyr
NCmIs9CXqh9Vb6UnnJT2mt3DQOom7su7ySN/INULiN2PVKavCyCnV1HYabT2Djz7QHIv3xlniK7WMAplOkaMkly6s8RpBUPhrXYD
DYCnS3oN9L21yzjTvGikKSkaHYSiFwDUxREkzfgQoi7hLzs2UDlP6rtHT6s5fQ0t2L2R9krLqsjCw5rWyHGKftbcQPV7n8rKN0jx
3RR8ixaoQ8vWbfrdfwXrFuBfgLdM9VeYs3yS930ehb7vla/em/sR2k7zkm5O38IGc5rqXQnmbUSFney+f4iXUox7dNYLtIT+nELp
f9XaVlQ=""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FOutStateChart
"""----------------------------------------------------------------------------
MODULE:
    FOutStateChart

DESCRIPTION:
    A module for common functions used across out base state chart files

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import FMTStateChart, FIntegrationUtils

def define_state_transition(create_nack_ack_event):
    """
    Creates a state chart with the given name, if required.
    The definition parameter must completely define the content of the business
    process state chart, including all states and transitions between them. Its
    format is a dictionary of states mapped to a dictionary of transitions as
    event->next_state items, e.g.:

      {'state a':  {'event to go to b': 'state b', 'event to go to c': 'state c'}}

    All defined next_states values must be unique within a state's transitions
    (i.e. multiple events cannot lead to the same next_state).
    """

    state_chart = {
                    'Ready':                {
                                                'GenerateSWIFT': 'SwiftMsgGenerated',
                                                'Fail': 'GenerationFailed'
                                            },
                    'SwiftMsgGenerated':    {
                                                'Send': 'Sent',
                                                'SendFail': 'SendFailed',
                                                'Regenerate': 'Ready'
                                            },
                    'GenerationFailed':     {
                                                'Regenerate': 'Ready'
                                            },
                    'SendFailed':           {
                                                'ReSend': 'Sent',
                                                'Regenerate': 'Ready'
                                            },
                    'Sent':                 {
                                                'Ack': 'Acknowledged',
                                                'Nack': 'SendFailed',
                                                'Fail': 'SendFailed'
                                            }
                 }

    if create_nack_ack_event and FIntegrationUtils.FIntegrationUtils.get_acm_version() >= 2022.2:
        update_state_chart = state_chart['SendFailed']
        update_state_chart.update({'Ack': 'Acknowledged'})

    return state_chart



def create_out_statechart(state_chart_name, notifier, create_nack_ack_event = False):
    try:
        state_chart_dict = define_state_transition(create_nack_ack_event)
        FMTStateChart.create_state_chart(state_chart_name, state_chart_dict)

        # EDIT 'coordinate string' ONLY IF STATE CHART MENTIONED ABOVE IS CHANGED.
        co_string = 'Acknowledged, 362, 0;SwiftMsgGenerated, -220, 0;XMLGenerated, -300, 0;NetworkRulesValidated, -14, 0;SendFailed, 156, -204;GenerationFailed, -358, -203;Ready, -500, 0;Sent, 159, 0;'
        FMTStateChart.layout_state_chart(state_chart_name, co_string)
    except Exception as e:
        notifier.ERROR("Exception in create_out_statechart while generating state chart %s: %s" % (str(e),state_chart_name))
        notifier.DEBUG(str(e), exc_info=1)


...

  FPyxbgen
"""----------------------------------------------------------------------------
MODULE:
    FPyxbgen

DESCRIPTION:
    A function to generate the bindings for making a python class out of the
    corresponding XML schema. This is a way to extend an existing, packaged MT
    message with, for example, a new attribute. Add the attribute to the XML
    schema, generate the bindings, and the access function is created in the
    Python class MTnnn, which in turn will be used  by FMTnnnBase, and which can
    be extended in FMTnnn. See a closer description in FCA4859.

FUNCTIONS:
    GenerateBindings(listOfGenerationParameters)
        Generate a Python class from an XSD.
        ARGUMENTS:
            -u NameOfXSD            -- Specify the name of the XML schema
            -m NameOfPythonClass    -- Specify the name of the Python class

    Sample usage:
    -------------
    import FPyxbgen
    FPyxbgen.GenerateBindings(['-u', 'Sample.xsd', '-m', 'SampleOutput'])

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FRequestCancellationOutBase
"""----------------------------------------------------------------------------
MODULE:
    FRequestCancellationOutBase

DESCRIPTION:
    A module for common getter formatter functions used across cancellation out base files

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""

import FSwiftWriterUtils
import FSwiftMLUtils
import FCashOutUtils
from FCommonGroupOutBase import FCommonGroupOutBase

class FRequestCancellationOutBase(FCommonGroupOutBase):
    def __init__(self, acm_obj, swift_obj):
        super(FRequestCancellationOutBase, self).__init__(acm_obj, swift_obj)

    # ------------------ transaction_reference -----------------------
    # getter
    def transaction_reference_20(self):
        """
        Returns a dictionary as {'seqnbr': <value>, 'seq_ref': <value>}
        """
        val = {}
        settlement_prefix = FCashOutUtils.get_settlement_reference_prefix()
        cash_settlement_out_config = FSwiftWriterUtils.get_config_from_fparameter('FCashOut_Config')
        include_tradeno_in_tag_20 = FSwiftMLUtils.incude_trade_no_in_tag20(cash_settlement_out_config)
        sender_ref = FSwiftMLUtils.get_sender_ref(self.acm_obj, settlement_prefix, True, include_tradeno_in_tag_20)
        mt_type = self.swift_message_type
        if self.child_mt_type:
            mt_type = '{}-{}'.format(self.swift_message_type, self.child_mt_type)
        sender_ref['sender_ref_end_char'] = FSwiftMLUtils.get_character_for_mt_type(mt_type)

        return sender_ref

    # formatter
    def _format_transaction_reference_20(self, val):
        if val:
            sender_ref_end_char = val.get('sender_ref_end_char')
            val = FSwiftMLUtils.format_sender_reference(val)
            senders_reference = '{}{}'.format(val, sender_ref_end_char)
            return senders_reference

    # ------------------ related_reference -----------------------

    def _check_condition_set_related_reference_21(self):
        related_settlement = FCashOutUtils.get_related_settlement(self.acm_obj)
        if related_settlement:
            return True
        else:
            return False

    # getter
    def related_reference_21(self):
        """ Returns related settlement number as string."""
        related_ref = ''
        newCancSettl = True
        related_settlement = FCashOutUtils.get_related_settlement(self.acm_obj)
        # If true, means we are trying to generate cancellation on same settlement.
        # In such case, the purpose is to send cancellation for acked message
        # TODO: cases for sending cancellation for MT202COV case is not handled.
        if self.acm_obj == related_settlement:
            newCancSettl = False
        if related_settlement:
            external_objs = FSwiftWriterUtils.get_external_object_for_acm_object(related_settlement)
            for each_obj in external_objs:
                related_settlement_mt_type = FSwiftMLUtils.FSwiftExternalObject.get_mt_type_from_external_object(each_obj)
                if related_settlement_mt_type == self.child_mt_type:
                    bpr = FSwiftMLUtils.FSwiftExternalObject.get_business_process_from_external_object(each_obj)
                    if related_settlement_mt_type and bpr.CurrentStateName() in ['Acknowledged', 'Sent'] and \
                            ((newCancSettl and str(self.child_mt_type) in related_settlement_mt_type) or (not newCancSettl)):
                        ext_data = FSwiftWriterUtils.get_stored_data_from_ext_obj(each_obj, 'swift_data')
                        if ext_data:
                            related_ref = FSwiftMLUtils.get_field_value(ext_data, '20')
                            return related_ref
        return related_ref

    # formatter
    def _format_related_reference_21(self, val):
        return val

    # ------------------ date of original message -----------------------
    # getter
    def mt_and_date_of_original_message_11S(self):
        """ Returns a dictionary as {'MT_type' = '103', 'value_day': <date of the settlement in '%y%m%d' format>} """
        val_dict = {}
        value_day = FCashOutUtils.get_date_of_original_message(self.acm_obj, self.swift_message_type, child_mt_type=self.child_mt_type)
        original_msg_typ = self.child_mt_type
        original_msg_typ = original_msg_typ[2:5] if original_msg_typ else original_msg_typ
        val_dict['MT_type'] = original_msg_typ
        val_dict['value_day'] = value_day
        return val_dict

    # formatter
    def _format_mt_and_date_of_original_message_11S(self, val):
        mt_message_original = val.get('MT_type')
        value_day = val.get('value_day')
        value_day = FSwiftWriterUtils.format_date(value_day, '%y%m%d')
        val = str(mt_message_original) + '\n' + str(value_day)
        return val

    # getter
    def narrative_description_of_original_message_79(self):
        """
        Returns the narrative description as string
        """
        description = FCashOutUtils.get_narrative_description(self.acm_obj)
        return description

    # formatter
    def _format_narrative_description_of_original_message_79(self, val):
        lines = FSwiftWriterUtils.split_text_on_character_limit(val, 50)
        val = FSwiftWriterUtils.allocate_space_for_n_lines(35, lines)
        return val


...

  FRTGSNetworkRuleBase
"""----------------------------------------------------------------------------
MODULE:
    FRTGSNetworkRuleBase

DESCRIPTION:
    This is a READ ONLY module opened to display the logic to extract attributes
    from swift message and an acm object but the user should NOT edit it.
    User can extend/override default mapping in derived class i.e. Fpacs008_T2BaseHead001NetworkRules
    Base class for mapping attributes.
    Default logic for extracting attributes from confirmation object.

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
eNqtVM1u20YQ3iVpWSHatEjaNPVpUSAHASmtuDkURlHUlZRUhS0HlJwguhAr7spalyLZ3VUcqVIvzYO0x74Sb0XfoqfOkJITG8ot
lLhLzM7PNzPf7L/kxuPB+wO85j4sggzJUyKocN4Q4Uj6hzt0hNsnDe+fFy4hX3/Axz85bZ8ddw59Bs+TcPC035P2MtO/hLNE/siN
9P12p98Ku88G3dNepTaYKMPgz1nYOWqz097xSzbNBBiwLJepFMxmTCiTJ3zO7ESyJDtXMQrla6t5bBm3VqvRzEpTOhzrbMrMpRpb
NpXG8HPJeCrgZTyesmx0IcEG1EtnMyM1M5NslgjWOx0wKZRlygalpzM8jMEQIslU7GevpNZKSCbkmM8S8M/zXKXnTKUg0uoVgI0T
biCfQAbsSc5j02x+Gw0OMPefJBfN5qN3KlLhxbO12TjTVz7fZlWBaa9jVumj5jr/68pV+nGWjpWecquydJ1y4PvPO2Ef684ehA98
P+z0B2G3hZ3o7x93T7qDo/K7asujgB2lc+yEGqu4dGSw6Fg0E2uV232ZxnqeW0i66td+nEiumQVcAADKdKnsBEqDJnGmJXY5zSwz
szzPNNhViR0EFQfWTV8rxTNjs6la8FEiK71vUA89TfMslSlWf16qYjkZN1CPHPIEOBgX+n0TvQCzKoW30bitKADtDfwPOQrxzZl0
NjPJYJFkSGEuHUGHroBpfEOGnvDEDuw7ogazuVt8uW1+WkiTxePNzIyuUwcN2OCATSqmsbQyZhq5Fns3LggE1EJA92BZ0iWJyNKB
lS5dWB1BAAbtNdziDvqTOlpPUwR8Kj4uB2wjKnZhtFDe8ArPyGSs4WIhGqPoHVj+JnoXtv++2JZTkM+LehSpVNko+hwB1RAircFv
8dV7qxBsTGL6TmIY198k9gxvP7qii/tLckEuqN4rd8fsCbKiL0gaeMS6858pWTmULO4J509v6fxF8ewlEe7K+d1J/WpvkiYUCW/N
xWF3zFpZPm/P8gTJVXI219IAKR8i21MWyoQjE0/O+gM2kpvToCCLh53XsczLwYTZWLcowhZF3edNaFszYB2tM33Iflv1GjtlKYf1
FsTLk9gOvTCxorh15aWoQeth0huuxroV7tScF1SWBa+WOoo/2xZpD6t0u2SnRx36Ka3T25TRRfD+qm9z02vUsIMpn8ooKvwoqoYL
vj+Kol9nPFmf7EaRyOIo0rcQ1idXAK9D1UjMuxse1KlH6zulDLioUV7UqhutFG7zUNS/qxB8j9QwqObd+R+Tk/gE""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FSwiftConfirmationInUtils
"""----------------------------------------------------------------------------
MODULE:
    FSwiftConfirmationInUtils

DESCRIPTION:
    A module for common functions used across Incoming Confirmation solutions.

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
eNrtVk9z20QU10qyLSv/3KY0LRRYCoV4BuKW8m8ywODYydSlcTqx086YGTSKdp2IypJYyU3dUbiED8CJI5Me+w34GJx1Y+DCV8hw
4L2V7WjaaQeGckOefW939f7vb5/8m/LEo8L4Akb0CRCm9BRGmOqRHpFc7alMY/r3Sk9jBVYErrMSM4AXWJmZwItM7SjVmV8/AEPv
vcDH3Nxq7txaXzUpPBudA7cfNwK/74qBHbuB3/J3YteLTLO53mlst253W1vtTLZOBwEbepz2A0GdYDAIfNof+g5qRXQYcUZtRwRR
RFs+vHb9PZo3TKPAG0rZFdO8s77dQcP0yvYV09xe73S3Ww101andam22unU5XzXL11Zo3R+hZ7fvOnbmKw5ovM9p5Ag3jGvcd8Qo
jMF9Fl/N8bgtaMwfxBAm4/TAjfddX6o4geDUjagfxDQahmEgQG/FLL+/Qrv7sD/OcCzhDKMYEnlo73ochK6jENoYhIHP/ZgO7JGU
OwjEPWpHlD8IuYOBoEdqPxU3A7Us+FNXdoylE5T7EMeLPOc/EIRth+QgWYShwWggLFeBuMohiZVjJVEekUM1UY/JI+VQS7ToMszV
bC4+SrRjDeY6cB14ISEd5TGxF8E0bezb/p48eTh6hmcO+TE3gtJFMucoOysv2HMdqGsGJXxu2yIeAaii/WDoMSyCFARDwRBqiyCT
64FcgtVdTkPbZXQZgMTG+9WpOdtnY5Nr/8ik4A5370MGy7vD0cSqXNQi7nmQC0hk+OUcAC+CAcx8BkcW9Olm9/rVq/QzcPHtEARF
ldJqIT2/sdnNQ/+usMOQi94CWrTg3vCR1feCg9Q8nfeM+thGb2Eyq2eBV4vprJMzl86FmKjFeGzDVU0r+NI6yJxYwe43ogBn2zMm
QfUqk5k1LsVjRZRB5OTSM+//SjhKF/d4bGWu7ImzRYTOWQSTrhOTGKpODILDUMUM7P5XeBNop1oQOmY2D6eTK2OW7mwDM+NCBtxb
zK+mdRQYkSghMZBkik5e8Vx+NamXrFZGTCD5yuxOKvPmcyozi5VRc5Ux85WZhZoxqAcMLSE/EKHHUKEjAhXQmXoRK6AzDXgRuA68
BLwA3EgIK95TRZ+VDstJQbSZkRSWFJgXxddJmZWXlKQo12WwbqJ1NgPyP43lv5vKl8SPiQEj0ynBMKZ6s1Jv7p6KkUnNkviTzSfF
8Ge2IKUK4pdMk1VAM7NoiN/He2cm1mKSlI+I3Du7pMCqdESmXhbBSznR+vjRO/fw3RuuH6/SDbixk0u9LS8qdhh7D5svtNBxC2mn
pXqjsbXT7qbaWquR6u365jrsNZvwYemkpJ4qJ6SWEjPVPvy4npIm8mZKbp4Ua3VQqKX6zpd327hqNLo15M3mNeRoqIbSN6sZvFMt
ikXVTEu2M8Cb1rssJmFZMiwLmswUGUEor2tR8PiO7aVGhJeta+9JBKINCa5U23WdVPftAYc9xgSPolS7b3tPou4aou7Z/tYsbE5W
vlNcR3jdkP9GdMBiEdE4/ekkQ+jsdCbRSipyZkqK7ypyXMC1Kpb/R/K/RHL92Uhea4s5PO15JAtIKkjOIMHOIrD7inNIXkJyHskS
kgtILiJ5GckrSC4heRXJa9g7sy4kXse5KSh2vueA1x6DV7yBSpenbRO7nHgLyRUkbyN5ZwrTv43V+tNY/eqFY7WKqZbSkmWxwLGs
ngaXVn5A5FXOyoF4loK5BE6zMD7N/qV9TiS6sbcvYEM3KvBb/gs7TgwE""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FSwiftConfirmationOutUtils
"""----------------------------------------------------------------------------
MODULE:
    FSwiftConfirmationOutUtils

DESCRIPTION:
    A module for utility methods used for processing all types of confirmations

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FSwiftConfirmationUtils
"""----------------------------------------------------------------------------
MODULE:
    FSwiftConfirmationUtils

DESCRIPTION:
    A module for common functions used across Incoming and Outgoing Confirmation solutions.

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
eNqtVk1v20YQJZfUFy3LTuCmSVAUi6BpISC12+TQwgjaurICqLCtQJJTgBeV4a5sIhTJ7i6dSJAvjQv0Z9jH/CXdip7yF3poO7OU
bEp1ChSIBHHJ3ZnZxzfzZvWHsfQh8PsOfvInuDDDNZjJSGi6ph6JS/RouZYebddmFrPPDLfACqwIY5GVWBnGEqswB8YyW2FVGCts
ldVgdNgaW4dxhZGuUb/x+7ew4efv8ePst3cP95rbDoXPk+7LYKAacTQIxNBTQRwdqiCUjrPb7DY6rae9Vvsgs9yhw5ilIaeDWFA/
Hg7jiA7SyEcfSVPJGfV8EUtJWxEsB9ER9SJG26k6ivEhvweVcZhqx03HedbsdHEXer9z33E6zW6v02rgvt2tvdZ+q7ej77edypeb
dCcaIYxgEPhetrGKqTrmVPoiSNQWj3wxShRgycBu+SH3BFX8lQLMjNOXgToOIu3ix4LTQNIoVlSmSRIL8Nt0Kg83ae8Y5mevO7Pw
U6ngrcbe85CD0SM0whjDJI54pOjQG2m7l7F4QT1J+auE+wgEdwQmlnEzcMvAX23lKeRRUB4BjveZ8rdYtwe+mativLfg18BK3oDL
xDg3Loxz80LX86/kjgHVZ4036BFXmi8lPCCQeYrTg7cOeNTJtNDDSbeih14w5G/MadXPZfqNIUpg+ufddxTaZjKa1mCHvo7ex+gI
RhKtNFGB6wJskof92wJsufEDQH9t/mJezZ0TmH8A8wTnmXWaX7PgVe0XljibzdkX82iFCyM3DzHOixfGYtTzEtgQccYKENMEqorj
2jEPE0jfkKvjmNHx171L1gQfcAHFCfXwfDSrvpwcjj0sMpwDc1+ND7Payp6ucf4/QYNIKpEOoUafuPazOGC9elnYwJxbbsx2mDqt
SyO32FWeSqVbm6/2BIueC9dqB8ytwKJQu5Alt9SMGN7UiShitJVANk8gQCcOQ53z7FKGy3Q1kH2Oi30Bq3fmJWeQDfO2aZsb5q2/
Cbn3F7FsU6xcl3IyT/mn2HPNU1NBOl6b4iYjp2a0Psnq1joxxD1mzxJSGH9M96EFeSoWIzoIeMjow4ffAyFU8p+hn7l2o30ApHTa
e3v10nh9lyexDBQ4qVQEajQtNMJY8vGaHugO0MOQovHqUyAh8EKard/M1hsepCIMNfnjDxdMcr53FxfyTq69v9M7BD6RArei2eyN
kkuGK3w+s8yvVlBGsILlT5CpKnIHhJbNolklQOzqMrFmntjqgpaAPnP8Ee1wYCKiJ16YzpSPzV9XH4DKiugZLu56I1G4xLQETLtr
aW/lpF37TzjrC3BQcBrSPaERQcec5ShDFQ+uZFG3NDCBHcqtNV8lgRhhnbaj8HqMNxDjPJ6G+SgHcw1hkhxM7D52HqYCiBNjYl6Q
UzIhGuYp7cQpHH6M+8EQcu0N4VHB+QhnDsPDcHZqJQIMJIoVefXgkBEo6BGVoEGQNZTqk8QTHnQULrazoE+5aMzNcF331R8BO8yj
/I8o9OUb+WndaN2alyThCAQIMQBC3XLL8+3cYgZwWhRcpqFaZuh25jo371/C/go5sDVRVRDjckbtfEa/mCl3MatImXgwIQzOm1Nr
YmFTxkY807A1/myecQYHrK9pHGBXQtLyaZ8aAreqF3LZt/f4Ebw4FGcDHfd1X54W4Kznom5noroJcfs6bn8e17VD9LPguszELayV
f3s8vhQcCG3dRNEBHx8gnuq01O+z2O/3p5YnlWt5/tBdzdKzv6dTI7CK9FGnla+FquWhi0/TqmPlwFwhKj/O/jx8g8TLW8h6rWzq
LykXyivwteFb+Achqt4x""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FSwiftDataPreparation
"""----------------------------------------------------------------------------
MODULE
    FSwiftDataPreparation : Base Module for Data preparation for swift message

DESCRIPTION
    Base Module for Data preparation for swift message

ClASS
    FSwiftPreInstIncomingDataPrep
        Responsible for all functionality require for incoming msg.
    FSwiftPostInstIncomingDataPrep
        Responsible for all functionality require for incoming msg which depends upon above class.
    FSwiftPreInstOutgoingDataPrep
        Responsible for all functionality require for outgoing msg

VERSION: 3.6.3-0.5.6048
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
eNq1Wk1sHEd27r/p6RkOKYqSuNaPrV7tUtI4MkVp7cRQLMe0RBnESkOblLLeTnYbza4m2fTM9LC6RxIbQyeIvEgQIMmeFtjFIiBP
gRdBDjkEOSyCPew9OTdyCYIcBOSai4GEee9Vd0/PH2MnDgesrqqu3/e+99V7NfOv0tBfCf7fg//w15AwyZKYzJSmbMnwVJtKS7VU
WdRplkbPklWip27p9CxbZa98WGYaKx0plvGBxHRW/kxiZa/yQrWqUDZYBcoVKk9BucqmoDxF5RqUa2waytNeDcrTUJ5hp6B8ypuG
8gyUZ9lpKJ/2at7UC806BTVz7AzUnPGmqWaWnWXnPpOs00zZkOrz//JTRZLe+Br/qo/W7j95uFI14e/BxjN/K7rvRM6H3Os43In8
oG3eMd93Qs98FLBu0zO3Am5iC7NTaIKVIfY1W14YOttetXp/ZePe+uqHj1fXGjT2/2aMe83ljY3CymBVq+0wWm27Qctvb2cLpRb4
t+6FnaAd+pvpHE6zaW512y6O7zT9aN/k3l7X5+Ktnw5jtsLtxeIsAU7x/zKN+WzHd3dM5nW8NgvNLgxjOpvBU890m04YLo7uda0b
bQf/90UE6TC4iGr1d1fWN0Avd8yF9YXq1wmml2h1jbqcGMzzOm7Q2bemBzBlXRjEWCOI/K39e0F7y992h81Xzcy3CYkngdlKlsJk
S2UKU8EkNDRLeJY8XZjlCxnNddcAo8xKOquwKuXBROHNVFYShmlVhUFaU8IQrRqbAzM7k9Q+6np8/x73nCjg8SmTcl5o7mG16cqF
ZWIejFK6h0udJ6bpSbbkYypHCqQqkzakz+VGXUuq9l4YAeK97f1EtxH8rWRayOTRwyeR3wyTGXug/LmcaKHX3Ppc4jUY/ItXxlrp
Ymc/MWzbb/uRbb+KK9FpbTp84nPFzSxmrVylsAkt/adNvAtJT9qVDpSecij3lCP5QO2pPdrMC/kdfAdlW4WnBk8tKkFO78kvFCjp
PXVD4ki99XJSgWkQ2badlG277T2DjOIzjovjFUxQybyMrTU+BY9Ea3mtIFHdZmiV3GbQ9mjbIpnGBjXbztBl21dwvTPpVqtyTTbg
MyPH54e23O8xojs527aebhsAIMe3nCji/mY3EgYUwjBeqv1MgZm9mcHmrudGdVlsq5ovt7/mM9TTznra2PMGzkk6UGNzYLljGg8o
SykqK4IkkkD4cjgfwckGSoL8C+WP5AhUxpQXCn+vJ+9quyWmfiLx96CN1pNFzZYyDwrttwx305YlaLkLLfXhllCWbDA2kJERXzBD
L4o8ThIaXHR8F1dtRvsdz/RDsx1EpgsU5QBdLa4874C4crZKxbe4+CDotplp3jUXQsQygt62X+Jm47fG9zEXuPnMj3ZMJ2p6ThiZ
t02Hb6cDLYQv5a/S99ZA3wag18iWnFQew0ZWOA94ouGekvKOEyJCcKFuwDzA9ZQb2DCCCwNEhIS6kiIaZx5CBD8HyS3U3wUyP0PW
ZP1YU+bhWT3W1ez5ZdAqjE0mKxqLvrNDgCLaeT+HnxJ/8yT4UevJ+Pt2ir9I3kUEXYhUwKCWYZDwUkL+qyuNeJnGMh8XUMF8N7r5
yOl08HQiuGT4GKjM1FLXk6of+nAyOm3XQ5k3mx6pNUzKaQ+OIuUXc2JJ1VCiyYf1YELyAPdRpZ3VUj2MyF3N9lsjuR+i7OUjGbni
C9mEOfRsvnEqsBAmdIQ8Koh9mJdFiwFRq0VRMxL1IRh5T56XjmRZihRgYvm8xF+Heo0pWT0DDoZFlo6Iw/k65PUevD1SZIlaalnL
9gyUy6xU7FnX+QJazkVaGupAEB+ZS9tpeXcWwvhVWjx4hwsh6tJpQlu2jy5d6LWjRnxZHJlM9KVmYdd1wbfb6jab+4vp7ukF0YNo
XjcSo41ege/xpHR/5f0nHySq47aS2QcbyMFseeOjh9Qz0VYbD9aSc3ZRipkQR6uDVsuPktLK+vrael0lSFilPdxNUqIlDlvNN8RI
ttNmaW+b2n2EqpgjDc7AkTMDiEHrrcmzSvztAY1OGMBVh2KUaqbgP08VDGqDA/YQFQYqgZyKhzDlIE5Jc2BVmItn8fA9LPdULH1P
at/RpMjYj2XpQIO3V6LKbhWAofQ05HCmMu3PFGz3ffBTDrRPtfYr4rkkLUlR5XAKoKCkUECr1RsP4lsrz12vI7jTdbsctICeLHie
YlsFiIAyQaP8MXgthvfcBVdjK4hfu0fNMiwMQ6Fe49dR6nVSSarbBijGMpa7UfAk9LilYUoegzWbyhLFyr0IGlfy9fGrONAbmFxD
0y+Rnvki9qsKXkONWzU6z5nQRyJ748yVZvkhquUSkYAByhYfRZ4FtYNrdazIyvElddSQqW+jPo3HA04Ix0PVtlsU/kAeXJi9rtNM
34BnxALXtjn6MfwsYs/o8KDj8WifzolEF+cskRX/DUxuYnJjkGj6pIaMcSFbOYBTMUpGVZGrGhwqs/BU4akbmjFNLSc73jcmOd5V
VmL6ZzJEy1OszAzIgaMNaKklZ4R7utoG9UDw8sh/vtqO/9h8vAMcQa4gxCUpRxB6MPIbCFtEiJQGL3m404Gg7Lqzhc4G9zaDIKr3
AyuYCWnn+qa3hU5a9r4Y86Sh1WS/vSpOMfDYWX6iKtzI3dQxnE7q2svpXI4vjdl67m0nCsST2pDHXcqmf7PA7D1lKzVAMGwFTB9q
wLhVWbQY4Pi6FtdzGeGfIF3wZNwdH8LKyAk/yd/Hb+d8vkzv6XSFFiExexp223jehuCE8RtwyELMc3eBx9eLA2ZUPWDE5AMucIhx
hA1ey0SXnMloUAxh4xCZsz89MKmlixmTst8OOOhvWOJ3SUzZYa2hBeoq0O61cZIfM+0A8w4crYsjR2tf+OmhOSr62+NEvwZ2K240
PvR4yw9D9E36OljIdRDkDTv9hqkY46Xxb8dJfqLgL6USyIeyC0OlRyDHWI//zhh0IwH8QV/WM8R4ynG8dIKsx87UANf0HeGh0qPM
38LxfxOT38Lk7cyYSL808VhW+21IWrgiQ7CaaqjVKaodYTAlY7BLAwzGFGAvFc9AYrESnm/JnNgQXlBlQfVknriU84SI7DEUPlSO
sEbrM0epzxzJ6QerbfCjhVxEhD9nj9ZV7S4+bQhOJpLNnw7F9RdHV96P7otcgwsxsi38coBreuqWmgJevi/94C8PNAF8cOEhtoeg
ENyKg1KvBO/+8ECHSF95IR+Ue+Vd/cBgas94KvF2zwAPEtqFmMNaHW9mfqScl3xyViCMxHY/oXY6tPsJtdOH2/WMXtnWe+XDSk8n
7xZXWe7pYn17b+69wgxQWUV4p98Z552Sjw+MdYPq1jZ3MW/uEb9ANoEwgDjmJYrx5X8eHx8nRDrdELyU1LiEYztAbgvhYqNeHTIw
awZiJJjfdkK76YdRUt72IgwKxaUGHtaJClWJ3u0wGJkObVg9MZ9OKw0tI1uopYtVcgyooIAOUAgeKjlCM1kruxlAUGqV2/a4aCap
pYZIzf8Ctf0amYMuG8e6YshnZfAEZF2Zk+fpH+9M4stjYFQcpwF4HjJZstbGJENdhuRPcHLEoAHOB9VMdjPenuBmbEtbMt3xgaNB
ebzlQ1eDLt2tMqsCGqaScwM3ptkW4tL/cOTXyA6YjNcaWYB6brXVaXotcE4E97Y9j0FMIidnGkGUv/MYXQWMjbXnUskRymx3x+HR
Lwo+wvWxa10c7TRyOzeVrftXE46qIwltmP+S7PhnBwoFBtphSYQOEBg81bClvlvefwrBAfgT8VUYx8DggKnnJUi181Lme6QBgvqp
umeK5xIsI6rs/yLt+1okQWBR6gF7oF4KQcVAnyWxViMLKvAN2nAjvt33RhjzhQNorkK8INwR85rDGMUPdtjx3Gsm+iFLQ03NdxbC
d/PY03sOVhiaAWgPr8XxXVJ54HtN1qAw7zFWx1f60YzfFicqeZEwMo5I4QtfQob55sjCwOMEDCBJiFO3PjXMCacytyNdPL+PtRf7
temA/Z1x1Kr1DZgL59iAmmWxn5XnfhTy13Ho72RhTeo4WdMDwkk0z3F3+Jtj8DhTmBma/01+5SRj8AqRAUUzc3CczBxfgID2OgSx
J2I0HWgkiM3x+XfjfVmFUKnGZ3PHSt2m+whAZpuQqe2W9nfSsBXQdagDMlVEZgGRGoaqe/PiSYgs7/+832fXAERqQ4gc6pMhMqr0
1BepBeFbRGX8Ru5B91WP2w1v3tsJfNczkeiz6ITFr+cYLr4mbKQofuo0u16ILt3ltMlDbDIGt4mG8WAjvjoen8XeBYxeKU48CE+a
+u5COHBwERwzknKpLx1eAoXzYjScpA9CeDkIwkSFqjS2tspuU8TUFciI3VoaPMOxcDw9MDNO/A/5dYo+JyMazwIar8qExGsnIrE/
xmSy/KdRskR6/Hugx6spEBWmEPnlFAhp6bx0pBVIE6H5aYE0dXBesrbKEGmWiQDnxDOF6N8WSNMAMkTSrLBqDtGhPilEpwCiNEsO
0zm6ea/FF3OYNn0nFFekOSgXc1AW3qaUihXkZvRJ1SovY+1aO5m674Uu9wl71jTV4lUtkie/jWD7Vl4nAJwTrtln3Ea8MIFg+4sp
4PcyDSmuhLPo5mTwZhDq70Vg91y+uBOgy79XINFTQ+Lgj7HFONjOj8xJHf6xeBWI2L0K2F0U2L1xMosODtSoG2OjIrxr5E8w+RgT
a5LHtQbJX2XBGl34aLXZ2mmqn+x3XRj2u0oUGskQGikUGr164vfu8U/JwwJHNLp1h7KFWx7QCqixZW56zeCZ6YgretFq1Nmhaoe1
bPGDgKJp30zPm2LPjz/+WHimxUo3aHZbECJTXWPyVcvSV7hq6cf6IuS40af7dDYyqy2/6SEFAunfcMH78J5HkI0vZY3GRe1j4vWZ
wZ1kKDVweIoCyung1oXgqce5zzy7eH8ieHwIGb8Pyb/1v9+gKxNlVh6C57BqF4eWIo+JAd7Ohh+LyN+D5J/zGEDWDKoZwaKcYXF2
JAYAsavJayf/JiP+McHv9p38guXLQXAimAovihdHw+/GXnQI5H2ujRXUOBn9AJJ/z4IDQ6HyV5bQqyf+XiT+a1pVVv01mOkk6RTN
N7XZm30zrn454fEfTpKVDcl/5LKSqewOy6mcGfkr+DMMGeNIjB/RG/y5fgBGvo1f2BkNq/xw+Yn9XW8/foO+VDKhaELRjALT6UY7
EOP5Lh6v/R8kbYOVmXyFDHIjctrM4SzRN+gCwCp9CNLZr+t8HZf6fXKL7ntbTrcZWfTV8Qc86HYSDbN8I9tYXbbKTadrf+KNfPd0
YduLyJztYAuliZGBHQWY/a8MC5KiyPnnC93gmzjmnIDbFfriGX/xIC4j6AsWupTC732ts4M/InkYbG8DoVyliwnx9Th9M0CXaxS8
00lCJkwoJfHThOOUlRjviK863pWzKwjttJH+OAM/NWV2Y/bi7OXZt2Zn5ypzlf8GOjEn4w==""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FSwiftDataPrepInstaller
"""-------------------------------------------------------------------------------
MODULE:
    FSwiftDataPrepInstaller

DESCRIPTION:
    This module provides the implementation of Task GUI for
    running the data preparations installer.

FUNCTIONS:
    class : DataPrepInstaller

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
-------------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
eNqtV8tv28gZnyEpiaJlRbZTJ3aNlrtw0qrdOo8u0G0QFJv1YysgdgLLyW4JFARNjmzaFCkPh3EkSEUBL3rYU0499WDvrbf+AcWe
+ycUvBU95V9YdIH9viH1sOwUe1gBnCFnvtfM9/h9+i+Z+mnwfAxPvA+DRyziUU8JqEXlrFiKnFVLlbNmaZ8ST/W0L4inMe2ocKZa
Ra/gFb8gVskreTrMuldmZZ9aBiueEWuGzZxXWPmCUuIpTVI3/tNXCPnVD/sztp9tvHi6+cgw4bfVPPVbYsMRznPOOo0wFk4QMG4Y
G5vN9d3G873Gs52Mcu/Qj8125CUBMzs8euV7LDbFITP9didgbRYKR/hRaEYtc8+Jj81PXzTMVsQlL0/C0A8PJLkHukAA6zhcMsSm
P9S6ZhhbL3bWUWczU+oGThybj8xrDHy5udtE48w7u3cMY3ezubfbyFjvPW1sN/ae5GLKD9bMJ2EXTfdbvpvrFJE0Jna53xH3WOjy
bkcwLz/gPTdgDjcFey1MN/KYeeqLQz+ULG7E4cyxGUbCjJNOJ+LAt2aUH65duqKcwk1iEbX9nrMfMCD6NRKhjHYnCuHKzLbTlXSn
ET82ndhkrzvMRUNQo+lcsdsDtsz4sSpHmEnMuMlCsOMHDpa3GPY77nQiKMNEWIWBEUgAkgU/hLSahbyl5aFe8EoQyno6d8WJLp0Q
WYRnBp51FCswv0AcikIxmC1/Kw3oARkofbpB/rg7UHs/98oeCchA62vn5IKc076KmdNXzoGmry4R/PqMnKxoRKjdgJJBgZJe5TPy
B8jdQeFPhZOVbL5P7gNVX2bcTqqtO/FhWsNxPQpbPm/Lu4eViIO3HcGeuNIZVm3r8+3tSRrrRmN34xLTQpO5CfdFt8mECBgenVvz
lxcxd+olq7KFKp8lYtvxQ+vW1rQBjXC4MWXHaGPanHxjcWvKqnx9deuqHdLAxJ2gWrqWCrc4RkFdS+e2GqFgB1k6vxB+EKdLUBQg
MewsQu0Wj9o2CIYakBadTgciNS1vvnZZB1nqxVSLWdCyqnEUJLhih06bxVZ5+B1b+vCV66A0pezvhFfh7Zvld1SwtU43nT9gwr4s
cxmj66YM4ZtUozpV4KnSeXhu097qVTFXRbjqRNQWclSQUXsIwwHE7Vd0oPYhBpfIOdTxCzrQBO1rZ9RTjxX+2IN4fUVgLiCNp94i
j4lXPEAecq5cQKz2yZF6BHixRLzSY9JX85XiaAUjVd+pq2l1aLD93OHiwdT3w3Qlu51tH73DPkliP2Rx/JxHLkzf0A/eYgZyPEBK
+BxMb/Fw9VJaiDuBL1I1YCGv4faswwL7lcN9rGRxOju6E9HtMPAcO0mgirKdpL3PeFrGKm9jla8XeAX5C37osdfWTMtngffSCRLw
78KISt6sHfixsOYv3bZck57Ohhsoq4pOGfHGP8O7RyOJ9OVNWqFFugg+7ZnX+3PMeqkCYTgbQ19+OFmBsAZBFQIvEK9wYICPS1/R
A2VABT1SzsE7fXqhAGYT6Rf+Y+DtVeXNm838NGkxi3++iMf4EVL8sskCKPbmZUKs7jkiSvNNtD+uG3wFecqjJf5TFLQ4GlCkzMje
vVwuogfCBSAyAteI0wToFRNqJJfkr2v8J9LZW7tJ2JTYCDCeLjxhwcuh63/vhB5cZKrbth/6wrbrSuZhDaIjnnIVfx+GB3ifurzh
20rxW63QW77ql6G0HagGIFr63k4Ne1hC7LRi2yeJE2Q7MiilsVLFhNqxbgzl26gboUVX9FndkGuuMuF0YxJ2lmEHUpJCmv659wic
j/CiAKAAvEB6qudUQMqeUUzpvsY/AuAB5yPMhLrQPPVMAk74EQBOodvLAceEHQ13hAbchTOaUQ1BKDTGIPSGhn8FiINA8wpgw9dg
SxHmf3gl4CRn9Bbx9FtkUOoXz4v9ktRbAZoy0PwTG8bwX8BpHCvxv2GeyefKsfKG8vdzWf+bkDULsnQpS5eyVjNZQP2XCarqFJWX
SQKq/WlZ19opuSYs/l5a+kUA+S8H5d4n7/BCeegFkPM1+KF0QUB2De76Rra7SHJvfIzeeKN0a7k/7gJNLaM5U76fV06+lKk9t8MX
Rll29/+VVtnTtaIk9Hq/GeGceXroQ7s2bIbbGae5n7NiVy15s6ZUVmVZk61ipsqqQHNgD1OHz+M+4g/H+OYlpJxrhPZlSLi69LC3
OC4FdyZNXX2XqWP6R2ZdlxDMy5jzKrYzK0Bm56exh6ex89OkhQ6UPcExxzgmmzWL5GN8MNJqjKcboawsdFKHVU6wm7Cj/SOrNsYK
+ITyxmeRonoZQqzZCbIEbmz8Ca3MhIz8jqeApZRXxN9iMfhcVqysQ0Bc0WhFqcCs07uKJtdqgDQ6YM1y/m7gqOBYg/fs25iQUISv
m7BWpfwXWIfo1F/LUSNxH4Y+Ng/QV18AzMh3Rb5n7W91oEJLAU0GRjC2sRCdagY88vrqSqoC0kk1dc1aGAK37fmyt3N4d0zM61eL
Z6oj3rehy2uPqjecCM/LP5BePAVAj07XnayFm01Ltu1Frm1bquO2YWBBqkQxN1Hie8NyLA2SAjj+c7DmUctB4tv4b7DNBAMEWZaB
/DRyvA3WcpJAZN3CdSU+1R9n8PA7OuzrtHld3rauzL+nf6gX0T/fAYI8M3M=""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc
"""
ael_variables=[]
def ael_main(p):
    pass
"""


...

  FSwiftDataPrepLogger
"""----------------------------------------------------------------------------
MODULE
    FSwiftDataPrepLogger : Logger for swift data preparation

DESCRIPTION
    Provide logging mechanism for all swift data preparation modules.   

VERSION: 3.6.3-0.5.6048
"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
eNqtVc1u20YQ3uW/KMVN0zRpiiAg0PogoHWDogEKIwga2HIQNJENOz/oAgVBkSuFDkUqu6vUFqgeat+K9gF6koBe+iI99Ql47akP
0Et6SGdWdKwY7q0kOLsz3J0dfjPz8U9y5rLg+Qoe2QOREEYSmhgZZVSPBjP0aDJTjxaz9GgzW48Oc/ToMlePHvMSL7ES+5iyxj2S
OIl7TBKX+0cmaybGHmk3Xv396f94+Q+3Nx8/6PgBXFt736V9tRmpaEfw0YNiMOAiWA/qSb8QgcQFQQIrghEsiUSk0iL3/c3O3sbu
/Z1H97e72tOOKF6mCQ8y2Jrmg2DI42dRnsqh9hJl2X94CoZFMs64XAMfvv+ks7sHHteD1d1V/y8Eu1uR2FgC36+fDUzAH5gAOjUU
KekRnZqKKqM0EyMxj0zQrVq3at2udbvWnVp3at2tdbfWvVr3ar1RNuSxMvctZc7sOblGZs6cDMA+uaHcfbckpVU6JaS5bJRe6SaN
n7yp8ZTkH1tEeYe/U4K3asz8xFfNWWtOrpA5peQbkhs3SYmpbk5+DDYEjxQPTpKiEeVCg7yOqA2DPBry9aALMij6gXrGz1nT10O4
WKrnXHEhg7HkSaCKIF6csrxRcDUWOTgucq4tXeZBJTzgL3kmTICavdstVNpPY505bX/b9JAnacT8vYePdva4eMkF8x9LLjrDKM0k
8/XSQ7S0vcrC0NiFul7CDL1Vl/Ilb+EQ3VUtbTtcrGArQy5lNOBhTxTPuags+CDBmihDrs+pmnKoRqHUAUygona3d6GmOwcxH+mK
S/PF12OZZqeVrlshuJ9LBdXKxSdxlMPJUKtFzAGz/lgA0tgdt1flnfaF6uLic3beYFuZUonKHXAVKZiYUTxk9hZ+LvNQYsIqS8uV
rbvLuFWNN9HBNsDBhLiqhhJRzHtR/Jz5EOAwUiE/iNu+QAJizaUMM2+BGwIOO0P9RrIGzjVswoEtwkbh4Wb/FC/mj0Q65CFafiPi
PXj96up5vLA2Oqwun/fiMrbiGjanY1GPXly6LXqZGmAz4LZQ/uM7LepQ53XLFO/DjvgsuRon5BqA4ARIlSChMt3VxwTIFKmSAJk6
0C+uaMCyyYfBRhZJiXUNiU2CrdOkxPSMc3zu4QErIEqyD9TxM7RlQsAd7bZp5UECQ6SptlFZkmf9ykaMpYZmIfCLKy8M0zxVYXgL
vWmOopNrZ4ti7WTVW4FgEpongfyKgdBN8u0vyGQzOidTszRn+jdSGnNzapWWsCat0pqZ8M4GRvkCGMU67FEydSiZXFfAaKVROn3j
CjmiP9CnwCmJNXW+d3J/Md4kwDA28hWccxOYzi1dzXgesBZq9qxRunNgUWAne04TB9itOSdHJiUvsheAOqI9+SzYRXyRcpYwDvqi
GGpj50DxXGKTdZJUFdCYS8uYu7Xd2+exmtx6nEe9jGO+AOwgLnLYppDMTpcHq3LttGfhjyC7r+hHAnFut0RL09E9rjZ5PxpnagNd
HCjWAtObIJj9JMrG0G13oR/T3ljxjhCFEO/gZutrfigF/koqVy5alhl3VWXLUZbiAFtGbU9cxYR/gDucRcexJhwUxicHLrqw0B9W
eYoPRxkQa2VzPKqiz8+UjbgC4ktM+w1dkR50h0Ot15aB/dGiK9AnzuvrRgvs51TTSW122w4WIBZmGFZ+GC5+ozBvheGLcZTVb9ww
TIo4DMW1k7OX4jkNCrvocwwKecKjluGZ2tY2NPFrAaiv4hyhFxcRNzOSqrLiAojBKGTlIGT5QFzCBdhdusMrZ4GN9nfe4ZV3exH8
HewQiSargbAs3aZ/41+gLZEZ""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FSwiftGeneralUtils
"""----------------------------------------------------------------------------
MODULE:
    FSwiftGeneralUtils

DESCRIPTION:
    A module for common util functions used across code

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import re
import FSwiftMLUtils
import FSwiftWriterUtils, time, FSwiftWriterLogger
notifier = FSwiftWriterLogger.FSwiftWriterLogger('SwiftWriter', 'FSwiftWriterNotifyConfig')

def get_amount_from_currency_amount(currency_amount):
    """
        1. takes the currency amount as input
        2. parse the input using regex
        3. check if N is present at the start of input,
                a. if present, replaces comma(,) with dot(.) in the amount field and returns the negative of amount
                b. if not present, replaces comma(,) with dot(.) in the amount field and returns the amount
    """
    parsed_data = re.findall(r'([N])?[A-Za-z][A-Za-z][A-Za-z](.+)', currency_amount)[0]
    if parsed_data[0] == 'N':
        return '-' + parsed_data[1].replace(',', '.')
    elif parsed_data[0] == '':
        return parsed_data[1].replace(',', '.')

def get_version_for_sent_message_on(acm_obj, msg_type):
    '''
    This function will return the value for tag 20
    :param acm_obj:
    :param msg_type:
    :return:
    '''
    try:
        ext_obj = FSwiftMLUtils.FSwiftExternalObject.get_external_object(acm_obj = acm_obj, msg_typ = msg_type,integration_type = 'Outgoing')
        swift_message = FSwiftMLUtils.FSwiftExternalObject.get_stored_data(ext_obj, 'swift_data')
        reg_exp = re.compile("20:FA[C|S]-[0-9]*-[0-9]*")
        senders_reference_field = reg_exp.findall(swift_message)[0]
        return senders_reference_field.split('-')[-1]
    except AttributeError as e:
        return 0

def represent_negative_currency_amount(curr, amount):
    """
        1. takes the currency amount as input
        2. replaces hyphen(-) with N when if amount is non zero
        3. removes hyphen(-) if amount is 0
        4. replaces dot(.) with comma(,) in the amount field
        Error code T14
    """
    amount = str(amount)
    if abs(float(amount)) > 0 and amount.startswith('-'):
        return 'N' + curr + FSwiftMLUtils.float_to_swiftmt(amount.replace('-', ''))
    else:
        return curr + FSwiftMLUtils.float_to_swiftmt(amount.replace('-', ''))

def get_tag20_value_from_swift_message(acm_obj, msg_type):
    '''
    This function will return the value for tag 20
    :param acm_obj:
    :param msg_type:
    :return:
    '''
    try:
        senders_reference_field = None
        ext_obj = FSwiftMLUtils.FSwiftExternalObject.get_external_object(acm_obj = acm_obj, msg_typ = msg_type,integration_type = 'Outgoing')
        swift_message = FSwiftMLUtils.FSwiftExternalObject.get_stored_data(ext_obj, 'swift_data')
        senders_reference_field = FSwiftMLUtils.get_field_value(swift_message, '20')

    except Exception as e:
        pass
    return senders_reference_field


def trigger_event_on_settlement_state_bpr(context, event):
    """This function will trigger the given event on the settlement state BPR """
    notifier.INFO("Triggering event on settlement state BPR")
    max_retries = FSwiftWriterUtils.get_max_commit_retries()
    counter = 1
    settlement_incoming_bpr = context.CurrentStep().BusinessProcess()
    acm_obj = FSwiftMLUtils.get_acm_object_from_bpr(settlement_incoming_bpr)
    settlement_state_statechart_name = FSwiftMLUtils.SETTLEMENT_STATE_STATE_CHART_NAME
    settlement_state_bpr = None
    if settlement_state_statechart_name:
        settlement_state_bpr = FSwiftMLUtils.get_bpr_from_subject_statechart(acm_obj, settlement_state_statechart_name)
    if not settlement_state_bpr:
        settlement_state_statechart_name = FSwiftMLUtils.CBPRPlus_SETTLEMENT_STATE_STATE_CHART_NAME
        if settlement_state_statechart_name:
            settlement_state_bpr = FSwiftMLUtils.get_bpr_from_subject_statechart(acm_obj, settlement_state_statechart_name)
    if not settlement_state_bpr:
        settlement_state_statechart_name = FSwiftMLUtils.SAMOS_SETTLEMENT_STATE_STATE_CHART_NAME
        if settlement_state_statechart_name:
            settlement_state_bpr = FSwiftMLUtils.get_bpr_from_subject_statechart(acm_obj,
                                                                                 settlement_state_statechart_name)
    if settlement_state_bpr:
        if settlement_state_bpr.CanHandleEvent(event):
            notifier.INFO('Settlement State BPR %d  : Triggering event %s on State %s. %s --(%s)--> %s' % (
                settlement_state_bpr.Oid(), event, settlement_state_bpr.CurrentStep().State().Name(), \
                settlement_state_bpr.CurrentStep().State().Name(), event,
                settlement_state_bpr.CurrentStep().TargetState(str(event)).Name()))

            while counter <= max_retries:
                try:
                    FSwiftMLUtils.trigger_event(settlement_state_bpr, event)
                except Exception as e:
                    # raise e
                    if 'Update collision' in str(e):
                        counter = counter + 1
                        notifier.ERROR("Retrying after 8 seconds due to update collision")
                        time.sleep(8)
                        continue
                    notifier.ERROR('Exception in on_entry_state_acknowledged : %s' % str(e))
                break

...

  FSwiftLAU
"""----------------------------------------------------------------------------
MODULE:
    FSwiftLAU

DESCRIPTION:
    Derived class which extends the functionality of encrypt/decrypt LAU key against Party Object

FUNCTIONS:
    set_encrypted_lau_key_to_party(party_object,lau_key):
        encrypt and set the LAU key in 'LAU_Key' attribute of AdditionalInfo of Party object
    get_decrypted_lau_key_from_party(party_object):
        Return the decrypted version of LAU_Key from Party object
        Return '' if there is mismatch between encrpyt and decrpyt algo.

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/ LIMITATIONS:
    1. Any modifications to the script/ encrypted module/ clear text code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import FSwiftLAUBase
class FSwiftLAU(FSwiftLAUBase.FSwiftLAUBase):
    '''
    Override the following functions to provide your own mechanisim to set LAU_KEY optionally.
    '''

    def set_encrypted_lau_key_to_party(self, party_obj, lau_key):
        ''' set LAU Key'''
        super(FSwiftLAU, self).set_encrypted_lau_key_to_party(party_obj, lau_key)

    def get_decrypted_lau_key_from_party(self, party_obj):
        ''' get LAU Key'''
        return super(FSwiftLAU, self).get_decrypted_lau_key_from_party(party_obj)
    
    ''' 
    def set_encrypted_lau_key_to_party(self, party_obj, customized_lau_key):
        
        if len(customized_lau_key) <63:
            party_obj.AdditionalInfo().LAU_Key = customized_lau_key
            party_obj.Commit()

    def get_decrypted_lau_key_from_party(self, party_obj):
        return  party_obj.AdditionalInfo().LAU_Key()
    '''



...

  FSwiftLAUBase
"""----------------------------------------------------------------------------
MODULE:
    FSwiftLAUBase

DESCRIPTION:
    ENCRYPTED EXTENSION MODULE
    Module implemented the functionality of encrypt/decrypt LAU key against Party Object

FUNCTIONS:
    set_encrypted_lau_key_to_party(party_object,lau_key):
        encrypt and set the LAU key in 'LAU_Key' attribute of AdditionalInfo of Party object
    get_decrypted_lau_key_from_party(party_object):
        Return the decrypted version of LAU_Key from Party object
        Return '' if there is mismatch between encrpyt and decrpyt algo.

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/ LIMITATIONS:
    1. Any modifications to the script/ encrypted module/ clear text code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
eNqtVk1z00YY1kqybIsQUiYNH512tp1Jg2fA0MIwDO3QBuN0XMDJJA4UXzSydh2L2JK7WifYlTkQ+id6im/tT+ip/0O3Tk/8BS7t
+65sY6cMXFAmq/Xuu+/386z+0U48Jvx/D//RJRiYVtcYYXqb1Il663X9B40ZzHypMZMbR0bdZPqOVsj8/ZehaVc+4GM/3Ly3+6B8
26bwbOwc+k35YH33rhtx275X3iltV7Zqlc1qul+ulrafbNXK92j5p1q5ugMbND2vth+GrNfm1O9027zDA8kZlS1Om73Ak34YuG1f
9mnYpDzwRL8rrzKu3hQM0n3ep+6e6weRpFuuAMHNxlPuSdve2K2W0IWd1IeIS2esgDOn7fYcOOrI0OniqUtqdEJ19vJ4t5CexGd8
kroBQ03Kv4l5P6BrMHfu8/4adaUUfqMnOTq8zpifRlAJmiGupC6mZpTyPXBrHM+MW00Rdt7i2IxD21z2RKD8mB6nB1xEYA4NjR2i
qOn/Vmc0rK1Rv4l6BFQgoh0/6rjSa9EGl4ecByrybj+NHC2peXsvLNr2o/I2lvI2Xd1ete3t8k5tu5Km/Cp9UHlYqa3P5P+rIl0P
+rQTMr/pey6mJaIyVBFEnvChrnRaHxSDlrhKvTZ3BZX8maReyDg99GXLT8P2wtTjIJQ06nW7oYCDRWXr6yKttTCYcWOlQl4vkmHH
H7iNNk/lrqMcaup0wwAaj3bcvhI9DMU+dSPKn3UhZeAP2oUUnPSfwbE0iDfWXEl7ERcQDHjzISH3CvFf9U4ygj7LCFwDJtDqOiN1
g+nMeKkBA5gsA+8Ms1gW3hbLASPkk9NzqB20VEZwCkl3o4getnxogw8LSjThkRnnyTiAEgZgI6WRWHOA2MBFvRplYOWXsOYNCyQx
FSThHfF28w9NWLD3emkuiGK3n+Qcxw986TifokpdGRmszItNRDxjxhW0ZU9c+R2GmAgak2NNkqf6iECzGoxIMyZHZEU7Ii9IrA+N
wZ3YEHdl5tiKjeMsZnwEsrH2NHdOGxoyHxtHhJn7pngkbZZRpwzQeWqkOQuPteCWqcnTfUk0/HuiBdfgt93/jWhDk2iDpdh8QR7D
OrOG5nMzOJu+r2nXwLfjxRGcYRYkKjv4M+1A6e7ziPaCKSGM+USBtzshAdqDbh+XdyIQcM4UHBvQwFHkhZ7vgoIpWeCDSlS1U/rb
8w+AHkABnVhwGaO+RC3ulPiAHVPme2MfGqE4VTz4cQsgDk3XFeGBDwif8h0ekv0upxuqhYq0rMA4/qm2inQj7IFhJbYavc7s1jau
3EqsCDjYk6++gyIOSuUpqaCfbR7sAZQVXIE/ZMsN6M3rxZIbAO5TZvdVImY5s1o4U89Vovt+wDabieF6nbqVupHka2C7LEQoEhPd
SKwGRHPzRnI2kpATVzCncfMGpA3YK7HSt8BLPDHAlSRffubxLqYqWZy/LZLsmMJhY3KnKDt1qxR2Or4sZAS2bJKfZqyeHZczyfPJ
VZIYXAiFlXTI4pHP3n0ZUkQAVZhYIiax/rUMU9dhdl5fIDljkSzAfJFc1AeX53H1brWefuI7JjdB23MF/KEOHQ94G2nHZAToAXyc
BTzo/S+n+LgLnW+IW4A1I8VaoMfG0IC1FmDOjI0DDWbw/QMSGVwZkV/1C4hE6zgbGyOwIXOxLvNHuhjE+rE9AqKJ1RfS4IvJjThz
n7rtHh/fphRLoYk8JhFpolo4JZbxx8c4rODwEQ6qtmYTWkWcwelcH4Bq7APbj5Ab3cDjSabRlzxKrHSrYKqiinMw1PPTHIrz0wK+
qeJ7vx2+wdwuqzvCJDpZgrpZ+jJUbpnYZFCcr937lFULWeTWwO1wx0lsx0mvO5gvOM7PPbc93sk6Dgs9xxFYXXERh8/nnZ9GIJB+
L6CTKJsjppEzcp+oVWjuVZTAFIoFjNZKoah236YsyX2benQH75QI182VHMmR/wB+QC1P""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FSwiftML
"""----------------------------------------------------------------------------
MODULE:
    FSwiftML

DESCRIPTION:
    Module provides way to converts a swift message to xml and vice-versa. It
    also provides ways to convert the swift message to the Python binding module
    and vice-versa.

FUNCTIONS:
    The following API's generate XML, Swift and Python binding module
    swift_to_xml(swiftMsg):
        Returns an XML from the input swift message using the xsd.

    xml_to_swift(xmlMsg):
        Returns a swift message from the input XML message.

    xml_to_pyobject(xmlMsg):
        Returns a Python class object from the input XML message.

    pyobject_to_xml(pyObject):
        Returns an XML message from the input Python class object.

    swift_to_pyobject(swiftMsg):
        Returns a Python class object from the input swift message.

    pyobject_to_swift(pyObject):
        Returns a swift message from the input Python object.

    swift_to_csv(swiftMsg):
        Returns a CSV string from the input swift message.

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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
05/EBePcCNCJuE1eUC3NAsr4f9nuIVA=""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FSwiftMLUtils
"""----------------------------------------------------------------------------
MODULE:
    FSwiftMLUtils

DESCRIPTION:
    Utility functions used by the FSwiftReader module which can also be used in
    the extension points

FUNCTIONS:
    get_business_process(acm_object):
        Returns the FBusinessProcess object for a given acm object
    get_business_process_state(acm_object):
        Returns the current business process state for a given acm_object
    get_state_chart_name(acm_object):
        Returns the state chart name for a given acm_object
    set_additional_info(add_info_spec, acm_object, value):
        Set the additional info add_info_spec on acm_object with given value
    unlink_references(bpr):
        Unlink the external object's subject and business process state
        additional info if any on it.
    trigger_event(bpr, event_name, notes=None, param=None):
        trigger event event_name on business process and add notes and parameters
        if any to business process diary
    get_or_create_business_process(subject, state_chart_name, msg_type = None):
        Get the, or create a business process for the given subject and
        state chart. Subject subtype can be set using msg_type parameter
        e.g. MT545
    create_their_object_from_bpr(business_process):
        Returns created FMTnnn object from business process
    get_swift_data_from_bpr(bpr):
        Get the swift data stored in the external object of the business process
    get_outgoing_mt_type_for_acm_object(acm_object):
        Get the incoming swift message type for an acm object, e.g. MT300 for an
        FConfirmation

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/ LIMITATIONS:
    1. Any modifications to the script/ encrypted module/ clear text code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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
z3wP7j/B/j7wA7hJ6hLlf4R0To3SEq1/zL9obBB1f8q/SKoQTf+Vf7n1HefJ9ujXsO3Vr2abxiRR+Occi0Yh0fWX/IvGBFHzV/yr
VbiSjl29Xofj+99sdjj2/F/8a4vEQlOT4ZvafPgbS57NzBYjk1PFTLbQ1hYKJ4OJiXhqIhaV4eSfKS75Zku5mWImnyv4SgVd+E4s
+Yrzukqd0NNCN3wLeVHK6r6z85mZed9MOudLZwt53wldpsjkOD9KpZ8r6rkCMvMt5jO5Ioodm4oGqcykLHROL06fKBUyOb1QmF40
8jOwd6VnFqbzJ07qM8VBGYv+EnqxZKBSXJmAShKXKXwytm82b/jSvrnMGR1VmllQ3pctaLpQTBf1xy5upmQYeq7oM9P7VHofp68v
dbquVI40PTOfNorTufTC4yhPZsspfJTiSiUUUEJaiAz1WDo7ncnN5nfhNzumC4v6zG5bit2+M+lsSbcVm9SLXGQ1Cx+l9NVk4cvb
i/WdzRTnVWU4O86slMtmcqemDX1WB61AnV0nFg1bQVMcbjGFQSXJ/K4FHUsy53ROXIbIVj71Fc3MItUS1TBTHJJ8Z2Tm5nRjWkcF
i1SL3T52MvF3+3L5ol64JZrPwb2YNtIL7LbVVKWXiWxJqYxVlaMao0oyV/7FeepoYcHKUdWxmF+dXmTSxpLFKnljesbQiV1WjQlF
ot2+enba7VsozE0XlxZ13y2+uqaMy97d7QP/yIzBRqvqQNxF/SK71NYXVj42hhzyJVUERORSafxj6IMRfZTzXLU+FimsjPShuSFf
JLV/3372Uo1F4RlDcdf0rJFfmEav7aonQYPBItML31gklcvlLCmAHFa1sjocSY5Ni3QxbSuqhlUV1Xwc00cxQYC8wZKtEQP78rPs
fdki86XiHMTf3PRCkQkzDYpPVwdUY4Fg1iKTm8kvEFlldRaQcXpO9zGBWS7YRd1uk8I3DA+rUCvDsWA+N5sxFtI0fNrajoQTSZL9
vh2JHW1tiXAylZiQknmvb3IiMpHy28T0yJDPDw6G3M/MZmbScnoAPzOZZozMYnGvD6PeWFqk7pDTw17fTFZPg7VALt9MXugsOBQJ
Z0BPX6ZA4waMtLiYN5BQjt/RIV9qHkFqklGRZkrog4VMOX0iq8t4N1A8ymlhEVyPobqQXuKoZ/PGKV+6gG6C7KL6sMBKr6q/QDLZ
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""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FSwiftMTCalculator
"""-------------------------------------------------------------------------------
MODULE:
      FSwiftMTCalculator

DESCRIPTION:
      This modules uses FSwiftMessageTypeCalculator to
      decide the swift message which needs to be created against
      an object.
      If there is no message type returned by FSwiftMessageTypeCalculator (i.e. no message
       type is supported against that type of object ) then FSwiftMTCalculator will
       try to find if there is a message type assigned for object in this module.
       The message type returned from FSwiftMTCalculator can be overridden in module
       FSwiftMTCalculatorHook.

FUNCTIONS:
    class : SwiftMessageTypeDict
    function:
             _CalculateSettlementMessageType():
                Calculates mesage type for settlements
            _CalculateConfirmationMessageType():
                Calculates mesage type for confirmations
            settlementMessageDict:
                Dictionary containing the mapping for calculating MT type
            confirmationMessageDict:
                Dictionary containing the mapping for calculating MT type

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
-------------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
eNqtWk1sG0l27upuks0mRcmyRrY09pieGSdmMMvxeBJnrTjOyPqxNWtJjiT/TM942zSrSbVENqnqpj0imosBNECCHILBngzkEGqx
WGz2uKc97DnIYQPsuREE+dnL5BTkkIMvyXuvm2STou0gGBqq6q5X9ervve99Ve1/l0Z+Ovx9An+uwSSJS4bEGZdrzGCUy4YMuVJT
6qqhMqmdpdKEkXgoOe+rkpU8vMckI4WSh9JnEpeN1OcpRw/zK9KVUJtmaJSnjbSV7qa5yhPHsqG3H1nantbNHEtG1sry5L4kfgr1
UrWJes7I1SeNyfqUMcVQh1Y7VZ82ppnk5K1E9zS0yEE+A/kk5G9BPgX5LOTT/ZH9x/9hZGeMM7clnub61xLXrbNHijHHMzz7tWTM
8wmeg/xtPsmnID/HT/FpyM/z03wG8nf4W3wW8gv8DD8LeZ7P8XnIL/I8P8fPf82Md/k7/AKUvMflbalw8V9/k5Ck7323P319c/n+
3ZUFPU+/1e3ndsVb31kq1cqtWslrCF1fXtle2lq7t7O2udGrtrNru/l6g7dqlptvuZBEDS3XLVWtncOmNdCQ9xpRM26VbW7lvV0r
72L1fD2sn3++a5d3845lcRdq559a+bKwSp7F86VqyXZcL1JQcvKNp3tW2StGBWsV1CasPIzHafT1eTCAvLC8lnBAx9PD1w7vsl20
irHWkepQCeh1W81mQ8QGA12WvFDcqEQDyhdwIM6YBcw/t2u1vk5xiBOs2A7P27Gxl4aHXnJdu4pDr0D7qAPbger9Ze8tAGyF9Ypp
V0SjPm48ZVhFWOHGM0sIm3MYNKgOtfaUnmx1p9HYL+r66v2NJTSE7dASyjUYaX4hP7q6y3Y53LJKyyl7dsPpGU70M3uKrW3L82pW
3XLizS8XRurDr9/Cxen2Z4sL5PZ1uPr4XpYaTsUW9RIO5f/fTzmmZbgnd3QWuAAndWMptC2BEYAuD4zJdqrkDvVSs4nP1E00Anxf
36HuhzSVT07mu+5Of7CytY3+nr+0dUnXt1a2d7bWwo3/8O7a+trOYmQE6Y+K+UXnEM3HrtjlcGnQwsnHy8Jueh9aTlkcNtF/QiP7
sFyzSoAK1pcejAvw4LkNhu1Qk3Kj58vewO+KevpqMY45vRrllus16na79BQdIv1xkbyh3Kg3Gw7sBUzzkOo9b4h98Km89WUTPAkG
gj0CmIyOm0OzcPCDrsDTAeBE3nJgHN8x+H6L4XOjwIIMtyqlVs3jsGNGhrzpobA9SxhnV2NvGw3PrhySMVer//gb+P3l335SUILs
llWjKaBRB7MDn1q2aja4+SGV5wbl+A7dptYcFx/LoyFd7oX0c5BYEoRyicK4DMFI4QpXIYcQDEEpGcyNOv/Ks1KtBQ4kykpMpRKp
XUK1U5D4zJdMyZchBfWgim0U5CAjYNHNEPKCVGSnMEXVtWoVQ0fpJgkF0o6/k0QWspdvnQSsYvMw0EwTbN4zzVvYqYrDYEnWfveV
Iy72GpRZbOgZ+Ev2hv47kFSlDgx+T+qyY2lZ+oY9/uoLuSN3FF+ht2ZH9eVOwlf78g2QJzspP9WVj6VOylOgteonj+QjqaP5Kc7m
pE7a17jcksQuh7YMWh185SV87YhBjTRXnkmiC+2TfvqYcRXqp6A0sS+LX0H75JzEU1DjV1zrpJ2zIEnj25BEhx7SPAMt/slLoV5I
U0dsX3WDQY8HRaiT3Ze/YUIdqgVS90cj9RJU730fZkBPo3KdSu/4mqehjmdsTB2N6tT6daQTdVC7IopDZQlxzmfdtJ84Zkw6OHeQ
81H3v3i6z45gdfZVePutlwnfj9iy9PhcB559HVZjgnr8Jc/h+w3U+EvQlT2WGJgkrte2RHRrsn23j6iEPb1Ylrcic3FDLPWGIXoh
DMALrifAdPvFQiZfV16yGy/ZzZfs4rdoYuIUJN/+D/wK8kv2+CUrGMmNzR1zbQPfP3/JLgfy2oZAfxGTkBjJq1euLm0+CJSPrnxc
mCAnCBKADXU3SGCPzSBVtbyS5wmRRpkChSBp1mwvSFRqjZIXqDj+IAmuBZgWKDXLCRKi5FQtcDLA20JGoMEbqbpn1mzXowecoZEm
36QyFR+NiUhiVhothxtp7NZ+2vKsIIFLZBmT/RKTCgKt0bQEumegNBsuOW+YTOBgtZ4jrqKnVdD3EiqbYTpT5WmmsRzTZI2pLClj
ngNJEkqzINXYFJRrUHM6yvUozw3l2FqTVZaTk3IO2uSgtfZaROg9bRQSiCdOqW6ZZqCbZhgf4DlrmgetUi2UiBzO5nJ/XsMzFFoP
WBGMYBIqlZTlGNokI8QhtHmBQCl1JcSRx3/VkT3AHR+Q+EhBtBGaJwOWKEey+Lqd91j4jDYPCKSKZV9+CJjLwKIfSgc/ViVPPfyK
SehH7Xe9RDfJZV8B/04csYo8K6Ev0UGHdRI/Shz8OMzxoHOgUW3QHtY6gMMYeIja3tNPeoftPGvsR75BkXMXqGNfTA0WmiVRqodE
proQL3raWHGAI0dlkSfRy0Z7ZuXLstWM+shfQt55yW0vrFveboPnb1xyb1Kwh1BqI/3tk9r8jfF09mZBC06Ds5jUdbizaNwCg16Q
2i25aL3B7PjWQbo/nEBzMDDbEK4TK1tbm1viPGgoJI1kOEMjFU3L0AddGWkgXjUT1yVIwUTRQQJmjbrEXLicJq6kiStp9lbyL9A+
ZtFiUln0AbBxmaw8B/+KsvgYDYuNGFaiZ1h3IKHzK4Yytsc6si9jcAIz+wCClQIGJHVhw4+ZmO09gSwHYS3RBeMiM7h6MEtQqbQr
Ywyh1eR9kCwPjh/IcUICFvEqQAjLLcatINy3MUYQgWhCFBGh3o6OMJY5UG9GlEHME/rB9gbJcCCwH+n1nfVITAom+gqIeGnlkuC2
U6oZOqFVWKrjCA/peXRzJkPN1D1W+Btc2SyttQbQNEWwI66NbgRifrq3EV/gpQnrwFZwBTYDPLwLlOiYgX/DsgNbwI1QIU8AG1D9
hK90k8fSkQIx7BFIUseS2MLrkCowDJ7kKchTzhTXeJpKdJ7BEk/raqBD89J+EuKsDFv5b7DN6Y7e/lk752tdHXlFJ/NQcs4CTmQO
f8ok/PcZIof3meTIVwB3ullfh1pZP9udAG0T/gTome7k/Mxerjvp57hyLINZ/Nqb8rO+dCR3Jv1JrrSY+E9/ssMeShS/HzlXvFPY
4ghMyJv2FXqW8UqmM+VPYX2YW96fGrSAUc3gqL5hh9d646IRMZ4FbuN5Mz7SSQWvcSCdhfVRO+zA8xGlJtrWGOMsD4553ugJetyZ
Mo5PtjcOoAJ2JTTP4PzqtlVuAWM/HDDuAXgEM6tLjToePLzDWOl7r20Ucv5gflzTSDa3ulRyd8f2eIZES7fubd2rtdyBAE4XKNhs
nejJOP+KJqG4IIs5dCAF2EjhTDARQeTd+55dc0PfOj8YCQmHL12M+cXyQcsWllgsl4E8eBuWh6e0DUTGd5awxBKw5N7hSXlw9k7p
mfWgVLP5sNA1kot1fDf0Nbe3msGp1TVQVhV0QKIBBkobeNKcXcfjZS+O422JGXK2ILNGohUhYPH0e7jzFozHFR+g18/0UcQczBH5
TJMwl/ydwjrRgGDOvFNyeM1a5HtwXLV4rE1qZ3Hr9srO1UBZubVYOBVoPfMKcmBZMToibhI9IpyBs1EwWYpWL5p5cLocW7Je4TsD
I4YYV94HZTGkdI1Lr5ebYfQK0i1cNOpXa+5XqUow2Xvq1UqG62jMlsFu4oAcyad7WOuYEWt0AxWzQKPYhuEvU49NeQRrL7zhzugX
vagmpZDi6UAJNSKNQP4UjYjjNARImShfVtapZIrqQeiE9ymijFmihho7K4tHo7g9Gcftl9Iwblclrv4EUBvyBOQq4Dgj1AaO5auE
uH8fngLbvwDETUBITQKWahHiqoc/jCFusY+4CT8FteDkhqgPZxidEDfja3upruZnIsR9BrieJsQFbCbE/bmfDfHz4L+da3AOgvqE
txnAcIwuEx6gN5XK3RxoziF6Q7t/9nO9djgOGtl/9UZ2UAQuWCRUTY4N+a9D1UZlzAXam2FV/DGaQBj3VXEdTeHt1dVH6+vxO70Y
1s2vrm0tj5eJ7yMtU8WfID5dfI2SCAPzr1YV1hALqHCSvFMgrReLmOBtg0AjEcuYEGjMDkAjrlHgSScGGwSdF+I1xoDnAFyg70/x
+QeYEEYMrfFYr//9N9WIPFbcQ6V/jskWJts4tFmUnfRusYM17mPyAJO7mDw8ef4JLr7xTvZ36FzfJw5FBzZZU8hz5chzwVfjngue
ztB3yYvBrzUmHqPfqiPEV+n57V26eiJWBacqT9pj+7K4A28R+SWCG0oUkMz7sjvvK/DHONa8xeWOejDPFUx9lU5Bvx7jCbuE+aEb
xLgEvDdcK18S8BfFg+hmkz4C7Fo1QL6+luJrfCRiyoOFGyqPAstQGcSYcf4VBvKPrl+HaH79OrgHLp2hLS5/en97Z2XZ0JZ27RoX
lmPotzc3l80Hi3fvrxSSoeHRHiPqijVsNYkHmdiYjJxVKsc4yehx+DayYRZdCEpplbZ4FjYzCSBM0qE7RDV+h/gHIQADTeYybMzv
wbFY2ZfEu7BR9M7VjuKomPoKbFOi/WIcYO1a5X2XGB/u1DMkFflSyCryThhH42s4EncXho+zJ0LwkLxE3GTMFqwaie2Ha6s71d48
d2iJYCvWcZE26N4nbG1M0BB7hGd0Pf8Mkku4nngLIWnhjQeupspINnTRIEcrutQ7tXhSF68X2DGe6Vj7r8cDfO3EiU40gCE4hPAo
2aVPRbGJV8Ib23GGG10fIfcCVjDQOWaVgHMSOp7rBxmTPiKacVUFOUhF3RkX3tDHKDbNV61hZWEbnM41XFNau5QwR2lBIn49fCui
Be0PgBhISAwgiDMI02CpRAUwSMP5mUsQbIu+isHWyQ4fahBUNgZxz3gvpNdL9LUjgsoTjFwJo9ByL57AIRk91MiFH0l6pItqGadO
ILiRocsFYbmt2olz7tlIx2iwsD7BdZmhe3UVqFV470YWB//EEyhfHTK5RByJ98jkYEHo8oHQ9QngMPPkPbx2KPoSLJnqK+FtVkd2
rkbSBEjvkjQZk85EUuBL4gmXw1JPw/uyo/CS4stxt1WhNdMZP99s2OD2SFQGn7/fYMcEIKZdMftfq17FYQzlj679YSFNq2Joa+4P
bIdvVgKlVK4bmdUYRj6iq4nVIZqAMc2YgjIBncDCL9LoyRZho3+I0umTQxnrArW4C3z6qkCd7sfpdRZ9B5JSGHizdI+aHOSALaos
nqJXxD8hpeJk+bfRbVNV7khAkJWfIHEOLy1kjwIxEmcMyhCCr3YSbQi5gEWw0Z2kr3ZlP4kmgdeTB5eJkj7qU9LLQEkv++yV7RJR
uyfU7pt+uyfQ7okvv7G/F9TuH/rtXkC7FxT4k+0HYwwq3PcTGNn74grGBRAasuPw/0+MMRdkuSFZVcLnzzAxMLmByZ/S9WLIOIls
XsRkpU87P0d5Smzi8xeEIHQoe/1xL+R7H/VJ3/YYqziDEHnyss2too1cIQ8nygb/8E5eJmqWpaPW+GeBNlNgq4X3g5Rp8kbZNMEj
4Bhewu4y5UatZtG6ugJxwzgdQuEmfUXA4sV7a+JDHN/VHgc3puOfTO82qlU4d14hdoKjB3cz4STqQmMjE3+ZivngitOqu0SEBEKW
SIbuN+g2rJCiId22vPj3VxQZ56Fw/GdYEr81JO4X56A4+iSL7xTvgmT4MTQk/YOTAqIEwQLRJIruBAeEL+SOtLbjvkIE2o3Q9m6y
XshS39foS4qMB2BiYPAmy4TmM3AkDnkEyYCQT93WZrRJbUH7HuSnNF2b0Of/F16ac8g=""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FSwiftMTCalculatorBase
"""-------------------------------------------------------------------------------
MODULE:
      FSwiftMTCalculatorBase

DESCRIPTION:
      This modules provides the base classes for
      decide the swift message which needs to be created against
      an object.
      User can override the attributes of these classes in the derived classes of FSwiftMTCalculatorHook.

FUNCTIONS:
    class : SettlementSwiftTypeCalculatorBase
    class : ConfirmationSwiftTypeCalculatorBase

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
-------------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FSwiftMTCalculatorHook
"""-------------------------------------------------------------------------------
MODULE:
      FSwiftMTCalculatorHook

DESCRIPTION:
      This module is used to override the message type returned by FSwiftMTCalculator

FUNCTIONS:
    calculate_swift_message_type():
       Override this function to return customized mt type

VERSION: 3.6.3-0.5.6048

-------------------------------------------------------------------------------"""
import FSwiftMTCalculatorBase
class ConfirmationSwiftTypeCalculator(FSwiftMTCalculatorBase.ConfirmationSwiftTypeCalculatorBase):
    """ This class implements the attributes used in the message type calculator
        Override the following functions to provide your implementation optionally.
    """
    def __init__(self, acm_object):
        self._acm_object = acm_object
        super(ConfirmationSwiftTypeCalculator, self).__init__(acm_object)

    '''
    def Entitytype(self):
        return customized value

    def InstType(self):
        return customized value

    def UnderInst(self):
        return customized value

    def ExoticType(self):
        return customized value

    def Digital(self):
        return customized value

    def ExerciseType(self):
        return customized value

    def OpenEndStrip(self):
        return customized value

    def Reset(self):
        return customized value

    def ProdEntry(self):
        return customized value

    def IsCOV(self):
        return customized value

    def IsMX(self):
        return customized value
    '''

class SettlementSwiftTypeCalculator(FSwiftMTCalculatorBase.SettlementSwiftTypeCalculatorBase):
    """
        This class implements the attributes used in the message type calculator
        Override the following functions to provide your implementation optionally.


        When you migrate from MT messages to MX messages, it is recommended to choose the
        criteria to differentiate the two message types based on some generic logic e.g. date of
        creation of settlements. This helps to show the correct message types for existing MT and new MX settlements
        in Operations Manager. To achieve the MX message types you use the extension points
        like IsMXRtgsSAMOS, IsMXRtgsTarget2 and IsMXCBPRPlus and the following example shows how you can differentiate
        between MX and MT types based on settlement creation date.

        def IsMXRtgsSAMOS(self):
            import acm
            migration_date = acm.Time.DateFromYMD(2022,1,1) # Migrate to MX SAMOS messages staring 1st January 2022

            object_creation_time = self._acm_object.CreateTime()
            object_creation_date = acm.Time.DateFromTime(object_creation_time)

            is_settlement_created_after_migration = True if acm.Time.DateDifference(object_creation_date,migration_date) >= 0 else False

            return is_settlement_created_after_migration

    """
    def __init__(self, acm_object):
        self._acm_object = acm_object
        super(SettlementSwiftTypeCalculator, self).__init__(acm_object)

    '''
    def Amount(self):
        return customized value

    def SettlementCashAmount_541(self):
        return customized value

    def SettlementCashAmount_543(self):
        return customized value

    def CPType(self):
        return customized value

    def HasBIC(self):
        return customized value

    def Relation(self):
        return customized value

    def Status(self):
        return customized value

    def TARGET2(self):
        return customized value

    def EBA(self):
        return customized value

    def NotifyReceipt(self):
        return customized value

    def DeliveryType(self):
        return customized value

    def TradeType(self):
        return customized value

    def IsCOV(self):
        """ Valid return values : True or False """
        return customized value

    def IsMX(self):
        """ Valid return values : True or False """
        return customized value
    
    def IsThirdPartyFX(self):
        """ Boolean method to denote whether the trade is third party foreign exchange deal
        i.e ThirdPartyFX """
        return customized value
    
    def IsMXRtgsTarget2(self):
        """This function use to generate MX RTGS T2 messages. Valid return values : True or False """
        return customized value
        
    def IsLiquidityCashTransfer(self):
        """ This hook provides flexibility to user to restrict camt.050 message generation to certain
        set of liquidity credit transfers between accounts such as DCA2DCA, DCA2MCA etc. 
        When set to True (without specific conditions), camt.050 message would be generated for all liquidity credit transfers
        Valid return values : True or False """
        return customized value
        
    def IsMXRtgsSAMOS(self):
        """This function use to generate MX RTGS SAMOS messages. Valid return values : True or False """
        return customized value
    
    def IsMXCBPRPlus(self):
        """This function use to generate MX CBPR Plus messages. Valid return values : True or False """
        return customized value    
    '''

def calculate_swift_message_type(acm_obj, message_type_from_mt_calculator):
    """This hook is called after FSwiftMTCalculator calculates the swift message type corresponding
    to the acm object. User can customize the swift message to be generated for an acm object from this
    hook."""
    """
    # Ex- For generating MT101 - 
    if message_type_from_mt_calculator in ['200', '202']:        
        if (acm_obj.Counterparty() and acm_obj.Counterparty().Name() == 'OUR_BANK') and (acm_obj.Currency() and acm_obj.Currency().Name() == 'USD'):        
            message_type_from_mt_calculator = '101'
            if acm_obj.RelationType() == 'Good Value':
                message_type_from_mt_calculator = '199'
            elif acm_obj.RelationType() == 'Cancellation':
                message_type_from_mt_calculator = '192'
    """
    return message_type_from_mt_calculator


# Override the following dictionary to alter the existing attributes.
# e.g. override_calculator_mapping = {'103':{'CPType':'Counterparty'}}
override_calculator_mapping = {}


...

  FSwiftMTx99Utils
"""----------------------------------------------------------------------------
MODULE:
    FSwiftMTx99Utils

DESCRIPTION:
    A module for utility methods used for processing all types of Narrative Messages.

CLASS:

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import acm
import FSwiftMLUtils
import FSwiftWriterLogger
import FSwiftConfirmationOutUtils
import FSwiftConfirmationUtils
import FSwiftWriterUtils

notifier = FSwiftWriterLogger.FSwiftWriterLogger('SWIFTMTx99Utils', 'FNarrativeOut_Config')
swift_mtn99_out_msg_config = FSwiftMLUtils.Parameters('FMTx99Out_Config')
writer_config = FSwiftMLUtils.Parameters('FSwiftWriterConfig')


def get_party_reference_prefix():
	"""returns confirmation reference prefix"""
	prefix = getattr(swift_mtn99_out_msg_config, 'PartyMsgIdPrefix', None)
	if not prefix:
		prefix = str(getattr(writer_config, 'PartyMsgIdPrefix', "FAP"))
	return prefix


def get_trade_reference_prefix():
	"""returns confirmation reference prefix"""
	prefix = getattr(swift_mtn99_out_msg_config, 'TradeMsgIdPrefix', None)
	if not prefix:
		prefix = str(getattr(writer_config, 'TradeMsgIdPrefix', "FAT"))
	return prefix


def get_confirmation_reference_prefix():
	"""returns confirmation reference prefix"""
	prefix = getattr(swift_mtn99_out_msg_config, 'ConfirmationMsgIdPrefix', None)
	if not prefix:
		prefix = str(getattr(writer_config, 'ConfirmationMsgIdPrefix', "FAC"))
	return prefix


def get_bic_from_party(party):
	""" Method to retrieve BIC from party object """
	bic = ''
	for alias in party.Aliases():
		if alias.Type().Name() == 'SWIFT':
			bic = alias.Name()
	if not bic:
		bic = party.Swift()
	return bic


def get_settlement_reference_prefix():
	prefix = getattr(swift_mtn99_out_msg_config, 'SettlementMsgIdPrefix', None)
	if not prefix:
		prefix = str(getattr(writer_config, 'SettlementMsgIdPrefix', "FAS"))
	return prefix


def get_mt_version_number(acm_obj, msg_typ):
	""" Get version number for MT699. Each new message version is incremented by 1. First message version number is 0.
	:param acm_obj: Settlement or confirmation object
	:return: int: version number for new MT699 message.
	"""
	version_number = 0
	try:
		if msg_typ in ['MT199','MT299']:
			msg_typ = msg_typ + 'Narrative'
		external_object = FSwiftMLUtils.FSwiftExternalObject.get_external_object(acm_obj=acm_obj,
			integration_type='Outgoing',
			msg_typ=msg_typ,
			all_records=True)
		if external_object:
			version_number = len(external_object)
	except Exception as e:
		pass
	return version_number


def get_narrative_description(acm_obj, mt_type):
	""" Optional field 79 for n99 message
	:param acm_obj: Settlement or confirmation object
	:param mt_type: type of message
	:return:  str: narrative text
	"""
	narrative_text = 'This is narrative description'

	if mt_type:
		external_object = FSwiftMLUtils.FSwiftExternalObject.get_external_object(acm_obj=acm_obj,
			integration_type='Outgoing',
			msg_typ=mt_type)
		if external_object:
			if not isinstance(external_object, list):
				external_object = [external_object]
			bpr = FSwiftMLUtils.FSwiftExternalObject.get_business_process_from_external_object(external_object[-1])
			if bpr:
				narrative_text = FSwiftMLUtils.get_parameters_from_bpr_state(bpr, 'Ready',
					'NarrativeText')

	return str(narrative_text)
    
    
def get_senders_bic_settlement(settlement):
    """Returns SWIFT bic code of the Acquirer of the settlement.
    This field goes into {1: Basic Header Block} -- Address of the Sender"""
    if str(getattr(swift_mtn99_out_msg_config, 'SwiftLoopBack',"")) == 'True' and str(getattr(swift_mtn99_out_msg_config, 'SenderBICLoopBack',"")):
        return str(getattr(swift_mtn99_out_msg_config, 'SenderBICLoopBack',""))
    elif str(getattr(writer_config, 'SwiftLoopBack',"")) == 'True' and str(getattr(writer_config, 'SenderBICLoopBack',"")):
        return str(getattr(writer_config, 'SenderBICLoopBack',""))

    party, senders_bic = FSwiftWriterUtils.get_senders_party_and_bic_from_acm(settlement)
    return senders_bic


def get_bic(confirmation, sender_receiver):
	""" Get sender's/receiver's bic """
	bic = None
	if str(getattr(swift_mtn99_out_msg_config, 'SwiftLoopBack', "")) == 'True' and str(getattr(swift_mtn99_out_msg_config, sender_receiver, "")):
		bic = str(getattr(swift_mtn99_out_msg_config, sender_receiver, ""))
	elif str(getattr(writer_config, 'SwiftLoopBack', "")) == 'True' and str(getattr(writer_config, sender_receiver, "")):
		bic = str(getattr(writer_config, sender_receiver, ""))
	elif str(sender_receiver) == 'SenderBICLoopBack':
		bic = confirmation.AcquirerAddress()
	elif str(sender_receiver) == 'ReceiverBICLoopBack':
		bic = confirmation.CounterpartyAddress()
	return bic


def get_senders_bic_confirmation(confirmation):
	""" Get the senders bic """
	return get_bic(confirmation, 'SenderBICLoopBack')


def get_receivers_bic_confirmation(confirmation):
	""" Get the receivers bic """
	return get_bic(confirmation, 'ReceiverBICLoopBack')


def get_receivers_bic_settlement(settlement):
    """Returns SWIFT bic code of settlement receiver.
    This field goes into {2:Application Header Block} -- Receiver Information."""

    receiver_bic = ''  
    if str(getattr(swift_mtn99_out_msg_config, 'SwiftLoopBack',"")) == 'True' and str(getattr(swift_mtn99_out_msg_config, 'ReceiverBICLoopBack',"")):
        return str(getattr(swift_mtn99_out_msg_config, 'ReceiverBICLoopBack',""))
    elif str(getattr(writer_config, 'SwiftLoopBack',"")) == 'True' and str(getattr(writer_config, 'ReceiverBICLoopBack',"")):
        return str(getattr(writer_config, 'ReceiverBICLoopBack',""))
    
    acquire_account = settlement.AcquirerAccountRef()
    counterparty_account = settlement.CounterpartyAccountRef()
    if counterparty_account:
        if settlement.AcquirerAccountSubNetworkName() in ('TARGET2','EBA'):
            if counterparty_account.Bic2():
                receiver_bic = counterparty_account.Bic2().Alias()
            elif counterparty_account.Bic():
                receiver_bic = counterparty_account.Bic().Alias()
    if receiver_bic == '':
        if acquire_account:
            if acquire_account.Bic():
                receiver_bic = acquire_account.Bic().Alias()

    return receiver_bic

def get_message_version_number(fObject, is_free_text_msg=False):
	msg_version_number = fObject.VersionId()
	if is_free_text_msg:
		msg_version_number = str(msg_version_number) + 'F'
	return str(msg_version_number)


...

  FSwiftNarrativeOut
"""----------------------------------------------------------------------------
MODULE:
    FSwiftNarrativeOut

DESCRIPTION:
    OPEN EXTENSION MODULE
    Business process state callbacks.

FUNCTIONS:
    For sample state xxx there are always the four standard extension points:
        condition_entry_state_xxx():
            To control if all the pre-requisites to performing the action and
            entering the state are defined.
        on_entry_state_xxx():
            Is the place to perform the action.
            For example, the on_ entry_state_matched is the place to set the
            confirmation status to Matched
        condition_exit_state_xxx():
            To control that all pre-requisites for performing the next action
            are fulfilled.
        on_exit_state_xxx():
             Is the place to reset values that you set in the state entry, if
             you are leaving the state to go backwards in the workflow.
             For example if you exit from the "Matched" state to go and re-pair,
             or to manually cancel, then you would want to remove the
             confirmation Matched status

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
from FNarrativeOutCallbacks import FNarrativeOutCallbacks

FNarrativeOutCallbacks = FNarrativeOutCallbacks()
# The context parameter is an instance of FBusinessProcessCallbackContext
# Conditions return True or False
# Name convention is
# 'condition_' + 'entry_'/'exit_' + state name in lowercase and underscore


def condition_entry_state_ready(context):
    return FNarrativeOutCallbacks.condition_entry_state_ready(context)

def condition_entry_state_swiftmsggenerated(context):
    return FNarrativeOutCallbacks.condition_entry_state_swiftmsggenerated(context)

def condition_entry_state_generationfailed(context):
    return FNarrativeOutCallbacks.condition_entry_state_generationfailed(context)

def condition_entry_state_sendfailed(context):
    return FNarrativeOutCallbacks.condition_entry_state_sendfailed(context)

def condition_entry_state_sent(context):
    return FNarrativeOutCallbacks.condition_entry_state_sent(context)

def condition_entry_state_acknowledged(context):
    return FNarrativeOutCallbacks.condition_entry_state_acknowledged(context)

# ------------------------------------------------------------------------------
def condition_exit_state_ready(context):
    return FNarrativeOutCallbacks.condition_exit_state_ready(context)

def condition_exit_state_swiftmsggenerated(context):
    return FNarrativeOutCallbacks.condition_exit_state_swiftmsggenerated(context)

def condition_exit_state_generationfailed(context):
    return FNarrativeOutCallbacks.condition_exit_state_generationfailed(context)

def condition_exit_state_sendfailed(context):
    return FNarrativeOutCallbacks.condition_exit_state_sendfailed(context)

def condition_exit_state_sent(context):
    return FNarrativeOutCallbacks.condition_exit_state_sent(context)

def condition_exit_state_acknowledged(context):
    return FNarrativeOutCallbacks.condition_exit_state_acknowledged(context)


# Entry/Exit callbacks do not return anything
#
# Name convention is
# 'on_' + 'entry_'/'exit_' + state name in lowercase and underscore
#


def on_entry_state_ready(context):
    FNarrativeOutCallbacks.on_entry_state_ready(context)

def on_entry_state_swiftmsggenerated(context):
    FNarrativeOutCallbacks.on_entry_state_swiftmsggenerated(context)

def on_entry_state_generationfailed(context):
    FNarrativeOutCallbacks.on_entry_state_generationfailed(context)

def on_entry_state_sendfailed(context):
    FNarrativeOutCallbacks.on_entry_state_sendfailed(context)

def on_entry_state_sent(context):
    FNarrativeOutCallbacks.on_entry_state_sent(context)

def on_entry_state_acknowledged(context):
    FNarrativeOutCallbacks.on_entry_state_acknowledged(context)

# ------------------------------------------------------------------------------
def on_exit_state_ready(context):
    FNarrativeOutCallbacks.on_exit_state_ready(context)

def on_exit_state_swiftmsggenerated(context):
    FNarrativeOutCallbacks.on_exit_state_swiftmsggenerated(context)

def on_exit_state_generationfailed(context):
    FNarrativeOutCallbacks.on_exit_state_generationfailed(context)

def on_exit_state_sendfailed(context):
    FNarrativeOutCallbacks.on_exit_state_sendfailed(context)

def on_exit_state_sent(context):
    FNarrativeOutCallbacks.on_exit_state_sent(context)

def on_exit_state_acknowledged(context):
    FNarrativeOutCallbacks.on_exit_state_acknowledged(context)







...

  FSwiftReaderLogger
"""---------------------------------------------------------------------------
MODULE
    FSwiftReaderLogger - Creates an instance of FANotification

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
---------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
eNqtVk1v3EQYnvG3vdu0DS3QUsAICl2gKZ+XCiFCuikRyQblowhLyHI8s6mTXXs7nqXdlZcD6RV+AYfNkRs/hBNH3xAnfgAcEBK8
79hJtmkFF3Y1M57x+zXvPO8z/pWc+hnQPoKWb0DHSEAYZVqPBlSNWqCpUQ90NRqBoUYzMNVoBRZzmMHMhzSwbxNmMfshYTZ3DvTA
Zdomabm//E4Juf7//by19Vvbq23Ph9/y5v2kKzd4xLhYzXZ3ufCv+0uCR5LnfpT6SZrLKI25n3X95cVOJpNuEkcyyVLPu9Pe2FxZ
79z0r25c9byN9ubWxsrSFqxs3lhdWVvZWlTPNz337QV/MR35/Ywda+e+zHx5l/t5LJKBvMHTWIwGkjOUGvb4jbjHI+FL/kD6cca4
fz+Rd5NUqcSZ4H6S+2km/Xw4GGQC9BY8950Ff+surFcWjiTiYS6zfjKOdnochN5FIbTRH2QpT6Xfj0ZK7n4m9v0o9/mDAY8xEPQI
KTgdNwO1KvgTV5H0hzmkjqcQx/94Ur8hvjolibUZvDWgedCWEHM/K8xNNEkKekAnuqRSKxTSDnSYG/Vcr+dmPTfquVXPzXpuF3bO
pL5nSH1qHpJLZGodkl1Yl/bUYdYhnThKw2F2reGOL0t3zy1IYRRWYRZuYTPnW2uifU7S9wwivdFPlEw8SsZXZIO5khbeAX2aHFBK
PidfYOze117qVeNb5C1SIOa9TukAHFf5V7wndNhjeX4We2r90aU1zpKo9NTSaBsOI7hQYXsz6w1RYClLu8lu4C2ufbzImOB53rJK
I436PDjTA+Qn6W7YU3bn0xm7YV8Zbqq1US0x1wf1aJeHOyLb56I08PTHr7QfxHyASlA2T6osqJS81SzPVUF+FglwLrnISz2XorR3
uYwkPOhR3A/MZbUJB/sOyJWG6s9UZtdWt2XSy0tvxsjco/VZusfhlOZAJKlsNYSDqWx0B6gVqr071WbBlQdZCNWbPHDxWe1VINSE
C13ggZU+D3GvwcUcwwjzOrm1nkBslpT/QMQlePrz4uNJWBiMyvnHl+cRzC8gvKlBHXqu/hv0gubBqNHLdI6+SsVzIBGfZmDtiIGv
QccJMC9B1gXG1Zj+kADjIr8SYFzFrsi4yKviDIiPL/tLvShXfAS0x/zlk5TG9JQTbLfR0Rx0BdmDovuOUAAxmKOdFi0dOMOQRTJq
aaWR8163NDHLuUpH1V3GFDlhmKSJDMPX0Jqqbm186TQuFo6kYn0mELNuqv7fxPqnBd3XxDXcLe6UWd8bE73Qp1BLULFGYYhrhbFZ
VZbdCZ6dTX/lsyoOgVeZQNvCws6GrmUE7ur67XC1fae9GjQ761sry1/Us3k1W1lSRB+utW+tLAbeZxsra+1we7O9AfnQIR8tUzyP
1p5BDDUQ4clOhb2zjA8EB7hyFrIkloGHy2E3G6bsdMaeR6bHqg1nlCpjQ8nfwFxcUPBxNI2q/1+W7QGADG288Fhi/9XYI8feqJs6
djhrOPJb5Ms/kHH3qCRT7ZBMdWRKlXF1t0PW9YkxbhYGcujErJnQGt0FJrQUE9pML7TC6mrIhN/Qmgmtry3FhDAqJjSnziEBb+8B
/wKvHiD7urDqFfYhsP20wYxDykxg6Sb4ceUZYGGncA90Su6JY+1PTrQLMp0Dv86hNvEKr3D2dfHjf1r0aos/3jMU0K1O0JgpksBe
Xt/Zgytz/P52ipcsVhIcO1yxqcQLFr8cjsWBARdOaBIJ8U/6ssACaJ0V5xAh55fbD0AvrygbPwCC87e5vMW70bAn6yVxHkWbsH4s
HJh3ot6Ql3OLR+fYFiIT4iJKGp/yUS6wagNtUZZmPuglOIDkoLTzinjFSxhGo0IrclFgVUwZNMBlGNfRNCv2zNSmS0fy/qAHACpN
jv5Kug9EecKvc8ewqjF/8i5UKHwU5+IKdDcRa68rUnDoPLWo8bcBqG4CBRrU+vuK3gSKvELnNByr5yeQxxEVdVo28o3yGJZeGFYf
LfDcDMN7w6hXv7HDkGVxGIoXMY6XjoKZCfAkSmTOqxglXigOUrbhnFWrLU3d16preeI61q6ej/LSlSKK+U4U75cW5j3dVectsGoV
/StuL60qr8rWk1yXzgdV/B9ileZN/ABvPAs5gL/uPfUPkNUfcQ==""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FSwiftReaderMain
"""----------------------------------------------------------------------------
MODULE:
    FSwiftReaderMain

DESCRIPTION:
    The SwiftReader ATS main module.
    This module connects to AMB and subscribes to swift messages according to
    FParameters set in FSwiftReader_Config
    For each incoming swift message the respective FMTnnn object is created and
    FMTnnn.ProcessMTMessage is called.(which are delivered in the packages).

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FSwiftSolutionFParameters
"""----------------------------------------------------------------------------
MODULE:
    FSwiftSolutionFParameters

DESCRIPTION:
    All listed FParameters for each Swift package.

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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
I0zrX0qjscjAayw29j8zswp3""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FSwiftSolutionValidateSetup
"""----------------------------------------------------------------------------
MODULE:
    FSwiftSolutionValidateSetup

DESCRIPTION:
    A module for validating the setup of Swift Messaging Solution Components

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
eNrlPFtsHNd189rd2QeXS4p6kFbsseOH1nFoSXEcR1GUUHwoTChKJinHHtvZDPcOqZWWu8s7s5Q4mnUDy2mcIgnUfARoYKBkPtrk
u0BQFEGCAkE/+pWPoEAHaYCi/WiCfhToR4MggHvOufPa5VKW7QD9qOi9M/d17uu87xn/mzTwrwC/z8PPeUyWJCaZEpOZ0pRNmZ6K
qdBTNVV6aqYGT7WZ2cqYGVm0zZpZeubMHD11U6dn3swzjWXekswCy7JcQ34fqf6Obhbfdy+R5t/JmyWWY4VNiRV/ILPSOyrkRiBX
jnOjkKuEuSwbg17j72jmyCWJHWETb0lswi7fVc1RyB9lxyB/7K5iVpiyKlWP/+tnFUn6+B/xX+HylblrS/PnCgb8W1i91dhwV9vN
rttot16ymg1mufaq7XY7hcLc/OrsyuLVtcUry6L1jLHVZt2mbWy0ubEjGjdam4Z73TYc7GO0NwyCaFy2HcfaxMoIuDHb3uq0W3bL
dQqFl+ZXVhGs8cTKE4XCyvzq2sriLA60+uzS4uXFtRl6F6OemTZmWrs4dGOjUbcQlmO4bTFqnTc67rN2q853O67Nwgk+W2/aFjdc
+7Zr1NvMNm413OuNFnWpt7ltNByj1XYNp9vptDn0m6aRzk4ba9ehKlxl2Kjeddz2VsOz1pu2aPcJbIeQwgUZW9YuNb3V5jcNyzHs
2x27jtPBcQ3rwOwZdBNLSEazXKPr2NywWzCbP+aB/wbpbrkqB2MLiy3X3uQ0iWtuo+nUlRRpquFvFslzChJX8qW7ck/xZX7MV/Zk
X96XZclHtJS9vzEsxgy7aW/hiUbnsdGxuLVlsEbdpZ06J/Ki2Klh+TnYUM5x1w5p7LZrADpsiykCx8Fa9q2+AUX/WtKfAw7yluh0
zuh2EJeZgE8NqkqgYS7IirqqapbSUzOLqbFNHcajtx9JPAvb8fuH70Mt053dYFxAraUgTuJe6ri7OV3W5ILMMRPkL1staNrmu2tV
4Dwz9a0r6zde7Np815xYat+y+VWrZTdF8dpuxzbLSemytWWbx5P86nXbdtfsrU4TxjaPDFZA76ByrdWxGtxmF6+uiFHK1zqdPnhJ
vg9eNW9W5puNzcZ6o9lwd6lzkLlsufXrpnYVYJonMAU6f6lh3xITnoX92Wo55rEDNWLso6lymFDU/Eh/sRiqsOrCLGavW9zlKDoC
bXF54UpV4yOYyczNX7x2KcjMr6xcWTG1L8+sLFdVnocqMzdnb1jdphuMdtqO0wDSrQHD6tpOkFlbmZn9UjXDx6AdL1Nj7Lm4fImP
ItTc6rXZ2fnV1UC9srAA8I5gk/zVlcXL87WlK5dgotFrDUAtry7OL68tVDVTX2pvLtk7dtMcW267MbUPKbpss4ZlFqho9xoQfX1Q
TCqRmDwFiS2BeJRQNIJYVJgKIk4LRV0GhRA8s0wHqswHhauIe7Zrc8ebMmablkOUwm2LGQtJXV0eoHvc20s43gVIvIov3ZB8+TtA
/zX5y1LrlCa5yu4LstRTZKxV3oTSV0B895Q3lFZBPE9Lp6EEeQMcQqBv2m4NUNwKiilyCPLzt+t2B/cA2miO3dwIMi2YFByLzXmb
E6GJJIdnoddqjVbDrdUWYkKSFbkil2XvSLKc6ahV37pwTcVoXf8JSUNCXjYnvf7rngrvmivdkF1pT9mX9tR9aVLqZfzMHiociq/u
q72sV/Kze5l9qZeDPViAPcjuvgl7oMMeTPtZ5ytujqm+egx45JtyqwI5zVd9fUMRJbRDmZ7+hg47RE/cIT+3p+9LMIervbyb9/PA
X/NuwZd8zOX2in5+X74r75VYdl9muUlpb2RfuqvK0uG1vubnz0vb34InzBvedOLQuvdrYwWPHdly6uiNDd7eosL5267dclAyAzey
Nm1OPDLFiOlgzhlLDcdFwb7QiYAYGw0QWFSd9EkzXwBq8V3jzp3zolMNO5y5cM64c57byFdYbSFh3hd6zxh9Lc8e3rIXD2gWU6sy
cwvAX0DmepNJqfGEEOAdbjsgM7znr7VQhiNBAHaC+AZp2BJLS/eZNmIkNUBBcZZ/L3+UI0FWy4Fq1bfMsYV462YRxm03GLtkuyHH
iYo0YqwlqIhbm5mXkAcF5RnX5Y31rmvPE9IfRw6jfcnedQLVcXmQA2XKgiamMuMGGacDrBce0KVTLfATSBwoV/gx7JYVAszMu8Cy
QykGw9fqYhpmSexem3Yn0N2QsXMU8IF8c4Dg+FFIlpBgnkQSymgyiq1xOStr72qKIpeA8jS5rDwJb7r8uPwYiLQ+SozIvo8S5fBH
mgWOhfyFtIhP0Ul0EuwE5SlBoAPIFRdUZVo9PE7E80+4xijOIsV2bByXVB3NmxqYbKrZcjWHDAfxulYLCrWa0MzgvVSrbXetZliT
q9VYu16r8YeiHeNP9c8i2c+JaNnIu2AvFT2rT1LpAZ6vRjz/ew/K8z/K8qzwlgyG0OOsyErwprMRVoa6PHuCjbIKlBTYGBuHkqIw
NcBUIRPDHGHH2Ql4ltkkm4LnKHuInYRnhX2EPQzPMfYIM+A5zh5lj8HzCEmYJ4P7mQy1i5Zjey9Ecuc6qLShlWA7KW1ZmAoNLAJF
EPQ7sCZI0VYGJKAWbd7jpI3ekFwyE7+tgFxSXPUuyictfGZI9qjLv0FEQ0UPDyvINFH6VrNBbgGkM/A4forESoukMWRxCLPkdOt1
MFgE+RRIEtF7VSH8MitN6lyLEXXwmBETWhF2S3JF0WWv+l47lYgtNbXwTCi6aOEvQ8LknuqdBCX8YV/hD7uwCT4IAR9Q467aU0E0
nSXxvAKiSQPRNAXEpYIYU3xtH8R1KKi1NzQS1PAkMaTSZgWSN5Ewu3YdNHNQmM8Z1UyQ2xQ8iHCVOBQ/QwrYPCg+oD3hvgRH4g0h
vk2kE+TjQnM0qSfti7jOILUeryEdWsQSayidkHdtNDZd3IAy7acGQl+XJ4D5PC57L7z3vg4H2LfNenqbfxjypD3AL7RxmNJTmdrT
4JfxrvqgIyDt7Su9rJ/lGy5srw8SuAfSn38x7Ac1xyTs2zrJctBT97O+jLoAaBXYAnQLrIXjeo40iXfguHJwXCdFfzfn5+7KogUc
WL6XeyMHB0ZPcWAg3zMbeGwFqwA4bsxet+s3jZnLF1GQtWzimYKoKBcZn5uNHbs12AxlSWtzelDgDznNc8YpaFw1UJihpCRtol8R
GIRiba2jEcWRoOKWw+AkQheFlQW00NqkmYa9DQYoCFbqQR1jGRhJXOo9JPYi6j0br3N6enqBn0Ucm+jHmVnCh6AAzWfEWN70q6Ha
/zrg/2y8h6ArIMynnnCeMlYFl9joNpu73tH+oYwFmKnNvC+8SsYIAkm0jXDnI2B0Lk/EyzMaLcwNaFfLVV0QnAr0xj+Fbw+n7fc1
23FjjwoZ8+Z4HbcBRkimxZ+LqfdR5Iu6kJefRKZ2dOhBgfIhlhmMCD54y+J4MMF4X7bGbKceFFMghtL20RrNqYbtEvzrIc0ZSIXZ
EtC2RvRdIvsYlA1Fg3dU8Z9UvOffm9aHDbDcR+ql0BAgUkfaIX+hBOQLBgCQtkokrwHRar0MqOpZ+OWA35711T0VnR5gNiigsv+4
p3sbwAw0FMDADEB95y+7mb2sn/d1yAOJM/2mwt0Qbn4vB+VE1K0nWUHkegWq1f0COVNyfuG4xIrHgRkwXczgy9L288Ai8ru/BRZR
BBZxlpX2cmAkFJFBQP9UnzQsYhxKr/hGcft58UTGsf28rzm/A9iZFigHsDYN5wnMKUfMpOy9mOYk1y3YQkDJDm/vNBjgv8XtSH82
Qgeas+uAFjl9uHJGyvIy2p99ZBnBjqmSv4DJpyFZ855Kk99qdx0de+uC/sJJGU/dOd17ynt2GIE5h3cI5IJXTiv0d3reI0nP/qHC
OVaLwWQ/4qVMDaJKfg6xe0wIGkS9cHFEqPwzRF4xNYq6+dtgRzlBdqPNtyx3kDBLQqAWQ5WTBGmpD/JFbEs0dh6Tz2JygbwXYRP+
OfJeAJnW0IiQ7UFiPJKmlRAs6prOOVKNdSUiRk0FUgQVRhBlCd4mlAK8Y04HwizD2+NApln4aYr33Psi0nDgPgqthFSqkrKnDRHG
ihDG8MuiCX9Pff0fezmv4iooNtF8/yaK1otAN9ru7dBIf1oIXqYBheb2E+FKxvi2MdxAfxtochKg+QrQaw6F/jflt2VuRGI+gfUN
eQOMcKa/pb8NM0JDflPqFb4hQWkeS/08lRb8Av8DK8AaintZF2gVdDfkHkWgQaBhVgI6zoYqQhHhvi3t5dFFcE95/d9fU3ql3sjb
MsylhHO5p/C/Fbl9SEHZP1hWxjKW6Ur3ZL7sj0B6PVU7Sj1k/l2scb7LKrAeqDl8Njjze+r2fxyAofBzAANS2LuyV3YLe0V/BCCV
4Rxu4zncU3afh5MYhZP4ilvyy3flQRg3Vej/GBvDOQzW3W+HcE7h6Y2+MUqnB088vZY3uBMwwp4/Mli6I2M5G8eRD9buq/cfuzUR
YsMR0R96QM09eVtLnZTMtQNzUfkzQ+cC5WziA87lJwdORuW/hJOB9NCTUXd/8Z4no/KfsKN/xJOJ9uzY4J5tG756T3OyYf3xEI7W
mmAnIuWZTYacQEM12M+S7JryfmYQY+nzb6HEAgszfQ1zQNFNNNi0fysBcnh7sNgEAwdGl76iSBUb1nq764bg+qENSkrvRCIjU3OK
JaR3OpR259JKN8m1xAeHSn+jFdrSy95osg4Qdqd7fZ4YlMwoENCn7UxDsgms9vUnezIwHcmXmbSvANrSOxw4KUpY4st/rmxrZDKS
e32hKgcqyD6ws5Xp0/x5csUEwtqjHaKtSYmewvkm7DK6AC78Mw6NZveEPP6ud+lBZcdGanvON9t1q+lcmE6gHr5KI1rliR4Yzi6y
V3kfGPOOnKyLZopOA4QXaDftXQdM/y+RvdsAZQcWN27V3a7VTPuLUvb/ZUh+Bb//lkib+Vx8bJdnludm1q6svGLE6ICHgme21XAc
PHhyyKY8kHfO9PgMAsWd5hWahLvbsb2lRPVBEB+/AC/nz8cjXLjQB0UMkoxfB7nbdo1125jf6ri73osfClp8w4kzwyqYtVf7UCCt
FiPCBT0MgBnrQENWs9m+FWqhd872vKl+aPEwOPjrQwe/QtfXM0tDx44qH2ToqxH4DwJ/6G5N9vXuW8szaW14GHNz0qbogRZ0tY1+
Vd7u2BxafDbZm/dqO21cbdpAdyFnbbY3p6sjic4r3EFPxcorqbFzmHwx0mWDDJKME6iW45qlJmQ40I29YzX5KpJZRfjUiimGZz50
Hw47VOktJLcF/AtYUN6KrlRrSL7miZC8akm5IF1+iaxqaBRkyCkVqPAw8zDbWnIHBeT/Ig62FLOw8YOM6O+Rv7zTZ8dqoCiLC6px
+TFQnEsKus/RpsWfBjWgRitQJ78gC5Val6fI/i1D3Um0f9/VFCw/KT8DuYkwl1VOQIu+ksP6KVNKlnqgHQ3q+Sc+AIvtc8Xqafv5
twddZUraXUYXbD/sZb2Wq4D1nAVrWduX6ZkBvVlBpxnLgpX81RBKDnSHqFbYys8wPV0GVm7Gz4G2kT8eOdNIB4exs2JssJgN0Gty
u/8QXlFGTjXdV1JONbqm3DaS60rQPBSay69Q30BILbDtcYaxs624nJbRM4wtAnauAjXHMtrMrKExaeYXGnaToX9rDYzUFP1CpwZd
aERdQwHecCLLeto7kxDofZqnLrOmSUR4U6kZDbSo5lNUSxbpMWGRJj2ESSoody6m5kFvkVmxoik1iTidoRSp2Vb9OhHXoN05EZl/
jAnlwIGxPwIC23mGvLsx7chocp5AilAqKXPzFF1CAT4r3icf2NRMj9VnaxbS2PxP0gf2Br3Z070vuBpgKnp10PeDmLQeQskBjka+
nynAZ8r18n7Oz4eYnANMS/t7crs/Dj34JwUMwF4thb0K+u7JsxP68Mmz83OAgp6dwgHPTtG7GvJwB2Mo0CvCXWL5dW5TYAxGcaFD
Jwp32hKxUO/p2EkRBIVnGBSfERPEmlftc+akRj+I+B9LEH9ow4Mofzw15gC+X4xuKdLuGVp9jcA6ac9MElkSksFcP/KHN63zCKnU
B+RQT0wx1WwoJUQyJNXuBaSD08IBIx90wBTkyPkS0ULsdnlgvp4arU9Nzoa/2ejSsSH1MCBCpgCFtxDPmTwpofdlT0Hsd7UbwJH3
smAUyExl2teVSQmwWnNzvgalUMeyk+jzyEBe35f28gz4NNAESAWWOy9tl+JyoAbuUbneV56H8hKV56lcxguPZbM40+k0w+iZQJ4m
RPyNQlfYtd+8C/8CdWZtNdDQoR9kKEAHDvAjpBjEznyMtHEC7Ua70QqynO7Tg6y4CglGLKfeaNSatks+vo+SHrPRbFtukOlibFRQ
gG2E00fnfTUbqjBWp1PbgfZ4t6/XQV/BCD5Tt+pb4i0XNjBHwpcagRxEiylC1PjipmYli30V0eNEeAmGyoIB6kQZ0CL6eZ95sOuw
odD70EFPo8PPxcWjHIt3OGYf7MJ9ESUjI5sE0x/fNBLR0g0Q9ywjbsbItS1KQIxHDjM/x99E9oRsEu/Itr+PUJneQ1c5tSImrABL
JSbcOkH1Bagv9tf4GkMofxeOUcLeMC65FAAy2HkYC0NscGQ5dDYzTNYxjm+M8MMID448wqOAPemCNe8olkQRoGBhwn6BlPceSwlq
aIA6e3+LZwxvPNWVd1t4XeKd7O83UPv5Pn0hhBtOR9zpReDF5dFV3tiyz6GpEjb6UZY3YyU8EfuxUI8ufgYY1jHLdSIEriWDBKUU
YjtBvoPDER7nwg6HMbYUvEbM2FLivQB/Qh3WBRtDLFZELfmZ3xdjS432/w6TMXyEb1G0HjK9fuQ9RkUHsffRFBZii4Po6x1Jd43w
8yMD/QaqZ/rQNwL8fvCXtw5H0uPW1ro1BEt5G5t0sIkeNbnPlUcM4u0PjJjv56LDOhQz46iWbx00pQAbAUfUnroJquAmqKE/AGGK
htS+RLEHy35mDj1ZOT/ERv6cjyoomUPb8M45QckAFLyq0EJMlPZyISZWCKvEqDphYIJheauURBY07U2rvkuukfa60wbJGGmKsfoW
Bu4MCSOAyigC7VyYN8J8dPvvdNejokEAUJX0TrXDG8hb1xv16/FEbjWaTXRpNVognZvNIcqrgS69cw+0GoA+OCHvTKzqilZ1il64
D7RQCa6WzKkQW+x6lzfcXcASVwSvL7bMhw6ru9J1zScO7wjaSpduuAHGCdFs4eXLlymeIfSZQM3k8BqEfVxULa7MDfQ5MbQCu4Q1
s5ZzfaDPSFKTbtjmYEgAXczQTJ3FVlASNRiPCppUmPsyR9eQ9/yS2EzApYG9TB+MHQer2mCLtvm010h4Up/HCr+2aB4KMrzDTmJf
5wU4Y7W7uWk7rrHb7tIdMoBsGd0OcrI1bzHN4Jbb94E/cFd+YJwwqkOIZ9RP+cMUXn7Jdi8ThCALstdusfeU3Y/GOF8T06lFcwnj
Fh3z+NL8pZnZV2pXLq5eWZpfm6+JT39WzVyI50FWNB1km4+FfCwEDHh+APhfy1GQaDZlv4/oITcthbxTcNGS4s0+KO+8z5h9Xqk+
6+UlcvJjeDcKdmCRcz3VlX31rozh3XRrpE7Scw6vOzJM9jM7Ej+Ffp5JyVd2ZHhHfxXliZmeAusDA6kV7zPGig1Wgr1jY2xTEiRB
jvuU02xY5CpYLpcvrth1uwHi4Ecav9LvQ+3i+QprInho4z4+0AW6BiB35zGyTajtYBgi7sUv8GDGKaBUCx2M+FcC8eadfcDQufQ9
/f/5nqfcFw+25xxDCfjtZGv5LiavYeJFgdP8zpBo3Vch+ZcPv39pb0Gf7wkPPhft37IsYjsptkHpZRpSGNsgv671cmiHkyKp+zqf
wM8UKJf38/dkZ8rPRfZ3rwBWegZUyK9hWKKr3siwLN3QFsEixyDFkl/ay7GcXwBxr4K4L6Kl3RvxR3rl1jnom0f1M+ybp76j/mjY
t+JX+vqOUt8xf6xX9stwqi/3xul2eZwVoN8R/wj/LeRLMLvivuIfwc8T9sr70k3F+ak/vje6L7HSpLRXwedNjf+UjYByktuUQZUe
3xvbl85LdCM8tf3T7YntCV+Flc6xMuzOKPl9x/eOsMrehHsUlJ9jeIUXKuOJt3bM+1mMBSS4QUO4bgMjJkcXt8n9ZeFXWkCOxhZ9
owgKQLuV8oOFgcuRZtGxHAevgUDUx6CpjlsNkDlhOJzR2DASOX3KqT6bFpWQp5E37ZbNyfW2vmvMMKsD0zCcBrOTC+o1oeLX0L+R
odjkNCBTnVme86bm2vUufQU3TegovrW06VOvzPyL12aWzEIymUAH2bzZhkmaKryR62TBm4yGjzchdsk9+Wr4ORQKu7Vk2wY6eKvp
du+9eMfFXQO5aLEdAQn9jyE0cTF2p1c9HoyltQMR2PhEw6m1w0XUwh61cDORQ8J/AMt82rne7jZZ3GI9bgQych1EilgBa9cd4Rqq
zJIndGFm9cUl8W3ayELfdudnGLvSWW4z2xyDV/xsAzOr5DMys6t208bvLRZSux3qRJeXxNQnkB+sd51Gi6IseRuv7UxjgEuIbw5g
DbUtt4ZbIVjYI6QaxKdtFqLXRQZn2WCDlv4ySoas+M6tOiGkSi5SBoriExABfkCXKIVbU9tyNh1Th5SamUeHbrb5WLjR99lgsxQB
qbW6W+b4Nm6viMOONvdoC7aSFt1XXHHbbl9JkIESq2lWBAwn3mvzSAwhVVjG/kk+UGHdprre4QfjzqOrgnDtIWL/FgXAQvj5S6TF
FCjNkjgQrjewE1PvGomIk2gnYpmi4Ccz8DelPEi8+vCJHLiEy0Si4wv0PcRdEL6ufBevLkjkAkOefg2ECYpaECV4XaGRbyPLJ5iy
R4EzwKZzfg4sPu28BCwWha3qLa6QreQQF2yG4TDc3u424i+qHWG4xx9ME0OMNdDIjHdE1MrTq3Gzl0K3BKjRp2bD737jsjO9ajVD
n2BwlJJ8jUx28laKppENTegd6sHBUWajgozVYbQkTtkspjKB3kXqg5PnO0QEIZxgLFGao6JS5FkgnWsARyokz1OQjyqRdqBk4Ygr
YdByCT2xZx5MO0hB6zvhUlq5+q/4YmpLxitN9AnEl1JaL+sqdzH8l0If4dzfhnPX8XoJTlkEGRe4C6ecxw9FMOTwpsy/yjJ4WeXn
/QIGlW3/FV510vVrXNY66+sUwvw9gJQFMZ2/meHfYwXRBtWKVoV6FZMSVsLLWr+IX0dsP+2rzi9BrGusjKV0MSbdyO3p4uuH1rjI
sVFROyC+K95XQ6mNiBj5jyKPD32BjJgZn3+MmyBOqRWy5RSO7jjT8cfmESYpIlZpBHl43Q1RUUhd70sUgmEMwd4zQ7D3bK8KjcOs
CKZInFPTC96VDwut3zM3bWqd3dvrm9//C/j37b/8vPfy+4GPX0zgAItu7LxD+sbPfUilJo+ccfb0mU9PP+etfhDIs/0bjcN0W9aO
1WjS/zjBywHQAga3TM8dOL+d+yzbG03rGQAEClLWOBRU8+YYA2oimp+ODvrbfWyF/2kkJU36OhCvaKKWsRQNo7D5NzD59hCb++Sg
F5JwsibukPjb2A75jTkW42A8yJ/RXVTUP+wxwG1OhoJg6CiPKpHbMonTJg5UoLCSCpjZFWUiNLfLsQtzXPE++6ACaOi4+D23sryM
jwn6eo5XMXkak49F376JuHf8epEvYvIKJiYmr2NCdxPbmHBMbkW2Khlc/OuYoDOUf+ewzygxUOAm/W9jks8o8/pk4WOF1/SHCh/V
y/oj8FfVR+DvY3qJ2lfHxPxI1VPBpuXXMHs6xovNKDKCfw2TP8EExaw50RH/K4LaTsO+FYbFOOZRkBsgJMKPyeLiSvQtYVQSZIWm
Jcz8Zw5ZUqCfF9h/QY4kulbWY2MzfFP0ERQzqb/fZUsDJXL2f7IjZQrLz/4hm6uc+l/Jw+5c""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FSwiftViewerGui
"""-------------------------------------------------------------------------------
MODULE:
      FSwiftViewerGui

DESCRIPTION:
      This module contains the implementation of the GUI to show the SWIFT messages.

FUNCTIONS:
    CreateApplicationInstance():
       Creates the object of the GUI class
    ReallyStartApplication():
         Entry point for invoking the GUI.
    Class:
         DemoViewer - class encapsulating the implementation

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user end.
-------------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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
m/n/AEgtDVI=""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FSwiftWriter_Validate_Setup
"""----------------------------------------------------------------------------
MODULE:
    FSwiftWriter_Validate_Setup

DESCRIPTION:
    A module for validating the setup of Swift Messaging Solution

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
eNq9W9tvHNd5nzMze18uL5IokpKciWNd1pUo2U5iR1WUULzYTERK5lJSMrE7We4MyZWWu+TMUPKOZx3ADBAFaAPVSPtQuMHy0X0K
iqAPRYH2qUD70D9gHgIU7UMD9KFo82QUcL/vO2cueyGtXNAlOJdz/c453+X3fefMv0l9vxL8fxP+nX+HiynpkslMucF0RndZl+mu
6ArclYa6o+oqwzJqI7WT0lP4XE2bqbq0KZtpM/NDpmfelMysmfuhZOas7IGi5+A9bxbgvUDvebNojpilj2Vz1Byj+7g5QfcT5km6
nzIn6X5a3KdE+WlRfkaUP2Oepfs5cX/B/MKWbGr0/MWPi3oBen7R/BL0/CUrDz0XTbkilV/617IsSVd+j7/8yp2Fe7cXr+c1+C1V
ntQ33Qd23bVs4361UTerrmVULHd/N59fWKzMry3fXV++s8pLz2k7LXO/YWmbLVt7zEvXm1uau21pDtbRWpsataitWI5T3cLMSqux
79ZbzXz+/uJaBdvSzq+dz+fXFivra8vz2Hrl6u3lleX1OXq+ns+9MqvNNdvYWX2zXqtibUdzW7yfml3fda9azZrd3nUtU5B0tdaw
qrbmWu+5Wq1lWtqTurtdb1KVWsu2tLqjNVuu5uzv7rZsqDebz706q61vQ7oYlChR23fc1k7dq240LCj0GhbCNnZ2W02r6Wo71TaV
e9KyH2lVR7Pe27VqSAj2qFUH6DahGic+7qrqavuOZWtWE+j4fS7ur1BKVsssyCzdbm1tWTY8ji8tN11ryyZ67rn1hhNINTkhVSn4
z8P/PEqWCxfvuit1SaYO5QOpI/uyqZyGuyv7ks+6iqmaqUOQIHrO+FDKzP6J2lEeSM0vq5KrtptM6oDkeWfdlJlz0756wCalA8ak
B9J3Qb466gdqM8/v16Rrkq8Apxe8v9SWm3W3DnzlWVqDyCdO46wV8lurOUvMeH23ald3RDmjWd2xroeV8GVIGXqxgNOjgpQCCcRd
NdsC5hdZvLoNPdtNzvx6bstyYVIX6raNs+dp65bjLjcdt9poEF1XEsI0677n6lkoftt6bDV+xaDCup5dqjesu1V3u6wGKhIZpBqY
rReh0/XWPLBLq2HpU/SGZefcCjAXMJNlYjXv0uJ7NWsX+9KAt0FM7+3ej6bFEIMC+XJWy5lAqdZ2QKtY7tJ+s4YFbAWoCBQYRpCL
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""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FSwiftWriterAPIs
"""----------------------------------------------------------------------------
MODULE:
    FSwiftWriterAPIs

DESCRIPTION:
    A module for wrapper methods for Swift APIs.
    These APIs consumes Swift APIs internally.

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FSwiftWriterEngine
"""----------------------------------------------------------------------------
MODULE:
    FSwiftWriterEngine

DESCRIPTION:
    Engine to generate the swift message. All the fields of the swift message is mapped in SwiftWriterEngine class.

FUNCTIONS:

    _get_overridable_mappingsSwiftWriterEngine
        This function will return list of all getter functions i.e. mappings which are allowed to be overridden by end user

    _map_attributes
        This function will call all setters defined in FMTXXXOutBase i.e. functions starting with '_set_' and populate the swift
        python object.

    _swift_python_object
        This function will return the populated swift python object.

    _attribute_exception_dict
        This functions returns attribute _exception_dict which contains a key-value pairs of setter
        functions and exceptions caught while calling the setter function.

    attributes_to_compare_for_amendment_generation
        This function by default returns all getter methods as returned by function '_get_overridable_functions'.
        User can override this function to specify which getter methods should be used for checksum generation.

    is_mandatory_tag
        check if tag is mandatory from the XSD isMandatory attribute.

    validate_with
        This is decorator. This decorator is applied to each validator function in FMTXXXBase class.
        This is used to generate swift message with errors.



VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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
""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FSwiftWriterHooks
"""----------------------------------------------------------------------------
MODULE:
        FSwiftWriterHooks

DESCRIPTION:
    A module for providing customizations for last minute changes in Swift message
    User can customize the swift message using provided methods

FUNCTIONS:
    export_exit_hook
    message_exit_hook

VERSION: 3.6.3-0.5.6048
----------------------------------------------------------------------------"""
import FSwiftWriterLogger

notifier = FSwiftWriterLogger.FSwiftWriterLogger('SwiftWriter', 'FSwiftWriterNotifyConfig')

def export_exit_hook(acm_obj, pyobj):
    '''This hook is called after the pyobject for message type is generated using mappings specified. User can
     do any last minute changes to the pyobject here. This function should return the modified pyobj and that
     object will be used to generate the swift message
     Note : Please make sure that you re-assign the value of swift tag after you have changed the value of particular field.
     e.g
     pyobj.TransactionReference = datetime.datetime.utcnow().strftime("%Y%m%d%H%M%S%f")
     pyobj.TransactionReference.swiftTag = "20"
     
    If user does not want this message to be processed for any specific reason, then this extension point should return None
    '''
    return pyobj

def message_exit_hook(swift_msg):
    ''' This hook is called in network rules validation after the swift message is generated. User can do any last minute
    change to the message here. This function should return swift_message in swift message format.
    Input and output to this api is string.
    Ex: Swift message should be in format like:
    {1:F01OURODEFFAXXX0000000000}{2:I192CIBCCATTXXXXN}{3:{108:FAS2142501}}{4:
    :20:FAS2142501
    :21:FAS2142401
    :11S:103
    180531
    :79:Settlement Id 21424 was due to
    2018-05-31
    -}
    '''
    return swift_msg

def message_exit_post_validation_hook(swift_msg):
    ''' This is the last hook before writing message to AMB.Swift message is not going to validate against XSD after this hook.
        This function should return swift_message in swift message format.
        Input and output to this api is string.
        Ex: Swift message should be in format like:
        {1:F01OURODEFFAXXX0000000000}{2:I192CIBCCATTXXXXN}{3:{108:FAS2142501}}{4:
        :20:FAS2142501
        :21:FAS2142401
        :11S:103
        180531
        :79:Settlement Id 21424 was due to
        2018-05-31
        -}
        '''
    return swift_msg


"""Uncomment the following hook to provide it's implementation"""

"""def validate_use_of_extended_x_char_for_counterparty_hook(swift_msg, acm_obj):
    ''' This hook is called for validating extended x characters in the
        swift message. If you are customizing this implementation you need
        to check if the message contains extended characters.
        If the additional info SWIFTExtXChrNotUsed on destination party
        is set to true and message contains extented characters, return the
        object of the party(FParty), flag as false and error string.
        
        :param swift_msg - swift message
        :return object of the destination party (FParty), flag and error string. 
        
        example:
        import acm
        destinationParty = acm.FParty['DestinationPartyName']
        retVal = True
        error_str = ''        

    '''    
    destinationParty = ''
    retVal = True
    error_str = ''
    return destinationParty, retVal, error_str"""

def confirmation_status_to_ignore_exit_hook(post_release_confirmation_status):
    ''' This hook is called to get post release statuses of confirmation to ignore the processing for received updates.
        
        :param post_release_confirmation_status - list of post release statuses of confirmation to ignore processing for updates received.
        :return post_release_confirmation_status
        
        Example :
        {
            'FSwiftCommodity':{'Acknowledged', 'Not Acknowledged', 'Pending Matching', 'Partial Match', 'Matched', 'Void', 'Matching Failed'},
            'FSwiftFXMMConfirmation':{'Acknowledged', 'Not Acknowledged', 'Pending Matching', 'Partial Match', 'Matched', 'Void', 'Matching Failed'},
            'FSwiftIRDConfirmation':{'Acknowledged', 'Not Acknowledged', 'Pending Matching', 'Partial Match', 'Matched', 'Void', 'Matching Failed'},
            'FSwiftSecuritySettlement':{'Acknowledged', 'Not Acknowledged', 'Pending Matching', 'Partial Match', 'Matched', 'Void', 'Matching Failed'},
            'FSwiftCustomMessage':{'Acknowledged', 'Not Acknowledged', 'Pending Matching', 'Partial Match', 'Matched', 'Void', 'Matching Failed'}
        }
    '''
    return post_release_confirmation_status
     
def settlement_status_to_ignore_exit_hook(post_release_settlement_status):
    ''' This hook is called to get post release statuses of settlement to ignore the processing for updates received.
        
        :param post_release_settlement_status - list of post release statuses of settlement to ignore processing for updates received.
        :return post_release_confirmation_status, post_release_settlement_status
        
        Example : 
        {
            'FSwiftCash':{'Void', 'Acknowledged', 'Not Acknowledged', 'Pending Closure', 'Closed', 'Non Receipt', 'Incorrect Receipt', 'Unexpected Credit', 'Non Payment', 'Incorrect Payment', 'Unexpected Debit', 'Updated', 'Recalled', 'Cancelled', 'Settled', 'Replaced'},
            'FSwiftCommodity':{'Void', 'Acknowledged', 'Not Acknowledged', 'Pending Closure', 'Closed', 'Non Receipt', 'Incorrect Receipt', 'Unexpected Credit', 'Non Payment', 'Incorrect Payment', 'Unexpected Debit', 'Updated', 'Recalled', 'Cancelled', 'Settled', 'Replaced'},
            'FSwiftSecuritySettlement':{'Void', 'Acknowledged', 'Not Acknowledged', 'Pending Closure', 'Closed', 'Non Receipt', 'Incorrect Receipt', 'Unexpected Credit', 'Non Payment', 'Incorrect Payment', 'Unexpected Debit', 'Updated', 'Recalled', 'Cancelled', 'Settled', 'Replaced'},
            'FSwiftCustomMessage':{'Void', 'Acknowledged', 'Not Acknowledged', 'Pending Closure', 'Closed', 'Non Receipt', 'Incorrect Receipt', 'Unexpected Credit', 'Non Payment', 'Incorrect Payment', 'Unexpected Debit', 'Updated', 'Recalled', 'Cancelled', 'Settled', 'Replaced'}
        }
    '''
    return post_release_settlement_status

def is_realtime_hook(acm_obj):
    """
    This function returns True/False according to the real time support.
    Provide your implementation to customize the logic.
    :param acm_obj: acm object for which realtime support needs to be checked
    :return:boolean
    """
    import FSwiftMLUtils
    return FSwiftMLUtils.does_object_support_realtime(acm_obj)

def required_narrative_message_type_to_send_hook(acm_obj, msg_types_list):
    """
    This function return list of message type to show on narrative message sending GUI.User can add supported message type
    as shown in example.
    acm_obj - acm object on which narrative message is going to send.
    msg_types_list- Narrative message list from SMS which is show on narrative message GUI.

    The return msg_type_list from this function  can have message type as below.

    Note - In case if message type is not entered in this format the Narrative message GUI will not work as expected.

    msg_types_list = ['MT399-Narrative', 'MT299-Narrative', 'MT199-Narrative', 'MT999-Narrative', 'MT599-Narrative']

    Example for changing the msg_types_list -

    notify_receipt = ''
    acqRef = acm_obj.AcquirerAccountRef()
    if acqRef:
        correspondentBank = acqRef.CorrespondentBank()
        if correspondentBank:
            notify_receipt = correspondentBank.NotifyReceipt()
    if not notify_receipt:
        msg_types_list.append('MT299-Narrative')
    """

    return msg_types_list

def export_entry_hook(acm_obj, package_main_inout):
    """
    This function can return the customized acm_obj or None vale.
    Provide your implementation to customize the logic.
    :param acm_obj: acm object 
    :param package_main_inout: InMain or OutMain file name of package that will be used to distinguish differenet in/out main files 
    of different packages.
    :return: customized acm_obj or None
    """
    return acm_obj

...

  FSwiftWriterLogger
"""---------------------------------------------------------------------------
MODULE
    FSwiftWriterLogger - Creates an instance of FANotification

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
---------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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
qvTSeVmfWWesC/blxXOLp/4L7K3HpA==""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FSwiftWriterMain
"""----------------------------------------------------------------------------
MODULE:
    FSwiftWriterMain

DESCRIPTION:
    The SwiftWriter ATS main module.
    This module connects to AMB and subscribes to swift messages according to
    FParameters set in FSwiftWriter_Config.
    It invokes work() method of all the SwiftWriter solutions.

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
eNqtWt9vG9l1nhkOh+Twp35Ysmzv7mQT7ZrOWnaSTZtsHaeyTHmVSJQjyuvsJCkz4h3JlCiSnhnuWuxwX7QtgqILBHnsE4W+NEWe
9qlPRZvmD1gEBVpMn4oCRfdtEfQhWKRwv3PukKJkb9MWscF779x75s79cc53vnOv/k059y+L3x/i5/+HqihCsRWhCq2l2irnmq1x
nrATnOu27upDXSSEfqLZSa4zbIPzlJ3iPG2nOc/YGdcYGieKbYqkkxWGkxOqkxcpuyAMuyjSdklk7Kk9xZ7Gbwa/WaHZF9zEcE6Y
J6o9717kcvZEFTmhHSfsBchc6s+6l9EyL/KicJw4Vu1LD5X2kq64V47+XVXsF1SlP+cmhy+K4omqKg+VtxX0+sL3XmibMr+p3FTQ
z0vupbvKD9q2hf5eGn7ONYcvu9aJKt95/An192P1yI57/Br3WHI/71rHKtIXjtVdbU4haTe5/wVZIwwx9YE2+c3Hn5x+8/Enjz9x
X/qx6ne5r2l6V8yI2fcVe1FcEHPIXxHz4iLyV8WCuIT8qrgsriAvN5VdVbwgXnxfta+Jl4SFui+Kz4mXkb8mPi++gPy6WBSvIF8S
r4qryG+IsriG/Kb4ongN+ZfEdbGE/MtCqynlG//6D5qiXP8d/jM3Nu8+WK+8YVr4t1p7t7kbPPSagettOM22ad6t1Fa21u5vr21W
pcj2I9eakLKWt2vWIUStw47otdylWKjpxxVWo9Nuu43At4KOtbxxx3LawvJ7O37Da+64XOtTd9ah6/vOHmqcRqPjiWZ7D21yVPcd
zzl08TXf8t3AwscmB1pf6bR3m3vyy2vU/E7nAP282/EOrpbRb/CoI6zOruW0WlZwbvh+p9ULmp22v2Sab1W2ajRPa3Fr0TS3KrXt
rbUVmnntxvraxtr2MpflMnxpyVpuH9Ecm7vNhsNd0Fyof5paN7jhthveUTdwRbwSNxot1/GswH0SYFGEa73bDB5hLvQKZuxaWLN2
J8DidLsdD+/JGX156cxyxkKNnh90Dpt9Z2e05l9Z4r1pdA67nbbbxoI6RyxK62A5vuU+6WIfMBz6Lrbh/OgFXpNTOP2aE1g9H8vk
tjGa36XafUwYVo2yE3thX5zc1WonaO4eya1d/RgYp3w8S4lGSQKJPT0pLgXtWVlXi3c1rjWhd8tCeNAwO7XBM/P72vd+0P/qfWyJ
jx3DyuBrE5pmvRrLvUrqhu3xsHbWbsc7dIL+X8o2a9FHS68leJl3sDeH8cZZFSwxaVfc7+h9uao+a/DzPtXx4j5YKTz3ca/pYcOg
MW7bx3zGStDGPlXGtRXRDDrejQ2nDQPylixosP9TNUq7Txr1Znu3039Q7UyYI5akR91+xiiW2KbfbcJaaF57btv1nMBljalNmmpj
0h/RDtG2rJBP+gKSQDlWoO0q0Do3UEJlqJ1A6LEZJIY6lYRSU36qVsvJaKbZbgZ153CnHmMF5hTlaw/XVrfrEp1qUdIPHC+IEpCy
U5DsdlqtshrlGDvqcm4/VbwSPvzpzHkYW+oeRZfGHwEA1bk37gQ4c4+GnOZJGGpaNVVvGuUzs0vhZ45m94/x7AZKoA7hZ4PEifZ9
baAOtFAJ9APN+0WQHBqhGmonmvdRfydIDdMnyiCBPINcR24iTwbZYS5MBnmhnSScgkg4RdSUgkKI/lQlLutcnhpOCz1MSM8VP+ny
CV7vI10JZo7+TlUGBnzeFbTPimSYnFNC42Ts1wbGe8bjj2ROfq2dw2gvYLQf8ZeL8C5Gf4FWqem0mn2Xwfp0Q+yLvKibvWCvgzVb
7nZbMXJUtz9dlHoRY2pthO6C0b23s0+6v+j33VWn2ZK1E9/BnkDVHYE3F/0la6290+nBRyw3DtqddyG+5x4ynI38w1gzYXFdr9NA
PZuc53U80vzyXFQcb7bsOMpLldhYfxA0W759ac89r3B14QYYnR9lMO/6/eWt5Y1oiorVze36yma1WlnZrtyNMj3qoN7Z2bez8cvU
UTQ1qXP8kWiGP9I4qLedg3q8CtEFqmw7Hiyq+Y47rp6elJVj9gpQs2gWg3zcc3tunacUT2eGRN13sCxxTb2xE80tr3y7uvlwvXL3
XmWjUt2ub1WW71a2otJarU4TOZ1Ecdyp2yYHEqXbhLZN9KyvVVc3o0zlScPtsh0mK1tbm1vRpTM91GsPVlYqtdrqg/X1t8sp2/Dc
4C2nZWedU7XAAxmbhN2oeH4hpp5dhMLZBYiSLm0p27RMpigh4lslM7xGhqkbagk2m1M1pPS/oOp4yiGf1qicfnpFS6u6xu89g1ip
kU3fZJseqicK8OoKLFsbJkJw6nlYdAD0Otbm2doep4PkMaEXsbFEP8tYyWhi9RPXr9+ulo0oh3VaXbsnlchmNegSzGJuh2691fQD
72Wayedpg1NodoLAY8wBoukkdH7OeST7NEyDBp7IqZc0rmucjwrU0Xx0JELFGLV+Jh5jp1ud6PfsFyKd2n16kxysonlLz4PA8XLt
8nIFFGwox4kBlmOoAQbVgSoA76ESqifaQNsj0EtiQa8O9P5cqFNQMUiGiWEqTMbQdU1V6P/bKIFqX6N+QurHCLXQmIeLKOvVKPUO
qB9U6lPV6r9iSqx5S1ZZb/zxwIw9l3UfqkZQgbpy2nuNJvdFntw+ICuaOeNRYhM3pEv3ciRnYCODnh8ZUGMwnnLKu8FbFLttuySF
4eHhQDygoD3bhc4CleotWGOrLt/3ivRWwg98uzBqj1vO7evrSN6l9bzIm5eD78mRzrI2F0beiKQa6sRW6JO+9nXeaaG0lIEaqkMF
Sww/5F/BAmJbbikyX1AuYjPGdQnS3qpHe21nttc2KvX15do2qV/QPHTLup2hvC6ajcD7GgnlGj1QGOAN1dtZbm05XSDveU26PNFW
95vtBj34Qb0B+v0nNOACzxW2qmGmWg4/7+vnlU2b9LcfIuk/CphNkO0F2phTJJhTlNqrAXQSlgrb/H3F0VEyDpL+7QCRLTzcrtBQ
l+Z3UQOJFMtnhqaAVw6MUUyIiPQufGn26GfwpXjuvwaZXJAP1WOOMIPMfkE+YcX1ccyYHKjvqYhTOSffKpLsTaXlEf/2aMt4ufur
K2OfY5EuHXYDovTWopCeDV4NuiW9JLFAcsNgam0KGyDju3A7wl/yiLBUy0XPokVfiB1hfeQl67te55A8k9RsnQYRWSsPNjYerCOO
eatS512vrVVX5N7XV5bX13kjoosxziPaqT9cXtuORSsrUZa8wFYFcVGlxoB1CmQecT5vMdZ8gPfdyp0H98oaG4N37VnI8f4AyU9o
f6/yjmtQfFL4nK5D6dOq8VTTZA2l+tMc4Lyg8luNxISqpGODYFX5UQzjobqvAUUSYYIVoIvnxL4O6pWMMYhKqRMlTO5q7yje+3gn
TTKMPCSbGaRCPUzi3R8G5jAbpkIoCTuA94Pc5HN7Ft/QIPc+aFRe6CBySadI5LZsVBFtyP2wzbtNP+YLq6fKUC6xl7fn4SmlOw+O
um496IzwxTytBQzFfaVih+ktUD+XKblEvRSZ0HSPRkpga2simqqO/OyGv/edB5UHFe+rTCzW2ggVick1DtBSl02kTN5tSm7R8NJ2
YcQvHjkYfAs+mQYEHu7t2Tk5uHioxfirI3fu0bYSScKAOrv1Q38vMpDUm+cRw3sRyV/T7l2RKKhJT14CFhJKlDR4eCiFrrLkGZxI
TuLEkDd/oIBxqxRtDFSKNUI1SAoFDNtAbYrQEbnk44lhJjCIpcOyZVkyb2y4AHuP2bZ8GnFv4A5Q4nWgRP7oL4ASOjNu8HRgAqnB
nwbFgUQFtL2nAxU4J1QIFYm6MwQDeQS4VgwFriiXzjAssrzN7TcrW3VmX3KjaXVYXbwXRqvmvTTafKkGnztrkq+M7fKblMzTlibt
FMha/R2n5ZWp8lVKrn6WjVLI/fe0ti8y8dBVTSPHlGbKRSSrwI6KCcns/0hISnHQhCVkECcL8Wjrylp0BcolWkRxpUoyEx4hWbQQ
t54SRgqMXbjX5zEZ7w0k/zSiQBTRcU1DmxjUxVhzeGCaRv5zoGGfErRXKCcFwYAyhK8EIKTC1I9V79dhCs8EEOkw7a2GaeKKiOG0
MHkMuBEJeFWS0CGRCTPeozDDEgYkDJbQYwlQn4EZmt6fhSZLZCGRZYlkLGFAIhfmvJ+FOZbIQyLPEkYskYJEISx4Pw8LLKFxbRq1
xbDo/XNY5NoE12ZQWwpL3qdhiWun0NsU95aJezMhMR1OY5YvhtMsMwOZGZYxY5ksZGbDWci8Gc6yzIXwAj1B8gJLZmPJHCTnwjm0
eeEcS86H8/QEyXmWzBErQc1PQk3kD7gUAJ4DUMNjdQF70N7l9g/RXuD2D9FuTLSvcvsv0V7k9l+iPTXR/gq3/xrtJW7/NdrTw4yY
kjJzipgGQdUJ4gHkxIZmqhFwWFLE6vLWlnSSWxXgYm3bzo9RdBt+2M7GsL4NXLazW27DRYt3Z23FztRAHGXRXF7Z2NzZZ5m0LK/d
tYsj6fuIGY7WhJ2Xb4weL217Ttt3mB9subsuSFfDrfYOd1zPnttyWw7Q4ny9WXODoMVhsp3jMy+iqRSDJdGbcO0k9943Ok3xjUXR
zxD2rFKUXTYpGNyt7zbbgoJaCsPyVLEnMaLnMnQA7xuHdnb19DtRoomP5VfPfM1YlZ8zVvl7drrmttDjzS+VL0YJcgCmaDreEdPK
KIcu6ZPSuZmjp6aIUnE5KpyaPJ2aRrmRi6FX7KkzgMAh+fTZF7iuNPmSrPHiLajvNBv8odxkjV3weUfGrebps12aHDX3VjgdOT9f
GPfVpUUYVU89U23PxP2ekSueq7SnAlIITHG33u7JdcmfqbJnPKkWZ2SK5yrP0/T5bqfbI4kJXKV9+RfCxC5Dpz76r5mAUZMDk9xv
yTnVTuuMidyYLMGpT/6f0zz7vP+YmnTuj1QZcR6rMGfR/0+KPRcU+slgXWgB4k4ybXbTsjWxQCSAD+P2CTK1UJOuX4AL4pfEz8Av
hV8a4J/Bz2wCkvGcwy8fZMIEwFn7fmJgDiAfZr3fALp/Fer4Jb1fMTc0Ec1qBMf+L8AN8yIJANcGxaCwX6S2sIh4OCtSHyTBHn+D
sZZEGrXmcAr80xxOnyi7Y3KxPxMWRAbS5gcJcEsT0rMEvRyafAukA5B79CZoRwm04ya35jDv0nje2n5JPouEyI8DFMi/V2Iqgpyo
CCjQnJAhTXI4H1wEKBdO8MXH7JfLRRka9l+/L8MKuowZI+DoJI5Ow/nwbvTcFNatRf+2pLffIvaX3Nh+8vWv24nNXlBW7dj6yTL7
i1vu+GB50T/TJfVhvcGZbZ6KoYMkH6P0rRVwUSBYHPNYYwW2YmLQvzM+v7I6DY5cEVw9arbGB4Y0oWdeG4+CThE5vor0zoFzVF6I
dD61uXOWXn1zRMiiywSZDVBlmNNObxfoLOMv4QROZFBa70ZpEiI6zZoeza1ubJ9yc/nlew/W7OmmLwPmnS56cVoIBb0LtJgWYTKd
I7jExr1AHidhxeqHMkJgmmhfHo8Ds6SQcBQaQtKjG2NaVLphI8cUJTYBuMCT5t4eBs2EnoM4po1RAiAxcVroNGhVmXSWp7xVkkgT
pSeOHyUwcW+TXt2m5AElb1HykJLvULJFSY2S+5R8l5K3OXKZmDCdENul8/N8LjtdQ3IJuOCvM16ZqgaEmWZmSocLz/wH5sjDQZlq
T9PEaNXCU/2pnpjWCmifVq8Cvbjnz74AeGUSi17uf3gGi2RZY+ShQ0R1X4+RJ8mULDE0mEbqdB5GdJGDkmQAehImBSFJMkwOTSKB
InWQ8J/wU1o+eT+C5WZFfN1NtsqIk0EAMsY+4NJfBUWipUCQaW43J9tjJCkBSYz4yuAmpKZEFlLGGEly+9PyWWgiN4EkxnsGI0l8
jXA6Hsx2JpgFkuQnkKQgkYQxwR7d6VRqteV7FTvJj3YKEWgVjL+fuRWXbn/8FP/6xVv3fbcnOqPa/lcm4Gh55ds3qkh+Gxr1dyZf
ahzcoK74NLQLUPiMl6wdt+H0/DHU1cksjuqPOp0DgEXQ89p4t0r3pcyR+r/3v8GbM9fcpxjjfY/M6YL3fSqvjGO8H1DyR5TUKfk2
JetsccCNNzEQ355+dnSRTkzOazwLVNHsCAfkKTtFWP7e6akNQ4MnRkFlOcX27bmU0Gkvm7adInOXnIgv3gjanmuabyJZVUen9LFp
smGiTAHjFaYC0zBFU5tTx4b35vmzztyk4f1cVeTfuSh00MyRvBZCXQXdur0hD3mGSaohQ9s39lOCjnDuCmOgwZmSiSnSGGG4f4tn
k591lLJcSooUIjZ1P7efhzEaIv0BnTVepBhwWDhBLIXevDBFRvP4zx97ocH9QH5YDA2ODXVhcsRhBCUyKcSJcPBIZ06UuDSL0gX8
5j7jaZ7iMXreTY7IzPBimIYRL5ARk3G1/wbfyR3IWdB38v+v7+Se+c54NdHzz0CEMqi7FCogB9rAjMtFlLNhNsyIEuI4E/nUrdEY
c3KMYeZEZ/A5U0sj53uT6f41/pOG3V5bnoOOPDmdd0Izb5B6jiyF8aO6amsb37WNrUYAG95mdlHW7BSRfBBcO+u0WiiQW/M9/uuA
BOT61Tv3t+jQlK7KvbbTsjrxXaSA/W1Lp0emyX6P0MHCYGqBJCVLREyuX7+K6vL167fxZOuMU/f/T70y3jynW6of9ZusBf6KsPW7
rt+wTb72qguUo7hMfy5SvmwXnxy2lkTncOmw2W4il7wgC8IABkA84EmUQDWsVLbbWRAm363FB3Si0+hR7FaJQ8VU4OxVybcyb5hp
TkJDfIJYYs7Bpi5vMOTV6Qh46G9DaP1lNDr664vRumzyssgLMDeui4NMu7jWDtw9j+NGjpDLJPUsZyEWde7dCWBzGJNq8sDRzq7I
O4pa4HajJK93pNME7ey246F/rvJ2RpBoT9E3N76723RbQka75Zx3wNqDlbYL8YqMFPGQL0LOrEY+VsB4AVKjoNNAAdO3U8RpqGK0
qXSh0uJbF1lBGHwOOumir07Quc3n4nT+XWDINOI4jKKrWWYxhmbEkZemvgiZ0n+BySRnn6kZ8R46t0OkRV8ofyVK1etQiXpdOpwN
Si4884c16x1SZ15ze2p1Ytf4klueTP6QkkeU0MnauUNk7xvjo0g6gPTujf3cHe6Tjj1jRiAPoWHl8uLaPP27L77Hkzd6c5R8mcm5
S6eYTFRVVzqxHBuE6zQexX8Twofd9oL8q5q4TmqVPLaWJJ593/TodpmvVvkClK/e+FKE7x3kmevs6JSReTxTRXZbvKzPvVxN35If
vq2Ogmt9Sp5x8/1XXEqPaeo41WTwPc00dRbbaWm6luZyibc4x9T1KqSgGIl0Kn0lnUnr6UIun76Ynk/PofzN9Gvphf8Gd/hUrg==
""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FSwiftWriterMessageHeader
"""----------------------------------------------------------------------------
MODULE:
    FSwiftWriterMessageHeader

DESCRIPTION:
    A module for class 'FSwiftWriterMessageHeader' which is inherited for generating
    the headers of all outgoing messages

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FSwiftWriterMTFactory
"""----------------------------------------------------------------------------
MODULE:
    FSwiftWriterMTFactory

DESCRIPTION:
    OPEN EXTENSION MODULE
    This module creates the FMTnnn object. The object can be created using
    either swift data or an acm object. It is derived from the FSwiftWriterMTFactoryBase

VERSION: 3.6.3-0.5.6048
----------------------------------------------------------------------------"""
import FSwiftWriterMTFactoryBase
import FSwiftWriterLogger
notifier = FSwiftWriterLogger.FSwiftWriterLogger('SwiftWriter', 'FSwiftWriterNotifyConfig')

'''
# If user intend to develop MT123, he need to import the FMT123
try:
    import FMT123
except Exception, e:
    pass
'''

class FSwiftWriterMTFactory(FSwiftWriterMTFactoryBase.FSwiftWriterMTFactoryBase):
    """ FMTFactory class to create MT object as per message type"""
    @staticmethod
    def create_fmt_object(acm_object, msg_type):
        if msg_type == 'MT123':
            '''
            # Create object of the FMT123
            return FMT123.FMT123(source, direction)
            '''
            pass
        else:
            return FSwiftWriterMTFactoryBase.FSwiftWriterMTFactoryBase.create_fmt_object(acm_object, msg_type)

    @staticmethod
    def create_fmt_header_object(msg_type, acm_object, swift_msg_tags):
        if msg_type == 'MT123':
            '''
            return FMT300Out.FMT300MessageHeader(acm_object, swift_msg_tags)
            '''
            pass
        else:
            return FSwiftWriterMTFactoryBase.FSwiftWriterMTFactoryBase.create_fmt_header_object(msg_type, acm_object, swift_msg_tags)

    @staticmethod
    def create_fmt_network_rules_object(msg_type, swift_message_obj, swift_message, acm_obj):
        if msg_type == 'MT123':
            '''
            return FMT300Out.FMT300MessageHeader(acm_object, swift_msg_tags)
            '''
            pass
        else:
            return FSwiftWriterMTFactoryBase.FSwiftWriterMTFactoryBase.create_fmt_network_rules_object(msg_type, swift_message_obj, swift_message, acm_obj)



...

  FSwiftWriterMTFactoryBase
"""----------------------------------------------------------------------------
MODULE:
    FSwiftWriterMTFactoryBase

DESCRIPTION:
    OPEN EXTENSION MODULE
    FSwiftWriterMTFactory is derived from this class

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FSwiftWriterTestMeGUI
"""------------------------------------------------------------------------
MODULE
    FSwiftWriterTestMeGUI
DESCRIPTION:
    This file creats the GUI for TestMe functionality.

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
--------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FSwiftWriterUtils
"""----------------------------------------------------------------------------
MODULE:
    FSwiftWriterUtils

DESCRIPTION:
    ENCRYPTED EXTENSION MODULE
    This module defines the APIs and helper functions common to the SwiftWriter framework.

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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
Z/VLw50+x1VvmLeS9PKGIfMnWtFH3tj/qbN2MFIYJWxTqKgsgoF3riBvPQhJvLsC8UwQqguhrIZg18DQv/GJ6jyJOE+i9ISwQh/O
QFNX2Xym/kQE66l92KTydbxjxebjFc2ZgW00A3+PWhLdGCiEEfexFy7pBHt0zu2C/gR3ix6rDyJM1aTJBJ8l9SN4nOJOnyqeKeQs
9qxsfpKTvfupIueQbrN/FO9hLtDU+hTyhQjoC8P8ca4JgEFm/jHk+zQSkzOYqV5pelLkTGu5fh/NzszwO3rsEoVPEYBZJ86LY4Zl
eG69GHLPA1E2KzghD6pO9SbMqWCiFb6pac33cZoz5mcwQwJNfwBL0G+zWMMI6IoI6DTuOoymgi8EdE3aSughIyxP0bum6BERhfET
w6nyW9ODorholdJTdZw6ll1MOwKLdQe03+dlZGF34X6pI6rDVhaW8wZdzwQUTDAVKzfzNtUz0OijNc78pDPrf0ENOM4N8BVov4jC
l49oEwnRLpKiQ8CNcZfoFj1ig+gVG0Wf2CQ2iy1iq7hDbBPbRVrcKXaIu8TdYqfYJXaLPaJf3CPuFfeJ+8WAeEDsFfvEfnFAHBSH
xGHxoHhIHBFHxevEMfF68bB4RDwqBsVxMSSGxYgYFY+Jx8UJ8YR48sYTVYVq8/9volrl/3bnH3X2U/mPUOz+3+v8P0Dp9f8DVLv8
P+L8o273f8T5P0H/J28crapi7P9H/+M3ZqvBHFPCFQj+g7Ma0TQpUMKEZEPO7v2vWqo4RXgnbAUrYXFaBKRfheuq+TDRDxF58iPl
j7jnfFksGi4L8YYqDu3WpKUXix5ihNNiRClNXMAmq9Nishq9rl487XgznGJj/JVKFKE4s+J7e5WwXiZWCczHVuLiKXl3NlDYTJxk
23V1+bOOEkJDus+z9Fl5kOea0r6m7F5T9qwp/WvKveZbAGBAW9jKAEuTbWWvreyzlf22csBWDtrKIVs5bCsP2spDtnLE/Hcu4xFb
GbSV47YyZCvDtjJiK6O28pitPG4rJ2zlCVt50lZO2sqYrYzbyilbOW0rb7CVCVuZtJUpWzljK0/ZyllbOWcrT9uKbitZW5k2/8Tj
MJ9nh7uztjJnK+fNH+a7eVu5YCt585eZc+Wkoq0s2spFWzFtpWQrlq0s2colW7lsK1fMX+Is5f4naljONUDB2m4EoIJrEKvX7kUA
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""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  FTreasuryOutBase
"""----------------------------------------------------------------------------
MODULE:
    FTreasuryOutBase

DESCRIPTION:
    A module for common getter formatter functions used across treasury out base files

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
from FMTOutBase import FMTOutBase
import datetime

try:
    from FFXMMConfirmationOutUtils import *
except Exception as e:
    from FIRDConfirmationOutUtils import *

import FSwiftConfirmationUtils, FSwiftWriterMTFactory
import FIntegrationUtils, FMTFactory


class FTreasuryOutBase(FMTOutBase):
    def __init__(self, acm_obj, swift_obj):
        super(FTreasuryOutBase, self).__init__(acm_obj, swift_obj)

    def should_handle_cancellation(self):
        """
        This function decides whether to provide the implementation for the cancellation
        :return: boolean
        """
        return self.acm_obj.RecordType() == 'Confirmation' and self.acm_obj.Type() == 'Cancellation'

    #Method to handle the cancellation of messages
    def handle_cancellation_message(self, message_type, acm_object):
        '''Returns cancellation message and python object'''
        try:
            swift_message = FSwiftMLUtils.get_outgoing_mt_message(acm_object.ConfirmationReference())
            canc_message = ''
            swift_obj = None
            utils_obj = FIntegrationUtils.FIntegrationUtils()
            module = utils_obj.import_module_from_string(message_type)

            swift_obj = FSwiftWriterUtils.create_pyobj_from_swift_msg(swift_message)
            if swift_obj:
                val = swift_obj.SequenceA_GeneralInformation.SendersReference.value()
                swift_obj.SequenceA_GeneralInformation.RelatedReference = eval("module.%s_SequenceA_GeneralInformation_21_Type('%s')"%(message_type, val))
                swift_obj.SequenceA_GeneralInformation.RelatedReference.swiftTag = "21"

                swift_obj.SequenceA_GeneralInformation.TypeOfOperation = eval("module.%s_SequenceA_GeneralInformation_22A_Type('CANC')"%(message_type))
                swift_obj.SequenceA_GeneralInformation.TypeOfOperation.swiftTag = "22A"

                mt_class_obj = FSwiftWriterMTFactory.FSwiftWriterMTFactory.create_fmt_object(acm_object, message_type)
                mt_class_obj.swift_obj = swift_obj
                getter_value = mt_class_obj.senders_reference_20()
                formatter_value = mt_class_obj._format_senders_reference_20(getter_value)
                validate_value = mt_class_obj._validate_senders_reference_20(formatter_value)
                mt_class_obj._set_senders_reference_20(validate_value)
                canc_message = FSwiftWriterUtils.create_swift_msg_from_pyobj(swift_obj)

        except Exception as e:
            raise e
        return canc_message, swift_obj

    def _format_common_reference_22C(self, val):
        senders_bic = val.get('senders_bic')
        receivers_bic = val.get('receivers_bic')
        termination_date = val.get('termination_date')
        common_reference = ''
        termination_date_part = datetime.datetime.strptime(termination_date, '%Y-%m-%d').strftime('%y%m')
        if senders_bic and receivers_bic and termination_date_part:
            receivers_bank_code = receivers_bic[0:4]
            receivers_location_code = receivers_bic[6:8]
            senders_bank_code = senders_bic[0:4]
            senders_location_code = senders_bic[6:8]

            receivers_bank_location_code = "{}{}".format(receivers_bank_code, receivers_location_code)
            senders_bank_location_code = "{}{}".format(senders_bank_code, senders_location_code)

            if receivers_bank_location_code > senders_bank_location_code:
                common_reference = "{}{}{}".format(senders_bank_location_code, termination_date_part, receivers_bank_location_code)
            else:
                common_reference = "{}{}{}".format(receivers_bank_location_code, termination_date_part, senders_bank_location_code)
            return str(common_reference)


    # ------- partyA - 82A ----------------------------------
    # getter
    def partyA_82A(self):
        ''' Returns a dictionary with keys 'ACCOUNT', 'BIC' and their corresponding values '''
        return get_party_a_details(self.acm_obj)

    # formatter
    def _format_partyA_82A(self, val):
        bic = val.get('BIC')
        account = val.get('ACCOUNT')
        if bic:
            val = str(bic)
            if account:
                val = "/" + str(account) + "\n" + str(val)
            return val

    # ------- partyA - 82D ----------------------------------
    # getter
    def partyA_82D(self):
        '''Returns dictionary with keys 'NAME', 'ACCOUNT', 'ADDRESS' and their corresponding values '''
        return get_party_a_details(self.acm_obj)

    # formatter
    def _format_partyA_82D(self, val):
        name = val.get('NAME')
        account = val.get('ACCOUNT')
        address = val.get('ADDRESS')
        if name and address:
            name = FSwiftWriterUtils.split_text_and_prefix(name, 35)
            address = FSwiftWriterUtils.split_text_and_prefix(address, 35)
            val = FSwiftWriterUtils.allocate_space_for_name_address_without_constraint(name, address)
            if account:
                val = "/" + str(account) + "\n" + str(val)
            return val

    # ------- partyA - 82J ----------------------------------
    # getter
    def partyA_82J(self):
        '''Returns dictionary with keys 'NAME', 'ACCOUNT', 'ADDRESS' and their corresponding values '''
        return get_party_a_details(self.acm_obj)


    # formatter
    def _format_partyA_82J(self, val):
        return self._format_Option_J(val)
    # ------- partyB - 87A ----------------------------------
    # getter
    def partyB_87A(self):
        ''' Returns a dictionary with keys 'ACCOUNT', 'BIC' and their corresponding values '''
        return get_party_b_details(self.acm_obj)


    # formatter
    def _format_partyB_87A(self, val):
        bic = val.get('BIC')
        account = val.get('ACCOUNT')
        if bic:
            val = str(bic)
            if account:
                val = "/" + str(account) + "\n" + str(val)
            return val

    # ------- partyB - 87D  ----------------------------------
    # getter
    def partyB_87D(self):
        '''Returns dictionary with keys 'NAME', 'ACCOUNT', 'ADDRESS' and their corresponding values '''
        return get_party_b_details(self.acm_obj)


    # formatter
    def _format_partyB_87D(self, val):
        name = val.get('NAME')
        account = val.get('ACCOUNT')
        address = val.get('ADDRESS')
        if name and address:
            name = FSwiftWriterUtils.split_text_and_prefix(name, 35)
            address = FSwiftWriterUtils.split_text_and_prefix(address, 35)
            val = FSwiftWriterUtils.allocate_space_for_name_address_without_constraint(name, address)
            if account:
                val = "/" + str(account) + "\n" + str(val)
            return val

    # ------- partyB - 87J  ----------------------------------
    # getter
    def partyB_87J(self):
        '''Returns dictionary with keys 'NAME', 'ACCOUNT', 'ADDRESS' and their corresponding values '''
        return get_party_b_details(self.acm_obj)


    # formatter
    def _format_partyB_87J(self, val):
        return self._format_Option_J(val)

    # ------- formatter for Option J-----------------------------
    def _format_Option_J(self, val):
        name = val.get('NAME')
        account = val.get('ACCOUNT')
        address = val.get('ADDRESS')
        bic = val.get('BIC')

        if name:
            val = '/ABIC/' + (bic or 'UKWN')
            if account:
                val = val + "/ACCT/" + account
            if address:
                val = val + '/ADD1/' + address
            val = str(val) + '/NAME/' + str(name)
            lines = FSwiftWriterUtils.split_text_on_character_limit(val, 40)
            val = FSwiftWriterUtils.allocate_space_for_n_lines(5, lines)
            return val

    # ------- Senders reference ----------------------------------
    def senders_reference_20(self):
        """ Expected return type : A string containing senders's reference"""
        confirmation_prefix = get_confirmation_reference_prefix()
        fxmm_out_config = FSwiftWriterUtils.get_config_from_fparameter('FFXMMConfirmationOut_Config')
        include_tradeno_in_tag_20 = FSwiftMLUtils.incude_trade_no_in_tag20(fxmm_out_config)
        val = FSwiftMLUtils.get_sender_ref(self.acm_obj, confirmation_prefix, include_tradeno_in_tag_20=include_tradeno_in_tag_20)
        return val

    def _format_senders_reference_20(self, val):
        if val:
            val = FSwiftMLUtils.format_sender_reference(val)
        return val

    # ------- Trade date - 30T----------------------------------
    def trade_date_30T(self):
        trade_date = FSwiftConfirmationUtils.get_trade_date(self.acm_obj)
        return trade_date

    def _format_trade_date_30T(self, val):
        if val:
            date_format = '%Y%m%d'
            val = FSwiftWriterUtils.format_date(val, date_format)
            return str(val)

    # ------------------ type_of_operation -----------------------
    # getter
    def type_of_operation_22A(self):
        ''' Returns type of operation code as string  '''
        return get_type_of_operation(self.acm_obj)

    # formatter
    def _format_type_of_operation_22A(self, val):
        return val

    # ------------------ scope_of_operation -----------------------
    # getter
    def scope_of_operation_94A(self):
        '''Returns scope of operations code as string '''
        return get_scope_of_operation(self.acm_obj)

    # formatter
    def _format_scope_of_operation_94A(self, val):
        return val


...

  InstalledComponentSWIFT
'''---------------------------------------------------------------------------------
 Python file name must be InstalledComponent_theNameOfTheComponent, i.e. unique, so
 as not to override other installed components

---------------------------------------------------------------------------------'''
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  MTx99
# C:\Projects\Xsds\MTx99.py
# -*- coding: utf-8 -*-
# PyXB bindings for NM:96afad3d20bbfe8d040a1a097fa388d9fecd10e3
# Generated 2019-10-22 17:01:40.499222 by PyXB version 1.2.6 using Python 3.7.4.final.0
# Namespace http://www.w3schools.com

from __future__ import unicode_literals
import pyxb
import pyxb.binding
import pyxb.binding.saxer
import io
import pyxb.utils.utility
import pyxb.utils.domutils
import sys
import pyxb.utils.six as _six

# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:83ff3db6-f4bf-11e9-81f6-484d7e9b1690')

# Version of PyXB used to generate the bindings
_PyXBVersion = '1.2.6'
# Generated bindings are not compatible across PyXB versions
if pyxb.__version__ != _PyXBVersion:
    raise pyxb.PyXBVersionError(_PyXBVersion)

# A holder for module-level binding classes so we can access them from
# inside class definitions where property names may conflict.
_module_typeBindings = pyxb.utils.utility.Object()

# Import bindings for namespaces imported into schema
import pyxb.binding.datatypes

# NOTE: All namespace declarations are reserved within the binding
Namespace = pyxb.namespace.NamespaceForURI('http://www.w3schools.com', create_if_missing=True)
Namespace.configureCategories(['typeBinding', 'elementBinding'])


def CreateFromDocument(xml_text, default_namespace=None, location_base=None):
    """Parse the given XML and use the document element to create a
    Python instance.

    @param xml_text An XML document.  This should be data (Python 2
    str or Python 3 bytes), or a text (Python 2 unicode or Python 3
    str) in the L{pyxb._InputEncoding} encoding.

    @keyword default_namespace The L{pyxb.Namespace} instance to use as the
    default namespace where there is no default namespace in scope.
    If unspecified or C{None}, the namespace of the module containing
    this function will be used.

    @keyword location_base: An object to be recorded as the base of all
    L{pyxb.utils.utility.Location} instances associated with events and
    objects handled by the parser.  You might pass the URI from which
    the document was obtained.
    """

    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement, default_namespace=default_namespace)
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    saxer = pyxb.binding.saxer.make_parser(fallback_namespace=default_namespace, location_base=location_base)
    handler = saxer.getContentHandler()
    xmld = xml_text
    if isinstance(xmld, _six.text_type):
        xmld = xmld.encode(pyxb._InputEncoding)
    saxer.parse(io.BytesIO(xmld))
    instance = handler.rootObject()
    return instance


def CreateFromDOM(node, default_namespace=None):
    """Create a Python instance from the given DOM node.
    The node tag must correspond to an element declaration in this module.

    @deprecated: Forcing use of DOM interface is unnecessary; use L{CreateFromDocument}."""
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return pyxb.binding.basis.element.AnyCreateFromDOM(node, default_namespace)


# Atomic simple type: {http://www.w3schools.com}MTx99_20_Type_Pattern
class MTx99_20_Type_Pattern(pyxb.binding.datatypes.string):
    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MTx99_20_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location(
        'C:\\Projects\\Xsds\\MTx99.xsd', 3, 1)
    _Documentation = None


MTx99_20_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MTx99_20_Type_Pattern._CF_pattern.addPattern(
    pattern="([^/]([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,14}[^/])")
MTx99_20_Type_Pattern._InitializeFacetMap(MTx99_20_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MTx99_20_Type_Pattern', MTx99_20_Type_Pattern)
_module_typeBindings.MTx99_20_Type_Pattern = MTx99_20_Type_Pattern


# Atomic simple type: {http://www.w3schools.com}MTx99_21_Type_Pattern
class MTx99_21_Type_Pattern(pyxb.binding.datatypes.string):
    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MTx99_21_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location(
        'C:\\Projects\\Xsds\\MTx99.xsd', 16, 1)
    _Documentation = None


MTx99_21_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MTx99_21_Type_Pattern._CF_pattern.addPattern(
    pattern="([^/]([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,14}[^/])")
MTx99_21_Type_Pattern._InitializeFacetMap(MTx99_21_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MTx99_21_Type_Pattern', MTx99_21_Type_Pattern)
_module_typeBindings.MTx99_21_Type_Pattern = MTx99_21_Type_Pattern


# Atomic simple type: {http://www.w3schools.com}MTx99_79_Type_Pattern
class MTx99_79_Type_Pattern(pyxb.binding.datatypes.string):
    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MTx99_79_Type_Pattern')
    _XSDLocation = pyxb.utils.utility.Location(
        'C:\\Projects\\Xsds\\MTx99.xsd', 29, 1)
    _Documentation = None


MTx99_79_Type_Pattern._CF_pattern = pyxb.binding.facets.CF_pattern()
MTx99_79_Type_Pattern._CF_pattern.addPattern(
    pattern="((([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,48}\n?){1,35})")
MTx99_79_Type_Pattern._InitializeFacetMap(MTx99_79_Type_Pattern._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'MTx99_79_Type_Pattern', MTx99_79_Type_Pattern)
_module_typeBindings.MTx99_79_Type_Pattern = MTx99_79_Type_Pattern


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(
        'C:\\Projects\\Xsds\\MTx99.xsd', 43, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.w3schools.com}TransactionReferenceNumber uses Python identifier TransactionReferenceNumber
    __TransactionReferenceNumber = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, 'TransactionReferenceNumber'), 'TransactionReferenceNumber',
        '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comTransactionReferenceNumber', False,
        pyxb.utils.utility.Location(
            'C:\\Projects\\Xsds\\MTx99.xsd', 45,
            4), )

    TransactionReferenceNumber = property(__TransactionReferenceNumber.value, __TransactionReferenceNumber.set, None,
                                          None)

    # Element {http://www.w3schools.com}RelatedReference uses Python identifier RelatedReference
    __RelatedReference = pyxb.binding.content.ElementDeclaration(
        pyxb.namespace.ExpandedName(Namespace, 'RelatedReference'), 'RelatedReference',
        '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comRelatedReference', False, pyxb.utils.utility.Location(
            'C:\\Projects\\Xsds\\MTx99.xsd', 46,
            4), )

    RelatedReference = property(__RelatedReference.value, __RelatedReference.set, None, None)

    # Element {http://www.w3schools.com}Narrative uses Python identifier Narrative
    __Narrative = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Narrative'),
                                                          'Narrative',
                                                          '__httpwww_w3schools_com_CTD_ANON_httpwww_w3schools_comNarrative',
                                                          False, pyxb.utils.utility.Location(
            'C:\\Projects\\Xsds\\MTx99.xsd', 47,
            4), )

    Narrative = property(__Narrative.value, __Narrative.set, None, None)

    _ElementMap.update({
        __TransactionReferenceNumber.name(): __TransactionReferenceNumber,
        __RelatedReference.name(): __RelatedReference,
        __Narrative.name(): __Narrative
    })
    _AttributeMap.update({

    })


_module_typeBindings.CTD_ANON = CTD_ANON


# Complex type {http://www.w3schools.com}MTx99_20_Type with content type SIMPLE
class MTx99_20_Type(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MTx99_20_Type with content type SIMPLE"""
    _TypeDefinition = MTx99_20_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MTx99_20_Type')
    _XSDLocation = pyxb.utils.utility.Location(
        'C:\\Projects\\Xsds\\MTx99.xsd', 8, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MTx99_20_Type_Pattern

    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag',
                                                   '__httpwww_w3schools_com_MTx99_20_Type_swiftTag',
                                                   pyxb.binding.datatypes.anySimpleType, fixed=True,
                                                   unicode_default='20')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location(
        'C:\\Projects\\Xsds\\MTx99.xsd', 11, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location(
        'C:\\Projects\\Xsds\\MTx99.xsd', 11, 4)

    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory',
                                                      '__httpwww_w3schools_com_MTx99_20_Type_isMandatory',
                                                      pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location(
        'C:\\Projects\\Xsds\\MTx99.xsd', 12, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location(
        'C:\\Projects\\Xsds\\MTx99.xsd', 12, 4)

    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __swiftTag.name(): __swiftTag,
        __isMandatory.name(): __isMandatory
    })


_module_typeBindings.MTx99_20_Type = MTx99_20_Type
Namespace.addCategoryObject('typeBinding', 'MTx99_20_Type', MTx99_20_Type)


# Complex type {http://www.w3schools.com}MTx99_21_Type with content type SIMPLE
class MTx99_21_Type(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MTx99_21_Type with content type SIMPLE"""
    _TypeDefinition = MTx99_21_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MTx99_21_Type')
    _XSDLocation = pyxb.utils.utility.Location(
        'C:\\Projects\\Xsds\\MTx99.xsd', 21, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MTx99_21_Type_Pattern

    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag',
                                                   '__httpwww_w3schools_com_MTx99_21_Type_swiftTag',
                                                   pyxb.binding.datatypes.anySimpleType, fixed=True,
                                                   unicode_default='21')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location(
        'C:\\Projects\\Xsds\\MTx99.xsd', 24, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location(
        'C:\\Projects\\Xsds\\MTx99.xsd', 24, 4)

    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory',
                                                      '__httpwww_w3schools_com_MTx99_21_Type_isMandatory',
                                                      pyxb.binding.datatypes.anySimpleType, unicode_default='False')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location(
        'C:\\Projects\\Xsds\\MTx99.xsd', 25, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location(
        'C:\\Projects\\Xsds\\MTx99.xsd', 25, 4)

    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __swiftTag.name(): __swiftTag,
        __isMandatory.name(): __isMandatory
    })


_module_typeBindings.MTx99_21_Type = MTx99_21_Type
Namespace.addCategoryObject('typeBinding', 'MTx99_21_Type', MTx99_21_Type)


# Complex type {http://www.w3schools.com}MTx99_79_Type with content type SIMPLE
class MTx99_79_Type(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3schools.com}MTx99_79_Type with content type SIMPLE"""
    _TypeDefinition = MTx99_79_Type_Pattern
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MTx99_79_Type')
    _XSDLocation = pyxb.utils.utility.Location(
        'C:\\Projects\\Xsds\\MTx99.xsd', 34, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is MTx99_79_Type_Pattern

    # Attribute swiftTag uses Python identifier swiftTag
    __swiftTag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'swiftTag'), 'swiftTag',
                                                   '__httpwww_w3schools_com_MTx99_79_Type_swiftTag',
                                                   pyxb.binding.datatypes.anySimpleType, fixed=True,
                                                   unicode_default='79')
    __swiftTag._DeclarationLocation = pyxb.utils.utility.Location(
        'C:\\Projects\\Xsds\\MTx99.xsd', 37, 4)
    __swiftTag._UseLocation = pyxb.utils.utility.Location(
        'C:\\Projects\\Xsds\\MTx99.xsd', 37, 4)

    swiftTag = property(__swiftTag.value, __swiftTag.set, None, None)

    # Attribute isMandatory uses Python identifier isMandatory
    __isMandatory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'isMandatory'), 'isMandatory',
                                                      '__httpwww_w3schools_com_MTx99_79_Type_isMandatory',
                                                      pyxb.binding.datatypes.anySimpleType, unicode_default='True')
    __isMandatory._DeclarationLocation = pyxb.utils.utility.Location(
        'C:\\Projects\\Xsds\\MTx99.xsd', 38, 4)
    __isMandatory._UseLocation = pyxb.utils.utility.Location(
        'C:\\Projects\\Xsds\\MTx99.xsd', 38, 4)

    isMandatory = property(__isMandatory.value, __isMandatory.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __swiftTag.name(): __swiftTag,
        __isMandatory.name(): __isMandatory
    })


_module_typeBindings.MTx99_79_Type = MTx99_79_Type
Namespace.addCategoryObject('typeBinding', 'MTx99_79_Type', MTx99_79_Type)

MTx99 = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MTx99'), CTD_ANON,
                                   location=pyxb.utils.utility.Location(
                                       'C:\\Projects\\Xsds\\MTx99.xsd',
                                       42, 1))
Namespace.addCategoryObject('elementBinding', MTx99.name().localName(), MTx99)

CTD_ANON._AddElement(
    pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TransactionReferenceNumber'), MTx99_20_Type,
                               scope=CTD_ANON, location=pyxb.utils.utility.Location(
            'C:\\Projects\\Xsds\\MTx99.xsd', 45,
            4)))

CTD_ANON._AddElement(
    pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RelatedReference'), MTx99_21_Type,
                               scope=CTD_ANON, location=pyxb.utils.utility.Location(
            'C:\\Projects\\Xsds\\MTx99.xsd', 46,
            4)))

CTD_ANON._AddElement(
    pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Narrative'), MTx99_79_Type, scope=CTD_ANON,
                               location=pyxb.utils.utility.Location(
                                   'C:\\Projects\\Xsds\\MTx99.xsd',
                                   47, 4)))


def _BuildAutomaton():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton
    del _BuildAutomaton
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(
        'C:\\Projects\\Xsds\\MTx99.xsd', 46, 4))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TransactionReferenceNumber')),
        pyxb.utils.utility.Location(
            'C:\\Projects\\Xsds\\MTx99.xsd', 45, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(
        CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RelatedReference')), pyxb.utils.utility.Location(
            'C:\\Projects\\Xsds\\MTx99.xsd', 46, 4))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Narrative')),
                                             pyxb.utils.utility.Location(
                                                 'C:\\Projects\\Xsds\\MTx99.xsd',
                                                 47, 4))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
    ]))
    transitions.append(fac.Transition(st_2, [
    ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON._Automaton = _BuildAutomaton()




...

  NarrativeMessageAPIs
"""----------------------------------------------------------------------------
MODULE:
    NarrativeMessageAPIs


DESCRIPTION:
    This file is having function related to Narrative messages APIs

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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
VA==""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  pyxb_customizations
"""-------------------------------------------------------------------------------
MODULE:
      pyxb_customizations

DESCRIPTION:
      This module contains the implementation of the GUI to show the SWIFT messages.

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user end.
-------------------------------------------------------------------------------"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

  saa20
# C:\Users\E1077313\Downloads\saa20.py
# -*- coding: utf-8 -*-
# PyXB bindings for NM:0d83b75bd165c9b12fa0911d4a98a5e52e714ef7
# Generated 2022-02-07 12:10:19.407836 by PyXB version 1.2.6 using Python 3.9.7.final.0
# Namespace urn:swift:saa:xsd:saa.2.0

from __future__ import unicode_literals
import pyxb
import pyxb.binding
import pyxb.binding.saxer
import io
import pyxb.utils.utility
import pyxb.utils.domutils
import sys
import pyxb.utils.six as _six
# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:d11ae85c-87e0-11ec-8d0b-8032532837d6')

# Version of PyXB used to generate the bindings
_PyXBVersion = '1.2.6'
# Generated bindings are not compatible across PyXB versions
if pyxb.__version__ != _PyXBVersion:
    raise pyxb.PyXBVersionError(_PyXBVersion)

# A holder for module-level binding classes so we can access them from
# inside class definitions where property names may conflict.
_module_typeBindings = pyxb.utils.utility.Object()

# Import bindings for namespaces imported into schema
import pyxb.binding.datatypes

# NOTE: All namespace declarations are reserved within the binding
Namespace = pyxb.namespace.NamespaceForURI('urn:swift:saa:xsd:saa.2.0', create_if_missing=True)
Namespace.configureCategories(['typeBinding', 'elementBinding'])

def CreateFromDocument (xml_text, default_namespace=None, location_base=None):
    """Parse the given XML and use the document element to create a
    Python instance.

    @param xml_text An XML document.  This should be data (Python 2
    str or Python 3 bytes), or a text (Python 2 unicode or Python 3
    str) in the L{pyxb._InputEncoding} encoding.

    @keyword default_namespace The L{pyxb.Namespace} instance to use as the
    default namespace where there is no default namespace in scope.
    If unspecified or C{None}, the namespace of the module containing
    this function will be used.

    @keyword location_base: An object to be recorded as the base of all
    L{pyxb.utils.utility.Location} instances associated with events and
    objects handled by the parser.  You might pass the URI from which
    the document was obtained.
    """

    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement, default_namespace=default_namespace)
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    saxer = pyxb.binding.saxer.make_parser(fallback_namespace=default_namespace, location_base=location_base)
    handler = saxer.getContentHandler()
    xmld = xml_text
    if isinstance(xmld, _six.text_type):
        xmld = xmld.encode(pyxb._InputEncoding)
    saxer.parse(io.BytesIO(xmld))
    instance = handler.rootObject()
    return instance

def CreateFromDOM (node, default_namespace=None):
    """Create a Python instance from the given DOM node.
    The node tag must correspond to an element declaration in this module.

    @deprecated: Forcing use of DOM interface is unnecessary; use L{CreateFromDocument}."""
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return pyxb.binding.basis.element.AnyCreateFromDOM(node, default_namespace)


# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}X1
class X1 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'X1')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 9, 1)
    _Documentation = None
X1._CF_length = pyxb.binding.facets.CF_length(value=pyxb.binding.datatypes.nonNegativeInteger(11))
X1._InitializeFacetMap(X1._CF_length)
Namespace.addCategoryObject('typeBinding', 'X1', X1)
_module_typeBindings.X1 = X1

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}X2
class X2 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'X2')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 14, 1)
    _Documentation = None
X2._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(20))
X2._InitializeFacetMap(X2._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'X2', X2)
_module_typeBindings.X2 = X2

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}X3
class X3 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'X3')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 19, 1)
    _Documentation = None
X3._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(20))
X3._InitializeFacetMap(X3._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'X3', X3)
_module_typeBindings.X3 = X3

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}X4
class X4 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'X4')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 24, 1)
    _Documentation = None
X4._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(20))
X4._InitializeFacetMap(X4._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'X4', X4)
_module_typeBindings.X4 = X4

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}FinancialInstitution
class FinancialInstitution (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FinancialInstitution')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 29, 1)
    _Documentation = None
FinancialInstitution._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(105))
FinancialInstitution._InitializeFacetMap(FinancialInstitution._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'FinancialInstitution', FinancialInstitution)
_module_typeBindings.FinancialInstitution = FinancialInstitution

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}BranchInformation
class BranchInformation (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BranchInformation')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 34, 1)
    _Documentation = None
BranchInformation._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(70))
BranchInformation._InitializeFacetMap(BranchInformation._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'BranchInformation', BranchInformation)
_module_typeBindings.BranchInformation = BranchInformation

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}CityName
class CityName (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CityName')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 39, 1)
    _Documentation = None
CityName._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(35))
CityName._InitializeFacetMap(CityName._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'CityName', CityName)
_module_typeBindings.CityName = CityName

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}Location
class Location (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Location')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 44, 1)
    _Documentation = None
Location._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(105))
Location._InitializeFacetMap(Location._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'Location', Location)
_module_typeBindings.Location = Location

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}Countrycode
class Countrycode (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Countrycode')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 49, 1)
    _Documentation = None
Countrycode._CF_length = pyxb.binding.facets.CF_length(value=pyxb.binding.datatypes.nonNegativeInteger(2))
Countrycode._InitializeFacetMap(Countrycode._CF_length)
Namespace.addCategoryObject('typeBinding', 'Countrycode', Countrycode)
_module_typeBindings.Countrycode = Countrycode

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}Nickname
class Nickname (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Nickname')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 54, 1)
    _Documentation = None
Nickname._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
Nickname._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(31))
Nickname._InitializeFacetMap(Nickname._CF_minLength,
   Nickname._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'Nickname', Nickname)
_module_typeBindings.Nickname = Nickname

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}DN
class DN (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DN')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 60, 1)
    _Documentation = None
DN._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
DN._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(100))
DN._InitializeFacetMap(DN._CF_minLength,
   DN._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'DN', DN)
_module_typeBindings.DN = DN

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}BIC12
class BIC12 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BIC12')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 66, 1)
    _Documentation = None
BIC12._CF_length = pyxb.binding.facets.CF_length(value=pyxb.binding.datatypes.nonNegativeInteger(12))
BIC12._InitializeFacetMap(BIC12._CF_length)
Namespace.addCategoryObject('typeBinding', 'BIC12', BIC12)
_module_typeBindings.BIC12 = BIC12

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}BIC8
class BIC8 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BIC8')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 71, 1)
    _Documentation = None
BIC8._CF_length = pyxb.binding.facets.CF_length(value=pyxb.binding.datatypes.nonNegativeInteger(8))
BIC8._InitializeFacetMap(BIC8._CF_length)
Namespace.addCategoryObject('typeBinding', 'BIC8', BIC8)
_module_typeBindings.BIC8 = BIC8

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}RoutingPoint
class RoutingPoint (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RoutingPoint')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 76, 1)
    _Documentation = None
RoutingPoint._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(20))
RoutingPoint._InitializeFacetMap(RoutingPoint._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'RoutingPoint', RoutingPoint)
_module_typeBindings.RoutingPoint = RoutingPoint

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}MACPACValue
class MACPACValue (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MACPACValue')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 81, 1)
    _Documentation = None
MACPACValue._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(8))
MACPACValue._InitializeFacetMap(MACPACValue._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'MACPACValue', MACPACValue)
_module_typeBindings.MACPACValue = MACPACValue

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}ChecksumValue
class ChecksumValue (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ChecksumValue')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 86, 1)
    _Documentation = None
ChecksumValue._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(12))
ChecksumValue._InitializeFacetMap(ChecksumValue._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'ChecksumValue', ChecksumValue)
_module_typeBindings.ChecksumValue = ChecksumValue

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}UserPriority
class UserPriority (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'UserPriority')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 91, 1)
    _Documentation = None
UserPriority._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(4))
UserPriority._InitializeFacetMap(UserPriority._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'UserPriority', UserPriority)
_module_typeBindings.UserPriority = UserPriority

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}CopyService
class CopyService (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CopyService')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 96, 1)
    _Documentation = None
CopyService._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(3))
CopyService._InitializeFacetMap(CopyService._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'CopyService', CopyService)
_module_typeBindings.CopyService = CopyService

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}Service
class Service (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Service')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 101, 1)
    _Documentation = None
Service._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(30))
Service._InitializeFacetMap(Service._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'Service', Service)
_module_typeBindings.Service = Service

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}UserReference
class UserReference (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'UserReference')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 106, 1)
    _Documentation = None
UserReference._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(30))
UserReference._InitializeFacetMap(UserReference._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'UserReference', UserReference)
_module_typeBindings.UserReference = UserReference

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}RoutingCode
class RoutingCode (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RoutingCode')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 111, 1)
    _Documentation = None
RoutingCode._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(16))
RoutingCode._InitializeFacetMap(RoutingCode._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'RoutingCode', RoutingCode)
_module_typeBindings.RoutingCode = RoutingCode

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}SenderReference
class SenderReference (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SenderReference')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 116, 1)
    _Documentation = None
SenderReference._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(0))
SenderReference._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(70))
SenderReference._InitializeFacetMap(SenderReference._CF_minLength,
   SenderReference._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'SenderReference', SenderReference)
_module_typeBindings.SenderReference = SenderReference

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}CBTReference
class CBTReference (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CBTReference')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 122, 1)
    _Documentation = None
CBTReference._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(40))
CBTReference._InitializeFacetMap(CBTReference._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'CBTReference', CBTReference)
_module_typeBindings.CBTReference = CBTReference

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}MessageIdentifier
class MessageIdentifier (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MessageIdentifier')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 127, 1)
    _Documentation = None
MessageIdentifier._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
MessageIdentifier._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(30))
MessageIdentifier._InitializeFacetMap(MessageIdentifier._CF_minLength,
   MessageIdentifier._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'MessageIdentifier', MessageIdentifier)
_module_typeBindings.MessageIdentifier = MessageIdentifier

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}MessageSyntaxVersion
class MessageSyntaxVersion (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MessageSyntaxVersion')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 133, 1)
    _Documentation = None
MessageSyntaxVersion._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(7))
MessageSyntaxVersion._InitializeFacetMap(MessageSyntaxVersion._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'MessageSyntaxVersion', MessageSyntaxVersion)
_module_typeBindings.MessageSyntaxVersion = MessageSyntaxVersion

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}ReleaseInfo
class ReleaseInfo (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReleaseInfo')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 138, 1)
    _Documentation = None
ReleaseInfo._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(32))
ReleaseInfo._InitializeFacetMap(ReleaseInfo._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'ReleaseInfo', ReleaseInfo)
_module_typeBindings.ReleaseInfo = ReleaseInfo

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}FinInformReleaseInfo
class FinInformReleaseInfo (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FinInformReleaseInfo')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 143, 1)
    _Documentation = None
FinInformReleaseInfo._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(39))
FinInformReleaseInfo._InitializeFacetMap(FinInformReleaseInfo._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'FinInformReleaseInfo', FinInformReleaseInfo)
_module_typeBindings.FinInformReleaseInfo = FinInformReleaseInfo

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}PCInfoForReceiver
class PCInfoForReceiver (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PCInfoForReceiver')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 148, 1)
    _Documentation = None
PCInfoForReceiver._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(25))
PCInfoForReceiver._InitializeFacetMap(PCInfoForReceiver._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'PCInfoForReceiver', PCInfoForReceiver)
_module_typeBindings.PCInfoForReceiver = PCInfoForReceiver

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}ValidationIdentifier
class ValidationIdentifier (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ValidationIdentifier')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 153, 1)
    _Documentation = None
ValidationIdentifier._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(8))
ValidationIdentifier._InitializeFacetMap(ValidationIdentifier._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'ValidationIdentifier', ValidationIdentifier)
_module_typeBindings.ValidationIdentifier = ValidationIdentifier

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}CorrespondentInputReference
class CorrespondentInputReference (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CorrespondentInputReference')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 158, 1)
    _Documentation = None
CorrespondentInputReference._CF_length = pyxb.binding.facets.CF_length(value=pyxb.binding.datatypes.nonNegativeInteger(28))
CorrespondentInputReference._InitializeFacetMap(CorrespondentInputReference._CF_length)
Namespace.addCategoryObject('typeBinding', 'CorrespondentInputReference', CorrespondentInputReference)
_module_typeBindings.CorrespondentInputReference = CorrespondentInputReference

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}TimeString
class TimeString (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TimeString')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 163, 1)
    _Documentation = None
TimeString._CF_length = pyxb.binding.facets.CF_length(value=pyxb.binding.datatypes.nonNegativeInteger(14))
TimeString._InitializeFacetMap(TimeString._CF_length)
Namespace.addCategoryObject('typeBinding', 'TimeString', TimeString)
_module_typeBindings.TimeString = TimeString

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}InputTimeString
class InputTimeString (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'InputTimeString')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 169, 1)
    _Documentation = None
InputTimeString._CF_pattern = pyxb.binding.facets.CF_pattern()
InputTimeString._CF_pattern.addPattern(pattern='[0-9]{14}')
InputTimeString._InitializeFacetMap(InputTimeString._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'InputTimeString', InputTimeString)
_module_typeBindings.InputTimeString = InputTimeString

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}FINTrailer
class FINTrailer (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FINTrailer')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 175, 1)
    _Documentation = None
FINTrailer._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(38))
FINTrailer._InitializeFacetMap(FINTrailer._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'FINTrailer', FINTrailer)
_module_typeBindings.FINTrailer = FINTrailer

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}SWIFTNetTime
class SWIFTNetTime (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SWIFTNetTime')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 180, 1)
    _Documentation = None
SWIFTNetTime._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(24))
SWIFTNetTime._InitializeFacetMap(SWIFTNetTime._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'SWIFTNetTime', SWIFTNetTime)
_module_typeBindings.SWIFTNetTime = SWIFTNetTime

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}SWIFTNetReference
class SWIFTNetReference (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SWIFTNetReference')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 185, 1)
    _Documentation = None
SWIFTNetReference._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(50))
SWIFTNetReference._InitializeFacetMap(SWIFTNetReference._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'SWIFTNetReference', SWIFTNetReference)
_module_typeBindings.SWIFTNetReference = SWIFTNetReference

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}NRWarning
class NRWarning (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'NRWarning')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 190, 1)
    _Documentation = None
NRWarning._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(50))
NRWarning._InitializeFacetMap(NRWarning._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'NRWarning', NRWarning)
_module_typeBindings.NRWarning = NRWarning

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}SNLEndPoint
class SNLEndPoint (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SNLEndPoint')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 195, 1)
    _Documentation = None
SNLEndPoint._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(20))
SNLEndPoint._InitializeFacetMap(SNLEndPoint._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'SNLEndPoint', SNLEndPoint)
_module_typeBindings.SNLEndPoint = SNLEndPoint

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}SnFQueueName
class SnFQueueName (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SnFQueueName')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 200, 1)
    _Documentation = None
SnFQueueName._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(30))
SnFQueueName._InitializeFacetMap(SnFQueueName._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'SnFQueueName', SnFQueueName)
_module_typeBindings.SnFQueueName = SnFQueueName

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}SnFChannelName
class SnFChannelName (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SnFChannelName')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 205, 1)
    _Documentation = None
SnFChannelName._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(30))
SnFChannelName._InitializeFacetMap(SnFChannelName._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'SnFChannelName', SnFChannelName)
_module_typeBindings.SnFChannelName = SnFChannelName

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}Operator
class Operator (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Operator')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 210, 1)
    _Documentation = None
Operator._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(150))
Operator._InitializeFacetMap(Operator._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'Operator', Operator)
_module_typeBindings.Operator = Operator

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}MessagePartner
class MessagePartner (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MessagePartner')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 215, 1)
    _Documentation = None
MessagePartner._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(50))
MessagePartner._InitializeFacetMap(MessagePartner._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'MessagePartner', MessagePartner)
_module_typeBindings.MessagePartner = MessagePartner

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}Format
class Format (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Format')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 220, 1)
    _Documentation = None
Format._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
Format._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(16))
Format._InitializeFacetMap(Format._CF_minLength,
   Format._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'Format', Format)
_module_typeBindings.Format = Format

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}InstanceName
class InstanceName (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'InstanceName')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 226, 1)
    _Documentation = None
InstanceName._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(50))
InstanceName._InitializeFacetMap(InstanceName._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'InstanceName', InstanceName)
_module_typeBindings.InstanceName = InstanceName

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}UserName
class UserName (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'UserName')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 231, 1)
    _Documentation = None
UserName._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(50))
UserName._InitializeFacetMap(UserName._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'UserName', UserName)
_module_typeBindings.UserName = UserName

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}Unit
class Unit (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Unit')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 236, 1)
    _Documentation = None
Unit._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(50))
Unit._InitializeFacetMap(Unit._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'Unit', Unit)
_module_typeBindings.Unit = Unit

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}RequestType
class RequestType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RequestType')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 241, 1)
    _Documentation = None
RequestType._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
RequestType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(30))
RequestType._InitializeFacetMap(RequestType._CF_minLength,
   RequestType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'RequestType', RequestType)
_module_typeBindings.RequestType = RequestType

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}RequestSubtype
class RequestSubtype (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RequestSubtype')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 247, 1)
    _Documentation = None
RequestSubtype._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
RequestSubtype._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(36))
RequestSubtype._InitializeFacetMap(RequestSubtype._CF_minLength,
   RequestSubtype._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'RequestSubtype', RequestSubtype)
_module_typeBindings.RequestSubtype = RequestSubtype

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}FileLogicalName
class FileLogicalName (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FileLogicalName')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 253, 1)
    _Documentation = None
FileLogicalName._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
FileLogicalName._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(254))
FileLogicalName._InitializeFacetMap(FileLogicalName._CF_minLength,
   FileLogicalName._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'FileLogicalName', FileLogicalName)
_module_typeBindings.FileLogicalName = FileLogicalName

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}FileDigestValue
class FileDigestValue (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FileDigestValue')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 259, 1)
    _Documentation = None
FileDigestValue._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
FileDigestValue._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(50))
FileDigestValue._InitializeFacetMap(FileDigestValue._CF_minLength,
   FileDigestValue._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'FileDigestValue', FileDigestValue)
_module_typeBindings.FileDigestValue = FileDigestValue

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}TransferRef
class TransferRef (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TransferRef')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 265, 1)
    _Documentation = None
TransferRef._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
TransferRef._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(50))
TransferRef._InitializeFacetMap(TransferRef._CF_minLength,
   TransferRef._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'TransferRef', TransferRef)
_module_typeBindings.TransferRef = TransferRef

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}FileInfoDescription
class FileInfoDescription (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FileInfoDescription')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 271, 1)
    _Documentation = None
FileInfoDescription._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
FileInfoDescription._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(256))
FileInfoDescription._InitializeFacetMap(FileInfoDescription._CF_minLength,
   FileInfoDescription._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'FileInfoDescription', FileInfoDescription)
_module_typeBindings.FileInfoDescription = FileInfoDescription

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}AttributeValue
class AttributeValue (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AttributeValue')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 277, 1)
    _Documentation = None
AttributeValue._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(0))
AttributeValue._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(256))
AttributeValue._InitializeFacetMap(AttributeValue._CF_minLength,
   AttributeValue._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'AttributeValue', AttributeValue)
_module_typeBindings.AttributeValue = AttributeValue

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}VendorName
class VendorName (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VendorName')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 283, 1)
    _Documentation = None
VendorName._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(0))
VendorName._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(8))
VendorName._InitializeFacetMap(VendorName._CF_minLength,
   VendorName._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'VendorName', VendorName)
_module_typeBindings.VendorName = VendorName

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}ProductName
class ProductName (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ProductName')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 289, 1)
    _Documentation = None
ProductName._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(0))
ProductName._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(8))
ProductName._InitializeFacetMap(ProductName._CF_minLength,
   ProductName._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'ProductName', ProductName)
_module_typeBindings.ProductName = ProductName

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}ProductVersion
class ProductVersion (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ProductVersion')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 295, 1)
    _Documentation = None
ProductVersion._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(0))
ProductVersion._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(8))
ProductVersion._InitializeFacetMap(ProductVersion._CF_minLength,
   ProductVersion._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'ProductVersion', ProductVersion)
_module_typeBindings.ProductVersion = ProductVersion

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}DigestRef
class DigestRef (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DigestRef')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 301, 1)
    _Documentation = None
DigestRef._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
DigestRef._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(128))
DigestRef._InitializeFacetMap(DigestRef._CF_minLength,
   DigestRef._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'DigestRef', DigestRef)
_module_typeBindings.DigestRef = DigestRef

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}DigestValue
class DigestValue (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DigestValue')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 307, 1)
    _Documentation = None
DigestValue._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
DigestValue._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(50))
DigestValue._InitializeFacetMap(DigestValue._CF_minLength,
   DigestValue._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'DigestValue', DigestValue)
_module_typeBindings.DigestValue = DigestValue

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}CustomDigestValue
class CustomDigestValue (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CustomDigestValue')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 313, 1)
    _Documentation = None
CustomDigestValue._CF_length = pyxb.binding.facets.CF_length(value=pyxb.binding.datatypes.nonNegativeInteger(44))
CustomDigestValue._InitializeFacetMap(CustomDigestValue._CF_length)
Namespace.addCategoryObject('typeBinding', 'CustomDigestValue', CustomDigestValue)
_module_typeBindings.CustomDigestValue = CustomDigestValue

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}Sumid
class Sumid (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Sumid')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 318, 1)
    _Documentation = None
Sumid._CF_length = pyxb.binding.facets.CF_length(value=pyxb.binding.datatypes.nonNegativeInteger(16))
Sumid._InitializeFacetMap(Sumid._CF_length)
Namespace.addCategoryObject('typeBinding', 'Sumid', Sumid)
_module_typeBindings.Sumid = Sumid

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}MessageURI
class MessageURI (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MessageURI')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 323, 1)
    _Documentation = None
MessageURI._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
MessageURI._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(256))
MessageURI._InitializeFacetMap(MessageURI._CF_minLength,
   MessageURI._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'MessageURI', MessageURI)
_module_typeBindings.MessageURI = MessageURI

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}FINUserHeader
class FINUserHeader (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FINUserHeader')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 329, 1)
    _Documentation = None
FINUserHeader._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
FINUserHeader._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(2500))
FINUserHeader._InitializeFacetMap(FINUserHeader._CF_minLength,
   FINUserHeader._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'FINUserHeader', FINUserHeader)
_module_typeBindings.FINUserHeader = FINUserHeader

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}ServiceLevelAgreement
class ServiceLevelAgreement (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ServiceLevelAgreement')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 336, 1)
    _Documentation = None
ServiceLevelAgreement._CF_length = pyxb.binding.facets.CF_length(value=pyxb.binding.datatypes.nonNegativeInteger(3))
ServiceLevelAgreement._InitializeFacetMap(ServiceLevelAgreement._CF_length)
Namespace.addCategoryObject('typeBinding', 'ServiceLevelAgreement', ServiceLevelAgreement)
_module_typeBindings.ServiceLevelAgreement = ServiceLevelAgreement

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}E2ETransactionReference
class E2ETransactionReference (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'E2ETransactionReference')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 342, 1)
    _Documentation = None
E2ETransactionReference._CF_length = pyxb.binding.facets.CF_length(value=pyxb.binding.datatypes.nonNegativeInteger(36))
E2ETransactionReference._InitializeFacetMap(E2ETransactionReference._CF_length)
Namespace.addCategoryObject('typeBinding', 'E2ETransactionReference', E2ETransactionReference)
_module_typeBindings.E2ETransactionReference = E2ETransactionReference

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}TranslationResultDetails
class TranslationResultDetails (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TranslationResultDetails')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 348, 1)
    _Documentation = None
TranslationResultDetails._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(16000))
TranslationResultDetails._InitializeFacetMap(TranslationResultDetails._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'TranslationResultDetails', TranslationResultDetails)
_module_typeBindings.TranslationResultDetails = TranslationResultDetails

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}MessagePropertyName
class MessagePropertyName (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MessagePropertyName')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 354, 1)
    _Documentation = None
MessagePropertyName._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(128))
MessagePropertyName._InitializeFacetMap(MessagePropertyName._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'MessagePropertyName', MessagePropertyName)
_module_typeBindings.MessagePropertyName = MessagePropertyName

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}MessagePropertyValue
class MessagePropertyValue (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MessagePropertyValue')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 360, 1)
    _Documentation = None
MessagePropertyValue._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(512))
MessagePropertyValue._InitializeFacetMap(MessagePropertyValue._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'MessagePropertyValue', MessagePropertyValue)
_module_typeBindings.MessagePropertyValue = MessagePropertyValue

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}RoutingFunction
class RoutingFunction (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RoutingFunction')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 367, 1)
    _Documentation = None
RoutingFunction._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=RoutingFunction, enum_prefix=None)
RoutingFunction.Route = RoutingFunction._CF_enumeration.addEnumeration(unicode_value='Route', tag='Route')
RoutingFunction.DisposeToRoutingStep = RoutingFunction._CF_enumeration.addEnumeration(unicode_value='DisposeToRoutingStep', tag='DisposeToRoutingStep')
RoutingFunction.DisposeToRoutingPoint = RoutingFunction._CF_enumeration.addEnumeration(unicode_value='DisposeToRoutingPoint', tag='DisposeToRoutingPoint')
RoutingFunction._InitializeFacetMap(RoutingFunction._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'RoutingFunction', RoutingFunction)
_module_typeBindings.RoutingFunction = RoutingFunction

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}RoutingStep
class RoutingStep (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RoutingStep')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 374, 1)
    _Documentation = None
RoutingStep._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=RoutingStep, enum_prefix=None)
RoutingStep.Verify = RoutingStep._CF_enumeration.addEnumeration(unicode_value='Verify', tag='Verify')
RoutingStep.Authorise = RoutingStep._CF_enumeration.addEnumeration(unicode_value='Authorise', tag='Authorise')
RoutingStep.Modify = RoutingStep._CF_enumeration.addEnumeration(unicode_value='Modify', tag='Modify')
RoutingStep.ReadyToSend = RoutingStep._CF_enumeration.addEnumeration(unicode_value='ReadyToSend', tag='ReadyToSend')
RoutingStep._InitializeFacetMap(RoutingStep._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'RoutingStep', RoutingStep)
_module_typeBindings.RoutingStep = RoutingStep

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}ValidationLevel
class ValidationLevel (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ValidationLevel')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 382, 1)
    _Documentation = None
ValidationLevel._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ValidationLevel, enum_prefix=None)
ValidationLevel.None_ = ValidationLevel._CF_enumeration.addEnumeration(unicode_value='None', tag='None_')
ValidationLevel.Minimum = ValidationLevel._CF_enumeration.addEnumeration(unicode_value='Minimum', tag='Minimum')
ValidationLevel.Intermediate = ValidationLevel._CF_enumeration.addEnumeration(unicode_value='Intermediate', tag='Intermediate')
ValidationLevel.Maximum = ValidationLevel._CF_enumeration.addEnumeration(unicode_value='Maximum', tag='Maximum')
ValidationLevel._InitializeFacetMap(ValidationLevel._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ValidationLevel', ValidationLevel)
_module_typeBindings.ValidationLevel = ValidationLevel

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}Priority
class Priority (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Priority')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 390, 1)
    _Documentation = None
Priority._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=Priority, enum_prefix=None)
Priority.Normal = Priority._CF_enumeration.addEnumeration(unicode_value='Normal', tag='Normal')
Priority.Urgent = Priority._CF_enumeration.addEnumeration(unicode_value='Urgent', tag='Urgent')
Priority.System = Priority._CF_enumeration.addEnumeration(unicode_value='System', tag='System')
Priority._InitializeFacetMap(Priority._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'Priority', Priority)
_module_typeBindings.Priority = Priority

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}SubFormat
class SubFormat (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SubFormat')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 397, 1)
    _Documentation = None
SubFormat._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=SubFormat, enum_prefix=None)
SubFormat.Input = SubFormat._CF_enumeration.addEnumeration(unicode_value='Input', tag='Input')
SubFormat.Output = SubFormat._CF_enumeration.addEnumeration(unicode_value='Output', tag='Output')
SubFormat._InitializeFacetMap(SubFormat._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'SubFormat', SubFormat)
_module_typeBindings.SubFormat = SubFormat

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}ReportingApplication
class ReportingApplication (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReportingApplication')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 403, 1)
    _Documentation = None
ReportingApplication._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ReportingApplication, enum_prefix=None)
ReportingApplication.ApplicationInterface = ReportingApplication._CF_enumeration.addEnumeration(unicode_value='ApplicationInterface', tag='ApplicationInterface')
ReportingApplication.SWIFTNetInterface = ReportingApplication._CF_enumeration.addEnumeration(unicode_value='SWIFTNetInterface', tag='SWIFTNetInterface')
ReportingApplication.FINInterface = ReportingApplication._CF_enumeration.addEnumeration(unicode_value='FINInterface', tag='FINInterface')
ReportingApplication.TrafficReconciliation = ReportingApplication._CF_enumeration.addEnumeration(unicode_value='TrafficReconciliation', tag='TrafficReconciliation')
ReportingApplication.Other = ReportingApplication._CF_enumeration.addEnumeration(unicode_value='Other', tag='Other')
ReportingApplication._InitializeFacetMap(ReportingApplication._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ReportingApplication', ReportingApplication)
_module_typeBindings.ReportingApplication = ReportingApplication

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}MessageCreator
class MessageCreator (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MessageCreator')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 412, 1)
    _Documentation = None
MessageCreator._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MessageCreator, enum_prefix=None)
MessageCreator.ApplicationInterface = MessageCreator._CF_enumeration.addEnumeration(unicode_value='ApplicationInterface', tag='ApplicationInterface')
MessageCreator.SWIFTNetInterface = MessageCreator._CF_enumeration.addEnumeration(unicode_value='SWIFTNetInterface', tag='SWIFTNetInterface')
MessageCreator.FINInterface = MessageCreator._CF_enumeration.addEnumeration(unicode_value='FINInterface', tag='FINInterface')
MessageCreator.Workstation = MessageCreator._CF_enumeration.addEnumeration(unicode_value='Workstation', tag='Workstation')
MessageCreator.Messenger = MessageCreator._CF_enumeration.addEnumeration(unicode_value='Messenger', tag='Messenger')
MessageCreator.Other = MessageCreator._CF_enumeration.addEnumeration(unicode_value='Other', tag='Other')
MessageCreator._InitializeFacetMap(MessageCreator._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MessageCreator', MessageCreator)
_module_typeBindings.MessageCreator = MessageCreator

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}MessageContext
class MessageContext (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MessageContext')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 422, 1)
    _Documentation = None
MessageContext._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MessageContext, enum_prefix=None)
MessageContext.Original = MessageContext._CF_enumeration.addEnumeration(unicode_value='Original', tag='Original')
MessageContext.Copy = MessageContext._CF_enumeration.addEnumeration(unicode_value='Copy', tag='Copy')
MessageContext.Report = MessageContext._CF_enumeration.addEnumeration(unicode_value='Report', tag='Report')
MessageContext._InitializeFacetMap(MessageContext._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MessageContext', MessageContext)
_module_typeBindings.MessageContext = MessageContext

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}MessageNature
class MessageNature (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MessageNature')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 429, 1)
    _Documentation = None
MessageNature._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MessageNature, enum_prefix=None)
MessageNature.Financial = MessageNature._CF_enumeration.addEnumeration(unicode_value='Financial', tag='Financial')
MessageNature.Text = MessageNature._CF_enumeration.addEnumeration(unicode_value='Text', tag='Text')
MessageNature.Network = MessageNature._CF_enumeration.addEnumeration(unicode_value='Network', tag='Network')
MessageNature.Security = MessageNature._CF_enumeration.addEnumeration(unicode_value='Security', tag='Security')
MessageNature.Service = MessageNature._CF_enumeration.addEnumeration(unicode_value='Service', tag='Service')
MessageNature._InitializeFacetMap(MessageNature._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MessageNature', MessageNature)
_module_typeBindings.MessageNature = MessageNature

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}RMAResult
class RMAResult (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RMAResult')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 438, 1)
    _Documentation = None
RMAResult._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=RMAResult, enum_prefix=None)
RMAResult.Success = RMAResult._CF_enumeration.addEnumeration(unicode_value='Success', tag='Success')
RMAResult.Bypassed = RMAResult._CF_enumeration.addEnumeration(unicode_value='Bypassed', tag='Bypassed')
RMAResult.NoRecord = RMAResult._CF_enumeration.addEnumeration(unicode_value='NoRecord', tag='NoRecord')
RMAResult.NotEnabled = RMAResult._CF_enumeration.addEnumeration(unicode_value='NotEnabled', tag='NotEnabled')
RMAResult.InvalidPeriod = RMAResult._CF_enumeration.addEnumeration(unicode_value='InvalidPeriod', tag='InvalidPeriod')
RMAResult.Unauthorised = RMAResult._CF_enumeration.addEnumeration(unicode_value='Unauthorised', tag='Unauthorised')
RMAResult._InitializeFacetMap(RMAResult._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'RMAResult', RMAResult)
_module_typeBindings.RMAResult = RMAResult

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}ChecksumResult
class ChecksumResult (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ChecksumResult')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 448, 1)
    _Documentation = None
ChecksumResult._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ChecksumResult, enum_prefix=None)
ChecksumResult.Success = ChecksumResult._CF_enumeration.addEnumeration(unicode_value='Success', tag='Success')
ChecksumResult.Failed = ChecksumResult._CF_enumeration.addEnumeration(unicode_value='Failed', tag='Failed')
ChecksumResult.Bypassed = ChecksumResult._CF_enumeration.addEnumeration(unicode_value='Bypassed', tag='Bypassed')
ChecksumResult._InitializeFacetMap(ChecksumResult._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ChecksumResult', ChecksumResult)
_module_typeBindings.ChecksumResult = ChecksumResult

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}MACPACResult
class MACPACResult (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MACPACResult')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 455, 1)
    _Documentation = None
MACPACResult._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MACPACResult, enum_prefix=None)
MACPACResult.Success = MACPACResult._CF_enumeration.addEnumeration(unicode_value='Success', tag='Success')
MACPACResult.SuccessFuture = MACPACResult._CF_enumeration.addEnumeration(unicode_value='SuccessFuture', tag='SuccessFuture')
MACPACResult.SuccessOld = MACPACResult._CF_enumeration.addEnumeration(unicode_value='SuccessOld', tag='SuccessOld')
MACPACResult.Bypassed = MACPACResult._CF_enumeration.addEnumeration(unicode_value='Bypassed', tag='Bypassed')
MACPACResult.NoKey = MACPACResult._CF_enumeration.addEnumeration(unicode_value='NoKey', tag='NoKey')
MACPACResult.Failed = MACPACResult._CF_enumeration.addEnumeration(unicode_value='Failed', tag='Failed')
MACPACResult.InvalidDigest = MACPACResult._CF_enumeration.addEnumeration(unicode_value='InvalidDigest', tag='InvalidDigest')
MACPACResult.InvalidSignerDN = MACPACResult._CF_enumeration.addEnumeration(unicode_value='InvalidSignerDN', tag='InvalidSignerDN')
MACPACResult.InvalidCertPolicyID = MACPACResult._CF_enumeration.addEnumeration(unicode_value='InvalidCertPolicyID', tag='InvalidCertPolicyID')
MACPACResult._InitializeFacetMap(MACPACResult._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MACPACResult', MACPACResult)
_module_typeBindings.MACPACResult = MACPACResult

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}SignatureResult
class SignatureResult (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SignatureResult')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 468, 1)
    _Documentation = None
SignatureResult._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=SignatureResult, enum_prefix=None)
SignatureResult.Success = SignatureResult._CF_enumeration.addEnumeration(unicode_value='Success', tag='Success')
SignatureResult.Bypassed = SignatureResult._CF_enumeration.addEnumeration(unicode_value='Bypassed', tag='Bypassed')
SignatureResult.Failed = SignatureResult._CF_enumeration.addEnumeration(unicode_value='Failed', tag='Failed')
SignatureResult._InitializeFacetMap(SignatureResult._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'SignatureResult', SignatureResult)
_module_typeBindings.SignatureResult = SignatureResult

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}NRType
class NRType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'NRType')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 475, 1)
    _Documentation = None
NRType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=NRType, enum_prefix=None)
NRType.SvcOpt = NRType._CF_enumeration.addEnumeration(unicode_value='SvcOpt', tag='SvcOpt')
NRType.SvcMand = NRType._CF_enumeration.addEnumeration(unicode_value='SvcMand', tag='SvcMand')
NRType._InitializeFacetMap(NRType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'NRType', NRType)
_module_typeBindings.NRType = NRType

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}Network
class Network (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Network')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 481, 1)
    _Documentation = None
Network._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=Network, enum_prefix=None)
Network.Application = Network._CF_enumeration.addEnumeration(unicode_value='Application', tag='Application')
Network.SWIFTNet = Network._CF_enumeration.addEnumeration(unicode_value='SWIFTNet', tag='SWIFTNet')
Network.FIN = Network._CF_enumeration.addEnumeration(unicode_value='FIN', tag='FIN')
Network.Other = Network._CF_enumeration.addEnumeration(unicode_value='Other', tag='Other')
Network._InitializeFacetMap(Network._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'Network', Network)
_module_typeBindings.Network = Network

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}IntvCategory
class IntvCategory (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'IntvCategory')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 489, 1)
    _Documentation = None
IntvCategory._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=IntvCategory, enum_prefix=None)
IntvCategory.TransmissionReport = IntvCategory._CF_enumeration.addEnumeration(unicode_value='TransmissionReport', tag='TransmissionReport')
IntvCategory.DeliveryReport = IntvCategory._CF_enumeration.addEnumeration(unicode_value='DeliveryReport', tag='DeliveryReport')
IntvCategory.TransmissionResponse = IntvCategory._CF_enumeration.addEnumeration(unicode_value='TransmissionResponse', tag='TransmissionResponse')
IntvCategory._InitializeFacetMap(IntvCategory._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'IntvCategory', IntvCategory)
_module_typeBindings.IntvCategory = IntvCategory

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}HistoryIntvCategory
class HistoryIntvCategory (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'HistoryIntvCategory')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 496, 1)
    _Documentation = None
HistoryIntvCategory._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=HistoryIntvCategory, enum_prefix=None)
HistoryIntvCategory.TransmissionReport = HistoryIntvCategory._CF_enumeration.addEnumeration(unicode_value='TransmissionReport', tag='TransmissionReport')
HistoryIntvCategory.DeliveryReport = HistoryIntvCategory._CF_enumeration.addEnumeration(unicode_value='DeliveryReport', tag='DeliveryReport')
HistoryIntvCategory.TransmissionResponse = HistoryIntvCategory._CF_enumeration.addEnumeration(unicode_value='TransmissionResponse', tag='TransmissionResponse')
HistoryIntvCategory.Security = HistoryIntvCategory._CF_enumeration.addEnumeration(unicode_value='Security', tag='Security')
HistoryIntvCategory.Routing = HistoryIntvCategory._CF_enumeration.addEnumeration(unicode_value='Routing', tag='Routing')
HistoryIntvCategory.MesgAsTransmitted = HistoryIntvCategory._CF_enumeration.addEnumeration(unicode_value='MesgAsTransmitted', tag='MesgAsTransmitted')
HistoryIntvCategory.MesgAsReceived = HistoryIntvCategory._CF_enumeration.addEnumeration(unicode_value='MesgAsReceived', tag='MesgAsReceived')
HistoryIntvCategory.MesgModified = HistoryIntvCategory._CF_enumeration.addEnumeration(unicode_value='MesgModified', tag='MesgModified')
HistoryIntvCategory.Other = HistoryIntvCategory._CF_enumeration.addEnumeration(unicode_value='Other', tag='Other')
HistoryIntvCategory._InitializeFacetMap(HistoryIntvCategory._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'HistoryIntvCategory', HistoryIntvCategory)
_module_typeBindings.HistoryIntvCategory = HistoryIntvCategory

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}MessageFields
class MessageFields (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MessageFields')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 509, 1)
    _Documentation = None
MessageFields._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MessageFields, enum_prefix=None)
MessageFields.NoOriginal = MessageFields._CF_enumeration.addEnumeration(unicode_value='NoOriginal', tag='NoOriginal')
MessageFields.MinimumInfo = MessageFields._CF_enumeration.addEnumeration(unicode_value='MinimumInfo', tag='MinimumInfo')
MessageFields.HeaderOnly = MessageFields._CF_enumeration.addEnumeration(unicode_value='HeaderOnly', tag='HeaderOnly')
MessageFields.HeaderAndBody = MessageFields._CF_enumeration.addEnumeration(unicode_value='HeaderAndBody', tag='HeaderAndBody')
MessageFields._InitializeFacetMap(MessageFields._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MessageFields', MessageFields)
_module_typeBindings.MessageFields = MessageFields

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}NetworkDeliveryStatus
class NetworkDeliveryStatus (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'NetworkDeliveryStatus')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 517, 1)
    _Documentation = None
NetworkDeliveryStatus._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=NetworkDeliveryStatus, enum_prefix=None)
NetworkDeliveryStatus.NetworkAcked = NetworkDeliveryStatus._CF_enumeration.addEnumeration(unicode_value='NetworkAcked', tag='NetworkAcked')
NetworkDeliveryStatus.NetworkNacked = NetworkDeliveryStatus._CF_enumeration.addEnumeration(unicode_value='NetworkNacked', tag='NetworkNacked')
NetworkDeliveryStatus.NetworkRejectedLocally = NetworkDeliveryStatus._CF_enumeration.addEnumeration(unicode_value='NetworkRejectedLocally', tag='NetworkRejectedLocally')
NetworkDeliveryStatus.NetworkAborted = NetworkDeliveryStatus._CF_enumeration.addEnumeration(unicode_value='NetworkAborted', tag='NetworkAborted')
NetworkDeliveryStatus.NetworkTimedOut = NetworkDeliveryStatus._CF_enumeration.addEnumeration(unicode_value='NetworkTimedOut', tag='NetworkTimedOut')
NetworkDeliveryStatus.NetworkWaitingAck = NetworkDeliveryStatus._CF_enumeration.addEnumeration(unicode_value='NetworkWaitingAck', tag='NetworkWaitingAck')
NetworkDeliveryStatus._InitializeFacetMap(NetworkDeliveryStatus._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'NetworkDeliveryStatus', NetworkDeliveryStatus)
_module_typeBindings.NetworkDeliveryStatus = NetworkDeliveryStatus

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}ReceiverDeliveryStatus
class ReceiverDeliveryStatus (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReceiverDeliveryStatus')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 527, 1)
    _Documentation = None
ReceiverDeliveryStatus._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ReceiverDeliveryStatus, enum_prefix=None)
ReceiverDeliveryStatus.RcvDelivered = ReceiverDeliveryStatus._CF_enumeration.addEnumeration(unicode_value='RcvDelivered', tag='RcvDelivered')
ReceiverDeliveryStatus.RcvAborted = ReceiverDeliveryStatus._CF_enumeration.addEnumeration(unicode_value='RcvAborted', tag='RcvAborted')
ReceiverDeliveryStatus.RcvDelayedNak = ReceiverDeliveryStatus._CF_enumeration.addEnumeration(unicode_value='RcvDelayedNak', tag='RcvDelayedNak')
ReceiverDeliveryStatus.RcvFCPReleased = ReceiverDeliveryStatus._CF_enumeration.addEnumeration(unicode_value='RcvFCPReleased', tag='RcvFCPReleased')
ReceiverDeliveryStatus.RcvOverdue = ReceiverDeliveryStatus._CF_enumeration.addEnumeration(unicode_value='RcvOverdue', tag='RcvOverdue')
ReceiverDeliveryStatus.RcvUnknown = ReceiverDeliveryStatus._CF_enumeration.addEnumeration(unicode_value='RcvUnknown', tag='RcvUnknown')
ReceiverDeliveryStatus._InitializeFacetMap(ReceiverDeliveryStatus._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ReceiverDeliveryStatus', ReceiverDeliveryStatus)
_module_typeBindings.ReceiverDeliveryStatus = ReceiverDeliveryStatus

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}FileDigestAlgorithm
class FileDigestAlgorithm (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FileDigestAlgorithm')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 537, 1)
    _Documentation = None
FileDigestAlgorithm._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=FileDigestAlgorithm, enum_prefix=None)
FileDigestAlgorithm.SHA_1 = FileDigestAlgorithm._CF_enumeration.addEnumeration(unicode_value='SHA-1', tag='SHA_1')
FileDigestAlgorithm.SHA_256 = FileDigestAlgorithm._CF_enumeration.addEnumeration(unicode_value='SHA-256', tag='SHA_256')
FileDigestAlgorithm._InitializeFacetMap(FileDigestAlgorithm._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'FileDigestAlgorithm', FileDigestAlgorithm)
_module_typeBindings.FileDigestAlgorithm = FileDigestAlgorithm

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}SessionDirection
class SessionDirection (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SessionDirection')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 543, 1)
    _Documentation = None
SessionDirection._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=SessionDirection, enum_prefix=None)
SessionDirection.ToMessagePartner = SessionDirection._CF_enumeration.addEnumeration(unicode_value='ToMessagePartner', tag='ToMessagePartner')
SessionDirection.FromMessagePartner = SessionDirection._CF_enumeration.addEnumeration(unicode_value='FromMessagePartner', tag='FromMessagePartner')
SessionDirection.ToAndFromMessagePartner = SessionDirection._CF_enumeration.addEnumeration(unicode_value='ToAndFromMessagePartner', tag='ToAndFromMessagePartner')
SessionDirection._InitializeFacetMap(SessionDirection._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'SessionDirection', SessionDirection)
_module_typeBindings.SessionDirection = SessionDirection

# Atomic simple type: {urn:swift:saa:xsd:saa.2.0}TranslatedResult
class TranslatedResult (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TranslatedResult')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 550, 1)
    _Documentation = None
TranslatedResult._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=TranslatedResult, enum_prefix=None)
TranslatedResult.Success = TranslatedResult._CF_enumeration.addEnumeration(unicode_value='Success', tag='Success')
TranslatedResult.TruncationNonRef = TranslatedResult._CF_enumeration.addEnumeration(unicode_value='TruncationNonRef', tag='TruncationNonRef')
TranslatedResult.TruncationRef = TranslatedResult._CF_enumeration.addEnumeration(unicode_value='TruncationRef', tag='TruncationRef')
TranslatedResult.Failure = TranslatedResult._CF_enumeration.addEnumeration(unicode_value='Failure', tag='Failure')
TranslatedResult._InitializeFacetMap(TranslatedResult._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'TranslatedResult', TranslatedResult)
_module_typeBindings.TranslatedResult = TranslatedResult

# Complex type {urn:swift:saa:xsd:saa.2.0}SwAny with content type MIXED
class SwAny (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:swift:saa:xsd:saa.2.0}SwAny with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SwAny')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 4, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _HasWildcardElement = True
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.SwAny = SwAny
Namespace.addCategoryObject('typeBinding', 'SwAny', SwAny)


# Complex type {urn:swift:saa:xsd:saa.2.0}AddressFullName with content type ELEMENT_ONLY
class AddressFullName (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:swift:saa:xsd:saa.2.0}AddressFullName with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AddressFullName')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 559, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:swift:saa:xsd:saa.2.0}X1 uses Python identifier X1
    __X1 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'X1'), 'X1', '__urnswiftsaaxsdsaa_2_0_AddressFullName_urnswiftsaaxsdsaa_2_0X1', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 561, 3), )

    
    X1 = property(__X1.value, __X1.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}X2 uses Python identifier X2
    __X2 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'X2'), 'X2', '__urnswiftsaaxsdsaa_2_0_AddressFullName_urnswiftsaaxsdsaa_2_0X2', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 562, 3), )

    
    X2 = property(__X2.value, __X2.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}X3 uses Python identifier X3
    __X3 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'X3'), 'X3', '__urnswiftsaaxsdsaa_2_0_AddressFullName_urnswiftsaaxsdsaa_2_0X3', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 563, 3), )

    
    X3 = property(__X3.value, __X3.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}X4 uses Python identifier X4
    __X4 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'X4'), 'X4', '__urnswiftsaaxsdsaa_2_0_AddressFullName_urnswiftsaaxsdsaa_2_0X4', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 564, 3), )

    
    X4 = property(__X4.value, __X4.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}FinancialInstitution uses Python identifier FinancialInstitution
    __FinancialInstitution = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FinancialInstitution'), 'FinancialInstitution', '__urnswiftsaaxsdsaa_2_0_AddressFullName_urnswiftsaaxsdsaa_2_0FinancialInstitution', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 565, 3), )

    
    FinancialInstitution = property(__FinancialInstitution.value, __FinancialInstitution.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}BranchInformation uses Python identifier BranchInformation
    __BranchInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BranchInformation'), 'BranchInformation', '__urnswiftsaaxsdsaa_2_0_AddressFullName_urnswiftsaaxsdsaa_2_0BranchInformation', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 566, 3), )

    
    BranchInformation = property(__BranchInformation.value, __BranchInformation.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}CityName uses Python identifier CityName
    __CityName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CityName'), 'CityName', '__urnswiftsaaxsdsaa_2_0_AddressFullName_urnswiftsaaxsdsaa_2_0CityName', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 567, 3), )

    
    CityName = property(__CityName.value, __CityName.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}Location uses Python identifier Location
    __Location = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Location'), 'Location', '__urnswiftsaaxsdsaa_2_0_AddressFullName_urnswiftsaaxsdsaa_2_0Location', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 568, 3), )

    
    Location = property(__Location.value, __Location.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}CountryCode uses Python identifier CountryCode
    __CountryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CountryCode'), 'CountryCode', '__urnswiftsaaxsdsaa_2_0_AddressFullName_urnswiftsaaxsdsaa_2_0CountryCode', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 569, 3), )

    
    CountryCode = property(__CountryCode.value, __CountryCode.set, None, None)

    _ElementMap.update({
        __X1.name() : __X1,
        __X2.name() : __X2,
        __X3.name() : __X3,
        __X4.name() : __X4,
        __FinancialInstitution.name() : __FinancialInstitution,
        __BranchInformation.name() : __BranchInformation,
        __CityName.name() : __CityName,
        __Location.name() : __Location,
        __CountryCode.name() : __CountryCode
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AddressFullName = AddressFullName
Namespace.addCategoryObject('typeBinding', 'AddressFullName', AddressFullName)


# Complex type {urn:swift:saa:xsd:saa.2.0}AddressInfo with content type ELEMENT_ONLY
class AddressInfo (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:swift:saa:xsd:saa.2.0}AddressInfo with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AddressInfo')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 572, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:swift:saa:xsd:saa.2.0}BIC12 uses Python identifier BIC12
    __BIC12 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BIC12'), 'BIC12', '__urnswiftsaaxsdsaa_2_0_AddressInfo_urnswiftsaaxsdsaa_2_0BIC12', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 575, 4), )

    
    BIC12 = property(__BIC12.value, __BIC12.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}DN uses Python identifier DN
    __DN = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DN'), 'DN', '__urnswiftsaaxsdsaa_2_0_AddressInfo_urnswiftsaaxsdsaa_2_0DN', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 576, 4), )

    
    DN = property(__DN.value, __DN.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}Nickname uses Python identifier Nickname
    __Nickname = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Nickname'), 'Nickname', '__urnswiftsaaxsdsaa_2_0_AddressInfo_urnswiftsaaxsdsaa_2_0Nickname', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 577, 4), )

    
    Nickname = property(__Nickname.value, __Nickname.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}FullName uses Python identifier FullName
    __FullName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FullName'), 'FullName', '__urnswiftsaaxsdsaa_2_0_AddressInfo_urnswiftsaaxsdsaa_2_0FullName', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 579, 3), )

    
    FullName = property(__FullName.value, __FullName.set, None, None)

    _ElementMap.update({
        __BIC12.name() : __BIC12,
        __DN.name() : __DN,
        __Nickname.name() : __Nickname,
        __FullName.name() : __FullName
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AddressInfo = AddressInfo
Namespace.addCategoryObject('typeBinding', 'AddressInfo', AddressInfo)


# Complex type {urn:swift:saa:xsd:saa.2.0}Intervention with content type ELEMENT_ONLY
class Intervention (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:swift:saa:xsd:saa.2.0}Intervention with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Intervention')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 582, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:swift:saa:xsd:saa.2.0}IntvCategory uses Python identifier IntvCategory
    __IntvCategory = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IntvCategory'), 'IntvCategory', '__urnswiftsaaxsdsaa_2_0_Intervention_urnswiftsaaxsdsaa_2_0IntvCategory', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 584, 3), )

    
    IntvCategory = property(__IntvCategory.value, __IntvCategory.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}CreationTime uses Python identifier CreationTime
    __CreationTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CreationTime'), 'CreationTime', '__urnswiftsaaxsdsaa_2_0_Intervention_urnswiftsaaxsdsaa_2_0CreationTime', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 585, 3), )

    
    CreationTime = property(__CreationTime.value, __CreationTime.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}OperatorOrigin uses Python identifier OperatorOrigin
    __OperatorOrigin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OperatorOrigin'), 'OperatorOrigin', '__urnswiftsaaxsdsaa_2_0_Intervention_urnswiftsaaxsdsaa_2_0OperatorOrigin', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 586, 3), )

    
    OperatorOrigin = property(__OperatorOrigin.value, __OperatorOrigin.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}Contents uses Python identifier Contents
    __Contents = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Contents'), 'Contents', '__urnswiftsaaxsdsaa_2_0_Intervention_urnswiftsaaxsdsaa_2_0Contents', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 587, 3), )

    
    Contents = property(__Contents.value, __Contents.set, None, None)

    _ElementMap.update({
        __IntvCategory.name() : __IntvCategory,
        __CreationTime.name() : __CreationTime,
        __OperatorOrigin.name() : __OperatorOrigin,
        __Contents.name() : __Contents
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.Intervention = Intervention
Namespace.addCategoryObject('typeBinding', 'Intervention', Intervention)


# Complex type {urn:swift:saa:xsd:saa.2.0}HistoryIntervention with content type ELEMENT_ONLY
class HistoryIntervention (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:swift:saa:xsd:saa.2.0}HistoryIntervention with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'HistoryIntervention')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 590, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:swift:saa:xsd:saa.2.0}IntvCategory uses Python identifier IntvCategory
    __IntvCategory = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IntvCategory'), 'IntvCategory', '__urnswiftsaaxsdsaa_2_0_HistoryIntervention_urnswiftsaaxsdsaa_2_0IntvCategory', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 592, 3), )

    
    IntvCategory = property(__IntvCategory.value, __IntvCategory.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}CreationTime uses Python identifier CreationTime
    __CreationTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CreationTime'), 'CreationTime', '__urnswiftsaaxsdsaa_2_0_HistoryIntervention_urnswiftsaaxsdsaa_2_0CreationTime', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 593, 3), )

    
    CreationTime = property(__CreationTime.value, __CreationTime.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}OperatorOrigin uses Python identifier OperatorOrigin
    __OperatorOrigin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OperatorOrigin'), 'OperatorOrigin', '__urnswiftsaaxsdsaa_2_0_HistoryIntervention_urnswiftsaaxsdsaa_2_0OperatorOrigin', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 594, 3), )

    
    OperatorOrigin = property(__OperatorOrigin.value, __OperatorOrigin.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}Text uses Python identifier Text
    __Text = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Text'), 'Text', '__urnswiftsaaxsdsaa_2_0_HistoryIntervention_urnswiftsaaxsdsaa_2_0Text', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 595, 3), )

    
    Text = property(__Text.value, __Text.set, None, None)

    _ElementMap.update({
        __IntvCategory.name() : __IntvCategory,
        __CreationTime.name() : __CreationTime,
        __OperatorOrigin.name() : __OperatorOrigin,
        __Text.name() : __Text
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.HistoryIntervention = HistoryIntervention
Namespace.addCategoryObject('typeBinding', 'HistoryIntervention', HistoryIntervention)


# Complex type {urn:swift:saa:xsd:saa.2.0}Interventions with content type ELEMENT_ONLY
class Interventions (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:swift:saa:xsd:saa.2.0}Interventions with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Interventions')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 598, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:swift:saa:xsd:saa.2.0}Intervention uses Python identifier Intervention
    __Intervention = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Intervention'), 'Intervention', '__urnswiftsaaxsdsaa_2_0_Interventions_urnswiftsaaxsdsaa_2_0Intervention', True, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 600, 3), )

    
    Intervention = property(__Intervention.value, __Intervention.set, None, None)

    _ElementMap.update({
        __Intervention.name() : __Intervention
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.Interventions = Interventions
Namespace.addCategoryObject('typeBinding', 'Interventions', Interventions)


# Complex type {urn:swift:saa:xsd:saa.2.0}HistoryInterventions with content type ELEMENT_ONLY
class HistoryInterventions (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:swift:saa:xsd:saa.2.0}HistoryInterventions with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'HistoryInterventions')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 603, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:swift:saa:xsd:saa.2.0}Intervention uses Python identifier Intervention
    __Intervention = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Intervention'), 'Intervention', '__urnswiftsaaxsdsaa_2_0_HistoryInterventions_urnswiftsaaxsdsaa_2_0Intervention', True, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 605, 3), )

    
    Intervention = property(__Intervention.value, __Intervention.set, None, None)

    _ElementMap.update({
        __Intervention.name() : __Intervention
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.HistoryInterventions = HistoryInterventions
Namespace.addCategoryObject('typeBinding', 'HistoryInterventions', HistoryInterventions)


# Complex type {urn:swift:saa:xsd:saa.2.0}RoutingInstruction with content type ELEMENT_ONLY
class RoutingInstruction (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:swift:saa:xsd:saa.2.0}RoutingInstruction with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RoutingInstruction')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 608, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:swift:saa:xsd:saa.2.0}RoutingFunction uses Python identifier RoutingFunction
    __RoutingFunction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RoutingFunction'), 'RoutingFunction', '__urnswiftsaaxsdsaa_2_0_RoutingInstruction_urnswiftsaaxsdsaa_2_0RoutingFunction', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 610, 3), )

    
    RoutingFunction = property(__RoutingFunction.value, __RoutingFunction.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}RoutingPoint uses Python identifier RoutingPoint
    __RoutingPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RoutingPoint'), 'RoutingPoint', '__urnswiftsaaxsdsaa_2_0_RoutingInstruction_urnswiftsaaxsdsaa_2_0RoutingPoint', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 611, 3), )

    
    RoutingPoint = property(__RoutingPoint.value, __RoutingPoint.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}RoutingStep uses Python identifier RoutingStep
    __RoutingStep = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RoutingStep'), 'RoutingStep', '__urnswiftsaaxsdsaa_2_0_RoutingInstruction_urnswiftsaaxsdsaa_2_0RoutingStep', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 612, 3), )

    
    RoutingStep = property(__RoutingStep.value, __RoutingStep.set, None, None)

    _ElementMap.update({
        __RoutingFunction.name() : __RoutingFunction,
        __RoutingPoint.name() : __RoutingPoint,
        __RoutingStep.name() : __RoutingStep
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.RoutingInstruction = RoutingInstruction
Namespace.addCategoryObject('typeBinding', 'RoutingInstruction', RoutingInstruction)


# Complex type {urn:swift:saa:xsd:saa.2.0}PDEPDM with content type ELEMENT_ONLY
class PDEPDM (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:swift:saa:xsd:saa.2.0}PDEPDM with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PDEPDM')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 615, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:swift:saa:xsd:saa.2.0}PDE uses Python identifier PDE
    __PDE = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PDE'), 'PDE', '__urnswiftsaaxsdsaa_2_0_PDEPDM_urnswiftsaaxsdsaa_2_0PDE', True, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 617, 3), )

    
    PDE = property(__PDE.value, __PDE.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}PDM uses Python identifier PDM
    __PDM = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PDM'), 'PDM', '__urnswiftsaaxsdsaa_2_0_PDEPDM_urnswiftsaaxsdsaa_2_0PDM', True, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 618, 3), )

    
    PDM = property(__PDM.value, __PDM.set, None, None)

    _ElementMap.update({
        __PDE.name() : __PDE,
        __PDM.name() : __PDM
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.PDEPDM = PDEPDM
Namespace.addCategoryObject('typeBinding', 'PDEPDM', PDEPDM)


# Complex type {urn:swift:saa:xsd:saa.2.0}Product with content type ELEMENT_ONLY
class Product (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:swift:saa:xsd:saa.2.0}Product with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Product')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 621, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:swift:saa:xsd:saa.2.0}VendorName uses Python identifier VendorName
    __VendorName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VendorName'), 'VendorName', '__urnswiftsaaxsdsaa_2_0_Product_urnswiftsaaxsdsaa_2_0VendorName', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 623, 3), )

    
    VendorName = property(__VendorName.value, __VendorName.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}ProductName uses Python identifier ProductName
    __ProductName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ProductName'), 'ProductName', '__urnswiftsaaxsdsaa_2_0_Product_urnswiftsaaxsdsaa_2_0ProductName', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 624, 3), )

    
    ProductName = property(__ProductName.value, __ProductName.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}ProductVersion uses Python identifier ProductVersion
    __ProductVersion = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ProductVersion'), 'ProductVersion', '__urnswiftsaaxsdsaa_2_0_Product_urnswiftsaaxsdsaa_2_0ProductVersion', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 625, 3), )

    
    ProductVersion = property(__ProductVersion.value, __ProductVersion.set, None, None)

    _ElementMap.update({
        __VendorName.name() : __VendorName,
        __ProductName.name() : __ProductName,
        __ProductVersion.name() : __ProductVersion
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.Product = Product
Namespace.addCategoryObject('typeBinding', 'Product', Product)


# Complex type {urn:swift:saa:xsd:saa.2.0}ProductList with content type ELEMENT_ONLY
class ProductList (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:swift:saa:xsd:saa.2.0}ProductList with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ProductList')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 628, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:swift:saa:xsd:saa.2.0}Product uses Python identifier Product
    __Product = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Product'), 'Product', '__urnswiftsaaxsdsaa_2_0_ProductList_urnswiftsaaxsdsaa_2_0Product', True, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 630, 3), )

    
    Product = property(__Product.value, __Product.set, None, None)

    _ElementMap.update({
        __Product.name() : __Product
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ProductList = ProductList
Namespace.addCategoryObject('typeBinding', 'ProductList', ProductList)


# Complex type {urn:swift:saa:xsd:saa.2.0}Digest with content type ELEMENT_ONLY
class Digest (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:swift:saa:xsd:saa.2.0}Digest with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Digest')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 633, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:swift:saa:xsd:saa.2.0}DigestRef uses Python identifier DigestRef
    __DigestRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DigestRef'), 'DigestRef', '__urnswiftsaaxsdsaa_2_0_Digest_urnswiftsaaxsdsaa_2_0DigestRef', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 635, 3), )

    
    DigestRef = property(__DigestRef.value, __DigestRef.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}DigestValue uses Python identifier DigestValue
    __DigestValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DigestValue'), 'DigestValue', '__urnswiftsaaxsdsaa_2_0_Digest_urnswiftsaaxsdsaa_2_0DigestValue', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 636, 3), )

    
    DigestValue = property(__DigestValue.value, __DigestValue.set, None, None)

    _ElementMap.update({
        __DigestRef.name() : __DigestRef,
        __DigestValue.name() : __DigestValue
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.Digest = Digest
Namespace.addCategoryObject('typeBinding', 'Digest', Digest)


# Complex type {urn:swift:saa:xsd:saa.2.0}DigestList with content type ELEMENT_ONLY
class DigestList (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:swift:saa:xsd:saa.2.0}DigestList with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DigestList')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 639, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:swift:saa:xsd:saa.2.0}Digest uses Python identifier Digest
    __Digest = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Digest'), 'Digest', '__urnswiftsaaxsdsaa_2_0_DigestList_urnswiftsaaxsdsaa_2_0Digest', True, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 641, 3), )

    
    Digest = property(__Digest.value, __Digest.set, None, None)

    _ElementMap.update({
        __Digest.name() : __Digest
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DigestList = DigestList
Namespace.addCategoryObject('typeBinding', 'DigestList', DigestList)


# Complex type {urn:swift:saa:xsd:saa.2.0}MessageProperty with content type ELEMENT_ONLY
class MessageProperty (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:swift:saa:xsd:saa.2.0}MessageProperty with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MessageProperty')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 644, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:swift:saa:xsd:saa.2.0}MessagePropertyName uses Python identifier MessagePropertyName
    __MessagePropertyName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MessagePropertyName'), 'MessagePropertyName', '__urnswiftsaaxsdsaa_2_0_MessageProperty_urnswiftsaaxsdsaa_2_0MessagePropertyName', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 646, 3), )

    
    MessagePropertyName = property(__MessagePropertyName.value, __MessagePropertyName.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}MessagePropertyValue uses Python identifier MessagePropertyValue
    __MessagePropertyValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MessagePropertyValue'), 'MessagePropertyValue', '__urnswiftsaaxsdsaa_2_0_MessageProperty_urnswiftsaaxsdsaa_2_0MessagePropertyValue', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 647, 3), )

    
    MessagePropertyValue = property(__MessagePropertyValue.value, __MessagePropertyValue.set, None, None)

    _ElementMap.update({
        __MessagePropertyName.name() : __MessagePropertyName,
        __MessagePropertyValue.name() : __MessagePropertyValue
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.MessageProperty = MessageProperty
Namespace.addCategoryObject('typeBinding', 'MessageProperty', MessageProperty)


# Complex type {urn:swift:saa:xsd:saa.2.0}MessagePropertyList with content type ELEMENT_ONLY
class MessagePropertyList (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:swift:saa:xsd:saa.2.0}MessagePropertyList with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MessagePropertyList')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 650, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:swift:saa:xsd:saa.2.0}MessageProperty uses Python identifier MessageProperty
    __MessageProperty = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MessageProperty'), 'MessageProperty', '__urnswiftsaaxsdsaa_2_0_MessagePropertyList_urnswiftsaaxsdsaa_2_0MessageProperty', True, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 652, 3), )

    
    MessageProperty = property(__MessageProperty.value, __MessageProperty.set, None, None)

    _ElementMap.update({
        __MessageProperty.name() : __MessageProperty
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.MessagePropertyList = MessagePropertyList
Namespace.addCategoryObject('typeBinding', 'MessagePropertyList', MessagePropertyList)


# Complex type {urn:swift:saa:xsd:saa.2.0}InterfaceInfo with content type ELEMENT_ONLY
class InterfaceInfo (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:swift:saa:xsd:saa.2.0}InterfaceInfo with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'InterfaceInfo')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 656, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:swift:saa:xsd:saa.2.0}UserReference uses Python identifier UserReference
    __UserReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UserReference'), 'UserReference', '__urnswiftsaaxsdsaa_2_0_InterfaceInfo_urnswiftsaaxsdsaa_2_0UserReference', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 658, 3), )

    
    UserReference = property(__UserReference.value, __UserReference.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}RoutingCode uses Python identifier RoutingCode
    __RoutingCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RoutingCode'), 'RoutingCode', '__urnswiftsaaxsdsaa_2_0_InterfaceInfo_urnswiftsaaxsdsaa_2_0RoutingCode', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 659, 3), )

    
    RoutingCode = property(__RoutingCode.value, __RoutingCode.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}ValidationLevel uses Python identifier ValidationLevel
    __ValidationLevel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ValidationLevel'), 'ValidationLevel', '__urnswiftsaaxsdsaa_2_0_InterfaceInfo_urnswiftsaaxsdsaa_2_0ValidationLevel', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 660, 3), )

    
    ValidationLevel = property(__ValidationLevel.value, __ValidationLevel.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}IsModificationAllowed uses Python identifier IsModificationAllowed
    __IsModificationAllowed = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IsModificationAllowed'), 'IsModificationAllowed', '__urnswiftsaaxsdsaa_2_0_InterfaceInfo_urnswiftsaaxsdsaa_2_0IsModificationAllowed', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 661, 3), )

    
    IsModificationAllowed = property(__IsModificationAllowed.value, __IsModificationAllowed.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}RoutingInstruction uses Python identifier RoutingInstruction
    __RoutingInstruction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RoutingInstruction'), 'RoutingInstruction', '__urnswiftsaaxsdsaa_2_0_InterfaceInfo_urnswiftsaaxsdsaa_2_0RoutingInstruction', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 662, 3), )

    
    RoutingInstruction = property(__RoutingInstruction.value, __RoutingInstruction.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}MessageCreator uses Python identifier MessageCreator
    __MessageCreator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MessageCreator'), 'MessageCreator', '__urnswiftsaaxsdsaa_2_0_InterfaceInfo_urnswiftsaaxsdsaa_2_0MessageCreator', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 663, 3), )

    
    MessageCreator = property(__MessageCreator.value, __MessageCreator.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}MessageContext uses Python identifier MessageContext
    __MessageContext = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MessageContext'), 'MessageContext', '__urnswiftsaaxsdsaa_2_0_InterfaceInfo_urnswiftsaaxsdsaa_2_0MessageContext', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 664, 3), )

    
    MessageContext = property(__MessageContext.value, __MessageContext.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}MessageNature uses Python identifier MessageNature
    __MessageNature = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MessageNature'), 'MessageNature', '__urnswiftsaaxsdsaa_2_0_InterfaceInfo_urnswiftsaaxsdsaa_2_0MessageNature', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 665, 3), )

    
    MessageNature = property(__MessageNature.value, __MessageNature.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}ProductInfo uses Python identifier ProductInfo
    __ProductInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ProductInfo'), 'ProductInfo', '__urnswiftsaaxsdsaa_2_0_InterfaceInfo_urnswiftsaaxsdsaa_2_0ProductInfo', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 666, 3), )

    
    ProductInfo = property(__ProductInfo.value, __ProductInfo.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}CustomDigestValue uses Python identifier CustomDigestValue
    __CustomDigestValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CustomDigestValue'), 'CustomDigestValue', '__urnswiftsaaxsdsaa_2_0_InterfaceInfo_urnswiftsaaxsdsaa_2_0CustomDigestValue', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 667, 3), )

    
    CustomDigestValue = property(__CustomDigestValue.value, __CustomDigestValue.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}Sumid uses Python identifier Sumid
    __Sumid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Sumid'), 'Sumid', '__urnswiftsaaxsdsaa_2_0_InterfaceInfo_urnswiftsaaxsdsaa_2_0Sumid', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 668, 3), )

    
    Sumid = property(__Sumid.value, __Sumid.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}ServiceURI uses Python identifier ServiceURI
    __ServiceURI = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ServiceURI'), 'ServiceURI', '__urnswiftsaaxsdsaa_2_0_InterfaceInfo_urnswiftsaaxsdsaa_2_0ServiceURI', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 669, 3), )

    
    ServiceURI = property(__ServiceURI.value, __ServiceURI.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}MessageTypeURI uses Python identifier MessageTypeURI
    __MessageTypeURI = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MessageTypeURI'), 'MessageTypeURI', '__urnswiftsaaxsdsaa_2_0_InterfaceInfo_urnswiftsaaxsdsaa_2_0MessageTypeURI', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 670, 3), )

    
    MessageTypeURI = property(__MessageTypeURI.value, __MessageTypeURI.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}MessageProperties uses Python identifier MessageProperties
    __MessageProperties = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MessageProperties'), 'MessageProperties', '__urnswiftsaaxsdsaa_2_0_InterfaceInfo_urnswiftsaaxsdsaa_2_0MessageProperties', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 671, 3), )

    
    MessageProperties = property(__MessageProperties.value, __MessageProperties.set, None, None)

    _ElementMap.update({
        __UserReference.name() : __UserReference,
        __RoutingCode.name() : __RoutingCode,
        __ValidationLevel.name() : __ValidationLevel,
        __IsModificationAllowed.name() : __IsModificationAllowed,
        __RoutingInstruction.name() : __RoutingInstruction,
        __MessageCreator.name() : __MessageCreator,
        __MessageContext.name() : __MessageContext,
        __MessageNature.name() : __MessageNature,
        __ProductInfo.name() : __ProductInfo,
        __CustomDigestValue.name() : __CustomDigestValue,
        __Sumid.name() : __Sumid,
        __ServiceURI.name() : __ServiceURI,
        __MessageTypeURI.name() : __MessageTypeURI,
        __MessageProperties.name() : __MessageProperties
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.InterfaceInfo = InterfaceInfo
Namespace.addCategoryObject('typeBinding', 'InterfaceInfo', InterfaceInfo)


# Complex type {urn:swift:saa:xsd:saa.2.0}NetworkInfo with content type ELEMENT_ONLY
class NetworkInfo (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:swift:saa:xsd:saa.2.0}NetworkInfo with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'NetworkInfo')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 675, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:swift:saa:xsd:saa.2.0}Priority uses Python identifier Priority
    __Priority = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Priority'), 'Priority', '__urnswiftsaaxsdsaa_2_0_NetworkInfo_urnswiftsaaxsdsaa_2_0Priority', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 677, 3), )

    
    Priority = property(__Priority.value, __Priority.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}IsPossibleDuplicate uses Python identifier IsPossibleDuplicate
    __IsPossibleDuplicate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IsPossibleDuplicate'), 'IsPossibleDuplicate', '__urnswiftsaaxsdsaa_2_0_NetworkInfo_urnswiftsaaxsdsaa_2_0IsPossibleDuplicate', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 678, 3), )

    
    IsPossibleDuplicate = property(__IsPossibleDuplicate.value, __IsPossibleDuplicate.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}DuplicateHistory uses Python identifier DuplicateHistory
    __DuplicateHistory = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DuplicateHistory'), 'DuplicateHistory', '__urnswiftsaaxsdsaa_2_0_NetworkInfo_urnswiftsaaxsdsaa_2_0DuplicateHistory', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 679, 3), )

    
    DuplicateHistory = property(__DuplicateHistory.value, __DuplicateHistory.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}IsNotificationRequested uses Python identifier IsNotificationRequested
    __IsNotificationRequested = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IsNotificationRequested'), 'IsNotificationRequested', '__urnswiftsaaxsdsaa_2_0_NetworkInfo_urnswiftsaaxsdsaa_2_0IsNotificationRequested', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 680, 3), )

    
    IsNotificationRequested = property(__IsNotificationRequested.value, __IsNotificationRequested.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}Service uses Python identifier Service
    __Service = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Service'), 'Service', '__urnswiftsaaxsdsaa_2_0_NetworkInfo_urnswiftsaaxsdsaa_2_0Service', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 681, 3), )

    
    Service = property(__Service.value, __Service.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}Network uses Python identifier Network
    __Network = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Network'), 'Network', '__urnswiftsaaxsdsaa_2_0_NetworkInfo_urnswiftsaaxsdsaa_2_0Network', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 682, 3), )

    
    Network = property(__Network.value, __Network.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}SessionNr uses Python identifier SessionNr
    __SessionNr = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SessionNr'), 'SessionNr', '__urnswiftsaaxsdsaa_2_0_NetworkInfo_urnswiftsaaxsdsaa_2_0SessionNr', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 683, 3), )

    
    SessionNr = property(__SessionNr.value, __SessionNr.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}SeqNr uses Python identifier SeqNr
    __SeqNr = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SeqNr'), 'SeqNr', '__urnswiftsaaxsdsaa_2_0_NetworkInfo_urnswiftsaaxsdsaa_2_0SeqNr', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 684, 3), )

    
    SeqNr = property(__SeqNr.value, __SeqNr.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}FINNetworkInfo uses Python identifier FINNetworkInfo
    __FINNetworkInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FINNetworkInfo'), 'FINNetworkInfo', '__urnswiftsaaxsdsaa_2_0_NetworkInfo_urnswiftsaaxsdsaa_2_0FINNetworkInfo', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 686, 4), )

    
    FINNetworkInfo = property(__FINNetworkInfo.value, __FINNetworkInfo.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}SWIFTNetNetworkInfo uses Python identifier SWIFTNetNetworkInfo
    __SWIFTNetNetworkInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SWIFTNetNetworkInfo'), 'SWIFTNetNetworkInfo', '__urnswiftsaaxsdsaa_2_0_NetworkInfo_urnswiftsaaxsdsaa_2_0SWIFTNetNetworkInfo', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 687, 4), )

    
    SWIFTNetNetworkInfo = property(__SWIFTNetNetworkInfo.value, __SWIFTNetNetworkInfo.set, None, None)

    _ElementMap.update({
        __Priority.name() : __Priority,
        __IsPossibleDuplicate.name() : __IsPossibleDuplicate,
        __DuplicateHistory.name() : __DuplicateHistory,
        __IsNotificationRequested.name() : __IsNotificationRequested,
        __Service.name() : __Service,
        __Network.name() : __Network,
        __SessionNr.name() : __SessionNr,
        __SeqNr.name() : __SeqNr,
        __FINNetworkInfo.name() : __FINNetworkInfo,
        __SWIFTNetNetworkInfo.name() : __SWIFTNetNetworkInfo
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.NetworkInfo = NetworkInfo
Namespace.addCategoryObject('typeBinding', 'NetworkInfo', NetworkInfo)


# Complex type {urn:swift:saa:xsd:saa.2.0}FINNetworkInfo with content type ELEMENT_ONLY
class FINNetworkInfo (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:swift:saa:xsd:saa.2.0}FINNetworkInfo with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FINNetworkInfo')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 691, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:swift:saa:xsd:saa.2.0}UserPriority uses Python identifier UserPriority
    __UserPriority = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UserPriority'), 'UserPriority', '__urnswiftsaaxsdsaa_2_0_FINNetworkInfo_urnswiftsaaxsdsaa_2_0UserPriority', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 693, 3), )

    
    UserPriority = property(__UserPriority.value, __UserPriority.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}CopyService uses Python identifier CopyService
    __CopyService = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CopyService'), 'CopyService', '__urnswiftsaaxsdsaa_2_0_FINNetworkInfo_urnswiftsaaxsdsaa_2_0CopyService', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 694, 3), )

    
    CopyService = property(__CopyService.value, __CopyService.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}CopyCID uses Python identifier CopyCID
    __CopyCID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CopyCID'), 'CopyCID', '__urnswiftsaaxsdsaa_2_0_FINNetworkInfo_urnswiftsaaxsdsaa_2_0CopyCID', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 695, 3), )

    
    CopyCID = property(__CopyCID.value, __CopyCID.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}MessageSyntaxVersion uses Python identifier MessageSyntaxVersion
    __MessageSyntaxVersion = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MessageSyntaxVersion'), 'MessageSyntaxVersion', '__urnswiftsaaxsdsaa_2_0_FINNetworkInfo_urnswiftsaaxsdsaa_2_0MessageSyntaxVersion', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 696, 3), )

    
    MessageSyntaxVersion = property(__MessageSyntaxVersion.value, __MessageSyntaxVersion.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}IsRetrieved uses Python identifier IsRetrieved
    __IsRetrieved = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IsRetrieved'), 'IsRetrieved', '__urnswiftsaaxsdsaa_2_0_FINNetworkInfo_urnswiftsaaxsdsaa_2_0IsRetrieved', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 697, 3), )

    
    IsRetrieved = property(__IsRetrieved.value, __IsRetrieved.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}ReleaseInfo uses Python identifier ReleaseInfo
    __ReleaseInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReleaseInfo'), 'ReleaseInfo', '__urnswiftsaaxsdsaa_2_0_FINNetworkInfo_urnswiftsaaxsdsaa_2_0ReleaseInfo', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 698, 3), )

    
    ReleaseInfo = property(__ReleaseInfo.value, __ReleaseInfo.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}ValidationIdentifier uses Python identifier ValidationIdentifier
    __ValidationIdentifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ValidationIdentifier'), 'ValidationIdentifier', '__urnswiftsaaxsdsaa_2_0_FINNetworkInfo_urnswiftsaaxsdsaa_2_0ValidationIdentifier', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 699, 3), )

    
    ValidationIdentifier = property(__ValidationIdentifier.value, __ValidationIdentifier.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}CorrespondentInputReference uses Python identifier CorrespondentInputReference
    __CorrespondentInputReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CorrespondentInputReference'), 'CorrespondentInputReference', '__urnswiftsaaxsdsaa_2_0_FINNetworkInfo_urnswiftsaaxsdsaa_2_0CorrespondentInputReference', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 700, 3), )

    
    CorrespondentInputReference = property(__CorrespondentInputReference.value, __CorrespondentInputReference.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}CorrespondentInputTime uses Python identifier CorrespondentInputTime
    __CorrespondentInputTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CorrespondentInputTime'), 'CorrespondentInputTime', '__urnswiftsaaxsdsaa_2_0_FINNetworkInfo_urnswiftsaaxsdsaa_2_0CorrespondentInputTime', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 701, 3), )

    
    CorrespondentInputTime = property(__CorrespondentInputTime.value, __CorrespondentInputTime.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}LocalOutputTime uses Python identifier LocalOutputTime
    __LocalOutputTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LocalOutputTime'), 'LocalOutputTime', '__urnswiftsaaxsdsaa_2_0_FINNetworkInfo_urnswiftsaaxsdsaa_2_0LocalOutputTime', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 702, 3), )

    
    LocalOutputTime = property(__LocalOutputTime.value, __LocalOutputTime.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}SystemOriginated uses Python identifier SystemOriginated
    __SystemOriginated = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SystemOriginated'), 'SystemOriginated', '__urnswiftsaaxsdsaa_2_0_FINNetworkInfo_urnswiftsaaxsdsaa_2_0SystemOriginated', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 703, 3), )

    
    SystemOriginated = property(__SystemOriginated.value, __SystemOriginated.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}DelayedMessage uses Python identifier DelayedMessage
    __DelayedMessage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DelayedMessage'), 'DelayedMessage', '__urnswiftsaaxsdsaa_2_0_FINNetworkInfo_urnswiftsaaxsdsaa_2_0DelayedMessage', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 704, 3), )

    
    DelayedMessage = property(__DelayedMessage.value, __DelayedMessage.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}FINUserHeader uses Python identifier FINUserHeader
    __FINUserHeader = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FINUserHeader'), 'FINUserHeader', '__urnswiftsaaxsdsaa_2_0_FINNetworkInfo_urnswiftsaaxsdsaa_2_0FINUserHeader', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 705, 3), )

    
    FINUserHeader = property(__FINUserHeader.value, __FINUserHeader.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}ServiceLevelAgreement uses Python identifier ServiceLevelAgreement
    __ServiceLevelAgreement = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ServiceLevelAgreement'), 'ServiceLevelAgreement', '__urnswiftsaaxsdsaa_2_0_FINNetworkInfo_urnswiftsaaxsdsaa_2_0ServiceLevelAgreement', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 706, 3), )

    
    ServiceLevelAgreement = property(__ServiceLevelAgreement.value, __ServiceLevelAgreement.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}E2ETransactionReference uses Python identifier E2ETransactionReference
    __E2ETransactionReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'E2ETransactionReference'), 'E2ETransactionReference', '__urnswiftsaaxsdsaa_2_0_FINNetworkInfo_urnswiftsaaxsdsaa_2_0E2ETransactionReference', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 707, 3), )

    
    E2ETransactionReference = property(__E2ETransactionReference.value, __E2ETransactionReference.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}FinInformReleaseInfo uses Python identifier FinInformReleaseInfo
    __FinInformReleaseInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FinInformReleaseInfo'), 'FinInformReleaseInfo', '__urnswiftsaaxsdsaa_2_0_FINNetworkInfo_urnswiftsaaxsdsaa_2_0FinInformReleaseInfo', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 708, 3), )

    
    FinInformReleaseInfo = property(__FinInformReleaseInfo.value, __FinInformReleaseInfo.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}PCInfoForReceiver uses Python identifier PCInfoForReceiver
    __PCInfoForReceiver = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PCInfoForReceiver'), 'PCInfoForReceiver', '__urnswiftsaaxsdsaa_2_0_FINNetworkInfo_urnswiftsaaxsdsaa_2_0PCInfoForReceiver', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 709, 3), )

    
    PCInfoForReceiver = property(__PCInfoForReceiver.value, __PCInfoForReceiver.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}TranslatedResult uses Python identifier TranslatedResult
    __TranslatedResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TranslatedResult'), 'TranslatedResult', '__urnswiftsaaxsdsaa_2_0_FINNetworkInfo_urnswiftsaaxsdsaa_2_0TranslatedResult', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 710, 3), )

    
    TranslatedResult = property(__TranslatedResult.value, __TranslatedResult.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}TranslationResultDetails uses Python identifier TranslationResultDetails
    __TranslationResultDetails = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TranslationResultDetails'), 'TranslationResultDetails', '__urnswiftsaaxsdsaa_2_0_FINNetworkInfo_urnswiftsaaxsdsaa_2_0TranslationResultDetails', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 711, 3), )

    
    TranslationResultDetails = property(__TranslationResultDetails.value, __TranslationResultDetails.set, None, None)

    _ElementMap.update({
        __UserPriority.name() : __UserPriority,
        __CopyService.name() : __CopyService,
        __CopyCID.name() : __CopyCID,
        __MessageSyntaxVersion.name() : __MessageSyntaxVersion,
        __IsRetrieved.name() : __IsRetrieved,
        __ReleaseInfo.name() : __ReleaseInfo,
        __ValidationIdentifier.name() : __ValidationIdentifier,
        __CorrespondentInputReference.name() : __CorrespondentInputReference,
        __CorrespondentInputTime.name() : __CorrespondentInputTime,
        __LocalOutputTime.name() : __LocalOutputTime,
        __SystemOriginated.name() : __SystemOriginated,
        __DelayedMessage.name() : __DelayedMessage,
        __FINUserHeader.name() : __FINUserHeader,
        __ServiceLevelAgreement.name() : __ServiceLevelAgreement,
        __E2ETransactionReference.name() : __E2ETransactionReference,
        __FinInformReleaseInfo.name() : __FinInformReleaseInfo,
        __PCInfoForReceiver.name() : __PCInfoForReceiver,
        __TranslatedResult.name() : __TranslatedResult,
        __TranslationResultDetails.name() : __TranslationResultDetails
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.FINNetworkInfo = FINNetworkInfo
Namespace.addCategoryObject('typeBinding', 'FINNetworkInfo', FINNetworkInfo)


# Complex type {urn:swift:saa:xsd:saa.2.0}PayloadAttribute with content type ELEMENT_ONLY
class PayloadAttribute (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:swift:saa:xsd:saa.2.0}PayloadAttribute with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PayloadAttribute')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 714, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:swift:saa:xsd:saa.2.0}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__urnswiftsaaxsdsaa_2_0_PayloadAttribute_urnswiftsaaxsdsaa_2_0Name', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 716, 3), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}Value uses Python identifier Value
    __Value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Value'), 'Value', '__urnswiftsaaxsdsaa_2_0_PayloadAttribute_urnswiftsaaxsdsaa_2_0Value', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 717, 3), )

    
    Value = property(__Value.value, __Value.set, None, None)

    _ElementMap.update({
        __Name.name() : __Name,
        __Value.name() : __Value
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.PayloadAttribute = PayloadAttribute
Namespace.addCategoryObject('typeBinding', 'PayloadAttribute', PayloadAttribute)


# Complex type {urn:swift:saa:xsd:saa.2.0}PayloadAttributeList with content type ELEMENT_ONLY
class PayloadAttributeList (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:swift:saa:xsd:saa.2.0}PayloadAttributeList with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PayloadAttributeList')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 720, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:swift:saa:xsd:saa.2.0}PayloadAttribute uses Python identifier PayloadAttribute
    __PayloadAttribute = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PayloadAttribute'), 'PayloadAttribute', '__urnswiftsaaxsdsaa_2_0_PayloadAttributeList_urnswiftsaaxsdsaa_2_0PayloadAttribute', True, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 722, 3), )

    
    PayloadAttribute = property(__PayloadAttribute.value, __PayloadAttribute.set, None, None)

    _ElementMap.update({
        __PayloadAttribute.name() : __PayloadAttribute
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.PayloadAttributeList = PayloadAttributeList
Namespace.addCategoryObject('typeBinding', 'PayloadAttributeList', PayloadAttributeList)


# Complex type {urn:swift:saa:xsd:saa.2.0}RecipientListType with content type ELEMENT_ONLY
class RecipientListType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:swift:saa:xsd:saa.2.0}RecipientListType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RecipientListType')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 725, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:swift:saa:xsd:saa.2.0}RecipientDN uses Python identifier RecipientDN
    __RecipientDN = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RecipientDN'), 'RecipientDN', '__urnswiftsaaxsdsaa_2_0_RecipientListType_urnswiftsaaxsdsaa_2_0RecipientDN', True, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 727, 3), )

    
    RecipientDN = property(__RecipientDN.value, __RecipientDN.set, None, None)

    _ElementMap.update({
        __RecipientDN.name() : __RecipientDN
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.RecipientListType = RecipientListType
Namespace.addCategoryObject('typeBinding', 'RecipientListType', RecipientListType)


# Complex type {urn:swift:saa:xsd:saa.2.0}ThirdPartyListType with content type ELEMENT_ONLY
class ThirdPartyListType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:swift:saa:xsd:saa.2.0}ThirdPartyListType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ThirdPartyListType')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 730, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:swift:saa:xsd:saa.2.0}ThirdPartyDN uses Python identifier ThirdPartyDN
    __ThirdPartyDN = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ThirdPartyDN'), 'ThirdPartyDN', '__urnswiftsaaxsdsaa_2_0_ThirdPartyListType_urnswiftsaaxsdsaa_2_0ThirdPartyDN', True, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 732, 3), )

    
    ThirdPartyDN = property(__ThirdPartyDN.value, __ThirdPartyDN.set, None, None)

    _ElementMap.update({
        __ThirdPartyDN.name() : __ThirdPartyDN
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ThirdPartyListType = ThirdPartyListType
Namespace.addCategoryObject('typeBinding', 'ThirdPartyListType', ThirdPartyListType)


# Complex type {urn:swift:saa:xsd:saa.2.0}DistributionInfo with content type ELEMENT_ONLY
class DistributionInfo (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:swift:saa:xsd:saa.2.0}DistributionInfo with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DistributionInfo')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 735, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:swift:saa:xsd:saa.2.0}RecipientDNList uses Python identifier RecipientDNList
    __RecipientDNList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RecipientDNList'), 'RecipientDNList', '__urnswiftsaaxsdsaa_2_0_DistributionInfo_urnswiftsaaxsdsaa_2_0RecipientDNList', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 737, 3), )

    
    RecipientDNList = property(__RecipientDNList.value, __RecipientDNList.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}OrigSnFRef uses Python identifier OrigSnFRef
    __OrigSnFRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OrigSnFRef'), 'OrigSnFRef', '__urnswiftsaaxsdsaa_2_0_DistributionInfo_urnswiftsaaxsdsaa_2_0OrigSnFRef', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 738, 3), )

    
    OrigSnFRef = property(__OrigSnFRef.value, __OrigSnFRef.set, None, None)

    _ElementMap.update({
        __RecipientDNList.name() : __RecipientDNList,
        __OrigSnFRef.name() : __OrigSnFRef
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DistributionInfo = DistributionInfo
Namespace.addCategoryObject('typeBinding', 'DistributionInfo', DistributionInfo)


# Complex type {urn:swift:saa:xsd:saa.2.0}SWIFTNetNetworkInfo with content type ELEMENT_ONLY
class SWIFTNetNetworkInfo (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:swift:saa:xsd:saa.2.0}SWIFTNetNetworkInfo with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SWIFTNetNetworkInfo')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 741, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:swift:saa:xsd:saa.2.0}RequestType uses Python identifier RequestType
    __RequestType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RequestType'), 'RequestType', '__urnswiftsaaxsdsaa_2_0_SWIFTNetNetworkInfo_urnswiftsaaxsdsaa_2_0RequestType', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 743, 3), )

    
    RequestType = property(__RequestType.value, __RequestType.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}RequestSubtype uses Python identifier RequestSubtype
    __RequestSubtype = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RequestSubtype'), 'RequestSubtype', '__urnswiftsaaxsdsaa_2_0_SWIFTNetNetworkInfo_urnswiftsaaxsdsaa_2_0RequestSubtype', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 744, 3), )

    
    RequestSubtype = property(__RequestSubtype.value, __RequestSubtype.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}SWIFTRef uses Python identifier SWIFTRef
    __SWIFTRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SWIFTRef'), 'SWIFTRef', '__urnswiftsaaxsdsaa_2_0_SWIFTNetNetworkInfo_urnswiftsaaxsdsaa_2_0SWIFTRef', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 745, 3), )

    
    SWIFTRef = property(__SWIFTRef.value, __SWIFTRef.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}SNLRef uses Python identifier SNLRef
    __SNLRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SNLRef'), 'SNLRef', '__urnswiftsaaxsdsaa_2_0_SWIFTNetNetworkInfo_urnswiftsaaxsdsaa_2_0SNLRef', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 746, 3), )

    
    SNLRef = property(__SNLRef.value, __SNLRef.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}Reference uses Python identifier Reference
    __Reference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Reference'), 'Reference', '__urnswiftsaaxsdsaa_2_0_SWIFTNetNetworkInfo_urnswiftsaaxsdsaa_2_0Reference', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 747, 3), )

    
    Reference = property(__Reference.value, __Reference.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}SNLEndPoint uses Python identifier SNLEndPoint
    __SNLEndPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SNLEndPoint'), 'SNLEndPoint', '__urnswiftsaaxsdsaa_2_0_SWIFTNetNetworkInfo_urnswiftsaaxsdsaa_2_0SNLEndPoint', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 748, 3), )

    
    SNLEndPoint = property(__SNLEndPoint.value, __SNLEndPoint.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}SnFQueueName uses Python identifier SnFQueueName
    __SnFQueueName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SnFQueueName'), 'SnFQueueName', '__urnswiftsaaxsdsaa_2_0_SWIFTNetNetworkInfo_urnswiftsaaxsdsaa_2_0SnFQueueName', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 749, 3), )

    
    SnFQueueName = property(__SnFQueueName.value, __SnFQueueName.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}SnFChannelName uses Python identifier SnFChannelName
    __SnFChannelName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SnFChannelName'), 'SnFChannelName', '__urnswiftsaaxsdsaa_2_0_SWIFTNetNetworkInfo_urnswiftsaaxsdsaa_2_0SnFChannelName', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 750, 3), )

    
    SnFChannelName = property(__SnFChannelName.value, __SnFChannelName.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}SnFInputTime uses Python identifier SnFInputTime
    __SnFInputTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SnFInputTime'), 'SnFInputTime', '__urnswiftsaaxsdsaa_2_0_SWIFTNetNetworkInfo_urnswiftsaaxsdsaa_2_0SnFInputTime', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 751, 3), )

    
    SnFInputTime = property(__SnFInputTime.value, __SnFInputTime.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}SnFDeliveryTime uses Python identifier SnFDeliveryTime
    __SnFDeliveryTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SnFDeliveryTime'), 'SnFDeliveryTime', '__urnswiftsaaxsdsaa_2_0_SWIFTNetNetworkInfo_urnswiftsaaxsdsaa_2_0SnFDeliveryTime', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 752, 3), )

    
    SnFDeliveryTime = property(__SnFDeliveryTime.value, __SnFDeliveryTime.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}CreationTime uses Python identifier CreationTime
    __CreationTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CreationTime'), 'CreationTime', '__urnswiftsaaxsdsaa_2_0_SWIFTNetNetworkInfo_urnswiftsaaxsdsaa_2_0CreationTime', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 753, 3), )

    
    CreationTime = property(__CreationTime.value, __CreationTime.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}ValidationDescriptor uses Python identifier ValidationDescriptor
    __ValidationDescriptor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ValidationDescriptor'), 'ValidationDescriptor', '__urnswiftsaaxsdsaa_2_0_SWIFTNetNetworkInfo_urnswiftsaaxsdsaa_2_0ValidationDescriptor', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 754, 3), )

    
    ValidationDescriptor = property(__ValidationDescriptor.value, __ValidationDescriptor.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}ResponseResponderDN uses Python identifier ResponseResponderDN
    __ResponseResponderDN = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ResponseResponderDN'), 'ResponseResponderDN', '__urnswiftsaaxsdsaa_2_0_SWIFTNetNetworkInfo_urnswiftsaaxsdsaa_2_0ResponseResponderDN', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 755, 3), )

    
    ResponseResponderDN = property(__ResponseResponderDN.value, __ResponseResponderDN.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}ResponseSWIFTRef uses Python identifier ResponseSWIFTRef
    __ResponseSWIFTRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ResponseSWIFTRef'), 'ResponseSWIFTRef', '__urnswiftsaaxsdsaa_2_0_SWIFTNetNetworkInfo_urnswiftsaaxsdsaa_2_0ResponseSWIFTRef', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 756, 3), )

    
    ResponseSWIFTRef = property(__ResponseSWIFTRef.value, __ResponseSWIFTRef.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}ResponseSNLRef uses Python identifier ResponseSNLRef
    __ResponseSNLRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ResponseSNLRef'), 'ResponseSNLRef', '__urnswiftsaaxsdsaa_2_0_SWIFTNetNetworkInfo_urnswiftsaaxsdsaa_2_0ResponseSNLRef', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 757, 3), )

    
    ResponseSNLRef = property(__ResponseSNLRef.value, __ResponseSNLRef.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}ResponseReference uses Python identifier ResponseReference
    __ResponseReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ResponseReference'), 'ResponseReference', '__urnswiftsaaxsdsaa_2_0_SWIFTNetNetworkInfo_urnswiftsaaxsdsaa_2_0ResponseReference', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 758, 3), )

    
    ResponseReference = property(__ResponseReference.value, __ResponseReference.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}IsPossibleDuplicateResponse uses Python identifier IsPossibleDuplicateResponse
    __IsPossibleDuplicateResponse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IsPossibleDuplicateResponse'), 'IsPossibleDuplicateResponse', '__urnswiftsaaxsdsaa_2_0_SWIFTNetNetworkInfo_urnswiftsaaxsdsaa_2_0IsPossibleDuplicateResponse', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 759, 3), )

    
    IsPossibleDuplicateResponse = property(__IsPossibleDuplicateResponse.value, __IsPossibleDuplicateResponse.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}ResponseValidationDescriptor uses Python identifier ResponseValidationDescriptor
    __ResponseValidationDescriptor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ResponseValidationDescriptor'), 'ResponseValidationDescriptor', '__urnswiftsaaxsdsaa_2_0_SWIFTNetNetworkInfo_urnswiftsaaxsdsaa_2_0ResponseValidationDescriptor', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 760, 3), )

    
    ResponseValidationDescriptor = property(__ResponseValidationDescriptor.value, __ResponseValidationDescriptor.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}PayloadAttributes uses Python identifier PayloadAttributes
    __PayloadAttributes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PayloadAttributes'), 'PayloadAttributes', '__urnswiftsaaxsdsaa_2_0_SWIFTNetNetworkInfo_urnswiftsaaxsdsaa_2_0PayloadAttributes', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 761, 3), )

    
    PayloadAttributes = property(__PayloadAttributes.value, __PayloadAttributes.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}ResponsePayloadAttributes uses Python identifier ResponsePayloadAttributes
    __ResponsePayloadAttributes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ResponsePayloadAttributes'), 'ResponsePayloadAttributes', '__urnswiftsaaxsdsaa_2_0_SWIFTNetNetworkInfo_urnswiftsaaxsdsaa_2_0ResponsePayloadAttributes', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 762, 3), )

    
    ResponsePayloadAttributes = property(__ResponsePayloadAttributes.value, __ResponsePayloadAttributes.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}IsCopyRequested uses Python identifier IsCopyRequested
    __IsCopyRequested = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IsCopyRequested'), 'IsCopyRequested', '__urnswiftsaaxsdsaa_2_0_SWIFTNetNetworkInfo_urnswiftsaaxsdsaa_2_0IsCopyRequested', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 763, 3), )

    
    IsCopyRequested = property(__IsCopyRequested.value, __IsCopyRequested.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}IsAuthNotificationRequested uses Python identifier IsAuthNotificationRequested
    __IsAuthNotificationRequested = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IsAuthNotificationRequested'), 'IsAuthNotificationRequested', '__urnswiftsaaxsdsaa_2_0_SWIFTNetNetworkInfo_urnswiftsaaxsdsaa_2_0IsAuthNotificationRequested', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 764, 3), )

    
    IsAuthNotificationRequested = property(__IsAuthNotificationRequested.value, __IsAuthNotificationRequested.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}CopyInfo uses Python identifier CopyInfo
    __CopyInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CopyInfo'), 'CopyInfo', '__urnswiftsaaxsdsaa_2_0_SWIFTNetNetworkInfo_urnswiftsaaxsdsaa_2_0CopyInfo', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 765, 3), )

    
    CopyInfo = property(__CopyInfo.value, __CopyInfo.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}TransferRef uses Python identifier TransferRef
    __TransferRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TransferRef'), 'TransferRef', '__urnswiftsaaxsdsaa_2_0_SWIFTNetNetworkInfo_urnswiftsaaxsdsaa_2_0TransferRef', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 766, 3), )

    
    TransferRef = property(__TransferRef.value, __TransferRef.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}StoredTransferRef uses Python identifier StoredTransferRef
    __StoredTransferRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'StoredTransferRef'), 'StoredTransferRef', '__urnswiftsaaxsdsaa_2_0_SWIFTNetNetworkInfo_urnswiftsaaxsdsaa_2_0StoredTransferRef', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 767, 3), )

    
    StoredTransferRef = property(__StoredTransferRef.value, __StoredTransferRef.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}OrigSnfRef uses Python identifier OrigSnfRef
    __OrigSnfRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OrigSnfRef'), 'OrigSnfRef', '__urnswiftsaaxsdsaa_2_0_SWIFTNetNetworkInfo_urnswiftsaaxsdsaa_2_0OrigSnfRef', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 768, 3), )

    
    OrigSnfRef = property(__OrigSnfRef.value, __OrigSnfRef.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}TransferDescription uses Python identifier TransferDescription
    __TransferDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TransferDescription'), 'TransferDescription', '__urnswiftsaaxsdsaa_2_0_SWIFTNetNetworkInfo_urnswiftsaaxsdsaa_2_0TransferDescription', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 769, 3), )

    
    TransferDescription = property(__TransferDescription.value, __TransferDescription.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}TransferInfo uses Python identifier TransferInfo
    __TransferInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TransferInfo'), 'TransferInfo', '__urnswiftsaaxsdsaa_2_0_SWIFTNetNetworkInfo_urnswiftsaaxsdsaa_2_0TransferInfo', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 770, 3), )

    
    TransferInfo = property(__TransferInfo.value, __TransferInfo.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}FileDescription uses Python identifier FileDescription
    __FileDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FileDescription'), 'FileDescription', '__urnswiftsaaxsdsaa_2_0_SWIFTNetNetworkInfo_urnswiftsaaxsdsaa_2_0FileDescription', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 771, 3), )

    
    FileDescription = property(__FileDescription.value, __FileDescription.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}FileInfo uses Python identifier FileInfo
    __FileInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FileInfo'), 'FileInfo', '__urnswiftsaaxsdsaa_2_0_SWIFTNetNetworkInfo_urnswiftsaaxsdsaa_2_0FileInfo', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 772, 3), )

    
    FileInfo = property(__FileInfo.value, __FileInfo.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}HeaderInfo uses Python identifier HeaderInfo
    __HeaderInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'HeaderInfo'), 'HeaderInfo', '__urnswiftsaaxsdsaa_2_0_SWIFTNetNetworkInfo_urnswiftsaaxsdsaa_2_0HeaderInfo', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 773, 3), )

    
    HeaderInfo = property(__HeaderInfo.value, __HeaderInfo.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}NotificationResponderDN uses Python identifier NotificationResponderDN
    __NotificationResponderDN = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NotificationResponderDN'), 'NotificationResponderDN', '__urnswiftsaaxsdsaa_2_0_SWIFTNetNetworkInfo_urnswiftsaaxsdsaa_2_0NotificationResponderDN', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 774, 3), )

    
    NotificationResponderDN = property(__NotificationResponderDN.value, __NotificationResponderDN.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}NotificationRequestType uses Python identifier NotificationRequestType
    __NotificationRequestType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NotificationRequestType'), 'NotificationRequestType', '__urnswiftsaaxsdsaa_2_0_SWIFTNetNetworkInfo_urnswiftsaaxsdsaa_2_0NotificationRequestType', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 775, 3), )

    
    NotificationRequestType = property(__NotificationRequestType.value, __NotificationRequestType.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}FileStartTime uses Python identifier FileStartTime
    __FileStartTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FileStartTime'), 'FileStartTime', '__urnswiftsaaxsdsaa_2_0_SWIFTNetNetworkInfo_urnswiftsaaxsdsaa_2_0FileStartTime', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 776, 3), )

    
    FileStartTime = property(__FileStartTime.value, __FileStartTime.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}FileEndTime uses Python identifier FileEndTime
    __FileEndTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FileEndTime'), 'FileEndTime', '__urnswiftsaaxsdsaa_2_0_SWIFTNetNetworkInfo_urnswiftsaaxsdsaa_2_0FileEndTime', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 777, 3), )

    
    FileEndTime = property(__FileEndTime.value, __FileEndTime.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}OverdueWarningTime uses Python identifier OverdueWarningTime
    __OverdueWarningTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OverdueWarningTime'), 'OverdueWarningTime', '__urnswiftsaaxsdsaa_2_0_SWIFTNetNetworkInfo_urnswiftsaaxsdsaa_2_0OverdueWarningTime', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 778, 3), )

    
    OverdueWarningTime = property(__OverdueWarningTime.value, __OverdueWarningTime.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}OverdueWarningDelay uses Python identifier OverdueWarningDelay
    __OverdueWarningDelay = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OverdueWarningDelay'), 'OverdueWarningDelay', '__urnswiftsaaxsdsaa_2_0_SWIFTNetNetworkInfo_urnswiftsaaxsdsaa_2_0OverdueWarningDelay', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 779, 3), )

    
    OverdueWarningDelay = property(__OverdueWarningDelay.value, __OverdueWarningDelay.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}RecipientList uses Python identifier RecipientList
    __RecipientList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RecipientList'), 'RecipientList', '__urnswiftsaaxsdsaa_2_0_SWIFTNetNetworkInfo_urnswiftsaaxsdsaa_2_0RecipientList', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 780, 3), )

    
    RecipientList = property(__RecipientList.value, __RecipientList.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}ThirdPartyList uses Python identifier ThirdPartyList
    __ThirdPartyList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ThirdPartyList'), 'ThirdPartyList', '__urnswiftsaaxsdsaa_2_0_SWIFTNetNetworkInfo_urnswiftsaaxsdsaa_2_0ThirdPartyList', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 781, 3), )

    
    ThirdPartyList = property(__ThirdPartyList.value, __ThirdPartyList.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}IsRecipientListPublic uses Python identifier IsRecipientListPublic
    __IsRecipientListPublic = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IsRecipientListPublic'), 'IsRecipientListPublic', '__urnswiftsaaxsdsaa_2_0_SWIFTNetNetworkInfo_urnswiftsaaxsdsaa_2_0IsRecipientListPublic', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 782, 3), )

    
    IsRecipientListPublic = property(__IsRecipientListPublic.value, __IsRecipientListPublic.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}DistributionInfo uses Python identifier DistributionInfo
    __DistributionInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DistributionInfo'), 'DistributionInfo', '__urnswiftsaaxsdsaa_2_0_SWIFTNetNetworkInfo_urnswiftsaaxsdsaa_2_0DistributionInfo', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 783, 3), )

    
    DistributionInfo = property(__DistributionInfo.value, __DistributionInfo.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}RetrievalInfo uses Python identifier RetrievalInfo
    __RetrievalInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RetrievalInfo'), 'RetrievalInfo', '__urnswiftsaaxsdsaa_2_0_SWIFTNetNetworkInfo_urnswiftsaaxsdsaa_2_0RetrievalInfo', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 784, 3), )

    
    RetrievalInfo = property(__RetrievalInfo.value, __RetrievalInfo.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}RequestE2EControl uses Python identifier RequestE2EControl
    __RequestE2EControl = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RequestE2EControl'), 'RequestE2EControl', '__urnswiftsaaxsdsaa_2_0_SWIFTNetNetworkInfo_urnswiftsaaxsdsaa_2_0RequestE2EControl', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 785, 3), )

    
    RequestE2EControl = property(__RequestE2EControl.value, __RequestE2EControl.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}RetrievalDescriptor uses Python identifier RetrievalDescriptor
    __RetrievalDescriptor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RetrievalDescriptor'), 'RetrievalDescriptor', '__urnswiftsaaxsdsaa_2_0_SWIFTNetNetworkInfo_urnswiftsaaxsdsaa_2_0RetrievalDescriptor', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 786, 3), )

    
    RetrievalDescriptor = property(__RetrievalDescriptor.value, __RetrievalDescriptor.set, None, None)

    _ElementMap.update({
        __RequestType.name() : __RequestType,
        __RequestSubtype.name() : __RequestSubtype,
        __SWIFTRef.name() : __SWIFTRef,
        __SNLRef.name() : __SNLRef,
        __Reference.name() : __Reference,
        __SNLEndPoint.name() : __SNLEndPoint,
        __SnFQueueName.name() : __SnFQueueName,
        __SnFChannelName.name() : __SnFChannelName,
        __SnFInputTime.name() : __SnFInputTime,
        __SnFDeliveryTime.name() : __SnFDeliveryTime,
        __CreationTime.name() : __CreationTime,
        __ValidationDescriptor.name() : __ValidationDescriptor,
        __ResponseResponderDN.name() : __ResponseResponderDN,
        __ResponseSWIFTRef.name() : __ResponseSWIFTRef,
        __ResponseSNLRef.name() : __ResponseSNLRef,
        __ResponseReference.name() : __ResponseReference,
        __IsPossibleDuplicateResponse.name() : __IsPossibleDuplicateResponse,
        __ResponseValidationDescriptor.name() : __ResponseValidationDescriptor,
        __PayloadAttributes.name() : __PayloadAttributes,
        __ResponsePayloadAttributes.name() : __ResponsePayloadAttributes,
        __IsCopyRequested.name() : __IsCopyRequested,
        __IsAuthNotificationRequested.name() : __IsAuthNotificationRequested,
        __CopyInfo.name() : __CopyInfo,
        __TransferRef.name() : __TransferRef,
        __StoredTransferRef.name() : __StoredTransferRef,
        __OrigSnfRef.name() : __OrigSnfRef,
        __TransferDescription.name() : __TransferDescription,
        __TransferInfo.name() : __TransferInfo,
        __FileDescription.name() : __FileDescription,
        __FileInfo.name() : __FileInfo,
        __HeaderInfo.name() : __HeaderInfo,
        __NotificationResponderDN.name() : __NotificationResponderDN,
        __NotificationRequestType.name() : __NotificationRequestType,
        __FileStartTime.name() : __FileStartTime,
        __FileEndTime.name() : __FileEndTime,
        __OverdueWarningTime.name() : __OverdueWarningTime,
        __OverdueWarningDelay.name() : __OverdueWarningDelay,
        __RecipientList.name() : __RecipientList,
        __ThirdPartyList.name() : __ThirdPartyList,
        __IsRecipientListPublic.name() : __IsRecipientListPublic,
        __DistributionInfo.name() : __DistributionInfo,
        __RetrievalInfo.name() : __RetrievalInfo,
        __RequestE2EControl.name() : __RequestE2EControl,
        __RetrievalDescriptor.name() : __RetrievalDescriptor
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.SWIFTNetNetworkInfo = SWIFTNetNetworkInfo
Namespace.addCategoryObject('typeBinding', 'SWIFTNetNetworkInfo', SWIFTNetNetworkInfo)


# Complex type {urn:swift:saa:xsd:saa.2.0}SecurityInfo with content type ELEMENT_ONLY
class SecurityInfo (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:swift:saa:xsd:saa.2.0}SecurityInfo with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SecurityInfo')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 790, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:swift:saa:xsd:saa.2.0}IsSigningRequested uses Python identifier IsSigningRequested
    __IsSigningRequested = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IsSigningRequested'), 'IsSigningRequested', '__urnswiftsaaxsdsaa_2_0_SecurityInfo_urnswiftsaaxsdsaa_2_0IsSigningRequested', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 792, 3), )

    
    IsSigningRequested = property(__IsSigningRequested.value, __IsSigningRequested.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}RMAResult uses Python identifier RMAResult
    __RMAResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RMAResult'), 'RMAResult', '__urnswiftsaaxsdsaa_2_0_SecurityInfo_urnswiftsaaxsdsaa_2_0RMAResult', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 793, 3), )

    
    RMAResult = property(__RMAResult.value, __RMAResult.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}RMAChecked uses Python identifier RMAChecked
    __RMAChecked = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RMAChecked'), 'RMAChecked', '__urnswiftsaaxsdsaa_2_0_SecurityInfo_urnswiftsaaxsdsaa_2_0RMAChecked', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 794, 3), )

    
    RMAChecked = property(__RMAChecked.value, __RMAChecked.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}FINSecurityInfo uses Python identifier FINSecurityInfo
    __FINSecurityInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FINSecurityInfo'), 'FINSecurityInfo', '__urnswiftsaaxsdsaa_2_0_SecurityInfo_urnswiftsaaxsdsaa_2_0FINSecurityInfo', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 796, 4), )

    
    FINSecurityInfo = property(__FINSecurityInfo.value, __FINSecurityInfo.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}SWIFTNetSecurityInfo uses Python identifier SWIFTNetSecurityInfo
    __SWIFTNetSecurityInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SWIFTNetSecurityInfo'), 'SWIFTNetSecurityInfo', '__urnswiftsaaxsdsaa_2_0_SecurityInfo_urnswiftsaaxsdsaa_2_0SWIFTNetSecurityInfo', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 797, 4), )

    
    SWIFTNetSecurityInfo = property(__SWIFTNetSecurityInfo.value, __SWIFTNetSecurityInfo.set, None, None)

    _ElementMap.update({
        __IsSigningRequested.name() : __IsSigningRequested,
        __RMAResult.name() : __RMAResult,
        __RMAChecked.name() : __RMAChecked,
        __FINSecurityInfo.name() : __FINSecurityInfo,
        __SWIFTNetSecurityInfo.name() : __SWIFTNetSecurityInfo
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.SecurityInfo = SecurityInfo
Namespace.addCategoryObject('typeBinding', 'SecurityInfo', SecurityInfo)


# Complex type {urn:swift:saa:xsd:saa.2.0}FINSecurityInfo with content type ELEMENT_ONLY
class FINSecurityInfo (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:swift:saa:xsd:saa.2.0}FINSecurityInfo with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FINSecurityInfo')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 801, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:swift:saa:xsd:saa.2.0}ChecksumResult uses Python identifier ChecksumResult
    __ChecksumResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ChecksumResult'), 'ChecksumResult', '__urnswiftsaaxsdsaa_2_0_FINSecurityInfo_urnswiftsaaxsdsaa_2_0ChecksumResult', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 803, 3), )

    
    ChecksumResult = property(__ChecksumResult.value, __ChecksumResult.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}ChecksumValue uses Python identifier ChecksumValue
    __ChecksumValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ChecksumValue'), 'ChecksumValue', '__urnswiftsaaxsdsaa_2_0_FINSecurityInfo_urnswiftsaaxsdsaa_2_0ChecksumValue', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 804, 3), )

    
    ChecksumValue = property(__ChecksumValue.value, __ChecksumValue.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}PACResult uses Python identifier PACResult
    __PACResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PACResult'), 'PACResult', '__urnswiftsaaxsdsaa_2_0_FINSecurityInfo_urnswiftsaaxsdsaa_2_0PACResult', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 805, 3), )

    
    PACResult = property(__PACResult.value, __PACResult.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}PACValue uses Python identifier PACValue
    __PACValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PACValue'), 'PACValue', '__urnswiftsaaxsdsaa_2_0_FINSecurityInfo_urnswiftsaaxsdsaa_2_0PACValue', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 806, 3), )

    
    PACValue = property(__PACValue.value, __PACValue.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}MACResult uses Python identifier MACResult
    __MACResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MACResult'), 'MACResult', '__urnswiftsaaxsdsaa_2_0_FINSecurityInfo_urnswiftsaaxsdsaa_2_0MACResult', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 807, 3), )

    
    MACResult = property(__MACResult.value, __MACResult.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}MACValue uses Python identifier MACValue
    __MACValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MACValue'), 'MACValue', '__urnswiftsaaxsdsaa_2_0_FINSecurityInfo_urnswiftsaaxsdsaa_2_0MACValue', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 808, 3), )

    
    MACValue = property(__MACValue.value, __MACValue.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}MACSignatureValue uses Python identifier MACSignatureValue
    __MACSignatureValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MACSignatureValue'), 'MACSignatureValue', '__urnswiftsaaxsdsaa_2_0_FINSecurityInfo_urnswiftsaaxsdsaa_2_0MACSignatureValue', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 809, 3), )

    
    MACSignatureValue = property(__MACSignatureValue.value, __MACSignatureValue.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}PAC2SignatureValue uses Python identifier PAC2SignatureValue
    __PAC2SignatureValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PAC2SignatureValue'), 'PAC2SignatureValue', '__urnswiftsaaxsdsaa_2_0_FINSecurityInfo_urnswiftsaaxsdsaa_2_0PAC2SignatureValue', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 810, 3), )

    
    PAC2SignatureValue = property(__PAC2SignatureValue.value, __PAC2SignatureValue.set, None, None)

    _ElementMap.update({
        __ChecksumResult.name() : __ChecksumResult,
        __ChecksumValue.name() : __ChecksumValue,
        __PACResult.name() : __PACResult,
        __PACValue.name() : __PACValue,
        __MACResult.name() : __MACResult,
        __MACValue.name() : __MACValue,
        __MACSignatureValue.name() : __MACSignatureValue,
        __PAC2SignatureValue.name() : __PAC2SignatureValue
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.FINSecurityInfo = FINSecurityInfo
Namespace.addCategoryObject('typeBinding', 'FINSecurityInfo', FINSecurityInfo)


# Complex type {urn:swift:saa:xsd:saa.2.0}SWIFTNetSecurityInfo with content type ELEMENT_ONLY
class SWIFTNetSecurityInfo (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:swift:saa:xsd:saa.2.0}SWIFTNetSecurityInfo with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SWIFTNetSecurityInfo')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 813, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:swift:saa:xsd:saa.2.0}IsNRRequested uses Python identifier IsNRRequested
    __IsNRRequested = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IsNRRequested'), 'IsNRRequested', '__urnswiftsaaxsdsaa_2_0_SWIFTNetSecurityInfo_urnswiftsaaxsdsaa_2_0IsNRRequested', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 815, 3), )

    
    IsNRRequested = property(__IsNRRequested.value, __IsNRRequested.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}SignerDN uses Python identifier SignerDN
    __SignerDN = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SignerDN'), 'SignerDN', '__urnswiftsaaxsdsaa_2_0_SWIFTNetSecurityInfo_urnswiftsaaxsdsaa_2_0SignerDN', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 816, 3), )

    
    SignerDN = property(__SignerDN.value, __SignerDN.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}NRType uses Python identifier NRType
    __NRType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NRType'), 'NRType', '__urnswiftsaaxsdsaa_2_0_SWIFTNetSecurityInfo_urnswiftsaaxsdsaa_2_0NRType', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 817, 3), )

    
    NRType = property(__NRType.value, __NRType.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}NRWarning uses Python identifier NRWarning
    __NRWarning = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NRWarning'), 'NRWarning', '__urnswiftsaaxsdsaa_2_0_SWIFTNetSecurityInfo_urnswiftsaaxsdsaa_2_0NRWarning', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 818, 3), )

    
    NRWarning = property(__NRWarning.value, __NRWarning.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}SignatureResult uses Python identifier SignatureResult
    __SignatureResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SignatureResult'), 'SignatureResult', '__urnswiftsaaxsdsaa_2_0_SWIFTNetSecurityInfo_urnswiftsaaxsdsaa_2_0SignatureResult', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 819, 3), )

    
    SignatureResult = property(__SignatureResult.value, __SignatureResult.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}SignatureValue uses Python identifier SignatureValue
    __SignatureValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SignatureValue'), 'SignatureValue', '__urnswiftsaaxsdsaa_2_0_SWIFTNetSecurityInfo_urnswiftsaaxsdsaa_2_0SignatureValue', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 820, 3), )

    
    SignatureValue = property(__SignatureValue.value, __SignatureValue.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}ResponseNRType uses Python identifier ResponseNRType
    __ResponseNRType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ResponseNRType'), 'ResponseNRType', '__urnswiftsaaxsdsaa_2_0_SWIFTNetSecurityInfo_urnswiftsaaxsdsaa_2_0ResponseNRType', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 821, 3), )

    
    ResponseNRType = property(__ResponseNRType.value, __ResponseNRType.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}ResponseNRWarning uses Python identifier ResponseNRWarning
    __ResponseNRWarning = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ResponseNRWarning'), 'ResponseNRWarning', '__urnswiftsaaxsdsaa_2_0_SWIFTNetSecurityInfo_urnswiftsaaxsdsaa_2_0ResponseNRWarning', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 822, 3), )

    
    ResponseNRWarning = property(__ResponseNRWarning.value, __ResponseNRWarning.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}ResponseSignatureResult uses Python identifier ResponseSignatureResult
    __ResponseSignatureResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ResponseSignatureResult'), 'ResponseSignatureResult', '__urnswiftsaaxsdsaa_2_0_SWIFTNetSecurityInfo_urnswiftsaaxsdsaa_2_0ResponseSignatureResult', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 823, 3), )

    
    ResponseSignatureResult = property(__ResponseSignatureResult.value, __ResponseSignatureResult.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}ResponseSignatureValue uses Python identifier ResponseSignatureValue
    __ResponseSignatureValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ResponseSignatureValue'), 'ResponseSignatureValue', '__urnswiftsaaxsdsaa_2_0_SWIFTNetSecurityInfo_urnswiftsaaxsdsaa_2_0ResponseSignatureValue', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 824, 3), )

    
    ResponseSignatureValue = property(__ResponseSignatureValue.value, __ResponseSignatureValue.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}FileDigestAlgorithm uses Python identifier FileDigestAlgorithm
    __FileDigestAlgorithm = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FileDigestAlgorithm'), 'FileDigestAlgorithm', '__urnswiftsaaxsdsaa_2_0_SWIFTNetSecurityInfo_urnswiftsaaxsdsaa_2_0FileDigestAlgorithm', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 825, 3), )

    
    FileDigestAlgorithm = property(__FileDigestAlgorithm.value, __FileDigestAlgorithm.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}FileDigestValue uses Python identifier FileDigestValue
    __FileDigestValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FileDigestValue'), 'FileDigestValue', '__urnswiftsaaxsdsaa_2_0_SWIFTNetSecurityInfo_urnswiftsaaxsdsaa_2_0FileDigestValue', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 826, 3), )

    
    FileDigestValue = property(__FileDigestValue.value, __FileDigestValue.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}DigestList uses Python identifier DigestList
    __DigestList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DigestList'), 'DigestList', '__urnswiftsaaxsdsaa_2_0_SWIFTNetSecurityInfo_urnswiftsaaxsdsaa_2_0DigestList', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 827, 3), )

    
    DigestList = property(__DigestList.value, __DigestList.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}ThirdPartySignerDN uses Python identifier ThirdPartySignerDN
    __ThirdPartySignerDN = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ThirdPartySignerDN'), 'ThirdPartySignerDN', '__urnswiftsaaxsdsaa_2_0_SWIFTNetSecurityInfo_urnswiftsaaxsdsaa_2_0ThirdPartySignerDN', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 828, 3), )

    
    ThirdPartySignerDN = property(__ThirdPartySignerDN.value, __ThirdPartySignerDN.set, None, None)

    _ElementMap.update({
        __IsNRRequested.name() : __IsNRRequested,
        __SignerDN.name() : __SignerDN,
        __NRType.name() : __NRType,
        __NRWarning.name() : __NRWarning,
        __SignatureResult.name() : __SignatureResult,
        __SignatureValue.name() : __SignatureValue,
        __ResponseNRType.name() : __ResponseNRType,
        __ResponseNRWarning.name() : __ResponseNRWarning,
        __ResponseSignatureResult.name() : __ResponseSignatureResult,
        __ResponseSignatureValue.name() : __ResponseSignatureValue,
        __FileDigestAlgorithm.name() : __FileDigestAlgorithm,
        __FileDigestValue.name() : __FileDigestValue,
        __DigestList.name() : __DigestList,
        __ThirdPartySignerDN.name() : __ThirdPartySignerDN
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.SWIFTNetSecurityInfo = SWIFTNetSecurityInfo
Namespace.addCategoryObject('typeBinding', 'SWIFTNetSecurityInfo', SWIFTNetSecurityInfo)


# Complex type {urn:swift:saa:xsd:saa.2.0}SAAInfo with content type ELEMENT_ONLY
class SAAInfo (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:swift:saa:xsd:saa.2.0}SAAInfo with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SAAInfo')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 832, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:swift:saa:xsd:saa.2.0}InstanceName uses Python identifier InstanceName
    __InstanceName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InstanceName'), 'InstanceName', '__urnswiftsaaxsdsaa_2_0_SAAInfo_urnswiftsaaxsdsaa_2_0InstanceName', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 834, 3), )

    
    InstanceName = property(__InstanceName.value, __InstanceName.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}UserName uses Python identifier UserName
    __UserName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UserName'), 'UserName', '__urnswiftsaaxsdsaa_2_0_SAAInfo_urnswiftsaaxsdsaa_2_0UserName', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 835, 3), )

    
    UserName = property(__UserName.value, __UserName.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}Unit uses Python identifier Unit
    __Unit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Unit'), 'Unit', '__urnswiftsaaxsdsaa_2_0_SAAInfo_urnswiftsaaxsdsaa_2_0Unit', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 836, 3), )

    
    Unit = property(__Unit.value, __Unit.set, None, None)

    _ElementMap.update({
        __InstanceName.name() : __InstanceName,
        __UserName.name() : __UserName,
        __Unit.name() : __Unit
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.SAAInfo = SAAInfo
Namespace.addCategoryObject('typeBinding', 'SAAInfo', SAAInfo)


# Complex type {urn:swift:saa:xsd:saa.2.0}DeliveryNotification with content type ELEMENT_ONLY
class DeliveryNotification (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:swift:saa:xsd:saa.2.0}DeliveryNotification with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeliveryNotification')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 840, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:swift:saa:xsd:saa.2.0}ReconciliationInfo uses Python identifier ReconciliationInfo
    __ReconciliationInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReconciliationInfo'), 'ReconciliationInfo', '__urnswiftsaaxsdsaa_2_0_DeliveryNotification_urnswiftsaaxsdsaa_2_0ReconciliationInfo', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 842, 3), )

    
    ReconciliationInfo = property(__ReconciliationInfo.value, __ReconciliationInfo.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}ReceiverDeliveryStatus uses Python identifier ReceiverDeliveryStatus
    __ReceiverDeliveryStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReceiverDeliveryStatus'), 'ReceiverDeliveryStatus', '__urnswiftsaaxsdsaa_2_0_DeliveryNotification_urnswiftsaaxsdsaa_2_0ReceiverDeliveryStatus', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 843, 3), )

    
    ReceiverDeliveryStatus = property(__ReceiverDeliveryStatus.value, __ReceiverDeliveryStatus.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}MessageIdentifier uses Python identifier MessageIdentifier
    __MessageIdentifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MessageIdentifier'), 'MessageIdentifier', '__urnswiftsaaxsdsaa_2_0_DeliveryNotification_urnswiftsaaxsdsaa_2_0MessageIdentifier', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 844, 3), )

    
    MessageIdentifier = property(__MessageIdentifier.value, __MessageIdentifier.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}Receiver uses Python identifier Receiver
    __Receiver = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Receiver'), 'Receiver', '__urnswiftsaaxsdsaa_2_0_DeliveryNotification_urnswiftsaaxsdsaa_2_0Receiver', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 845, 3), )

    
    Receiver = property(__Receiver.value, __Receiver.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}InterfaceInfo uses Python identifier InterfaceInfo
    __InterfaceInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InterfaceInfo'), 'InterfaceInfo', '__urnswiftsaaxsdsaa_2_0_DeliveryNotification_urnswiftsaaxsdsaa_2_0InterfaceInfo', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 846, 3), )

    
    InterfaceInfo = property(__InterfaceInfo.value, __InterfaceInfo.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}NetworkInfo uses Python identifier NetworkInfo
    __NetworkInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NetworkInfo'), 'NetworkInfo', '__urnswiftsaaxsdsaa_2_0_DeliveryNotification_urnswiftsaaxsdsaa_2_0NetworkInfo', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 847, 3), )

    
    NetworkInfo = property(__NetworkInfo.value, __NetworkInfo.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}SecurityInfo uses Python identifier SecurityInfo
    __SecurityInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SecurityInfo'), 'SecurityInfo', '__urnswiftsaaxsdsaa_2_0_DeliveryNotification_urnswiftsaaxsdsaa_2_0SecurityInfo', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 848, 3), )

    
    SecurityInfo = property(__SecurityInfo.value, __SecurityInfo.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}SAAInfo uses Python identifier SAAInfo
    __SAAInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SAAInfo'), 'SAAInfo', '__urnswiftsaaxsdsaa_2_0_DeliveryNotification_urnswiftsaaxsdsaa_2_0SAAInfo', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 849, 3), )

    
    SAAInfo = property(__SAAInfo.value, __SAAInfo.set, None, None)

    _ElementMap.update({
        __ReconciliationInfo.name() : __ReconciliationInfo,
        __ReceiverDeliveryStatus.name() : __ReceiverDeliveryStatus,
        __MessageIdentifier.name() : __MessageIdentifier,
        __Receiver.name() : __Receiver,
        __InterfaceInfo.name() : __InterfaceInfo,
        __NetworkInfo.name() : __NetworkInfo,
        __SecurityInfo.name() : __SecurityInfo,
        __SAAInfo.name() : __SAAInfo
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DeliveryNotification = DeliveryNotification
Namespace.addCategoryObject('typeBinding', 'DeliveryNotification', DeliveryNotification)


# Complex type {urn:swift:saa:xsd:saa.2.0}Message with content type ELEMENT_ONLY
class Message (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:swift:saa:xsd:saa.2.0}Message with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Message')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 853, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:swift:saa:xsd:saa.2.0}SenderReference uses Python identifier SenderReference
    __SenderReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SenderReference'), 'SenderReference', '__urnswiftsaaxsdsaa_2_0_Message_urnswiftsaaxsdsaa_2_0SenderReference', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 855, 3), )

    
    SenderReference = property(__SenderReference.value, __SenderReference.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}MessageIdentifier uses Python identifier MessageIdentifier
    __MessageIdentifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MessageIdentifier'), 'MessageIdentifier', '__urnswiftsaaxsdsaa_2_0_Message_urnswiftsaaxsdsaa_2_0MessageIdentifier', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 856, 3), )

    
    MessageIdentifier = property(__MessageIdentifier.value, __MessageIdentifier.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}Format uses Python identifier Format
    __Format = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Format'), 'Format', '__urnswiftsaaxsdsaa_2_0_Message_urnswiftsaaxsdsaa_2_0Format', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 857, 3), )

    
    Format = property(__Format.value, __Format.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}SubFormat uses Python identifier SubFormat
    __SubFormat = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SubFormat'), 'SubFormat', '__urnswiftsaaxsdsaa_2_0_Message_urnswiftsaaxsdsaa_2_0SubFormat', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 858, 3), )

    
    SubFormat = property(__SubFormat.value, __SubFormat.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}Sender uses Python identifier Sender
    __Sender = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Sender'), 'Sender', '__urnswiftsaaxsdsaa_2_0_Message_urnswiftsaaxsdsaa_2_0Sender', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 859, 3), )

    
    Sender = property(__Sender.value, __Sender.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}Receiver uses Python identifier Receiver
    __Receiver = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Receiver'), 'Receiver', '__urnswiftsaaxsdsaa_2_0_Message_urnswiftsaaxsdsaa_2_0Receiver', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 860, 3), )

    
    Receiver = property(__Receiver.value, __Receiver.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}InterfaceInfo uses Python identifier InterfaceInfo
    __InterfaceInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InterfaceInfo'), 'InterfaceInfo', '__urnswiftsaaxsdsaa_2_0_Message_urnswiftsaaxsdsaa_2_0InterfaceInfo', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 861, 3), )

    
    InterfaceInfo = property(__InterfaceInfo.value, __InterfaceInfo.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}NetworkInfo uses Python identifier NetworkInfo
    __NetworkInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NetworkInfo'), 'NetworkInfo', '__urnswiftsaaxsdsaa_2_0_Message_urnswiftsaaxsdsaa_2_0NetworkInfo', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 862, 3), )

    
    NetworkInfo = property(__NetworkInfo.value, __NetworkInfo.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}SecurityInfo uses Python identifier SecurityInfo
    __SecurityInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SecurityInfo'), 'SecurityInfo', '__urnswiftsaaxsdsaa_2_0_Message_urnswiftsaaxsdsaa_2_0SecurityInfo', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 863, 3), )

    
    SecurityInfo = property(__SecurityInfo.value, __SecurityInfo.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}SAAInfo uses Python identifier SAAInfo
    __SAAInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SAAInfo'), 'SAAInfo', '__urnswiftsaaxsdsaa_2_0_Message_urnswiftsaaxsdsaa_2_0SAAInfo', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 864, 3), )

    
    SAAInfo = property(__SAAInfo.value, __SAAInfo.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}FileLogicalName uses Python identifier FileLogicalName
    __FileLogicalName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FileLogicalName'), 'FileLogicalName', '__urnswiftsaaxsdsaa_2_0_Message_urnswiftsaaxsdsaa_2_0FileLogicalName', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 865, 3), )

    
    FileLogicalName = property(__FileLogicalName.value, __FileLogicalName.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}ExpiryDateTime uses Python identifier ExpiryDateTime
    __ExpiryDateTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExpiryDateTime'), 'ExpiryDateTime', '__urnswiftsaaxsdsaa_2_0_Message_urnswiftsaaxsdsaa_2_0ExpiryDateTime', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 866, 3), )

    
    ExpiryDateTime = property(__ExpiryDateTime.value, __ExpiryDateTime.set, None, None)

    _ElementMap.update({
        __SenderReference.name() : __SenderReference,
        __MessageIdentifier.name() : __MessageIdentifier,
        __Format.name() : __Format,
        __SubFormat.name() : __SubFormat,
        __Sender.name() : __Sender,
        __Receiver.name() : __Receiver,
        __InterfaceInfo.name() : __InterfaceInfo,
        __NetworkInfo.name() : __NetworkInfo,
        __SecurityInfo.name() : __SecurityInfo,
        __SAAInfo.name() : __SAAInfo,
        __FileLogicalName.name() : __FileLogicalName,
        __ExpiryDateTime.name() : __ExpiryDateTime
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.Message = Message
Namespace.addCategoryObject('typeBinding', 'Message', Message)


# Complex type {urn:swift:saa:xsd:saa.2.0}HistoryReport with content type ELEMENT_ONLY
class HistoryReport (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:swift:saa:xsd:saa.2.0}HistoryReport with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'HistoryReport')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 870, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:swift:saa:xsd:saa.2.0}SenderReference uses Python identifier SenderReference
    __SenderReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SenderReference'), 'SenderReference', '__urnswiftsaaxsdsaa_2_0_HistoryReport_urnswiftsaaxsdsaa_2_0SenderReference', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 872, 3), )

    
    SenderReference = property(__SenderReference.value, __SenderReference.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}OriginalInstanceAddressee uses Python identifier OriginalInstanceAddressee
    __OriginalInstanceAddressee = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OriginalInstanceAddressee'), 'OriginalInstanceAddressee', '__urnswiftsaaxsdsaa_2_0_HistoryReport_urnswiftsaaxsdsaa_2_0OriginalInstanceAddressee', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 873, 3), )

    
    OriginalInstanceAddressee = property(__OriginalInstanceAddressee.value, __OriginalInstanceAddressee.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}ReportingApplication uses Python identifier ReportingApplication
    __ReportingApplication = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReportingApplication'), 'ReportingApplication', '__urnswiftsaaxsdsaa_2_0_HistoryReport_urnswiftsaaxsdsaa_2_0ReportingApplication', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 874, 3), )

    
    ReportingApplication = property(__ReportingApplication.value, __ReportingApplication.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}SAAInfo uses Python identifier SAAInfo
    __SAAInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SAAInfo'), 'SAAInfo', '__urnswiftsaaxsdsaa_2_0_HistoryReport_urnswiftsaaxsdsaa_2_0SAAInfo', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 875, 3), )

    
    SAAInfo = property(__SAAInfo.value, __SAAInfo.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}Interventions uses Python identifier Interventions
    __Interventions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Interventions'), 'Interventions', '__urnswiftsaaxsdsaa_2_0_HistoryReport_urnswiftsaaxsdsaa_2_0Interventions', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 876, 3), )

    
    Interventions = property(__Interventions.value, __Interventions.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}IsRelatedInstanceOriginal uses Python identifier IsRelatedInstanceOriginal
    __IsRelatedInstanceOriginal = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IsRelatedInstanceOriginal'), 'IsRelatedInstanceOriginal', '__urnswiftsaaxsdsaa_2_0_HistoryReport_urnswiftsaaxsdsaa_2_0IsRelatedInstanceOriginal', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 877, 3), )

    
    IsRelatedInstanceOriginal = property(__IsRelatedInstanceOriginal.value, __IsRelatedInstanceOriginal.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}RelatedInstanceAddressee uses Python identifier RelatedInstanceAddressee
    __RelatedInstanceAddressee = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RelatedInstanceAddressee'), 'RelatedInstanceAddressee', '__urnswiftsaaxsdsaa_2_0_HistoryReport_urnswiftsaaxsdsaa_2_0RelatedInstanceAddressee', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 878, 3), )

    
    RelatedInstanceAddressee = property(__RelatedInstanceAddressee.value, __RelatedInstanceAddressee.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}MessageCreator uses Python identifier MessageCreator
    __MessageCreator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MessageCreator'), 'MessageCreator', '__urnswiftsaaxsdsaa_2_0_HistoryReport_urnswiftsaaxsdsaa_2_0MessageCreator', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 879, 3), )

    
    MessageCreator = property(__MessageCreator.value, __MessageCreator.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}IsMessageModified uses Python identifier IsMessageModified
    __IsMessageModified = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IsMessageModified'), 'IsMessageModified', '__urnswiftsaaxsdsaa_2_0_HistoryReport_urnswiftsaaxsdsaa_2_0IsMessageModified', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 880, 3), )

    
    IsMessageModified = property(__IsMessageModified.value, __IsMessageModified.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}MessageFields uses Python identifier MessageFields
    __MessageFields = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MessageFields'), 'MessageFields', '__urnswiftsaaxsdsaa_2_0_HistoryReport_urnswiftsaaxsdsaa_2_0MessageFields', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 881, 3), )

    
    MessageFields = property(__MessageFields.value, __MessageFields.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}Message uses Python identifier Message
    __Message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Message'), 'Message', '__urnswiftsaaxsdsaa_2_0_HistoryReport_urnswiftsaaxsdsaa_2_0Message', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 882, 3), )

    
    Message = property(__Message.value, __Message.set, None, None)

    _ElementMap.update({
        __SenderReference.name() : __SenderReference,
        __OriginalInstanceAddressee.name() : __OriginalInstanceAddressee,
        __ReportingApplication.name() : __ReportingApplication,
        __SAAInfo.name() : __SAAInfo,
        __Interventions.name() : __Interventions,
        __IsRelatedInstanceOriginal.name() : __IsRelatedInstanceOriginal,
        __RelatedInstanceAddressee.name() : __RelatedInstanceAddressee,
        __MessageCreator.name() : __MessageCreator,
        __IsMessageModified.name() : __IsMessageModified,
        __MessageFields.name() : __MessageFields,
        __Message.name() : __Message
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.HistoryReport = HistoryReport
Namespace.addCategoryObject('typeBinding', 'HistoryReport', HistoryReport)


# Complex type {urn:swift:saa:xsd:saa.2.0}TransmissionReport with content type ELEMENT_ONLY
class TransmissionReport (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:swift:saa:xsd:saa.2.0}TransmissionReport with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TransmissionReport')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 885, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:swift:saa:xsd:saa.2.0}SenderReference uses Python identifier SenderReference
    __SenderReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SenderReference'), 'SenderReference', '__urnswiftsaaxsdsaa_2_0_TransmissionReport_urnswiftsaaxsdsaa_2_0SenderReference', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 887, 3), )

    
    SenderReference = property(__SenderReference.value, __SenderReference.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}ReconciliationInfo uses Python identifier ReconciliationInfo
    __ReconciliationInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReconciliationInfo'), 'ReconciliationInfo', '__urnswiftsaaxsdsaa_2_0_TransmissionReport_urnswiftsaaxsdsaa_2_0ReconciliationInfo', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 888, 3), )

    
    ReconciliationInfo = property(__ReconciliationInfo.value, __ReconciliationInfo.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}NetworkDeliveryStatus uses Python identifier NetworkDeliveryStatus
    __NetworkDeliveryStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NetworkDeliveryStatus'), 'NetworkDeliveryStatus', '__urnswiftsaaxsdsaa_2_0_TransmissionReport_urnswiftsaaxsdsaa_2_0NetworkDeliveryStatus', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 889, 3), )

    
    NetworkDeliveryStatus = property(__NetworkDeliveryStatus.value, __NetworkDeliveryStatus.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}OriginalInstanceAddressee uses Python identifier OriginalInstanceAddressee
    __OriginalInstanceAddressee = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OriginalInstanceAddressee'), 'OriginalInstanceAddressee', '__urnswiftsaaxsdsaa_2_0_TransmissionReport_urnswiftsaaxsdsaa_2_0OriginalInstanceAddressee', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 890, 3), )

    
    OriginalInstanceAddressee = property(__OriginalInstanceAddressee.value, __OriginalInstanceAddressee.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}ReportingApplication uses Python identifier ReportingApplication
    __ReportingApplication = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReportingApplication'), 'ReportingApplication', '__urnswiftsaaxsdsaa_2_0_TransmissionReport_urnswiftsaaxsdsaa_2_0ReportingApplication', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 891, 3), )

    
    ReportingApplication = property(__ReportingApplication.value, __ReportingApplication.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}NetworkInfo uses Python identifier NetworkInfo
    __NetworkInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NetworkInfo'), 'NetworkInfo', '__urnswiftsaaxsdsaa_2_0_TransmissionReport_urnswiftsaaxsdsaa_2_0NetworkInfo', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 892, 3), )

    
    NetworkInfo = property(__NetworkInfo.value, __NetworkInfo.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}SAAInfo uses Python identifier SAAInfo
    __SAAInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SAAInfo'), 'SAAInfo', '__urnswiftsaaxsdsaa_2_0_TransmissionReport_urnswiftsaaxsdsaa_2_0SAAInfo', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 893, 3), )

    
    SAAInfo = property(__SAAInfo.value, __SAAInfo.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}Interventions uses Python identifier Interventions
    __Interventions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Interventions'), 'Interventions', '__urnswiftsaaxsdsaa_2_0_TransmissionReport_urnswiftsaaxsdsaa_2_0Interventions', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 894, 3), )

    
    Interventions = property(__Interventions.value, __Interventions.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}IsRelatedInstanceOriginal uses Python identifier IsRelatedInstanceOriginal
    __IsRelatedInstanceOriginal = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IsRelatedInstanceOriginal'), 'IsRelatedInstanceOriginal', '__urnswiftsaaxsdsaa_2_0_TransmissionReport_urnswiftsaaxsdsaa_2_0IsRelatedInstanceOriginal', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 895, 3), )

    
    IsRelatedInstanceOriginal = property(__IsRelatedInstanceOriginal.value, __IsRelatedInstanceOriginal.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}RelatedInstanceAddressee uses Python identifier RelatedInstanceAddressee
    __RelatedInstanceAddressee = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RelatedInstanceAddressee'), 'RelatedInstanceAddressee', '__urnswiftsaaxsdsaa_2_0_TransmissionReport_urnswiftsaaxsdsaa_2_0RelatedInstanceAddressee', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 896, 3), )

    
    RelatedInstanceAddressee = property(__RelatedInstanceAddressee.value, __RelatedInstanceAddressee.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}MessageCreator uses Python identifier MessageCreator
    __MessageCreator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MessageCreator'), 'MessageCreator', '__urnswiftsaaxsdsaa_2_0_TransmissionReport_urnswiftsaaxsdsaa_2_0MessageCreator', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 897, 3), )

    
    MessageCreator = property(__MessageCreator.value, __MessageCreator.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}IsMessageModified uses Python identifier IsMessageModified
    __IsMessageModified = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IsMessageModified'), 'IsMessageModified', '__urnswiftsaaxsdsaa_2_0_TransmissionReport_urnswiftsaaxsdsaa_2_0IsMessageModified', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 898, 3), )

    
    IsMessageModified = property(__IsMessageModified.value, __IsMessageModified.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}MessageFields uses Python identifier MessageFields
    __MessageFields = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MessageFields'), 'MessageFields', '__urnswiftsaaxsdsaa_2_0_TransmissionReport_urnswiftsaaxsdsaa_2_0MessageFields', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 899, 3), )

    
    MessageFields = property(__MessageFields.value, __MessageFields.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}Message uses Python identifier Message
    __Message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Message'), 'Message', '__urnswiftsaaxsdsaa_2_0_TransmissionReport_urnswiftsaaxsdsaa_2_0Message', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 900, 3), )

    
    Message = property(__Message.value, __Message.set, None, None)

    _ElementMap.update({
        __SenderReference.name() : __SenderReference,
        __ReconciliationInfo.name() : __ReconciliationInfo,
        __NetworkDeliveryStatus.name() : __NetworkDeliveryStatus,
        __OriginalInstanceAddressee.name() : __OriginalInstanceAddressee,
        __ReportingApplication.name() : __ReportingApplication,
        __NetworkInfo.name() : __NetworkInfo,
        __SAAInfo.name() : __SAAInfo,
        __Interventions.name() : __Interventions,
        __IsRelatedInstanceOriginal.name() : __IsRelatedInstanceOriginal,
        __RelatedInstanceAddressee.name() : __RelatedInstanceAddressee,
        __MessageCreator.name() : __MessageCreator,
        __IsMessageModified.name() : __IsMessageModified,
        __MessageFields.name() : __MessageFields,
        __Message.name() : __Message
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.TransmissionReport = TransmissionReport
Namespace.addCategoryObject('typeBinding', 'TransmissionReport', TransmissionReport)


# Complex type {urn:swift:saa:xsd:saa.2.0}DeliveryReport with content type ELEMENT_ONLY
class DeliveryReport (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:swift:saa:xsd:saa.2.0}DeliveryReport with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeliveryReport')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 903, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:swift:saa:xsd:saa.2.0}SenderReference uses Python identifier SenderReference
    __SenderReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SenderReference'), 'SenderReference', '__urnswiftsaaxsdsaa_2_0_DeliveryReport_urnswiftsaaxsdsaa_2_0SenderReference', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 905, 3), )

    
    SenderReference = property(__SenderReference.value, __SenderReference.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}ReceiverDeliveryStatus uses Python identifier ReceiverDeliveryStatus
    __ReceiverDeliveryStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReceiverDeliveryStatus'), 'ReceiverDeliveryStatus', '__urnswiftsaaxsdsaa_2_0_DeliveryReport_urnswiftsaaxsdsaa_2_0ReceiverDeliveryStatus', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 906, 3), )

    
    ReceiverDeliveryStatus = property(__ReceiverDeliveryStatus.value, __ReceiverDeliveryStatus.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}OriginalInstanceAddressee uses Python identifier OriginalInstanceAddressee
    __OriginalInstanceAddressee = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OriginalInstanceAddressee'), 'OriginalInstanceAddressee', '__urnswiftsaaxsdsaa_2_0_DeliveryReport_urnswiftsaaxsdsaa_2_0OriginalInstanceAddressee', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 907, 3), )

    
    OriginalInstanceAddressee = property(__OriginalInstanceAddressee.value, __OriginalInstanceAddressee.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}ReportingApplication uses Python identifier ReportingApplication
    __ReportingApplication = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReportingApplication'), 'ReportingApplication', '__urnswiftsaaxsdsaa_2_0_DeliveryReport_urnswiftsaaxsdsaa_2_0ReportingApplication', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 908, 3), )

    
    ReportingApplication = property(__ReportingApplication.value, __ReportingApplication.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}NetworkInfo uses Python identifier NetworkInfo
    __NetworkInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NetworkInfo'), 'NetworkInfo', '__urnswiftsaaxsdsaa_2_0_DeliveryReport_urnswiftsaaxsdsaa_2_0NetworkInfo', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 909, 3), )

    
    NetworkInfo = property(__NetworkInfo.value, __NetworkInfo.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}SAAInfo uses Python identifier SAAInfo
    __SAAInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SAAInfo'), 'SAAInfo', '__urnswiftsaaxsdsaa_2_0_DeliveryReport_urnswiftsaaxsdsaa_2_0SAAInfo', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 910, 3), )

    
    SAAInfo = property(__SAAInfo.value, __SAAInfo.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}Interventions uses Python identifier Interventions
    __Interventions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Interventions'), 'Interventions', '__urnswiftsaaxsdsaa_2_0_DeliveryReport_urnswiftsaaxsdsaa_2_0Interventions', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 911, 3), )

    
    Interventions = property(__Interventions.value, __Interventions.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}IsRelatedInstanceOriginal uses Python identifier IsRelatedInstanceOriginal
    __IsRelatedInstanceOriginal = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IsRelatedInstanceOriginal'), 'IsRelatedInstanceOriginal', '__urnswiftsaaxsdsaa_2_0_DeliveryReport_urnswiftsaaxsdsaa_2_0IsRelatedInstanceOriginal', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 912, 3), )

    
    IsRelatedInstanceOriginal = property(__IsRelatedInstanceOriginal.value, __IsRelatedInstanceOriginal.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}RelatedInstanceAddressee uses Python identifier RelatedInstanceAddressee
    __RelatedInstanceAddressee = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RelatedInstanceAddressee'), 'RelatedInstanceAddressee', '__urnswiftsaaxsdsaa_2_0_DeliveryReport_urnswiftsaaxsdsaa_2_0RelatedInstanceAddressee', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 913, 3), )

    
    RelatedInstanceAddressee = property(__RelatedInstanceAddressee.value, __RelatedInstanceAddressee.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}MessageCreator uses Python identifier MessageCreator
    __MessageCreator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MessageCreator'), 'MessageCreator', '__urnswiftsaaxsdsaa_2_0_DeliveryReport_urnswiftsaaxsdsaa_2_0MessageCreator', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 914, 3), )

    
    MessageCreator = property(__MessageCreator.value, __MessageCreator.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}IsMessageModified uses Python identifier IsMessageModified
    __IsMessageModified = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IsMessageModified'), 'IsMessageModified', '__urnswiftsaaxsdsaa_2_0_DeliveryReport_urnswiftsaaxsdsaa_2_0IsMessageModified', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 915, 3), )

    
    IsMessageModified = property(__IsMessageModified.value, __IsMessageModified.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}MessageFields uses Python identifier MessageFields
    __MessageFields = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MessageFields'), 'MessageFields', '__urnswiftsaaxsdsaa_2_0_DeliveryReport_urnswiftsaaxsdsaa_2_0MessageFields', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 916, 3), )

    
    MessageFields = property(__MessageFields.value, __MessageFields.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}Message uses Python identifier Message
    __Message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Message'), 'Message', '__urnswiftsaaxsdsaa_2_0_DeliveryReport_urnswiftsaaxsdsaa_2_0Message', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 917, 3), )

    
    Message = property(__Message.value, __Message.set, None, None)

    _ElementMap.update({
        __SenderReference.name() : __SenderReference,
        __ReceiverDeliveryStatus.name() : __ReceiverDeliveryStatus,
        __OriginalInstanceAddressee.name() : __OriginalInstanceAddressee,
        __ReportingApplication.name() : __ReportingApplication,
        __NetworkInfo.name() : __NetworkInfo,
        __SAAInfo.name() : __SAAInfo,
        __Interventions.name() : __Interventions,
        __IsRelatedInstanceOriginal.name() : __IsRelatedInstanceOriginal,
        __RelatedInstanceAddressee.name() : __RelatedInstanceAddressee,
        __MessageCreator.name() : __MessageCreator,
        __IsMessageModified.name() : __IsMessageModified,
        __MessageFields.name() : __MessageFields,
        __Message.name() : __Message
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DeliveryReport = DeliveryReport
Namespace.addCategoryObject('typeBinding', 'DeliveryReport', DeliveryReport)


# Complex type {urn:swift:saa:xsd:saa.2.0}MessageStatus with content type ELEMENT_ONLY
class MessageStatus (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:swift:saa:xsd:saa.2.0}MessageStatus with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MessageStatus')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 921, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:swift:saa:xsd:saa.2.0}SenderReference uses Python identifier SenderReference
    __SenderReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SenderReference'), 'SenderReference', '__urnswiftsaaxsdsaa_2_0_MessageStatus_urnswiftsaaxsdsaa_2_0SenderReference', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 923, 3), )

    
    SenderReference = property(__SenderReference.value, __SenderReference.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}SeqNr uses Python identifier SeqNr
    __SeqNr = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SeqNr'), 'SeqNr', '__urnswiftsaaxsdsaa_2_0_MessageStatus_urnswiftsaaxsdsaa_2_0SeqNr', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 924, 3), )

    
    SeqNr = property(__SeqNr.value, __SeqNr.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}IsSuccess uses Python identifier IsSuccess
    __IsSuccess = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IsSuccess'), 'IsSuccess', '__urnswiftsaaxsdsaa_2_0_MessageStatus_urnswiftsaaxsdsaa_2_0IsSuccess', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 925, 3), )

    
    IsSuccess = property(__IsSuccess.value, __IsSuccess.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}ErrorCode uses Python identifier ErrorCode
    __ErrorCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ErrorCode'), 'ErrorCode', '__urnswiftsaaxsdsaa_2_0_MessageStatus_urnswiftsaaxsdsaa_2_0ErrorCode', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 926, 3), )

    
    ErrorCode = property(__ErrorCode.value, __ErrorCode.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}ErrorText uses Python identifier ErrorText
    __ErrorText = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ErrorText'), 'ErrorText', '__urnswiftsaaxsdsaa_2_0_MessageStatus_urnswiftsaaxsdsaa_2_0ErrorText', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 927, 3), )

    
    ErrorText = property(__ErrorText.value, __ErrorText.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}SAAInfo uses Python identifier SAAInfo
    __SAAInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SAAInfo'), 'SAAInfo', '__urnswiftsaaxsdsaa_2_0_MessageStatus_urnswiftsaaxsdsaa_2_0SAAInfo', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 928, 3), )

    
    SAAInfo = property(__SAAInfo.value, __SAAInfo.set, None, None)

    _ElementMap.update({
        __SenderReference.name() : __SenderReference,
        __SeqNr.name() : __SeqNr,
        __IsSuccess.name() : __IsSuccess,
        __ErrorCode.name() : __ErrorCode,
        __ErrorText.name() : __ErrorText,
        __SAAInfo.name() : __SAAInfo
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.MessageStatus = MessageStatus
Namespace.addCategoryObject('typeBinding', 'MessageStatus', MessageStatus)


# Complex type {urn:swift:saa:xsd:saa.2.0}SessionStatus with content type ELEMENT_ONLY
class SessionStatus (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:swift:saa:xsd:saa.2.0}SessionStatus with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SessionStatus')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 931, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:swift:saa:xsd:saa.2.0}MessagePartner uses Python identifier MessagePartner
    __MessagePartner = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MessagePartner'), 'MessagePartner', '__urnswiftsaaxsdsaa_2_0_SessionStatus_urnswiftsaaxsdsaa_2_0MessagePartner', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 933, 3), )

    
    MessagePartner = property(__MessagePartner.value, __MessagePartner.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}CreationTime uses Python identifier CreationTime
    __CreationTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CreationTime'), 'CreationTime', '__urnswiftsaaxsdsaa_2_0_SessionStatus_urnswiftsaaxsdsaa_2_0CreationTime', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 934, 3), )

    
    CreationTime = property(__CreationTime.value, __CreationTime.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}SessionNr uses Python identifier SessionNr
    __SessionNr = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SessionNr'), 'SessionNr', '__urnswiftsaaxsdsaa_2_0_SessionStatus_urnswiftsaaxsdsaa_2_0SessionNr', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 935, 3), )

    
    SessionNr = property(__SessionNr.value, __SessionNr.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}InputFile uses Python identifier InputFile
    __InputFile = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InputFile'), 'InputFile', '__urnswiftsaaxsdsaa_2_0_SessionStatus_urnswiftsaaxsdsaa_2_0InputFile', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 936, 3), )

    
    InputFile = property(__InputFile.value, __InputFile.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}IsSuccess uses Python identifier IsSuccess
    __IsSuccess = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IsSuccess'), 'IsSuccess', '__urnswiftsaaxsdsaa_2_0_SessionStatus_urnswiftsaaxsdsaa_2_0IsSuccess', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 937, 3), )

    
    IsSuccess = property(__IsSuccess.value, __IsSuccess.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}ErrorCode uses Python identifier ErrorCode
    __ErrorCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ErrorCode'), 'ErrorCode', '__urnswiftsaaxsdsaa_2_0_SessionStatus_urnswiftsaaxsdsaa_2_0ErrorCode', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 938, 3), )

    
    ErrorCode = property(__ErrorCode.value, __ErrorCode.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}ErrorText uses Python identifier ErrorText
    __ErrorText = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ErrorText'), 'ErrorText', '__urnswiftsaaxsdsaa_2_0_SessionStatus_urnswiftsaaxsdsaa_2_0ErrorText', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 939, 3), )

    
    ErrorText = property(__ErrorText.value, __ErrorText.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}SessionDirection uses Python identifier SessionDirection
    __SessionDirection = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SessionDirection'), 'SessionDirection', '__urnswiftsaaxsdsaa_2_0_SessionStatus_urnswiftsaaxsdsaa_2_0SessionDirection', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 940, 3), )

    
    SessionDirection = property(__SessionDirection.value, __SessionDirection.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}Accepted uses Python identifier Accepted
    __Accepted = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Accepted'), 'Accepted', '__urnswiftsaaxsdsaa_2_0_SessionStatus_urnswiftsaaxsdsaa_2_0Accepted', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 941, 3), )

    
    Accepted = property(__Accepted.value, __Accepted.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}Rejected uses Python identifier Rejected
    __Rejected = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Rejected'), 'Rejected', '__urnswiftsaaxsdsaa_2_0_SessionStatus_urnswiftsaaxsdsaa_2_0Rejected', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 942, 3), )

    
    Rejected = property(__Rejected.value, __Rejected.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}AcceptedFromMessagePartner uses Python identifier AcceptedFromMessagePartner
    __AcceptedFromMessagePartner = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AcceptedFromMessagePartner'), 'AcceptedFromMessagePartner', '__urnswiftsaaxsdsaa_2_0_SessionStatus_urnswiftsaaxsdsaa_2_0AcceptedFromMessagePartner', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 943, 3), )

    
    AcceptedFromMessagePartner = property(__AcceptedFromMessagePartner.value, __AcceptedFromMessagePartner.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}RejectedFromMessagePartner uses Python identifier RejectedFromMessagePartner
    __RejectedFromMessagePartner = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RejectedFromMessagePartner'), 'RejectedFromMessagePartner', '__urnswiftsaaxsdsaa_2_0_SessionStatus_urnswiftsaaxsdsaa_2_0RejectedFromMessagePartner', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 944, 3), )

    
    RejectedFromMessagePartner = property(__RejectedFromMessagePartner.value, __RejectedFromMessagePartner.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}AcceptedToMessagePartner uses Python identifier AcceptedToMessagePartner
    __AcceptedToMessagePartner = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AcceptedToMessagePartner'), 'AcceptedToMessagePartner', '__urnswiftsaaxsdsaa_2_0_SessionStatus_urnswiftsaaxsdsaa_2_0AcceptedToMessagePartner', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 945, 3), )

    
    AcceptedToMessagePartner = property(__AcceptedToMessagePartner.value, __AcceptedToMessagePartner.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}RejectedToMessagePartner uses Python identifier RejectedToMessagePartner
    __RejectedToMessagePartner = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RejectedToMessagePartner'), 'RejectedToMessagePartner', '__urnswiftsaaxsdsaa_2_0_SessionStatus_urnswiftsaaxsdsaa_2_0RejectedToMessagePartner', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 946, 3), )

    
    RejectedToMessagePartner = property(__RejectedToMessagePartner.value, __RejectedToMessagePartner.set, None, None)

    _ElementMap.update({
        __MessagePartner.name() : __MessagePartner,
        __CreationTime.name() : __CreationTime,
        __SessionNr.name() : __SessionNr,
        __InputFile.name() : __InputFile,
        __IsSuccess.name() : __IsSuccess,
        __ErrorCode.name() : __ErrorCode,
        __ErrorText.name() : __ErrorText,
        __SessionDirection.name() : __SessionDirection,
        __Accepted.name() : __Accepted,
        __Rejected.name() : __Rejected,
        __AcceptedFromMessagePartner.name() : __AcceptedFromMessagePartner,
        __RejectedFromMessagePartner.name() : __RejectedFromMessagePartner,
        __AcceptedToMessagePartner.name() : __AcceptedToMessagePartner,
        __RejectedToMessagePartner.name() : __RejectedToMessagePartner
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.SessionStatus = SessionStatus
Namespace.addCategoryObject('typeBinding', 'SessionStatus', SessionStatus)


# Complex type {urn:swift:saa:xsd:saa.2.0}Header with content type ELEMENT_ONLY
class Header (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:swift:saa:xsd:saa.2.0}Header with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Header')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 950, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:swift:saa:xsd:saa.2.0}Message uses Python identifier Message
    __Message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Message'), 'Message', '__urnswiftsaaxsdsaa_2_0_Header_urnswiftsaaxsdsaa_2_0Message', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 952, 3), )

    
    Message = property(__Message.value, __Message.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}TransmissionReport uses Python identifier TransmissionReport
    __TransmissionReport = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TransmissionReport'), 'TransmissionReport', '__urnswiftsaaxsdsaa_2_0_Header_urnswiftsaaxsdsaa_2_0TransmissionReport', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 953, 3), )

    
    TransmissionReport = property(__TransmissionReport.value, __TransmissionReport.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}DeliveryNotification uses Python identifier DeliveryNotification
    __DeliveryNotification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeliveryNotification'), 'DeliveryNotification', '__urnswiftsaaxsdsaa_2_0_Header_urnswiftsaaxsdsaa_2_0DeliveryNotification', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 954, 3), )

    
    DeliveryNotification = property(__DeliveryNotification.value, __DeliveryNotification.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}DeliveryReport uses Python identifier DeliveryReport
    __DeliveryReport = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeliveryReport'), 'DeliveryReport', '__urnswiftsaaxsdsaa_2_0_Header_urnswiftsaaxsdsaa_2_0DeliveryReport', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 955, 3), )

    
    DeliveryReport = property(__DeliveryReport.value, __DeliveryReport.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}HistoryReport uses Python identifier HistoryReport
    __HistoryReport = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'HistoryReport'), 'HistoryReport', '__urnswiftsaaxsdsaa_2_0_Header_urnswiftsaaxsdsaa_2_0HistoryReport', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 956, 3), )

    
    HistoryReport = property(__HistoryReport.value, __HistoryReport.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}MessageStatus uses Python identifier MessageStatus
    __MessageStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MessageStatus'), 'MessageStatus', '__urnswiftsaaxsdsaa_2_0_Header_urnswiftsaaxsdsaa_2_0MessageStatus', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 957, 3), )

    
    MessageStatus = property(__MessageStatus.value, __MessageStatus.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}SessionStatus uses Python identifier SessionStatus
    __SessionStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SessionStatus'), 'SessionStatus', '__urnswiftsaaxsdsaa_2_0_Header_urnswiftsaaxsdsaa_2_0SessionStatus', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 958, 3), )

    
    SessionStatus = property(__SessionStatus.value, __SessionStatus.set, None, None)

    _ElementMap.update({
        __Message.name() : __Message,
        __TransmissionReport.name() : __TransmissionReport,
        __DeliveryNotification.name() : __DeliveryNotification,
        __DeliveryReport.name() : __DeliveryReport,
        __HistoryReport.name() : __HistoryReport,
        __MessageStatus.name() : __MessageStatus,
        __SessionStatus.name() : __SessionStatus
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.Header = Header
Namespace.addCategoryObject('typeBinding', 'Header', Header)


# Complex type {urn:swift:saa:xsd:saa.2.0}DataPDU with content type ELEMENT_ONLY
class DataPDU_ (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:swift:saa:xsd:saa.2.0}DataPDU with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DataPDU')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 961, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:swift:saa:xsd:saa.2.0}Revision uses Python identifier Revision
    __Revision = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Revision'), 'Revision', '__urnswiftsaaxsdsaa_2_0_DataPDU__urnswiftsaaxsdsaa_2_0Revision', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 963, 3), )

    
    Revision = property(__Revision.value, __Revision.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}Header uses Python identifier Header
    __Header = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Header'), 'Header', '__urnswiftsaaxsdsaa_2_0_DataPDU__urnswiftsaaxsdsaa_2_0Header', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 964, 3), )

    
    Header = property(__Header.value, __Header.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}Body uses Python identifier Body
    __Body = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Body'), 'Body', '__urnswiftsaaxsdsaa_2_0_DataPDU__urnswiftsaaxsdsaa_2_0Body', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 965, 3), )

    
    Body = property(__Body.value, __Body.set, None, None)

    
    # Element {urn:swift:saa:xsd:saa.2.0}LAU uses Python identifier LAU
    __LAU = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LAU'), 'LAU', '__urnswiftsaaxsdsaa_2_0_DataPDU__urnswiftsaaxsdsaa_2_0LAU', False, pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 966, 3), )

    
    LAU = property(__LAU.value, __LAU.set, None, None)

    _ElementMap.update({
        __Revision.name() : __Revision,
        __Header.name() : __Header,
        __Body.name() : __Body,
        __LAU.name() : __LAU
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DataPDU_ = DataPDU_
Namespace.addCategoryObject('typeBinding', 'DataPDU', DataPDU_)


DataPDU = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DataPDU'), DataPDU_, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 970, 1))
Namespace.addCategoryObject('elementBinding', DataPDU.name().localName(), DataPDU)



def _BuildAutomaton ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton
    del _BuildAutomaton
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 6, 3))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.WildcardUse(pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_skip, namespace_constraint=pyxb.binding.content.Wildcard.NC_any), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 6, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
SwAny._Automaton = _BuildAutomaton()




AddressFullName._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'X1'), X1, scope=AddressFullName, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 561, 3)))

AddressFullName._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'X2'), X2, scope=AddressFullName, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 562, 3)))

AddressFullName._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'X3'), X3, scope=AddressFullName, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 563, 3)))

AddressFullName._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'X4'), X4, scope=AddressFullName, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 564, 3)))

AddressFullName._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FinancialInstitution'), FinancialInstitution, scope=AddressFullName, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 565, 3)))

AddressFullName._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BranchInformation'), BranchInformation, scope=AddressFullName, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 566, 3)))

AddressFullName._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CityName'), CityName, scope=AddressFullName, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 567, 3)))

AddressFullName._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Location'), Location, scope=AddressFullName, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 568, 3)))

AddressFullName._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CountryCode'), Countrycode, scope=AddressFullName, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 569, 3)))

def _BuildAutomaton_ ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_
    del _BuildAutomaton_
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 562, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 563, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 564, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 565, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 566, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 567, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 568, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 569, 3))
    counters.add(cc_7)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AddressFullName._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'X1')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 561, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AddressFullName._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'X2')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 562, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(AddressFullName._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'X3')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 563, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(AddressFullName._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'X4')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 564, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(AddressFullName._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FinancialInstitution')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 565, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(AddressFullName._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BranchInformation')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 566, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(AddressFullName._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CityName')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 567, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(AddressFullName._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Location')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 568, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(AddressFullName._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CountryCode')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 569, 3))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
AddressFullName._Automaton = _BuildAutomaton_()




AddressInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BIC12'), BIC12, scope=AddressInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 575, 4)))

AddressInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DN'), DN, scope=AddressInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 576, 4)))

AddressInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Nickname'), Nickname, scope=AddressInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 577, 4)))

AddressInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FullName'), AddressFullName, scope=AddressInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 579, 3)))

def _BuildAutomaton_2 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_2
    del _BuildAutomaton_2
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 579, 3))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AddressInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BIC12')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 575, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AddressInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DN')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 576, 4))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AddressInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Nickname')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 577, 4))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AddressInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FullName')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 579, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
AddressInfo._Automaton = _BuildAutomaton_2()




Intervention._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IntvCategory'), IntvCategory, scope=Intervention, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 584, 3)))

Intervention._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CreationTime'), TimeString, scope=Intervention, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 585, 3)))

Intervention._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OperatorOrigin'), Operator, scope=Intervention, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 586, 3)))

Intervention._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Contents'), SwAny, scope=Intervention, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 587, 3)))

def _BuildAutomaton_3 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_3
    del _BuildAutomaton_3
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Intervention._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IntvCategory')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 584, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Intervention._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CreationTime')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 585, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Intervention._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OperatorOrigin')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 586, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Intervention._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Contents')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 587, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Intervention._Automaton = _BuildAutomaton_3()




HistoryIntervention._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IntvCategory'), HistoryIntvCategory, scope=HistoryIntervention, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 592, 3)))

HistoryIntervention._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CreationTime'), TimeString, scope=HistoryIntervention, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 593, 3)))

HistoryIntervention._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OperatorOrigin'), Operator, scope=HistoryIntervention, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 594, 3)))

HistoryIntervention._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Text'), pyxb.binding.datatypes.string, scope=HistoryIntervention, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 595, 3)))

def _BuildAutomaton_4 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_4
    del _BuildAutomaton_4
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HistoryIntervention._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IntvCategory')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 592, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HistoryIntervention._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CreationTime')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 593, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HistoryIntervention._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OperatorOrigin')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 594, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(HistoryIntervention._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Text')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 595, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
HistoryIntervention._Automaton = _BuildAutomaton_4()




Interventions._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Intervention'), Intervention, scope=Interventions, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 600, 3)))

def _BuildAutomaton_5 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_5
    del _BuildAutomaton_5
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Interventions._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Intervention')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 600, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Interventions._Automaton = _BuildAutomaton_5()




HistoryInterventions._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Intervention'), HistoryIntervention, scope=HistoryInterventions, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 605, 3)))

def _BuildAutomaton_6 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_6
    del _BuildAutomaton_6
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(HistoryInterventions._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Intervention')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 605, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
HistoryInterventions._Automaton = _BuildAutomaton_6()




RoutingInstruction._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RoutingFunction'), RoutingFunction, scope=RoutingInstruction, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 610, 3)))

RoutingInstruction._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RoutingPoint'), RoutingPoint, scope=RoutingInstruction, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 611, 3)))

RoutingInstruction._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RoutingStep'), RoutingStep, scope=RoutingInstruction, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 612, 3)))

def _BuildAutomaton_7 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_7
    del _BuildAutomaton_7
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 611, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 612, 3))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(RoutingInstruction._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RoutingFunction')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 610, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(RoutingInstruction._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RoutingPoint')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 611, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(RoutingInstruction._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RoutingStep')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 612, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
RoutingInstruction._Automaton = _BuildAutomaton_7()




PDEPDM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PDE'), pyxb.binding.datatypes.string, scope=PDEPDM, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 617, 3)))

PDEPDM._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PDM'), pyxb.binding.datatypes.string, scope=PDEPDM, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 618, 3)))

def _BuildAutomaton_8 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_8
    del _BuildAutomaton_8
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PDEPDM._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PDE')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 617, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PDEPDM._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PDM')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 618, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PDEPDM._Automaton = _BuildAutomaton_8()




Product._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VendorName'), VendorName, scope=Product, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 623, 3)))

Product._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ProductName'), ProductName, scope=Product, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 624, 3)))

Product._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ProductVersion'), ProductVersion, scope=Product, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 625, 3)))

def _BuildAutomaton_9 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_9
    del _BuildAutomaton_9
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Product._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VendorName')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 623, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Product._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ProductName')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 624, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Product._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ProductVersion')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 625, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Product._Automaton = _BuildAutomaton_9()




ProductList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Product'), Product, scope=ProductList, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 630, 3)))

def _BuildAutomaton_10 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_10
    del _BuildAutomaton_10
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=3, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 630, 3))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ProductList._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Product')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 630, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ProductList._Automaton = _BuildAutomaton_10()




Digest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DigestRef'), DigestRef, scope=Digest, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 635, 3)))

Digest._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DigestValue'), DigestValue, scope=Digest, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 636, 3)))

def _BuildAutomaton_11 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_11
    del _BuildAutomaton_11
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 636, 3))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Digest._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DigestRef')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 635, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Digest._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DigestValue')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 636, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Digest._Automaton = _BuildAutomaton_11()




DigestList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Digest'), Digest, scope=DigestList, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 641, 3)))

def _BuildAutomaton_12 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_12
    del _BuildAutomaton_12
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=8, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 641, 3))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DigestList._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Digest')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 641, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DigestList._Automaton = _BuildAutomaton_12()




MessageProperty._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MessagePropertyName'), MessagePropertyName, scope=MessageProperty, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 646, 3)))

MessageProperty._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MessagePropertyValue'), MessagePropertyValue, scope=MessageProperty, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 647, 3)))

def _BuildAutomaton_13 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_13
    del _BuildAutomaton_13
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MessageProperty._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MessagePropertyName')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 646, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MessageProperty._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MessagePropertyValue')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 647, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MessageProperty._Automaton = _BuildAutomaton_13()




MessagePropertyList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MessageProperty'), MessageProperty, scope=MessagePropertyList, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 652, 3)))

def _BuildAutomaton_14 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_14
    del _BuildAutomaton_14
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MessagePropertyList._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MessageProperty')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 652, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MessagePropertyList._Automaton = _BuildAutomaton_14()




InterfaceInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UserReference'), UserReference, scope=InterfaceInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 658, 3)))

InterfaceInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RoutingCode'), RoutingCode, scope=InterfaceInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 659, 3)))

InterfaceInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ValidationLevel'), ValidationLevel, scope=InterfaceInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 660, 3)))

InterfaceInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IsModificationAllowed'), pyxb.binding.datatypes.boolean, scope=InterfaceInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 661, 3)))

InterfaceInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RoutingInstruction'), RoutingInstruction, scope=InterfaceInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 662, 3)))

InterfaceInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MessageCreator'), MessageCreator, scope=InterfaceInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 663, 3)))

InterfaceInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MessageContext'), MessageContext, scope=InterfaceInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 664, 3)))

InterfaceInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MessageNature'), MessageNature, scope=InterfaceInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 665, 3)))

InterfaceInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ProductInfo'), ProductList, scope=InterfaceInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 666, 3)))

InterfaceInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CustomDigestValue'), CustomDigestValue, scope=InterfaceInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 667, 3)))

InterfaceInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Sumid'), Sumid, scope=InterfaceInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 668, 3)))

InterfaceInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ServiceURI'), MessageURI, scope=InterfaceInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 669, 3)))

InterfaceInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MessageTypeURI'), MessageURI, scope=InterfaceInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 670, 3)))

InterfaceInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MessageProperties'), MessagePropertyList, scope=InterfaceInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 671, 3)))

def _BuildAutomaton_15 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_15
    del _BuildAutomaton_15
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 658, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 659, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 660, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 661, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 662, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 663, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 664, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 665, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 666, 3))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 667, 3))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 668, 3))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 669, 3))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 670, 3))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 671, 3))
    counters.add(cc_13)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(InterfaceInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UserReference')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 658, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(InterfaceInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RoutingCode')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 659, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(InterfaceInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ValidationLevel')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 660, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(InterfaceInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IsModificationAllowed')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 661, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(InterfaceInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RoutingInstruction')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 662, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(InterfaceInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MessageCreator')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 663, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(InterfaceInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MessageContext')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 664, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(InterfaceInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MessageNature')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 665, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(InterfaceInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ProductInfo')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 666, 3))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(InterfaceInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CustomDigestValue')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 667, 3))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(InterfaceInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Sumid')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 668, 3))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(InterfaceInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ServiceURI')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 669, 3))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(InterfaceInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MessageTypeURI')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 670, 3))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(InterfaceInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MessageProperties')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 671, 3))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    st_13._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
InterfaceInfo._Automaton = _BuildAutomaton_15()




NetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Priority'), Priority, scope=NetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 677, 3)))

NetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IsPossibleDuplicate'), pyxb.binding.datatypes.boolean, scope=NetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 678, 3)))

NetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DuplicateHistory'), PDEPDM, scope=NetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 679, 3)))

NetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IsNotificationRequested'), pyxb.binding.datatypes.boolean, scope=NetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 680, 3)))

NetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Service'), Service, scope=NetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 681, 3)))

NetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Network'), Network, scope=NetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 682, 3)))

NetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SessionNr'), pyxb.binding.datatypes.int, scope=NetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 683, 3)))

NetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SeqNr'), pyxb.binding.datatypes.int, scope=NetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 684, 3)))

NetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FINNetworkInfo'), FINNetworkInfo, scope=NetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 686, 4)))

NetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SWIFTNetNetworkInfo'), SWIFTNetNetworkInfo, scope=NetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 687, 4)))

def _BuildAutomaton_16 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_16
    del _BuildAutomaton_16
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 677, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 678, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 679, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 680, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 681, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 682, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 683, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 684, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 685, 3))
    counters.add(cc_8)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(NetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Priority')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 677, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(NetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IsPossibleDuplicate')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 678, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(NetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DuplicateHistory')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 679, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(NetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IsNotificationRequested')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 680, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(NetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Service')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 681, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(NetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Network')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 682, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(NetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SessionNr')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 683, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(NetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SeqNr')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 684, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(NetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FINNetworkInfo')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 686, 4))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(NetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SWIFTNetNetworkInfo')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 687, 4))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
NetworkInfo._Automaton = _BuildAutomaton_16()




FINNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UserPriority'), UserPriority, scope=FINNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 693, 3)))

FINNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CopyService'), CopyService, scope=FINNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 694, 3)))

FINNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CopyCID'), BIC8, scope=FINNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 695, 3)))

FINNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MessageSyntaxVersion'), MessageSyntaxVersion, scope=FINNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 696, 3)))

FINNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IsRetrieved'), pyxb.binding.datatypes.boolean, scope=FINNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 697, 3)))

FINNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReleaseInfo'), ReleaseInfo, scope=FINNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 698, 3)))

FINNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ValidationIdentifier'), ValidationIdentifier, scope=FINNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 699, 3)))

FINNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CorrespondentInputReference'), CorrespondentInputReference, scope=FINNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 700, 3)))

FINNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CorrespondentInputTime'), TimeString, scope=FINNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 701, 3)))

FINNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LocalOutputTime'), TimeString, scope=FINNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 702, 3)))

FINNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SystemOriginated'), FINTrailer, scope=FINNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 703, 3)))

FINNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DelayedMessage'), FINTrailer, scope=FINNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 704, 3)))

FINNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FINUserHeader'), FINUserHeader, scope=FINNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 705, 3)))

FINNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ServiceLevelAgreement'), ServiceLevelAgreement, scope=FINNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 706, 3)))

FINNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'E2ETransactionReference'), E2ETransactionReference, scope=FINNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 707, 3)))

FINNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FinInformReleaseInfo'), FinInformReleaseInfo, scope=FINNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 708, 3)))

FINNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PCInfoForReceiver'), PCInfoForReceiver, scope=FINNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 709, 3)))

FINNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TranslatedResult'), TranslatedResult, scope=FINNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 710, 3)))

FINNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TranslationResultDetails'), TranslationResultDetails, scope=FINNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 711, 3)))

def _BuildAutomaton_17 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_17
    del _BuildAutomaton_17
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 693, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 694, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 695, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 696, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 697, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 698, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 699, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 700, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 701, 3))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 702, 3))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 703, 3))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 704, 3))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 705, 3))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 706, 3))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 707, 3))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 708, 3))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 709, 3))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 710, 3))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 711, 3))
    counters.add(cc_18)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(FINNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UserPriority')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 693, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(FINNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CopyService')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 694, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(FINNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CopyCID')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 695, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(FINNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MessageSyntaxVersion')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 696, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(FINNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IsRetrieved')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 697, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(FINNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReleaseInfo')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 698, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(FINNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ValidationIdentifier')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 699, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(FINNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CorrespondentInputReference')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 700, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(FINNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CorrespondentInputTime')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 701, 3))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(FINNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LocalOutputTime')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 702, 3))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(FINNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SystemOriginated')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 703, 3))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(FINNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DelayedMessage')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 704, 3))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(FINNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FINUserHeader')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 705, 3))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(FINNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ServiceLevelAgreement')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 706, 3))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(FINNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'E2ETransactionReference')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 707, 3))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(FINNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FinInformReleaseInfo')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 708, 3))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(FINNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PCInfoForReceiver')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 709, 3))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(FINNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TranslatedResult')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 710, 3))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(FINNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TranslationResultDetails')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 711, 3))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_18, True) ]))
    st_18._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
FINNetworkInfo._Automaton = _BuildAutomaton_17()




PayloadAttribute._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), pyxb.binding.datatypes.NCName, scope=PayloadAttribute, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 716, 3)))

PayloadAttribute._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Value'), AttributeValue, scope=PayloadAttribute, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 717, 3)))

def _BuildAutomaton_18 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_18
    del _BuildAutomaton_18
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PayloadAttribute._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 716, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PayloadAttribute._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Value')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 717, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PayloadAttribute._Automaton = _BuildAutomaton_18()




PayloadAttributeList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PayloadAttribute'), PayloadAttribute, scope=PayloadAttributeList, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 722, 3)))

def _BuildAutomaton_19 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_19
    del _BuildAutomaton_19
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=3, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 722, 3))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(PayloadAttributeList._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PayloadAttribute')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 722, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
PayloadAttributeList._Automaton = _BuildAutomaton_19()




RecipientListType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RecipientDN'), pyxb.binding.datatypes.string, scope=RecipientListType, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 727, 3)))

def _BuildAutomaton_20 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_20
    del _BuildAutomaton_20
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=1000, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 727, 3))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(RecipientListType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RecipientDN')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 727, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
RecipientListType._Automaton = _BuildAutomaton_20()




ThirdPartyListType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ThirdPartyDN'), pyxb.binding.datatypes.string, scope=ThirdPartyListType, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 732, 3)))

def _BuildAutomaton_21 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_21
    del _BuildAutomaton_21
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=30, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 732, 3))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ThirdPartyListType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ThirdPartyDN')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 732, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ThirdPartyListType._Automaton = _BuildAutomaton_21()




DistributionInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RecipientDNList'), RecipientListType, scope=DistributionInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 737, 3)))

DistributionInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OrigSnFRef'), pyxb.binding.datatypes.string, scope=DistributionInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 738, 3)))

def _BuildAutomaton_22 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_22
    del _BuildAutomaton_22
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DistributionInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RecipientDNList')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 737, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DistributionInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OrigSnFRef')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 738, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DistributionInfo._Automaton = _BuildAutomaton_22()




SWIFTNetNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RequestType'), RequestType, scope=SWIFTNetNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 743, 3)))

SWIFTNetNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RequestSubtype'), RequestSubtype, scope=SWIFTNetNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 744, 3)))

SWIFTNetNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SWIFTRef'), SWIFTNetReference, scope=SWIFTNetNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 745, 3)))

SWIFTNetNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SNLRef'), SWIFTNetReference, scope=SWIFTNetNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 746, 3)))

SWIFTNetNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Reference'), CBTReference, scope=SWIFTNetNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 747, 3)))

SWIFTNetNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SNLEndPoint'), SNLEndPoint, scope=SWIFTNetNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 748, 3)))

SWIFTNetNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SnFQueueName'), SnFQueueName, scope=SWIFTNetNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 749, 3)))

SWIFTNetNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SnFChannelName'), SnFQueueName, scope=SWIFTNetNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 750, 3)))

SWIFTNetNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SnFInputTime'), SWIFTNetTime, scope=SWIFTNetNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 751, 3)))

SWIFTNetNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SnFDeliveryTime'), SWIFTNetTime, scope=SWIFTNetNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 752, 3)))

SWIFTNetNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CreationTime'), SWIFTNetTime, scope=SWIFTNetNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 753, 3)))

SWIFTNetNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ValidationDescriptor'), SwAny, scope=SWIFTNetNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 754, 3)))

SWIFTNetNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ResponseResponderDN'), DN, scope=SWIFTNetNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 755, 3)))

SWIFTNetNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ResponseSWIFTRef'), SWIFTNetReference, scope=SWIFTNetNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 756, 3)))

SWIFTNetNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ResponseSNLRef'), SWIFTNetReference, scope=SWIFTNetNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 757, 3)))

SWIFTNetNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ResponseReference'), CBTReference, scope=SWIFTNetNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 758, 3)))

SWIFTNetNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IsPossibleDuplicateResponse'), pyxb.binding.datatypes.boolean, scope=SWIFTNetNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 759, 3)))

SWIFTNetNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ResponseValidationDescriptor'), SwAny, scope=SWIFTNetNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 760, 3)))

SWIFTNetNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PayloadAttributes'), PayloadAttributeList, scope=SWIFTNetNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 761, 3)))

SWIFTNetNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ResponsePayloadAttributes'), PayloadAttributeList, scope=SWIFTNetNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 762, 3)))

SWIFTNetNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IsCopyRequested'), pyxb.binding.datatypes.boolean, scope=SWIFTNetNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 763, 3)))

SWIFTNetNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IsAuthNotificationRequested'), pyxb.binding.datatypes.boolean, scope=SWIFTNetNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 764, 3)))

SWIFTNetNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CopyInfo'), SwAny, scope=SWIFTNetNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 765, 3)))

SWIFTNetNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TransferRef'), TransferRef, scope=SWIFTNetNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 766, 3)))

SWIFTNetNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StoredTransferRef'), TransferRef, scope=SWIFTNetNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 767, 3)))

SWIFTNetNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OrigSnfRef'), SWIFTNetReference, scope=SWIFTNetNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 768, 3)))

SWIFTNetNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TransferDescription'), FileInfoDescription, scope=SWIFTNetNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 769, 3)))

SWIFTNetNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TransferInfo'), FileInfoDescription, scope=SWIFTNetNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 770, 3)))

SWIFTNetNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FileDescription'), FileInfoDescription, scope=SWIFTNetNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 771, 3)))

SWIFTNetNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FileInfo'), FileInfoDescription, scope=SWIFTNetNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 772, 3)))

SWIFTNetNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'HeaderInfo'), SwAny, scope=SWIFTNetNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 773, 3)))

SWIFTNetNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NotificationResponderDN'), DN, scope=SWIFTNetNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 774, 3)))

SWIFTNetNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NotificationRequestType'), RequestType, scope=SWIFTNetNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 775, 3)))

SWIFTNetNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FileStartTime'), TimeString, scope=SWIFTNetNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 776, 3)))

SWIFTNetNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FileEndTime'), TimeString, scope=SWIFTNetNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 777, 3)))

SWIFTNetNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OverdueWarningTime'), SWIFTNetTime, scope=SWIFTNetNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 778, 3)))

SWIFTNetNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OverdueWarningDelay'), pyxb.binding.datatypes.int, scope=SWIFTNetNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 779, 3)))

SWIFTNetNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RecipientList'), RecipientListType, scope=SWIFTNetNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 780, 3)))

SWIFTNetNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ThirdPartyList'), ThirdPartyListType, scope=SWIFTNetNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 781, 3)))

SWIFTNetNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IsRecipientListPublic'), pyxb.binding.datatypes.boolean, scope=SWIFTNetNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 782, 3)))

SWIFTNetNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DistributionInfo'), DistributionInfo, scope=SWIFTNetNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 783, 3)))

SWIFTNetNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RetrievalInfo'), SwAny, scope=SWIFTNetNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 784, 3)))

SWIFTNetNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RequestE2EControl'), SwAny, scope=SWIFTNetNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 785, 3)))

SWIFTNetNetworkInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RetrievalDescriptor'), SwAny, scope=SWIFTNetNetworkInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 786, 3)))

def _BuildAutomaton_23 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_23
    del _BuildAutomaton_23
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 743, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 744, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 745, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 746, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 747, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 748, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 749, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 750, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 751, 3))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 752, 3))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 753, 3))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 754, 3))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 755, 3))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 756, 3))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 757, 3))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 758, 3))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 759, 3))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 760, 3))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 761, 3))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 762, 3))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 763, 3))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 764, 3))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 765, 3))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 766, 3))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 767, 3))
    counters.add(cc_24)
    cc_25 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 768, 3))
    counters.add(cc_25)
    cc_26 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 769, 3))
    counters.add(cc_26)
    cc_27 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 770, 3))
    counters.add(cc_27)
    cc_28 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 771, 3))
    counters.add(cc_28)
    cc_29 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 772, 3))
    counters.add(cc_29)
    cc_30 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 773, 3))
    counters.add(cc_30)
    cc_31 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 774, 3))
    counters.add(cc_31)
    cc_32 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 775, 3))
    counters.add(cc_32)
    cc_33 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 776, 3))
    counters.add(cc_33)
    cc_34 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 777, 3))
    counters.add(cc_34)
    cc_35 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 778, 3))
    counters.add(cc_35)
    cc_36 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 779, 3))
    counters.add(cc_36)
    cc_37 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 780, 3))
    counters.add(cc_37)
    cc_38 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 781, 3))
    counters.add(cc_38)
    cc_39 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 782, 3))
    counters.add(cc_39)
    cc_40 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 783, 3))
    counters.add(cc_40)
    cc_41 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 784, 3))
    counters.add(cc_41)
    cc_42 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 785, 3))
    counters.add(cc_42)
    cc_43 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 786, 3))
    counters.add(cc_43)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SWIFTNetNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RequestType')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 743, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(SWIFTNetNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RequestSubtype')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 744, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(SWIFTNetNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SWIFTRef')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 745, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(SWIFTNetNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SNLRef')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 746, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(SWIFTNetNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Reference')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 747, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(SWIFTNetNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SNLEndPoint')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 748, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(SWIFTNetNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SnFQueueName')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 749, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(SWIFTNetNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SnFChannelName')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 750, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(SWIFTNetNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SnFInputTime')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 751, 3))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(SWIFTNetNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SnFDeliveryTime')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 752, 3))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(SWIFTNetNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CreationTime')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 753, 3))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(SWIFTNetNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ValidationDescriptor')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 754, 3))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(SWIFTNetNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ResponseResponderDN')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 755, 3))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(SWIFTNetNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ResponseSWIFTRef')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 756, 3))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(SWIFTNetNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ResponseSNLRef')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 757, 3))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(SWIFTNetNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ResponseReference')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 758, 3))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(SWIFTNetNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IsPossibleDuplicateResponse')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 759, 3))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(SWIFTNetNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ResponseValidationDescriptor')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 760, 3))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(SWIFTNetNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PayloadAttributes')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 761, 3))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(SWIFTNetNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ResponsePayloadAttributes')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 762, 3))
    st_19 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(SWIFTNetNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IsCopyRequested')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 763, 3))
    st_20 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(SWIFTNetNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IsAuthNotificationRequested')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 764, 3))
    st_21 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_22, False))
    symbol = pyxb.binding.content.ElementUse(SWIFTNetNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CopyInfo')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 765, 3))
    st_22 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_23, False))
    symbol = pyxb.binding.content.ElementUse(SWIFTNetNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TransferRef')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 766, 3))
    st_23 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_24, False))
    symbol = pyxb.binding.content.ElementUse(SWIFTNetNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'StoredTransferRef')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 767, 3))
    st_24 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_25, False))
    symbol = pyxb.binding.content.ElementUse(SWIFTNetNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OrigSnfRef')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 768, 3))
    st_25 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_26, False))
    symbol = pyxb.binding.content.ElementUse(SWIFTNetNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TransferDescription')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 769, 3))
    st_26 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_26)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_27, False))
    symbol = pyxb.binding.content.ElementUse(SWIFTNetNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TransferInfo')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 770, 3))
    st_27 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_27)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_28, False))
    symbol = pyxb.binding.content.ElementUse(SWIFTNetNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FileDescription')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 771, 3))
    st_28 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_28)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_29, False))
    symbol = pyxb.binding.content.ElementUse(SWIFTNetNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FileInfo')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 772, 3))
    st_29 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_29)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_30, False))
    symbol = pyxb.binding.content.ElementUse(SWIFTNetNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'HeaderInfo')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 773, 3))
    st_30 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_30)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_31, False))
    symbol = pyxb.binding.content.ElementUse(SWIFTNetNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NotificationResponderDN')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 774, 3))
    st_31 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_31)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_32, False))
    symbol = pyxb.binding.content.ElementUse(SWIFTNetNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NotificationRequestType')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 775, 3))
    st_32 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_32)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_33, False))
    symbol = pyxb.binding.content.ElementUse(SWIFTNetNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FileStartTime')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 776, 3))
    st_33 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_33)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_34, False))
    symbol = pyxb.binding.content.ElementUse(SWIFTNetNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FileEndTime')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 777, 3))
    st_34 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_34)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_35, False))
    symbol = pyxb.binding.content.ElementUse(SWIFTNetNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OverdueWarningTime')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 778, 3))
    st_35 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_35)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_36, False))
    symbol = pyxb.binding.content.ElementUse(SWIFTNetNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OverdueWarningDelay')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 779, 3))
    st_36 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_36)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_37, False))
    symbol = pyxb.binding.content.ElementUse(SWIFTNetNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RecipientList')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 780, 3))
    st_37 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_37)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_38, False))
    symbol = pyxb.binding.content.ElementUse(SWIFTNetNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ThirdPartyList')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 781, 3))
    st_38 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_38)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_39, False))
    symbol = pyxb.binding.content.ElementUse(SWIFTNetNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IsRecipientListPublic')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 782, 3))
    st_39 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_39)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_40, False))
    symbol = pyxb.binding.content.ElementUse(SWIFTNetNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DistributionInfo')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 783, 3))
    st_40 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_40)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_41, False))
    symbol = pyxb.binding.content.ElementUse(SWIFTNetNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RetrievalInfo')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 784, 3))
    st_41 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_41)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_42, False))
    symbol = pyxb.binding.content.ElementUse(SWIFTNetNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RequestE2EControl')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 785, 3))
    st_42 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_42)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_43, False))
    symbol = pyxb.binding.content.ElementUse(SWIFTNetNetworkInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RetrievalDescriptor')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 786, 3))
    st_43 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_43)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_20, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_20, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_21, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_21, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_22, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_22, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_23, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_23, False) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_24, False) ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_25, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_25, False) ]))
    st_25._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_26, True) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_26, False) ]))
    st_26._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_27, True) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_27, False) ]))
    st_27._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_28, True) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_28, False) ]))
    st_28._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_29, True) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_29, False) ]))
    st_29._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_30, True) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_30, False) ]))
    st_30._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_31, True) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_31, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_31, False) ]))
    st_31._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_32, True) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_32, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_32, False) ]))
    st_32._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_33, True) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_33, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_33, False) ]))
    st_33._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_34, True) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_34, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_34, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_34, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_34, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_34, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_34, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_34, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_34, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_34, False) ]))
    st_34._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_35, True) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_35, False) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_35, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_35, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_35, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_35, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_35, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_35, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_35, False) ]))
    st_35._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_36, True) ]))
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_36, False) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_36, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_36, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_36, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_36, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_36, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_36, False) ]))
    st_36._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_37, [
        fac.UpdateInstruction(cc_37, True) ]))
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_37, False) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_37, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_37, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_37, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_37, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_37, False) ]))
    st_37._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_38, [
        fac.UpdateInstruction(cc_38, True) ]))
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_38, False) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_38, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_38, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_38, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_38, False) ]))
    st_38._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_39, [
        fac.UpdateInstruction(cc_39, True) ]))
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_39, False) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_39, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_39, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_39, False) ]))
    st_39._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_40, [
        fac.UpdateInstruction(cc_40, True) ]))
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_40, False) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_40, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_40, False) ]))
    st_40._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_41, [
        fac.UpdateInstruction(cc_41, True) ]))
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_41, False) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_41, False) ]))
    st_41._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_42, [
        fac.UpdateInstruction(cc_42, True) ]))
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_42, False) ]))
    st_42._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_43, [
        fac.UpdateInstruction(cc_43, True) ]))
    st_43._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
SWIFTNetNetworkInfo._Automaton = _BuildAutomaton_23()




SecurityInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IsSigningRequested'), pyxb.binding.datatypes.boolean, scope=SecurityInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 792, 3)))

SecurityInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RMAResult'), RMAResult, scope=SecurityInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 793, 3)))

SecurityInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RMAChecked'), pyxb.binding.datatypes.boolean, scope=SecurityInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 794, 3)))

SecurityInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FINSecurityInfo'), FINSecurityInfo, scope=SecurityInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 796, 4)))

SecurityInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SWIFTNetSecurityInfo'), SWIFTNetSecurityInfo, scope=SecurityInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 797, 4)))

def _BuildAutomaton_24 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_24
    del _BuildAutomaton_24
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 792, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 793, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 794, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 795, 3))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SecurityInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IsSigningRequested')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 792, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(SecurityInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RMAResult')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 793, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(SecurityInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RMAChecked')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 794, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(SecurityInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FINSecurityInfo')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 796, 4))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(SecurityInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SWIFTNetSecurityInfo')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 797, 4))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
SecurityInfo._Automaton = _BuildAutomaton_24()




FINSecurityInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ChecksumResult'), ChecksumResult, scope=FINSecurityInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 803, 3)))

FINSecurityInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ChecksumValue'), ChecksumValue, scope=FINSecurityInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 804, 3)))

FINSecurityInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PACResult'), MACPACResult, scope=FINSecurityInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 805, 3)))

FINSecurityInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PACValue'), MACPACValue, scope=FINSecurityInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 806, 3)))

FINSecurityInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MACResult'), MACPACResult, scope=FINSecurityInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 807, 3)))

FINSecurityInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MACValue'), MACPACValue, scope=FINSecurityInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 808, 3)))

FINSecurityInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MACSignatureValue'), SwAny, scope=FINSecurityInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 809, 3)))

FINSecurityInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PAC2SignatureValue'), SwAny, scope=FINSecurityInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 810, 3)))

def _BuildAutomaton_25 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_25
    del _BuildAutomaton_25
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 803, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 804, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 805, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 806, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 807, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 808, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 809, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 810, 3))
    counters.add(cc_7)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(FINSecurityInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ChecksumResult')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 803, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(FINSecurityInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ChecksumValue')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 804, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(FINSecurityInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PACResult')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 805, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(FINSecurityInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PACValue')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 806, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(FINSecurityInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MACResult')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 807, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(FINSecurityInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MACValue')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 808, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(FINSecurityInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MACSignatureValue')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 809, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(FINSecurityInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PAC2SignatureValue')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 810, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
FINSecurityInfo._Automaton = _BuildAutomaton_25()




SWIFTNetSecurityInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IsNRRequested'), pyxb.binding.datatypes.boolean, scope=SWIFTNetSecurityInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 815, 3)))

SWIFTNetSecurityInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SignerDN'), DN, scope=SWIFTNetSecurityInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 816, 3)))

SWIFTNetSecurityInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NRType'), NRType, scope=SWIFTNetSecurityInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 817, 3)))

SWIFTNetSecurityInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NRWarning'), NRWarning, scope=SWIFTNetSecurityInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 818, 3)))

SWIFTNetSecurityInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SignatureResult'), SignatureResult, scope=SWIFTNetSecurityInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 819, 3)))

SWIFTNetSecurityInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SignatureValue'), SwAny, scope=SWIFTNetSecurityInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 820, 3)))

SWIFTNetSecurityInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ResponseNRType'), NRType, scope=SWIFTNetSecurityInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 821, 3)))

SWIFTNetSecurityInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ResponseNRWarning'), NRWarning, scope=SWIFTNetSecurityInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 822, 3)))

SWIFTNetSecurityInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ResponseSignatureResult'), SignatureResult, scope=SWIFTNetSecurityInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 823, 3)))

SWIFTNetSecurityInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ResponseSignatureValue'), SwAny, scope=SWIFTNetSecurityInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 824, 3)))

SWIFTNetSecurityInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FileDigestAlgorithm'), FileDigestAlgorithm, scope=SWIFTNetSecurityInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 825, 3)))

SWIFTNetSecurityInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FileDigestValue'), FileDigestValue, scope=SWIFTNetSecurityInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 826, 3)))

SWIFTNetSecurityInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DigestList'), DigestList, scope=SWIFTNetSecurityInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 827, 3)))

SWIFTNetSecurityInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ThirdPartySignerDN'), DN, scope=SWIFTNetSecurityInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 828, 3)))

def _BuildAutomaton_26 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_26
    del _BuildAutomaton_26
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 815, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 816, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 817, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 818, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 819, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 820, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 821, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 822, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 823, 3))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 824, 3))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 825, 3))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 826, 3))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 827, 3))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 828, 3))
    counters.add(cc_13)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SWIFTNetSecurityInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IsNRRequested')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 815, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(SWIFTNetSecurityInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SignerDN')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 816, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(SWIFTNetSecurityInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NRType')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 817, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(SWIFTNetSecurityInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NRWarning')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 818, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(SWIFTNetSecurityInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SignatureResult')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 819, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(SWIFTNetSecurityInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SignatureValue')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 820, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(SWIFTNetSecurityInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ResponseNRType')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 821, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(SWIFTNetSecurityInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ResponseNRWarning')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 822, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(SWIFTNetSecurityInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ResponseSignatureResult')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 823, 3))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(SWIFTNetSecurityInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ResponseSignatureValue')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 824, 3))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(SWIFTNetSecurityInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FileDigestAlgorithm')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 825, 3))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(SWIFTNetSecurityInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FileDigestValue')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 826, 3))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(SWIFTNetSecurityInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DigestList')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 827, 3))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(SWIFTNetSecurityInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ThirdPartySignerDN')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 828, 3))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    st_13._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
SWIFTNetSecurityInfo._Automaton = _BuildAutomaton_26()




SAAInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InstanceName'), InstanceName, scope=SAAInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 834, 3)))

SAAInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UserName'), UserName, scope=SAAInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 835, 3)))

SAAInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Unit'), Unit, scope=SAAInfo, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 836, 3)))

def _BuildAutomaton_27 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_27
    del _BuildAutomaton_27
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SAAInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InstanceName')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 834, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SAAInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UserName')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 835, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SAAInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Unit')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 836, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SAAInfo._Automaton = _BuildAutomaton_27()




DeliveryNotification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReconciliationInfo'), SenderReference, scope=DeliveryNotification, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 842, 3)))

DeliveryNotification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReceiverDeliveryStatus'), ReceiverDeliveryStatus, scope=DeliveryNotification, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 843, 3)))

DeliveryNotification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MessageIdentifier'), MessageIdentifier, scope=DeliveryNotification, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 844, 3)))

DeliveryNotification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Receiver'), AddressInfo, scope=DeliveryNotification, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 845, 3)))

DeliveryNotification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InterfaceInfo'), InterfaceInfo, scope=DeliveryNotification, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 846, 3)))

DeliveryNotification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NetworkInfo'), NetworkInfo, scope=DeliveryNotification, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 847, 3)))

DeliveryNotification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SecurityInfo'), SecurityInfo, scope=DeliveryNotification, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 848, 3)))

DeliveryNotification._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SAAInfo'), SAAInfo, scope=DeliveryNotification, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 849, 3)))

def _BuildAutomaton_28 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_28
    del _BuildAutomaton_28
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 845, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 846, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 847, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 848, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 849, 3))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeliveryNotification._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReconciliationInfo')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 842, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeliveryNotification._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReceiverDeliveryStatus')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 843, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DeliveryNotification._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MessageIdentifier')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 844, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DeliveryNotification._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Receiver')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 845, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(DeliveryNotification._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InterfaceInfo')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 846, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(DeliveryNotification._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NetworkInfo')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 847, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(DeliveryNotification._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SecurityInfo')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 848, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(DeliveryNotification._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SAAInfo')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 849, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DeliveryNotification._Automaton = _BuildAutomaton_28()




Message._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SenderReference'), SenderReference, scope=Message, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 855, 3)))

Message._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MessageIdentifier'), MessageIdentifier, scope=Message, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 856, 3)))

Message._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Format'), Format, scope=Message, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 857, 3)))

Message._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SubFormat'), SubFormat, scope=Message, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 858, 3)))

Message._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Sender'), AddressInfo, scope=Message, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 859, 3)))

Message._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Receiver'), AddressInfo, scope=Message, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 860, 3)))

Message._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InterfaceInfo'), InterfaceInfo, scope=Message, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 861, 3)))

Message._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NetworkInfo'), NetworkInfo, scope=Message, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 862, 3)))

Message._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SecurityInfo'), SecurityInfo, scope=Message, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 863, 3)))

Message._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SAAInfo'), SAAInfo, scope=Message, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 864, 3)))

Message._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FileLogicalName'), FileLogicalName, scope=Message, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 865, 3)))

Message._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExpiryDateTime'), InputTimeString, scope=Message, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 866, 3)))

def _BuildAutomaton_29 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_29
    del _BuildAutomaton_29
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 858, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 861, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 862, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 863, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 864, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 865, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 866, 3))
    counters.add(cc_6)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Message._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SenderReference')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 855, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Message._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MessageIdentifier')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 856, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Message._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Format')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 857, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Message._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SubFormat')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 858, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Message._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Sender')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 859, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Message._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Receiver')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 860, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Message._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InterfaceInfo')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 861, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Message._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NetworkInfo')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 862, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Message._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SecurityInfo')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 863, 3))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Message._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SAAInfo')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 864, 3))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Message._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FileLogicalName')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 865, 3))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Message._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExpiryDateTime')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 866, 3))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Message._Automaton = _BuildAutomaton_29()




HistoryReport._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SenderReference'), SenderReference, scope=HistoryReport, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 872, 3)))

HistoryReport._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OriginalInstanceAddressee'), AddressFullName, scope=HistoryReport, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 873, 3)))

HistoryReport._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReportingApplication'), ReportingApplication, scope=HistoryReport, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 874, 3)))

HistoryReport._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SAAInfo'), SAAInfo, scope=HistoryReport, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 875, 3)))

HistoryReport._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Interventions'), HistoryInterventions, scope=HistoryReport, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 876, 3)))

HistoryReport._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IsRelatedInstanceOriginal'), pyxb.binding.datatypes.boolean, scope=HistoryReport, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 877, 3)))

HistoryReport._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RelatedInstanceAddressee'), AddressFullName, scope=HistoryReport, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 878, 3)))

HistoryReport._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MessageCreator'), MessageCreator, scope=HistoryReport, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 879, 3)))

HistoryReport._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IsMessageModified'), pyxb.binding.datatypes.boolean, scope=HistoryReport, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 880, 3)))

HistoryReport._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MessageFields'), MessageFields, scope=HistoryReport, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 881, 3)))

HistoryReport._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Message'), Message, scope=HistoryReport, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 882, 3)))

def _BuildAutomaton_30 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_30
    del _BuildAutomaton_30
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 875, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 878, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 882, 3))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HistoryReport._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SenderReference')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 872, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HistoryReport._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OriginalInstanceAddressee')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 873, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HistoryReport._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReportingApplication')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 874, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HistoryReport._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SAAInfo')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 875, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HistoryReport._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Interventions')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 876, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HistoryReport._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IsRelatedInstanceOriginal')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 877, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HistoryReport._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RelatedInstanceAddressee')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 878, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HistoryReport._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MessageCreator')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 879, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HistoryReport._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IsMessageModified')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 880, 3))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(HistoryReport._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MessageFields')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 881, 3))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(HistoryReport._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Message')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 882, 3))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
HistoryReport._Automaton = _BuildAutomaton_30()




TransmissionReport._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SenderReference'), SenderReference, scope=TransmissionReport, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 887, 3)))

TransmissionReport._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReconciliationInfo'), SenderReference, scope=TransmissionReport, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 888, 3)))

TransmissionReport._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NetworkDeliveryStatus'), NetworkDeliveryStatus, scope=TransmissionReport, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 889, 3)))

TransmissionReport._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OriginalInstanceAddressee'), AddressFullName, scope=TransmissionReport, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 890, 3)))

TransmissionReport._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReportingApplication'), ReportingApplication, scope=TransmissionReport, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 891, 3)))

TransmissionReport._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NetworkInfo'), NetworkInfo, scope=TransmissionReport, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 892, 3)))

TransmissionReport._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SAAInfo'), SAAInfo, scope=TransmissionReport, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 893, 3)))

TransmissionReport._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Interventions'), Interventions, scope=TransmissionReport, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 894, 3)))

TransmissionReport._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IsRelatedInstanceOriginal'), pyxb.binding.datatypes.boolean, scope=TransmissionReport, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 895, 3)))

TransmissionReport._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RelatedInstanceAddressee'), AddressFullName, scope=TransmissionReport, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 896, 3)))

TransmissionReport._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MessageCreator'), MessageCreator, scope=TransmissionReport, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 897, 3)))

TransmissionReport._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IsMessageModified'), pyxb.binding.datatypes.boolean, scope=TransmissionReport, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 898, 3)))

TransmissionReport._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MessageFields'), MessageFields, scope=TransmissionReport, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 899, 3)))

TransmissionReport._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Message'), Message, scope=TransmissionReport, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 900, 3)))

def _BuildAutomaton_31 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_31
    del _BuildAutomaton_31
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 888, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 893, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 896, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 900, 3))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TransmissionReport._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SenderReference')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 887, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TransmissionReport._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReconciliationInfo')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 888, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TransmissionReport._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NetworkDeliveryStatus')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 889, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TransmissionReport._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OriginalInstanceAddressee')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 890, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TransmissionReport._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReportingApplication')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 891, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TransmissionReport._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NetworkInfo')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 892, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TransmissionReport._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SAAInfo')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 893, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TransmissionReport._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Interventions')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 894, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TransmissionReport._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IsRelatedInstanceOriginal')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 895, 3))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TransmissionReport._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RelatedInstanceAddressee')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 896, 3))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TransmissionReport._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MessageCreator')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 897, 3))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TransmissionReport._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IsMessageModified')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 898, 3))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TransmissionReport._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MessageFields')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 899, 3))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(TransmissionReport._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Message')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 900, 3))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_13._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TransmissionReport._Automaton = _BuildAutomaton_31()




DeliveryReport._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SenderReference'), SenderReference, scope=DeliveryReport, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 905, 3)))

DeliveryReport._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReceiverDeliveryStatus'), ReceiverDeliveryStatus, scope=DeliveryReport, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 906, 3)))

DeliveryReport._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OriginalInstanceAddressee'), AddressFullName, scope=DeliveryReport, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 907, 3)))

DeliveryReport._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReportingApplication'), ReportingApplication, scope=DeliveryReport, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 908, 3)))

DeliveryReport._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NetworkInfo'), NetworkInfo, scope=DeliveryReport, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 909, 3)))

DeliveryReport._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SAAInfo'), SAAInfo, scope=DeliveryReport, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 910, 3)))

DeliveryReport._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Interventions'), Interventions, scope=DeliveryReport, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 911, 3)))

DeliveryReport._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IsRelatedInstanceOriginal'), pyxb.binding.datatypes.boolean, scope=DeliveryReport, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 912, 3)))

DeliveryReport._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RelatedInstanceAddressee'), AddressFullName, scope=DeliveryReport, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 913, 3)))

DeliveryReport._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MessageCreator'), MessageCreator, scope=DeliveryReport, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 914, 3)))

DeliveryReport._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IsMessageModified'), pyxb.binding.datatypes.boolean, scope=DeliveryReport, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 915, 3)))

DeliveryReport._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MessageFields'), MessageFields, scope=DeliveryReport, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 916, 3)))

DeliveryReport._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Message'), Message, scope=DeliveryReport, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 917, 3)))

def _BuildAutomaton_32 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_32
    del _BuildAutomaton_32
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 910, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 913, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 917, 3))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeliveryReport._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SenderReference')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 905, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeliveryReport._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReceiverDeliveryStatus')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 906, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeliveryReport._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OriginalInstanceAddressee')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 907, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeliveryReport._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReportingApplication')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 908, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeliveryReport._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NetworkInfo')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 909, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeliveryReport._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SAAInfo')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 910, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeliveryReport._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Interventions')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 911, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeliveryReport._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IsRelatedInstanceOriginal')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 912, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeliveryReport._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RelatedInstanceAddressee')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 913, 3))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeliveryReport._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MessageCreator')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 914, 3))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeliveryReport._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IsMessageModified')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 915, 3))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DeliveryReport._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MessageFields')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 916, 3))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(DeliveryReport._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Message')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 917, 3))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_12._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DeliveryReport._Automaton = _BuildAutomaton_32()




MessageStatus._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SenderReference'), SenderReference, scope=MessageStatus, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 923, 3)))

MessageStatus._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SeqNr'), pyxb.binding.datatypes.int, scope=MessageStatus, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 924, 3)))

MessageStatus._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IsSuccess'), pyxb.binding.datatypes.boolean, scope=MessageStatus, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 925, 3)))

MessageStatus._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ErrorCode'), pyxb.binding.datatypes.string, scope=MessageStatus, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 926, 3)))

MessageStatus._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ErrorText'), pyxb.binding.datatypes.string, scope=MessageStatus, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 927, 3)))

MessageStatus._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SAAInfo'), SAAInfo, scope=MessageStatus, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 928, 3)))

def _BuildAutomaton_33 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_33
    del _BuildAutomaton_33
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 924, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 926, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 927, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 928, 3))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MessageStatus._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SenderReference')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 923, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MessageStatus._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SeqNr')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 924, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MessageStatus._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IsSuccess')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 925, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(MessageStatus._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ErrorCode')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 926, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(MessageStatus._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ErrorText')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 927, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(MessageStatus._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SAAInfo')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 928, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MessageStatus._Automaton = _BuildAutomaton_33()




SessionStatus._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MessagePartner'), MessagePartner, scope=SessionStatus, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 933, 3)))

SessionStatus._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CreationTime'), TimeString, scope=SessionStatus, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 934, 3)))

SessionStatus._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SessionNr'), pyxb.binding.datatypes.int, scope=SessionStatus, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 935, 3)))

SessionStatus._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InputFile'), pyxb.binding.datatypes.string, scope=SessionStatus, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 936, 3)))

SessionStatus._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IsSuccess'), pyxb.binding.datatypes.boolean, scope=SessionStatus, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 937, 3)))

SessionStatus._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ErrorCode'), pyxb.binding.datatypes.string, scope=SessionStatus, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 938, 3)))

SessionStatus._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ErrorText'), pyxb.binding.datatypes.string, scope=SessionStatus, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 939, 3)))

SessionStatus._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SessionDirection'), SessionDirection, scope=SessionStatus, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 940, 3)))

SessionStatus._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Accepted'), pyxb.binding.datatypes.int, scope=SessionStatus, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 941, 3)))

SessionStatus._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Rejected'), pyxb.binding.datatypes.int, scope=SessionStatus, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 942, 3)))

SessionStatus._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AcceptedFromMessagePartner'), pyxb.binding.datatypes.int, scope=SessionStatus, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 943, 3)))

SessionStatus._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RejectedFromMessagePartner'), pyxb.binding.datatypes.int, scope=SessionStatus, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 944, 3)))

SessionStatus._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AcceptedToMessagePartner'), pyxb.binding.datatypes.int, scope=SessionStatus, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 945, 3)))

SessionStatus._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RejectedToMessagePartner'), pyxb.binding.datatypes.int, scope=SessionStatus, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 946, 3)))

def _BuildAutomaton_34 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_34
    del _BuildAutomaton_34
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 936, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 938, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 939, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 940, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 941, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 942, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 943, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 944, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 945, 3))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 946, 3))
    counters.add(cc_9)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SessionStatus._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MessagePartner')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 933, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SessionStatus._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CreationTime')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 934, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SessionStatus._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SessionNr')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 935, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SessionStatus._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InputFile')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 936, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SessionStatus._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IsSuccess')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 937, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(SessionStatus._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ErrorCode')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 938, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(SessionStatus._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ErrorText')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 939, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(SessionStatus._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SessionDirection')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 940, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(SessionStatus._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Accepted')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 941, 3))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(SessionStatus._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Rejected')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 942, 3))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(SessionStatus._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AcceptedFromMessagePartner')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 943, 3))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(SessionStatus._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RejectedFromMessagePartner')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 944, 3))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(SessionStatus._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AcceptedToMessagePartner')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 945, 3))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(SessionStatus._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RejectedToMessagePartner')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 946, 3))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_13._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SessionStatus._Automaton = _BuildAutomaton_34()




Header._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Message'), Message, scope=Header, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 952, 3)))

Header._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TransmissionReport'), TransmissionReport, scope=Header, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 953, 3)))

Header._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeliveryNotification'), DeliveryNotification, scope=Header, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 954, 3)))

Header._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeliveryReport'), DeliveryReport, scope=Header, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 955, 3)))

Header._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'HistoryReport'), HistoryReport, scope=Header, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 956, 3)))

Header._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MessageStatus'), MessageStatus, scope=Header, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 957, 3)))

Header._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SessionStatus'), SessionStatus, scope=Header, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 958, 3)))

def _BuildAutomaton_35 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_35
    del _BuildAutomaton_35
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Header._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Message')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 952, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Header._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TransmissionReport')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 953, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Header._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeliveryNotification')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 954, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Header._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeliveryReport')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 955, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Header._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'HistoryReport')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 956, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Header._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MessageStatus')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 957, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Header._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SessionStatus')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 958, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Header._Automaton = _BuildAutomaton_35()




DataPDU_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Revision'), pyxb.binding.datatypes.string, scope=DataPDU_, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 963, 3), fixed=True, unicode_default='2.0.10'))

DataPDU_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Header'), Header, scope=DataPDU_, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 964, 3)))

DataPDU_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Body'), SwAny, scope=DataPDU_, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 965, 3)))

DataPDU_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LAU'), SwAny, scope=DataPDU_, location=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 966, 3)))

def _BuildAutomaton_36 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_36
    del _BuildAutomaton_36
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 965, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 966, 3))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataPDU_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Revision')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 963, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DataPDU_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Header')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 964, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DataPDU_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Body')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 965, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(DataPDU_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LAU')), pyxb.utils.utility.Location('C:\\Users\\E1077313\\Downloads\\saa20.xsd', 966, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DataPDU_._Automaton = _BuildAutomaton_36()



...

  Signature
# C:\Projects\XSD\Signature.py
# -*- coding: utf-8 -*-
# PyXB bindings for NM:f1c343a882e7a65fb879f4ee813309f8231f28c8
# Generated 2022-06-30 14:13:12.429492 by PyXB version 1.2.6 using Python 3.9.7.final.0
# Namespace http://www.w3.org/2000/09/xmldsig#

from __future__ import unicode_literals
import pyxb
import pyxb.binding
import pyxb.binding.saxer
import io
import pyxb.utils.utility
import pyxb.utils.domutils
import sys
import pyxb.utils.six as _six
# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:ace24650-f850-11ec-89c9-3448ed42967c')

# Version of PyXB used to generate the bindings
_PyXBVersion = '1.2.6'
# Generated bindings are not compatible across PyXB versions
if pyxb.__version__ != _PyXBVersion:
    raise pyxb.PyXBVersionError(_PyXBVersion)

# A holder for module-level binding classes so we can access them from
# inside class definitions where property names may conflict.
_module_typeBindings = pyxb.utils.utility.Object()

# Import bindings for namespaces imported into schema
import pyxb.binding.datatypes

# NOTE: All namespace declarations are reserved within the binding
Namespace = pyxb.namespace.NamespaceForURI('http://www.w3.org/2000/09/xmldsig#', create_if_missing=True)
Namespace.configureCategories(['typeBinding', 'elementBinding'])

def CreateFromDocument (xml_text, default_namespace=None, location_base=None):
    """Parse the given XML and use the document element to create a
    Python instance.

    @param xml_text An XML document.  This should be data (Python 2
    str or Python 3 bytes), or a text (Python 2 unicode or Python 3
    str) in the L{pyxb._InputEncoding} encoding.

    @keyword default_namespace The L{pyxb.Namespace} instance to use as the
    default namespace where there is no default namespace in scope.
    If unspecified or C{None}, the namespace of the module containing
    this function will be used.

    @keyword location_base: An object to be recorded as the base of all
    L{pyxb.utils.utility.Location} instances associated with events and
    objects handled by the parser.  You might pass the URI from which
    the document was obtained.
    """

    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement, default_namespace=default_namespace)
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    saxer = pyxb.binding.saxer.make_parser(fallback_namespace=default_namespace, location_base=location_base)
    handler = saxer.getContentHandler()
    xmld = xml_text
    if isinstance(xmld, _six.text_type):
        xmld = xmld.encode(pyxb._InputEncoding)
    saxer.parse(io.BytesIO(xmld))
    instance = handler.rootObject()
    return instance

def CreateFromDOM (node, default_namespace=None):
    """Create a Python instance from the given DOM node.
    The node tag must correspond to an element declaration in this module.

    @deprecated: Forcing use of DOM interface is unnecessary; use L{CreateFromDocument}."""
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return pyxb.binding.basis.element.AnyCreateFromDOM(node, default_namespace)


# Atomic simple type: {http://www.w3.org/2000/09/xmldsig#}CryptoBinary
class CryptoBinary (pyxb.binding.datatypes.base64Binary):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CryptoBinary')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 36, 0)
    _Documentation = None
CryptoBinary._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'CryptoBinary', CryptoBinary)
_module_typeBindings.CryptoBinary = CryptoBinary

# Atomic simple type: {http://www.w3.org/2000/09/xmldsig#}DigestValueType
class DigestValueType (pyxb.binding.datatypes.base64Binary):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DigestValueType')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 136, 0)
    _Documentation = None
DigestValueType._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'DigestValueType', DigestValueType)
_module_typeBindings.DigestValueType = DigestValueType

# Atomic simple type: {http://www.w3.org/2000/09/xmldsig#}HMACOutputLengthType
class HMACOutputLengthType (pyxb.binding.datatypes.integer):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'HMACOutputLengthType')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 283, 0)
    _Documentation = None
HMACOutputLengthType._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'HMACOutputLengthType', HMACOutputLengthType)
_module_typeBindings.HMACOutputLengthType = HMACOutputLengthType

# Complex type {http://www.w3.org/2000/09/xmldsig#}SignatureType with content type ELEMENT_ONLY
class SignatureType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3.org/2000/09/xmldsig#}SignatureType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SignatureType')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 44, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3.org/2000/09/xmldsig#}SignatureValue uses Python identifier SignatureValue
    __SignatureValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SignatureValue'), 'SignatureValue', '__httpwww_w3_org200009xmldsig_SignatureType_httpwww_w3_org200009xmldsigSignatureValue', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 54, 2), )

    
    SignatureValue = property(__SignatureValue.value, __SignatureValue.set, None, None)

    
    # Element {http://www.w3.org/2000/09/xmldsig#}SignedInfo uses Python identifier SignedInfo
    __SignedInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SignedInfo'), 'SignedInfo', '__httpwww_w3_org200009xmldsig_SignatureType_httpwww_w3_org200009xmldsigSignedInfo', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 65, 0), )

    
    SignedInfo = property(__SignedInfo.value, __SignedInfo.set, None, None)

    
    # Element {http://www.w3.org/2000/09/xmldsig#}KeyInfo uses Python identifier KeyInfo
    __KeyInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'KeyInfo'), 'KeyInfo', '__httpwww_w3_org200009xmldsig_SignatureType_httpwww_w3_org200009xmldsigKeyInfo', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 144, 0), )

    
    KeyInfo = property(__KeyInfo.value, __KeyInfo.set, None, None)

    
    # Element {http://www.w3.org/2000/09/xmldsig#}Object uses Python identifier Object
    __Object = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Object'), 'Object', '__httpwww_w3_org200009xmldsig_SignatureType_httpwww_w3_org200009xmldsigObject', True, pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 243, 0), )

    
    Object = property(__Object.value, __Object.set, None, None)

    
    # Attribute Id uses Python identifier Id
    __Id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Id'), 'Id', '__httpwww_w3_org200009xmldsig_SignatureType_Id', pyxb.binding.datatypes.ID)
    __Id._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 51, 2)
    __Id._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 51, 2)
    
    Id = property(__Id.value, __Id.set, None, None)

    _ElementMap.update({
        __SignatureValue.name() : __SignatureValue,
        __SignedInfo.name() : __SignedInfo,
        __KeyInfo.name() : __KeyInfo,
        __Object.name() : __Object
    })
    _AttributeMap.update({
        __Id.name() : __Id
    })
_module_typeBindings.SignatureType = SignatureType
Namespace.addCategoryObject('typeBinding', 'SignatureType', SignatureType)


# Complex type {http://www.w3.org/2000/09/xmldsig#}SignatureValueType with content type SIMPLE
class SignatureValueType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3.org/2000/09/xmldsig#}SignatureValueType with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.base64Binary
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SignatureValueType')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 55, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.base64Binary
    
    # Attribute Id uses Python identifier Id
    __Id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Id'), 'Id', '__httpwww_w3_org200009xmldsig_SignatureValueType_Id', pyxb.binding.datatypes.ID)
    __Id._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 58, 8)
    __Id._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 58, 8)
    
    Id = property(__Id.value, __Id.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Id.name() : __Id
    })
_module_typeBindings.SignatureValueType = SignatureValueType
Namespace.addCategoryObject('typeBinding', 'SignatureValueType', SignatureValueType)


# Complex type {http://www.w3.org/2000/09/xmldsig#}SignedInfoType with content type ELEMENT_ONLY
class SignedInfoType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3.org/2000/09/xmldsig#}SignedInfoType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SignedInfoType')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 66, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3.org/2000/09/xmldsig#}CanonicalizationMethod uses Python identifier CanonicalizationMethod
    __CanonicalizationMethod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CanonicalizationMethod'), 'CanonicalizationMethod', '__httpwww_w3_org200009xmldsig_SignedInfoType_httpwww_w3_org200009xmldsigCanonicalizationMethod', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 75, 2), )

    
    CanonicalizationMethod = property(__CanonicalizationMethod.value, __CanonicalizationMethod.set, None, None)

    
    # Element {http://www.w3.org/2000/09/xmldsig#}SignatureMethod uses Python identifier SignatureMethod
    __SignatureMethod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SignatureMethod'), 'SignatureMethod', '__httpwww_w3_org200009xmldsig_SignedInfoType_httpwww_w3_org200009xmldsigSignatureMethod', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 84, 2), )

    
    SignatureMethod = property(__SignatureMethod.value, __SignatureMethod.set, None, None)

    
    # Element {http://www.w3.org/2000/09/xmldsig#}Reference uses Python identifier Reference
    __Reference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Reference'), 'Reference', '__httpwww_w3_org200009xmldsig_SignedInfoType_httpwww_w3_org200009xmldsigReference', True, pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 96, 0), )

    
    Reference = property(__Reference.value, __Reference.set, None, None)

    
    # Attribute Id uses Python identifier Id
    __Id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Id'), 'Id', '__httpwww_w3_org200009xmldsig_SignedInfoType_Id', pyxb.binding.datatypes.ID)
    __Id._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 72, 2)
    __Id._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 72, 2)
    
    Id = property(__Id.value, __Id.set, None, None)

    _ElementMap.update({
        __CanonicalizationMethod.name() : __CanonicalizationMethod,
        __SignatureMethod.name() : __SignatureMethod,
        __Reference.name() : __Reference
    })
    _AttributeMap.update({
        __Id.name() : __Id
    })
_module_typeBindings.SignedInfoType = SignedInfoType
Namespace.addCategoryObject('typeBinding', 'SignedInfoType', SignedInfoType)


# Complex type {http://www.w3.org/2000/09/xmldsig#}CanonicalizationMethodType with content type MIXED
class CanonicalizationMethodType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3.org/2000/09/xmldsig#}CanonicalizationMethodType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CanonicalizationMethodType')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 76, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute Algorithm uses Python identifier Algorithm
    __Algorithm = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Algorithm'), 'Algorithm', '__httpwww_w3_org200009xmldsig_CanonicalizationMethodType_Algorithm', pyxb.binding.datatypes.anyURI, required=True)
    __Algorithm._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 81, 4)
    __Algorithm._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 81, 4)
    
    Algorithm = property(__Algorithm.value, __Algorithm.set, None, None)

    _HasWildcardElement = True
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Algorithm.name() : __Algorithm
    })
_module_typeBindings.CanonicalizationMethodType = CanonicalizationMethodType
Namespace.addCategoryObject('typeBinding', 'CanonicalizationMethodType', CanonicalizationMethodType)


# Complex type {http://www.w3.org/2000/09/xmldsig#}SignatureMethodType with content type MIXED
class SignatureMethodType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3.org/2000/09/xmldsig#}SignatureMethodType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SignatureMethodType')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 85, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3.org/2000/09/xmldsig#}HMACOutputLength uses Python identifier HMACOutputLength
    __HMACOutputLength = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'HMACOutputLength'), 'HMACOutputLength', '__httpwww_w3_org200009xmldsig_SignatureMethodType_httpwww_w3_org200009xmldsigHMACOutputLength', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 87, 6), )

    
    HMACOutputLength = property(__HMACOutputLength.value, __HMACOutputLength.set, None, None)

    
    # Attribute Algorithm uses Python identifier Algorithm
    __Algorithm = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Algorithm'), 'Algorithm', '__httpwww_w3_org200009xmldsig_SignatureMethodType_Algorithm', pyxb.binding.datatypes.anyURI, required=True)
    __Algorithm._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 91, 4)
    __Algorithm._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 91, 4)
    
    Algorithm = property(__Algorithm.value, __Algorithm.set, None, None)

    _HasWildcardElement = True
    _ElementMap.update({
        __HMACOutputLength.name() : __HMACOutputLength
    })
    _AttributeMap.update({
        __Algorithm.name() : __Algorithm
    })
_module_typeBindings.SignatureMethodType = SignatureMethodType
Namespace.addCategoryObject('typeBinding', 'SignatureMethodType', SignatureMethodType)


# Complex type {http://www.w3.org/2000/09/xmldsig#}ReferenceType with content type ELEMENT_ONLY
class ReferenceType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3.org/2000/09/xmldsig#}ReferenceType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReferenceType')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 97, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3.org/2000/09/xmldsig#}Transforms uses Python identifier Transforms
    __Transforms = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Transforms'), 'Transforms', '__httpwww_w3_org200009xmldsig_ReferenceType_httpwww_w3_org200009xmldsigTransforms', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 108, 2), )

    
    Transforms = property(__Transforms.value, __Transforms.set, None, None)

    
    # Element {http://www.w3.org/2000/09/xmldsig#}DigestMethod uses Python identifier DigestMethod
    __DigestMethod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DigestMethod'), 'DigestMethod', '__httpwww_w3_org200009xmldsig_ReferenceType_httpwww_w3_org200009xmldsigDigestMethod', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 127, 0), )

    
    DigestMethod = property(__DigestMethod.value, __DigestMethod.set, None, None)

    
    # Element {http://www.w3.org/2000/09/xmldsig#}DigestValue uses Python identifier DigestValue
    __DigestValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DigestValue'), 'DigestValue', '__httpwww_w3_org200009xmldsig_ReferenceType_httpwww_w3_org200009xmldsigDigestValue', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 135, 0), )

    
    DigestValue = property(__DigestValue.value, __DigestValue.set, None, None)

    
    # Attribute Id uses Python identifier Id
    __Id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Id'), 'Id', '__httpwww_w3_org200009xmldsig_ReferenceType_Id', pyxb.binding.datatypes.ID)
    __Id._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 103, 2)
    __Id._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 103, 2)
    
    Id = property(__Id.value, __Id.set, None, None)

    
    # Attribute URI uses Python identifier URI
    __URI = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'URI'), 'URI', '__httpwww_w3_org200009xmldsig_ReferenceType_URI', pyxb.binding.datatypes.anyURI)
    __URI._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 104, 2)
    __URI._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 104, 2)
    
    URI = property(__URI.value, __URI.set, None, None)

    
    # Attribute Type uses Python identifier Type
    __Type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Type'), 'Type', '__httpwww_w3_org200009xmldsig_ReferenceType_Type', pyxb.binding.datatypes.anyURI)
    __Type._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 105, 2)
    __Type._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 105, 2)
    
    Type = property(__Type.value, __Type.set, None, None)

    _ElementMap.update({
        __Transforms.name() : __Transforms,
        __DigestMethod.name() : __DigestMethod,
        __DigestValue.name() : __DigestValue
    })
    _AttributeMap.update({
        __Id.name() : __Id,
        __URI.name() : __URI,
        __Type.name() : __Type
    })
_module_typeBindings.ReferenceType = ReferenceType
Namespace.addCategoryObject('typeBinding', 'ReferenceType', ReferenceType)


# Complex type {http://www.w3.org/2000/09/xmldsig#}TransformsType with content type ELEMENT_ONLY
class TransformsType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3.org/2000/09/xmldsig#}TransformsType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TransformsType')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 109, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3.org/2000/09/xmldsig#}Transform uses Python identifier Transform
    __Transform = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Transform'), 'Transform', '__httpwww_w3_org200009xmldsig_TransformsType_httpwww_w3_org200009xmldsigTransform', True, pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 115, 2), )

    
    Transform = property(__Transform.value, __Transform.set, None, None)

    _ElementMap.update({
        __Transform.name() : __Transform
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.TransformsType = TransformsType
Namespace.addCategoryObject('typeBinding', 'TransformsType', TransformsType)


# Complex type {http://www.w3.org/2000/09/xmldsig#}TransformType with content type MIXED
class TransformType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3.org/2000/09/xmldsig#}TransformType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TransformType')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 116, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3.org/2000/09/xmldsig#}XPath uses Python identifier XPath
    __XPath = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'XPath'), 'XPath', '__httpwww_w3_org200009xmldsig_TransformType_httpwww_w3_org200009xmldsigXPath', True, pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 120, 6), )

    
    XPath = property(__XPath.value, __XPath.set, None, None)

    
    # Attribute Algorithm uses Python identifier Algorithm
    __Algorithm = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Algorithm'), 'Algorithm', '__httpwww_w3_org200009xmldsig_TransformType_Algorithm', pyxb.binding.datatypes.anyURI, required=True)
    __Algorithm._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 122, 4)
    __Algorithm._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 122, 4)
    
    Algorithm = property(__Algorithm.value, __Algorithm.set, None, None)

    _HasWildcardElement = True
    _ElementMap.update({
        __XPath.name() : __XPath
    })
    _AttributeMap.update({
        __Algorithm.name() : __Algorithm
    })
_module_typeBindings.TransformType = TransformType
Namespace.addCategoryObject('typeBinding', 'TransformType', TransformType)


# Complex type {http://www.w3.org/2000/09/xmldsig#}DigestMethodType with content type MIXED
class DigestMethodType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3.org/2000/09/xmldsig#}DigestMethodType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DigestMethodType')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 128, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute Algorithm uses Python identifier Algorithm
    __Algorithm = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Algorithm'), 'Algorithm', '__httpwww_w3_org200009xmldsig_DigestMethodType_Algorithm', pyxb.binding.datatypes.anyURI, required=True)
    __Algorithm._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 132, 2)
    __Algorithm._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 132, 2)
    
    Algorithm = property(__Algorithm.value, __Algorithm.set, None, None)

    _HasWildcardElement = True
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Algorithm.name() : __Algorithm
    })
_module_typeBindings.DigestMethodType = DigestMethodType
Namespace.addCategoryObject('typeBinding', 'DigestMethodType', DigestMethodType)


# Complex type {http://www.w3.org/2000/09/xmldsig#}KeyInfoType with content type MIXED
class KeyInfoType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3.org/2000/09/xmldsig#}KeyInfoType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'KeyInfoType')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 145, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3.org/2000/09/xmldsig#}KeyName uses Python identifier KeyName
    __KeyName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'KeyName'), 'KeyName', '__httpwww_w3_org200009xmldsig_KeyInfoType_httpwww_w3_org200009xmldsigKeyName', True, pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 160, 2), )

    
    KeyName = property(__KeyName.value, __KeyName.set, None, None)

    
    # Element {http://www.w3.org/2000/09/xmldsig#}MgmtData uses Python identifier MgmtData
    __MgmtData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MgmtData'), 'MgmtData', '__httpwww_w3_org200009xmldsig_KeyInfoType_httpwww_w3_org200009xmldsigMgmtData', True, pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 161, 2), )

    
    MgmtData = property(__MgmtData.value, __MgmtData.set, None, None)

    
    # Element {http://www.w3.org/2000/09/xmldsig#}KeyValue uses Python identifier KeyValue
    __KeyValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), 'KeyValue', '__httpwww_w3_org200009xmldsig_KeyInfoType_httpwww_w3_org200009xmldsigKeyValue', True, pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 163, 2), )

    
    KeyValue = property(__KeyValue.value, __KeyValue.set, None, None)

    
    # Element {http://www.w3.org/2000/09/xmldsig#}RetrievalMethod uses Python identifier RetrievalMethod
    __RetrievalMethod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RetrievalMethod'), 'RetrievalMethod', '__httpwww_w3_org200009xmldsig_KeyInfoType_httpwww_w3_org200009xmldsigRetrievalMethod', True, pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 172, 2), )

    
    RetrievalMethod = property(__RetrievalMethod.value, __RetrievalMethod.set, None, None)

    
    # Element {http://www.w3.org/2000/09/xmldsig#}X509Data uses Python identifier X509Data
    __X509Data = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'X509Data'), 'X509Data', '__httpwww_w3_org200009xmldsig_KeyInfoType_httpwww_w3_org200009xmldsigX509Data', True, pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 183, 0), )

    
    X509Data = property(__X509Data.value, __X509Data.set, None, None)

    
    # Element {http://www.w3.org/2000/09/xmldsig#}PGPData uses Python identifier PGPData
    __PGPData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PGPData'), 'PGPData', '__httpwww_w3_org200009xmldsig_KeyInfoType_httpwww_w3_org200009xmldsigPGPData', True, pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 208, 0), )

    
    PGPData = property(__PGPData.value, __PGPData.set, None, None)

    
    # Element {http://www.w3.org/2000/09/xmldsig#}SPKIData uses Python identifier SPKIData
    __SPKIData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SPKIData'), 'SPKIData', '__httpwww_w3_org200009xmldsig_KeyInfoType_httpwww_w3_org200009xmldsigSPKIData', True, pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 229, 0), )

    
    SPKIData = property(__SPKIData.value, __SPKIData.set, None, None)

    
    # Attribute Id uses Python identifier Id
    __Id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Id'), 'Id', '__httpwww_w3_org200009xmldsig_KeyInfoType_Id', pyxb.binding.datatypes.ID)
    __Id._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 157, 2)
    __Id._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 157, 2)
    
    Id = property(__Id.value, __Id.set, None, None)

    _HasWildcardElement = True
    _ElementMap.update({
        __KeyName.name() : __KeyName,
        __MgmtData.name() : __MgmtData,
        __KeyValue.name() : __KeyValue,
        __RetrievalMethod.name() : __RetrievalMethod,
        __X509Data.name() : __X509Data,
        __PGPData.name() : __PGPData,
        __SPKIData.name() : __SPKIData
    })
    _AttributeMap.update({
        __Id.name() : __Id
    })
_module_typeBindings.KeyInfoType = KeyInfoType
Namespace.addCategoryObject('typeBinding', 'KeyInfoType', KeyInfoType)


# Complex type {http://www.w3.org/2000/09/xmldsig#}KeyValueType with content type MIXED
class KeyValueType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3.org/2000/09/xmldsig#}KeyValueType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'KeyValueType')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 164, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3.org/2000/09/xmldsig#}DSAKeyValue uses Python identifier DSAKeyValue
    __DSAKeyValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DSAKeyValue'), 'DSAKeyValue', '__httpwww_w3_org200009xmldsig_KeyValueType_httpwww_w3_org200009xmldsigDSAKeyValue', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 289, 0), )

    
    DSAKeyValue = property(__DSAKeyValue.value, __DSAKeyValue.set, None, None)

    
    # Element {http://www.w3.org/2000/09/xmldsig#}RSAKeyValue uses Python identifier RSAKeyValue
    __RSAKeyValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RSAKeyValue'), 'RSAKeyValue', '__httpwww_w3_org200009xmldsig_KeyValueType_httpwww_w3_org200009xmldsigRSAKeyValue', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 306, 0), )

    
    RSAKeyValue = property(__RSAKeyValue.value, __RSAKeyValue.set, None, None)

    _HasWildcardElement = True
    _ElementMap.update({
        __DSAKeyValue.name() : __DSAKeyValue,
        __RSAKeyValue.name() : __RSAKeyValue
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.KeyValueType = KeyValueType
Namespace.addCategoryObject('typeBinding', 'KeyValueType', KeyValueType)


# Complex type {http://www.w3.org/2000/09/xmldsig#}RetrievalMethodType with content type ELEMENT_ONLY
class RetrievalMethodType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3.org/2000/09/xmldsig#}RetrievalMethodType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RetrievalMethodType')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 173, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3.org/2000/09/xmldsig#}Transforms uses Python identifier Transforms
    __Transforms = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Transforms'), 'Transforms', '__httpwww_w3_org200009xmldsig_RetrievalMethodType_httpwww_w3_org200009xmldsigTransforms', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 108, 2), )

    
    Transforms = property(__Transforms.value, __Transforms.set, None, None)

    
    # Attribute URI uses Python identifier URI
    __URI = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'URI'), 'URI', '__httpwww_w3_org200009xmldsig_RetrievalMethodType_URI', pyxb.binding.datatypes.anyURI)
    __URI._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 177, 4)
    __URI._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 177, 4)
    
    URI = property(__URI.value, __URI.set, None, None)

    
    # Attribute Type uses Python identifier Type
    __Type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Type'), 'Type', '__httpwww_w3_org200009xmldsig_RetrievalMethodType_Type', pyxb.binding.datatypes.anyURI)
    __Type._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 178, 4)
    __Type._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 178, 4)
    
    Type = property(__Type.value, __Type.set, None, None)

    _ElementMap.update({
        __Transforms.name() : __Transforms
    })
    _AttributeMap.update({
        __URI.name() : __URI,
        __Type.name() : __Type
    })
_module_typeBindings.RetrievalMethodType = RetrievalMethodType
Namespace.addCategoryObject('typeBinding', 'RetrievalMethodType', RetrievalMethodType)


# Complex type {http://www.w3.org/2000/09/xmldsig#}X509DataType with content type ELEMENT_ONLY
class X509DataType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3.org/2000/09/xmldsig#}X509DataType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'X509DataType')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 184, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3.org/2000/09/xmldsig#}X509IssuerSerial uses Python identifier X509IssuerSerial
    __X509IssuerSerial = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'X509IssuerSerial'), 'X509IssuerSerial', '__httpwww_w3_org200009xmldsig_X509DataType_httpwww_w3_org200009xmldsigX509IssuerSerial', True, pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 187, 6), )

    
    X509IssuerSerial = property(__X509IssuerSerial.value, __X509IssuerSerial.set, None, None)

    
    # Element {http://www.w3.org/2000/09/xmldsig#}X509SKI uses Python identifier X509SKI
    __X509SKI = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'X509SKI'), 'X509SKI', '__httpwww_w3_org200009xmldsig_X509DataType_httpwww_w3_org200009xmldsigX509SKI', True, pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 188, 6), )

    
    X509SKI = property(__X509SKI.value, __X509SKI.set, None, None)

    
    # Element {http://www.w3.org/2000/09/xmldsig#}X509SubjectName uses Python identifier X509SubjectName
    __X509SubjectName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'X509SubjectName'), 'X509SubjectName', '__httpwww_w3_org200009xmldsig_X509DataType_httpwww_w3_org200009xmldsigX509SubjectName', True, pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 189, 6), )

    
    X509SubjectName = property(__X509SubjectName.value, __X509SubjectName.set, None, None)

    
    # Element {http://www.w3.org/2000/09/xmldsig#}X509Certificate uses Python identifier X509Certificate
    __X509Certificate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'X509Certificate'), 'X509Certificate', '__httpwww_w3_org200009xmldsig_X509DataType_httpwww_w3_org200009xmldsigX509Certificate', True, pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 190, 6), )

    
    X509Certificate = property(__X509Certificate.value, __X509Certificate.set, None, None)

    
    # Element {http://www.w3.org/2000/09/xmldsig#}X509CRL uses Python identifier X509CRL
    __X509CRL = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'X509CRL'), 'X509CRL', '__httpwww_w3_org200009xmldsig_X509DataType_httpwww_w3_org200009xmldsigX509CRL', True, pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 191, 6), )

    
    X509CRL = property(__X509CRL.value, __X509CRL.set, None, None)

    _HasWildcardElement = True
    _ElementMap.update({
        __X509IssuerSerial.name() : __X509IssuerSerial,
        __X509SKI.name() : __X509SKI,
        __X509SubjectName.name() : __X509SubjectName,
        __X509Certificate.name() : __X509Certificate,
        __X509CRL.name() : __X509CRL
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.X509DataType = X509DataType
Namespace.addCategoryObject('typeBinding', 'X509DataType', X509DataType)


# Complex type {http://www.w3.org/2000/09/xmldsig#}X509IssuerSerialType with content type ELEMENT_ONLY
class X509IssuerSerialType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3.org/2000/09/xmldsig#}X509IssuerSerialType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'X509IssuerSerialType')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 197, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3.org/2000/09/xmldsig#}X509IssuerName uses Python identifier X509IssuerName
    __X509IssuerName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'X509IssuerName'), 'X509IssuerName', '__httpwww_w3_org200009xmldsig_X509IssuerSerialType_httpwww_w3_org200009xmldsigX509IssuerName', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 199, 4), )

    
    X509IssuerName = property(__X509IssuerName.value, __X509IssuerName.set, None, None)

    
    # Element {http://www.w3.org/2000/09/xmldsig#}X509SerialNumber uses Python identifier X509SerialNumber
    __X509SerialNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'X509SerialNumber'), 'X509SerialNumber', '__httpwww_w3_org200009xmldsig_X509IssuerSerialType_httpwww_w3_org200009xmldsigX509SerialNumber', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 200, 4), )

    
    X509SerialNumber = property(__X509SerialNumber.value, __X509SerialNumber.set, None, None)

    _ElementMap.update({
        __X509IssuerName.name() : __X509IssuerName,
        __X509SerialNumber.name() : __X509SerialNumber
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.X509IssuerSerialType = X509IssuerSerialType
Namespace.addCategoryObject('typeBinding', 'X509IssuerSerialType', X509IssuerSerialType)


# Complex type {http://www.w3.org/2000/09/xmldsig#}PGPDataType with content type ELEMENT_ONLY
class PGPDataType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3.org/2000/09/xmldsig#}PGPDataType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PGPDataType')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 209, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3.org/2000/09/xmldsig#}PGPKeyID uses Python identifier PGPKeyID
    __PGPKeyID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PGPKeyID'), 'PGPKeyID', '__httpwww_w3_org200009xmldsig_PGPDataType_httpwww_w3_org200009xmldsigPGPKeyID', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 212, 6), )

    
    PGPKeyID = property(__PGPKeyID.value, __PGPKeyID.set, None, None)

    
    # Element {http://www.w3.org/2000/09/xmldsig#}PGPKeyPacket uses Python identifier PGPKeyPacket
    __PGPKeyPacket = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PGPKeyPacket'), 'PGPKeyPacket', '__httpwww_w3_org200009xmldsig_PGPDataType_httpwww_w3_org200009xmldsigPGPKeyPacket', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 213, 6), )

    
    PGPKeyPacket = property(__PGPKeyPacket.value, __PGPKeyPacket.set, None, None)

    _HasWildcardElement = True
    _ElementMap.update({
        __PGPKeyID.name() : __PGPKeyID,
        __PGPKeyPacket.name() : __PGPKeyPacket
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.PGPDataType = PGPDataType
Namespace.addCategoryObject('typeBinding', 'PGPDataType', PGPDataType)


# Complex type {http://www.w3.org/2000/09/xmldsig#}SPKIDataType with content type ELEMENT_ONLY
class SPKIDataType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3.org/2000/09/xmldsig#}SPKIDataType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SPKIDataType')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 230, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3.org/2000/09/xmldsig#}SPKISexp uses Python identifier SPKISexp
    __SPKISexp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SPKISexp'), 'SPKISexp', '__httpwww_w3_org200009xmldsig_SPKIDataType_httpwww_w3_org200009xmldsigSPKISexp', True, pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 232, 4), )

    
    SPKISexp = property(__SPKISexp.value, __SPKISexp.set, None, None)

    _HasWildcardElement = True
    _ElementMap.update({
        __SPKISexp.name() : __SPKISexp
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.SPKIDataType = SPKIDataType
Namespace.addCategoryObject('typeBinding', 'SPKIDataType', SPKIDataType)


# Complex type {http://www.w3.org/2000/09/xmldsig#}ObjectType with content type MIXED
class ObjectType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3.org/2000/09/xmldsig#}ObjectType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ObjectType')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 244, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute Id uses Python identifier Id
    __Id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Id'), 'Id', '__httpwww_w3_org200009xmldsig_ObjectType_Id', pyxb.binding.datatypes.ID)
    __Id._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 248, 2)
    __Id._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 248, 2)
    
    Id = property(__Id.value, __Id.set, None, None)

    
    # Attribute MimeType uses Python identifier MimeType
    __MimeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'MimeType'), 'MimeType', '__httpwww_w3_org200009xmldsig_ObjectType_MimeType', pyxb.binding.datatypes.string)
    __MimeType._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 249, 2)
    __MimeType._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 249, 2)
    
    MimeType = property(__MimeType.value, __MimeType.set, None, None)

    
    # Attribute Encoding uses Python identifier Encoding
    __Encoding = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Encoding'), 'Encoding', '__httpwww_w3_org200009xmldsig_ObjectType_Encoding', pyxb.binding.datatypes.anyURI)
    __Encoding._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 250, 2)
    __Encoding._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 250, 2)
    
    Encoding = property(__Encoding.value, __Encoding.set, None, None)

    _HasWildcardElement = True
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Id.name() : __Id,
        __MimeType.name() : __MimeType,
        __Encoding.name() : __Encoding
    })
_module_typeBindings.ObjectType = ObjectType
Namespace.addCategoryObject('typeBinding', 'ObjectType', ObjectType)


# Complex type {http://www.w3.org/2000/09/xmldsig#}ManifestType with content type ELEMENT_ONLY
class ManifestType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3.org/2000/09/xmldsig#}ManifestType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ManifestType')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 254, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3.org/2000/09/xmldsig#}Reference uses Python identifier Reference
    __Reference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Reference'), 'Reference', '__httpwww_w3_org200009xmldsig_ManifestType_httpwww_w3_org200009xmldsigReference', True, pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 96, 0), )

    
    Reference = property(__Reference.value, __Reference.set, None, None)

    
    # Attribute Id uses Python identifier Id
    __Id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Id'), 'Id', '__httpwww_w3_org200009xmldsig_ManifestType_Id', pyxb.binding.datatypes.ID)
    __Id._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 258, 2)
    __Id._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 258, 2)
    
    Id = property(__Id.value, __Id.set, None, None)

    _ElementMap.update({
        __Reference.name() : __Reference
    })
    _AttributeMap.update({
        __Id.name() : __Id
    })
_module_typeBindings.ManifestType = ManifestType
Namespace.addCategoryObject('typeBinding', 'ManifestType', ManifestType)


# Complex type {http://www.w3.org/2000/09/xmldsig#}SignaturePropertiesType with content type ELEMENT_ONLY
class SignaturePropertiesType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3.org/2000/09/xmldsig#}SignaturePropertiesType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SignaturePropertiesType')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 262, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3.org/2000/09/xmldsig#}SignatureProperty uses Python identifier SignatureProperty
    __SignatureProperty = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SignatureProperty'), 'SignatureProperty', '__httpwww_w3_org200009xmldsig_SignaturePropertiesType_httpwww_w3_org200009xmldsigSignatureProperty', True, pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 269, 3), )

    
    SignatureProperty = property(__SignatureProperty.value, __SignatureProperty.set, None, None)

    
    # Attribute Id uses Python identifier Id
    __Id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Id'), 'Id', '__httpwww_w3_org200009xmldsig_SignaturePropertiesType_Id', pyxb.binding.datatypes.ID)
    __Id._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 266, 2)
    __Id._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 266, 2)
    
    Id = property(__Id.value, __Id.set, None, None)

    _ElementMap.update({
        __SignatureProperty.name() : __SignatureProperty
    })
    _AttributeMap.update({
        __Id.name() : __Id
    })
_module_typeBindings.SignaturePropertiesType = SignaturePropertiesType
Namespace.addCategoryObject('typeBinding', 'SignaturePropertiesType', SignaturePropertiesType)


# Complex type {http://www.w3.org/2000/09/xmldsig#}SignaturePropertyType with content type MIXED
class SignaturePropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3.org/2000/09/xmldsig#}SignaturePropertyType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SignaturePropertyType')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 270, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute Target uses Python identifier Target
    __Target = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Target'), 'Target', '__httpwww_w3_org200009xmldsig_SignaturePropertyType_Target', pyxb.binding.datatypes.anyURI, required=True)
    __Target._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 275, 5)
    __Target._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 275, 5)
    
    Target = property(__Target.value, __Target.set, None, None)

    
    # Attribute Id uses Python identifier Id
    __Id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Id'), 'Id', '__httpwww_w3_org200009xmldsig_SignaturePropertyType_Id', pyxb.binding.datatypes.ID)
    __Id._DeclarationLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 276, 5)
    __Id._UseLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 276, 5)
    
    Id = property(__Id.value, __Id.set, None, None)

    _HasWildcardElement = True
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Target.name() : __Target,
        __Id.name() : __Id
    })
_module_typeBindings.SignaturePropertyType = SignaturePropertyType
Namespace.addCategoryObject('typeBinding', 'SignaturePropertyType', SignaturePropertyType)


# Complex type {http://www.w3.org/2000/09/xmldsig#}DSAKeyValueType with content type ELEMENT_ONLY
class DSAKeyValueType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3.org/2000/09/xmldsig#}DSAKeyValueType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DSAKeyValueType')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 290, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3.org/2000/09/xmldsig#}P uses Python identifier P
    __P = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'P'), 'P', '__httpwww_w3_org200009xmldsig_DSAKeyValueType_httpwww_w3_org200009xmldsigP', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 293, 6), )

    
    P = property(__P.value, __P.set, None, None)

    
    # Element {http://www.w3.org/2000/09/xmldsig#}Q uses Python identifier Q
    __Q = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Q'), 'Q', '__httpwww_w3_org200009xmldsig_DSAKeyValueType_httpwww_w3_org200009xmldsigQ', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 294, 6), )

    
    Q = property(__Q.value, __Q.set, None, None)

    
    # Element {http://www.w3.org/2000/09/xmldsig#}G uses Python identifier G
    __G = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'G'), 'G', '__httpwww_w3_org200009xmldsig_DSAKeyValueType_httpwww_w3_org200009xmldsigG', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 296, 4), )

    
    G = property(__G.value, __G.set, None, None)

    
    # Element {http://www.w3.org/2000/09/xmldsig#}Y uses Python identifier Y
    __Y = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Y'), 'Y', '__httpwww_w3_org200009xmldsig_DSAKeyValueType_httpwww_w3_org200009xmldsigY', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 297, 4), )

    
    Y = property(__Y.value, __Y.set, None, None)

    
    # Element {http://www.w3.org/2000/09/xmldsig#}J uses Python identifier J
    __J = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'J'), 'J', '__httpwww_w3_org200009xmldsig_DSAKeyValueType_httpwww_w3_org200009xmldsigJ', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 298, 4), )

    
    J = property(__J.value, __J.set, None, None)

    
    # Element {http://www.w3.org/2000/09/xmldsig#}Seed uses Python identifier Seed
    __Seed = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Seed'), 'Seed', '__httpwww_w3_org200009xmldsig_DSAKeyValueType_httpwww_w3_org200009xmldsigSeed', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 300, 6), )

    
    Seed = property(__Seed.value, __Seed.set, None, None)

    
    # Element {http://www.w3.org/2000/09/xmldsig#}PgenCounter uses Python identifier PgenCounter
    __PgenCounter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PgenCounter'), 'PgenCounter', '__httpwww_w3_org200009xmldsig_DSAKeyValueType_httpwww_w3_org200009xmldsigPgenCounter', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 301, 6), )

    
    PgenCounter = property(__PgenCounter.value, __PgenCounter.set, None, None)

    _ElementMap.update({
        __P.name() : __P,
        __Q.name() : __Q,
        __G.name() : __G,
        __Y.name() : __Y,
        __J.name() : __J,
        __Seed.name() : __Seed,
        __PgenCounter.name() : __PgenCounter
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DSAKeyValueType = DSAKeyValueType
Namespace.addCategoryObject('typeBinding', 'DSAKeyValueType', DSAKeyValueType)


# Complex type {http://www.w3.org/2000/09/xmldsig#}RSAKeyValueType with content type ELEMENT_ONLY
class RSAKeyValueType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.w3.org/2000/09/xmldsig#}RSAKeyValueType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RSAKeyValueType')
    _XSDLocation = pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 307, 0)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.w3.org/2000/09/xmldsig#}Modulus uses Python identifier Modulus
    __Modulus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Modulus'), 'Modulus', '__httpwww_w3_org200009xmldsig_RSAKeyValueType_httpwww_w3_org200009xmldsigModulus', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 309, 4), )

    
    Modulus = property(__Modulus.value, __Modulus.set, None, None)

    
    # Element {http://www.w3.org/2000/09/xmldsig#}Exponent uses Python identifier Exponent
    __Exponent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Exponent'), 'Exponent', '__httpwww_w3_org200009xmldsig_RSAKeyValueType_httpwww_w3_org200009xmldsigExponent', False, pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 310, 4), )

    
    Exponent = property(__Exponent.value, __Exponent.set, None, None)

    _ElementMap.update({
        __Modulus.name() : __Modulus,
        __Exponent.name() : __Exponent
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.RSAKeyValueType = RSAKeyValueType
Namespace.addCategoryObject('typeBinding', 'RSAKeyValueType', RSAKeyValueType)


KeyName = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'KeyName'), pyxb.binding.datatypes.string, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 160, 2))
Namespace.addCategoryObject('elementBinding', KeyName.name().localName(), KeyName)

MgmtData = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MgmtData'), pyxb.binding.datatypes.string, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 161, 2))
Namespace.addCategoryObject('elementBinding', MgmtData.name().localName(), MgmtData)

Signature = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Signature'), SignatureType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 43, 0))
Namespace.addCategoryObject('elementBinding', Signature.name().localName(), Signature)

SignatureValue = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SignatureValue'), SignatureValueType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 54, 2))
Namespace.addCategoryObject('elementBinding', SignatureValue.name().localName(), SignatureValue)

SignedInfo = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SignedInfo'), SignedInfoType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 65, 0))
Namespace.addCategoryObject('elementBinding', SignedInfo.name().localName(), SignedInfo)

CanonicalizationMethod = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CanonicalizationMethod'), CanonicalizationMethodType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 75, 2))
Namespace.addCategoryObject('elementBinding', CanonicalizationMethod.name().localName(), CanonicalizationMethod)

SignatureMethod = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SignatureMethod'), SignatureMethodType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 84, 2))
Namespace.addCategoryObject('elementBinding', SignatureMethod.name().localName(), SignatureMethod)

Reference = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Reference'), ReferenceType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 96, 0))
Namespace.addCategoryObject('elementBinding', Reference.name().localName(), Reference)

Transforms = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Transforms'), TransformsType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 108, 2))
Namespace.addCategoryObject('elementBinding', Transforms.name().localName(), Transforms)

Transform = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Transform'), TransformType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 115, 2))
Namespace.addCategoryObject('elementBinding', Transform.name().localName(), Transform)

DigestMethod = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DigestMethod'), DigestMethodType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 127, 0))
Namespace.addCategoryObject('elementBinding', DigestMethod.name().localName(), DigestMethod)

DigestValue = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DigestValue'), DigestValueType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 135, 0))
Namespace.addCategoryObject('elementBinding', DigestValue.name().localName(), DigestValue)

KeyInfo = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'KeyInfo'), KeyInfoType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 144, 0))
Namespace.addCategoryObject('elementBinding', KeyInfo.name().localName(), KeyInfo)

KeyValue = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), KeyValueType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 163, 2))
Namespace.addCategoryObject('elementBinding', KeyValue.name().localName(), KeyValue)

RetrievalMethod = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RetrievalMethod'), RetrievalMethodType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 172, 2))
Namespace.addCategoryObject('elementBinding', RetrievalMethod.name().localName(), RetrievalMethod)

X509Data = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'X509Data'), X509DataType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 183, 0))
Namespace.addCategoryObject('elementBinding', X509Data.name().localName(), X509Data)

PGPData = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PGPData'), PGPDataType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 208, 0))
Namespace.addCategoryObject('elementBinding', PGPData.name().localName(), PGPData)

SPKIData = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SPKIData'), SPKIDataType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 229, 0))
Namespace.addCategoryObject('elementBinding', SPKIData.name().localName(), SPKIData)

Object = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Object'), ObjectType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 243, 0))
Namespace.addCategoryObject('elementBinding', Object.name().localName(), Object)

Manifest = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Manifest'), ManifestType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 253, 0))
Namespace.addCategoryObject('elementBinding', Manifest.name().localName(), Manifest)

SignatureProperties = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SignatureProperties'), SignaturePropertiesType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 261, 0))
Namespace.addCategoryObject('elementBinding', SignatureProperties.name().localName(), SignatureProperties)

SignatureProperty = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SignatureProperty'), SignaturePropertyType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 269, 3))
Namespace.addCategoryObject('elementBinding', SignatureProperty.name().localName(), SignatureProperty)

DSAKeyValue = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DSAKeyValue'), DSAKeyValueType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 289, 0))
Namespace.addCategoryObject('elementBinding', DSAKeyValue.name().localName(), DSAKeyValue)

RSAKeyValue = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RSAKeyValue'), RSAKeyValueType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 306, 0))
Namespace.addCategoryObject('elementBinding', RSAKeyValue.name().localName(), RSAKeyValue)



SignatureType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SignatureValue'), SignatureValueType, scope=SignatureType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 54, 2)))

SignatureType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SignedInfo'), SignedInfoType, scope=SignatureType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 65, 0)))

SignatureType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'KeyInfo'), KeyInfoType, scope=SignatureType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 144, 0)))

SignatureType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Object'), ObjectType, scope=SignatureType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 243, 0)))

def _BuildAutomaton ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton
    del _BuildAutomaton
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 48, 4))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 49, 4))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SignatureType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SignedInfo')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 46, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SignatureType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SignatureValue')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 47, 4))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SignatureType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'KeyInfo')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 48, 4))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(SignatureType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Object')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 49, 4))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SignatureType._Automaton = _BuildAutomaton()




SignedInfoType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CanonicalizationMethod'), CanonicalizationMethodType, scope=SignedInfoType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 75, 2)))

SignedInfoType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SignatureMethod'), SignatureMethodType, scope=SignedInfoType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 84, 2)))

SignedInfoType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Reference'), ReferenceType, scope=SignedInfoType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 96, 0)))

def _BuildAutomaton_ ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_
    del _BuildAutomaton_
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SignedInfoType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CanonicalizationMethod')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 68, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SignedInfoType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SignatureMethod')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 69, 4))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SignedInfoType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Reference')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 70, 4))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SignedInfoType._Automaton = _BuildAutomaton_()




def _BuildAutomaton_2 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_2
    del _BuildAutomaton_2
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 78, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.WildcardUse(pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_strict, namespace_constraint=pyxb.binding.content.Wildcard.NC_any), pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 78, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CanonicalizationMethodType._Automaton = _BuildAutomaton_2()




SignatureMethodType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'HMACOutputLength'), HMACOutputLengthType, scope=SignatureMethodType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 87, 6)))

def _BuildAutomaton_3 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_3
    del _BuildAutomaton_3
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 87, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 88, 6))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SignatureMethodType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'HMACOutputLength')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 87, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.WildcardUse(pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_strict, namespace_constraint=(pyxb.binding.content.Wildcard.NC_not, 'http://www.w3.org/2000/09/xmldsig#')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 88, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
SignatureMethodType._Automaton = _BuildAutomaton_3()




ReferenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Transforms'), TransformsType, scope=ReferenceType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 108, 2)))

ReferenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DigestMethod'), DigestMethodType, scope=ReferenceType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 127, 0)))

ReferenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DigestValue'), DigestValueType, scope=ReferenceType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 135, 0)))

def _BuildAutomaton_4 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_4
    del _BuildAutomaton_4
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 99, 4))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ReferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Transforms')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 99, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ReferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DigestMethod')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 100, 4))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ReferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DigestValue')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 101, 4))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ReferenceType._Automaton = _BuildAutomaton_4()




TransformsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Transform'), TransformType, scope=TransformsType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 115, 2)))

def _BuildAutomaton_5 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_5
    del _BuildAutomaton_5
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TransformsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Transform')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 111, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TransformsType._Automaton = _BuildAutomaton_5()




TransformType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'XPath'), pyxb.binding.datatypes.string, scope=TransformType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 120, 6)))

def _BuildAutomaton_6 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_6
    del _BuildAutomaton_6
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 117, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.WildcardUse(pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=(pyxb.binding.content.Wildcard.NC_not, 'http://www.w3.org/2000/09/xmldsig#')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 118, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TransformType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'XPath')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 120, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
TransformType._Automaton = _BuildAutomaton_6()




def _BuildAutomaton_7 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_7
    del _BuildAutomaton_7
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 130, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.WildcardUse(pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=(pyxb.binding.content.Wildcard.NC_not, 'http://www.w3.org/2000/09/xmldsig#')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 130, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
DigestMethodType._Automaton = _BuildAutomaton_7()




KeyInfoType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'KeyName'), pyxb.binding.datatypes.string, scope=KeyInfoType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 160, 2)))

KeyInfoType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MgmtData'), pyxb.binding.datatypes.string, scope=KeyInfoType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 161, 2)))

KeyInfoType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'KeyValue'), KeyValueType, scope=KeyInfoType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 163, 2)))

KeyInfoType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RetrievalMethod'), RetrievalMethodType, scope=KeyInfoType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 172, 2)))

KeyInfoType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'X509Data'), X509DataType, scope=KeyInfoType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 183, 0)))

KeyInfoType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PGPData'), PGPDataType, scope=KeyInfoType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 208, 0)))

KeyInfoType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SPKIData'), SPKIDataType, scope=KeyInfoType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 229, 0)))

def _BuildAutomaton_8 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_8
    del _BuildAutomaton_8
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(KeyInfoType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'KeyName')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 147, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(KeyInfoType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'KeyValue')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 148, 4))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(KeyInfoType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RetrievalMethod')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 149, 4))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(KeyInfoType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'X509Data')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 150, 4))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(KeyInfoType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PGPData')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 151, 4))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(KeyInfoType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SPKIData')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 152, 4))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(KeyInfoType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MgmtData')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 153, 4))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.WildcardUse(pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=(pyxb.binding.content.Wildcard.NC_not, 'http://www.w3.org/2000/09/xmldsig#')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 154, 4))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
KeyInfoType._Automaton = _BuildAutomaton_8()




KeyValueType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DSAKeyValue'), DSAKeyValueType, scope=KeyValueType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 289, 0)))

KeyValueType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RSAKeyValue'), RSAKeyValueType, scope=KeyValueType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 306, 0)))

def _BuildAutomaton_9 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_9
    del _BuildAutomaton_9
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(KeyValueType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DSAKeyValue')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 166, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(KeyValueType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RSAKeyValue')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 167, 5))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.WildcardUse(pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=(pyxb.binding.content.Wildcard.NC_not, 'http://www.w3.org/2000/09/xmldsig#')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 168, 5))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
KeyValueType._Automaton = _BuildAutomaton_9()




RetrievalMethodType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Transforms'), TransformsType, scope=RetrievalMethodType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 108, 2)))

def _BuildAutomaton_10 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_10
    del _BuildAutomaton_10
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 175, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(RetrievalMethodType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Transforms')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 175, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
RetrievalMethodType._Automaton = _BuildAutomaton_10()




X509DataType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'X509IssuerSerial'), X509IssuerSerialType, scope=X509DataType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 187, 6)))

X509DataType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'X509SKI'), pyxb.binding.datatypes.base64Binary, scope=X509DataType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 188, 6)))

X509DataType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'X509SubjectName'), pyxb.binding.datatypes.string, scope=X509DataType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 189, 6)))

X509DataType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'X509Certificate'), pyxb.binding.datatypes.base64Binary, scope=X509DataType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 190, 6)))

X509DataType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'X509CRL'), pyxb.binding.datatypes.base64Binary, scope=X509DataType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 191, 6)))

def _BuildAutomaton_11 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_11
    del _BuildAutomaton_11
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(X509DataType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'X509IssuerSerial')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 187, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(X509DataType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'X509SKI')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 188, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(X509DataType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'X509SubjectName')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 189, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(X509DataType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'X509Certificate')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 190, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(X509DataType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'X509CRL')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 191, 6))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.WildcardUse(pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=(pyxb.binding.content.Wildcard.NC_not, 'http://www.w3.org/2000/09/xmldsig#')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 192, 6))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
X509DataType._Automaton = _BuildAutomaton_11()




X509IssuerSerialType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'X509IssuerName'), pyxb.binding.datatypes.string, scope=X509IssuerSerialType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 199, 4)))

X509IssuerSerialType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'X509SerialNumber'), pyxb.binding.datatypes.integer, scope=X509IssuerSerialType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 200, 4)))

def _BuildAutomaton_12 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_12
    del _BuildAutomaton_12
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(X509IssuerSerialType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'X509IssuerName')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 199, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(X509IssuerSerialType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'X509SerialNumber')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 200, 4))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
X509IssuerSerialType._Automaton = _BuildAutomaton_12()




PGPDataType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PGPKeyID'), pyxb.binding.datatypes.base64Binary, scope=PGPDataType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 212, 6)))

PGPDataType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PGPKeyPacket'), pyxb.binding.datatypes.base64Binary, scope=PGPDataType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 213, 6)))

def _BuildAutomaton_13 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_13
    del _BuildAutomaton_13
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 213, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 214, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 219, 6))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PGPDataType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PGPKeyID')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 212, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(PGPDataType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PGPKeyPacket')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 213, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.WildcardUse(pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=(pyxb.binding.content.Wildcard.NC_not, 'http://www.w3.org/2000/09/xmldsig#')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 214, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PGPDataType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PGPKeyPacket')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 218, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.WildcardUse(pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=(pyxb.binding.content.Wildcard.NC_not, 'http://www.w3.org/2000/09/xmldsig#')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 219, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PGPDataType._Automaton = _BuildAutomaton_13()




SPKIDataType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SPKISexp'), pyxb.binding.datatypes.base64Binary, scope=SPKIDataType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 232, 4)))

def _BuildAutomaton_14 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_14
    del _BuildAutomaton_14
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 233, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SPKIDataType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SPKISexp')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 232, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.WildcardUse(pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=(pyxb.binding.content.Wildcard.NC_not, 'http://www.w3.org/2000/09/xmldsig#')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 233, 4))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SPKIDataType._Automaton = _BuildAutomaton_14()




def _BuildAutomaton_15 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_15
    del _BuildAutomaton_15
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 245, 2))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.WildcardUse(pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any), pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 246, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ObjectType._Automaton = _BuildAutomaton_15()




ManifestType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Reference'), ReferenceType, scope=ManifestType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 96, 0)))

def _BuildAutomaton_16 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_16
    del _BuildAutomaton_16
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ManifestType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Reference')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 256, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ManifestType._Automaton = _BuildAutomaton_16()




SignaturePropertiesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SignatureProperty'), SignaturePropertyType, scope=SignaturePropertiesType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 269, 3)))

def _BuildAutomaton_17 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_17
    del _BuildAutomaton_17
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SignaturePropertiesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SignatureProperty')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 264, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SignaturePropertiesType._Automaton = _BuildAutomaton_17()




def _BuildAutomaton_18 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_18
    del _BuildAutomaton_18
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.WildcardUse(pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=(pyxb.binding.content.Wildcard.NC_not, 'http://www.w3.org/2000/09/xmldsig#')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 272, 7))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SignaturePropertyType._Automaton = _BuildAutomaton_18()




DSAKeyValueType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'P'), CryptoBinary, scope=DSAKeyValueType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 293, 6)))

DSAKeyValueType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Q'), CryptoBinary, scope=DSAKeyValueType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 294, 6)))

DSAKeyValueType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'G'), CryptoBinary, scope=DSAKeyValueType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 296, 4)))

DSAKeyValueType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Y'), CryptoBinary, scope=DSAKeyValueType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 297, 4)))

DSAKeyValueType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'J'), CryptoBinary, scope=DSAKeyValueType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 298, 4)))

DSAKeyValueType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Seed'), CryptoBinary, scope=DSAKeyValueType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 300, 6)))

DSAKeyValueType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PgenCounter'), CryptoBinary, scope=DSAKeyValueType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 301, 6)))

def _BuildAutomaton_19 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_19
    del _BuildAutomaton_19
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 292, 4))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 296, 4))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 298, 4))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 299, 4))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DSAKeyValueType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'P')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 293, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DSAKeyValueType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Q')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 294, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DSAKeyValueType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'G')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 296, 4))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DSAKeyValueType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Y')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 297, 4))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(DSAKeyValueType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'J')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 298, 4))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DSAKeyValueType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Seed')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 300, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(DSAKeyValueType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PgenCounter')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 301, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DSAKeyValueType._Automaton = _BuildAutomaton_19()




RSAKeyValueType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Modulus'), CryptoBinary, scope=RSAKeyValueType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 309, 4)))

RSAKeyValueType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Exponent'), CryptoBinary, scope=RSAKeyValueType, location=pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 310, 4)))

def _BuildAutomaton_20 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_20
    del _BuildAutomaton_20
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(RSAKeyValueType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Modulus')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 309, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(RSAKeyValueType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Exponent')), pyxb.utils.utility.Location('C:\\Projects\\XSD\\Signature.xsd', 310, 4))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
RSAKeyValueType._Automaton = _BuildAutomaton_20()



...

}

decls[FUIEventHandlers] {
}

clx FBackOfficeManagerFrame [FUIEventHandlers] {
  PairingView =
  OnCreate=FMTDisplayHelpers.PopulatePairingViews
  SelectionChanged=


}

clx FSessionManagerFrame [FUIEventHandlers] {
  RegisterSwiftIconsWriter =
  OnCreate=FSwiftMLUtils.RegisterIconFromString


}

decls[FXSLTemplate] {
}

clx FObject [FXSLTemplate] {
  ahV10
<?xml version="1.0" encoding="UTF-8"?>
<!--Generated by Standards Editor (build:R1.6.0.3) on 2013 Oct 30 10:13:51, ISO 20022 version : 2004-->
<!--Copyright (c) SWIFT scrl, 2013.

 This is a licensed product, which may only be redistributed upon agreement with SWIFT scrl.

 This component is subject to the following terms of use:

 This component is provided 'AS IS'. SWIFT does not give and excludes any express or implied warranties with respect to this component such as but not limited to any guarantee as to its quality, supply or availability.

 The user  has no right, or right to authorise others, to:
	 - rent, lease, or sell this component;
	 - display publicly, distribute or otherwise provide this component;
	 - remove, alter, cover, obfuscate or cancel from view any copyright or other proprietary rights notices, marks or legends appearing in this physical medium.

Any and all rights, including title, ownership rights, copyright, trademark, patents, and any other intellectual property rights of whatever nature in this component will remain the exclusive property of SWIFT or its licensors. -->
<xs:schema xmlns="urn:swift:xsd:$ahV10" xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" targetNamespace="urn:swift:xsd:$ahV10">
    <xs:element name="AppHdr" type="ApplicationHeader"/>
    <xs:complexType name="ApplicationHeader">
        <xs:annotation>
            <xs:documentation source="Name" xml:lang="EN">ApplicationHeader</xs:documentation>
            <xs:documentation source="Definition" xml:lang="EN">The application header is the first element of the RequestPayload element. The payload contains the document which contains the business document. This may be an ISO 20022 message or a SWIFT proprietary message.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element maxOccurs="1" minOccurs="0" name="From" type="EntityIdentification">
                <xs:annotation>
                    <xs:documentation source="Name" xml:lang="EN">From</xs:documentation>
                    <xs:documentation source="Definition" xml:lang="EN">Identifies the application that has created the document.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="1" minOccurs="0" name="To" type="EntityIdentification">
                <xs:annotation>
                    <xs:documentation source="Name" xml:lang="EN">To</xs:documentation>
                    <xs:documentation source="Definition" xml:lang="EN">Identifies the receiving application for which the document is created.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="1" minOccurs="0" name="SvcName" type="Max30Text">
                <xs:annotation>
                    <xs:documentation source="Name" xml:lang="EN">ServiceName</xs:documentation>
                    <xs:documentation source="Definition" xml:lang="EN">Identifies the SWIFTNet service to which the message belongs.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="1" minOccurs="0" name="MsgName" type="Max30Text">
                <xs:annotation>
                    <xs:documentation source="Name" xml:lang="EN">MessageName</xs:documentation>
                    <xs:documentation source="Definition" xml:lang="EN">A unique structured identifier that identifies the message.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="MsgRef" type="Max30Text">
                <xs:annotation>
                    <xs:documentation source="Name" xml:lang="EN">MessageReference</xs:documentation>
                    <xs:documentation source="Definition" xml:lang="EN">The sending application defines this unique identifier for the message.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="CrDate" type="ISODateTime">
                <xs:annotation>
                    <xs:documentation source="Name" xml:lang="EN">CreationDateTime</xs:documentation>
                    <xs:documentation source="Definition" xml:lang="EN">Date and time at which the message was created.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="1" minOccurs="0" name="Dup" type="DuplicateIndication">
                <xs:annotation>
                    <xs:documentation source="Name" xml:lang="EN">Duplicate</xs:documentation>
                    <xs:documentation source="Definition" xml:lang="EN">Used when the sending application has already tried to send the document to the receiving application.</xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="DuplicateIndication">
        <xs:annotation>
            <xs:documentation source="Name" xml:lang="EN">DuplicateIndication</xs:documentation>
            <xs:documentation source="Definition" xml:lang="EN">Reference to another message indicating that the containing message is a	duplicate of the referenced message.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="Ref" type="Max30Text">
                <xs:annotation>
                    <xs:documentation source="Name" xml:lang="EN">Reference</xs:documentation>
                    <xs:documentation source="Definition" xml:lang="EN">Reference of the original message, in case this is a duplicate.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="Info" type="Max140Text">
                <xs:annotation>
                    <xs:documentation source="Name" xml:lang="EN">Justification</xs:documentation>
                    <xs:documentation source="Definition" xml:lang="EN">Information about the duplicate.</xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="EntityIdentification">
        <xs:annotation>
            <xs:documentation source="Name" xml:lang="EN">EntityIdentification</xs:documentation>
            <xs:documentation source="Definition" xml:lang="EN">Identification of a business entity, eg, corporate or financial institution.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="Type" type="Max4Text">
                <xs:annotation>
                    <xs:documentation source="Name" xml:lang="EN">Type</xs:documentation>
                    <xs:documentation source="Definition" xml:lang="EN">Type of identification, eg, BIC or URI.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="Id" type="Max30Text">
                <xs:annotation>
                    <xs:documentation source="Name" xml:lang="EN">EntityIdentifier</xs:documentation>
                    <xs:documentation source="Definition" xml:lang="EN">Actual identification of the entity.</xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>
    <xs:simpleType name="ISODateTime">
        <xs:annotation>
            <xs:documentation source="Name" xml:lang="EN">ISODateTime</xs:documentation>
            <xs:documentation source="Definition" xml:lang="EN">A particular point in the progression of time defined by a mandatory date and a mandatory time component, expressed in either UTC time format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in "XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004" which is aligned with ISO 8601.
Note on the time format:
1) beginning / end of calendar day
00:00:00 = the beginning of a calendar day
24:00:00 = the end of a calendar day
2) fractions of second in time format
Decimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:dateTime"/>
    </xs:simpleType>
    <xs:simpleType name="Max140Text">
        <xs:annotation>
            <xs:documentation source="Name" xml:lang="EN">Max140Text</xs:documentation>
            <xs:documentation source="Definition" xml:lang="EN">Specifies a character string with a maximum length of 140 characters.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:minLength value="1"/>
            <xs:maxLength value="140"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="Max30Text">
        <xs:annotation>
            <xs:documentation source="Name" xml:lang="EN">Max30Text</xs:documentation>
            <xs:documentation source="Definition" xml:lang="EN">Specifies a character string with a maximum length of 30  characters.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:maxLength value="30"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="Max4Text">
        <xs:annotation>
            <xs:documentation source="Name" xml:lang="EN">Max4Text</xs:documentation>
            <xs:documentation source="Definition" xml:lang="EN">Specifies a character string with a maximum length of 4 characters.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:minLength value="1"/>
            <xs:maxLength value="4"/>
        </xs:restriction>
    </xs:simpleType>
</xs:schema>


...

  MTx99
<?xml version="1.0" ?>
<xs:schema elementFormDefault="qualified" targetNamespace="http://www.w3schools.com" xmlns="http://www.w3schools.com" xmlns:xs="http://www.w3.org/2001/XMLSchema">
 <xs:simpleType name="MTx99_20_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([^/]([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,14}[^/])"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MTx99_20_Type">
  <xs:simpleContent>
   <xs:extension base="MTx99_20_Type_Pattern">
    <xs:attribute fixed="20" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MTx99_21_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="([^/]([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,14}[^/])"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MTx99_21_Type">
  <xs:simpleContent>
   <xs:extension base="MTx99_21_Type_Pattern">
    <xs:attribute fixed="21" name="swiftTag"/>
    <xs:attribute default="False" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:simpleType name="MTx99_79_Type_Pattern">
  <xs:restriction base="xs:string">
   <xs:pattern value="((([a-zA-Z0-9]|/|-|\?|:|\(|\)|\.|,|'|\+|\n|\s){1,48}\n?){1,35})"/>
  </xs:restriction>
 </xs:simpleType>
 <xs:complexType name="MTx99_79_Type">
  <xs:simpleContent>
   <xs:extension base="MTx99_79_Type_Pattern">
    <xs:attribute fixed="79" name="swiftTag"/>
    <xs:attribute default="True" name="isMandatory"/>
   </xs:extension>
  </xs:simpleContent>
 </xs:complexType>
 <xs:element name="MTx99">
  <xs:complexType>
   <xs:sequence>
    <xs:element name="TransactionReferenceNumber" type="MTx99_20_Type"/>
    <xs:element minOccurs="0" name="RelatedReference" type="MTx99_21_Type"/>
    <xs:element name="Narrative" type="MTx99_79_Type"/>
   </xs:sequence>
  </xs:complexType>
 </xs:element>
</xs:schema>


...

  saa20
<?xml version="1.0" encoding="utf-8"?>
<xs:schema elementFormDefault="qualified" xmlns="urn:swift:saa:xsd:saa.2.0" xmlns:xs="http://www.w3.org/2001/XMLSchema"
	targetNamespace="urn:swift:saa:xsd:saa.2.0" version="2.0.10">
	<xs:complexType name="SwAny" mixed="true">
		<xs:sequence>
			<xs:any namespace="##any" processContents="skip" minOccurs="0" maxOccurs="unbounded" />
		</xs:sequence>
	</xs:complexType>
	<xs:simpleType name="X1">
		<xs:restriction base="xs:string">
			<xs:length value="11" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="X2">
		<xs:restriction base="xs:string">
			<xs:maxLength value="20" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="X3">
		<xs:restriction base="xs:string">
			<xs:maxLength value="20" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="X4">
		<xs:restriction base="xs:string">
			<xs:maxLength value="20" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="FinancialInstitution">
		<xs:restriction base="xs:string">
			<xs:maxLength value="105" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="BranchInformation">
		<xs:restriction base="xs:string">
			<xs:maxLength value="70" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="CityName">
		<xs:restriction base="xs:string">
			<xs:maxLength value="35" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="Location">
		<xs:restriction base="xs:string">
			<xs:maxLength value="105" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="Countrycode">
		<xs:restriction base="xs:string">
			<xs:length value="2" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="Nickname">
		<xs:restriction base="xs:string">
			<xs:minLength value="1" />
			<xs:maxLength value="31" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="DN">
		<xs:restriction base="xs:string">
			<xs:minLength value="1" />
			<xs:maxLength value="100" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="BIC12">
		<xs:restriction base="xs:string">
			<xs:length value="12" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="BIC8">
		<xs:restriction base="xs:string">
			<xs:length value="8" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="RoutingPoint">
		<xs:restriction base="xs:string">
			<xs:maxLength value="20" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="MACPACValue">
		<xs:restriction base="xs:string">
			<xs:maxLength value="8" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="ChecksumValue">
		<xs:restriction base="xs:string">
			<xs:maxLength value="12" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="UserPriority">
		<xs:restriction base="xs:string">
			<xs:maxLength value="4" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="CopyService">
		<xs:restriction base="xs:string">
			<xs:maxLength value="3" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="Service">
		<xs:restriction base="xs:string">
			<xs:maxLength value="30" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="UserReference">
		<xs:restriction base="xs:string">
			<xs:maxLength value="30" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="RoutingCode">
		<xs:restriction base="xs:string">
			<xs:maxLength value="16" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="SenderReference">
		<xs:restriction base="xs:string">
			<xs:minLength value="0" />
			<xs:maxLength value="70" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="CBTReference">
		<xs:restriction base="xs:string">
			<xs:maxLength value="40" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="MessageIdentifier">
		<xs:restriction base="xs:string">
			<xs:minLength value="1" />
			<xs:maxLength value="30" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="MessageSyntaxVersion">
		<xs:restriction base="xs:string">
			<xs:maxLength value="7" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="ReleaseInfo">
		<xs:restriction base="xs:string">
			<xs:maxLength value="32" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="FinInformReleaseInfo">
		<xs:restriction base="xs:string">
			<xs:maxLength value="39" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="PCInfoForReceiver">
		<xs:restriction base="xs:string">
			<xs:maxLength value="25" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="ValidationIdentifier">
		<xs:restriction base="xs:string">
			<xs:maxLength value="8" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="CorrespondentInputReference">
		<xs:restriction base="xs:string">
			<xs:length value="28" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="TimeString">
		<xs:restriction base="xs:string">
			<xs:length value="14" />
		</xs:restriction>
	</xs:simpleType>
	
	<xs:simpleType name="InputTimeString">
		<xs:restriction base="xs:string">
			<xs:pattern value="[0-9]{14}"/>
		</xs:restriction>
	</xs:simpleType>
	
	<xs:simpleType name="FINTrailer">
		<xs:restriction base="xs:string">
			<xs:maxLength value="38" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="SWIFTNetTime">
		<xs:restriction base="xs:string">
			<xs:maxLength value="24" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="SWIFTNetReference">
		<xs:restriction base="xs:string">
			<xs:maxLength value="50" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="NRWarning">
		<xs:restriction base="xs:string">
			<xs:maxLength value="50" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="SNLEndPoint">
		<xs:restriction base="xs:string">
			<xs:maxLength value="20" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="SnFQueueName">
		<xs:restriction base="xs:string">
			<xs:maxLength value="30" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="SnFChannelName">
		<xs:restriction base="xs:string">
			<xs:maxLength value="30" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="Operator">
		<xs:restriction base="xs:string">
			<xs:maxLength value="150" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="MessagePartner">
		<xs:restriction base="xs:string">
			<xs:maxLength value="50" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="Format">
		<xs:restriction base="xs:string">
			<xs:minLength value="1" />
			<xs:maxLength value="16" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="InstanceName">
		<xs:restriction base="xs:string">
			<xs:maxLength value="50" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="UserName">
		<xs:restriction base="xs:string">
			<xs:maxLength value="50" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="Unit">
		<xs:restriction base="xs:string">
			<xs:maxLength value="50" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="RequestType">
		<xs:restriction base="xs:string">
			<xs:minLength value="1" />
			<xs:maxLength value="30" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="RequestSubtype">
		<xs:restriction base="xs:string">
			<xs:minLength value="1" />
			<xs:maxLength value="36" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="FileLogicalName">
		<xs:restriction base="xs:string">
			<xs:minLength value="1" />
			<xs:maxLength value="254" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="FileDigestValue">
		<xs:restriction base="xs:string">
			<xs:minLength value="1" />
			<xs:maxLength value="50" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="TransferRef">
		<xs:restriction base="xs:string">
			<xs:minLength value="1" />
			<xs:maxLength value="50" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="FileInfoDescription">
		<xs:restriction base="xs:string">
			<xs:minLength value="1" />
			<xs:maxLength value="256" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="AttributeValue">
		<xs:restriction base="xs:string">
			<xs:minLength value="0" />
			<xs:maxLength value="256" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="VendorName">
		<xs:restriction base="xs:string">
			<xs:minLength value="0" />
			<xs:maxLength value="8" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="ProductName">
		<xs:restriction base="xs:string">
			<xs:minLength value="0" />
			<xs:maxLength value="8" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="ProductVersion">
		<xs:restriction base="xs:string">
			<xs:minLength value="0" />
			<xs:maxLength value="8" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="DigestRef">
		<xs:restriction base="xs:string">
			<xs:minLength value="1" />
			<xs:maxLength value="128" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="DigestValue">
		<xs:restriction base="xs:string">
			<xs:minLength value="1" />
			<xs:maxLength value="50" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="CustomDigestValue">
		<xs:restriction base="xs:string">
			<xs:length value="44" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="Sumid">
		<xs:restriction base="xs:string">
			<xs:length value="16" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="MessageURI">
		<xs:restriction base="xs:string">
			<xs:minLength value="1" />
			<xs:maxLength value="256" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="FINUserHeader">
		<xs:restriction base="xs:string">
			<xs:minLength value="1" />
			<xs:maxLength value="2500" />
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="ServiceLevelAgreement">
		<xs:restriction base="xs:string">
			<xs:length value="3" />
		</xs:restriction>	
	</xs:simpleType>
	
	<xs:simpleType name="E2ETransactionReference">
		<xs:restriction base="xs:string">
			<xs:length value="36" />
		</xs:restriction>	
	</xs:simpleType>	

	<xs:simpleType name="TranslationResultDetails">
		<xs:restriction base="xs:string">
			<xs:maxLength value="16000" />
		</xs:restriction>	
	</xs:simpleType>
	
	<xs:simpleType name="MessagePropertyName">
		<xs:restriction base="xs:string">
			<xs:maxLength value="128" />
		</xs:restriction>	
	</xs:simpleType>
	
	<xs:simpleType name="MessagePropertyValue">
		<xs:restriction base="xs:string">
			<xs:maxLength value="512" />
		</xs:restriction>	
	</xs:simpleType>
	
	<!-- Enumerated types -->
	<xs:simpleType name="RoutingFunction">
		<xs:restriction base="xs:string">
			<xs:enumeration value="Route" />
			<xs:enumeration value="DisposeToRoutingStep" />
			<xs:enumeration value="DisposeToRoutingPoint" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="RoutingStep">
		<xs:restriction base="xs:string">
			<xs:enumeration value="Verify" />
			<xs:enumeration value="Authorise" />
			<xs:enumeration value="Modify" />
			<xs:enumeration value="ReadyToSend" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="ValidationLevel">
		<xs:restriction base="xs:string">
			<xs:enumeration value="None" />
			<xs:enumeration value="Minimum" />
			<xs:enumeration value="Intermediate" />
			<xs:enumeration value="Maximum" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="Priority">
		<xs:restriction base="xs:string">
			<xs:enumeration value="Normal" />
			<xs:enumeration value="Urgent" />
			<xs:enumeration value="System" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="SubFormat">
		<xs:restriction base="xs:string">
			<xs:enumeration value="Input" />
			<xs:enumeration value="Output" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="ReportingApplication">
		<xs:restriction base="xs:string">
			<xs:enumeration value="ApplicationInterface" />
			<xs:enumeration value="SWIFTNetInterface" />
			<xs:enumeration value="FINInterface" />
			<xs:enumeration value="TrafficReconciliation" />
			<xs:enumeration value="Other" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="MessageCreator">
		<xs:restriction base="xs:string">
			<xs:enumeration value="ApplicationInterface" />
			<xs:enumeration value="SWIFTNetInterface" />
			<xs:enumeration value="FINInterface" />
			<xs:enumeration value="Workstation" />
			<xs:enumeration value="Messenger" />
			<xs:enumeration value="Other" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="MessageContext">
		<xs:restriction base="xs:string">
			<xs:enumeration value="Original" />
			<xs:enumeration value="Copy" />
			<xs:enumeration value="Report" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="MessageNature">
		<xs:restriction base="xs:string">
			<xs:enumeration value="Financial" />
			<xs:enumeration value="Text" />
			<xs:enumeration value="Network" />
			<xs:enumeration value="Security" />
			<xs:enumeration value="Service" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="RMAResult">
		<xs:restriction base="xs:string">
			<xs:enumeration value="Success" />
			<xs:enumeration value="Bypassed" />
			<xs:enumeration value="NoRecord" />
			<xs:enumeration value="NotEnabled" />
			<xs:enumeration value="InvalidPeriod" />
			<xs:enumeration value="Unauthorised" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="ChecksumResult">
		<xs:restriction base="xs:string">
			<xs:enumeration value="Success" />
			<xs:enumeration value="Failed" />
			<xs:enumeration value="Bypassed" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="MACPACResult">
		<xs:restriction base="xs:string">
			<xs:enumeration value="Success" />
			<xs:enumeration value="SuccessFuture" />
			<xs:enumeration value="SuccessOld" />
			<xs:enumeration value="Bypassed" />
			<xs:enumeration value="NoKey" />
			<xs:enumeration value="Failed" />
			<xs:enumeration value="InvalidDigest" />
			<xs:enumeration value="InvalidSignerDN" />
			<xs:enumeration value="InvalidCertPolicyID" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="SignatureResult">
		<xs:restriction base="xs:string">
			<xs:enumeration value="Success" />
			<xs:enumeration value="Bypassed" />
			<xs:enumeration value="Failed" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="NRType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="SvcOpt" />
			<xs:enumeration value="SvcMand" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="Network">
		<xs:restriction base="xs:string">
			<xs:enumeration value="Application" />
			<xs:enumeration value="SWIFTNet" />
			<xs:enumeration value="FIN" />
			<xs:enumeration value="Other" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="IntvCategory">
		<xs:restriction base="xs:string">
			<xs:enumeration value="TransmissionReport" />
			<xs:enumeration value="DeliveryReport" />
			<xs:enumeration value="TransmissionResponse" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="HistoryIntvCategory">
		<xs:restriction base="xs:string">
			<xs:enumeration value="TransmissionReport" />
			<xs:enumeration value="DeliveryReport" />
			<xs:enumeration value="TransmissionResponse" />
			<xs:enumeration value="Security" />
			<xs:enumeration value="Routing" />
			<xs:enumeration value="MesgAsTransmitted" />
			<xs:enumeration value="MesgAsReceived" />
			<xs:enumeration value="MesgModified" />
			<xs:enumeration value="Other" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="MessageFields">
		<xs:restriction base="xs:string">
			<xs:enumeration value="NoOriginal" />
			<xs:enumeration value="MinimumInfo" />
			<xs:enumeration value="HeaderOnly" />
			<xs:enumeration value="HeaderAndBody" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="NetworkDeliveryStatus">
		<xs:restriction base="xs:string">
			<xs:enumeration value="NetworkAcked" />
			<xs:enumeration value="NetworkNacked" />
			<xs:enumeration value="NetworkRejectedLocally" />
			<xs:enumeration value="NetworkAborted" />
			<xs:enumeration value="NetworkTimedOut" />
			<xs:enumeration value="NetworkWaitingAck" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="ReceiverDeliveryStatus">
		<xs:restriction base="xs:string">
			<xs:enumeration value="RcvDelivered" />
			<xs:enumeration value="RcvAborted" />
			<xs:enumeration value="RcvDelayedNak" />
			<xs:enumeration value="RcvFCPReleased" />
			<xs:enumeration value="RcvOverdue" />
			<xs:enumeration value="RcvUnknown" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="FileDigestAlgorithm">
		<xs:restriction base="xs:string">
			<xs:enumeration value="SHA-1" />
			<xs:enumeration value="SHA-256" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="SessionDirection">
		<xs:restriction base="xs:string">
			<xs:enumeration value="ToMessagePartner" />
			<xs:enumeration value="FromMessagePartner" />
			<xs:enumeration value="ToAndFromMessagePartner" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="TranslatedResult">
		<xs:restriction base="xs:string">
			<xs:enumeration value="Success" />
			<xs:enumeration value="TruncationNonRef" />
			<xs:enumeration value="TruncationRef" />
			<xs:enumeration value="Failure" />
		</xs:restriction>
	</xs:simpleType>
	<!-- General Types -->
	<xs:complexType name="AddressFullName">
		<xs:sequence>
			<xs:element name="X1" type="X1" />
			<xs:element name="X2" type="X2" minOccurs="0" />
			<xs:element name="X3" type="X3" minOccurs="0" />
			<xs:element name="X4" type="X4" minOccurs="0" />
			<xs:element name="FinancialInstitution" type="FinancialInstitution" minOccurs="0" />
			<xs:element name="BranchInformation" type="BranchInformation" minOccurs="0" />
			<xs:element name="CityName" type="CityName" minOccurs="0" />
			<xs:element name="Location" type="Location" minOccurs="0" />
			<xs:element name="CountryCode" type="Countrycode" minOccurs="0" />
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="AddressInfo">
		<xs:sequence>
			<xs:choice>
				<xs:element name="BIC12" type="BIC12" />
				<xs:element name="DN" type="DN" />
				<xs:element name="Nickname" type="Nickname" />
			</xs:choice>
			<xs:element name="FullName" type="AddressFullName" minOccurs="0" />
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="Intervention">
		<xs:sequence>
			<xs:element name="IntvCategory" type="IntvCategory" />
			<xs:element name="CreationTime" type="TimeString" />
			<xs:element name="OperatorOrigin" type="Operator" />
			<xs:element name="Contents" type="SwAny" />
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="HistoryIntervention">
		<xs:sequence>
			<xs:element name="IntvCategory" type="HistoryIntvCategory" />
			<xs:element name="CreationTime" type="TimeString" />
			<xs:element name="OperatorOrigin" type="Operator" />
			<xs:element name="Text" type="xs:string" />
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="Interventions">
		<xs:sequence>
			<xs:element name="Intervention" type="Intervention" maxOccurs="unbounded" />
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="HistoryInterventions">
		<xs:sequence>
			<xs:element name="Intervention" type="HistoryIntervention" maxOccurs="unbounded" />
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="RoutingInstruction">
		<xs:sequence>
			<xs:element name="RoutingFunction" type="RoutingFunction" />
			<xs:element name="RoutingPoint" type="RoutingPoint" minOccurs="0" />
			<xs:element name="RoutingStep" type="RoutingStep" minOccurs="0" />
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="PDEPDM">
		<xs:choice maxOccurs="unbounded">
			<xs:element name="PDE" type="xs:string" />
			<xs:element name="PDM" type="xs:string" />
		</xs:choice>
	</xs:complexType>
	<xs:complexType name="Product">
		<xs:sequence>
			<xs:element name="VendorName" type="VendorName" />
			<xs:element name="ProductName" type="ProductName" />
			<xs:element name="ProductVersion" type="ProductVersion" />
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="ProductList">
		<xs:sequence>
			<xs:element name="Product" type="Product" minOccurs="0" maxOccurs="3" />
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="Digest">
		<xs:sequence>
			<xs:element name="DigestRef" type="DigestRef" minOccurs="1" />
			<xs:element name="DigestValue" type="DigestValue" minOccurs="0" />
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="DigestList">
		<xs:sequence>
			<xs:element name="Digest" type="Digest" minOccurs="1" maxOccurs="8" />
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="MessageProperty">
		<xs:sequence>
			<xs:element name="MessagePropertyName" type="MessagePropertyName" />
			<xs:element name="MessagePropertyValue" type="MessagePropertyValue" />
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="MessagePropertyList">
		<xs:sequence>
			<xs:element name="MessageProperty" type="MessageProperty" maxOccurs="unbounded" />
		</xs:sequence>
	</xs:complexType>
	<!-- Interface Info Type -->
	<xs:complexType name="InterfaceInfo">
		<xs:sequence>
			<xs:element name="UserReference" type="UserReference" minOccurs="0" />
			<xs:element name="RoutingCode" type="RoutingCode" minOccurs="0" />
			<xs:element name="ValidationLevel" type="ValidationLevel" minOccurs="0" />
			<xs:element name="IsModificationAllowed" type="xs:boolean" minOccurs="0" />
			<xs:element name="RoutingInstruction" type="RoutingInstruction" minOccurs="0" />
			<xs:element name="MessageCreator" type="MessageCreator" minOccurs="0" />
			<xs:element name="MessageContext" type="MessageContext" minOccurs="0" />
			<xs:element name="MessageNature" type="MessageNature" minOccurs="0" />
			<xs:element name="ProductInfo" type="ProductList" minOccurs="0" />
			<xs:element name="CustomDigestValue" type="CustomDigestValue" minOccurs="0" />
			<xs:element name="Sumid" type="Sumid" minOccurs="0" />
			<xs:element name="ServiceURI" type="MessageURI" minOccurs="0" />
			<xs:element name="MessageTypeURI" type="MessageURI" minOccurs="0" />
			<xs:element name="MessageProperties" type="MessagePropertyList" minOccurs="0" />
		</xs:sequence>
	</xs:complexType>
	<!-- Network Info Type -->
	<xs:complexType name="NetworkInfo">
		<xs:sequence>
			<xs:element name="Priority" type="Priority" minOccurs="0" />
			<xs:element name="IsPossibleDuplicate" type="xs:boolean" minOccurs="0" />
			<xs:element name="DuplicateHistory" type="PDEPDM" minOccurs="0" />
			<xs:element name="IsNotificationRequested" type="xs:boolean" minOccurs="0" />
			<xs:element name="Service" type="Service" minOccurs="0" />
			<xs:element name="Network" type="Network" minOccurs="0" />
			<xs:element name="SessionNr" type="xs:int" minOccurs="0" />
			<xs:element name="SeqNr" type="xs:int" minOccurs="0" />
			<xs:choice minOccurs="0">
				<xs:element name="FINNetworkInfo" type="FINNetworkInfo" />
				<xs:element name="SWIFTNetNetworkInfo" type="SWIFTNetNetworkInfo" />
			</xs:choice>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="FINNetworkInfo">
		<xs:sequence>
			<xs:element name="UserPriority" type="UserPriority" minOccurs="0" />
			<xs:element name="CopyService" type="CopyService" minOccurs="0" />
			<xs:element name="CopyCID" type="BIC8" minOccurs="0" />
			<xs:element name="MessageSyntaxVersion" type="MessageSyntaxVersion" minOccurs="0" />
			<xs:element name="IsRetrieved" type="xs:boolean" minOccurs="0" />
			<xs:element name="ReleaseInfo" type="ReleaseInfo" minOccurs="0" />
			<xs:element name="ValidationIdentifier" type="ValidationIdentifier" minOccurs="0" />
			<xs:element name="CorrespondentInputReference" type="CorrespondentInputReference" minOccurs="0" />
			<xs:element name="CorrespondentInputTime" type="TimeString" minOccurs="0" />
			<xs:element name="LocalOutputTime" type="TimeString" minOccurs="0" />
			<xs:element name="SystemOriginated" type="FINTrailer" minOccurs="0" />
			<xs:element name="DelayedMessage" type="FINTrailer" minOccurs="0" />
			<xs:element name="FINUserHeader" type="FINUserHeader" minOccurs="0" />
			<xs:element name="ServiceLevelAgreement" type="ServiceLevelAgreement" minOccurs="0" />
			<xs:element name="E2ETransactionReference" type="E2ETransactionReference" minOccurs="0" />
			<xs:element name="FinInformReleaseInfo" type="FinInformReleaseInfo" minOccurs="0" />
			<xs:element name="PCInfoForReceiver" type="PCInfoForReceiver" minOccurs="0" />
			<xs:element name="TranslatedResult" type="TranslatedResult" minOccurs="0" />
			<xs:element name="TranslationResultDetails" type="TranslationResultDetails" minOccurs="0" />
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="PayloadAttribute">
		<xs:sequence>
			<xs:element name="Name" type="xs:NCName" />
			<xs:element name="Value" type="AttributeValue" />
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="PayloadAttributeList">
		<xs:sequence>
			<xs:element name="PayloadAttribute" type="PayloadAttribute" minOccurs="0" maxOccurs="3" />
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="RecipientListType">
		<xs:sequence>
			<xs:element name="RecipientDN" type="xs:string" minOccurs="1" maxOccurs="1000"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="ThirdPartyListType">
		<xs:sequence>
			<xs:element name="ThirdPartyDN" type="xs:string" minOccurs="1" maxOccurs="30"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="DistributionInfo">
		<xs:sequence>
			<xs:element name="RecipientDNList" type="RecipientListType"/>
			<xs:element name="OrigSnFRef" type="xs:string"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="SWIFTNetNetworkInfo">
		<xs:sequence>
			<xs:element name="RequestType" type="RequestType" minOccurs="0" />
			<xs:element name="RequestSubtype" type="RequestSubtype" minOccurs="0" />
			<xs:element name="SWIFTRef" type="SWIFTNetReference" minOccurs="0" />
			<xs:element name="SNLRef" type="SWIFTNetReference" minOccurs="0" />
			<xs:element name="Reference" type="CBTReference" minOccurs="0" />
			<xs:element name="SNLEndPoint" type="SNLEndPoint" minOccurs="0" />
			<xs:element name="SnFQueueName" type="SnFQueueName" minOccurs="0" />
			<xs:element name="SnFChannelName" type="SnFQueueName" minOccurs="0" />
			<xs:element name="SnFInputTime" type="SWIFTNetTime" minOccurs="0" />
			<xs:element name="SnFDeliveryTime" type="SWIFTNetTime" minOccurs="0" />
			<xs:element name="CreationTime" type="SWIFTNetTime" minOccurs="0" />
			<xs:element name="ValidationDescriptor" type="SwAny" minOccurs="0" />
			<xs:element name="ResponseResponderDN" type="DN" minOccurs="0" />
			<xs:element name="ResponseSWIFTRef" type="SWIFTNetReference" minOccurs="0" />
			<xs:element name="ResponseSNLRef" type="SWIFTNetReference" minOccurs="0" />
			<xs:element name="ResponseReference" type="CBTReference" minOccurs="0" />
			<xs:element name="IsPossibleDuplicateResponse" type="xs:boolean" minOccurs="0" />
			<xs:element name="ResponseValidationDescriptor" type="SwAny" minOccurs="0" />
			<xs:element name="PayloadAttributes" type="PayloadAttributeList" minOccurs="0" />
			<xs:element name="ResponsePayloadAttributes" type="PayloadAttributeList" minOccurs="0" />
			<xs:element name="IsCopyRequested" type="xs:boolean" minOccurs="0" />
			<xs:element name="IsAuthNotificationRequested" type="xs:boolean" minOccurs="0" />
			<xs:element name="CopyInfo" type="SwAny" minOccurs="0" />
			<xs:element name="TransferRef" type="TransferRef" minOccurs="0" />
			<xs:element name="StoredTransferRef" type="TransferRef" minOccurs="0" />
			<xs:element name="OrigSnfRef" type="SWIFTNetReference" minOccurs="0" />
			<xs:element name="TransferDescription" type="FileInfoDescription" minOccurs="0" />
			<xs:element name="TransferInfo" type="FileInfoDescription" minOccurs="0" />
			<xs:element name="FileDescription" type="FileInfoDescription" minOccurs="0" />
			<xs:element name="FileInfo" type="FileInfoDescription" minOccurs="0" />
			<xs:element name="HeaderInfo" type="SwAny" minOccurs="0" />
			<xs:element name="NotificationResponderDN" type="DN" minOccurs="0" />
			<xs:element name="NotificationRequestType" type="RequestType" minOccurs="0" />
			<xs:element name="FileStartTime" type="TimeString" minOccurs="0" />
			<xs:element name="FileEndTime" type="TimeString" minOccurs="0" />
			<xs:element name="OverdueWarningTime" type="SWIFTNetTime" minOccurs="0" />
			<xs:element name="OverdueWarningDelay" type="xs:int" minOccurs="0" />
			<xs:element name="RecipientList" type="RecipientListType" minOccurs="0"/>
			<xs:element name="ThirdPartyList" type="ThirdPartyListType" minOccurs="0"/>
			<xs:element name="IsRecipientListPublic" type="xs:boolean" minOccurs="0"/>
			<xs:element name="DistributionInfo" type="DistributionInfo" minOccurs="0"/>
			<xs:element name="RetrievalInfo" type="SwAny" minOccurs="0"/>
			<xs:element name="RequestE2EControl" type="SwAny" minOccurs="0"/>
			<xs:element name="RetrievalDescriptor" type="SwAny" minOccurs="0"/>
		</xs:sequence>
	</xs:complexType>
	<!-- Security Info Types -->
	<xs:complexType name="SecurityInfo">
		<xs:sequence>
			<xs:element name="IsSigningRequested" type="xs:boolean" minOccurs="0" />
			<xs:element name="RMAResult" type="RMAResult" minOccurs="0" />
			<xs:element name="RMAChecked" type="xs:boolean" minOccurs="0" />
			<xs:choice minOccurs="0">
				<xs:element name="FINSecurityInfo" type="FINSecurityInfo" />
				<xs:element name="SWIFTNetSecurityInfo" type="SWIFTNetSecurityInfo" />
			</xs:choice>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="FINSecurityInfo">
		<xs:sequence>
			<xs:element name="ChecksumResult" type="ChecksumResult" minOccurs="0" />
			<xs:element name="ChecksumValue" type="ChecksumValue" minOccurs="0" />
			<xs:element name="PACResult" type="MACPACResult" minOccurs="0" />
			<xs:element name="PACValue" type="MACPACValue" minOccurs="0" />
			<xs:element name="MACResult" type="MACPACResult" minOccurs="0" />
			<xs:element name="MACValue" type="MACPACValue" minOccurs="0" />
			<xs:element name="MACSignatureValue" type="SwAny" minOccurs="0" />
			<xs:element name="PAC2SignatureValue" type="SwAny" minOccurs="0" />
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="SWIFTNetSecurityInfo">
		<xs:sequence>
			<xs:element name="IsNRRequested" type="xs:boolean" minOccurs="0" />
			<xs:element name="SignerDN" type="DN" minOccurs="0" />
			<xs:element name="NRType" type="NRType" minOccurs="0" />
			<xs:element name="NRWarning" type="NRWarning" minOccurs="0" />
			<xs:element name="SignatureResult" type="SignatureResult" minOccurs="0" />
			<xs:element name="SignatureValue" type="SwAny" minOccurs="0" />
			<xs:element name="ResponseNRType" type="NRType" minOccurs="0" />
			<xs:element name="ResponseNRWarning" type="NRWarning" minOccurs="0" />
			<xs:element name="ResponseSignatureResult" type="SignatureResult" minOccurs="0" />
			<xs:element name="ResponseSignatureValue" type="SwAny" minOccurs="0" />
			<xs:element name="FileDigestAlgorithm" type="FileDigestAlgorithm" minOccurs="0" />
			<xs:element name="FileDigestValue" type="FileDigestValue" minOccurs="0" />
			<xs:element name="DigestList" type="DigestList" minOccurs="0" />
			<xs:element name="ThirdPartySignerDN" type="DN" minOccurs="0" />
		</xs:sequence>
	</xs:complexType>
	<!-- SAA Info Type -->
	<xs:complexType name="SAAInfo">
		<xs:sequence>
			<xs:element name="InstanceName" type="InstanceName" />
			<xs:element name="UserName" type="UserName" />
			<xs:element name="Unit" type="Unit" />
		</xs:sequence>
	</xs:complexType>
	<!-- Delivery Notification Type -->
	<xs:complexType name="DeliveryNotification">
		<xs:sequence>
			<xs:element name="ReconciliationInfo" type="SenderReference" />
			<xs:element name="ReceiverDeliveryStatus" type="ReceiverDeliveryStatus" />
			<xs:element name="MessageIdentifier" type="MessageIdentifier" />
			<xs:element name="Receiver" type="AddressInfo" minOccurs="0" />
			<xs:element name="InterfaceInfo" type="InterfaceInfo" minOccurs="0" />
			<xs:element name="NetworkInfo" type="NetworkInfo" minOccurs="0" />
			<xs:element name="SecurityInfo" type="SecurityInfo" minOccurs="0" />
			<xs:element name="SAAInfo" type="SAAInfo" minOccurs="0" />
		</xs:sequence>
	</xs:complexType>
	<!-- Message Type -->
	<xs:complexType name="Message">
		<xs:sequence>
			<xs:element name="SenderReference" type="SenderReference" />
			<xs:element name="MessageIdentifier" type="MessageIdentifier" />
			<xs:element name="Format" type="Format" />
			<xs:element name="SubFormat" type="SubFormat" minOccurs="0" />
			<xs:element name="Sender" type="AddressInfo" />
			<xs:element name="Receiver" type="AddressInfo" />
			<xs:element name="InterfaceInfo" type="InterfaceInfo" minOccurs="0" />
			<xs:element name="NetworkInfo" type="NetworkInfo" minOccurs="0" />
			<xs:element name="SecurityInfo" type="SecurityInfo" minOccurs="0" />
			<xs:element name="SAAInfo" type="SAAInfo" minOccurs="0" />
			<xs:element name="FileLogicalName" type="FileLogicalName" minOccurs="0" />
			<xs:element name="ExpiryDateTime" type="InputTimeString" minOccurs="0" />
		</xs:sequence>
	</xs:complexType>
	<!-- Report Types -->
	<xs:complexType name="HistoryReport">
		<xs:sequence>
			<xs:element name="SenderReference" type="SenderReference" />
			<xs:element name="OriginalInstanceAddressee" type="AddressFullName" />
			<xs:element name="ReportingApplication" type="ReportingApplication" />
			<xs:element name="SAAInfo" type="SAAInfo" minOccurs="0" />
			<xs:element name="Interventions" type="HistoryInterventions" />
			<xs:element name="IsRelatedInstanceOriginal" type="xs:boolean" />
			<xs:element name="RelatedInstanceAddressee" type="AddressFullName" minOccurs="0" />
			<xs:element name="MessageCreator" type="MessageCreator" />
			<xs:element name="IsMessageModified" type="xs:boolean" />
			<xs:element name="MessageFields" type="MessageFields" />
			<xs:element name="Message" type="Message" minOccurs="0" />
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="TransmissionReport">
		<xs:sequence>
			<xs:element name="SenderReference" type="SenderReference" />
			<xs:element name="ReconciliationInfo" type="SenderReference" minOccurs="0" />
			<xs:element name="NetworkDeliveryStatus" type="NetworkDeliveryStatus" />
			<xs:element name="OriginalInstanceAddressee" type="AddressFullName" />
			<xs:element name="ReportingApplication" type="ReportingApplication" />
			<xs:element name="NetworkInfo" type="NetworkInfo" />
			<xs:element name="SAAInfo" type="SAAInfo" minOccurs="0" />
			<xs:element name="Interventions" type="Interventions" />
			<xs:element name="IsRelatedInstanceOriginal" type="xs:boolean" />
			<xs:element name="RelatedInstanceAddressee" type="AddressFullName" minOccurs="0" />
			<xs:element name="MessageCreator" type="MessageCreator" />
			<xs:element name="IsMessageModified" type="xs:boolean" />
			<xs:element name="MessageFields" type="MessageFields" />
			<xs:element name="Message" type="Message" minOccurs="0" />
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="DeliveryReport">
		<xs:sequence>
			<xs:element name="SenderReference" type="SenderReference" />
			<xs:element name="ReceiverDeliveryStatus" type="ReceiverDeliveryStatus" />
			<xs:element name="OriginalInstanceAddressee" type="AddressFullName" />
			<xs:element name="ReportingApplication" type="ReportingApplication" />
			<xs:element name="NetworkInfo" type="NetworkInfo" />
			<xs:element name="SAAInfo" type="SAAInfo" minOccurs="0" />
			<xs:element name="Interventions" type="Interventions" />
			<xs:element name="IsRelatedInstanceOriginal" type="xs:boolean" />
			<xs:element name="RelatedInstanceAddressee" type="AddressFullName" minOccurs="0" />
			<xs:element name="MessageCreator" type="MessageCreator" />
			<xs:element name="IsMessageModified" type="xs:boolean" />
			<xs:element name="MessageFields" type="MessageFields" />
			<xs:element name="Message" type="Message" minOccurs="0" />
		</xs:sequence>
	</xs:complexType>
	<!-- Status Report Types -->
	<xs:complexType name="MessageStatus">
		<xs:sequence>
			<xs:element name="SenderReference" type="SenderReference" />
			<xs:element name="SeqNr" type="xs:int" minOccurs="0" />
			<xs:element name="IsSuccess" type="xs:boolean" />
			<xs:element name="ErrorCode" type="xs:string" minOccurs="0" />
			<xs:element name="ErrorText" type="xs:string" minOccurs="0" />
			<xs:element name="SAAInfo" type="SAAInfo" minOccurs="0" />
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="SessionStatus">
		<xs:sequence>
			<xs:element name="MessagePartner" type="MessagePartner" />
			<xs:element name="CreationTime" type="TimeString" />
			<xs:element name="SessionNr" type="xs:int" />
			<xs:element name="InputFile" type="xs:string" minOccurs="0" />
			<xs:element name="IsSuccess" type="xs:boolean" />
			<xs:element name="ErrorCode" type="xs:string" minOccurs="0" />
			<xs:element name="ErrorText" type="xs:string" minOccurs="0" />
			<xs:element name="SessionDirection" type="SessionDirection" minOccurs="0" />
			<xs:element name="Accepted" type="xs:int" minOccurs="0" />
			<xs:element name="Rejected" type="xs:int" minOccurs="0" />
			<xs:element name="AcceptedFromMessagePartner" type="xs:int" minOccurs="0" />
			<xs:element name="RejectedFromMessagePartner" type="xs:int" minOccurs="0" />
			<xs:element name="AcceptedToMessagePartner" type="xs:int" minOccurs="0" />
			<xs:element name="RejectedToMessagePartner" type="xs:int" minOccurs="0" />
		</xs:sequence>
	</xs:complexType>
	<!-- DataPDU & Header -->
	<xs:complexType name="Header">
		<xs:choice>
			<xs:element name="Message" type="Message" />
			<xs:element name="TransmissionReport" type="TransmissionReport" />
			<xs:element name="DeliveryNotification" type="DeliveryNotification" />
			<xs:element name="DeliveryReport" type="DeliveryReport" />
			<xs:element name="HistoryReport" type="HistoryReport" />
			<xs:element name="MessageStatus" type="MessageStatus" />
			<xs:element name="SessionStatus" type="SessionStatus" />
		</xs:choice>
	</xs:complexType>
	<xs:complexType name="DataPDU">
		<xs:sequence>
			<xs:element name="Revision" type="xs:string" fixed="2.0.10" />
			<xs:element name="Header" type="Header" />
			<xs:element name="Body" type="SwAny" minOccurs="0" />
			<xs:element name="LAU" type="SwAny" minOccurs="0" />
		</xs:sequence>
	</xs:complexType>
	<!-- Root element -->
	<xs:element name="DataPDU" type="DataPDU"></xs:element>
</xs:schema>


...

  Signature
<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE schema
  PUBLIC "-//W3C//DTD XMLSchema 200102//EN" "http://www.w3.org/2001/XMLSchema.dtd"
 [
   <!ATTLIST schema 
     xmlns:ds CDATA #FIXED "http://www.w3.org/2000/09/xmldsig#">
   <!ENTITY dsig 'http://www.w3.org/2000/09/xmldsig#'>
   <!ENTITY % p ''>
   <!ENTITY % s ''>
  ]>

<!-- Schema for XML Signatures
    http://www.w3.org/2000/09/xmldsig#
    $Revision: 1.1 $ on $Date: 2002/02/08 20:32:26 $ by $Author: reagle $

    Copyright 2001 The Internet Society and W3C (Massachusetts Institute
    of Technology, Institut National de Recherche en Informatique et en
    Automatique, Keio University). All Rights Reserved.
    http://www.w3.org/Consortium/Legal/

    This document is governed by the W3C Software License [1] as described
    in the FAQ [2].

    [1] http://www.w3.org/Consortium/Legal/copyright-software-19980720
    [2] http://www.w3.org/Consortium/Legal/IPR-FAQ-20000620.html#DTD
-->


<schema xmlns="http://www.w3.org/2001/XMLSchema"
        xmlns:ds="http://www.w3.org/2000/09/xmldsig#"
        targetNamespace="http://www.w3.org/2000/09/xmldsig#"
        version="0.1" elementFormDefault="qualified"> 

<!-- Basic Types Defined for Signatures -->

<simpleType name="CryptoBinary">
  <restriction base="base64Binary">
  </restriction>
</simpleType>

<!-- Start Signature -->

<element name="Signature" type="ds:SignatureType"/>
<complexType name="SignatureType">
  <sequence> 
    <element ref="ds:SignedInfo"/> 
    <element ref="ds:SignatureValue"/> 
    <element ref="ds:KeyInfo" minOccurs="0"/> 
    <element ref="ds:Object" minOccurs="0" maxOccurs="unbounded"/> 
  </sequence>  
  <attribute name="Id" type="ID" use="optional"/>
</complexType>

  <element name="SignatureValue" type="ds:SignatureValueType"/> 
  <complexType name="SignatureValueType">
    <simpleContent>
      <extension base="base64Binary">
        <attribute name="Id" type="ID" use="optional"/>
      </extension>
    </simpleContent>
  </complexType>

<!-- Start SignedInfo -->

<element name="SignedInfo" type="ds:SignedInfoType"/>
<complexType name="SignedInfoType">
  <sequence> 
    <element ref="ds:CanonicalizationMethod"/> 
    <element ref="ds:SignatureMethod"/> 
    <element ref="ds:Reference" maxOccurs="unbounded"/> 
  </sequence>  
  <attribute name="Id" type="ID" use="optional"/> 
</complexType>

  <element name="CanonicalizationMethod" type="ds:CanonicalizationMethodType"/> 
  <complexType name="CanonicalizationMethodType" mixed="true">
    <sequence>
      <any namespace="##any" minOccurs="0" maxOccurs="unbounded"/>
      <!-- (0,unbounded) elements from (1,1) namespace -->
    </sequence>
    <attribute name="Algorithm" type="anyURI" use="required"/> 
  </complexType>

  <element name="SignatureMethod" type="ds:SignatureMethodType"/>
  <complexType name="SignatureMethodType" mixed="true">
    <sequence>
      <element name="HMACOutputLength" minOccurs="0" type="ds:HMACOutputLengthType"/>
      <any namespace="##other" minOccurs="0" maxOccurs="unbounded"/>
      <!-- (0,unbounded) elements from (1,1) external namespace -->
    </sequence>
    <attribute name="Algorithm" type="anyURI" use="required"/> 
  </complexType>

<!-- Start Reference -->

<element name="Reference" type="ds:ReferenceType"/>
<complexType name="ReferenceType">
  <sequence> 
    <element ref="ds:Transforms" minOccurs="0"/> 
    <element ref="ds:DigestMethod"/> 
    <element ref="ds:DigestValue"/> 
  </sequence>
  <attribute name="Id" type="ID" use="optional"/> 
  <attribute name="URI" type="anyURI" use="optional"/> 
  <attribute name="Type" type="anyURI" use="optional"/> 
</complexType>

  <element name="Transforms" type="ds:TransformsType"/>
  <complexType name="TransformsType">
    <sequence>
      <element ref="ds:Transform" maxOccurs="unbounded"/>  
    </sequence>
  </complexType>

  <element name="Transform" type="ds:TransformType"/>
  <complexType name="TransformType" mixed="true">
    <choice minOccurs="0" maxOccurs="unbounded"> 
      <any namespace="##other" processContents="lax"/>
      <!-- (1,1) elements from (0,unbounded) namespaces -->
      <element name="XPath" type="string"/> 
    </choice>
    <attribute name="Algorithm" type="anyURI" use="required"/> 
  </complexType>

<!-- End Reference -->

<element name="DigestMethod" type="ds:DigestMethodType"/>
<complexType name="DigestMethodType" mixed="true"> 
  <sequence>
    <any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
  </sequence>    
  <attribute name="Algorithm" type="anyURI" use="required"/> 
</complexType>

<element name="DigestValue" type="ds:DigestValueType"/>
<simpleType name="DigestValueType">
  <restriction base="base64Binary"/>
</simpleType>

<!-- End SignedInfo -->

<!-- Start KeyInfo -->

<element name="KeyInfo" type="ds:KeyInfoType"/> 
<complexType name="KeyInfoType" mixed="true">
  <choice maxOccurs="unbounded">     
    <element ref="ds:KeyName"/> 
    <element ref="ds:KeyValue"/> 
    <element ref="ds:RetrievalMethod"/> 
    <element ref="ds:X509Data"/> 
    <element ref="ds:PGPData"/> 
    <element ref="ds:SPKIData"/>
    <element ref="ds:MgmtData"/>
    <any processContents="lax" namespace="##other"/>
    <!-- (1,1) elements from (0,unbounded) namespaces -->
  </choice>
  <attribute name="Id" type="ID" use="optional"/> 
</complexType>

  <element name="KeyName" type="string"/>
  <element name="MgmtData" type="string"/>

  <element name="KeyValue" type="ds:KeyValueType"/> 
  <complexType name="KeyValueType" mixed="true">
   <choice>
     <element ref="ds:DSAKeyValue"/>
     <element ref="ds:RSAKeyValue"/>
     <any namespace="##other" processContents="lax"/>
   </choice>
  </complexType>

  <element name="RetrievalMethod" type="ds:RetrievalMethodType"/> 
  <complexType name="RetrievalMethodType">
    <sequence>
      <element ref="ds:Transforms" minOccurs="0"/> 
    </sequence>  
    <attribute name="URI" type="anyURI"/>
    <attribute name="Type" type="anyURI" use="optional"/>
  </complexType>

<!-- Start X509Data -->

<element name="X509Data" type="ds:X509DataType"/> 
<complexType name="X509DataType">
  <sequence maxOccurs="unbounded">
    <choice>
      <element name="X509IssuerSerial" type="ds:X509IssuerSerialType"/>
      <element name="X509SKI" type="base64Binary"/>
      <element name="X509SubjectName" type="string"/>
      <element name="X509Certificate" type="base64Binary"/>
      <element name="X509CRL" type="base64Binary"/>
      <any namespace="##other" processContents="lax"/>
    </choice>
  </sequence>
</complexType>

<complexType name="X509IssuerSerialType"> 
  <sequence> 
    <element name="X509IssuerName" type="string"/> 
    <element name="X509SerialNumber" type="integer"/> 
  </sequence>
</complexType>

<!-- End X509Data -->

<!-- Begin PGPData -->

<element name="PGPData" type="ds:PGPDataType"/> 
<complexType name="PGPDataType"> 
  <choice>
    <sequence>
      <element name="PGPKeyID" type="base64Binary"/> 
      <element name="PGPKeyPacket" type="base64Binary" minOccurs="0"/> 
      <any namespace="##other" processContents="lax" minOccurs="0"
       maxOccurs="unbounded"/>
    </sequence>
    <sequence>
      <element name="PGPKeyPacket" type="base64Binary"/> 
      <any namespace="##other" processContents="lax" minOccurs="0"
       maxOccurs="unbounded"/>
    </sequence>
  </choice>
</complexType>

<!-- End PGPData -->

<!-- Begin SPKIData -->

<element name="SPKIData" type="ds:SPKIDataType"/> 
<complexType name="SPKIDataType">
  <sequence maxOccurs="unbounded">
    <element name="SPKISexp" type="base64Binary"/>
    <any namespace="##other" processContents="lax" minOccurs="0"/>
  </sequence>
</complexType> 

<!-- End SPKIData -->

<!-- End KeyInfo -->

<!-- Start Object (Manifest, SignatureProperty) -->

<element name="Object" type="ds:ObjectType"/> 
<complexType name="ObjectType" mixed="true">
  <sequence minOccurs="0" maxOccurs="unbounded">
    <any namespace="##any" processContents="lax"/>
  </sequence>
  <attribute name="Id" type="ID" use="optional"/> 
  <attribute name="MimeType" type="string" use="optional"/> <!-- add a grep facet -->
  <attribute name="Encoding" type="anyURI" use="optional"/> 
</complexType>

<element name="Manifest" type="ds:ManifestType"/> 
<complexType name="ManifestType">
  <sequence>
    <element ref="ds:Reference" maxOccurs="unbounded"/> 
  </sequence>
  <attribute name="Id" type="ID" use="optional"/> 
</complexType>

<element name="SignatureProperties" type="ds:SignaturePropertiesType"/> 
<complexType name="SignaturePropertiesType">
  <sequence>
    <element ref="ds:SignatureProperty" maxOccurs="unbounded"/> 
  </sequence>
  <attribute name="Id" type="ID" use="optional"/> 
</complexType>

   <element name="SignatureProperty" type="ds:SignaturePropertyType"/> 
   <complexType name="SignaturePropertyType" mixed="true">
     <choice maxOccurs="unbounded">
       <any namespace="##other" processContents="lax"/>
       <!-- (1,1) elements from (1,unbounded) namespaces -->
     </choice>
     <attribute name="Target" type="anyURI" use="required"/> 
     <attribute name="Id" type="ID" use="optional"/> 
   </complexType>

<!-- End Object (Manifest, SignatureProperty) -->

<!-- Start Algorithm Parameters -->

<simpleType name="HMACOutputLengthType">
  <restriction base="integer"/>
</simpleType>

<!-- Start KeyValue Element-types -->

<element name="DSAKeyValue" type="ds:DSAKeyValueType"/>
<complexType name="DSAKeyValueType">
  <sequence>
    <sequence minOccurs="0">
      <element name="P" type="ds:CryptoBinary"/>
      <element name="Q" type="ds:CryptoBinary"/>
    </sequence>
    <element name="G" type="ds:CryptoBinary" minOccurs="0"/>
    <element name="Y" type="ds:CryptoBinary"/>
    <element name="J" type="ds:CryptoBinary" minOccurs="0"/>
    <sequence minOccurs="0">
      <element name="Seed" type="ds:CryptoBinary"/>
      <element name="PgenCounter" type="ds:CryptoBinary"/>
    </sequence>
  </sequence>
</complexType>

<element name="RSAKeyValue" type="ds:RSAKeyValueType"/>
<complexType name="RSAKeyValueType">
  <sequence>
    <element name="Modulus" type="ds:CryptoBinary"/> 
    <element name="Exponent" type="ds:CryptoBinary"/> 
  </sequence>
</complexType> 

<!-- End KeyValue Element-types -->

<!-- End Signature -->

</schema>


...

}

