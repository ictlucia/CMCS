#
# Front Arena exported extension module.
# source          ""
# timestamp (utc) "2023-02-02 11:10:03.7"
# ***** DO NOT EDIT! *****
#
name        "FSwiftInstaller"
description ""

groups {
}

decls[FParameters] {
}

clx FObject [FParameters] {
  FSwiftInstallerConfig =
  ExecutedInitialDataPrepFor=[]
  Version=3.6.3-0.5.6048


  FSwiftInstallerNotifyConfig =
  LogLevel=INFO #INFO, DEBUG, ERROR, WARN
  NotificationLevel=TRACK #TRACK, DEBUG, WARNING, ERROR, SUCCESS
  NotificationMedia=OFF #OFF, PRIME_LOG, PRIME_LOG_TRANSIENT
  NotifyUser=


}

decls[FPythonCode] {
}

clx FObject [FPythonCode] {
  FSwiftCashConfirmationIn_DataPrep_Part1
"""----------------------------------------------------------------------------
MODULE
    FSwiftCashConfirmationIn_DataPrep_Part1: Data preparation for 9XX message

DESCRIPTION
    Data preparation for 9XX message.

FUNCTION
    run_data_prep()
        Entry point for starting the execution of the data preparations.

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import os
import acm
import FCashConfirmationInSC
import FSwiftDataPreparation as DataPrep

notifier = DataPrep.notifier


class FSwiftCashConfirmationInDataPrepPart1(DataPrep.FSwiftPreInstIncomingDataPrep):
    '''
        Class represent Dataprep functionality for CashConfirmation
        incoming msg
    '''

    def create_state_chart(self):
        notifier.INFO("Creating State Charts")
        FCashConfirmationInSC.create_9XX_sc()
        notifier.INFO("State Chart creation completed.")


    def adm_prepare_choicelist(self):
        ''' choice list 
        '''
        notifier.INFO("Creating choice list.")
        swift_message_type = [
                                {'name': 'MT900', 'description': 'Swift message type'},
                                {'name': 'MT910', 'description': 'Swift message type'},
                                {'name': 'MT940', 'description': 'Swift message type'},
                                {'name': 'MT950', 'description': 'Swift message type'},
                                {'name': 'MT950Derived', 'description': 'Swift message type'}
                            ]

        self.create_choicelist(cl_name='SwiftMessageType', cl_values=swift_message_type)
        notifier.INFO("Choice list creation completed")

    def adm_prepare_addinfo(self):
        notifier.INFO("Creating Additional Infos.")
        swift_message_type_TradChinese = {
                                'FieldName':'TraditionalChinese',
                                'Description':'Use Traditional Chinese',
                                'Default':'',
                                'TypeGroup':'Standard',
                                'Type':'Boolean',
                                'Table':'Party'
                                }
       
        common_list_of_addinfo = DataPrep.get_list_of_addInfo_to_add()
        common_list_of_addinfo.append(swift_message_type_TradChinese)
        self.create_addinfo(common_list_of_addinfo)
        notifier.INFO("Additional Infos creation completed")

    def _query_strategy(self, param):
        ''' '''
        query = acm.CreateFASQLQuery(acm.FSettlement, 'AND')
        node = query.AddOpNode('AND')
        node.AddAttrNodeString('CounterpartyAccountNetworkName', 'SWIFT', 'EQUAL')
        node.AddAttrNodeEnum('Status', param.get('status'))
        one_trillion = 1000000000000
        if param.get('mt_type') == 'MT910':
            from_amt = 0
            to_amt = one_trillion
        elif param.get('mt_type') == 'MT900':
            from_amt = -1*one_trillion
            to_amt = 0

        node.AddAttrNodeNumerical('Amount', from_amt, to_amt)
        node.AddAttrNodeNumerical('CreateTime', '-1w', '0d')
        return query

    def _query_strategy_MT950(self, param):
        ''' '''
        query = acm.CreateFASQLQuery(acm.FSettlement,'AND')
        node = query.AddOpNode('AND')
        node.AddAttrNodeString('CounterpartyAccountNetworkName', 'SWIFT', 'EQUAL')
        node.AddAttrNodeEnum('Status', param.get('status'))
        node = query.AddOpNode('OR')
        for each in ['MT202', 'MT210']:
            node.AddAttrNodeString('ExternalObjects.IntegrationSubtype', each, 'RE_LIKE_NOCASE')
            # Backward compatibility. Handles the existing confirmations/settlements.
            node.AddAttrNodeString('ExternalObjects.IntegrationSubtype', each.replace('MT', ''), 'RE_LIKE_NOCASE')
        return query

    def _create_eligibility_query_each_staus(self, mt_type, params, q_type, status):

        '''Create Query object and set input and logic/strategy to create query'''

        notifier.DEBUG("Eligibility Query for %s with param=%r , status=%r" %
                      (mt_type, params, status))

        param_dict = {'mt_type': mt_type, 'status': status}
        queryObj = DataPrep.QueryCreator()
        queryObj.query_strategy_param = param_dict
        queryObj.query_strategy_func = self._query_strategy
        self.create_query(params, queryObj, q_type)


    def create_eligibility_query(self, mt_type_list=[]):
        ''' eligibility query 
        '''
        notifier.DEBUG("Started Creating Eligibility Query for %r ...", mt_type_list)
        for mt_type in mt_type_list:
            q_type = 'EligibilityQuery'

            params = []
            params.append(self._FSwiftMLUtils.Parameters('F%sIn_Config' % mt_type))
            self._create_eligibility_query_each_staus(mt_type,
                                                      params,
                                                      q_type=q_type,
                                                      status=['Authorised', 'Acknowledged'])

            params1 = []
            params1.append(self._FSwiftMLUtils.Parameters('F%sDerivedIn_Config' % mt_type))
            self._create_eligibility_query_each_staus(mt_type,
                                                      params1,
                                                      q_type=q_type,
                                                      status=['Authorised', 'Acknowledged'])

        notifier.DEBUG(" Eligibility Query creation completed")

    def create_eligibility_query_MT950(self, mt_type):
        ''' '''
        notifier.DEBUG("Started Creating Eligibility Query for %r ...", mt_type)
        params = []
        params.append(self._FSwiftMLUtils.Parameters('F%sDerivedIn_Config' % mt_type))
        q_type = 'EligibilityQuery'
        param_dict = {'mt_type': mt_type, 'status': ['Authorised','Pending Closure', 'Acknowledged']}

        queryObj = DataPrep.QueryCreator()
        queryObj.query_strategy_param = param_dict
        queryObj.query_strategy_func = self._query_strategy_MT950

        ''' delegating query creation work to queryCreator classs via super class'''
        self.create_query(params, queryObj, q_type)
        notifier.DEBUG(" Eligibility Query creation completed")

    def create_columns(self, fileName, context):
        notifier.INFO("Creating Columns")
        super(FSwiftCashConfirmationInDataPrepPart1, self).create_columns(fileName, context)
        notifier.INFO("Creation of Columns completed")

def run_data_prep(context=''):
    ''' entry point for running data prep for FSwiftCashConfirmationIn'''
    try:
        notifier.INFO("-"*100)
        notifier.INFO("Running Part-1 of Data Preps for FSwiftCashConfirmationIn\n")
        data_prep_obj = FSwiftCashConfirmationInDataPrepPart1()

        notifier.INFO("Step-1")
        data_prep_obj.create_state_chart()
        notifier.INFO("\n")
        

        notifier.INFO("Step-2")
        data_prep_obj.adm_prepare_choicelist()
        data_prep_obj.adm_prepare_addinfo()
        notifier.INFO("\n")

        notifier.INFO("Step-3")
        notifier.INFO("Creating Eligibility Query")
        data_prep_obj.create_eligibility_query(['MT900', 'MT910'])
        data_prep_obj.create_eligibility_query_MT950('MT950')
        notifier.INFO("Creation of Eligibility Query completed")
        notifier.INFO("\n")

        notifier.INFO("Step-4")
        data_prep_obj.create_columns(os.path.basename(__file__), context)

        notifier.INFO("\n")
        notifier.INFO("FSwiftCashConfirmationIn_DataPrep Part-1 is successfully executed.")
        notifier.INFO("\n")
        notifier.INFO("Please restart Prime application before running FSwiftCashConfirmationIn_DataPrep Part 2")
        notifier.INFO("-"*100)
    except Exception as e:
        notifier.ERROR("Exception in running FSwiftCashConfirmationIn DataPrep"
                       "Part-1: %r", e, exc_info=True)



...

  FSwiftCashConfirmationIn_DataPrep_Part2
"""----------------------------------------------------------------------------
MODULE
    FSwiftCashConfirmationIn_DataPrep_Part2: Data preparation for 9XX message

DESCRIPTION
    Data preparation for 9XX message.

FUNCTION
    run_data_prep()
        Entry point for starting the execution of the data preparations.

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import acm
import FSwiftDataPreparation as DataPrep

notifier = DataPrep.notifier


class FSwiftCashConfirmationInDataPrepPart2(DataPrep.FSwiftPostInstIncomingDataPrep):

    def __init__(self):
        super(FSwiftCashConfirmationInDataPrepPart2, self).__init__()
        self.CreateOperationFlag = False

    def create_operation_permissions(self, message_types, inorout='In'):
        '''
        '''
        notifier.INFO("Creating operation permissions")
        try:
            if self.CreateOperationFlag:
                operation_names = set()
                for mt_type in message_types:
                    state_chart = self._FSwiftMLUtils.get_state_chart_name_for_mt_type(mt_type)
                    state_chart_states = self._FSwiftMLUtils.get_state_chart_states(state_chart)

                    for state in state_chart_states:
                        operation_name = 'BPR_' + state_chart + '_' + state
                        operation_names.add(operation_name)

                    if mt_type in ['MT900','MT910']:
                        state_chart_derived = state_chart.replace('FSwift', 'FSwiftDerived')
                        derived_state_chart_states = self._FSwiftMLUtils.get_state_chart_states(state_chart_derived)
                        for state in derived_state_chart_states:
                            operation_name = 'BPR_' + state_chart_derived + '_' + state
                            operation_names.add(operation_name)

                for name in operation_names:
                    self._FSwiftMLUtils.AddOperation(name)
        except Exception as err:
            notifier.ERROR('Exception while running create_operation_permissions %r' % err, exc_info=True)
        else:
            notifier.INFO("Creation of operation permissions completed")

    def create_archive_task(self, message_types, states, inorout='In'):
        notifier.INFO("Creating Archiving tasks")
        super(FSwiftCashConfirmationInDataPrepPart2, self).create_archive_task(message_types, states, inorout=inorout)
        notifier.INFO("Creation of Archiving tasks completed")

    def query_strategy(self, param):
        ''' '''
        query = acm.CreateFASQLQuery(acm.FBusinessProcess, 'AND')
        node = query.AddOpNode('AND')

        if self._FSwiftMLUtils.get_acm_version() < 2018.2:
            node.AddAttrNodeString('CurrentStep.State.StateChart.Name', param.get('sc'), 'EQUAL')
            node.AddAttrNodeString('CurrentStep.State.Name', param.get('state'), 'EQUAL')
        else:
            node.AddAttrNodeString('StateChart.Name', param.get('sc'), 'EQUAL')
            node.AddAttrNodeString('CurrentStateName', param.get('state'), 'EQUAL')
        node.AddAttrNodeEnum('AdditionalInfo.SwiftMessageType', param.get('mt_type'))
        return query

    def create_unidentified_bpr_query(self, mt_types=[], state='Unpaired'):
        ''' '''
        notifier.DEBUG("Started creating unidentified_bpr_query..")
        for mt_type in mt_types:
            params = []
            params.append(self._FSwiftMLUtils.Parameters('F%sIn_Config' % (mt_type)))
            param_dict = {'mt_type': mt_type,
                          'sc': self._FSwiftMLUtils.get_state_chart_name_for_mt_type(mt_type),
                          'state': state
                          }

            '''Create Query object and set input and logic/strategy to create query'''
            queryObj = DataPrep.QueryCreator()
            queryObj.query_strategy_param = param_dict
            queryObj.query_strategy_func = self.query_strategy
            ''' delegating query creation work to queryCreator classs via super class'''

            self.create_query(params, queryObj, q_type='UnpairedBPRQuery',)

        notifier.DEBUG("Completed creating unidentified_bpr_query.")


def run_data_prep(context=''):
    try:
        message_types = ['MT900', 'MT910', 'MT940']
        notifier.INFO("-"*100)
        notifier.INFO("Running Part-2 of Data Preps for FSwiftCashConfirmationIn")
        dp = FSwiftCashConfirmationInDataPrepPart2()

        notifier.INFO("\nStep-1")
        notifier.INFO("Creating Business Process Queries")
        dp.create_unidentified_bpr_query(['MT900', 'MT910'], state='Unpaired')
        dp.create_unidentified_bpr_query(['MT940'], state='CheckStatements')
        dp.create_unidentified_bpr_query(['MT950'], state='RowNotMatched')
        notifier.INFO("Creation of Business Process Queries completed")

        notifier.INFO("\nStep-2")
        dp.create_archive_task(message_types, 'Matched')

        notifier.INFO("\nStep-3")
        dp.create_operation_permissions(message_types + ['MT950'])

        notifier.INFO("\n")
        notifier.INFO("FSwiftCashConfirmationIn_DataPrep Part-2 is successfully executed.")
        notifier.INFO("-"*100)
    except Exception as e:
        notifier.ERROR('Exception in running FSwiftCashConfirmationIn DataPrep Part-2 : \n %r' % e, exc_info=True)


...

  FSwiftCashOut_DataPrep
"""----------------------------------------------------------------------------
MODULE
    FSwiftCashOut_DataPrep: Data preparation for cash message

DESCRIPTION
    Data preparation for cash message.

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import FCashOutSC
import acm
import FSwiftDataPreparation as DataPrep

notifier = DataPrep.notifier


class FSwiftCashOut_DataPrep(DataPrep.FSwiftPreInstOutgoingDataPrep):
    '''
    '''
    def create_state_chart(self):
        notifier.INFO("Creating State Charts")
        FCashOutSC.create_cash_settlement_conf_out_sc()
        notifier.INFO("State Chart creation completed.")

    def create_archive_task(self, message_types, states, inorout='Out'):
        notifier.INFO("Creating Archiving tasks")
        super(FSwiftCashOut_DataPrep, self).create_archive_task(message_types, states, inorout=inorout)
        notifier.INFO("Creation of Archiving tasks completed")

    def adm_prepare_choice_list(self):
        ''' Create choice list'''
        notifier.INFO("Creating  choice list.")
        cl_name = 'TradeSettleCategory'
        cl_values = [{'name': 'ThirdPartyFX',
                      'description': 'Deal - Third party FX'}
                     ]
        try:
            self.create_choicelist(cl_name, cl_values)
        except Exception as e:
            notifier.ERROR("Exception while creating Choice List <%r>"
                           % cl_values[-1]['name'], exc_info=True)
        notifier.INFO("Creation of choice list completed")

    def rename_old_addinfo_name(self, ais_dict):
        """
        This function renames old add info spec name
        :param ais_dict:
        :return:
        """
        fld_name = ais_dict.get('FieldName')
        if fld_name and fld_name == "GPI_Identifier":
            old_fld_name = "GPI Identifier"
            ais = acm.FAdditionalInfoSpec[old_fld_name]
            if ais:
                ais.FieldName('GPI_Identifier')
                ais.Commit()
                notifier.INFO("Renamed Additional Info Spec 'GPI Identifier' to GPI_Identifier.")


    def adm_prepare_addinfo(self):
        ''' '''
        notifier.INFO("Creating Additional Info")
        add_info_spec_swift_message_type = {
                                'FieldName':'GPI_Identifier',
                                'Description':'GPI Id',
                                'Default':'',
                                'TypeGroup':'Standard',
                                'Type':'String',
                                'Table':'Account'
                                }

        add_info_spec_swift_message_type_TradChinese = {
                                'FieldName':'TraditionalChinese',
                                'Description':'Use Traditional Chinese',
                                'Default':'',
                                'TypeGroup':'Standard',
                                'Type':'Boolean',
                                'Table':'Party'
                                }

        add_info_spec_use_extended_x_chars = {
                                'FieldName': 'SWIFTExtXChrNotUsed',
                                'Description': 'Extended X Character Set Not Supported',
                                'Default': 'No',
                                'TypeGroup': 'Standard',
                                'Type': 'Boolean',
                                'Table': 'Party'
            }

        common_list_of_addinfo = DataPrep.get_list_of_addInfo_to_add()
        additional_infos = [add_info_spec_swift_message_type,
                            add_info_spec_swift_message_type_TradChinese,
                            add_info_spec_use_extended_x_chars,
                           ] + common_list_of_addinfo
        for each in additional_infos:
            try:
                self.rename_old_addinfo_name(each)
                self._utils_obj.create_additional_info_spec(each)
            except self._FIntegrationUtils.AddInfoSpecAlreadyExits as e:
                notifier.INFO(("Additional Info <%s> already exists on table <%s>" % (each['FieldName'], each['Table'])))
            except Exception as e:
                notifier.ERROR("Exception while creating Additional info"
                               "for %s:%r" % (each, e), exc_info=True)
        notifier.INFO("Creation of Additional Info completed")

    def create_operation_permissions(self, message_types, inorout='out'):
        notifier.INFO("Creating Archiving tasks")
        super(FSwiftCashOut_DataPrep, self).create_operation_permissions(message_types, inorout)
        notifier.INFO("Creation of Archiving tasks completed")


def run_data_prep(context=''):
    try:
        message_type_archive_task = ['MT202']
        STATES = 'Acknowledged'
        message_types_operation_permission = ['MT101', 'MT103', 'MT192',
                                              'MT199', 'MT200',
                                              'MT202', 'MT210',
                                              'MT292', 'MT299',
                                              'MT304']
        notifier.INFO("-"*100)
        notifier.INFO("Running Data Prep for FSwiftCashOut")
        dp = FSwiftCashOut_DataPrep()

        notifier.INFO("\nStep-1")
        dp.create_state_chart()

        notifier.INFO("\nStep-2")
        dp.create_archive_task(message_type_archive_task, STATES)

        notifier.INFO("\nStep-3")
        dp.adm_prepare_addinfo()

        notifier.INFO("\nStep-4")
        dp.adm_prepare_choice_list()

        notifier.INFO("\nStep-5")
        dp.create_operation_permissions(message_types_operation_permission)


        notifier.INFO("\n")
        notifier.INFO("FSwiftCashOut_DataPrep is successfully executed.")
        notifier.INFO("-"*100)
    except Exception as e:
        notifier.ERROR("Exception in running FSwiftCashOut DataPrep:%r" % e, exc_info=True)


...

  FSwiftCashSettlementMX_CBPRPlusIn_DataPrep_Part1
"""----------------------------------------------------------------------------
MODULE:
    FSwiftCashSettlementMX_CBPRPlusIn_DataPrep

DESCRIPTION:
    Data preparation script for Cash Settlement MX
    Script performs following tasks:
    A. create cash settlement confirmation state chart
    B. create choice list and add infos
    C. data preparation for FExternal object
    D. create eligibility query
    E. create columns

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import FSwiftDataPreparation as DataPrep
import os
import acm
import FCashSettlementMX_CBPRPlusInSC

notifier = DataPrep.notifier


class FSwiftCashSettlementMXCBPRPlusInDataPrep(DataPrep.FSwiftPreInstIncomingDataPrep):
    '''Class representing Data preparation for CashSettlementMX_CBPRPlus incoming msgs'''

    def create_state_chart(self):
        """Create state chart"""
        notifier.INFO("Creating State Charts")
        FCashSettlementMX_CBPRPlusInSC.create_sc()
        notifier.INFO("State Chart creation completed.")

    def adm_prepare_choicelist(self):
        """Create Choice list required for cash Settlement Conf"""
        notifier.INFO("Creating choice list.")
        swift_message_type = [
                                {'name': 'pacs002CBPRPlus',  'description': 'Swift MX message type' },
                                {'name': 'camt029CBPRPlus',  'description': 'Swift MX message type' },
                                {'name': 'pacs004CBPRPlus',  'description': 'Swift MX message type' },
                            ]

        self.create_choicelist(cl_name='SwiftMessageType', cl_values=swift_message_type)
        notifier.INFO("Choice list creation completed")
    
    def adm_prepare_addinfo(self):
        notifier.INFO("Creating Additional Infos.")
        common_list_of_addinfo = DataPrep.get_list_of_addInfo_to_add()
        self.create_addinfo(common_list_of_addinfo)
        notifier.INFO("Additional Infos creation completed")


    def _query_strategy_settlement(self, param):
        
        query = acm.CreateFASQLQuery(acm.FSettlement, 'AND')
        node = query.AddOpNode('AND')
        node.AddAttrNodeEnum('Status', param.get('status'))
        message_mapping = { 'pacs002CBPRPlus': ['pacs008CBPRPlus', 'pacs009CBPRPlus'], 'camt029CBPRPlus': ['camt056CBPRPlus'],
                           'pacs004CBPRPlus': ['camt056CBPRPlus']}
        message_list = message_mapping.get(param.get('mt_type'))
        if len(message_list) > 1 :
            node = query.AddOpNode('OR')

        for each in message_list:
            node.AddAttrNodeString('ExternalObjects.IntegrationSubtype', each, 'RE_LIKE_NOCASE')

        return query


    def create_eligibility_query(self, mt_type, status=None):
        """ Create ASQL query so as to find the eligible objects """
        notifier.DEBUG("Started Creating Eligibility Query for %r ..." % mt_type)
        params = []
        params.append(self._FSwiftMLUtils.Parameters('F%sIn_Config' % mt_type))
        q_type = 'EligibilityQuery'
        tmp = {'mt_type': mt_type, 'status':status }

        '''Create Query object and set input and logic/strategy to create query'''
        query_obj = DataPrep.QueryCreator()
        query_obj.query_strategy_param = tmp
        query_obj.query_strategy_func = self._query_strategy_settlement

        self.create_query(params, query_obj, q_type)
        notifier.DEBUG("Eligibility Query completed successfully")



def run_data_prep(context=''):
    try:
        notifier.INFO("-" * 100)
        notifier.INFO("Running Part-1 of Data Preps for FSwiftCashSettlementMX_CBPRPlusIn")
        dp_obj = FSwiftCashSettlementMXCBPRPlusInDataPrep()
        
        notifier.INFO("\nStep-1")
        dp_obj.create_state_chart()
        
        notifier.INFO("\nStep-2")
        dp_obj.adm_prepare_choicelist()
        dp_obj.adm_prepare_addinfo()

        notifier.INFO("\nStep-3")
        notifier.INFO("Creating Eligibility Query")
        dp_obj.create_eligibility_query('pacs002CBPRPlus', status='Released')
        dp_obj.create_eligibility_query('camt029CBPRPlus', status='Released')
        dp_obj.create_eligibility_query('pacs004CBPRPlus', status='Released')

        notifier.INFO("Creation of Eligibility Query completed")

        notifier.INFO("\nStep-4")
        notifier.INFO("Creating Columns")

        dp_obj.create_columns(os.path.basename(__file__), context)
        notifier.INFO("Columns creation completed")
        notifier.INFO("\n")
        notifier.INFO("FSwiftCashSettlementMX_CBPRPlusIn_DataPrep Part-1 is successfully executed.")
        notifier.INFO("-" * 100)
    except Exception as err:
        notifier.ERROR("Exception in running FSwiftCashSettlementMX_CBPRPlusIn_DataPrep: {}".format(str(err)), exc_info=True)

# run_data_prep(context='SwiftMessagingSolution')


...

  FSwiftCashSettlementMX_CBPRPlusIn_DataPrep_Part2
"""----------------------------------------------------------------------------
MODULE:
    FSwiftCashSettlementMX_CBPRPlusIn_DataPrep_Part2

DESCRIPTION:
    Data preparation script for CashSettlement
    Script performs following tasks:
    A. create unidentified business process query
    B. create archive tasks
    C. create operation permissions

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import acm
import FSwiftDataPreparation as DataPrep

notifier = DataPrep.notifier


class FSwiftCashSettlementMXCBPRPlusInDataPrepPart2(DataPrep.FSwiftPostInstIncomingDataPrep):
    '''Class representing Data preparation for CashSettlementMX-CBPRPlus incoming msgs
    '''

    def create_archive_task(self, message_types, states):
        """This function create archive task"""
        notifier.INFO("Creating Archiving tasks.")
        super(FSwiftCashSettlementMXCBPRPlusInDataPrepPart2, self).create_archive_task(message_types, states)
        notifier.INFO("Creation of Archiving tasks completed")

    def create_operation_permissions(self, message_types, inorout='In'):
        """This function creates operation permissions"""
        notifier.INFO("Creating operation permissions.")
        super(FSwiftCashSettlementMXCBPRPlusInDataPrepPart2, self).create_operation_permissions(message_types, inorout)
        notifier.INFO("Creation of operation permissions completed")

    def _query_strategy(self, param={}):
        """This function defines the query strategy for eligibility query"""
        query = acm.CreateFASQLQuery(acm.FBusinessProcess, 'AND')
        node = query.AddOpNode('AND')
        node.AddAttrNodeString('StateChart.Name', param.get('sc'), 'EQUAL')
        node.AddAttrNodeString('CurrentStateName', param.get('state'), 'EQUAL')

        node.AddAttrNodeEnum('AdditionalInfo.SwiftMessageType', param.get('mt_type'))

        return query

    def create_unidentified_bpr_query(self, mt_types, state=None):
        '''This function created unidentified bpr query '''

        notifier.DEBUG("Started creating unidentified_bpr_query...")
        for mt_type in mt_types:
            params = []
            q_type = 'UnpairedBPRQuery'
            params.append(self._FSwiftMLUtils.Parameters('F%sIn_Config' % (mt_type)))
            q_param = {'mt_type': mt_type, 'state': state,
                       'sc': self._FSwiftMLUtils.get_state_chart_name_for_mt_type(mt_type)
                       }

            '''Create Query object and set input and logic/strategy to create query'''
            queryObj = DataPrep.QueryCreator()
            queryObj.query_strategy_param = q_param
            queryObj.query_strategy_func = self._query_strategy
            self.create_query(params, queryObj, q_type)
            notifier.DEBUG("unidentified_bpr_query completed for %s" % mt_type)


def run_data_prep(context=''):
    try:
        notifier.INFO("-" * 100)
        notifier.INFO("Running Part-2 of Data Preps for FSwiftCashSettlementMX_CBPRPlusIn_DataPrep")
        dp_obj = FSwiftCashSettlementMXCBPRPlusInDataPrepPart2()
        message_types = ['pacs002CBPRPlus', 'pacs004CBPRPlus']
        states = 'Accepted'

        notifier.INFO("\nStep-1")
        notifier.INFO("Creating Business Process Queries")
        dp_obj.create_unidentified_bpr_query(message_types, state='Unpaired')
        notifier.INFO("Creation of Business Process Queries completed")

        notifier.INFO("\nStep-2")
        message_types = ['pacs002CBPRPlus']
        states = 'SettlementCompleted'
        dp_obj.create_archive_task(message_types, states)

        message_types = ['camt029CBPRPlus']
        states = 'Cancelled'
        dp_obj.create_archive_task(message_types, states)
        
        message_types = ['pacs004CBPRPlus']
        states = 'PaymentReturned'
        dp_obj.create_archive_task(message_types, states)

        notifier.INFO("\nStep-3")
        message_types = ['pacs002CBPRPlus', 'camt029CBPRPlus', 'pacs004CBPRPlus']
        dp_obj.create_operation_permissions(message_types)

        notifier.INFO("\n")
        notifier.INFO("FSwiftCashSettlementMX_CBPRPlusIn_DataPrep Part-2 is successfully executed.")
        notifier.INFO("-" * 100)
    except Exception as err:
        notifier.INFO("Exception in running FSwiftCashSettlementMX_CBPRPlusIn_DataPrep_Part2 %r:" % err,
                      exc_info=True)


#run_data_prep(context='SwiftMessagingSolution')

...

  FSwiftCashSettlementMX_CBPRPlusOut_DataPrep
"""----------------------------------------------------------------------------
MODULE
    FSwiftCashSettlementMX_CBPRPlusOut_DataPrep: Data preparation for MX CBPR Cash message
DESCRIPTION
    Data preparation for cash MX message.

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import FSwiftDataPreparation as DataPrep

notifier = DataPrep.notifier
import FCashSettlementMX_CBPRPlusOutSc
import acm


class FSwiftCashSettlMXCBPROutDataPrep(DataPrep.FSwiftPreInstOutgoingDataPrep):
    ''' Class representing Data preparation for CashSettlement CBPR MX outgoing msgs.'''

    def create_state_chart(self):
        """Create state chart"""
        notifier.INFO("Creating State Charts")
        FCashSettlementMX_CBPRPlusOutSc.create_sc()
        notifier.INFO("State Chart creation completed.")

    def create_archive_task(self, message_types, states, inorout='Out'):
        """This function create the archive task for given message types and states"""
        notifier.INFO("Creating Archiving tasks.")
        super(FSwiftCashSettlMXCBPROutDataPrep, self).create_archive_task(message_types, states, inorout=inorout)
        notifier.INFO("Creation of Archiving tasks completed")

    def create_operation_permissions(self, message_types, inorout='Out'):
        """This function create the operation permission for given message types"""
        notifier.INFO("Creating operation permissions.")
        super(FSwiftCashSettlMXCBPROutDataPrep, self).create_operation_permissions(message_types, inorout)
        notifier.INFO("Creation of operation permissions completed")

    def create_subnetwork(self):
        """
        This function sets the choice list in the Sub Network under party definition
        """
        #notifier.INFO("Setting up FRegimeConfig Parameters")
        #self.set_fparameters(regime)
        sub_network_types = []
        try:
            d = dict()
            d['name'] = 'CBPRPlus'
            d['description'] = 'Sub network type'
            sub_network_types.append(d)
            self.create_choicelist(cl_name='Sub Network', cl_values=sub_network_types)
            notifier.INFO("Created successfully choice list in Sub Network")
        except Exception as err:
            notifier.ERROR("Failed to create choice list in Sub Network")


def run_data_prep(context=''):
    """This is the base function which will run to create the basic data prepration for outgoing messages."""
    try:
        notifier.INFO("-" * 100)
        notifier.INFO("Running Data Prep for FSwiftCashSettlementMX_CBPRPlusOut_DataPrep")
        dp_obj = FSwiftCashSettlMXCBPROutDataPrep()
        notifier.INFO("\nStep-1")
        dp_obj.create_state_chart()

        notifier.INFO("\nStep-2")
        message_types = ['camt057CBPRPlus', 'pacs009CBPRPlus', 'pacs008CBPRPlus', 'camt056CBPRPlus', 'pacs009COVCBPRPlus', 'camt058CBPRPlus']
        state = 'Sent'
        dp_obj.create_archive_task(message_types, state, 'Out')

        notifier.INFO("\nStep-3")
        dp_obj.create_operation_permissions(message_types, 'Out')

        notifier.INFO("\nStep-4")
        dp_obj.create_subnetwork()
        notifier.INFO("FSwiftCashSettlementMX_CBPRPlusOut_DataPrep is successfully executed.")
        notifier.INFO("-" * 100)
    except Exception as err:
        notifier.ERROR("Exception in running FSwiftCashSettlementMX_CBPRPlusOut_DataPrep :%r" % err, exc_info=True)

# run_data_prep(context='SwiftMessagingSolution')

...

  FSwiftCashSettlementMX_SAMOSIn_DataPrep_Part1
"""----------------------------------------------------------------------------
MODULE:
    FSwiftCashSettlementMX_SAMOSIn_DataPrep_Part1

DESCRIPTION:
    Data preparation script for Cash Settlement MX
    Script performs following tasks:
    A. create cash settlement confirmation state chart
    B. create choice list and add infos
    C. data preparation for FExternal object
    D. create eligibility query
    E. create columns

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import FSwiftDataPreparation as DataPrep
import os
import acm
import FCashSettlementMX_SAMOSInSc

notifier = DataPrep.notifier


class FSwiftCashSettlementMXSAMOSInDataPrep(DataPrep.FSwiftPreInstIncomingDataPrep):
    '''Class representing Data preparation for CashSettlementMX_SAMOS incoming msgs'''

    def create_state_chart(self):
        """Create state chart"""
        notifier.INFO("Creating State Charts")
        FCashSettlementMX_SAMOSInSc.create_sc()
        notifier.INFO("State Chart creation completed.")

    def adm_prepare_choicelist(self):
        """Create Choice list required for cash Settlement Conf"""
        notifier.INFO("Creating choice list.")
        swift_message_type = [
            {'name': 'pacs002_SAMOS', 'description': 'Swift MX message type'},
        ]

        self.create_choicelist(cl_name='SwiftMessageType', cl_values=swift_message_type)
        notifier.INFO("Choice list creation completed")

    def adm_prepare_addinfo(self):
        notifier.INFO("Creating Additional Infos.")
        common_list_of_addinfo = DataPrep.get_list_of_addInfo_to_add()
        self.create_addinfo(common_list_of_addinfo)
        notifier.INFO("Additional Infos creation completed")



def run_data_prep(context=''):
    try:
        notifier.INFO("-" * 100)
        notifier.INFO("Running Part-1 of Data Preps for FSwiftCashSettlementMX_SAMOSIn")
        dp_obj = FSwiftCashSettlementMXSAMOSInDataPrep()

        notifier.INFO("\nStep-1")
        dp_obj.create_state_chart()

        notifier.INFO("\nStep-2")
        dp_obj.adm_prepare_choicelist()
        dp_obj.adm_prepare_addinfo()

        notifier.INFO("\nStep-3")
        notifier.INFO("Creating Columns")

        dp_obj.create_columns(os.path.basename(__file__), context)
        notifier.INFO("Columns creation completed")
        notifier.INFO("\n")
        notifier.INFO("FSwiftCashSettlementMX_SAMOSIn_DataPrep Part-1 is successfully executed.")
        notifier.INFO("-" * 100)
    except Exception as err:
        notifier.ERROR("Exception in running FSwiftCashSettlementMX_SAMOSIn DataPrep: {}".format(str(err)), exc_info=True)

# run_data_prep(context='SwiftMessagingSolution')


...

  FSwiftCashSettlementMX_SAMOSIn_DataPrep_Part2
"""----------------------------------------------------------------------------
MODULE:
    FSwiftCashSettlementMX_SAMOSIn_DataPrep_Part2

DESCRIPTION:
    Data preparation script for CashSettlement
    Script performs following tasks:
    A. create unidentified business process query
    B. create archive tasks
    C. create operation permissions

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import acm
import FSwiftDataPreparation as DataPrep

notifier = DataPrep.notifier


class FSwiftCashSettlementMXSAMOSInDataPrepPart2(DataPrep.FSwiftPostInstIncomingDataPrep):
    '''Class representing Data preparation for CashSettlementMX-SAMOS incoming msgs
    '''

    def create_archive_task(self, message_types, states):
        """This function create archive task"""
        notifier.INFO("Creating Archiving tasks.")
        super(FSwiftCashSettlementMXSAMOSInDataPrepPart2, self).create_archive_task(message_types, states)
        notifier.INFO("Creation of Archiving tasks completed")

    def create_operation_permissions(self, message_types, inorout='In'):
        """This function creates operation permissions"""
        notifier.INFO("Creating operation permissions.")
        super(FSwiftCashSettlementMXSAMOSInDataPrepPart2, self).create_operation_permissions(message_types, inorout)
        notifier.INFO("Creation of operation permissions completed")



def run_data_prep(context=''):
    try:
        notifier.INFO("-" * 100)
        notifier.INFO("Running Part-2 of Data Preps for FSwiftCashSettlementMX_SAMOSIn_DataPrep")
        dp_obj = FSwiftCashSettlementMXSAMOSInDataPrepPart2()

        notifier.INFO("\nStep-1")
        message_types = ['pacs002_SAMOS']
        states = 'SettlementCompleted'
        dp_obj.create_archive_task(message_types, states)


        notifier.INFO("\nStep-3")
        message_types = ['pacs002_SAMOS']
        dp_obj.create_operation_permissions(message_types)

        notifier.INFO("\n")
        notifier.INFO("FSwiftCashSettlementMX_SAMOSIn_DataPrep Part-2 is successfully executed.")
        notifier.INFO("-" * 100)
    except Exception as err:
        notifier.INFO("Exception in running FSwiftCashSettlementMX_SAMOSIn_DataPrep_Part2 %r:" % err,
                      exc_info=True)

# run_data_prep(context='SwiftMessagingSolution')

...

  FSwiftCashSettlementMX_SAMOSOut_DataPrep
"""----------------------------------------------------------------------------
MODULE
    FSwiftCashSettlementMX_SAMOSOut_DataPrep: Data preparation for MX-RTGS-SAMOS Cash message
DESCRIPTION
    Data preparation for cash MX message.

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import FSwiftDataPreparation as DataPrep
notifier = DataPrep.notifier
import acm

class FSwiftCashSettlMXSAMOSOutDataPrep(DataPrep.FSwiftPreInstOutgoingDataPrep):
    ''' Class representing Data preparation for CashSettlement RTGS SAMOS MX outgoing msgs.'''

    def create_archive_task(self, message_types, states, inorout='Out'):
        """This function create the archive task for given message types and states"""
        notifier.INFO("Creating Archiving tasks.")
        super(FSwiftCashSettlMXSAMOSOutDataPrep, self).create_archive_task(message_types, states, inorout=inorout)
        notifier.INFO("Creation of Archiving tasks completed")

    def create_operation_permissions(self, message_types, inorout='Out'):
        """This function create the operation permission for given message types"""
        notifier.INFO("Creating operation permissions.")
        super(FSwiftCashSettlMXSAMOSOutDataPrep, self).create_operation_permissions(message_types, inorout)
        notifier.INFO("Creation of operation permissions completed")
    
    def set_fparameters(self,regime):
        """
        To set the FParameters in the specific File that we get from GetExtension
        :param regime : List of regimes 
        """
        try:
            regime_value = ["'" + item_regime + "'" for item_regime in regime]
            ext_context = acm.FExtensionContext['+SwiftMessagingSolution']
            param_object = ext_context.GetExtension('FParameters', 'FObject', 'FRegimeConfig')
            template = param_object.Value()
            template.AtPut('RTGSRegime', regime_value)
            em = acm.FExtensionModule['FSwiftCashRTGS']
            em.AddExtension(param_object)
            em.Commit()
            notifier.INFO("Parameters set up successfully in FRegimeConfig")                  
        except AttributeError as error:
            raise Exception("Unable to set Parameter in FRegimeConfig")
        
    def create_regime(self,regime):
        """
        This function sets the choicelist in the Sub Network under party defination
        :param regime : List of regimes
        """
        notifier.INFO("Setting up FRegimeConfig Parameters")
        self.set_fparameters(regime)
        sub_network_types=[]
        try:
            for regime_index in range(len(regime)):
                d=dict()
                d['name']=regime[regime_index]
                d['description']='Sub network type'
                sub_network_types.append(d)
            self.create_choicelist(cl_name='Sub Network', cl_values=sub_network_types)
            notifier.INFO("Created successfully choice list in Sub Network")
        except Exception as err:
            notifier.ERROR("Failed to create choice list in Sub Network")

def run_data_prep(context='',regime=''):
    """This is the base function which will run to create the basic data prepration for outgoing messages."""
    try:
        notifier.INFO("-"*100)
        notifier.INFO("Running Data Prep for FSwiftCashSettlementMX_SAMOSOut_DataPrep")
        dp_obj = FSwiftCashSettlMXSAMOSOutDataPrep()
        
        notifier.INFO("\nStep-1")
        message_types = ['pacs008_SAMOS', 'pacs009_SAMOS', 'camt050_SAMOS']
        state = 'Sent'
        dp_obj.create_archive_task(message_types, state, 'Out')

        notifier.INFO("\nStep-2")
        dp_obj.create_operation_permissions(message_types, 'Out')

        notifier.INFO("\n")
        
        notifier.INFO("\nStep-4")
        dp_obj.create_regime(regime)
        notifier.INFO("\n")
        
        notifier.INFO("FSwiftCashSettlementMX_RTGS_SAMOSOut_DataPrep is successfully executed.")
        notifier.INFO("-"*100)
    except Exception as err:
        notifier.ERROR("Exception in running FSwiftCashSettlementMX_RTGS_SAMOSOut_DataPrep :%r" % err, exc_info=True)

# run_data_prep(context='SwiftMessagingSolution')


...

  FSwiftCashSettlementMX_T2In_DataPrep_Part1
"""----------------------------------------------------------------------------
MODULE:
    FSwiftCashSettlementMX_T2In_DataPrep

DESCRIPTION:
    Data preparation script for Cash Settlement MX
    Script performs following tasks:
    A. create cash settlement confirmation state chart
    B. create choice list and add infos
    C. data preparation for FExternal object
    D. create eligibility query
    E. create columns

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import FSwiftDataPreparation as DataPrep
import os
import acm
import FCashSettlementMX_T2InSc

notifier = DataPrep.notifier


class FSwiftCashSettlementMXT2InDataPrep(DataPrep.FSwiftPreInstIncomingDataPrep):
    '''Class representing Data preparation for CashSettlementMX_T2 incoming msgs'''

    def create_state_chart(self):
        """Create state chart"""
        notifier.INFO("Creating State Charts")
        FCashSettlementMX_T2InSc.create_sc()
        notifier.INFO("State Chart creation completed.")

    def adm_prepare_choicelist(self):
        """Create Choice list required for cash Settlement Conf"""
        notifier.INFO("Creating choice list.")
        swift_message_type = [
                                {'name': 'pacs002_T2',  'description': 'Swift MX message type' },
                                {'name': 'admi007_T2',  'description': 'Swift MX message type' },
                                {'name': 'camt025_T2',  'description': 'Swift MX message type' },
                                {'name': 'camt029_T2',  'description': 'Swift MX message type' },
                                {'name': 'pacs004_T2',  'description': 'Swift MX message type' }
                            ]

        self.create_choicelist(cl_name='SwiftMessageType', cl_values=swift_message_type)
        notifier.INFO("Choice list creation completed")
    
    def adm_prepare_addinfo(self):
        notifier.INFO("Creating Additional Infos.")
        common_list_of_addinfo = DataPrep.get_list_of_addInfo_to_add()
        self.create_addinfo(common_list_of_addinfo)
        notifier.INFO("Additional Infos creation completed")


    def _query_strategy_settlement(self, param):
        
        query = acm.CreateFASQLQuery(acm.FSettlement, 'AND')
        node = query.AddOpNode('AND')
        node.AddAttrNodeEnum('Status', param.get('status'))
        message_mapping = {'camt025_T2' : ['camt050_T2', 'camt029_T2'] , 'camt029_T2' : ['camt056_T2'], 'pacs004_T2': ['camt056_T2'], 'pacs002_T2': ['pacs008_T2', 'pacs009_T2', 'camt056_T2'], 'admi007_T2': ['pacs008_T2', 'pacs009_T2', 'camt050_T2', 'camt056_T2']}
        message_list = message_mapping.get(param.get('mt_type'))
        if len(message_list) > 1 :
            node = query.AddOpNode('OR')

        for each in message_list:
            node.AddAttrNodeString('ExternalObjects.IntegrationSubtype', each, 'RE_LIKE_NOCASE')

        return query


    def create_eligibility_query(self, mt_type, status=None):
        """ Create ASQL query so as to find the eligible objects """
        notifier.DEBUG("Started Creating Eligibility Query for %r ..." % mt_type)
        params = []
        params.append(self._FSwiftMLUtils.Parameters('F%sIn_Config' % mt_type))
        q_type = 'EligibilityQuery'
        tmp = {'mt_type': mt_type, 'status':status }

        '''Create Query object and set input and logic/strategy to create query'''
        query_obj = DataPrep.QueryCreator()
        query_obj.query_strategy_param = tmp
        query_obj.query_strategy_func = self._query_strategy_settlement

        self.create_query(params, query_obj, q_type)
        notifier.DEBUG("Eligibility Query completed successfully")



def run_data_prep(context=''):
    try:
        notifier.INFO("-" * 100)
        notifier.INFO("Running Part-1 of Data Preps for FSwiftCashSettlementMX_T2In")
        dp_obj = FSwiftCashSettlementMXT2InDataPrep()
        
        notifier.INFO("\nStep-1")
        dp_obj.create_state_chart()
        
        notifier.INFO("\nStep-2")
        dp_obj.adm_prepare_choicelist()
        dp_obj.adm_prepare_addinfo()

        notifier.INFO("\nStep-3")
        notifier.INFO("Creating Eligibility Query")

        dp_obj.create_eligibility_query('camt025_T2', status='Released')
        dp_obj.create_eligibility_query('camt029_T2', status='Released')
        dp_obj.create_eligibility_query('pacs004_T2', status='Released')
        dp_obj.create_eligibility_query('pacs002_T2', status='Released')
        
        dp_obj.create_eligibility_query('admi007_T2', status='Released')

        notifier.INFO("Creation of Eligibility Query completed")

        notifier.INFO("\nStep-4")
        notifier.INFO("Creating Columns")

        dp_obj.create_columns(os.path.basename(__file__), context)
        notifier.INFO("Columns creation completed")
        notifier.INFO("\n")
        notifier.INFO("FSwiftCashSettlementMX_T2In_DataPrep Part-1 is successfully executed.")
        notifier.INFO("-" * 100)
    except Exception as err:
        notifier.ERROR("Exception in running FSwiftCashSettlementMX_T2In DataPrep: {}".format(str(err)), exc_info=True)

# run_data_prep(context='SwiftMessagingSolution')


...

  FSwiftCashSettlementMX_T2In_DataPrep_Part2
"""----------------------------------------------------------------------------
MODULE:
    FSwiftCashSettlementMX_T2In_DataPrep_Part2

DESCRIPTION:
    Data preparation script for CashSettlement
    Script performs following tasks:
    A. create unidentified business process query
    B. create archive tasks
    C. create operation permissions

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import acm
import FSwiftDataPreparation as DataPrep

notifier = DataPrep.notifier


class FSwiftCashSettlementMXT2InDataPrepPart2(DataPrep.FSwiftPostInstIncomingDataPrep):
    '''Class representing Data preparation for CashSettlementMX incoming msgs
    '''

    def create_archive_task(self, message_types, states):
        """This function create archive task"""
        notifier.INFO("Creating Archiving tasks.")
        super(FSwiftCashSettlementMXT2InDataPrepPart2, self).create_archive_task(message_types, states)
        notifier.INFO("Creation of Archiving tasks completed")

    def create_operation_permissions(self, message_types, inorout='In'):
        """This function creates operation permissions"""
        notifier.INFO("Creating operation permissions.")
        super(FSwiftCashSettlementMXT2InDataPrepPart2, self).create_operation_permissions(message_types, inorout)
        notifier.INFO("Creation of operation permissions completed")

    def _query_strategy(self, param={}):
        """This function defines the query strategy for eligibility query"""
        query = acm.CreateFASQLQuery(acm.FBusinessProcess, 'AND')
        node = query.AddOpNode('AND')

        if self._FSwiftMLUtils.get_acm_version() < 2018.2:
            node.AddAttrNodeString('CurrentStep.State.StateChart.Name', param.get('sc'), 'EQUAL')
            node.AddAttrNodeString('CurrentStep.State.Name', param.get('state'), 'EQUAL')
        else:
            node.AddAttrNodeString('StateChart.Name', param.get('sc'), 'EQUAL')
            node.AddAttrNodeString('CurrentStateName', param.get('state'), 'EQUAL')

        node.AddAttrNodeEnum('AdditionalInfo.SwiftMessageType', param.get('mt_type'))

        return query

    def create_unidentified_bpr_query(self, mt_types, state=None):
        '''This function created unidentified bpr query '''

        notifier.DEBUG("Started creating unidentified_bpr_query...")
        for mt_type in mt_types:
            params = []
            q_type = 'UnpairedBPRQuery'
            params.append(self._FSwiftMLUtils.Parameters('F%sIn_Config' % (mt_type)))
            q_param = {'mt_type': mt_type, 'state': state,
                       'sc': self._FSwiftMLUtils.get_state_chart_name_for_mt_type(mt_type)
                       }

            '''Create Query object and set input and logic/strategy to create query'''
            queryObj = DataPrep.QueryCreator()
            queryObj.query_strategy_param = q_param
            queryObj.query_strategy_func = self._query_strategy
            self.create_query(params, queryObj, q_type)
            notifier.DEBUG("unidentified_bpr_query completed for %s" % mt_type)


def run_data_prep(context=''):
    try:
        notifier.INFO("-" * 100)
        notifier.INFO("Running Part-2 of Data Preps for FSwiftCashSettlementMX_T2In_DataPrep")
        dp_obj = FSwiftCashSettlementMXT2InDataPrepPart2()
        message_types = ['camt025_T2', 'camt029_T2', 'pacs004_T2', 'pacs002_T2', 'admi007_T2']
        states = 'Accepted'

        notifier.INFO("\nStep-1")
        notifier.INFO("Creating Business Process Queries")
        dp_obj.create_unidentified_bpr_query(message_types, state='Unpaired')
        notifier.INFO("Creation of Business Process Queries completed")

        notifier.INFO("\nStep-2")
        message_types = ['camt025_T2']
        states = 'Accepted'
        dp_obj.create_archive_task(message_types, states)
        message_types = ['camt029_T2']
        states = 'ForwardedToNextParty'
        dp_obj.create_archive_task(message_types, states)
        message_types = ['pacs004_T2']
        states = 'PaymentReturned'
        dp_obj.create_archive_task(message_types, states)
        message_types = ['pacs002_T2']
        states = 'SettlementCompleted'
        dp_obj.create_archive_task(message_types, states)
        message_types = ['admi007_T2']
        states = 'Paired'
        dp_obj.create_archive_task(message_types, states)

        notifier.INFO("\nStep-3")
        dp_obj.create_operation_permissions(message_types)

        notifier.INFO("\n")
        notifier.INFO("FSwiftCashSettlementMX_T2In_DataPrep_Part2 Part-2 is successfully executed.")
        notifier.INFO("-" * 100)
    except Exception as err:
        notifier.INFO("Exception in running FSwiftCashSettlementMX_T2In_DataPrep_Part2 DataPrep Part-2 %r:" % err,
                      exc_info=True)


#run_data_prep(context='SwiftMessagingSolution')

...

  FSwiftCashSettlementMX_T2Out_DataPrep
"""----------------------------------------------------------------------------
MODULE
    FSwiftCashSettlementMX_RTGS_TARGET2Out_DataPrep: Data preparation for MX-RTGS-TARGET2 Cash message
DESCRIPTION
    Data preparation for cash MX message.

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import FSwiftDataPreparation as DataPrep
notifier = DataPrep.notifier
import FCashSettlementMX_T2OutSc
import acm

class FSwiftCashSettlMXTARGET2OutDataPrep(DataPrep.FSwiftPreInstOutgoingDataPrep):
    ''' Class representing Data preparation for CashSettlement RTGS TARGET2 MX outgoing msgs.'''

    def create_state_chart(self):
        """Create state chart"""
        notifier.INFO("Creating State Charts")
        FCashSettlementMX_T2OutSc.create_sc()
        notifier.INFO("State Chart creation completed.")

    def create_archive_task(self, message_types, states, inorout='Out'):
        """This function create the archive task for given message types and states"""
        notifier.INFO("Creating Archiving tasks.")
        super(FSwiftCashSettlMXTARGET2OutDataPrep, self).create_archive_task(message_types, states, inorout=inorout)
        notifier.INFO("Creation of Archiving tasks completed")

    def create_operation_permissions(self, message_types, inorout='Out'):
        """This function create the operation permission for given message types"""
        notifier.INFO("Creating operation permissions.")
        super(FSwiftCashSettlMXTARGET2OutDataPrep, self).create_operation_permissions(message_types, inorout)
        notifier.INFO("Creation of operation permissions completed")
    
        
    def set_fparameters(self,regime):
        """
        To set the FParameters in the specific File that we get from GetExtension
        :param regime : List of regimes 
        """
        try:
            regime_value = ["'" + item_regime + "'" for item_regime in regime]
            ext_context = acm.FExtensionContext['+SwiftMessagingSolution']
            param_object = ext_context.GetExtension('FParameters', 'FObject', 'FRegimeConfig')
            template = param_object.Value()
            template.AtPut('RTGSRegime', regime_value)
            em = acm.FExtensionModule['FSwiftCashRTGS']
            em.AddExtension(param_object)
            em.Commit()
            notifier.INFO("Parameters set up successfully in FRegimeConfig")                  
        except AttributeError as error:
            raise Exception("Unable to set Parameter in FRegimeConfig")
        
    def create_regime(self,regime):
        """
        This function sets the choicelist in the Sub Network under party defination
        :param regime : List of regimes
        """
        notifier.INFO("Setting up FRegimeConfig Parameters")
        self.set_fparameters(regime)
        sub_network_types=[]
        try:
            for regime_index in range(len(regime)):
                d=dict()
                d['name']=regime[regime_index]
                d['description']='Sub network type'
                sub_network_types.append(d)
            self.create_choicelist(cl_name='Sub Network', cl_values=sub_network_types)
            notifier.INFO("Created successfully choice list in Sub Network")
        except Exception as err:
            notifier.ERROR("Failed to create choice list in Sub Network")
            

def run_data_prep(context='',regime=''):
    """This is the base function which will run to create the basic data prepration for outgoing messages."""
    try:
        notifier.INFO("-"*100)
        notifier.INFO("Running Data Prep for FSwiftCashSettlementMX_T2Out_DataPrep")
        dp_obj = FSwiftCashSettlMXTARGET2OutDataPrep()
        notifier.INFO("\nStep-1")
        dp_obj.create_state_chart()

        notifier.INFO("\nStep-2")
        message_types = ['pacs008_T2', 'pacs009_T2', 'camt050_T2', 'camt056_T2']
        state = 'Sent'
        dp_obj.create_archive_task(message_types, state, 'Out')

        notifier.INFO("\nStep-3")
        dp_obj.create_operation_permissions(message_types, 'Out')

        notifier.INFO("\nStep-4")
        dp_obj.create_regime(regime)
        notifier.INFO("\n")

        notifier.INFO("FSwiftCashSettlementMX_RTGS_TARGET2Out_DataPrep is successfully executed.")
        notifier.INFO("-"*100)
    except Exception as err:
        notifier.ERROR("Exception in running FSwiftCashSettlementMX_RTGS_TARGET2Out_DataPrep :%r" % err, exc_info=True)

# run_data_prep(context='SwiftMessagingSolution')

...

  FSwiftCashSettlementMXIn_DataPrep_Part1
"""----------------------------------------------------------------------------
MODULE:
    FSwiftCashSettlementMXIn_DataPrep_Part1

DESCRIPTION:
    Data preparation script for CashSettlement
    Script performs following tasks:
    A. create cash settlement  state chart
    B. create choice list and add infos
    C. data preperation for FExternal object
    D. create eligibility query
    E. create columns

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import FSwiftDataPreparation as DataPrep
import os
import acm, FCashSettlementInSCMX

notifier = DataPrep.notifier


class FSwiftCashSettlementMXInDataPrepPart1(DataPrep.FSwiftPreInstIncomingDataPrep):
    '''Class representing Data preparation for CashSettlementMX incoming msgs'''

    def create_state_chart(self):
        """Create state chart"""
        notifier.INFO("Creating State Charts")
        FCashSettlementInSCMX.create_sc()
        notifier.INFO("State Chart creation completed.")


    def adm_prepare_choicelist(self):
        '''Create Choice list required for Cash Settlement Conf'''
        notifier.INFO("Creating choice list.")
        swift_message_type = [{'name': 'camt059',
                               'description': 'Swift MX message type'
                               }]

        self.create_choicelist(cl_name='SwiftMessageType', cl_values=swift_message_type)
        notifier.INFO("Choice list creation completed")


    def create_columns(self, fileName, context, override_message_type_list=None):
        """This function create columns """
        notifier.INFO("Creating Columns")
        super(FSwiftCashSettlementMXInDataPrepPart1, self).create_columns(fileName, context,
                                                                              override_message_type_list)
        notifier.INFO("Creation of Columns completed")

    def _query_strategy(self, param):
        """This function define the query strategy for eligibility query"""
        query = acm.CreateFASQLQuery(acm.FSettlement, 'AND')
        node = query.AddOpNode('AND')
        
        multi_doc_node = node.AddOpNode('OR')
        message_type = 'camt057'
        multi_doc_node.AddAttrNodeString('ExternalObjects.IntegrationSubtype', message_type, 'RE_LIKE_NOCASE')
        # Backward compatibility. Handles the existing settlements.
        multi_doc_node.AddAttrNodeString('ExternalObjects.IntegrationSubtype', message_type.replace('camt0', ''),
                                         'RE_LIKE_NOCASE')
        node.AddAttrNodeEnum('Status', param.get('status'))
        
        node.AddAttrNodeString('CounterpartyAccountNetworkName', 'SWIFT', 'EQUAL')
        return query

    def create_eligibility_query(self, msg_type_list=[], status=None):

        """ Create ASQL query so as to find the eligible objects """

        notifier.DEBUG("Started Creating Eligibility Query for %r ...", msg_type_list)
        for mt_type in msg_type_list:
            params = []
            params.append(self._FSwiftMLUtils.Parameters('F%sIn_Config' % (mt_type)))
            q_type = 'EligibilityQuery'
            q_param = {'mt_type': mt_type, 'status': status}

            '''Create Query object and set input and logic/strategy to create query'''
            queryObj = DataPrep.QueryCreator()
            queryObj.query_strategy_param = q_param
            queryObj.query_strategy_func = self._query_strategy
            self.create_query(params, queryObj, q_type)
            notifier.DEBUG("Eligibility Query completed successfully")


def run_data_prep(context=''):
    try:
        notifier.INFO("-" * 100)
        notifier.INFO("Running Part-1 of Data Preps for FSwiftCashSettlementMXIn")
        dp_obj = FSwiftCashSettlementMXInDataPrepPart1()

        notifier.INFO("Step-1")
        dp_obj.create_state_chart()
        notifier.INFO("\n")

        notifier.INFO("\nStep-2")
        dp_obj.adm_prepare_choicelist()

        notifier.INFO("\nStep-3")
        status = ['Released', 'Acknowledged']
        notifier.INFO("Creating Eligibility Query")
        dp_obj.create_eligibility_query(['camt059'], status=status)
        notifier.INFO("Creation of Eligibility Query completed")

        notifier.INFO("\nStep-4")
        dp_obj.create_columns(os.path.basename(__file__), context, ['camt059'])
        notifier.INFO("\n")

        notifier.INFO("FSwiftCashSettlementMXIn_DataPrep Part-1 is successfully executed.")
        notifier.INFO("\n")
        notifier.INFO("Please restart Prime application before running FSwiftCashSettlementMXIn_DataPrep Part 2")
        notifier.INFO("-" * 100)
    except Exception as err:
        notifier.ERROR("Exception in running FSwiftCashSettlementMXIn DataPrep Part-1: %r" % err, exc_info=True)


run_data_prep(context='SwiftMessagingSolution')


...

  FSwiftCashSettlementMXIn_DataPrep_Part2
"""----------------------------------------------------------------------------
MODULE:
    FSwiftCashSettlementMXIn_DataPrep_Part2

DESCRIPTION:
    Data preparation script for CashSettlement
    Script performs following tasks:
    A. create unidentified business process query
    B. create archive tasks
    C. create operation permissions

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import acm
import FSwiftDataPreparation as DataPrep

notifier = DataPrep.notifier


class FSwiftCashSettlementMXInDataPrepPart2(DataPrep.FSwiftPostInstIncomingDataPrep):
    '''Class representing Data preparation for CashSettlementMX incoming msgs
    '''

    def create_archive_task(self, message_types, states):
        """This function create archive task"""
        notifier.INFO("Creating Archiving tasks.")
        super(FSwiftCashSettlementMXInDataPrepPart2, self).create_archive_task(message_types, states)
        notifier.INFO("Creation of Archiving tasks completed")

    def create_operation_permissions(self, message_types, inorout='In'):
        """This function creates operation permissions"""
        notifier.INFO("Creating operation permissions.")
        super(FSwiftCashSettlementMXInDataPrepPart2, self).create_operation_permissions(message_types, inorout)
        notifier.INFO("Creation of operation permissions completed")

    def _query_strategy(self, param={}):
        """This function defines the query strategy for eligibility query"""
        query = acm.CreateFASQLQuery(acm.FBusinessProcess, 'AND')
        node = query.AddOpNode('AND')

        if self._FSwiftMLUtils.get_acm_version() < 2018.2:
            node.AddAttrNodeString('CurrentStep.State.StateChart.Name', param.get('sc'), 'EQUAL')
            node.AddAttrNodeString('CurrentStep.State.Name', param.get('state'), 'EQUAL')
        else:
            node.AddAttrNodeString('StateChart.Name', param.get('sc'), 'EQUAL')
            node.AddAttrNodeString('CurrentStateName', param.get('state'), 'EQUAL')

        node.AddAttrNodeEnum('AdditionalInfo.SwiftMessageType', param.get('mt_type'))

        return query

    def create_unidentified_bpr_query(self, mt_types, state=None):
        '''This function created unidentified bpr query '''

        notifier.DEBUG("Started creating unidentified_bpr_query...")
        for mt_type in mt_types:
            params = []
            q_type = 'UnpairedBPRQuery'
            params.append(self._FSwiftMLUtils.Parameters('F%sIn_Config' % (mt_type)))
            q_param = {'mt_type': mt_type, 'state': state,
                       'sc': self._FSwiftMLUtils.get_state_chart_name_for_mt_type(mt_type)
                       }

            '''Create Query object and set input and logic/strategy to create query'''
            queryObj = DataPrep.QueryCreator()
            queryObj.query_strategy_param = q_param
            queryObj.query_strategy_func = self._query_strategy
            self.create_query(params, queryObj, q_type)
            notifier.DEBUG("unidentified_bpr_query completed for %s" % mt_type)


def run_data_prep(context=''):
    try:
        notifier.INFO("-" * 100)
        notifier.INFO("Running Part-2 of Data Preps for FSwiftCashSettlementMXIn_DataPrep")
        dp_obj = FSwiftCashSettlementMXInDataPrepPart2()
        message_types = ['camt059']
        states = 'Received'
        notifier.INFO("\nStep-1")
        notifier.INFO("Creating Business Process Queries")

        dp_obj.create_unidentified_bpr_query(message_types, state='Unpaired')
        notifier.INFO("Creation of Business Process Queries completed")
        notifier.INFO("\nStep-2")

        dp_obj.create_archive_task(message_types, states)

        notifier.INFO("\nStep-3")

        dp_obj.create_operation_permissions(message_types)

        notifier.INFO("\n")
        notifier.INFO("FSwiftCashSettlementMXIn_DataPrep Part-2 is successfully executed.")
        notifier.INFO("-" * 100)
    except Exception as err:
        notifier.INFO("Exception in running FSwiftCashSettlementMXIn_DataPrep DataPrep Part-2 %r:" % err,
                      exc_info=True)


run_data_prep(context='SwiftMessagingSolution')

...

  FSwiftCashSettlementMXOut_DataPrep
"""----------------------------------------------------------------------------
MODULE
    FSwiftCashSettlementMXOut_DataPrep: Data preparation for MX Cash message
DESCRIPTION
    Data preparation for cash MX message.

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import FSwiftDataPreparation as DataPrep
notifier = DataPrep.notifier


class FSwiftCashSettlementMXOutDataPrep(DataPrep.FSwiftPreInstOutgoingDataPrep):
    ''' Class representing Data preparation for CashSettlementMX outgoing msgs.'''

    def create_archive_task(self, message_types, states, inorout='Out'):
        notifier.INFO("Creating Archiving tasks.")
        super(FSwiftCashSettlementMXOutDataPrep, self).create_archive_task(message_types, states, inorout=inorout)
        notifier.INFO("Creation of Archiving tasks completed")

    def create_operation_permissions(self, message_types, inorout='Out'):
        notifier.INFO("Creating operation permissions.")
        super(FSwiftCashSettlementMXOutDataPrep, self).create_operation_permissions(message_types, inorout)
        notifier.INFO("Creation of operation permissions completed")



def run_data_prep(context=''):
    try:
        notifier.INFO("-"*100)
        notifier.INFO("Running Data Prep for FSwiftCashSettlementMXOut_DataPrep")
        notifier.INFO("\nStep-1")
        message_types = ['camt057', 'pacs009', 'pacs008', 'camt058']
        state = 'Acknowledged'
        dp_obj = FSwiftCashSettlementMXOutDataPrep()
        dp_obj.create_archive_task(message_types, state, 'Out')

        notifier.INFO("\nStep-2")
        dp_obj.create_operation_permissions(message_types, 'Out')
        notifier.INFO("\n")
        notifier.INFO("FSwiftCashSettlementMXOut_DataPrep is successfully executed.")
        notifier.INFO("-"*100)
    except Exception as err:
        notifier.ERROR("Exception in running FSwiftCashSettlementMXOut_DataPrep :%r" % err, exc_info=True)

run_data_prep(context='SwiftMessagingSolution')

...

  FSwiftCollateralIn_DataPrep_Part1
"""----------------------------------------------------------------------------
MODULE:
    FSwiftCollateralIn_DataPrep_Part1

DESCRIPTION:
    Data preparation script for FSwiftCollateralIn
        Scripts performs following tasks:
        A. creates FX trade confirmation state chart
        B. create choice lists and add infos
        C. create eligibility query
        d. create columns

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import acm
import FCollateralInSC
import FSwiftDataPreparation as DataPrep

notifier = DataPrep.notifier


class FSwiftCollateralInDataPrepPart1(DataPrep.FSwiftPreInstIncomingDataPrep):
    ''' '''

    def create_state_chart(self):
        notifier.INFO("Creating State Charts")
        FCollateralInSC.create_statechart()
        notifier.INFO("State Chart creation completed.")

    def adm_prepare_choicelist(self):
        notifier.INFO("Creating Choice list")
        swift_message_type = [
                           {'name': 'MT569', 'description': 'Swift message type'},
                           {'name': 'MT558', 'description': 'Swift message type'},
                           ]

        self.create_choicelist(cl_name='SwiftMessageType', cl_values=swift_message_type)
        notifier.INFO("Choice list creation completed")

    def adm_prepare_addinfo(self):
        notifier.INFO("Creating Additional Infos")
        common_list_of_addinfo = DataPrep.get_list_of_addInfo_to_add()
        self.create_addinfo(common_list_of_addinfo)
        notifier.INFO("Completed Additional Infos creation.")

    def _query_strategy(self, param):
        ''' '''
        query = acm.CreateFASQLQuery(acm.FBusinessProcess,'AND')
        node = query.AddOpNode('AND')

        node.AddAttrNodeString('StateChart.Name', param.get('sc'), 'EQUAL')
        node.AddAttrNodeString('CurrentStateName', param.get('state'), 'EQUAL')

        return query

    def create_eligibility_query(self, mt_type_list, sc_name, q_type='EligibilityQuery', state=None):
        ''' '''

        notifier.DEBUG("Started creating unidentified_bpr_query for %r ..." % mt_type_list)
        for mt_type in mt_type_list:
            params = []
            params.append(self._FSwiftMLUtils.Parameters('F%sIn_Config' % (mt_type)))
            tmp = {'state': state,
                   'sc': sc_name
                   }

            '''Create Query object and set input and logic/strategy to create query'''
            queryObj = DataPrep.QueryCreator()
            queryObj.query_strategy_param = tmp
            queryObj.query_strategy_func = self._query_strategy
            self.create_query(params, queryObj, q_type)
            notifier.DEBUG("unidentified_bpr_query completed for %s" % mt_type)


        
def run_data_prep(context=''):
    try:
        notifier.INFO("-"*100)
        notifier.INFO("Running Part-1 of Data Preps for FSwiftCollateralIn")
        dp_obj = FSwiftCollateralInDataPrepPart1()
        notifier.INFO("\nStep-1")
        dp_obj.create_state_chart()

        notifier.INFO("\nStep-2")
        dp_obj.adm_prepare_choicelist()
        dp_obj.adm_prepare_addinfo()

        notifier.INFO("\nStep-3")

        notifier.INFO("Creating Eligibility Query")

        dp_obj.create_eligibility_query(['MT569Derived'],'Margin Call Process',q_type='EligibilityQuery', state='Triparty Instruction Initiated')
        notifier.INFO("Creation of Eligibility Query completed")

        notifier.INFO("\n")
        notifier.INFO("FSwiftCollateralIn_DataPrep Part-1 is successfully executed.")
        notifier.INFO("\n")
        notifier.INFO("Please restart Prime application before running FSwiftCollateralIn_DataPrep Part 2")
        notifier.INFO("-"*100)
    except Exception as e:
        notifier.ERROR("Exception in running FSwiftCollateralIn DataPrep Part-1:%r" % e, exc_info=True)

...

  FSwiftCollateralIn_DataPrep_Part2
"""----------------------------------------------------------------------------
MODULE:
    FSwiftCollateralIn_DataPrep_Part2

DESCRIPTION:
    Data preparation script for FSwiftFXMMConfirmationIn
        Scripts performs following tasks:
        A. creates unidentified business process query
        B. create archive tasks
        C. create operation permissions

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import FSwiftDataPreparation as DataPrep

notifier = DataPrep.notifier


class FSwiftCollateralInDataPrepPart2(DataPrep.FSwiftPostInstIncomingDataPrep):
    ''' '''

    def create_archive_task(self, message_types, states, inorout='In'):
        notifier.INFO("Creating Archiving tasks...")
        super(FSwiftCollateralInDataPrepPart2, self).create_archive_task(message_types, states, inorout=inorout)
        notifier.INFO("Creation of Archiving tasks completed")

    def create_operation_permissions(self, message_types, inorout='In'):
        notifier.INFO("Creating operation permissions...")
        super(FSwiftCollateralInDataPrepPart2, self).create_operation_permissions(message_types, inorout)
        notifier.INFO("Creation of operation permissions completed")




def run_data_prep(context=''):
    try:
        notifier.INFO("-"*100)
        notifier.INFO("Running Part-2 of Data Preps for FSwiftCollateralIn")
        dp_obj = FSwiftCollateralInDataPrepPart2()
        notifier.INFO("\nStep-1")

        notifier.INFO("Creating Business Process Queries")

        archive_msg_type = ['MT569']
        dp_obj.create_archive_task(archive_msg_type, 'TradesGenerated')

        notifier.INFO("\nStep-3")
        dp_obj.create_operation_permissions(archive_msg_type)

        notifier.INFO("\n")
        notifier.INFO("FSwiftCollateralIn_DataPrep Part-2 is successfully executed.")
        notifier.INFO("-"*100)
    except Exception as e:
        notifier.ERROR("Exception in running FSwiftCollateralIn part-2 DataPrep"
                       "Part-2 :%r" % e, exc_info=True)


...

  FSwiftCollateralOut_DataPrep
"""----------------------------------------------------------------------------
MODULE:
    FSwiftCollateralOut_DataPrep

DESCRIPTION:
    Data preparation script for CollateralOut
    Script performs following tasks:
    A. creates Collateral settlement out state chart
    B. create archive tasks
    C. create operation permissions
    D. data preparation for FExternal object

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""

import FSwiftDataPreparation as DataPrep
import FCollateralOutSC
notifier = DataPrep.notifier


class FSwiftCollateralOutDataPrep(DataPrep.FSwiftPreInstOutgoingDataPrep):

    def create_state_chart(self):
        notifier.INFO("Creating State Charts...")
        FCollateralOutSC.create_collateral_out_sc()
        notifier.INFO("State Chart creation completed.")

    def create_archive_task(self, message_types, states, inorout='Out'):
        notifier.INFO("Creating Archiving tasks...")
        super(FSwiftCollateralOutDataPrep, self).create_archive_task(message_types, states, inorout=inorout)
        notifier.INFO("Creation of Archiving tasks completed")

    def create_operation_permissions(self, message_types, inorout='Out'):
        notifier.INFO("Creating operation permissions...")
        super(FSwiftCollateralOutDataPrep, self).create_operation_permissions(message_types, inorout)
        notifier.INFO("Creation of operation permissions completed")



def run_data_prep(context=''):
    try:
        notifier.INFO("-"*100)
        notifier.INFO("Running Data Prep for FSwiftCollateralOut")
        dp_obj = FSwiftCollateralOutDataPrep()
        notifier.INFO("\nStep-1")
        dp_obj.create_state_chart()

        notifier.INFO("\nStep-2")
        dp_obj.create_archive_task(['MT527'], 'Acknowledged')

        notifier.INFO("\nStep-3")
        msg_types_operation_permission = ['MT527']
        dp_obj.create_operation_permissions(msg_types_operation_permission)

        notifier.INFO("\n")
        notifier.INFO("FSwiftCollateralOut_DataPrep is successfully executed.")
        notifier.INFO("-"*100)
    except Exception as e:
        notifier.INFO("Exception in running FSwiftCollateralOut"
                      "DataPrep:%r" % e, exc_info=True)

...

  FSwiftCommodityIn_DataPrep_Part1
"""----------------------------------------------------------------------------
MODULE:
    FSwiftCommodityIn_DataPrep_Part1

DESCRIPTION:
    Data preparation script Part 1 for FSwiftCommodityConfirmationIn
        Scripts performs following tasks:
        A. Creates Commodity confirmation state chart
        B. Creates Additional Infos/Choicelist
        C. Creates Eligibility query
        D. Creates Column Definitions
     Note:
        Make sure that FSwiftSolutionBase and FSwiftCommodity extension modules are present
        in extension manager.

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import os
import acm
import FCommodityConfirmationInSC
import FSwiftDataPreparation as DataPrep

notifier = DataPrep.notifier


class FSwiftCommodityInDataPrepPart1(DataPrep.FSwiftPreInstIncomingDataPrep):
    ''' '''

    def create_state_chart(self):
        notifier.INFO("Creating State Charts")
        FCommodityConfirmationInSC.create_commodity_conf_in_sc()
        notifier.INFO("State Chart creation completed.")

    def adm_prepare_choicelist(self):
        notifier.INFO("Creating Choice list")
        swift_message_type = [{'name': 'MT600', 'description': 'Swift message type'},
                              {'name': 'MT620', 'description': 'Swift message type'}]

        self.create_choicelist(cl_name='SwiftMessageType', cl_values=swift_message_type)
        notifier.INFO("Choice list creation completed")

    def adm_prepare_addinfo(self):
        notifier.INFO("Creating Additional Infos")
        common_list_of_addinfo = DataPrep.get_list_of_addInfo_to_add()
        self.create_addinfo(common_list_of_addinfo)
        notifier.INFO("Additional Infos creation completed")


    def create_columns(self, fileName, context):
        notifier.INFO("Creating Columns")
        super(FSwiftCommodityInDataPrepPart1, self).create_columns(fileName, context)
        notifier.INFO("Creation of Columns completed")

    def query_strategy(self, param):
        ''' Write your own customize query logic and return query
            param = must be {} type
            return : query
        '''

        query = acm.CreateFASQLQuery(acm.FConfirmation, 'AND')
        node = query.AddOpNode('AND')
        multi_doc_node = node.AddOpNode('OR')
        multi_doc_node.AddAttrNodeString('ExternalObjects.IntegrationSubtype', param.get('mt_type'), 'RE_LIKE_NOCASE')
        # Backward compatibility. Handles the existing confirmations/settlements.
        multi_doc_node.AddAttrNodeString('ExternalObjects.IntegrationSubtype', param.get('mt_type').replace('MT', ''), 'RE_LIKE_NOCASE')
        node.AddAttrNodeEnum('Status', param.get('status'))
        '''Type should not be Cancellation'''
        node.AddAttrNodeEnum('Type', 'Cancellation').Not(True)
        return query

    def create_eligibility_query(self, mt_type_list=[], status=None):

        """ Create ASQL query so as to find the eligible objects """
        notifier.DEBUG("Started Creating Eligibility Query for %r ...", mt_type_list)
        for mt_type in mt_type_list:
            params = []
            params.append(self._FSwiftMLUtils.Parameters('F%sIn_Config' % (mt_type)))
            q_type = 'EligibilityQuery'
            tmp = {'mt_type': mt_type, 'status': 'Pending Matching'}

            '''Create Query object and set input and logic/strategy to create query'''
            queryObj = DataPrep.QueryCreator()
            queryObj.query_strategy_param = tmp
            queryObj.query_strategy_func = self.query_strategy
            ''' delegating query creation work to queryCreator classs via base class'''

            self.create_query(params, queryObj, q_type)
            notifier.DEBUG("Eligibility Query completed successfully")


def run_data_prep(context=''):

    """ Run the Data Prep """
    try:
        notifier.INFO(("-"*100))
        notifier.INFO("Running Part-1 of Data Preps for FSwiftCommodityConfirmationIn")
        dp = FSwiftCommodityInDataPrepPart1()
        notifier.INFO("\nStep-1")

        dp.create_state_chart()

        notifier.INFO("\nStep-2")
        dp.adm_prepare_choicelist()
        dp.adm_prepare_addinfo()

        notifier.INFO("\nStep-3")
        notifier.INFO("Creating Eligibility Query")
        dp.create_eligibility_query(['MT600', 'MT620'])
        notifier.INFO("Creation of Eligibility Query completed")

        notifier.INFO("\nStep-4")
        dp.create_columns(os.path.basename(__file__), context)

        notifier.INFO("\n")
        notifier.INFO("FSwiftCommodityConfirmationIn_DataPrep Part-1 is successfully executed.")
        notifier.INFO("\n")
        notifier.INFO("Please restart Prime application before running FSwiftCommodityConfirmationIn_DataPrep Part 2")
        notifier.INFO(("-"*100))
    except Exception as e:
        notifier.ERROR("Exception in running FSwiftCommodityConfirmationIn"
                      "DataPrep Part-1:%r" % e, exc_info=True)


...

  FSwiftCommodityIn_DataPrep_Part2
"""----------------------------------------------------------------------------
MODULE:
    FSwiftCommodityIn_DataPrep_Part2

DESCRIPTION:
    Data preparation script Part2 for FSwiftCommodityConfirmationIn
        Scripts performs following tasks:
        A. Create Unidentified business process query
        B. Create Archive Tasks
        C. Create Operations Permissions
     Note:
        Make sure that FSwiftSolutionBase and FSwiftCommodity extension modules are present
        in extension manager.

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import acm
import FSwiftDataPreparation as DataPrep

notifier = DataPrep.notifier


class FSwiftCommodityInDataPrepPart2(DataPrep.FSwiftPostInstIncomingDataPrep):
    ''' '''

    def create_archive_task(self, message_types, states, inorout='In'):
        notifier.INFO("Creating Archiving tasks")
        super(FSwiftCommodityInDataPrepPart2, self).create_archive_task(message_types, states, inorout='In')
        notifier.INFO("Creation of Archiving tasks completed")

    def create_operation_permissions(self, message_types, inorout='In'):
        notifier.INFO("Creating operation permissions")
        super(FSwiftCommodityInDataPrepPart2, self).create_operation_permissions(message_types, inorout)
        notifier.INFO("Creation of operation permissions completed")

    def query_strategy(self, param={}):
        ''' '''
        query = acm.CreateFASQLQuery(acm.FBusinessProcess, 'AND')
        node = query.AddOpNode('AND')

        if self._FSwiftMLUtils.get_acm_version() < 2018.2:
            node.AddAttrNodeString('CurrentStep.State.StateChart.Name', param.get('sc'), 'EQUAL')
            node.AddAttrNodeString('CurrentStep.State.Name', param.get('state'), 'EQUAL')
        else:
            node.AddAttrNodeString('StateChart.Name', param.get('sc'), 'EQUAL')
            node.AddAttrNodeString('CurrentStateName', param.get('state'), 'EQUAL')
        node.AddAttrNodeEnum('AdditionalInfo.SwiftMessageType', param.get('mt_type'))
        return query

    def create_unidentified_bpr_query(self, mt_types, state='Unpaired'):
        ''' '''
        notifier.DEBUG("Started creating unidentified_bpr_query...")

        for mt_type in mt_types:
            params = []
            q_type = 'UnpairedBPRQuery'
            params.append(self._FSwiftMLUtils.Parameters('F%sIn_Config' % (mt_type)))
            tmp = {'mt_type': mt_type, 'state': state,
                   'sc': self._FSwiftMLUtils.get_state_chart_name_for_mt_type(mt_type)
                   }

            '''Create Query object and set input and logic/strategy to create query'''
            queryObj = DataPrep.QueryCreator()
            queryObj.query_strategy_param = tmp
            queryObj.query_strategy_func = self.query_strategy
            ''' delegating query creation work to queryCreator classs via super class'''

            self.create_query(params, queryObj, q_type)
            notifier.DEBUG("unidentified_bpr_query completed for %s" % mt_type)


def run_data_prep(context=''):
    """ Run Data Prep """
    try:
        notifier.INFO(("-"*100))
        notifier.INFO("Running Part-2 of Data Preps for FSwiftCommodityConfirmationIn")
        dp = FSwiftCommodityInDataPrepPart2()
        notifier.INFO("\nStep-1")
        notifier.INFO("Creating Business Process Queries")
        dp.create_unidentified_bpr_query(['MT600', 'MT620'], state='Unpaired')
        notifier.INFO("Creation of Business Process Queries completed")

        notifier.INFO("\nStep-2")

        dp.create_archive_task(['MT600', 'MT620'], states='Matched', inorout='In')

        notifier.INFO("\nStep-3")
        dp.create_operation_permissions(['MT600', 'MT620'])

        notifier.INFO("\n")
        notifier.INFO("FSwiftCommodityConfirmationIn Part-2 is successfully executed.")
        notifier.INFO(("-"*100))
    except Exception as e:
        notifier.INFO("Exception in running FSwiftCommodityConfirmationIn"
                      "DataPrep Part-2:%r" % e, exc_info=True)


...

  FSwiftCommodityOut_DataPrep
"""----------------------------------------------------------------------------
MODULE:
    FSwiftCommodityOut_DataPrep

DESCRIPTION:
    Data preparation script for FSwiftCommoditySettlementOut, FSwiftCommodityConfirmationOut
        Scripts performs following tasks:
        A. Creates Commodity confirmation state chart
        B. Creates Archiving Tasks
        C. Create Operations permissions
     Note:
        Make sure that FSwiftSolutionBase and FSwiftCommodity extension modules are present
        in extension manager.

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import FCommodityConfirmationOutSC
import FCommoditySettlementOutSC
import FSwiftDataPreparation as DataPrep

notifier = DataPrep.notifier
STATES = 'Acknowledged'
inorout = 'Out'


class FSwiftCommodityOutDataPrep(DataPrep.FSwiftPreInstOutgoingDataPrep):

    def create_state_chart(self):
        notifier.INFO("Creating State Charts")
        FCommodityConfirmationOutSC.create_commodity_conf_out_sc()
        FCommodityConfirmationOutSC.create_free_format_out_sc()
        notifier.INFO("State Chart creation completed.")

    def create_archive_task(self, message_types, states, inorout='Out'):
        notifier.INFO("Creating Archiving tasks")
        super(FSwiftCommodityOutDataPrep, self).create_archive_task(message_types, states, inorout=inorout)
        notifier.INFO("Creation of Archiving tasks completed")

    def create_operation_permissions(self, message_types, inorout='Out'):
        notifier.INFO("Creating operation permissions")
        super(FSwiftCommodityOutDataPrep, self).create_operation_permissions(message_types, inorout)
        notifier.INFO("Creation of operation permissions completed")

    def adm_prepare_choice_list(self):
        ''' '''
        notifier.INFO("Creating Choice list")
        cmdty_delivery_details = [{'name': 'CFR', 'description': 'Cost and Freight'},
                                  {'name': 'CIF', 'description': 'Cost, Insurance, and Freight'},
                                  {'name':'CIP', 'description':'Carriage and Insurance Paid'},
                                  {'name':'CPT',    'description':'Carriage Paid To'},
                                  {'name':'DAF',    'description':'Delivered At Frontier'},
                                    {'name':'DDP',    'description':'Delivered Duty Paid'},
                                    {'name':'DDU',    'description':'Delivered Duty Unpaid'},
                                    {'name':'DEQ',    'description':'Delivered Ex Quay'},
                                    {'name':'DES',    'description':'Delivered Ex Ship'},
                                    {'name':'DTD',    'description':'Door To Door'},
                                    {'name':'EXW',    'description':'EX Works'},
                                    {'name':'FAS',    'description':'Free Alongside Ship'},
                                    {'name':'FCA',    'description':'Free Carrier'},
                                    {'name':'FOB',    'description':'Free On Board'},
                                    {'name':'LOC',    'description':'LOCO London'},
                                    {'name':'OTH',    'description':'Other'}
                                ]

        cl_name = 'CmdtyDlvryDtls'
        try:
            self.create_choicelist(cl_name, cl_values=cmdty_delivery_details)
        except Exception as e:
            notifier.INFO(("Exception in adm_prepare_addinfo : %s" % str(e)))
        else:
            notifier.INFO("Creation of Choice completed")

    def adm_prepare_addinfo(self):
        ''' '''
        notifier.INFO("Creating  Additional Infos.")
        add_info_spec_cmdty_dlvry_dtls = {
            'FieldName': 'CommodityDlvryDtls',
            'Description': 'CmdtyDlvryDtls',
            'Default': '',
            'TypeGroup': 'RecordRef',
            'Type': 'ChoiceList',
            'Table': 'Trade',
        }

        add_info_spec_is_cmdty_alloc_dtls = {
            'FieldName': 'IsCmdtyAllocated',
            'Description': 'Is Commodity Allocated',
            'Default': '',
            'TypeGroup': 'Standard',
            'Type': 'Boolean',
            'Table': 'Account'
        }

        common_list_of_addinfo = DataPrep.get_list_of_addInfo_to_add()
        
        add_info_spec = [add_info_spec_cmdty_dlvry_dtls,
                         add_info_spec_is_cmdty_alloc_dtls] + common_list_of_addinfo
        try:
            self.create_addinfo(add_info_spec)
        except Exception as e:
            notifier.INFO(("Exception in adm_prepare_addinfo : %s" % str(e)))
        else:
            notifier.INFO("Creation of Additional Infos completed")

class FSwiftCommodityOutDataPrepSettlement(FSwiftCommodityOutDataPrep):
    """ """
    
    def create_state_chart(self):
        notifier.INFO("Creating State Charts")
        FCommoditySettlementOutSC.create_commodity_sett_out_sc()
        FCommoditySettlementOutSC.create_free_format_out_sc()
        notifier.INFO("State Chart creation completed.")

def run_data_prep_confirmtion(context=''):
    """ run the data prep for confirmations"""
    try:
        message_types_operation_permission = ['MT600', 'MT699', 'MT620']
        message_type_archive_task = ['MT600', 'MT699', 'MT620']
        notifier.INFO(("-"*100))
        notifier.INFO("Running Data Prep for FSwiftCommodityConfirmationOut")
        dp_confirmtion = FSwiftCommodityOutDataPrep()
        notifier.INFO("\nStep-1")
        dp_confirmtion.create_state_chart()

        notifier.INFO("\nStep-2")

        dp_confirmtion.create_archive_task(message_type_archive_task, STATES, inorout)
        notifier.INFO("\nStep-3")

        dp_confirmtion.create_operation_permissions(message_types_operation_permission, inorout)
        notifier.INFO("\nStep-4")
        dp_confirmtion.adm_prepare_addinfo()

        notifier.INFO("\nStep-5")
        dp_confirmtion.adm_prepare_choice_list()

        notifier.INFO("\n")
        notifier.INFO("FSwiftCommodityConfirmationOut_DataPrep is successfully executed.")
        notifier.INFO(("-"*100))
    except Exception as e:
        notifier.ERROR("Exception in running FSwiftCommodityConfirmationOut DataPrep:%r" %e , exc_info=True)


def run_data_prep_settlement(context=''):
    """ run the data prep for settlements"""
    try:
        message_type_archive_task = ['MT604', 'MT605']
        message_types_operation_permission = ['MT604', 'MT605']
        notifier.INFO(("-"*100))
        notifier.INFO("Running Data Prep for FSwiftCommoditySettlementOut")
        dp_settlement = FSwiftCommodityOutDataPrepSettlement()

        notifier.INFO("\nStep-1")
        dp_settlement.create_state_chart()

        notifier.INFO("\nStep-2")
        dp_settlement.create_archive_task(message_type_archive_task, STATES, inorout)

        notifier.INFO("\nStep-3")
        dp_settlement.create_operation_permissions(message_types_operation_permission, inorout)

        notifier.INFO("\n")
        notifier.INFO("FSwiftCommoditySettlementOut_DataPrep is successfully executed.")
        notifier.INFO(("-"*100))
    except Exception as e:
        notifier.ERROR("Exception in running FSwiftCommoditySettlementOut DataPrep:%r" % e, exc_info=True)

def run_data_prep(context=''):
    """ run the data preps"""
    run_data_prep_confirmtion(context)
    run_data_prep_settlement(context)



...

  FSwiftCorporateActionsIn_DataPrep_Part1
"""----------------------------------------------------------------------------
MODULE:
    FSwiftCorporateActionsIn_DataPrep_Part1

DESCRIPTION:
    Data preparation script for FCorporateAction
    Scripts performs following tasks:
    A. creates corporate action state chart
    B. create choice lists and add infos
    C. create columns

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import FCorporateActionsInSC
import FSwiftDataPreparation as DataPrep
import os
notifier = DataPrep.notifier


class FSwiftCorporateActionsInDataPrepPart1(DataPrep.FSwiftPreInstIncomingDataPrep):

    def create_state_chart(self):
        notifier.INFO("Creating State Charts")
        FCorporateActionsInSC.create_corporate_action_sc()
        notifier.INFO("State Chart creation completed")

    def adm_prepare_choicelist(self):
        notifier.INFO("Creating Choice list")
        swift_message_type = [{'name': 'MT564',
                               'description': 'Swift message type'},
                              {'name': 'MT568',
                               'description': 'Swift message type'}
                              ]

        self.create_choicelist(cl_name='SwiftMessageType', cl_values=swift_message_type)
        notifier.INFO("Creation of Choice completed")

    def adm_prepare_addinfo(self):
        notifier.INFO("Creating Additional Infos")
        common_addinfo_list = DataPrep.get_list_of_addInfo_to_add()
        self.create_addinfo(common_addinfo_list)
        notifier.INFO("Creation of Additional Infos")


    def create_columns(self, fileName, context):
        notifier.INFO("Creating Columns")
        super(FSwiftCorporateActionsInDataPrepPart1, self).create_columns(fileName, context)
        notifier.INFO("creation of Columns completed")


def run_data_prep(context=''):
    try:
        notifier.INFO("-"*100)
        notifier.INFO("Running Part-1 of Data Preps for FSwiftCorporateActionsIn")
        dp_obj = FSwiftCorporateActionsInDataPrepPart1()

        notifier.INFO("\nStep-1")
        dp_obj.create_state_chart()

        notifier.INFO("\nStep-2")
        dp_obj.adm_prepare_choicelist()
        dp_obj.adm_prepare_addinfo()


        notifier.INFO("\nStep-3")
        dp_obj.create_columns(os.path.basename(__file__), context)

        notifier.INFO("\n")
        notifier.INFO("FSwiftCorporateActionsIn_DataPrep Part-1 is successfully executed.")
        notifier.INFO("\n")
        notifier.INFO("Please restart Prime application before running FSwiftCorporateActionsIn_DataPrep Part 2")
        notifier.INFO("-"*100)
    except Exception as err:
        notifier.ERROR("Exception in running FSwiftCorporateActionsIn"
                       "DataPrep Part-1:%r" % err, exc_info=True)


...

  FSwiftCorporateActionsIn_DataPrep_Part2
"""----------------------------------------------------------------------------
MODULE:
    FSwiftCorporateActionsIn_DataPrep_Part2

DESCRIPTION:
    Data preparation script for FCorporateAction
    Scripts performs following tasks:
    A. creates Unidentified business process query
    B. creates archive tasks
    C. create operation permissions

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import acm
import FSwiftDataPreparation as DataPrep
notifier = DataPrep.notifier


class FSwiftCorporateActionsInDataPrepPart2(DataPrep.FSwiftPostInstIncomingDataPrep):
    '''
    '''
    def create_archive_task(self, message_types, states, inorout='In'):
        notifier.INFO("Creating Archiving tasks...")
        super(FSwiftCorporateActionsInDataPrepPart2, self).create_archive_task(message_types, states, inorout=inorout)
        notifier.INFO("Creation of Archiving tasks completed")

    def create_operation_permissions(self, message_types, inorout='In'):
        notifier.INFO("Creating operation permissions...")
        super(FSwiftCorporateActionsInDataPrepPart2, self).create_operation_permissions(message_types, inorout)
        notifier.INFO("Creation of operation permissions completed")

    def _query_strategy(self, param={}):
        ''' '''
        query = acm.CreateFASQLQuery(acm.FBusinessProcess, 'AND')
        node = query.AddOpNode('AND')
        node.AddAttrNodeEnum('AdditionalInfo.SwiftMessageType', param.get('mt_type'))
        if self._FSwiftMLUtils.get_acm_version() < 2018.2:
            node.AddAttrNodeString('CurrentStep.State.StateChart.Name', param.get('sc'), 'EQUAL')
            node.AddAttrNodeString('CurrentStep.State.Name', param.get('state'), 'EQUAL')
        else:
            node.AddAttrNodeString('StateChart.Name', param.get('sc'), 'EQUAL')
            node.AddAttrNodeString('CurrentStateName', param.get('state'), 'EQUAL')

        return query

    def create_unidentified_bpr_query(self, mt_types, state=None):
        ''' '''

        notifier.DEBUG("Started creating unidentified_bpr_query...")
        for mt_type in mt_types:
            params = []
            q_type = 'UnpairedBPRQuery'
            params.append(self._FSwiftMLUtils.Parameters('F%sIn_Config' % (mt_type)))
            tmp = {'mt_type': mt_type, 'state': state,
                   'sc': self._FSwiftMLUtils.get_state_chart_name_for_mt_type(mt_type)
                   }

            '''Create Query object and set input and logic/strategy to create query'''
            queryObj = DataPrep.QueryCreator()
            queryObj.query_strategy_param = tmp
            queryObj.query_strategy_func = self._query_strategy
            self.create_query(params, queryObj, q_type)
            notifier.DEBUG("unidentified_bpr_query completed for %s" % mt_type)


def run_data_prep(context=''):
    try:
        notifier.INFO("-"*100)
        notifier.INFO("Running Part-2 of Data Preps for FSwiftCorporateActionsIn")
        message_types = ['MT564', 'MT568']

        dp_obj = FSwiftCorporateActionsInDataPrepPart2()
        notifier.INFO("\nStep-1")
        notifier.INFO("Creating Business Process Queries")
        dp_obj.create_unidentified_bpr_query(message_types)
        notifier.INFO("Creation of Business Process Queries completed")
        message_types = ['MT564']
        states = 'Generated'
        notifier.INFO("\nStep-2")
        dp_obj.create_archive_task(message_types, states)
        message_types = ['MT568']
        states = 'Paired'
        notifier.INFO("\nStep-2")
        dp_obj.create_archive_task(message_types, states)

        notifier.INFO("\nStep-3")
        dp_obj.create_operation_permissions(message_types)

        notifier.INFO("\n")
        notifier.INFO("FSwiftCorporateActionsIn_DataPrep Part-2 is successfully executed.")
        notifier.INFO("-"*100)
    except Exception as e:
        notifier.ERROR("Exception in running FSwiftCorporateActionsIn DataPrep"
                       "Part-2:%r" % e, exc_info=True)


...

  FSwiftCustomMessageIn_DataPrep_Part1
"""----------------------------------------------------------------------------
MODULE:
    FSwiftCustomMessageIn_DataPrep_Part1

DESCRIPTION:
    Data preparation script for SwiftCustomMessageIn
    Script performs following tasks:
    A. creates custom message state chart
    B. create choice list and add infos
    C. data preparation for FExternal Object
    D. create columns

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import FCustomMessageInSC
import FSwiftDataPreparation as DataPrep
import os
import acm
notifier = DataPrep.notifier


class FSwiftCustomMessageInDataPrepPart1(DataPrep.FSwiftPreInstIncomingDataPrep):

    def create_state_chart(self):
        notifier.INFO("Creating State Charts")
        FCustomMessageInSC.create_custom_message_sc()
        notifier.INFO("State Chart creation completed.")

    def adm_prepare_choicelist(self):
        notifier.INFO("Creating choice list.")
        swift_message_type = [{'name': 'MTXXX',
                               'description': 'Swift message type'}]

        self.create_choicelist(cl_name='SwiftMessageType', cl_values=swift_message_type)
        notifier.INFO("Choice list creation completed")

    def adm_prepare_addinfo(self):
        notifier.INFO("Creating Additional Infos.")
        common_list_of_addinfo = DataPrep.get_list_of_addInfo_to_add()
        self.create_addinfo(common_list_of_addinfo)
        notifier.INFO("Additional Infos creation completed.")


    def create_columns(self, fileName, context):
        notifier.INFO("Creating Columns...")
        super(FSwiftCustomMessageInDataPrepPart1, self).create_columns(fileName, context)
        notifier.INFO("Columns creation completed")

    def _query_strategy(self, param):

        query = acm.CreateFASQLQuery(acm.FSettlement, 'AND')
        node = query.AddOpNode('AND')
        multi_doc_node = node.AddOpNode('OR')
        multi_doc_node.AddAttrNodeString('ExternalObjects.IntegrationSubtype', param.get('mt_type'), 'RE_LIKE_NOCASE')
        # Backward compatibility. Handles the existing confirmations/settlements.
        multi_doc_node.AddAttrNodeString('ExternalObjects.IntegrationSubtype', param.get('mt_type').replace('MT', ''), 'RE_LIKE_NOCASE')
        node.AddAttrNodeEnum('Status', param.get('status'))
        return query

    def create_eligibility_query(self, msg_type_list=[], status=None):

        """ Create ASQL query so as to find the eligible objects """

        notifier.DEBUG("Started Creating Eligibility Query for %r ...", msg_type_list)
        for mt_type in msg_type_list:
            params = []
            params.append(self._FSwiftMLUtils.Parameters('F%sIn_Config' % (mt_type)))
            q_type = 'EligibilityQuery'
            q_param = {'mt_type': 'MTYYY', 'status': status }

            '''Create Query object and set input and logic/strategy to create query'''
            queryObj = DataPrep.QueryCreator()
            queryObj.query_strategy_param = q_param
            queryObj.query_strategy_func = self._query_strategy
            self.create_query(params, queryObj, q_type)
            notifier.DEBUG("Eligibility Query completed successfully")

    def add_custom_package_mt_name(self):
        self._FSwiftMLUtils.message_types["CustomMessage"] = ['MTXXX']


def run_data_prep(context=''):
    try:
        notifier.INFO("-"*100)
        notifier.INFO("Running Part-1 of Data Preps for FSwiftCustomMessageIn")
        dp_obj = FSwiftCustomMessageInDataPrepPart1()
        notifier.INFO("\nStep-1")
        dp_obj.create_state_chart()

        notifier.INFO("\nStep-2")
        dp_obj.adm_prepare_choicelist()
        dp_obj.adm_prepare_addinfo()

        notifier.INFO("\nStep-3")
        notifier.INFO("Creating Eligibility Query")
        dp_obj.create_eligibility_query(['MTXXX'], 'Acknowledged')
        notifier.INFO("Creation of Eligibility Query completed")
        notifier.INFO("\nStep-4")

        dp_obj.add_custom_package_mt_name()
        dp_obj.create_columns(os.path.basename(__file__), context)

        notifier.INFO("\n")
        notifier.INFO("FSwiftCustomMessageIn Part-1 is successfully executed.")
        notifier.INFO("\n")
        notifier.INFO("Please restart Prime application before running FSwiftCustomMessageIn Part 2")
        notifier.INFO("-"*100)
    except Exception as e:
        notifier.ERROR("Exception in running FSwiftCustomMessageIn"
                       "DataPrep Part-1:%r" % e, exc_info=True)

run_data_prep_flag = False
# Call the following run to the data preps. The function optionally accepts the name of a context.
# run_data_prep() # run_data_prep('SwiftMessagingSolution')
# run_data_prep = True
if not run_data_prep_flag:
    notifier.INFO("The data prep1 is not executed.")

...

  FSwiftCustomMessageIn_DataPrep_Part2
"""----------------------------------------------------------------------------
MODULE:
    FSwiftCustomMessageIn_DataPrep_Part2

DESCRIPTION:
    Data preparation script for SecSettlementInstrIn
    Script performs following tasks:
    A. create unidentified busioness process query
    B. create archive tasks
    C. create operation permissions

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import acm
import FSwiftDataPreparation as DataPrep
notifier = DataPrep.notifier


class FSwiftCustomMessageInDataPrepPart2(DataPrep.FSwiftPostInstIncomingDataPrep):

    def create_archive_task(self, message_types, states, inorout='In'):
        notifier.INFO("Creating Archiving tasks.")
        super(FSwiftCustomMessageInDataPrepPart2, self).create_archive_task(message_types, states, inorout='In')
        notifier.INFO("Creation of Archiving tasks completed")

    def create_operation_permissions(self, message_types, inorout='In'):
        notifier.INFO("Creating operation permissions.")
        super(FSwiftCustomMessageInDataPrepPart2, self).create_operation_permissions(message_types, inorout)
        notifier.INFO("Creation of operation permissions completed")

    def _query_strategy(self, param):
        ''' '''
        query = acm.CreateFASQLQuery(acm.FBusinessProcess,'AND')
        node = query.AddOpNode('AND')

        if self._FSwiftMLUtils.get_acm_version() < 2018.2:
            node.AddAttrNodeString('CurrentStep.State.StateChart.Name',
                                   param.get('sc'), 'EQUAL')
            node.AddAttrNodeString('CurrentStep.State.Name',
                                   param.get('state'), 'EQUAL')
        else:
            node.AddAttrNodeString('StateChart.Name',
                                   param.get('sc'), 'EQUAL')
            node.AddAttrNodeString('CurrentStateName',
                                   param.get('state'), 'EQUAL')

        node.AddAttrNodeEnum('AdditionalInfo.SwiftMessageType', param.get('mt_type'))
        return query

    def create_unidentified_bpr_query(self, mt_type_list, state='Unpaired'):
        ''' '''
        notifier.DEBUG("Started creating unidentified_bpr_query for %r ..." %
                      mt_type_list)

        for mt_type in mt_type_list:
            params = []
            q_type = 'UnpairedBPRQuery'
            params.append(self._FSwiftMLUtils.Parameters('F%sIn_Config' % (mt_type)))
            tmp = {'mt_type': mt_type, 'state': state,
                   'sc': self._FSwiftMLUtils.get_state_chart_name_for_mt_type(mt_type)
                   }

            '''Create Query object and set input and logic/strategy to create query'''
            queryObj = DataPrep.QueryCreator()
            queryObj.query_strategy_param = tmp
            queryObj.query_strategy_func = self._query_strategy
            self.create_query(params, queryObj, q_type)
            notifier.DEBUG("unidentified_bpr_query completed for %s" % mt_type)


def run_data_prep(context=''):
    try:
        notifier.INFO("-"*100)
        notifier.INFO("Running Part-2 of Data Preps for FSwiftCustomMessageIn_DataPrep_Part2")
        dp_obj = FSwiftCustomMessageInDataPrepPart2()
        message_types = ['MTXXX']
        STATES = 'Matched'
        notifier.INFO("\nStep-1")
        notifier.INFO("Creating Business Process Queries")
        dp_obj.create_unidentified_bpr_query(message_types)
        notifier.INFO("Creation of Business Process Queries completed")
        
        notifier.INFO("\nStep-2")
        dp_obj.create_archive_task(message_types, STATES)
        
        notifier.INFO("\nStep-3")
        dp_obj.create_operation_permissions(message_types)

        notifier.INFO("\n")
        notifier.INFO("FSwiftCustomMessageIn_DataPrep_Part2 Part-2 is successfully executed.")
        notifier.INFO("-"*100)
    except Exception as err:
        notifier.ERROR("Exception in running FSwiftCustomMessageIn_DataPrep_Part2"
                       "DataPrep Part-2 : %r" % err, exc_info=True)

run_data_prep_flag = False
# Call the following run to the data preps. The function optionally accepts the name of a context.
# run_data_prep() # run_data_prep('SwiftMessagingSolution')
# run_data_prep = True
if not run_data_prep_flag:
    notifier.INFO("The data prep2 is not executed.")


...

  FSwiftCustomMessageOut_DataPrep
"""----------------------------------------------------------------------------
MODULE:
    FSwiftCustomMessageOut_DataPrep

DESCRIPTION:
    Data preparation script for CustomMessageOut
    Script performs following tasks:
    A. creates out state chart
    B. create operation permissions
    C. data preparation for FExternal object

VERSION: 3.6.3-0.5.6048

USAGE: Replace MTXXX with MTRequiredMessageType e.g. MT210

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import FSwiftCustomMessageSettlementOutSC
import FSwiftDataPreparation as DataPrep

notifier = DataPrep.notifier


class FSwiftCustomMessageOutDataPrep(DataPrep.FSwiftPreInstOutgoingDataPrep):

    def create_state_chart(self):
        notifier.INFO("Creating State Charts...")
        FSwiftCustomMessageSettlementOutSC.create_custom_message_sett_out_sc()
        notifier.INFO("State Chart creation completed.")

    def create_operation_permissions(self, message_types, inorout='Out'):
        notifier.INFO("Creating operation permissions.")
        super(FSwiftCustomMessageOutDataPrep, self).create_operation_permissions(message_types, inorout)
        notifier.INFO("Creation of operation permissions completed")



def run_data_prep(context=''):
    try:
        notifier.INFO("-" * 100)
        notifier.INFO("Running Data Prep for FSwiftCustomMessageOut_DataPrep")
        dp_obj = FSwiftCustomMessageOutDataPrep()
        notifier.INFO("\nStep-1")
        dp_obj.create_state_chart()

        notifier.INFO("\nStep-2")
        msg_types_operation_permission = ['MTXXX']
        dp_obj.create_operation_permissions(msg_types_operation_permission)
        notifier.INFO("\n")
        notifier.INFO("FSwiftCustomMessageOut_DataPrep is successfully executed.")
        notifier.INFO("-" * 100)
    except Exception as e:
        notifier.ERROR("Exception in running FSwiftCustomMessageOut"
                       "DataPrep:%r" % e, exc_info=True)

run_data_prep_flag = False
# Call the following run to the data preps. The function optionally accepts the name of a context.
# run_data_prep() # run_data_prep('SwiftMessagingSolution')
# run_data_prep = True
if not run_data_prep_flag:
    notifier.INFO("The data prep is not executed.")

...

  FSwiftFXMMConfirmationIn_DataPrep_Part1
"""----------------------------------------------------------------------------
MODULE:
    FSwiftFXMMConfirmationIn_DataPrep_Part1

DESCRIPTION:
    Data preparation script for FSwiftFXMMConfirmationIn
        Scripts performs following tasks:
        A. creates FX trade confirmation state chart
        B. create choice lists and add infos
        C. create eligibility query
        d. create columns

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import acm
import FFXMMConfirmationInSC
import FSwiftDataPreparation as DataPrep
import os

notifier = DataPrep.notifier


class FSwiftFXMMConfirmationInDataPrepPart1(DataPrep.FSwiftPreInstIncomingDataPrep):
    ''' '''

    def create_state_chart(self):
        notifier.INFO("Creating State Charts")
        FFXMMConfirmationInSC.create_fx_trade_conf_sc()
        notifier.INFO("State Chart creation completed.")

    def adm_prepare_choicelist(self):
        notifier.INFO("Creating Choice list")
        swift_message_type = [
                           {'name': 'MT300', 'description': 'Swift message type'},
                           {'name': 'MT305', 'description': 'Swift message type'},
                           {'name': 'MT320', 'description': 'Swift message type'},
                           {'name': 'MT330', 'description': 'Swift message type'},
                            {'name': 'MT395', 'description': 'Swift message type'},
                           {'name': 'MT399', 'description': 'Swift message type'}
                           ]

        self.create_choicelist(cl_name='SwiftMessageType', cl_values=swift_message_type)
        notifier.INFO("Choice list creation completed")

    def adm_prepare_addinfo(self):
        notifier.INFO("Creating Additional Infos")
        common_list_of_addinfo = DataPrep.get_list_of_addInfo_to_add()
        self.create_addinfo(common_list_of_addinfo)
        notifier.INFO("Completed Additional Infos creation.")


    def create_columns(self, fileName, context):
        notifier.INFO("Creating Columns.")
        super(FSwiftFXMMConfirmationInDataPrepPart1, self).create_columns(fileName, context)
        notifier.INFO("Columns creation completed")

    def _narrative_query_strategy(self, param):
        ''' '''
        query = acm.CreateFASQLQuery(acm.FConfirmation, 'AND')
        node = query.AddOpNode('AND')
        node.AddAttrNodeEnum('Status', param.get('status'))

        '''Type should not be Cancellation'''
        node.AddAttrNodeEnum('Type', 'Cancellation').Not(True)
        node = query.AddOpNode('OR')
        SUPPORTED_MSG_TYPE = ['MT300', 'MT305', 'MT320', 'MT330']
        for each in SUPPORTED_MSG_TYPE:
            node.AddAttrNodeString('ExternalObjects.IntegrationSubtype', each, 'RE_LIKE_NOCASE')
            # Backward compatibility. Handles the existing confirmations/settlements.
            node.AddAttrNodeString('ExternalObjects.IntegrationSubtype', each.replace('MT', ''), 'RE_LIKE_NOCASE')
        return query

    def _chaser_query_strategy(self, param):
        ''' '''
        query = acm.CreateFASQLQuery(acm.FConfirmation, 'AND')
        node = query.AddOpNode('AND')

        '''Type should not be Cancellation'''
        node.AddAttrNodeEnum('Type', 'Cancellation').Not(True)
        node = query.AddOpNode('OR')
        SUPPORTED_MSG_TYPE = ['MT300', 'MT305', 'MT320', 'MT330']
        for each in SUPPORTED_MSG_TYPE:
            node.AddAttrNodeString('ExternalObjects.IntegrationSubtype', each, 'RE_LIKE_NOCASE')
            # Backward compatibility. Handles the existing confirmations/settlements.
            node.AddAttrNodeString('ExternalObjects.IntegrationSubtype', each.replace('MT', ''), 'RE_LIKE_NOCASE')

        return query

    def _query_strategy(self, param):

        query = acm.CreateFASQLQuery(acm.FConfirmation,'AND')
        node = query.AddOpNode('AND')
        multi_doc_node = node.AddOpNode('OR')
        multi_doc_node.AddAttrNodeString('ExternalObjects.IntegrationSubtype', param.get('mt_type'), 'RE_LIKE_NOCASE')
        # Backward compatibility. Handles the existing confirmations/settlements.
        multi_doc_node.AddAttrNodeString('ExternalObjects.IntegrationSubtype', param.get('mt_type').replace('MT', ''), 'RE_LIKE_NOCASE')
        node.AddAttrNodeEnum('Status', param.get('status'))
        '''Type should not be Cancellation'''
        node.AddAttrNodeEnum('Type', 'Cancellation').Not(True)
        return query

    def create_eligibility_query(self, msg_type_list=[], status=None):

        """ Create ASQL query so as to find the eligible objects """

        notifier.DEBUG("Started Creating Eligibility Query for %r ...", msg_type_list)
        for mt_type in msg_type_list:
            params = []
            params.append(self._FSwiftMLUtils.Parameters('F%sIn_Config' % (mt_type)))
            q_type = 'EligibilityQuery'
            tmp = {'mt_type': mt_type, 'status': status }

            '''Create Query object and set input and logic/strategy to create query'''
            queryObj = DataPrep.QueryCreator()
            queryObj.query_strategy_param = tmp
            queryObj.query_strategy_func = self._query_strategy
            ''' delegating query creation work to queryCreator class via super class'''

            self.create_query(params, queryObj, q_type)
            notifier.DEBUG("Eligibility Query completed successfully")

    def create_narrative_eligibility_query(self, msg_type_list=[], status=None):
        ''' '''
        notifier.DEBUG("Started creating Narrative eligibility Query for % r..." % msg_type_list)
        for msg_type in msg_type_list:
            params = []
            params.append(self._FSwiftMLUtils.Parameters('F%sIn_Config' % (msg_type)))
            q_type = 'EligibilityQuery'
            tmp = {'mt_type': msg_type, 'status': status }

            '''Create Query object and set input and logic/strategy to create query'''
            queryObj = DataPrep.QueryCreator()
            queryObj.query_strategy_param = tmp
            queryObj.query_strategy_func = self._narrative_query_strategy
            ''' delegating query creation work to queryCreator class via super class'''

            self.create_query(params, queryObj, q_type)
            notifier.DEBUG("Narrative eligibility Query completed successfully")

    def create_chaser_eligibility_query(self, msg_type_list=[], status=None):
        ''' '''
        notifier.DEBUG("Started creating Chaser eligibility Query for % r..." % msg_type_list)
        for msg_type in msg_type_list:
            params = []
            params.append(self._FSwiftMLUtils.Parameters('F%sIn_Config' % (msg_type)))
            q_type = 'EligibilityQuery'
            tmp = {'mt_type': msg_type}

            '''Create Query object and set input and logic/strategy to create query'''
            queryObj = DataPrep.QueryCreator()
            queryObj.query_strategy_param = tmp
            queryObj.query_strategy_func = self._chaser_query_strategy
            ''' delegating query creation work to queryCreator class via super class'''

            self.create_query(params, queryObj, q_type)
            notifier.DEBUG("Narrative eligibility Query completed successfully")

    def prepare_alias_type_spec(self):
        notifier.INFO("Creating Alias Type")
        common_list_of_alias_type = []
        alias_type_spec_ISDASettlementSrc = {
                                'Name':'ISDASettlementSrc',
                                'Description':'The rate source for the settlement of the non-deliverable or cash-settled trade.',
                                'AliasOn':'Party',
                                'AliasTypeName':'ISDASettlementSrc',
                                }
        common_list_of_alias_type.append(alias_type_spec_ISDASettlementSrc)
        self.create_alias_type_spec(common_list_of_alias_type)
        notifier.INFO("Completed Alias Type creation.")
        
def run_data_prep(context=''):
    try:
        notifier.INFO("-"*100)
        notifier.INFO("Running Part-1 of Data Preps for FSwiftFXMMConfirmationIn")
        dp_obj = FSwiftFXMMConfirmationInDataPrepPart1()
        notifier.INFO("\nStep-1")
        dp_obj.create_state_chart()

        notifier.INFO("\nStep-2")
        dp_obj.adm_prepare_choicelist()
        dp_obj.adm_prepare_addinfo()

        notifier.INFO("\nStep-3")
        notifier.INFO("Creating Eligibility Query")
        dp_obj.create_eligibility_query(['MT300', 'MT305', 'MT320', 'MT330'],
                                        'Pending Matching')
        status = ['Pending Matching', 'Matched', 'Acknowledged']
        dp_obj.create_narrative_eligibility_query(['MT399'], status)
        dp_obj.create_chaser_eligibility_query(['MT395'])
        notifier.INFO("Creation of Eligibility Query completed")

        notifier.INFO("\nStep-4")
        dp_obj.prepare_alias_type_spec()

        notifier.INFO("\nStep-5")
        dp_obj.create_columns(os.path.basename(__file__), context)

        notifier.INFO("\n")
        notifier.INFO("FSwiftFXMMConfirmationIn_DataPrep Part-1 is successfully executed.")
        notifier.INFO("\n")
        notifier.INFO("Please restart Prime application before running FSwiftFXMMConfirmationIn_DataPrep Part 2")
        notifier.INFO("-"*100)
    except Exception as e:
        notifier.ERROR("Exception in running FSwiftFXMMConfirmationIn "
                       "DataPrep Part-1:%r" % e, exc_info=True)

...

  FSwiftFXMMConfirmationIn_DataPrep_Part2
"""----------------------------------------------------------------------------
MODULE:
    FSwiftFXMMConfirmationIn_DataPrep_Part2

DESCRIPTION:
    Data preparation script for FSwiftFXMMConfirmationIn
        Scripts performs following tasks:
        A. creates unidentified business process query
        B. create archive tasks
        C. create operation permissions

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import acm
import FSwiftDataPreparation as DataPrep

notifier = DataPrep.notifier


class FSwiftFXMMConfirmationInDataPrepPart2(DataPrep.FSwiftPostInstIncomingDataPrep):
    ''' '''

    def create_archive_task(self, message_types, states, inorout='In'):
        notifier.INFO("Creating Archiving tasks...")
        super(FSwiftFXMMConfirmationInDataPrepPart2, self).create_archive_task(message_types, states, inorout=inorout)
        notifier.INFO("Creation of Archiving tasks completed")

    def create_operation_permissions(self, message_types, inorout='In'):
        notifier.INFO("Creating operation permissions...")
        super(FSwiftFXMMConfirmationInDataPrepPart2, self).create_operation_permissions(message_types, inorout)
        notifier.INFO("Creation of operation permissions completed")

    def _query_strategy(self, param):
        ''' '''
        query = acm.CreateFASQLQuery(acm.FBusinessProcess,'AND')
        node = query.AddOpNode('AND')
        if self._FSwiftMLUtils.get_acm_version() < 2018.2:
            node.AddAttrNodeString('CurrentStep.State.StateChart.Name', param.get('sc'), 'EQUAL')
            node.AddAttrNodeString('CurrentStep.State.Name', param.get('state'), 'EQUAL')
        else:
            node.AddAttrNodeString('StateChart.Name', param.get('sc'), 'EQUAL')
            node.AddAttrNodeString('CurrentStateName', param.get('state'), 'EQUAL')

        node.AddAttrNodeEnum('AdditionalInfo.SwiftMessageType', param.get('mt_type'))
        return query

    def create_unidentified_bpr_query(self, mt_type_list, q_type='UnpairedBPRQuery', state=None):
        ''' '''

        notifier.DEBUG("Started creating unidentified_bpr_query for %r ..." %
                      mt_type_list)
        for mt_type in mt_type_list:
            params = []
            params.append(self._FSwiftMLUtils.Parameters('F%sIn_Config' % (mt_type)))
            tmp = {'mt_type': mt_type, 'state': state,
                   'sc': self._FSwiftMLUtils.get_state_chart_name_for_mt_type(mt_type)
                   }

            '''Create Query object and set input and logic/strategy to create query'''
            queryObj = DataPrep.QueryCreator()
            queryObj.query_strategy_param = tmp
            queryObj.query_strategy_func = self._query_strategy
            self.create_query(params, queryObj, q_type)
            notifier.DEBUG("unidentified_bpr_query completed for %s" % mt_type)


def run_data_prep(context=''):
    try:
        notifier.INFO("-"*100)
        notifier.INFO("Running Part-2 of Data Preps for FSwiftFXMMConfirmationIn")
        message_types = ['MT300', 'MT305', 'MT320', 'MT330','MT399','MT395'] 
        dp_obj = FSwiftFXMMConfirmationInDataPrepPart2()
        notifier.INFO("\nStep-1")
        
        notifier.INFO("Creating Business Process Queries")
        dp_obj.create_unidentified_bpr_query(message_types,
                                             q_type='UnpairedBPRQuery',
                                             state='Unpaired')
        
        dp_obj.create_unidentified_bpr_query(['MT399'],
                                             q_type='PairingViewBPRQuery',
                                             state='PairedWithParty')


        notifier.INFO("Creation of Business Process Queries completed")

        notifier.INFO("\nStep-2")
        archive_msg_type = ['MT300', 'MT305', 'MT320', 'MT330'] 
        dp_obj.create_archive_task(archive_msg_type, 'Matched')
        dp_obj.create_archive_task(['MT399'], 'Paired') 
        dp_obj.create_archive_task(['MT395'], 'Actioned')

        notifier.INFO("\nStep-3")
        dp_obj.create_operation_permissions(message_types)

        notifier.INFO("\n")
        notifier.INFO("FSwiftFXMMConfirmationIn_DataPrep Part-2 is successfully executed.")
        notifier.INFO("-"*100)
    except Exception as e:
        notifier.ERROR("Exception in running FSwiftFXMMConfirmationIn part-2 DataPrep"
                       "Part-2 :%r" % e, exc_info=True)


...

  FSwiftFXMMConfirmationOut_DataPrep
"""----------------------------------------------------------------------------
MODULE:
    FSwiftFXMMConfirmationOut_DataPrep

DESCRIPTION:
    Data preparation script for FSwiftFXMMConfirmationOut
        Scripts performs following tasks:
        A. creates FX trade confirmation out state chart
        B. create archive tasks
        C. create operation permissions
        D. data preparation for external object

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import FFXMMConfirmationOutSC
import FSwiftDataPreparation as DataPrep
notifier = DataPrep.notifier


class FSwiftFXMMConfirmationOutDataPrep(DataPrep.FSwiftPreInstOutgoingDataPrep):
    ''' '''

    def create_state_chart(self):
        notifier.INFO("Creating State Charts.")
        FFXMMConfirmationOutSC.create_fxMM_conf_out_sc()
        notifier.INFO("State Chart creation completed.")

    def create_archive_task(self, message_types, states, inorout='Out'):
        notifier.INFO("Creating Archiving tasks...")
        super(FSwiftFXMMConfirmationOutDataPrep, self).create_archive_task(message_types, states, inorout=inorout)
        notifier.INFO("Creation of Archiving tasks completed")

    def create_operation_permissions(self, message_types, inorout='Out'):
        notifier.INFO("Creating operation permissions...")
        super(FSwiftFXMMConfirmationOutDataPrep, self).create_operation_permissions(message_types, inorout)
        notifier.INFO("Creation of operation permissions completed")



def run_data_prep(context=''):
    try:
        notifier.INFO("-"*100)
        notifier.INFO("Running Data Prep for FSwiftFXMMConfirmationOut")
        message_type_archive_task = ['MT300']
        dp_obj = FSwiftFXMMConfirmationOutDataPrep()
        notifier.INFO("\nStep-1")
        dp_obj.create_state_chart()

        notifier.INFO("\nStep-2")
        dp_obj.create_archive_task(message_type_archive_task, 'Acknowledged')

        notifier.INFO("\nStep-3")
        message_types_operation_permission = ['MT300', 'MT305', 'MT306',
                                              'MT320', 'MT330', 'MT395']
        dp_obj.create_operation_permissions(message_types_operation_permission)

        notifier.INFO("\n")
        notifier.INFO("FSwiftFXMMConfirmationOut_DataPrep is successfully executed.")
        notifier.INFO("-"*100)
    except Exception as e:
        notifier.ERROR("Exception in running FSwiftFXMMConfirmationOut"
                       "DataPrep:%r" % e, exc_info=True)



...

  FSwiftInstaller
from SwiftInstaller_Utilities import install_SwiftSolution_modules, notifier, SwiftInstaller


def ael_main(variables_dictionary):
    notifier.INFO("Installing SwiftSoultion modules")

    install_SwiftSolution_modules(variables_dictionary)

    #notifier.INFO("Done Installing SwiftSoultion modules")


# Call Swift Installer Task GUI

ael_gui_parameters = {'windowCaption': "SwiftSolution Installer"}

ael_variables = SwiftInstaller()
ael_variables.LoadDefaultValues(__name__)



...

  FSwiftIRDConfirmationIn_DataPrep_Part1
"""----------------------------------------------------------------------------
MODULE:
    FSwiftIRDConfirmationIn_DataPrep_Part1

DESCRIPTION:
    Data preparation script for FSwiftIRDConfirmationIn
        Scripts performs following tasks:
        A. creates FX trade confirmation state chart
        B. create choice lists and add infos
        C. data preparation for FExternal object
        D. create eligibility query
        E. create columns

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""

import acm
import FIRDConfirmationInSC
import FSwiftDataPreparation as DataPrep
import os
notifier = DataPrep.notifier


class FSwiftIRDConfirmationInDataPrepPart1(DataPrep.FSwiftPreInstIncomingDataPrep):

    def create_state_chart(self):
        notifier.INFO("Creating State Charts")
        FIRDConfirmationInSC.create_fx_trade_conf_sc()
        notifier.INFO("State Chart creation completed.")

    def adm_prepare_choicelist(self):
        notifier.INFO("Creating Choice list")
        swift_message_type = [{'name': 'MT361',
                               'description': 'Swift message type'},{'name': 'MT395', 'description': 'Swift message type'}]

        self.create_choicelist(cl_name='SwiftMessageType', cl_values=swift_message_type)
        notifier.INFO("Choice list creation completed")

    def adm_prepare_addinfo(self):
        notifier.INFO("Creating Additional Infos.")
        common_list_of_addinfo = DataPrep.get_list_of_addInfo_to_add()
        self.create_addinfo(common_list_of_addinfo)
        notifier.INFO("Additional Infos creation completed.")


    def create_columns(self, fileName, context):
        notifier.INFO("Creating Columns...")
        super(FSwiftIRDConfirmationInDataPrepPart1, self).create_columns(fileName, context)
        notifier.INFO("Columns creation completed")

    def _query_strategy(self, param):

        query = acm.CreateFASQLQuery(acm.FConfirmation,'AND')
        node = query.AddOpNode('AND')
        multi_doc_node = node.AddOpNode('OR')
        multi_doc_node.AddAttrNodeString('ExternalObjects.IntegrationSubtype', param.get('mt_type'), 'RE_LIKE_NOCASE')
        # Backward compatibility. Handles the existing confirmations/settlements.
        multi_doc_node.AddAttrNodeString('ExternalObjects.IntegrationSubtype', param.get('mt_type').replace('MT', ''), 'RE_LIKE_NOCASE')
        node.AddAttrNodeEnum('Status', param.get('status'))
        '''Type should not be Cancellation'''
        node.AddAttrNodeEnum('Type','Cancellation').Not(True)
        return query

    def _chaser_query_strategy(self, param):
        ''' '''
        query = acm.CreateFASQLQuery(acm.FConfirmation, 'AND')
        node = query.AddOpNode('AND')

        '''Type should not be Cancellation'''
        node.AddAttrNodeEnum('Type', 'Cancellation').Not(True)
        node = query.AddOpNode('OR')
        SUPPORTED_MSG_TYPE = ['MT360', 'MT361', 'MT362']
        for each in SUPPORTED_MSG_TYPE:
            node.AddAttrNodeNumerical('ExternalObjects.IntegrationSubtype', each, 'RE_LIKE_NOCASE')
            # Backward compatibility. Handles the existing confirmations/settlements.
            node.AddAttrNodeNumerical('ExternalObjects.IntegrationSubtype', each.replace('MT', ''), each.replace('MT', ''))
        return query

    def create_eligibility_query(self, msg_type_list=[], status=None):

        """ Create ASQL query so as to find the eligible objects """

        notifier.DEBUG("Started Creating Eligibility Query for %r ...", msg_type_list)
        for mt_type in msg_type_list:
            params = []
            params.append(self._FSwiftMLUtils.Parameters('F%sIn_Config' % (mt_type)))
            q_type = 'EligibilityQuery'
            tmp = {'mt_type': mt_type, 'status': status }

            '''Create Query object and set input and logic/strategy to create query'''
            queryObj = DataPrep.QueryCreator()
            queryObj.query_strategy_param = tmp
            queryObj.query_strategy_func = self._query_strategy
            self.create_query(params, queryObj, q_type)
            notifier.DEBUG("Eligibility Query completed successfully")

    def create_chaser_eligibility_query(self, msg_type_list=[], status=None):
        ''' '''
        notifier.DEBUG("Started creating Chaser eligibility Query for % r..." % msg_type_list)
        for msg_type in msg_type_list:
            params = []
            params.append(self._FSwiftMLUtils.Parameters('F%sIn_Config' % (msg_type)))
            q_type = 'EligibilityQuery'
            tmp = {'mt_type': msg_type}

            '''Create Query object and set input and logic/strategy to create query'''
            queryObj = DataPrep.QueryCreator()
            queryObj.query_strategy_param = tmp
            queryObj.query_strategy_func = self._chaser_query_strategy
            ''' delegating query creation work to queryCreator class via super class'''

            self.create_query(params, queryObj, q_type)
            notifier.DEBUG("Narrative eligibility Query completed successfully")

def run_data_prep(context=''):
    try:
        notifier.INFO("-"*100)
        notifier.INFO("Running Part-1 of Data Preps for FSwiftIRDConfirmationIn")
        dp_obj = FSwiftIRDConfirmationInDataPrepPart1()
        notifier.INFO("\nStep-1")
        dp_obj.create_state_chart()

        notifier.INFO("\nStep-2")
        dp_obj.adm_prepare_choicelist()
        dp_obj.adm_prepare_addinfo()


        notifier.INFO("\nStep-3")
        notifier.INFO("Creating Eligibility Query")
        dp_obj.create_eligibility_query(['MT361'], 'Pending Matching')
        dp_obj.create_chaser_eligibility_query(['MT395'])
        notifier.INFO("Creation of Eligibility Query completed")

        notifier.INFO("\nStep-4")
        dp_obj.create_columns(os.path.basename(__file__), context)

        notifier.INFO("\n")
        notifier.INFO("FSwiftIRDConfirmationIn_DataPrep Part-1 is successfully executed.")
        notifier.INFO("\n")
        notifier.INFO("Please restart Prime application before running"
                      "FSwiftIRDConfirmationIn_DataPrep Part 2")
        notifier.INFO("-"*100)
    except Exception as e:
        notifier.ERROR("Exception in running FSwiftIRDConfirmationIn"
                       "DataPrep Part-1:%r" % e, exc_info=True)



...

  FSwiftIRDConfirmationIn_DataPrep_Part2
"""----------------------------------------------------------------------------
MODULE:
    FSwiftIRDConfirmationIn_DataPrep_Part2

DESCRIPTION:
    Data preparation script for FSwiftIRDConfirmationIn
        Scripts performs following tasks:
        A. creates unidentified business process query
        B. create archive tasks
        C. create operation permissions

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import acm
import FSwiftDataPreparation as DataPrep
notifier = DataPrep.notifier


class FSwiftIRDConfirmationInDataPrepPart2(DataPrep.FSwiftPostInstIncomingDataPrep):

    def create_archive_task(self, message_types, states, inorout='In'):
        notifier.INFO("Creating Archiving tasks...")
        super(FSwiftIRDConfirmationInDataPrepPart2, self).create_archive_task(message_types, states, inorout=inorout)
        notifier.INFO("Creation of Archiving tasks completed")

    def create_operation_permissions(self, message_types, inorout='In'):
        notifier.INFO("Creating operation permissions...")
        super(FSwiftIRDConfirmationInDataPrepPart2, self).create_operation_permissions(message_types, inorout)
        notifier.INFO("Creation of operation permissions completed")

    def _query_strategy(self, param):
        ''' '''
        query = acm.CreateFASQLQuery(acm.FBusinessProcess,'AND')
        node = query.AddOpNode('AND')
        if self._FSwiftMLUtils.get_acm_version() < 2018.2:
            node.AddAttrNodeString('CurrentStep.State.StateChart.Name', param.get('sc'), 'EQUAL')
            node.AddAttrNodeString('CurrentStep.State.Name', param.get('state'), 'EQUAL')
        else:
            node.AddAttrNodeString('StateChart.Name', param.get('sc'), 'EQUAL')
            node.AddAttrNodeString('CurrentStateName', param.get('state'), 'EQUAL')

        node.AddAttrNodeEnum('AdditionalInfo.SwiftMessageType', param.get('mt_type'))
        return query

    def create_unidentified_bpr_query(self, mt_type_list, q_type='UnpairedBPRQuery', state='Unpaired'):
        ''' '''

        notifier.DEBUG("Started creating unidentified_bpr_query for %r ..." %
                      mt_type_list)
        for mt_type in mt_type_list:
            params = []
            params.append(self._FSwiftMLUtils.Parameters('F%sIn_Config' % (mt_type)))
            tmp = {'mt_type': mt_type, 'state': state,
                   'sc': self._FSwiftMLUtils.get_state_chart_name_for_mt_type(mt_type)
                   }

            '''Create Query object and set input and logic/strategy to create query'''
            queryObj = DataPrep.QueryCreator()
            queryObj.query_strategy_param = tmp
            queryObj.query_strategy_func = self._query_strategy
            self.create_query(params, queryObj, q_type)
            notifier.DEBUG("unidentified_bpr_query completed for %s" % mt_type)


def run_data_prep(context=''):
    try:
        notifier.INFO("-"*100)
        notifier.INFO("Running Part-2 of Data Preps for FSwiftIRDConfirmationIn")
        message_types = ['MT361']
        dp_obj = FSwiftIRDConfirmationInDataPrepPart2()
        notifier.INFO("\nStep-1")
        notifier.INFO("Creating Business Process Queries")
        dp_obj.create_unidentified_bpr_query(message_types)
        notifier.INFO("Creation of Business Process Queries completed")

        notifier.INFO("\nStep-2")
        dp_obj.create_archive_task(message_types, 'Matched')
        dp_obj.create_archive_task(['MT395'], 'Actioned')

        notifier.INFO("\nStep-3")
        dp_obj.create_operation_permissions(message_types)

        notifier.INFO("\n")
        notifier.INFO("FSwiftIRDConfirmationIn_DataPrep Part-2 is successfully executed.")
        notifier.INFO("-"*100)
    except Exception as e:
        notifier.ERROR("Exception in running FSwiftIRDConfirmationIn"
                       "DataPrep Part-2:%r" % e, exc_info=True)




...

  FSwiftIRDConfirmationOut_DataPrep
"""----------------------------------------------------------------------------
MODULE:
    FSwiftIRDConfirmationOut_DataPrep

DESCRIPTION:
    Data preparation script for FSwiftIRDConfirmationOut
        Script performs following tasks:
        A. creates FIRD confirmation out state chart
        B. create archive tasks
        C. create operation permissions
        D. data preparation for FExteranl object

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import FIRDConfirmationOutSC
import FSwiftDataPreparation as DataPrep
notifier = DataPrep.notifier


class FSwiftIRDConfirmationOutDataPrep(DataPrep.FSwiftPreInstOutgoingDataPrep):

    def create_state_chart(self):
        notifier.INFO("Creating State Charts.")
        FIRDConfirmationOutSC.create_fIRD_conf_out_sc()
        notifier.INFO("Chart creation completed.")

    def create_archive_task(self, message_types, states, inorout='Out'):
        notifier.INFO("Creating Archiving tasks.")
        super(FSwiftIRDConfirmationOutDataPrep,self).create_archive_task(message_types, states, inorout=inorout)
        notifier.INFO("Creation of Archiving tasks completed")

    def create_operation_permissions(self, message_types, inorout='Out'):
        notifier.INFO("Creating operation permissions.")
        super(FSwiftIRDConfirmationOutDataPrep, self).create_operation_permissions(message_types, inorout)
        notifier.INFO("Creation of operation permissions completed")



def run_data_prep(context=''):
    try:
        notifier.INFO("-"*100)
        notifier.INFO("Running Data Prep for FSwiftIRDConfirmationOut")
        message_type_archive_task = ['MT360']
        message_types_operation_permission = ['MT360', 'MT361', 'MT362',
                                              'MT395']
        dp_obj = FSwiftIRDConfirmationOutDataPrep()
        notifier.INFO("\nStep-1")
        dp_obj.create_state_chart()

        notifier.INFO("\nStep-2")
        dp_obj.create_archive_task(message_type_archive_task, 'Acknowledged')
        notifier.INFO("\nStep-3")
        dp_obj.create_operation_permissions(message_types_operation_permission)


        notifier.INFO("\n")
        notifier.INFO("FSwiftIRDConfirmationOut_DataPrep is successfully executed.")
        notifier.INFO("-"*100)
    except Exception as e:
        notifier.ERROR("Exception in running FSwiftIRDConfirmationOut"
                       "DataPrep:%r" % e, exc_info=True)


...

  FSwiftSecuritySettleInstrIn_DataPrep_Part1
"""----------------------------------------------------------------------------
MODULE:
    FSwiftSecuritySettleInstrIn_DataPrep_Part1

DESCRIPTION:
    Data preparation script for SecSettlementInstrIn
    Script performs following tasks:
    A. creates security settlement confirmation state chart
    B. create choice list and add infos
    C. data preparation for FExternal Object
    D. create columns

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import FSecuritySettlementInstructionInSC
import FSwiftDataPreparation as DataPrep
import os

notifier = DataPrep.notifier


class FSwiftSecuritySettleInstrInDataPrepPart1(DataPrep.FSwiftPreInstIncomingDataPrep):

    def create_state_chart(self):
        notifier.INFO("Creating State Charts")
        FSecuritySettlementInstructionInSC.create_security_settlment_conf_sc()
        notifier.INFO("State Chart creation completed.")

    def adm_prepare_choicelist(self):
        notifier.INFO("Creating choice list.")
        swift_message_type = [{'name': 'MT540', 'description': 'Swift message type'},
                              {'name': 'MT541', 'description': 'Swift message type'},
                              {'name': 'MT542', 'description': 'Swift message type'},
                              {'name': 'MT543', 'description': 'Swift message type'},]

        self.create_choicelist(cl_name='SwiftMessageType', cl_values=swift_message_type)
        notifier.INFO("Choice list creation completed")

    def adm_prepare_addinfo(self):
        notifier.INFO("Creating Additional Infos.")
        common_list_of_addinfo = DataPrep.get_list_of_addInfo_to_add()
        self.create_addinfo(common_list_of_addinfo)
        notifier.INFO("Additional Infos creation completed.")


    def create_columns(self, fileName, context):
        notifier.INFO("Creating Columns...")
        super(FSwiftSecuritySettleInstrInDataPrepPart1, self).create_columns(fileName, context)
        notifier.INFO("Columns creation completed")

def run_data_prep(context=''):
    try:
        notifier.INFO("-"*100)
        notifier.INFO("Running Part-1 of Data Preps for FSwiftSecuritySettleInstrIn")
        dp_obj = FSwiftSecuritySettleInstrInDataPrepPart1()
        notifier.INFO("\nStep-1")
        dp_obj.create_state_chart()

        notifier.INFO("\nStep-2")
        dp_obj.adm_prepare_choicelist()
        dp_obj.adm_prepare_addinfo()

        notifier.INFO("\nStep-3")
        dp_obj.create_columns(os.path.basename(__file__), context)

        notifier.INFO("\n")
        notifier.INFO("FSwiftSecuritySettleInstrIn_DataPrep Part-1 is successfully executed.")
        notifier.INFO("\n")
        notifier.INFO("Please restart Prime application before running FSwiftSecuritySettleInstrIn_DataPrep Part 2")
        notifier.INFO("-"*100)
    except Exception as e:
        notifier.INFO("Exception in running FSwiftSecuritySettleInstrIn"
                      "DataPrep Part-1:%r" % e, exc_info=True)


...

  FSwiftSecuritySettleInstrIn_DataPrep_Part2
"""----------------------------------------------------------------------------
MODULE:
    FSwiftSecuritySettleInstrIn_DataPrep_Part2

DESCRIPTION:
    Data preparation script for SecSettlementInstrIn
    Script performs following tasks:
    A. create unidentified busioness process query
    B. create archive tasks
    C. create operation permissions

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import acm
import FSwiftDataPreparation as DataPrep

notifier = DataPrep.notifier


class FSwiftSecuritySettleInstrInDataPrepPart2(DataPrep.FSwiftPostInstIncomingDataPrep):
    
    def create_archive_task(self, message_types, states, inorout='In'):
        notifier.INFO("Creating Archiving tasks...")
        super(FSwiftSecuritySettleInstrInDataPrepPart2, self).create_archive_task(message_types, states, inorout=inorout)
        notifier.INFO("Creation of Archiving tasks completed")

    def create_operation_permissions(self, message_types, inorout='In'):
        notifier.INFO("Creating operation permissions...")
        super(FSwiftSecuritySettleInstrInDataPrepPart2, self).create_operation_permissions(message_types, inorout)
        notifier.INFO("Creation of operation permissions completed")

    def _query_strategy(self, param):
        ''' '''
        query = acm.CreateFASQLQuery(acm.FBusinessProcess,'AND')
        node = query.AddOpNode('AND')
        if self._FSwiftMLUtils.get_acm_version() < 2018.2:
            node.AddAttrNodeString('CurrentStep.State.StateChart.Name', param.get('sc'), 'EQUAL')
            node.AddAttrNodeString('CurrentStep.State.Name', param.get('state'), 'EQUAL')
        else:
            node.AddAttrNodeString('StateChart.Name', param.get('sc'), 'EQUAL')
            node.AddAttrNodeString('CurrentStateName', param.get('state'), 'EQUAL')

        node.AddAttrNodeEnum('AdditionalInfo.SwiftMessageType', param.get('mt_type'))
        return query

    def create_unidentified_bpr_query(self, mt_type_list, q_type='UnpairedBPRQuery', state='Unpaired'):
        ''' '''

        notifier.DEBUG("Started creating unidentified BPR query for %r ..." % mt_type_list)
        for mt_type in mt_type_list:
            params = []
            params.append(self._FSwiftMLUtils.Parameters('F%sIn_Config' % (mt_type)))
            tmp = {'mt_type': mt_type, 'state': state,
                   'sc': self._FSwiftMLUtils.get_state_chart_name_for_mt_type(mt_type)
                   }

            '''Create Query object and set input and logic/strategy to create query'''
            queryObj = DataPrep.QueryCreator()
            queryObj.query_strategy_param = tmp
            queryObj.query_strategy_func = self._query_strategy
            self.create_query(params, queryObj, q_type)
            notifier.DEBUG("unidentified_bpr_query completed for %s" % mt_type)


def run_data_prep(context=''):
    try:
        notifier.INFO("-"*100)
        notifier.INFO("Running Part-2 of Data Preps for FSwiftSecuritySettleInstrIn")
        dp_obj = FSwiftSecuritySettleInstrInDataPrepPart2()
        notifier.INFO("\nStep-1")
        notifier.INFO("Creating Business Process Queries")
        message_types = ['MT540', 'MT541', 'MT542', 'MT543']
        dp_obj.create_unidentified_bpr_query(message_types,
                                             q_type='UnpairedBPRQuery',
                                             state='Failed')
        notifier.INFO("Creating Business Process Queries completed")
        notifier.INFO("\nStep-2")
        dp_obj.create_archive_task(message_types, 'Closed')

        notifier.INFO("\nStep-3")
        dp_obj.create_operation_permissions(message_types)

        notifier.INFO("\n")
        notifier.INFO("FSwiftSecuritySettleInstrIn_DataPrep Part-2 is successfully executed.")
        notifier.INFO("-"*100)
    except Exception as e:
        notifier.ERROR("Exception in running FSwiftSecuritySettleInstrIn"
                       "DataPrep Part-2:%r" % e, exc_info=True)

...

  FSwiftSecuritySettlementIn_DataPrep_Part1
"""----------------------------------------------------------------------------
MODULE:
    FSwiftSecuritySettlementIn_DataPrep_Part1

DESCRIPTION:
    Data preparation script for SecuritySettlement
    Script performs following tasks:
    A. create security settlement confirmation state chart
    B. create choice list and add infos
    C. data preaparation for FExternal object
    D. create eligibility query
    E. create columns

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import acm
import FSecuritySettlementInSC
import FSwiftDataPreparation as DataPrep
import os

notifier = DataPrep.notifier


class FSwiftSecuritySettlementInDataPrepPart1(DataPrep.FSwiftPreInstIncomingDataPrep):

    def create_state_chart(self):
        notifier.INFO("Creating State Charts")
        FSecuritySettlementInSC.create_security_settlment_conf_sc()
        notifier.INFO("State Chart creation completed.")

    def adm_prepare_choicelist(self):
        notifier.INFO("Creating Choice list")
        swift_message_type = [{'name': 'MT518', 'description': 'Swift message type'},
                              {'name': 'MT544', 'description': 'Swift message type'},
                              {'name': 'MT545', 'description': 'Swift message type'},
                              {'name': 'MT546', 'description': 'Swift message type'},
                              {'name': 'MT547', 'description': 'Swift message type'},
                              {'name': 'MT548', 'description': 'Swift message type'},
                              {'name': 'MT515', 'description': 'Swift message type'},
                              ]

        MT515_linked_or_not = [{'name': 'MT515Linked', 'description': 'If MT515 is linked to trade'},
                                      {'name': 'MT515NotLined', 'description': 'If MT515 is not linked to trade'},
                                      {'name': '', 'description': ''},
                                 ]


        self.create_choicelist(cl_name = '515LinkedOrNot', cl_values=MT515_linked_or_not)

        self.create_choicelist(cl_name='SwiftMessageType', cl_values=swift_message_type)
        notifier.INFO("Choice list creation completed")

    def adm_prepare_addinfo(self):
        notifier.INFO("Creating Additional Infos...")
        add_info_spec_trade = {
                'FieldName': 'Is515SwftMsgLinked',
                'Description': '515LinkedOrNot',
                'Default': '',
                'TypeGroup': 'Standard',
                'Type': 'ChoiceList',
                'Table': 'Trade'}



        common_list_of_addinfo = DataPrep.get_list_of_addInfo_to_add()

        add_info_spec = [add_info_spec_trade] + common_list_of_addinfo
        try:
            self.create_addinfo(add_info_spec)
        except Exception as e:
            notifier.INFO(("Exception in adm_prepare_addinfo : %s" % str(e)))
        else:
            notifier.INFO("Additional Infos creation completed.")

    def create_columns(self, fileName, context):
        notifier.INFO("Creating Columns")
        super(FSwiftSecuritySettlementInDataPrepPart1, self).create_columns(fileName, context)
        notifier.INFO("Columns creation completed")

    def _query_strategy_settlement(self, param):

        query = acm.CreateFASQLQuery(acm.FSettlement, 'AND')
        node = query.AddOpNode('AND')
        multi_doc_node = node.AddOpNode('OR')
        multi_doc_node.AddAttrNodeString('ExternalObjects.IntegrationSubtype', param.get('mt_type'), 'RE_LIKE_NOCASE')
        # Backward compatibility. Handles the existing confirmations/settlements.
        multi_doc_node.AddAttrNodeString('ExternalObjects.IntegrationSubtype', param.get('mt_type').replace('MT', ''), 'RE_LIKE_NOCASE')
        node.AddAttrNodeEnum('Status', param.get('status'))
        return query

    def _query_strategy_trade(self, param):
        """Eligibility Query for MT515"""
        query = acm.CreateFASQLQuery(acm.FTrade, 'AND')
        node = query.AddOpNode('AND')
        node.AddAttrNodeEnum('Status', param.get('status'))
        node.AddAttrNodeNumerical('CreateTime', '0d', '0d')
        return query

    def _query_strategy_confirmation(self, param):

        query = acm.CreateFASQLQuery(acm.FConfirmation, 'AND')
        node = query.AddOpNode('AND')
        multi_doc_node = node.AddOpNode('OR')
        multi_doc_node.AddAttrNodeString('ExternalObjects.IntegrationSubtype', param.get('mt_type'), 'RE_LIKE_NOCASE')
        # Backward compatibility. Handles the existing confirmations/settlements.
        multi_doc_node.AddAttrNodeString('ExternalObjects.IntegrationSubtype', param.get('mt_type').replace('MT', ''), 'RE_LIKE_NOCASE')
        node.AddAttrNodeEnum('Status', param.get('status'))
        node.AddAttrNodeEnum('Type', 'Cancellation').Not(True)
        return query

    def create_eligibility_query(self, msg_type_list=[], status=None):

        """ Create ASQL query so as to find the eligible objects """

        notifier.DEBUG("Started Creating Eligibility Query for %r ..." % msg_type_list)
        for mt_type in msg_type_list:
            params = []
            params.append(self._FSwiftMLUtils.Parameters('F%sIn_Config' % (mt_type[0])))
            q_type = 'EligibilityQuery'
            tmp = {'mt_type': mt_type[1], 'status':status }

            '''Create Query object and set input and logic/strategy to create query'''
            queryObj = DataPrep.QueryCreator()
            queryObj.query_strategy_param = tmp
            if mt_type[0] == 'MT518':
                queryObj.query_strategy_func = self._query_strategy_confirmation
            elif mt_type[0] == 'MT515':
                queryObj.query_strategy_func = self._query_strategy_trade
            else:
                queryObj.query_strategy_func = self._query_strategy_settlement

            self.create_query(params, queryObj, q_type)
            notifier.DEBUG("Eligibility Query completed successfully")


def run_data_prep(context=''):
    try:
        notifier.INFO("-"*100)
        notifier.INFO("Running Part-1 of Data Preps for FSwiftSecuritySettlementIn")
        dp_obj = FSwiftSecuritySettlementInDataPrepPart1()
        notifier.INFO("\nStep-1")
        dp_obj.create_state_chart()
        notifier.INFO("\nStep-2")
        dp_obj.adm_prepare_choicelist()
        dp_obj.adm_prepare_addinfo()
        notifier.INFO("\nStep-3")
        msg_type_list = [('MT544', 'MT540'),
                         ('MT545', 'MT541'),
                         ('MT546', 'MT542'),
                         ('MT547', 'MT543')]

        notifier.INFO("Creating Eligibility Query")
        dp_obj.create_eligibility_query(msg_type_list, status='Acknowledged')
        msg_type_list = [('MT518', 'MT518')]
        dp_obj.create_eligibility_query(msg_type_list, status='Pending Matching')
        msg_type_list = [('MT515', 'MT515')]
        dp_obj.create_eligibility_query(msg_type_list, status='Simulated')
        notifier.INFO("Creation of Eligibility Query completed")
        notifier.INFO("\nStep-4")
        dp_obj.create_columns(os.path.basename(__file__), context)
        notifier.INFO("\n")
        notifier.INFO("FSwiftSecuritySettlementIn_DataPrep Part-1 is successfully executed.")
        notifier.INFO("\n")
        notifier.INFO("Please restart Prime application before running FSwiftSecuritySettlementIn_DataPrep Part 2")
        notifier.INFO("-"*100)
    except Exception as err:
        notifier.INFO("Exception in running FSwiftSecuritySettlementIn"
                      "DataPrep Part-1:%r" % err, exc_info=True)



...

  FSwiftSecuritySettlementIn_DataPrep_Part2
"""----------------------------------------------------------------------------
MODULE:
    FSwiftSecuritySettlementIn_DataPrep_Part2

DESCRIPTION:
    Data preparation script for SecuritySettlement
    Script performs following tasks:
    A. create unidentified business process query
    B. create archive tasks
    C. create operation permissions

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import acm
import FSwiftDataPreparation as DataPrep

notifier = DataPrep.notifier


class FSwiftSecuritySettleInstrInDataPrepPart2(DataPrep.FSwiftPostInstIncomingDataPrep):

    def create_archive_task(self, message_types, states, inorout='In'):
        notifier.INFO("Creating Archiving tasks...")
        super(FSwiftSecuritySettleInstrInDataPrepPart2, self).create_archive_task(message_types, states, inorout=inorout)
        notifier.INFO("Creation of Archiving tasks completed")

    def create_operation_permissions(self, message_types, inorout='In'):
        notifier.INFO("Creating operation permissions.")
        super(FSwiftSecuritySettleInstrInDataPrepPart2, self).create_operation_permissions(message_types, inorout)
        notifier.INFO("Creation of operation permissions completed")

    def _query_strategy(self, param):
        ''' '''
        query = acm.CreateFASQLQuery(acm.FBusinessProcess, 'AND')
        node = query.AddOpNode('AND')
        node.AddAttrNodeString('StateChart.Name',
                                   param.get('sc'),
                                   'EQUAL')
        node.AddAttrNodeString('CurrentStateName',
                               param.get('state'),
                               'EQUAL')

        node.AddAttrNodeEnum('AdditionalInfo.SwiftMessageType', param.get('mt_type'))
        return query

    def create_unidentified_bpr_query(self, mt_type_list, q_type='UnpairedBPRQuery', state='Unpaired'):
        ''' '''

        notifier.DEBUG("Started creating unidentified BPR query for %r ..." % mt_type_list)
        for mt_type in mt_type_list:
            params = []
            params.append(self._FSwiftMLUtils.Parameters('F%sIn_Config' % (mt_type)))
            tmp = {'mt_type': mt_type, 'state': state,
                   'sc': self._FSwiftMLUtils.get_state_chart_name_for_mt_type(mt_type)
                   }

            '''Create Query object and set param/input and logic/strategy to create query'''
            queryObj = DataPrep.QueryCreator()
            queryObj.query_strategy_param = tmp
            queryObj.query_strategy_func = self._query_strategy
            self.create_query(params, queryObj, q_type)
            notifier.DEBUG("unidentified_bpr_query completed for %s" % mt_type)


def run_data_prep(context=''):
    try:
        notifier.INFO("-"*100)
        notifier.INFO("Running Part-2 of Data Preps for FSwiftSecuritySettlementIn")
        dp_obj = FSwiftSecuritySettleInstrInDataPrepPart2()

        STATES = 'Settled'
        notifier.INFO("\nStep-1")
        notifier.INFO("Creating Business Process Queries")
        mt_type_list = ['MT518', 'MT544', 'MT545', 'MT546', 'MT547','MT515']
        dp_obj.create_unidentified_bpr_query(mt_type_list)
        notifier.INFO("Creating Business Process Queries Completed")
        
        notifier.INFO("\nStep-2")
        message_types = [ 'MT544', 'MT545', 'MT546', 'MT547']
        dp_obj.create_archive_task(message_types, 'Settled')
        message_types = ['MT548']
        dp_obj.create_archive_task(message_types, 'Processed')
        message_types = ['MT518', 'MT515']
        dp_obj.create_archive_task(message_types, 'Matched')
        message_types = ['MT518', 'MT544', 'MT545', 'MT546', 'MT547', 'MT548', 'MT515']
        notifier.INFO("\nStep-3")
        dp_obj.create_operation_permissions(message_types)

        notifier.INFO("\n")
        notifier.INFO("FSwiftSecuritySettlementIn_DataPrep Part-2 is successfully executed.")
        notifier.INFO("-"*100)
    except Exception as e:
        notifier.INFO("Exception in running FSwiftSecuritySettlementIn"
                      "DataPrep Part-2 :%r" % e, exc_info=True)

...

  FSwiftSecuritySettlementMXIn_DataPrep_Part1
"""----------------------------------------------------------------------------
MODULE:
    FSwiftSecuritySettlementMXIn_DataPrep_Part1

DESCRIPTION:
    Data preparation script for SecuritySettlement
    Script performs following tasks:
    A. create security settlement confirmation state chart
    B. create choice list and add infos
    C. data preparation for FExternal object
    D. create eligibility query
    E. create columns

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import FSwiftDataPreparation as DataPrep
import os
import acm

notifier = DataPrep.notifier


class FSwiftSecuritySettlementMXInDataPrepPart1(DataPrep.FSwiftPreInstIncomingDataPrep):
    '''Class representing Data preparation for SecuritySettlementMX incoming msgs'''

    def adm_prepare_choicelist(self):
        '''Create Choice list required for Security Settlement Conf'''
        notifier.INFO("Creating choice list.")
        swift_message_type = [{'name': 'sese025',
                               'description': 'Swift MX message type'
                               }]

        self.create_choicelist(cl_name='SwiftMessageType', cl_values=swift_message_type)
        notifier.INFO("Choice list creation completed")


    def create_columns(self, fileName, context, override_message_type_list=None):
        notifier.INFO("Creating Columns")
        super(FSwiftSecuritySettlementMXInDataPrepPart1, self).create_columns(fileName, context,
                                                                              override_message_type_list)
        notifier.INFO("Creation of Columns completed")

    def _query_strategy(self, param):

        query = acm.CreateFASQLQuery(acm.FSettlement, 'AND')
        node = query.AddOpNode('AND')
        multi_doc_node = node.AddOpNode('OR')
        message_type = param.get('mt_type')[1]
        multi_doc_node.AddAttrNodeString('ExternalObjects.IntegrationSubtype', message_type, 'RE_LIKE_NOCASE')
        # Backward compatibility. Handles the existing settlements.
        multi_doc_node.AddAttrNodeString('ExternalObjects.IntegrationSubtype', message_type.replace('sese0', ''),
                                         'RE_LIKE_NOCASE')
        node.AddAttrNodeEnum('Status', param.get('status'))
        return query

    def create_eligibility_query(self, msg_type_list=[], status=None):

        """ Create ASQL query so as to find the eligible objects """

        notifier.DEBUG("Started Creating Eligibility Query for %r ...", msg_type_list)
        for mt_type in msg_type_list:
            params = []
            params.append(self._FSwiftMLUtils.Parameters('F%sIn_Config' % (mt_type[0])))
            q_type = 'EligibilityQuery'
            q_param = {'mt_type': mt_type, 'status': status}

            '''Create Query object and set input and logic/strategy to create query'''
            queryObj = DataPrep.QueryCreator()
            queryObj.query_strategy_param = q_param
            queryObj.query_strategy_func = self._query_strategy
            self.create_query(params, queryObj, q_type)
            notifier.DEBUG("Eligibility Query completed successfully")


def run_data_prep(context=''):
    try:
        notifier.INFO("-" * 100)
        notifier.INFO("Running Part-1 of Data Preps for FSwiftSecuritySettlementMXIn")
        dp_obj = FSwiftSecuritySettlementMXInDataPrepPart1()
        
        notifier.INFO("\nStep-1")
        dp_obj.adm_prepare_choicelist()
        

        notifier.INFO("\nStep-2")
        notifier.INFO("Creating Eligibility Query")
        dp_obj.create_eligibility_query([('sese025', 'sese023')], status='Acknowledged')
        notifier.INFO("Creation of Eligibility Query completed")
        
        notifier.INFO("\nStep-3")
        dp_obj.create_columns(os.path.basename(__file__), context, ['sese025'])
        notifier.INFO("\n")
        
        notifier.INFO("FSwiftSecuritySettlementMXIn_DataPrep Part-1 is successfully executed.")
        notifier.INFO("\n")
        notifier.INFO("Please restart Prime application before running FSwiftSecuritySettlementMXIn_DataPrep Part 2")
        notifier.INFO("-" * 100)
    except Exception as err:
        notifier.ERROR("Exception in running FSwiftSecuritySettlementMXIn DataPrep Part-1: %r" % err, exc_info=True)


run_data_prep(context='SwiftMessagingSolution')


...

  FSwiftSecuritySettlementMXIn_DataPrep_Part2
"""----------------------------------------------------------------------------
MODULE:
    FSwiftSecuritySettlementMXIn_DataPrep_Part2

DESCRIPTION:
    Data preparation script for SecuritySettlement
    Script performs following tasks:
    A. create unidentified business process query
    B. create archive tasks
    C. create operation permissions

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import acm
import FSwiftDataPreparation as DataPrep
notifier = DataPrep.notifier

class FSwiftSecuritySettlementMXInDataPrepPart2(DataPrep.FSwiftPostInstIncomingDataPrep):
    '''Class representing Data preparation for SecuritySettlementMX incoming msgs
    '''
    def create_archive_task(self, message_types, states):
        notifier.INFO("Creating Archiving tasks.")
        super(FSwiftSecuritySettlementMXInDataPrepPart2, self).create_archive_task(message_types, states)
        notifier.INFO("Creation of Archiving tasks completed")

    def create_operation_permissions(self, message_types, inorout='In'):
        notifier.INFO("Creating operation permissions.")
        super(FSwiftSecuritySettlementMXInDataPrepPart2, self).create_operation_permissions(message_types, inorout)
        notifier.INFO("Creation of operation permissions completed")

    def _query_strategy(self, param={}):
        ''' '''
        query = acm.CreateFASQLQuery(acm.FBusinessProcess, 'AND')
        node = query.AddOpNode('AND')

        if self._FSwiftMLUtils.get_acm_version() < 2018.2:
            node.AddAttrNodeString('CurrentStep.State.StateChart.Name', param.get('sc'), 'EQUAL')
            node.AddAttrNodeString('CurrentStep.State.Name', param.get('state'), 'EQUAL')
        else:
            node.AddAttrNodeString('StateChart.Name', param.get('sc'), 'EQUAL')
            node.AddAttrNodeString('CurrentStateName', param.get('state'), 'EQUAL')

        node.AddAttrNodeEnum('AdditionalInfo.SwiftMessageType', param.get('mt_type'))
        
        return query

    def create_unidentified_bpr_query(self, mt_types, state=None):
        ''' '''

        notifier.DEBUG("Started creating unidentified_bpr_query...")
        for mt_type in mt_types:
            params = []
            q_type = 'UnpairedBPRQuery'
            params.append(self._FSwiftMLUtils.Parameters('F%sIn_Config' % (mt_type)))
            q_param = {'mt_type': mt_type, 'state': state,
                   'sc': self._FSwiftMLUtils.get_state_chart_name_for_mt_type(mt_type)
                   }

            '''Create Query object and set input and logic/strategy to create query'''
            queryObj = DataPrep.QueryCreator()
            queryObj.query_strategy_param = q_param
            queryObj.query_strategy_func = self._query_strategy
            self.create_query(params, queryObj, q_type)
            notifier.DEBUG("unidentified_bpr_query completed for %s" % mt_type)

def run_data_prep(context=''):
    try:
        notifier.INFO("-"*100)
        notifier.INFO("Running Part-2 of Data Preps for FSwiftSecuritySettlementMXIn_DataPrep")
        dp_obj = FSwiftSecuritySettlementMXInDataPrepPart2()
        message_types = ['sese025']
        states = 'Settled'
        notifier.INFO("\nStep-1")
        notifier.INFO("Creating Business Process Queries")
        
        dp_obj.create_unidentified_bpr_query(message_types, state='Unpaired')
        notifier.INFO("Creation of Business Process Queries completed")
        notifier.INFO("\nStep-2")

        dp_obj.create_archive_task(message_types, states)

        notifier.INFO("\nStep-3")

        dp_obj.create_operation_permissions(message_types)

        notifier.INFO("\n")
        notifier.INFO("FSwiftSecuritySettlementMXIn_DataPrep Part-2 is successfully executed.")
        notifier.INFO("-"*100)
    except Exception as err:
        notifier.INFO("Exception in running FSwiftSecuritySettlementMXIn_DataPrep DataPrep Part-2 %r:" % err , exc_info=True)

run_data_prep(context='SwiftMessagingSolution')

...

  FSwiftSecuritySettlementMXOut_DataPrep
"""----------------------------------------------------------------------------
MODULE
    FSwiftSecuritySettlementMXOut_DataPrep: Data preparation for MX Security Settlement message
DESCRIPTION
    Data preparation for ecurity Settlement MX message.

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import FSwiftDataPreparation as DataPrep
notifier = DataPrep.notifier

class FSwiftSecuritySettlementMXOutDataPrep(DataPrep.FSwiftPreInstOutgoingDataPrep):
    '''Class representing Data preparation for SecuritySettlementMX outgoing msgs '''

    def create_archive_task(self, message_types, states, inorout='Out'):
        notifier.INFO("Creating Archiving tasks.")
        super(FSwiftSecuritySettlementMXOutDataPrep, self).create_archive_task(message_types, states, inorout=inorout)
        notifier.INFO("Creation of Archiving tasks completed")

    def create_operation_permissions(self, message_types, inorout='Out'):
        notifier.INFO("Creating operation permissions.")
        super(FSwiftSecuritySettlementMXOutDataPrep, self).create_operation_permissions(message_types, inorout)
        notifier.INFO("Creation of operation permissions completed")


def run_data_prep(context=''):
    try:
        notifier.INFO("-"*100)
        notifier.INFO("Running Data Prep for FSwiftSecuritySettlementMXOut_DataPrep")
        notifier.INFO("\nStep-1")
        dp_obj = FSwiftSecuritySettlementMXOutDataPrep()
        message_types = ['sese023']
        state = 'Acknowledged'
        dp_obj.create_archive_task(message_types, state, 'Out')

        notifier.INFO("\nStep-2")
        dp_obj.create_operation_permissions(message_types, 'Out')
        notifier.INFO("\n")
        notifier.INFO("FSwiftSecuritySettlementMXOut_DataPrep is successfully executed.")
        notifier.INFO("-"*100)
    except Exception as err:
        notifier.ERROR("Exception in running FSwiftSecuritySettlementMXOut_DataPrep :%r" % err, exc_info=True)

run_data_prep(context='SwiftMessagingSolution')

...

  FSwiftSecuritySettlementOut_DataPrep
"""----------------------------------------------------------------------------
MODULE:
    FSwiftSecuritySettlementOut_DataPrep

DESCRIPTION:
    Data preparation script for SecuritySettlementOut
    Script performs following tasks:
    A. creates security settlement confirmation out state chart
    B. create archive tasks
    C. create operation permissions
    D. data preparation for FExternal object

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
	1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
	2. This module is not customizable.
	3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import FSecuritySettlementOutSC
import FSwiftDataPreparation as DataPrep

notifier = DataPrep.notifier


class FSwiftSecuritySettlementOutDataPrep(DataPrep.FSwiftPreInstOutgoingDataPrep):

    def create_state_chart(self):
        notifier.INFO("Creating State Charts...")
        FSecuritySettlementOutSC.create_sec_settlement_conf_out_sc()
        notifier.INFO("State Chart creation completed.")

    def create_archive_task(self, message_types, states, inorout='Out'):
        notifier.INFO("Creating Archiving tasks...")
        super(FSwiftSecuritySettlementOutDataPrep, self).create_archive_task(message_types, states, inorout=inorout)
        notifier.INFO("Creation of Archiving tasks completed")

    def create_operation_permissions(self, message_types, inorout='Out'):
        notifier.INFO("Creating operation permissions...")
        super(FSwiftSecuritySettlementOutDataPrep, self).create_operation_permissions(message_types, inorout)
        notifier.INFO("Creation of operation permissions completed")



def run_data_prep(context=''):
    try:
        notifier.INFO("-"*100)
        notifier.INFO("Running Data Prep for FSwiftSecuritySettlementOut")
        dp_obj = FSwiftSecuritySettlementOutDataPrep()
        notifier.INFO("\nStep-1")
        dp_obj.create_state_chart()

        notifier.INFO("\nStep-2")
        dp_obj.create_archive_task(['MT540'], 'Acknowledged')

        notifier.INFO("\nStep-3")
        msg_types_operation_permission = ['MT540', 'MT541', 'MT542', 'MT543','MT518', 'MT599']
        dp_obj.create_operation_permissions(msg_types_operation_permission)


        notifier.INFO("\n")
        notifier.INFO("FSwiftSecuritySettlementOut_DataPrep is successfully executed.")
        notifier.INFO("-"*100)
    except Exception as e:
        notifier.INFO("Exception in running FSwiftSecuritySettlementOut"
                      "DataPrep:%r" % e, exc_info=True)

...

  FSwiftStatementOfHoldingIn_DataPrep_Part1
"""----------------------------------------------------------------------------
MODULE:
    FSwiftStatementOfHoldingIn_DataPrep_Part1

DESCRIPTION:
    Data preparation script for StatementOfHolding
    Script performs following tasks:
    A. create Statement Of Holding state chart
    B. create choice list and add infos
    C. data preaparation for FExternal object
    D. create eligibility query
    E. create columns

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import acm
import FStatementOfHoldingInSC
import FSwiftDataPreparation as DataPrep
import os

notifier = DataPrep.notifier


class FSwiftStatementOfHoldingInDataPrepPart1(DataPrep.FSwiftPreInstIncomingDataPrep):

    def create_state_chart(self):
        notifier.INFO("Creating State Charts")
        FStatementOfHoldingInSC.create_statement_of_holding_sc()
        notifier.INFO("State Chart creation completed.")

    def adm_prepare_choicelist(self):
        notifier.INFO("Creating Choice list")
        swift_message_type = [{'name': 'MT535', 'description': 'Swift message type'}]

        self.create_choicelist(cl_name='SwiftMessageType', cl_values=swift_message_type)
        notifier.INFO("Choice list creation completed")

    def adm_prepare_addinfo(self):
        notifier.INFO("Creating Additional Infos...")
        common_list_of_addinfo = DataPrep.get_list_of_addInfo_to_add()
        self.create_addinfo(common_list_of_addinfo)
        notifier.INFO("Additional Infos creation completed.")

    def create_columns(self, fileName, context):
        notifier.INFO("Creating Columns")
        super(FSwiftStatementOfHoldingInDataPrepPart1, self).create_columns(fileName, context)
        notifier.INFO("Columns creation completed")


def run_data_prep(context=''):
    try:
        notifier.INFO("-"*100)
        notifier.INFO("Running Part-1 of Data Preps for FSwiftStatementOfHoldingIn")
        dp_obj = FSwiftStatementOfHoldingInDataPrepPart1()
        
        notifier.INFO("\nStep-1")
        dp_obj.create_state_chart()
        
        notifier.INFO("\nStep-2")
        dp_obj.adm_prepare_choicelist()
        dp_obj.adm_prepare_addinfo()
        
        notifier.INFO("\nStep-3")
        dp_obj.create_columns(os.path.basename(__file__), context)
        notifier.INFO("\n")
        notifier.INFO("FSwiftStatementOfHoldingIn_DataPrep Part-1 is successfully executed.")
        notifier.INFO("\n")
        notifier.INFO("Please restart Prime application before running FSwiftStatementOfHoldingIn_DataPrep Part 2")
        notifier.INFO("-"*100)
    except Exception as err:
        notifier.INFO("Exception in running FSwiftStatementOfHoldingIn DataPrep Part-1:%r" % err, exc_info=True)



...

  FSwiftStatementOfHoldingIn_DataPrep_Part2
"""----------------------------------------------------------------------------
MODULE:
    FSwiftStatementOfHoldingIn_DataPrep_Part2

DESCRIPTION:
    Data preparation script for StatementOfHolding
    Script performs following tasks:
    A. create unidentified business process query
    B. create archive tasks
    C. create operation permissions

VERSION: 3.6.3-0.5.6048

RESTRICTIONS/LIMITATIONS:
    1. Any modifications to the script/encrypted module/clear text code within the core is not supported.
    2. This module is not customizable.
    3. The component may not work as expected with any modifications done to this module at user end.
----------------------------------------------------------------------------"""
import acm
import FSwiftDataPreparation as DataPrep

notifier = DataPrep.notifier


class FSwiftStatementOfHoldingInDataPrepPart2(DataPrep.FSwiftPostInstIncomingDataPrep):

    def create_archive_task(self, message_types, states, inorout='In'):
        notifier.INFO("Creating Archiving tasks...")
        super(FSwiftStatementOfHoldingInDataPrepPart2, self).create_archive_task(message_types, states, inorout=inorout)
        notifier.INFO("Creation of Archiving tasks completed")

    def create_operation_permissions(self, message_types, inorout='In'):
        notifier.INFO("Creating operation permissions.")
        super(FSwiftStatementOfHoldingInDataPrepPart2, self).create_operation_permissions(message_types, inorout)
        notifier.INFO("Creation of operation permissions completed")

    def _query_strategy(self, param):
        ''' '''
        query = acm.CreateFASQLQuery(acm.FBusinessProcess, 'AND')
        node = query.AddOpNode('AND')
        if self._FSwiftMLUtils.get_acm_version() < 2018.2:
            node.AddAttrNodeString('CurrentStep.State.StateChart.Name', param.get('sc'), 'EQUAL')
            node.AddAttrNodeString('CurrentStep.State.Name', param.get('state'), 'EQUAL')
        else:
            node.AddAttrNodeString('StateChart.Name', param.get('sc'), 'EQUAL')
            node.AddAttrNodeString('CurrentStateName', param.get('state'), 'EQUAL')

        node.AddAttrNodeEnum('AdditionalInfo.SwiftMessageType', param.get('mt_type'))
        return query

    def create_unidentified_bpr_query(self, mt_type_list, q_type='UnpairedBPRQuery', state='Unpaired'):
        ''' '''
        notifier.DEBUG("Started creating unidentified BPR query for %r ..." % mt_type_list)
        for mt_type in mt_type_list:
            params = []
            params.append(self._FSwiftMLUtils.Parameters('F%sIn_Config' % (mt_type)))
            tmp = {'mt_type': mt_type, 'state': state,
                   'sc': self._FSwiftMLUtils.get_state_chart_name_for_mt_type(mt_type)
                   }

            '''Create Query object and set param/input and logic/strategy to create query'''
            queryObj = DataPrep.QueryCreator()
            queryObj.query_strategy_param = tmp
            queryObj.query_strategy_func = self._query_strategy
            self.create_query(params, queryObj, q_type)
            notifier.DEBUG("unidentified_bpr_query completed for %s" % mt_type)


def run_data_prep(context=''):
    try:
        notifier.INFO("-"*100)
        notifier.INFO("Running Part-2 of Data Preps for FSwiftStatementOfHoldingIn")
        dp_obj = FSwiftStatementOfHoldingInDataPrepPart2()
        message_types = ['MT535']
        STATES = 'Settled'
        
        notifier.INFO("Creating Business Process Queries")        
        notifier.INFO("\nStep-1")
        notifier.INFO("Creating Statement of Holding Query")
        dp_obj.create_unidentified_bpr_query(['MT535'], q_type='TradeCreateSuccessQuery', state='Processed')
        notifier.INFO("Creation of Statement of Holding completed")
        
        notifier.INFO("\nStep-2")
        notifier.INFO("Creating Statement of Holding Failed Query")
        dp_obj.create_unidentified_bpr_query(['MT535'], q_type='TradeCreateFailedQuery', state='Failed')
        notifier.INFO("Creation of Statement of Holding Failed Query completed")
        notifier.INFO("Creating Business Process Queries Completed")
        
        notifier.INFO("\nStep-3")
        message_types = ['MT535']
        dp_obj.create_archive_task(message_types, 'Processed')
        
        notifier.INFO("\n")
        notifier.INFO("FSwiftStatementOfHoldingIn_DataPrep Part-2 is successfully executed.")
        notifier.INFO("-"*100)
    except Exception as e:
        notifier.INFO("Exception in running FSwiftStatementOfHoldingIn DataPrep Part-2 :%r" % e, exc_info=True)
        

...

  SwiftInstaller_Utilities
"""SwiftInstaller_Utilities"""
import base64, zlib, imp, marshal
if imp.get_magic() == b'a\r\r\n':
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
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""")))
else:
    __pyc = marshal.loads(zlib.decompress(base64.b64decode("""
The system cannot find the path specified.""")))
del base64, zlib, imp, marshal
exec (__pyc)
del __pyc


...

}

