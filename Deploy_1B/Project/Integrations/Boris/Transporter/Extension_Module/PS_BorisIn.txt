#
# Front Arena exported extension module.
# source          ""
# timestamp (utc) "2024-06-06 03:53:34"
# ***** DO NOT EDIT! *****
#
name        "PS_BorisIn"
description "$Id$"

groups {
}

decls[FMenuExtension] {
}

clx FTradeSheet [FMenuExtension] {
  Boris Trade Menu =
  DisplayName=Boris Interface
  MenuType=GridRowHeader
  SubMenuCreateFunction=BorisInMenuHelper.CreateBorisMenu


}

decls[FParameters] {
}

clx FObject [FParameters] {
  BorisInConfig =
  BORISACQUIRER=Mandiri TRS HO
  CertificateFile=D:\Interface\BORIS\Certificate\test_cer.crt
  DummyBondName=DummyBorisBond
  DummyCounterparty=DUMMY
  KeyFile=D:\Interface\BORIS\Certificate\test_key.key
  PortfolioMapper={'FTCT' : 'Clients Bonds Retail', 'FTAX': 'Clients Bonds Tax Amnesty', 'FTFI': 'Clients Bonds FI'}
  ServerPort=8082


}

decls[FPythonCode] {
}

clx FObject [FPythonCode] {
  BorisInMapper
"""-----------------------------------------------------------------------------------------------------
MODULE
    BorisInMapper

DESCRIPTION: This module provides the base class for providing mapping of JSON data to Deal.

-------------------------------------------------------------------------------------------------------"""
import acm, datetime, ast
import BorisUtils

trade_type_enum = acm.FEnumeration['enum(TradeType)']


class BorisInData(object):
    def __init__(self, _data_dict):
        """
            Initialise member variables
            :param python dict: dictionary
        """
        self._br = _data_dict.get('br')
        self._fedealno = _data_dict.get('fedealno')
        self._seq = _data_dict.get('seq')
        self._cno = _data_dict.get('cno')
        self._secsacct = _data_dict.get('secsacct')
        self._ps = _data_dict.get('ps')
        self._invtype = _data_dict.get('invtype')
        self._port = _data_dict.get('port')
        self._trad = _data_dict.get('trad')
        self._secid = _data_dict.get('secid')
        self._isincode = _data_dict.get('isincode')
        self._origqty = _data_dict.get('origqty')
        self._price8 = _data_dict.get('price8')
        self._settdate = _data_dict.get('settdate')
        self._cost = _data_dict.get('cost')
        self._dealdate = _data_dict.get('dealdate')
        self._dealtime = _data_dict.get('dealtime')
        self._dealtext = _data_dict.get('dealtext')
        self._verind = _data_dict.get('verind')
        self._standinstr = _data_dict.get('standinstr')
        self._settccy = _data_dict.get('settccy')
        self._broker = _data_dict.get('broker')
        self._dealnotes = _data_dict.get('dealnotes')
        self._tax = _data_dict.get('tax')
        self._totaltax = _data_dict.get('totaltax')
        self._netproceed = _data_dict.get('netproceed')
        self._acqprice = _data_dict.get('acqprice')
        self._taxpercentage = _data_dict.get('taxpercentage')
        self._acqdate = _data_dict.get('acqdate')
        self._custodian = _data_dict.get('custodian')


class BorisInMapper(object):

    def __init__(self, json_data):
        """
        Initialise member variables
        :param json_string: string containing input in JSON format
        """
        self._source = 'BORIS'
        self._data_list = json_data
        boris_config = BorisUtils.Parameters('BorisInConfig')
        name = getattr(boris_config, 'DummyBondName', 'DummyBorisBond')
        self._port_mapper = ast.literal_eval(getattr(boris_config,'PortfolioMapper'))
        self._dummy_bond = BorisUtils.create_dummy_bond(name)
        self._product_type = 'BOND'
        self._fedealno = None
        #Adding default acquirer as per SIT ticket
        self.acq = getattr(boris_config,'BORISACQUIRER')
        self._dummy_cpty = getattr(boris_config,'DummyCounterparty')
        
    #Adding default acquirer as per SIT ticket
    def set_acquirer(self,trade):
        self.acq_pty = acm.FParty[self.acq]
        if self.acq_pty:
            self.acq_party_nbr = self.acq_pty.Oid()
            trade.Acquirer(self.acq_pty)
        else:
            print(f'Unable to set Acquirer : {self.acq} not found')
            
            
        
    def commit_trade(self, trade):
        """
        This function is base implementation to change trade before committing.
        :param trade: Trade to change
        :return: None
        """
        trade.Commit()
        
    def _get_branch_from_code(self,trade_data):
        """
        This function deduces branch code
        """
        ret_val = ''
        if trade_data._broker:
            ch_list = acm.FChoiceList['Branch']
            for branch in ch_list.Choices():
                ch_name = branch.Name()
                ch_name_split = ch_name.split('-')
                if len(ch_name_split) > 1:
                    ch_code = ch_name_split[0]
                    if int(trade_data._broker) == int(ch_code):
                        ret_val = ch_name
        
        return ret_val
        
    def _set_counterparty(self, cif, trade):
        """
        This function sets counterparty on trade
        """
        party = acm.FParty.Select01('hostId = {}'.format(cif), None)        
        if party is None:
            party = acm.FParty[self._dummy_cpty]
            trade.YourRef(cif)
        trade.Counterparty(party)
        
    def _translate_portfolio(self, portfolio):
        return self._port_mapper.get(portfolio, None)

    def create_payments(self, trade, trade_data):
        """
        This function creates payments
        :param trade: FTrade
        :param trade_data: trade data
        :return: None
        """
        total_tax_amount = trade_data._totaltax
        tax_percentage = trade_data._taxpercentage
        payment = acm.FPayment()
        payment.Amount(total_tax_amount)
        payment.Type('WHT')
        payment.Party(trade.Counterparty())
        payment.Currency(trade.Currency())
        payment.Text(tax_percentage + ' %')
        payment.PayDay(trade.ValueDay())
        payment.ValidFrom(acm.Time().DateToday())
        payment.Trade(trade)
        payment.Commit()

    def process_trade(self):
        """
        This function process the json data and creates the trade
        :return: None
        """
        for data_dict in self._data_list:
            try:
                acm.BeginTransaction()
                trade_data = BorisInData(data_dict)
                self._fedealno = trade_data._fedealno
                
                text2 = list()
                trade = acm.FTrade.Select01("optionalKey='{}'".format(self._fedealno), None)
                if trade is not None:
                    raise Exception('Trade with optionalKey = {} already exists.'.format(self._fedealno))
                trade = acm.FTrade(trade)
                self._set_counterparty(trade_data._cno, trade)
                #call set_acquirer as per SIT ticket
                self.set_acquirer(trade)
                
                trade.Text1(trade_data._dealtext)
                trade.OptKey2(self._source)
                trade.Type(trade_type_enum.Enumeration('Normal'))
                trade.OptionalKey(self._fedealno)
                if self._translate_portfolio(trade_data._port):
                    trade.Portfolio(acm.FPhysicalPortfolio[self._translate_portfolio(trade_data._port)])
                trade.Trader(acm.FUser[trade_data._trad])
                if trade_data._isincode:
                    instrument = acm.FInstrument.Select01('isin={}'.format(trade_data._isincode), None)
                    if instrument:
                        trade.Instrument(instrument)                                              
                    else:
                        # Look for the SecId
                        instrument = acm.FInstrument[trade_data._secid]
                        if instrument:
                            trade.Instrument(instrument)                            
                        else:
                            trade.Instrument(self._dummy_bond)                    
                elif trade_data._secid:
                    # Look for the SecId
                    instrument = acm.FInstrument[trade_data._secid]
                    if instrument:
                        trade.Instrument(instrument)
                    else:
                        trade.Instrument(self._dummy_bond)
                else:
                    trade.Instrument(self._dummy_bond)                    
                    
                text2.append(trade_data._isincode)
                text2.append(trade_data._secid)
                text2.append(trade_data._custodian)

                if text2:
                    trade.Text2(';'.join(text2))

                trade.Nominal(float(trade_data._origqty))
                trade.Price(float(trade_data._price8))
                
                if trade_data._verind in ['0', 0] and trade.Counterparty().Name() != self._dummy_cpty:
                    trade.Status('Reserved')
                else:
                    trade.Status('Simulated')
                trade.Currency(acm.FCurrency[trade_data._settccy])

                if trade_data._ps != 'P':
                    trade.Nominal(trade.Nominal() * -1)
                
                trade.Premium(0.01*trade.Price() * abs(trade.Nominal()) + (float(trade_data._tax) if trade_data._tax else 0))
                if trade_data._ps == 'P':
                    trade.Premium(-1*trade.Premium())

                if trade_data._dealdate:
                    deal_date = datetime.datetime.fromisoformat(trade_data._dealdate)

                    if trade_data._dealtime:
                        hh, mm, ss = trade_data._dealtime.split(':')
                        deal_time = datetime.datetime(hour=int(hh), minute=int(mm), second=int(ss),
                                                      year=deal_date.year, month=deal_date.month, day=deal_date.day)
                        trade.TradeTime(acm.Time().DateTimeFromTime(int(deal_time.timestamp())))

                if trade_data._settdate:
                    settlement_time = datetime.datetime.fromisoformat(trade_data._settdate)
                    settlement_date = acm.Time.DateFromYMD(settlement_time.year, settlement_time.month, settlement_time.day)
                    trade.ValueDay(settlement_date)
                    trade.AcquireDay(settlement_date)

                #trade.Broker(acm.FParty[trade_data._broker])
                branch_from_code = self._get_branch_from_code(trade_data)
                if branch_from_code:
                    trade.OptKey1(branch_from_code)
                if trade.Instrument().ProductTypeChlItem():
                    trade.OptKey3(trade.Instrument().ProductTypeChlItem())
                else:
                    trade.OptKey3(self._product_type)

                if trade.Instrument().CategoryChlItem():
                    trade.OptKey4(trade.Instrument().CategoryChlItem())

                trade.AdditionalInfo().CostCenter(trade_data._cost)
                trade.AdditionalInfo().DealNotes(trade_data._dealnotes)
                trade.AdditionalInfo().BR(trade_data._br)
                trade.AdditionalInfo().StandingInstruction(trade_data._standinstr)
                trade.AdditionalInfo().InvestmentType(trade_data._invtype)
                if trade_data._acqprice:
                    trade.AdditionalInfo().AcquisitionPrice(float(trade_data._acqprice))
                if trade_data._acqdate:
                    acq_time = datetime.datetime.fromisoformat(trade_data._acqdate)
                    acq_date = acm.Time.DateFromYMD(acq_time.year, acq_time.month, acq_time.day)
                    trade.AdditionalInfo().AcquisitionDate(acq_date)
                trade.AdditionalInfo().ManualWHT(True)
                self.commit_trade(trade)
                acm.CommitTransaction()
                if trade_data._ps == 'P':
                    acm.BeginTransaction()
                    self.create_payments(trade, trade_data)
                    acm.CommitTransaction()
            except Exception as err:
                acm.AbortTransaction()
                raise Exception('fedealno {}. {}'.format(self._fedealno, err))

...

  BorisInMenuHelper
"""-----------------------------------------------------------------------------------------------------
MODULE
    BorisInMenuHelper

DESCRIPTION: This module provides the class for providing menu support.

-------------------------------------------------------------------------------------------------------"""
import acm, BorisUtils
try:
    import FUxCore
except:
    # May not work for non GUI client
    pass


class BorisSubMenuItem(FUxCore.SubMenu):
    def __init__(self, extObj):
        """
        Initialize member variables
        :param extObj: GUI handle
        """
        boris_config = BorisUtils.Parameters('BorisInConfig')
        self._dummy_bond_name = getattr(boris_config, 'DummyBondName', 'DummyBorisBond')
        self.m_extObj = extObj
        self._instr_menu_trades = list()
        self._party_menu_trades = list()        
        
    def Applicable(self):
        """
        This function checks if the menu is available
        :return: boolean
        """
        ret_val = False
        try:
            if not hasattr(self.m_extObj, 'ActiveSheet'):
                return False
            selected_objects = self.m_extObj.ActiveSheet().Selection().SelectedRowObjects()
            selected_trades = [trd.Trade() for trd in selected_objects if trd.IsKindOf(acm.FTradeRow)]

            for trd in selected_trades:
                if trd.OptKey2() and trd.OptKey2().Name() in ['BORIS']:
                    if trd.Instrument().Name() == self._dummy_bond_name:
                        self._instr_menu_trades.append(trd)
                        ret_val = True
                    if trd.Counterparty() and trd.Counterparty().Id() in ['DUMMY']:                    
                        self._party_menu_trades.append(trd)
                        ret_val = True
                else:
                    ret_val = False
                    break
                
        except Exception as err:
            print('Error occurred in BorisSubMenuItem.Applicable. Err {}'.format(err))
        return ret_val

    def Enabled(self):
        """
        This function checks of the menu is enabled.
        :return: boolean
        """
        return True
        
    def link_instr(self, _dead_arg):
        """
        This function is called when the menu item is clicked.
        :param eii: GUI handle
        :return: None
        """
        # This method is called by the framework every time the menu is clicked.
        for trd in self._instr_menu_trades:
            try:
                _isincode = trd.Text2()
                if _isincode:
                    _isincode, _secid, _custodian = _isincode.split(';')   
                    instrument = None
                    if _isincode:
                        instrument = acm.FInstrument.Select01('isin={}'.format(_isincode), None)
                    if not instrument:
                        instrument  = acm.FInstrument[_secid]
                    if instrument:
                        trd.Instrument(instrument)
                        if instrument.ProductTypeChlItem():
                            trd.OptKey3(instrument.ProductTypeChlItem())                            
                        if instrument.CategoryChlItem():
                            trd.OptKey4(instrument.CategoryChlItem())
                        trd.Instrument(instrument)
                        trd.Commit()
                    else:
                        print('No instrument with ISIN {} or secid {} found for trade Id = {}'.format(_isincode, _secid, trd.Oid()))
                else:
                    print('No info to link instrument found for trade Id = {}'.format(trd.Oid()))
                
                

            except Exception as err:
                print('Error occurred in BorisSubMenuItem.link_instr. Err: {}'.format(err))
    
    def update_counterparty(self, _dead_arg):
        """
        This function updates the counterparty on trade
        :param _dead_arg: dummy argument
        :return: None
        """
        for trd in self._party_menu_trades:
            try:
                party_cif = trd.YourRef()
                if party_cif:
                    party = acm.FParty.Select01('id2={}'.format(party_cif), None)
                    if party:
                        trd.Counterparty(party)
                        trd.Commit()
                    else:
                        print('No party with CNO number {}, found for Trade {}'.format(party_cif, trd.Oid()))
                else:
                    print('No CNO number found for Trade {}'.format(trd.Oid()))
            except Exception as err:
                print('Error in UpdateCounterpartyMenu.Invoke. Err: {}'.format(err))
            
    def Invoke(self, eii):
        """
        This function is called when the user invokes menu
        :param eii: GUI handle
        :return: acm.FUxMenu 
        """
        menu = acm.FUxMenu()
        if self._instr_menu_trades:
            menu.AddItem(self.link_instr, None,"Link Instrument")
        if self._party_menu_trades:
            menu.AddItem(self.update_counterparty, None,"Link Counterparty")
            
        return menu
        
def CreateBorisMenu(eii):
    """
    This function handles the menu creation
    :param extObj: GUI handle
    :return: Object of FUxCore.SubMenu
    """
    return BorisSubMenuItem(eii)

...

  BorisInResponse
"""-----------------------------------------------------------------------------------------------------
MODULE
    BorisInResponse: This module provides the base class for boris deal response.

-------------------------------------------------------------------------------------------------------"""
import json


class BorisInResponse(object):
    def __init__(self, status, status_desc):
        """
        Initialize the member variable
        :param response_dict: dictionary containing response text
        """
        response_dict = {'Status': status, 'Message': status_desc}
        self._resp_json_object = json.dumps(response_dict)

    def get_json_object(self):
        """
        This function returns the JSON object
        :return: string
        """
        return self._resp_json_object

...

  BorisInServer
"""--------------------------------------------------------------------------------------------------
MODULE:
    BorisInServer : Module for handing the server functions

DESCRIPTION: This module uses flask and provides functions for handling webserver functions from client.
-------------------------------------------------------------------------------------------------------"""
from flask import Flask, request, jsonify
from BorisInMapper import BorisInMapper
import BorisUtils
from BorisInResponse import BorisInResponse
import traceback
import ael

app = Flask(__name__)


@app.route("/", methods=['GET'])
def welcome():
    """
    This function handles the default client request
    :return: string
    """
    return "Welcome to FrontArena webserver for handling BorisIn deals!"


@app.route("/borisin", methods=['POST'])
def borisin():
    """
    This function handles the boris in deals from client.
    :return: JSON object
    """
    response_data = None
    ael.poll()
    try:
        json_data = request.get_json()
        print('requestBody', json_data)
        
        boris_obj = BorisInMapper(json_data)
        print('boris_obj', boris_obj)
        
        try:
            boris_obj.process_trade()
            #response_string = 'BorisIn request is successful. fedealno {}'.format(boris_obj._fedealno)
            response_string = 'Created'
            print ('BorisIn request is successful. fedealno {}'.format(boris_obj._fedealno))
            status = BorisUtils.HttpsServerResponses.get('Created')
            response_data = BorisInResponse(status, response_string).get_json_object()
            print('responseBody', response_data)
        except Exception as err:
            print(traceback.format_exc())
            status = BorisUtils.HttpsServerResponses.get('InternalServerError')
            response_data = BorisInResponse(status, str(err)).get_json_object()
            print('responseBody', response_data)
    except Exception as err:
        print(traceback.format_exc())
        status = BorisUtils.HttpsServerResponses.get('InternalServerError')
        response_data = BorisInResponse(status, 'Error occurred in BorisIn {}.'.format(str(err))).get_json_object()

    return response_data


...

  BorisInServerMain
"""--------------------------------------------------------------------------------------------------
MODULE:
    BorisInServerMain : Main module for ATS

DESCRIPTION: This module uses gevent to run the webserver in start method.
             The start never returns and hence work and stop functions are not called.
-------------------------------------------------------------------------------------------------------"""
from gevent.pywsgi import WSGIServer
import BorisInServer, BorisUtils


def server_routine():
    """
    This function starts the gevent WSGI
    :return: None
    """
    try:
        boris_config = BorisUtils.Parameters('BorisInConfig')
        key_file = getattr(boris_config, 'KeyFile', None)
        server_port = getattr(boris_config, 'ServerPort', None)
        cert_file = getattr(boris_config, 'CertificateFile', None)

        if not server_port.isdigit():
            raise Exception('Port should be integer. Supplied {}'.format(server_port))

        bind = ('0.0.0.0', int(server_port))
        app = BorisInServer.app
        g_server = WSGIServer(bind, app, keyfile=key_file, certfile=cert_file)
        print('Started webserver.', g_server)
        g_server.serve_forever()
    except Exception as err:
        print(err)
        return False


def start():
    """ ATS start """
    try:
        server_routine()
    except Exception as err:
        print(err)



...

}

