#
# Front Arena exported extension module.
# source          ""
# timestamp (utc) "2024-10-24 04:38:53.8"
# ***** DO NOT EDIT! *****
#
name        "FLongformTradeConfirmationCustom"
description "$Id$"

groups {
}

decls[FColumnDefinition] {
  "LongFormAccountName" ( "sheet columns.confirmationsheet" ) "";
  "LongFormAccountNumber" ( "sheet columns.confirmationsheet" ) "";
  "LongFormAccruedInterest" ( "sheet columns.confirmationsheet" ) "";
  "LongFormAfterTax" ( "sheet columns.confirmationsheet" ) "";
  "LongFormAllInPrice" ( "sheet columns.confirmationsheet" ) "";
  "LongformBeliJual" ( "sheet columns.confirmationsheet" ) "";
  "LongFormBeliJual" ( "sheet columns.confirmationsheet" ) "";
  "LongFormBidPrice" ( "sheet columns.confirmationsheet" ) "";
  "LongFormBoughtSold" ( "sheet columns.confirmationsheet" ) "";
  "LongFormBuyAmount" ( "sheet columns.confirmationsheet" ) "";
  "LongFormCouponInterest" ( "sheet columns.confirmationsheet" ) "";
  "LongFormCouponPayDate" ( "sheet columns.confirmationsheet" ) "";
  "LongFormCurrency" ( "sheet columns.confirmationsheet" "standard groupers.favorite groupers" ) "";
  "LongFormCurrency1" ( "sheet columns.confirmationsheet" ) "";
  "LongFormCurrency2" ( "sheet columns.confirmationsheet" ) "";
  "LongFormCurrencyPair" ( "sheet columns.confirmationsheet" ) "";
  "LongFormDayCount" ( "sheet columns.confirmationsheet" ) "";
  "LongFormDaysCoupon" ( "sheet columns.confirmationsheet" ) "";
  "LongFormDeliveryDate" ( "sheet columns.confirmationsheet" ) "";
  "LongFormDiary" ( "sheet columns.confirmationsheet" ) "";
  "LongFormDNDF1" ( "sheet columns.confirmationsheet" ) "";
  "LongFormDNDF2" ( "sheet columns.confirmationsheet" ) "";
  "LongFormDNDFAmountIDR" ( "sheet columns.confirmationsheet" ) "";
  "LongFormDNDFAmountUSD" ( "sheet columns.confirmationsheet" ) "";
  "LongFormDomesticCurrency" ( "sheet columns.confirmationsheet" ) "";
  "LongFormEndCashRepo" ( "sheet columns.confirmationsheet" ) "";
  "LongFormEndDate" ( "sheet columns.confirmationsheet" ) "";
  "LongFormEndDate_Eng" ( "sheet columns.confirmationsheet" ) "";
  "LongFormEndInterest" ( "sheet columns.confirmationsheet" ) "";
  "LongFormExpiryDay" ( "sheet columns.confirmationsheet" ) "";
  "LongFormFaceValue" ( "sheet columns.confirmationsheet" ) "";
  "LongFormFarSellAmount" ( "sheet columns.confirmationsheet" ) "";
  "LongFormFixedRate" ( "sheet columns.confirmationsheet" ) "";
  "LongFormFixingSource" ( "sheet columns.confirmationsheet" ) "";
  "LongFormFixingValue" ( "sheet columns.confirmationsheet" ) "";
  "LongFormFloatRate" ( "sheet columns.confirmationsheet" ) "";
  "LongFormFloatRateRef" ( "sheet columns.confirmationsheet" ) "";
  "LongFormFXONominalCall" ( "sheet columns.confirmationsheet" ) "";
  "LongFormFXONominalPut" ( "sheet columns.confirmationsheet" ) "";
  "LongFormHaircut" ( "sheet columns.confirmationsheet" ) "";
  "LongFormHasilPajak" ( "sheet columns.confirmationsheet" ) "";
  "LongFormInstrument" ( "sheet columns.confirmationsheet" ) "";
  "LongFormInterestEndDate" ( "sheet columns.confirmationsheet" ) "";
  "LongFormInterestRateAtTradeTime" ( "sheet columns.confirmationsheet" ) "";
  "LongFormInterestRateFixed" ( "sheet columns.confirmationsheet" ) "";
  "LongFormInterestRateFloat" ( "sheet columns.confirmationsheet" ) "";
  "LongFormInterestStartDate" ( "sheet columns.confirmationsheet" ) "";
  "LongFormIsin" ( "sheet columns.confirmationsheet" ) "";
  "LongFormIssuer" ( "sheet columns.confirmationsheet" ) "";
  "LongFormLastCouponDate" ( "sheet columns.confirmationsheet" ) "";
  "LongFormLowerRange" ( "sheet columns.confirmationsheet" ) "";
  "LongFormMarketPrice" ( "sheet columns.confirmationsheet" ) "";
  "LongFormMMLDMaxYield" ( "sheet columns.confirmationsheet" ) "";
  "LongFormNetConsideration" ( "sheet columns.confirmationsheet" ) "";
  "LongFormNetProceed" ( "sheet columns.confirmationsheet" ) "";
  "LongFormNettingAmount" ( "sheet columns.confirmationsheet" ) "";
  "LongFormNettingAmountDNDF" ( "sheet columns.confirmationsheet" ) "";
  "LongFormNextCouponDate" ( "sheet columns.confirmationsheet" ) "";
  "LongFormNextCouponDate1" ( "sheet columns.confirmationsheet" ) "";
  "LongFormNominalAmount" ( "sheet columns.confirmationsheet" ) "";
  "LongFormNominalEqvCCS1" ( "sheet columns.confirmationsheet" ) "";
  "LongFormNominalEqvCCS2" ( "sheet columns.confirmationsheet" ) "";
  "LongFormNominalInterestFixed" ( "sheet columns.confirmationsheet" ) "";
  "LongFormNominalInterestFloat" ( "sheet columns.confirmationsheet" ) "";
  "LongFormNominalLastLeg" ( "sheet columns.confirmationsheet" ) "";
  "LongFormNominalPenempatan" ( "sheet columns.confirmationsheet" ) "";
  "LongFormNominalPrincipalPay" ( "sheet columns.confirmationsheet" ) "";
  "LongFormNominalPrincipalReceive" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccount" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccount_BondRepo" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccount_CCS_CCY1" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccount_CCS_CCY2" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccount_CCS_IDR" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccount_CCS_USD" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccount_CouponBond" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccount_DNDF" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccount_FXCash" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccount_FXOption" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccount_IRS" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccount_Repo" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccountCorrBank_BondRepo" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccountName" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccountName_BondRepo" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccountName_CCS_CCY1" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccountName_CCS_CCY2" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccountName_CouponBond" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccountName_FXCash" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccountName_FXOption" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccountName_Repo" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccountNetworkAlias_CouponBond" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccountNumber" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccountNumber_BondRepo" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccountNumber_CCS_CCY1" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccountNumber_CCS_CCY2" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccountNumber_CCS_IDR" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccountNumber_CCS_USD" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccountNumber_CouponBond" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccountNumber_DNDF" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccountNumber_FXCash" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccountNumber_FXOption" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccountNumber_IRS" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurAccountNumber_Repo" ( "sheet columns.confirmationsheet" ) "";
  "LongFormOurCorrespondentBank" ( "sheet columns.confirmationsheet" ) "";
  "LongFormPayCurrency" ( "sheet columns.confirmationsheet" ) "";
  "LongFormPayCurrencyPrincipal" ( "sheet columns.confirmationsheet" ) "";
  "LongFormPayNominal" ( "sheet columns.confirmationsheet" ) "";
  "LongFormPayOffset" ( "sheet columns.confirmationsheet" ) "";
  "LongFormPayReceive" ( "sheet columns.confirmationsheet" ) "";
  "LongFormPremium" ( "sheet columns.confirmationsheet" ) "";
  "LongFormPremiumCurrency" ( "sheet columns.confirmationsheet" ) "";
  "LongFormPrice" ( "sheet columns.confirmationsheet" ) "";
  "LongFormPrincipalAmount" ( "sheet columns.confirmationsheet" ) "";
  "LongFormProceed" ( "sheet columns.confirmationsheet" ) "";
  "LongFormQuantity" ( "sheet columns.confirmationsheet" ) "";
  "LongFormReceiveCurrency" ( "sheet columns.confirmationsheet" ) "";
  "LongFormReceiveCurrencyPrincipal" ( "sheet columns.confirmationsheet" ) "";
  "LongFormReceiveNominal" ( "sheet columns.confirmationsheet" ) "";
  "LongFormRefPrice" ( "sheet columns.confirmationsheet" ) "";
  "LongFormRekeningBeliBic" ( "sheet columns.confirmationsheet" ) "";
  "LongFormRekeningBeliNumber" ( "sheet columns.confirmationsheet" ) "";
  "LongFormRekeningJualBic" ( "sheet columns.confirmationsheet" ) "";
  "LongFormRekeningJualNumber" ( "sheet columns.confirmationsheet" ) "";
  "LongFormRollingPeriod" ( "sheet columns.confirmationsheet" ) "";
  "LongFormRollingPeriodBase" ( "sheet columns.confirmationsheet" ) "";
  "LongFormSecurityId" ( "sheet columns.confirmationsheet" ) "";
  "LongFormSellAmount" ( "sheet columns.confirmationsheet" ) "";
  "LongFormSettleInstruction" ( "sheet columns.confirmationsheet" ) "";
  "LongFormSettlement" ( "sheet columns.confirmationsheet" ) "";
  "LongFormSettlementDate" ( "sheet columns.confirmationsheet" ) "";
  "LongFormStrike" ( "sheet columns.confirmationsheet" ) "";
  "LongFormStrike2" ( "sheet columns.confirmationsheet" ) "";
  "LongFormSwift" ( "sheet columns.confirmationsheet" ) "";
  "LongFormTax" ( "sheet columns.confirmationsheet" ) "";
  "LongFormTest" ( "sheet columns.confirmationsheet" ) "";
  "LongFormTotalNominalPay" ( "sheet columns.confirmationsheet" ) "";
  "LongFormTotalNominalReceive" ( "sheet columns.confirmationsheet" ) "";
  "LongFormTotalProceeds" ( "sheet columns.confirmationsheet" ) "";
  "LongFormTradeDate" ( "sheet columns.confirmationsheet" ) "";
  "LongFormTradeDate_Eng" ( "sheet columns.confirmationsheet" ) "";
  "LongFormTraderSpotPrice" ( "sheet columns.confirmationsheet" ) "";
  "LongFormTradeTime" ( "sheet columns.confirmationsheet" ) "";
  "LongFormUnexecutedNominal" ( "sheet columns.confirmationsheet" ) "";
  "LongFormUpperRange" ( "sheet columns.confirmationsheet" ) "";
  "LongFormUSDRate" ( "sheet columns.confirmationsheet" ) "";
  "LongFormValueDate" ( "sheet columns.confirmationsheet" ) "";
  "LongFormValueDate_Eng" ( "sheet columns.confirmationsheet" ) "";
  "LongFormValueDay" ( "sheet columns.confirmationsheet" ) "";
  "LongFormWHT" ( "sheet columns.confirmationsheet" ) "";
  "LongFormWHTCurrency" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYield" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccount" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccount_BondRepo" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccount_CCS_CCY1" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccount_CCS_CCY2" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccount_CCS_IDR" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccount_CCS_USD" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccount_CouponBond" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccount_DNDF" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccount_FXCash" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccount_FXOption" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccount_IRS" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccount_Repo" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccountCorrBank_BondRepo" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccountName" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccountName_BondRepo" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccountName_CCS_CCY1" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccountName_CCS_CCY2" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccountName_CouponBond" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccountName_FXCash" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccountName_FXOption" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccountName_Repo" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccountNumber" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccountNumber_BondRepo" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccountNumber_CCS_CCY1" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccountNumber_CCS_CCY2" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccountNumber_CCS_IDR" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccountNumber_CCS_USD" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccountNumber_CouponBond" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccountNumber_DNDF" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccountNumber_FXCash" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccountNumber_FXOption" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccountNumber_IRS" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourAccountNumber_Repo" ( "sheet columns.confirmationsheet" ) "";
  "LongFormYourCorrespondentBank" ( "sheet columns.confirmationsheet" ) "";
  "Nominal1" ( "sheet columns.confirmationsheet" ) "";
  "Nominal2" ( "sheet columns.confirmationsheet" ) "";
  "Nominal3" ( "sheet columns.confirmationsheet" ) "";
  "Nominal4" ( "sheet columns.confirmationsheet" ) "";
  "Nominal5" ( "sheet columns.confirmationsheet" ) "";
  "Nominal6" ( "sheet columns.confirmationsheet" ) "";
  "Premium1" ( "sheet columns.confirmationsheet" ) "";
  "Premium2" ( "sheet columns.confirmationsheet" ) "";
  "Premium3" ( "sheet columns.confirmationsheet" ) "";
  "Premium4" ( "sheet columns.confirmationsheet" ) "";
  "Premium5" ( "sheet columns.confirmationsheet" ) "";
  "Premium6" ( "sheet columns.confirmationsheet" ) "";
  "presentValueBucketsLongForm" ( "sheet columns.moneyflowsheet" ) "";
  "Valuedate1" ( "sheet columns.confirmationsheet" ) "";
  "Valuedate2" ( "sheet columns.confirmationsheet" ) "";
  "Valuedate3" ( "sheet columns.confirmationsheet" ) "";
  "Valuedate4" ( "sheet columns.confirmationsheet" ) "";
  "Valuedate5" ( "sheet columns.confirmationsheet" ) "";
  "Valuedate6" ( "sheet columns.confirmationsheet" ) "";
}

clx FTradingSheet [FColumnDefinition] {
  LongFormAccountName =
  Description=The Account Name for the counterparty of this confirmation trade.
  ExtensionAttribute=LongFormAccountName
  GroupLabel=LongformTradeConfirmation
  LabelList=LongFormAccountName
  Name=LongFormAccountName


  LongFormAccountNumber =
  Description=The Account Number for the counterparty of this confirmation trade.
  ExtensionAttribute=LongFormAccountNumber
  GroupLabel=LongformTradeConfirmation
  LabelList=LongFormAccountNumber
  Name=LongFormAccountNumber


  LongFormAccruedInterest =
  Description=The accrued interest for this confirmation trade.
  ExtensionAttribute=LongFormAccruedInterest
  GroupLabel=LongformTradeConfirmation
  Name=LongFormAccruedInterest
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormAfterTax =
  Description=The after tax for this confirmation trade.
  ExtensionAttribute=LongFormAfterTax
  GroupLabel=LongformTradeConfirmation
  Name=LongFormAfterTax
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormAllInPrice =
  Description=The all in price for this confirmation trade.
  ExtensionAttribute=LongFormAllInPrice
  GroupLabel=LongformTradeConfirmation
  Name=LongFormAllInPrice
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongformBeliJual =
  Description=The "beli" or "jual" for this confirmation trade.
  ExtensionAttribute=LongFormBeliJual
  GroupLabel=LongformTradeConfirmation
  Name=LongformBeliJual
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormBeliJual =
  Description=The "beli" or "jual" for this confirmation trade.
  ExtensionAttribute=LongFormBeliJual
  GroupLabel=LongformTradeConfirmation
  Name=LongFormBeliJual
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormBidPrice =
  Description=The bid price for this confirmation trade.
  ExtensionAttribute=LongFormBidPrice
  GroupLabel=LongformTradeConfirmation
  Name=LongFormBidPrice
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormBoughtSold =
  Description=The bought or sold for this confirmation trade.
  ExtensionAttribute=LongFormBoughtSold
  GroupLabel=LongformTradeConfirmation
  Name=LongFormBoughtSold
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormBuyAmount =
  Description=The buy amount for this confirmation trade.
  ExtensionAttribute=LongFormBuyAmount
  GroupLabel=LongformTradeConfirmation
  Name=LongFormBuyAmount
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormCouponInterest =
  Description=The coupon interest for this confirmation trade.
  ExtensionAttribute=LongFormCouponInterest
  GroupLabel=LongformTradeConfirmation
  Name=LongFormCouponInterest
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormCouponPayDate =
  Description=The coupon pay date for this confirmation trade.
  ExtensionAttribute=LongFormCouponPayDate
  GroupLabel=LongformTradeConfirmation
  LabelList=LongFormPayDate
  Name=LongFormPayDate
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormCurrency =
  Description=The currency for this confirmation trade.
  ExtensionAttribute=LongFormCurrency
  GroupLabel=LongformTradeConfirmation
  Name=LongFormCurrency
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormCurrency1 =
  Description=The first currency for this confirmation trade.
  ExtensionAttribute=LongFormCurrency1
  GroupLabel=LongformTradeConfirmation
  Name=LongFormCurrency1
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormCurrency2 =
  Description=The second currency for this confirmation trade.
  ExtensionAttribute=LongFormCurrency2
  GroupLabel=LongformTradeConfirmation
  Name=LongFormCurrency2
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormCurrencyPair =
  Description=The currency pair for this confirmation trade.
  ExtensionAttribute=LongFormCurrencyPair
  GroupLabel=LongformTradeConfirmation
  Name=LongFormCurrencyPair
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormDayCount =
  Description=The day count method for this confirmation instrument trade.
  ExtensionAttribute=LongFormDayCount
  GroupLabel=LongformTradeConfirmation
  Name=LongFormDayCount
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormDaysCoupon =
  Description=The days coupon for this confirmation trade.
  ExtensionAttribute=LongFormDaysCoupon
  GroupLabel=LongformTradeConfirmation
  Name=LongFormDaysCoupon
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormDeliveryDate =
  Description=The instrument delivery date for this confirmation trade.
  ExtensionAttribute=LongFormDeliveryDate
  GroupLabel=LongformTradeConfirmation
  Name=LongFormDeliveryDate
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormDiary =
  Description=The diary for this confirmation trade.
  ExtensionAttribute=LongFormDiary
  GroupLabel=LongformTradeConfirmation
  LabelList=LongFormDiary
  Name=LongFormDiary


  LongFormDNDF1 =
  Description=The DNDF 1 for this confirmation trade.
  ExtensionAttribute=LongFormDNDF1
  GroupLabel=LongformTradeConfirmation
  Name=LongFormDNDF1
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormDNDF2 =
  Description=The DNDF 2 for this confirmation trade.
  ExtensionAttribute=LongFormDNDF2
  GroupLabel=LongformTradeConfirmation
  Name=LongFormDNDF2
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormDNDFAmountIDR =
  Description=The DNDF IDR Amount for this confirmation trade.
  ExtensionAttribute=LongFormDNDFAmountIDR
  GroupLabel=LongformTradeConfirmation
  Name=LongFormDNDFAmountIDR
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormDNDFAmountUSD =
  Description=The DNDF USD Amount for this confirmation trade.
  ExtensionAttribute=LongFormDNDFAmountUSD
  GroupLabel=LongformTradeConfirmation
  Name=LongFormDNDFAmountUSD
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormDomesticCurrency =
  Description=Currency of Domestic
  ExtensionAttribute=LongFormDomesticCurrency
  GroupLabel=LongformTradeConfirmation
  Name=LongFormDomesticCurrency
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormEndCashRepo =
  Description=The end cash for this confirmation trade repo.
  ExtensionAttribute=LongFormEndCashRepo
  GroupLabel=LongformTradeConfirmation
  Name=LongFormEndCashRepo
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormEndDate =
  Description=The end date for this confirmation trade.
  ExtensionAttribute=LongFormEndDate
  GroupLabel=LongformTradeConfirmation
  Name=LongFormEndDate
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormEndDate_Eng =
  Description=The end date for this confirmation trade in English.
  ExtensionAttribute=LongFormEndDate_Eng
  GroupLabel=LongformTradeConfirmation
  Name=LongFormEndDate_Eng
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormEndInterest =
  Description=
  ExtensionAttribute=LongFormEndInterest
  GroupLabel=LongformTradeConfirmation
  Name=LongFormEndInterest
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormExpiryDay =
  Description=The expiry for this confirmation trade instrument.
  ExtensionAttribute=LongFormExpiryDayExtAttr
  GroupLabel=LongformTradeConfirmation
  Name=LongFormExpiryDay
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormFaceValue =
  Description=The face value for this confirmation trade.
  ExtensionAttribute=LongFormFaceValue
  GroupLabel=LongformTradeConfirmation
  Name=LongFormFaceValue
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormFarSellAmount =
  Description=The far sell amount for this confirmation trade.
  ExtensionAttribute=LongFormFarSellAmount
  GroupLabel=LongformTradeConfirmation
  Name=LongFormFarSellAmount
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormFixedRate =
  Description=The Fixed Rate for this confirmation trade.
  ExtensionAttribute=LongFormFixedRate
  Format=VeryDetailedShowZeroHideNaN
  GroupLabel=LongformTradeConfirmation
  Name=LongFormFixedRate
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormFixingSource =
  Description=The fixing source for this confirmation trade.
  ExtensionAttribute=LongFormFixingSource
  GroupLabel=LongformTradeConfirmation
  Name=LongFormFixingSource
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormFixingValue =
  Description=The fixing value for this confirmation trade.
  ExtensionAttribute=LongFormFixingValue
  Format=SixDecimalDetailed
  GroupLabel=LongformTradeConfirmation
  Name=LongFormFixingValue
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormFloatRate =
  Description=The Float Rate for this confirmation trade.
  ExtensionAttribute=LongFormFloatRate
  GroupLabel=LongformTradeConfirmation
  Name=LongFormFloatRate
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormFloatRateRef =
  Description=The Float Rate Ref for this confirmation trade.
  ExtensionAttribute=LongFormFloatRateRef
  GroupLabel=LongformTradeConfirmation
  Name=LongFormFloatRateRef
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormFXONominalCall =
  Description=The FXO Nominal Call (Nominal Amount Foreign) for this confirmation trade.
  ExtensionAttribute=LongFormFXONominalCall
  Format=Imprecise
  GroupLabel=LongformTradeConfirmation
  Name=LongFormFXONominalCall
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormFXONominalPut =
  Description=The FXO Nominal Put (Nominal Amount Domestic) for this confirmation trade.
  ExtensionAttribute=LongFormFXONominalPut
  Format=Imprecise
  GroupLabel=LongformTradeConfirmation
  Name=LongFormFXONominalPut
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormHaircut =
  Description=The Haircut for this confirmation trade.
  ExtensionAttribute=LongFormHaircut
  GroupLabel=LongformTradeConfirmation
  Name=LongFormHaircut
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormHasilPajak =
  Description=LongFormEndInterest - LongFromWHT
  ExtensionAttribute=LongFormHasilPajak
  GroupLabel=LongformTradeConfirmation
  Name=LongFormHasilPajak
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormInstrument =
  Description=The instrument for this confirmation trade.
  ExtensionAttribute=LongFormInstrument
  GroupLabel=LongformTradeConfirmation
  Name=LongFormInstrument
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormInterestEndDate =
  Description=The interest end date for this confirmation trade.
  ExtensionAttribute=LongFormInterestEndDate
  GroupLabel=LongformTradeConfirmation
  Name=LongFormInterestEndDate
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormInterestRateAtTradeTime =
  Description=The interest rate at trade time for this confirmation trade.
  ExtensionAttribute=LongFormInterestRateAtTradeTime
  Format=SixDecimalDetailedPercent
  GroupLabel=LongformTradeConfirmation
  Name=LongFormInterestRateAtTradeTime
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormInterestRateFixed =
  Description=The interest rate fixed for this confirmation trade.
  ExtensionAttribute=LongFormInterestRateFixed
  GroupLabel=LongformTradeConfirmation
  Name=LongFormInterestRateFixed
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormInterestRateFloat =
  Description=The interest rate float for this confirmation trade.
  ExtensionAttribute=LongFormInterestRateFloat
  GroupLabel=LongformTradeConfirmation
  Name=LongFormInterestRateFloat
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormInterestStartDate =
  Description=The interest start date for this confirmation trade.
  ExtensionAttribute=LongFormInterestStartDate
  GroupLabel=LongformTradeConfirmation
  Name=LongFormInterestStartDate
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormIsin =
  Description=The ISIN for this confirmation trade.
  ExtensionAttribute=LongFormIsin
  GroupLabel=LongformTradeConfirmation
  Name=LongFormIsin
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormIssuer =
  Description=The Issuer Name for this confirmation trade.
  ExtensionAttribute=LongFormIssuer
  GroupLabel=LongformTradeConfirmation
  Name=LongFormIssuer
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormLastCouponDate =
  Description=The Last Coupon Date for this confirmation trade.
  ExtensionAttribute=LongFormLastCouponDate
  GroupLabel=LongformTradeConfirmation
  Name=LongFormLastCouponDate
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormLowerRange =
  Description=The lower range for this confirmation trade.
  ExtensionAttribute=LongFormLowerRange
  Format=ThreeDecimalDetailedShowZero
  GroupLabel=LongformTradeConfirmation
  Name=LongFormLowerRange
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormMarketPrice =
  Description=The market price for this confirmation trade.
  ExtensionAttribute=LongFormMarketPrice
  GroupLabel=LongformTradeConfirmation
  Name=LongFormMarketPrice
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormMMLDMaxYield =
  Description=The maximum yield for MMLD in this confirmation trade.
  ExtensionAttribute=LongFormMMLDMaxYield
  GroupLabel=LongformTradeConfirmation
  Name=LongFormMMLDMaxYield
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormNetConsideration =
  Description=The net consideration for this confirmation trade.
  ExtensionAttribute=LongFormNetConsideration
  GroupLabel=LongformTradeConfirmation
  Name=LongFormNetConsideration
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormNetProceed =
  Description=The net proceed for this confirmation trade.
  ExtensionAttribute=LongFormNetProceed
  Format=Detailed
  GroupLabel=LongformTradeConfirmation
  Name=LongFormNetProceed
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormNettingAmount =
  Description=The Nominal Interest Fixed - Nominal Interest Float for this confirmation trade.
  ExtensionAttribute=LongFormNettingAmount
  GroupLabel=LongformTradeConfirmation
  Name=LongFormNettingAmount
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormNettingAmountDNDF =
  Description=The DNDF 1 - DNDF 2 for this confirmation trade.
  ExtensionAttribute=LongFormNettingAmountDNDF
  GroupLabel=LongformTradeConfirmation
  Name=LongFormNettingAmountDNDF
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormNextCouponDate =
  Description=The Next Coupon Date for this confirmation trade.
  ExtensionAttribute=LongFormNextCouponDate
  GroupLabel=LongformTradeConfirmation
  Name=LongFormNextCouponDate
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormNextCouponDate1 =
  Description=The Next Coupon Date for this confirmation trade.
  ExtensionAttribute=LongFormNextCouponDate1
  GroupLabel=LongformTradeConfirmation
  LabelList=LongFormNextCouponDate
  Name=LongFormNextCouponDate1
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormNominalAmount =
  Description=The nominal amount (equals to face value) for this confirmation trade.
  ExtensionAttribute=LongFormNominalAmount
  GroupLabel=LongformTradeConfirmation
  Name=LongFormNominalAmount
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormNominalEqvCCS1 =
  Description=The nominal equivalent 1 for CCS in this confirmation trade.
  ExtensionAttribute=LongFormNominalEqvCCS1
  GroupLabel=LongformTradeConfirmation
  Name=LongFormNominalEqvCCS1
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormNominalEqvCCS2 =
  Description=The nominal equivalent 2 for CCS in this confirmation trade.
  ExtensionAttribute=LongFormNominalEqvCCS2
  GroupLabel=LongformTradeConfirmation
  Name=LongFormNominalEqvCCS2
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormNominalInterestFixed =
  Description=The nominal interest fixed for this confirmation trade.
  ExtensionAttribute=LongFormNominalInterestFixed
  GroupLabel=LongformTradeConfirmation
  Name=LongFormNominalInterestFixed
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormNominalInterestFloat =
  Description=The nominal interest float for this confirmation trade.
  ExtensionAttribute=LongFormNominalInterestFloat
  GroupLabel=LongformTradeConfirmation
  Name=LongFormNominalInterestFloat
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormNominalLastLeg =
  Description=The last leg nominal amount (equals to face value) for this confirmation trade.
  ExtensionAttribute=LongFormNominalLastLeg
  GroupLabel=LongformTradeConfirmation
  Name=LongFormNominalLastLeg
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormNominalPenempatan =
  Description=The plaecement nominal for this confirmation trade.
  ExtensionAttribute=LongFormNominalPenempatan
  GroupLabel=LongformTradeConfirmation
  Name=LongFormNominalPenempatan
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormNominalPrincipalPay =
  Description=Nearest projected value where the type is Fixed Amount.
  ExtensionAttribute=LongFormNominalPrincipalPay
  GroupLabel=LongformTradeConfirmation
  Name=LongFormNominalPrincipalPay
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormNominalPrincipalReceive =
  Description=Nearest projected value where the type is Float Amount.
  ExtensionAttribute=LongFormNominalPrincipalReceive
  GroupLabel=LongformTradeConfirmation
  Name=LongFormNominalPrincipalReceive
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormOurAccount =
  Description=Our Account (acq)
  ExtensionAttribute=LongFormOurAccount
  GroupLabel=LongformTradeConfirmation
  Name=LongFormOurAccount
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormOurAccount_BondRepo =
  Description=Our Account (acq) for Bond and Repo
  ExtensionAttribute=LongFormOurAccount_BondRepo
  GroupLabel=LongformTradeConfirmation
  LabelList=LongFormOurAccount_BondRepo
  Name=LongFormOurAccount_BondRepo


  LongFormOurAccount_CCS_CCY1 =
  Description=Our Account (acq) for CCY1 CCS
  ExtensionAttribute=LongFormOurAccount_CCS_CCY1
  GroupLabel=LongformTradeConfirmation
  LabelList=LongFormOurAccount_CCS_CCY1
  Name=LongFormOurAccount_CCS_CCY1


  LongFormOurAccount_CCS_CCY2 =
  Description=Our Account (acq) for CCY2 CCS
  ExtensionAttribute=LongFormOurAccount_CCS_CCY2
  GroupLabel=LongformTradeConfirmation
  LabelList=LongFormOurAccount_CCS_CCY2
  Name=LongFormOurAccount_CCS_CCY2


  LongFormOurAccount_CCS_IDR =
  Description=Our Account (acq) for IDR CCS
  ExtensionAttribute=LongFormOurAccount_CCS_IDR
  GroupLabel=LongformTradeConfirmation
  LabelList=LongFormOurAccount_CCS_IDR
  Name=LongFormOurAccount_CCS_IDR


  LongFormOurAccount_CCS_USD =
  Description=Our Account (acq) for USD CCS
  ExtensionAttribute=LongFormOurAccount_CCS_USD
  GroupLabel=LongformTradeConfirmation
  LabelList=LongFormOurAccount_CCS_USD
  Name=LongFormOurAccount_CCS_USD


  LongFormOurAccount_CouponBond =
  Description=Our Account (acq) for Coupon Bond
  ExtensionAttribute=LongFormOurAccount_CouponBond
  GroupLabel=LongformTradeConfirmation
  LabelList=LongFormOurAccount_CouponBond
  Name=LongFormOurAccount_CouponBond


  LongFormOurAccount_DNDF =
  Description=Our Account (acq) for DNDF
  ExtensionAttribute=LongFormOurAccount_DNDF
  GroupLabel=LongformTradeConfirmation
  LabelList=LongFormOurAccount_DNDF
  Name=LongFormOurAccount_DNDF


  LongFormOurAccount_FXCash =
  Description=Our Account (acq) for FX Cash
  ExtensionAttribute=LongFormOurAccount_FXCash
  GroupLabel=LongformTradeConfirmation
  Name=LongFormOurAccount_FXCash
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormOurAccount_FXOption =
  Description=Our Account (acq) for FX Option
  ExtensionAttribute=LongFormOurAccount_FXOption
  GroupLabel=LongformTradeConfirmation
  Name=LongFormOurAccount_FXOption
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormOurAccount_IRS =
  Description=Our Account (acq) for IRS
  ExtensionAttribute=LongFormOurAccount_IRS
  GroupLabel=LongformTradeConfirmation
  LabelList=LongFormOurAccount_IRS
  Name=LongFormOurAccount_IRS


  LongFormOurAccount_Repo =
  Description=Our Account (acq) for Repo
  ExtensionAttribute=LongFormOurAccount_Repo
  GroupLabel=LongformTradeConfirmation
  Name=LongFormOurAccount_Repo
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormOurAccountCorrBank_BondRepo =
  Description=Our Account (acq) correspondent bank for Bond and Repo
  ExtensionAttribute=LongFormOurAccountCorrBank_BondRepo
  GroupLabel=LongformTradeConfirmation
  LabelList=LongFormOurAccountCorrBank_BondRepo
  Name=LongFormOurAccountCorrBank_BondRepo


  LongFormOurAccountName =
  Description=Our Account (acq) name
  ExtensionAttribute=LongFormOurAccountName
  GroupLabel=LongformTradeConfirmation
  Name=LongFormOurAccountName
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormOurAccountName_BondRepo =
  Description=Our Account (acq) name for Bond and Repo
  ExtensionAttribute=LongFormOurAccountName_BondRepo
  GroupLabel=LongformTradeConfirmation
  LabelList=LongFormOurAccountName_BondRepo
  Name=LongFormOurAccountName_BondRepo


  LongFormOurAccountName_CCS_CCY1 =
  Description=Our Account (acq) name for CCS CCY 1
  ExtensionAttribute=LongFormOurAccountName_CCS_CCY1
  GroupLabel=LongformTradeConfirmation
  LabelList=LongFormOurAccountName_CCS_CCY1
  Name=LongFormOurAccountName_CCS_CCY1


  LongFormOurAccountName_CCS_CCY2 =
  Description=Our Account (acq) name for CCS CCY 2
  ExtensionAttribute=LongFormOurAccountName_CCS_CCY2
  GroupLabel=LongformTradeConfirmation
  LabelList=LongFormOurAccountName_CCS_CCY2
  Name=LongFormOurAccountName_CCS_CCY2


  LongFormOurAccountName_CouponBond =
  Description=Our Account (acq) name for Coupon Bond
  ExtensionAttribute=LongFormOurAccountName_CouponBond
  GroupLabel=LongformTradeConfirmation
  LabelList=LongFormOurAccountName_CouponBond
  Name=LongFormOurAccountName_CouponBond


  LongFormOurAccountName_FXCash =
  Description=Our Account (acq) name for FX Cash
  ExtensionAttribute=LongFormOurAccountName_FXCash
  GroupLabel=LongformTradeConfirmation
  Name=LongFormOurAccountName_FXCash
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormOurAccountName_FXOption =
  Description=Our Account (acq) name for FX Option
  ExtensionAttribute=LongFormOurAccountName_FXOption
  GroupLabel=LongformTradeConfirmation
  Name=LongFormOurAccountName_FXOption
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormOurAccountName_Repo =
  Description=Our Account (acq) name for Repo
  ExtensionAttribute=LongFormOurAccountName_Repo
  GroupLabel=LongformTradeConfirmation
  Name=LongFormOurAccountName_Repo
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormOurAccountNetworkAlias_CouponBond =
  Description=Our Account (acq) network alias for Coupon Bond
  ExtensionAttribute=LongFormOurAccountNetworkAlias_CouponBond
  GroupLabel=LongformTradeConfirmation
  LabelList=LongFormNetworkAlias
  Name=LongFormNetworkAlias


  LongFormOurAccountNumber =
  Description=Our Account (acq) number
  ExtensionAttribute=LongFormOurAccountNumber
  GroupLabel=LongformTradeConfirmation
  Name=LongFormOurAccountNumber
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormOurAccountNumber_BondRepo =
  Description=Our Account (acq) number for Bond and Repo
  ExtensionAttribute=LongFormOurAccountNumber_BondRepo
  GroupLabel=LongformTradeConfirmation
  LabelList=LongFormOurAccountNumber_BondRepo
  Name=LongFormOurAccountNumber_BondRepo


  LongFormOurAccountNumber_CCS_CCY1 =
  Description=Our Account (acq) number for CCY1 CCS
  ExtensionAttribute=LongFormOurAccountNumber_CCS_CCY1
  GroupLabel=LongformTradeConfirmation
  LabelList=LongFormOurAccountNumber_CCS_CCY1
  Name=LongFormOurAccountNumber_CCS_CCY1


  LongFormOurAccountNumber_CCS_CCY2 =
  Description=Our Account (acq) number for CCY2 CCS
  ExtensionAttribute=LongFormOurAccountNumber_CCS_CCY2
  GroupLabel=LongformTradeConfirmation
  LabelList=LongFormOurAccountNumber_CCS_CCY2
  Name=LongFormOurAccountNumber_CCS_CCY2


  LongFormOurAccountNumber_CCS_IDR =
  Description=Our Account (acq) number for IDR CCS
  ExtensionAttribute=LongFormOurAccountNumber_CCS_IDR
  GroupLabel=LongformTradeConfirmation
  LabelList=LongFormOurAccountNumber_CCS_IDR
  Name=LongFormOurAccountNumber_CCS_IDR


  LongFormOurAccountNumber_CCS_USD =
  Description=Our Account (acq) number for USD CCS
  ExtensionAttribute=LongFormOurAccountNumber_CCS_USD
  GroupLabel=LongformTradeConfirmation
  LabelList=LongFormOurAccountNumber_CCS_USD
  Name=LongFormOurAccountNumber_CCS_USD


  LongFormOurAccountNumber_CouponBond =
  Description=Our Account (acq) number for Coupon Bond
  ExtensionAttribute=LongFormOurAccountNumber_CouponBond
  GroupLabel=LongformTradeConfirmation
  LabelList=LongFormOurAccountNumber_CouponBond
  Name=LongFormOurAccountNumber_CouponBond


  LongFormOurAccountNumber_DNDF =
  Description=Our Account (acq) number for DNDF
  ExtensionAttribute=LongFormOurAccountNumber_DNDF
  GroupLabel=LongformTradeConfirmation
  LabelList=LongFormOurAccountNumber_DNDF
  Name=LongFormOurAccountNumber_DNDF


  LongFormOurAccountNumber_FXCash =
  Description=Our Account (acq) number for FX Cash
  ExtensionAttribute=LongFormOurAccountNumber_FXCash
  GroupLabel=LongformTradeConfirmation
  Name=LongFormOurAccountNumber_FXCash
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormOurAccountNumber_FXOption =
  Description=Our Account (acq) number for FX Option
  ExtensionAttribute=LongFormOurAccountNumber_FXOption
  GroupLabel=LongformTradeConfirmation
  Name=LongFormOurAccountNumber_FXOption
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormOurAccountNumber_IRS =
  Description=Our Account (acq) number for IRS
  ExtensionAttribute=LongFormOurAccountNumber_IRS
  GroupLabel=LongformTradeConfirmation
  LabelList=LongFormOurAccountNumber_IRS
  Name=LongFormOurAccountNumber_IRS


  LongFormOurAccountNumber_Repo =
  Description=Our Account (acq) number for Repo
  ExtensionAttribute=LongFormOurAccountNumber_Repo
  GroupLabel=LongformTradeConfirmation
  Name=LongFormOurAccountNumber_Repo
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormOurCorrespondentBank =
  Description=Your Account (Cpty)
  ExtensionAttribute=LongFormOurCorrespondentBank
  GroupLabel=LongformTradeConfirmation
  Name=LongFormOurCorrespondentBank
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormPayCurrency =
  Description=The pay currency for CCS in this confirmation trade.
  ExtensionAttribute=LongFormPayCurrency
  GroupLabel=LongformTradeConfirmation
  LabelList=LongFormPayCurrency
  Name=LongFormPayCurrency


  LongFormPayCurrencyPrincipal =
  Description=The pay currency for CCS in this confirmation trade.
  ExtensionAttribute=LongFormPayCurrencyPrincipal
  GroupLabel=LongformTradeConfirmation
  LabelList=LongFormPayCurrencyP
  Name=LongFormPayCurrencyP


  LongFormPayDateMMLD =
  Description=The pay date for this confirmation trade.
  ExtensionAttribute=LongFormPayDateMMLD
  GroupLabel=LongformTradeConfirmation
  LabelList=LongFormPayDateMMLD
  Name=LongFormPayDateMMLD
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormPayNominal =
  Description=The pay amount for CCS in this confirmation trade.
  ExtensionAttribute=LongFormPayNominal
  GroupLabel=LongformTradeConfirmation
  LabelList=LongFormPayNominal
  Name=LongFormPayNominal


  LongFormPayOffset =
  Description=The pay offset for this confirmation trade.
  ExtensionAttribute=LongFormPayOffset
  GroupLabel=LongformTradeConfirmation
  Name=LongFormPayOffset
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormPayReceive =
  Description=The pay or receive indicator for this confirmation trade.
  ExtensionAttribute=LongFormPayReceive
  GroupLabel=LongformTradeConfirmation
  Name=LongFormPayReceive
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormPremium =
  Description=The premium for this confirmation trade.
  ExtensionAttribute=LongFormPremium
  GroupLabel=LongformTradeConfirmation
  Name=LongFormPremium
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormPremiumCurrency =
  Description=Currency of Premium
  ExtensionAttribute=LongFormPremiumCurrency
  GroupLabel=LongformTradeConfirmation
  Name=LongFormPremiumCurrency
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormPrice =
  Description=The price for this confirmation trade.
  ExtensionAttribute=LongFormPrice
  Format=FiveDecimalDetailed
  GroupLabel=LongformTradeConfirmation
  Name=LongFormPrice
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormPrincipalAmount =
  Description=The face value multiplied by price.
  ExtensionAttribute=LongFormPrincipalAmount
  GroupLabel=LongformTradeConfirmation
  Name=LongFormPrincipalAmount
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormProceed =
  Description=The proceed for this confirmation trade.
  ExtensionAttribute=LongFormProceed
  GroupLabel=LongformTradeConfirmation
  Name=LongFormProceed
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormQuantity =
  Description=The quantity for this confirmation trade.
  ExtensionAttribute=LongFormQuantity
  GroupLabel=LongformTradeConfirmation
  Name=LongFormQuantity
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormReceiveCurrency =
  Description=The receive currency for CCS in this confirmation trade.
  ExtensionAttribute=LongFormReceiveCurrency
  GroupLabel=LongformTradeConfirmation
  LabelList=LongFormReceiveCurrency
  Name=LongFormReceiveCurrency


  LongFormReceiveCurrencyPrincipal =
  Description=The pay currency for CCS in this confirmation trade.
  ExtensionAttribute=LongFormReceiveCurrencyPrincipal
  GroupLabel=LongformTradeConfirmation
  LabelList=LongFormReceiveCurrencyP
  Name=LongFormReceiveCurrencyP


  LongFormReceiveNominal =
  Description=The receive amount for CCS in this confirmation trade.
  ExtensionAttribute=LongFormReceiveNominal
  GroupLabel=LongformTradeConfirmation
  LabelList=LongFormReceiveNominal
  Name=LongFormReceiveNominal


  LongFormRefPrice =
  Description=The reference price for this confirmation trade.
  ExtensionAttribute=LongFormRefPrice
  GroupLabel=LongformTradeConfirmation
  Name=LongFormRefPrice
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormRekeningBeliBic =
  Description=The Bic of counterparty account when the projected value is negative.
  ExtensionAttribute=LongFormRekeningBeliBic
  GroupLabel=LongformTradeConfirmation
  Name=LongFormRekeningBeliBic
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormRekeningBeliNumber =
  Description=The Number of counterparty account when the projected value is negative.
  ExtensionAttribute=LongFormRekeningBeliNumber
  GroupLabel=LongformTradeConfirmation
  Name=LongFormRekeningBeliNumber
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormRekeningJualBic =
  Description=The bic of counterparty account when the projected value is positive.
  ExtensionAttribute=LongFormRekeningJualBic
  GroupLabel=LongformTradeConfirmation
  Name=LongFormRekeningJualBic
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormRekeningJualNumber =
  Description=The number of counterparty account when the projected value is positive.
  ExtensionAttribute=LongFormRekeningJualNumber
  GroupLabel=LongformTradeConfirmation
  Name=LongFormRekeningJualNumber
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormRollingPeriod =
  Description=The rolling period for this confirmation trade.
  ExtensionAttribute=LongFormRollingPeriod
  GroupLabel=LongformTradeConfirmation
  Name=LongFormRollingPeriod
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormRollingPeriodBase =
  Description=The rolling period base for this confirmation trade.
  ExtensionAttribute=LongFormRollingPeriodBase
  GroupLabel=LongformTradeConfirmation
  Name=LongFormRollingPeriodBase
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormSecondNominalNearLeg =
  Description=The premium amount for this confirmation trade.
  ExtensionAttribute=LongFormSecondNominalNearLeg
  GroupLabel=LongformTradeConfirmation
  Name=LongFormSecondNominalNearLeg
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormSecurityId =
  Description=The collateral instrument from this confirmation trade.
  ExtensionAttribute=LongFormSecurityId
  GroupLabel=LongformTradeConfirmation
  Name=LongFormSecurityId
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormSellAmount =
  Description=The sell amount for this confirmation trade.
  ExtensionAttribute=LongFormSellAmount
  GroupLabel=LongformTradeConfirmation
  Name=LongFormSellAmount
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormSettleInstruction =
  Description=The settle instruction for this confirmation trade.
  ExtensionAttribute=LongFormSettleInstruction
  GroupLabel=LongformTradeConfirmation
  Name=LongFormSettleInstruction
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormSettlement =
  Description=The settlement for this confirmation trade.
  ExtensionAttribute=LongFormSettlement
  GroupLabel=LongformTradeConfirmation
  LabelList=LongFormSettlement
  Name=LongFormSettlement


  LongFormSettlementDate =
  Description=The settlement date for this confirmation trade.
  ExtensionAttribute=LongFormSettlementDate
  GroupLabel=LongformTradeConfirmation
  LabelList=LongFormSettlementDate
  Name=LongFormSettlementDate


  LongFormStrike =
  Description=The instrument strike for this confirmation trade.
  ExtensionAttribute=LongFormStrike
  GroupLabel=LongformTradeConfirmation
  Name=LongFormStrike
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormStrike2 =
  Description=The instrument leg 02 strike for this confirmation trade.
  ExtensionAttribute=LongFormStrike2
  GroupLabel=LongformTradeConfirmation
  Name=LongFormStrike2
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormSwift =
  Description=The counterparty swift for this confirmation trade.
  ExtensionAttribute=LongFormSwift
  GroupLabel=LongformTradeConfirmation
  Name=LongFormSwift
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormTax =
  Description=The tax for this confirmation trade.
  ExtensionAttribute=LongFormTax
  GroupLabel=LongformTradeConfirmation
  Name=LongFormTax
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormTest =
  Description=Testing Purpose.
  ExtensionAttribute=LongFormTest
  GroupLabel=LongformTradeConfirmation
  Name=LongFormTest
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormTotalAmount =
  Description=.
  ExtensionAttribute=LongFormTotalAmount
  GroupLabel=LongformTradeConfirmation
  LabelList=LongFormTotalAmount
  Name=LongFormTotalAmount


  LongFormTotalNominalPay =
  Description=Nominal Principal Pay + Nominal Interest Float.
  ExtensionAttribute=LongFormTotalNominalPay
  GroupLabel=LongformTradeConfirmation
  Name=LongFormTotalNominalPay
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormTotalNominalReceive =
  Description=Nominal Principal Receive + Nominal Interest Fixed.
  ExtensionAttribute=LongFormTotalNominalReceive
  GroupLabel=LongformTradeConfirmation
  Name=LongFormTotalNominalReceive
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormTotalProceeds =
  Description=The total proceeds (accrued interest + proceed) for this confirmation trade.
  ExtensionAttribute=LongFormTotalProceeds
  Format=Detailed
  GroupLabel=LongformTradeConfirmation
  Name=LongFormTotalProceeds
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormTradeDate =
  Description=The trade date for this confirmation trade.
  ExtensionAttribute=LongFormTradeDate
  GroupLabel=LongformTradeConfirmation
  Name=LongFormTradeDate
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormTradeDate_Eng =
  Description=The trade date for this confirmation trade in English.
  ExtensionAttribute=LongFormTradeDate_Eng
  GroupLabel=LongformTradeConfirmation
  Name=LongFormTradeDate_Eng


  LongFormTraderSpotPrice =
  Description=The trader spot price for this confirmation trade.
  ExtensionAttribute=LongFormTraderSpotPrice
  GroupLabel=LongformTradeConfirmation
  Name=LongFormTraderSpotPrice
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormTradeTime =
  Description=The value day for this confirmation trade.
  ExtensionAttribute=LongFormTradeTimeExtAttr
  GroupLabel=LongformTradeConfirmation
  Name=LongFormTradeTime
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormUnexecutedNominal =
  Description=The unexecuted nominal for this confirmation trade.
  ExtensionAttribute=LongFormUnexecutedNominal
  GroupLabel=LongformTradeConfirmation
  Name=LongFormUnexecutedNominal
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormUpperRange =
  Description=The upper range for this confirmation trade.
  ExtensionAttribute=LongFormUpperRange
  Format=ThreeDecimalDetailedShowZero
  GroupLabel=LongformTradeConfirmation
  Name=LongFormUpperRange
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormUSDRate =
  Description=The first leg USD Rate for this confirmation trade.
  ExtensionAttribute=LongFormUSDRate
  GroupLabel=LongformTradeConfirmation
  Name=LongFormUSDRate
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormValueDate =
  Description=The value date for this confirmation trade.
  ExtensionAttribute=LongFormValueDate
  GroupLabel=LongformTradeConfirmation
  Name=LongFormValueDate
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormValueDate_Eng =
  Description=The value date for this confirmation trade in English.
  ExtensionAttribute=LongFormValueDate_Eng
  GroupLabel=LongformTradeConfirmation
  Name=LongFormValueDate_Eng
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormValueDay =
  Description=The value day for this confirmation trade.
  ExtensionAttribute=LongFormValueDayExtAttr
  GroupLabel=LongformTradeConfirmation
  Name=LongFormValueDay
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormWHT =
  Description=The WHT for this confirmation trade.
  ExtensionAttribute=LongFormWHT
  Format=Detailed
  GroupLabel=LongformTradeConfirmation
  Name=LongFormWHT
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormWHTCurrency =
  Description=The WHT currency for this confirmation trade.
  ExtensionAttribute=LongFormWHTCurrency
  GroupLabel=LongformTradeConfirmation
  Name=LongFormWHTCurrency
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormYield =
  Description=The yield for this confirmation trade.
  ExtensionAttribute=LongFormYield
  Format=Imprecise
  GroupLabel=LongformTradeConfirmation
  Name=LongFormYield
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormYourAccount =
  Description=Your Counterparty (cpty)
  ExtensionAttribute=LongFormYourAccount
  GroupLabel=LongformTradeConfirmation
  Name=LongFormYourAccount
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormYourAccount_BondRepo =
  Description=Your Counterparty (cpty) for Bond and Repo
  ExtensionAttribute=LongFormYourAccount_BondRepo
  GroupLabel=LongformTradeConfirmation
  LabelList=LongFormYourAccount_BondRepo
  Name=LongFormYourAccount_BondRepo


  LongFormYourAccount_CCS_CCY1 =
  Description=Your Account (cpty) for CCY1 CCS
  ExtensionAttribute=LongFormYourAccount_CCS_CCY1
  GroupLabel=LongformTradeConfirmation
  LabelList=LongFormYourAccount_CCS_CCY1
  Name=LongFormYourAccount_CCS_CCY1


  LongFormYourAccount_CCS_CCY2 =
  Description=Your Account (cpty) for CCY2 CCS
  ExtensionAttribute=LongFormYourAccount_CCS_CCY2
  GroupLabel=LongformTradeConfirmation
  LabelList=LongFormYourAccount_CCS_CCY2
  Name=LongFormYourAccount_CCS_CCY2


  LongFormYourAccount_CCS_IDR =
  Description=Your Counterparty (cpty) for IDR CCS
  ExtensionAttribute=LongFormYourAccount_CCS_IDR
  GroupLabel=LongformTradeConfirmation
  LabelList=LongFormYourAccount_CCS_IDR
  Name=LongFormYourAccount_CCS_IDR


  LongFormYourAccount_CCS_USD =
  Description=Your Counterparty (cpty) for USD CCS
  ExtensionAttribute=LongFormYourAccount_CCS_USD
  GroupLabel=LongformTradeConfirmation
  LabelList=LongFormYourAccount_CCS_USD
  Name=LongFormYourAccount_CCS_USD


  LongFormYourAccount_CouponBond =
  Description=Your Counterparty (cpty) for Coupon Bond
  ExtensionAttribute=LongFormYourAccount_CouponBond
  GroupLabel=LongformTradeConfirmation
  LabelList=LongFormYourAccount_CouponBond
  Name=LongFormYourAccount_CouponBond


  LongFormYourAccount_DNDF =
  Description=Your Account (cpty) for DNDF
  ExtensionAttribute=LongFormYourAccount_DNDF
  GroupLabel=LongformTradeConfirmation
  LabelList=LongFormYourAccount_DNDF
  Name=LongFormYourAccount_DNDF


  LongFormYourAccount_FXCash =
  Description=Your Counterparty (cpty) for FX Cash
  ExtensionAttribute=LongFormYourAccount_FXCash
  GroupLabel=LongformTradeConfirmation
  Name=LongFormYourAccount_FXCash
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormYourAccount_FXOption =
  Description=Your Counterparty (cpty) for FX Option
  ExtensionAttribute=LongFormYourAccount_FXOption
  GroupLabel=LongformTradeConfirmation
  Name=LongFormYourAccount_FXOption
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormYourAccount_IRS =
  Description=Your Counterparty (cpty) for IRS
  ExtensionAttribute=LongFormYourAccount_IRS
  GroupLabel=LongformTradeConfirmation
  LabelList=LongFormYourAccount_IRS
  Name=LongFormYourAccount_IRS


  LongFormYourAccount_Repo =
  Description=Your Counterparty (cpty) for Repo
  ExtensionAttribute=LongFormYourAccount_Repo
  GroupLabel=LongformTradeConfirmation
  Name=LongFormYourAccount_Repo
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormYourAccountCorrBank_BondRepo =
  Description=Your Counterparty (cpty) correspondent bank for Bond and Repo
  ExtensionAttribute=LongFormYourAccountCorrBank_BondRepo
  GroupLabel=LongformTradeConfirmation
  LabelList=LongFormYourAccountCorrBank_BondRepo
  Name=LongFormYourAccountCorrBank_BondRepo


  LongFormYourAccountName =
  Description=Your Counterparty (cpty) name
  ExtensionAttribute=LongFormYourAccountName
  GroupLabel=LongformTradeConfirmation
  Name=LongFormYourAccountName
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormYourAccountName_BondRepo =
  Description=Your Counterparty (cpty) name for Bond and Repo
  ExtensionAttribute=LongFormYourAccountName_BondRepo
  GroupLabel=LongformTradeConfirmation
  LabelList=LongFormYourAccountName_BondRepo
  Name=LongFormYourAccountName_BondRepo


  LongFormYourAccountName_CCS_CCY1 =
  Description=Your Account (cpty) name for CCY1 CCS
  ExtensionAttribute=LongFormYourAccountName_CCS_CCY1
  GroupLabel=LongformTradeConfirmation
  LabelList=LongFormYourAccountName_CCS_CCY1
  Name=LongFormYourAccountName_CCS_CCY1


  LongFormYourAccountName_CCS_CCY2 =
  Description=Your Account (cpty) name for CCY2 CCS
  ExtensionAttribute=LongFormYourAccountName_CCS_CCY2
  GroupLabel=LongformTradeConfirmation
  LabelList=LongFormYourAccountName_CCS_CCY2
  Name=LongFormYourAccountName_CCS_CCY2


  LongFormYourAccountName_CouponBond =
  Description=Your Counterparty (cpty) name for Coupon Bond
  ExtensionAttribute=LongFormYourAccountName_CouponBond
  GroupLabel=LongformTradeConfirmation
  LabelList=LongFormYourAccountName_CouponBond
  Name=LongFormYourAccountName_CouponBond


  LongFormYourAccountName_FXCash =
  Description=Your Counterparty (cpty) name for FX Cash
  ExtensionAttribute=LongFormYourAccountName_FXCash
  GroupLabel=LongformTradeConfirmation
  Name=LongFormYourAccountName_FXCash
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormYourAccountName_FXOption =
  Description=Your Counterparty (cpty) name for FX Option
  ExtensionAttribute=LongFormYourAccountName_FXOption
  GroupLabel=LongformTradeConfirmation
  Name=LongFormYourAccountName_FXOption
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormYourAccountName_Repo =
  Description=Your Counterparty (cpty) name for Repo
  ExtensionAttribute=LongFormYourAccountName_Repo
  GroupLabel=LongformTradeConfirmation
  Name=LongFormYourAccountName_Repo
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormYourAccountNumber =
  Description=Your Counterparty (cpty) number
  ExtensionAttribute=LongFormYourAccountNumber
  GroupLabel=LongformTradeConfirmation
  Name=LongFormYourAccountNumber
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormYourAccountNumber_BondRepo =
  Description=Your Counterparty (cpty) number for Bond and Repo
  ExtensionAttribute=LongFormYourAccountNumber_BondRepo
  GroupLabel=LongformTradeConfirmation
  LabelList=LongFormYourAccountNumber_BondRepo
  Name=LongFormYourAccountNumber_BondRepo


  LongFormYourAccountNumber_CCS_CCY1 =
  Description=Your Account (cpty) number for CCY1 CCS
  ExtensionAttribute=LongFormYourAccountNumber_CCS_CCY1
  GroupLabel=LongformTradeConfirmation
  LabelList=LongFormYourAccountNumber_CCS_CCY1
  Name=LongFormYourAccountNumber_CCS_CCY1


  LongFormYourAccountNumber_CCS_CCY2 =
  Description=Your Account (cpty) number for CCY2 CCS
  ExtensionAttribute=LongFormYourAccountNumber_CCS_CCY2
  GroupLabel=LongformTradeConfirmation
  LabelList=LongFormYourAccountNumber_CCS_CCY2
  Name=LongFormYourAccountNumber_CCS_CCY2


  LongFormYourAccountNumber_CCS_IDR =
  Description=Your Counterparty (cpty) number for IDR CCS
  ExtensionAttribute=LongFormYourAccountNumber_CCS_IDR
  GroupLabel=LongformTradeConfirmation
  LabelList=LongFormYourAccountNumber_CCS_IDR
  Name=LongFormYourAccountNumber_CCS_IDR


  LongFormYourAccountNumber_CCS_USD =
  Description=Your Counterparty (cpty) number for USD CCS
  ExtensionAttribute=LongFormYourAccountNumber_CCS_USD
  GroupLabel=LongformTradeConfirmation
  LabelList=LongFormYourAccountNumber_CCS_USD
  Name=LongFormYourAccountNumber_CCS_USD


  LongFormYourAccountNumber_CouponBond =
  Description=Your Counterparty (cpty) number for Coupon Bond
  ExtensionAttribute=LongFormYourAccountNumber_CouponBond
  GroupLabel=LongformTradeConfirmation
  LabelList=LongFormYourAccountNumber_CouponBond
  Name=LongFormYourAccountNumber_CouponBond


  LongFormYourAccountNumber_DNDF =
  Description=Your Account (cpty) number for DNDF
  ExtensionAttribute=LongFormYourAccountNumber_DNDF
  GroupLabel=LongformTradeConfirmation
  LabelList=LongFormYourAccountNumber_DNDF
  Name=LongFormYourAccountNumber_DNDF


  LongFormYourAccountNumber_FXCash =
  Description=Your Counterparty (cpty) number for FX Cash
  ExtensionAttribute=LongFormYourAccountNumber_FXCash
  GroupLabel=LongformTradeConfirmation
  Name=LongFormYourAccountNumber_FXCash
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormYourAccountNumber_FXOption =
  Description=Your Counterparty (cpty) number for FX Option
  ExtensionAttribute=LongFormYourAccountNumber_FXOption
  GroupLabel=LongformTradeConfirmation
  Name=LongFormYourAccountNumber_FXOption
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormYourAccountNumber_IRS =
  Description=Your Counterparty (cpty) number for IRS
  ExtensionAttribute=LongFormYourAccountNumber_IRS
  GroupLabel=LongformTradeConfirmation
  LabelList=LongFormYourAccountNumber_IRS
  Name=LongFormYourAccountNumber_IRS


  LongFormYourAccountNumber_Repo =
  Description=Your Counterparty (cpty) number for Repo
  ExtensionAttribute=LongFormYourAccountNumber_Repo
  GroupLabel=LongformTradeConfirmation
  Name=LongFormYourAccountNumber_Repo
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  LongFormYourCorrespondentBank =
  Description=Your Account (Acq)
  ExtensionAttribute=LongFormYourCorrespondentBank
  GroupLabel=LongformTradeConfirmation
  Name=LongFormYourCorrespondentBank
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  Nominal1 =
  Description=Nominal Of Trade.
  ExtensionAttribute=Nominal1
  Format=
  GroupLabel=Nominal
  Name=Nominal1


  Nominal2 =
  Description=Nominal Of Trade.
  ExtensionAttribute=Nominal2
  Format=
  GroupLabel=Nominal
  Name=Nominal2


  Nominal3 =
  Description=Nominal Of Trade.
  ExtensionAttribute=Nominal3
  Format=
  GroupLabel=Nominal
  Name=Nominal3


  Nominal4 =
  Description=Nominal Of Trade.
  ExtensionAttribute=Nominal4
  Format=
  GroupLabel=Nominal
  Name=Nominal4


  Nominal5 =
  Description=Nominal Of Trade.
  ExtensionAttribute=Nominal5
  Format=
  GroupLabel=Nominal
  Name=Nominal5


  Nominal6 =
  Description=Nominal Of Trade.
  ExtensionAttribute=Nominal6
  Format=
  GroupLabel=Nominal
  Name=Nominal6


  Premium1 =
  Description=Premium Of Trade.
  ExtensionAttribute=Premium1
  Format=
  GroupLabel=Premium
  Name=Premium1


  Premium2 =
  Description=Premium Of Trade.
  ExtensionAttribute=Premium2
  Format=
  GroupLabel=Premium
  Name=Premium2


  Premium3 =
  Description=Premium Of Trade.
  ExtensionAttribute=Premium3
  Format=
  GroupLabel=Premium
  Name=Premium3


  Premium4 =
  Description=Premium Of Trade.
  ExtensionAttribute=Premium4
  Format=
  GroupLabel=Premium
  Name=Premium4


  Premium5 =
  Description=Premium Of Trade.
  ExtensionAttribute=Premium5
  Format=
  GroupLabel=Premium
  Name=Premium5


  Premium6 =
  Description=Premium Of Trade.
  ExtensionAttribute=Premium6
  Format=
  GroupLabel=Premium
  Name=Premium6


  presentValueBucketsLongForm =
  Description=PV Custom Bucket
  ExtensionAttribute=presentValueBucketsLongForm
  GroupLabel=LongformTradeConfirmation
  Name=presentValueBucketsLongForm
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  Valuedate1 =
  Description=Value date Of Trade.
  ExtensionAttribute=Valuedate1
  Format=
  GroupLabel=Valuedate
  Name=Valuedate1


  Valuedate2 =
  Description=Value date Of Trade.
  ExtensionAttribute=Valuedate2
  Format=
  GroupLabel=Valuedate
  Name=Valuedate2


  Valuedate3 =
  Description=Value date Of Trade.
  ExtensionAttribute=Valuedate3
  Format=
  GroupLabel=Valuedate
  Name=Valuedate3


  Valuedate4 =
  Description=Value date Of Trade.
  ExtensionAttribute=Valuedate4
  Format=
  GroupLabel=Valuedate
  Name=Valuedate4


  Valuedate5 =
  Description=Value date Of Trade.
  ExtensionAttribute=Valuedate5
  Format=
  GroupLabel=Valuedate
  Name=Valuedate5


  Valuedate6 =
  Description=Value date Of Trade.
  ExtensionAttribute=Valuedate6
  Format=
  GroupLabel=Valuedate
  Name=Valuedate6


}

decls[FCommandExtension] {
  "QuickAccessItems.Back Office" ( "active commands" ) "";
}

decls[FCustomFunction] {
}

clx FObject [FCustomFunction] {
  get_longform_expiry_day =
  Definition=get_longform_expiry_day(FObject acm_object): string
  Function=FLongFormCustomUtils.get_longform_expiry_day


  get_longform_trade_time =
  Definition=get_longform_trade_time(FObject acm_object): string
  Function=FLongFormCustomUtils.get_longform_trade_time


  get_longform_value_day =
  Definition=get_longform_value_day(FObject acm_object): string
  Function=FLongFormCustomUtils.get_longform_value_day


}

decls[FExtensionAttribute] {
  "LongFormOurAccount_CouponBond" ( "sheet columns.confirmationsheet" ) "";
}

clx FAccount [FExtensionAttribute] {
  accountBic = object.Bic;
  accountCorrespondentBank = object.CorrespondentBank;
  accountName = object.Name;
  accountNumber = object.Account;
}

clx FConfirmation [FExtensionAttribute] {
  accountAcquirerConf = object.Trade.Acquirer.Accounts;
  accountCounterpartyConf = object.Trade.Counterparty.Accounts;
  cashflowConf = legConf :* "cashflowSelect";
  instrumentConf = object.Trade.Instrument;
  legConf = object.Trade.Instrument.Legs.At(0);
  legDayCountMethod = object.DayCountMethod;
  legFloatRate = object.FloatRateFactor;
  LongFormAccountName = object.Trade.Settlements.Last.AcquirerAccName;
  LongFormAccountNumber = object.Trade.Settlements.Last.AcquirerAccount;
  LongFormAccruedInterest = py("FLongFormCustomUtils", context).get_longform_accrued_interest(object.Trade);
  LongFormAfterTax = LongFormNominalPenempatan - LongFormWHT;
  LongFormAllInPrice = object.Trade.AllInPrice;
  LongFormBeliJual = select(object.Trade.BoughtAsString, 
  "Buy"->"Beli", 
  "Sell"->"Jual");
  LongFormBidPrice = object.Trade.Instrument.Prices.First.Bid;
  LongFormBoughtSold = select(object.Trade.BoughtAsString, 
  "Buy"->"Bought", 
  "Sell"->"Sold");
  LongFormBuyAmount = tradeConf :* "longFormAttrBuyAmount";
  LongFormCouponInterest = py("FLongFormCustomUtils", context).coupon_interest(object.Trade);
  LongFormCouponPayDate = py("FLongFormCustomUtils", context).date_formatter(py("FLongFormCustomUtils", context).coupon_paydate(object.Trade));
  LongFormCurrency = object.Trade.Currency;
  LongFormCurrency1 = select(object.Trade.Instrument.InsType == "Deposit", 
  true->object.Trade.HedgeTrade.CurrencyPair.Currency1, 
  false->object.Trade.CurrencyPair.Currency1);
  LongFormCurrency2 = select(object.Trade.Instrument.InsType == "Deposit", 
  true->object.Trade.HedgeTrade.CurrencyPair.Currency2, 
  false->object.Trade.CurrencyPair.Currency2);
  LongFormCurrencyPair = select(object.Trade.Instrument.InsType == "Deposit", 
  true->object.Trade.HedgeTrade.CurrencyPair, 
  false->object.Trade.CurrencyPair);
  LongFormDayCount = object.Trade.Instrument.Legs.At(0).DayCountMethod;
  LongFormDaysCoupon = select(object.Trade.Instrument.InsType, 
  "Bill"->0, 
  default->py("FLongFormCustomUtils", context).get_longform_days_coupon(object.Trade));
  LongFormDeliveryDate = py("FLongFormCustomUtils", context).date_formatter(object.Trade.Instrument.DeliveryDate);
  LongFormDiary = py("FLongFormCustomUtils", context).get_diary(object.Confirmation.Diary.Text);
  LongFormDNDF1 = LongFormNominalAmount * LongFormTraderSpotPrice;
  LongFormDNDF2 = LongFormNominalAmount * LongFormPrice;
  LongFormDNDFAmountIDR = py("FLongFormCustomUtils", context).dndf_amount_idr(object.Trade);
  LongFormDNDFAmountUSD = select(object.Trade.CurrencyPair.Currency1, 
  "USD"->object.Trade.Nominal, 
  default->select(object.Trade.CurrencyPair.Currency2, 
    "USD"->object.Trade.ForwardPremium, 
    default->nil));
  LongFormDomesticCurrency = select(object.Trade.OptKey4, 
  "MLDR"->py("FLongFormCustomUtils", context).MLDRtrade(object.Trade.DealPackage, "Non Deposit").Currency, 
  "MMLD"->py("FLongFormCustomUtils", context).get_premiumMMLD(object.Trade.DealPackage, "curr", LongFormNextCouponDate), 
  default->object.Trade.Nominal * object.Trade.Instrument.StrikePrice);
  LongFormEndCashRepo = object.Trade.FaceValue + (object.Trade.FaceValue * object.Instrument.FirstFixedLeg.FixedRate / 100);
  LongFormEndDate = select(object.ConfTemplateChlItem, 
  "IRSPA"->py("FLongFormCustomUtils", context).date_formatter(py("FLongFormCustomUtils", context).pairs_enddate(object.Trade.MoneyFlows)), 
  default->select(object.Trade.OptKey4, 
    "MMLD"->py("FLongFormCustomUtils", context).get_date_py(object.Trade.Instrument.ExpiryDateOnly), 
    default->py("FLongFormCustomUtils", context).date_formatter(object.Trade.Instrument.EndDate)));
  LongFormEndDate_Eng = select(object.ConfTemplateChlItem, 
  "IRSPA"->py("FLongFormCustomUtils", context).date_formatter_eng(py("FLongFormCustomUtils", context).pairs_enddate(object.Trade.MoneyFlows)), 
  default->py("FLongFormCustomUtils", context).date_formatter_eng(py("FLongFormCustomUtils", context).get_longform_end_date(object.Trade)));
  LongFormEndInterest = select(object.Trade.OptKey4, 
  "MLDR"->abs(py("FLongFormCustomUtils", context).select_settlement1(py("FLongFormCustomUtils", context).MLDRtrade(object.Trade.DealPackage, "Non Deposit").Settlements, "None", "Authorised", object.Reset.CashFlow.EndDate).Amount), 
  "MMLD"->py("FLongFormCustomUtils", context).get_grossIntMMLD(object.Trade.DealPackage, LongFormNextCouponDate), 
  default->abs(object.Trade.EndCash - object.Trade.Nominal));
  LongFormExpiryDayExtAttr = select(object.Trade.OptKey4, 
  "MLDR"->py("FLongFormCustomUtils", context).date_formatter(py("FLongFormCustomUtils", context).MLDRtrade(object.Trade.DealPackage, "Deposit").Instrument.ExpiryDate), 
  "MMLD"->py("FLongFormCustomUtils", context).get_date_py(object.Trade.Instrument.ExpiryDateOnly), 
  default->py("FLongFormCustomUtils", context).date_formatter(object.Trade.Instrument.ExpiryDate));
  LongFormFaceValue = abs(object.Trade.FaceValue);
  LongFormFarSellAmount = tradeConf :* "tradeFXAttrFarSellAmount";
  LongFormFixedRate = select(object.Trade.Instrument.InsType, 
  "Swap"->object.Trade.Instrument.Legs.At(1).FixedRate, 
  "Bill"->0, 
  "FRN"->object.Trade.Instrument.CouponRate, 
  default->instrumentConf :* "uniqueCouponInTheoreticalPrice");
  LongFormFixingSource = select(object.Trade.Instrument.InsType == "Deposit", 
  true->object.Trade.HedgeTrade.DealPackage.AllInstruments.At(0).FixingSource, 
  false->object.Trade.DealPackage.AllInstruments.At(0).FixingSource);
  LongFormFixingValue = py("FLongFormCustomUtils", context).fixingvalue(object.Trade.MoneyFlows);
  LongFormFloatRate = object.Trade.Instrument.Legs.At(0).FloatRateFactor;
  LongFormFloatRateRef = select(object.Trade.Instrument.Legs.First.FloatRateReference, 
  nil->object.Trade.Instrument.Legs.Last.FloatRateReference, 
  default->object.Trade.Instrument.Legs.First.FloatRateReference);
  LongFormFXONominalCall = py("FLongFormCustomUtils", context).get_fxo_nominal_call(object.Trade);
  LongFormFXONominalPut = py("FLongFormCustomUtils", context).get_fxo_nominal_put(object.Trade);
  LongFormHaircut = select(object.Trade.Instrument.InsType, 
  "BasketRepo/Reverse"->py("FLongFormCustomUtils", context).get_Collateral_Haircut(object.Trade), 
  default->object.Trade.Haircut);
  LongFormHasilPajak = LongFormEndInterest - LongFormWHT;
  LongFormInstrument = object.Trade.Instrument;
  LongFormInterestEndDate = select(object.Trade.OptKey4, 
  "IRS"->py("FLongFormCustomUtils", context).date_formatter(py("FLongFormCustomUtils", context).get_longform_interest_end_date2(object)), 
  "CCS"->py("FLongFormCustomUtils", context).date_formatter(py("FLongFormCustomUtils", context).get_longform_interest_end_date2(object)), 
  "OIS"->py("FLongFormCustomUtils", context).date_formatter(py("FLongFormCustomUtils", context).get_longform_interest_end_date2(object)), 
  "MLDR"->py("FLongFormCustomUtils", context).date_formatter(py("FLongFormCustomUtils", context).get_longform_interest_end_date2(object)), 
  default->py("FLongFormCustomUtils", context).date_formatter(py("FLongFormCustomUtils", context).get_longform_interest_end_date(object.Trade.Instrument.Legs)));
  LongFormInterestRateAtTradeTime = tradeConf :* "interestRateAtTradeTime";
  LongFormInterestRateFixed = py("FLongFormCustomUtils", context).get_longform_interest_rate_fixed(object.Trade.Instrument.Legs);
  LongFormInterestRateFloat = py("FLongFormCustomUtils", context).get_longform_interest_rate_float(object.Trade.Instrument.Legs);
  LongFormInterestStartDate = select(object.Trade.OptKey4, 
  "IRS"->py("FLongFormCustomUtils", context).date_formatter(py("FLongFormCustomUtils", context).get_longform_interest_start_date2(object)), 
  "CCS"->py("FLongFormCustomUtils", context).date_formatter(py("FLongFormCustomUtils", context).get_longform_interest_start_date2(object)), 
  default->py("FLongFormCustomUtils", context).date_formatter(py("FLongFormCustomUtils", context).get_longform_interest_start_date(object.Trade.Instrument.Legs)));
  LongFormIsin = select(object.Trade.Instrument.InsType, 
  "Repo/Reverse"->object.Trade.Instrument.Underlying.Isin, 
  "BasketRepo/Reverse"->py("FLongFormCustomUtils", context).get_Collateral_Instrument_Isin(object.Trade), 
  default->object.Trade.Instrument.Isin);
  LongFormIssuer = select(object.Trade.Instrument.InsType, 
  "Repo/Reverse"->object.Trade.Instrument.Underlying.Issuer, 
  "BasketRepo/Reverse"->py("FLongFormCustomUtils", context).get_Collateral_Instrument_Issuer(object.Trade), 
  default->object.Trade.Instrument.Issuer);
  LongFormLastCouponDate = py("FLongFormCustomUtils", context).date_formatter(py("FLongFormCustomUtils", context).get_Last_Coupon_Date(object.Trade));
  LongFormLowerRange = select(object.Trade.Instrument.InsType == "Deposit", 
  true->object.Trade.HedgeTrade.Instrument.Exotic.RangeAccrualFloor, 
  false->object.Trade.Instrument.Exotic.RangeAccrualFloor);
  LongFormMarketPrice = py("FLongFormCustomUtils", context).get_market_price(object.Trade);
  LongFormMMLDMaxYield = select(object.Trade.Instrument.InsType == "Deposit", 
  true->object.Trade.HedgeTrade.Instrument.AdditionalInfo.Sp_MLDMaxYield, 
  false->object.Trade.Instrument.AdditionalInfo.Sp_MLDMaxYield);
  LongFormNetConsideration = select(object.Trade.Instrument.InsType, 
  "Bond"->LongFormPrincipalAmount + LongFormAccruedInterest, 
  "Repo/Reverse"->LongFormNominalAmount * LongFormPrice / 100, 
  "BasketRepo/Reverse"->LongFormNominalAmount * LongFormPrice / 100, 
  "Basket Repo/Reverse Legacy"->LongFormNominalAmount * LongFormPrice / 100, 
  "Bill"->LongFormNominalAmount * LongFormPrice / 100);
  LongFormNetProceed = select(LongFormWHT, 
  nil->select(object.Trade.Instrument.InsType, 
    default->abs(float(0) + float(py("FLongFormCustomUtils", context).get_longform_accrued_interest(object.Trade)) + float(object.Trade.FaceValue * object.Trade.Price / 100)), 
    "Repo/Reverse"->LongFormTotalProceeds, 
    "BasketRepo/Reverse"->LongFormTotalProceeds, 
    "Basket Repo/Reverse Legacy"->LongFormTotalProceeds, 
    "FRN"->LongFormTotalProceeds, 
    "Bill"->LongFormTotalProceeds, 
    "Bond"->LongFormPremium), 
  default->select(object.Trade.Instrument.InsType, 
    default->abs(float(0) + float(py("FLongFormCustomUtils", context).get_longform_accrued_interest(object.Trade)) + float(object.Trade.FaceValue * object.Trade.Price / 100)), 
    "Repo/Reverse"->LongFormTotalProceeds - LongFormWHT, 
    "BasketRepo/Reverse"->LongFormTotalProceeds - LongFormWHT, 
    "Basket Repo/Reverse Legacy"->LongFormTotalProceeds - LongFormWHT, 
    "FRN"->LongFormTotalProceeds - LongFormWHT, 
    "Bill"->LongFormTotalProceeds - LongFormWHT, 
    "Bond"->LongFormPremium - LongFormWHT));
  LongFormNettingAmount = select(object.Trade.OptKey4, 
  "OIS"->py("FLongFormCustomUtils", context).get_longform_netting_amount(object.Trade), 
  default->select(object.Trade.Instrument.InsType, 
    "Future/Forward"->py("FLongFormCustomUtils", context).get_longform_netting_dndf(object.Trade.InstrumentPackageOrInstrument.Trades.Last.MoneyFlows), 
    default->py("FLongFormCustomUtils", context).get_longform_netting_amount(object.Trade)));
  LongFormNettingAmountDNDF = LongFormDNDF1 - LongFormDNDF2;
  LongFormNextCouponDate = select(object.Trade.OptKey4, 
  "MMLD"->py("FLongFormCustomUtils", context).get_PayDateMMLD(object), 
  default->py("FLongFormCustomUtils", context).date_formatter(py("FLongFormCustomUtils", context).get_Next_Coupon_Date(object)));
  LongFormNextCouponDate1 = py("FLongFormCustomUtils", context).date_formatter(py("FLongFormCustomUtils", context).get_Next_Coupon_Date1(object.Trade));
  LongFormNominalAmount = abs(object.Trade.FaceValue);
  LongFormNominalEqvCCS1 = abs(py("FLongFormCustomUtils", context).get_nominal_eqv_ccs_1(object.Trade));
  LongFormNominalEqvCCS2 = abs(py("FLongFormCustomUtils", context).get_nominal_eqv_ccs_2(object.Trade));
  LongFormNominalInterestFixed = abs(py("FLongFormCustomUtils", context).get_interest_receive(object));
  LongFormNominalInterestFloat = abs(py("FLongFormCustomUtils", context).get_interest_pay(object));
  LongFormNominalLastLeg = object.Trade.TradeConnections.At(0).ToTrade.Nominal;
  LongFormNominalPenempatan = LongFormFarSellAmount + (0.34 * dateDifference(object.Trade.Instrument.EndDate, object.Trade.Instrument.StartDate) / 365);
  LongFormNominalPrincipalPay = select(object.Trade.Instrument.IsAmortizing, 
  true->py("FLongFormCustomUtils", context).proj_type2(object, "pay", "Fixed Amount"), 
  false->py("FLongFormCustomUtils", context).unamort_total_nominal_pay(object));
  LongFormNominalPrincipalReceive = select(object.Trade.Instrument.IsAmortizing, 
  true->py("FLongFormCustomUtils", context).proj_type2(object, "receive", "Fixed Amount"), 
  false->py("FLongFormCustomUtils", context).unamort_total_nominal_rec(object));
  LongFormOurAccount = select(object.Trade.OptKey4, 
  "MLDR"->py("FLongFormCustomUtils", context).MLDRaccount(py("FLongFormCustomUtils", context).MLDRtrade(object.Trade.DealPackage, "Non Deposit"), "Our"), 
  default->object.Trade.MoneyFlows.Last.AcquirerAccount.Bic);
  LongFormOurAccount_BondRepo = select(object.Trade.Instrument.InsType, 
  "Bond"->py("FLongFormCustomUtils", context).bondrepo_account(object.Trade).AcquirerAccount.Bic, 
  "Bill"->py("FLongFormCustomUtils", context).bondrepo_account(object.Trade).AcquirerAccount.Bic, 
  "FRN"->py("FLongFormCustomUtils", context).bondrepo_account(object.Trade).AcquirerAccount.Bic, 
  "Repo/Reverse"->LongFormOurAccount_Repo, 
  "BasketRepo/Reverse"->LongFormOurAccount_Repo, 
  "Basket Repo/Reverse Legacy"->LongFormOurAccount_Repo);
  LongFormOurAccount_CCS_CCY1 = select(object.Trade.Instrument.InsType, 
  "CurrSwap"->py("FLongFormCustomUtils", context).ccs_ccy1_ouraccount(object.Trade).Bic);
  LongFormOurAccount_CCS_CCY2 = select(object.Trade.Instrument.InsType, 
  "CurrSwap"->py("FLongFormCustomUtils", context).ccs_ccy2_ouraccount(object.Trade).Bic);
  LongFormOurAccount_CCS_IDR = select(object.Trade.Instrument.InsType, 
  "CurrSwap"->py("FLongFormCustomUtils", context).ccs_idr_ouraccount(object.Trade));
  LongFormOurAccount_CCS_USD = select(object.Trade.Instrument.InsType, 
  "CurrSwap"->py("FLongFormCustomUtils", context).ccs_usd_ouraccount(object.Trade));
  LongFormOurAccount_CouponBond = select(object.EventType, 
  "Coupon Advice"->select(object.Trade.Instrument.InsType, 
    "Bond"->py("FLongFormCustomUtils", context).couponbond_ouraccount(object.Trade)));
  LongFormOurAccount_DNDF = py("FLongFormCustomUtils", context).dndf_ouraccount(object.Trade);
  LongFormOurAccount_FXCash = py("FLongFormCustomUtils", context).fx_ouraccount(object.Trade).Bic;
  LongFormOurAccount_FXOption = py("FLongFormCustomUtils", context).fxoption_account(object.Trade).AcquirerAccount.Bic;
  LongFormOurAccount_IRS = select(object.Trade.Instrument.InsType, 
  "Swap"->py("FLongFormCustomUtils", context).irs_ouraccount(object.Trade));
  LongFormOurAccount_Repo = py("FLongFormCustomUtils", context).repo_account(object.Trade).AcquirerAccount.Bic;
  LongFormOurAccountCorrBank_BondRepo = select(object.Trade.Instrument.InsType, 
  "Bond"->py("FLongFormCustomUtils", context).bondrepo_account(object.Trade).AcquirerAccount.CorrespondentBank, 
  "Bill"->py("FLongFormCustomUtils", context).bondrepo_account(object.Trade).AcquirerAccount.CorrespondentBank, 
  "FRN"->py("FLongFormCustomUtils", context).bondrepo_account(object.Trade).AcquirerAccount.CorrespondentBank, 
  "Repo/Reverse"->py("FLongFormCustomUtils", context).repo_account(object.Trade).CounterpartyAccount.CorrespondentBank, 
  "BasketRepo/Reverse"->py("FLongFormCustomUtils", context).repo_account(object.Trade).CounterpartyAccount.CorrespondentBank, 
  "Basket Repo/Reverse Legacy"->py("FLongFormCustomUtils", context).repo_account(object.Trade).CounterpartyAccount.CorrespondentBank);
  LongFormOurAccountName = object.Trade.MoneyFlows.Last.AcquirerAccount;
  LongFormOurAccountName_BondRepo = select(object.Trade.Instrument.InsType, 
  "Bond"->py("FLongFormCustomUtils", context).bondrepo_account(object.Trade).AcquirerAccount, 
  "Bill"->py("FLongFormCustomUtils", context).bondrepo_account(object.Trade).AcquirerAccount, 
  "FRN"->py("FLongFormCustomUtils", context).bondrepo_account(object.Trade).AcquirerAccount, 
  "Repo/Reverse"->LongFormOurAccountNumber_Repo, 
  "BasketRepo/Reverse"->LongFormOurAccountNumber_Repo, 
  "Basket Repo/Reverse Legacy"->LongFormOurAccountNumber_Repo);
  LongFormOurAccountName_CCS_CCY1 = select(object.Trade.Instrument.InsType, 
  "CurrSwap"->py("FLongFormCustomUtils", context).ccs_ccy1_ouraccount(object.Trade));
  LongFormOurAccountName_CCS_CCY2 = select(object.Trade.Instrument.InsType, 
  "CurrSwap"->py("FLongFormCustomUtils", context).ccs_ccy2_ouraccount(object.Trade));
  LongFormOurAccountName_CouponBond = select(object.EventType, 
  "Coupon Advice"->select(object.Trade.Instrument.InsType, 
    "Bond"->py("FLongFormCustomUtils", context).couponbond_ouraccountname(object.Trade)));
  LongFormOurAccountName_FXCash = py("FLongFormCustomUtils", context).fx_ouraccount(object.Trade);
  LongFormOurAccountName_FXOption = py("FLongFormCustomUtils", context).fxoption_account(object.Trade).AcquirerAccount;
  LongFormOurAccountName_Repo = py("FLongFormCustomUtils", context).repo_account(object.Trade).AcquirerAccount;
  LongFormOurAccountNetworkAlias_CouponBond = select(object.EventType, 
  "Coupon Advice"->select(object.Trade.Instrument.InsType, 
    "Bond"->py("FLongFormCustomUtils", context).couponbond_ouraccount_networkalias(object.Trade)));
  LongFormOurAccountNumber = object.Trade.MoneyFlows.Last.AcquirerAccount.Account;
  LongFormOurAccountNumber_BondRepo = select(object.Trade.Instrument.InsType, 
  "Bond"->py("FLongFormCustomUtils", context).bondrepo_account(object.Trade).AcquirerAccount.Account, 
  "Bill"->py("FLongFormCustomUtils", context).bondrepo_account(object.Trade).AcquirerAccount.Account, 
  "FRN"->py("FLongFormCustomUtils", context).bondrepo_account(object.Trade).AcquirerAccount.Account, 
  "Repo/Reverse"->LongFormOurAccountNumber_Repo, 
  "BasketRepo/Reverse"->LongFormOurAccountNumber_Repo, 
  "Basket Repo/Reverse Legacy"->LongFormOurAccountNumber_Repo);
  LongFormOurAccountNumber_CCS_CCY1 = select(object.Trade.Instrument.InsType, 
  "CurrSwap"->py("FLongFormCustomUtils", context).ccs_ccy1_ouraccountnumber(object.Trade));
  LongFormOurAccountNumber_CCS_CCY2 = select(object.Trade.Instrument.InsType, 
  "CurrSwap"->py("FLongFormCustomUtils", context).ccs_ccy2_ouraccountnumber(object.Trade));
  LongFormOurAccountNumber_CCS_IDR = select(object.Trade.Instrument.InsType, 
  "CurrSwap"->py("FLongFormCustomUtils", context).ccs_idr_ouraccountnumber(object.Trade));
  LongFormOurAccountNumber_CCS_USD = select(object.Trade.Instrument.InsType, 
  "CurrSwap"->py("FLongFormCustomUtils", context).ccs_usd_ouraccountnumber(object.Trade));
  LongFormOurAccountNumber_CouponBond = select(object.EventType, 
  "Coupon Advice"->select(object.Trade.Instrument.InsType, 
    "Bond"->py("FLongFormCustomUtils", context).couponbond_ouraccountnumber(object.Trade)));
  LongFormOurAccountNumber_DNDF = py("FLongFormCustomUtils", context).dndf_ouraccountnumber(object.Trade);
  LongFormOurAccountNumber_FXCash = py("FLongFormCustomUtils", context).fx_ouraccount(object.Trade).Account;
  LongFormOurAccountNumber_FXOption = py("FLongFormCustomUtils", context).fxoption_account(object.Trade).AcquirerAccount.Account;
  LongFormOurAccountNumber_IRS = select(object.Trade.Instrument.InsType, 
  "Swap"->py("FLongFormCustomUtils", context).irs_ouraccountnumber(object.Trade));
  LongFormOurAccountNumber_Repo = py("FLongFormCustomUtils", context).repo_account(object.Trade).AcquirerAccount.Account;
  LongFormOurCorrespondentBank = select(count(accountAcquirerConf :* "accountCorrespondentBank") > 0, 
  true->(accountAcquirerConf :* "accountCorrespondentBank").At(0), 
  false->nil);
  LongFormPayCurrency = select(py("FLongFormCustomUtils", context).get_nominal_eqv_ccs_1(object.Trade), 
  nil->nil, 
  default->select(py("FLongFormCustomUtils", context).get_nominal_eqv_ccs_1(object.Trade) < 0, 
    true->py("FLongFormCustomUtils", context).get_nominal_eqv_ccs_1(object.Trade).Unit, 
    false->py("FLongFormCustomUtils", context).get_nominal_eqv_ccs_2(object.Trade).Unit));
  LongFormPayCurrencyPrincipal = object.Trade.Instrument.FirstPayLeg.Currency;
  LongFormPayNominal = select(py("FLongFormCustomUtils", context).get_nominal_eqv_ccs_1(object.Trade) < 0, 
  true->select(LongFormNominalEqvCCS1 == nil, 
    true->object.Trade.RemainingNominal, 
    false->LongFormNominalEqvCCS1), 
  false->LongFormNominalEqvCCS2);
  LongFormPayOffset = string(object.Trade.Instrument.Legs.At(0).PayOffsetCount) + " " + string(object.Trade.Instrument.Legs.At(0).PayOffsetUnit);
  LongFormPayReceive = select(LongFormNettingAmount > 0, 
  true->"Receive", 
  false->"Pay");
  LongFormPremium = select(object.Trade.OptKey4, 
  "MLDR"->py("FLongFormCustomUtils", context).select_settlement(py("FLongFormCustomUtils", context).MLDRtrade(object.Trade.DealPackage, "Non Deposit").Settlements, "Fixed Rate", py("FLongFormCustomUtils", context).get_Next_Coupon_Date(object)).Amount, 
  "MMLD"->py("FLongFormCustomUtils", context).get_premiumMMLD(object.Trade.DealPackage, "amount", LongFormNextCouponDate), 
  default->abs(py("FLongFormCustomUtils", context).get_premium(object)));
  LongFormPremiumCurrency = select(object.Trade.OptKey4, 
  "MMLD"->py("FLongFormCustomUtils", context).get_premiumMMLD(object.Trade.DealPackage, "curr", LongFormNextCouponDate), 
  default->py("FLongFormCustomUtils", context).select_settlement(py("FLongFormCustomUtils", context).MLDRtrade(object.Trade.DealPackage, "Non Deposit").Settlements, "Fixed Rate", py("FLongFormCustomUtils", context).get_Next_Coupon_Date(object)).Currency);
  LongFormPrice = select(object.Trade.Instrument.InsType, 
  "BasketRepo/Reverse"->abs(py("FLongFormCustomUtils", context).get_Collateral_Trade_Price(object.Trade)), 
  "Bill"->select(abs(object.Trade.Price) > abs(object.Trade.Premium / object.Trade.Nominal * 100), 
    true->abs(object.Trade.Price), 
    false->abs(object.Trade.Premium / object.Trade.Nominal * 100)), 
  default->abs(object.Trade.Price));
  LongFormPrincipalAmount = select(object.Trade.Instrument.InsType, 
  "Bill"->object.Trade.Nominal, 
  default->abs(object.Trade.FaceValue * object.Trade.Price / 100));
  LongFormProceed = abs(object.Trade.FaceValue * object.Trade.Price / 100);
  LongFormPutCallUSD = ;
  LongFormQuantity = select(object.Trade.Instrument.InsType, 
  "Repo/Reverse"->py("FLongFormCustomUtils", context).get_Collateral_Trade_FaceValue(object.Trade), 
  "BasketRepo/Reverse"->py("FLongFormCustomUtils", context).get_Collateral_Trade_FaceValue(object.Trade), 
  "Basket Repo/Reverse Legacy"->py("FLongFormCustomUtils", context).get_Collateral_Trade_FaceValue(object.Trade), 
  default->object.Trade.Quantity);
  LongFormReceiveCurrency = select(py("FLongFormCustomUtils", context).get_nominal_eqv_ccs_1(object.Trade), 
  nil->nil, 
  default->select(py("FLongFormCustomUtils", context).get_nominal_eqv_ccs_1(object.Trade) > 0, 
    true->py("FLongFormCustomUtils", context).get_nominal_eqv_ccs_1(object.Trade).Unit, 
    false->py("FLongFormCustomUtils", context).get_nominal_eqv_ccs_2(object.Trade).Unit));
  LongFormReceiveCurrencyPrincipal = object.Trade.Instrument.FirstReceiveLeg.Currency;
  LongFormReceiveNominal = select(py("FLongFormCustomUtils", context).get_nominal_eqv_ccs_1(object.Trade) > 0, 
  true->LongFormNominalEqvCCS1, 
  false->LongFormNominalEqvCCS2);
  LongFormRefPrice = object.Trade.RefPrice;
  LongFormRekeningBeliBic = py("FLongFormCustomUtils", context).rekeningbeli_bic(object.Trade);
  LongFormRekeningBeliNumber = py("FLongFormCustomUtils", context).rekeningbeli_number(object.Trade);
  LongFormRekeningJualBic = py("FLongFormCustomUtils", context).rekeningjual_bic(object.Trade);
  LongFormRekeningJualNumber = py("FLongFormCustomUtils", context).rekeningjual_number(object.Trade);
  LongFormRollingPeriod = object.Trade.Instrument.Legs.At(0).RollingPeriod;
  LongFormRollingPeriodBase = object.Trade.Instrument.Legs.At(0).RollingPeriodBase;
  LongFormSecondNominalNearLeg = object.Trade.Premium;
  LongFormSecurityId = py("FLongFormCustomUtils", context).get_Collateral_Instrument(object.Trade);
  LongFormSellAmount = tradeConf :* "longFormAttrSellAmount";
  LongFormSettleInstruction = py("FLongFormCustomUtils", context).bondrepo_ouraccountaccounttype(object.Trade);
  LongFormSettlement = LongFormAccruedInterest + LongFormNominalAmount;
  LongFormSettlementDate = select(object.Trade.OptKey4, 
  "IRS"->py("FLongFormCustomUtils", context).date_formatter(py("FLongFormCustomUtils", context).interest_pay_date(object)), 
  "CCS"->py("FLongFormCustomUtils", context).date_formatter(py("FLongFormCustomUtils", context).interest_pay_date(object)), 
  "OIS"->py("FLongFormCustomUtils", context).date_formatter(object.Trade.Instrument.PayLeg.RollingPeriodBase), 
  default->py("FLongFormCustomUtils", context).date_formatter(py("FLongFormCustomUtils", context).get_longform_settlement_date(object.Trade)));
  LongFormStrike = select(object.Trade.Instrument.InsType == "Deposit", 
  true->object.Trade.HedgeTrade.Instrument.StrikePrice, 
  false->object.Trade.Instrument.StrikePrice);
  LongFormStrike2 = select(object.Trade.Instrument.InsType == "Deposit", 
  true->object.Trade.HedgeTrade.Instrument.StrikePrice, 
  false->object.Trade.HedgeTrade.Instrument.StrikePrice);
  LongFormSwift = object.Trade.Counterparty.Swift;
  LongFormTax = 0;
  LongFormTest = py("FLongFormCustomUtils", context).longformtest(object.Trade);
  LongFormTotalAmount = py("FLongFormCustomUtils", context).coupon_total(object.Trade);
  LongFormTotalNominalPay = select(object.Trade.Instrument.IsAmortizing, 
  false->(LongFormNominalPrincipalPay + LongFormNominalInterestFloat), 
  true->py("FLongFormCustomUtils", context).get_longform_total_pay2(object));
  LongFormTotalNominalReceive = select(LongFormNominalPrincipalReceive, 
  nil->LongFormNominalInterestFixed, 
  default->LongFormNominalPrincipalReceive + LongFormNominalInterestFixed);
  LongFormTotalProceeds = abs(object.Trade.Premium);
  LongFormTradeDate = py("FLongFormCustomUtils", context).date_formatter(py("FLongFormCustomUtils", context).get_longform_trade_date(object.Trade));
  LongFormTradeDate_Eng = py("FLongFormCustomUtils", context).date_formatter_eng(py("FLongFormCustomUtils", context).get_longform_trade_date(object.Trade));
  LongFormTraderSpotPrice = object.Trade.Price - object.Trade.SalesMargin + object.Trade.PointsSalesMargin;
  LongFormTradeTimeExtAttr = get_longform_trade_time(object);
  LongFormUnexecutedNominal = select(py("FLongFormCustomUtils", context).get_longform_unexecuted_nominal(object.Trade), 
  nil->nil, 
  default->LongFormNominalAmount + LongFormEndInterest);
  LongFormUpperRange = select(object.Trade.Instrument.InsType == "Deposit", 
  true->object.Trade.HedgeTrade.Instrument.Exotic.RangeAccrualCap, 
  false->object.Trade.Instrument.Exotic.RangeAccrualCap);
  LongFormUSDRate = py("FLongFormCustomUtils", context).get_USD_Rate(object.Trade);
  LongFormValueDate = py("FLongFormCustomUtils", context).date_formatter(py("FLongFormCustomUtils", context).get_longform_value_date(object.Trade));
  LongFormValueDate_Eng = py("FLongFormCustomUtils", context).date_formatter_eng(py("FLongFormCustomUtils", context).get_longform_value_date(object.Trade));
  LongFormValueDayExtAttr = py("FLongFormCustomUtils", context).date_formatter(get_longform_value_day(object));
  LongFormWHT = tradeConf:WHT;
  LongFormWHTCurrency = tradeConf:WHTCurrency;
  LongFormYield = select(object.Trade.Instrument.InsType, 
  "Bill"->select(LongFormPrice > abs(object.Trade.Price), 
    true->abs(object.Trade.Price), 
    false->py("FLongFormCustomUtils", context).get_trade_yield(object.Trade)), 
  default->tradeConf :* "tradeYieldToMaturity" * 100);
  LongFormYourAccount = select(object.Trade.OptKey4, 
  "MLDR"->py("FLongFormCustomUtils", context).MLDRaccount(py("FLongFormCustomUtils", context).MLDRtrade(object.Trade.DealPackage, "Non Deposit"), "Your"), 
  default->object.Trade.MoneyFlows.Last.CounterpartyAccount.Bic);
  LongFormYourAccount_BondRepo = select(object.Trade.Instrument.InsType, 
  "Bond"->py("FLongFormCustomUtils", context).bondrepo_account(object.Trade).CounterpartyAccount.Bic, 
  "Bill"->py("FLongFormCustomUtils", context).bondrepo_account(object.Trade).CounterpartyAccount.Bic, 
  "FRN"->py("FLongFormCustomUtils", context).bondrepo_account(object.Trade).CounterpartyAccount.Bic, 
  "Repo/Reverse"->LongFormYourAccount_Repo, 
  "BasketRepo/Reverse"->LongFormYourAccount_Repo, 
  "Basket Repo/Reverse Legacy"->LongFormYourAccount_Repo);
  LongFormYourAccount_CCS_CCY1 = select(object.Trade.Instrument.InsType, 
  "CurrSwap"->py("FLongFormCustomUtils", context).ccs_ccy1_youraccount(object.Trade).Bic);
  LongFormYourAccount_CCS_CCY2 = select(object.Trade.Instrument.InsType, 
  "CurrSwap"->py("FLongFormCustomUtils", context).ccs_ccy2_youraccount(object.Trade).Bic);
  LongFormYourAccount_CCS_IDR = select(object.Trade.Instrument.InsType, 
  "CurrSwap"->py("FLongFormCustomUtils", context).ccs_idr_youraccount(object.Trade));
  LongFormYourAccount_CCS_USD = select(object.Trade.Instrument.InsType, 
  "CurrSwap"->py("FLongFormCustomUtils", context).ccs_usd_youraccount(object.Trade));
  LongFormYourAccount_CouponBond = select(object.EventType, 
  "Coupon Advice"->select(object.Trade.Instrument.InsType, 
    "Bond"->py("FLongFormCustomUtils", context).couponbond_youraccount(object.Trade)));
  LongFormYourAccount_DNDF = py("FLongFormCustomUtils", context).dndf_youraccount(object.Trade);
  LongFormYourAccount_FXCash = py("FLongFormCustomUtils", context).fx_youraccount(object.Trade).Bic;
  LongFormYourAccount_FXOption = py("FLongFormCustomUtils", context).fxoption_account(object.Trade).CounterpartyAccount.Bic;
  LongFormYourAccount_IRS = select(object.Trade.Instrument.InsType, 
  "Swap"->py("FLongFormCustomUtils", context).irs_youraccount(object.Trade));
  LongFormYourAccount_Repo = py("FLongFormCustomUtils", context).repo_account(object.Trade).CounterpartyAccount.Bic;
  LongFormYourAccountCorrBank_BondRepo = select(object.Trade.Instrument.InsType, 
  "Bond"->py("FLongFormCustomUtils", context).bondrepo_account(object.Trade).CounterpartyAccount.CorrespondentBank, 
  "Bill"->py("FLongFormCustomUtils", context).bondrepo_account(object.Trade).CounterpartyAccount.CorrespondentBank, 
  "FRN"->py("FLongFormCustomUtils", context).bondrepo_account(object.Trade).CounterpartyAccount.CorrespondentBank, 
  "Repo/Reverse"->py("FLongFormCustomUtils", context).repo_account(object.Trade).CounterpartyAccount.CorrespondentBank, 
  "BasketRepo/Reverse"->py("FLongFormCustomUtils", context).repo_account(object.Trade).CounterpartyAccount.CorrespondentBank, 
  "Basket Repo/Reverse Legacy"->py("FLongFormCustomUtils", context).repo_account(object.Trade).CounterpartyAccount.CorrespondentBank);
  LongFormYourAccountName = object.Trade.MoneyFlows.Last.CounterpartyAccount;
  LongFormYourAccountName_BondRepo = select(object.Trade.Instrument.InsType, 
  "Bond"->py("FLongFormCustomUtils", context).bondrepo_account(object.Trade).CounterpartyAccount, 
  "Bill"->py("FLongFormCustomUtils", context).bondrepo_account(object.Trade).CounterpartyAccount, 
  "FRN"->py("FLongFormCustomUtils", context).bondrepo_account(object.Trade).CounterpartyAccount, 
  "Repo/Reverse"->LongFormYourAccountNumber_Repo, 
  "BasketRepo/Reverse"->LongFormYourAccountNumber_Repo, 
  "Basket Repo/Reverse Legacy"->LongFormYourAccountNumber_Repo);
  LongFormYourAccountName_CCS_CCY1 = select(object.Trade.Instrument.InsType, 
  "CurrSwap"->py("FLongFormCustomUtils", context).ccs_ccy1_youraccount(object.Trade));
  LongFormYourAccountName_CCS_CCY2 = select(object.Trade.Instrument.InsType, 
  "CurrSwap"->py("FLongFormCustomUtils", context).ccs_ccy2_youraccount(object.Trade));
  LongFormYourAccountName_CouponBond = select(object.EventType, 
  "Coupon Advice"->select(object.Trade.Instrument.InsType, 
    "Bond"->py("FLongFormCustomUtils", context).couponbond_youraccountname(object.Trade)));
  LongFormYourAccountName_FXCash = py("FLongFormCustomUtils", context).fx_youraccount(object.Trade);
  LongFormYourAccountName_FXOption = py("FLongFormCustomUtils", context).fxoption_account(object.Trade).CounterpartyAccount;
  LongFormYourAccountName_Repo = py("FLongFormCustomUtils", context).repo_account(object.Trade).CounterpartyAccount;
  LongFormYourAccountNumber = object.Trade.MoneyFlows.Last.CounterpartyAccount.Account;
  LongFormYourAccountNumber_BondRepo = select(object.Trade.Instrument.InsType, 
  "Bond"->py("FLongFormCustomUtils", context).bondrepo_account(object.Trade).CounterpartyAccount.Account, 
  "Bill"->py("FLongFormCustomUtils", context).bondrepo_account(object.Trade).CounterpartyAccount.Account, 
  "FRN"->py("FLongFormCustomUtils", context).bondrepo_account(object.Trade).CounterpartyAccount.Account, 
  "Repo/Reverse"->LongFormYourAccountNumber_Repo, 
  "BasketRepo/Reverse"->LongFormYourAccountNumber_Repo, 
  "Basket Repo/Reverse Legacy"->LongFormYourAccountNumber_Repo);
  LongFormYourAccountNumber_CCS_CCY1 = select(object.Trade.Instrument.InsType, 
  "CurrSwap"->py("FLongFormCustomUtils", context).ccs_ccy1_youraccountnumber(object.Trade));
  LongFormYourAccountNumber_CCS_CCY2 = select(object.Trade.Instrument.InsType, 
  "CurrSwap"->py("FLongFormCustomUtils", context).ccs_ccy2_youraccountnumber(object.Trade));
  LongFormYourAccountNumber_CCS_IDR = select(object.Trade.Instrument.InsType, 
  "CurrSwap"->py("FLongFormCustomUtils", context).ccs_idr_youraccountnumber(object.Trade));
  LongFormYourAccountNumber_CCS_USD = select(object.Trade.Instrument.InsType, 
  "CurrSwap"->py("FLongFormCustomUtils", context).ccs_usd_youraccountnumber(object.Trade));
  LongFormYourAccountNumber_CouponBond = select(object.EventType, 
  "Coupon Advice"->select(object.Trade.Instrument.InsType, 
    "Bond"->py("FLongFormCustomUtils", context).couponbond_youraccountnumber(object.Trade)));
  LongFormYourAccountNumber_DNDF = py("FLongFormCustomUtils", context).dndf_youraccountnumber(object.Trade);
  LongFormYourAccountNumber_FXCash = py("FLongFormCustomUtils", context).fx_youraccount(object.Trade).Account;
  LongFormYourAccountNumber_FXOption = py("FLongFormCustomUtils", context).fxoption_account(object.Trade).CounterpartyAccount.Account;
  LongFormYourAccountNumber_IRS = select(object.Trade.Instrument.InsType, 
  "Swap"->py("FLongFormCustomUtils", context).irs_youraccountnumber(object.Trade));
  LongFormYourAccountNumber_Repo = py("FLongFormCustomUtils", context).repo_account(object.Trade).CounterpartyAccount.Account;
  LongFormYourCorrespondentBank = select(count(accountCounterpartyConf :* "accountCorrespondentBank") > 0, 
  true->(accountCounterpartyConf :* "accountCorrespondentBank").At(0), 
  false->nil);
  Nominal1 = object.Trade.DealPackage.Trades.At(0).Nominal;
  Nominal2 = object.Trade.DealPackage.Trades.At(1).Nominal;
  Nominal3 = object.Trade.DealPackage.Trades.At(2).Nominal;
  Nominal4 = object.Trade.DealPackage.Trades.At(3).Nominal;
  Nominal5 = object.Trade.DealPackage.Trades.At(4).Nominal;
  Nominal6 = object.Trade.DealPackage.Trades.At(5).Nominal;
  Premium1 = object.Trade.DealPackage.Trades.At(0).Premium;
  Premium2 = object.Trade.DealPackage.Trades.At(1).Premium;
  Premium3 = object.Trade.DealPackage.Trades.At(2).Premium;
  Premium4 = object.Trade.DealPackage.Trades.At(3).Premium;
  Premium5 = object.Trade.DealPackage.Trades.At(4).Premium;
  Premium6 = object.Trade.DealPackage.Trades.At(5).Premium;
  priceConf = object.Trade.Instrument.Prices;
  tradeConf = object.Trade;
  Valuedate1 = object.Trade.DealPackage.Trades.At(0).ValueDay;
  Valuedate2 = object.Trade.DealPackage.Trades.At(1).ValueDay;
  Valuedate3 = object.Trade.DealPackage.Trades.At(2).ValueDay;
  Valuedate4 = object.Trade.DealPackage.Trades.At(3).ValueDay;
  Valuedate5 = object.Trade.DealPackage.Trades.At(4).ValueDay;
  Valuedate6 = object.Trade.DealPackage.Trades.At(5).ValueDay;
  yieldCalc = py("FLongFormCustomUtils", context).get_trade_yield(object.Trade);
}

clx FInstrumentAndTrades [FExtensionAttribute] {
  presentValueBucketsLongForm = select(timeBucketsSetExternally, 
  nil->presentValue, 
  default->scenarioaxis(presentValue, timeDistributionPerimeterNames, <["timeDistributionBucket"], , , timeBucketsSetExternally>, <["timeApportionmentType"], , , timeApportionmentTypeSelected>, <"timeDistributionDateRule", , "fixedvariant", "TheoreticalValueProjectionDate">));
}

clx FLeg [FExtensionAttribute] {
  cashflowSelect = object.CashFlows;
}

clx FPrice [FExtensionAttribute] {
  priceBid = object.Bid;
}

clx FSingleInstrumentAndTrades [FExtensionAttribute] {
  LongFormEndInterest = object.Trade.Amount;
  Nominal1 = object.Trades.DealPackage.Trades.At(0).Nominal;
  Nominal2 = object.Trades.DealPackage.Trades.At(1).Nominal;
  Nominal3 = object.Trades.DealPackage.Trades.At(2).Nominal;
  Nominal4 = object.Trades.DealPackage.Trades.At(3).Nominal;
  Nominal5 = object.Trades.DealPackage.Trades.At(4).Nominal;
  Nominal6 = object.Trades.DealPackage.Trades.At(5).Nominal;
  Premium1 = object.Trades.DealPackage.Trades.At(0).Premium;
  Premium2 = object.Trades.DealPackage.Trades.At(1).Premium;
  Premium3 = object.Trades.DealPackage.Trades.At(2).Premium;
  Premium4 = object.Trades.DealPackage.Trades.At(3).Premium;
  Premium5 = object.Trades.DealPackage.Trades.At(4).Premium;
  Premium6 = object.Trades.DealPackage.Trades.At(5).Premium;
  Valuedate1 = object.Trades.DealPackage.Trades.At(0).Valueday;
  Valuedate2 = object.Trades.DealPackage.Trades.At(1).Valueday;
  Valuedate3 = object.Trades.DealPackage.Trades.At(2).Valueday;
  Valuedate4 = object.Trades.DealPackage.Trades.At(3).Valueday;
  Valuedate5 = object.Trades.DealPackage.Trades.At(4).Valueday;
  Valuedate6 = object.Trades.DealPackage.Trades.At(5).Valueday;
}

decls[FParameters] {
}

clx FObject [FParameters] {
  FLongFormConfirmationOut_Config =
  AppendOriginalReport=0
  ApplicationName=LongformTradeConfirmation
  BPRCommitRetry=5
  builddate=15-Mar-2023
  ConfirmationStates=[]
  CustomColumnsModule=LongFormColumns
  DefaultMergeFieldsTag=<M>
  DefaultTransportTypes=['File','Email']
  EmailPassword=aaSF4c7j!
  EmailUserName=ntcs_sit
  FAXServer=
  LibreExePath=C:\Program Files\LibreOffice\program\soffice.exe
  LibreOffice=True
  LibrePdfTimeout=10
  LongformPath=C:\Longform\outgoing_messages
  ReportAsPDF=1
  SecureSMTPConnection=False
  SMTPServer=webmail.supporting.devmandiri.co.id
  StateChart=FLongformTradeConfirmationOut
  TemplateAndReportAccessOpsName=TemplateAndReportPermission
  TemplatePassword=
  TempPath=D:\LongformTemp
  UpdateWordUponOpen=False
  version=1.0.9.757


  FLongFormConfirmationOutNotify_Config =
  LogLevel=DEBUG  # INFO, DEBUG, ERROR, WARN
  NotificationLevel=TRACK  # TRACK, DEBUG, WARNING, ERROR, SUCCESS
  NotificationMedia=OFF  # OFF, PRIME_LOG, PRIME_LOG_TRANSIENT
  NotifyUser=


}

decls[FPythonCode] {
}

clx FObject [FPythonCode] {
  FLongFormConfirmationHooks
"""----------------------------------------------------------------------------
MODULE
    FLongFormConfirmationHooks
CLASS
    GenerateLongFormControl
    LongformChecksumControl
    LongformEmailHook
    LongformFaxHook
    TransportType
    LongformStateChartAndProcessingClass

VERSION: 1.0.9-0.5.757

DESCRIPTION
    This module provides the customizable class for deciding if the Longform message is
    generated or not.
----------------------------------------------------------------------------"""
import FLongFormConfirmationHooksBase
import FLongFormConfig

class GenerateLongFormControl(FLongFormConfirmationHooksBase.GenerateLongFormControlBase):
    """ Class to control generation of confirmation reports """
    def generate_message(self):
        """
        This function decides whether the message is generated or not.
        Return True to generate the message from LongformTradeConfirmation, False to generate
        message from Adaptive.
        @return: boolean
        """
        return super().generate_message()
        
class GenerateLongFormControl(FLongFormConfirmationHooksBase.GenerateLongFormControlBase):
    """ Class to control generation of confirmation reports """
    def generate_message(self):
        """
        This function decides whether the message is generated or not.
        Return True to generate the message from LongformTradeConfirmation, False to generate
        message from Adaptive.
        @return: boolean
        """
        return super().generate_message()
        
    def generate_report_from_acm(self):
        """
        This function decides whether the report is to be generated using PRIME sheets configured
        in reportform or through acm functions.
        Return True to generate the message through acm functions
        False to generate reports through PRIME sheets
        """
        def deal_package_is_mmldr(deal_package):
            deal_package = self.confirmation_obj.Trade().DealPackage()
            dp_type = deal_package.Definition().Name()
            if "SP_MarketLinkedDepositIR" == dp_type:
                return True
                
        def deal_package_is_mmld(deal_package):
            deal_package = self.confirmation_obj.Trade().DealPackage()
            dp_type = deal_package.Definition().Name()
            if "SP_MarketLinkedDeposit" == dp_type:
                return True
        
        deal_package = self.confirmation_obj.Trade().DealPackage()
        print('****** 1 Inside generate_report_from_acm')
        print('self.confirmation_obj.EventType()',self.confirmation_obj.EventType())
        if self.confirmation_obj.EventType() == 'Rate Fixing':
            print('****** 2 Inside generate_report_from_acm')
            return False
        if self.confirmation_obj.EventType() == 'Payment Advice':
            print('****** 2 Inside generate_report_from_acm')
            return False
        elif deal_package and deal_package_is_mmldr(deal_package) and self.confirmation_obj.EventType() == "Rate Fixing":
            return False
        elif deal_package and deal_package_is_mmldr(deal_package) and self.confirmation_obj.EventType() == "Payment Advice":
            return False
        else:
            return True


class LongformChecksumControl(FLongFormConfirmationHooksBase.LongformChecksumControlBase):
    """ Class to control and calculate the checksum for the confirmation """
    def calculate_checksum(self):
        """
        This function calculates the checksum for the confirmation
        @return: string
        """
        return super().calculate_checksum()


class LongFormReport(FLongFormConfirmationHooksBase.LongFormReportBase):
    ''' Class to configure report name, route path for "File" transport type'''
    def get_longform_report_name(self, default_name):
        """
        This function is for customizing the report name while generating the report.
        self.confirmation_obj : holds reference to confirmation object
        @param confirmation_obj: acm.FConfirmation object
        @return: string
        By default name of report would be in format: <conf_Id>_<reportform_name>_Msg
        Example:
            return "conf_report_for_conterparty"
        """
        return super().get_longform_report_name(default_name)

    def get_longform_route_path(self, longform_path):
        """
        This function is for customizing the longform path while routing the report.
        self.confirmation_obj : holds reference to confirmation object
        @param confirmation_obj: acm.FConfirmation object
        @return: string
        """
        return super().get_longform_route_path(longform_path)

class LongformEmailHook(FLongFormConfirmationHooksBase.LongformEmailHookBase):
    ''' Class to provide hooks for Email transport type.'''
    
    def __is_valid_repo(self):
        return self.confirmation_obj.Trade().TradeInstrumentType() == "BasketRepo/Reverse"
        
    def create_email_body_template(self, body="", footer=""):
        """This wraps body and footer contents under HMTL template.
        @param body: string type
        @param footer: string type
        @return : HTML string type
        """
        return super().create_email_body_template(body, footer)

    def get_email_body(self):
        '''
        This function returns email body content in string format.
        @return: string
        Plain text or HTML enabled text both can be return as string.
        NOTE: Don't provide <html> <body> root tags.
              as whatever return by this function will be wrapped under <body> tag.
        Example:
            Plain text:
                return "This is email body as plan text content."

            HTML text:
                return """<h2> This is email body with HTML Content</h2>
                            <p style="color:red">This paragraph is in red forecolor.</p>
                        """
        '''
        
        return "Dear Sir / Madam,<br><br>This is an auto-generated E-mail<br>Please find attached confirmation for subject transaction.<br>If there is any discrepancy with this trade, please advise us immediately.<br><br>Our contact number : +6221 -5245513/5245521/5245517<br>email address : stl@bankmandiri.co.id"

    def get_email_footer(self):
        '''
        This function returns email footer which will be included at end of every message.
        Must return footer content as string type.
        @return: string
        Plain text or HTML enabled text both can be return as string.

        NOTE: Don't provide <html> <body> root tags.
              as whatever return by this function will be wrapped under <body> tag.
        Ex:
            Plain text:
                return "This is email footer."

            HTML text:
                return """<h2> This is email footer</h2>
                            <p style="color:red">footer in red color</p>
                        """
        '''
        return super().get_email_footer()

    def get_email_subject(self):
        """
        This function returns subject for email. Must be in string format.
        @return: email subject content as string type
        Example:
          return "new email subject for every email"
        """
        if self.__is_valid_repo():
            return f"Repo Trade Confirmation Bank Mandiri - {self.confirmation_obj.Counterparty().Name()}, {self.confirmation_obj.Trade().TradeTimeDateOnly()}"
            
        elif self.confirmation_obj.EventType() == "Payment Advice" or self.confirmation_obj.EventType() == "Rate Fixing":
            return f"Bank Mandiri Payment Confirmation - {self.confirmation_obj.Trade().OptKey3().Name()}, {self.confirmation_obj.Trade().Oid()},{self.confirmation_obj.Trade().TradeTimeDateOnly()}"
        else:
            return f"Bank Mandiri Trade Confirmation - {self.confirmation_obj.Trade().OptKey3().Name()}, {self.confirmation_obj.Trade().Oid()},{self.confirmation_obj.Trade().TradeTimeDateOnly()}"

    def get_sender_email(self, sender_email):
        """
        This function returns sender email address. Must return email as string.
        @return: string
        Example:
            return "sender_email@fisglobal.com"
        """
        return super().get_sender_email(sender_email)

    def get_receiver_emails(self, receiver_email):
        """
        This function returns reciever(TO:) email addresses. Must return emails as list.
        @return: List of email id's
        Example:
            return ["abc@fisglobal.com", "xyz@fisglobal.com"]
        """
        return super().get_receiver_emails(receiver_email)

    def get_CC_emails(self):
        """
        This function returns reciever(CC:) email addresses. Must return emails as list.
        @return: List of email id's
        Example:
            return ["abc_cc@fisglobal.com", "xyz_cc@fisglobal.com"]
        """
        return super().get_CC_emails()

    def get_BCC_emails(self):
        """
        This function returns reciever(BCC:) email addresses. Must return emails as list.
        @return: List of email id's
        Example:
            return ["abc_bcc@fisglobal.com", "xyz_bcc@fisglobal.com"]
        """
        return super().get_BCC_emails()

    def get_attachment_list(self):
        """
        This function returns list of all files with absolute path which needs to be attached
        in email.
        @return: List of files with absolute path.
        Example:
            return ["c:\\longform\\legal_notice.pdf"]
        """
        return super().get_attachment_list()

    def get_report_name(self):
        """
        This function returns name of report while sending email.
        @return: string
        Example:
           return "new_name_of_report"
        """
        return super().get_report_name()
    
    def get_email_password(self):
        """ Function to get email address password or username for SMTP Server login """
        return getattr(FLongFormConfig.CONFIG_PARAM_OBJ, 'EmailPassword', '')


class LongformFaxHook(FLongFormConfirmationHooksBase.LongformFaxHookBase):
    """Class to provide customization for Fax transport type.
    """

    def create_fax_body_template(self, body="", footer=""):
        """This wraps/attach body and footer contents in sigle string.
        @param body: string type
        @param footer: string type
        @return : Plain string type
        """
        return super().create_fax_body_template(body, footer)

    def get_fax_body(self):
        '''
        This function returns Fax body content in string format.
        Must return footer content as string type.
        @return: string
        '''

        return super().get_fax_body()

    def get_fax_footer(self):
        '''
        This function returns Fax footer which will be included at end of every message.
        Must return footer content as string type.
        @return: string
        '''
        return super().get_fax_footer()

    def get_fax_subject(self):
        """
        This function returns subject for Fax. Must be in string format.
        @return: fax subject content as string type
        Example:
          return "new fax subject for every fax"
        """
        return super().get_fax_subject()

    def get_fax_sender_id(self):
        """
        This function returns sender fax address. Must return sender id as string type.
        @return: string
        Example:
            return "1235_fax@fisglobal.com"
        """
        return super().get_fax_sender_id()

    def get_fax_reciever_ids(self):
        """
        This function returns reciever(TO:) fax addresses. Must return fax id's as a list.
        @return: List of Fax id's
        Example:
            return ["1235_fax@fisglobal.com", "1235_fax@fisglobal.com"]
        """
        return super().get_fax_reciever_ids()

    def get_attachment_list(self):
        """
        This function returns list of all files with absolute path which needs to be attached
        in email.
        @return: List of files with absolute path.
        Example:
            return ["c:\\longform\\legal_notice.pdf"]
        """
        return super().get_attachment_list()

    def get_report_name(self):
        """
        This function returns name of report while sending email.
        @return: string
        Example:
           return "new_name_of_report"
        """
        return super().get_report_name()


class TransportType(FLongFormConfirmationHooksBase.TransportTypeBase):
    '''Class to configure multiple transport types and file_type'''
    def get_other_transports(self, confirmation_obj):
        """
        This extension point is provided for configuring transport types when TransportType="Other"
        in Confirmation Instruction of counter party.

        This executes only if ConfirmationInstruction.TransportType set to "Other"

        Supported transport type : File, Email, Mail, Fax, Custom.

        @param confirmation_obj: acm.FConfirmation object
        @return: List of transport type

        Example:
        return ["File", "Email"]
        """
        return super().get_other_transports(confirmation_obj)

    def get_file_type(self, confirmation_obj):
        """
        This extension point is provided for configuring file types(pdf or docx)
        @param confirmation_obj: acm.FConfirmation object
        @return: File type (pdf or docx)
        Example:
        return "pdf"
        """
        return super().get_file_type(confirmation_obj)

class LongformStateChartAndProcessingClass(FLongFormConfirmationHooksBase.\
                                           LongformStateChartAndProcessingClassBase):
    '''This class provides hooks/function for modify/add transport type mapping with
       it's associated statechart name and processing class type object.
       Mapping is defined as below format:
        {<TransportType> : (<StateChartName> , <ProcessingClassName>)}

      ex:
       {'file'  : ['FLongFormSimpleFileRouting', FLongFormConfFileRoutingProcessing],
        'email' : ['FLongFormSimpleEmailRouting', FLongFormConfEmailRoutingProcessing],
        'fax' :   ['FLongFormSimpleFaxRouting', FLongFormConfFaxRoutingProcessing],
        'mail' : ['FLongFormSimpleMailRouting', FLongFormConfMailRoutingProcessing]
        }

    '''
    def get_transportType_stateChart_processingCls_map(self):
        '''This returns dictionay object which holds mapping of every transport type with
           it's associated statechart name and processing class.

           {'file'  : ['FLongFormSimpleFileRouting', FLongFormConfFileRoutingProcessing],
            'email' : ['FLongFormSimpleEmailRouting', FLongFormConfEmailRoutingProcessing],
            'fax' :   ['FLongFormSimpleFaxRouting', FLongFormConfFaxRoutingProcessing],
            'mail' : ['FLongFormSimpleMailRouting', FLongFormConfMailRoutingProcessing]
            }

         example:
          To add new transport type:
              import NewProcessingCls
              new_ttype = {'New_Transport_Type' : ['State_Chart_Name', NewProcessingCls]}
              self.transportType_stateChart_processingCls.update(new_ttype)
              return self.transportType_stateChart_processingCls

         example:
            To add new transport type Archival:

            from FLongFormConfirmationRoutingProcessing import FLongFormConfArchiveRoutingProcessing
            new_ttype = {'Archival': ['FLongFormSimpleArchivalRouting',
                                        FLongFormConfArchiveRoutingProcessing]}
            self.transportType_stateChart_processingCls.update(new_ttype)
            return self.transportType_stateChart_processingCls

         To modify existing transport type:
             st_name_pc_list = self.transportType_stateChart_processingCls.get('file')
             st_name_pc_list[0] = 'New_statchart_name'
             self.transportType_stateChart_processingCls['file'] = st_name_pc_list
             return self.transportType_stateChart_processingCls

        '''
        return super().get_transportType_stateChart_processingCls_map()

class LongformDocumentData(FLongFormConfirmationHooksBase.LongformDocumentDataBase):
    """class to customise docx data and manage access rights on external and text objects"""
    def __init__(self, confirmation_obj):
        """
        Initialization function of the class
        @param confirmation_obj: acm.FConfirmation object
        self.confirmation_obj : holds reference to confirmation object
        """
        self.conf = confirmation_obj
        super().__init__(confirmation_obj)

    def get_longform_docx_data(self, data, report_name):
        """
        This function is for customizing the Docx Data.
        @param: data : Default Data.
        @param: data : report name for Pdf generation.
        @return: string
        """
        return super().get_longform_docx_data(data, report_name)

    def update_access_rights_on_external_object(self, external_obj):
        """
        This function is for giving rights for external object.
        """
        return super().update_access_rights_on_external_object(external_obj)

    def update_access_rights_on_text_object(self,text_object, external_object):
        """
        This function is for giving rights for external object and CustomTextObject.
        If we change external object rights it is mandatory to give rights to CustomTextObject also.
        """
        return super().update_access_rights_on_text_object(text_object, external_object)


class LongFormSourceData(FLongFormConfirmationHooksBase.LongFormSourceData):
    """ Class Represent Source Data """
    def get_source_data_dict(self, confirmation_obj, field_map = None):
        """ Returns dict for confirmation column data
        """
        return super().get_source_data_dict(confirmation_obj, field_map)

class LongFormPDFSettings(FLongFormConfirmationHooksBase.LongFormPDFSettings):
    """ Class Represent PDF related settings """
    def get_password_for_pdf_encryption(self):
        """ Function can be modified to write custom logic to get password for PDF
        """
        return super().get_password_for_pdf_encryption()

class LongFormDealPackageDataExtPoint(FLongFormConfirmationHooksBase.\
                                      LongFormDealPackageDataExtPoint):
    """ Class Represent Data and Template modification settings for Deal Package """
    def get_dictionary_deal_package(self):
        """ Templates fields can be customised, for example:
        deal_package_dict.update({'currency': 'currency.Name'}),
        currency.Name value will be fetched from acm and currency field in template
        will be populated"""
        deal_package_params = {
            'deal_package_trades' : 'Trades',
        }

        deal_package_dict = {}
        deal_package_dict.update(deal_package_params)
        return deal_package_dict
        #return super().get_dictionary_deal_package()
        
    def get_non_loop_dict(self, acm_obj, non_loop_dict):
        """ User has access to dictionary containing non loop fields and values,
        user can make modification to these field values as per requirement"""
        import acm
        
        for trade in acm_obj.Trades():
            for payment in trade.Payments():
                if payment.Type() == "WHT":
                    wht_amount = payment.Amount()
                    wht_curr = payment.Currency().Name()
                
                if payment.Type() == "Premium":
                    add_premium_amount = payment.Amount()
                    add_premium_curr = payment.Currency().Name()
                
        if non_loop_dict is None:
            non_loop_dict = {}
        
        # Get the Deal Package Type first
        
        dp_type = acm_obj.Definition().Name()
        if "FXRatioParForward" in dp_type:
            conf_trade = acm_obj.Trades().First()
            
            for mf in conf_trade.MoneyFlows():
                if mf.Type() == "Premium":
                    our_account = mf.CounterpartyAccount().Bic()
                    if our_account == None:
                        our_account = mf.CounterpartyAccount().Account()
                    else:
                        our_account = f"{mf.CounterpartyAccount().Bic().Name()}/{mf.CounterpartyAccount().Account()}"
                    
                if mf.Type() == "Premium 2":
                    your_account = mf.CounterpartyAccount().Bic()
                    if your_account == None:
                        your_account = mf.CounterpartyAccount().Account()
                    else:
                        your_account = f"{mf.CounterpartyAccount().Bic().Name()}/{mf.CounterpartyAccount().Account()}"
                    
            non_loop_dict_params = {
                'our_account' : str(our_account),
                'your_account' : str(your_account),
                'dp_nbr': str(acm_obj.Original().Oid())
            }
            non_loop_dict.update(non_loop_dict_params)
            return non_loop_dict

        if "DepositSwap" in dp_type:
            fx_near_trade = None
            fx_far_trade = None
            deposit_trade = None
            
            # FX Trade is taken from the FX Trade with furthest Acquire Day
            for trade in acm_obj.Trades():
                if trade.Instrument().Cid() == "Curr":
                    if trade.DealPackageTradeLinkName() == "FXSwapNear":
                        fx_near_trade = trade
                    
                    if trade.DealPackageTradeLinkName() == "FXSwapFar":
                        fx_far_trade = trade
                
                if trade.Instrument().Cid() == "Deposit":
                    deposit_trade = trade
            
            for mf in fx_far_trade.MoneyFlows():
                source_curr=None
                alt_curr=None
                
                if fx_far_trade.CurrencyPair().Currency1().Name() == deposit_trade.Currency().Name():
                    source_curr=fx_far_trade.CurrencyPair().Currency2().Name()
                    alt_curr=fx_far_trade.CurrencyPair().Currency1().Name()
                else:
                    source_curr=fx_far_trade.CurrencyPair().Currency1().Name()
                    alt_curr=fx_far_trade.CurrencyPair().Currency2().Name()
                    
                if source_curr == mf.Currency().Name():
                    our_account = mf.CounterpartyAccount().Bic()
                    if our_account == None:
                        our_account = mf.CounterpartyAccount().Account()
                    else:
                        our_account = f"{mf.CounterpartyAccount().Bic().Name()}/{mf.CounterpartyAccount().Account()}"
                    
                if deposit_trade.Currency().Name() == mf.Currency().Name():
                    your_account = mf.CounterpartyAccount().Bic()
                    if your_account == None:
                        your_account = mf.CounterpartyAccount().Account()
                    else:
                        your_account = f"{mf.CounterpartyAccount().Bic().Name()}/{mf.CounterpartyAccount().Account()}"
                    
            aftertax = ' '
            aftertax_curr = ' '
            wht = None
            for settlement in acm_obj.Settlements():
                if str(settlement.SettlementType()) == "None":
                    aftertax = abs(settlement.Amount())
                    aftertax_curr = settlement.Currency().Name()
            end_interest = deposit_trade.EndCash() - deposit_trade.Nominal()
            hasil_pajak = end_interest - wht_amount
            
            f_amount=0
            n_amount=0
            if fx_near_trade.Currency().Name() == source_curr:
                n_amount = abs(fx_near_trade.Premium())
                f_amount = abs(fx_near_trade.Quantity())
            elif fx_near_trade.Currency().Name() == alt_curr:
                n_amount = abs(fx_near_trade.Quantity())
                f_amount = abs(fx_far_trade.Premium())
            
            non_loop_dict_params = {
                'nasabah': str(fx_near_trade.Counterparty().Fullname()),
                'dp_nbr': str(acm_obj.Original().Oid()),
                'curr_pair': str(fx_near_trade.CurrencyPair().Name()),
                'near_spot': str(abs(round(fx_near_trade.Price(),5))),
                'far_spot': str(abs(round(fx_far_trade.Price(),5))),
                'far_valueday': str(fx_far_trade.ValueDay()),
                'near_valueday': str(fx_near_trade.ValueDay()),
                'near_amount': str(n_amount),
                'far_amount': str(f_amount),
                'near_premium': str(fx_near_trade.Quantity()),
                'far_premium': str(abs(fx_far_trade.Nominal())),
                'orig_currency': str(source_curr),
                'subs_currency': str(alt_curr),
                'our_account' : str(our_account),
                'your_account' : str(your_account),
                'wht_amount': str(wht_amount),
                'wht_curr': str(wht_curr),
                'after_tax': str(aftertax),
                'after_tax_curr': str(aftertax_curr),
                'trade_time' : str(fx_near_trade.TradeTimeDateOnly())
            }
            non_loop_dict.update(non_loop_dict_params)
            return non_loop_dict
        
        if "DualCurrencyDeposit" in dp_type:
            deposit_trade = None
            option_trade = None
            
            for trade in acm_obj.Trades():
                if trade.Instrument().Cid() == "Option":
                    option_trade = trade.ConnectedTrade()
                
                if trade.Instrument().Cid() == "Deposit":
                    deposit_trade = trade
            
            for mf in deposit_trade.MoneyFlows():
                if mf.Type() == "Premium":
                    your_account = mf.CounterpartyAccount().Bic()
                        
                    if your_account == None:
                        our_account = mf.CounterpartyAccount().Account()
                        your_account = mf.CounterpartyAccount().Account()
                    else:
                        our_account = f"{mf.CounterpartyAccount().Bic().Name()}/{mf.CounterpartyAccount().Account()}"
                        your_account = f"{mf.CounterpartyAccount().Bic().Name()}/{mf.CounterpartyAccount().Account()}"
                        
            for s in option_trade.Settlements():
                if s.Type() == "Premium":
                    sebelum_pajak_curr = s.Currency().Name()
                    sebelum_pajak_amt = abs(round(s.Amount(),2))
                    sebelum_pajak = (f'{sebelum_pajak_curr} {sebelum_pajak_amt}')
                elif s.Type() == "None" :
                    hasil_pajak_curr = s.Currency().Name()
                    hasil_pajak_amt = abs(round(s.Amount(),2))
                    hasil_pajak = (f'{hasil_pajak_curr} {hasil_pajak_amt}')
                    
            end_interest = option_trade.EndCash() - option_trade.Nominal()
            
            #hasil_pajak = deposit_trade.Premium() - wht_amount
            
            cash_amount = option_trade.Price()
            
            unexpected_nominal = cash_amount + hasil_pajak_amt
            
            fixing_date = acm.FCalendar["Jakarta"].AdjustBankingDays(option_trade.Instrument().ExpiryDate(), 2)
            
            from DualCurrencyDepositDefault import DualCurrencyDeposit
            dcd = DualCurrencyDeposit(acm_obj)
            option_trade = dcd.OptionTrade()
            deposit = dcd.DepositTrade()
            calendar = dcd.Leg().PayCalendar()
            startDate = deposit.Instrument().StartDate()
            endDate = deposit.Instrument().EndDate()
            try:
                day_count = dcd.Leg().DayCountMethod()
            except:
                day_count = 'Act/360'
            calendar_info = calendar.CalendarInformation()
            year_fraction = calendar_info.YearsBetween(startDate, endDate, day_count)
            optionPremiumRate = option_trade.ForwardPremium()/ (year_fraction * deposit.ForwardPremium() * 0.01 * -1 )
            optionPremiumRate = round(optionPremiumRate, 2)

            non_loop_dict_params = {
                'nasabah': str(option_trade.Counterparty().Fullname()),
                'dp_nbr': str(acm_obj.Original().Oid()),
                'curr_pair': str(option_trade.CurrencyPair().Name()),
                'near_spot': str(acm_obj.Trades().Last().Price()),
                'far_spot': str(acm_obj.Trades().Mid().Price()),
                'trade_time': str(option_trade.TradeTimeDateOnly()),
                'fixed_rate': str(optionPremiumRate),
                'start_date': str(acm_obj.Instruments().First().StartDate()),
                'fixing_date': str(fixing_date),
                'value_day': str(acm_obj.Instruments().First().EndDate()),
                'near_amount': str(acm_obj.Trades().Last().Quantity()),
                'orig_currency': str(option_trade.CurrencyPair().Currency1().Name()) if str(deposit_trade.Currency().Name()) == str(option_trade.CurrencyPair().Currency2().Name()) else str(option_trade.CurrencyPair().Currency2().Name()),
                'subs_currency': str(deposit_trade.Currency().Name()),
                'ip_name': str(acm_obj.InstrumentPackage().Name()),
                'conversion_rate': str(option_trade.Instrument().StrikePrice()),
                'cashamount_value': str(f"{float(deposit_trade.Premium()):,}"),
                'our_account' : str(our_account),
                'your_account' : str(your_account),
                'wht_amount': str(abs(wht_amount)),
                'wht_curr': str(wht_curr),
                'end_interest': str(end_interest),
                'hasil_pajak': str(hasil_pajak),
                'unexpected_nominal': str(unexpected_nominal),
                'expiry_date':str(acm_obj.Instruments().First().ExpiryDateOnly()),
                'sebelum_pajak': str(sebelum_pajak)
            }
            non_loop_dict.update(non_loop_dict_params)
            return non_loop_dict

        if "MarketLinkedDeposit" in dp_type:
            deposit_trade = None
            option_trade = None
            
            for trade in acm_obj.Trades():
                if trade.Instrument().Cid() == "Option":
                    option_trade = trade.ConnectedTrade()
                    tenor = acm.Time.DateDifference(option_trade.Instrument().ExpiryDateOnly(),option_trade.Instrument().StartDate())
                    non_loop_dict.update({
                        'fixing_source': str(option_trade.Instrument().FixingSource().Name()),
                        'mld_reference':str(option_trade.Instrument().AddInfoValue('sp_MLDReference').Name())
                    })
                    
                if trade.Instrument().Cid() == "Deposit":
                    deposit_trade = trade
                
                if trade.Instrument().Cid() == "Swap":
                    option_trade = trade # FOR MLD IR the 'option' trade is a SWAP
                    non_loop_dict.update({
                    'fixing_source': '-', 
                    'mld_reference':str(option_trade.Instrument().AddInfoValue('sp_MLDIRReference').Name())
                    })
            
            for mf in option_trade.MoneyFlows():
                if mf.Type() == "Premium" and option_trade.Instrument().Cid() == "Option":
                    our_account = mf.AcquirerAccount().Bic()
                    your_account = mf.CounterpartyAccount().Bic()
                    
                    if our_account == None:
                        our_account = mf.AcquirerAccount().Account()
                    else:
                        our_account = f"{mf.AcquirerAccount().Bic().Name()}/{mf.AcquirerAccount().Account()}"
                        
                    if your_account == None:
                        your_account = mf.CounterpartyAccount().Account()
                    else:
                        your_account = f"{mf.CounterpartyAccount().Bic().Name()}/{mf.CounterpartyAccount().Account()}"
                        
                if option_trade.Instrument().Cid() == "Swap" and mf.Type() == "Digital Caplet":
                    our_account = mf.AcquirerAccount().Bic()
                    your_account = mf.CounterpartyAccount().Bic()
                    
                    if our_account == None:
                        our_account = mf.AcquirerAccount().Account()
                    else:
                        our_account = f"{mf.AcquirerAccount().Bic().Name()}/{mf.AcquirerAccount().Account()}"
                        
                    if your_account == None:
                        your_account = mf.CounterpartyAccount().Account()
                    else:
                        your_account = f"{mf.CounterpartyAccount().Bic().Name()}/{mf.CounterpartyAccount().Account()}"

                wht_amount = None
                wht_curr = None
                gross_interest = None
                for trade in acm_obj.Trades():
                    for payment in trade.Payments():
                        if payment.Type() == "WHT":
                            wht_amount = payment.Amount()
                            wht_curr = payment.Currency().Name()
                            non_loop_dict.update({
                                'wht_amount': str(wht_amount),
                                'wht_curr': str(wht_curr),
                                }
                            )
                        if payment.Type() == "Premium":
                            add_premium_amount = payment.Amount()
                            add_premium_date = payment.PayDay()
                            add_premium_curr = payment.Currency().Name()
                            non_loop_dict.update({
                                'premium_amount' : str(round(add_premium_amount, 2)),
                                'premium_curr': str(add_premium_curr),
                                'premium_date': str(add_premium_date),
                                }
                            )
                        if payment.Oid() == "MMLD Payment":
                            pay_date = setts.ValueDay()
                            mmld_curr = setts.Currency().Name()
                            non_loop_dict.update({
                                'pay_date': str(pay_date),
                                'mmld_curr': str(mmld_curr),
                                }
                            )
                for setts in option_trade.Settlements():
                    if setts.Type() == "None": #and setts.Status() == "Authorised":
                        gross_interest = abs(setts.Amount())
                        non_loop_dict.update({
                            'gross_interest': str(round(gross_interest, 2)),
                            }
                        )

            cpty_contact = option_trade.Counterparty().Contacts().First()
            non_loop_dict_params = {
                'trade_number': str(option_trade.Oid()),
                'trade_cpty': str(option_trade.Counterparty().Fullname()),
                'trade_time': str(option_trade.TradeTimeDateOnly()),
                'start_date': str(deposit_trade.Instrument().StartDate()),
                'cash_amount':str(deposit_trade.Premium()),
                'buy_sell': str(option_trade.BoughtAsString()),
                'expiry_date': str(deposit_trade.Instrument().ExpiryDate()),
                'max_yield':str(option_trade.Instrument().AddInfoValue('sp_MLDMaxYield')),
                'premium_option':str(round(option_trade.Price(),4)),
                'rolling_period':str(option_trade.Instrument().AddInfoValue('sp_RollingPeriod')),
                'dp_nbr': str(option_trade.DealPackage().AsPortfolio().Name()),
                'value_day':str(deposit_trade.ValueDay()),
                'ceiling':str(option_trade.Instrument().AddInfoValue('sp_MLDCeiling')),
                'floor':str(option_trade.Instrument().AddInfoValue('sp_MLDFloor')),
                'expiry':str(option_trade.Instrument().ExpiryDateOnly()),
                'domestic_currency': str(option_trade.Currency().Name()),
                'trade_acquirer': str(option_trade.Acquirer().Fullname()),
                'our_account': str(our_account),
                'your_account': str(your_account),
                'acq_email': str(option_trade.Acquirer().Email()),
                'acq_address': str(option_trade.Acquirer().Address()),
                'counterparty_b': str(option_trade.Counterparty().Fullname()),
                'cpty_email': str(cpty_contact.Email()),
                'cpty_address': str(cpty_contact.Address()),
                'cpty_address2': str(cpty_contact.Address2()),
                'cpty_city': str(cpty_contact.City()),
                'cpty_country': str(cpty_contact.Country()),
                'tenor': str(tenor),
                'maturity_date': str(deposit_trade.maturity_date())
            }
            non_loop_dict.update(non_loop_dict_params)
            return non_loop_dict

        return super().get_non_loop_dict(acm_obj, non_loop_dict)
    
    def get_loop_fields_list(self, acm_obj, loop_name, loop_fields_list):
        """ User has access to list of dictionary containing loop fields and values,
        user can make modification to these field values as per requirement"""
        return super().get_loop_fields_list(acm_obj, loop_name, loop_fields_list)

class LongFormDigitalSignSettings(FLongFormConfirmationHooksBase.LongFormDigitalSignSettings):
    """ Class Represent Image Path Settings to be used for ESign """
    def get_sign_image_settings(self):
        """ Returns dictionary containing settings related to Image"""
        return super().get_sign_image_settings()

    def get_sign_image_path(self):
        """ Returns dictionary containing PRIME username and the path where image
        of digital sign is present """
        return super().get_sign_image_path()

...

  FLongFormCustomUtils

"""----------------------------------------------------------------------------
MODULE
    FLongFormCustomUtils:
Description
    Utility functions for Longform modules
----------------------------------------------------------------------------"""

import acm, time, ael
calc_space = acm.FCalculationMethods().CreateStandardCalculationsSpaceCollection()

def get_longform_value_day(conf):
    return str(conf.Trade().ValueDay())
    
def get_longform_expiry_day(conf):
    return str(conf.Trade().Instrument().ExpiryDate())
    
def get_longform_trade_time(conf):
    return str(conf.Trade().TradeTime())
    
def get_Last_Coupon_Date(trade):
    list = []
    next = get_Next_Coupon_Date1(trade)
    if next:
        for each_leg in trade.Instrument().Legs():
            for cf in each_leg.CashFlows():
                list.append(cf.PayDate())
        list.sort()
        if list[list.index(next)-1] > next:
            return list[0]
        else:
            return list[list.index(next)-1]

def get_PayDateMMLD(obj):
    if obj.ReferencedRecordAddress() > 0:
        for p in obj.Trade().Payments():
            if p.Oid() == obj.ReferencedRecordAddress():
                return p.PayDay()

def get_premiumMMLD(acm_obj,select, date):
    if date:
        for trade in acm_obj.Trades():
            for payment in trade.Payments():
                if payment.Type() == "Premium" and payment.PayDay() == date:
                    add_premium_amount = abs(payment.Amount())
                    add_premium_date = payment.PayDay()
                    add_premium_curr = payment.Currency().Name()
        if select == "amount":
            return add_premium_amount
        elif select == "curr":
            return add_premium_curr

def get_date_py(date):
    return date

def get_grossIntMMLD(acm_obj, date):
    if date:
        for trade in acm_obj.Trades():
            if trade.Instrument().Cid() == "Option":
                option_trade = trade.ConnectedTrade()    
        for setts in option_trade.Settlements():
            if setts.Type() == "None" and setts.ValueDay() == date: #and setts.Status() == "Authorised":
                gross_interest = abs(setts.Amount())
        return gross_interest
        
def get_Next_Coupon_Date(obj):
    reset = obj.Reset()
    if reset:
        cf = reset.CashFlow()
        paydate = cf.PayDate()
        return paydate

def get_Next_Coupon_Date1(trade):
    list = []
    list_all = []
    for each_leg in trade.Instrument().Legs():
        for cf in each_leg.CashFlows():
            list_all.append(cf.PayDate())
            if trade.ValueDay() >= cf.StartDate() and trade.ValueDay() <= cf.EndDate():
                list.append(cf.PayDate())
    list.sort()
    list_all.sort()
    if len(list)>0:
        if list_all[0] == list[-1]:
            return list_all[1]
        else:
            return list[-1]
    
def get_premium(conf):
    return conf.Trade().Premium()
    
def get_longform_trade_date(trade):
    tradeno = trade.Oid()
    x = acm.FTrade[tradeno]
    try:
        tempdate = x.TradeTime()
        resdate = time.strftime('%d-%b-%y', time.strptime( tempdate, '%Y-%m-%d %H:%M:%S' ) )
        return resdate
    except:
        return '01-Jan-0001'

def get_longform_value_date(trade):
    tradeno = trade.Oid()
    x = acm.FTrade[tradeno]
    try:
        tempdate = x.ValueDay()
        resdate = time.strftime('%d-%b-%y', time.strptime( tempdate, '%Y-%m-%d' ) )
        return resdate
    except:
        return '01-Jan-0001'
        
def get_longform_end_date(trade):
    tradeno = trade.Oid()
    x = acm.FTrade[tradeno]
    try:
        tempdate = x.Instrument().ExpiryDate()
        if tempdate == '':
            tempdate = x.Instrument().ExpiryTime()
            resdate = time.strftime('%d-%b-%y', time.strptime( time.ctime(tempdate) ) )
        else:
            resdate = time.strftime('%d-%b-%y', time.strptime( tempdate, '%Y-%m-%d %H:%M:%S' ) )
        return resdate
    except:
        return '01-Jan-0001'    

def get_longform_days_coupon(trade):
    tradeno = trade.Oid()
    x = acm.FTrade[tradeno]
    valday = acm.FTrade[tradeno].ValueDay()
    try:
        cashflows = x.Instrument().Legs()[0].CashFlows()
        for c in cashflows:
            if (valday >= c.StartDate()) and (valday <= c.EndDate()):
                return acm.Time.DateDifference(c.EndDate(), c.StartDate())
    except:
        return None

def get_longform_accrued_interest(trade):
    tradeno = trade.Oid()
    x = acm.FTrade[tradeno]
    try:
        calc_space = acm.Calculations().CreateStandardCalculationsSpaceCollection()
        trade_calc = x.Calculation()
        accrued_interest = trade_calc.AccruedInterestSpotOverride(calc_space, acm.Time().SmallDate(), x.ValueDay(), 2).Value()
        accrued_interest = abs(accrued_interest.Number())
        accrued_interest = "{:,.5f}".format(accrued_interest)
        return float(accrued_interest.replace(",",""))
    except:
        return None
    
def get_our_your_account(trade, tipe_acc, tipe_field):
    moneyflows = trade.MoneyFlows()
    for i in moneyflows:
        if 'Security' in i.Type() :
            if tipe_acc == 'Your' :
                pty_acc = i.AcquirerAccount()
            else:
                pty_acc = i.CounterpartyAccount()
                
            if tipe_field == 'Account' :
                return pty_acc.Account()
            else:
                return pty_acc.CorrespondentBank().Name()

    return ''
    
def get_longform_next_coupon_date(legs):

    if legs.Size()==1:
        for i in legs:
            if i.RollingPeriodUnit()=="Days":
                return acm.Time.DateAddDelta(i.RollingPeriodBase(), 0, 0, i.RollingPeriodCount())
            elif i.RollingPeriodUnit()=="Months":
                return acm.Time.DateAddDelta(i.RollingPeriodBase(), 0, i.RollingPeriodCount(), 0)
            elif i.RollingPeriodUnit()=="Years":
                return acm.Time.DateAddDelta(i.RollingPeriodBase(), i.RollingPeriodCount(), 0, 0)

def get_longform_interest_start_date(legs):
    
    if legs.Size()==2:
        if "receive" in legs[0].Description().lower():
            return legs[0].StartDate()
        elif "receive" in legs[1].Description().lower():
            return legs[1].StartDate()

def get_longform_interest_start_date2(conf):
    reset= conf.Reset()
    cashflow=None
    
    if reset:
        cashflow=reset.CashFlow()        
        return cashflow.StartDate()

def get_longform_interest_end_date(legs):
    
    if legs.Size()==2:
        if "pay" in legs[0].Description().lower():
            return legs[0].EndDate()
        elif "pay" in legs[1].Description().lower():
            return legs[1].EndDate()

def get_longform_interest_end_date2(conf):
    reset= conf.Reset()
    cashflow=None
    
    if reset:
        cashflow=reset.CashFlow()        
        return cashflow.EndDate()

def interest_pay_date(conf):
    reset= conf.Reset()
    cashflow=None
    
    if reset:
        cashflow=reset.CashFlow()        
        return cashflow.PayDate()

def get_longform_interest_rate_fixed(legs):
    
    
    if legs.Size()==2:
        if "receive" in legs[0].Description().lower():
            return legs[0].FixedRate()
        elif "receive" in legs[1].Description().lower():
            return legs[1].FixedRate()
    else: return "-"

def get_longform_interest_rate_float(legs):
    
    if legs.Size()==2:
        if "pay" in legs[0].Description().lower():
            return legs[0].FixedRate()
        elif "pay" in legs[1].Description().lower():
            return legs[1].FixedRate()
    else: return "-"

def get_longform_nominal_interest_fixed(trade):
    
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    legs = trade.Instrument().Legs()
    columnId = "Cash Analysis Projected"

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)

    date_list=[]
    int_list=[]
    
    if legs.Size()==2:
        if "receive" in legs[0].Description().lower():
            for i in legs[0].CashFlows():
                if i.PayDate() > acm.DateToday():
                    date_list.append(i.PayDate())
                    int_list.append(calcSpace.CreateCalculation(i, columnId).Value().Number())
        elif "receive" in legs[1].Description().lower():
            for i in legs[1].CashFlows():
                if i.PayDate() > acm.DateToday():
                    date_list.append(i.PayDate())
                    int_list.append(calcSpace.CreateCalculation(i, columnId).Value().Number())
        calcSpace.Clear()
        return int_list



def get_longform_nominal_interest_float(trade):
    
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    legs = trade.Instrument().Legs()
    columnId = "Cash Analysis Projected"

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)

    date_list=[]
    int_list=[]
    
    if legs.Size()==2:
        if "pay" in legs[0].Description().lower():
            for i in legs[0].CashFlows():
                if i.PayDate() > acm.DateToday():
                    date_list.append(i.PayDate())
                    int_list.append(calcSpace.CreateCalculation(i, columnId).Value().Number())
        elif "pay" in legs[1].Description().lower():
            for i in legs[1].CashFlows():
                if i.PayDate() > acm.DateToday():
                    date_list.append(i.PayDate())
                    int_list.append(calcSpace.CreateCalculation(i, columnId).Value().Number())
        calcSpace.Clear()
        return int_list[date_list.index(min(date_list))]

def get_longform_unexecuted_nominal(trade):
    if 'MDCI' in trade.Instrument().Name():
        return trade.Instrument()

def get_longform_wht(trade):
    
    context = acm.GetDefaultContext()
    sheetType = 'FTradeSheet'
    ins = trade
    columnId = 'WHT'

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    calculation = calcSpace.CreateCalculation(ins, columnId)
    indicator = calculation.FormattedValue().replace(",","")
    if indicator == "":
        return 0
    else: return float(indicator)


def get_nominal_eqv_ccs_1(trade):
    
    context = acm.GetDefaultContext()
    sheetType = 'FTradeSheet'
    ins = trade
    columnId = 'Nominal Amount CCS Curr One'

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    calculation = calcSpace.CreateCalculation(ins, columnId)
    val = calculation.Value()
    if val:
        calcSpace.Clear()
        return val
        
    calcSpace.Clear()
    return None

def get_nominal_eqv_ccs_2(trade):
    
    context = acm.GetDefaultContext()
    sheetType = 'FTradeSheet'
    ins = trade
    columnId = 'Nominal Amount CCS Curr Two'

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    calculation = calcSpace.CreateCalculation(ins, columnId)
    val = calculation.Value()
    if val:
        calcSpace.Clear()
        return val
    
    calcSpace.Clear()
    return None
    
def get_market_price(trade):
    
   
    if trade.Instrument().InsType()=='Future/Forward':
        return trade.Price()
    else:
        context = acm.GetDefaultContext()
        sheetType = 'FTradeSheet'
        ins = trade
        columnId = 'Instrument Market Price'
        calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
        calculation = calcSpace.CreateCalculation(ins, columnId)
        indicator = calculation.FormattedValue()
        calcSpace.Clear()
        return indicator
    
def get_fxo_nominal_call(trade):
    
    context = acm.GetDefaultContext()
    sheetType = 'FTradeSheet'
    ins = trade
    columnId = 'Nominal Amount FXO Call'

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    calculation = calcSpace.CreateCalculation(ins, columnId)
    indicator = calculation.FormattedValue()
    calcSpace.Clear()
    return indicator

def get_fxo_nominal_put(trade):
    
    context = acm.GetDefaultContext()
    sheetType = 'FTradeSheet'
    ins = trade
    columnId = 'Nominal Amount FXO Put'

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    calculation = calcSpace.CreateCalculation(ins, columnId)
    indicator = calculation.FormattedValue()
    calcSpace.Clear()
    return indicator
    
def get_USD_Rate(trade):
    
    context = acm.GetDefaultContext()
    sheetType = 'FTradeSheet'
    ins = trade
    columnId = 'Foreign Repo Rate'

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    calculation = calcSpace.CreateCalculation(ins, columnId)
    indicator = calculation.FormattedValue()
    
    return indicator

def date_formatter(date):
    if date:
        createYMD = acm.Time.DateToYMD(date)
        monthArray = [""," Januari ", " Februari ", " Maret ", " April ", " Mei ", " Juni ", " Juli ", " Agustus ", " September ", " Oktober ", " November ", " Desember "]
        return str(createYMD[2]) + monthArray[createYMD[1]] + str(createYMD[0])

def get_Collateral(trade):
    try:
        agl = trade.AgreementLinks()[0]
        mag = agl.MasterAgreement().Name()
        ms = agl.MarginingSet().Name()
        query = """
            select al.trdnbr, mag.name, ms.name 
            from TradeAgreementLink al, MarginingSet ms, MasterAgreement mag
            where al.margining_set_seqnbr = ms.seqnbr
            and al.master_agreement_seqnbr = mag.seqnbr
            and mag.name = '{master_agreement}'
            and ms.name = '{margining_set}'
            """.format(master_agreement = mag, margining_set = ms)
        for i in ael.asql(query)[1][0]:
            trd_no = i[0]
            t = acm.FTrade[trd_no]
            if (trd_no != trade.Oid()) & (t.Instrument().InsType().lower() in ('collateral', 'bond', 'bill', 'frn', 'mbs/abs')):
                return t, t.Instrument().Name()
    except Exception as e:
        print(get_Collateral.__name__, str(trade.Oid()), str(e))
        #logger.LOG("%s of %s : %s" %(get_Collateral.__name__, str(trade.Oid()), str(e)))
        return None

def get_Collateral_Trade(trade):
    coll = get_Collateral(trade)
    if coll != None:
        return coll[0]
    else:
        return None

def get_Collateral_Instrument(trade):
    coll = get_Collateral(trade)
    if coll != None:
        return coll[1]
    else:
        return None

def get_Collateral_Instrument_Issuer(trade):
    coll = get_Collateral(trade)
    if coll != None:
        ins = acm.FInstrument[coll[1]]
        return ins.Issuer()
    else:
        return None

def get_Collateral_Instrument_Isin(trade):
    coll = get_Collateral(trade)
    if coll != None:
        ins = acm.FInstrument[coll[1]]
        return ins.Isin()
    else:
        return None

def get_Collateral_Trade_Price(trade):
    coll = get_Collateral(trade)
    if coll != None:
        return coll[0].Price()
    else:
        return None

def get_Collateral_Trade_FaceValue(trade):
    coll = get_Collateral(trade)
    if coll != None:
        return coll[0].FaceValue()
    else:
        return None

def get_longform_netting(trade):
    amt_list=[]
    setts = trade.Settlements()
    for sett in setts:
        if "premium" in sett.Type().lower():
            amt_list.append(sett.Amount())
    return amt_list[-1]

def get_longform_nominal_interest_fixed_OIS(trade):
    amt_list=[]
    setts = trade.Settlements()
    for sett in setts:
        if "fixed" in sett.Type().lower():
            amt_list.append(sett.Amount())
    return amt_list[-1]

def get_longform_nominal_interest_float_OIS(trade):
    amt_list=[]
    setts = trade.Settlements()
    for sett in setts:
        if "float" in sett.Type().lower():
            amt_list.append(sett.Amount())
    return amt_list[-1]

def get_longform_netting_amount(trade):
    amt_list=[]
    setts = trade.Settlements()
    for sett in setts:
        if "none" in sett.Type().lower():
            amt_list.append(sett.Amount())
    return amt_list[-1] if len(amt_list) >= 1 else None

def get_longform_total_pay(trade):
    setts = trade.Settlements()
    curr = trade.Instrument().FirstPayLeg().Currency().Name()
    for sett in setts:
        if "none" in sett.Type().lower() and sett.ValueDay() == acm.Time.DateToday() and sett.Currency().Name() == curr:
            return abs(sett.Amount())
    return None

def get_longform_total_pay2(conf):
    reset= conf.Reset()
    cf = reset.CashFlow()
    paydate = cf.PayDate()
    
    trade = conf.Trade()
    setts = trade.Settlements()
    curr = trade.Instrument().FirstPayLeg().Currency().Name()
    for sett in setts:
        if "none" in sett.Type().lower() and sett.ValueDay() == paydate and sett.Currency().Name() == curr:
            return abs(sett.Amount())
    return None
    

def get_Collateral_Haircut(trade):
    collateral_name = get_Collateral_Instrument(trade)
    trade = get_Collateral_Trade(trade)
    if (trade != None) & (collateral_name != None):
        try:
            haircutRules = trade.MarginingSet().HaircutRules()
            hr_FilterTypes = set([i.ProductFilterType().lower() for i in haircutRules])
            if 'single instrument' in hr_FilterTypes:
                for hr in haircutRules:
                    if (hr.ProductFilterType().lower() == 'single instrument') & (hr.EligibleProducts() != None):
                        if collateral_name.lower() in hr.EligibleProducts().Name().lower(): 
                            return hr.Haircut()
                        else: 
                            continue
                    else:
                        continue
            elif 'multi instrument' in hr_FilterTypes:
                return haircutRules[0].Haircut()
        except Exception as e:
            logger.LOG("%s of %s : %s" %(get_Collateral_Haircut.__name__, str(trade.Oid()), str(e)))
            return None

def get_account_name(trade):
    cpty = acm.FParty[trade.Counterparty().Name()]
    for acc in cpty.Accounts():
        if acc.AccountType()=="Cash and Security" | acc.AccountType()=="Security and Cash":
            return acc.Name()

def get_account_number(trade):
    cpty = acm.FParty[trade.Counterparty().Name()]
    for acc in cpty.Accounts():
        if acc.AccountType()=="Cash and Security" | acc.AccountType()=="Security and Cash":
            return acc.Account()

def capitalize(object):
    return object.upper()

def bondrepo_account(trade):
    for mf in trade.MoneyFlows():
        if mf.Type() == "Security Nominal":
            return mf

def bondrepo_ouraccountaccounttype(trade):
    for mf in trade.MoneyFlows():
        if mf.Type() == "Security Nominal":
            return mf.AcquirerSettleInstruction()

def ccs_idr_ouraccount(trade):
    for mf in trade.MoneyFlows():
        if mf.Currency().Name()=="IDR":
            return mf.AcquirerAccount().Bic()

def ccs_idr_ouraccountnumber(trade):
    for mf in trade.MoneyFlows():
        if mf.Currency().Name()=="IDR":
            return mf.AcquirerAccount().Account()

def ccs_idr_youraccount(trade):
    for mf in trade.MoneyFlows():
        if mf.Currency().Name()=="IDR":
            return mf.CounterpartyAccount().Bic()

def ccs_idr_youraccountnumber(trade):
    for mf in trade.MoneyFlows():
        if mf.Currency().Name()=="IDR":
            return mf.CounterpartyAccount().Account()

def ccs_usd_ouraccount(trade):
    for mf in trade.MoneyFlows():
        if mf.Currency().Name()=="USD":
            return mf.AcquirerAccount().Bic()

def ccs_usd_ouraccountnumber(trade):
    for mf in trade.MoneyFlows():
        if mf.Currency().Name()=="USD":
            return mf.AcquirerAccount().Account()

def ccs_usd_youraccount(trade):
    for mf in trade.MoneyFlows():
        if mf.Currency().Name()=="USD":
            return mf.CounterpartyAccount().Bic()

def ccs_usd_youraccountnumber(trade):
    for mf in trade.MoneyFlows():
        if mf.Currency().Name()=="USD":
            return mf.CounterpartyAccount().Account()
'''
def couponbond_ouraccount_networkalias(trade):
    valuedate = trade.ValueDay()
    for mf in trade.MoneyFlows():
        recdate = acm.Time.DateAddDelta(mf.PayDate(),0,0,-1)
        if mf.Type() == "Coupon":
            if recdate == valuedate:
                return mf.AcquirerAccount().NetworkAlias()
            else:
                continue
        else:
            continue

def couponbond_ouraccount(trade):
    valuedate = trade.ValueDay()
    for mf in trade.MoneyFlows():
        recdate = acm.Time.DateAddDelta(mf.PayDate(),0,0,-1)
        if mf.Type() == "Coupon":
            if recdate == valuedate:
                return mf.AcquirerAccount().Bic().Name()
            else:
                continue
        else:
            continue

def couponbond_ouraccountnumber(trade):
    valuedate = trade.ValueDay()
    for mf in trade.MoneyFlows():
        recdate = acm.Time.DateAddDelta(mf.PayDate(),0,0,-1)
        if mf.Type() == "Coupon":
            if recdate == valuedate:
                return mf.AcquirerAccount().Account()
            else:
                continue
        else:
            continue
'''
def couponbond_youraccount(trade):
    valuedate = trade.ValueDay()
    for mf in trade.MoneyFlows():
        recdate = acm.Time.DateAddDelta(mf.PayDate(),0,0,-1)
        if mf.Type() == "Coupon":
            if recdate == valuedate:
                return mf.CounterpartyAccount().Bic().Name()
            else:
                continue
        else:
            continue


def couponbond_youraccountnumber(trade):
    valuedate = trade.ValueDay()
    for mf in trade.MoneyFlows():
        recdate = acm.Time.DateAddDelta(mf.PayDate(),0,0,-1)
        if mf.Type() == "Coupon":
            if recdate == valuedate:
                return mf.CounterpartyAccount().Account()
            else:
                continue
        else:
            continue

def dndf_ouraccount(trade):
    for mf in trade.MoneyFlows():
        if mf.Type()=="Payout":
            return mf.AcquirerAccount().Bic()

def dndf_ouraccountnumber(trade):
    for mf in trade.MoneyFlows():
        if mf.Type()=="Payout":
            return mf.AcquirerAccount().Account()

def dndf_youraccount(trade):
    for mf in trade.MoneyFlows():
        if mf.Type()=="Payout":
            return mf.CounterpartyAccount().Bic()

def dndf_youraccountnumber(trade):
    for mf in trade.MoneyFlows():
        if mf.Type()=="Payout":
            return mf.CounterpartyAccount().Account()

def irs_ouraccount(trade):
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    columnId = 'Cash Analysis Projected'

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    
    for mf in trade.MoneyFlows():
        proj = calcSpace.CreateCalculation(mf, columnId).Value()
        if proj > 0:
            calcSpace.Clear()
            return mf.AcquirerAccount().Bic()
    
    calcSpace.Clear()
    return None

def irs_ouraccountnumber(trade):
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    columnId = 'Cash Analysis Projected'

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    
    for mf in trade.MoneyFlows():
        proj = calcSpace.CreateCalculation(mf, columnId).Value()
        if proj > 0:
            calcSpace.Clear()
            return mf.AcquirerAccount().Account()
    
    calcSpace.Clear()
    return None
    
    
def irs_youraccount(trade):
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    columnId = 'Cash Analysis Projected'

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    
    for mf in trade.MoneyFlows():
        proj = calcSpace.CreateCalculation(mf, columnId).Value()
        if proj > 0:
            calcSpace.Clear()
            return mf.CounterpartyAccount().Bic()

    calcSpace.Clear()
    return None

def irs_youraccountnumber(trade):
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    columnId = 'Cash Analysis Projected'

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    
    for mf in trade.MoneyFlows():
        proj = calcSpace.CreateCalculation(mf, columnId).Value()
        if proj > 0:
            calcSpace.Clear()
            return mf.CounterpartyAccount().Account()
    
    calcSpace.Clear()
    return None

def rekeningjual_bic(trade):
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    columnId = 'Cash Analysis Projected'
    
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    
    for mf in trade.MoneyFlows():
        proj = calcSpace.CreateCalculation(mf, columnId).Value()
        if proj > 0 and mf.Type()=="Premium 2":
            calcSpace.Clear()
            return mf.CounterpartyAccount().Bic()
            
    calcSpace.Clear()
    return None

def rekeningjual_number(trade):
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    columnId = 'Cash Analysis Projected'
    
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    
    for mf in trade.MoneyFlows():
        proj = calcSpace.CreateCalculation(mf, columnId).Value()
        if proj > 0 and mf.Type()=="Premium 2":
            calcSpace.Clear()
            return mf.CounterpartyAccount().Account()
            
    calcSpace.Clear()
    return None

def rekeningbeli_bic(trade):
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    columnId = 'Cash Analysis Projected'
    
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    
    for mf in trade.MoneyFlows():
        proj = calcSpace.CreateCalculation(mf, columnId).Value()
        if proj < 0 and mf.Type()=="Premium":
            calcSpace.Clear()
            return mf.CounterpartyAccount().Bic()
            
    calcSpace.Clear()
    return None

def rekeningbeli_number(trade):
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    columnId = 'Cash Analysis Projected'
    
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    
    for mf in trade.MoneyFlows():
        proj = calcSpace.CreateCalculation(mf, columnId).Value()
        if proj < 0 and mf.Type()=="Premium":
            calcSpace.Clear()
            return mf.CounterpartyAccount().Account()

    calcSpace.Clear()
    return None
    

def ccs_ccy1_ouraccount(trade):
    context = acm.GetDefaultContext()
    sheetType = 'FTradeSheet'
    ins = trade
    columnId = 'Nominal Amount CCS Curr One'

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    curr1 = calcSpace.CreateCalculation(ins, columnId).Value().Unit()

    for mf in trade.MoneyFlows():
        if mf.Currency().Name()==str(curr1):
            calcSpace.Clear()
            return mf.AcquirerAccount()
            
    calcSpace.Clear()
    return None

def ccs_ccy1_ouraccountnumber(trade):
    context = acm.GetDefaultContext()
    sheetType = 'FTradeSheet'
    ins = trade
    columnId = 'Nominal Amount CCS Curr One'

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    curr1 = calcSpace.CreateCalculation(ins, columnId).Value().Unit()

    for mf in trade.MoneyFlows():
        if mf.Currency().Name()==str(curr1):
            calcSpace.Clear()
            return mf.AcquirerAccount().Account()
            
    calcSpace.Clear()
    return None

def ccs_ccy2_ouraccount(trade):
    context = acm.GetDefaultContext()
    sheetType = 'FTradeSheet'
    ins = trade
    columnId = 'Nominal Amount CCS Curr Two'

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    curr2 = calcSpace.CreateCalculation(ins, columnId).Value().Unit()

    for mf in trade.MoneyFlows():
        if mf.Currency().Name()==str(curr2):
            calcSpace.Clear()
            return mf.AcquirerAccount()
            
    calcSpace.Clear()
    return None
    

def ccs_ccy2_ouraccountnumber(trade):
    context = acm.GetDefaultContext()
    sheetType = 'FTradeSheet'
    ins = trade
    columnId = 'Nominal Amount CCS Curr Two'

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    curr2 = calcSpace.CreateCalculation(ins, columnId).Value().Unit()

    for mf in trade.MoneyFlows():
        if mf.Currency().Name()==str(curr2):
            calcSpace.Clear()
            return mf.AcquirerAccount().Account()
            
    calcSpace.Clear()
    return None
    
    
def ccs_ccy1_youraccount(trade):
    context = acm.GetDefaultContext()
    sheetType = 'FTradeSheet'
    ins = trade
    columnId = 'Nominal Amount CCS Curr One'

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    curr1 = calcSpace.CreateCalculation(ins, columnId).Value().Unit()

    for mf in trade.MoneyFlows():
        if mf.Currency().Name()==str(curr1):
            calcSpace.Clear()
            return mf.CounterpartyAccount()
            
    calcSpace.Clear()
    return None

def ccs_ccy1_youraccountnumber(trade):
    context = acm.GetDefaultContext()
    sheetType = 'FTradeSheet'
    ins = trade
    columnId = 'Nominal Amount CCS Curr One'

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    curr1 = calcSpace.CreateCalculation(ins, columnId).Value().Unit()

    for mf in trade.MoneyFlows():
        if mf.Currency().Name()==str(curr1):
            calcSpace.Clear()
            return mf.CounterpartyAccount().Account()
            
    calcSpace.Clear()
    return None

def ccs_ccy2_youraccount(trade):
    context = acm.GetDefaultContext()
    sheetType = 'FTradeSheet'
    ins = trade
    columnId = 'Nominal Amount CCS Curr Two'

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    curr2 = calcSpace.CreateCalculation(ins, columnId).Value().Unit()

    for mf in trade.MoneyFlows():
        if mf.Currency().Name()==str(curr2):
            calcSpace.Clear()
            return mf.CounterpartyAccount()
            
    calcSpace.Clear()
    return None

def ccs_ccy2_youraccountnumber(trade):
    context = acm.GetDefaultContext()
    sheetType = 'FTradeSheet'
    ins = trade
    columnId = 'Nominal Amount CCS Curr Two'

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    curr2 = calcSpace.CreateCalculation(ins, columnId).Value().Unit()

    for mf in trade.MoneyFlows():
        if mf.Currency().Name()==str(curr2):
            calcSpace.Clear()
            return mf.CounterpartyAccount().Account()
            
    calcSpace.Clear()
    return None
    
def couponbond_ouraccountname(trade):
    for mf in trade.MoneyFlows():
        if mf.Type() == "Coupon":
            return mf.AcquirerAccount().Name()

def couponbond_ouraccountnumber(trade):
    for mf in trade.MoneyFlows():
        if mf.Type() == "Coupon":
            return mf.AcquirerAccount().Account()

def couponbond_ouraccount(trade):
    for mf in trade.MoneyFlows():
        if mf.Type() == "Coupon":
            return mf.AcquirerAccount().Bic()

def couponbond_ouraccount_networkalias(trade):
    for mf in trade.MoneyFlows():
        if mf.Type() == "Coupon":
            return mf.AcquirerAccount().NetworkAlias()

def couponbond_youraccountname(trade):
    for mf in trade.MoneyFlows():
        if mf.Type() == "Coupon":
            return mf.CounterpartyAccount().Name()

def couponbond_youraccountnumber(trade):
    for mf in trade.MoneyFlows():
        if mf.Type() == "Coupon":
            return mf.CounterpartyAccount().Account()

def repo_account(trade):
    coll = get_Collateral(trade)
    if coll != None:
        for mf in coll[0].MoneyFlows():
            if mf.Type()=="Security Nominal":
                return mf
    else:
        return None

def dndf_amount_idr(trade):
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    columnId = 'Cash Analysis Projected'

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    
    for mf in trade.MoneyFlows():
        if mf.Currency().Name()=="IDR":
            proj = calcSpace.CreateCalculation(mf, columnId).Value()
            calcSpace.Clear()
            return proj
            
    calcSpace.Clear()
    return None

def fx_ouraccount(trade):

    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    columnId = "Cash Analysis Projected"
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)

    for mf in trade.MoneyFlows():
        proj = calcSpace.CreateCalculation(mf, columnId).Value().Number()
        if "Premium" in mf.Type() and proj > 0:
            return mf.CounterpartyAccount()

def fx_youraccount(trade):

    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    columnId = "Cash Analysis Projected"
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)

    for mf in trade.MoneyFlows():
        proj = calcSpace.CreateCalculation(mf, columnId).Value().Number()
        if "Premium" in mf.Type() and proj < 0:
            return mf.CounterpartyAccount()

def fxoption_account(trade):
    for mf in trade.MoneyFlows():
        if mf.Type() == "Premium":
            return mf

def nominal_interest_float(trade):
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    legs = trade.Instrument().Legs()
    columnId = "Cash Analysis Projected"
    list=[]
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    for mf in trade.MoneyFlows():
        if mf.Type() == "Float Rate" and mf.PayDate() == acm.Time.DateToday():
            proj = calcSpace.CreateCalculation(mf, columnId).Value().Number()
            list.append(proj)
            
    calcSpace.Clear()
    return list[0]

def nominal_interest_fixed(trade):
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    legs = trade.Instrument().Legs()
    columnId = "Cash Analysis Projected"
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    for mf in trade.MoneyFlows():
        if mf.Type() == "Fixed Rate" and mf.PayDate() == acm.Time.DateToday():
            proj = calcSpace.CreateCalculation(mf, columnId).Value().Number()
            calcSpace.Clear()
            return proj
            
    calcSpace.Clear()
    return None

def nominal_interest_pay(trade):
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    cashflow_used = trade.Instrument().FirstPayLeg().CashFlows()
    columnId = "Cash Analysis Projected"
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    for cf in cashflow_used:
        if cf.PayDate() == acm.Time.DateToday():
            proj = calcSpace.CreateCalculation(cf, columnId).Value().Number()
            calcSpace.Clear()
            return abs(proj)
            
    calcSpace.Clear()
    return None
    
def nominal_interest_receive(trade):
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    cashflow_used = trade.Instrument().FirstReceiveLeg().CashFlows()
    columnId = "Cash Analysis Projected"
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    for cf in cashflow_used:
        if cf.PayDate() == acm.Time.DateToday():
            proj = calcSpace.CreateCalculation(cf, columnId).Value().Number()
            calcSpace.Clear()
            return abs(proj)
            
    calcSpace.Clear()
    return None

def to_number(ext):
    ext = ext.replace(".","")
    return float(ext)

def coupon_interest(trade):
    list=[]
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    columnId_proj = "Cash Analysis Projected"
    columnId_type = "Money Flow Type"
    today = acm.Time.DateToday()
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)

    for mf in trade.MoneyFlows():
        if mf.Type()=='Coupon':
            result_proj = calcSpace.CreateCalculation(mf, columnId_proj).Value().Number()
            if result_proj!=0:
                calcSpace.Clear()
                return result_proj
    calcSpace.Clear()
    return None
    
    
def coupon_paydate(trade):
    list = []
    for mf in trade.MoneyFlows():
        if mf.Type()=='Coupon':
            list.append(mf.PayDate())
    return list[-1]

def coupon_total(trade):
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    columnId_proj = "Cash Analysis Projected"
    columnId_type = "Money Flow Type"
    today = acm.Time.DateToday()
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    for mf in trade.MoneyFlows():
        if today >= mf.StartDate() and today <= mf.EndDate():
            result_type = calcSpace.CreateCalculation(mf, columnId_type).FormattedValue()
            if str(result_type) == "Fixed Rate" or str(result_type) == "Float Rate":
                result_proj = calcSpace.CreateCalculation(mf, columnId_proj)
                if result_proj.FormattedValue()=="NaN":
                    calcSpace.Clear()
                    return 0
                else:
                    accr = result_proj.Value().Number()
                    calcSpace.Clear()
                    return accr
            else:
                continue
                
    calcSpace.Clear()
    return None

def get_longform_settlement_date(trade):
    return trade.LongFormGetSettlementDate()
    
def fixingvalue(mfs):
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    columnId = "Cash Analysis Fixing Value"

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    
    for mf in mfs:
        if mf.Type()=="Float Rate" and mf.PayDate()==acm.Time.DateToday():
            fv = calcSpace.CreateCalculation(mf, columnId).Value()
            calcSpace.Clear()
            return fv
    
    calcSpace.Clear()
    return None

def pairs_enddate(mfs):
    for mf in mfs:
        if mf.Type()=="Float Rate" and mf.PayDate()==acm.Time.DateToday():
            return mf.MoneyFlowEndDate()

def pairs_paydate(mfs):
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    columnId = "Cash Analysis Pay Day"

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    for mf in mfs:
        if mf.Type()=="Float Rate" and mf.PayDate()==acm.Time.DateToday():
            sd = calcSpace.CreateCalculation(mf, columnId).Value()
            calcSpace.Clear()
            return sd
    
    calcSpace.Clear()
    return None


def get_longform_netting_dndf(mfs):
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    columnId = "Cash Analysis Projected"

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    for mf in mfs:
        if mf.Type()=="Payout":
            proj = calcSpace.CreateCalculation(mf, columnId).Value()
            calcSpace.Clear()
            return proj
            
    calcSpace.Clear()
    return None

#this is to get projected value
def proj_type(trade, mode, type):
    if type == 'receive':
        leg_type = trade.Instrument().FirstReceiveLeg().CashFlows() + " Rate"
    elif type == 'pay':
        leg_type = trade.Instrument().FirstPayLeg().CashFlows() + " Rate"
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    columnId = 'Cash Analysis Projected'
    if mode == "pay":
        cashflow_used = trade.Instrument().FirstPayLeg().CashFlows()
    elif mode == "receive":
        cashflow_used = trade.Instrument().FirstReceiveLeg().CashFlows()
    else :
        return None
    
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    for cf in cashflow_used:
        if cf.CashFlowType()==leg_type and cf.PayDate()==acm.Time.DateToday():
            proj = calcSpace.CreateCalculation(cf, columnId).Value().Number()
            calcSpace.Clear()
            return abs(proj)
            
    calcSpace.Clear()
    return None

def unamort_total_nominal_pay(obj):
    trade = obj.Trade()
    cashflow_used = trade.Instrument().FirstPayLeg().CashFlows()
    rate_type = "Fixed Amount"
    cashflow_oids = [cashflow.Oid() for cashflow in cashflow_used]
    
    today = acm.Time.DateToday()
    
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    
    calc_space = acm.Calculations().CreateCalculationSpace(context, sheetType)
    t_n = calc_space.InsertItem(trade)
    calc_space.Refresh()
    
    child = t_n.Iterator().FirstChild()
    
    while child:
        cash_oid = child.Tree().Item().MoneyFlow().CashFlow().Oid()
        type_child = child.Tree().Item().MoneyFlow().Type()
        payDate = child.Tree().Item().MoneyFlow().PayDate()
        dateDiff = acm.Time().DateDifference(payDate, today)
        if cash_oid in cashflow_oids and dateDiff == 0 and type_child == rate_type:
            pv_val = calc_space.CreateCalculation(child.Tree(), 'Cash Analysis Projected').Value().Number()
            calc_space.Clear()
            return abs(pv_val)
        child = child.NextSibling()
    return 0

def get_payDate(obj):
    return obj.Reset().CashFlow().PayDate()

def unamort_total_nominal_rec(obj):

    paydate = get_payDate(obj)
    trade = obj.Trade()
    cashflow_used = trade.Instrument().FirstReceiveLeg().CashFlows()
    rate_type = "Fixed Amount"
    cashflow_oids = [cashflow.Oid() for cashflow in cashflow_used]
    
    today = acm.Time.DateToday()
    
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    
    calc_space = acm.Calculations().CreateCalculationSpace(context, sheetType)
    t_n = calc_space.InsertItem(trade)
    calc_space.Refresh()
    
    child = t_n.Iterator().FirstChild()
    
    while child:
        cash_oid = child.Tree().Item().MoneyFlow().CashFlow().Oid()
        type_child = child.Tree().Item().MoneyFlow().Type()
        payDate = child.Tree().Item().MoneyFlow().PayDate()
        if cash_oid in cashflow_oids and payDate == paydate and type_child == rate_type:
            pv_val = calc_space.CreateCalculation(child.Tree(), 'Cash Analysis Projected').Value().Number()
            calc_space.Clear()
            return abs(pv_val)
        child = child.NextSibling()
    return 0


def proj_type2(obj, mode, type):
    trade = obj.Trade()
    PAYDATE = get_payDate(obj)
    if mode == "pay":
        cashflow_used = trade.Instrument().FirstPayLeg().CashFlows()
        rate_type = trade.Instrument().FirstPayLeg().LegType() + " Rate"
    elif mode == "receive":
        cashflow_used = trade.Instrument().FirstReceiveLeg().CashFlows()
        rate_type = trade.Instrument().FirstReceiveLeg().LegType() + " Rate"
    else :
        return None
    
    cashflow_oids = [cashflow.Oid() for cashflow in cashflow_used]
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    
    calc_space = acm.Calculations().CreateCalculationSpace(context, sheetType)
    t_n = calc_space.InsertItem(trade)
    calc_space.Refresh()
    
    child = t_n.Iterator().FirstChild()
    
    while child:
        cash_oid = child.Tree().Item().MoneyFlow().CashFlow().Oid()
        type_child = child.Tree().Item().MoneyFlow().Type()
        payDate = child.Tree().Item().MoneyFlow().PayDate()
        if cash_oid in cashflow_oids and payDate == PAYDATE:
            if type == 'pay' and type_child == rate_type:
                pv_val = calc_space.CreateCalculation(child.Tree(), 'Cash Analysis Projected').Value().Number()
                calc_space.Clear()
                return abs(pv_val)
            elif type == 'receive' and type_child == rate_type:
                pv_val = calc_space.CreateCalculation(child.Tree(), 'Cash Analysis Projected').Value().Number()
                calc_space.Clear()
                return abs(pv_val)            
            elif type_child == type:
                pv_val = calc_space.CreateCalculation(child.Tree(), 'Cash Analysis Projected').Value().Number()
                calc_space.Clear()
                return abs(pv_val)        
                
        child = child.NextSibling()
    
    return None

def proj_type3(conf, mode, type):
    reset= conf.Reset()
    calc_val=None
    temp_cf = None
    if reset:
        cashflow=reset.CashFlow()        
        if cashflow.CashFlowType() == 'Float Rate':
            temp_cf = cashflow
        if type in ['Float Rate', 'Fixed Rate']:
            if type == 'Fixed Rate':
                temp_cf = get_fixed_rate_from_float_rate(temp_cf, conf)
            if temp_cf:
                calc_val = temp_cf.Calculation().Projected(calc_space, conf.Trade()).Value().Number()
                calc_space.Clear()
    if calc_val is None:
        return 0
    else:
        return calc_val
        
def get_fixed_rate_from_float_rate(cashflow, conf):
    if cashflow:
        pay_date = cashflow.PayDate()
        for mf in conf.Trade().MoneyFlows():
            if mf.CashFlow().PayDate() == pay_date and mf.CashFlow().CashFlowType() == 'Fixed Rate':
                return mf.CashFlow()

def get_interest_receive(obj):
    cf = obj.Reset().CashFlow()
    paydate = cf.PayDate()
    cfs_used = []
    
    

#this is for getting PV. 
def get_longForm_Nominal_principal(trade, mode, type):
    if mode == "pay":
        cashflow_used = trade.Instrument().FirstPayLeg().CashFlows()
    elif mode == "receive":
        cashflow_used = trade.Instrument().FirstReceiveLeg().CashFlows()
    else :
        return None
    
    cashflow_oids = [cashflow.Oid() for cashflow in cashflow_used]
    
    today = acm.Time.DateToday()
    
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    
    calc_space = acm.Calculations().CreateCalculationSpace(context, sheetType)
    t_n = calc_space.InsertItem(trade)
    calc_space.Refresh()
    
    child = t_n.Iterator().FirstChild()
    
    while child:
        cash_oid = child.Tree().Item().MoneyFlow().CashFlow().Oid()
        type_child = child.Tree().Item().MoneyFlow().Type()
        payDate = child.Tree().Item().MoneyFlow().PayDate()
        dateDiff = acm.Time().DateDifference(payDate, today)
        if cash_oid in cashflow_oids and type_child == type and dateDiff > 0:
            pv_val = calc_space.CreateCalculation(child.Tree(), 'Portfolio Theoretical Value').Value().Number()
            calc_space.Clear()
            
            return abs(pv_val)
        child = child.NextSibling()
    
    return None
    
def get_diary(diaryText):
    return diaryText.split("\n")[-1]

def MLDRtrade(dp, cid):
    for t in dp.Trades():
        if cid == "Deposit" and t.Instrument().Cid() == "Deposit":
            return t
            break
        elif cid == "Non Deposit" and t.Instrument().Cid() != "Deposit":
            return t
            break

def MLDRpayment(dp, type):
    for t in dp.Trades():
        for p in t.Payments():
            if p.Type() == type:
                return p
                break

def MLDRaccount(option_trade, whose):
    for mf in option_trade.MoneyFlows():             
        if option_trade.Instrument().Cid() == "Swap" and mf.Type() == "Digital Caplet":
            our_account = mf.AcquirerAccount().Bic()
            your_account = mf.CounterpartyAccount().Bic()
            
            if our_account == None:
                our_account = mf.AcquirerAccount().Account()
            else:
                our_account = f"{mf.AcquirerAccount().Bic().Name()}/{mf.AcquirerAccount().Account()}"
                
            if your_account == None:
                your_account = mf.CounterpartyAccount().Account()
            else:
                your_account = f"{mf.CounterpartyAccount().Bic().Name()}/{mf.CounterpartyAccount().Account()}"
    if whose == "Your":
        return your_account
    elif whose == "Our":
        return our_account

def select_settlement(setts, type, date):
    today = acm.Time.DateToday()
    for sett in setts:
        if type in sett.Type() and date == sett.ValueDay():
            return sett

def select_settlement1(setts, type, status, date):
    today = acm.Time.DateToday()
    for sett in setts:
        if type in sett.Type() and status in sett.Status(): #and date == sett.ValueDay():
            try:
                return sett
            except:
                return None

def get_TradeLogicDecorator(trd):
    trade = acm.FTradeLogicDecorator(trd, None)
    return trade

def get_trade_yield(trade):
    try:
        tradeLogicDecorator = acm.FTradeLogicDecorator(trade, None)
        formatter = acm.Get('formats/SixDecimalDetailedTruncateTrailingZeroShowZero')
        if trade.Instrument().Quotation().Name() == 'Yield':
            as_formatted_string = formatter.Format(abs(tradeLogicDecorator.Price()))
        else:
            as_formatted_string = formatter.Format(abs(tradeLogicDecorator.ViceVersa()))
        return formatter.Parse(as_formatted_string)
    except Exception as err:
        print('Error in get_trade_yield', err)    
    return 0

def get_interest_receive(obj):
    trade = obj.Trade()
    PAYDATE = get_payDate(obj)
    curr_used = trade.Instrument().FirstReceiveLeg().Currency().Name()
    
    cashflow_used  = obj.Trade().Instrument().FirstReceiveLeg().CashFlows()
    cashflow_oids = [cashflow.Oid() for cashflow in cashflow_used]
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    
    calc_space = acm.Calculations().CreateCalculationSpace(context, sheetType)
    t_n = calc_space.InsertItem(trade)
    calc_space.Refresh()
    
    child = t_n.Iterator().FirstChild()
    
    while child:
        cash_oid = child.Tree().Item().MoneyFlow().CashFlow().Oid()
        payDate = child.Tree().Item().MoneyFlow().PayDate()
        type = child.Tree().Item().MoneyFlow().Type()
        child_curr = child.Tree().Item().MoneyFlow().Currency().Name()
        if cash_oid in cashflow_oids and payDate == PAYDATE and child_curr == curr_used and not type == 'Fixed Amount':
                pv_val = calc_space.CreateCalculation(child.Tree(), 'Cash Analysis Projected').Value().Number()
                calc_space.Clear()
                return abs(pv_val)
                
        child = child.NextSibling()
    
    return 0

def get_interest_pay(obj):
    trade = obj.Trade()
    PAYDATE = get_payDate(obj)
    curr_used = trade.Instrument().FirstPayLeg().Currency().Name()
    
    cashflow_used  = obj.Trade().Instrument().FirstPayLeg().CashFlows()
    cashflow_oids = [cashflow.Oid() for cashflow in cashflow_used]
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    
    calc_space = acm.Calculations().CreateCalculationSpace(context, sheetType)
    t_n = calc_space.InsertItem(trade)
    calc_space.Refresh()
    
    child = t_n.Iterator().FirstChild()
    
    while child:
        cash_oid = child.Tree().Item().MoneyFlow().CashFlow().Oid()
        payDate = child.Tree().Item().MoneyFlow().PayDate()
        type = child.Tree().Item().MoneyFlow().Type()
        child_curr = child.Tree().Item().MoneyFlow().Currency().Name()
        if cash_oid in cashflow_oids and payDate == PAYDATE and child_curr == curr_used and not type == 'Fixed Amount':
                pv_val = calc_space.CreateCalculation(child.Tree(), 'Cash Analysis Projected').Value().Number()
                calc_space.Clear()
                return abs(pv_val)
                
        child = child.NextSibling()
    
    return 0


...

  TransporterHooks
"""-------------------------------------------------------------------------------------------
MODULE
    TransporterHooks

    (c) Copyright 2010-2018 by FIS Front Arena. All rights reserved.

VERSION
    3.5.0
DESCRIPTION
    Used to dynamically fill the RunScriptCMD parameters

    uses the fnmatch module for the name and excludename parameter, this allows for neat pattern matching:

    Pattern     Meaning
    *           matches everything
    ?           matches any single character
    [seq]       matches any character in seq
    [!seq]      matches any character not in seq

USAGE
    <?xml version='1.0' encoding='iso-8859-1'?>
    <RunScriptCMD>
        <Command module="TransporterExport" hook="TransporterHooks.ExtensionModules(context='Standard',empty=True)">
            <basepath>.</basepath>
        </Command>

        <Command module="TransporterExport" hook="TransporterHooks.UserNames(tag='Extension_Module', group='ADMIN')" >
            <basepath>.</basepath>
        </Command>

        <Command module="TransporterExport" hook="TransporterHooks.Objects(tag='Trade_Filter', owner='${USERNAME}', name='*')" >
            <basepath>.</basepath>
        </Command>

        <Command module="TransporterImport" hook="TransporterHooks.FileNames(tag='Extension_Module', name='*.txt')" >
            <basepath>.</basepath>
        </Command>

	<Command module="ContextEditor" hook="TransporterHooks.FileExtensionNames(tag='add_module', basepath='.', name='*.txt')">
		<context>Standard</context>
		<add_before>%org</add_before> <!-- add_after has precedence -->
	</Command>

	<!-- Update python code within extension, read from file.
             Does NOT support ALL different kind of inputfiles and file sizes! -->

        <Command callback="False" exitOnError="False" module="TransporterUpdate"
                    hook="TransporterHooks.ReadTextFile(tag='extensioncontent', name='TestPython.py')">
            <moduleupdate>TestModule</moduleupdate>
            <extensiontype>FPythonCode</extensiontype>
            <extensionclass>FObject</extensionclass>
            <extensionname>testPython</extensionname>
	</Command>

    </RunScriptCMD>

MAJOR REVISIONS

    2010-12-17  RL  Initial implementation
    2011-02-01  RL  Added more options
    2011-08-22  RL  Support for ',' in names
    2013-01-16  RL  Add parameter excludename to exclude ExtensionModules names
    2014-05-27  RL  Extract extension names from files
-------------------------------------------------------------------------------------------"""

  # This isn't required in Python 2.6
import acm
import ael
import amb

import re
import os
import fnmatch
from string import Template



import FLogger

logger = FLogger.FLogger('Transporter.' + __name__)

def TransporterExportCustomHook(file_path, output_file_data):
    """Use to override the exported file data"""
    return file_path, output_file_data

def AMBAExportEntryHook(acm_object):
    '''
    Hook to customize acm object before converting to AMBA message while exporting
    :param amba_message: FObject type
    :return: acm_object : FObject type
    '''
    return acm_object

def TransporterImportCustomHook(object_to_import):
    '''
    Hook to customize the object created from file
    :param object_to_import: The object created from file provided in Transporter Import may be of type -
    TradeFilter, FSQL, FStoredASQLQuery, FAelTask, FAel(PythonCode), FExtensionModule, TradingSheetTemplate, FWorkbook,
    FWorkspace, AsqlReport, AsqlReport
    :return: same object type as received in function
    '''
    return  object_to_import

def _users(name='*', group=None, hasProfile=None, inactive=False, active=False):
    """Extract User names"""
    if group:
        users = [str(user.Name()) for user in acm.FUser.Select('userGroup="%s"' % group)
                 if (not inactive or (inactive and user.Inactive())) and
                 (not active or (active and not user.Inactive()))]
    else:
        users = [str(user.Name()) for user in acm.FUser.Select('')
                 if (not inactive or (inactive and user.Inactive())) and
                 (not active or (active and not user.Inactive()))]

    if hasProfile:
        inprofile = [str(prof.User().Name()) for prof in acm.FUserProfileLink.Select('userProfile="%s"' % hasProfile)]
        users = [user for user in users if user in inprofile]

    users = fnmatch.filter(users, name)
    return users


def _groups(name='*', hasProfile=None):
    """Extract Group names"""
    groups = [str(group.Name()) for group in acm.FUserGroup.Select('')]

    if hasProfile:
        inprofile = [str(prof.UserGroup().Name()) for prof in
                     acm.FGroupProfileLink.Select('''userProfile=%r''' % hasProfile)]
        groups = [group for group in groups if group in inprofile]

    groups = fnmatch.filter(groups, name)
    return groups


def _JoinCommaSpace(lst):
    return ['"%s"' % name if (',' in name or ' ' in name) else name for name in lst]


def ExcludeFromList(objectlist, excludename=''):
    if excludename != '':
        for exclude in excludename.split(','):
            objectlist = [n for n in objectlist if not fnmatch.fnmatch(n, exclude)]
    return objectlist


def ExtensionModules(tag='Extension_Module', context=None, name='*', owner=None, empty=False, notempty=False,
                     usermodule=False, group=None, hasProfile=None, inactive=False, active=False, excludename=''):
    """Extract Extension Module names

    excludename can have many strings split by "," e.g.

    TransporterHooks.ExtensionModules(name='T*', excludename='Tran*,TRAD*,TAB*')

    """
    if context:
        context = list(acm.FExtensionContext[context].ModuleNames())

    if usermodule:
        users = _users(group=group, hasProfile=hasProfile, inactive=inactive, active=active)
    else:
        users = None

    if owner:
        owner = owner.upper()

    em = [str(em.Name()) for em in acm.FExtensionModule.Select('') \
          if (not context or (context and str(em.Name()) in context)) and \
          (not owner or (owner and str(em.Owner().Name()) == owner)) and \
          (not empty or (empty and len(em.Types()) == 0)) and \
          (not notempty or (notempty and len(em.Types()) > 0)) and \
          (not users or (users and (str(em.Name()) in users)))]
    em = fnmatch.filter(em, name)

    em = ExcludeFromList(em, excludename)

    return {tag: ",".join(_JoinCommaSpace(em))}


def ContextExtensionModules(tag='Extension_Module', contextname='Standard', name='*', excludename=''):
    """Extract Extension Module names from a Context"""
    context = acm.FExtensionContext[contextname]

    if context:
        em = [str(ext) for ext in context.ModuleNames()]
    else:
        em = []

    em = fnmatch.filter(em, name)

    em = ExcludeFromList(em, excludename)

    return {tag: ",".join(_JoinCommaSpace(em))}


def BrokenExtensionModules(tag='Extension_Module'):
    """Extract "broken" Extension Module names"""
    col, res = ael.asql("select o.seqnbr from TextObject o where o.type = 'Extension Module' and o.usrnbr > 0")

    em = [str(row[0]) for row in res[0]]

    return {tag: ",".join(_JoinCommaSpace(em))}


def UserNames(tag='usernames', name='*', group=None, hasProfile=None, inactive=False, active=False, excludename=''):
    """Extract User names"""
    users = _users(name, group, hasProfile, inactive, active)

    users = ExcludeFromList(users, excludename)
    return {tag: ",".join(_JoinCommaSpace(users))}


class TemplateEnv(Template):
    idpattern = "[_A-Za-z][\._A-Za-z0-9]*"


def ReadTextFile(tag='File', name='file.txt', search=None, replace=None, parseenv=False):
    """Extract File without stripping"""
    with open(name, 'r') as inputfile:
        text = inputfile.read()
        if parseenv:
            text = TemplateEnv(text).safe_substitute(os.environ)
        if search and replace:
            if type(search) != type(replace):
                raise Exception("Expecting search and replace to be of same type")

            if type(search) in (str, str):
                search = (search,)
                replace = (replace,)

            for (search, replace) in zip(search, replace):
                print(("Replace %s with %s" % (search, replace)))
                text = text.replace(search, replace)

    return {tag: text}


def ReadFile(tag='File', name='file.txt', separator=','):
    """Extract File"""
    with open(name, 'r') as inputfile:
        text = separator.join([line.strip() for line in inputfile])

    return {tag: text}


def FileNameList(basepath='.', name='*.*', extension=True, excludename=''):
    """Extract File names as list"""
    files = fnmatch.filter(os.listdir(basepath), name)

    if not extension:
        files = [file.split('.')[0] for file in files]

    files = ExcludeFromList(files, excludename)

    return sorted(files)


def FileNames(tag='Files', basepath='.', name='*.*', extension=True, separator=',', excludename='', addfilepath=False):
    """Extract File names"""

    if addfilepath:
        basepath = os.path.join(basepath, tag)

    files = FileNameList(basepath, name, extension, excludename)

    return {tag: separator.join(_JoinCommaSpace(files)), 'basepath': basepath}


def ReContext(tag='reContext', basepath='.', reContext='', nameContext="+%s"):
    """   reContext is a regular expression to extract a Context Name from the current directory r"\w+\\([A-Za-z]+)$" """
    if reContext:
        currentDir = os.path.abspath(basepath)
        logger.LOG("ReContext: %r basepath: %s" % (reContext, currentDir))
        found = re.search(reContext, currentDir)

        if found:
            context = nameContext % found.group(1)
            logger.LOG("ReContext CONTEXT: %s" % (context))
        else:
            logger.ELOG("FileExtensionNames could not extract context")
            raise Exception("FileExtensionNames could not extract context")

    return {tag: context}


def FileExtensionNames(tag='add_module', basepath='.', name='*.*', separator=',', excludename='',
                       tagContext='destination', reContext='', nameContext="+%s"):
    """Extract Extension module names from files. """

    if reContext:
        context = ReContext(tag='reContext', basepath=basepath, reContext=reContext, nameContext=nameContext)[
            'reContext']
    else:
        context = ''

    files = FileNameList(basepath, name)

    modules = []
    for filename in files:
        with open(os.path.join(basepath, filename), 'rU') as file:
            for lineno, line in enumerate(file):
                if line.startswith("name "):
                    modules.append(line[13:-2])
                    break
                elif lineno > 6:
                    break

    modules = ExcludeFromList(modules, excludename)

    returnDict = {tag: separator.join(_JoinCommaSpace(modules)), 'basepath': basepath}
    if tagContext and context:
        returnDict[tagContext] = context

    return returnDict


def ObjectList(objectname, owner=None, name='*', group=None, hasProfile=None, excludename=''):
    # ObjectNames
    from Transporters import SelectObjects
    if owner:
        owner = owner.upper()

    if group or hasProfile:
        objects = set()
        users = _users(group=group, hasProfile=hasProfile)
        for owner in users:
            objects.update(SelectObjects(objectname, owner, name))
    else:
        objects = SelectObjects(objectname, owner, name)
    objects = ExcludeFromList(objects, excludename)

    return objects


def Objects(tag='Objects', objectname=None, owner=None, name='*', group=None, hasProfile=None, excludename=''):
    """ The Objects function extracts object names based on different criterias,
        to be used with Transporter:Export, Transporter:Delete"""

    if not objectname:
        objectname = tag

    objects = ObjectList(objectname, owner, name, group, hasProfile, excludename)

    return {tag: ",".join(_JoinCommaSpace(objects))}


def CompareObjectsToFiles(tag='Objects', objectname=None, owner=None, name='*', group=None, hasProfile=None,
                          excludename='', basepath='.', filename='*.*', separator=',', excludefile=''):
    """ The CompareObjectsToFiles function extracts object names based on different criterias,
        as well as filenames and generates an list of objectnames only existing in the database.
        To Archive call with Transporter:Export and then Transporter:Delete"""

    if not objectname:
        objectname = tag

    # Object names
    objects = ObjectList(objectname, owner, name, group, hasProfile, excludename)
    # File names
    # if objectname == 'ExtensionModule':
    #    files = FileExtensionNames(tag='ExtensionModule', basepath=basepath, name=filename, separator=separator,
    #            excludename='')['ExtensionModule']
    files = FileNameList(basepath, filename, extension=False, excludename=excludefile)

    return {tag: separator.join(_JoinCommaSpace(set(objects) - set(files)))}


def UserProfiles(tag='UserProfiles', name='*', user=None, group=None, excludename=''):
    """ Extract UserProfiles for either group, user or just name """
    userProfiles = []
    if user:
        userProfiles = [pl.UserProfile().Name() for pl in acm.FUserProfileLink.Select('''user=%r''' % user)]
    elif group:
        userProfiles = [pl.UserProfile().Name() for pl in acm.FGroupProfileLink.Select('''userGroup=%r''' % group)]
    else:
        userProfiles = [profile.Name() for profile in acm.FUserProfile.Select('')]

    userProfiles = fnmatch.filter(userProfiles, name)

    userProfiles = ExcludeFromList(userProfiles, excludename)

    return {tag: ",".join(_JoinCommaSpace(userProfiles))}
    
    
# These functions are required for LongformTradeConfirmation

def AMBAExportExitHook(amba_message):
    if amba_message:
        try:
            _type = amba_message.At('TYPE')
            if str(_type) in ['INSERT_EXTERNALOBJECT', "UPDATE_EXTERNALOBJECT"]:
                _external_obj = amba_message.FindMessages('EXTERNALOBJECT')
                if _external_obj:
                    _external_obj = _external_obj[0]
                    if str(_external_obj.At('INTEGRATION_TYPE')) in ['LongForm'] and str(_external_obj.At('INTEGRATION_SUBTYPE')) in ['TPLVersion']:
                        parent_id = str(_external_obj.At('PARENT_SEQNBR', 0))
                        if int(parent_id):
                            acm_ext_obj = acm.FExternalObject[int(parent_id)]
                            parent_data_name = str(acm_ext_obj.Data().Name())
                            _external_obj.AtPut('PARENT_DATA_SEQNBR.NAME', parent_data_name)
                            logger.LOG("Successfully applied LTC export customization for message:%s" % amba_message)
        except Exception as err:
            logger.ELOG("Error occurred while applying AMBAExportExitHook for Longform. Error %r" % err)
            logger.ELOG("Hence, ignoring customization for amba_message.%s" % amba_message)
            logger.ELOG("Do not use this exported AMBA file for importing LTC component.")
    return amba_message
			


def AMBAImportEntryHook(amba_message):
    if amba_message:
        try:
            parent_data_name = ''
            try:
                buffer = amb.mbf_create_buffer_from_data(amba_message)
                mbf_obj = buffer.mbf_read()
            except Exception as err:
                return amba_message  
            type_att = mbf_obj.mbf_find_object("TYPE", "MBFE_BEGINNING")
            if type_att and type_att.mbf_get_value() in ['INSERT_EXTERNALOBJECT', 'UPDATE_EXTERNALOBJECT']:
                extenal_mbf_obj = mbf_obj.mbf_find_object("EXTERNALOBJECT", "MBFE_BEGINNING")
                if extenal_mbf_obj:
                    parent_data_name = extenal_mbf_obj.mbf_find_object("PARENT_DATA_SEQNBR.NAME")
                    if parent_data_name:
                        parent_data_name = str(parent_data_name.mbf_get_value())
                        def _delete_attribute_from_AMBA(extenal_mbf_obj):
                            if extenal_mbf_obj:
                                try:
                                    extenal_mbf_obj.mbf_remove_object() # delete current object which is "PARENT_DATA_SEQNBR.NAME"
                                except:
                                    pass
                        _delete_attribute_from_AMBA(extenal_mbf_obj)
                        def _find_parent_extenal_object():
                            query = acm.CreateFASQLQuery(acm.FExternalObject, 'AND')
                            query.AddOpNode('OR')
                            query.AddAttrNode('Data.Name','EQUAL', parent_data_name)
                            return query.Select()
                        result = _find_parent_extenal_object()
                        if result:
                            parent_id = str(result[-1].Oid())
                            if extenal_mbf_obj.mbf_find_object("PARENT_SEQNBR"):  # to make "PARAENT_SEQNBR" as current object 
                                extenal_mbf_obj.mbf_replace_string('PARENT_SEQNBR', parent_id)
                                amba_message = mbf_obj.mbf_object_to_string()
                                logger.LOG("Successfully applied LTC import customization for message:%s" % amba_message)
        except Exception as err:
            logger.ELOG("Error occurred while applying AMBAImportEntryHook for Longform. Error %r" % err)
            logger.ELOG("Hence, ignoring the customization for amba_message.%s" % str(amba_message))       
    return amba_message
	
	
def AMBAImportExitHook(acm_object):
    if acm_object:
        
        def is_template_already_present(acm_object):
            if acm_object.IsKindOf(acm.FExternalObject) and str(acm_object.IntegrationSubtype()) in ['LongFormTPL', 'TPLVersion']:
                template_name = str(acm_object.Data().Name())
                query = acm.CreateFASQLQuery(acm.FExternalObject, 'AND')
                query.AddAttrNode('IntegrationSubtype', 'EQUAL', str(acm_object.IntegrationSubtype()))
                query.AddAttrNode('Data.Name', 'EQUAL', template_name)
                if query.Select():
                    return True
            return False
        
        if is_template_already_present(acm_object):
            raise Exception("Template < {0} > already present in ADS".format(acm_object.Data().Name()))
                
        try:
            reportform_name = ""
            if acm_object and acm_object.IsKindOf(acm.FCustomTextObject):
                if acm_object.SubType() in ['ReportForm']:
                    from FIntegrationUtils import FIntegrationUtils, ChoiceListAlreadyExist
                    reportform_name = str(acm_object.Name())
                    intergration_obj = FIntegrationUtils()
                    try:
                        intergration_obj.insert_element_in_choice_list('Conf Template',reportform_name , 'LongForm Message Template')
                    except ChoiceListAlreadyExist as err:
                        logger.LOG(str(err))
                    except Exception as err:
                        err_msg = 'Error occurred while creating choice list entry in "Conf Template".Please add ReportForm <{0} > manually in choice list.'.format(reportform_name)
                        logger.ELOG(err_msg)
                        logger.ELOG("Error is %r" % err)
        except Exception as err:
            err_msg = 'Error occurred while applying AMBAImportExitHook on {0}'.format(reportform_name)
            logger.ELOG(err_msg)
            logger.ELOG('Please add Reportform <{0}> manually in choice list("Conf Template").'.format(reportform_name))

    return acm_object

...

}

