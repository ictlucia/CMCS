#
# Front Arena exported extension module.
# source          ""
# timestamp (utc) "2024-02-07 05:02:47.7"
# ***** DO NOT EDIT! *****
#
name        "PS_CustodySystemEuroClearInHoldingPosition"
description "$Id$"

groups {
}

decls[FParameters] {
}

clx FObject [FParameters] {
  EuroClearInHoldingPositionParams =
  archiveFilePath=D:\Interface\Custody\EuroClear\archive\
  inputFilePath=D:\Interface\Custody\EuroClear\
  logFilename=EuroClearInHoldingPosition_LOG_{}.txt
  logFilePath=D:\Temp


}

decls[FPythonCode] {
}

clx FObject [FPythonCode] {
  CustodySystemEuroClearInHoldingPosition
"""----------------------------------------------------------------------------------------------------
MODULE:
    CustodySystemEuroClearInHoldingPosition

DESCRIPTION:
    Entry point to invoke the EuroClear In HoldingPosition run task gui.

-------------------------------------------------------------------------------------------------------"""
import acm, ael, traceback
import os
import ParametersReader
import FLogger, FRunScriptGUI, InterfaceUtils
import CustodySystemEuroClearInHoldingPositionUtils

# get value from FParameter
holdingPositionParams = ParametersReader.get_params('EuroClearInHoldingPositionParams')

log_file_name = holdingPositionParams['logFilename'].format(acm.Time.DateToday().replace('-', ''))
path_to_save_mt_535 = holdingPositionParams['inputFilePath']
path_to_archive_mt_535 = holdingPositionParams['archiveFilePath']
log_file_path = holdingPositionParams['logFilePath']


def initialize_logging(params, logfile_name, app_name):
    """
    Initialize logger
    :param params: parameters
    :return: FLogger object
    """
    logger = None
    try:
        logFolder = params['log_folder']
        logfolderString = logFolder
        logfile = os.path.join(logfolderString, logfile_name)
        if logfile == '':
            logfile = None

        logLevel = params['log_level']
        level = InterfaceUtils.LogLevelNameToNumber(logLevel)
        logger = FLogger.FLogger(level=level,
                                 name=app_name,
                                 logToPrime=True,
                                 logToFileAtSpecifiedPath=logfile,
                                 logToConsole=False)
    except Exception as err:
        print('Error in initializing logger {}'.format(err))
        print(traceback.format_exc())
    return logger


class EuroClearnInHoldingPosition(FRunScriptGUI.AelVariablesHandler):
    def __init__(self):
        """
        Initialize member variables
        """
        logLevels = [FLogger.FLogger.INFO, FLogger.FLogger.ERROR, FLogger.FLogger.WARNING, FLogger.FLogger.DEBUG]
        # NAME = 0  # internal name
        # TEXT = 1  # GUI Text
        # TYPE = 2  # object type
        # VALUES = 3  # valid values
        # DEFAULT = 4  # default
        # MANDATORY = 5  # mandatory
        # MULTI = 6  # multiple selection
        # TIP = 7  # floating tip
        # CB = 8  # callback
        # ENABLED = 9  # enabled

        gui_vars = [
            ['inputFolder', 'Folder Path_Input', 'string', path_to_save_mt_535, path_to_save_mt_535, 1, 0,
             'The file path from where the files will be picked. Configure via FParameter', None, 0],
            ['archiveFolder', 'Folder Path_Archive', 'string', path_to_archive_mt_535, path_to_archive_mt_535, 1, 0,
             'The file path where the files will be moved after processing. Configure via FParameter', None, 0],
            ['logToConsole', 'Log to console_Logging', 'int', [1, 0], 1, 1, 0,
             'Whether logging should be done in the Log Console or not.'],
            ['log_folder', 'Log folder_Logging', 'string', log_file_path, log_file_path, 0, 0,
             'Select where to store the log file', None, 0],
            ['log_level', 'Log level_Logging', 'string', logLevels, FLogger.FLogger.DEBUG, 1, 0]
        ]
        self._logger = None
        FRunScriptGUI.AelVariablesHandler.__init__(self, gui_vars)

    def set_logger(self, logger):
        """
        This function sets the logger
        :param logger: FLogger
        :return: None
        """
        self._logger = logger

    def archive_file(self, swift_file, archive_folder):
        """
        This function archives the files
        :param swift_file: File to archive
        :param archive_folder: Archive folder
        :return: None
        """
        os.replace(swift_file, os.path.join(archive_folder, swift_file.name))

    def process_task(self, params):
        """
        This function processes the task
        :param params: Parameters
        :return: None
        """

        files_processed = list()
        files_failed = list()
        self._logger.LOG('Start process_task')
        input_folder = params['inputFolder']
        archive_folder = params['archiveFolder']

        if input_folder == archive_folder:
            self._logger.LOG('Input and archive folders cannot be same.')
        else:
            with os.scandir(input_folder) as dir_iter:
                for swift_mt_file in dir_iter:
                    if swift_mt_file.name.endswith('.INC'):  # process only INC files.
                        try:
                            processed_successfully = True
                            with open(swift_mt_file) as swift_file:
                                mt_535 = swift_file.read()
                                mt_535_list = CustodySystemEuroClearInHoldingPositionUtils.swift_message_to_list(mt_535)
                                msg_id = CustodySystemEuroClearInHoldingPositionUtils.get_message_identifier_from_message_list(mt_535_list)
                                self._logger.LOG("Processing MT535 with Sender's Message Reference {}.".format(msg_id))
                                success_result, failed_result, ret_log_str = CustodySystemEuroClearInHoldingPositionUtils.process_input_data(
                                    mt_535_list)
                                if success_result:
                                    self._logger.DLOG(
                                        'Instrument with ISIN {} updated in ADS.'.format(','.join(success_result)))

                                if failed_result:
                                    self._logger.LOG(
                                        'No instrument with ISIN {} found in ADS.'.format(','.join(failed_result)))
                                    processed_successfully = False
                                    
                                if ret_log_str:
                                    self._logger.LOG(ret_log_str)
                                    processed_successfully = False
                        except Exception as err:
                            processed_successfully = False
                            self._logger.LOG('Error while processing file {}. {}.'.format(swift_mt_file.name, err))
                            self._logger.LOG(traceback.format_exc())

                        if processed_successfully:
                            self.archive_file(swift_mt_file, archive_folder)
                            files_processed.append(swift_mt_file.name)
                        else:
                            files_failed.append(swift_mt_file.name)

        self._logger.LOG(
            '--------------------------Stats Summary Start-------------------------------------------------')
        self._logger.LOG(
            'Files processed successfully. {}'.format('Zero' if not files_processed else ', '.join(files_processed)))
        self._logger.LOG('Files failed. {}'.format('Zero' if not files_failed else ', '.join(files_failed)))
        self._logger.LOG('--------------------------Stats Summary End-------------------------------------------------')

        self._logger.LOG('Finish process_task')


ael_gui_parameters = {'windowCaption': "EuroClearInHoldingPosition"}

ael_variables = EuroClearnInHoldingPosition()
ael_variables.LoadDefaultValues(__name__)
app_name = 'CustodySystemEuroClearInHoldingPosition'


def ael_main(params):
    """
    AEL main function
    :param params: GUI parameters
    :return: None
    """
    euroclear_holding_position_loger = None
    try:
        euroclear_holding_position_loger = initialize_logging(params, log_file_name, app_name)
        if euroclear_holding_position_loger:
            euroclear_holding_position_loger.LOG('Execution started.')
            ael_variables.set_logger(euroclear_holding_position_loger)
            ael_variables.process_task(params)
    except Exception as err:
        if euroclear_holding_position_loger is not None:
            euroclear_holding_position_loger.ELOG(str(err))
        print(traceback.format_exc())
        print('Error in ael main. {}'.format(err))


...

  CustodySystemEuroClearInHoldingPositionUtils
"""----------------------------------------------------------------------------------------------------
MODULE:
    CustodySystemEuroClearInHoldingPositionUtils

DESCRIPTION:
    Utils functions.

-------------------------------------------------------------------------------------------------------"""
import ParametersReader, copy, re, acm, os


def swiftmt_to_float(swift_num):
    """Converts a numeric value from swift to float"""
    try:
        swift_num = float(swift_num.replace(',', '.')) if swift_num else None
    except Exception as e:
        pass
    return swift_num

def get_message_identifier_from_message(swift_msg):
    """ This function extracts message identified from message"""
    swift_list = swift_message_to_list(swift_msg)
    return get_message_identifier_from_message_list(swift_list)


def get_message_identifier_from_message_list(swift_list):
    """ This function extracts message identified from message tag, value list"""
    ret_val = ''
    for tag_value in swift_list:
        if tag_value[0] == '20C':
            ret_val = tag_value[1].split('//')[1]
    return ret_val
    
def process_input_data(swift_list):
    """ This function processes the swift tag value list and extracts Isin and hold amount
        {1:F01CNORGB22XXXX0000000001}{2:O5351114190904CNORGB22AXXX00000000011909041114N}{4:
        :16R:GENL
        :28E:00001/MORE
        :20C::SEME//RTEXT 0974513020
        :23G:NEWM
        :98A::PREP//20190904
        :98A::STAT//20190904
        :22F::SFRE//DAIL
        :22F::CODE//COMP
        :22F::STTY//CUST
        :22F::STBA//SETT
        :97A::SAFE//acq usd acc 1
        :17B::ACTI//Y
        :17B::AUDT//N
        :17B::CONS//N
        :16S:GENL
        :16R:SUBSAFE
        :16R:FIN
        :35B:ISIN CH0031240127
            BASLER KTBK 2.75 NTS 08 02 22
            USD5000
        :16R:FIA
        :12A::CLAS/ISIT/CORP
        :98A::MATU//20220208
        :98A::ISSU//20170208
        :92A::INTR//2,75
        :16S:FIA
        :90A::MRKT//PRCT/101,462
        :98A::PRIC//20190904
        :93B::AGGR//FAMT/6000000,
        :93B::AVAI//FAMT/5000000,
        :16R:SUBBAL
        :93B::AGGR//FAMT/5000000,
        :94F::SAFE//ICSD/MGTCBEBEECL
        :16S:SUBBAL
        :19A::HOLD//USD3551170,
        :19A::ACRU//USD55343,75
        :19A::BOOK//USD3519635,
        :16S:FIN
        :16S:SUBSAFE
        :16R:ADDINFO
        :19A::HOLP//USD95530731,95
        :16S:ADDINFO
        -}
    """

    data_list = list()
    success_result = list()
    failed_result = list()
    ret_log_str = ''

    isin = None
    holdAmt = None
    update_date = None
    genl_list = list()
    genl_list_flag = False
    for tag_value in swift_list:
        # Create a separate GENL list
        if tag_value[0] == '16R' and tag_value[1] == 'GENL':
            genl_list_flag = True

        if genl_list_flag:
            genl_list.append(tag_value)

        if tag_value[0] == '16S' and tag_value[1] == 'GENL':
            genl_list_flag = False
        # Create a separate GENL list
        

        if tag_value[0] == '35B':  # The block will always contain the isin first followed by the hold amount
            isin = tag_value[1].split('\n')[0].split('ISIN')[1].strip()
        elif tag_value[0] == '93B' and isin:
            if tag_value[1].startswith(':AVAI'):
                holdAmt = re.findall(r'/([0-9]+)', tag_value[1])[0]
                holdAmt = swiftmt_to_float(holdAmt)
                data_list.append((copy.deepcopy(isin), copy.deepcopy(holdAmt)))
                isin = None
                holdAmt = None

    for tag_value in genl_list:  # Use the GENL list
        if tag_value[0] in ['98A', '98C'] and tag_value[1].startswith(':STAT'):
            update_date = tag_value[1].split('//')[1][2:8]
            break
    if data_list:
        for isin, hold_amt in data_list:
            bond_instr = acm.FInstrument.Select01('isin={}'.format(isin), None)
            if bond_instr:
                add_info_spec = acm.FAdditionalInfoSpec['HoldPosEuroClear']
                bond_instr.AddInfoValue(add_info_spec, "{}_{}".format(update_date, hold_amt))
                bond_instr.Commit()
                success_result.append(isin)
            else:
                failed_result.append(isin)
    else:
        ret_log_str = 'Ignoring the message as it does not contain the tag 19A with qualifier HOLD.'

    return success_result, failed_result, ret_log_str


def swift_message_to_list(swift_msg, mt_msg_type=''):
    """ Create list of tagValue pair for each swift tag"""
    try:
        swift_rows = swift_msg.split('\n')
        tag_value_list = []
        flag = False
        desc = ''
        for line in swift_rows:
            line = line.strip()
            if desc and line and line[0] == ':' and mt_msg_type in ['MT598_130', 'MT598_131', 'MT598_132']:
                flag = False
                tag_value_list.append(['79', desc])
                desc = ''
            if line.startswith('{1:'):
                continue
            if line.startswith('-}'):
                break
            if flag == True:  # 79
                desc = desc + line + '\n'
                continue
            if line and line[0] == ':':
                tag_values = line.split(':', 2)
                if tag_values[1].strip() == '79':
                    desc = desc + tag_values[2].strip() + '\n'
                    flag = True
                else:
                    tag_value_list.append([tag_values[1].strip(),
                                           tag_values[2].strip()])
            elif line:
                tag_value_list[-1][1] = tag_value_list[-1][1] + '\n' + line
        if flag == True:  # 79
            tag_value_list.append(['79', desc])
        return tag_value_list
    except Exception as error:
        raise Exception("Invalid swift message format."
                        "Unable to parse swift message. Exception : %s" % error)


def process_swift_data(swift_data):
    """
    This function processes the swift data
    :param swift_data: Swift message
    :return: lists
    """
    euroClearParams = ParametersReader.get_params('EuroClearInHoldingPositionParams')
    path_to_save_mt_535 = euroClearParams['inputFilePath']
    mt_535_list = swift_message_to_list(swift_data)
    try:
        file_to_save_name = None
        for tag_value in mt_535_list:
            if tag_value[0] == '20C':
                sender_ref = tag_value[1].split('//')[1]
                file_to_save_name = '{}.txt'.format(sender_ref)
                break

        with open(os.path.join(path_to_save_mt_535, file_to_save_name), 'w') as fp:
            fp.write(swift_data)
    except Exception as err:
        print('Error while saving swift message {}'.format(err))

    return process_input_data(mt_535_list)

...

}

