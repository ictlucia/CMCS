#
# Front Arena exported extension module.
# source          ""
# timestamp (utc) "2022-10-21 02:06:33"
# ***** DO NOT EDIT! *****
#
name        "IAM"
description "$Id$"

groups {
}

decls[FParameters] {
}

clx FObject [FParameters] {
  EDParams =
  D=disabled
  E=enabled
  Password=vitoo
  Username=vitoo


}

decls[FPythonCode] {
}

clx FObject [FPythonCode] {
  EnableDisableUser
"""----------------------------------------------------------------------------------------
MODULE:
    EnableDisableUser
    
DESCRIPTION: This module provide function to Enable or Disable User then return the value of data in dictionary which will be use to know is user Enable or Disable or failed

AUTHOR: Gregorius Vito
------------------------------------------------------------------------------------------"""
import acm
import ParametersReader
from flask import Flask
from flask import jsonify
from flask import request
from flask_httpauth import HTTPBasicAuth
from werkzeug.security import generate_password_hash, check_password_hash
import json

app = Flask(__name__)
auth = HTTPBasicAuth()
EDParams  = ParametersReader.get_params('EDParams')

auth_username = EDParams["Username"]
auth_password = EDParams["Password"]

#User authetification when IAM hit NTCS
users = {
    auth_username: generate_password_hash(auth_password),
}

@auth.verify_password
def verify_password(username, password):
    """-----------------------------------------------------------------------------------------
    This function to Authectification user
    :param username: string of username
    :param password: string of password
    :return string
    -----------------------------------------------------------------------------------------"""
    if username in users and check_password_hash(users.get(username), password):
        return username
        
@app.route('/api/v1/user/enabledisable', methods=['POST'])
@auth.login_required(optional = True) 
def enableDisableUser():
    """-----------------------------------------------------------------------------------------
    This function to register user and update user based on action code
    Logic:
        if actionCode =A, then activate user
        if actionCode =D, then inactive user
    :return dict 
    -----------------------------------------------------------------------------------------"""    
    #Authentification
    if auth.current_user() == None :
        return jsonify({"errorStatus":"Y" , "result" :"unauthorized"}),401
    
    #Get data
    record = json.loads(request.data)
    try:
        status = record['status']
        username = record['UserID']
    except:
        return jsonify({"errorStatus":"Y" , "result" :"invalid format"}),503
    
    
    status = EDParams[status]
    u = acm.FUser[username]
    
    #Check user in Database
    if u == None:
        return jsonify({"errorStatus":"Y" , "result" :"user "+username+" not found"}),200
    
    #Check current user status
    statusnow = u.Inactive()
    if (statusnow == True and status == 'disabled')or (statusnow == False and status == 'enabled'):
        return jsonify({"errorStatus":"Y" , "result" :"user status already " + status }),200
    
    #Change user status
    uc = u.Clone()
    if status == 'disabled': 
        uc.Inactive('YES')
        u.Apply(uc)
        u.Commit()
        return jsonify({"errorStatus":"N" , "result" :"user disabled" }),200
        
    elif status == 'enabled':
        uc.Inactive('NO')
        u.Apply(uc)
        u.Commit()
        return jsonify({"errorStatus":"N" , "result" :"user enabled"}),200
        
    else:
        return jsonify({"errorStatus":"Y" , "result" :"invalid status"}),200



...

  EnableDisableUserAPIMain
"""--------------------------------------------------------------------------------------------------
MODULE:
    CIFSyncAPIMain : Main module for ATS

DESCRIPTION: This module uses gevent to run the webserver in start method.
             The start never returns and hence work and stop functions are not called.
-------------------------------------------------------------------------------------------------------"""
from gevent.pywsgi import WSGIServer
import EnableDisableUser


def server_routine():
    """
    This function starts the gevent WSGI
    :return: None
    """
    try:
        #deal_posting_config = FDealPostingUtils.Parameters('FDealPostingConfig')
        #key_file = getattr(deal_posting_config, 'KeyFile', None)
        #server_port = getattr(deal_posting_config, 'ServerPort', None)
        #cert_file = getattr(deal_posting_config, 'CertificateFile', None)

        bind = ('0.0.0.0', 8002)
        app = EnableDisableUser.app
        #g_server = WSGIServer(bind, app, keyfile=key_file, certfile=cert_file)
        g_server = WSGIServer(bind, app)
        print('Started webserver.', g_server)
        g_server.serve_forever()
    except Exception as err:
        print(err)
        return False


def start():
    """ ATS start """
    try:
        server_routine()
    except Exception as err:
        print(err)

...

  registerUser
"""----------------------------------------------------------------------------------------
MODULE:
    registerUser
    
DESCRIPTION: This module provide function to Register User or Update User then return the value of data in dictionary which will be use to know is user registered or updated or failed

AUTHOR: Gregorius Vito
------------------------------------------------------------------------------------------"""
import acm
import ParametersReader
from flask import Flask
from flask import jsonify
from flask import request
from flask import abort
from flask_httpauth import HTTPBasicAuth
from werkzeug.security import generate_password_hash, check_password_hash
import json
import re

app = Flask(__name__)
auth = HTTPBasicAuth()

EDParams  = ParametersReader.get_params('EDParams')

auth_username = EDParams["Username"]
auth_password = EDParams["Password"]

#User authetification when IAM hit NTCS
users = {
    auth_username: generate_password_hash(auth_password),
}



def check(email):
    """-----------------------------------------------------------------------------------------
    This function check email valid or not valid
    :param email: string of email
    :return bool
    -----------------------------------------------------------------------------------------"""
    regex = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
    
    if (re.fullmatch(regex, email)):
        return True
    else:
        return False
    

@auth.verify_password
def verify_password(username, password):
    """-----------------------------------------------------------------------------------------
    This function to Authectification user
    :param username: string of username
    :param password: string of password
    :return string
    -----------------------------------------------------------------------------------------"""
    if username in users and check_password_hash(users.get(username), password):
        return username

#Authectification user 
@app.route('/api/v1/user/registerupdate', methods=['POST'])
@auth.login_required(optional = True) #Authectification user
def registerUpdateUser():
    """-----------------------------------------------------------------------------------------
    This function to register user and update user based on action code
    Logic:
        if actionCode =U, then update user
        if actionCode =C, then Register or Create user
    :return dict 
    -----------------------------------------------------------------------------------------"""
    #Authectification user
    if auth.current_user() == None :
        return jsonify({"errorStatus":"Y" , "result" :"unauthorized"}),401
    
    #Load request data from IAM
    record = json.loads(request.data)
    
    #Assign value to variable
    try:
        actionCode = record["actionCode"] #
        username = record["UserID"] #alpnum
        role = record["Role"]
        nip = record["NIP"] #alpnum
        email = record["Email"] 
        contact = record["MobileNumber"]#number
        directorate = record["Directorate"]
        group = record["Group"]
        position = record["Position"]
        section = record["Section"]
        subarea = record["Subarea"]
        subareadesc = record["SubareaDesc"]
        groupFA = record["groupFA"] #
        department = record["Department"]
    except:
        return jsonify({"errorStatus":"Y" , "result" :"invalid format"}),503
    
    checkgroupFA = acm.FUserGroup[groupFA]
    if checkgroupFA == None :
        return jsonify({"errorStatus":"Y" , "result" :"invalid groupFA"}),200
    
    checkusername = username.isalnum()
    if checkusername == False :
        return jsonify({"errorStatus":"Y" , "result" :"invalid username format"}),200
    
    #Assign email to variable and check email format
    checkemail = check(email)
    if checkemail == False :
        return jsonify({"errorStatus":"Y" , "result" :"invalid email format"}),200
    
    #check nip format is numeric
    checknip = nip.isalnum()
    if checknip == False :
        return jsonify({"errorStatus":"Y" , "result" :"invalid nip format"}),200
    
    #check contact format is numeric    
    checkcontact = contact.isnumeric()
    if checkcontact == False :
        return jsonify({"errorStatus":"Y" , "result" :"invalid contact format"}),200
        
    u = acm.FUser[username]
    
    #actionCode = 'C' for Create User/ Register User
    if actionCode == 'C': 
        
        #Check if user in DB or not
        if not (u == None) :
            return jsonify({"errorStatus":"Y" , "result" :"user "+username+" already exist"}),200
            
        #Check if mandatory field not empty   
        else:
            u = acm.FUser()
            u.Name(username) #UserID / user_name <!Mandatory!>
            u.FullName(nip) #NIP / Description <!Mandatory!>
            u.Email(email) #Email / email
            u.AddInfoValue('Contact', contact) #Mobile Number / Add Info - Contact
            u.AddInfoValue('Role', role)
            u.AddInfoValue('Directorate', directorate) #Directorate / Add Info - Directorate
            u.AddInfoValue('Group', group) #Group / Add Info - Group
            u.AddInfoValue('Department', department) #Department / Add Info - Department
            u.AddInfoValue('Position', position) #Position / Add Info - Position
            u.AddInfoValue('Section', section) #Section / Add Info - Section
            u.AddInfoValue('Subarea', subarea) #Branch Code / Add Info - BCode
            u.AddInfoValue('SubareaDesc', subareadesc) #Branch Name / Add Info - BName
            u.UserGroup(groupFA) #Group_FA / Group <!Mandatory!>
            u.Commit()
            return jsonify({"errorStatus":"N" , "result" :"user created"}),200  
    
    #actionCode = 'U' for Update User
    elif actionCode == 'U':
    
        #Check if user in database or not
        if u == None:
            return jsonify({"errorStatus":"Y" , "result" :"user "+username+" not found"}),200
        
        #Check if mandatory field not empty 
        else:
        
            if not nip ==''or nip == None:
                u.FullName(nip) 
                
            if not email =='' or email == None:
                u.Email(email) 
            
            if not contact =='' or contact == None:
                u.AddInfoValue('Contact', contact) 
            
            if not role =='' or role == None:
                u.AddInfoValue('Role', role)
                
            if not directorate =='' or directorate == None:
                u.AddInfoValue('Directorate', directorate) 
            
            if not group =='' or group == None:
                u.AddInfoValue('Group', group) 
            
            if not department =='' or department == None:
                u.AddInfoValue('Department', department) 
            
            if not position =='' or position == None:
                u.AddInfoValue('Position', position) 
                
            if not section =='' or section == None:
                u.AddInfoValue('Section', section) 
            
            if not subarea =='' or subarea == None:
                u.AddInfoValue('Subarea', subarea) 
            
            if not subareadesc =='' or subareadesc == None:
                u.AddInfoValue('SubareaDesc', subareadesc) 
            
            if not groupFA =='' or groupFA == None:
                u.UserGroup(groupFA)
            u.Commit()
            return jsonify({"errorStatus":"N" , "result" :"user updated"}),200
            
    else:
        return jsonify({"errorStatus":"Y" , "result" :"invalid action code"}),200

...

  registerUserAPIMain
"""--------------------------------------------------------------------------------------------------
MODULE:
    CIFSyncAPIMain : Main module for ATS

DESCRIPTION: This module uses gevent to run the webserver in start method.
             The start never returns and hence work and stop functions are not called.
-------------------------------------------------------------------------------------------------------"""
from gevent.pywsgi import WSGIServer
import registerUser


def server_routine():
    """
    This function starts the gevent WSGI
    :return: None
    """
    try:
        #deal_posting_config = FDealPostingUtils.Parameters('FDealPostingConfig')
        #key_file = getattr(deal_posting_config, 'KeyFile', None)
        #server_port = getattr(deal_posting_config, 'ServerPort', None)
        #cert_file = getattr(deal_posting_config, 'CertificateFile', None)

        bind = ('0.0.0.0', 8001)
        app = registerUser.app
        #g_server = WSGIServer(bind, app, keyfile=key_file, certfile=cert_file)
        g_server = WSGIServer(bind, app)
        print('Started webserver.', g_server)
        g_server.serve_forever()
    except Exception as err:
        print(err)
        return False


def start():
    """ ATS start """
    try:
        server_routine()
    except Exception as err:
        print(err)

...

}

