#
# Front Arena exported extension module.
# source          ""
# timestamp (utc) "2024-10-13 04:14:44.5"
# ***** DO NOT EDIT! *****
#
name        "PS_CCR"
description "$Id$"

groups {
}

decls[FExtensionAttribute] {
}

clx FBasketRepo [FExtensionAttribute] {
  creditLossAllowance = shunt(object.AdditionalInfo.CreditLossAllowance, 
  nil->ccrZero, 
  default->denominatedvalue(object.AdditionalInfo.CreditLossAllowance, currency, , ));
}

clx FObject [FExtensionAttribute] {
  ccrZero = denominatedvalue(0.0, displayCurrency, nil, nil);
}

decls[FPythonCode] {
}

clx FObject [FPythonCode] {
  CreditRiskCustomOverrides

import acm

from FLogger import FLogger
logger = FLogger(name=__name__,level=3,logToPrime=True)
log_levl_dict = {'INFO' : 1, 'DEBUG' : 2, 'WARN' : 3, 'ERROR' : 4}

"""
    2023 08 15 richard.milford@fisglobal.com
    extended Custom_PositionNotionalScaling for insturment type 'Market Linked Deposit Deal', so as to cater for RRAO       
        the notional amount on the MMLD FX becomes the domestic leg on the underlying FX Option
        however, the extension attribute notionalFxOption may or may not return an exchange rate in the form of CCY_Domestic/IDR
        
        .In some cases the return is 1.00; i.e. the function ccrNotionalAmount will return a notional denominated in the foreign currency
        Hence the logic below; will identify if the return of ccrUnitNotionalAmount is equal to "1.00" in which case it is known that
        the notional returned by this hook needs to first be translated into the foreign currency amount (from the domestic currency amount)
        
        Domestic currency = 2nd currency on the Option UI (currency on the right)
        Foreign currency = 1st currency on the Option UI (currency on the left)
        
        notionalFxOption will be in domesticCurrency
        hence need to translate the notional from domesticCurrency to foreignCurrency, always.
"""

#-------------------------------------------------------------------------
def Custom_FXNotionalCalculation( fxRateInstrument ):
    """
    Add logic for determining a notional calculation to be applied for an FX Cash position.
    Return type: Callable object that returns a denominatedvalue and takes two denominatedvalues as 
    input parameters. For example, a function having the following definition could be returned
    
        def CustomNotionalCalculation( amount1, amount2 ):
            Some implementation...
            
    Return None to fallback to default implementation.
    """    
    return None

#-------------------------------------------------------------------------
def Custom_PositionNotionalScaling( instrument, positionQuantity, strikes):
    """
    Add logic for calculating notional scaling for a position.
    Return type: double
    
    Return None to fallback to default value (positionQuantity).
    """
    
    if instrument.AdditionalInfo().StructureType() == 'Market Linked Deposit RAFx': 
        return instrument.AdditionalInfo().Sp_LeverageNotional() * strikes
    
    if getattr(instrument.AdditionalInfo(),'StructureType')() == 'Market Linked Deposit Deal':
        logger.DLOG("instrument.name strikes %s %s " %(instrument.Name(),strikes))
        logger.DLOG("instrument.name Sp_LeverageNotional %s %s " %(instrument.Name(),instrument.AdditionalInfo().Sp_LeverageNotional()))
            
        return instrument.AdditionalInfo().Sp_LeverageNotional()
        
    return None
    

...

  FRiskFactorExtractionUtils

import builtins as exceptions
import math
import itertools
import os
import FRiskFactorFileProcessing
import FFileUtils

import acm

import FLogger
logger = FLogger.FLogger.GetLogger('FARiskFactorExtraction')

from datetime import datetime, date, timedelta

risk_factor_is_arithmetic = acm.GetFunction("riskFactorIsArithmetic", 1)

NEWLINE_TOKEN = "\n"

class RiskFactorDynamicsEnum(object):
    """
    Enum describing the risk factor process dynamics.
    """
    GEOMETRIC = 10
    ARITHMETIC = 20

EPS = 0.00000005

risk_factor_type_dynamics_mapping = {
    'Benchmark Price' : RiskFactorDynamicsEnum.ARITHMETIC,
    'Benchmark Volatility' : RiskFactorDynamicsEnum.ARITHMETIC,
    
    'Commodity': RiskFactorDynamicsEnum.GEOMETRIC,
    'Dividend' : RiskFactorDynamicsEnum.GEOMETRIC,
    'Equity': RiskFactorDynamicsEnum.GEOMETRIC,
    'FX': RiskFactorDynamicsEnum.GEOMETRIC,
    
    'Inflation Benchmark Price' : RiskFactorDynamicsEnum.ARITHMETIC,
    'Inflation Rate' : RiskFactorDynamicsEnum.ARITHMETIC,
    'Equity Repo Rate' : RiskFactorDynamicsEnum.ARITHMETIC,
    
    'Par CDS Rate' :  RiskFactorDynamicsEnum.ARITHMETIC,
    'Stored Instrument Spread' : RiskFactorDynamicsEnum.ARITHMETIC,
    'Volatility Skew Parameters (SVI)' : RiskFactorDynamicsEnum.GEOMETRIC,
    'Volatility ATM (SVI)' : RiskFactorDynamicsEnum.ARITHMETIC,
    
    'Zero Coupon' : RiskFactorDynamicsEnum.ARITHMETIC,
    'Volatility': RiskFactorDynamicsEnum.ARITHMETIC
}

def construct_risk_factor_instance_dict(setup):
    external_id_to_instance_dictionary = {}
    for collection in setup.RiskFactorCollections():
        for instance in collection.RiskFactorInstances():
            ext_id = instance.AdditionalInfo().External_Id() 
            if ext_id and not ext_id in external_id_to_instance_dictionary:
                external_id_to_instance_dictionary[ext_id] = instance
    
    return external_id_to_instance_dictionary 

def risk_factor_dynamics_from_instance(rf_instance):
        collection = rf_instance.RiskFactorCollection()
        type = collection.RiskFactorType()
        try:
            dynamics = risk_factor_type_dynamics_mapping[type]
        except:
            err_msg = "No dynamic type set for risk factor collection: \'%s\', with risk factor type: %s" %(rf_instance.RiskFactorCollection().DisplayName(), rf_instance.RiskFactorCollection().RiskFactorType())
            raise RiskFactorMappingError(err_msg)
        return dynamics

def risk_factor_dynamics_mapper_from_risk_factor_setup(external_id, setup, ext_id_to_instance_dict):
    try:
        rf_instance = ext_id_to_instance_dict[external_id]
    except:
        rf_instance = None 
        
    if rf_instance:
        return risk_factor_dynamics_from_instance(rf_instance)
    return None

class RiskFactorMappingError(exceptions.Exception):
    pass

class SourceDataError(exceptions.Exception):
    pass
    
class SourceDataOutOfRange(SourceDataError):
    pass
    
class SourceDataInvalidValueError(SourceDataError):
    pass
    
def is_zero(x):
    """Do not want to test x == 0.0 (float precision)."""
    return abs(x) < EPS
    
def validated_value(x, rf_dynamics):
    """Do not accept degenerate values in the scenario."""
    x = float(x)
    if (math.isnan(x) or 
        (is_zero(x) and rf_dynamics == RiskFactorDynamicsEnum.GEOMETRIC)):
        raise SourceDataInvalidValueError("'%s' is not a valid value" % x)
    return x
    
def extract_value_on_date(ext_id, date, input_data, labels_token, rf_dynamics):
    """
    Main data extraction function for historical time series data.
    Throws SourceDataError if data is not available on ext_id*date
    """
    dates = input_data[labels_token]
    try:
        vidx = dates.index(date)
    except ValueError:
        err_msg = "Date '%s' is out of range" % date
        raise SourceDataOutOfRange(err_msg)
    if vidx is None:
        err_msg = "No risk factor data on %s" % date
        raise SourceDataError(err_msg)
    try:
        vals = input_data[ext_id]
    except KeyError:
        err_msg = "No risk factor data for '%s'" % ext_id
        raise SourceDataError(err_msg)
    try:
        return validated_value(vals[vidx], rf_dynamics)
    except IndexError:
        err_msg = "%s is out of range for extid '%s'" % (date, ext_id)
        raise SourceDataOutOfRange(err_msg)
         
def read_risk_factor_specs(extern_id, spec_header):
    """
    Reads the corresponding risk factor specification for the
    external id and the risk factor specification header.
    """
    constraint = "name = '%s' and rfspec = '%s'" % \
                 (extern_id, spec_header.Name())
    rf_specs = acm.FRiskFactorSpec.Select(constraint)\
                                  .AsArray()\
                                  .SortByProperty("Rfg")
    return rf_specs
         
def first_risk_factor_from_ext_id(ext_id, spec_header):
    specs = read_risk_factor_specs(ext_id, spec_header)
    if len(specs) == 0:
        spec_header_name = spec_header.Name()
        err_msg = "%s does not exist in %s" % (ext_id, spec_header_name)
        raise RiskFactorMappingError(err_msg)
    else:
        return specs[0]
   
def risk_factor_dynamics_from_ext_id(ext_id, spec_header, _ = None):
    rf = first_risk_factor_from_ext_id(ext_id, spec_header)
    if risk_factor_is_arithmetic(rf):
        return RiskFactorDynamicsEnum.ARITHMETIC
    else:
        return RiskFactorDynamicsEnum.GEOMETRIC

def get_output_filename_simple(dir_path, filename, overwrite=False, extension=".txt"):
    if hasattr(dir_path, "AsString"):
        dir_path = dir_path.AsString()
    if hasattr(filename, "AsString"):
        filename = filename.AsString()
    dir_path = FFileUtils.expandEnvironmentVar(dir_path)
    create_path(dir_path)
    return get_file_name(dir_path, overwrite, filename, extension)

def is_date(strdate):
    try:
        return acm.Time().IsValidDateTime(strdate)
    except RuntimeError:
        return False

def adjust_date(date, base_date, calendar, bdmethod):
    strdate = str(date).strip()
    if strdate.upper() in ["TODAY", "NOW"]:
        day = acm.Time.DateToday()
    elif is_date(strdate):
        day = strdate
    else:
        try:
            day = acm.Time().PeriodSymbolToRebasedDate(strdate, base_date)
            if not day:
                raise ValueError("")
        except:
            raise ValueError("Date must be either a date,"
                             " 'TODAY' or a dateperiod, not %s" % strdate)
    return calendar.ModifyDate(None, None, day, bdmethod)

def create_path(outputDir):
    if not os.path.exists(outputDir):
        try:
            os.makedirs(outputDir, exist_ok=True)
            logger.LOG('Created report output directory:' + outputDir)
        except FileExistsError:
            pass
        except Exception as e:
            logger.ELOG(type(e))
            msg = 'Failed to create report directory:' + outputDir
            logger.ELOG( msg )
            raise
            
def get_file_name(outputDir, overwrite, fileName, ext):
    for i in range(1,100):
        if i == 1:
            numbering = ''
        else:
            numbering = '_' + str(i)
        testFile = os.path.join(outputDir, fileName + numbering + ext)
        if overwrite or not os.path.exists(testFile):
            return testFile
        else:
            msg = 'File already exists:' + testFile
            logger.ELOG(msg)
            raise IOError(msg)
    return 0
    
def is_date_period(date):
    try:
        return bool(acm.Time.DatePeriodToString(date))
    except TypeError:
        return False

def convert_to_date(dateString):
    date = dateString
    today = acm.Time.DateToday()
    if is_date_period(dateString):
        date = acm.Time.DateAdjustPeriod(today, dateString)
    return date

def dates_between_dates(startDate, endDate):
    startDate = datetime.strptime(startDate, '%Y-%m-%d')
    endDate = datetime.strptime(endDate, '%Y-%m-%d')
    dateArray = [str((endDate - timedelta(days = x)).date()) for x in range((endDate- startDate).days + 1)]
    return dateArray

def calendar_adjusted_date_range(date_range, calendar):
    return [date for date in date_range if not calendar.IsNonBankingDay(None, None, date)]

...

  SACCRCustomOverrides
import acm

#-------------------------------------------------------------------------
# Custom Overrides for SA-CCR
#-------------------------------------------------------------------------
def Custom_MarginPeriodOfRiskCreditBalance( creditBalance, collateralAgreement ):
    """
    Add logic for SA-CCR margin period of risk.
    Return type: double (margin period of risk in years)
    Return None to fallback to default implementation.
    """    
    return None

#-------------------------------------------------------------------------
def Custom_MarginPeriodOfRiskMasterAgreement( collateralAnnex ):
    """
    Add logic for SA-CCR margin period of risk.
    Return type: double (margin period of risk in years)
    Return None to fallback to default implementation.
    """    
    return None

#-------------------------------------------------------------------------
def Custom_RiskDrivers( instrument, positionQuantity ):
    """
    Add logic for determining asset class, hedging set, hedging subset and position in risk driver.
    Return type: FDictionary (having keys 'Asset Class', 'Hedging Set', 'Hedging Subset', 'LongOrShort' )
    Return None to fallback to default implementation.
    """ 
    if instrument.InsType() == 'Option' and instrument.Underlying().InsType() == 'Bond':
        riskDriverData = acm.FDictionary()
        
        riskDriverData['Asset Class'] = 'Interest Rates'
        riskDriverData['Hedging Set'] = instrument.Currency().Name()
        
        if instrument.SACCRMaturity() < 1: riskDriverData['Hedging Subset'] = "One Year or Less"
        if instrument.SACCRMaturity() >= 1 and instrument.SACCRMaturity() <= 5: riskDriverData['Hedging Subset'] = "Over One Year to Five Years"
        if instrument.SACCRMaturity() > 5: riskDriverData['Hedging Subset'] = "Over Five Years"
        
        if positionQuantity >= 0: riskDriverData['LongOrShort'] = 'Long'
        if positionQuantity < 0: riskDriverData['LongOrShort'] = 'Short'
        
        return riskDriverData
    
    if instrument.InsType() != 'BasketRepo/Reverse':
        return None 
        
    riskDriverData = acm.FDictionary()
    
    riskDriverData['Asset Class'] = instrument.InsType()
    riskDriverData['Hedging Set'] = None
    riskDriverData['Hedging Subset'] = None
    riskDriverData['LongOrShort'] = None
    riskDriverData['Type'] = None
    
    return riskDriverData

...

}

