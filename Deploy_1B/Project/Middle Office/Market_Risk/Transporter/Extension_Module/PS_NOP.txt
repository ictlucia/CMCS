#
# Front Arena exported extension module.
# source          ""
# timestamp (utc) "2024-03-08 06:58:10.6"
# ***** DO NOT EDIT! *****
#
name        "PS_NOP"
description ""

groups {
}

decls[FColumnDefinition] {
  "Final NOP Portfolio (Notional)" ( "sheet columns.portfoliosheet" ) "";
  "Final NOP Portfolio(old)" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "Final NOP Portfolio(PV)" ( "sheet columns.portfoliosheet" ) "";
  "Final NOP USD" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
}

clx FTradingSheet [FColumnDefinition] {
  Final NOP Portfolio (Notional) =
  BuildForCashRows=True
  Description=Final NOP after aggregating long and short positions at portfolio level
  ExtensionAttribute=finalNOP2
  Format=Imprecise
  GroupLabel=NOP
  InheritsFrom=Portfolio Profit and Loss Base
  LabelList=Final NOP Portfolio(Notional);Net Open Position Portfolio(Notional)
  Name=Final NOP Portfolio(Notional)


  Final NOP Portfolio(old) =
  BuildForCashRows=True
  Description=Final NOP after aggregating long and short positions at portfolio level
  ExtensionAttribute=finalNOP3
  Format=Imprecise
  GroupLabel=NOP
  InheritsFrom=Portfolio Profit and Loss Base
  LabelList=Final NOP Portfolio(old);Net Open Position Portfolio (old)
  Name=Final NOP Portfolio (old)


  Final NOP Portfolio(PV) =
  BuildForCashRows=True
  Description=Final NOP after aggregating long and short positions at portfolio level
  ExtensionAttribute=finalNOP1
  Format=Imprecise
  GroupLabel=NOP
  InheritsFrom=Portfolio Profit and Loss Base
  LabelList=Final NOP Portfolio(PV);Net Open Position Portfolio (PV)
  Name=Final NOP Portfolio (PV)


  Final NOP USD =
  BuildForCashRows=True
  Description=Final NOP in USD after aggregating long and short positions
  ExtensionAttribute=fxNOPLong3
  Format=Imprecise
  GroupLabel=NOP
  LabelList=Final NOP USD;Net Open Position (USD)
  Name=Final NOP USD


}

decls[FExtensionAttribute] {
}

clx FInstrumentAndTrades [FExtensionAttribute] {
  bondNoPTrades = flattenAndRemoveNil(tradesInPosition :* "switch(includeTradeStatus, true->object, false->nil)");
  currSwapNominal3Final = sumOf(convertToCurrency(children :* "currSwapNominal3Final", profitAndLossEndFXRates, displayCurrency, filterUnit));
  nopOtherInstype1 = sumOf(convertToCurrency(children :* "nopOtherInstype1", profitAndLossEndFXRates, displayCurrency, filterUnit));
  nopOtherInstype2 = sumOf(convertToCurrency(children :* "nopOtherInstype2", profitAndLossEndFXRates, displayCurrency, filterUnit));
  nopOtherInstype3 = sumOf(convertToCurrency(children :* "nopOtherInstype3", profitAndLossEndFXRates, displayCurrency, filterUnit));
}

clx FMultiInstrumentAndTrades [FExtensionAttribute] {
  finalNOP1 = (max(abs(fxNOPLong1), abs(fxNOPShort1))) + nopOtherInstype1;
  finalNOP2 = (max(abs(fxNOPLong2), abs(fxNOPShort2))) + nopOtherInstype2;
  finalNOP3 = (max(abs(fxNOPLong3), abs(fxNOPShort3))) + nopOtherInstype3;
  fxNOP1 = sumOf(children :* "fxNOP1");
  fxNOP2 = sumOf(children :* "fxNOP2");
  fxNOP3 = sumOf(children :* "fxNOP3");
  fxNOPFilterIDR1 = switch(fxNOP1 == denominatedvalue(0, displayCurrency, , ), 
  true->denominatedvalue(0, displayCurrency, , ), 
  false->fxNOP1.Filter(simpleAndQuery("FDenominatedValue", ["Unit"], ["NOT_EQUAL"], ["IDR"])));
  fxNOPFilterIDR2 = switch(fxNOP2 == denominatedvalue(0, displayCurrency, , ), 
  true->denominatedvalue(0, displayCurrency, , ), 
  false->fxNOP2.Filter(simpleAndQuery("FDenominatedValue", ["Unit"], ["NOT_EQUAL"], ["IDR"])));
  fxNOPFilterIDR3 = switch(fxNOP3 == denominatedvalue(0, displayCurrency, , ), 
  true->denominatedvalue(0, displayCurrency, , ), 
  false->fxNOP3.Filter(simpleAndQuery("FDenominatedValue", ["Unit"], ["NOT_EQUAL"], ["IDR"])));
  fxNOPLong1 = switch(fxNOPFilterIDR1 == denominatedvalue(0, displayCurrency, , ), 
  true->denominatedvalue(0, displayCurrency, , ), 
  false->sumOf(convertToCurrency(fxNOPFilterIDR1.Filter(simpleAndQuery("FDenominatedValue", ["Number"], ["GREATER"], [0])), markToMarketValueFxRates, displayCurrency, filterUnit)));
  fxNOPLong2 = switch(fxNOPFilterIDR2 == denominatedvalue(0, displayCurrency, , ), 
  true->denominatedvalue(0, displayCurrency, , ), 
  false->sumOf(convertToCurrency(fxNOPFilterIDR2.Filter(simpleAndQuery("FDenominatedValue", ["Number"], ["GREATER"], [0])), markToMarketValueFxRates, displayCurrency, filterUnit)));
  fxNOPLong3 = switch(fxNOPFilterIDR3 == denominatedvalue(0, displayCurrency, , ), 
  true->denominatedvalue(0, displayCurrency, , ), 
  false->sumOf(convertToCurrency(fxNOPFilterIDR3.Filter(simpleAndQuery("FDenominatedValue", ["Number"], ["GREATER"], [0])), markToMarketValueFxRates, displayCurrency, filterUnit)));
  fxNOPShort1 = switch(fxNOPFilterIDR1 == denominatedvalue(0, displayCurrency, , ), 
  true->denominatedvalue(0, displayCurrency, , ), 
  false->sumOf(convertToCurrency(fxNOPFilterIDR1.Filter(simpleAndQuery("FDenominatedValue", ["Number"], ["LESS_EQUAL"], [0])), markToMarketValueFxRates, displayCurrency, filterUnit)));
  fxNOPShort2 = switch(fxNOPFilterIDR2 == denominatedvalue(0, displayCurrency, , ), 
  true->denominatedvalue(0, displayCurrency, , ), 
  false->sumOf(convertToCurrency(fxNOPFilterIDR2.Filter(simpleAndQuery("FDenominatedValue", ["Number"], ["LESS_EQUAL"], [0])), markToMarketValueFxRates, displayCurrency, filterUnit)));
  fxNOPShort3 = switch(fxNOPFilterIDR3 == denominatedvalue(0, displayCurrency, , ), 
  true->denominatedvalue(0, displayCurrency, , ), 
  false->sumOf(convertToCurrency(fxNOPFilterIDR3.Filter(simpleAndQuery("FDenominatedValue", ["Number"], ["LESS_EQUAL"], [0])), markToMarketValueFxRates, displayCurrency, filterUnit)));
}

clx FSingleInstrumentAndTrades [FExtensionAttribute] {
  bondMtMPortfolioType1 = switch((tradesInPosition[0]) :* "object.Portfolio.TypeChlItem", 
  "FVTPL"->convertToCurrency(denominatedvalue(instrument :* "abs(originalPremiumAccounting)" [positionObject, displayCurrency, profitAndLossEndDate], displayCurrency, nil, nil), profitAndLossEndFXRates, displayCurrency), 
  "FVOCI"->riskPositionDisplay + sumOf(convertToCurrency((bondNoPTrades :* "originalPremiumDiscount"), profitAndLossEndFXRates, displayCurrency)) + deprecRPLColumn + pureRPLColumn, 
  "Amortised Cost"->riskPositionDisplay + sumOf(convertToCurrency((bondNoPTrades :* "originalPremiumDiscount"), profitAndLossEndFXRates, displayCurrency)) + deprecRPLColumn + pureRPLColumn, 
  default->denominatedvalue(instrument :* "abs(originalPremiumAccounting)" [positionObject, displayCurrency, profitAndLossEndDate], displayCurrency, nil, nil));
  bondMtMPortfolioType2 = switch((tradesInPosition[0]) :* "object.Portfolio.TypeChlItem", 
  "FVTPL"->markToMarketPeriodValue, 
  "FVOCI"->markToMarketPeriodValue, 
  "Amortised Cost"->faceNominalDisplay, 
  default->markToMarketPeriodValue);
  bondOption = shunt(instrument.UnderlyingType, 
  "Bond"->priceDelta, 
  default->denominatedvalue(0, displayCurrency, , ));
  currSwapNominal3 = switch((instrument.FirstPayLeg.Currency == "USD"), 
  true->instrument:ccrCurrSwapPayNominal * riskPosition * (-1), 
  false->switch((instrument.FirstReceiveLeg.Currency == "USD"), 
    true->instrument:ccrCurrSwapRecNominal * riskPosition, 
    default->denominatedvalue(0, displayCurrency, , )), 
  default->denominatedvalue(0, displayCurrency, , ));
  currSwapNominal3Final = shunt(instrument.InsType, 
  "CurrSwap"->shunt((instrument.MainLeg.NominalAtStart) or (instrument.MainLeg.NominalAtEnd), 
    true->shunt((instrument.MainLeg.NominalAtStart) and (instrument.MainLeg.NominalAtEnd), 
      true->denominatedvalue(0, displayCurrency, , ), 
      false->currSwapNominal3, 
      default->denominatedvalue(0, displayCurrency, , )), 
    default->denominatedvalue(0, displayCurrency, , )), 
  default->denominatedvalue(0, displayCurrency, , ));
  futureForwardNOP1 = shunt(instrument.UnderlyingType, 
  "Bond"->markToMarketPeriodValue, 
  "Curr"->markToMarketPeriodValue, 
  default->denominatedvalue(0, displayCurrency, , ));
  futureForwardNOP2 = shunt(instrument.UnderlyingType, 
  "Bond"->markToMarketPeriodValue, 
  default->denominatedvalue(0, displayCurrency, , ));
  futureForwardNOP3 = shunt(instrument.UnderlyingType, 
  "Bond"->denominatedvalue(riskPosition, instrument.Currency, , ), 
  default->denominatedvalue(0, displayCurrency, , ));
  fxNOP1 = switch(instrument.InsType, 
  "Option"->projectedFXOption, 
  default->denominatedvalue(0, displayCurrency, , ));
  fxNOP2 = switch(instrument.InsType, 
  "Fx Rate"->projectedFXNotional, 
  "Future/Forward"->projectedNDFNotional, 
  "Option"->projectedFXOption, 
  default->denominatedvalue(0, displayCurrency, , ));
  fxNOP3 = switch(instrument.InsType, 
  "Fx Rate"->projectedFXNotional, 
  "Future/Forward"->projectedNDFNotional, 
  default->denominatedvalue(0, displayCurrency, , ));
  mbsOutstandingNotional2 = select((tradesInPosition[0]) :* "object.Portfolio.TypeChlItem", 
  "FVTPL"->markToMarketPeriodValue, 
  "FVOCI"->markToMarketPeriodValue, 
  "Amortised Cost"->endNominalEnd, 
  default->endNominalEnd);
  nopOtherInstype1 = select(instrument.InsType, 
  "Future/Forward"->futureForwardNOP1, 
  "Fx Rate"->markToMarketPeriodValue, 
  "Bond"->bondMtMPortfolioType1, 
  "Swap"->markToMarketPeriodValue, 
  "CurrSwap"->markToMarketPeriodValue, 
  "FRN"->bondMtMPortfolioType1, 
  "Bill"->bondMtMPortfolioType1, 
  "MBS/ABS"->bondMtMPortfolioType1, 
  "FRA"->markToMarketPeriodValue, 
  "Fund"->abs(cash), 
  "Deposit"->riskPositionDisplay, 
  "Option"->bondOption, 
  "BasketRepo/Reverse"->riskPositionDisplay, 
  default->denominatedvalue(0, displayCurrency, , ));
  nopOtherInstype2 = select(instrument.InsType, 
  "Future/Forward"->futureForwardNOP2, 
  "Bond"->bondMtMPortfolioType2, 
  "Swap"->markToMarketPeriodValue, 
  "CurrSwap"->markToMarketPeriodValue, 
  "FRN"->bondMtMPortfolioType2, 
  "Bill"->bondMtMPortfolioType2, 
  "MBS/ABS"->mbsOutstandingNotional2, 
  "FRA"->markToMarketPeriodValue, 
  "Fund"->markToMarketPeriodValue, 
  "Option"->bondOption, 
  default->denominatedvalue(0, displayCurrency, , ));
  nopOtherInstype3 = select(instrument.InsType, 
  "Future/Forward"->futureForwardNOP3, 
  "Bond"->riskPositionOrZero, 
  "Swap"->swapNominal3, 
  "CurrSwap"->currSwapNominal3Final, 
  "FRN"->riskPositionOrZero, 
  "Bill"->riskPositionOrZero, 
  "MBS/ABS"->endNominalEnd, 
  "FRA"->riskPositionOrZero, 
  "Fund"->convertToCurrency(denominatedvalue(riskPositionDisplay, instrument.Currency, , ), profitAndLossEndFXRates, displayCurrency), 
  default->denominatedvalue(0, displayCurrency, , ));
  projectedFXNotional = (sumOf(object :* "projectedRiskflowsCurrencyPair" [currenciesForVectorColumn := theoreticalValueCurrencies, useFxBaseCurrency := false]));
  projectedFXOption = (sumOf(object :* "priceDeltaCurrencyVector" [currenciesForVectorColumn := theoreticalValueCurrencies, useFxBaseCurrency := false]));
  projectedNDFNotional = select(instrument.UnderlyingType, 
  "Curr"->(sumOf(object :* "projectedRiskflowsCurrencyPair" [currenciesForVectorColumn := theoreticalValueCurrencies, useFxBaseCurrency := false])), 
  default->denominatedvalue(0, displayCurrency, , ));
  riskPositionOrZero = shunt(riskPositionDisplay == 0, 
  true->denominatedvalue(0, displayCurrency, , ), 
  default->riskPositionDisplay);
  swapNominal3 = switch(instrument.MainLeg.LegType, 
  "Fixed"->(-riskPositionOrZero), 
  "Float"->riskPositionOrZero, 
  default->denominatedvalue(0, displayCurrency, , ));
}

decls[FPythonCode] {
}

clx FObject [FPythonCode] {
  CustomFunctions

import acm

#*******************NOT USED*******************************
calcSpace = acm.Calculations().CreateCalculationSpace(acm.GetDefaultContext(),'FPortfolioSheet')
#FxNOPGrouper = acm.Risk().GetGrouperFromName('Currency Split')


def currencySplitPositionRows(tradesInPosition, columnID, placeHolderForRealTimeUpdate, valuationBaseDate):

    calcSpace.SimulateGlobalValue( 'Valuation Date', valuationBaseDate)
    adHocPortfolio = acm.FAdhocPortfolio(tradesInPosition)
    topNode = calcSpace.InsertItem(adHocPortfolio)
    #topNode.ApplyGrouper(FxNOPGrouper)
    topNode.Expand(True)
    calcSpace.Refresh()
    
    fxNOPvalue = calcSpace.CalculateValue(topNode, columnID)#.Number()
    
    calcSpace.RemoveGlobalSimulation('Valuation Date')
    calcSpace.Clear()
    
    return fxNOPvalue



...

}

