#
# Front Arena exported extension module.
# source          ""
# timestamp (utc) "2024-10-25 08:02:44.0"
# ***** DO NOT EDIT! *****
#
name        "ICT_CustomReportsBO"
description "$Id$"

groups {
}

decls[FColumnDefinition] {
  "AbsoluteAmountOfTrade" ( "sheet columns.journalsheet" ) "";
  "accountId" ( "sheet columns.tradesheet" ) "";
  "AccruedInterestInstrument" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "AccruedOutstandingVal" ( "sheet columns.journalsheet" ) "";
  "ACCTTYPE" ( "sheet columns.journalsheet" "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "ACCTTYPE2" ( "sheet columns.tradesheet" ) "";
  "AccumulativeOrPerTransaction" ( "sheet columns.tradesheet" ) "";
  "acquisitionAmount" ( "sheet columns.tradesheet" ) "";
  "acquisitionDetails" ( "sheet columns.tradesheet" ) "";
  "AFSQuantity" ( "sheet columns.portfoliosheet" ) "";
  "AllInRateOnReset" ( "sheet columns.moneyflowsheet" ) "";
  "AllowanceForLossesPbc" ( "sheet columns.tradesheet" ) "";
  "AmortizedAmount2" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "AmortizedAmount3" ( "sheet columns.tradesheet" ) "";
  "AmountAccumulativePerMonth" ( "sheet columns.tradesheet" ) "";
  "AmountBuyAudit" ( "sheet columns.settlementsheet" "sheet columns.tradesheet" ) "";
  "amountInIdr" ( "sheet columns.tradesheet" ) "";
  "AmountInRupiah" ( "sheet columns.tradesheet" ) "";
  "amountPurchase" ( "sheet columns.tradesheet" ) "";
  "amountSale" ( "sheet columns.tradesheet" ) "";
  "AmountSellAudit" ( "sheet columns.settlementsheet" "sheet columns.tradesheet" ) "";
  "AmountSellAudit2" ( "sheet columns.settlementsheet" "sheet columns.tradesheet" ) "";
  "AmountUsePerProduct1" ( "sheet columns.tradesheet" ) "";
  "AmountUsePerProduct2" ( "sheet columns.tradesheet" ) "";
  "ApoloCode" ( "sheet columns.tradesheet" ) "";
  "ApoloNo" ( "sheet columns.tradesheet" ) "";
  "AskPriceInsMtM" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "AskPriceInsMtM_BBIBPA" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "AtBeginningAcq" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "AtBeginningAcq2" ( "sheet columns.portfoliosheet" ) "";
  "AtBeginningAcq2Idr" ( "sheet columns.portfoliosheet" ) "";
  "AveragePrice" ( "sheet columns.portfoliosheet" ) "";
  "balanceNTCS" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "bankPembayarLLD" ( "sheet columns.settlementsheet" ) "";
  "bankPenerimaLLD" ( "sheet columns.settlementsheet" ) "";
  "BebanBunga" ( "sheet columns.tradesheet" ) "";
  "BIDHighestHierarchy" ( "sheet columns.portfoliosheet" ) "";
  "BidPriceInsMtM" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "BidPriceInsMtM_BBIBPA" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "BIDSourceBGN" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "BIDSourceBIS4" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "BIDSourceEXCH" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "BIDSourceIBPA" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "BIDSourceMarkToModel" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "BIDSourceNAV" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "BIDSourceVAL" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "BookCostAmort" ( "sheet columns.portfoliosheet" ) "";
  "BookCostAmortIdr" ( "sheet columns.portfoliosheet" ) "";
  "BookValueInIDR" ( "sheet columns.tradesheet" ) "";
  "BookValuePbc" ( "sheet columns.tradesheet" ) "";
  "BrokerFeeIDR" ( "sheet columns.tradesheet" ) "";
  "BrokerFeeUSD" ( "sheet columns.tradesheet" ) "";
  "Bulan2" ( "sheet columns.journalsheet" "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "buyPremium" ( "sheet columns.tradesheet" ) "";
  "BuySellBank" ( "sheet columns.tradesheet" ) "";
  "BuySellCustomer" ( "sheet columns.tradesheet" ) "";
  "categoryInternalizer" ( "sheet columns.tradesheet" ) "";
  "CCYSACCT" ( "sheet columns.settlementsheet" "sheet columns.tradesheet" ) "";
  "childrenFreq" ( "sheet columns.tradesheet" ) "";
  "closedLots" ( "sheet columns.tradesheet" ) "";
  "closedLotsTrade" ( "sheet columns.tradesheet" ) "";
  "CounterPartyCountryRisk" ( "sheet columns.journalsheet" ) "";
  "CPTYNAMECOUNTRY" ( "sheet columns.tradesheet" ) "";
  "CTRSACCT" ( "sheet columns.settlementsheet" "sheet columns.tradesheet" ) "";
  "CurrBuyAudit" ( "sheet columns.confirmationsheet" "sheet columns.settlementsheet" "sheet columns.tradesheet" ) "";
  "CurrCollateral" ( "sheet columns.tradesheet" ) "";
  "currPurchase" ( "sheet columns.tradesheet" ) "";
  "currSale" ( "sheet columns.tradesheet" ) "";
  "CurrSellAudit" ( "sheet columns.confirmationsheet" "sheet columns.settlementsheet" "sheet columns.tradesheet" ) "";
  "CurrUsePerProduct1" ( "sheet columns.tradesheet" ) "";
  "CurrUsePerProduct2" ( "sheet columns.tradesheet" ) "";
  "CustomerFullNameCashFlow" ( "sheet columns.moneyflowsheet" ) "";
  "customerRank" ( "sheet columns.tradesheet" ) "";
  "dateHoldPos" ( "sheet columns.portfoliosheet" ) "";
  "DatesPosition" ( "sheet columns.journalsheet" "sheet columns.settlementsheet" ) "";
  "dateTransactionLLD" ( "sheet columns.journalsheet" "sheet columns.settlementsheet" ) "";
  "DateTransaksi" ( "sheet columns.tradesheet" ) "";
  "DaysDelays" ( "sheet columns.settlementsheet" ) "";
  "deltaMain" ( "sheet columns.tradesheet" ) "";
  "deltaMainAmountCcy" ( "sheet columns.tradesheet" ) "";
  "deltamaineqivalentinIDR" ( "sheet columns.tradesheet" ) "";
  "deltaMoney" ( "sheet columns.tradesheet" ) "";
  "deltaMoneyAmount" ( "sheet columns.tradesheet" ) "";
  "deltaMoneyEqvIDR" ( "sheet columns.tradesheet" ) "";
  "DerivativesPayables" ( "sheet columns.tradesheet" ) "";
  "DerivativesReceivables" ( "sheet columns.tradesheet" ) "";
  "Descr_acc" ( "sheet columns.journalsheet" ) "";
  "DescriptionUnderlying" ( "sheet columns.tradesheet" ) "";
  "detailTransaksiLLD" ( "sheet columns.settlementsheet" ) "";
  "differenceBetweenFairMarket" ( "sheet columns.tradesheet" ) "";
  "differenceListOfSell" ( "sheet columns.tradesheet" ) "";
  "differenceRo" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "EffectiveDate" ( "sheet columns.tradesheet" ) "";
  "effectiveDatedbY" ( "sheet columns.portfoliosheet" ) "";
  "effectiveDatedBy" ( "sheet columns.tradesheet" ) "";
  "EndDayPayment" ( "sheet columns.portfoliosheet" ) "";
  "endInterestDepo" ( "sheet columns.tradesheet" ) "";
  "EndInterestRepo" ( "sheet columns.tradesheet" ) "";
  "EndInterestRepo2" ( "sheet columns.tradesheet" ) "";
  "EodMtMYesterday" ( "sheet columns.tradesheet" ) "";
  "EquivalentAmountIDR" ( "sheet columns.journalsheet" "sheet columns.settlementsheet" "sheet columns.tradesheet" ) "";
  "EquivalentAmountIDRLastMonth" ( "sheet columns.tradesheet" ) "";
  "EquivalentAmountIDRSett" ( "sheet columns.settlementsheet" ) "";
  "EquivalentAmountIDRToday" ( "sheet columns.tradesheet" ) "";
  "FairMarketValueAfterHaircuts" ( "sheet columns.tradesheet" ) "";
  "FixingDatePay" ( "sheet columns.tradesheet" ) "";
  "FixingDateReceive" ( "sheet columns.tradesheet" ) "";
  "forexRate" ( "sheet columns.tradesheet" ) "";
  "Frequency" ( "sheet columns.settlementsheet" "sheet columns.tradesheet" ) "";
  "GainOrLossFIFO" ( "sheet columns.tradesheet" ) "";
  "GainOrLossGlno" ( "sheet columns.tradesheet" ) "";
  "GainOrLossGlnoStatus" ( "sheet columns.tradesheet" ) "";
  "GLNOAmount" ( "sheet columns.tradesheet" ) "";
  "GLNOAmount2" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "GLNOInstrument" ( "sheet columns.portfoliosheet" ) "";
  "grandTotal" ( "sheet columns.tradesheet" ) "";
  "hargJualSBI" ( "sheet columns.tradesheet" ) "";
  "Hari2" ( "sheet columns.journalsheet" "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "HoldPosBIS4" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "HoldPosCustody" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "HoldPosEuroClear" ( "sheet columns.portfoliosheet" ) "";
  "HTMQuantity" ( "sheet columns.portfoliosheet" ) "";
  "hubunganKeuanganLLD" ( "sheet columns.settlementsheet" ) "";
  "hubunganKeuanganLLD2" ( "sheet columns.journalsheet" "sheet columns.settlementsheet" ) "";
  "IdrPremium" ( "sheet columns.tradesheet" ) "";
  "informasiDokumenPendukungLLD" ( "sheet columns.journalsheet" "sheet columns.settlementsheet" ) "";
  "InputDateCustom" ( "sheet columns.tradesheet" ) "";
  "InsAmountInIdr" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "InsAmountOrgCurrency" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "InsBondPriceCollateral" ( "sheet columns.tradesheet" ) "";
  "InsBondPriceHistToday" ( "sheet columns.portfoliosheet" ) "";
  "InsBondPriceHistUpdate" ( "sheet columns.portfoliosheet" ) "";
  "InsBondPriceHistYst" ( "sheet columns.portfoliosheet" ) "";
  "InstrumentAcquisitionDate" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "instrumentNameInternalizer" ( "sheet columns.tradesheet" ) "";
  "InterestAccruedCouponDay" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "InterestAmountVal" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "InterestRateDepo" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "InterestRatePay" ( "sheet columns.tradesheet" ) "";
  "InterestRateReceive" ( "sheet columns.tradesheet" ) "";
  "InvTypeCollateral" ( "sheet columns.tradesheet" ) "";
  "JamTransaksi" ( "sheet columns.tradesheet" ) "";
  "jenisIdentifikasiPembayarLLD" ( "sheet columns.settlementsheet" ) "";
  "jenisIdentifikasiPenerimaLLD" ( "sheet columns.settlementsheet" ) "";
  "jenisRekeningLLD" ( "sheet columns.settlementsheet" ) "";
  "jenisRekeningLLD2" ( "sheet columns.journalsheet" "sheet columns.settlementsheet" ) "";
  "jenisTransaksiLLD" ( "sheet columns.settlementsheet" ) "";
  "jenisTransaksiLLD2" ( "sheet columns.journalsheet" "sheet columns.settlementsheet" ) "";
  "karakteristikProduk" ( "sheet columns.tradesheet" ) "";
  "kategoriPembayarLLD" ( "sheet columns.settlementsheet" ) "";
  "kategoriPembayarLLD2" ( "sheet columns.journalsheet" "sheet columns.settlementsheet" ) "";
  "kategoriPenerimaLLD" ( "sheet columns.settlementsheet" ) "";
  "kategoriPenerimaLLD2" ( "sheet columns.journalsheet" "sheet columns.settlementsheet" ) "";
  "kolomKosong" ( "sheet columns.confirmationsheet" "sheet columns.moneyflowsheet" "sheet columns.portfoliosheet" "sheet columns.settlementsheet" "sheet columns.tradesheet" ) "";
  "kolomKosong2" ( "sheet columns.confirmationsheet" "sheet columns.portfoliosheet" ) "";
  "komponenInstrument" ( "sheet columns.tradesheet" ) "";
  "kursEqvUsdTradeDate" ( "sheet columns.tradesheet" ) "";
  "kursEqvUsdTradeDatePerMillion" ( "sheet columns.tradesheet" ) "";
  "KursToday" ( "sheet columns.tradesheet" ) "";
  "kursTransaksiTSD" ( "sheet columns.tradesheet" ) "";
  "LastPaymentDateCoupon" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "LastTradeBeforeBaseGroup" ( "sheet columns.tradesheet" ) "";
  "LastUpdatePriceBond" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "LastUpdateTimePriceBond" ( "sheet columns.portfoliosheet" ) "";
  "localCurr" ( "sheet columns.tradesheet" ) "";
  "localCurr2" ( "sheet columns.tradesheet" ) "";
  "LowerRate" ( "sheet columns.tradesheet" ) "";
  "LowerRateSP" ( "sheet columns.tradesheet" ) "";
  "MarketPriceBondLastMonth" ( "sheet columns.portfoliosheet" ) "";
  "marketPricePurchase" ( "sheet columns.tradesheet" ) "";
  "marketRatePurchase" ( "sheet columns.tradesheet" ) "";
  "MarketValueBondLastMonth" ( "sheet columns.portfoliosheet" ) "";
  "MarketValueBondLastMonthIDR" ( "sheet columns.portfoliosheet" ) "";
  "matturityDatedBy" ( "sheet columns.tradesheet" ) "";
  "MaturityDate" ( "sheet columns.tradesheet" ) "";
  "MaturityDate2" ( "sheet columns.tradesheet" ) "";
  "MaturityDatedbY" ( "sheet columns.portfoliosheet" ) "";
  "MoneyFlowFixingDate" ( "sheet columns.moneyflowsheet" ) "";
  "MoneyFlowRate" ( "sheet columns.moneyflowsheet" ) "";
  "monthTransactionLLD" ( "sheet columns.journalsheet" "sheet columns.settlementsheet" ) "";
  "MonthValueDate" ( "sheet columns.tradesheet" ) "";
  "Movement" ( "sheet columns.journalsheet" ) "";
  "MTtag82" ( "sheet columns.confirmationsheet" ) "";
  "MTtagMaturityDate" ( "sheet columns.confirmationsheet" ) "";
  "MTtagTradeDate" ( "sheet columns.confirmationsheet" ) "";
  "MTtagValueDate" ( "sheet columns.confirmationsheet" ) "";
  "MulInsCurr" ( "sheet columns.tradesheet" ) "";
  "MulInsIsin" ( "sheet columns.tradesheet" ) "";
  "MulInsName" ( "sheet columns.tradesheet" ) "";
  "namaPembayarLLD" ( "sheet columns.settlementsheet" ) "";
  "namaPenerimaLLD" ( "sheet columns.settlementsheet" ) "";
  "negaraDebiturKrediturLLD" ( "sheet columns.journalsheet" "sheet columns.settlementsheet" "sheet columns.tradesheet" ) "";
  "NetAmountPBC" ( "sheet columns.tradesheet" ) "";
  "nilaiTransaksiLLD" ( "sheet columns.journalsheet" "sheet columns.settlementsheet" ) "";
  "nominalBondsIDR" ( "sheet columns.tradesheet" ) "";
  "nominalBondsValas" ( "sheet columns.tradesheet" ) "";
  "NominalInstrument" ( "sheet columns.portfoliosheet" ) "";
  "NominalPayLeg" ( "sheet columns.tradesheet" ) "";
  "NominalReceiveLeg" ( "sheet columns.tradesheet" ) "";
  "nominalSBI" ( "sheet columns.tradesheet" ) "";
  "nomorIdentifikasiPembayarLLD" ( "sheet columns.settlementsheet" ) "";
  "nomorIdentifikasiPenerimaLLD" ( "sheet columns.settlementsheet" ) "";
  "ntr_lastDateOnMonth" ( "sheet columns.tradesheet" ) "";
  "ntr_lastDateOnMonth_usd" ( "sheet columns.tradesheet" ) "";
  "ntr_tradeDate" ( "sheet columns.tradesheet" ) "";
  "ntrTradeDate" ( "sheet columns.tradesheet" ) "";
  "OthersFairValue" ( "sheet columns.tradesheet" ) "";
  "PartnerRefBroker" ( "sheet columns.confirmationsheet" ) "";
  "PartnerRefConf" ( "sheet columns.confirmationsheet" ) "";
  "PayDayCustom" ( "sheet columns.tradesheet" ) "";
  "PayLegBS" ( "sheet columns.tradesheet" ) "";
  "PBCBookValueOrgCurr" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "PBCBookValueOrgCurr2" ( "sheet columns.portfoliosheet" ) "";
  "PBCBookValueRupiah" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "PBCBookValueRupiah2" ( "sheet columns.portfoliosheet" ) "";
  "PBCUnamortized" ( "sheet columns.tradesheet" ) "";
  "Pemeringkat" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "Peringkat" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "period" ( "sheet columns.tradesheet" ) "";
  "periodePembayaranBungaTSD" ( "sheet columns.tradesheet" ) "";
  "pledge" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "PortfolioNameInstrument" ( "sheet columns.portfoliosheet" ) "";
  "PortfolioTypeInstrument" ( "sheet columns.portfoliosheet" ) "";
  "Posisi" ( "sheet columns.journalsheet" "sheet columns.portfoliosheet" "sheet columns.settlementsheet" "sheet columns.tradesheet" ) "";
  "posisiDasarForward" ( "sheet columns.tradesheet" ) "";
  "posisiDasarOption" ( "sheet columns.tradesheet" ) "";
  "PosisiYst" ( "sheet columns.journalsheet" "sheet columns.portfoliosheet" "sheet columns.settlementsheet" "sheet columns.tradesheet" ) "";
  "PostingDate" ( "sheet columns.tradesheet" ) "";
  "premiumRate" ( "sheet columns.tradesheet" ) "";
  "PrevEffDate" ( "sheet columns.tradesheet" ) "";
  "PrevEffDate2" ( "sheet columns.tradesheet" ) "";
  "PrevPrevEffDate" ( "sheet columns.tradesheet" ) "";
  "PrevPrevEffDate2" ( "sheet columns.tradesheet" ) "";
  "PrevPrevPrice" ( "sheet columns.tradesheet" ) "";
  "PrevPrevPrice2" ( "sheet columns.tradesheet" ) "";
  "PrevPrice" ( "sheet columns.tradesheet" ) "";
  "PrevPrice2" ( "sheet columns.tradesheet" ) "";
  "priceYield" ( "sheet columns.tradesheet" ) "";
  "ProductFullNameSP" ( "sheet columns.tradesheet" ) "";
  "productTypeCustom" ( "sheet columns.portfoliosheet" ) "";
  "PutCallCustomerView" ( "sheet columns.tradesheet" ) "";
  "QualityOfPlacement" ( "sheet columns.tradesheet" ) "";
  "rate_lastDateOnMonth_usd" ( "sheet columns.tradesheet" ) "";
  "RateBuyAudit" ( "sheet columns.tradesheet" ) "";
  "RateCashflow" ( "sheet columns.moneyflowsheet" ) "";
  "RateMerge" ( "sheet columns.tradesheet" ) "";
  "RateSellAudit" ( "sheet columns.tradesheet" ) "";
  "ReceiveLegBS" ( "sheet columns.tradesheet" ) "";
  "Reff2" ( "sheet columns.journalsheet" ) "";
  "RemainingNominalPosition" ( "sheet columns.tradesheet" ) "";
  "RepoRo" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "RollPeriodPayLeg" ( "sheet columns.tradesheet" ) "";
  "RollPeriodReceiveLeg" ( "sheet columns.tradesheet" ) "";
  "sandiBankLLD" ( "sheet columns.journalsheet" "sheet columns.settlementsheet" ) "";
  "SCHED_Pay_Freq" ( "sheet columns.portfoliosheet" ) "";
  "SCHED_Receive_Freq" ( "sheet columns.portfoliosheet" ) "";
  "SecIDBond" ( "sheet columns.journalsheet" "sheet columns.settlementsheet" "sheet columns.tradesheet" ) "";
  "SecurityDifference" ( "sheet columns.tradesheet" ) "";
  "sellPremium" ( "sheet columns.tradesheet" ) "";
  "SettlePriceInsMtM" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "SettlePriceInsMtM_BBIBPA" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "SourceUse" ( "sheet columns.portfoliosheet" ) "";
  "SpecificGlnoUsed" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "SpecificGlnoUsed2" ( "sheet columns.tradesheet" ) "";
  "SpreadValInReset" ( "sheet columns.moneyflowsheet" ) "";
  "StartCouponDate" ( "sheet columns.tradesheet" ) "";
  "StartDayPayment" ( "sheet columns.portfoliosheet" ) "";
  "statusPembayarLLD" ( "sheet columns.settlementsheet" ) "";
  "statusPembayarLLD2" ( "sheet columns.journalsheet" "sheet columns.settlementsheet" ) "";
  "statusPenerimaLLD" ( "sheet columns.settlementsheet" ) "";
  "statusPenerimaLLD2" ( "sheet columns.journalsheet" "sheet columns.settlementsheet" ) "";
  "strikePrice2TSD" ( "sheet columns.tradesheet" ) "";
  "StrikeValueHigher" ( "sheet columns.tradesheet" ) "";
  "StrikeValueLower" ( "sheet columns.tradesheet" ) "";
  "tanggalAwalForwardTSD" ( "sheet columns.tradesheet" ) "";
  "tanggalEfektifTSD" ( "sheet columns.tradesheet" ) "";
  "tanggalJatuhTempoDokumenUnderlying" ( "sheet columns.tradesheet" ) "";
  "tanggalJatuhTempoTSD" ( "sheet columns.tradesheet" ) "";
  "tanggalValutaTSD" ( "sheet columns.tradesheet" ) "";
  "taxWht" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "taxWhtValNeg" ( "sheet columns.tradesheet" ) "";
  "taxWhtValPos" ( "sheet columns.tradesheet" ) "";
  "Tenor2" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "TenorFarNear" ( "sheet columns.tradesheet" ) "";
  "TenorFX" ( "sheet columns.tradesheet" ) "";
  "TenorSukuBungaAcuanTSD" ( "sheet columns.tradesheet" ) "";
  "TodayEffDateCollateral" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "TodayEffDateCollateral2" ( "sheet columns.tradesheet" ) "";
  "TodayPriceCollateral" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "TodayPriceCollateral2" ( "sheet columns.tradesheet" ) "";
  "TotalQuantity" ( "sheet columns.portfoliosheet" ) "";
  "TradeBuyUsed" ( "sheet columns.tradesheet" ) "";
  "tradeDatedBY" ( "sheet columns.tradesheet" ) "";
  "TradeFXExcRate" ( "sheet columns.tradesheet" ) "";
  "tradePrincipal" ( "sheet columns.thresholdvaluesheet" "sheet columns.tradesheet" ) "";
  "TradesBuysUsed" ( "sheet columns.tradesheet" ) "";
  "TransactionExposureBuyer" ( "sheet columns.tradesheet" ) "";
  "TransactionExposureSeller" ( "sheet columns.tradesheet" ) "";
  "TransactionNoLLD" ( "sheet columns.journalsheet" "sheet columns.settlementsheet" ) "";
  "TRDQuantity" ( "sheet columns.portfoliosheet" ) "";
  "typeOfSecurities" ( "sheet columns.tradesheet" ) "";
  "UnamortisedPBC" ( "sheet columns.tradesheet" ) "";
  "UnamortisedPBC2" ( "sheet columns.tradesheet" ) "";
  "UnAmortizedAmount2" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "UnAmortizedAmount3" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "UnderlyingThreshold2" ( "sheet columns.tradesheet" ) "";
  "UnderlyingUsedPerCp" ( "sheet columns.tradesheet" ) "";
  "unitKerjaLLD" ( "sheet columns.journalsheet" "sheet columns.settlementsheet" ) "";
  "unrelizedInstrument" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "updatePriceInsMtM" ( "sheet columns.portfoliosheet" ) "";
  "updatePriceInsMtM_IBPA" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "UpdatePriceUser" ( "sheet columns.portfoliosheet" ) "";
  "UpdateTimeRating" ( "sheet columns.portfoliosheet" ) "";
  "updateTimeSimulatedLive" ( "sheet columns.journalsheet" ) "";
  "UpperRate" ( "sheet columns.tradesheet" ) "";
  "UpperRateSP" ( "sheet columns.tradesheet" ) "";
  "ValueDateCollateral" ( "sheet columns.journalsheet" ) "";
  "valueDateCustom" ( "sheet columns.tradesheet" ) "";
  "valueDateDerivatives" ( "sheet columns.tradesheet" ) "";
  "ValueDateSell" ( "sheet columns.tradesheet" ) "";
  "valutaDasarApolo" ( "sheet columns.tradesheet" ) "";
  "valutaDasarJnsSukuBungaAcuanTSD" ( "sheet columns.tradesheet" ) "";
  "valutaDasarJnsSukuBungaTSD" ( "sheet columns.tradesheet" ) "";
  "valutaDasarPremiumSukuBungaAcuanTSD" ( "sheet columns.tradesheet" ) "";
  "valutaDasarSukuBungaTetapTSD" ( "sheet columns.tradesheet" ) "";
  "valutaDokumenUnderlying" ( "sheet columns.tradesheet" ) "";
  "valutaLawanJnsSukuBungaAcuanTSD" ( "sheet columns.tradesheet" ) "";
  "valutaLawanJnsSukuBungaTSD" ( "sheet columns.tradesheet" ) "";
  "valutaLawanPremiumSukuBungaAcuanTSD" ( "sheet columns.tradesheet" ) "";
  "valutaLawanSukuBungaTetapTSD" ( "sheet columns.tradesheet" ) "";
  "valutaLawanTenorSukuBungaAcuanTSD" ( "sheet columns.tradesheet" ) "";
  "VariabelMendasariTSD" ( "sheet columns.tradesheet" ) "";
  "variableDasarForward" ( "sheet columns.tradesheet" ) "";
  "variableDasarOption" ( "sheet columns.tradesheet" ) "";
  "variableDasarSwap" ( "sheet columns.tradesheet" ) "";
  "WeekNumber" ( "sheet columns.tradesheet" ) "";
  "WITHGAINAMTAFS" ( "sheet columns.tradesheet" ) "";
  "WITHGAINAMTTRD" ( "sheet columns.tradesheet" ) "";
  "yearTransactionLLD" ( "sheet columns.journalsheet" "sheet columns.settlementsheet" ) "";
  "yieldSuratBerharga" ( "sheet columns.tradesheet" ) "";
}

clx FTradingSheet [FColumnDefinition] {
  AbsoluteAmountOfTrade =
  Access=ReadOnly
  Description=Absolute Amount Of Trade
  ExtensionAttribute=AbsoluteAmountOfTrade
  Format=
  GroupLabel=FieldCustom
  LabelList=AbsoluteAmountOfTrade
  Name=AbsoluteAmountOfTrade


  accountId =
  Access=ReadOnly
  Description=Account ID
  ExtensionAttribute=accountId
  Format=
  GroupLabel=FieldCustom
  LabelList=accountId
  Name=accountId


  AccruedInterestInstrument =
  Access=ReadOnly
  Description=AccruedInterestInstrument
  ExtensionAttribute=AccruedInterestInstrument
  Format=
  GroupLabel=FieldCustom
  LabelList=AccruedInterestInstrument
  Name=AccruedInterestInstrument


  AccruedOutstandingVal =
  Access=ReadOnly
  Description=AccruedOutstandingVal
  ExtensionAttribute=AccruedOutstandingVal
  Format=
  GroupLabel=FieldCustom
  LabelList=AccruedOutstandingVal
  Name=AccruedOutstandingVal


  ACCTTYPE =
  Description=Combination of <Trade Key 3> / <Trade Key 4>.
  ExtensionAttribute=ACCTTYPE
  Format=
  GroupLabel=FieldCustom
  LabelList=PRODTYPE
  Name=Product Type


  ACCTTYPE2 =
  Description=Combination of <Trade Key 3> / <Trade Key 4>.
  ExtensionAttribute=ACCTTYPE2
  Format=
  GroupLabel=FieldCustom
  LabelList=PRODTYPE2
  Name=Product Type 2


  AccumulativeOrPerTransaction =
  ColumnAppearance=Total_background
  Description=Transaction type category (accumulative or per transaction), only spot can be accumulative
  ExtensionAttribute=AccumulativeOrPerTransaction
  GroupLabel=FieldCustom
  Label=Accumulative / Per Transaction
  Name=Accumulative / Per Transaction


  acquisitionAmount =
  Access=ReadOnly
  Description=
  ExtensionAttribute=acquisitionAmount
  Format=
  GroupLabel=FieldCustom
  LabelList=acquisitionAmount
  Name=acquisitionAmount


  acquisitionDetails =
  Access=ReadOnly
  Description=
  ExtensionAttribute=acquisitionDetails
  Format=
  GroupLabel=FieldCustom
  LabelList=acquisitionDetails
  Name=acquisitionDetails


  AFS =
  Access=ReadOnly
  Description=Available for Sale
  ExtensionAttribute=AFS
  Format=
  GroupLabel=FieldCustom
  LabelList=AFS
  Name=AFS


  AFSQuantity =
  Access=ReadOnly
  Description=Available for Sale
  ExtensionAttribute=AFSQuantity
  Format=
  GroupLabel=FieldCustom
  LabelList=AFSQuantity
  Name=AFSQuantity


  AllInRateOnReset =
  Access=ReadOnly
  Description=AllInRateOnReset
  ExtensionAttribute=AllInRateOnReset
  Format=FiveDecimalDetailedPercentShowZero
  GroupLabel=FieldCustom
  LabelList=AllInRateOnReset
  Name=AllInRateOnReset


  AllowanceForLossesPbc =
  Description=Percentage amount from original amount
  ExtensionAttribute=AllowanceForLossesPbc
  Format=
  GroupLabel=FieldCustom
  Label=AllowanceForLossesPbc
  Name=AllowanceForLossesPbc


  AmortizedAmount2 =
  Access=ReadOnly
  Description=Total Amount From Specific GLNO
  ExtensionAttribute=AmortizedAmount2
  Format=
  GroupLabel=FieldCustom
  LabelList=AmortizedAmount2
  Name=AmortizedAmount2


  AmortizedAmount3 =
  Description=Amount from Trade Date Sell RPL with GLNO Head "460xxx"
  ExtensionAttribute=AmortizedAmount3
  Format=
  GroupLabel=FieldCustom
  LabelList=AmortizedAmount3
  Name=AmortizedAmount3


  AmountAccumulativePerMonth =
  Access=ReadOnly
  Description=Accumulative Amount Per Month
  ExtensionAttribute=AmountAccumulativePerMonth
  Format=
  GroupLabel=FieldCustom
  LabelList=AmountAccumulativePerMonth
  Name=AmountAccumulativePerMonth


  AmountBuyAudit =
  Access=ReadOnly
  Description=if FX and Buy will get Amount else Nominal
  ExtensionAttribute=AmountBuyAudit
  Format=
  GroupLabel=FieldCustom
  LabelList=Amount (1)
  Name=Amount (1)


  amountInIdr =
  Description=
  ExtensionAttribute=amountInIdr
  Format=
  GroupLabel=FieldCustom
  LabelList=amountInIdr
  Name=amountInIdr


  AmountInRupiah =
  Access=ReadOnly
  Description=Amount In Rupiah
  ExtensionAttribute=AmountInRupiah
  Format=
  GroupLabel=FieldCustom
  LabelList=AmountInRupiah
  Name=AmountInRupiah


  amountPurchase =
  Access=ReadOnly
  Description=
  ExtensionAttribute=amountPurchase
  Format=
  GroupLabel=FieldCustom
  LabelList=amountPurchase
  Name=amountPurchase


  amountSale =
  Access=ReadOnly
  Description=
  ExtensionAttribute=amountSale
  Format=
  GroupLabel=FieldCustom
  LabelList=amountSale
  Name=amountSale


  AmountSellAudit =
  Access=ReadOnly
  Description=if FX and Sell will get Amount else None
  ExtensionAttribute=AmountSellAudit
  Format=
  GroupLabel=FieldCustom
  LabelList=Amount (2)
  Name=Amount (2)


  AmountSellAudit2 =
  Access=ReadOnly
  Description=if FX and Sell will get Amount else None
  ExtensionAttribute=AmountSellAudit2
  Format=
  GroupLabel=FieldCustom
  LabelList=Amount (2)2
  Name=Amount (2)2


  AmountUsePerProduct1 =
  Description=Major Currency Amount
  ExtensionAttribute=AmountUsePerProduct1
  GroupLabel=FieldCustom
  LabelList=AmountUsePerProduct1
  Name=AmountUsePerProduct1


  AmountUsePerProduct2 =
  Description=Minor Currency Amount
  ExtensionAttribute=AmountUsePerProduct2
  GroupLabel=FieldCustom
  LabelList=AmountUsePerProduct2
  Name=AmountUsePerProduct2


  ApoloCode =
  Access=ReadOnly
  Description=Apolo Code
  ExtensionAttribute=ApoloCode
  Format=
  GroupLabel=FieldCustom
  LabelList=ApoloCode
  Name=ApoloCode


  ApoloNo =
  Access=ReadOnly
  Description=Number ID In Apolo
  ExtensionAttribute=ApoloNo
  Format=
  GroupLabel=FieldCustom
  LabelList=ApoloNo
  Name=ApoloNo


  AskPriceInsMtM =
  Description=Ask Price for lower Price
  ExtensionAttribute=AskPriceInsMtM
  Format=
  GroupLabel=FieldCustom
  Label=AskPriceInsMtM
  Name=AskPriceInsMtM


  AskPriceInsMtM_BBIBPA =
  Description=Ask Price for lower Price
  ExtensionAttribute=AskPriceInsMtM_BBIBPA
  Format=
  GroupLabel=FieldCustom
  Label=AskPriceInsMtM_BBIBPA
  Name=AskPriceInsMtM_BBIBPA


  AtBeginningAcq =
  Description=book value (amount on nominal * Price)
  ExtensionAttribute=InsAmountOrgCurrency
  Format=
  GroupLabel=FieldCustom
  LabelList=AtBeginningAcq
  Name=AtBeginningAcq


  AtBeginningAcq2 =
  Access=ReadOnly
  Description=Total Amount From TradeDateBuy Event GL
  ExtensionAttribute=AtBeginningAcq2
  Format=
  GroupLabel=FieldCustom
  LabelList=AtBeginningAcq2
  Name=AtBeginningAcq2


  AtBeginningAcq2Idr =
  Access=ReadOnly
  Description=Total Amount From TradeDateBuy Event GL On IDR
  ExtensionAttribute=AtBeginningAcq2Idr
  Format=
  GroupLabel=FieldCustom
  LabelList=AtBeginningAcq2Idr
  Name=AtBeginningAcq2Idr


  AveragePrice =
  Description=Total Nominal / Book Cost
  ExtensionAttribute=AveragePrice
  Format=
  GroupLabel=FieldCustom
  LabelList=AveragePrice
  Name=AveragePrice


  balanceNTCS =
  Access=ReadOnly
  Description=Balance NTCS
  ExtensionAttribute=balanceNTCS
  Format=
  GroupLabel=FieldCustom
  LabelList=balanceNTCS
  Name=balanceNTCS


  bankPembayarLLD =
  Description=bank Penerima (Report LLD)
  ExtensionAttribute=bankPembayarLLD
  Format=
  GroupLabel=FieldCustom
  LabelList=bankPembayarLLD
  Name=bankPembayarLLD


  bankPenerimaLLD =
  Description=bank Penerima (Report LLD)
  ExtensionAttribute=bankPenerimaLLD
  Format=
  GroupLabel=FieldCustom
  LabelList=bankPenerimaLLD
  Name=bankPenerimaLLD


  BebanBunga =
  Description=Beban Bunga (eqv. in IDR * Interest Rate) * (Jumlah Hari / 360) / 100
  ExtensionAttribute=BebanBunga
  GroupLabel=FieldCustom
  LabelList=Beban Bunga
  Name=Beban Bunga


  BIDHighestHierarchy =
  Description=BID Highest Hierarchy
  ExtensionAttribute=BIDHighestHierarchy
  GroupLabel=FieldCustom
  LabelList=BID Highest Hierarchy
  Name=BID Highest Hierarchy


  BidPriceInsMtM =
  Description=Bid Price for lower Price
  ExtensionAttribute=BidPriceInsMtM
  Format=
  GroupLabel=FieldCustom
  Label=BidPriceInsMtM
  Name=BidPriceInsMtM


  BidPriceInsMtM_BBIBPA =
  Description=Bid Price for lower Price
  ExtensionAttribute=BidPriceInsMtM_BBIBPA
  Format=
  GroupLabel=FieldCustom
  Label=BidPriceInsMtM_BBIBPA
  Name=BidPriceInsMtM_BBIBPA


  BIDSourceBGN =
  Description=BID Source BGN
  ExtensionAttribute=BIDSourceBGN
  Format=fiveComma
  GroupLabel=FieldCustom
  LabelList=BID Source BGN
  Name=BID Source BGN


  BIDSourceBIS4 =
  Description=BID Source BIS4
  ExtensionAttribute=BIDSourceBIS4
  Format=fiveComma
  GroupLabel=FieldCustom
  LabelList=BID Source BIS4
  Name=BID Source BIS4


  BIDSourceEXCH =
  Description=BID Source EXCH
  ExtensionAttribute=BIDSourceEXCH
  Format=fiveComma
  GroupLabel=FieldCustom
  LabelList=BID Source EXCH
  Name=BID Source EXCH


  BIDSourceIBPA =
  Description=BID Source IBPA
  ExtensionAttribute=BIDSourceIBPA
  Format=fiveComma
  GroupLabel=FieldCustom
  LabelList=BID Source IBPA
  Name=BID Source IBPA


  BIDSourceMarkToModel =
  Description=BID Source Mark to Model
  ExtensionAttribute=BIDSourceMarkToModel
  Format=fiveComma
  GroupLabel=FieldCustom
  LabelList=BID Source Mark to Model
  Name=BID Source Mark to Model


  BIDSourceNAV =
  Description=BID Source NAV
  ExtensionAttribute=BIDSourceNAV
  Format=fiveComma
  GroupLabel=FieldCustom
  LabelList=BID Source NAV
  Name=BID Source NAV


  BIDSourceVAL =
  Description=BID Source VAL
  ExtensionAttribute=BIDSourceBVAL
  Format=fiveComma
  GroupLabel=FieldCustom
  LabelList=BID Source VAL
  Name=BID Source VAL


  BookCostAmort =
  Access=ReadOnly
  Description=
  ExtensionAttribute=BookCostAmort
  Format=
  GroupLabel=FieldCustom
  LabelList=BookCostAmort
  Name=BookCostAmort


  BookCostAmortIdr =
  Access=ReadOnly
  Description=
  ExtensionAttribute=BookCostAmortIdr
  Format=
  GroupLabel=FieldCustom
  LabelList=BookCostAmortIdr
  Name=BookCostAmortIdr


  BookValueInIDR =
  Description=book value (amount on nominal * Price) - amount IN IDR
  ExtensionAttribute=InsAmountInIdr
  Format=
  GroupLabel=FieldCustom
  LabelList=BookValueInIDR
  Name=BookValueInIDR


  BookValuePbc =
  Access=ReadOnly
  Description=
  ExtensionAttribute=BookValuePbc
  Format=
  GroupLabel=FieldCustom
  LabelList=BookValuePbc
  Name=BookValuePbc


  BrokerFeeIDR =
  Description=Broker Fee IDR
  ExtensionAttribute=BrokerFeeIDR
  Format=
  GroupLabel=FieldCustom
  LabelList=Broker Fee IDR
  Name=Broker Fee IDR


  BrokerFeeUSD =
  Description=Broker Fee USD
  ExtensionAttribute=BrokerFeeUSD
  Format=
  GroupLabel=FieldCustom
  LabelList=Broker Fee USD
  Name=Broker Fee USD


  Bulan2 =
  Access=ReadOnly
  Description=(EndDate - StartDate) / 30
  ExtensionAttribute=Bulan2
  Format=
  GroupLabel=FieldCustom
  LabelList=Bulan2
  Name=Bulan2


  buyPremium =
  Access=ReadOnly
  Description=Get Premium Value if Nmminal is Positive.
  ExtensionAttribute=buyPremium
  Format=
  GroupLabel=FieldCustom
  LabelList=buyPremium
  Name=buyPremium


  BuySellBank =
  Access=ReadOnly
  Description=Buy / Sell on Bank Side
  ExtensionAttribute=BuySellBank
  Format=
  GroupLabel=FieldCustom
  LabelList=BuySellBank
  Name=BuySellBank


  BuySellCustomer =
  Access=ReadOnly
  Description=Buy / Sell on Customer Side
  ExtensionAttribute=BuySellCustomer
  Format=
  GroupLabel=FieldCustom
  LabelList=BuySellCustomer
  Name=BuySellCustomer


  categoryInternalizer =
  Description=categoryInternalizer.
  ExtensionAttribute=categoryInternalizer
  Format=
  GroupLabel=FieldCustom
  LabelList=categoryInternalizer
  Name=categoryInternalizer


  CCYSACCT =
  Description=CCY counterparty account.
  ExtensionAttribute=CCYSACCT
  Format=
  GroupLabel=FieldCustom
  LabelList=CCYSACCT
  Name=CCYSACCT


  childrenFreq =
  Access=ReadOnly
  Description=Children Frequency
  ExtensionAttribute=childrenFreq
  Format=
  GroupLabel=FieldCustom
  LabelList=childrenFreq
  Name=childrenFreq


  closedLots =
  Access=ReadOnly
  Description=closed Lots.
  ExtensionAttribute=closedLots
  Format=
  GroupLabel=FieldCustom
  LabelList=closed Lots
  Name=closed Lots


  closedLotsTrade =
  Access=ReadOnly
  Description=closed Lots Trade.
  ExtensionAttribute=closedLotsTrade
  Format=
  GroupLabel=FieldCustom
  LabelList=closed Lots Trade
  Name=closed Lots Trade


  CounterPartyCountryRisk =
  Access=ReadOnly
  Description=Counterparty Fullname & Risk Country
  ExtensionAttribute=CounterPartyCountryRisk
  Format=
  GroupLabel=FieldCustom
  LabelList=CounterPartyCountryRisk
  Name=CounterPartyCountryRisk


  CPTYNAMECOUNTRY =
  Description=Counterparty Fullname // Counterparty Country ID.
  ExtensionAttribute=CPTYNAMECOUNTRY
  Format=
  GroupLabel=FieldCustom
  LabelList=Counterparty Country
  Name=Counterparty Country


  CTRSACCT =
  Description=CTR counterparty account.
  ExtensionAttribute=CTRSACCT
  Format=
  GroupLabel=FieldCustom
  LabelList=CTRSACCT
  Name=CTRSACCT


  CurrBuyAudit =
  Access=ReadOnly
  Description=if FX and Buy will get currency
  ExtensionAttribute=CurrBuyAudit
  Format=
  GroupLabel=FieldCustom
  LabelList=Curr (1)
  Name=Curr (1)


  CurrCollateral =
  Access=ReadOnly
  Description=Currency of Collateral Trade
  ExtensionAttribute=CurrCollateral
  Format=
  GroupLabel=FieldCustom
  LabelList=CurrCollateral
  Name=CurrCollateral


  currPurchase =
  Access=ReadOnly
  Description=
  ExtensionAttribute=currPurchase
  Format=
  GroupLabel=FieldCustom
  LabelList=currPurchase
  Name=currPurchase


  currSale =
  Access=ReadOnly
  Description=
  ExtensionAttribute=currSale
  Format=
  GroupLabel=FieldCustom
  LabelList=currSale
  Name=currSale


  CurrSellAudit =
  Access=ReadOnly
  Description=if FX and Sell will get currency
  ExtensionAttribute=CurrSellAudit
  Format=
  GroupLabel=FieldCustom
  LabelList=Curr (2)
  Name=Curr (2)


  CurrUsePerProduct1 =
  Description=Major Currency
  ExtensionAttribute=CurrUsePerProduct1
  GroupLabel=FieldCustom
  LabelList=CurrUsePerProduct1
  Name=CurrUsePerProduct1


  CurrUsePerProduct2 =
  Description=Minor Currency
  ExtensionAttribute=CurrUsePerProduct2
  GroupLabel=FieldCustom
  LabelList=CurrUsePerProduct2
  Name=CurrUsePerProduct2


  CustomerFullNameCashFlow =
  Access=ReadOnly
  Description=Customer Full Name on MoneyFlow Sheet
  ExtensionAttribute=CustomerFullNameCashFlow
  Format=
  GroupLabel=FieldCustom
  LabelList=CustomerFullNameCashFlow
  Name=CustomerFullNameCashFlow


  customerRank =
  Access=ReadOnly
  Description=customerRank
  ExtensionAttribute=customerRank
  Format=
  GroupLabel=FieldCustom
  LabelList=customerRank
  Name=customerRank


  dateHoldPos =
  Access=ReadOnly
  Description=hold post date in Instrument Additional Info
  ExtensionAttribute=dateHoldPos
  Format=
  GroupLabel=FieldCustom
  LabelList=dateHoldPos
  Name=dateHoldPos


  DatesPosition =
  Access=ReadOnly
  Description=Dates using position Val.
  ExtensionAttribute=DatesPosition
  Format=
  GroupLabel=FieldCustom
  LabelList=Dates
  Name=Dates


  dateTransactionLLD =
  Description=Date Transaction (Report LLD)
  ExtensionAttribute=dateTransactionLLD
  Format=
  GroupLabel=FieldCustom
  LabelList=dateTransactionLLD
  Name=dateTransactionLLD


  DateTransaksi =
  Access=ReadOnly
  Description=Transaction Datetime on local time
  ExtensionAttribute=DateTransaksi
  Format=
  GroupLabel=FieldCustom
  LabelList=DateTransaksi
  Name=DateTransaksi


  DaysDelays =
  Access=ReadOnly
  Description=Actual settlement date - settlement date
  ExtensionAttribute=DaysDelays
  Format=
  GroupLabel=FieldCustom
  LabelList=Days Delays
  Name=Days Delays


  deltaMain =
  Access=ReadOnly
  Description=delta main currency
  ExtensionAttribute=deltaMain
  Format=
  GroupLabel=FieldCustom
  LabelList=deltaMain
  Name=deltaMain


  deltaMainAmountCcy =
  Access=ReadOnly
  Description=main amount  x delta main ccy
  ExtensionAttribute=deltaMainAmountCcy
  Format=
  GroupLabel=FieldCustom
  LabelList=deltaMainAmountCcy
  Name=deltaMainAmountCcy


  deltamaineqivalentinIDR =
  Access=ReadOnly
  Description=delta main amt x ntr idr yesterday
  ExtensionAttribute=deltamaineqivalentinIDR
  Format=
  GroupLabel=FieldCustom
  LabelList=deltamaineqivalentinIDR
  Name=deltamaineqivalentinIDR


  deltaMoney =
  Access=ReadOnly
  Description=delta main currency x -1
  ExtensionAttribute=deltaMoney
  Format=
  GroupLabel=FieldCustom
  LabelList=deltaMoney
  Name=deltaMoney


  deltaMoneyAmount =
  Access=ReadOnly
  Description=Delta money x money amount
  ExtensionAttribute=deltaMoneyAmount
  Format=
  GroupLabel=FieldCustom
  LabelList=deltaMoneyAmount
  Name=deltaMoneyAmount


  deltaMoneyEqvIDR =
  Access=ReadOnly
  Description=DeltaMoneyAmount x NTR IDR Yesterday
  ExtensionAttribute=deltaMoneyEqvIDR
  Format=
  GroupLabel=FieldCustom
  LabelList=deltaMoneyEqvIDR
  Name=deltaMoneyEqvIDR


  DerivativesPayables =
  Access=ReadOnly
  Description=Type of Securities: The sum of the negative values
  ExtensionAttribute=DerivativesPayables
  Format=
  GroupLabel=FieldCustom
  LabelList=Derivatives Payables
  Name=Derivatives Payables


  DerivativesReceivables =
  Access=ReadOnly
  Description=Type of Securities: The sum of the positive replacement values of all itÃ¢ÂÂs over the-counter derivatives contracts
  ExtensionAttribute=DerivativesReceivables
  Format=
  GroupLabel=FieldCustom
  LabelList=Derivatives Receivables
  Name=Derivatives Receivables


  Descr_acc =
  Description=Description of account
  ExtensionAttribute=Descr_acc
  Format=Impercise
  GroupLabel=FieldCustom
  LabelList=Description
  Name=Description


  DescriptionUnderlying =
  ColumnAppearance=Total_background
  Description=Field custom to define underlying condition
  ExtensionAttribute=DescriptionUnderlying
  GroupLabel=FieldCustom
  Label=Description Underlying
  Name=Description Underlying


  detailTransaksiLLD =
  Description=Detail Transaksi (Report LLD)
  ExtensionAttribute=detailTransaksiLLD
  Format=
  GroupLabel=FieldCustom
  LabelList=detailTransaksiLLD
  Name=detailTransaksiLLD


  differenceBetweenFairMarket =
  Description=Difference Between Fair Market Value After Haircuts and Repurchase Price
  ExtensionAttribute=differenceBetweenFairMarket
  Format=
  GroupLabel=FieldCustom
  Label=differenceBetweenFairMarket
  Name=differenceBetweenFairMarket


  differenceListOfSell =
  Access=ReadOnly
  Description=differenceListOfSell
  ExtensionAttribute=differenceListOfSell
  Format=
  GroupLabel=FieldCustom
  LabelList=differenceListOfSell
  Name=differenceListOfSell


  differenceRo =
  Access=ReadOnly
  Description=differenceRo
  ExtensionAttribute=differenceRo
  Format=
  GroupLabel=FieldCustom
  LabelList=differenceRo
  Name=differenceRo


  DifferenceStartCashEndCash =
  Access=ReadOnly
  Description=Difference Value between Start Cash & EndCash.
  ExtensionAttribute=DifferenceStartCashEndCash
  Format=
  GroupLabel=FieldCustom
  LabelList=DifferenceStartCashEndCash
  Name=DifferenceStartCashEndCash


  EffectiveDate =
  Access=ReadOnly
  Description=CCS, IRS, OIS (Start Date), FX SPOT, NDF, FWD, SWAP, BOND FORWARD (Value Date)
  ExtensionAttribute=EffectiveDate
  Format=
  GroupLabel=FieldCustom
  LabelList=EffectiveDate
  Name=EffectiveDate


  effectiveDatedbY =
  Access=ReadOnly
  Description=effectiveDatedbY
  ExtensionAttribute=effectiveDatedbY
  Format=
  GroupLabel=FieldCustom
  LabelList=effectiveDatedbY
  Name=effectiveDatedbY


  effectiveDatedBy =
  Access=ReadOnly
  Description=Effective Date on "dd BB YYYY"
  ExtensionAttribute=effectiveDatedBy
  Format=
  GroupLabel=FieldCustom
  LabelList=effectiveDatedBy
  Name=effectiveDatedBy


  EndDayPayment =
  Access=ReadOnly
  Description=End Day From Last Payment
  ExtensionAttribute=EndDayPayment
  Format=
  GroupLabel=FieldCustom
  LabelList=EndDayPayment
  Name=EndDayPayment


  EndInterest =
  Description=The end interest of the transaction.
  ExtensionAttribute=EndInterest
  Format=
  GroupLabel=FieldCustom
  LabelList=EndInterest
  Name=End Interest


  endInterestDepo =
  Access=ReadOnly
  Description=Fixed -> End Interest; Float -> Last Projection
  ExtensionAttribute=endInterestDepo
  Format=
  GroupLabel=FieldCustom
  LabelList=endInterestDepo
  Name=endInterestDepo


  EndInterestRepo =
  Description=The end interest of the repo transaction.
  ExtensionAttribute=EndInterestRepo
  Format=
  GroupLabel=FieldCustom
  LabelList=EndInterestRepo
  Name=End Interest Repo


  EndInterestRepo2 =
  Description=The end interest of the repo transaction.
  ExtensionAttribute=EndInterestRepo2
  Format=
  GroupLabel=FieldCustom
  LabelList=EndInterestRepo2
  Name=End Interest Repo2


  EodMtMYesterday =
  Access=ReadOnly
  Description=NTR Yesterday
  ExtensionAttribute=EodMtMYesterday
  Format=
  GroupLabel=FieldCustom
  LabelList=EodMtMYesterday
  Name=EodMtMYesterday


  EquivalentAmountIDR =
  Access=ReadOnly
  Description=The amount that equivalent to IDR
  ExtensionAttribute=EquivalentAmountIDR
  Format=
  GroupLabel=FieldCustom
  LabelList=Equivalent Amount IDR
  Name=Equivalent Amount IDR


  EquivalentAmountIDRLastMonth =
  Access=ReadOnly
  Description=The amount that equivalent to IDR
  ExtensionAttribute=EquivalentAmountIDRLastMonth
  Format=Imprecise
  GroupLabel=FieldCustom
  LabelList=Equivalent Amount IDR
  Name=Equivalent Amount IDR


  EquivalentAmountIDRSett =
  Access=ReadOnly
  Description=The amount that equivalent to IDR
  ExtensionAttribute=EquivalentAmountIDRSett
  Format=TwoDecimalBehind
  GroupLabel=FieldCustom
  LabelList=Equivalent Amount IDR
  Name=Equivalent Amount IDR


  EquivalentAmountIDRToday =
  Access=ReadOnly
  Description=The amount that equivalent to IDR (Today)
  ExtensionAttribute=EquivalentAmountIDRToday
  Format=
  GroupLabel=FieldCustom
  LabelList=Equivalent Amount IDR (Today)
  Name=Equivalent Amount IDR (Today)


  FairMarketValueAfterHaircuts =
  Description=Fair Market Value After Haircuts
  ExtensionAttribute=FairMarketValueAfterHaircuts
  Format=
  GroupLabel=FieldCustom
  Label=FairMarketValueAfterHaircuts
  Name=FairMarketValueAfterHaircuts


  FixingDatePay =
  Access=ReadOnly
  Description=Fixing Date for Pay Leg
  ExtensionAttribute=FixingDatePay
  Format=
  GroupLabel=FieldCustom
  LabelList=FixingDatePay
  Name=FixingDatePay


  FixingDateReceive =
  Access=ReadOnly
  Description=Fixing Date for Receive Leg
  ExtensionAttribute=FixingDateReceive
  Format=
  GroupLabel=FieldCustom
  LabelList=FixingDateReceive
  Name=FixingDateReceive


  forexRate =
  Access=ReadOnly
  Description=
  ExtensionAttribute=forexRate
  Format=
  GroupLabel=FieldCustom
  LabelList=forexRate
  Name=forexRate


  Frequency =
  Access=ReadOnly
  Description=Frequency
  ExtensionAttribute=Frequency
  Format=
  GroupLabel=FieldCustom
  LabelList=Frequency
  Name=Frequency


  GainOrLossFIFO =
  Access=ReadOnly
  Description=
  ExtensionAttribute=GainOrLossFIFO
  Format=
  GroupLabel=FieldCustom
  LabelList=GainOrLossFIFO
  Name=GainOrLossFIFO


  GainOrLossGlno =
  Access=ReadOnly
  Description=Gain / Loss Value Base On GLNO
  ExtensionAttribute=GainOrLossGlno
  Format=
  GroupLabel=FieldCustom
  LabelList=GainOrLossGlno
  Name=GainOrLossGlno


  GainOrLossGlnoStatus =
  Access=ReadOnly
  Description=Gain / Loss Value Base On GLNO (Amount > 0 : Gain ; Amount < 0 : Loss)
  ExtensionAttribute=GainOrLossGlnoStatus
  Format=
  GroupLabel=FieldCustom
  LabelList=GainOrLossGlnoStatus
  Name=GainOrLossGlnoStatus


  GLNOAmount =
  Access=ReadOnly
  Description=Journal Amount in Specific GLNO Number
  ExtensionAttribute=GLNOAmount
  Format=
  GroupLabel=FieldCustom
  LabelList=GLNOAmount
  Name=GLNOAmount


  GLNOAmount2 =
  Access=ReadOnly
  Description=Journal Amount in Specific GLNO Number
  ExtensionAttribute=GLNOAmount2
  Format=
  GroupLabel=FieldCustom
  LabelList=GLNOAmount2
  Name=GLNOAmount2


  GLNOInstrument =
  Access=ReadOnly
  Description=GLNOInstrument
  ExtensionAttribute=GLNOInstrument
  Format=
  GroupLabel=FieldCustom
  LabelList=GLNOInstrument
  Name=GLNOInstrument


  grandTotal =
  Access=ReadOnly
  Description=Premium Buy + Sell Premium Buy.
  ExtensionAttribute=grandTotal
  Format=
  GroupLabel=FieldCustom
  LabelList=grandTotal
  Name=grandTotal


  hargJualSBI =
  Access=ReadOnly
  Description=Harga Jual SBI
  ExtensionAttribute=hargJualSBI
  Format=
  GroupLabel=FieldCustom
  LabelList=hargJualSBI
  Name=hargJualSBI


  Hari2 =
  Access=ReadOnly
  Description=(EndDate - StartDate) / 30 (Remaining Days)
  ExtensionAttribute=Hari2
  Format=
  GroupLabel=FieldCustom
  LabelList=Hari2
  Name=Hari2


  HoldPosBIS4 =
  Access=ReadOnly
  Description=HoldPosBIS4 in Instrument Additional Info
  ExtensionAttribute=HoldPosBIS4
  Format=
  GroupLabel=FieldCustom
  LabelList=HoldPosBIS4
  Name=HoldPosBIS4


  HoldPosCustody =
  Access=ReadOnly
  Description=HoldPosCustody in Instrument Additional Info
  ExtensionAttribute=HoldPosCustody
  Format=
  GroupLabel=FieldCustom
  LabelList=HoldPosCustody
  Name=HoldPosCustody


  HoldPosEuroClear =
  Access=ReadOnly
  Description=HoldPosEuroClear in Instrument Additional Info
  ExtensionAttribute=HoldPosEuroClear
  Format=
  GroupLabel=FieldCustom
  LabelList=HoldPosEuroClear
  Name=HoldPosEuroClear


  HTMQuantity =
  Access=ReadOnly
  Description=Available for Sale
  ExtensionAttribute=HTMQuantity
  Format=
  GroupLabel=FieldCustom
  LabelList=HTMQuantity
  Name=HTMQuantity


  hubunganKeuanganLLD =
  Description=Hubungan Keuangan (Report LLD)
  ExtensionAttribute=hubunganKeuanganLLD
  Format=
  GroupLabel=FieldCustom
  LabelList=hubunganKeuanganLLD
  Name=hubunganKeuanganLLD


  hubunganKeuanganLLD2 =
  Description=Hubungan Keuangan (Report LLD)
  ExtensionAttribute=ndefault
  Format=
  GroupLabel=FieldCustom
  LabelList=hubunganKeuanganLLD2
  Name=hubunganKeuanganLLD2


  IdrPremium =
  Access=ReadOnly
  Description=Premium in IDR (use EOD_MtM Today Market Price)
  ExtensionAttribute=IdrPremium
  Format=
  GroupLabel=FieldCustom
  LabelList=IdrPremium
  Name=IdrPremium


  informasiDokumenPendukungLLD =
  Description=Informasi Dokumen Pendukung (Report LLD)
  ExtensionAttribute=informasiDokumenPendukungLLD
  Format=
  GroupLabel=FieldCustom
  LabelList=informasiDokumenPendukungLLD
  Name=informasiDokumenPendukungLLD


  InputDateCustom =
  Access=ReadOnly
  Description=%d %B %Y Format
  ExtensionAttribute=InputDateCustom
  Format=
  GroupLabel=FieldCustom
  LabelList=InputDateCustom
  Name=InputDateCustom


  InsAmountInIdr =
  Description=book value (amount on nominal * Price) - amount (in IDR)
  ExtensionAttribute=InsAmountInIdr
  Format=
  GroupLabel=FieldCustom
  LabelList=InsAmountInIdr
  Name=InsAmountInIdr


  InsAmountOrgCurrency =
  Description=book value (amount on nominal * Price) - amount
  ExtensionAttribute=InsAmountOrgCurrency
  Format=
  GroupLabel=FieldCustom
  LabelList=InsAmountOrgCurrency
  Name=InsAmountOrgCurrency


  InsBondPrice =
  Description=The Price for Bond Instrument.
  ExtensionAttribute=InsBondPrice
  Format=
  GroupLabel=FieldCustom
  LabelList=EOD_MtM Bond Price
  Name=EOD_MtM Bond Price


  InsBondPriceCollateral =
  Description=The Price for Bond Instrument Collateral.
  ExtensionAttribute=InsBondPriceCollateral
  Format=SixDecimalDetailed
  GroupLabel=FieldCustom
  LabelList=EOD_MtM Bond Price Collateral
  Name=EOD_MtM Bond Price Collateral


  InsBondPriceHistToday =
  Description=The Price for Bond Instrument Historical Today.
  ExtensionAttribute=InsBondPriceHistToday
  Format=fiveComma
  GroupLabel=FieldCustom
  LabelList=InsBondPriceHistToday
  Name=InsBondPriceHistToday


  InsBondPriceHistUpdate =
  Description=The Price for Bond Instrument Historical Update Day.
  ExtensionAttribute=InsBondPriceHistUpdate
  Format=
  GroupLabel=FieldCustom
  LabelList=InsBondPriceHistUpdate
  Name=InsBondPriceHistUpdate


  InsBondPriceHistYst =
  Description=The Price for Bond Instrument Historical Yesterday.
  ExtensionAttribute=InsBondPriceHistYst
  Format=fiveComma
  GroupLabel=FieldCustom
  LabelList=InsBondPriceHistYst
  Name=InsBondPriceHistYst


  InstrumentAcquisitionDate =
  Description=First Date of Instrument bought
  ExtensionAttribute=InstrumentAcquisitionDate
  Format=
  GroupLabel=FieldCustom
  LabelList=Instrument Acquisition Date
  Name=Instrument Acquisition Date


  instrumentNameInternalizer =
  Description=<optkey4> <curr1>/<curr2>.
  ExtensionAttribute=instrumentNameInternalizer
  Format=
  GroupLabel=FieldCustom
  LabelList=instrumentNameInternalizer
  Name=instrumentNameInternalizer


  InterestAccruedCouponDay =
  Description=Coupon per day from last coupon to today
  ExtensionAttribute=InterestAccruedCouponDay
  GroupLabel=FieldCustom
  LabelList=InterestAccruedCouponDay
  Name=InterestAccruedCouponDay


  InterestAmountVal =
  Access=ReadOnly
  Description=InterestAmountVal
  ExtensionAttribute=InterestAmountVal
  Format=
  GroupLabel=FieldCustom
  LabelList=InterestAmountVal
  Name=InterestAmountVal


  InterestRateDepo =
  Access=ReadOnly
  Description=Type Float -> First Rate + Spread ; Type Fix -> First Rate
  ExtensionAttribute=InterestRateDepo
  Format=
  GroupLabel=FieldCustom
  LabelList=InterestRateDepo
  Name=InterestRateDepo


  InterestRatePay =
  Access=ReadOnly
  Description=fixed -> rate ; float -> float rate reference (From Pay Leg)
  ExtensionAttribute=InterestRatePay
  Format=
  GroupLabel=FieldCustom
  LabelList=InterestRatePay
  Name=InterestRatePay


  InterestRateReceive =
  Access=ReadOnly
  Description=fixed -> rate ; float -> float rate reference (From Receive Leg)
  ExtensionAttribute=InterestRateReceive
  Format=
  GroupLabel=FieldCustom
  LabelList=InterestRateReceive
  Name=InterestRateReceive


  InvTypeCollateral =
  Access=ReadOnly
  Description=Get Portfolio Type From Collateral Trade
  ExtensionAttribute=InvTypeCollateral
  Format=
  GroupLabel=FieldCustom
  LabelList=InvTypeCollateral
  Name=InvTypeCollateral


  JamTransaksi =
  Access=ReadOnly
  Description=Transaction Datetime on local time
  ExtensionAttribute=JamTransaksi
  Format=
  GroupLabel=FieldCustom
  LabelList=Jam Transaksi
  Name=Jam Transaksi


  jenisIdentifikasiPembayarLLD =
  Description=Jenis Identifikasi Penerima (Report LLD)
  ExtensionAttribute=jenisIdentifikasiPembayarLLD
  Format=
  GroupLabel=FieldCustom
  LabelList=jenisIdentifikasiPembayarLLD
  Name=jenisIdentifikasiPembayarLLD


  jenisIdentifikasiPenerimaLLD =
  Description=Jenis Identifikasi Penerima (Report LLD)
  ExtensionAttribute=jenisIdentifikasiPenerimaLLD
  Format=
  GroupLabel=FieldCustom
  LabelList=jenisIdentifikasiPenerimaLLD
  Name=jenisIdentifikasiPenerimaLLD


  jenisRekeningLLD =
  Description=Jenis Rekening (Report LLD)
  ExtensionAttribute=jenisRekeningLLD
  Format=
  GroupLabel=FieldCustom
  LabelList=jenisRekeningLLD
  Name=jenisRekeningLLD


  jenisRekeningLLD2 =
  Description=Jenis Rekening (Report LLD) - Besides 3C & 4A4B
  ExtensionAttribute=jenisRekeningLLD2
  Format=
  GroupLabel=FieldCustom
  LabelList=jenisRekeningLLD2
  Name=jenisRekeningLLD2


  jenisTransaksiLLD =
  Access=ReadOnly
  Description=Jenis Transaksi (Report LLD)
  ExtensionAttribute=jenisTransaksiLLD
  Format=
  GroupLabel=FieldCustom
  LabelList=jenisTransaksiLLD
  Name=jenisTransaksiLLD


  jenisTransaksiLLD2 =
  Access=ReadOnly
  Description=Jenis Transaksi (Report LLD) Non 3C
  ExtensionAttribute=jenisTransaksiLLD2
  Format=
  GroupLabel=FieldCustom
  LabelList=jenisTransaksiLLD2
  Name=jenisTransaksiLLD2


  karakteristikProduk =
  Access=ReadOnly
  Description=Karakteristik Produk SP
  ExtensionAttribute=karakteristikProduk
  Format=
  GroupLabel=FieldCustom
  LabelList=karakteristikProduk
  Name=karakteristikProduk


  kategoriPembayarLLD =
  Description=Kategori Penerima (Report LLD)
  ExtensionAttribute=kategoriPembayarLLD
  Format=
  GroupLabel=FieldCustom
  LabelList=kategoriPembayarLLD
  Name=kategoriPembayarLLD


  kategoriPembayarLLD2 =
  Description=Kategori Pembayar (Report LLD)
  ExtensionAttribute=n1default
  Format=
  GroupLabel=FieldCustom
  LabelList=kategoriPembayarLLD2
  Name=kategoriPembayarLLD2


  kategoriPenerimaLLD =
  Description=Kategori Penerima (Report LLD)
  ExtensionAttribute=kategoriPenerimaLLD
  Format=
  GroupLabel=FieldCustom
  LabelList=kategoriPenerimaLLD
  Name=kategoriPenerimaLLD


  kategoriPenerimaLLD2 =
  Description=Kategori Penerima (Report LLD)
  ExtensionAttribute=n1default
  Format=
  GroupLabel=FieldCustom
  LabelList=kategoriPenerimaLLD
  Name=kategoriPenerimaLLD


  kolomKosong =
  Access=ReadOnly
  Description=
  ExtensionAttribute=kolomKosong
  Format=
  GroupLabel=FieldCustom
  LabelList=kolomKosong
  Name=kolomKosong


  kolomKosong2 =
  Access=ReadOnly
  Description=
  ExtensionAttribute=kolomKosong
  Format=
  GroupLabel=FieldCustom
  LabelList=kolomKosong2
  Name=kolomKosong2


  komponenInstrument =
  Access=ReadOnly
  Description=komponen Instrument SP
  ExtensionAttribute=komponenInstrument
  Format=
  GroupLabel=FieldCustom
  LabelList=komponenInstrument
  Name=komponenInstrument


  kursEqvUsdTradeDate =
  Access=ReadOnly
  Description=Amount * ntr USD on trade date
  ExtensionAttribute=kursEqvUsdTradeDate
  Format=
  GroupLabel=FieldCustom
  LabelList=kursEqvUsdTradeDate
  Name=kursEqvUsdTradeDate


  kursEqvUsdTradeDatePerMillion =
  Access=ReadOnly
  Description=Amount * ntr USD on trade date Per Million
  ExtensionAttribute=kursEqvUsdTradeDatePerMillion
  Format=
  GroupLabel=FieldCustom
  LabelList=kursEqvUsdTradeDatePerMillion
  Name=kursEqvUsdTradeDatePerMillion


  KursToday =
  Access=ReadOnly
  Description=Kurs EOD_MTM Today
  ExtensionAttribute=KursToday
  Format=
  GroupLabel=FieldCustom
  LabelList=KursToday
  Name=KursToday


  kursTransaksiTSD =
  Access=ReadOnly
  Description=
  ExtensionAttribute=kursTransaksiTSD
  Format=
  GroupLabel=FieldCustom
  LabelList=kursTransaksiTSD
  Name=kursTransaksiTSD


  LastPaymentDateCoupon =
  Description=Last Payment Date Coupon
  ExtensionAttribute=LastPaymentDateCoupon
  GroupLabel=FieldCustom
  LabelList=LastPaymentDateCoupon
  Name=LastPaymentDateCoupon


  LastTradeBeforeBaseGroup =
  Access=ReadOnly
  Description=
  ExtensionAttribute=LastTradeBeforeBaseGroup
  Format=
  GroupLabel=FieldCustom
  LabelList=LastTradeBeforeBaseGroup
  Name=LastTradeBeforeBaseGroup


  LastUpdatePriceBond =
  Access=ReadOnly
  Description=LastUpdatePriceBond.
  ExtensionAttribute=LastUpdatePriceBond
  Format=FiveDecimalDetailedPercentShowZero
  GroupLabel=FieldCustom
  LabelList=LastUpdatePriceBond
  Name=LastUpdatePriceBond


  LastUpdateTimePriceBond =
  Access=ReadOnly
  Description=LastUpdateTimePriceBond.
  ExtensionAttribute=LastUpdateTimePriceBond
  Format=
  GroupLabel=FieldCustom
  LabelList=LastUpdateTimePriceBond
  Name=LastUpdateTimePriceBond


  localCurr =
  Access=ReadOnly
  Description=Major Currency * EOD MTM on trade date
  ExtensionAttribute=localCurr
  Format=
  GroupLabel=FieldCustom
  LabelList=localCurr
  Name=localCurr


  localCurr2 =
  Access=ReadOnly
  Description=Major Currency * EOD MTM on trade date
  ExtensionAttribute=localCurr2
  Format=
  GroupLabel=FieldCustom
  LabelList=localCurr2
  Name=localCurr2


  LowerRate =
  ColumnAppearance=Total_background
  Description=The Lower Rate
  ExtensionAttribute=LowerRate
  Format=
  GroupLabel=FieldCustom
  Label=Lower Rate
  Name=Lower Rate


  LowerRateSP =
  Description=The Lower Rate
  ExtensionAttribute=LowerRateSP
  Format=
  GroupLabel=FieldCustom
  Label=Lower Rate SP
  Name=Lower Rate SP


  MarketPriceBondLastMonth =
  Access=ReadOnly
  Description=Bond Price on Last Date of Last Month
  ExtensionAttribute=MarketPriceBondLastMonth
  Format=
  GroupLabel=FieldCustom
  LabelList=MarketPriceBondLastMonth
  Name=MarketPriceBondLastMonth


  marketPricePurchase =
  Access=ReadOnly
  Description=Buy Amount Currency * EOD MTM last Month
  ExtensionAttribute=marketPricePurchase
  Format=
  GroupLabel=FieldCustom
  LabelList=marketPricePurchase
  Name=marketPricePurchase


  marketRatePurchase =
  Access=ReadOnly
  Description=EOD MTM last Month
  ExtensionAttribute=marketRatePurchase
  Format=
  GroupLabel=FieldCustom
  LabelList=marketRatePurchase
  Name=marketRatePurchase


  MarketValueBondLastMonth =
  Access=ReadOnly
  Description=Bond Price on Last Date of Last Month * Nominal
  ExtensionAttribute=MarketValueBondLastMonth
  Format=
  GroupLabel=FieldCustom
  LabelList=MarketValueBondLastMonth
  Name=MarketValueBondLastMonth


  MarketValueBondLastMonthIDR =
  Access=ReadOnly
  Description=Bond Price on Last Date of Last Month * Nominal IDR
  ExtensionAttribute=MarketValueBondLastMonthIDR
  Format=
  GroupLabel=FieldCustom
  LabelList=MarketValueBondLastMonthIDR
  Name=MarketValueBondLastMonthIDR


  matturityDatedBy =
  Access=ReadOnly
  Description=Matturity Date on "dd BB YYYY"
  ExtensionAttribute=matturityDatedBy
  Format=
  GroupLabel=FieldCustom
  LabelList=matturityDatedBy
  Name=matturityDatedBy


  MaturityDate =
  Access=ReadOnly
  Description=Maturity Date for each Product
  ExtensionAttribute=MaturityDate
  Format=
  GroupLabel=FieldCustom
  LabelList=MaturityDate
  Name=MaturityDate


  MaturityDate2 =
  Access=ReadOnly
  Description=Maturity Date for each Product
  ExtensionAttribute=MaturityDate2
  Format=
  GroupLabel=FieldCustom
  LabelList=MaturityDate2
  Name=MaturityDate2


  MaturityDatedbY =
  Access=ReadOnly
  Description=MaturityDatedbY
  ExtensionAttribute=MaturityDatedbY
  Format=
  GroupLabel=FieldCustom
  LabelList=MaturityDatedbY
  Name=MaturityDatedbY


  MoneyFlowFixingDate =
  Access=ReadOnly
  Description=Fixing Date in MoneyFlow
  ExtensionAttribute=MoneyFlowFixingDate
  Format=
  GroupLabel=FieldCustom
  LabelList=MoneyFlowFixingDate
  Name=MoneyFlowFixingDate


  MoneyFlowRate =
  Access=ReadOnly
  Description=Rate value based on Cashflow Type (Fixed : rate ; Float : Forwards - Spreads)
  ExtensionAttribute=MoneyFlowRate
  Format=
  GroupLabel=FieldCustom
  LabelList=MoneyFlowRate
  Name=MoneyFlowRate


  monthTransactionLLD =
  Description=Month Transaction (Report LLD)
  ExtensionAttribute=monthTransactionLLD
  Format=
  GroupLabel=FieldCustom
  LabelList=monthTransactionLLD
  Name=monthTransactionLLD


  MonthValueDate =
  Access=ReadOnly
  Description=Month Of Value Date
  ExtensionAttribute=MonthValueDate
  Format=
  GroupLabel=FieldCustom
  LabelList=MonthValueDate
  Name=MonthValueDate


  Movement =
  ColumnAppearance=Movement
  Description=The balance movement, obtained from the difference between Today's balance and the previouos day's difference
  ExtensionAttribute=Movement
  Format=Impercise
  GroupLabel=FieldCustom
  LabelList=Movement
  Name=Movement


  MTtag82 =
  Access=ReadOnly
  Description=
  ExtensionAttribute=MTtag82
  Format=
  GroupLabel=FieldCustom
  LabelList=MTtag82
  Name=MTtag82


  MTtagMaturityDate =
  Access=ReadOnly
  Description=
  ExtensionAttribute=MTtagMaturityDate
  Format=
  GroupLabel=FieldCustom
  LabelList=MTtagMaturityDate
  Name=MTtagMaturityDate


  MTtagTradeDate =
  Access=ReadOnly
  Description=
  ExtensionAttribute=MTtagTradeDate
  Format=
  GroupLabel=FieldCustom
  LabelList=MTtagTradeDate
  Name=MTtagTradeDate


  MTtagValueDate =
  Access=ReadOnly
  Description=
  ExtensionAttribute=MTtagValueDate
  Format=
  GroupLabel=FieldCustom
  LabelList=MTtagValueDate
  Name=MTtagValueDate


  MulInsCurr =
  Access=ReadOnly
  Description=Instrument Currency
  ExtensionAttribute=MulInsCurr
  Format=
  GroupLabel=FieldCustom
  LabelList=MulInsCurr
  Name=MulInsCurr


  MulInsIsin =
  Access=ReadOnly
  Description=Instrument ISIN
  ExtensionAttribute=MulInsIsin
  Format=
  GroupLabel=FieldCustom
  LabelList=MulInsIsin
  Name=MulInsIsin


  MulInsName =
  Access=ReadOnly
  Description=Instrument Name
  ExtensionAttribute=MulInsName
  Format=
  GroupLabel=FieldCustom
  LabelList=MulInsName
  Name=MulInsName


  namaPembayarLLD =
  Description=Nama Penerima (Report LLD)
  ExtensionAttribute=namaPembayarLLD
  Format=
  GroupLabel=FieldCustom
  LabelList=namaPembayarLLD
  Name=namaPembayarLLD


  namaPenerimaLLD =
  Description=Nama Penerima (Report LLD)
  ExtensionAttribute=namaPenerimaLLD
  Format=
  GroupLabel=FieldCustom
  LabelList=namaPenerimaLLD
  Name=namaPenerimaLLD


  negaraDebiturKrediturLLD =
  Description=Negara Debitur/Kreditur (Report LLD)
  ExtensionAttribute=negaraDebiturKrediturLLD
  Format=
  GroupLabel=FieldCustom
  LabelList=negaraDebiturKrediturLLD
  Name=negaraDebiturKrediturLLD


  NetAmountPBC =
  Description=Original Amount - AllowanceForLosses
  ExtensionAttribute=NetAmountPBC
  Format=
  GroupLabel=FieldCustom
  Label=NetAmountPBC
  Name=NetAmountPBC


  nilaiTransaksiLLD =
  Description=Nilai Transaksi (Report LLD)
  ExtensionAttribute=nilaiTransaksiLLD
  Format=
  GroupLabel=FieldCustom
  LabelList=nilaiTransaksiLLD
  Name=nilaiTransaksiLLD


  nominalBondsIDR =
  Description=Nominal of the Bonds in IDR
  ExtensionAttribute=nominalBondsIDR
  Format=
  GroupLabel=FieldCustom
  LabelList=nominalBondsIDR
  Name=nominalBondsIDR


  nominalBondsValas =
  Description=Nominal of the Bonds in Valas
  ExtensionAttribute=nominalBondsValas
  Format=
  GroupLabel=FieldCustom
  LabelList=nominalBondsValas
  Name=nominalBondsValas


  NominalInstrument =
  Description=Total Instrument Nominal Group per Portfolio
  ExtensionAttribute=NominalInstrument
  Format=
  GroupLabel=FieldCustom
  LabelList=NominalInstrument
  Name=NominalInstrument


  NominalPayLeg =
  Access=ReadOnly
  Description=Nominal for Pay Leg
  ExtensionAttribute=NominalPayLeg
  Format=
  GroupLabel=FieldCustom
  LabelList=NominalPayLeg
  Name=NominalPayLeg


  NominalReceiveLeg =
  Access=ReadOnly
  Description=Nominal for Recieve Leg
  ExtensionAttribute=NominalReceiveLeg
  Format=
  GroupLabel=FieldCustom
  LabelList=NominalReceiveLeg
  Name=NominalReceiveLeg


  nominalSBI =
  Access=ReadOnly
  Description=Nominal Value for SBI Product
  ExtensionAttribute=nominalSBI
  Format=
  GroupLabel=FieldCustom
  LabelList=nominalSBI
  Name=nominalSBI


  nomorIdentifikasiPembayarLLD =
  Description=Nomor Identifikasi Penerima (Report LLD)
  ExtensionAttribute=nomorIdentifikasiPembayarLLD
  Format=
  GroupLabel=FieldCustom
  LabelList=nomorIdentifikasiPembayarLLD
  Name=nomorIdentifikasiPembayarLLD


  nomorIdentifikasiPenerimaLLD =
  Description=Nomor Identifikasi Penerima (Report LLD)
  ExtensionAttribute=nomorIdentifikasiPenerimaLLD
  Format=
  GroupLabel=FieldCustom
  LabelList=nomorIdentifikasiPenerimaLLD
  Name=nomorIdentifikasiPenerimaLLD


  ntr_lastDateOnMonth =
  Access=ReadOnly
  Description=NTR EOD MtM on the last date of the month
  ExtensionAttribute=ntr_lastDateOnMonth
  Format=FiveDecimalDetailed
  GroupLabel=FieldCustom
  LabelList=ntr_lastDateOnMonth
  Name=ntr_lastDateOnMonth


  ntr_lastDateOnMonth_usd =
  Access=ReadOnly
  Description=Month Of Value Date
  ExtensionAttribute=ntr_lastDateOnMonth_usd
  Format=
  GroupLabel=FieldCustom
  LabelList=ntr_lastDateOnMonth_usd
  Name=ntr_lastDateOnMonth_usd


  ntr_tradeDate =
  Description=
  ExtensionAttribute=ntr_tradeDate
  Format=
  GroupLabel=FieldCustom
  LabelList=ntr_tradeDate
  Name=ntr_tradeDate


  ntrTradeDate =
  Access=ReadOnly
  Description=Kurs EOD_MTM Based on trade date
  ExtensionAttribute=ntrTradeDate
  Format=
  GroupLabel=FieldCustom
  LabelList=ntrTradeDate
  Name=ntrTradeDate


  OthersFairValue =
  Access=ReadOnly
  Description=The fair value of transaction
  ExtensionAttribute=OthersFairValue
  Format=
  GroupLabel=FieldCustom
  LabelList=Others (Fair Value)
  Name=Others (Fair Value)


  PartnerRefBroker =
  Description=Partner Referrence for Broker
  ExtensionAttribute=PartnerRefBroker
  Format=
  GroupLabel=FieldCustom
  Label=PartnerRefBroker
  Name=PartnerRefBroker


  PartnerRefConf =
  Description=Partner Referrence
  ExtensionAttribute=PartnerRefConf
  Format=
  GroupLabel=FieldCustom
  Label=PartnerRefConf
  Name=PartnerRefConf


  PayDayCustom =
  Access=ReadOnly
  Description=Pay Day Custom
  ExtensionAttribute=PayDayCustom
  Format=
  GroupLabel=FieldCustom
  LabelList=Pay Day
  Name=Pay Day


  PayLegBS =
  Access=ReadOnly
  Description=Buy or Sell position for Pay leg
  ExtensionAttribute=PayLegBS
  Format=
  GroupLabel=FieldCustom
  LabelList=PayLegBS
  Name=PayLegBS


  PBCBookValueOrgCurr =
  Access=ReadOnly
  Description=At Beginning acquisition + amortized
  ExtensionAttribute=PBCBookValueOrgCurr
  Format=
  GroupLabel=FieldCustom
  LabelList=PBCBookValueOrgCurr
  Name=PBCBookValueOrgCurr


  PBCBookValueOrgCurr2 =
  Access=ReadOnly
  Description=At Beginning acquisition + amortized
  ExtensionAttribute=PBCBookValueOrgCurr2
  Format=
  GroupLabel=FieldCustom
  LabelList=PBCBookValueOrgCurr2
  Name=PBCBookValueOrgCurr2


  PBCBookValueRupiah =
  Access=ReadOnly
  Description=At Beginning acquisition + amortized In Rupiah
  ExtensionAttribute=PBCBookValueRupiah
  Format=
  GroupLabel=FieldCustom
  LabelList=PBCBookValueRupiah
  Name=PBCBookValueRupiah


  PBCBookValueRupiah2 =
  Access=ReadOnly
  Description=At Beginning acquisition + amortized In Rupiah
  ExtensionAttribute=PBCBookValueRupiah2
  Format=
  GroupLabel=FieldCustom
  LabelList=PBCBookValueRupiah2
  Name=PBCBookValueRupiah2


  PBCUnamortized =
  Access=ReadOnly
  Description=At Beginning acquisition - amortized
  ExtensionAttribute=PBCUnamortized
  Format=
  GroupLabel=FieldCustom
  LabelList=PBCUnamortized
  Name=PBCUnamortized


  Pemeringkat =
  Access=ReadOnly
  Description=Institution Name who gives rating
  ExtensionAttribute=Pemeringkat
  Format=
  GroupLabel=FieldCustom
  LabelList=Pemeringkat
  Name=Pemeringkat


  Peringkat =
  Access=ReadOnly
  Description=Rating
  ExtensionAttribute=Peringkat
  Format=
  GroupLabel=FieldCustom
  LabelList=Peringkat
  Name=Peringkat


  period =
  Access=ReadOnly
  Description=
  ExtensionAttribute=period
  Format=
  GroupLabel=FieldCustom
  LabelList=period
  Name=period


  periodePembayaranBungaTSD =
  Description=periodePembayaranBunga
  ExtensionAttribute=periodePembayaranBungaTSD
  Format=
  GroupLabel=FieldCustom
  LabelList=periodePembayaranBungaTSD
  Name=periodePembayaranBungaTSD


  pledge =
  Access=ReadOnly
  Description=pledge
  ExtensionAttribute=pledge
  Format=
  GroupLabel=FieldCustom
  LabelList=pledge
  Name=pledge


  PortfolioNameInstrument =
  Access=ReadOnly
  Description=PortfolioNameInstrument
  ExtensionAttribute=PortfolioNameInstrument
  Format=
  GroupLabel=FieldCustom
  LabelList=PortfolioNameInstrument
  Name=PortfolioNameInstrument


  PortfolioTypeInstrument =
  Access=ReadOnly
  Description=PortfolioTypeInstrument
  ExtensionAttribute=PortfolioTypeInstrument
  Format=
  GroupLabel=FieldCustom
  LabelList=PortfolioTypeInstrument
  Name=PortfolioTypeInstrument


  Posisi =
  Description=Today Date
  ExtensionAttribute=Posisi
  Format=Impercise
  GroupLabel=FieldCustom
  LabelList=Posisi
  Name=Posisi


  posisiDasarForward =
  Access=ReadOnly
  Description=Posisi Dasar Forward SP
  ExtensionAttribute=posisiDasarForward
  Format=
  GroupLabel=FieldCustom
  LabelList=posisiDasarForward
  Name=posisiDasarForward


  posisiDasarOption =
  Access=ReadOnly
  Description=Posisi Dasar Option SP
  ExtensionAttribute=posisiDasarOption
  Format=
  GroupLabel=FieldCustom
  LabelList=posisiDasarOption
  Name=posisiDasarOption


  PosisiYst =
  Description=Yesterday Date
  ExtensionAttribute=PosisiYst
  Format=Impercise
  GroupLabel=FieldCustom
  LabelList=Posisi (Yesterday)
  Name=Posisi (Yesterday)


  PostingDate =
  Access=ReadOnly
  Description=Trade Date on "dd BB YYYY"
  ExtensionAttribute=PostingDate
  Format=
  GroupLabel=FieldCustom
  LabelList=PostingDate
  Name=PostingDate


  premiumRate =
  Description=premiumRate
  ExtensionAttribute=premiumRate
  Format=
  GroupLabel=FieldCustom
  Label=premiumRate
  Name=premiumRate


  PrevEffDate =
  ColumnAppearance=Total_background
  Description=Effective Date - 1
  ExtensionAttribute=PrevEffDate
  Format=
  GroupLabel=FieldCustom
  Label=Previous Effective Date
  Name=Previous Effective Date


  PrevEffDate2 =
  ColumnAppearance=Total_background
  Description=Effective Date - 1
  ExtensionAttribute=PrevEffDate2
  Format=
  GroupLabel=FieldCustom
  Label=Previous Effective Date 2
  Name=Previous Effective Date 2


  PrevPrevEffDate =
  ColumnAppearance=Total_background
  Description=Effective Date - 2
  ExtensionAttribute=PrevPrevEffDate
  Format=
  GroupLabel=FieldCustom
  Label=Previous Previous Effective Date
  Name=Previous Previous Effective Date


  PrevPrevEffDate2 =
  ColumnAppearance=Total_background
  Description=Effective Date - 2
  ExtensionAttribute=PrevPrevEffDate2
  Format=
  GroupLabel=FieldCustom
  Label=Previous Previous Effective Date 2
  Name=Previous Previous Effective Date 2


  PrevPrevPrice =
  ColumnAppearance=Total_background
  Description=Price on two days ago. Calculation: Price(Value Day - 2).
  ExtensionAttribute=PrevPrevPrice
  Format=
  GroupLabel=FieldCustom
  Label=Previous Previous Price
  Name=Previous Previous Price


  PrevPrevPrice2 =
  ColumnAppearance=Total_background
  Description=Price on two days ago. Calculation: Price(Value Day - 2).
  ExtensionAttribute=PrevPrevPrice2
  Format=
  GroupLabel=FieldCustom
  Label=Previous Previous Price 2
  Name=Previous Previous Price 2


  PrevPrice =
  ColumnAppearance=Total_background
  Description=Price on yesterday. Calculation: Price(Value Day - 1).
  ExtensionAttribute=PrevPrice
  Format=
  GroupLabel=FieldCustom
  Label=Previous Price
  Name=Previous Price


  PrevPrice2 =
  ColumnAppearance=Total_background
  Description=Price on yesterday. Calculation: Price(Value Day - 1).
  ExtensionAttribute=PrevPrice2
  Format=
  GroupLabel=FieldCustom
  Label=Previous Price 2
  Name=Previous Price 2


  priceYield =
  Access=ReadOnly
  Description=price Yield.
  ExtensionAttribute=priceYield
  Format=
  GroupLabel=FieldCustom
  LabelList=priceYield
  Name=priceYield


  ProductFullNameSP =
  Access=ReadOnly
  Description=FullName Product for Structure Product
  ExtensionAttribute=ProductFullNameSP
  Format=
  GroupLabel=FieldCustom
  LabelList=ProductFullNameSP
  Name=ProductFullNameSP


  productTypeCustom =
  Description=
  ExtensionAttribute=productTypeCustom
  GroupLabel=FieldCustom
  Label=productTypeCustom
  Name=productTypeCustom


  PutCallCustomerView =
  Access=ReadOnly
  Description=PutCallCustomerView
  ExtensionAttribute=PutCallCustomerView
  Format=
  GroupLabel=FieldCustom
  LabelList=PutCallCustomerView
  Name=PutCallCustomerView


  QualityOfPlacement =
  Description=The Quality Of Placement
  ExtensionAttribute=qualityOfPlacement
  GroupLabel=FieldCustom
  LabelList=QualityOfPlacement
  Name=QualityOfPlacement


  rate_lastDateOnMonth_usd =
  Access=ReadOnly
  Description=rate USD
  ExtensionAttribute=rate_lastDateOnMonth_usd
  Format=
  GroupLabel=FieldCustom
  LabelList=rate_lastDateOnMonth_usd
  Name=rate_lastDateOnMonth_usd


  RateBuyAudit =
  Access=ReadOnly
  Description=rate Value
  ExtensionAttribute=RateBuyAudit
  Format=
  GroupLabel=FieldCustom
  LabelList=Rate (1)
  Name=Rate (1)


  RateCashflow =
  Access=ReadOnly
  Description=Cashflow Rate (Fixed : Rate ; Float : Forward - Spread)
  ExtensionAttribute=RateCashflow
  Format=FiveDecimalDetailedPercentShowZero
  GroupLabel=FieldCustom
  LabelList=RateCashflow
  Name=RateCashflow


  RateMerge =
  Access=ReadOnly
  Description=rate Value
  ExtensionAttribute=RateMerge
  Format=
  GroupLabel=FieldCustom
  LabelList=Rate Merge
  Name=Rate Merge


  RateSellAudit =
  Access=ReadOnly
  Description=rate Value
  ExtensionAttribute=RateSellAudit
  Format=
  GroupLabel=FieldCustom
  LabelList=Rate (2)
  Name=Rate (2)


  ReceiveLegBS =
  Access=ReadOnly
  Description=Buy or Sell position for receive leg
  ExtensionAttribute=ReceiveLegBS
  Format=
  GroupLabel=FieldCustom
  LabelList=ReceiveLegBS
  Name=ReceiveLegBS


  Reff =
  <ProdType>.=
  ColumnAppearance=Total_background
  Description=The combining number between TradeNo, Type and Prodcode. Format: <trx_trdnbr></><insType></><ProdType>.
  ExtensionAttribute=Reff
  Format=
  GroupLabel=FieldCustom
  Label=Reff
  Name=Reff


  Reff2 =
  <ProdType>.=
  ColumnAppearance=Total_background
  Description=The combining number between TradeNoProdcode. Format: <trx_trdnbr></><ProdType>.
  ExtensionAttribute=Reff2
  Format=
  GroupLabel=FieldCustom
  Label=Reff2
  Name=Reff2


  RemainingNominalPosition =
  Access=ReadOnly
  Description=
  ExtensionAttribute=RemainingNominalPosition
  Format=
  GroupLabel=FieldCustom
  LabelList=RemainingNominalPosition
  Name=RemainingNominalPosition


  RepoRo =
  Access=ReadOnly
  Description=Repo Amount of Instrument
  ExtensionAttribute=RepoRo
  Format=
  GroupLabel=FieldCustom
  LabelList=RepoRo
  Name=RepoRo


  RollPeriodPayLeg =
  Access=ReadOnly
  Description=Roll Period for Pay Leg
  ExtensionAttribute=RollPeriodPayLeg
  Format=
  GroupLabel=FieldCustom
  LabelList=RollPeriodPayLeg
  Name=RollPeriodPayLeg


  RollPeriodReceiveLeg =
  Access=ReadOnly
  Description=Roll Period for Recieve Leg
  ExtensionAttribute=RollPeriodReceiveLeg
  Format=
  GroupLabel=FieldCustom
  LabelList=RollPeriodReceiveLeg
  Name=RollPeriodReceiveLeg


  sandiBankLLD =
  Description=Sandi Bank (Report LLD)
  ExtensionAttribute=sandiBankLLD
  Format=
  GroupLabel=FieldCustom
  LabelList=sandiBankLLD
  Name=sandiBankLLD


  SCHED_Pay_Freq =
  Access=ReadOnly
  Description=Available for Sale
  ExtensionAttribute=SCHED_Pay_Freq
  Format=
  GroupLabel=FieldCustom
  LabelList=SCHED_Pay_Freq
  Name=SCHED_Pay_Freq


  SCHED_Receive_Freq =
  Access=ReadOnly
  Description=Available for Sale
  ExtensionAttribute=SCHED_Receive_Freq
  Format=
  GroupLabel=FieldCustom
  LabelList=SCHED_Receive_Freq
  Name=SCHED_Receive_Freq


  SecIDBond =
  Access=ReadOnly
  Description=Security ID for instrument on Product Bond
  ExtensionAttribute=SecIDBond
  Format=
  GroupLabel=FieldCustom
  LabelList=SECURITY ID
  Name=SECURITY ID


  SecurityDifference =
  Access=ReadOnly
  Description=Balance NTCS + Repo + Pledge - Balance Custodian
  ExtensionAttribute=SecurityDifference
  Format=
  GroupLabel=FieldCustom
  LabelList=SecurityDifference
  Name=SecurityDifference


  sellPremium =
  Access=ReadOnly
  Description=Get Premium Value if Nmminal is Negative.
  ExtensionAttribute=sellPremium
  Format=
  GroupLabel=FieldCustom
  LabelList=sellPremium
  Name=sellPremium


  SettlePriceInsMtM =
  Description=Settle Price for lower Price
  ExtensionAttribute=SettlePriceInsMtM
  Format=
  GroupLabel=FieldCustom
  Label=SettlePriceInsMtM
  Name=SettlePriceInsMtM


  SettlePriceInsMtM_BBIBPA =
  Description=Settle Price for lower Price
  ExtensionAttribute=SettlePriceInsMtM_BBIBPA
  Format=
  GroupLabel=FieldCustom
  Label=SettlePriceInsMtM_BBIBPA
  Name=SettlePriceInsMtM_BBIBPA


  SourceUse =
  Description=BID of Market that Used on EOD_MtM
  ExtensionAttribute=SourceUse
  GroupLabel=FieldCustom
  LabelList=Source Used
  Name=Source Used


  SpecificGlnoUsed =
  Access=ReadOnly
  Description=Specific GLNO That used on Trade based on product type & category
  ExtensionAttribute=SpecificGlnoUsed
  Format=
  GroupLabel=FieldCustom
  LabelList=SpecificGlnoUsed
  Name=SpecificGlnoUsed


  SpecificGlnoUsed2 =
  Description=Specific Glno Used from Trade Date Sell RPL with GLNO Head "460xxx"
  ExtensionAttribute=SpecificGlnoUsed2
  Format=
  GroupLabel=FieldCustom
  LabelList=SpecificGlnoUsed2
  Name=SpecificGlnoUsed2


  SpreadValInReset =
  Access=ReadOnly
  Description=SpreadValInReset
  ExtensionAttribute=SpreadValInReset
  Format=
  GroupLabel=FieldCustom
  LabelList=SpreadValInReset
  Name=SpreadValInReset


  StartCouponDate =
  Access=ReadOnly
  Description=Date coupon start
  ExtensionAttribute=StartCouponDate
  Format=
  GroupLabel=FieldCustom
  LabelList=Start Coupon Date
  Name=Start Coupon Date


  StartDayPayment =
  Access=ReadOnly
  Description=Start Day From Last Payment
  ExtensionAttribute=StartDayPayment
  Format=
  GroupLabel=FieldCustom
  LabelList=StartDayPayment
  Name=StartDayPayment


  statusPembayarLLD =
  Description=Status Pembayar (Report LLD)
  ExtensionAttribute=statusPembayarLLD
  Format=
  GroupLabel=FieldCustom
  LabelList=statusPembayarLLD
  Name=statusPembayarLLD


  statusPembayarLLD2 =
  Description=Status Pembayar (Report LLD)
  ExtensionAttribute=n1default
  Format=
  GroupLabel=FieldCustom
  LabelList=statusPembayarLLD
  Name=statusPembayarLLD


  statusPenerimaLLD =
  Description=Status Penerima (Report LLD)
  ExtensionAttribute=statusPenerimaLLD
  Format=
  GroupLabel=FieldCustom
  LabelList=statusPenerimaLLD
  Name=statusPenerimaLLD


  statusPenerimaLLD2 =
  Description=Status Penerima (Report LLD)
  ExtensionAttribute=n1default
  Format=
  GroupLabel=FieldCustom
  LabelList=statusPenerimaLLD
  Name=statusPenerimaLLD


  strikePrice2TSD =
  Access=ReadOnly
  Description=
  ExtensionAttribute=strikePrice2TSD
  Format=
  GroupLabel=FieldCustom
  LabelList=strikePrice2TSD
  Name=strikePrice2TSD


  StrikeValueHigher =
  Access=ReadOnly
  Description=The Highest strike in legs from trade option
  ExtensionAttribute=StrikeValueHigher
  Format=
  GroupLabel=FieldCustom
  LabelList=StrikeValueHigher
  Name=StrikeValueHigher


  StrikeValueLower =
  Access=ReadOnly
  Description=The lowest strike in legs from trade option
  ExtensionAttribute=StrikeValueLower
  Format=FourDecimalBehind
  GroupLabel=FieldCustom
  LabelList=StrikeValueLower
  Name=StrikeValueLower


  tanggalAwalForwardTSD =
  Access=ReadOnly
  Description=Trade Date (only for Bond Forward)
  ExtensionAttribute=tanggalAwalForwardTSD
  Format=
  GroupLabel=FieldCustom
  LabelList=tanggalAwalForwardTSD
  Name=tanggalAwalForwardTSD


  tanggalEfektifTSD =
  Access=ReadOnly
  Description=Value Date except Bond Forward (Trade Date)
  ExtensionAttribute=tanggalEfektifTSD
  Format=
  GroupLabel=FieldCustom
  LabelList=tanggalEfektifTSD
  Name=tanggalEfektifTSD


  tanggalJatuhTempoDokumenUnderlying =
  Description=If LCS Yes, AdditionalInfo - Underlying Mat Date
  ExtensionAttribute=tanggalJatuhTempoDokumenUnderlying
  Format=
  GroupLabel=FieldCustom
  LabelList=tanggalJatuhTempoDokumenUnderlying
  Name=tanggalJatuhTempoDokumenUnderlying


  tanggalJatuhTempoTSD =
  Access=ReadOnly
  Description=
  ExtensionAttribute=tanggalJatuhTempoTSD
  Format=
  GroupLabel=FieldCustom
  LabelList=tanggalJatuhTempoTSD
  Name=tanggalJatuhTempoTSD


  tanggalValutaTSD =
  Access=ReadOnly
  Description=ValueDate Except SWAP
  ExtensionAttribute=tanggalValutaTSD
  Format=
  GroupLabel=FieldCustom
  LabelList=tanggalValutaTSD
  Name=tanggalValutaTSD


  TaxDifferenceJournal =
  Description=Journal Trade Tax - Trade Tax in Absolute
  ExtensionAttribute=TaxDifferenceJournal
  Format=
  GroupLabel=FieldCustom
  Label=Tax Difference
  Name=Tax Difference


  taxWht =
  Access=ReadOnly
  Description=WHT Value Base on Currency Used
  ExtensionAttribute=taxWhtIdr
  Format=
  GroupLabel=FieldCustom
  LabelList=taxWht
  Name=taxWht


  taxWhtValNeg =
  Access=ReadOnly
  Description=WHT Value Base on Currency Used (Valas Negative)
  ExtensionAttribute=taxWhtValNeg
  Format=
  GroupLabel=FieldCustom
  LabelList=taxWhtValNeg
  Name=taxWht


  taxWhtValPos =
  Access=ReadOnly
  Description=WHT Value Base on Currency Used (Valas Positive)
  ExtensionAttribute=taxWhtValPos
  Format=
  GroupLabel=FieldCustom
  LabelList=taxWhtValPos
  Name=taxWht


  Tenor2 =
  Access=ReadOnly
  Description=EndDate - StartDate
  ExtensionAttribute=Tenor2
  Format=
  GroupLabel=FieldCustom
  LabelList=Tenor2
  Name=Tenor2


  TenorFarNear =
  Access=ReadOnly
  Description=Far leg Date - Near Leg Date
  ExtensionAttribute=TenorFarNear
  Format=
  GroupLabel=FieldCustom
  LabelList=TenorFarNear
  Name=TenorFarNear


  TenorFX =
  Access=ReadOnly
  Description=Value Date - Trade Date
  ExtensionAttribute=TenorFX
  Format=
  GroupLabel=FieldCustom
  LabelList=TenorFX
  Name=TenorFX


  TenorSukuBungaAcuanTSD =
  Description=TenorSukuBungaAcuanTSD
  ExtensionAttribute=TenorSukuBungaAcuanTSD
  Format=
  GroupLabel=FieldCustom
  LabelList=TenorSukuBungaAcuanTSD
  Name=TenorSukuBungaAcuanTSD


  TodayEffDateCollateral =
  ColumnAppearance=Total_background
  Description=Price on yesterday. Calculation: Price(Value Day).
  ExtensionAttribute=TodayEffDateCollateral
  Format=
  GroupLabel=FieldCustom
  Label=TodayEffDateCollateral
  Name=TodayEffDateCollateral


  TodayEffDateCollateral2 =
  ColumnAppearance=Total_background
  Description=Price on yesterday. Calculation: Price(Value Day).
  ExtensionAttribute=TodayEffDateCollateral2
  Format=
  GroupLabel=FieldCustom
  Label=TodayEffDateCollateral2
  Name=TodayEffDateCollateral2


  TodayPriceCollateral =
  ColumnAppearance=Total_background
  Description=Price on yesterday. Calculation: Price(Value Day).
  ExtensionAttribute=TodayPriceCollateral
  Format=SixDecimalDetailed
  GroupLabel=FieldCustom
  Label=TodayPriceCollateral
  Name=TodayPriceCollateral


  TodayPriceCollateral2 =
  ColumnAppearance=Total_background
  Description=Price on yesterday. Calculation: Price(Value Day).
  ExtensionAttribute=TodayPriceCollateral2
  Format=SixDecimalDetailed
  GroupLabel=FieldCustom
  Label=TodayPriceCollateral2
  Name=TodayPriceCollateral2


  TotalQuantity =
  Access=ReadOnly
  Description=The total amount of the transaction
  ExtensionAttribute=TotalQuantity
  Format=
  GroupLabel=FieldCustom
  LabelList=TotalQuantity
  Name=TotalQuantity


  TradeBuyUsed =
  Access=ReadOnly
  Description=Trades Buy that used on trade sell
  ExtensionAttribute=TradeBuyUsed
  Format=
  GroupLabel=FieldCustom
  LabelList=TradeBuyUsed
  Name=TradeBuyUsed


  tradeDatedBY =
  Access=ReadOnly
  Description=Maturity Date for each Product
  ExtensionAttribute=tradeDatedBY
  Format=
  GroupLabel=FieldCustom
  LabelList=tradeDatedBY
  Name=tradeDatedBY


  TradeFXExcRate =
  Description=formatted Trade FX Exchange Rate for one reporting
  ExtensionAttribute=TradeFXExcRate
  GroupLabel=FieldCustom
  LabelList=Exchange Rate
  Name=Exchange Rate


  tradePrincipal =
  Access=ReadOnly
  Description=Amount * Price
  ExtensionAttribute=tradePrincipal
  Format=
  GroupLabel=FieldCustom
  LabelList=tradePrincipal
  Name=tradePrincipal


  TradesBuysUsed =
  Access=ReadOnly
  Description=
  ExtensionAttribute=TradesBuysUsed
  Format=
  GroupLabel=FieldCustom
  LabelList=TradesBuysUsed
  Name=TradesBuysUsed


  TransactionExposureBuyer =
  Description=If Fair Market after Haircuts - End Cash Repo < 0
  ExtensionAttribute=TransactionExposureBuyer
  Format=
  GroupLabel=FieldCustom
  Label=TransactionExposureBuyer
  Name=TransactionExposureBuyer


  TransactionExposureSeller =
  Description=If Fair Market after Haircuts - End Cash Repo > 0
  ExtensionAttribute=TransactionExposureSeller
  Format=
  GroupLabel=FieldCustom
  Label=TransactionExposureSeller
  Name=TransactionExposureSeller


  TransactionNoLLD =
  Description=Transaction Number (Report LLD)
  ExtensionAttribute=TransactionNoLLD
  Format=
  GroupLabel=FieldCustom
  LabelList=TransactionNoLLD
  Name=TransactionNoLLD


  TRDQuantity =
  Access=ReadOnly
  Description=Available for Sale
  ExtensionAttribute=TRDQuantity
  Format=
  GroupLabel=FieldCustom
  LabelList=TRDQuantity
  Name=TRDQuantity


  typeOfSecurities =
  Access=ReadOnly
  Description=typeOfSecurities
  ExtensionAttribute=typeOfSecurities
  Format=
  GroupLabel=FieldCustom
  LabelList=typeOfSecurities
  Name=typeOfSecurities


  UnamortisedPBC =
  Access=ReadOnly
  Description=End Interest - Amorised
  ExtensionAttribute=UnamortisedPBC
  Format=
  GroupLabel=FieldCustom
  LabelList=UnamortisedPBC
  Name=UnamortisedPBC


  UnamortisedPBC2 =
  Access=ReadOnly
  Description=End Interest - Amorised
  ExtensionAttribute=UnamortisedPBC2
  Format=
  GroupLabel=FieldCustom
  LabelList=UnamortisedPBC2
  Name=UnamortisedPBC2


  UnAmortizedAmount2 =
  Access=ReadOnly
  Description=Bill -> AtBeginningAcq - AmortizedAmount; DEPO -> EndInterest - AmortizedAmount
  ExtensionAttribute=UnAmortizedAmount2
  Format=
  GroupLabel=FieldCustom
  LabelList=UnAmortizedAmount2
  Name=UnAmortizedAmount2


  UnAmortizedAmount3 =
  Access=ReadOnly
  Description=
  ExtensionAttribute=UnAmortizedAmount3
  Format=
  GroupLabel=FieldCustom
  LabelList=UnAmortizedAmount3
  Name=UnAmortizedAmount3


  UnderlyingThreshold2 =
  Description=Transaction type category (accumulative or per transaction), only spot can be accumulative
  ExtensionAttribute=UnderlyingThreshold2
  GroupLabel=FieldCustom
  Label=Underlying Threshold 2
  Name=Underlying Threshold 2


  UnderlyingUsedPerCp =
  Access=ReadOnly
  Description=UnderlyingUsedPerCp Per Month
  ExtensionAttribute=UnderlyingUsedPerCp
  Format=
  GroupLabel=FieldCustom
  LabelList=UnderlyingUsedPerCp
  Name=UnderlyingUsedPerCp


  unitKerjaLLD =
  Description=Unit Kerja (Report LLD)
  ExtensionAttribute=unitKerjaLLD
  Format=
  GroupLabel=FieldCustom
  LabelList=unitKerjaLLD
  Name=unitKerjaLLD


  unrelizedInstrument =
  Access=ReadOnly
  Description=unrelizedInstrument
  ExtensionAttribute=unrelizedInstrument
  Format=
  GroupLabel=FieldCustom
  LabelList=unrelizedInstrument
  Name=unrelizedInstrument


  updatePriceInsMtM =
  Description=Bid Price for lower Price
  ExtensionAttribute=updatePriceInsMtM
  Format=
  GroupLabel=FieldCustom
  Label=updatePriceInsMtM
  Name=updatePriceInsMtM


  updatePriceInsMtM_IBPA =
  Description=Update Price for BB IBPA
  ExtensionAttribute=updatePriceInsMtM_IBPA
  Format=
  GroupLabel=FieldCustom
  Label=updatePriceInsMtM_IBPA
  Name=updatePriceInsMtM_IBPA


  UpdatePriceUser =
  Access=ReadOnly
  Description=User or System who update the EOD MtM price
  ExtensionAttribute=UpdatePriceUser
  Format=
  GroupLabel=FieldCustom
  LabelList=UpdatePriceUser
  Name=UpdatePriceUser


  UpdateTimeRating =
  Access=ReadOnly
  Description=Last Update for Instrument Rating
  ExtensionAttribute=UpdateTimeRating
  Format=
  GroupLabel=FieldCustom
  LabelList=UpdateTimeRating
  Name=UpdateTimeRating


  updateTimeSimulatedLive =
  Description=Journal Update Time From Simulated to Live
  ExtensionAttribute=updateTimeSimulatedLive
  GroupLabel=FieldCustom
  LabelList=updateTimeSimulatedLive
  Name=updateTimeSimulatedLive


  UpperRate =
  ColumnAppearance=Total_background
  Description=The upper rate
  ExtensionAttribute=UpperRate
  Format=
  GroupLabel=FieldCustom
  Label=Upper Rate
  Name=Upper Rate


  UpperRateSP =
  Description=The Upper Rate SP
  ExtensionAttribute=UpperRateSP
  Format=fiveComma
  GroupLabel=FieldCustom
  Label=Upper Rate SP
  Name=Upper Rate SP


  ValueDateCollateral =
  Description=Value Date from Collateral Trade
  ExtensionAttribute=valueDateCollateral
  GroupLabel=FieldCustom
  LabelList=Value Date Collateral
  Name=Value Date Collateral


  valueDateCustom =
  Description=Value Date from Collateral Trade
  ExtensionAttribute=valueDateCustom
  GroupLabel=FieldCustom
  LabelList=Value Date Custom
  Name=Value Date Custom


  valueDateDerivatives =
  Description=Value Date Custom for Option
  ExtensionAttribute=valueDateDerivatives
  GroupLabel=FieldCustom
  LabelList=valueDateDerivatives
  Name=valueDateDerivatives


  ValueDateSell =
  Access=ReadOnly
  Description=value Date on "dd BB YYYY"
  ExtensionAttribute=ValueDateSell
  Format=
  GroupLabel=FieldCustom
  LabelList=ValueDateSell
  Name=ValueDateSell


  valutaDasarApolo =
  Access=ReadOnly
  Description=Major Currency
  ExtensionAttribute=valutaDasarApolo
  Format=
  GroupLabel=FieldCustom
  LabelList=valutaDasarApolo
  Name=valutaDasarApolo


  valutaDasarJnsSukuBungaAcuanTSD =
  Description=valutaDasarJnsSukuBungaAcuanTSD
  ExtensionAttribute=valutaDasarJnsSukuBungaAcuanTSD
  Format=
  GroupLabel=FieldCustom
  LabelList=valutaDasarJnsSukuBungaAcuanTSD
  Name=valutaDasarJnsSukuBungaAcuanTSD


  valutaDasarJnsSukuBungaTSD =
  Access=ReadOnly
  Description=valutaDasarJnsSukuBungaTSD
  ExtensionAttribute=valutaDasarJnsSukuBungaTSD
  Format=
  GroupLabel=FieldCustom
  LabelList=valutaDasarJnsSukuBungaTSD
  Name=valutaDasarJnsSukuBungaTSD


  valutaDasarPremiumSukuBungaAcuan =
  Description=valutaDasarPremiumSukuBungaAcuan
  ExtensionAttribute=valutaDasarPremiumSukuBungaAcuan
  Format=
  GroupLabel=FieldCustom
  LabelList=valutaDasarPremiumSukuBungaAcuan
  Name=valutaDasarPremiumSukuBungaAcuan


  valutaDasarPremiumSukuBungaAcuanTSD =
  Description=valutaDasarPremiumSukuBungaAcuanTSD
  ExtensionAttribute=valutaDasarPremiumSukuBungaAcuanTSD
  Format=
  GroupLabel=FieldCustom
  LabelList=valutaDasarPremiumSukuBungaAcuanTSD
  Name=valutaDasarPremiumSukuBungaAcuanTSD


  valutaDasarSukuBungaTetap =
  Description=valutaDasarSukuBungaTetap
  ExtensionAttribute=valutaDasarSukuBungaTetap
  Format=
  GroupLabel=FieldCustom
  LabelList=valutaDasarSukuBungaTetap
  Name=valutaDasarSukuBungaTetap


  valutaDasarSukuBungaTetapTSD =
  Description=valutaDasarSukuBungaTetapTSD
  ExtensionAttribute=valutaDasarSukuBungaTetapTSD
  Format=
  GroupLabel=FieldCustom
  LabelList=valutaDasarSukuBungaTetapTSD
  Name=valutaDasarSukuBungaTetapTSD


  valutaDokumenUnderlying =
  Description=BO30 Currency
  ExtensionAttribute=valutaDokumenUnderlying
  GroupLabel=FieldCustom
  LabelList=valutaDokumenUnderlying
  Name=valutaDokumenUnderlying


  valutaLawanJnsSukuBunga =
  Description=valutaLawanJnsSukuBunga
  ExtensionAttribute=valutaLawanJnsSukuBunga
  Format=
  GroupLabel=FieldCustom
  LabelList=valutaLawanJnsSukuBunga
  Name=valutaLawanJnsSukuBunga


  valutaLawanJnsSukuBungaAcuan =
  Description=valutaLawanJnsSukuBungaAcuan
  ExtensionAttribute=valutaLawanJnsSukuBungaAcuan
  Format=
  GroupLabel=FieldCustom
  LabelList=valutaLawanJnsSukuBungaAcuan
  Name=valutaLawanJnsSukuBungaAcuan


  valutaLawanJnsSukuBungaAcuanTSD =
  Description=valutaLawanJnsSukuBungaAcuanTSD
  ExtensionAttribute=valutaLawanJnsSukuBungaAcuanTSD
  Format=
  GroupLabel=FieldCustom
  LabelList=valutaLawanJnsSukuBungaAcuanTSD
  Name=valutaLawanJnsSukuBungaAcuanTSD


  valutaLawanJnsSukuBungaTSD =
  Access=ReadOnly
  Description=valutaLawanJnsSukuBungaTSD
  ExtensionAttribute=valutaLawanJnsSukuBungaTSD
  Format=
  GroupLabel=FieldCustom
  LabelList=valutaLawanJnsSukuBungaTSD
  Name=valutaLawanJnsSukuBungaTSD


  valutaLawanPremiumSukuBungaAcuanTSD =
  Description=valutaLawanPremiumSukuBungaAcuanTSD
  ExtensionAttribute=valutaLawanPremiumSukuBungaAcuanTSD
  Format=
  GroupLabel=FieldCustom
  LabelList=valutaLawanPremiumSukuBungaAcuanTSD
  Name=valutaLawanPremiumSukuBungaAcuanTSD


  valutaLawanSukuBungaTetap =
  Description=valutaLawanSukuBungaTetap
  ExtensionAttribute=valutaLawanSukuBungaTetap
  Format=
  GroupLabel=FieldCustom
  LabelList=valutaLawanSukuBungaTetap
  Name=valutaLawanSukuBungaTetap


  valutaLawanSukuBungaTetapTSD =
  Description=valutaLawanSukuBungaTetapTSD
  ExtensionAttribute=valutaLawanSukuBungaTetapTSD
  Format=
  GroupLabel=FieldCustom
  LabelList=valutaLawanSukuBungaTetapTSD
  Name=valutaLawanSukuBungaTetapTSD


  valutaLawanTenorSukuBungaAcuanTSD =
  Description=valutaLawanTenorSukuBungaAcuanTSD
  ExtensionAttribute=valutaLawanTenorSukuBungaAcuanTSD
  Format=
  GroupLabel=FieldCustom
  LabelList=valutaLawanTenorSukuBungaAcuanTSD
  Name=valutaLawanTenorSukuBungaAcuanTSD


  VariabelMendasariTSD =
  Access=ReadOnly
  Description=
  ExtensionAttribute=VariabelMendasariTSD
  Format=
  GroupLabel=FieldCustom
  LabelList=VariabelMendasariTSD
  Name=VariabelMendasariTSD


  variableDasarForward =
  Access=ReadOnly
  Description=Variable Dasar Forward SP
  ExtensionAttribute=variableDasarForward
  Format=
  GroupLabel=FieldCustom
  LabelList=variableDasarForward
  Name=variableDasarForward


  variableDasarOption =
  Access=ReadOnly
  Description=Variable Dasar Option SP
  ExtensionAttribute=variableDasarOption
  Format=
  GroupLabel=FieldCustom
  LabelList=variableDasarOption
  Name=variableDasarOption


  variableDasarSwap =
  Access=ReadOnly
  Description=Variable Dasar SWAP SP
  ExtensionAttribute=variableDasarSwap
  Format=
  GroupLabel=FieldCustom
  LabelList=variableDasarSwap
  Name=variableDasarSwap


  WeekNumber =
  ColumnAppearance=Total_background
  Description=Week in number.
  ExtensionAttribute=WeekNumber
  Format=
  GroupLabel=FieldCustom
  Label=Week Number
  Name=Week Number


  WITHGAINAMTAFS =
  Description=Amount (GLNO : 46011102)
  ExtensionAttribute=WITHGAINAMTAFS
  GroupLabel=FieldCustom
  LabelList=WITHGAINAMTAFS
  Name=WITHGAINAMTAFS


  WITHGAINAMTTRD =
  Description=Amount (GLNO : 46011101)
  ExtensionAttribute=WITHGAINAMTTRD
  GroupLabel=FieldCustom
  LabelList=WITHGAINAMTTRD
  Name=WITHGAINAMTTRD


  yearTransactionLLD =
  Description=Year Transaction (Report LLD)
  ExtensionAttribute=yearTransactionLLD
  Format=
  GroupLabel=FieldCustom
  LabelList=yearTransactionLLD
  Name=yearTransactionLLD


  yieldSuratBerharga =
  Description=Yield from the Collateral
  ExtensionAttribute=yieldSuratBerharga
  Format=
  GroupLabel=FieldCustom
  LabelList=yieldSuratBerharga
  Name=yieldSuratBerharga


}

decls[FCustomMethod] {
}

clx FTrade [FCustomMethod] {
  BuySellCustomerGrouper =
  Definition=BuySellCustomerGrouper:string read
  Function=CustomizedGrouperBO.BuySellCustomerGrouper


  Curr1Grouper =
  Definition=Curr1Grouper:string read
  Function=CustomizedGrouperBO.currencyBaseOnCategory


  customerRankGrouper =
  Definition=customerRankGrouper:string read
  Function=CustomizedGrouperBO.getRank


  MajorCurrGrouper =
  Definition=MajorCurrGrouper:string read
  Function=CustomizedGrouperBO.majorCurrGrouper


}

decls[FExtensionAttribute] {
  "AbsoluteAmountOfTrade" ( "sheet columns.journalsheet" ) "";
  "AmortizedAmount2" ( "sheet columns.tradesheet" ) "";
  "balanceNTCS" ( "sheet columns.portfoliosheet" ) "";
  "EquivalentAmountIDR" ( "sheet columns.journalsheet" ) "";
  "karakteristikProduk" ( "sheet columns.tradesheet" ) "";
  "Pemeringkat" ( "sheet columns.portfoliosheet" ) "";
  "Peringkat" ( "sheet columns.portfoliosheet" ) "";
  "pledge" ( "sheet columns.portfoliosheet" ) "";
  "RepoRo" ( "sheet columns.portfoliosheet" ) "";
  "updateTimeSimulatedLive" ( "sheet columns.journalsheet" ) "";
}

clx FASQLQueryFolder [FExtensionAttribute] {
  EquivalentAmountIDRSett = py("Report_Python_BO", context).TotalAmountIdrFasqlSettlement(true) / 1000000000;
  Frequency = py("Report_Python_BO", context).TotalAmountIdrFasqlSettlement(false);
}

clx FCashFlowMoneyFlow [FExtensionAttribute] {
  RateCashflow = cashAnalysisForwardRate;
}

clx FConfirmation [FExtensionAttribute] {
  CurrBuyAudit = py("Report_Python_BO", context).currencyBaseOnCategory(true, object.Trade);
  CurrSellAudit = py("Report_Python_BO", context).currencyBaseOnCategory(false, object.Trade);
  MTtag = py("Report_Python_BO", context).MTtag82(object);
  MTtag82 = py("Report_Python_BO", context).getMTtag(object, [":82A:"], "SwiftReader");
  MTtagMaturityDate = py("Report_Python_BO", context).getMTtag(object, [":30P:"]);
  MTtagTradeDate = py("Report_Python_BO", context).getMTtag(object, [":30T:", ":30:"]);
  MTtagValueDate = py("Report_Python_BO", context).getMTtag(object, [":30V:", ":31E:"]);
  PartnerRefBroker = py("Report_Python_BO", context).PartnerRefConf(object, "SwiftWriter");
  PartnerRefConf = py("Report_Python_BO", context).PartnerRefConf(object, "SwiftReader");
}

clx FInstrumentAndTrades [FExtensionAttribute] {
  AccumulativeOrPerTransaction = ;
  AmountAccumulativePerMonth = ;
  AveragePrice = ;
  BIDSourceBGN = ;
  DerivativesPayables = ;
  DerivativesReceivables = ;
  DescriptionUnderlying = ;
  EquivalentAmountIDR = object.trade.nominal * object.trade.instrument.FxRate;
  Frequency = object.Trades.Size;
  LowerRate = ;
  OthersFairValue = ;
  Pemeringkat = ;
  Peringkat = ;
  PrevEffDate = nil;
  PrevPrevEffDate = nil;
  PrevPrevPrice = nil;
  PrevPrice = nil;
  Reff = ;
  Reff2 = ;
  UpperRate = ;
  WeekNumber = ;
}

clx FJournal [FExtensionAttribute] {
  AbsoluteAmountOfTrade = abs(object.JournalTrade.StartCash);
  AccruedOutstanding = object.Trade.EndCash - object.Trade.FaceValue;
  AccruedOutstandingVal = AccruedOutstanding / acm.Time.DateDifference(object.Instrument.EndDate - object.Instrument.StartDate);
  ACCTTYPE = select(object.Trade <> nil, 
  true->string(object.Trade.OptKey3AsEnum) + "/" + string(object.Trade.OptKey4AsEnum), 
  false->string(object.ContractTrade.OptKey3AsEnum) + "/" + string(object.ContractTrade.OptKey4AsEnum));
  Bulan2 = int(Tenor2 / 30);
  closedLots = py("Report_Python_BO", context).closedLots(object, true);
  CounterPartyCountryRisk = select(object.Counterparty.RiskCountry.Name <> nil, 
  true->object.Counterparty.FullName + "/" + object.Counterparty.RiskCountry.Description, 
  false->object.Counterparty.FullName);
  CurrBuyAudit = py("Report_Python_BO", context).currencyBaseOnCategory(true, object.Trade);
  CurrSellAudit = py("Report_Python_BO", context).currencyBaseOnCategory(false, object.Trade);
  DatesPosition = py("Total_Trade", context).positionEOD(false);
  dateTransactionLLD = py("Report_Python_BO", context).formattingDate(object.EventDate, 2);
  DerivativesPayables = 0;
  EndInterest = object.Trade.EndCash + object.Trade.StartCash;
  EndInterestRepo = select(object.Trade <> nil, 
  true->py("Report_Python_BO", context).get_cashflow_proj_interest_amt(object.Trade), 
  false->select(object.JournalTrade <> nil, 
    true->py("Report_Python_BO", context).get_cashflow_proj_interest_amt(object.JournalTrade), 
    false->select(object.ContractTrade <> nil, 
      true->py("Report_Python_BO", context).get_cashflow_proj_interest_amt(object.ContractTrade))));
  EndInterestRepo2 = select(object.Trade <> nil, 
  true->py("Report_Python_BO", context).get_cashflow_proj_interest_amt(object.Trade), 
  false->select(object.JournalTrade <> nil, 
    true->py("Report_Python_BO", context).get_cashflow_proj_interest_amt(object.JournalTrade), 
    false->select(object.ContractTrade <> nil, 
      true->py("Report_Python_BO", context).get_cashflow_proj_interest_amt(object.ContractTrade))));
  EquivalentAmountIDR = select(object.Currency.Name, 
  "IDR"->abs(object.Trade.FaceValue), 
  default->abs(py("Report_Python_BO", context).journalidramount(object.Trade)));
  Hari2 = int(dateDifference(object.Instrument.EndDate, object.Instrument.StartDate) - 30 * Bulan2);
  informasiDokumenPendukungLLD = "99";
  InterestAmountVal = py("Report_Python_BO", context).ceilingAmount(object.JournalTrade);
  jenisRekeningLLD2 = py("Report_Python_BO", context).jenisRekeningLLDJournal(object);
  jenisTransaksiLLD2 = "1710";
  JournalAmountAbs = abs(object.Amount);
  monthTransactionLLD = py("Report_Python_BO", context).formattingDate(object.EventDate, 1);
  Movement = abs(object.BaseAmount - AmountClosingYesterday);
  n1default = "N1";
  ndefault = "N";
  negaraDebiturKrediturLLD = object.Account.CorrespondentBank.Country;
  nilaiTransaksiLLD = abs(object.Amount);
  Reff = py("Total_Trade", context).reffjournal(object.Trade, ["Trade Number", "Trade Instrument", "Trade Optional Key 3", "Trade Optional Key 4"]);
  Reff2 = select(object.Trade <> nil, 
  true->string(object.Trade.Oid) + "/" + object.Trade.OptKey3 + "/" + object.Trade.OptKey4, 
  false->string(object.ContractTrade.Oid) + "/" + object.ContractTrade.OptKey3 + "/" + object.ContractTrade.OptKey4);
  sandiBankLLD = "008";
  SecIDBond = py("Report_Python_BO", context).get_Collateral_Instrument(object.Trade);
  TaxDifferenceJournal = select(taxWht <> nil, 
  true->select(JournalAmountAbs <> nil, 
    true->abs(taxWht) - abs(JournalAmountAbs), 
    false->abs(taxWht) - 0), 
  false->select(JournalAmountAbs <> nil, 
    true->0 - abs(JournalAmountAbs), 
    false->0 - 0));
  taxWht = py("Report_Python_BO", context).taxWht(object);
  taxWhtIdr = py("Report_Python_BO", context).taxWht(object);
  Tenor2 = int(object.Instrument.EndDate - object.Instrument.StartDate);
  TransactionNoLLD = select(object.JournalTrade.AdditionalInfo.DealNO <> nil, 
  true->"OPX." + string(object.JournalTrade.AdditionalInfo.DealNO), 
  false->select(object.JournalTrade.Oid <> nil, 
    true->"FAT." + string(object.JournalTrade.Oid), 
    false->"FAJ." + string(object.Oid)));
  unitKerjaLLD = "TCO-CTO";
  updateTimeSimulatedLive = py("Report_Python_BO", context).updateTimeSimulatedLive(object.Oid);
  valueDateCollateral = py("Report_Python_BO", context).NewvalueDateCollateral;
  yearTransactionLLD = py("Report_Python_BO", context).formattingDate(object.EventDate, 0);
}

clx FJournalMultiItem [FExtensionAttribute] {
  Descr_acc = object.Journals.AsArray.First.Account.Description;
  Movement = abs(sumOf((object.Journals.AsArray) :* "object.BaseAmount") - AmountClosingYesterday);
  Posisi = py("Report_Python_BO", context).today_date;
  PosisiYst = py("Report_Python_BO", context).today_date(false);
}

clx FMoneyFlowAndTrades [FExtensionAttribute] {
  AllInRateOnReset = RateCashflow + SpreadValInReset / 100;
  CustomerFullNameCashFlow = object.MoneyFlow.Instrument.Trades.First.Counterparty.FullName;
  MoneyFlowFixingDate = select(object.MoneyFlow.CashFlow.CashFlowType == "Float Rate", 
  true->object.MoneyFlow.CashFlow.Resets.First.FixingDate);
  MoneyFlowRate = object.MoneyFlow.Instrument.Trades.First.Counterparty.FullName;
  PayDayCustom = payDate;
  RateCashflow = py("Report_Python_BO", context).RateCashflow(object);
  SpreadValInReset = py("Report_Python_BO", context).SpreadValInReset(object);
}

clx FMultiInstrumentAndTrades [FExtensionAttribute] {
  AccumulativeOrPerTransaction = ;
  AFS = sumOf(children :* "AFS");
  AFSQuantity = sumOf(children :* "AFSQuantity");
  AmountAccumulativePerMonth = ;
  ApoloCode = "010001";
  ApoloNo = "D01";
  AveragePrice = averageOf(trades :* "price");
  balanceNTCS = sumOf(children :* "balanceNTCS");
  BIDSourceBGN = ;
  buyPremium = sumOf(children :* "buyPremium");
  childrenFreq = object.Children.Size;
  CurrBuyAudit = py("Report_Python_BO", context).currencyBaseOnCategory(true, object.Trades.AsArray.First);
  dateHoldPos = py("Report_Python_BO", context).additional_info_ins(object.Instruments.First, "DateHoldPos");
  differenceRo = abs((RepoRo + pledge + balanceNTCS)) - abs(HoldPosCustody);
  EquivalentAmountIDR = sumOf(children :* "EquivalentAmountIDR");
  EquivalentAmountIDRLastMonth = sumOf(children :* "EquivalentAmountIDRLastMonth");
  GLNOAmount2 = sumOf(children :* "GLNOAmount2");
  grandTotal = buyPremium + sellPremium;
  HoldPosBIS4 = py("Report_Python_BO", context).additional_info_ins(object.Instruments.First, "HoldPosCustody");
  HoldPosCustody = py("Report_Python_BO", context).all_additional_info_ins(object.Instruments.First);
  HoldPosEuroClear = py("Report_Python_BO", context).additional_info_ins(object.Instruments.First, "HoldPosEuroClear");
  HTMQuantity = sumOf(children :* "HTMQuantity");
  InsAmountInIdr = py("Report_Python_BO", context).InsAmountOrgCurrency(object.Trades.AsArray) * py("Report_Python_BO", context).idr_price_mtm_curr(object.Instruments.First.Currency.Name);
  InsAmountOrgCurrency = py("Report_Python_BO", context).InsAmountOrgCurrency(object.Trades.AsArray);
  InsBondPrice = py("Report_Python_BO", context).getBondPrice(object.Trades.AsArray.First.Instrument.Name);
  InterestAccruedCouponDay = sumOf(children :* "InterestAccruedCouponDay");
  karakteristikProduk = select(object.Trades.AsArray.First.OptKey4.Name, 
  "MMLD"->"1", 
  "MLDR"->"1", 
  "MDS"->"1", 
  "MDCI"->"3");
  komponenInstrument = select(object.Trades.AsArray.First.OptKey4.Name, 
  "MLDR"->"03", 
  "MDCI"->"03", 
  "MMLD"->"03", 
  "MDS"->"03");
  LastPaymentDateCoupon = py("Report_Python_BO", context).LastPaymentDateCoupon(object.Trades.AsArray.First.MoneyFlows);
  LastUpdatePriceBond = 1;
  localCurr = sumOf((object.Children) :* "localCurr");
  localCurr2 = sumOf((object.Trades.AsArray) :* "localCurr2");
  LowerRate = ;
  MulInsCurr = object.Trades.AsArray.First.Instrument.Currency.Name;
  MulInsIsin = object.Trades.AsArray.First.Instrument.Isin;
  MulInsName = object.Trades.AsArray.First.Instrument.Name;
  PBCBookValueOrgCurr = nil;
  PBCBookValueRupiah = nil;
  PBCUnamortized = InsAmountOrgCurrency - GLNOAmount2;
  pledge = sumOf(children :* "pledge");
  Posisi = py("Report_Python_BO", context).today_date;
  posisiDasarForward = select(object.Trades.AsArray.First.OptKey4.Name == "MDS", 
  true->select(object.Trades.AsArray.First.BoughtAsString, 
    "Buy"->"01", 
    "Sell"->"02"));
  posisiDasarOption = select(object.Trades.AsArray.First.OptKey4.Name, 
  "MDCI"->select(object.Trades.AsArray.First.Instrument.ExerciseEventType, 
    "Call"->select(object.Trades.AsArray.First.BoughtAsString, 
      "Buy"->"01", 
      "Sell"->"02"), 
    "Put"->select(object.Trades.AsArray.First.BoughtAsString, 
      "Buy"->"03", 
      "Sell"->"04")), 
  "MMLD"->select(object.Trades.AsArray.First.Instrument.ExerciseEventType, 
    "Call"->select(object.Trades.AsArray.First.BoughtAsString, 
      "Buy"->"01", 
      "Sell"->"02"), 
    "Put"->select(object.Trades.AsArray.First.BoughtAsString, 
      "Buy"->"03", 
      "Sell"->"04")));
  PosisiYst = py("Report_Python_BO", context).today_date(false);
  PrevEffDate = nil;
  PrevPrevEffDate = nil;
  PrevPrevPrice = nil;
  PrevPrice = nil;
  ProductFullNameSP = select(object.Trades.AsArray.First.OptKey4.Name, 
  "MLDR"->"MARKET LINK DEPOSIT RATE", 
  "MDCI"->"MANDIRI DUAL CURRENCY INVESTMENT", 
  "MMLD"->"MANDIRI MARKET LINK DEPOSIT", 
  "MDS"->"MANDIRI DEPOSIT SWAP", 
  "FWD"->"MANDIRI DEPOSIT SWAP");
  Reff = object.Trade.Oid + "/" + object.Trade.Instrument.Name + "/" + object.Trade.OptKey3 + object.Trade.OptKey4;
  Reff2 = object.Trade.Oid + "/" + object.Trade.Instrument.Name + "/" + object.Trade.OptKey3 + object.Trade.OptKey4;
  RepoRo = sumOf(children :* "RepoRo");
  sellPremium = sumOf(children :* "sellPremium");
  Total = sumOf(children :* "Total");
  TotalQuantity = sumOf(children :* "TotalQuantity");
  TRDQuantity = sumOf(children :* "TRDQuantity");
  UpperRate = ;
  valutaDasarApolo = select(object.Trades.AsArray.First.CurrencyPair <> nil, 
  true->object.Trades.AsArray.First.CurrencyPair.Currency1.Name, 
  false->object.Trades.AsArray.First.Instrument.Currency.Name);
  variableDasarForward = select(object.Trades.AsArray.First.OptKey4.Name == "MDS", 
  true->"02");
  variableDasarOption = select(object.Trades.AsArray.First.OptKey4.Name, 
  "MMLD"->"02", 
  "MDCI"->"02");
  variableDasarSwap = select(object.Trades.AsArray.First.OptKey4.Name == "MLDR", 
  true->"01");
  WeekNumber = ;
}

clx FMultiMoneyFlowAndTrades [FExtensionAttribute] {
  PayDayCustom = py("Total_Trade", context).payday(object.Trades);
}

clx FParty [FExtensionAttribute] {
  collectability = object.AdditionalInfo.LBUT_KOLEKTIBILITAS;
}

clx FPortfolioInstrumentAndTrades [FExtensionAttribute] {
  AccumulativeOrPerTransaction = ;
  AFS = sumOf(children :* "AFS");
  AFSQuantity = sumOf(children :* "AFSQuantity");
  AmountAccumulativePerMonth = ;
  AveragePrice = averageOf(trades :* "price");
  BIDSourceBGN = ;
  HTMQuantity = sumOf(children :* "HTMQuantity");
  InsBondPriceCollateral = sumOf(children :* "InsBondPriceCollateral");
  LowerRate = ;
  PrevEffDate = nil;
  PrevPrevEffDate = nil;
  PrevPrevPrice = nil;
  PrevPrice = nil;
  Reff = object.Trade.Oid + "/" + object.Trade.Instrument.Name + "/" + object.Trade.OptKey3 + object.Trade.OptKey4;
  Reff2 = object.Trade.Oid + "/" + object.Trade.Instrument.Name + "/" + object.Trade.OptKey3 + object.Trade.OptKey4;
  TRDQuantity = sumOf(children :* "TRDQuantity");
  UpperRate = ;
  WeekNumber = ;
}

clx FSettlement [FExtensionAttribute] {
  AmountBuyAudit = py("Report_Python_BO", context).amountBaseOnCategory(true, object.Trade);
  AmountSellAudit = py("Report_Python_BO", context).amountBaseOnCategory(false, object.Trade);
  AmountSellAudit2 = py("Report_Python_BO", context).amountBaseOnCategory(false, object.Trade, true);
  bankPembayarLLD = select(object.Amount < 0, 
  true->object.AcquirerAccountRef.Bic.Name, 
  false->object.CounterpartyAccountRef.Bic.Name);
  bankPenerimaLLD = select(object.Amount > 0, 
  true->object.AcquirerAccountRef.Bic.Name, 
  false->object.CounterpartyAccountRef.Bic.Name);
  CCYSACCT = select(object.Trade.CurrencyPair <> nil, 
  true->py("Report_Python_BO", context).trd_acc(object.Trade, object.Trade.CurrencyPair.Currency1.Name), 
  false->py("Report_Python_BO", context).trd_acc(object.Trade, object.Trade.Currency.Name));
  CTRSACCT = py("Report_Python_BO", context).trd_acc(object.Trade, object.Trade.CurrencyPair.Currency2.Name);
  CurrBuyAudit = py("Report_Python_BO", context).currencyBaseOnCategory(true, object.Trade);
  CurrSellAudit = py("Report_Python_BO", context).currencyBaseOnCategory(false, object.Trade);
  DatesPosition = py("Total_Trade", context).positionEOD(false);
  dateTransactionLLD = py("Report_Python_BO", context).formattingDate(object.ValueDay, 2);
  DateTransaksi = py("Report_Python_BO", context).tradeTimeLocal(object.Trade.TradeTime, date);
  DaysDelays = select(object.AdditionalInfo.ActualSettleDate <> nil, 
  true->py("Report_Python_BO", context).DaysDelays(object.Trade.ValueDay, object.AdditionalInfo.ActualSettleDate));
  detailTransaksiLLD = py("Report_Python_BO", context).detailTransaksiLLD(object);
  EquivalentAmountIDR = select(object.Currency.Name == "IDR", 
  true->object.Amount, 
  false->py("Report_Python", context).SettlementAmount(object.Currency.Name, object.Amount));
  EquivalentAmountIDRSett = py("Report_Python_BO", context).EquivalentAmountIDRSett(object);
  Frequency = 1;
  hubunganKeuanganLLD = select(object.Counterparty.AdditionalInfo.LLD_HUBUNGAN <> nil, 
  true->py("Report_Python_BO", context).choiceListDesc(object.Counterparty.AdditionalInfo.LLD_HUBUNGAN, "LLD_HUBUNGAN"), 
  false->"N");
  informasiDokumenPendukungLLD = "99";
  JamTransaksi = py("Report_Python_BO", context).tradeTimeLocal(object.Trade.TradeTime);
  jenisIdentifikasiPembayarLLD = select(object.Amount < 0, 
  true->"A", 
  false->select(object.Counterparty.Swift <> nil, 
    true->"F", 
    false->"A"));
  jenisIdentifikasiPenerimaLLD = select(object.Amount > 0, 
  true->"A", 
  false->select(object.Counterparty.Swift <> nil, 
    true->"F", 
    false->"A"));
  jenisRekeningLLD = select(object.CounterpartyAccountRef.NetworkAliasType <> nil, 
  true->select(object.CounterpartyAccountRef.NetworkAliasType.Name, 
    "SWIFT"->"3C", 
    "EMAS"->select(object.Counterparty.Free2ChoiceList <> nil, 
      true->select(object.Counterparty.Free2ChoiceList.Name, 
        "Bank"->"4A", 
        default->"4B"))));
  jenisRekeningLLD2 = py("Report_Python_BO", context).jenisRekeningLLD2(object);
  jenisTransaksiLLD = py("Report_Python_BO", context).jenisTransaksiLLD(object);
  jenisTransaksiLLD2 = py("Report_Python_BO", context).jenisTransaksiLLD2(object);
  kategoriPembayarLLD = select(object.Amount < 0, 
  true->"C1", 
  false->py("Report_Python_BO", context).choiceListDesc(object.Counterparty.AdditionalInfo.LLD_SANDI_PELAKU, "LLD_SANDI PELAKU"));
  kategoriPenerimaLLD = select(object.Amount > 0, 
  true->"C1", 
  false->py("Report_Python_BO", context).choiceListDesc(object.Counterparty.AdditionalInfo.LLD_SANDI_PELAKU, "LLD_SANDI PELAKU"));
  monthTransactionLLD = py("Report_Python_BO", context).formattingDate(object.ValueDay, 1);
  n1default = "N1";
  namaPembayarLLD = select(object.Amount < 0, 
  true->object.Acquirer.FullName + " /" + statusPembayarLLD, 
  false->object.Counterparty.FullName + " /" + statusPembayarLLD);
  namaPenerimaLLD = select(object.Amount > 0, 
  true->object.Acquirer.FullName + " /" + statusPenerimaLLD, 
  false->object.Counterparty.FullName + " /" + statusPenerimaLLD);
  ndefault = "N";
  negaraDebiturKrediturLLD = select(object.AcquirerAccountRef.CorrespondentBank.Country <> "ID", 
  true->object.AcquirerAccountRef.CorrespondentBank.Country, 
  false->object.AcquirerAccountRef.CorrespondentBank2.Country);
  nilaiTransaksiLLD = abs(object.Amount);
  nomorIdentifikasiPembayarLLD = select(object.Amount < 0, 
  true->"0010611739093000", 
  false->select(object.Counterparty.Swift <> nil, 
    true->object.Counterparty.Swift, 
    false->py("Report_Python_BO", context).npwpUse(object.Counterparty.AdditionalInfo.NPWP)));
  nomorIdentifikasiPenerimaLLD = select(object.Amount > 0, 
  true->"0010611739093000", 
  false->select(object.Counterparty.Swift <> nil, 
    true->object.Counterparty.Swift, 
    false->py("Report_Python_BO", context).npwpUse(object.Counterparty.AdditionalInfo.NPWP)));
  Posisi = py("Report_Python_BO", context).today_date;
  PosisiYst = py("Report_Python_BO", context).today_date(false);
  sandiBankLLD = "008";
  SecIDBond = py("Report_Python_BO", context).get_Collateral_Instrument(object.Trade);
  statusPembayarLLD = select(object.Amount < 0, 
  true->py("Report_Python_BO", context).choiceListDesc(object.Acquirer.AdditionalInfo.LLD_SANDI_NEGARA, "UCCODE"), 
  false->py("Report_Python_BO", context).choiceListDesc(object.Counterparty.AdditionalInfo.LLD_SANDI_NEGARA, "UCCODE"));
  statusPenerimaLLD = select(object.Amount > 0, 
  true->py("Report_Python_BO", context).choiceListDesc(object.Acquirer.AdditionalInfo.LLD_SANDI_NEGARA, "UCCODE"), 
  false->py("Report_Python_BO", context).choiceListDesc(object.Counterparty.AdditionalInfo.LLD_SANDI_NEGARA, "UCCODE"));
  TransactionNoLLD = select(object.Trade.AdditionalInfo.DealNO <> nil, 
  true->"OPX." + string(object.Trade.AdditionalInfo.DealNO), 
  false->select(object.Trade.Oid <> nil, 
    true->"FAT." + string(object.Trade.Oid), 
    false->"FAS." + string(object.Settlement.Oid)));
  unitKerjaLLD = "TCO-CTO";
  yearTransactionLLD = py("Report_Python_BO", context).formattingDate(object.ValueDay, 0);
}

clx FSettlementMultiItem [FExtensionAttribute] {
  DatesPosition = py("Total_Trade", context).positionEOD(false);
  EquivalentAmountIDRSett = sumOf((object.Settlements.AsArray) :* "EquivalentAmountIDRSett");
  Frequency = object.Settlements.Size;
}

clx FSingleInstrumentAndTrades [FExtensionAttribute] {
  AccruedInterestInstrument = py("Report_Python_BO", context).JournalInfoInstrument(object, "amount");
  ACCTTYPE = string(object.Trades.AsArray.First.OptKey3AsEnum) + "/" + string(object.Trades.AsArray.First.OptKey4AsEnum);
  AFS = sumOf((object.Trades) :* "AFS");
  AFSQuantity = sumOf((object.Trades) :* "AFSQuantity");
  AmortizedAmount2 = py("Report_Python_BO", context).AmortizedAmount2(object.Trades.AsArray);
  AskPriceInsMtM = py("Report_Python_BO", context).priceInfo(object.Instrument, "Ask");
  AskPriceInsMtM_BBIBPA = py("Report_Python_BO", context).priceInfo(object.Instrument, "Ask", "BB_IBPA");
  AtBeginningAcq2 = py("Report_Python_BO", context).AtBeginningAcq2(object.Trades.AsArray);
  AtBeginningAcq2Idr = py("Report_Python_BO", context).AtBeginningAcq2(object.Trades.AsArray, true);
  AveragePrice = py("Report_Python_BO", context).AveragePriceBuy(object.Trades.AsArray);
  balanceNTCS = py("Report_Python_BO", context).getAmountCollateralAndNone(object.Instruments.First.Trades.AsArray, true, "not collateral");
  BIDHighestHierarchy = select(BIDSourceBGN, 
  default->"BGN", 
  nil->select(BIDSourceEXCH, 
    default->"EXCH", 
    nil->select(BIDSourceBVAL, 
      default->"BVAL", 
      nil->select(BIDSourceIBPA, 
        default->"IBPA", 
        nil->select(BIDSourceBIS4, 
          default->"BIS4", 
          nil->select(BIDSourceMarkToModel, 
            default->"Mark To Model", 
            nil->select(BIDSourceNAV, 
              default->"NAV", 
              nil->nil)))))));
  BidPriceInsMtM = py("Report_Python_BO", context).priceInfo(object.Instrument, "Bid");
  BidPriceInsMtM_BBIBPA = py("Report_Python_BO", context).priceInfo(object.Instrument, "Bid", "BB_IBPA");
  BIDSourceBGN = py("Report_Python_BO", context).bid(object, "BB_BGN");
  BIDSourceBIS4 = py("Report_Python_BO", context).bid(object, "BI-SSSS");
  BIDSourceBVAL = py("Report_Python_BO", context).bid(object, "BB_BVAL");
  BIDSourceEXCH = py("Report_Python_BO", context).bid(object, "BB_EXCH");
  BIDSourceIBPA = py("Report_Python_BO", context).bid(object, "BB_IBPA");
  BIDSourceMarkToModel = py("Report_Python_BO", context).bid(object, "Mark To Model");
  BIDSourceNAV = py("Report_Python_BO", context).bid(object, "NAV");
  BookCostAmort = py("Report_Python_BO", context).BookCostMarketValue(object.Instrument.Name, object.Trades.AsArray.First.Portfolio, true);
  BookCostAmortIdr = py("Report_Python_BO", context).BookCostMarketValue(object.Instrument.Name, object.Trades.AsArray.First.Portfolio, true) * py("Report_Python_BO", context).idr_price_mtm_curr(object.Instruments.First.Currency.Name);
  Bulan2 = int(Tenor2 / 30);
  dateHoldPos = py("Report_Python_BO", context).additional_info_ins(object.Instruments.First, "DateHoldPos");
  differenceRo = abs((RepoRo + pledge + balanceNTCS)) - abs(HoldPosCustody);
  effectiveDatedbY = py("Report_Python_BO", context).effectiveDatedbY(object.Instrument);
  EndDayPayment = py("Report_Python_BO", context).DayPayment(object.Instrument, "end");
  EndInterest = object.Trades.AsArray.First.EndCash + object.Trades.AsArray.First.StartCash;
  GLNOAmount2 = sumOf((object.Trades.AsArray) :* "GLNOAmount2");
  GLNOInstrument = string(py("Report_Python_BO", context).BookCostMarketValue(object.Instrument.Name, object.Trades.AsArray.First.Portfolio, false, true));
  Hari2 = int(dateDifference(object.Instrument.EndDate, object.Instrument.StartDate) - 30 * Bulan2);
  HoldPosBIS4 = py("Report_Python_BO", context).additional_info_ins(object.Instruments.First, "HoldPosCustody");
  HoldPosCustody = py("Report_Python_BO", context).all_additional_info_ins(object.Instrument);
  HoldPosEuroClear = py("Report_Python_BO", context).additional_info_ins(object.Instruments.First, "HoldPosEuroClear");
  HTMQuantity = sumOf((object.Trades) :* "HTMQuantity");
  InsAmountInIdr = py("Report_Python_BO", context).InsAmountOrgCurrency(object.Trades.AsArray) * py("Report_Python_BO", context).idr_price_mtm_curr(object.Instruments.First.Currency.Name);
  InsAmountOrgCurrency = py("Report_Python_BO", context).InsAmountOrgCurrency(object.Trades.AsArray);
  InsBondPrice = py("Report_Python_BO", context).getBondPrice(object.Instrument.Name);
  InsBondPriceHistToday = py("Report_Python_BO", context).getBondPriceHist(object.Instrument.Name, "today");
  InsBondPriceHistUpdate = py("Report_Python_BO", context).getBondPriceHist(object.Instrument.Name, "updateDay");
  InsBondPriceHistYst = py("Report_Python_BO", context).getBondPriceHist(object.Instrument.Name, "yesterday");
  InstrumentAcquisitionDate = py("Report_Python_BO", context).InstrumentAcquisitionDate(object.Instrument.Trades.AsArray);
  InterestAccruedCouponDay = sumOf(children :* "InterestAccruedCouponDay");
  InterestRateDepo = select(object.Instrument.FirstReceiveLeg.LegType, 
  "Float"->object.Instrument.FirstReceiveLeg.FirstRate + object.Instrument.FirstReceiveLeg.Spread, 
  "Fixed"->object.Instrument.FirstReceiveLeg.FirstRate);
  LastPaymentDateCoupon = py("Report_Python_BO", context).LastPaymentDateCoupon(object.Trades.AsArray.First.MoneyFlows);
  LastUpdatePriceBond = py("Report_Python_BO", context).LastUpdatePriceBond(object.Instrument);
  LastUpdateTimePriceBond = py("Report_Python_BO", context).LastUpdatePriceBond(object.Instrument, false);
  MarketPriceBondLastMonth = py("Report_Python_BO", context).ntr_lastDateOnMonth(object.Instrument.Name);
  MarketValueBondLastMonth = py("Report_Python_BO", context).BookCostMarketValue(object.Instrument.Name, object.Trades.AsArray.First.Portfolio, false);
  MarketValueBondLastMonthIDR = MarketValueBondLastMonth * py("Report_Python_BO", context).ntr_lastDateOnMonth(object.Instrument.Currency.Name);
  MaturityDatedbY = py("Report_Python_BO", context).MaturityDatedbY(object.Instrument);
  NominalInstrument = py("Report_Python_BO", context).nominalInstrument(object.Trades.AsArray);
  PBCBookValueOrgCurr = select(AtBeginningAcq2 <> nil, 
  true->AtBeginningAcq2 + GLNOAmount2, 
  false->0 + GLNOAmount2);
  PBCBookValueOrgCurr2 = select(AtBeginningAcq2 <> nil, 
  true->AtBeginningAcq2 + AmortizedAmount2, 
  false->0 + AmortizedAmount2);
  PBCBookValueRupiah = PBCBookValueOrgCurr * py("Report_Python_BO", context).idr_price_mtm_curr(object.Instrument.Currency.Name);
  PBCBookValueRupiah2 = PBCBookValueOrgCurr2 * py("Report_Python_BO", context).ntr_lastDateOnMonth(object.Instrument.Currency.Name);
  Pemeringkat = pemeringkat_dan_peringkat.At(0);
  pemeringkat_dan_peringkat = py("Report_Python_BO", context).pemeringkat_dan_peringkat(object.Instrument);
  Peringkat = pemeringkat_dan_peringkat.At(1);
  pledge = py("Report_Python_BO", context).getAmountCollateralAndNone(object.Instruments.First.Trades, false, "collateral");
  PortfolioNameInstrument = object.Trades.AsArray.First.Portfolio.Name;
  PortfolioTypeInstrument = select(object.Trades.AsArray.First.Portfolio.TypeChlItem <> nil, 
  true->object.Trades.AsArray.First.Portfolio.TypeChlItem.Name);
  Posisi = py("Report_Python_BO", context).today_date;
  PosisiYst = py("Report_Python_BO", context).today_date(false);
  productTypeCustom = select(object.Trades.AsArray.First.OptKey4.Name, 
  "Bond"->object.Instrument.CategoryChlItem, 
  "Bill"->object.Instrument.CategoryChlItem, 
  "FRN"->object.Instrument.CategoryChlItem, 
  "FUND"->object.Instrument.CategoryChlItem, 
  "MBS/ABS"->object.Instrument.CategoryChlItem, 
  default->object.Trades.AsArray.First.OptKey4.Name);
  PutCallCustomerView = select(object.Trade.OptKey4.Name, 
  "MMLD"->nil, 
  default->object.Instrument.ExerciseEventType);
  RepoRo = py("Report_Python_BO", context).getAmountCollateralAndNone(object.Instruments.First.Trades, true, "collateral");
  SCHED_Pay_Freq = select(object.Instrument.FirstPayLeg.RollingPeriod, 
  "3m"->"Q", 
  "6m"->"S", 
  "12m"->"Y");
  SCHED_Receive_Freq = select(object.Instrument.FirstReceiveLeg.RollingPeriod, 
  "3m"->"Q", 
  "6m"->"S", 
  "12m"->"Y");
  SettlePriceInsMtM = py("Report_Python_BO", context).priceInfo(object.Instrument, "Settle");
  SettlePriceInsMtM_BBIBPA = py("Report_Python_BO", context).priceInfo(object.Instrument, "Settle", "BB_IBPA");
  SourceUse = py("Report_Python_BO", context).SourceUse(object.Instrument);
  SpecificGlnoUsed = py("Report_Python_BO", context).SpecificGlnoUsed(object.Trades.AsArray.First) + select(object.Instrument.Currency.Name, 
  "IDR"->"-1-00", 
  default->"-2-00");
  StartDayPayment = py("Report_Python_BO", context).DayPayment(object.Instrument, "start");
  Tenor2 = int(object.Instrument.EndDate - object.Instrument.StartDate);
  Total = sumOf((object.Trades) :* "Total");
  TotalQuantity = sumOf((object.Trades) :* "TotalQuantity");
  TRDQuantity = sumOf((object.Trades) :* "TRDQuantity");
  UnAmortizedAmount2 = NominalInstrument - AtBeginningAcq2;
  UnAmortizedAmount3 = NominalInstrument - AmortizedAmount2;
  unrelizedInstrument = select(object.Trades.AsArray.First.Portfolio.TypeChlItem.Name, 
  "FVOCI"->(NominalInstrument * (MarketPriceBondLastMonth / 100)) - BookCostAmort, 
  "FVTPL"->(NominalInstrument * (AveragePrice / 100)) - (NominalInstrument * (MarketPriceBondLastMonth / 100)), 
  "Amortised Cost"->NominalInstrument - BookCostAmort);
  updatePriceInsMtM = py("Report_Python_BO", context).priceInfoUpdate(object.Instrument);
  updatePriceInsMtM_IBPA = py("Report_Python_BO", context).priceInfo(object.Instrument, "update_time", "BB_IBPA");
  UpdatePriceUser = py("Report_Python_BO", context).getBondPriceHist(object.Instrument.Name, "updateUser");
  UpdateTimeRating = py("Report_Python_BO", context).UpdateTimeRating(object.Instrument);
  UpperRate = py("Report_Python_BO", context).getPriceLowUpper(object.Trade, "high");
}

clx FTrade [FExtensionAttribute] {
  AFS = select(object.Trade.Portfolio.TypeChlItem.Name == "FVOCI", 
  true->object.Trade.Nominal, 
  false->0.0);
  AFSQuantity = select(object.Trade.Portfolio.TypeChlItem.Name == "FVOCI", 
  true->object.Trade.Quantity, 
  false->0.0);
  GLNOAmount2 = py("Report_Python_BO", context).GLNOAmount2(object.Trade);
  HTMQuantity = select(object.Trade.Portfolio.TypeChlItem.Name == "Amortised Cost", 
  true->object.Trade.Quantity, 
  false->0.0);
  localCurr = select(object.Trade.OptKey4.Name, 
  "MMLD"->abs(py("Report_Python_BO", context).roundingNominal(amountSale, 2) * py("Report_Python_BO", context).idr_price_mtm_curr_trade_date(object.Trade, currSale)), 
  "MLDR"->abs(py("Report_Python_BO", context).roundingNominal(amountSale, 2) * py("Report_Python_BO", context).idr_price_mtm_curr_trade_date(object.Trade, currSale)), 
  default->abs(py("Report_Python_BO", context).roundingNominal(amountPurchase, 2) * py("Report_Python_BO", context).idr_price_mtm_curr_trade_date(object.Trade, currPurchase)));
  localCurr2 = select(object.Trade.CurrencyPair.Currency1 <> nil, 
  true->abs(round(object.Trade.Nominal * py("Report_Python_BO", context).idr_price_mtm_last_month_businessDay(object.Trade.CurrencyPair.Currency1.Name))), 
  false->abs(round(object.Trade.Nominal * py("Report_Python_BO", context).idr_price_mtm_last_month_businessDay(object.Trade.Currency.Name))));
  Movement = 0;
  NominalInstrument = int(object.Trade.Nominal);
  Reff = object.Trade.Oid + "/" + object.Trade.Instrument.Name + "/" + object.Trade.OptKey3 + object.Trade.OptKey4;
  Reff2 = object.Trade.Oid + "/" + object.Trade.Instrument.Name + "/" + object.Trade.OptKey3 + object.Trade.OptKey4;
  Total = HTM + AFS + TRD;
  TotalQuantity = HTMQuantity + AFSQuantity + TRDQuantity;
  TRDQuantity = select(object.Trade.Portfolio.TypeChlItem.Name == "FVTPL", 
  true->object.Trade.Quantity, 
  false->0.0);
}

clx FTradeRow [FExtensionAttribute] {
  accountId = py("Report_Python_BO", context).accountId(object.Trade);
  AccruedInterestInstrument = py("Report_Python_BO", context).JournalInfoInstrument(object, "amount");
  AccruedOutstanding = "summ";
  ACCTTYPE = string(object.Trade.OptKey3AsEnum) + "/" + string(object.Trade.OptKey4AsEnum);
  ACCTTYPE2 = string(object.Trade.OptKey3AsEnum) + " " + string(object.Trade.OptKey4AsEnum);
  AccumulativeOrPerTransaction = select(object.Trade.OptKey4.Name, 
  "CCS"->select(object.Trade.BoughtAsString, 
    "Sell"->"PER TRANSACTION", 
    "Buy"->"ACCUMULATIVE"), 
  default->select(object.Trade.BoughtAsString, 
    "Sell"->"ACCUMULATIVE", 
    "Buy"->"PER TRANSACTION"));
  acquisitionAmount = select(object.Trade.BoughtAsString == "Sell", 
  true->py("Report_Python_BO", context).acquisitionAmount(object.Trade).At(0));
  acquisitionDetails = select(object.Trade.BoughtAsString == "Sell", 
  true->py("Report_Python_BO", context).acquisitionAmount(object.Trade).At(1));
  AFS = select(object.Trade.Portfolio.TypeChlItem.Name == "FVOCI", 
  true->object.Trade.Nominal, 
  false->0.0);
  AFSQuantity = select(object.Trade.Portfolio.TypeChlItem.Name == "FVOCI", 
  true->object.Trade.Quantity, 
  false->0.0);
  AllowanceForLossesPbc = select(string(object.Trade.Counterparty.AdditionalInfo.LBUT_KOLEKTIBILITAS), 
  "1"->1 / 100 * object.Trade.Premium, 
  "2"->5 / 100 * object.Trade.Premium, 
  "3"->15 / 100 * object.Trade.Premium, 
  "4"->50 / 100 * object.Trade.Premium, 
  "5"->100 / 100 * object.Trade.Premium, 
  default->0);
  AmortizedAmount2 = py("Report_Python_BO", context).AmortizedAmount2([object.Trade]);
  AmortizedAmount3 = py("Report_Python_BO", context).AmortizedAmount3(object.Trade, false);
  AmountAccumulativePerMonth = py("Report_Python_BO", context).AmountAccumulativePerMonth(object);
  AmountBuyAudit = py("Report_Python_BO", context).amountBaseOnCategory(true, object.Trade);
  amountInIdr = ntr_tradeDate * abs(AmountBuyAudit) / 1000000000;
  AmountInRupiah = EquivalentAmountIDR / 1000000000;
  amountPurchase = abs(select(object.Trade.OptKey3.Name, 
  "FX"->select(object.Trade.OptKey4.Name <> "OPT", 
    true->longFormAttrBuyAmount, 
    false->AmountBuyAudit), 
  "SWAP"->select(object.Trade.OptKey4.Name == "CCS", 
    true->py("Report_Python_BO", context).nominalPurchaseSaleCcs(object.Trade, true, true), 
    false->AmountBuyAudit), 
  "SP"->select(object.Trade.OptKey4.Name, 
    "MPF"->longFormAttrBuyAmount, 
    "MDS"->longFormAttrBuyAmount, 
    "MDCI"->object.Trade.Nominal, 
    "MLDR"->nil, 
    "MMLD"->nil, 
    default->AmountBuyAudit), 
  default->AmountBuyAudit));
  amountSale = abs(select(object.Trade.OptKey3.Name, 
  "FX"->select(object.Trade.OptKey4.Name <> "OPT", 
    true->longFormAttrSellAmount, 
    false->AmountSellAudit), 
  "SWAP"->select(object.Trade.OptKey4.Name == "CCS", 
    true->py("Report_Python_BO", context).nominalPurchaseSaleCcs(object.Trade, false, true), 
    false->AmountBuyAudit), 
  "SP"->select(object.Trade.OptKey4.Name, 
    "MPF"->longFormAttrSellAmount, 
    "MDS"->longFormAttrSellAmount, 
    "MDCI"->nil, 
    "MLDR"->object.Trade.DealPackage.Trades.Last.Nominal, 
    "MMLD"->object.Trade.DealPackage.Trades.Last.Nominal, 
    default->AmountSellAudit), 
  default->AmountSellAudit)) * (1 - 2);
  AmountSellAudit = py("Report_Python_BO", context).amountBaseOnCategory(false, object.Trade);
  AmountSellAudit2 = py("Report_Python_BO", context).amountBaseOnCategory(false, object.Trade, true);
  AmountUsePerProduct1 = py("Report_Python_BO", context).AmountUsePerProduct(object.Trade, true);
  AmountUsePerProduct2 = py("Report_Python_BO", context).AmountUsePerProduct(object.Trade, false);
  ApoloCode = "010001";
  ApoloNo = "D01";
  AskPriceInsMtM = py("Report_Python_BO", context).priceInfo(object.Instrument, "Ask");
  AskPriceInsMtM_BBIBPA = py("Report_Python_BO", context).priceInfo(object.Instrument, "Ask", "BB_IBPA");
  AtBeginningAcq2 = py("Report_Python_BO", context).AtBeginningAcq2(object.Trades.AsArray);
  AveragePrice = object.Trade.Price;
  balanceNTCS = py("Report_Python_BO", context).getAmountCollateralAndNone(object.Trades.AsArray, true, "not collateral");
  BebanBunga = ((EquivalentAmountIDRLastMonth * object.Instrument.FirstLeg.FirstRate) * (IDays / 360)) / 100;
  BidPriceInsMtM = py("Report_Python_BO", context).priceInfo(object.Instrument, "Bid");
  BidPriceInsMtM_BBIBPA = py("Report_Python_BO", context).priceInfo(object.Instrument, "Bid", "BB_IBPA");
  BIDSourceBGN = ;
  BookValuePbc = select(object.Trade.OptKey3.Name, 
  "DL"->GLNOAmount2, 
  "SBI"->GLNOAmount2, 
  "BOND"->GLNOAmount2, 
  "TD"->object.Trade.Premium);
  BrokerFeeIDR = py("Report_Python_BO", context).brokerfee(object.Trade, "IDR");
  BrokerFeeUSD = py("Report_Python_BO", context).brokerfee(object.Trade, "USD");
  Bulan2 = int(Tenor2 / 30);
  buyPremium = select(object.Trade.Nominal > 0, 
  true->object.Trade.Premium, 
  false->0);
  BuySellBank = select(BuySellCustomer, 
  "Buy"->"Sell", 
  "Sell"->"Buy");
  BuySellCustomer = select(object.Trade.OptKey4.Name, 
  "MDCI"->"Sell", 
  "MMLD"->"Buy", 
  "MLDR"->"Buy", 
  "CCS"->select(object.Instrument.FirstReceiveLeg.Currency.Name == "IDR", 
    true->"Buy", 
    false->"Sell"), 
  default->select(object.Trade.BoughtAsString == "Buy", 
    true->"Sell", 
    false->"Buy"));
  categoryInternalizer = select(object.Trade.OptKey4.Name, 
  "SPOT"->"Spot", 
  "TOD"->"Spot", 
  "TOM"->"Spot", 
  "NS"->"DNDF", 
  default->object.Trade.OptKey4.Name);
  CCYSACCT = py("Report_Python_BO", context).trd_acc(object.Trade, tradeCurr1);
  childrenFreq = object.Children.Size;
  closedLots = py("Report_Python_BO", context).closedLots(object, true);
  closedLotsTrade = py("Report_Python_BO", context).closedLots(object, false);
  collectabilityParty = select(instrument:insType, 
  "Bond"->instrument.Issuer, 
  "Bill"->instrument.Issuer, 
  "FRN"->instrument.Issuer, 
  "Option"->trade.Counterparty, 
  "Future/Forward"->trade.Counterparty);
  CPTYNAMECOUNTRY = string(object.Trade.Counterparty.FullName) + " //" + string(object.Trade.Counterparty.Country);
  CTRSACCT = py("Report_Python_BO", context).trd_acc(object.Trade, object.TradeCurrencyPair.Currency2.Name);
  CurrBuyAudit = py("Report_Python_BO", context).currencyBaseOnCategory(true, object.Trade);
  CurrCollateral = select(py("Report_Python_BO", context).get_Collateral(object.Trade, true) <> nil, 
  true->py("Report_Python_BO", context).get_Collateral(object.Trade, true).Currency.Name);
  currPurchase = select(object.Trade.OptKey3.Name, 
  "FX"->select(object.Trade.OptKey4.Name <> "OPT", 
    true->longFormAttrBuyCurrency, 
    false->CurrBuyAudit), 
  "SWAP"->select(object.Trade.OptKey4.Name == "CCS", 
    true->py("Report_Python_BO", context).nominalPurchaseSaleCcs(object.Trade, true, false), 
    false->CurrBuyAudit), 
  "SP"->select(object.Trade.OptKey4.Name, 
    "MPF"->longFormAttrBuyCurrency, 
    "MDS"->longFormAttrBuyCurrency, 
    "MDCI"->object.Instrument.Security.Name, 
    "MLDR"->nil, 
    "MMLD"->nil, 
    default->CurrBuyAudit), 
  default->CurrBuyAudit);
  currSale = select(object.Trade.OptKey3.Name, 
  "FX"->select(object.Trade.OptKey4.Name <> "OPT", 
    true->longFormAttrSellCurrency, 
    false->CurrSellAudit), 
  "BOND"->select(object.Trade.OptKey4.Name == "OPT", 
    true->CurrBuyAudit), 
  "SP"->select(object.Trade.OptKey4.Name, 
    "MPF"->longFormAttrSellCurrency, 
    "MDS"->longFormAttrSellCurrency, 
    "MLDR"->object.Trade.DealPackage.Trades.Last.Currency.Name, 
    "MMLD"->object.Trade.DealPackage.Trades.Last.Currency.Name, 
    "MDCI"->nil, 
    default->CurrSellAudit), 
  "SWAP"->select(object.Trade.OptKey4.Name, 
    "IRS"->CurrBuyAudit, 
    "OIS"->CurrBuyAudit, 
    "FRA"->CurrBuyAudit, 
    "CCS"->py("Report_Python_BO", context).nominalPurchaseSaleCcs(object.Trade, false, false), 
    default->CurrSellAudit), 
  default->CurrSellAudit);
  CurrSellAudit = py("Report_Python_BO", context).currencyBaseOnCategory(false, object.Trade);
  CurrUsePerProduct1 = py("Report_Python_BO", context).CurrUsePerProduct(object.Trade, true);
  CurrUsePerProduct2 = py("Report_Python_BO", context).CurrUsePerProduct(object.Trade, false);
  customerRank = py("CustomizedGrouperBO", context).getRank(object.Parent);
  dateHoldPos = py("Report_Python_BO", context).additional_info_ins(object.Trade.Instrument, "DateHoldPos");
  DateTransaksi = py("Report_Python_BO", context).tradeTimeLocal(object.Trade.TradeTime, "date");
  deltaMain = (priceDeltaCash / AmountBuyAudit) * 100;
  deltaMainAmountCcy = (py("Report_Python_BO", context).roundingNominal(deltaMain, 2) / 100) * py("Report_Python_BO", context).roundingNominal(AmountBuyAudit, 2);
  deltamaineqivalentinIDR = deltaMainAmountCcy * py("Report_Python_BO", context).idr_price_mtm_yesterday2(CurrBuyAudit);
  deltaMoney = deltaMain * (1 - 2);
  deltaMoneyAmount = (py("Report_Python_BO", context).roundingNominal(deltaMoney, 2) / 100) * py("Report_Python_BO", context).roundingNominal(AmountSellAudit, 2);
  deltaMoneyEqvIDR = deltaMoneyAmount * py("Report_Python_BO", context).idr_price_mtm_yesterday2(CurrSellAudit);
  DerivativesPayables = py("Report_Python_BO", context).getJournalAmountTrade(object.Trade, true);
  DerivativesReceivables = py("Report_Python_BO", context).getJournalAmountTrade(object.Trade, false);
  DescriptionUnderlying = py("Report_Python_BO", context).UnderlyingDescPerCp(object);
  differenceBetweenFairMarket = (FairMarketValueAfterHaircuts - EndCashRepo) / EndCashRepo * 100;
  differenceListOfSell = abs(GainOrLossFIFO) - abs(AmortizedAmount3);
  EffectiveDate = py("Report_Python_BO", context).EffectiveDate(object.Trade);
  effectiveDatedBy = py("Report_Python_BO", context).tanggalJatuhTempoDokumenUnderlying(object.Instrument.StartDate, "%d %B %Y");
  EndInterest = object.Trade.EndCash + object.Trade.StartCash;
  endInterestDepo = select(object.Trade.Instrument.FirstLeg.LegType == "Fixed", 
  true->EndInterest, 
  false->py("Report_Python_BO", context).lastPaymentProj(object.Trade.MoneyFlows));
  EndInterestRepo = py("Report_Python_BO", context).get_cashflow_proj_interest_amt(object.Trade);
  EndInterestRepo2 = py("Report_Python_BO", context).get_cashflow_proj_interest_amt(object.Trade);
  EodMtMYesterday = py("Report_Python_BO", context).idr_price_mtm_yesterday(object.Trade, false, true, true);
  EquivalentAmountIDR = select(object.Trade.InstrumentSubType == "Basket Repo/Reverse", 
  true->abs(object.Trade.Instrument.ContractSize) * py("Report_Python_BO", context).idr_price_mtm_yesterday(object.Trade), 
  false->abs(object.Trade.Nominal) * py("Report_Python_BO", context).idr_price_mtm_yesterday(object.Trade));
  EquivalentAmountIDRLastMonth = object.Trade.Nominal * py("Report_Python_BO", context).idr_price_mtm_last_month_businessDay(object.Trade.Currency.Name);
  EquivalentAmountIDRToday = select(object.Trade.InstrumentSubType == "Basket Repo/Reverse", 
  true->abs(object.Trade.Instrument.ContractSize) * py("Report_Python_BO", context).idr_price_mtm_curr(object.Trade.Currency.Name), 
  false->abs(object.Trade.Nominal) * py("Report_Python_BO", context).idr_price_mtm_curr(object.Trade.Currency.Name));
  FairMarketValueAfterHaircuts = select(object.Portfolio.Name == "BO20", 
  true->CollateralAmount * TodayPriceCollateral2 * (1 - 0) / 100, 
  false->CollateralAmount * TodayPriceCollateral * (1 - 0) / 100);
  FixingDatePay = py("Report_Python_BO", context).get_fixing_date_trade(object.Trade, "L");
  FixingDateReceive = py("Report_Python_BO", context).get_fixing_date_trade(object.Trade, "R");
  forexRate = select(object.Trade.Instrument.InsType, 
  "Option"->object.Trade.Instrument.StrikePrice, 
  default->select(object.Trade.OptKey3.Name, 
    "FX"->object.Trade.Price, 
    default->select(object.Trade.OptKey4.Name, 
      "MDS"->object.Trade.Price, 
      "MPF"->object.Trade.Price, 
      "CCS"->py("Report_Python_BO", context).ceilingNom(object.Trade))));
  Frequency = object.Trades.Size;
  GainOrLossFIFO = select(object.Trade.BoughtAsString == "Sell", 
  true->py("Report_Python_BO", context).GainOrLossFIFO(object.Trade));
  GainOrLossGlno = py("Report_Python_BO", context).getJournalAmountTrade(object.Trade, "asdasd", true);
  GainOrLossGlnoStatus = py("Report_Python_BO", context).getJournalAmountTrade(object.Trade, "asdasd", true, true);
  GLNOAmount = py("Report_Python_BO", context).GLNOAmount(object.Trade);
  GLNOAmount2 = py("Report_Python_BO", context).GLNOAmount2(object.Trade);
  grandTotal = buyPremium + sellPremium;
  hargJualSBI = select(object.Trade.OptKey3.Name, 
  "TD"->select(object.Trade.OptKey4.Name, 
    "BI"->object.Trade.EndCash, 
    default->object.Trade.Nominal * object.Trade.Price / 100), 
  "DL"->select(object.Trade.OptKey4.Name, 
    "FASBI"->object.Trade.Premium, 
    default->object.Trade.Nominal * object.Trade.Price / 100), 
  default->object.Trade.Nominal * object.Trade.Price / 100);
  Hari2 = int(dateDifference(object.Instrument.EndDate, object.Instrument.StartDate) - 30 * Bulan2);
  HoldPosBIS4 = py("Report_Python_BO", context).additional_info_ins(object.Trade.Instrument, "HoldPosCustody");
  HoldPosCustody = py("Report_Python_BO", context).all_additional_info_ins(object.Trade.Instrument);
  HoldPosEuroClear = py("Report_Python_BO", context).additional_info_ins(object.Trade.Instrument, "HoldPosEuroClear");
  HTMQuantity = select(object.Trade.Portfolio.TypeChlItem.Name == "Amortised Cost", 
  true->object.Trade.Quantity, 
  false->0.0);
  IdrPremium = object.Trade.Premium * py("Report_Python_BO", context).idr_price_mtm_curr(object.Trade.Currency.Name);
  InputDateCustom = py("Report_Python_BO", context).inputDate(object.Trade.CreateTime);
  InsBondPrice = py("Report_Python_BO", context).getBondPrice(object.Trade.Instrument.Name);
  InsBondPriceCollateral = select(py("Report_Python", context).get_Collateral(object.Trade, true) <> nil, 
  true->py("Report_Python", context).get_Collateral(object.Trade, true).Price, 
  false->0);
  instrumentNameInternalizer = categoryInternalizer + " " + CurrBuyAudit + "/" + CurrSellAudit;
  InterestAccruedCouponDay = py("Report_Python_BO", context).InterestAccruedCouponDay(object.Trade);
  InterestAmountVal = py("Report_Python_BO", context).ceilingAmount(object.Trade);
  InterestRateDepo = select(object.Trade.Instrument.FirstReceiveLeg.LegType, 
  "Float"->object.Trade.Instrument.FirstReceiveLeg.FirstRate + object.Trade.Instrument.FirstReceiveLeg.Spread, 
  "Fixed"->object.Trade.Instrument.FirstReceiveLeg.FirstRate);
  InterestRatePay = py("Report_Python_BO", context).InterestRate(object.Instrument, "pay");
  InterestRateReceive = py("Report_Python_BO", context).InterestRate(object.Instrument, "receive");
  InvTypeCollateral = py("Report_Python_BO", context).InvTypeCollateral(object.Trade);
  JamTransaksi = py("Report_Python_BO", context).tradeTimeLocal(object.Trade.TradeTime);
  komponenInstrument = select(object.Trade.OptKey4.Name, 
  "MLDR"->"03", 
  "MDCI"->"03", 
  "MMLD"->"03", 
  "MDS"->"03");
  kursEqvUsdTradeDate = abs(AmountBuyAudit) * py("Report_Python_BO", context).ntr_tradeDateUsd(object.Trade);
  kursEqvUsdTradeDatePerMillion = abs(AmountBuyAudit) * py("Report_Python_BO", context).ntr_tradeDateUsd(object.Trade) / 1000000;
  KursToday = select(object.Trade.InstrumentSubType == "Basket Repo/Reverse", 
  true->py("Report_Python_BO", context).idr_price_mtm_curr(object.Trade.Currency.Name), 
  false->py("Report_Python_BO", context).idr_price_mtm_curr(object.Trade.Currency.Name));
  kursTransaksiTSD = select(object.Trade.OptKey4.Name, 
  "MCS"->py("Report_Python_BO", context).MinStrikePriceMCS(object.Trade), 
  "OPT"->object.Trade.Instrument.StrikePrice, 
  "NS"->object.Trade.Price, 
  "NDF"->object.Trade.Price, 
  "MDS"->object.Trade.Price, 
  "FWD"->object.Trade.Price, 
  "MPF"->object.Trade.Price, 
  "TOD"->object.Trade.Price, 
  "TOM"->object.Trade.Price, 
  "SPOT"->object.Trade.Price);
  LastTradeBeforeBaseGroup = py("Report_Python_BO", context).LastTradeBeforeBaseGroup(object.Trade);
  localCurr = select(object.Trade.OptKey4.Name, 
  "MMLD"->abs(py("Report_Python_BO", context).roundingNominal(amountSale, 2) * py("Report_Python_BO", context).idr_price_mtm_curr_trade_date(object.Trade, currSale)), 
  "MLDR"->abs(py("Report_Python_BO", context).roundingNominal(amountSale, 2) * py("Report_Python_BO", context).idr_price_mtm_curr_trade_date(object.Trade, currSale)), 
  default->abs(py("Report_Python_BO", context).roundingNominal(amountPurchase, 2) * py("Report_Python_BO", context).idr_price_mtm_curr_trade_date(object.Trade, currPurchase)));
  localCurr2 = select(object.Trade.CurrencyPair.Currency1 <> nil, 
  true->abs(round(object.Trade.Nominal * py("Report_Python_BO", context).idr_price_mtm_last_month_businessDay(object.Trade.CurrencyPair.Currency1.Name))), 
  false->abs(round(object.Trade.Nominal * py("Report_Python_BO", context).idr_price_mtm_last_month_businessDay(object.Trade.Currency.Name))));
  LowerRate = py("Report_Python_BO", context).getPriceLowUpper(object.Trade, "low");
  LowerRateSP = py("Report_Python_BO", context).getPriceLowUpperSP(object.Trade, "low");
  marketPricePurchase = select(object.Trade.OptKey4.Name, 
  "MMLD"->abs(py("Report_Python_BO", context).roundingNominal(amountSale, 2) * marketRatePurchase), 
  "MLDR"->abs(py("Report_Python_BO", context).roundingNominal(amountSale, 2) * marketRatePurchase), 
  default->abs(py("Report_Python_BO", context).roundingNominal(amountPurchase, 2) * marketRatePurchase));
  marketRatePurchase = py("Report_Python_BO", context).ntr_lastDateOnMonth(currPurchase);
  matturityDatedBy = py("Report_Python_BO", context).tanggalJatuhTempoDokumenUnderlying(object.Instrument.EndDate, "%d %B %Y");
  MaturityDate = py("Report_Python_BO", context).MaturityDate(object.Trade, true);
  MaturityDate2 = py("Report_Python_BO", context).MaturityDate(object.Trade, false);
  MonthValueDate = py("Report_Python_BO", context).MonthValueDate(object.Trade);
  Movement = py("Report_Python", context).calculate_amount_movement(object.Trade);
  NetAmountPBC = object.Trade.Premium - AllowanceForLossesPbc;
  nominalBondsIDR = select(object.Trade.OptKey3AsEnum, 
  default->select(object.Trade.Currency.Name, 
    "IDR"->abs(object.Trade.Nominal), 
    default->abs(py("Report_Python_BO", context).idr_price_mtm_curr(object.Trade.Currency.Name) * object.Trade.Nominal)), 
  "REPO"->select(object.Trade.Currency.Name, 
    "IDR"->abs(py("Report_Python_BO", context).get_Collateral_Amounts(object.Trade)), 
    default->abs(py("Report_Python_BO", context).idr_price_mtm_curr(object.Trade.Currency.Name) * py("Report_Python_BO", context).get_Collateral_Amounts(object.Trade))), 
  "REVREPO"->select(object.Trade.Currency.Name, 
    "IDR"->abs(py("Report_Python_BO", context).get_Collateral_Amounts(object.Trade)), 
    default->abs(py("Report_Python_BO", context).idr_price_mtm_curr(object.Trade.Currency.Name) * py("Report_Python_BO", context).get_Collateral_Amounts(object.Trade))));
  nominalBondsValas = abs(select(object.Trade.OptKey3AsEnum, 
  default->select(object.Trade.Currency.Name, 
    "IDR"->nil, 
    default->abs(object.Trade.Nominal)), 
  "REPO"->select(py("Report_Python", context).get_Collateral_Currency(object.Trade), 
    "IDR"->nil, 
    default->py("Report_Python", context).get_Collateral_Amounts(object.Trade)), 
  "REVREPO"->select(py("Report_Python", context).get_Collateral_Currency(object.Trade), 
    "IDR"->nil, 
    default->py("Report_Python", context).get_Collateral_Amounts(object.Trade))));
  NominalInstrument = object.Nominal * select(object.Trade.Status <> "Void", 
  true->1, 
  false->0);
  NominalPayLeg = object.Trade.Nominal;
  NominalReceiveLeg = select(object.Trade.OptKey4AsEnum == "CCS", 
  true->abs(object.Trade.Nominal * object.Trade.Instrument.FirstReceiveLeg.NominalFactor), 
  false->abs(object.Trade.Nominal));
  nominalSBI = select(object.Trade.OptKey3.Name, 
  "TD"->select(object.Trade.OptKey4.Name, 
    "BI"->object.Trade.StartCash, 
    default->object.Trade.Nominal), 
  default->object.Trade.Nominal);
  ntr_lastDateOnMonth = select(object.Trade.CurrencyPair == nil, 
  true->py("Report_Python_BO", context).ntr_lastDateOnMonth(object.Trade.Instrument.Currency.Name), 
  false->py("Report_Python_BO", context).ntr_lastDateOnMonth(object.Trade.CurrencyPair.Currency1.Name));
  ntr_lastDateOnMonth_usd = abs(AmountBuyAudit) * py("Report_Python_BO", context).ntr_lastDateOnMonth_usd(CurrBuyAudit);
  ntr_lastDateOnMonthPurchase = ntr_lastDateOnMonth(currPurchase);
  ntr_tradeDate = py("Report_Python_BO", context).ntr_tradeDate(object.Trade);
  ntrTradeDate = py("Report_Python_BO", context).idr_price_mtm_curr_trade_date(object.Trade, currPurchase);
  OthersFairValue = select(BuySellBank == "Sell", 
  true->select(DerivativesReceivables <> 0, 
    true->localCurr - DerivativesReceivables, 
    false->select(DerivativesPayables <> 0, 
      true->localCurr - DerivativesPayables, 
      false->localCurr)), 
  false->select(DerivativesReceivables <> 0, 
    true->localCurr + DerivativesReceivables, 
    false->select(DerivativesPayables <> 0, 
      true->localCurr + DerivativesPayables, 
      false->localCurr)));
  PayDayCustom = py("Report_Python_BO", context).payday(object);
  PayLegBS = "Sell";
  PBCBookValueOrgCurr2 = select(AtBeginningAcq2 <> nil, 
  true->AtBeginningAcq2 + AmortizedAmount2, 
  false->0 + AmortizedAmount2);
  Pemeringkat = pemeringkat_dan_peringkat.At(0);
  pemeringkat_dan_peringkat = py("Report_Python_BO", context).pemeringkat_dan_peringkat(object.Instrument);
  Peringkat = pemeringkat_dan_peringkat.At(1);
  period = int(select(object.Trade.OptKey3.Name, 
  "FX"->select(object.Trade.OptKey4.Name, 
    "OPT"->object.Trade.Instrument.ExpiryDateOnly - object.Trade.TradeTimeDateOnly, 
    default->object.Trade.ValueDay - object.Trade.TradeTimeDateOnly), 
  "BOND"->select(object.Trade.OptKey4.Name, 
    "OPT"->object.Trade.Instrument.ExpiryDateOnly - object.Trade.TradeTimeDateOnly, 
    "FWD"->object.Trade.Instrument.ExpiryDateOnly - object.Trade.TradeTimeDateOnly), 
  "SP"->select(object.Trade.OptKey4.Name, 
    "MMLD"->object.Trade.DealPackage.Trades.Last.Instrument.EndDate - object.Trade.DealPackage.Trades.Last.Instrument.StartDate, 
    "MDCI"->object.Trade.Instrument.ExpiryDateOnly - object.Trade.TradeTimeDateOnly, 
    "MCS"->object.Trade.Instrument.ExpiryDateOnly - object.Trade.TradeTimeDateOnly, 
    "MLDR"->acm.Time.AsDate(object.Trade.Instrument.EndDate) - object.Trade.TradeTimeDateOnly, 
    "MPF"->object.Trade.ValueDay - object.Trade.TradeTimeDateOnly, 
    "MDS"->object.Trade.ValueDay - object.Trade.TradeTimeDateOnly), 
  "SWAP"->acm.Time.AsDate(object.Trade.Instrument.EndDate) - object.Trade.TradeTimeDateOnly));
  periodePembayaranBungaTSD = select(object.Instrument.Underlying, 
  nil->nil, 
  default->select(object.Instrument.Underlying.RecLeg.RollingPeriod, 
    "1d"->"D", 
    "7d"->"W", 
    "1w"->"W", 
    "1m"->"M", 
    "3m"->"Q", 
    "6m"->"S", 
    "12m"->"A", 
    "1y"->"A", 
    default->"X"));
  pledge = py("Report_Python_BO", context).getAmountCollateralAndNone(object.Trades.AsArray, false, "collateral");
  Posisi = py("Report_Python_BO", context).today_date;
  PosisiYst = py("Report_Python_BO", context).today_date(false);
  PostingDate = py("Report_Python_BO", context).tanggalJatuhTempoDokumenUnderlying(object.Trade.TradeTimeDateOnly, "%d %B %Y");
  premiumRate = select(abs(object.Trade.Instrument.CouponRate) > 0, 
  true->object.Trade.Instrument.CouponRate);
  PrevEffDate = py("Report_Python_BO", context).idr_price_mtm_yesterday_coll(object.Trade, true, "Yesterday", false);
  PrevEffDate2 = py("Report_Python_BO", context).idr_price_mtm_yesterday_coll(object.Trade, false, "Yesterday", false);
  PrevPrevEffDate = py("Report_Python_BO", context).idr_price_mtm_yesterday_coll(object.Trade, true, "Two_Yesterday", false);
  PrevPrevEffDate2 = py("Report_Python_BO", context).idr_price_mtm_yesterday_coll(object.Trade, false, "Two_Yesterday", false);
  PrevPrevPrice = py("Report_Python_BO", context).idr_price_mtm_yesterday_coll(object.Trade, true, "Two_Yesterday", true);
  PrevPrevPrice2 = py("Report_Python_BO", context).idr_price_mtm_yesterday_coll(object.Trade, false, "Two_Yesterday", true);
  PrevPrice = py("Report_Python_BO", context).idr_price_mtm_yesterday_coll(object.Trade, true, "Yesterday");
  PrevPrice2 = py("Report_Python_BO", context).idr_price_mtm_yesterday_coll(object.Trade, false, "Yesterday");
  priceYield = select(object.Instrument.InsType <> "FRN", 
  true->py("Report_Python_BO", context).priceYield(object.Trade));
  ProductFullNameSP = select(object.Trade.OptKey4.Name, 
  "MLDR"->"MARKET LINK DEPOSIT RATE", 
  "MDCI"->"MANDIRI DUAL CURRENCY INVESTMENT", 
  "MMLD"->"MANDIRI MARKET LINK DEPOSIT", 
  "MDS"->"MANDIRI DEPOSIT SWAP", 
  "FWD"->"MANDIRI DEPOSIT SWAP");
  PutCallCustomerView = select(object.Trade.OptKey4.Name, 
  "MMLD"->nil, 
  default->object.Instrument.OptionType);
  qualityOfPlacement = shunt(collectabilityParty:collectability, 
  default->"0%", 
  "1"->"1%", 
  "2"->"5%", 
  "3"->"15%", 
  "4"->"50%", 
  "5"->"100%");
  rate_lastDateOnMonth_usd = py("Report_Python_BO", context).ntr_lastDateOnMonth_usd(CurrBuyAudit);
  RateBuyAudit = py("Report_Python_BO", context).rateBaseOnCategory(true, object.Trade);
  RateMerge = py("Report_Python_BO", context).rateBaseOnCategoryMerge(object.Trade);
  RateSellAudit = py("Report_Python_BO", context).rateBaseOnCategory(false, object.Trade);
  ReceiveLegBS = "Buy";
  Reff = object.Trade.Name + "/" + object.Trade.Instrument.Name + "/" + object.Trade.OptKey3 + object.Trade.OptKey4;
  Reff2 = object.Trade.Name + "/" + object.Trade.Instrument.Name + "/" + object.Trade.OptKey3 + object.Trade.OptKey4;
  RemainingNominalPosition = select(object.Trade.BoughtAsString == "Sell", 
  true->py("Report_Python_BO", context).RemainingNominalPosition(object.Trade).At(0));
  RepoRo = py("Report_Python_BO", context).getAmountCollateralAndNone(object.Trades.AsArray, true, "collateral");
  RollPeriodPayLeg = py("Report_Python_BO", context).rollingPeriodStr(object.Trade, "pay");
  RollPeriodReceiveLeg = py("Report_Python_BO", context).rollingPeriodStr(object.Trade, "receive");
  SCHED_Pay_Freq = select(object.Instrument.Legs.First.PayType, 
  "Receive"->select(object.Instrument.Legs.First.RollingPeriod, 
    "3m"->"Q", 
    "6m"->"S", 
    "12m"->"Y"), 
  "Pay"->select(object.Instrument.Legs.Last.RollingPeriod, 
    "3m"->"Q", 
    "6m"->"S", 
    "12m"->"Y"));
  SecIDBond = py("Report_Python_BO", context).get_Collateral_Instrument(object.Trade);
  SecurityDifference = HoldPosBIS4 + Repo + float(bookRPLColumn) - HoldPosCustody;
  sellPremium = select(object.Trade.Nominal < 0, 
  true->object.Trade.Premium, 
  false->0);
  SettlePriceInsMtM = py("Report_Python_BO", context).priceInfo(object.Instrument, "Settle");
  SettlePriceInsMtM_BBIBPA = py("Report_Python_BO", context).priceInfo(object.Instrument, "Settle", "BB_IBPA");
  SourceUse = py("Report_Python_BO", context).SourceUse(object.Instrument);
  SpecificGlnoUsed = py("Report_Python_BO", context).AmortizedAmount3(object.Trade, true);
  SpecificGlnoUsed2 = py("Report_Python_BO", context).AmortizedAmount3(object.Trade, true);
  StartCouponDate = py("Report_Python_BO", context).payday(object.Trades, true);
  strikePrice2TSD = select(object.Trade.OptKey4.Name, 
  "MCS"->py("Report_Python_BO", context).MinStrikePriceMCS(object.Trade));
  StrikeValueHigher = py("Report_Python_BO", context).StrikeValue(object.Trade, "higher");
  StrikeValueLower = select(object.Trade.OptKey4.Name, 
  "MCS"->object.Trade.Nominal / (object.Trade.Nominal * object.Instrument.StrikePrice), 
  "MDCI"->object.Trade.Nominal / (object.Trade.Nominal * object.Instrument.StrikePrice));
  tanggalAwalForwardTSD = select(object.Trade.OptKey4.Name, 
  "FWD"->select(object.Trade.OptKey3.Name, 
    "BOND"->py("Report_Python_BO", context).tanggalJatuhTempoDokumenUnderlying(object.Trade.TradeTimeDateOnly, "%Y-%m-%d")));
  tanggalEfektifTSD = select(object.Trade.OptKey4.Name, 
  "FWD"->select(object.Trade.OptKey3.Name, 
    "BOND"->py("Report_Python_BO", context).tanggalJatuhTempoDokumenUnderlying(object.Trade.TradeTimeDateOnly, "%Y-%m-%d")), 
  "IRS"->py("Report_Python_BO", context).tanggalJatuhTempoDokumenUnderlying(object.Instrument.StartDate, "%Y-%m-%d"), 
  "OIS"->py("Report_Python_BO", context).tanggalJatuhTempoDokumenUnderlying(object.Instrument.StartDate, "%Y-%m-%d"));
  tanggalJatuhTempoDokumenUnderlying = select(object.Trade.AdditionalInfo.LCS, 
  "Yes"->py("Report_Python_BO", context).tanggalJatuhTempoDokumenUnderlying(object.Trade.AdditionalInfo.UnderlyingMatDate), 
  default->nil);
  tanggalJatuhTempoTSD = select(object.Trade.OptKey4.Name, 
  "CCS"->py("Report_Python_BO", context).tanggalJatuhTempoDokumenUnderlying(object.Trade.Instrument.EndDate, "%Y-%m-%d"), 
  "IRS"->py("Report_Python_BO", context).tanggalJatuhTempoDokumenUnderlying(object.Trade.Instrument.EndDate, "%Y-%m-%d"), 
  "OIS"->py("Report_Python_BO", context).tanggalJatuhTempoDokumenUnderlying(object.Trade.Instrument.EndDate, "%Y-%m-%d"), 
  "OPT"->py("Report_Python_BO", context).tanggalJatuhTempoDokumenUnderlying(object.Trade.Instrument.ExpiryDateOnly, "%Y-%m-%d"), 
  "MDCI"->py("Report_Python_BO", context).tanggalJatuhTempoDokumenUnderlying(object.Trade.Instrument.ExpiryDateOnly, "%Y-%m-%d"), 
  "MMLD"->py("Report_Python_BO", context).tanggalJatuhTempoDokumenUnderlying(object.Trade.Instrument.EndDate, "%Y-%m-%d"), 
  "MLDR"->py("Report_Python_BO", context).tanggalJatuhTempoDokumenUnderlying(object.Trade.Instrument.EndDate, "%Y-%m-%d"), 
  "MDS"->py("Report_Python_BO", context).tanggalJatuhTempoDokumenUnderlying(object.Trade.ValueDay, "%Y-%m-%d"), 
  "MPF"->py("Report_Python_BO", context).tanggalJatuhTempoDokumenUnderlying(object.Trade.Instrument.EndDate, "%Y-%m-%d"), 
  "SWAP"->py("Report_Python_BO", context).tanggalJatuhTempoDokumenUnderlying(object.Trade.Instrument.EndDate, "%Y-%m-%d"), 
  "FWD"->py("Report_Python_BO", context).tanggalJatuhTempoDokumenUnderlying(object.Trade.ValueDay, "%Y-%m-%d"), 
  "TOD"->py("Report_Python_BO", context).tanggalJatuhTempoDokumenUnderlying(object.Trade.ValueDay, "%Y-%m-%d"), 
  "TOM"->py("Report_Python_BO", context).tanggalJatuhTempoDokumenUnderlying(object.Trade.ValueDay, "%Y-%m-%d"), 
  "SPOT"->py("Report_Python_BO", context).tanggalJatuhTempoDokumenUnderlying(object.Trade.ValueDay, "%Y-%m-%d"), 
  "NS"->py("Report_Python_BO", context).tanggalJatuhTempoDokumenUnderlying(object.Trade.RightDate, "%Y-%m-%d"), 
  "NDF"->py("Report_Python_BO", context).tanggalJatuhTempoDokumenUnderlying(object.Trade.RightDate, "%Y-%m-%d"), 
  "MCS"->py("Report_Python_BO", context).tanggalJatuhTempoDokumenUnderlying(object.Trade.Instrument.ExpiryDateOnly, "%Y-%m-%d"));
  tanggalValutaTSD = select(object.Trade.OptKey3.Name, 
  "SWAP"->py("Report_Python_BO", context).tanggalJatuhTempoDokumenUnderlying(object.Trade.TradeConnections.First.ToTrade.ValueDay, "%Y-%m-%d"), 
  default->py("Report_Python_BO", context).tanggalJatuhTempoDokumenUnderlying(object.Trade.ValueDay, "%Y-%m-%d"));
  taxWht = py("Report_Python_BO", context).IdrTaxWht(object.Trade);
  taxWhtIdr = py("Report_Python_BO", context).taxWhtTradeSheet(object.Trade);
  taxWhtValNeg = py("Report_Python_BO", context).taxWhtTradeSheet(object.Trade, false, false);
  taxWhtValPos = py("Report_Python_BO", context).taxWhtTradeSheet(object.Trade, false);
  Tenor2 = int(object.Instrument.EndDate - object.Instrument.StartDate);
  TenorFarNear = int(object.Trade.FxSwapFarLeg.ValueDay - object.Trade.ValueDay);
  TenorFX = int(object.Trade.ValueDay - object.TradeTime) + 1;
  TenorSukuBungaAcuanTSD = select(object.Trade.OptKey3.Name, 
  "SWAP"->py("Report_Python_BO", context).TenorSukuBungaAcuanTSD(object.Instrument, false));
  TodayEffDateCollateral = py("Report_Python_BO", context).idr_price_mtm_yesterday_coll(object.Trade, true, "Today", false);
  TodayEffDateCollateral2 = py("Report_Python_BO", context).idr_price_mtm_yesterday_coll(object.Trade, false, "Today", false);
  TodayPriceCollateral = py("Report_Python_BO", context).idr_price_mtm_yesterday_coll(object.Trade, true, "Today");
  TodayPriceCollateral2 = py("Report_Python_BO", context).idr_price_mtm_yesterday_coll(object.Trade, false, "Today");
  Total = HTM + AFS + TRD;
  TotalQuantity = HTMQuantity + AFSQuantity + TRDQuantity;
  TradeBuyUsed = py("Report_Python_BO", context).TradeBuyUsed(object.Trade);
  tradeDatedBY = py("Report_Python_BO", context).tradeDatedBY(object.Trade.TradeTimeDateOnly);
  TradeFXExcRate = select(longFormAttrExchangeRate, 
  0->0.0, 
  default->string(longFormAttrExchangeRate));
  tradePrincipal = object.Trade.Nominal * object.Trade.Price / 100;
  TradesBuysUsed = select(object.Trade.BoughtAsString == "Sell", 
  true->py("Report_Python_BO", context).RemainingNominalPosition(object.Trade, LastTradeBeforeBaseGroup).At(2));
  TransactionExposureBuyer = select((EndCashRepo - FairMarketValueAfterHaircuts) > 0, 
  true->EndCashRepo - FairMarketValueAfterHaircuts);
  TransactionExposureSeller = select((FairMarketValueAfterHaircuts - EndCashRepo) > 0, 
  true->FairMarketValueAfterHaircuts - EndCashRepo);
  TRDQuantity = select(object.Trade.Portfolio.TypeChlItem.Name == "FVTPL", 
  true->object.Trade.Quantity, 
  false->0.0);
  typeOfSecurities = py("Report_Python_BO", context).typeOfSecurities(object.Trade);
  UnamortisedPBC = InterestAmountVal - GLNOAmount;
  UnamortisedPBC2 = select(object.Trade.OptKey3.Name, 
  "DL"->object.Trade.Premium - GLNOAmount2, 
  "SBI"->object.Trade.Premium - GLNOAmount2, 
  "BOND"->object.Trade.Premium - GLNOAmount2, 
  "TD"->InterestAmountVal - GLNOAmount2);
  UnAmortizedAmount3 = EndInterestRepo2 - AccruedInterestInstrument;
  UnderlyingThreshold2 = select(object.Trade.BoughtAsString, 
  "Sell"->select(object.Trade.OptKey4.Name, 
    "SPOT"->25000, 
    "TOD"->25000, 
    "TOM"->25000, 
    default->1000000), 
  "Buy"->select(object.Trade.OptKey4.Name, 
    "SPOT"->0, 
    "TOD"->0, 
    "TOM"->0, 
    default->1000000));
  UnderlyingUsedPerCp = py("Report_Python_BO", context).UnderlyingUsedPerCp(object);
  unrelizedInstrument = select(object.Trades.AsArray.First.Portfolio.TypeChlItem.Name, 
  "FVOCI"->(NominalInstrument * MarketPriceBondLastMonth) - BookCostAmort, 
  "FVTPL"->(NominalInstrument * AveragePrice) - (NominalInstrument * MarketPriceBondLastMonth), 
  "Amortised Cost"->NominalInstrument - BookCostAmort);
  UpperRate = py("Report_Python_BO", context).getPriceLowUpper(object.Trade, "high");
  UpperRateSP = py("Report_Python_BO", context).getPriceLowUpperSP(object.Trade, "upper");
  valueDateCustom = py("Report_Python_BO", context).valueDateCustom(object.Trade.ValueDay);
  valueDateDerivatives = py("Report_Python_BO", context).valueDateDerivatives(object.Trade);
  ValueDateSell = py("Report_Python_BO", context).tanggalJatuhTempoDokumenUnderlying(object.Trade.ValueDay, "%d %B %Y");
  valutaDasarApolo = select(object.Trade.CurrencyPair <> nil, 
  true->object.Trade.CurrencyPair.Currency1.Name, 
  false->object.Trade.Instrument.Currency.Name);
  valutaDasarJnsSukuBungaAcuanTSD = select(object.Trade.OptKey3.Name, 
  "SWAP"->py("Report_Python_BO", context).JnsSukuBungaAcuanTSD(object.Instrument, false));
  valutaDasarJnsSukuBungaTSD = select(object.Trade.OptKey3.Name, 
  "SWAP"->select(object.Instrument.RecLeg.LegType, 
    "Float"->select(object.Instrument.PayLeg.LegType, 
      "Float"->"2", 
      "Fixed"->"1"), 
    "Fixed"->"1"), 
  "BOND"->select(object.Trade.OptKey4.Name, 
    "FWD"->"1"));
  valutaDasarPremiumSukuBungaAcuan = select(object.Trade.OptKey3.Name, 
  "SWAP"->select(object.instrument.RecLeg, 
    "Float"->select(object.instrument.PayLeg, 
      "Float"->select(object.Instrument.RecLeg.FirstRate < object.Instrument.PayLeg.FirstRate, 
        true->object.Instrument.RecLeg.Spread, 
        false->object.Instrument.PayLeg.Spread))));
  valutaDasarPremiumSukuBungaAcuanTSD = select(object.Trade.OptKey3.Name, 
  "SWAP"->select(object.Instrument.RecLeg.LegType, 
    "Float"->select(object.Instrument.PayLeg.LegType, 
      "Float"->select(object.Instrument.RecLeg.FirstRate < object.Instrument.PayLeg.FirstRate, 
        true->object.Instrument.RecLeg.Spread, 
        false->object.Instrument.PayLeg.Spread))));
  valutaDasarSukuBungaTetap = select(object.Trade.OptKey3.Name, 
  "SWAP"->select(object.instrument.RecLeg, 
    "Float"->nil, 
    default->select(object.instrument.PayLeg, 
      "Float"->nil, 
      default->select(object.Instrument.RecLeg.FirstRate < object.Instrument.PayLeg.FirstRate, 
        true->object.Instrument.RecLeg.FixedRate, 
        false->object.Instrument.PayLeg.FixedRate))));
  valutaDasarSukuBungaTetapTSD = select(object.Trade.OptKey3.Name, 
  "SWAP"->select(object.Instrument.RecLeg.LegType, 
    "Float"->select(object.Instrument.PayLeg.LegType, 
      "Float"->nil, 
      "Fixed"->object.Instrument.PayLeg.FixedRate), 
    "Fixed"->select(object.Instrument.PayLeg.LegType, 
      "Float"->object.Instrument.RecLeg.FixedRate, 
      "Fixed"->select(object.Instrument.RecLeg.FirstRate < object.Instrument.PayLeg.FirstRate, 
        true->object.Instrument.RecLeg.FixedRate, 
        false->object.Instrument.PayLeg.FixedRate))), 
  "BOND"->select(object.Trade.OptKey4.Name, 
    "FWD"->0));
  valutaDokumenUnderlying = select(object.Trade.AdditionalInfo.LCS, 
  "Yes"->select(object.Trade.Instrument.InsType, 
    "Curr"->object.Trade.Instrument.Name, 
    default->object.Trade.Currency.Name), 
  default->nil);
  valutaLawanJnsSukuBunga = select(object.Trade.OptKey3.Name, 
  "SWAP"->select(object.Instrument.RecLeg.LegType, 
    "Float"->select(object.Instrument.PayLeg.LegType, 
      "Float"->"2", 
      "Fixed"->"2"), 
    "Fixed"->select(object.Instrument.PayLeg.LegType, 
      "Float"->"2", 
      "Fixed"->"1")));
  valutaLawanJnsSukuBungaAcuan = py("Report_Python_BO", context).valutaLawanJnsSukuBungaAcuan(object.Instrument);
  valutaLawanJnsSukuBungaAcuanTSD = select(object.Trade.OptKey3.Name, 
  "SWAP"->py("Report_Python_BO", context).JnsSukuBungaAcuanTSD(object.Instrument));
  valutaLawanJnsSukuBungaTSD = select(object.Trade.OptKey3.Name, 
  "SWAP"->select(object.Instrument.RecLeg.LegType, 
    "Fixed"->select(object.Instrument.PayLeg.LegType, 
      "Fixed"->"1", 
      "Float"->"2"), 
    "Float"->"2"), 
  "BOND"->select(object.Trade.OptKey4.Name, 
    "FWD"->"1"));
  valutaLawanPremiumSukuBungaAcuanTSD = select(object.Trade.OptKey3.Name, 
  "SWAP"->select(object.Instrument.RecLeg.LegType, 
    "Float"->select(object.Instrument.PayLeg.LegType, 
      "Float"->select(object.Instrument.RecLeg.FirstRate > object.Instrument.PayLeg.FirstRate, 
        true->object.Instrument.RecLeg.Spread, 
        false->object.Instrument.PayLeg.Spread))));
  valutaLawanSukuBungaTetap = select(object.Trade.OptKey3.Name, 
  "SWAP"->select(object.Instrument.RecLeg.LegType, 
    "Float"->nil, 
    default->select(object.Instrument.PayLeg.LegType, 
      "Float"->nil, 
      default->select(object.Instrument.RecLeg.FirstRate > object.Instrument.PayLeg.FirstRate, 
        true->object.Instrument.RecLeg.FixedRate, 
        false->object.Instrument.PayLeg.FixedRate))));
  valutaLawanSukuBungaTetapTSD = select(object.Trade.OptKey3.Name, 
  "SWAP"->select(object.Instrument.RecLeg.LegType, 
    "Float"->nil, 
    default->select(object.Instrument.PayLeg.LegType, 
      "Float"->nil, 
      default->select(object.Instrument.RecLeg.FirstRate > object.Instrument.PayLeg.FirstRate, 
        true->object.Instrument.RecLeg.FixedRate, 
        false->object.Instrument.PayLeg.FixedRate))), 
  "BOND"->select(object.Trade.OptKey4.Name, 
    "FWD"->0));
  valutaLawanTenorSukuBungaAcuanTSD = select(object.Trade.OptKey3.Name, 
  "SWAP"->py("Report_Python_BO", context).TenorSukuBungaAcuanTSD(object.Instrument));
  VariabelMendasariTSD = select(object.Trade.OptKey3.Name, 
  "BOND"->select(object.Trade.OptKey4.Name, 
    "OPT"->"X", 
    "FWD"->"X"), 
  default->select(object.Trade.OptKey4.Name, 
    "CCS"->"CI", 
    "IRS"->"I", 
    "OIS"->"I", 
    "MCS"->"C"));
  WeekNumber = py("Total_Trade", context).weeknumber(object.Trade.TradeTimeDateOnly);
  WITHGAINAMTAFS = py("Report_Python_BO", context).getJournalAmountTradeAfsTrd(object.Trade, "AFS");
  WITHGAINAMTTRD = py("Report_Python_BO", context).getJournalAmountTradeAfsTrd(object.Trade, "TRD");
  yieldSuratBerharga = select(object.Trade.OptKey3AsEnum, 
  "REPO"->nil, 
  "REVREPO"->nil, 
  default->string(py("Report_Python_BO", context).getYieldVal(object.Trade)));
}

clx FTradeSheet [FExtensionAttribute] {
  Posisi = py("Report_Python_BO", context).today_date;
  PosisiYst = py("Report_Python_BO", context).today_date(false);
}

decls[FExtensionValue] {
  "Buy Or Sale Quantity" ( "standard groupers.favorite groupers" ) "";
  "Buy Sell Customer Grouper" ( "standard groupers.favorite groupers" ) "";
  "Cashflow CounterParty Grouper" ( "standard groupers.favorite groupers" ) "";
  "Curr 1 Grouper" ( "standard groupers.favorite groupers" ) "";
  "Customer Rank Grouper" ( "standard groupers.favorite groupers" ) "";
  "Major Currency Grouper" ( "standard groupers.favorite groupers" ) "";
}

clx FInstrumentAndTradesGrouperSubject [FExtensionValue] {
  Buy Sell Customer Grouper
MethodSplit;Trade.BuySellCustomerGrouper
...

  Curr 1 Grouper
MethodSplit;Trade.Curr1Grouper
...

  Customer Rank Grouper
MethodSplit;Trade.customerRankGrouper
...

  Major Currency Grouper
MethodSplit;Trade.MajorCurrGrouper
...

}

clx FMoneyFlowGrouperSubject [FExtensionValue] {
  Cashflow CounterParty Grouper
Attribute;MoneyFlow.Instrument.Trades.First.Counterparty.FullName
...

}

clx FSettlementGrouperSubject [FExtensionValue] {
  Buy Or Sale Quantity
Attribute;Settlement.Trade.BoughtAsString
...

}

decls[FNumFormatter] {
}

clx FObject [FNumFormatter] {
  fiveComma =
  DenominatedValueDateTimeFormatter=
  DigitGrouping=
  DigitGroupingSymbol=
  Epsilon=0.0001
  Expression=
  Format=
  Fractions=
  InputScaleFactor=
  InputScaleFactorLimit=
  Inverse=
  MaximumSignificantDigits=
  MinimumSignificantDigits=
  Mnemonic='B'=1000000000.0:Input;'G'=1000000000.0:Input;'K'=1000.0:Input;'M'=1000000.0:Input;''=0.0:Output
  NumDecimals=5
  ScaleFactor=1.0
  ShowInf=false
  Tick=
  TruncateTrailingZeros=false
  USTreasuryInput=


  FiveDecimalDetailed =
  DenominatedValueDateTimeFormatter=
  DigitGrouping=
  DigitGroupingSymbol=
  Epsilon=1e-06
  Expression=
  Format=
  Fractions=
  InputScaleFactor=
  InputScaleFactorLimit=
  Inverse=
  MaximumSignificantDigits=
  MinimumSignificantDigits=
  Mnemonic='B'=1000000000.0:Input;'G'=1000000000.0:Input;'K'=1000.0:Input;'M'=1000000.0:Input
  NumDecimals=6
  ScaleFactor=
  ShowInf=false
  Tick=
  TruncateTrailingZeros=false
  USTreasuryInput=


  FourDecimalBehind =
  DenominatedValueDateTimeFormatter=
  DigitGrouping=
  DigitGroupingSymbol=
  Epsilon=
  Expression=
  Format=
  Fractions=
  InputScaleFactor=
  InputScaleFactorLimit=
  Inverse=
  MaximumSignificantDigits=
  MinimumSignificantDigits=
  Mnemonic=
  NumDecimals=4
  ScaleFactor=
  ShowInf=
  Tick=
  TruncateTrailingZeros=
  USTreasuryInput=


  Imprecise =
  DenominatedValueDateTimeFormatter=
  DigitGrouping=
  DigitGroupingSymbol=
  Epsilon=0.0001
  Expression=
  Format=
  Fractions=
  InputScaleFactor=
  InputScaleFactorLimit=
  Inverse=
  MaximumSignificantDigits=
  MinimumSignificantDigits=
  Mnemonic='B'=1000000000.0:Input;'G'=1000000000.0:Input;'K'=1000.0:Input;'M'=1000000.0:Input;''=0.0:Output
  NumDecimals=5
  ScaleFactor=1.0
  ShowInf=false
  Tick=
  TruncateTrailingZeros=false
  USTreasuryInput=


  TwoDecimalBehind =
  DenominatedValueDateTimeFormatter=
  DigitGrouping=
  DigitGroupingSymbol=
  Epsilon=
  Expression=
  Format=
  Fractions=
  InputScaleFactor=
  InputScaleFactorLimit=
  Inverse=
  MaximumSignificantDigits=
  MinimumSignificantDigits=
  Mnemonic=
  NumDecimals=2
  ScaleFactor=
  ShowInf=
  Tick=
  TruncateTrailingZeros=
  USTreasuryInput=


}

decls[FParameters] {
}

clx FObject [FParameters] {
  CustomReportSMTPParameters =
  EmailSender=ntcs_uat@devmandiri.co.id
  EmailUserName=ntcs_uat
  SecureSMTPConnection=True
  SMTPPassword=aaSF4c7j!
  SMTPPort=587
  SMTPServer=webmail.supporting.devmandiri.co.id


}

decls[FPythonCode] {
}

clx FObject [FPythonCode] {
  AccountingTrigger
import acm, ael, re, os
from datetime import date, datetime

def minusOneCal(date):
    jakarta = acm.FCalendar['Jakarta']
    return acm.Time.DateAdjustPeriod(date,'-1d',jakarta,2)

...

  ApoloFormating
import acm, ael, re, os
import FParameterUtils

from datetime import date, datetime
from ICTMODULES_FOR_HTML_AND_XSLFO_GENERATOR import *
from ICTCustomFEmailTransfer import ICTCustomFEmailTransfer

def lineEdit(line):
    splitCol = line.replace("\n", "").split("|")
    splitCol[2] = str(splitCol[2]) + (" " * (50 - len(splitCol[2]))) 
    splitCol[4] = ("0" * (12 - len(splitCol[4]))) + str(splitCol[4])
    splitCol[-2] = "00000.00"
    splitCol[-1] = "0" * (16 - len(splitCol[-1].replace("#", "").split(".")[0])) + str(splitCol[-1].replace("#", "").split(".")[0])
    return "|".join(splitCol)
  
def post_process_XML(reportObj, params, ReportXML):
    useCentury = reportObj.params.getYearWithCentury()
    fileDateFormat = reportObj.params.fileDateFormat.replace("y", "Y") if useCentury else reportObj.params.fileDateFormat
    dirDateFormat  = reportObj.params.dateFormat.replace("y", "Y") if useCentury else reportObj.params.dateFormat
    
    fileDate, dirDate = datetime.now().strftime(fileDateFormat), datetime.now().strftime(dirDateFormat)
    fileExt = str(reportObj.params.getSecondaryFileExtension())
    # File Path Used
    path = reportObj.params.filePath
    fileName = reportObj.params.fileName
    fullpath = os.path.join(str(path), "report"+str(dirDate), str(fileName)+str(fileDate)+fileExt)
    
    new_text = ""
    with open(fullpath, 'r') as file:
        lines = file.readlines()
        for i, line in enumerate(lines):
            if i == 0 :
                processed_line = ""
            elif i == 1 : 
                todayDate = acm.Time().DateToday()
                processed_line = line.replace("{{todayDate}}", todayDate)
            else : 
                try :
                    processed_line = lineEdit(line) + '\n'
                except :
                    processed_line = ""
            
            new_text += processed_line
    
    with open(fullpath, 'w') as file:
        file.write(new_text)

...

  CustomizedGrouperBO
import acm, ael, re, os
import FParameterUtils

from datetime import date
from ICTMODULES_FOR_HTML_AND_XSLFO_GENERATOR import *
from ICTCustomFEmailTransfer import ICTCustomFEmailTransfer
from Report_Python_BO import amountBaseOnCategory, ntr_tradeDateUsd

def BuySellCustomerGrouper(trade):
    if trade.OptKey4().Name() == "CCS" :
        if trade.Instrument().FirstReceiveLeg().Currency().Name() != "IDR":
            return "Buy"
        elif trade.Instrument().FirstPayLeg().Currency().Name() != "IDR":
            return "Sell"
    else :            
        if trade.BoughtAsString() == "Buy":
            return "Sell"
        else :
            return "Buy"

def customerRank(obj):
    parties = obj.Children()
    
    listPartyInfo = []
    for party in parties:
        totalAmount = 0
        for trade in party.Trades().AsArray():
            amount = abs(amountBaseOnCategory(True, trade))
            kurs = ntr_tradeDateUsd(trade)
            totalAmount += amount * kurs / 1000000
        
        listPartyInfo.append([trade.Counterparty().Name(), totalAmount])
    
    listPartyInfo.sort(key = lambda x: x[1], reverse=True)
    return [x[0] for x in listPartyInfo]

def getRank(obj):
    rankList = customerRank(obj.Parent())
    rank = rankList.index(obj.Trades().AsArray().First().Counterparty().Name())
    return str(rank + 1)

def currencyBaseOnCategory(trade):
    forCurr1 = True
    if str(trade.OptKey4AsEnum()) in ["MDCI", "MMLD"]:
        if forCurr1:
            return trade.Currency().Name()
        else :
            option_trade = [x for x in trade.DealPackage().Trades().AsArray() if "deposit/loan" not in str(x.InstrumentSubType()).lower()][0]
            curr1, curr2 = option_trade.CurrencyPair().Currency1().Name(), option_trade.CurrencyPair().Currency2().Name()
            return curr1 if trade.Currency().Name() != curr1 else curr2
    else :
        if trade.CurrencyPair():
            return trade.CurrencyPair().Currency1().Name() if forCurr1 else trade.CurrencyPair().Currency2().Name()
        else :
            return trade.Currency().Name() if forCurr1 else trade.Currency().Name() if trade.Instrument().InsType() == "BasketRepo/Reverse" else ""
    
def majorCurrGrouper(trade):
    currPair = trade.CurrencyPair()
    if currPair :
        return currPair.Currency1().Name()
    else :
        return trade.Instrument().Currency().Name()


...

  Report_Python_BO

import acm
import ael
import math
import traceback
import FLogger
import os
import re
import locale

from datetime import datetime, timedelta, date
#from InsertItems_LastMonth import last_month_business_day

logger = FLogger.FLogger(__name__)

context = acm.GetDefaultContext( )
cf_sheet_type = 'FMoneyFlowSheet'

stand_calc = acm.FStandardCalculationsSpaceCollection()

cf_calc_space = acm.Calculations().CreateCalculationSpace(context, cf_sheet_type)


def roundingNominal(nom, tc):
    return round(float(nom), tc)

def string_format_to_float(numberString):
    if numberString == "":
        num = 0
    else:
        for i in numberString[::-1]:
            if (i == ".") | (i == ","):
                dec = i
                break
        if dec == ".":
            num = float(numberString.replace(",",""))
        elif dec == ",":    
            num = float(numberString.replace(".","").replace(",","."))
    return num
    
def port_threshold_limit(obj, compliance_rule_name):
    #complianceRules = acm.FComplianceRule.Select('')
    complianceRule = acm.FComplianceRule[compliance_rule_name]
    '''
    applied_rule = None
    for compliance in complianceRules:
        if compliance   .AppliedRules().Size() != 0:
            if compliance.AppliedRules().Last().Target() is object and compliance.Name() == compliance_rule_name:
                applied_rule = compliance.AppliedRules().Last()
                break
    '''
    try:
        applied_rule = complianceRule.AppliedRules().Last()
    
        if applied_rule.Target() is obj.Portfolio():
            return applied_rule.ThresholdValues().First().ValueAdjusted()
        else:
            return 0
    except:
        return 0

def get_year_difference(end_date, value_day):
    dateDiff = abs(acm.Time.DateDifference(end_date, value_day));
    hari_per_tahun = 365
    looper = True
    logger.LOG(dateDiff)

    count = 0
    while looper:
        dateDiff = dateDiff - hari_per_tahun

        if dateDiff < 0:
            break
        else:
            count += 1
    
    return count
    #return value_day
    
def combine_string(text1, text2, text3, text4, text5):
    return str(text1) + str(text2) + str(text3) + str(text4) + str(text5)

def sum_column(list_trade):
    
    total = 0
    list_trade = list(list_trade)
    
    for i in list_trade:
        total += int(i.Premium())
    
    return total

def remove_bg(nominal_premium):
    nominal_premium = str(nominal_premium)
    return nominal_premium
    
def multiply_value(value1, value2, trade):
    logger.LOG('==========')
    logger.LOG(trade.Trade().Oid())
    logger.LOG(trade.Value())
    logger.LOG(value1)
    logger.LOG('============')
    return value1 * value2

def calculate_end_interest(rate, start_date, end_date, amount):
    selisih_tanggal = acm.Time.DateDifference(end_date, start_date)
    end_interest = (amount * rate * selisih_tanggal)/365
    
    return end_interest/100
    
def get_cashflow_proj_interest_amt(trd):
    
    mfs = trd.MoneyFlows()
    
    try:
        total_proj = 0.0
        for mf in mfs:
            if mf.Type() in ['Fixed Rate', 'Float Rate']:
                proj = float( mf.Calculation().Projected(stand_calc) )
                total_proj += proj 
        return total_proj
    except:
        return 0.0
    
def calculate_rate(trade, column_name):

    context = acm.GetDefaultContext( )
    sheet_type = 'FTradeSheet'
    column_id = column_name
    ins = trade
    
    #Create CalculationSpace (a virtual Trading Manager)
    calc_space = acm.Calculations( ).CreateCalculationSpace( context, sheet_type )
    #Get raw value
    value = calc_space.CalculateValue( ins, column_id)
    #Get formatted data
    calculation = calc_space.CreateCalculation( ins, column_id )
    
    try:
        result = float(calculation.FormattedValue()) * ins.Nominal()
    except Exception as e:
        #traceback.logger.LOG_exc()
        logger.LOG(e)
        result = ''
    
    return result

def calculate_amount_closing(trade, check_yesterday):
    ins_obj = trade.Instrument()
    value_day = trade.ValueDay()
    curr = trade.Currency()
    nominal = trade.Nominal()
    
    if check_yesterday:
        yesterday = acm.Time.DateAddDelta(value_day, 0, 0, -1)
        rate = ins_obj.MtMPrice(yesterday, curr)
    else:
        rate = ins_obj.MtMPrice(value_day, curr)
        
        
    return nominal * rate

def calculate_amount_closing_journal(object, isMovement=False):
    curr = object.Currency().Name()
    baseCurr = object.BaseCurrency().Name()
    amount = object.Amount()
    
    if curr != baseCurr:
        try :
            prices = acm.FPrice.Select(f"instrument = '{curr}' and currency = '{baseCurr}' and market = 'EOD_MtM' and day = YESTERDAY").Last().Settle()
        except:
            prices = 10000
        
        return amount * prices
    else :
        return amount
            

def calculate_amount_movement(trade):
    amount_closing = calculate_amount_closing(trade, False)
    amount_closing_yesterday = calculate_amount_closing(trade, True)
    return amount_closing - amount_closing_yesterday
    
def get_current_start_and_end_date(trade):
    start_date, end_date = None, None
    today = acm.Time.DateNow()
    
    for cf in trade.Instrument().Legs()[0].CashFlows():
        start_date = cf.StartDate()
        end_date = cf.EndDate()
        if today >= start_date and today <= end_date:
            return [start_date, end_date]
    
    return start_date, end_date
    
def get_start_date_cashflow(trade):
    x = trade.Instrument().Legs()[0].CashFlows()

    list_diff, list_start_date = [], []
    
    for i in x:
        today = acm.Time.DateToday()
        difference = acm.Time.DateDifference(today, i.StartDate())
        list_diff.append(difference)
        list_start_date.append(i.StartDate())
        
    min_day = min(list_diff)
    index = list_diff.index(min_day)
   
    return list_start_date[index]

def get_end_date_cashflow(trade):
    x = trade.Instrument().Legs()[0].CashFlows()

    list_diff, list_end_date = [], []
    
    for i in x:
        today = acm.Time.DateToday()
        difference = acm.Time.DateDifference(today, i.StartDate())
        list_diff.append(difference)
        list_end_date.append(i.EndDate())
        
    min_day = min(list_diff)
    index = list_diff.index(min_day)

    return list_end_date[index]

def testButton():
    logger.LOG('aaaa')

def testInputHooks(row, col, calcval, str, operation):
    logger.LOG('bbb')
    logger.LOG(str)
    logger.LOG(row)
    logger.LOG(col)
    logger.LOG(calcval)
    logger.LOG(operation)
    x = row.Trade()
    
    if len(str) > 0:
        x.Text2 = 'Test_Input_Tanggal : ' + str
    else:
        logger.LOG('masukk')
        x.Text2 = x.ValueDay()
        
    x.Commit()

def dynamic_rate(trade, column_id):
    ins_obj = trade.Instrument()
    text2 = trade.Text2().replace('Test_Input_Tanggal : ', '')

    rate = ins_obj.MtMPrice(text2, trade.Currency().Name())
    return rate

def calculate_PL_yesterday(value, type):
    
    cs = acm.Calculations().CreateStandardCalculationsSpaceCollection()
    today = acm.Time.DateToday()
    yesterday = acm.Time.DateAddDelta(today, 0, 0, -1)
    trade_calc = value.Calculation()
    
    try:
        if type == "TPL" :
            pv = trade_calc.TotalProfitLoss(cs, value.Instrument().StartDate(), yesterday).Number()
        
        elif type == "UPL" :
            pv = trade_calc.UnrealizedProfitLoss(cs, value.Instrument().StartDate(), yesterday).Number()
            
        elif type == "RPL" :
            pv = trade_calc.RealizedProfitLoss(cs, value.Instrument().StartDate(), yesterday).Number()
        else:
            pv = None
            
    except Exception as e:
        #traceback.logger.LOG_exc()
        logger.LOG(e)
        pv = None
    
    return pv

def sum_PL_yesterday(trades, type):
    
    cs = acm.Calculations().CreateStandardCalculationsSpaceCollection()
    result = 0
    today = acm.Time.DateToday()
    yesterday = acm.Time.DateAddDelta(today, 0, 0, -1)
        
    for i in trades:
        trade_calc = i.Calculation()
        
        try:
            if type == "TPL" :
                pv = trade_calc.TotalProfitLoss(cs, i.Instrument().StartDate(), yesterday).Number()
            
            elif type == "UPL" :
                pv = trade_calc.UnrealizedProfitLoss(cs, i.Instrument().StartDate(), yesterday).Number()
                
            elif type == "RPL" :
                pv = trade_calc.RealizedProfitLoss(cs, i.Instrument().StartDate(), yesterday).Number()
                
            else:
                pv = 0.00
                
        except Exception as e:
            #traceback.logger.LOG_exc()
            logger.LOG(e)
            pv = 0.00
            
        if math.isnan(pv):
            pv = 0
            
        result += pv
    
    return result

def get_value_from_hierarchy(hierarchy_name, node_name, ins_name):
    instrument_dict = {
        "Stock" : "-",
        "Future/Forward" : "-",
        "Option" : "Option",
        "Bond" : "Bond",
        "Deposit" : "MMLD",
        "Swap" : "IRS",
        "CurrSwap" : "CCS",
        "FxSwap" : "-",
        "BasketRepo/Reverse" : "Repo",
        "FXOptionDatedFwd" : "-",
        "Fx Rate" : "Fx Cash"
    }
    
    ins_name = ins_name.replace("'","")
    
    try:
        hierarchy = acm.FHierarchy[hierarchy_name]
        column_names = hierarchy.HierarchyType().HierarchyColumnSpecifications()
        list_nodes = hierarchy.HierarchyNodes()
        node_value = list_nodes[list_nodes.FindString(node_name)].HierarchyDataValues()
        index_column = column_names.FindString(instrument_dict[ins_name])
        
        if index_column == -1:
            index_column = "Not Found"
            
        result = float(node_value[index_column].DataValue())
    except Exception as e:
        #traceback.logger.LOG_exc()
        logger.LOG(e)
        #result = "'" + str(ins_name) + "' not found in " + str(hierarchy_name) + "."
        result = ""
    
    return result

def Total_Cashflow(list_trade):
    
    total = 0
    list_trade = list(list_trade)
    
    for i in list_trade:
        total += int(i.FaceValue())
    
    return total

def Instrument_Total_Cashflow(ins_type, list_trade):
    
    total = 0
    
    for i in list_trade:
        if i.Instrument().InsType().lower() == ins_type.lower():
            total += int(i.FaceValue())
    
    if total == 0 :
        total = None
        
    return total

def Product_Total_Cashflow(product_type, list_trade):
    
    total = 0
    
    for i in list_trade:
    
        try:
            if i.OptKey3().Name().lower() == product_type.lower() :
                total += int(i.FaceValue())
        except Exception as e:
            #traceback.logger.LOG_exc()calculate_amount_closing_journal
            logger.LOG(e)
            continue
    
    if total == 0 :
        total = None
        
    return total

def MMInterbankLIQ19(trade, nominal_type, list_category): # Buat FTradeRow
    result = None
    
    try:
        if trade.OptKey4().Name() in list_category:

            if nominal_type == "Buy" and trade.Nominal() >= 0 :
                result = trade.Nominal()
            elif nominal_type == "Sell" and trade.Nominal() < 0 :
                result =  trade.Nominal()
                
            elif nominal_type == "All" : 
                result =  trade.Nominal()
    except:
        pass
    
    return result

def TotalMMInterbankLIQ19(list_trade, nominal_type, list_category):
    result = 0

    for i in list_trade:
        temp_result = MMInterbankLIQ19(i, nominal_type, list_category)
        try:
            result += temp_result
        except:
            result += 0
    
    if result == 0 :
        result = None
        
    return result
    
reports_rows = {}

def generate_row_number(trade_id, report_key, group):

    global reports_rows

    if report_key not in reports_rows:
        reports_rows[report_key] = []
            
    try :
        index = reports_rows[report_key].index(trade_id)
        row_number = index + 1
    except:
        reports_rows[report_key].append(trade_id)
        row_number = len(reports_rows[report_key])

    return row_number

def get_date_from_cashflow_for_nominal_value(all_cashflow):

    date_input = acm.Time.DateToday()
    
    for cf in all_cashflow:
        time_range = bool(cf.StartDate() <= date_input and cf.EndDate() >= date_input)
        cashflow_type = cf.CashFlowType()
            
        if time_range and 'Rate' in cashflow_type :
            return cf.PayDate()
            
def get_projected_from_money_flow(trade, pay_date, cashflow_type):
    moneyflows = trade.MoneyFlows()
    total = 0
    
    try:
        for i in moneyflows:
            if i.Type() == "Premium" :
                continue
            
            proj_value = i.Calculation().Projected(stand_calc)
            result = proj_value.Number()
            nominal = trade.Nominal()
            
            time_range = acm.Time.DateDifference(pay_date, i.PayDate())

            if time_range == 0 and "Amount" not in cashflow_type and result != nominal :
                total += result
                break
            elif time_range == 0 and "Amount" in cashflow_type:
                total += nominal
                break
    except:
        pass
        
    return total

def get_projected_and_paydate_from_cashflow(trade, tipe_kolom):
    moneyflows = trade.MoneyFlows()
    legs = trade.Instrument().Legs()
    interest_date,interest_payment, interest_receive = '', 0, 0
    for i in legs:
        all_cashflow = i.CashFlows()
        leg_currency = i.Currency().Name()
        pay_date = get_date_from_cashflow_for_nominal_value(all_cashflow)
        
        if i.IsLocked():
            interest_date = pay_date
            
        for j in moneyflows:
            if j.Currency().Name() == leg_currency and j.PayDate() == pay_date and 'Rate' in j.Type(): 
                
                temp_nominal = get_projected_from_money_flow(trade, pay_date, j.Type())
                
                try:
                    temp_nominal = float(temp_nominal)
                except:
                    temp_nominal = 0
                    
                if i.PayLeg() :
                    interest_payment = temp_nominal
                else:
                    interest_receive = temp_nominal 
                    if trade.Oid() == 11343:
                        logger.LOG(temp_nominal)
                    
    
    if tipe_kolom == 'Proceed' :
        return interest_payment + interest_receive
    else:
    
        if interest_date == '':
            return pay_date
        else:
            return interest_date
            

def get_ctp_report_type(trade):
    cpty = trade.Counterparty()
    
    ctp_participants = cpty.AddInfoValue('CTPParticipants')
    result_group = ""
    
    try:
        #if "TQA" in cpty.Name() or "Sekuritas" in cpty.Name():
        
        if ctp_participants.lower() == 'yes' :
            cpty.AddInfoValue('CTPParticipants','Yes')
            result_group = "TWO"
        else:
            cpty.AddInfoValue('CTPParticipants','No')
            result_group = "ONE"
    
    except Exception as e: 
        logger.LOG(e)
    
    cpty.Commit()
    return result_group
    
def ctp_TransactionType(trade):
    
    type_result = ""
    ins_type = str(trade.InstrumentSubType())
    
    if 'repo' in ins_type.lower() :
        type_result = "R"
    elif acm.Time.AsDate(trade.TradeTime()) == trade.Instrument().StartDate() :
        type_result = "W"
    else:
        type_result = "O"
    
    trade.AddInfoValue('TransactionType', type_result)
    trade.Commit()
    
    return type_result

def ctp_FileGenerationStatus(trade, CTPStateStatus):
    context = acm.GetDefaultContext()
    sheetType = 'FTradeSheet'
    input = trade
    columnId_BoS = 'Bought or Sold'

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    calculation_BoS = calcSpace.CreateCalculation(input, columnId_BoS)
    buyorsell = calculation_BoS.FormattedValue().upper()
    
    statestatus = CTPStateStatus.upper() if CTPStateStatus != 'Amend' else 'AMD'
    
    if CTPStateStatus.lower() == 'success':
        return 'SUCCESS'
    else:
        trdnbr = str(trade.Oid())
        from CTP_Mandiri_Export_CSV import exportPath
        exportPath += '\\{}\\'.format(buyorsell)
        os.chdir(str(exportPath))
        regex = '[0-9]{12}'
        filename = 'CTP_{}_{}_{}.csv'.format(trdnbr, regex, statestatus)
        found = False
        for file in os.listdir():
            if re.search(filename, file):
                found = True
                break
            else:
                continue
                
        if found == True:
            return 'SUCCESS'
        else:
            return 'FAILED_{}'.format(statestatus)

def get_Mandiri_SID():
    mandiri = acm.FParty['Mandiri TRS HO']
    return mandiri.AdditionalInfo().SID()

def get_repurchase_value(trade):

    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    input = trade.MoneyFlows()
    columnId = 'Cash Analysis Projected'
    
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    
    sum = 0
    list = []
    
    for mf in input:
        if mf.MoneyFlowType() != "Trade Premium":
            calculation = calcSpace.CreateCalculation(mf, columnId).FormattedValue()
            num=float(calculation.replace(",",""))
            sum+=num
            list.append(mf.MoneyFlowType())
    
    return sum

def get_Collateral(trade, justTrade=False):
    try:
        agl = trade.AgreementLinks()[0]
        mag = agl.MasterAgreement().Name()
        ms = agl.MarginingSet().Name()
        query = """
            select al.trdnbr, mag.name, ms.name 
            from TradeAgreementLink al, MarginingSet ms, MasterAgreement mag
            where al.margining_set_seqnbr = ms.seqnbr
            and al.master_agreement_seqnbr = mag.seqnbr
            and mag.name = '{master_agreement}'
            and ms.name = '{margining_set}'
            """.format(master_agreement = mag, margining_set = ms)
        for i in ael.asql(query)[1][0]:
            trd_no = i[0]
            t = acm.FTrade[trd_no]
            if (trd_no != trade.Oid()) & (t.Instrument().InsType().lower() in ('collateral', 'bond', 'bill', 'frn', 'mbs/abs')):
                return t if justTrade else [t, t.Instrument().Name()]
    except Exception as e:
        #print(get_Collateral.__name__, str(trade.Oid()), str(e))
        #logger.LOG("%s of %s : %s" %(get_Collateral.__name__, str(trade.Oid()), str(e)))
        return None

def get_Collateral_Instrument(trade):
    coll = get_Collateral(trade)
    if coll != None:
        return coll[1]
    else:
        return None

def get_Collateral_Instrument_Issuer(trade):
    coll = get_Collateral(trade)
    if coll != None:
        ins = acm.FInstrument[coll[1]]
        return ins.Issuer()
    else:
        return None

def get_Collateral_Trade(trade):
    coll = get_Collateral(trade)
    if coll != None:
        return coll[0]
    else:
        return None
        
def get_Collateral_Amounts(trade):
    coll_trade = get_Collateral(trade)
    if coll_trade != None:
        amount = coll_trade[0].Quantity()*coll_trade[0].Instrument().ContractSize()
        return amount
    else:
        return None
        
def get_Collateral_Haircut(trade):
    coll_trade = get_Collateral(trade)
    if coll_trade != None:
        haircut = coll_trade[0].MarginingSet().HaircutRules()[0].Haircut()
        return haircut
    else:
        return None

def get_Collateral_Trade_Price(trade):
    coll = get_Collateral(trade)
    if coll != None:
        return coll[0].Price()
    else:
        return None

        
def get_Collateral_EndDate(trade,optkey3):
    if optkey3:
        if optkey3== "REPO" or optkey3 == "REVREPO":
            collateral = get_Collateral(trade)
            if collateral:
                return collateral[0].Instrument().EndDate()
        else:
            return trade.Instrument().EndDate()

def get_AccruedInterest(trade):
    cs = acm.Calculations().CreateStandardCalculationsSpaceCollection()
    tradeCalcs = trade.Calculation()
    accInt = tradeCalcs.AccruedInterestAsPriceSource(cs)
    return accInt.FormattedValue()

def get_Repo_Haircut(trade):
    coll = get_Collateral(trade)
    if coll != None:
        return coll[0].Haircut()
    else:
        return 0.0

def get_Repo_Yield(trade):
    if trade != None:
        context = acm.GetDefaultContext()
        sheetType = 'FTradeSheet'
        columnId = 'Trade Yield'
        
        calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
        calculation = calcSpace.CreateCalculation(trade, columnId).FormattedValue()
        num = string_format_to_float(calculation)
        return num

def Repo_Trade_Yield(trade):
    if trade.Instrument().InsType() != 'BasketRepo/Reverse':
        return get_Repo_Yield(trade)
    else:
        trade = get_Collateral_Trade(trade)
        return get_Repo_Yield(trade)
        
def sort(list):
    for i in range(0,len(list)):
        for j in range(i+1,len(list)):
            if list[i]>=list[j]:
                list[i],list[j] = list[j],list[i]
    return list
        
def RiskWeight(counterparty):

    ead_category = counterparty.AdditionalInfo().EAD_Categories()
    all_rating=[]
    nominal_rating=[]
    moodys = counterparty.Rating1()
    snp = counterparty.Rating2()
    fitch  = counterparty.Rating3()
    fitchindo = counterparty.AdditionalInfo().Fitch_Indonesia_Rtg()
    pefindo = counterparty.AdditionalInfo().Pefindo_Rtg()

    if moodys:
        all_rating.append(moodys.Name())

    if snp:
        all_rating.append(snp.Name())

    if fitch:
        all_rating.append(fitch.Name())

    if fitchindo:
        all_rating.append(fitchindo.replace("(idn)",""))

    if pefindo:
        all_rating.append(pefindo.replace("id",""))

    

    

    if ead_category == "1.a. EAD To Indonesia Government":
        return 0

    elif ead_category == "1.b. EAD To Sovereign":
    
        if len(all_rating)==0:
                return 100
                
        for rating in all_rating:

            if rating in ['AAA','AA+','AA','AA-','Aaa','Aa1','Aa2','Aaa3']:
                nominal_rating.append(0)

            elif rating in ['A+','A','A-','A1','A2','A3']:
                nominal_rating.append(20)

            elif rating in ['BBB+','BBB','BBB-','Baa1','Baa2','Baa3']:
                nominal_rating.append(50)

            elif rating in ['BB+','BB','BB-','B+','B','B-','Ba1','Ba2','Ba3','B','B2','B3']:
                nominal_rating.append(100)

            else:
                nominal_rating.append(150)

            

    

    elif ead_category == "2. EAD To Public Sector Entity":
    
        if len(all_rating)==0:
                return 50
                
        for rating in all_rating:

            if rating in ['AAA','AA+','AA','AA-','Aaa','Aa1','Aa2','Aaa3']:
                nominal_rating.append(20)

            elif rating in ['A+','A','A-','A1','A2','A3','BBB+','BBB','BBB-','Baa1','Baa2','Baa3']:
                nominal_rating.append(50)

            elif rating in ['BB+','BB','BB-','B+','B','B-','Ba1','Ba2','Ba3','B','B2','B3']:
                nominal_rating.append(100)

            else:
                nominal_rating.append(150)

            

                

    elif ead_category == "3. EAD To Multilateral Development Bank":
     
        if len(all_rating)==0:
                return 50
                
        for rating in all_rating:     

            if rating in ['AAA','AA+','AA','AA-','Aaa','Aa1','Aa2','Aaa3']:
                nominal_rating.append(20)

            elif rating in ['A+','A','A-','A1','A2','A3','BBB+','BBB','BBB-','Baa1','Baa2','Baa3']:
                nominal_rating.append(50)

            elif rating in ['BB+','BB','BB-','B+','B','B-','Ba1','Ba2','Ba3','B','B2','B3']:
                nominal_rating.append(100)

            else:
                nominal_rating.append(150)

            

    elif ead_category == "4.a. EAD To Other Bank - Short Term":
    
        if len(all_rating)==0:
                return 20
        
        for rating in all_rating:

            if rating in ['AAA','AA+','AA','AA-','Aaa','Aa1','Aa2','Aaa3','A+','A','A-','A1','A2','A3','BBB+','BBB','BBB-','Baa1','Baa2','Baa3']:
                nominal_rating.append(20)

            elif rating in ['BB+','BB','BB-','B+','B','B-','Ba1','Ba2','Ba3','B','B2','B3']:
                nominal_rating.append(50)

            else:
                nominal_rating.append(150)

            

                

    elif ead_category == "4.b. EAD To Other Bank - Long Term":
    
        if len(all_rating)==0:
            return 50
            
        for rating in all_rating:

            if rating in ['AAA','AA+','AA','AA-','Aaa','Aa1','Aa2','Aaa3']:
                nominal_rating.append(20)

            elif rating in ['A+','A','A-','A1','A2','A3','BBB+','BBB','BBB-','Baa1','Baa2','Baa3']:
                nominal_rating.append(50)

            elif rating in ['BB+','BB','BB-','B+','B','B-','Ba1','Ba2','Ba3','B','B2','B3']:
                nominal_rating.append(100)

            else:
                nominal_rating.append(150)


                

    elif ead_category == "5. EAD To SME Counterparty & Retail":
        return 75

        

    elif ead_category == "6. EAD To Corporate Counterparty":
        if len(all_rating)==0:
                return 100
                
        for rating in all_rating:

            if rating in ['AAA','AA+','AA','AA-','Aaa','Aa1','Aa2','Aaa3']:
                nominal_rating.append(20)

            elif rating in ['A+','A','A-','A1','A2','A3']:
                nominal_rating.append(50)

            elif rating in ['BBB+','BBB','BBB-','Baa1','Baa2','Baa3','BB+','BB','BB-','Ba1','Ba2','Ba3']:
                nominal_rating.append(100)

            else:
                nominal_rating.append(150)

            

    if len(nominal_rating)==1:
        sorted_list = sort(nominal_rating)
        return sorted_list[0]
    elif len(nominal_rating)==2:
        sorted_list = sort(nominal_rating)
        return sorted_list[1]
    elif len(nominal_rating)>=3:
        sorted_list = sort(nominal_rating)
        return sorted_list[1]

def get_RWA(insobject):
    context = acm.GetDefaultContext()
    sheetType = 'FPortfolioSheet'
    columnId = "SA-CCR Exposure At Default"
    sum_rwa = 0
    total = 0
    for each_instrument in insobject:
        ins = acm.FInstrument[each_instrument.Name()]
        calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
        result = calcSpace.CreateCalculation(ins, columnId).Value()
        if result.Number() or result != 'NaN':
            sum_rwa = sum_rwa+result.Number()
    return sum_rwa

def sum_cashflow_forward(mfs):
    sum_fwd = 0
    list = []
    
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    columnId = 'Cash Analysis Forward Rate'
    
    for mf in mfs:
        calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
        calculation = calcSpace.CreateCalculation(mf, columnId).Value()
        if type(calculation)==float and str(calculation)!='nan':
            sum_fwd += calculation
        
    return sum_fwd*100

def get_last_fixing_rate(rate_name):
    jakarta = acm.FCalendar['Jakarta']
    today = acm.Time.DateToday()
    yesterday = acm.Time.DateAdjustPeriod(today,'-1d',jakarta,2)
    prices = acm.FPrice.Select(f"instrument = '{rate_name}' and day='{today}'")
    if prices:
        return prices[0].Settle()
    else:
        prices = acm.FPrice.Select(f"instrument = '{rate_name}' and day = '{yesterday}'")
        if prices:
            return prices[0].Settle()
            
def get_next_payment_period(mfs):
    today = acm.Time.DateToday()
    for each_mf in mfs:
        if today >= each_mf.StartDate() and today <= each_mf.EndDate():
            return each_mf.StartDate() + " - " + each_mf.EndDate()
        else:
            continue

def get_last_payment_period(mfs):
    today = acm.Time.DateToday()
    for i in range(len(mfs)):
        if today >= mfs[i].StartDate() and today <= mfs[i].EndDate():
            if i==0:
                return mfs[i].StartDate() + " - " + mfs[i].EndDate()
            else:
                return mfs[i-1].StartDate() + " - " + mfs[i-1].EndDate()
        else:
            continue
        
    for each_mf in mfs:
        if today >= each_mf.StartDate() and today <= each_mf.EndDate():
            return each_mf.StartDate() + " - " + each_mf.EndDate()
        else:
            continue
    
def get_Volume_USD(trade):
    if trade.Instrument().Name() != "USD":
        if trade.Currency().Name() != "USD":
            price = usd_price_mtm(trade)
            if price:
                return abs(trade.Premium() * price)
            else:
                price = usd_price_mtm_yesterday(trade)
                if price:
                    return abs(trade.Premium()* price)
        else:
            return abs(trade.Premium())
    else:
        return abs(trade.Nominal())

def get_Volume_USD_trade_time(trade):
    if trade.Instrument().Name() != "USD":
        if trade.Currency().Name() != "USD":
            price = usd_price_mtm_tradetime(trade)
            if price:
                return abs(trade.Premium() * price)
        else:
            return abs(trade.Premium())
    else:
        return abs(trade.Nominal())

        
def listofjournals(journals):
    list_acc_number = []
    for each_journal in journals:
        list_acc_number.append(each_journal.AccountNumber())
    return list_acc_number


def usd_price(trade):

    prices = acm.FPrice.Select('market = EOD')
    
    for p in prices:
        if p.Instrument():
            if p.Instrument().InsType()=='Curr' and p.Instrument().Name()=='USD':
                if p.Currency().Name() == trade.Currency().Name():
                    return p.Settle()

def idr_price_mtm_curr(currname):
    today = acm.Time.DateToday()
    try :
        prices = acm.FPrice.Select(f"instrument = '{currname}' and currency = 'IDR' and market = 'EOD_MtM' and day >= YESTERDAY").Last().Settle()
        return prices
    except :
        return 1

def idr_price_mtm_curr_trade_date(trade, currname):
    tradeDate = trade.TradeTimeDateOnly()
    try :
        prices = acm.FPrice.Select(f"instrument = '{currname}' and currency = 'IDR' and market = 'EOD_MtM' and day = {tradeDate}").Last().Settle()
        return prices
    except :
        return 1

def idr_price_mtm_yesterday(trade, useValueDay=False, isYesterday=True, isPrice=True):

    jakarta = acm.FCalendar['Jakarta']
    today = trade.ValueDay() if useValueDay else acm.Time.DateToday()
    yesterday = acm.Time.DateAdjustPeriod(today,'-1d',jakarta,2)
    two_yesterday = acm.Time.DateAdjustPeriod(today,'-2d',jakarta,2)
    
    try :
        prices = acm.FPrice.Select(f"instrument = '{trade.Instrument().Currency().Name()}' and currency = 'IDR' and market = 'EOD_MtM' and day = '{yesterday if isYesterday else two_yesterday}'").Last()
        settle = prices.Settle()
        year, month, day = prices.Day().split("-")
        
        return settle if isPrice else "/".join([month, day, year])
    except :
        return 1

def idr_price_mtm_yesterday2(currName):

    jakarta = acm.FCalendar['Jakarta']
    today = acm.Time.DateToday()
    yesterday = acm.Time.DateAdjustPeriod(today,'-1d',jakarta,2)
    
    try :
        prices = acm.FPrice.Select(f"instrument = '{currName}' and currency = 'IDR' and market = 'EOD_MtM' and day = '{yesterday}'").Last()
        settle = prices.Settle()
        
        return settle
    except :
        return 1

def idr_price_mtm_yesterday_coll(trade, useMtM=True, useDate="Today", isPrice=True):
    ins_coll = get_Collateral_Instrument(trade)
    trade_coll = get_Collateral(trade, True)
    
    if not trade_coll:
        return None
    
    if useMtM :
        marketPrice = 'EOD_MtM'
    else :
        try :
            curr = trade_coll.Currency().Name()
            marketPrice = "BB_IBPA" if curr == "IDR" else "BB_BVAL"
        except :
            marketPrice = '-'

    jakarta = acm.FCalendar['Jakarta']
    today = acm.Time.DateToday()
    yesterday = acm.Time.DateAdjustPeriod(today,'-1d',jakarta,2)
    two_yesterday = acm.Time.DateAdjustPeriod(yesterday,'-1d',jakarta,2)
    
    if useDate == "Today" :
        dateUse = [today, -1]
    elif useDate == "Yesterday" :
        dateUse = [yesterday, -2]
    elif useDate == "Two_Yesterday" :
        dateUse = [two_yesterday, -3]
    
    prices_last = trade_coll.Instrument().Prices()

    for price in prices_last:
        if str(price.Market().Name()) == str(marketPrice) and useDate == "Today" and isPrice:
            return price.Bid()
        
    prices_his = acm.FPrice.Select(f"instrument = '{ins_coll}' and market = '{marketPrice}' and historical = true")
    
    if prices_his :
        rev_list = list(prices_his)[::-1]
        for price in rev_list:
            if int(acm.Time.DateDifference(dateUse[0], price.Day())) >= 0 :
                settle = price.Bid()
                break
    else :
        settle =  None
        
    year, month, day = dateUse[0].split("-")
        
    return settle if isPrice else "/".join([day, month, year])
    
    

def idr_price_mtm_today(trade):

    today = acm.Time.DateToday()
    if trade.Currency().Name() == "IDR":
        return 1
    prices = acm.FPrice.Select(f"instrument = '{trade.Currency().Name()}' and currency = 'IDR' and market = 'EOD_MtM' and day = '{today}'")
    for p in prices:
        if p:
            return p.Settle()
        else:
            return None


def usd_price_mtm(trade):
    today = acm.Time.DateToday()
    strongerusd = ['CHF','KYD','GBP','JOD','OMR','BHD','KWD','EUR']
    if trade.Currency().Name() in strongerusd:
        prices = acm.FPrice.Select(f"instrument = '{trade.Currency().Name()}' and currency = 'USD' and market = 'EOD_MtM' and day = '{today}'")
        if prices:
            return prices[0].Settle()
    else:
        prices = acm.FPrice.Select(f"instrument = 'USD' and currency = '{trade.Currency().Name()}' and market = 'EOD_MtM' and day = '{today}'")
        if prices:
            return 1/prices[0].Settle()
    
    

def usd_price_mtm_yesterday(trade):
    jakarta = acm.FCalendar['Jakarta']
    today = acm.Time.DateToday()
    yesterday = acm.Time.DateAdjustPeriod(today,'-1d',jakarta,2)
    strongerusd = ['CHF','KYD','GBP','JOD','OMR','BHD','KWD','EUR']
    if trade.Currency().Name() in strongerusd:
        prices = acm.FPrice.Select(f"instrument = '{trade.Currency().Name()}' and currency = 'USD' and market = 'EOD_MtM' and day = '{yesterday}'")
        if prices:
            return prices[0].Settle()
    else:
        prices = acm.FPrice.Select(f"instrument = 'USD' and currency = '{trade.Currency().Name()}' and market = 'EOD_MtM' and day = '{yesterday}'")
        if prices:
            return 1/prices[0].Settle()
    
    

def usd_price_mtm_tradetime(trade):
    jakarta = acm.FCalendar['Jakarta']
    strongerusd = ['CHF','KYD','GBP','JOD','OMR','BHD','KWD','EUR']
    trade_time = trade.TradeTimeDateOnly()
    trade_time_yesterday = acm.Time.DateAdjustPeriod(trade_time,'-1d',jakarta,2)
    if trade.Currency().Name() in strongerusd:
        prices = acm.FPrice.Select(f"instrument = '{trade.Currency().Name()}' and currency = 'USD' and market = 'EOD_MtM' and day = '{trade_time}'")
        if prices:
            return prices[0].Settle()
        else:
            prices = acm.FPrice.Select(f"instrument = '{trade.Currency().Name()}' and currency = 'USD' and market = 'EOD_MtM' and day = '{trade_time_yesterday}'")
            if prices:
                return prices[0].Settle()
    else:
        prices = acm.FPrice.Select(f"instrument= 'USD' and currency = '{trade.Currency().Name()}' and market = 'EOD_MtM' and day = '{trade_time}'")
        if prices:
            return 1/prices[0].Settle()
        else:
            prices = acm.FPrice.Select(f"instrument= 'USD' and currency = '{trade.Currency().Name()}' and market = 'EOD_MtM' and day = '{trade_time_yesterday}'")
            if prices:
                return 1/prices[0].Settle()
        

def idr_price_mtm(trade):
    list = []
    prices = acm.FPrice.Select(f"instrument = '{trade.Instrument().Currency().Name()}' and market = 'EOD_MtM'")
    for p in prices:
        if p.Instrument():
            if p.Currency().Name() == 'IDR':
                list.append(p.Settle())
    return list[-1]


def idr_price_mtm_tradetime(trade):
    prices = acm.FPrice.Select(f"instrument = '{trade.Instrument().Currency().Name()}' and market = 'EOD_MtM' and day = '{trade.TradeTimeDateOnly()}'")
    for p in prices:
        if p.Instrument():
            if p.Currency().Name() == 'IDR':
                return p.Settle()
                
def journalidramount(trade):
    amount = trade.FaceValue()
    price = idr_price_mtm_yesterday(trade)
    return price*amount

def get_sandi_bank(name):
    all_bank = acm.FChoiceList.Select("list=LBUT_SANDI BANK")
    for each in all_bank:
        if each.Name() == name:
            return each.Description()
            
def get_sandi_negara(country):
    all_bank = acm.FChoiceList.Select("list=UCCODE")
    for each in all_bank:
        if each.Name() == country:
            return each.Description()

def get_jenis_sb(trade):
    additionalinfo = ""
    collateral = get_Collateral(trade)
    if collateral:
        additionalinfo = collateral[0].Instrument().AdditionalInfo().LBUT_JENIS_SB()
    all_jenis_sb = acm.FChoiceList.Select("list=LBUT_JENIS SB")
    if additionalinfo:
        for each in all_jenis_sb:
            if each.Name() == additionalinfo:
                return each.Description()
    else:
        return None

def get_typeoffunding(country):
    code = get_sandi_negara(country)
    if code == "ID":
        return "Onshore"
    else:
        return "Offshore"

def get_idPihakLawan(country,cpname,swift,hostid):
    if country:
        if country=="Indonesia":
            sandi_bank = get_sandi_bank(cpname)
            if sandi_bank:
                return sandi_bank
            if swift:
                return swift
            if hostid:
                return hostid
        else:
            if swift:
                return swift
            else:
                return hostid
    else:
        return None
   
def get_Underlying_desc(und_matdate,typeund):
    stringresult = ""
    today = acm.Time.DateToday()
    if typeund == "ACCUMULATIVE":
        stringresult += "Underlying Used "
    if und_matdate:
        if today >= acm.Time.DateAddDelta(und_matdate,0,3,0):
            stringresult+= "Underlying Expired"
        
  
    return stringresult
        
def get_required_amount(undamount,accumulativeamount):
    if undamount:
        if accumulativeamount:
            return undamount-accumulativeamount
        else:
            return None
    else:
        return None
        
def get_ISIN_collateral(trade,optkey3):
    if trade.MarginingSet():
        if optkey3 == "REPO" or optkey3 == "REVREPO":
            collateral = get_Collateral(trade)
            if collateral:
                return collateral[0].Instrument().Isin()
        elif optkey3 == "BOND":
            return trade.Instrument().Isin()
    else:
        return None

def get_tenor_surat_berharga(object):
    trade = object.Trade()
    optkey3 = trade.OptKey3AsEnum()
    if optkey3:
        if optkey3 == "REPO" or optkey3 == "REVREPO":
            collateral = get_Collateral(trade)
            if collateral:
                listing_date = collateral[0].Instrument().AdditionalInfo().LISTING_DATE()
                end_date = collateral[0].Instrument().EndDate()
                if listing_date:
                    return str(acm.Time.DateDifference(end_date,listing_date)) + 'd'
                else:
                    issue_date = collateral[0].Instrument().IssueDay()
                    if issue_date:
                        return str(acm.Time.DateDifference(end_date,issue_date)) + 'd'
                    else:
                        start_date = collateral[0].Instrument().StartDate()
                        return str(acm.Time.DateDifference(end_date,start_date)) + 'd'
                        
        
def get_float_rate_and_spread(object):
    today = acm.Time.DateToday()
    instrument = object.Instrument()
    for legs in instrument.Legs():
        for cf in legs.CashFlows():
            if today>=cf.StartDate() and today <=cf.EndDate():
                context = acm.GetDefaultContext()
                sheetType = 'FMoneyFlowSheet'
                columnId_Rate = "Cash Analysis Forward Rate"
                calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
                result_rate = calcSpace.CreateCalculation(cf, columnId_Rate)
                return result_rate.Value()*100
            else:
                continue
        else:
            continue
                
def get_security_value(trade,optkey3):
    if trade.MarginingSet():
        collateral = get_Collateral(trade)
        if collateral:
            if optkey3 == "REPO" or optkey3 == "REVREPO":
                context = acm.GetDefaultContext()
                sheetType = 'FTradeSheet'
                columnId = "Margining Security Value"
                calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
                result = calcSpace.CreateCalculation(collateral[0],columnId)
                return result.FormattedValue()

def get_Target(obj):
    hierarchy = acm.FHierarchy['Portfolio Target']
    for node in hierarchy.HierarchyNodes():
        if len(node.HierarchyDataValues())>0:
            if node.HierarchyDataValues()[0].DataValue() == obj.StringKey():
                return node.HierarchyDataValues()[1].DataValue()

def SingleInterestPayment(mf):
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    columnId = "Cash Analysis Projected"
    
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    if mf.MoneyFlow().CashFlow().Leg().PayType()=="Pay" :
        if mf.MoneyFlow().CashFlowType() == "Fixed Rate" or mf.MoneyFlow().CashFlowType()== "Float Rate":
            result = calcSpace.CreateCalculation(mf.MoneyFlow(),columnId)
            return result.Value().Number()
           

def SingleInterestReceive(mf):
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    columnId = "Cash Analysis Projected"
    
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    if mf.MoneyFlow().CashFlow().Leg().PayType()=="Receive" :
        if mf.MoneyFlow().CashFlowType() == "Fixed Rate" or mf.MoneyFlow().CashFlowType()== "Float Rate":
            result = calcSpace.CreateCalculation(mf.MoneyFlow(),columnId)
            return result.Value().Number()



def InterestPayment(trade):
    
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    columnId = "Cash Analysis Projected"
    
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
        

    for mf in trade.MoneyFlows():
        if mf.PayDate() > acm.Time.DateToday() and mf.CashFlow().Leg().PayType()=="Pay":
            result = calcSpace.CreateCalculation(mf, columnId)
            if result.FormattedValue()=="NaN":
                return 0
                break
            else:
                return result.Value()
                break
    
def InterestReceive(trade):
    
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    columnId = "Cash Analysis Projected"
    
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    
    for mf in trade.MoneyFlows():
        if mf.PayDate() > acm.Time.DateToday() and mf.CashFlow().Leg().PayType()=="Receive":
            result = calcSpace.CreateCalculation(mf, columnId)
            if result.FormattedValue()=="NaN":
                return 0
                break
            else:
                return result.Value()
                break

def PVPayRec(trade):

    dir = trade.Direction()
    
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    columnId = "Portfolio Present Value"
    
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    
    for mf in trade.MoneyFlows():
        if mf.PayDate() > acm.Time.DateToday() and mf.CashFlow().Leg().PayType() in dir:
            result = calcSpace.CreateCalculation(mf, columnId).Value()
            return result
            break

def StartAccrual(trade):
    calendar = acm.FCalendar['Jakarta']
    today = acm.Time.DateToday()
    endofyear = acm.Time.FirstDayOfYear(today)
    endofyear = acm.Time.DateAdjustPeriod(endofyear,'-1d',calendar,2)
    recrate = 0
    payrate = 0
    for mf in trade.MoneyFlows():
        if endofyear >= mf.StartDate() and endofyear <= mf.EndDate():
            if mf.CashFlow().Leg().PayType() == "Receive":
            
                if mf.CashFlowType() == "Fixed Rate":
                
                    datediff = abs(acm.Time.DateDifference(mf.StartDate(),endofyear))
                    rate = trade.Instrument().CouponRate()
                    interest = (trade.Nominal()*rate)/100
                    recrate = interest*(datediff/360)
                    
                elif mf.CashFlowType() == "Float Rate":
                
                    context = acm.GetDefaultContext()
                    sheetType = 'FMoneyFlowSheet'
                    columnId_Rate = "Cash Analysis Forward Rate"
                    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
                    result_rate = calcSpace.CreateCalculation(mf, columnId_Rate)
                    if abs(result_rate.Value())>0:
                        rate = result_rate.Value()*100
                        interest = (trade.Nominal()*rate)/100
                        recrate = interest*(datediff/360)
                        
                else:
                    continue
                    
            elif mf.CashFlow().Leg().PayType() == "Pay":
            
                if mf.CashFlowType() == "Float Rate":
                
                    datediff = abs(acm.Time.DateDifference(mf.StartDate(),endofyear))
                    context = acm.GetDefaultContext()
                    sheetType = 'FMoneyFlowSheet'
                    columnId_Rate = "Cash Analysis Forward Rate"
                    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
                    result_rate = calcSpace.CreateCalculation(mf, columnId_Rate)
                    if abs(result_rate.Value())>0:
                        rate = result_rate.Value()*100
                        interest = (trade.Nominal()*rate)/100
                        payrate = (interest*datediff)/360
                        
                elif mf.CashFlowType() == "Fixed Rate":
                
                    datediff = abs(acm.Time.DateDifference(mf.StartDate(),endofyear))
                    rate = trade.Instrument().CouponRate()
                    interest = (trade.Nominal()*rate)/100
                    payrate = (interest*datediff)/360
                    
                else:
                    continue
        else:
            continue
            
    return (payrate*-1)-recrate
                

def EndAccrual(trade):
    today = acm.Time.DateToday()
    recrate = 0
    payrate = 0
    for mf in trade.MoneyFlows():
        if today >= mf.StartDate() and today <= mf.EndDate():
            if mf.CashFlow().Leg().PayType() == "Receive":
            
                if mf.CashFlowType() == "Fixed Rate":
                
                    datediff = abs(acm.Time.DateDifference(mf.StartDate(),today))
                    rate = trade.Instrument().CouponRate()
                    interest = (trade.Nominal()*rate)/100
                    recrate = interest*(datediff/360)
                    
                elif mf.CashFlowType() == "Float Rate":
                    datediff = abs(acm.Time.DateDifference(mf.StartDate(),today))
                    context = acm.GetDefaultContext()
                    sheetType = 'FMoneyFlowSheet'
                    columnId_Rate = "Cash Analysis Forward Rate"
                    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
                    result_rate = calcSpace.CreateCalculation(mf, columnId_Rate)
                    if abs(result_rate.Value())>0:
                        rate = result_rate.Value()*100
                        interest = (trade.Nominal()*rate)/100
                        recrate = interest*(datediff/360)
                        
                else:
                    continue
                    
            elif mf.CashFlow().Leg().PayType() == "Pay":
            
                if mf.CashFlowType() == "Float Rate":
                
                    datediff = abs(acm.Time.DateDifference(mf.StartDate(),today))
                    context = acm.GetDefaultContext()
                    sheetType = 'FMoneyFlowSheet'
                    columnId_Rate = "Cash Analysis Forward Rate"
                    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
                    result_rate = calcSpace.CreateCalculation(mf, columnId_Rate)
                    if abs(result_rate.Value())>0:
                        rate = result_rate.Value()*100
                        interest = (trade.Nominal()*rate)/100
                        payrate = (interest*datediff)/360
                        
                elif mf.CashFlowType() == "Fixed Rate":
                
                    datediff = abs(acm.Time.DateDifference(mf.StartDate(),today))
                    rate = trade.Instrument().CouponRate()
                    interest = (trade.Nominal()*rate)/100
                    payrate = (interest*datediff)/360
                    
                else:
                    continue
        else:
            continue
            
    return (payrate*-1)-recrate

def StartValue(trade):
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    columnId_proj = "Cash Analysis Projected"
    columnId_type = "Money Flow Type"
    today = acm.Time.DateToday()
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    for mf in trade.MoneyFlows():
        if today >= mf.StartDate() and today <= mf.EndDate() and mf.CashFlow().Leg().PayType()== "Receive":
            result_type = calcSpace.CreateCalculation(mf, columnId_type).FormattedValue()
            if str(result_type) == "Fixed Rate" or str(result_type) == "Float Rate":
                result_proj = calcSpace.CreateCalculation(mf, columnId_proj)
                if result_proj.FormattedValue()=="NaN":
                    return 0
                else:
                    accr = result_proj.Value()
                    price = idr_price_mtm_tradetime(trade)
                    if price:
                        return accr*price
                        break
                    else:
                        return accr
                        break
            else:
                continue
                
def EndValue(trade):
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    columnId_proj = "Cash Analysis Projected"
    columnId_type = "Money Flow Type"
    today = acm.Time.DateToday()
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    for mf in trade.MoneyFlows():
        if today >= mf.StartDate() and today <= mf.EndDate() and mf.CashFlow().Leg().PayType()== "Pay":
            result_type = calcSpace.CreateCalculation(mf, columnId_type).FormattedValue()
            if str(result_type) == "Fixed Rate" or str(result_type) == "Float Rate":
                result_proj = calcSpace.CreateCalculation(mf, columnId_proj)
                if result_proj.FormattedValue()=="NaN":
                    return 0
                else:
                    accr = result_proj.Value()
                    price = idr_price_mtm_tradetime(trade)
                    if price:
                        return accr*price
                        break
                    else:
                        return accr
                        break
            else:
                continue
'''
def CashflowDiff(trade):
    interest_pay = 0
    interest_rec = 0
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    columnId_proj = "Cash Analysis Projected"
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    today = acm.Time.DateToday()
    for mf in trade.MoneyFlows():
        if today >= mf.StartDate() and today <= today <= mf.EndDate():
            if mf.CashFlowType() == "Float Rate" or mf.CashFlowType() == "Fixed Rate":
                if mf.CashFlow().Leg().PayType() == "Pay":
                    result_proj = calcSpace.CreateCalculation(mf, columnId_proj)
                    if abs(result_proj.Value().Number())>0:
                         interest_pay = result_proj.Value().Number()
                elif mf.CashFlow().Leg().PayType() == "Receive":
                    result_proj = calcSpace.CreateCalculation(mf, columnId_proj)
                    if abs(result_proj.Value().Number())>0:
                         interest_rec = result_proj.Value().Number()
            else:
                continue
        else:
            continue

    return interest_pay - interest_rec
'''
def saldorata2pertahun():
    trds=acm.FTrade.Select('optKey3 = DL')
    return len(trds)/360

def LBUValue(amount, curr):
    idr_price = idr_price_mtm_curr(curr)
    return float(amount) * idr_price

def TRDInstrumentTrades(array_trade, port_child):
    nominal = 0
    
    for trade in array_trade:
        try :
            port_type = trade.Portfolio().TypeChlItem().Name()
        except :
            port_type = ""
            
        if port_type in port_child:
            nominal += float(trade.Nominal())
            
    return nominal
    
def price(trade):
    list=[]
    for p in trade.Currency().Prices():
        list.append(p)
    if len(list)>0:
        return list[-1]

def differencePajak(jurnal):
    try :
        payment_list = jurnal.Trade().Payments()
    except :
        payment_list = jurnal.JournalTrade().Payments()
    
    wht = 0
    for payment in payment_list:
        if payment.Type() == "WHT":
            payment_amount = payment.Amount()
        
            wht += float(payment_amount)
    
    return abs(wht - float(jurnal.Amount()))

def taxWht(object):
    try :
        payment_list = object.Trade().Payments()
    except :
        payment_list = object.JournalTrade().Payments()
    
    journal_curr = object.Currency().Name()
    payment_list = list(payment_list)[::-1]
    for payment in payment_list:
        if payment.Type() == "WHT" and payment.Currency().Name() == journal_curr:
            payment_amount = payment.Amount()
        
            return abs(float(payment_amount))

def repo_rate(trade):
    context = acm.GetDefaultContext()
    sheetType = 'FTradeSheet'
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    
    try:
        rate = calcSpace.CreateCalculation(trade, "Fixed Rate").FormattedValue()
    except :
        rate = 0
    
    return rate

def get_price_info(trade, price_type):
    ccy = trade.Currency().Name()

    price_list = acm.FPrice.Select(f'currency="{ccy}" and historical=False market="EOD_MtM"')

    if len(price_list) > 0:
        last_price = price_list.Last()
        
        if price_type == "bid" : return last_price.Bid()
        elif price_type == "ask" : return last_price.Ask()
        elif price_type == "settle" : return last_price.Settle()

def pemeringkat_dan_peringkat(instrument):
    SNP_RATING = ["AAA", "AA+", "AA", "AA-", "A+", "A", "A-", "BBB+", "BBB", "BBB-", "BB+", "BB", "BB-", "B+", "B", "B-"]
    MIS_RATING = ["Aaa", "Aa1", "Aa2", "Aa3", "A1", "A2", "A3", "Baa1", "Baa2", "Baa3", "Ba1", "Ba2", "Ba3", "B1", "B2", "B3"]
    
    currency = instrument.Currency().Name()
    if currency == "IDR":
        full_fitch_rating = instrument.AdditionalInfo().RATING_FITCHINDO()     
        full_pefindo_rating = instrument.AdditionalInfo().RATING_PEFINDO()
        
        if full_fitch_rating is None and full_pefindo_rating is None:
            return None, None
            
        if full_fitch_rating is None:
            full_fitch_rating = "-"
            fitch_rating = None
        else:
            fitch_rating = full_fitch_rating.lower().split("(idn)")[0].upper()

        if full_pefindo_rating is None:
            full_pefindo_rating = "-"
            pefindo_rating = None
        else:
            pefindo_rating = full_pefindo_rating.lower().split("id")[1].upper()

        fitch_index = SNP_RATING.index(fitch_rating) if SNP_RATING.count(fitch_rating) > 0 else 999
        pefindo_index = SNP_RATING.index(pefindo_rating) if SNP_RATING.count(pefindo_rating) > 0 else 999
        
        if pefindo_index >= fitch_index:
            return "PEFINDO", full_pefindo_rating
            
        else:
            return "FITCH INDONESIA", full_fitch_rating
            
    else:
        moody_rating = instrument.Rating1ChlItem().Name() if instrument.Rating1ChlItem() is not None else None
        snp_rating = instrument.Rating2ChlItem().Name() if instrument.Rating2ChlItem() is not None else None
        fitch_rating = instrument.Rating3ChlItem().Name() if instrument.Rating3ChlItem() is not None else None
        
        moody_index = MIS_RATING.index(moody_rating) if MIS_RATING.count(moody_rating) > 0 else 999
        snp_index = SNP_RATING.index(snp_rating) if SNP_RATING.count(snp_rating) > 0 else 999
        fitch_index= SNP_RATING.index(fitch_rating) if SNP_RATING.count(fitch_rating) > 0 else 999
        
        if moody_rating is None and snp_rating is None and fitch_rating is None:
            return None, None
            
        if fitch_index >= moody_index and fitch_index >= snp_index:
            return "FITCH", fitch_rating
            
        elif snp_index >= moody_index and snp_index >= fitch_index:
            return "STANDARD & POOR'S", snp_rating
            
        elif moody_index >= fitch_index and moody_index >= snp_index:
            return "MOODYS", moody_rating

def trade_eqvidr(trd):
    context = acm.GetDefaultContext()
    sheetType = 'FTradeSheet'
    columnId = "EquivalentAmountIDR"
    
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    result = calcSpace.CreateCalculation(trd,columnId)
    return result.FormattedValue()

def trd_marktomarket(trd):
    context = acm.GetDefaultContext()
    sheetType = 'FTradeSheet'
    columnId = "Portfolio Value"
    
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    result = calcSpace.CreateCalculation(trd,columnId)
    return result.Value().Number()

def trd_accruedinterest(trd):
    context = acm.GetDefaultContext()
    sheetType = 'FTradeSheet'
    columnId = "AccruedInterestValue"
    
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    result = calcSpace.CreateCalculation(trd,columnId)
    return float(result.Value())

def trd_amortized(trd):
    context = acm.GetDefaultContext()
    sheetType = 'FTradeSheet'
    columnId = "Nominal Amount Amortized"
    
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    result = calcSpace.CreateCalculation(trd,columnId)
    if result.Value():
        return result.Value()

def AmendmentDate(date):
    year, month, day = date.split(" ")[0].split("-")
    return f"{day}/{month}/{year}"
    
def HedgeTrade(trade, for_hedge, isContract):
    local_sep = locale.localeconv()["decimal_point"]
    
    context = acm.GetDefaultContext()
    sheetType = 'FTradeSheet'
    
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)         
    
    try :
        premium_str = calcSpace.CreateCalculation(trade, "PSAK Bond Fair Value").FormattedValue()
    except :
        premium_str = 0
    
    try :
        get_val_hedge = premium_str if premium_str != "NaN" else 0
    except :
        get_val_hedge = premium_str if premium_str != "NaN" else 0
    
    hedge_info = trade.HedgeTrade()
    
    if hedge_info :
        hedge_oid, hedge_other = hedge_info.Oid(), hedge_info.GetDeltaHedgeTrade().Oid()
    elif for_hedge == False:
        return get_val_hedge
    elif for_hedge == True and isContract == False:
        return 0
    else :
        hedge_oid = None
        
    
    if trade.Oid() != hedge_oid and for_hedge == True:
        premium = get_val_hedge
    elif trade.Oid() == hedge_oid and for_hedge == False:
        premium = get_val_hedge
    else :
        premium = 0
    
    if isContract:
        context = acm.GetDefaultContext()
        sheetType = 'FTradeSheet'
        calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)         
        
        market_val_str = calcSpace.CreateCalculation(trade, "Portfolio PL Market Value").FormattedValue()
        market_val_str = "".join(x for x in market_val_str if x.isdigit() or x in ["-", "."])
        
        try :
            market_val = float(market_val_str) if market_val_str not in ["NaN", ""] else 0
        except :
            market_val = float(market_val_str.replace(".", "").replace(",", ".")) if market_val_str not in ["NaN", ""] else 0
        
        try :
            get_val_hedge = "".join(x for x in get_val_hedge if x.isdigit() or x in ["-", local_sep])
        except :
            get_val_hedge = 0    
        
        try :
            get_val_hedge = float(get_val_hedge)
        except :
            get_val_hedge = float(get_val_hedge.replace(".", "").replace(",", "."))
        
        return get_val_hedge - market_val
    else :
        return premium

def HedgeTradeStr(trade, ishedge):
    hedge_info = trade.HedgeTrade()
    
    if hedge_info:
        return "yes" if ishedge else "no"
    else :
        return "no" if ishedge else "yes"

def journal_product(obj):
    return str(obj)

def getDiaryText(settlement_id):
    try :
        diary_result = settlement_id.Diary().Text().split("\n")
        return diary_result[-1]
    except:
        return ""

def fixingdate(ins):
    today = acm.Time.DateToday()
    list = []
    reset = ins.PayLeg().Resets()
    if reset:
        for r in reset:
            if r.ResetType()=='Compound' and r.FixingDate()>=today:
                list.append(r.FixingDate())
        if list:
            return sort(list)[0]

def getSecIdBond(object):
    if object.Trade():
        try :
            ins_subType = str(object.Trade().InstrumentSubType()).lower()
        except :
            ins_subType = None
        
        try :
            optkey3 = str(object.Trade().OptKey3().Name()).lower()
        except :
            optkey3 = None
        
        return optkey3, ins_subType
        
        if ins_subType or optkey3 :        
            if "bond" in [ins_subType, optkey3]:
                return object.Instrument().Name()
            elif "repo/reverse" in ins_subType or "revrepo" in optkey3:
                try :
                    return get_Collateral_Instrument(object.Trade())
                except :
                    pass
            elif "Basket Repo/Reverse" in [ins_subType, optkey3]:
                try :
                    return get_Collateral_Instrument(object.Trade())
                except :
                    pass


def JournalDiary(object):
    try :
        return object.Diary().Text.split("\n")[-1]
    except :
        return ""

def GainorLoss(trade):
    premium = float(trade.Premium()) if trade.Premium() != None else 0
    faceVal = float(trade.FaceValue()) if trade.FaceValue() != None else 0
    AcqPrice = float(trade.AdditionalInfo().AcquisitionPrice()) if trade.AdditionalInfo().AcquisitionPrice() != None else 0
    return (premium - (faceVal * AcqPrice))
        
def lower_price_yesterday(name):

    today = acm.Time.DateToday()
    jakarta = acm.FCalendar['Jakarta']
    yesterday = acm.Time.DateAdjustPeriod(today,'-1d',jakarta,2)
    prices = acm.FPrice.Select(f"instrument = '{name}' and market = 'EOD_MtM' and day = '{yesterday}'")
    for p in prices:
        return p.Low()

def upper_price_yesterday(name):
    
    today = acm.Time.DateToday()
    jakarta = acm.FCalendar['Jakarta']
    yesterday = acm.Time.DateAdjustPeriod(today,'-1d',jakarta,2)
    prices = acm.FPrice.Select(f"instrument = '{name}' and market = 'EOD_MtM' and day = '{yesterday}'")
    for p in prices:
        return p.High()


def EndCashIdr(trade):
    currency = trade.Currency().Name()
    try :
        faceValue = float(trade.FaceValue())
    except :
        faceValue = float("".join(x for x in trade.FaceValue() if x.isdigit() or x == "."))
    
    EndCashVal = faceValue + get_cashflow_proj_interest_amt(trade)
    
    if currency == "IDR" :
        return round(EndCashVal, 2)
    else :
        try :
            try :
                idr_price = float(acm.FPrice.Select(f"instrument = '{currency}' and currency = 'IDR' and market = 'EOD_MtM' and day = TODAY").Last().Settle())
            except :
                idr_price_str = acm.FPrice.Select(f"instrument = '{currency}' and currency = 'IDR' and market = 'EOD_MtM' and day = TODAY").Last().Settle()
                idr_price = float("".join(x for x in idr_price_str if x.isdigit() or x == "."))
        except :
            return round(EndCashVal, 2)
        
        return round(EndCashVal * idr_price, 2)
    
def getTime(time):
    return str(datetime.utcfromtimestamp(time) + timedelta(hours=7)).split(" ")[1]

def getBondPrice(instrument):
    try :
        try :
            ins_price = float(acm.FPrice.Select(f"instrument = '{instrument}' and market = 'EOD_MtM'").Last().Settle())
        except :
            ins_price_str = acm.FPrice.Select(f"instrument = '{instrument}' and market = 'EOD_MtM'").Last().Settle()
            ins_price = float(x for x in ins_price_str if x.isdigit() or x == ".")
        
        return ins_price
    
    except : return 0

def getBondPriceHist(instrument, forWhat="today"):
    try :
        ins_prices_today = acm.FPrice.Select(f"instrument = '{instrument}' and market = 'EOD_MtM' and historical = true and day = TODAY").Last()
    except :
        ins_prices = acm.FPrice.Select(f"instrument = '{instrument}' and market = 'EOD_MtM' and historical = true and day = YESTERDAY")
        if ins_prices and forWhat in ("today", "updateDay", "updateUser"):
            ins_prices_today = ins_prices.Last()
        elif forWhat in ("today", "updateDay", "updateUser"):
            return None
        
    ins_prices = acm.FPrice.Select(f"instrument = '{instrument}' and market = 'EOD_MtM' and historical = true and day = YESTERDAY")
    if ins_prices and forWhat == "yesterday":
        ins_prices_yst = ins_prices.Last()
    elif forWhat == "yesterday" :
        return None
    
    if forWhat == "today" :
        return ins_prices_today.Settle()
    elif forWhat == "yesterday" :
        return ins_prices_yst.Settle()
    elif forWhat == "updateDay" :
        update_datetime_utc = datetime.utcfromtimestamp(ins_prices_today.UpdateTime()) + timedelta(hours=7)
        update_datetime = update_datetime_utc.strftime('%Y/%m/%d %H:%M:%S')
        return update_datetime
    elif forWhat == "updateUser":
        return ins_prices_today.UpdateUser()

def bid(obj, market):
    curr = obj.Instrument().Currency().Name()
    ins = obj. Instrument().Name()
    today_date = acm.Time().DateToday()
    
    last_prices = obj.Instrument().Prices()
    for price in last_prices:
        update_datetime_utc = datetime.utcfromtimestamp(price.UpdateTime()) + timedelta(hours=7)
        update_datetime = update_datetime_utc.strftime('%Y-%m-%d')
        
        if str(price.Market().Name()) == str(market) and str(price.Currency().Name()) == "IDR" and update_datetime == today_date:
            return price.Bid()

def paymentsystem(mfs):
    for mf in mfs:
        if mf.Type()=='Premium':
            if mf.CounterpartyAccount():
                return mf.CounterpartyAccount().NetworkAliasType()

def query_journal_on_trade(trdnbr, cond = "('Live')"):
    query = f"""
        SELECT DISTINCT
            j.seqnbr
        FROM
            JournalInformation ji, 
            Journal j,
            ChartOfAccount c,
            TAccount ta
        WHERE
            ji.seqnbr = j.journal_info_seqnbr AND
            j.journal_type in {cond} AND
            (ji.contract_trdnbr = {trdnbr} OR ji.trdnbr = {trdnbr})
    """
    query_result = [row[0] for row in ael.asql(query)[1][0]]
    return query_result

def query_journal_on_trade2(insName, portName, portType, forBookcost):
    accIns = "AND DISPLAY_ID(ji, 'accounting_instruction_seqnbr') NOT IN ('Bond_TD_Daily MtM Trade Contract Ref BUPL')" if portType == "FVOCI" and forBookcost else ''
    
    query = f"""
        SELECT DISTINCT
            j.seqnbr, j.amount
        FROM
            JournalInformation ji, 
            Journal j,
            ChartOfAccount c,
            TAccount ta
        WHERE
            ji.seqnbr = j.journal_info_seqnbr AND
            j.chart_of_account_seqnbr = c.seqnbr AND
            c.t_account = ta.seqnbr AND
            j.journal_type = 'Live' AND
            DISPLAY_ID(ji, 'insaddr') = '{insName}' AND
            DISPLAY_ID(ji, 'prfnbr') = '{portName}' AND
            (ta.number LIKE '140%' OR ta.number LIKE '130%' OR ta.number LIKE '125%')
            {accIns}
    """
    try :
        query_result = [row[0] for row in ael.asql(query)[1][0]]
    except :
        print(query)
    return query_result 

def getJournalAmountTrade(trade, payable, mergeColumn=False, useStatus=False):
    jakarta = acm.FCalendar['Jakarta']
    todayDate = acm.Time.DateToday()
    yesterday = jakarta.AdjustBankingDays(todayDate, -1)

    glno_head_need = ["230", "145"]
    accInsList = ["daily mark-to-market", "daily mark to market", "daily interest accrued_pay", "daily interest accrued_rec"]
    
    journals_list = query_journal_on_trade(trade.Oid(), "('Live', 'Periodic Reversed')")
    
    amountVal = 0    
    for journal_no in journals_list:
        journal = acm.FJournal[journal_no]
        
        try :
            glno = str(journal.ChartOfAccount().TAccount().Number())[:3]
        except :
            glno = None
        
        accIns = journal.AccountingInstruction().Name().lower()
        journalType = journal.JournalType()
        
        journalCondReversed = str(journalType) == "Periodic Reversed" and journal.EventDate() == todayDate
        journalCondLive = str(journalType) == "Live" and (journal.EventDate() == yesterday or journal.EventDate() == todayDate)
        if glno in glno_head_need and (journalCondReversed or journalCondLive) and any([x in accIns for x in accInsList]) :
            print(glno, str(journalType), journal.EventDate(), todayDate, yesterday)
            journalGl = glno
            journalAmount = float(journal.Amount()) if mergeColumn else float(journal.BaseAmount())
            amountVal += journalAmount

    if trade.OptKey4().Name() != "SWAP" :
        try : headGlUse = str(journalGl)[:3]
        except : headGlUse = None
        if (headGlUse == "230" and payable) or (headGlUse == "145" and not payable):
            amountUse = amountVal
        elif mergeColumn : 
            amountUse = amountVal
        else :
            amountUse = 0
    else :
        if (payable and amountVal < 0) or (not payable and amountVal > 0) : 
            amountUse = amountVal
        else :
            amountUse = 0
    
    status = "Loss" if amountUse > 0 else "Gain" if amountUse < 0 else None
    return status if useStatus else amountUse

def getJournalAmountTradeAfsTrd(trade, AfsOrTrd):
    glno_head_need = "46011101" if AfsOrTrd == "TRD" else "46011102"    
    journals_list = query_journal_on_trade(trade.Oid())

    amountVal = 0
    for journal_no in journals_list:
        journal = acm.FJournal[journal_no]
        try :
            glno = journal.ChartOfAccount().TAccount().Number()
        except :
            glno = None
        if str(glno) == glno_head_need and trade.Bought() == False:
            journalAmount = float(journal.Amount())
            amountVal += abs(journalAmount)
    return 0 if trade.Bought() else amountVal

def getYieldVal(trade):
    context = acm.GetDefaultContext()
    sheetType = 'FTradeSheet'
    columnId = 'Trade Yield'
    
    try :
        calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
        yieldVal = calcSpace.CreateCalculation(trade, columnId).Value().Number()
    except :
        return 0
    
    return round(yieldVal * 100, 6)

def instrument_price(instrument_name):

    jakarta = acm.FCalendar['Jakarta']
    today = acm.Time.DateToday()
    yesterday = jakarta.AdjustBankingDays(today, -1)

    prices = acm.FPrice.Select(f"instrument = '{instrument_name}' and currency = 'IDR' and market = 'EOD_MtM' and day = '{yesterday}'")
    for p in prices:
        if p:
            return p.Settle()
        else:
            continue
        

def getAuditConfirmationVal(trade, isBuy=True, getCurr=True, isRate=False):
    
    if trade.CurrencyPair() == None:
        if isRate :
            return trade.Instrument().RecLeg().FixedPrice()
        else :
            if getCurr and isBuy:
                return trade.Currency().Name()
            elif getCurr and isBuy == False:
                pass
            else :
                return trade.Nominal()
        
    else :
        if isRate :
            return trade.Price()
        else :
            curr1, curr2 = trade.CurrencyPair().Name().split("/")
            
            if getCurr:
                if trade.Direction() == "Buy":
                    return curr1 if isBuy else curr2
                else :
                    return curr2 if isBuy else curr1
            else :
                if trade.Direction() == "Buy":
                    return trade.Premium() if isBuy else trade.Nominal()
                else :
                    return trade.Nominal() if isBuy else trade.Premium()
    

def GetCurrJournal(object, isBuy=True):
    trade = object.Trade()
    JournalTrade = object.JournalTrade()
    
    if trade == None and JournalTrade == None:
        return None
    elif trade == None:
        trade = JournalTrade
    
    if trade.CurrencyPair() == None:
        if isBuy:
            return trade.Currency().Name()
    else :
        curr1, curr2 = trade.CurrencyPair().Name().split("/")
        
        if trade.Direction() == "Buy":
            return curr1 if isBuy else curr2
        else :
            return curr2 if isBuy else curr1

def coupon_interest(trade):
    list=[]
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    columnId_proj = "Cash Analysis Projected"
    columnId_type = "Money Flow Type"
    today = acm.Time.DateToday()
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)

    for mf in trade.MoneyFlows():
        if mf.Type()=='Coupon':
            result_proj = calcSpace.CreateCalculation(mf, columnId_proj).Value().Number()
            if result_proj!=0:
                return result_proj

def couponDate(trade):
    today_date = acm.Time().DateToday()
    cashflow_list = trade.Instrument().RecLeg().CashFlows()
    
    min_delta = []
    for i in cashflow_list:
        deltaDate = acm.Time().DateDifference(i.PayDate(), today_date)
        if deltaDate > 0:
            min_delta.append([deltaDate, i.StartDate()])
    
    min_delta.sort(key=lambda x: x[0])
    year, month, day = str(min_delta[0][1]).split("-")
    return f"{day}/{month}/{year}"

def SettlementAmount(curr, totalAmount):
    try :
        prices = acm.FPrice.Select(f"instrument = '{curr}' and currency = 'IDR' and market = 'EOD_MtM' and day = YESTERDAY").Last().Settle()
    except:
        prices = 10000
    
    return totalAmount * prices

def closingBalanceSettlement(object):
    try :
        closingAmount = object.CounterpartyAccountRef().AdditionalInfo().ClosingBalance()
        return float(closingAmount.replace("C", "").replace("D", "-"))
    except :
        return 0
        
def createDateTimeJournal(date, isDate=True):
    date_format = (datetime.utcfromtimestamp(date) + timedelta(hours=7)).strftime("%m/%d/%Y %H:%M:%S")
    date, time = date_format.split(" ")
    return date if isDate else time


def closedLots(object, isValueDay) :
    trade = object.Trade()
    context = acm.GetDefaultContext()
    sheetType = 'FTradeSheet'
    columnId = 'Portfolio Closed Tax Lots'

    if trade.Bought() :
        all_trades = object.Parent().Trades().AsArray()
        trade_sells = [trade for trade in all_trades if trade.Bought() == False]
        trade_oid = trade.Oid()
        
        value_day_sell = []
        trade_sell_list = []
        for trade_sell in trade_sells:
            calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
            sell_infos = str(calcSpace.CreateCalculation(trade_sell, columnId).Value())[1:-1].split(", ")
            trade_sell_oid = trade_sell.Oid()
            
            for sell_info in sell_infos:
                if f"[{trade_oid}]" in sell_info:
                    year, month, day = trade_sell.ValueDay().split("-")
                    value_day_sell.append("/".join([month, day, year]))
                    trade_sell_list.append(trade_sell_oid)
        
        return value_day_sell if isValueDay else trade_sell_list
        
    else :
        calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
        sell_infos = str(calcSpace.CreateCalculation(trade, columnId).Value())
        
        year, month, day = trade.ValueDay().split("-")
        return "/".join([month, day, year]) if isValueDay else re.findall(r"\[(\d*)\]", sell_infos)
            
def trd_acc(trd, curr):
    for moneyflow in trd.MoneyFlows():
        if "premium" in str(moneyflow.Type()).lower() and moneyflow.Currency().Name() in str(curr):
            try :
                return moneyflow.CounterpartyAccount().Account()
            except :
                return ""

def num_separator(num):
    num = round(num, 2)
    return f'{num:,}'

def updateTimeSimulatedLive(journal_number):
    query = acm.FTransactionHistory.Select(f'name = {journal_number}')
    
    status_list = []
    for result in query:
        x = acm.FTransactionHistory[result.SeqNbr()]
        
        old_val = x.OldFieldValue('journal_type',"Journal")
        new_val = x.NewFieldValue('journal_type',"Journal")
        
        if old_val in [None, "Simulated"] and new_val == "Live" :
            date = datetime.utcfromtimestamp(result.UpdateTime()) + timedelta(hours=7)
            date = date.strftime("%m/%d/%Y %H:%M:%S")
            return date

def today_date(isToday=True):
    today_date = acm.Time().DateToday()
    if isToday :
        year, month, day = today_date.split("-")
        return "/".join([month, day, year])
    else :
        yesterday_date = acm.Time().DateAdjustPeriod(today_date, "-1d", "Jakarta")
        year, month, day = yesterday_date.split("-")
        return "/".join([month, day, year])

def NewvalueDateCollateral():
    return 2

def idr_price_mtm_last_month_businessDay(currname):
    today = acm.Time().DateToday()
    jakarta = acm.FCalendar['Jakarta']
    lastDate = acm.Time().LastDayOfMonth(today)
    lastDateAdj = acm.Time.DateAdjustPeriod(acm.Time().DateAddDelta(lastDate, 0, 0, 1), '-1d', jakarta, 2)
    price = acm.FPrice.Select(f"instrument = '{currname}' and currency = 'IDR' and market = 'EOD_MtM' and day = '{lastDateAdj}'")

    try:
        return price.Last().Settle()
    except :
        return 1

def TotalAmountIdrFasqlSettlement(isAmount):
    query = """
        SELECT 
            s.seqnbr
        FROM 
            Settlement s, trade t, instrument i
        WHERE
            s.trdnbr = t.trdnbr AND t.insaddr = i.insaddr
            AND s.value_day = TODAY 
            AND s.status IN ('Acknowledged', 'Pending Closure', 'Released')
            AND (
                DISPLAY_ID(t, 'optkey3_chlnbr') not in ('REVREPO', 'REPO', 'BONDSREPO')
                OR (DISPLAY_ID(t, 'optkey3_chlnbr') in ('REVREPO', 'REPO', 'BONDSREPO') AND
                    i.instype NOT IN ('BOND', 'BILL'))
                )
    """
    result = [x[0] for x in ael.asql(query)[1][0]]
    
    
    total = 0
    for sett_nbr in result:
        sett = acm.FSettlement[sett_nbr]
        amount = sett.Amount()
        price = idr_price_mtm_yesterday(sett.Trade())
        
        total += abs(amount) * price
        
    return total if isAmount else len(result)

def EquivalentAmountIDRSett(object):
    InstrumentSubType = object.Trade().InstrumentSubType()
    yesterday_price = idr_price_mtm_yesterday(object.Trade())
    
    if "repo" in str(InstrumentSubType).lower():
        amount = float(object.Trade().Instrument().ContractSize()) * yesterday_price / 1000000000
    else :
        amount = float(object.Amount()) * yesterday_price / 1000000000
    
    return abs(amount)


def priceYield(trade) :
    context = acm.GetDefaultContext()
    sheetType = 'FTradeSheet'
    columnId = 'Trade Yield'
    
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    priceYield = calcSpace.CreateCalculation(trade, columnId).FormattedValue()
    
    return priceYield if (priceYield or priceYield != "#") else 0

def currencyBaseOnCategory(forCurr1, trade):
    if str(trade.OptKey4AsEnum()) in ["MDCI", "MMLD"]:
        if forCurr1:
            return trade.Currency().Name()
        else :
            option_trade = [x for x in trade.DealPackage().Trades().AsArray() if "deposit/loan" not in str(x.InstrumentSubType()).lower()][0]
            curr1, curr2 = option_trade.CurrencyPair().Currency1().Name(), option_trade.CurrencyPair().Currency2().Name()
            return curr1 if trade.Currency().Name() != curr1 else curr2
    else :
        if trade.CurrencyPair():
            return trade.CurrencyPair().Currency1().Name() if forCurr1 else trade.CurrencyPair().Currency2().Name()
        else :
            return trade.Currency().Name() if forCurr1 else trade.Currency().Name() if trade.Instrument().InsType() == "BasketRepo/Reverse" else ""

def amountBaseOnCategory(forCurr1, trade, asin=False):
    if str(trade.OptKey4AsEnum()) in ["MDCI", "MMLD", "MLDR"]:
        if forCurr1:
            depo_trade = [x for x in trade.DealPackage().Trades().AsArray() if "deposit/loan" in str(x.InstrumentSubType()).lower()][0]
            return round(depo_trade.Premium(), 2)
        else :
            option_trade = [x for x in trade.DealPackage().Trades().AsArray() if "deposit/loan" not in str(x.InstrumentSubType()).lower()][0]
            return round(option_trade.FaceValue(), 2) if str(trade.OptKey4AsEnum()) != "MLDR" else None
    elif str(trade.OptKey4AsEnum()) == "MCS":
        nominal = round(trade.Nominal(), 2)
        nominal2 = round(nominal * trade.Instrument().StrikePrice(), 2)
        return nominal if forCurr1 else nominal2
    else :
        if trade.CurrencyPair():
            if str(trade.OptKey4AsEnum()) == "CCS" :
                nominal = round(trade.Nominal(), 2)
                nominal2 = round(nominal * trade.Instrument().FirstReceiveLeg().NominalFactor(), 2) 
                
                if trade.Instrument().FirstReceiveLeg().Currency().Name() != trade.CurrencyPair().Currency2().Name() :
                    return nominal2 if forCurr1 else nominal
                else :
                    return nominal if forCurr1 else nominal2
            elif str(trade.OptKey4AsEnum()) == "OPT" :
                return round(trade.Position(), 2) if forCurr1 else round(trade.Position() * trade.Instrument().StrikePrice(), 0)
            else :
                return round(trade.Position(), 2) if forCurr1 else round(trade.Premium(), 2)
        elif trade.Instrument().InsType() == "BasketRepo/Reverse":
            return round(trade.StartCash(), 2) if forCurr1 else (round(trade.StartCash(), 2) - get_cashflow_proj_interest_amt(trade)) * -1
        else :
            return None if asin else round(trade.Nominal(), 2)

def rateBaseOnCategory(forCurr1, trade):
    if trade.OptKey4AsEnum() == "MDCI":
        option_trade = [x for x in trade.DealPackage().Trades().AsArray() if "deposit/loan" not in str(x.InstrumentSubType()).lower()][0]
        return option_trade.Instrument().StrikePrice() if forCurr1 else None
    elif trade.OptKey4AsEnum() in ["MMLD", "MLDR"]:
        depo_trade = [x for x in trade.DealPackage().Trades().AsArray() if "deposit/loan" in str(x.InstrumentSubType()).lower()][0]
        option_trade = [x for x in trade.DealPackage().Trades().AsArray() if "deposit/loan" not in str(x.InstrumentSubType()).lower()][0]
        return depo_trade.Instrument().FirstLeg().FixedRate() if forCurr1 else option_trade.Price()
    else :
        if trade.CurrencyPair():
            return round(trade.Price(), 0) if forCurr1 else None
        else :
            try :
                return None if forCurr1 else round(trade.Instrument().FirstLeg().FixedRate(), 0)
            except :
                return None if forCurr1 else round(trade.Price(), 0)

def rateBaseOnCategoryMerge(trade):
    if trade.OptKey3AsEnum().lower() == 'SP':
        depo_trade = [x for x in trade.DealPackage().Trades().AsArray() if "deposit/loan" in str(x.InstrumentSubType()).lower()][0]
        return depo_trade.Instrument().FirstReceiveLeg().FixedRate()
    else :
        if trade.CurrencyPair():
            return round(trade.Price(), 2)
        elif str(trade.InstrumentSubType()).lower() in ["swap", "deposit/loan"] :
            return round(trade.Instrument().FirstReceiveLeg().FixedRate(), 2)
        elif str(trade.Instrument().InsType()).lower() == 'basketrepo/reverse':
            return round(trade.Instrument().FirstReceiveLeg().FixedRate(), 2)
        else :
            return round(trade.Price(), 2)

def MaturityDate(trade, default=True):
    optkey4 = trade.OptKey4().Name()
    
    if optkey4 in ["CCS", "IRS", "OIS"]:
        dateUse = trade.Instrument().ExpiryDateOnly()
    elif optkey4 in ["SPOT", "NDF", "FWD", "SWAP", "NS"]:
        return None
    elif optkey4 in ["MMLD"] :
        dateUse = trade.Instrument().ExpiryDateOnly()
    elif optkey4 in ["MLDR"] :
        dateUse = trade.Instrument().EndDate()
    elif optkey4 in ["MCS"] :
        dateUse = trade.Instrument().ExpiryDateOnly()
    elif optkey4 in ["MDS"]:
        dateUse = trade.ValueDay()
    elif "option" in str(trade.Instrument().InsType()).lower():
        dateUse = trade.Instrument().ExpiryDateOnly()
    elif "deposit" in str(trade.Instrument().InsType()).lower():
        dateUse = trade.Instrument().ExpiryDateOnly()
    elif "swap" in str(trade.InstrumentSubType()).lower():
        dateUse = trade.Instrument().ExpiryDateOnly()
    
    
    try :
        year, month, day = [str(x) for x in acm.Time.DateToYMD(dateUse)]
        return datetime.strptime("/".join([day, month, year]), "%d/%m/%Y").strftime("%d %B %Y")
    except :
        pass
        
def additional_info_ins(ins, type):
    if type == "HoldPosBIS4":
        try : result_str = ins.AdditionalInfo().HoldPosBIS4() 
        except : return 0
    elif type == "HoldPosCustody":
        try : result_str = ins.AdditionalInfo().HoldPosCustody()
        except : return 0
    elif type == "HoldPosEuroClear":
        try : result_str = ins.AdditionalInfo().HoldPosEuroClear()
        except : return 0
    elif type == "DateHoldPos":
        try : date1 = ins.AdditionalInfo().HoldPosBIS4().split("_")[0]
        except : date1 = 0
        
        try : date2 = ins.AdditionalInfo().HoldPosCustody().split("_")[0]
        except : date2 = 0
        
        try : date3 = ins.AdditionalInfo().HoldPosEuroClear().split("_")[0]
        except : date3 = 0
       
        dateList = [date1, date2, date3]
        dateList = [int(str(x)[2:].replace("-", "")) if "-" in str(x) else int(x) for x in dateList]
        
        dateList.sort(reverse=True)
        dateUpdate = str(dateList[0])
        year, month, day = [dateUpdate[:2], dateUpdate[2:4], dateUpdate[4:6]]
        return f"20{year}-{month}-{day}" if dateUpdate != "0" else None
        
    try :
        result = result_str.split("_")[1]
        return float(result.replace("D", "-").replace("C", ""))
    except :
        return 0

def all_additional_info_ins(ins):
    try :
        list_info = [ins.AdditionalInfo().HoldPosBIS4(), ins.AdditionalInfo().HoldPosCustody(), ins.AdditionalInfo().HoldPosEuroClear()]
    except :
        list_info = [ins.AdditionalInfo().HoldPosBIS4(), ins.AdditionalInfo().HoldPosCustody()]
        
    for info_ins in list_info :
        if info_ins :
            try :
                result = info_ins.split("_")[1]
                return float(result.replace("D", "-").replace("C", ""))
            except :
                return 0
    
    return 0
        
def priceInfo(ins, info, market='BB_BVAL'):
    jakarta = acm.FCalendar['Jakarta']
    today = acm.Time.DateToday()
    
    try :
        prices = acm.FPrice.Select(f"instrument = '{ins.Name()}' and market = '{market}'").Last()
    except :
        return 0 if info != "update_time" else None
    
    if info == "Settle" :
        return prices.Settle() 
    elif info == "Bid":
        return prices.Bid()
    elif info == "Ask":
        return prices.Ask()
    elif info == "update_time":
        datetimeFormat = str(datetime.utcfromtimestamp(prices.UpdateTime()))
        return acm.Time().UtcToLocal(datetimeFormat)
            
def priceInfoUpdate(ins):
    prices_bbval = acm.FPrice.Select(f"instrument = '{ins.Name()}' and market = 'BB_BVAL'")
    prices_bbibpa = acm.FPrice.Select(f"instrument = '{ins.Name()}' and market = 'BB_IBPA'")
    
    if prices_bbval :
        price_bbval = prices_bbval.Last()
    
    if prices_bbibpa:
        price_bbibpa = prices_bbibpa.Last()
    
    if int(price_bbval.UpdateTime()) >= price_bbibpa.UpdateTime():
        return str(datetime.utcfromtimestamp(price_bbval.UpdateTime()))
    else :
        return str(datetime.utcfromtimestamp(price_bbibpa.UpdateTime()))

def tradeTimeLocal(tradeTime, type="full"):
    localTime = acm.Time().UtcToLocal(tradeTime)

    date, clock = localTime.split(" ")
    year, month, day = date.split("-")
    
    if type == "full" :
        return str("/".join([month, day, year]) + " " + clock)
    elif type == "date" :
        dateFormat = datetime.strptime(date, "%Y-%m-%d")
        return dateFormat.strftime("%d %B %Y")
    elif type == "time" :
        return str(clock)

def payday(trade, startCoupon=False):
    
    try :
        x = trade[0].Instrument().Legs()

        date_list=[]
        for i in x:
            all_cf = i.CashFlows()
            for i in all_cf:
                if i.PayDate() >= acm.DateToday():
                    date_list.append([i.PayDate(), i.StartDate()])

        mini = min(date_list, key=lambda x: x[0])[1] if startCoupon else min(date_list, key=lambda x: x[0])[0]
        year, month, day = str(mini).split("-")
        
        return f"{day}/{month}/{year}"
    except :
        pass


def valueDateCustom(value_date):
    date_format = datetime.strptime(value_date, "%Y-%m-%d")
    return date_format.strftime("%d %B %Y")

def DaysDelays(valueDay, AccValueDay):
    datevalueDay = datetime.strptime(valueDay, "%Y-%m-%d")
    dateAccValueDay = datetime.strptime(AccValueDay, "%Y-%m-%d")
    
    return abs((dateAccValueDay - datevalueDay).days)

def InvTypeCollateral(trade):
    try :
        coll_trade = get_Collateral(trade, True)
        type = coll_trade.AdditionalInfo().BondPortfolio().TypeChlItem().Name()
        
        if type == 'Amortised Cost':
            return 'H'
        elif type == 'FVTPL':
            return 'T'
        elif type == 'FVOCI':
            return 'A'
    except :
        return None

def typeOfSecurities(trade):
    try :
        coll_trade = get_Collateral(trade, True)
        type = coll_trade.Portfolio().TypeChlItem().Name()
        return type
    except :
        pass


def get_fixing_date_trade(trade,legUsed):
    legUse = trade.Instrument().FirstReceiveLeg() if legUsed == "R" else trade.Instrument().FirstPayLeg()
    
    if legUse.LegType() == "Float":
        todayDate = acm.Time().DateToday()
        list_cashflow = legUse.CashFlows()
        
        date_list = []
        for cashflow in list_cashflow:
            try :
                
                fix_date = [x.Reset().FixingDate() for x in cashflow.Resets()]
                date_list.extend(fix_date)
                
            except :
                continue
        
        date_list.sort()
        for fixing_date in date_list:
            date_diff = acm.Time().DateDifference(fixing_date, todayDate)
            if date_diff > 0:
                return fixing_date
        
    else :
        return None 

def priceUsedInEodMtM(ins):
    today_date = str(acm.Time().DateToday())
    market_list = ["BB_BGN", "BI-SSSS", "BB_BVAL", "BB_EXCH", "BB_IBPA", "Mark To Model", "NAV"]
    
    price_info_list = []
    for market in market_list:
        query = f"instrument = '{instrument}' and currency = 'IDR' and market = '{market}' and historical = true and day = {today_date}"
        price_market = acm.FPrice.Select(query)
        price_info_list.append([market, price_market])

def ceilingAmount(trade):
    return trade.EndCash() - trade.FaceValue()

def SourceUse(ins):
    todayMtM, UpdateMtM = getBondPriceHist(ins.Name(), forWhat="today"), getBondPriceHist(ins.Name(), forWhat="updateDay")
    if not todayMtM and not UpdateMtM :
        return None
    else :
        UpdateMtM = UpdateMtM.split(" ")[0].replace("/", "-")
    
    jakarta = acm.FCalendar['Jakarta']
    date_ytd = acm.Time.DateAdjustPeriod(UpdateMtM,'-1d',jakarta,2)
    
    price_info_list = []
    market_list = ["BB_BGN", "BI-SSSS", "BB_BVAL", "BB_EXCH", "BB_IBPA", "Mark To Model", "NAV"]
    for market in market_list:
        query = f"instrument = '{ins.Name()}' and currency = 'IDR' and market = '{market}' and historical = true and day = {date_ytd}"
        price_market = acm.FPrice.Select(query)
        
        if price_market :
            price_bid = price_market.Last().Bid()
            diff = abs(todayMtM - price_bid)
            price_info_list.append([market, price_bid, diff])
    
    price_info_list.sort(key = lambda x: x[2])
    
    if price_info_list:
        return price_info_list[0][0]



def SpecificGlnoUsed(trade):
    optkey3, optkey4 = str(trade.OptKey3AsEnum()), str(trade.OptKey4AsEnum())
    
    if optkey3 in ["BOND", "SBI"]:
        optkey3, optkey4 = str(trade.Instrument().ProductTypeChlItem().Name()), str(trade.Instrument().CategoryChlItem().Name())
    
    journalNum_list = query_journal_on_trade(trade.Oid())
    
    glnoDict = {
        "DL"            : {"CL" : 12511102, "CMP" : 12511102, "OVP" : 19611206, "SHARI" : 12511102, "CMT" : 22015101, "OVT" : 29611204, 
                           "MD" : 24511901, "BA" : 19511931, "BLT" : 19511931, "FASBI" : 12511103},
        "BOND"          : {"CBIDR" : [13023101, 13033101, 13013101], "CBUSD" : [13023101, 13033101, 13013101], "CBVALAS" : [13023101, 13033101, 13013101], "EBA" : [13023101, 13033101, 13013101], "UST" : [13023101, 13033101, 13013101], "SBK" : [13022801, 13032801, 13012801], "NCD" : [13033401, 13033401, 13013401], "ORI" : [14021101, 14031101, 14011101], "ROI" : [14021101, 14031101, 14011101], "SR" : [14021101, 14031101, 14011101], "FR" : [14021101, 14031101, 14011101], "SBBI" : [13021101, 13031101, 13011101], "VR" : [14021101, 14031101, 14011101], "INDOIS" : [14021101, 14031101, 14011101], "PBS" : [14021101, 14031101, 14011101], "SPN" : [13022804, 13032802, 13012802], "SPNS" : [13022804, 13032802, 13012802], "RDPT" : [13023201, 13033201, 13013201], "RDPU" : 13012601, "OPT" : [145223001, 23022401], "FWD" : [145122001, 23012201]},
        "TD"            : {"BI" : 12511103},
        "SBI" : {"IDBI" : [13021101, 13031101, 13011101], "IDSV" : [13021101, 13031101, 13011101], "IDSD" : [13021101, 13031101, 13011101], "SUKBI" : 13012701, "SRBI" : 13015101, "SVBI" : 13016101},
        "REVREPO"       : {"BISBI" : 13511101, "CCSBI" : 13511101, "IBSBI" : 13511101, "BIOB" : 13511102, "CCGOV" : 13511102, "IBOB" : 13511102, "BIOH" : 13511103, "CCOTH" : 13511103, "IBOH" : 13511103},
        "FX"            : {"TOM" : [14512101, 23012101], "SPOT" : [14512101, 23012101], "FWD" : [14512201, 23012201], "NDF" : [14512601, 23012601], "NS" : [14512601, 23012601], "SWAP" : [14512601, 23012601], "OPT" : [14512301, 23012401],
                           "OPT" : [14512301, 23012401]},
        "SWAP"          : {"IRS" : [14522601, 23022601], "CCS" : [14522601, 23022601], "OIS" : [14522601, 23022601], "FRA" : [14522201, 23022201]},
        "SP"            : {"MDS" : [14512201, 23012201], "MDCI" : [14512301, 23012401], "MCS" : [14512301, 23012401], "MPF" : [14512201, 23012201], "MMLD" : [14512701, 23012701], "MLDR" : [14512701, 23012701]},
        "REPO" : {"BISBI" : 22511101, "CCSBI" : 22511101, "IBSBI" : 22511101, "NEGSBI" : 22511101, "BIGOV" : 22511102, "CCGV" : 22511102, "IBGOV" : 22511102, "NEGGOV" : 22511102, "BIDIS" : 22511103, "CCDC" : 22511103, "IBDIS" : 22511103, "NEGDIS" : 22511103, "BINON" : 22511104, "CCND" : 22511104, "IBNON" : 22511104, "NEGNON" : 22511104, "BIOTH" : 22511105, "CCOH" : 22511105, "IBOTH" : 22511105, "NEGOTH" : 22511105, "CWFDIS" : 24511905, "CWFGOV" : 24511905, "CWFNON" : 24511905, "CWFOTH" : 24511905, "CWFSBI" : 24511905, "IWFDIS" : 24511905, "IWFNON" : 24511905, "IWFOTH" : 24511905, "IWFSBI" : 24511905, "LF" : 22511105, "IWFGOV" : 24511905}
    }
    
    try :
        glnoGet = glnoDict[optkey3][optkey4]
    except :
        return None
        
    if (optkey3 == "BOND" and optkey4 not in ["OPT", "FWD", "RDPU"]) or (optkey3 == "SBI" and optkey4 not in ["SUKBI", "SRBI", "SVBI"]):
        portType = trade.Portfolio().TypeChlItem().Name()
        if portType == "Amortised Cost" : glnoGet = glnoGet[0]
        elif portType == "FVOCI" : glnoGet = glnoGet[1]
        elif portType == "FVTPL" : glnoGet = glnoGet[2]
    elif optkey3 in ("SWAP") :
        amountPay, amountRec = getJournalAmountTrade(trade, True), getJournalAmountTrade(trade, False)
        if abs(amountPay) > 0 : return str(glnoGet[1])
        elif abs(amountRec) > 0 : return str(glnoGet[0])
        else : return None
    
    accInsList = ["daily mark to market", "daily mark-to-market"]
    for journal_no in journalNum_list:
        journal = acm.FJournal[journal_no]
        if type(glnoGet) == type([]) :
            accIns = journal.AccountingInstruction().Name().lower()
            if journal.AccountNumber() == str(glnoGet[0]) and journal.JournalType() == "Live" and any(x in accIns for x in accInsList):
                return str(glnoGet[0])
            elif journal.AccountNumber() == str(glnoGet[1]) and journal.JournalType() == "Live" and any(x in accIns for x in accInsList):
                return str(glnoGet[1])
        else :
            if journal.AccountNumber() == str(glnoGet) and journal.JournalType() == "Live":
                return str(glnoGet)

def accountId(trade):
    cp = trade.Instrument().ExerciseEventType().lower()
    journalNum_list = query_journal_on_trade(trade.Oid())
    
    for journal_no in journalNum_list:
        journal = acm.FJournal[journal_no]
        journal.AccountingInstruction().Name().lower()
        glno = str(journal.AccountNumber())
        glnoName = str(journal.AccountName())
        journalType = journal.JournalType()
        
        if glno in ["61512301", "61512401"] and journalType == "Live" and cp in glnoName.lower():
            return glno + "_" + glnoName

def rollingPeriodStr(trade, mode):
    if trade.OptKey4().Name() in ["MCS", "MPF"]:
        return None
    
    rolling_period_key = {"3m" : "Q", "6m" : "S", "12m" : "Y"}
    
    if trade.DealPackage():
        tradesDP = trade.DealPackage().Trades()
        tradeUse = [trade for trade in tradesDP if trade.Direction().lower() in ("deposit", "loan")][0]
        
        legUse = tradeUse.Instrument().FirstReceiveLeg() if mode == 'receive' else tradeUse.Instrument().FirstPayLeg()
        try :
            return rolling_period_key[legUse.RollingPeriod()]
        except :
            return None
    else :
        legUse = trade.Instrument().FirstReceiveLeg() if mode == 'receive' else trade.Instrument().FirstPayLeg()
        try :
            return rolling_period_key[legUse.RollingPeriod()]
        except :
            return None

def getPriceLowUpper(trade, mode):
    optkey4 = trade.OptKey4().Name()
    if optkey4 not in ["MMLD", "MDCI", "MLDR", "MDS", "MCS"] :
        return None
    
    if optkey4 in ["MMLD", "MDCI", "MLDR"] :
        trade_use = [trade_dp for trade_dp in trade.DealPackage().Trades() if trade_dp.TradeInstrumentType() in ("Option", "Swap")][0]
        return trade_use.Instrument().AdditionalInfo().Sp_MLDFloor() if mode == "low" else trade_use.Instrument().AdditionalInfo().Sp_MLDCeiling()
    elif optkey4 in ["MDS", "MCS"] :
        return None
    else :
        return trade.Instrument().FirstPayLeg().Strike2() if mode == "low" else trade.Instrument().FirstPayLeg().Strike()

def taxWhtTradeSheet(trade, ForIdr=True, isPos=True):
    payment_list = list(trade.Payments())[::-1]
    
    for payment in payment_list:
        if payment.Type() == "WHT":
            payment_amount = payment.Amount()
            
            if payment.Currency().Name() == "IDR" and ForIdr:
                return abs(float(payment_amount))
            elif payment.Currency().Name() != "IDR" and ForIdr == False:
                if isPos and payment_amount >= 0:
                    return payment_amount
                elif isPos == False and payment_amount < 0 :
                    return payment_amount 


def getAmountCollateralAndNone(trades, forBond, mode):
    trades = [x for x in trades if (x.Status() == "BO-BO Confirmed" and x.ValueDay() < acm.Time().DateToday())]
    nominal = 0
    
    for trade in trades:
        
        tradeCat = trade.TradeCategory()
        instype = ["bond", "bill", "frn", "mbs/abs", "fund"]
        
        if tradeCat.lower() == "collateral" and mode == "collateral":
            if forBond and trade.MarginingSets().Size() > 0:
                nominal += trade.FaceValue()
            elif forBond == False and trade.MarginingSet() == None:
                nominal += trade.FaceValue()
            
        elif  tradeCat.lower() != "collateral" and mode != "collateral":
            nominal += trade.FaceValue()
        
    return nominal

def GLNOAmount(trade):
    glno_dict = {"OVT" : 29611207, "BA" : 27514104, "BLT" : 27514104, "MD" : 27514104, "CMT" : 27513501, "OVP" : 19611207, "CL" : 16511102, "CMP" : 16511102, "SHARI" : 16511102, "DHE" : 16581115, "BI" : 16511103}
    
    optkey4 = trade.OptKey4().Name()
    
    try :
        glno = glno_dict[optkey4]
    except :
        return None
    
    journalNum_list = query_journal_on_trade(trade.Oid())
    for journal_num in journalNum_list :
        journal = acm.FJournal[journal_num]
        journal_glno = journal.ChartOfAccount().TAccount().Number()
        
        if str(journal_glno) == str(glno) and (journal.JournalType() == "Live"  or (journal.EventDate() == trade.Instrument().EndDate() and journal.JournalType() == "Periodic Reversal" )):
            return journal.Amount()
    
    return 0

def GLNOAmount2(trade):
    glno_dict = {"FASBI" : 12511103, "IDBI" : [13011101, 13021101, 13031101], "IDSV" : [13011101, 13021101, 13031101], "IDSD" : [13011101, 13021101, 13031101], "SBBI" : [13011101, 13021101, 13031101], "SUKBI" : 13012701, "BI" : 16511103, "SRBI" : 13015101, "CBUSD" : [13013101, 13023101, 13033101], "CBIDR" : [13013101, 13023101, 13033101], "CBVALAS" : [13013101, 13023101, 13033101], "EBA" : [13013101, 13023101, 13033101], "NCD" : [13013401, 13033401, 13033401], "RDPU" : 13012601, "RDPT" : 13013201}
    
    optkey4 = trade.OptKey4().Name()
    
    try :
        glno = glno_dict[optkey4]
    except :
        return None
    
    if optkey4 in ["FASBI"] :
        accInstruction = "Bond_TD_Daily Premium/Discount Amortization"
    elif optkey4 in ["IDBI", "IDSV", "SUKBI", "IDSD", "SBBI", "SRBI", "CBUSD", "CBIDR", "CBVALAS", "EBA", "NCD"] :
        portType = trade.Portfolio().TypeChlItem().Name() if trade.Portfolio().TypeChlItem() else None
        
        if optkey4 == "SUKBI" :
            portType = None
        
        if portType == "FVTPL" : 
            glno = glno[0]
        elif portType == "Amortised Cost" :
            glno = glno[1]
        elif portType == "FVOCI" :
            glno = glno[2]
        
        accInstruction = ["Bond_TD_Daily MtM Trade Contract Ref BUPL", "Bond_TD_Daily Premium/Discount Amortization", "Bond_TD_Daily Interest Accrual"]
        
    elif optkey4 in ["BI"] : 
        accInstruction = "DepoLoan_TD_Daily Interest Accrual"
        
    elif optkey4 in ["RDPU", "RDPT"] :
        accInstruction = "Bond_TD_Daily MtM Trade Contract Ref BUPL"
    
    journalNum_list = query_journal_on_trade(trade.Oid())
    for journal_num in journalNum_list :
        journal = acm.FJournal[journal_num]
        journal_glno = journal.ChartOfAccount().TAccount().Number()
        journal_accIns = journal.AccountingInstruction().Name()
        
        if journal_accIns in accInstruction and str(journal_glno) in str(glno) and journal.JournalType() == "Live":
            return journal.Amount()
    
    return 0

def ntr_tradeDate(trade):
    curr_use = currencyBaseOnCategory(True, trade)
    trade_date = trade.TradeTimeDateOnly()
    
    if curr_use != 'IDR' :
        price_list = acm.FPrice.Select(f"instrument = '{curr_use}' and currency = 'IDR' and market = 'EOD_MtM' and day = '{trade_date}'")
        price = price_list.Last().Settle() if price_list else 0
    else :
        price = 1
    
    return price

def ntr_tradeDateUsd(trade):
    curr_use = currencyBaseOnCategory(True, trade)
    trade_date = trade.TradeTimeDateOnly()
    
    if curr_use != 'USD' :
        price_list = acm.FPrice.Select(f"instrument = '{curr_use}' and currency = 'USD' and market = 'EOD_MtM' and day = '{trade_date}'")
        price = price_list.Last().Settle() if price_list else 0
    else :
        price = 1
    
    return price

def ntr_lastDateOnMonth(curr_use):
    jakarta = acm.FCalendar['Jakarta']    
    first_date = acm.Time().FirstDayOfMonth(acm.Time().DateToday())
    lastDateLastMonth = acm.Time.DateAdjustPeriod(first_date,'-1d',jakarta,2)
    
    price_list = acm.FPrice.Select(f"instrument = '{curr_use}' and currency = 'IDR' and market = 'EOD_MtM' and day = '{lastDateLastMonth}'")
    return price_list.Last().Settle() if price_list else 1

def ntr_lastDateOnMonth_usd(curr_use):
    jakarta = acm.FCalendar['Jakarta']    
    first_date = acm.Time().FirstDayOfMonth(acm.Time().DateToday())
    lastDateLastMonth = acm.Time.DateAdjustPeriod(first_date,'-1d',jakarta,2)
    
    price_list = acm.FPrice.Select(f"instrument = '{curr_use}' and currency = 'USD' and market = 'EOD_MtM' and day = '{lastDateLastMonth}'")
    return price_list.Last().Settle() if price_list else 1
    
def brokerfee(trd, curr):
    if trd.CurrencyPair():
        curr_ntr = trd.CurrencyPair().Currency1().Name()
    else :
        curr_ntr = trd.Instrument().Currency().Name()
    
    if trd.Payments().Size():
        for p in trd.Payments():
            if curr != "IDR" and p.Currency().Name() != "IDR":
                if p.Type() == 'Broker Fee':
                    return p.Amount()
            elif curr == "IDR" and p.Currency().Name() == "IDR" :
                if p.Type() == 'Broker Fee':
                    return p.Amount()
            elif curr == "IDR" and p.Currency().Name() != "IDR" :
                if p.Type() == 'Broker Fee':
                    return p.Amount() * ntr_lastDateOnMonth(curr_ntr)


def RateCashflow(obj):
    try :
        typeCashflow = obj.MoneyFlow().CashFlow().CashFlowType().lower()
    except :
        typeCashflow = "float"
    
    if "float" in typeCashflow :
        try :
            fixingVal = obj.MoneyFlow().Reset().FixingValue()
            return fixingVal / 100
        except :
            pass
            
    elif "fixed rate" in typeCashflow:
        context = acm.GetDefaultContext()
        sheetType = 'FMoneyFlowSheet'
        
        columnId = 'Cash Analysis Fixed Rate'
        calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
        rateFix = calcSpace.CreateCalculation(obj.MoneyFlow(), columnId).Value()
        calcSpace.Clear()
        return rateFix / 100

def SpreadValInReset(obj) :
    try :
        return obj.MoneyFlow().CashFlow().Spread()
    except :
        return obj.MoneyFlow().Reset().CashFlow().Spread()

def InstrumentAcquisitionDate(trades):
    
    MintradeDate = acm.Time().BigDate()
    for trade in trades :
        tradeDate = trade.TradeTimeDateOnly()
        if tradeDate < MintradeDate and trade.Bought():
            MintradeDate = tradeDate
    
    if MintradeDate != acm.Time().BigDate() :
        year, month, day = [str(x) for x in acm.Time.DateToYMD(MintradeDate)]
        return datetime.strptime("/".join([month, day, year]), "%m/%d/%Y").strftime("%d %b %Y")

def InsAmountOrgCurrency(trades):
    BookValue = 0
    for trade in trades:
        if trade.Status() != 'Void' : 
            BookValue += trade.Nominal() * trade.Price() / 100
    
    return BookValue

def LastPaymentDateCoupon(moneyflows):
    today_date = acm.Time().DateToday()
    list_last_payment = []
    for moneyflow in moneyflows:
        if moneyflow.PayDate() <= today_date:
            list_last_payment.append(moneyflow.PayDate())
    
    list_last_payment.sort()
    year, month, day = [str(x) for x in acm.Time.DateToYMD(list_last_payment[-1])]
    return datetime.strptime("/".join([month, day, year]), "%m/%d/%Y").strftime("%d %b %Y")

def MaturityDatedbY(ins):
    try :
        endDate = ins.EndDate()
    except :
        return None
    year, month, day = [str(x) for x in acm.Time.DateToYMD(endDate)]
    return datetime.strptime("/".join([month, day, year]), "%m/%d/%Y").strftime("%d %b %Y")


def effectiveDatedbY(ins):
    try :
        endDate = ins.StartDate()
    except :
        return None
    year, month, day = [str(x) for x in acm.Time.DateToYMD(endDate)]
    return datetime.strptime("/".join([month, day, year]), "%m/%d/%Y").strftime("%d %b %Y")

def InterestAccruedCouponDay(trade):
    optkey4 = trade.OptKey4AsEnum()
    portType = trade.Portfolio().TypeChlItem().Name()
    
    if optkey4 not in ["CBUSD", "CBIDR", "CBVALAS", "EBA"]:
        return 0
        
    journalNum_list = query_journal_on_trade(trade.Oid())
    for journalNum in journalNum_list:
        journal = acm.FJournal[journalNum]
        journal_glno = journal.ChartOfAccount().TAccount().Number()
        journal_accIns = journal.AccountingInstruction().Name()
        journalType = journal.JournalType()
        
        if journal_accIns == "Bond_TD_Daily Interest Accrual" and journalType == "Live":
            if str(journal_glno) == "16526101" and portType == "Amortised Cost":
                return journal.Amount()
            elif str(journal_glno) == "13013101" and portType == "FVTPL" :
                return journal.Amount()
            elif str(journal_glno) == "16529101" and portType == "FVOCI" :
                return journal.Amount()
    return 0

def PartnerRefConf(obj, IntegrationType):
    for eo in obj.ExternalObjects():
        if eo.IntegrationType() == IntegrationType:
            try :
                return eo.ExternalRef().split("//")[1]
            except :
                return eo.ExternalRef()

def getMTtag(obj, tag_val, mtType = "SwiftWriter"):
    for eo in obj.ExternalObjects():
        if eo.IntegrationType() == mtType:
            text = eo.Data().Text()
            list_tag = text.split("\n")
            find_tag = [x for x in list_tag if any(y in x for y in tag_val)]
            try :
                if any(x in [":82A:"] for x in tag_val):
                    return find_tag[0].split(":")[-1]
                else :
                    tag_date = find_tag[0].split(":")[-1]
                    if len(tag_date) == 8:
                        return f"{tag_date[4:6]}/{tag_date[6:8]}/{tag_date[0:4]}"
                    else :
                        return f"{tag_date[2:4]}/{tag_date[4:6]}/20{tag_date[0:2]}"
            except :
                pass

def MonthValueDate(trade):
    return datetime.strptime(trade.ValueDay(), "%Y-%m-%d").strftime("%B")

def AmountAccumulativePerMonth(obj):
    trade_num = obj.Trade().Oid()
    list_trade = list(obj.Parent().Children())
    list_trade.sort()

    list_used_trade = []
    total_amount = 0
    for trade in list_trade:
        amount = amountBaseOnCategory(True, trade.Trade().Trade())
        curr = currencyBaseOnCategory(True, trade.Trade().Trade())
        ntr = ntr_lastDateOnMonth_usd(curr)
        total_amount += abs(amount) * ntr
        if str(trade.Trade().Oid()) == str(trade_num):
            return total_amount

def UnderlyingUsedPerCp(obj, getVal=True):
    trade_num = obj.Trade().Oid()
    list_trade = list(obj.Parent().Children())
    list_trade.sort()
    underlyingUsedList = []
    for trade in list_trade:
        underlyingNameList = [x[0] for x in underlyingUsedList]
        underlyingName = trade.Trade().AdditionalInfo().UnderlyingRef()
        if underlyingName not in underlyingNameList and underlyingName:
            underlyingVal = trade.Trade().AdditionalInfo().UnderlyingNominal() if trade.Trade().AdditionalInfo().UnderlyingNominal() else 0
            underlyingUsedList.append([underlyingName, underlyingVal])
        if str(trade.Trade().Oid()) == str(trade_num):
            break
    total_amount = AmountAccumulativePerMonth(obj)
    requiredAmount = sum([x[1] for x in underlyingUsedList]) - abs(total_amount)
    if requiredAmount < 0:
        return f"({abs(requiredAmount):,})"
    else :
        return f"{abs(requiredAmount):,}"

def UnderlyingDescPerCp(obj):
    trade_num = obj.Trade().Oid()
    list_trade = list(obj.Parent().Trades())
    list_trade.sort()
    underlyingNameT = obj.Trade().AdditionalInfo().UnderlyingRef()
    event = []
    valUnderlying = UnderlyingUsedPerCp(obj)
    if "(" in valUnderlying:
        event.append("Insufficient Underlying") 
    matDateU = acm.Time.DateAddDelta(obj.Trade().AdditionalInfo().UnderlyingMatDate(), 0, 3, 0)
    if obj.Trade().ValueDay() > matDateU and obj.Trade().AdditionalInfo().UnderlyingMatDate():
        event.append("Underlying Expired")
    underlyingNameList = []
    for trade in list_trade:
        underlyingName = trade.AdditionalInfo().UnderlyingRef()
        if underlyingNameT not in underlyingNameList and underlyingName:
            underlyingNameList.append(underlyingName)
        elif underlyingNameT in underlyingNameList and underlyingName:
            event.append("Underlying Used")
        if str(trade.Trade().Oid()) == str(trade_num):
            break
    return ", ".join(list(set(event)))

def InterestRate(ins, legPosition):
    try :
        legUse = ins.FirstPayLeg() if legPosition == "pay" else ins.FirstReceiveLeg()
    except :
        return None
    
    if not legUse :
        return None
    
    legType = legUse.LegType()
    if legType == "Fixed" :
        return legUse.FixedRate()
    elif legType == "Float" :
        return legUse.FloatRateReference().Name()

def tradeDatedBY(tradeDate):
    try :
        year, month, day = [str(x) for x in acm.Time.DateToYMD(tradeDate)]
        return datetime.strptime("/".join([day, month, year]), "%d/%m/%Y").strftime("%d %B %Y")
    except :
        pass


    
def EffectiveDate(trade):
    optkey4 = trade.OptKey4().Name()
    
    if optkey4 in ["CCS", "IRS", "OIS"]:
        dateUse = trade.Instrument().StartDate()
    elif optkey4 in ["SPOT", "NDF", "FWD", "SWAP", "NS", "MPF"]:
        dateUse = trade.ValueDay()
    elif optkey4 in ["MLDR"]:
        dateUse = trade.Instrument().StartDate()
    elif optkey4 in ["MMLD", "MCS"] :
        dateUse = trade.ValueDay()
    elif optkey4 in ["MDS"] :
        dateUse = trade.MasterTrade().ValueDay()
    elif "option" in str(trade.Instrument().InsType()).lower():
        dateUse = trade.ValueDay()
    elif "swap" in str(trade.InstrumentSubType()).lower():
        dateUse = trade.Instrument().StartDate()
    
    try :
        year, month, day = [str(x) for x in acm.Time.DateToYMD(dateUse)]
        return datetime.strptime("/".join([day, month, year]), "%d/%m/%Y").strftime("%d %B %Y")
    except :
        pass

def StrikeValue(trade, strikeType):
    if str(trade.OptKey4AsEnum()) in ["MDCI", "MMLD", "MLDR"] or ("option" in str(trade.InstrumentSubType()).lower() and str(trade.OptKey3AsEnum()) in ["FX", "BOND"]):
        return trade.Instrument().StrikePrice() if strikeType == "lower" else None
    elif str(trade.OptKey4AsEnum()) in ["MCS"] :
        tradeCons = trade.TradeConnections()
        dp_trade = [trade] + [x.ToTrade() for x in tradeCons if str(x.Type()) == "Deal Package"]
        strike_list = [x.Instrument().StrikePrice() for x in dp_trade if not x.Bought()]
        strike_list.sort()
        
        if len(strike_list) > 0 :
            return strike_list[0] if strikeType == "lower" else strike_list[-1] if len(strike_list) > 1 else None

def CurrUsePerProduct(trade, ForNotional1):
    optkey4 = trade.OptKey4().Name()
    instype = str(trade.Instrument().InsType()).lower()
    currPair = trade.CurrencyPair()
    
    if currPair:
        return currPair.Currency1().Name() if ForNotional1 else currPair.Currency2().Name() if optkey4 != "MMLD" else None
    elif instype in ["option", "future/forward", "swap"]:
        return trade.Instrument().Currency().Name() if ForNotional1 else None
    
def getTradePVFixedAmount(trade, currUse):
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    columnId = 'Cash Analysis Nominal'
    
    todayDate = acm.Time().DateToday()
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    
    for mf in trade.MoneyFlows():
        if str(mf.MoneyFlowType()) in ["Float Rate", "Fixed Rate"] and mf.StartDate() <= todayDate and mf.EndDate() > todayDate:
            if mf.Currency().Name() == currUse :
                return calcSpace.CreateCalculation(mf, columnId).Value().Number()
                

def AmountUsePerProduct(trade, ForNotional1):
    optkey3 = trade.OptKey3().Name()
    optkey4 = trade.OptKey4().Name()
    instype = str(trade.Instrument().InsType()).lower()
    currPair = trade.CurrencyPair()
    
    if optkey4 in ["MPF", "MDS"] or optkey3 == "FX":
        nominal = trade.Nominal() if ForNotional1 else trade.Nominal() * trade.Price()
    elif optkey4 in ["MDCI", "MCS"]:
        nominal = trade.Nominal() if ForNotional1 else trade.Nominal() * trade.Instrument().StrikePrice()
    elif optkey4 == "MMLD" :
        nominal = trade.TradeConnections().Last().ToTrade().Nominal() if ForNotional1 else None
    elif optkey4 == "CCS":
        currUse = CurrUsePerProduct(trade, ForNotional1)
        nominal = getTradePVFixedAmount(trade, currUse)
    else :
        nominal = trade.Nominal() if ForNotional1 else None
    
    if nominal :
        return nominal
    
def DayPayment(ins, DateType):
    dateToday = acm.Time().DateToday()
    
    cashflowDates = []
    for cashflow in ins.MainLeg().CashFlows():
        if str(cashflow.CashFlowType()).lower() == 'fixed rate' and cashflow.PayDate() <= dateToday :
            cashflowDates.append([cashflow.PayDate(), cashflow.StartDate(), cashflow.EndDate()])
    
    try :
        cashflowDates.sort(key=lambda x: x[0])
        dateUsed = cashflowDates[-1][1] if DateType == "start" else cashflowDates[-1][2]
        year, month, day = [str(x) for x in acm.Time.DateToYMD(dateUsed)]
        return datetime.strptime("/".join([day, month, year]), "%d/%m/%Y").strftime("%m/%d/%Y")
    except :
        return None

def JournalInfoInstrument(obj, UsedTo):
    revrepoList = ["BISBI", "CCSBI", "IBSBI", "BIOP", "CCGOV", "IBOB", "BIOH", "CCOTH", "IBOH"]
    repoList = ["BISBI", "CCSBI", "IBSBI", "NEGSBI", "BIGOV", "CCGV", "IBGOV", "NEGGOV", "BIDIS", "CCDC", "IBDIS", "NEGDIS", "BINON", "CCND", "IBNON", "NEGNON", "BIOTH", "NEGOTH", "CWFDIS", "CWFGOV", "CWFNON", "CWFOTH", "CWFSBI", "IWFDIS", "IWFGOV", "IWFNON", "IWFOTH", "IWFSBI"]
    
    try :
        insCat = obj.Instrument().CategoryChlItem().Name()
    except :
        insCat = None
    
    optkey4 = obj.Trades().AsArray().First().OptKey4().Name()
    optkey3 = obj.Trades().AsArray().First().OptKey3().Name()
    
    try :
        portType = obj.Trades().AsArray().First().Portfolio().TypeChlItem().Name()
    except :
        portType = None
    
    if insCat in ["CBIDR", "CBUSD", "CBVALAS", "EBA", "UST"] :
        if portType != "FVTPL":
            glnoUse = "16529101" if portType == "FVOCI" else "16526101"
        else :
            return None
    elif insCat in ["FR", "INDOIS", "ORI", "PBS", "ROI", "SR", "VR"] :
        if portType != "FVTPL" :
            glnoUse = "16526101" if portType == "FVOCI" else "16562101"
        else :
            return None
    elif optkey4 in revrepoList and optkey3.lower() == "revrepo":
        glnoUse = "165"
    elif optkey4 in repoList and optkey3.lower() == "repo":
        glnoUse = ["275"]
    else : return None
    
    amountVal = 0
    
    for trade in obj.Trades():
        journals_list = query_journal_on_trade(trade.Oid())
        journals_list.sort()
        
        for journal_no in journals_list:
            journal = acm.FJournal[journal_no]
            
            try :
                glno = journal.ChartOfAccount().TAccount().Number()
            except :
                break
                
            try :
                journalAI = journal.AccountingInstruction().Name()
            except :
                break
            
            glFilter = (str(glno) == glnoUse) or (str(glno)[:3] == glnoUse and optkey4 in revrepoList) or (str(glno)[:3] in glnoUse and optkey4 in repoList)
            
            if glFilter and "TD_Daily Interest Accrual" in journalAI and journal.JournalType() == "Live":
                journalAmount = float(journal.Amount())
                amountVal += journalAmount
                
                if UsedTo == "glno":
                    return glnoUse
                
    return amountVal if UsedTo != "glno" else None

def AtBeginningAcq2(trades, UseIDR=False):
    glno_head_need = ["130", "125", "140"]
    amountVal = 0
    
    for trade in trades :
        try :
            if trade.Portfolio().TypeChlItem().Name() == "FVTPL" : return None
        except :
            return None
            
        journals_list = query_journal_on_trade(trade.Oid())
        
        for journal_no in journals_list:
            journal = acm.FJournal[journal_no]
            
            try :
                glno = journal.ChartOfAccount().TAccount().Number()
            except :
                glno = None
            
            accNameList = ["Trade Date Buy", "Trade Date Principal"]
            accInsCond = any(x in journal.AccountingInstruction().Name() for x in accNameList)
            if str(glno[:3]) in glno_head_need and journal.JournalType() == "Live" and accInsCond:
                journalAmount = float(journal.BaseAmount()) if UseIDR else float(journal.Amount())
                amountVal += journalAmount
    
    return amountVal
    
def AmortizedAmount2(trades):
    glno_head_need = ["130", "125", "140"]
    amountVal = 0
    
    for trade in trades :
        trade = get_Collateral(trade, justTrade=True) if trade.OptKey3().Name() == 'REVREPO' else trade
        if not trade : continue
        journals_list = query_journal_on_trade(trade.Oid())
        for journal_no in journals_list:
            journal = acm.FJournal[journal_no]
            
            try :
                glno = journal.ChartOfAccount().TAccount().Number()
            except :
                glno = None
            
            accInsCond = 'amortization' in journal.AccountingInstruction().Name().lower()
            if str(glno[:3]) in glno_head_need and journal.JournalType() == "Live" and accInsCond:
                journalAmount = float(journal.Amount())
                amountVal += journalAmount
    
    return amountVal

def BookCostMarketValue(insName, portfolioUse, forBookCost, ReturnGlno = False):
    
    portType = portfolioUse.TypeChlItem().Name() if portfolioUse.TypeChlItem() else None
    amountTotal = 0
    journals = query_journal_on_trade2(insName, portfolioUse.Name(), portType, forBookCost)
    sumJournalAmount = sum([acm.FJournal[journal].Amount() for journal in journals]) 
    amountTotal += sumJournalAmount
    return amountTotal if ReturnGlno == False else acm.FJournal[journals[0]].ChartOfAccount().TAccount().Number()

def AveragePriceBuy(trades):
    if len([x for x in trades if x.BoughtAsString() == "Buy"]) > 0 :
        return sum([x.Price() for x in trades if x.BoughtAsString() == "Buy"]) / len([x for x in trades if x.BoughtAsString() == "Buy"])
    else : return 0

def inputDate(createDate):
    timeToDate = acm.Time().DateFromTime(createDate)
    year, month, day = [str(x) for x in acm.Time().DateToYMD(timeToDate)]
    return datetime.strptime("/".join([day, month, year]), "%d/%m/%Y").strftime("%d %B %Y")

def nominalInstrument(trades):
    return sum([x.Nominal() for x in trades if x.Status() != "Void"])

def getPriceLowUpperSP(trade, forRate):
    optkey4Name = trade.OptKey4().Name()
    
    if optkey4Name in ["MDS", "MPF"]:
        return trade.Price() if forRate == "upper" else None
    elif optkey4Name in ["MDCI", "MCS"]:
        upperRate = trade.Instrument().StrikePrice()
        lowerRate = trade.Nominal() / (trade.Nominal() * trade.Instrument().StrikePrice())
        return upperRate if forRate == "upper" else f"{lowerRate:.4f}"

def TradeBuyUsed(trade):
    if trade.Nominal() > 0 : return None
    
    tradeDate = trade.TradeTime()
    portName = trade.Portfolio().Oid()
    insName = trade.Instrument().Oid()
    
    query_sell = f"SELECT t.trdnbr FROM TRADE t WHERE t.insaddr = {insName} AND t.prfnbr = {portName} AND t.quantity < 0 AND t.trdnbr <= {trade.Oid()} AND t.status = 'BO-BO CONFIRMED' ORDER BY t.trdnbr"
    tradeSells = [x[0] for x in ael.asql(query_sell)[1][0]]
    #print(tradeSells[:-1])
    #print(f"Total Nominal Sells Before : {nominalSells:,}")
    
    query_buy = f"SELECT t.trdnbr FROM TRADE t WHERE t.insaddr = {insName} AND t.prfnbr = {portName} AND t.quantity > 0 AND t.trdnbr <= {trade.Oid()} AND t.status = 'BO-BO CONFIRMED' ORDER BY t.trdnbr"
    tradeBuys = [x[0] for x in ael.asql(query_buy)[1][0]]
    
    if len(tradeBuys) == 0 : return []
    
    nominalSells = abs(sum([acm.FTrade[x].Nominal() for x in tradeSells[:-1] if x > tradeBuys[0]]))
    #print(f"Trade Buys List : {tradeBuys}")
    for i, tradeBuyNo in enumerate(tradeBuys):
        tradeBuy = acm.FTrade[tradeBuyNo]
        nominalSells = nominalSells - tradeBuy.Nominal()
        
        if nominalSells <= 0:
            #print(tradeBuyNo, f"{nominalSells:,}", f"{tradeBuy.Nominal():,}")
            break
         
            #print(tradeBuyNo, f"{nominalSells:,}", f"{tradeBuy.Nominal():,}")
    
    if nominalSells <= 0 :
        remainingNominal = abs(nominalSells)
        remainingTradeBuy = tradeBuyNo
    else :
        return []
    
    tradeBuyUsed = []
    nominalTradeSellNow = abs(trade.Nominal())
    #print("\n", nominalTradeSellNow)
    if remainingNominal > 0 :
        nominalTradeSellNow -= remainingNominal
        tradeBuyUsed.append(remainingTradeBuy)
        #print(remainingTradeBuy, f"{nominalTradeSellNow:,}", f"{remainingNominal:,}")
        if nominalTradeSellNow <= 0 : return tradeBuyUsed
    
    for tradeBuyNo in tradeBuys[i+1:]:
        tradeBuy = acm.FTrade[tradeBuyNo]
        nominalTradeSellNow -= tradeBuy.Nominal()
        tradeBuyUsed.append(tradeBuyNo)
        
        if nominalSells <= 0:
            break
            #print(tradeBuyNo, f"{nominalTradeSellNow:,}", f"{tradeBuy.Nominal():,}")
    
    return tradeBuyUsed

def LastTradeBeforeBaseGroup(trade):
    tradesIns = trade.Instrument().Trades()
    tradesPort = tradesIns.Filter(lambda x : x.Portfolio().Name() == trade.Portfolio().Name())
    tradesGroup = tradesPort.Filter(lambda x: x.BoughtAsString() == trade.BoughtAsString())
 
    if tradesGroup.IndexOf(trade) > 0 :
        return tradesGroup.At(tradesGroup.IndexOf(trade) - 1)
 
def RemainingNominalPosition(trade, n=0):
    NominalSell = abs(trade.Nominal())
    tradesIns = trade.Instrument().Trades()
    tradesGroup = tradesIns.Filter(lambda x: x.Portfolio().Name() == trade.Portfolio().Name() and x.Bought())
    listUseBuyTrade = []
    lastTradeBuy = None
    
    tradeBefore = LastTradeBeforeBaseGroup(trade)
    n += 1
    
    if n == 1 :    
        remainingNominal, lastTradeBuy, _ = RemainingNominalPosition(tradeBefore, n)
        NominalSell -= remainingNominal
        if float(remainingNominal) > 0:
            nominalUsed = remainingNominal if NominalSell >= 0 else remainingNominal - abs(NominalSell)
            listUseBuyTrade.append([lastTradeBuy, nominalUsed])
    
    i = tradesGroup.IndexOf(lastTradeBuy) if lastTradeBuy else -1
    while NominalSell > 0:
        i += 1
        lastTradeBuy = tradesGroup.At(i)
        buyNom = lastTradeBuy.Nominal()
        NominalSell -= buyNom
        nominalUsed = buyNom if NominalSell >= 0 else buyNom - abs(NominalSell)
        listUseBuyTrade.append([lastTradeBuy, nominalUsed])
        
    return abs(NominalSell), lastTradeBuy, listUseBuyTrade

 
def GainOrLossFIFO(trade):
    context = acm.GetDefaultContext()
    sheetType = 'FTradeSheet'
    columnId = 'Portfolio Closed Tax Lots'
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    inventoryList = calcSpace.CreateCalculation(trade, columnId).Value()
    listRaw = str(inventoryList)[1:-1].split(",")
    
    try :
        tradesbuy = [re.search(r"(.+)\[(\d+)]", x).groups() for x in listRaw]
    except :
        return None
    
    avgPriceBuy = sum([acm.FTrade[x[1]].Price() * abs(float(x[0])) / 100 for x in tradesbuy])
    profit = (abs(trade.Nominal()) * trade.Price() / 100) - avgPriceBuy
    #percentProfit = profit / tradeSell.Nominal() * 100
    return profit * -1

def acquisitionAmount(trade):
    context = acm.GetDefaultContext()
    sheetType = 'FTradeSheet'
    columnId = 'Portfolio Closed Tax Lots'
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    inventoryList = calcSpace.CreateCalculation(trade, columnId).Value()
    listRaw = str(inventoryList)[1:-1].split(",")
    
    try :
        tradesbuy = [re.search(r"(.+)\[(\d+)]", x).groups() for x in listRaw]
    except :
        return None
    
    if listRaw:    
        return sum([acm.FTrade[x[1]].Price() * abs(float(x[0])) / 100 for x in tradesbuy]), [x[1] for x in tradesbuy]
    else :
        return None, None

def tanggalJatuhTempoDokumenUnderlying(dateUse, formatTime = "%Y-%m-%d"):
    try :
        year, month, day = [str(x) for x in acm.Time.DateToYMD(dateUse)]
        return datetime.strptime("/".join([day, month, year]), "%d/%m/%Y").strftime(formatTime)
    except :
        return None

def AmortizedAmount3(trade, getGlno):
    glno_head_need = "460"
    amountVal = 0
    
    journals_list = query_journal_on_trade(trade.Oid())
    for journal_no in journals_list:
        journal = acm.FJournal[journal_no]
        
        try :
            glno = journal.ChartOfAccount().TAccount().Number()
        except :
            glno = None
        
        accInsCond = 'trade date sell rpl' in journal.AccountingInstruction().Name().lower()
        if str(glno[:3]) in glno_head_need and journal.JournalType() == "Live" and accInsCond:
            journalAmount = float(journal.Amount())
            amountVal += journalAmount
            if getGlno : return str(glno)
    
    if not getGlno : return amountVal

def UpdateTimeRating(ins):
    ratingF1 = ins.Rating1ChlItem().UpdateTime() if ins.Rating1ChlItem() else 0
    ratingF2 = ins.Rating2ChlItem().UpdateTime() if ins.Rating2ChlItem() else 0
    ratingF3 = ins.Rating3ChlItem().UpdateTime() if ins.Rating3ChlItem() else 0
    
    listUpdateTime = [x.UpdateTime() for x in ins.AddInfos().Filter(lambda x : "RATING" in x.AddInf().Name())]
    listUpdateTime.extend([ratingF1, ratingF2, ratingF3])
    try :
        dateInt = max(listUpdateTime) if max(listUpdateTime) else None
        datetimeFormat = datetime.fromtimestamp(dateInt)
        return datetimeFormat.strftime("%d/%m/%Y %H:%M:%S") 
    except :
        return None

def LastUpdatePriceBond(ins, forPrice = True):
    try :
        priceOid = ins.HistoricalPrices().Filter(lambda x : x.Market().Name() == "EOD_MtM").Last().Oid()
        priceUse = acm.FPrice.Select(f"oid = {priceOid} ").Last()
        return round(priceUse.Settle() / 100, 5) if forPrice else datetime.fromtimestamp(priceUse.UpdateTime()).strftime("%d/%m/%Y %H:%M:%S")
    except :
        return 0 if forPrice else None

def lastPaymentProj(mfs):
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    columnId_proj = "Cash Analysis Projected"
    columnId_type = "Money Flow Type"
    today = acm.Time.DateToday()
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)

    for mf in mfs:
        if mf.StartDate() < today and mf.EndDate() > today:
            return calcSpace.CreateCalculation(mf, columnId_proj).Value().Number()

def valueDateDerivatives(trade):
    instype = trade.Instrument().InsType()
    if instype != "Option":
        dateUse = trade.ValueDay()
    else :
        dateUse = [mf.PayDate() for mf in trade.MoneyFlows() if mf.Type() == "Premium"][0]
    
    year, month, day = [str(x) for x in acm.Time.DateToYMD(dateUse)]
    return datetime.strptime("/".join([day, month, year]), "%d/%m/%Y").strftime("%d %B %Y")

def nominalPurchaseSaleCcs(trade, isPurchase, isAmount):
    stand_calc = acm.FStandardCalculationsSpaceCollection()
    todayDate = acm.Time.DateToday()
    legUse = "Receive" if isPurchase else "Pay"
    
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    input = trade.MoneyFlows()
    columnId = 'Cash Analysis Nominal'
    
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    
    for mf in trade.MoneyFlows():
        type = str(mf.MoneyFlowType())
        startDate, endDate = mf.CashFlow().StartDate() ,mf.CashFlow().EndDate()
        legType = str(mf.CashFlow().Leg().PayType())
        
        if type in ["Fixed Rate", "Float Rate"] and startDate <= todayDate and todayDate < endDate and legType == legUse :
            return calcSpace.CreateCalculation(mf, columnId).Value().Number() if isAmount else mf.Currency().Name()
    
    return trade.MoneyFlows().Last().Calculation().Projected(stand_calc).Value().Number() if isAmount else mf.Currency().Name()
            
            
def ceilingNom(trade):
    try :
        aCond = nominalPurchaseSaleCcs(trade, True, True) / nominalPurchaseSaleCcs(trade, False, True)
    except : aCond = 0 
    
    try :    
        bCond = nominalPurchaseSaleCcs(trade, False, True) / nominalPurchaseSaleCcs(trade, True, True)
    except :
        bCond = 0
        
    return max([abs(aCond), abs(bCond)])    

def compoundName(portNow, p1, p2, p3, p4, p5, p6, p7, p8, p9):
    portNow = acm.FPhysicalPortfolio[p1]
    if not portNow :
        return ""
        
    while portNow:
        try :
            memberPort = portNow.MemberLinks()[0].MemberPortfolio()
        except :
            return portNow.Name()
            
        if portNow.MemberLinks()[0].OwnerPortfolio() :
            compound = memberPort.Name()
        portNow = portNow.MemberLinks()[0].OwnerPortfolio()
    
    try :
        return compound
    except :
        return ""

def choiceListDesc(val, list):
    try :
        return acm.FChoiceList.Select(f"name = '{val}' list = '{list}'")[0].Description()
    except :
        return ""

def formattingDate(dateUse, format):
    return [str(x) for x in acm.Time.DateToYMD(dateUse)][format]

def jenisRekeningLLD2(obj):
    optkey3 = obj.Trade().OptKey3().Name()
    optkey4 = obj.Trade().OptKey4().Name()
    settType = obj.SettlementType()
    
    if optkey3 == "REPO" : return "4Z"
    if optkey3 == "REVREPO" : return "3Z"
    
    if optkey3 == "DL" and optkey4 == "BLT":
        custType = obj.Counterparty().Free2ChoiceList().Name()
        return "4G" if custType == "Bank" else "4H"
    
    if "premium" in settType.lower() or "amount" in settType.lower():
        return "3I" if optkey4 in ["CL", "CMP", "OVP"] and optkey3 == "DL" else "3Z"
    if "rate" in settType.lower():
        return "4I" if optkey4 in ["CL", "CMP", "OVP"] and optkey3 == "DL" else "4Z"
    elif "redemption net" in settType.lower() or "security" in obj.Type().lower():
        insType = obj.Instrument().InsType()
        issuer = obj.Instrument().Issuer()
        insIssuerCountry, insIssuerName = issuer.AdditionalInfo().LLD_SANDI_NEGARA(), issuer.Name()
        
        if not(insIssuerCountry.lower() in ["id", "indonesia"]):
            return "3F" if insType.lower() == "bill" else "3E"
        elif insIssuerName == "Mandiri TRS HO":
            return "4J" if insType.lower() == "bill" else "4K"
        

def jenisRekeningLLDJournal(obj):
    optkey3 = obj.JournalTrade().OptKey3().Name()
    optkey4 = obj.JournalTrade().OptKey4().Name()
    
    if optkey3 == "DL":
        if optkey4 in ["CL", "CMP", "OVP"]:
            return "3Z"
        elif optkey4 in ["CMT", "OVT"]:
            return "4Z"
        elif optkey4 in "BLT":
            cptyType = obj.Counterparty().Free2ChoiceList().Name() if obj.Counterparty().Free2ChoiceList() else ""
            if cptyType == "Bank":
                return "4G"
            else :
                return "4H"
            
    elif optkey3.lower() == "repo":
        return "4Z"
        
    elif optkey3.lower() == "revrepo":
        return "3Z"

def jenisTransaksi3c(obj):
    trade = obj.Trade()
    optkey3 = trade.OptKey3().Name()
    optkey4 = trade.OptKey4().Name()
    insType = trade.Instrument().InsType()
    if insType.lower() == "option":
        return "276" if "premium" in obj.SettlementType().lower() else "299"
    elif optkey3 == "FX" and optkey4 in ["TOD", "TOM", "SPOT"]:
        currUsed = [trade.CurrencyPair().Currency1().Name(), trade.CurrencyPair().Currency2().Name()]
        return "261" if "IDR" in currUsed else "262"
    elif optkey3 == "FX" and optkey4 in ["FWD"]:
        currUsed = [trade.CurrencyPair().Currency1().Name(), trade.CurrencyPair().Currency2().Name()]
        return "263" if "IDR" in currUsed else "264"
    elif optkey3 == "FX" and optkey4 in ["SWAP"]:
        currUsed = [trade.CurrencyPair().Currency1().Name(), trade.CurrencyPair().Currency2().Name()]
        if "Near" in trade.TradeProcessesToString():
            return "261" if "IDR" in currUsed else "262"
        else :
            return "263" if "IDR" in currUsed else "264"
    elif optkey3 == "SWAP":
        if "Rate" in obj.SettlementType():
            return "273" 
        else :
            return "277" if obj.ValueDay() == obj.Instrument().StartDate() else "278"
    elif optkey3 in ["TD", "DL"]:
        tenor = acm.Time().DateDifference(obj.Instrument().EndDate(), obj.Instrument().StartDate())
 
        if "Rate" in obj.SettlementType() : 
            return "705" if optkey4 not in ["CMT", "OVT", "BL"] else "710"
        else :
            if optkey3 == "TD" and optkey4 not in ["BI", "DHE"] : optkey4 = "other"
            elif optkey3 == "DL" and optkey4 in ["CMP", "OVP"] : optkey4 = "CL"
            elif optkey3 == "DL" and optkey4 in ["OVT", "BLT"] : optkey4 = "CMT"
            optkey3 += "Premium" if "Premium" in obj.SettlementType() else "Amount" if "Amount" in obj.SettlementType() else ""
        if tenor <= 90 : 
            listKey = {
                "TDPremium" : {"BI" : "240", "DHE" : "291", "other" : "241"}, "TDAmount" : {"BI" : "244", "DHE" : "295", "other" : "245"},
                "DLPremium" : {"CL" : "251", "CMT" : "221"}, "DLAmount" : {"CL" : "255", "CMT" : "231"}
            }
        elif tenor <= 180 : 
            listKey = {
                "TDPremium" : {"DHE" : "291", "other" : "242"}, "TDAmount" : {"DHE" : "295", "other" : "246"},
                "DLPremium" : {"CL" : "252", "CMT" : "221"}, "DLAmount" : {"CL" : "256", "CMT" : "221"}
            }
        elif tenor <= 365  : 
            listKey = {
                "TDPremium" : {"DHE" : "291", "other" : "243"}, "TDAmount" : {"DHE" : "295", "other" : "247"},
                "DLPremium" : {"CL" : "252", "CMT" : "221"}, "DLAmount" : {"CL" : "256", "CMT" : "231"}
        }
        elif tenor > 365  : 
            listKey = {
                "TDPremium" : {"DHE" : "291", "other" : "243"}, "TDAmount" : {"DHE" : "295", "other" : "247"},
                "DLPremium" : {"CL" : "252", "CMT" : "222"}, "DLAmount" : {"CL" : "256", "CMT" : "232"},
            }
        try : return listKey[optkey3][optkey4]
        except : return None
    elif optkey3 in ["REPO", "REVREPO"] : 
        if "Rate" in obj.SettlementType() : 
            return "705" if obj.Amount() >= 0 else "710"
        tenor = acm.Time().DateDifference(obj.Instrument().EndDate(), obj.Instrument().StartDate())
        type = "Premium" if "Premium" in obj.SettlementType() else "Amount" if "Amount" in obj.SettlementType() else ""
        issuerCountry = "indonesia"
        if tenor <= 360 : 
            listKeyRepo = {"indonesia" : {"Premium" : "375", "Amount" : "379"}, "foreign" : {"Premium" : "821", "Amount" : "825"}} 
            listKeyRevrepo = {"indonesia" : {"Premium" : "381", "Amount" : "377"}, "foreign" : {"Premium" : "827", "Amount" : "823"}}
        else :
            listKeyRepo = {"indonesia" : {"Premium" : "376", "Amount" : "380"}, "foreign" : {"Premium" : "822", "Amount" : "826"}} 
            listKeyRevrepo = {"indonesia" : {"Premium" : "382", "Amount" : "378"}, "foreign" : {"Premium" : "828", "Amount" : "824"}}
        return listKeyRepo[issuerCountry][type] if optkey3.lower() == "repo" else listKeyRevrepo[issuerCountry][type]
    elif optkey3 in ["BOND", "SBI"]:
        tenor = acm.Time().DateDifference(obj.Instrument().EndDate(), obj.Instrument().StartDate())
        issuer = trade.Instrument().Issuer()
        issuerCountry = issuer.AdditionalInfo().LLD_SANDI_NEGARA().lower() if issuer.AdditionalInfo().LLD_SANDI_NEGARA() else ""
        idIssuerList = ["ROIGOV", "INDOIDJA_BANK INDONESIA", "DEPKUIDR1"]
        premiumCond = obj.SettlementType() in ["Premium", "Redemption"]
        if "Coupon" in obj.SettlementType():
            if tenor <= 365 : 
                return '716' if issuerCountry == "indonesia" else '701'
            else :
                return '717' if issuerCountry == "indonesia" else '702'
        elif insType.lower() == "fund":
            return "371"
        elif premiumCond:
            lbut_jenis_sb = trade.Instrument().AdditionalInfo().LBUT_JENIS_SB()
            if issuerCountry == "indonesia":
                if tenor > 365:
                    obligasiPemerintah = ["Obligasi Negara (ON)", "Obligasi Ritel Indonesia (ORI)", "Obligasi rekapitulasi bank umum"]
                    obligasiPerusahaan = ["Obligasi Korporasi", "Obligasi Korporasi - Subordinasi", "Obligasi Korporasi - Non Subordinasi"]
                    mtn = ["Medium Term Notes (MTN)", "Medium Term Notes (MTN) Syariah"]
                    if lbut_jenis_sb in obligasiPemerintah : return "351"
                    elif lbut_jenis_sb in obligasiPerusahaan : return "352"
                    elif lbut_jenis_sb in mtn : return "353"
                    else : return "354"
                else :
                    sertifikatBI = ["SBI", "IDBI", "SRBI","SVBI"]
                    suratPembendaharaanNegara = ["SPN", "SPNS"]
                    ncd = ["NCD"]
                    depositoBI = ["IDSD"]
                    if optkey4 in sertifikatBI : return "361"
                    elif optkey4 in suratPembendaharaanNegara : return "362"
                    elif optkey4 in ncd : return "364"
                    elif optkey4 in depositoBI : return "366"
                    else : return "365"
            else :
                if tenor > 365:
                    obligasi = ["Obligasi Korporasi", "Obligasi Korporasi - Subordinasi", "Obligasi Korporasi - Non Subordinasi"]
                    mtn = ["Medium Term Notes (MTN)", "Medium Term Notes (MTN) Syariah"]
                    if lbut_jenis_sb in obligasi : return "321"
                    elif lbut_jenis_sb in mtn : return "322"
                    else : return "323"
                else :
                    if optkey4 in ["UST"] : return "331"
                    else : return "333"


def jenisTransaksiLLD(obj):
    codeLLD = jenisTransaksi3c(obj)
    settType = obj.SettlementType()
    
    if codeLLD:
        return ("1" if obj.Amount() >= 0 else "2") + codeLLD
    else :
        return [obj.Trade().OptKey3().Name(), obj.Trade().OptKey4().Name()]

def jenisTransaksiNon3c(obj):
    return "NNN"

def jenisTransaksiLLD2(obj):
    codeLLD = jenisTransaksiNon3c(obj)
    
    if codeLLD:
        return ("1" if obj.Amount() >= 0 else "2") + codeLLD
    else :
        return [obj.OptKey3().Name(), obj.OptKey4().Name()]
        
def npwpUse(npwp):
    if len(str(npwp)) < 16:
        return ("0" * (16 - len(str(npwp)) )) + str(npwp)
    elif len(str(npwp)) == 16:
        return npwp

def weekNo(t="", p1="", p2="", p3="", p4="", p5="", p6="", p7="", p8="", p9=""):
    listDay = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
    romanNo = ["", "I", "II", "III", "IV", "V"]

    todayDate = p1
    firstDateOfMonth = listDay.index(acm.Time().DayOfWeek(acm.Time().FirstDayOfMonth(todayDate)))
    dayNow = int(acm.Math().Ceiling((acm.Time().DayOfMonth(todayDate) + firstDateOfMonth) / 7))
    
    return f"Minggu {romanNo[dayNow]}"

def amountEqvUsd(t="", p1="", p2="", p3="", p4="", p5="", p6="", p7="", p8="", p9=""):
    trade = acm.FTrade[p1]
    
    amount = amountBaseOnCategory(True, trade)
    kurs = ntr_tradeDateUsd(trade)
        
    return abs(amount) * kurs / 1000000

def MinStrikePriceMCS(trade):
    conTr = [x.ToTrade().Instrument().StrikePrice() if x.FromTrade().Oid() == trade.Oid() else x.FromTrade() for x in trade.TradeConnections() if str(x.Type()) == "Deal Package"]
    
    return min(conTr)

def detailTransaksiLLD(obj):
    getMt = [x for x in obj.ExternalObjects() if str(x.IntegrationSubtype()) == "MT202"][0]
    
    re_form = r":72:(.+)"
    textMT = getMt.Data().Text()
    getInfo = re.findall(re_form, textMT)
    return getInfo[0] if getInfo else ""

def JnsSukuBungaAcuanTSD(ins, isLawan=True):
    indexNameDict = {
        "JIBOR" : "JIBOR", "LIBOR" : "LIBOR", "SHIBOR" : "SHIBOR", "SOFR" : "X", "INDONIA" : "indONIA", "SIBOR" : "SIBOR", 
        "TIBOR" : "TIBOR", "EURIBOR" : "EURIBOR", "KLIBOR" : "KLIBOR", "BIBOR" : "BIBOR", "PHIBOR" : "PHIBOR", "NONE" : None
    }
        
    recLeg = [ins.RecLeg().FirstRate(), str(ins.RecLeg().FloatPriceReference().Name()).split("/")[1]] if ins.RecLeg().LegType() == "Float" else [0, "NONE"]
    payLeg = [ins.PayLeg().FirstRate(), str(ins.PayLeg().FloatPriceReference().Name()).split("/")[1]] if ins.PayLeg().LegType() == "Float" else [0, "NONE"]
    
    if isLawan:
        try :
            return indexNameDict[recLeg[1]] if recLeg[0] >= payLeg[0] else indexNameDict[payLeg[1]]
        except :
            return recLeg[1] if recLeg[0] >= payLeg[0] else payLeg[1]
    else :
        try :
            return indexNameDict[recLeg[1]] if recLeg[0] <= payLeg[0] else indexNameDict[payLeg[1]]
        except :
            return recLeg[1] if recLeg[0] <= payLeg[0] else payLeg[1]

def TenorSukuBungaAcuanTSD(ins, isLawan=True):
    indexTenorDict ={
        "1d" : "HO", "7d" : "M1", "1w" : "M1", "14d" : "M2", "2w" : "M2", "1m" : "B01", "2m" : "B02", "3m" : "B03", "4m" : "B04", "5m" : "B05", "6m" : 
        "B06", "7m" : "B07", "8m" : "B08", "9m" : "B09", "10m" : "B10", "11m" : "B11", "12m" : "B12", "1y" : "B12", "NONE" : None
    }
    
    recLeg = [ins.RecLeg().FirstRate(), str(ins.RecLeg().FloatRateReference().ActualUnderlyingMaturityPeriod())] if ins.RecLeg().LegType() == "Float" else [0, "NONE"]
    payLeg = [ins.PayLeg().FirstRate(), str(ins.PayLeg().FloatRateReference().ActualUnderlyingMaturityPeriod())] if ins.PayLeg().LegType() == "Float" else [0, "NONE"]
    
    if isLawan:
        return indexTenorDict[recLeg[1]] if recLeg[0] >= payLeg[0] else indexTenorDict[payLeg[1]]
    else :
        return indexTenorDict[recLeg[1]] if recLeg[0] <= payLeg[0] else indexTenorDict[payLeg[1]]
    


...

  SendReportToCptyBO58PDF
import acm, ael, re, os
import FParameterUtils

from datetime import date
from ICTMODULES_FOR_HTML_AND_XSLFO_GENERATOR import *
from ICTCustomFEmailTransfer import ICTCustomFEmailTransfer
 
def generate_xls(file_path, report_name, column_name, data):
    xsl_gen = XSLFOGenerator()    
    current_date =  acm.Time.DateToday()
    
    cpty_name = acm.FParty[report_name].FullName()
    
    xsl_fo_content = f"""<?xml version="1.1" encoding="utf-8"?>
        <fo:root xmlns:fo="http://www.w3.org/1999/XSL/Format">
         <fo:layout-master-set>
          <fo:simple-page-master master-name="my_page" margin="0.5in" page-width="25in" page-height="28in">
           <fo:region-body/>
          </fo:simple-page-master>
         </fo:layout-master-set>
         <fo:page-sequence master-reference="my_page">
          <fo:flow flow-name="xsl-region-body">
            <fo:block text-align="center" font-weight="bold"> TMPG FAILS CLAIM CHARGES </fo:block>
        """
    
    #xsl_fo_content = xsl_gen.prepare_xsl_fo_content("TMPG FAILS CLAIM CHARGES", 'text-align="center" font-weight="bold"')
    
    xsl_fo_content +="""<fo:table margin-bottom="15px" text-align="center" display-align="center" inline-progression-dimension="auto" table-layout="auto">"""
    
    try :
        total_amount_buy = sum([float(val[-1]) for val in data["Buy"]])
    except :
        total_amount_buy = 0
    
    try :
        total_amount_sell = sum([float(val[-1]) for val in data["Sell"]])
    except :
        total_amount_sell = 0
    
    total_amount_int = str(round(abs(total_amount_buy - total_amount_sell), 2))
    total_amount = f"{float(total_amount_int):,}"
    
    First_header = [
        ["Invoice ID", ":", report_name + " - " + date.today().strftime('%B %Y')],
        ["Counterparty Name", ":", cpty_name],
        ["Period", ":", date.today().strftime('%B %Y')],
        ["","",""],
        ["Total Amount Due", ":", "$" + total_amount]
    ]
    
    xsl_fo_content += '<fo:table-column column-width="60mm" />'
    xsl_fo_content += '<fo:table-column column-width="10mm"/>'
    xsl_fo_content += '<fo:table-column column-width="130mm"/><fo:table-body>'
    
    for header in First_header:
        xsl_fo_content = xsl_gen.prepare_xsl_row(xsl_fo_content)
        xsl_fo_content = xsl_gen.add_xsl_column(xsl_fo_content, header[0], '', 'text-align="left" font-weight="bold"')
        xsl_fo_content = xsl_gen.add_xsl_column(xsl_fo_content, header[1], '', 'text-align="left"')
        xsl_fo_content = xsl_gen.add_xsl_column(xsl_fo_content, header[2], '', 'text-align="left"')
        xsl_fo_content = xsl_gen.close_xsl_row(xsl_fo_content)
    
    xsl_fo_content = xsl_gen.close_xsl_table(xsl_fo_content)
    
    text_body = f"In Accordance with the Treasury Market Practices Group (TMPG). We inform you the below invoice fail charges relating to the settlement period of {date.today().strftime('%B %Y')}"
    
    xsl_fo_content += f'<fo:block margin-bottom="15px">{text_body}</fo:block>'
    xsl_fo_content += '<fo:block font-weight="bold">TRADE INFORMATION SUMMARY</fo:block>'
    
    xsl_fo_content +="""<fo:table margin-bottom="50px" text-align="center" display-align="center" inline-progression-dimension="auto" table-layout="auto">"""
    
    xsl_fo_content += '<fo:table-column column-width="30mm"/>'
    xsl_fo_content += '<fo:table-column column-width="15mm"/>'
    xsl_fo_content += '<fo:table-column column-width="50mm"/>'
    xsl_fo_content += '<fo:table-column column-width="100mm"/>'
    xsl_fo_content += '<fo:table-column column-width="35mm"/>'
    xsl_fo_content += '<fo:table-column column-width="35mm"/>'
    xsl_fo_content += '<fo:table-column column-width="35mm"/>'
    xsl_fo_content += '<fo:table-column column-width="15mm"/>'
    xsl_fo_content += '<fo:table-column column-width="40mm"/>'
    xsl_fo_content += '<fo:table-column column-width="40mm"/>'
    xsl_fo_content += '<fo:table-column column-width="40mm"/>'
    xsl_fo_content += '<fo:table-column column-width="55mm"/>'
    xsl_fo_content += '<fo:table-column column-width="40mm"/>'
    xsl_fo_content += '<fo:table-column column-width="40mm"/><fo:table-body>'
    
    xsl_fo_content = xsl_gen.add_xsl_data_row(xsl_fo_content,[column_name],'height="10mm" background-color="#4345a9" font-weight="bold" color="#ffffff"')
    
    total_column = len(column_name)
    for trade_status, val_list in data.items():
        xsl_fo_content += f'<fo:table-row><fo:table-cell number-columns-spanned="{str(total_column)}" background-color="#9799e1" font-weight="bold" text-align="left"><fo:block>{trade_status}</fo:block></fo:table-cell></fo:table-row>'
        
        for val_l in val_list:
            val_l[-1] = f"{float(val_l[-1]):,}"
        xsl_fo_content = xsl_gen.add_xsl_data_row(xsl_fo_content, val_list)
    
    xsl_fo_content += f"""
    <fo:table-row>
        <fo:table-cell number-columns-spanned="{str(total_column-3)}" background-color="#4345a9">
            <fo:block></fo:block>
        </fo:table-cell>
        <fo:table-cell number-columns-spanned="2" background-color="#4345a9" font-weight="bold" color="#ffffff">
            <fo:block>TOTAL DUE</fo:block>
        </fo:table-cell>
        <fo:table-cell background-color="#4345a9" font-weight="bold" color="#ffffff">
            <fo:block>${total_amount}</fo:block>
        </fo:table-cell>
    </fo:table-row>
    """
    
    xsl_fo_content = xsl_gen.close_xsl_table(xsl_fo_content)
    
    xsl_fo_content +="""<fo:table margin-bottom="50px" text-align="center" display-align="center" inline-progression-dimension="auto" table-layout="auto">"""
    
    xsl_fo_content += '<fo:table-column column-width="50mm"/>'
    xsl_fo_content += '<fo:table-column column-width="170mm"/><fo:table-body>'
    
    xsl_fo_content += f"""
    <fo:table-row>
        <fo:table-cell font-weight="bold" border-width='1px' border-style='solid' padding='3pt'>
            <fo:block text-align="left">Total Amount</fo:block>
        </fo:table-cell>
        <fo:table-cell font-weight="bold" border-width='1px' border-style='solid' padding='3pt'>
            <fo:block text-align="left">${total_amount}</fo:block>
        </fo:table-cell>
    </fo:table-row>
    """
    
    try :
        settCheck = acm.FSettlement[data["Buy"][0][0]]
    except :
        settCheck = acm.FSettlement[data["Sell"][0][0]]
    
    footer_list = [
        "&#160;",
        f"Please Remit ${total_amount} to :",
        f"Correspondent Bank : {settCheck.AcquirerAccountRef().CorrespondentBank().FullName()}",
        f"SWIFT Code : {settCheck.AcquirerAccountRef().CorrespondentBank().Swift()}",
        f"Account Number : {settCheck.AcquirerAccount()}",
        f"Beneficiary : {settCheck.Acquirer().FullName()}",
        f"Beneficiary SWIFT Code : {settCheck.Acquirer().Swift()}",
        f"Please mention this information in your instruction : IFO TREASURY OPERATION",
        "&#160;",
        "&#160;",
        "If you have any question, please contact",
        '<fo:basic-link external-destination="stl@bankmandiri.co.id">stl@bankmandiri.co.id</fo:basic-link>',
        "(+62) 21 524 5521/ 524 5517"
    ]
    
    for footer in footer_list[:-1] :
        xsl_fo_content = xsl_gen.add_xsl_data_row(xsl_fo_content, [[footer]], 'number-columns-spanned="2" border-right-width="1px" border-right-style="solid" border-left-width="1px" border-left-style="solid" padding="3pt"', 'text-align="left"')
    
    xsl_fo_content = xsl_gen.add_xsl_data_row(xsl_fo_content, [[footer_list[-1]]], 'number-columns-spanned="2" border-right-width="1px" border-right-style="solid" border-left-width="1px" border-left-style="solid" border-bottom-width="1px" border-bottom-style="solid" padding="3pt"', 'text-align="left"')
    
    xsl_fo_content = xsl_gen.close_xsl_table(xsl_fo_content)
    
    
    date_report = str(datetime.now().strftime("%d%m%Y"))
    xsl_fo_file = xsl_gen.create_xsl_fo_file(report_name,file_path,xsl_fo_content,date_report)
    
    generate_pdf_from_fo_file(xsl_fo_file)
    #os.remove(xsl_fo_file)

def get_data_trade(trade, xml_data):
    pattern = fr'<Row><Label>{trade}<\/Label>(.*?)(?:<\/Row>|<Rows>)'
    label_split = re.findall(pattern, xml_data)[0]
    
    data_list = [trade]
    for data in re.findall(r'(?:<FormattedData>(.[^<]*)</FormattedData>|(<FormattedData />))', label_split) :
        data_list.append(data[0].replace("-", "") if data[0] else "")
    
    charge = re.findall(r'(?:<RawData>(.[^<]*)</RawData>|(<RawData />))', label_split)[-1]
    data_list[-1] = abs(float(charge[0])) if charge[0] else 0
    
    xml_data_new = xml_data.replace(label_split, "")
    
    return data_list, xml_data_new
        
def split_xml(reportXML):
    xml_column, xml_data = reportXML.split("<Settings>")
    column_list_xml = re.findall(r"<Column>(.*?)</Column>", xml_column)
    column_list = ["DEAL NO"] + [re.findall(r"<Label>(.*?)</Label>", x)[0] for x in column_list_xml]
    
    label_split = re.findall(r"<Label>([\w\s\-\(\)]*)</Label>", xml_data)
    
    
    data_per_cp, list_data = {}, []
    
    for i, label in enumerate(label_split) :
        if any(not y.isdigit() for y in label) and label not in ['Buy', 'Sell'] :
            data_per_cp[label] = {}
            cpty_name = label
            list_data = []
        elif label in ["Buy", "Sell"] :
            data_per_cp[cpty_name][label] = []
            bors = label
            list_data = []
        else:
            try :
                data_list, xml_data = get_data_trade(label, xml_data)
                data_per_cp[cpty_name][bors].append(data_list)
            except :
                continue
            
    return column_list, data_per_cp

def preprocess_email_cpty(reportObj, params, ReportXML):
    
    path = reportObj.params.filePath
    fileName = reportObj.params.fileName
    fullpath = os.path.join(str(path), str(fileName))
    
    column_list, data_per_cp = split_xml(ReportXML)

    for cpty, val in data_per_cp.items() :
        if val :
            generate_xls(str(path), cpty, column_list, val)
            
 
def post_process_XML(reportObj, params, ReportXML):
    SMTPParameters = FParameterUtils.GetFParameters(acm.GetDefaultContext(), 'CustomReportSMTPParameters')
    hostname = str(SMTPParameters.At('SMTPServer'))
    port = int(SMTPParameters.At('SMTPPort').Text())
    username = SMTPParameters.At('EmailUserName').Text()
    password = SMTPParameters.At('SMTPPassword').Text()
    tls_mode = bool(SMTPParameters.At('SecureSMTPConnection').Text())
    # Setup SMTPServer Object
    SMTPServer = ICTCustomFEmailTransfer.SMTPServer(hostname=hostname, port=port, username=username, password=password, tls_mode=tls_mode)
    
    # File Path Used
    todayDate = date.today().strftime("%Y%m%d")
    path = reportObj.params.filePath
    fileName = reportObj.params.fileName
    fullpath = os.path.join(str(path), f"report{todayDate}")
    list_cpty = [cpty.split(".")[0] for cpty in os.listdir(fullpath)]
    
    # Setup Message Object
    split_params = params.split("\\ ")
    email_main = split_params[0]
    #subject = process_subject(split_params[1])
    body = split_params[2]
    cc = None if len(split_params) <= 3 else split_params[3].split(", ")
    
    sender = SMTPParameters.At('EmailSender').Text()
    
    reports_list = []
    for cpty_id in list_cpty:
        generated_reports = os.path.join(fullpath, cpty_id+".pdf")
        reports_list.append(generated_reports)
    
    reports_list = list(set(reports_list))

    MessageObject = ICTCustomFEmailTransfer.Message(email_main, "testSendEmailTMPG", sender, body, cc, reports_list)
    EmailTransfer = ICTCustomFEmailTransfer(SMTPServer, MessageObject)
    print(EmailTransfer)
    
    try:
        EmailTransfer.Send()
        try :
            print("Email transfer successful for", email_main, cc, reports_list)
        except :
            print("Email transfer successful Sent")
    except Exception as e:
        print("Email Transfer failed:", reports_list)

...

  SendReportToEmailCpty
import acm
import FParameterUtils
from ICTCustomFEmailTransfer import ICTCustomFEmailTransfer

def process_subject(subject_string):
    subject_string = subject_string.replace("<Date>", acm.Time.DateToday())
    return subject_string

def pre_process_XML(reportObj, params, ReportXML):
    print(ReportXML)
    return ReportXML

def post_process_XML(reportObj, params, ReportXML):
    SMTPParameters = FParameterUtils.GetFParameters(acm.GetDefaultContext(), 'CustomReportSMTPParameters')
    hostname = str(SMTPParameters.At('SMTPServer'))
    port = int(SMTPParameters.At('SMTPPort').Text())
    username = SMTPParameters.At('EmailUserName').Text()
    password = SMTPParameters.At('SMTPPassword').Text()
    tls_mode = bool(SMTPParameters.At('SecureSMTPConnection').Text())

    # Setup SMTPServer Object
    SMTPServer = ICTCustomFEmailTransfer.SMTPServer(hostname=hostname, port=port, username=username, password=password, tls_mode=tls_mode)
    
    # Get Reports
    generated_reports = reportObj.generatedFilePaths
    
    # Setup Message Object
    split_params = params.split("\\ ")
    recipients = split_params[0].split(", ")
    subject = process_subject(split_params[1])
    sender = SMTPParameters.At('EmailSender').Text()
    body = split_params[2]
    cc = None if len(split_params) <= 3 else split_params[3].split(", ")
    
    MessageObject = ICTCustomFEmailTransfer.Message(recipients, subject, sender, body, cc, generated_reports)
    
    # Send email
    EmailTransfer = ICTCustomFEmailTransfer(SMTPServer, MessageObject)
    
    try:
        EmailTransfer.Send()
        print("Email transfer successful for", reportObj.params.fileName)
    except Exception as e:
        print("Email Transfer failed:", e)

...

  SystemInternalizer
import acm, ael, re, os
import FParameterUtils

from datetime import date, datetime
from ICTMODULES_FOR_HTML_AND_XSLFO_GENERATOR import *
from ICTCustomFEmailTransfer import ICTCustomFEmailTransfer
  
def post_process_6869(reportObj, params, ReportXML):
    # File Path Used
    month = [
    "", "Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", "Desember"
    ]
    
    todayDatetime = datetime.now().strftime("%d%m%Y%H%M%S")
    todayDate = datetime.now().strftime("%Y%m%d")
    path = reportObj.params.filePath
    fileName = reportObj.params.fileName
    fullpath = os.path.join(str(path),"report"+todayDate, str(fileName)+str(todayDatetime)+".xls")
    
    firstDate = acm.Time().FirstDayOfMonth(acm.Time().DateAddDelta(acm.Time().FirstDayOfMonth(acm.Time().DateToday()), 0, 0, -1))
    firstDay = acm.Time().DayOfMonth(firstDate)
    lastDay = acm.Time().DayOfMonth(acm.Time().LastDayOfMonth(firstDate))
    month = month[int(acm.Time().DateToYMD(firstDate)[1])]
    year = str(acm.Time().DateToYMD(firstDate)[0])
    
    new_text = ""
    fileObject = open(fullpath, "r", encoding='utf-8')
    data = fileObject.read()
    fileObject.close()
    
    data = data.replace('{{Condition}}', params)
    data = data.replace('{{tanggal}}', f"{firstDay} s.d {lastDay} {month} {year}")

    fileObject = open(fullpath, "w", encoding='utf-8')
    fileObject.write(data)
    fileObject.close()

...

}

decls[FXSLTemplate] {
  "csvTemplate_BOa31" ( "aef reporting.secondary templates" "aef reporting.secondary templates txt" ) "";
  "FTABTemplate_Custom_ICT_Apolo" ( "aef reporting.secondary templates" "aef reporting.secondary templates txt" ) "";
  "FTABTemplate_Custom_ICT_asql" ( "aef reporting.secondary templates" "aef reporting.secondary templates txt" ) "";
  "FTABTemplate_Custom_ICT_Regulatory" ( "aef reporting.secondary templates" "aef reporting.secondary templates txt" ) "";
  "XlsTemplateBO07" ( "aef reporting.secondary templates" "aef reporting.secondary templates xls" ) "";
  "XlsTemplateBO19" ( "aef reporting.secondary templates" "aef reporting.secondary templates xls" ) "";
  "XlsTemplateBO30" ( "aef reporting.secondary templates" "aef reporting.secondary templates xls" ) "";
  "XlsTemplateBO37" ( "aef reporting.secondary templates" "aef reporting.secondary templates csv" "aef reporting.secondary templates xls" ) "";
  "XlsTemplateBO60" ( "aef reporting.secondary templates" "aef reporting.secondary templates xls" ) "";
  "XlsTemplateBO6869" ( "aef reporting.secondary templates" "aef reporting.secondary templates xls" ) "";
  "XlsTemplateBO71" ( "aef reporting.secondary templates" "aef reporting.secondary templates xls" ) "";
}

clx FObject [FXSLTemplate] {
  csvTemplate_BOa31
<?xml version='1.0'?>
<!DOCTYPE xsl:stylesheet [
  <!ENTITY tab "<xsl:text>&#9;</xsl:text>">
  <!ENTITY lf "<xsl:text>&#10;</xsl:text>">
]>

<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:output method="text" encoding="UTF-8"/>
<xsl:strip-space elements="*"/>

<xsl:template match="/">
        
<!-- Reports -->
    <xsl:for-each select="//PRIMEReport">                         
            <xsl:apply-templates select="current()/ReportContents"/>             
     </xsl:for-each>     
</xsl:template>

<xsl:template match="Table"><xsl:for-each select="Columns/Column"><xsl:value-of select="Label"/><xsl:if test="position() != last()">|</xsl:if></xsl:for-each>
&lf;
<xsl:apply-templates select="Rows/Row"/>
</xsl:template>

<xsl:template match="Row">
    <!-- Process Cells if this Row is a top-level Row -->
    <xsl:if test="count(ancestor::Row) = 2">
        <xsl:for-each select="Cells/Cell"><xsl:call-template name="CellData" /><xsl:if test="position() != last()">|</xsl:if></xsl:for-each>
    </xsl:if>
    <!-- Add newline after the entire row is processed -->
    <xsl:if test="count(ancestor::Row) = 2">&lf;</xsl:if>
    <!-- Apply templates to child Rows -->
    <xsl:apply-templates select="Rows/Row"/>
    
</xsl:template>

<xsl:template name="CellData">
    <xsl:choose>
        <xsl:when test="FormattedData">
            <xsl:value-of select="translate(translate(translate(FormattedData, ',', '{XxX}'), '.', ','), '{XxX}', '.')"/>
        </xsl:when>
        <xsl:when test="RawData">
            <xsl:value-of select="RawData"/>
        </xsl:when>
        <xsl:when test="DefaultData">
            <xsl:value-of select="DefaultData"/>
        </xsl:when>
        <xsl:otherwise>
            <xsl:message terminate="yes"><xsl:text>No dataformat turned on</xsl:text></xsl:message>
        </xsl:otherwise>
    </xsl:choose>
</xsl:template>


</xsl:stylesheet>

...

  FTABTemplate_Custom_ICT_Apolo
<?xml version='1.0'?>
<!DOCTYPE xsl:stylesheet [
  <!ENTITY tab "<xsl:text>&#9;</xsl:text>">
  <!ENTITY lf "<xsl:text>&#10;</xsl:text>">
]>

<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:output method="text" encoding="UTF-8"/>
<xsl:strip-space elements="*"/>

<xsl:template match="/">
        
<!-- Reports -->
    <xsl:for-each select="//PRIMEReport">                         
            <xsl:apply-templates select="current()/ReportContents"/>             
     </xsl:for-each>     
</xsl:template>

<xsl:template match="Table">
H01|010101|008|{{todayDate}}|OSMK|0100
<xsl:apply-templates select="Rows/Row"/>
</xsl:template>

<xsl:template match="Row">
    <!-- Process Cells if this Row is a top-level Row -->
    <xsl:if test="count(ancestor::Row) = 3">
        <xsl:for-each select="Cells/Cell">
            <xsl:if test="position() = 4">000000000001|</xsl:if>
                <xsl:call-template name="CellData" />
            <!-- Add '|' separator only between cells -->
            <xsl:if test="position() != last()">|</xsl:if>
        </xsl:for-each>
    </xsl:if>
    <!-- Add newline after the entire row is processed -->
    <xsl:if test="count(ancestor::Row) = 3">&lf;</xsl:if>
    <!-- Apply templates to child Rows -->
    <xsl:apply-templates select="Rows/Row"/>
</xsl:template>

<xsl:template name="CellData">
    <xsl:choose>
        <xsl:when test="FormattedData">
            <xsl:value-of select="translate(FormattedData, ',', '')"/>
        </xsl:when>
        <xsl:when test="RawData">
            <xsl:value-of select="RawData"/>
        </xsl:when>
        <xsl:when test="DefaultData">
            <xsl:value-of select="DefaultData"/>
        </xsl:when>
        <xsl:otherwise>
            <xsl:message terminate="yes"><xsl:text>No dataformat turned on</xsl:text></xsl:message>
        </xsl:otherwise>
    </xsl:choose>
</xsl:template>


</xsl:stylesheet>

...

  FTABTemplate_Custom_ICT_asql
<?xml version='1.0'?>
<!DOCTYPE xsl:stylesheet [
  <!ENTITY tab "<xsl:text>&#9;</xsl:text>">
  <!ENTITY lf "<xsl:text>&#10;</xsl:text>">
]>

<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:output method="text" encoding="UTF-8"/>
<xsl:strip-space elements="*"/>

<xsl:template match="/">
        
<!-- Reports -->
    <xsl:for-each select="//PRIMEReport">                         
            <xsl:apply-templates select="current()/ReportContents"/>             
     </xsl:for-each>     
</xsl:template>

<xsl:template match="Table">
    <xsl:apply-templates select="Rows/Row"/>
</xsl:template>

<xsl:template match="Row">
    <xsl:if test="count(ancestor::Row) = 0">
    <xsl:for-each select="Cells/Cell"><xsl:call-template name="CellData" />|</xsl:for-each>
    </xsl:if>
    <xsl:text>&#10;</xsl:text>
    <xsl:apply-templates select="Rows/Row"/>
</xsl:template>

<xsl:template name="CellData">
        <xsl:choose>
            <xsl:when test="FormattedData">
                <xsl:value-of select="FormattedData"/>
            </xsl:when>
            <xsl:when test="RawData">
                <xsl:value-of select="RawData"/>
            </xsl:when>
            <xsl:when test="DefaultData">
                <xsl:value-of select="DefaultData"/>
            </xsl:when>
            <xsl:otherwise>
            <xsl:message terminate="yes"><xsl:text>No dataformat turned on</xsl:text></xsl:message>
            </xsl:otherwise>
        </xsl:choose>
</xsl:template>

</xsl:stylesheet>

...

  FTABTemplate_Custom_ICT_Regulatory
<?xml version='1.0'?>
<!DOCTYPE xsl:stylesheet [
  <!ENTITY tab "<xsl:text>&#9;</xsl:text>">
  <!ENTITY lf "<xsl:text>&#10;</xsl:text>">
]>

<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:output method="text" encoding="UTF-8"/>
<xsl:strip-space elements="*"/>

<xsl:template match="/">
        
<!-- Reports -->
    <xsl:for-each select="//PRIMEReport">                         
            <xsl:apply-templates select="current()/ReportContents"/>             
     </xsl:for-each>     
</xsl:template>

<xsl:template match="Table">
    <xsl:apply-templates select="Rows/Row"/>
</xsl:template>

<xsl:template match="Row">
    <!-- Process Cells if this Row is a top-level Row -->
    <xsl:if test="count(ancestor::Row) = 1">
        <xsl:for-each select="Cells/Cell">
            <xsl:call-template name="CellData" />
            <!-- Add '|' separator only between cells -->
            <xsl:if test="position() != last()">|</xsl:if>
        </xsl:for-each>
    </xsl:if>
    <!-- Add newline after the entire row is processed -->
    <xsl:if test="count(ancestor::Row) = 1">&lf;</xsl:if>
    <!-- Apply templates to child Rows -->
    <xsl:apply-templates select="Rows/Row"/>
</xsl:template>

<xsl:template name="CellData">
    <xsl:choose>
        <xsl:when test="FormattedData">
            <xsl:value-of select="translate(FormattedData, ',', '')"/>
        </xsl:when>
        <xsl:when test="RawData">
            <xsl:value-of select="RawData"/>
        </xsl:when>
        <xsl:when test="DefaultData">
            <xsl:value-of select="DefaultData"/>
        </xsl:when>
        <xsl:otherwise>
            <xsl:message terminate="yes"><xsl:text>No dataformat turned on</xsl:text></xsl:message>
        </xsl:otherwise>
    </xsl:choose>
</xsl:template>


</xsl:stylesheet>

...

  FTABTemplate_Custom_ICTNOGRUP
<?xml version='1.0'?>
<!DOCTYPE xsl:stylesheet [
  <!ENTITY tab "<xsl:text>&#9;</xsl:text>">
  <!ENTITY lf "<xsl:text>&#10;</xsl:text>">
]>

<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:output method="text" encoding="UTF-8"/>
<xsl:strip-space elements="*"/>

<xsl:template match="/">
        
<!-- Reports -->
    <xsl:for-each select="//PRIMEReport">                         
            Type:&tab;<xsl:value-of select="current()/Type"/>&lf;
            Names:&tab;<xsl:value-of select="current()/Name"/>&lf;
            Time:&tab;<xsl:value-of select="concat(substring(LocalTime,1,10),' ',substring(LocalTime,12,8),' (UTC', substring(LocalTime,20,6),')')"/>&lf;
            <xsl:apply-templates select="current()/ReportContents"/>             
     </xsl:for-each>     
</xsl:template>

<xsl:template match="Table">
Table name:&tab;<xsl:value-of select="Name"/>&lf;
&tab;
<xsl:for-each select="Columns/Column">
    <xsl:value-of select="Label"/>&tab;
</xsl:for-each>
&lf;
    <xsl:apply-templates select="Rows/Row"/>
</xsl:template>

<xsl:template match="Row">
    <xsl:if test="count(ancestor::Row) = 1">
        <xsl:value-of select="Label"/>&tab;
        <xsl:for-each select="Cells/Cell">
            <xsl:call-template name="CellData" />&tab;
        </xsl:for-each>
        &lf;
    </xsl:if>
        <xsl:apply-templates select="Rows/Row"/>
</xsl:template>

<xsl:template name="CellData">
        <xsl:choose>
            <xsl:when test="FormattedData">
                <xsl:value-of select="FormattedData"/>
            </xsl:when>
            <xsl:when test="RawData">
                <xsl:value-of select="RawData"/>
            </xsl:when>
            <xsl:when test="DefaultData">
                <xsl:value-of select="DefaultData"/>
            </xsl:when>
            <xsl:otherwise>
            <xsl:message terminate="yes"><xsl:text>No dataformat turned on</xsl:text></xsl:message>
            </xsl:otherwise>
        </xsl:choose>
</xsl:template>

</xsl:stylesheet>

...

  XlsTemplateBO07
<?xml version='1.0'?>
<!-- &copy; Copyright 2011 SunGard FRONT ARENA
       FStandardTemplate is able to produce colored output for RiskMatrixSheets when DefaultData is turned on
       Added support for Transhist output
-->
<!DOCTYPE xsl:stylesheet [
    <!ENTITY nbsp "<xsl:text>&#160;</xsl:text>">
]>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:param name="clickable" select="0"/>
<xsl:param name="autoupdate" select="0"/>
<xsl:output method="html"/>
<xsl:variable name="cellWidth" select="80"/>
<xsl:variable name="rowHeaderWidth" select="250"/>
<xsl:variable name="useLabelColumn" select="//PRIMEReport/Type !='ASQL Table'"/>

<xsl:template name="PrintSpaces">
  <xsl:param name="n" select="0"/>
  <xsl:if test="$n > 0">
    <xsl:call-template name="PrintSpaces">
      <xsl:with-param name="n" select="$n - 1" />
    </xsl:call-template>
    &nbsp;
  </xsl:if>
</xsl:template>

<xsl:template name="PrintSpace2">
  <xsl:param name="n" select="0"/>
  <xsl:if test="$n = 1">
    <xsl:call-template name="PrintSpaces">
      <xsl:with-param name="n" select="$n - 1" />
    </xsl:call-template>
    &nbsp;
  </xsl:if>
</xsl:template>

<xsl:template match="ReportContents">
     <xsl:apply-templates select="Table"/>
</xsl:template>

<xsl:template match="Table">
    
    <xsl:variable name="numberOfColumns" select="NumberOfColumns"/>
    <tr class="tblhdr" depth="{$treeDepth}" border="1px solid black">
       <xsl:if test="$useLabelColumn">
        <td width="{$rowHeaderWidth}">
            <xsl:call-template name="PrintSpaces">
                <xsl:with-param name="n" select="($treeDepth -1) * 6"/>
            </xsl:call-template>
        <img src="report_plus.gif" />&nbsp;</td>
        </xsl:if>
        <xsl:for-each select="Columns/Column">
            <xsl:choose>
            <xsl:when test="TemplateId != ''">
                <td width="{$cellWidth * 2}" style="background-color : #ecf576"><b>
                <xsl:value-of select="TemplateId"/><br />
                <xsl:value-of select="Label"/>
                </b></td>
            </xsl:when>
            <xsl:otherwise>
                <td width="{$cellWidth}" style="background-color : #ecf576"><b><xsl:value-of select="Label"/></b></td>
            </xsl:otherwise>
            </xsl:choose>
        </xsl:for-each>
    </tr>
    <xsl:apply-templates select="Rows/Row">
        <xsl:with-param name="treeDepth" select="$treeDepth"/>
        <xsl:with-param name="colorStep" select="0"/>
    </xsl:apply-templates>
</xsl:template>

<xsl:template match="Table">
    
    <xsl:variable name="numberOfColumns" select="NumberOfColumns"/>

    <xsl:variable name="colorStep" >
        <xsl:choose>
                <xsl:when test="(Type = 'RiskMatrixSheet') and current()//DefaultData">
                    <xsl:variable name="maxvalue">
                        <xsl:call-template name="max">
                                <xsl:with-param name="nodes" select="current()//DefaultData"/>
                        </xsl:call-template>
                    </xsl:variable>
                    <xsl:value-of select="$maxvalue div 255" ></xsl:value-of>
                </xsl:when>
                <xsl:otherwise>0</xsl:otherwise>
        </xsl:choose>
    </xsl:variable>

    <table width="{$numberOfColumns * ($cellWidth + 4) + $rowHeaderWidth + 6}" border="1px solid black">
        <tr class="tblhdr" border="1px solid black">
           <xsl:if test="$useLabelColumn">
            <td width="{$rowHeaderWidth}">&nbsp;</td>
            </xsl:if>
            <xsl:for-each select="Columns/Column">
                <xsl:choose>
                <xsl:when test="TemplateId != ''">
                    <td width="{$cellWidth * 2}" style="background-color : #ecf576"><b>
                    <xsl:value-of select="TemplateId"/><br />
                    <xsl:value-of select="Label"/>
                    </b></td>
                </xsl:when>
                <xsl:otherwise>
                    <td width="{$cellWidth}" style="background-color : #ecf576"><b><xsl:value-of select="Label"/></b></td>
                </xsl:otherwise>
                </xsl:choose>
            </xsl:for-each>
        </tr>
        <xsl:apply-templates select="Rows/Row">
            <xsl:with-param name="treeDepth" select="1"/>
            <xsl:with-param name="colorStep" select="$colorStep"/>
        </xsl:apply-templates>
    </table>
    <p/><p/>
</xsl:template>

<xsl:template match="Row">
    <xsl:param name = "treeDepth"/>
    <xsl:param name = "colorStep"/>
    <xsl:variable name="rwId" select="RowId"/>
    <xsl:if test="count(ancestor::Row) = 4">
        <tr class="{concat('cell', $treeDepth)}" style="mso-number-format:'\@'" depth="{$treeDepth}" border="1px solid black">
            <xsl:if test="$useLabelColumn">
                    <td class="row" style="mso-number-format:'\@'">
                    
                        <xsl:call-template name="PrintSpaces">
                                <xsl:with-param name="n" select="($treeDepth - 1) * 6"/>
                        </xsl:call-template>
                        
                        <xsl:if test="$clickable = '1'">
                                <img src="report_plus.gif"/>
                        </xsl:if>
                        <xsl:value-of select="Label"/>
                        
                    </td>
            </xsl:if>
        <xsl:apply-templates select="Cells/Cell">
            <xsl:with-param name="colorStep" select="$colorStep" />
        </xsl:apply-templates>
        </tr>
    </xsl:if>
    <xsl:if test="ancestor::ReportContents/ChildReports/ChildReport[ChildReportId = $rwId]">
        <xsl:apply-templates select="ancestor::ReportContents/ChildReports/ChildReport[ChildReportId = $rwId]/PRIMEReport/ReportContents/Table" mode="ChildReport">
            <xsl:with-param name="treeDepth" select="$treeDepth +1" />
        </xsl:apply-templates>
    </xsl:if>
    <xsl:apply-templates select="Rows/Row">
        <xsl:with-param name="treeDepth" select="$treeDepth + 1" />
        <xsl:with-param name="colorStep" select="$colorStep" />
    </xsl:apply-templates>
</xsl:template>

<xsl:template match="Cell">
    <xsl:param name = "colorStep"/>
    <td style="border: thin solid windowtext; mso-number-format:'\@'">
         
         <xsl:choose>   
            
            <xsl:when test="Appearance">
                <xsl:attribute name="style">
                
                         <xsl:choose>     
                            <xsl:when test="Appearance/BkgColor">
                                    background-color: <!--rgb( 0, 255 ,255 )-->
                                        <xsl:call-template name="rgbfromint">
                                            <xsl:with-param name="rgbintval" select="Appearance/BkgColor"/>  
                                         </xsl:call-template>
                                         
                            </xsl:when>
                            <xsl:otherwise>
                                background-color: white
                            </xsl:otherwise>
                         </xsl:choose>    
                         
                        <xsl:choose>   
                            <xsl:when test="Appearance/TextColor">
                                    ;color: <!--rgb( 255, 0 ,255 )-->
                                           <xsl:call-template name="rgbfromint">
                                            <xsl:with-param name="rgbintval" select="Appearance/TextColor"/>  
                                         </xsl:call-template>
                            </xsl:when>
                            <xsl:otherwise>
                               ;color: black
                            </xsl:otherwise>
                        </xsl:choose>   
                
                </xsl:attribute>   
            </xsl:when>
            
            <xsl:otherwise>
                <xsl:if test="DefaultData and $colorStep > 0 and string(number(DefaultData)) !='NaN'">
                        <xsl:attribute name="style">background-color:
                                <xsl:call-template name="color">
                                        <xsl:with-param name="colorStep" select="$colorStep"/>
                                        <xsl:with-param name="value" select="DefaultData"/>
                                        
                                </xsl:call-template>
                        </xsl:attribute>
                </xsl:if>
            </xsl:otherwise>
            
        </xsl:choose>
        <xsl:choose>
                <xsl:when test="ValueType and DefaultData">
                        <acronym>
                                <xsl:attribute name="title">
                                        <xsl:value-of select="DefaultData"/>
                                </xsl:attribute>
                        <xsl:call-template name="CellData" />
                        </acronym>
                </xsl:when>
                <xsl:otherwise>
                        <xsl:call-template name="CellData" />
                </xsl:otherwise>
        </xsl:choose>
    </td>
</xsl:template>

<xsl:template name="CellData">
        <xsl:choose>
             
            <xsl:when test="FormattedData">
                <xsl:value-of select="FormattedData"/>
            </xsl:when>
            <xsl:when test="RawData">
                <xsl:choose>
                    <xsl:when test ="contains(RawData, 'http:') or contains(RawData, 'https:')">
                        <xsl:value-of select="RawData " disable-output-escaping="yes"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="RawData"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:when test="DefaultData">
                <xsl:choose>
                        <xsl:when test="ValueType">
                                <xsl:text>#</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                                <xsl:value-of select="DefaultData"/>
                        </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                  <xsl:message terminate="yes"><xsl:text>No dataformat turned on</xsl:text></xsl:message>
            </xsl:otherwise>
            
        </xsl:choose>
</xsl:template>

<xsl:template match="Settings">
    <table border="1px solid black">
    <tr border="1px solid black">
        <xsl:for-each select="Groups/Group">
            <xsl:if test="Label = 'Profit/Loss'">
                <tr class="tblhdr" border="1px solid black">
                <xsl:for-each select="Column">
                    <td class="row" width="{$cellWidth}" style="background-color : #ecf576"><b>
                    <xsl:choose>
                        <xsl:when test="Label != ''">
                            <xsl:value-of select="Label"/>
                        </xsl:when>
                        <xsl:otherwise>
                             <xsl:value-of select="ColumnId"/>
                        </xsl:otherwise>
                    </xsl:choose>
                    </b></td>
                </xsl:for-each>
                </tr>
                <tr class="row" depth="1" border="1px solid black">
                <xsl:for-each select="Cell">
                    <td class="cell1">
                        <xsl:call-template name="CellData" />
                    </td>
                </xsl:for-each>
                </tr>

            </xsl:if>
        </xsl:for-each>
        </tr>
    </table>
    <p/><p/>
</xsl:template>

<xsl:template match="/">
    <html>
        <head>
        <xsl:if test="$autoupdate = '1'">
                <meta http-equiv="REFRESH" content="10"></meta>
        </xsl:if>
        </head>
        <insertcss/>
        <body>
         <p class="headerImage">
            <headerImage/>
        </p>
        <xsl:if test="$clickable = '1'">
                <xsl:attribute name="onload">init()</xsl:attribute>
                <script src="portfolio_report.js" type="text/javascript"></script>
        </xsl:if>

        <!-- Table of contents, only viewed if more than one report -->

        <xsl:if test="/MultiReport">
            <table>
                <xsl:for-each select="/MultiReport/PRIMEReport">
                        <tr><td>
                            <!--<td><xsl:value-of select="Type"/></td>-->
                            <td><xsl:value-of select="Name"/></td>
                            <td><xsl:value-of select="substring(LocalTime,1,10)"/></td>
                        </td></tr>
               </xsl:for-each>
            </table>
        </xsl:if>

        <!-- Reports - ORIGINAL CODE-->
        <xsl:for-each select="/MultiReport/PRIMEReport|/PRIMEReport">
            <h3>
                <!--<xsl:value-of select="Type"/>:&nbsp;--><!--ORIGINAL LINE-->
                <xsl:value-of select="Name"/>&nbsp;
                <br><xsl:value-of select="substring(LocalTime,1,10)"/></br>
                <!--<xsl:value-of select="concat(substring(LocalTime,1,10),' ',substring(LocalTime,12,8),' (UTC', substring(LocalTime,20,6),')')"/>-->
             </h3>

             <xsl:apply-templates select="current()/ReportContents"/>
        </xsl:for-each>
        </body>
    </html>
</xsl:template>

<!-- derived from http://www.exslt.org/math/functions/max/index.html -->
<xsl:template name="max">
   <xsl:param name="nodes" select="/.." />
   <xsl:choose>
      <xsl:when test="not($nodes)">0</xsl:when>
      <xsl:otherwise>
         <xsl:for-each select="$nodes">
            <xsl:sort select="translate(.,'-','')" data-type="number" order="descending" />
            <xsl:if test="position( ) = 1">
               <xsl:value-of select="number(translate(.,'-',''))" />
            </xsl:if>
         </xsl:for-each>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

<xsl:template name="color">
   <xsl:param name="value"/>
   <xsl:param name = "colorStep"/>
   <xsl:variable name="rgbval">
       <xsl:choose>
          <xsl:when test="$value > 0" >
            <xsl:value-of select="255 - round($value div $colorStep)"/>
        </xsl:when>
        <xsl:otherwise>
            <xsl:value-of select="255 - round($value div $colorStep * -1)"/>
        </xsl:otherwise>
       </xsl:choose>

   </xsl:variable>
   <xsl:choose>
        <xsl:when test="$value > 0 and $rgbval &lt; 0">
            <xsl:text>rgb(255,0,0)</xsl:text>
            </xsl:when>
        <xsl:when test="$value &lt; 0 and $rgbval &lt; 0">
            <xsl:text>rgb(0,255,0)</xsl:text>
            </xsl:when>
        <xsl:when test="$value > 0">
            <xsl:value-of select="concat('rgb(',$rgbval,',255,',$rgbval,')')"/>
            </xsl:when>
      <xsl:otherwise>
            <xsl:value-of select="concat('rgb(255,',$rgbval,',',$rgbval,')')"/>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

<xsl:template name="rgbfromint">
        <xsl:param name="rgbintval"/>
        
        <xsl:variable name="redval">
                <xsl:value-of select="$rgbintval mod 256"/>
        </xsl:variable>
        <xsl:variable name="newvalue">
                <xsl:value-of select="floor($rgbintval div 256)"/>
        </xsl:variable>
        <xsl:variable name="greenval">
                <xsl:value-of select="$newvalue mod 256"/>
        </xsl:variable>
        <xsl:variable name="blueval">
                <xsl:value-of select="floor($newvalue div 256)"/>
        </xsl:variable>
        
        <xsl:value-of select="concat( 'rgb(',  $redval,  ',',   $greenval,    ',',   $blueval,  ')'    )"/>
        
        
</xsl:template>

</xsl:stylesheet>

...

  XlsTemplateBO19
<?xml version='1.0'?>
<!-- &copy; Copyright 2011 SunGard FRONT ARENA
       FStandardTemplate is able to produce colored output for RiskMatrixSheets when DefaultData is turned on
       Added support for Transhist output
-->
<!DOCTYPE xsl:stylesheet [
    <!ENTITY nbsp "<xsl:text>&#160;</xsl:text>">
]>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:param name="clickable" select="0"/>
<xsl:param name="autoupdate" select="0"/>
<xsl:output method="html"/>
<xsl:variable name="cellWidth" select="80"/>
<xsl:variable name="rowHeaderWidth" select="250"/>
<xsl:variable name="useLabelColumn" select="//PRIMEReport/Type !='ASQL Table'"/>

<xsl:template name="PrintSpaces">
  <xsl:param name="n" select="0"/>
  <xsl:if test="$n > 0">
    <xsl:call-template name="PrintSpaces">
      <xsl:with-param name="n" select="$n - 1" />
    </xsl:call-template>
    &nbsp;
  </xsl:if>
</xsl:template>

<xsl:template name="PrintSpace2">
  <xsl:param name="n" select="0"/>
  <xsl:if test="$n = 1">
    <xsl:call-template name="PrintSpaces">
      <xsl:with-param name="n" select="$n - 1" />
    </xsl:call-template>
    &nbsp;
  </xsl:if>
</xsl:template>

<xsl:template match="ReportContents">
     <xsl:apply-templates select="Table"/>
</xsl:template>

<xsl:template match="Table">
    
    <xsl:variable name="numberOfColumns" select="NumberOfColumns"/>

    <xsl:variable name="colorStep" >
        <xsl:choose>
                <xsl:when test="(Type = 'RiskMatrixSheet') and current()//DefaultData">
                    <xsl:variable name="maxvalue">
                        <xsl:call-template name="max">
                                <xsl:with-param name="nodes" select="current()//DefaultData"/>
                        </xsl:call-template>
                    </xsl:variable>
                    <xsl:value-of select="$maxvalue div 255" ></xsl:value-of>
                </xsl:when>
                <xsl:otherwise>0</xsl:otherwise>
        </xsl:choose>
    </xsl:variable>

    <table width="{$numberOfColumns * ($cellWidth + 4) + $rowHeaderWidth + 6}" border="1px solid black">
        <tr class="tblhdr" border="1px solid black">
           <xsl:if test="$useLabelColumn">
            <td width="{$rowHeaderWidth}">&nbsp;</td>
            </xsl:if>
            <xsl:for-each select="Columns/Column">
                <xsl:choose>
                <xsl:when test="TemplateId != ''">
                    <td width="{$cellWidth * 2}" style="background-color : #ecf576"><b>
                    <xsl:value-of select="TemplateId"/><br />
                    <xsl:value-of select="Label"/>
                    </b></td>
                </xsl:when>
                <xsl:otherwise>
                    <td width="{$cellWidth}" style="background-color : #ecf576"><b><xsl:value-of select="Label"/></b></td>
                </xsl:otherwise>
                </xsl:choose>
            </xsl:for-each>
        </tr>
        <xsl:apply-templates select="Rows/Row">
            <xsl:with-param name="treeDepth" select="1"/>
            <xsl:with-param name="colorStep" select="$colorStep"/>
        </xsl:apply-templates>
        
    </table>
    <p/><p/>
</xsl:template>

<xsl:template match="Row">
    <xsl:param name = "treeDepth"/>
    <xsl:param name = "colorStep"/>
    <xsl:variable name="rwId" select="RowId"/>
        
        <xsl:if test="count(ancestor::Row) = 1 and ancestor::Row[1]/Label = 'BO19a'">
        
            <xsl:if test="position( ) = 1">

                <tr><td colspan="9" style="background-color:#DFE2EC; font-weight:bold; text-align:left">SMCL FORM</td></tr>
            </xsl:if>
        
            <tr class="{concat('cell', 1)}" depth="{$treeDepth}" border="1px solid black">
                <xsl:if test="$useLabelColumn">
                        <td class="row">
                        
                            <xsl:call-template name="PrintSpaces">
                                    <xsl:with-param name="n" select="($treeDepth - 1) * 6"/>
                            </xsl:call-template>
                            
                            <xsl:if test="$clickable = '1'">
                                    <img src="report_plus.gif"/>
                            </xsl:if>
                            <xsl:value-of select="Label"/>
                            
                        </td>
                </xsl:if>

            <xsl:apply-templates select="Cells/Cell">
                <xsl:with-param name="colorStep" select="$colorStep" />
            </xsl:apply-templates>
            </tr>

        </xsl:if>
        
        <xsl:if test="count(ancestor::Row) = 1 and ancestor::Row[1]/Label = 'BO19b'">
        
            <xsl:if test="position( ) = 1">
                <tr><td colspan="9" rowspan="3">&nbsp;</td></tr>
                <tr></tr>
                <tr></tr>
                <tr><td colspan="9" style="background-color:#DFE2EC; font-weight:bold; text-align:left">SUMMARY FORM</td></tr>
            </xsl:if>
        
            <tr class="{concat('cell', 1)}" depth="{$treeDepth}" border="1px solid black">
                <xsl:if test="$useLabelColumn">
                        <td class="row">
                        
                            <xsl:call-template name="PrintSpaces">
                                    <xsl:with-param name="n" select="($treeDepth - 1) * 6"/>
                            </xsl:call-template>
                            
                            <xsl:if test="$clickable = '1'">
                                    <img src="report_plus.gif"/>
                            </xsl:if>
                            <xsl:value-of select="Label"/>
                            
                        </td>
                </xsl:if>

            <xsl:apply-templates select="Cells/Cell">
                <xsl:with-param name="colorStep" select="$colorStep" />
            </xsl:apply-templates>
            </tr>

        </xsl:if>
    
    
    <xsl:if test="ancestor::ReportContents/ChildReports/ChildReport[ChildReportId = $rwId]">
        <xsl:apply-templates select="ancestor::ReportContents/ChildReports/ChildReport[ChildReportId = $rwId]/PRIMEReport/ReportContents/Table" mode="ChildReport">
            <xsl:with-param name="treeDepth" select="$treeDepth +1" />
        </xsl:apply-templates>
    </xsl:if>
    <xsl:apply-templates select="Rows/Row">
        <xsl:with-param name="treeDepth" select="$treeDepth + 1" />
        <xsl:with-param name="colorStep" select="$colorStep" />
    </xsl:apply-templates>
</xsl:template>

<xsl:template match="Cell">
    <xsl:param name = "colorStep"/>
    <td>
         
         <xsl:choose>   
            
            <xsl:when test="Appearance">
                <xsl:attribute name="style">
                
                         <xsl:choose>     
                            <xsl:when test="Appearance/BkgColor">
                                    background-color: <!--rgb( 0, 255 ,255 )-->
                                        <xsl:call-template name="rgbfromint">
                                            <xsl:with-param name="rgbintval" select="Appearance/BkgColor"/>  
                                         </xsl:call-template>
                                         
                            </xsl:when>
                            <xsl:otherwise>
                                background-color: white
                            </xsl:otherwise>
                         </xsl:choose>    
                         
                        <xsl:choose>   
                            <xsl:when test="Appearance/TextColor">
                                    ;color: <!--rgb( 255, 0 ,255 )-->
                                           <xsl:call-template name="rgbfromint">
                                            <xsl:with-param name="rgbintval" select="Appearance/TextColor"/>  
                                         </xsl:call-template>
                            </xsl:when>
                            <xsl:otherwise>
                               ;color: black
                            </xsl:otherwise>
                        </xsl:choose>   
                
                </xsl:attribute>   
            </xsl:when>
            
            <xsl:otherwise>
                <xsl:if test="DefaultData and $colorStep > 0 and string(number(DefaultData)) !='NaN'">
                        <xsl:attribute name="style">background-color:
                                <xsl:call-template name="color">
                                        <xsl:with-param name="colorStep" select="$colorStep"/>
                                        <xsl:with-param name="value" select="DefaultData"/>
                                        
                                </xsl:call-template>
                        </xsl:attribute>
                </xsl:if>
            </xsl:otherwise>
            
        </xsl:choose>
        <xsl:choose>
                <xsl:when test="ValueType and DefaultData">
                        <acronym>
                                <xsl:attribute name="title">
                                        <xsl:value-of select="DefaultData"/>
                                </xsl:attribute>
                        <xsl:call-template name="CellData" />
                        </acronym>
                </xsl:when>
                <xsl:otherwise>
                        <xsl:call-template name="CellData" />
                </xsl:otherwise>
        </xsl:choose>
    </td>
</xsl:template>

<xsl:template name="CellData">
        <xsl:choose>
             
            <xsl:when test="FormattedData">
                <xsl:value-of select="FormattedData"/>
            </xsl:when>
            <xsl:when test="RawData">
                <xsl:choose>
                    <xsl:when test ="contains(RawData, 'http:') or contains(RawData, 'https:')">
                        <xsl:value-of select="RawData " disable-output-escaping="yes"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="RawData"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:when test="DefaultData">
                <xsl:choose>
                        <xsl:when test="ValueType">
                                <xsl:text>#</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                                <xsl:value-of select="DefaultData"/>
                        </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                  <xsl:message terminate="yes"><xsl:text>No dataformat turned on</xsl:text></xsl:message>
            </xsl:otherwise>
            
        </xsl:choose>
</xsl:template>

<xsl:template match="Settings">
    <table border="1px solid black">
    <tr border="1px solid black">
        <xsl:for-each select="Groups/Group">
            <xsl:if test="Label = 'Profit/Loss'">
                <tr class="tblhdr" border="1px solid black">
                <xsl:for-each select="Column">
                    <td class="row" width="{$cellWidth}" style="background-color : #ecf576"><b>
                    <xsl:choose>
                        <xsl:when test="Label != ''">
                            <xsl:value-of select="Label"/>
                        </xsl:when>
                        <xsl:otherwise>
                             <xsl:value-of select="ColumnId"/>
                        </xsl:otherwise>
                    </xsl:choose>
                    </b></td>
                </xsl:for-each>
                </tr>
                <tr class="row" depth="1" border="1px solid black">
                <xsl:for-each select="Cell">
                    <td class="cell1">
                        <xsl:call-template name="CellData" />
                    </td>
                </xsl:for-each>
                </tr>

            </xsl:if>
        </xsl:for-each>
        </tr>
    </table>
    <p/><p/>
</xsl:template>

<xsl:template match="/">
    <html>
        <head>
        <xsl:if test="$autoupdate = '1'">
                <meta http-equiv="REFRESH" content="10"></meta>
        </xsl:if>
        </head>
        <insertcss/>
        <body>
         <p class="headerImage">
            <headerImage/>
        </p>
        <xsl:if test="$clickable = '1'">
                <xsl:attribute name="onload">init()</xsl:attribute>
                <script src="portfolio_report.js" type="text/javascript"></script>
        </xsl:if>

        <!-- Table of contents, only viewed if more than one report -->

        <xsl:if test="/MultiReport">
            <table>
                <xsl:for-each select="/MultiReport/PRIMEReport">
                        <tr><td>
                            <!--<td><xsl:value-of select="Type"/></td>-->
                            <td><xsl:value-of select="Name"/></td>
                            <td><xsl:value-of select="substring(LocalTime,1,10)"/></td>
                        </td></tr>
               </xsl:for-each>
            </table>
        </xsl:if>

        <!-- Reports - ORIGINAL CODE-->
        <xsl:for-each select="/MultiReport/PRIMEReport|/PRIMEReport">
            <h3>
                <!--<xsl:value-of select="Type"/>:&nbsp;--><!--ORIGINAL LINE-->
                <xsl:value-of select="Name"/>&nbsp;
                <br><xsl:value-of select="substring(LocalTime,1,10)"/></br>
                <!--<xsl:value-of select="concat(substring(LocalTime,1,10),' ',substring(LocalTime,12,8),' (UTC', substring(LocalTime,20,6),')')"/>-->
             </h3>

             <xsl:apply-templates select="current()/ReportContents"/>
        </xsl:for-each>
        </body>
    </html>
</xsl:template>

<!-- derived from http://www.exslt.org/math/functions/max/index.html -->
<xsl:template name="max">
   <xsl:param name="nodes" select="/.." />
   <xsl:choose>
      <xsl:when test="not($nodes)">0</xsl:when>
      <xsl:otherwise>
         <xsl:for-each select="$nodes">
            <xsl:sort select="translate(.,'-','')" data-type="number" order="descending" />
            <xsl:if test="position( ) = 1">
               <xsl:value-of select="number(translate(.,'-',''))" />
            </xsl:if>
         </xsl:for-each>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

<xsl:template name="color">
   <xsl:param name="value"/>
   <xsl:param name = "colorStep"/>
   <xsl:variable name="rgbval">
       <xsl:choose>
          <xsl:when test="$value > 0" >
            <xsl:value-of select="255 - round($value div $colorStep)"/>
        </xsl:when>
        <xsl:otherwise>
            <xsl:value-of select="255 - round($value div $colorStep * -1)"/>
        </xsl:otherwise>
       </xsl:choose>

   </xsl:variable>
   <xsl:choose>
        <xsl:when test="$value > 0 and $rgbval &lt; 0">
            <xsl:text>rgb(255,0,0)</xsl:text>
            </xsl:when>
        <xsl:when test="$value &lt; 0 and $rgbval &lt; 0">
            <xsl:text>rgb(0,255,0)</xsl:text>
            </xsl:when>
        <xsl:when test="$value > 0">
            <xsl:value-of select="concat('rgb(',$rgbval,',255,',$rgbval,')')"/>
            </xsl:when>
      <xsl:otherwise>
            <xsl:value-of select="concat('rgb(255,',$rgbval,',',$rgbval,')')"/>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

<xsl:template name="rgbfromint">
        <xsl:param name="rgbintval"/>
        
        <xsl:variable name="redval">
                <xsl:value-of select="$rgbintval mod 256"/>
        </xsl:variable>
        <xsl:variable name="newvalue">
                <xsl:value-of select="floor($rgbintval div 256)"/>
        </xsl:variable>
        <xsl:variable name="greenval">
                <xsl:value-of select="$newvalue mod 256"/>
        </xsl:variable>
        <xsl:variable name="blueval">
                <xsl:value-of select="floor($newvalue div 256)"/>
        </xsl:variable>
        
        <xsl:value-of select="concat( 'rgb(',  $redval,  ',',   $greenval,    ',',   $blueval,  ')'    )"/>
        
        
</xsl:template>

</xsl:stylesheet>

...

  XlsTemplateBO30
<?xml version='1.0'?>
<!-- &copy; Copyright 2011 SunGard FRONT ARENA
       FStandardTemplate is able to produce colored output for RiskMatrixSheets when DefaultData is turned on
       Added support for Transhist output
-->
<!DOCTYPE xsl:stylesheet [
    <!ENTITY nbsp "<xsl:text>&#160;</xsl:text>">
]>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:param name="clickable" select="0"/>
<xsl:param name="autoupdate" select="0"/>
<xsl:output method="html"/>
<xsl:variable name="cellWidth" select="80"/>
<xsl:variable name="rowHeaderWidth" select="250"/>
<xsl:variable name="useLabelColumn" select="//PRIMEReport/Type !='ASQL Table'"/>

<xsl:template name="PrintSpaces">
  <xsl:param name="n" select="0"/>
  <xsl:if test="$n > 0">
    <xsl:call-template name="PrintSpaces">
      <xsl:with-param name="n" select="$n - 1" />
    </xsl:call-template>
    &nbsp;
  </xsl:if>
</xsl:template>

<xsl:template name="PrintSpace2">
  <xsl:param name="n" select="0"/>
  <xsl:if test="$n = 1">
    <xsl:call-template name="PrintSpaces">
      <xsl:with-param name="n" select="$n - 1" />
    </xsl:call-template>
    &nbsp;
  </xsl:if>
</xsl:template>

<xsl:template match="ReportContents">
     <xsl:apply-templates select="Table"/>
</xsl:template>

<xsl:template match="Table">
    
    <xsl:variable name="numberOfColumns" select="NumberOfColumns"/>
    <tr class="tblhdr" depth="{$treeDepth}" border="1px solid black">
       <xsl:if test="$useLabelColumn">
        <td width="{$rowHeaderWidth}">
            <xsl:call-template name="PrintSpaces">
                <xsl:with-param name="n" select="($treeDepth -1) * 6"/>
            </xsl:call-template>
        <img src="report_plus.gif" />&nbsp;</td>
        </xsl:if>
        <xsl:for-each select="Columns/Column">
            <xsl:choose>
            <xsl:when test="TemplateId != ''">
                <td width="{$cellWidth * 2}" style="background-color : #ecf576"><b>
                <xsl:value-of select="TemplateId"/><br />
                <xsl:value-of select="Label"/>
                </b></td>
            </xsl:when>
            <xsl:otherwise>
                <td width="{$cellWidth}" style="background-color : #ecf576"><b><xsl:value-of select="Label"/></b></td>
            </xsl:otherwise>
            </xsl:choose>
        </xsl:for-each>
    </tr>
    <xsl:apply-templates select="Rows/Row">
        <xsl:with-param name="treeDepth" select="$treeDepth"/>
        <xsl:with-param name="colorStep" select="0"/>
    </xsl:apply-templates>
</xsl:template>

<xsl:template match="Table">
    
    <xsl:variable name="numberOfColumns" select="NumberOfColumns"/>

    <xsl:variable name="colorStep" >
        <xsl:choose>
                <xsl:when test="(Type = 'RiskMatrixSheet') and current()//DefaultData">
                    <xsl:variable name="maxvalue">
                        <xsl:call-template name="max">
                                <xsl:with-param name="nodes" select="current()//DefaultData"/>
                        </xsl:call-template>
                    </xsl:variable>
                    <xsl:value-of select="$maxvalue div 255" ></xsl:value-of>
                </xsl:when>
                <xsl:otherwise>0</xsl:otherwise>
        </xsl:choose>
    </xsl:variable>

    <table width="{$numberOfColumns * ($cellWidth + 4) + $rowHeaderWidth + 6}" border="1px solid black">
        <tr class="tblhdr" border="1px solid black">
           <xsl:if test="$useLabelColumn">
            <td width="{$rowHeaderWidth}">&nbsp;</td>
            </xsl:if>
            <xsl:for-each select="Columns/Column">
                <xsl:choose>
                <xsl:when test="TemplateId != ''">
                    <td width="{$cellWidth * 2}" style="background-color : #ecf576"><b>
                    <xsl:value-of select="TemplateId"/><br />
                    <xsl:value-of select="Label"/>
                    </b></td>
                </xsl:when>
                <xsl:otherwise>
                    <td width="{$cellWidth}" style="background-color : #ecf576"><b><xsl:value-of select="Label"/></b></td>
                </xsl:otherwise>
                </xsl:choose>
            </xsl:for-each>
        </tr>
        <xsl:apply-templates select="Rows/Row">
            <xsl:with-param name="treeDepth" select="1"/>
            <xsl:with-param name="colorStep" select="$colorStep"/>
        </xsl:apply-templates>
    </table>
    <p/><p/>
</xsl:template>

<xsl:template match="Row">
    <xsl:param name = "treeDepth"/>
    <xsl:param name = "colorStep"/>
    <xsl:variable name="rwId" select="RowId"/>
    <xsl:if test="count(ancestor::Row) = 1">
        <tr class="{concat('cell', $treeDepth)}" depth="{$treeDepth}" border="1px solid black">
            <xsl:if test="$useLabelColumn">
                    <td class="row">
                    
                        <xsl:call-template name="PrintSpaces">
                                <xsl:with-param name="n" select="($treeDepth - 1) * 6"/>
                        </xsl:call-template>
                        
                        <xsl:if test="$clickable = '1'">
                                <img src="report_plus.gif"/>
                        </xsl:if>
                        <xsl:value-of select="Label"/>
                        
                    </td>
            </xsl:if>
        <xsl:apply-templates select="Cells/Cell">
            <xsl:with-param name="colorStep" select="$colorStep" />
        </xsl:apply-templates>
        </tr>
    </xsl:if>
    <xsl:if test="ancestor::ReportContents/ChildReports/ChildReport[ChildReportId = $rwId]">
        <xsl:apply-templates select="ancestor::ReportContents/ChildReports/ChildReport[ChildReportId = $rwId]/PRIMEReport/ReportContents/Table" mode="ChildReport">
            <xsl:with-param name="treeDepth" select="$treeDepth +1" />
        </xsl:apply-templates>
    </xsl:if>
    <xsl:apply-templates select="Rows/Row">
        <xsl:with-param name="treeDepth" select="$treeDepth + 1" />
        <xsl:with-param name="colorStep" select="$colorStep" />
    </xsl:apply-templates>
</xsl:template>

<xsl:template match="Cell">
    <xsl:param name = "colorStep"/>
    <td>
         
         <xsl:choose>   
            
            <xsl:when test="Appearance">
                <xsl:attribute name="style">
                
                         <xsl:choose>     
                            <xsl:when test="Appearance/BkgColor">
                                    background-color: <!--rgb( 0, 255 ,255 )-->
                                        <xsl:call-template name="rgbfromint">
                                            <xsl:with-param name="rgbintval" select="Appearance/BkgColor"/>  
                                         </xsl:call-template>
                                         
                            </xsl:when>
                            <xsl:otherwise>
                                background-color: white
                            </xsl:otherwise>
                         </xsl:choose>    
                         
                        <xsl:choose>   
                            <xsl:when test="Appearance/TextColor">
                                    ;color: <!--rgb( 255, 0 ,255 )-->
                                           <xsl:call-template name="rgbfromint">
                                            <xsl:with-param name="rgbintval" select="Appearance/TextColor"/>  
                                         </xsl:call-template>
                            </xsl:when>
                            <xsl:otherwise>
                               ;color: black
                            </xsl:otherwise>
                        </xsl:choose>   
                
                </xsl:attribute>   
            </xsl:when>
            
            <xsl:otherwise>
                <xsl:if test="DefaultData and $colorStep > 0 and string(number(DefaultData)) !='NaN'">
                        <xsl:attribute name="style">background-color:
                                <xsl:call-template name="color">
                                        <xsl:with-param name="colorStep" select="$colorStep"/>
                                        <xsl:with-param name="value" select="DefaultData"/>
                                        
                                </xsl:call-template>
                        </xsl:attribute>
                </xsl:if>
            </xsl:otherwise>
            
        </xsl:choose>
        <xsl:choose>
                <xsl:when test="ValueType and DefaultData">
                        <acronym>
                                <xsl:attribute name="title">
                                        <xsl:value-of select="DefaultData"/>
                                </xsl:attribute>
                        <xsl:call-template name="CellData" />
                        </acronym>
                </xsl:when>
                <xsl:otherwise>
                        <xsl:call-template name="CellData" />
                </xsl:otherwise>
        </xsl:choose>
    </td>
</xsl:template>

<xsl:template name="CellData">
        <xsl:choose>
             
            <xsl:when test="FormattedData">
                <xsl:value-of select="string(FormattedData)"/>
            </xsl:when>
            <xsl:when test="RawData">
                <xsl:choose>
                    <xsl:when test ="contains(RawData, 'http:') or contains(RawData, 'https:')">
                        <xsl:value-of select="RawData " disable-output-escaping="yes"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="RawData"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:when test="DefaultData">
                <xsl:choose>
                        <xsl:when test="ValueType">
                                <xsl:text>#</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                                <xsl:value-of select="DefaultData"/>
                        </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                  <xsl:message terminate="yes"><xsl:text>No dataformat turned on</xsl:text></xsl:message>
            </xsl:otherwise>
            
        </xsl:choose>
</xsl:template>

<xsl:template match="Settings">
    <table border="1px solid black">
    <tr border="1px solid black">
        <xsl:for-each select="Groups/Group">
            <xsl:if test="Label = 'Profit/Loss'">
                <tr class="tblhdr" border="1px solid black">
                <xsl:for-each select="Column">
                    <td class="row" width="{$cellWidth}" style="background-color : #ecf576"><b>
                    <xsl:choose>
                        <xsl:when test="Label != ''">
                            <xsl:value-of select="Label"/>
                        </xsl:when>
                        <xsl:otherwise>
                             <xsl:value-of select="ColumnId"/>
                        </xsl:otherwise>
                    </xsl:choose>
                    </b></td>
                </xsl:for-each>
                </tr>
                <tr class="row" depth="1" border="1px solid black">
                <xsl:for-each select="Cell">
                    <td class="cell1">
                        <xsl:call-template name="CellData" />
                    </td>
                </xsl:for-each>
                </tr>

            </xsl:if>
        </xsl:for-each>
        </tr>
    </table>
    <p/><p/>
</xsl:template>

<xsl:template match="/">
    <html>
        <head>
        <xsl:if test="$autoupdate = '1'">
                <meta http-equiv="REFRESH" content="10"></meta>
        </xsl:if>
        </head>
        <insertcss/>
        <body>
         <p class="headerImage">
            <headerImage/>
        </p>
        <xsl:if test="$clickable = '1'">
                <xsl:attribute name="onload">init()</xsl:attribute>
                <script src="portfolio_report.js" type="text/javascript"></script>
        </xsl:if>

        <!-- Table of contents, only viewed if more than one report -->

        <xsl:if test="/MultiReport">
            <table>
                <xsl:for-each select="/MultiReport/PRIMEReport">
                        <tr><td>
                            <!--<td><xsl:value-of select="Type"/></td>-->
                            <td><xsl:value-of select="Name"/></td>
                            <td><xsl:value-of select="substring(LocalTime,1,10)"/></td>
                        </td></tr>
               </xsl:for-each>
            </table>
        </xsl:if>

        <!-- Reports - ORIGINAL CODE-->
        <xsl:for-each select="/MultiReport/PRIMEReport|/PRIMEReport">
            <h3>
                <!--<xsl:value-of select="Type"/>:&nbsp;--><!--ORIGINAL LINE-->
                <xsl:value-of select="Name"/>&nbsp;
                <br><xsl:value-of select="substring(LocalTime,1,10)"/></br>
                <!--<xsl:value-of select="concat(substring(LocalTime,1,10),' ',substring(LocalTime,12,8),' (UTC', substring(LocalTime,20,6),')')"/>-->
             </h3>

             <xsl:apply-templates select="current()/ReportContents"/>
        </xsl:for-each>
        </body>
    </html>
</xsl:template>

<!-- derived from http://www.exslt.org/math/functions/max/index.html -->
<xsl:template name="max">
   <xsl:param name="nodes" select="/.." />
   <xsl:choose>
      <xsl:when test="not($nodes)">0</xsl:when>
      <xsl:otherwise>
         <xsl:for-each select="$nodes">
            <xsl:sort select="translate(.,'-','')" data-type="number" order="descending" />
            <xsl:if test="position( ) = 1">
               <xsl:value-of select="number(translate(.,'-',''))" />
            </xsl:if>
         </xsl:for-each>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

<xsl:template name="color">
   <xsl:param name="value"/>
   <xsl:param name = "colorStep"/>
   <xsl:variable name="rgbval">
       <xsl:choose>
          <xsl:when test="$value > 0" >
            <xsl:value-of select="255 - round($value div $colorStep)"/>
        </xsl:when>
        <xsl:otherwise>
            <xsl:value-of select="255 - round($value div $colorStep * -1)"/>
        </xsl:otherwise>
       </xsl:choose>

   </xsl:variable>
   <xsl:choose>
        <xsl:when test="$value > 0 and $rgbval &lt; 0">
            <xsl:text>rgb(255,0,0)</xsl:text>
            </xsl:when>
        <xsl:when test="$value &lt; 0 and $rgbval &lt; 0">
            <xsl:text>rgb(0,255,0)</xsl:text>
            </xsl:when>
        <xsl:when test="$value > 0">
            <xsl:value-of select="concat('rgb(',$rgbval,',255,',$rgbval,')')"/>
            </xsl:when>
      <xsl:otherwise>
            <xsl:value-of select="concat('rgb(255,',$rgbval,',',$rgbval,')')"/>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

<xsl:template name="rgbfromint">
        <xsl:param name="rgbintval"/>
        
        <xsl:variable name="redval">
                <xsl:value-of select="$rgbintval mod 256"/>
        </xsl:variable>
        <xsl:variable name="newvalue">
                <xsl:value-of select="floor($rgbintval div 256)"/>
        </xsl:variable>
        <xsl:variable name="greenval">
                <xsl:value-of select="$newvalue mod 256"/>
        </xsl:variable>
        <xsl:variable name="blueval">
                <xsl:value-of select="floor($newvalue div 256)"/>
        </xsl:variable>
        
        <xsl:value-of select="concat( 'rgb(',  $redval,  ',',   $greenval,    ',',   $blueval,  ')'    )"/>
        
        
</xsl:template>

</xsl:stylesheet>

...

  XlsTemplateBO37
<?xml version='1.0'?>
<!-- &copy; Copyright 2011 SunGard FRONT ARENA
       FStandardTemplate is able to produce colored output for RiskMatrixSheets when DefaultData is turned on
       Added support for Transhist output
-->
<!DOCTYPE xsl:stylesheet [
    <!ENTITY nbsp "<xsl:text>&#160;</xsl:text>">
]>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:param name="clickable" select="0"/>
<xsl:param name="autoupdate" select="0"/>
<xsl:output method="html"/>
<xsl:variable name="cellWidth" select="80"/>
<xsl:variable name="rowHeaderWidth" select="250"/>
<xsl:variable name="useLabelColumn" select="//PRIMEReport/Type !='ASQL Table'"/>

<xsl:template name="PrintSpaces">
  <xsl:param name="n" select="0"/>
  <xsl:if test="$n > 0">
    <xsl:call-template name="PrintSpaces">
      <xsl:with-param name="n" select="$n - 1" />
    </xsl:call-template>
    &nbsp;
  </xsl:if>
</xsl:template>

<xsl:template name="PrintSpace2">
  <xsl:param name="n" select="0"/>
  <xsl:if test="$n = 1">
    <xsl:call-template name="PrintSpaces">
      <xsl:with-param name="n" select="$n - 1" />
    </xsl:call-template>
    &nbsp;
  </xsl:if>
</xsl:template>

<xsl:template match="ReportContents">
     <xsl:apply-templates select="Table"/>
</xsl:template>

<xsl:template match="Table">
    
    <xsl:variable name="numberOfColumns" select="NumberOfColumns"/>
    <tr class="tblhdr" depth="{$treeDepth}" border="1px solid black">
       <xsl:if test="$useLabelColumn">
        <td width="{$rowHeaderWidth}">
            <xsl:call-template name="PrintSpaces">
                <xsl:with-param name="n" select="($treeDepth -1) * 6"/>
            </xsl:call-template>
        <img src="report_plus.gif" />&nbsp;</td>
        </xsl:if>
        <xsl:for-each select="Columns/Column">
            <xsl:choose>
            <xsl:when test="TemplateId != ''">
                <td width="{$cellWidth * 2}" style="background-color : #ecf576"><b>
                <xsl:value-of select="TemplateId"/><br />
                <xsl:value-of select="Label"/>
                </b></td>
            </xsl:when>
            <xsl:otherwise>
                <td width="{$cellWidth}" style="background-color : #ecf576"><b><xsl:value-of select="Label"/></b></td>
            </xsl:otherwise>
            </xsl:choose>
        </xsl:for-each>
    </tr>
    <xsl:apply-templates select="Rows/Row">
        <xsl:with-param name="treeDepth" select="$treeDepth"/>
        <xsl:with-param name="colorStep" select="0"/>
    </xsl:apply-templates>
</xsl:template>

<xsl:template match="Table">
    
    <xsl:variable name="numberOfColumns" select="NumberOfColumns"/>

    <xsl:variable name="colorStep" >
        <xsl:choose>
                <xsl:when test="(Type = 'RiskMatrixSheet') and current()//DefaultData">
                    <xsl:variable name="maxvalue">
                        <xsl:call-template name="max">
                                <xsl:with-param name="nodes" select="current()//DefaultData"/>
                        </xsl:call-template>
                    </xsl:variable>
                    <xsl:value-of select="$maxvalue div 255" ></xsl:value-of>
                </xsl:when>
                <xsl:otherwise>0</xsl:otherwise>
        </xsl:choose>
    </xsl:variable>

    <table width="{$numberOfColumns * ($cellWidth + 4) + $rowHeaderWidth + 6}" border="1px solid black">
        <tr class="tblhdr" border="1px solid black">
           <xsl:if test="$useLabelColumn">
            <td width="{$rowHeaderWidth}">&nbsp;</td>
            </xsl:if>
            <xsl:for-each select="Columns/Column">
                <xsl:choose>
                <xsl:when test="TemplateId != ''">
                    <td width="{$cellWidth * 2}" style="background-color : #ecf576"><b>
                    <xsl:value-of select="TemplateId"/><br />
                    <xsl:value-of select="Label"/>
                    </b></td>
                </xsl:when>
                <xsl:otherwise>
                    <td width="{$cellWidth}" style="background-color : #ecf576"><b><xsl:value-of select="Label"/></b></td>
                </xsl:otherwise>
                </xsl:choose>
            </xsl:for-each>
        </tr>
        <xsl:apply-templates select="Rows/Row">
            <xsl:with-param name="treeDepth" select="1"/>
            <xsl:with-param name="colorStep" select="$colorStep"/>
        </xsl:apply-templates>
    </table>
    <p/><p/>
</xsl:template>

<xsl:template match="Row">
    <xsl:param name = "treeDepth"/>
    <xsl:param name = "colorStep"/>
    <xsl:variable name="rwId" select="RowId"/>
    <xsl:if test="count(ancestor::Row) &lt; 2">
        <tr class="{concat('cell', $treeDepth)}" depth="{$treeDepth}" border="1px solid black">
            <xsl:if test="$useLabelColumn">
                    <td class="row">
                    
                        <xsl:call-template name="PrintSpaces">
                                <xsl:with-param name="n" select="($treeDepth - 1) * 6"/>
                        </xsl:call-template>
                        
                        <xsl:if test="$clickable = '1'">
                                <img src="report_plus.gif"/>
                        </xsl:if>
                        <xsl:value-of select="Label"/>
                        
                    </td>
            </xsl:if>
        <xsl:apply-templates select="Cells/Cell">
            <xsl:with-param name="colorStep" select="$colorStep" />
        </xsl:apply-templates>
        </tr>
    </xsl:if>
    <xsl:if test="ancestor::ReportContents/ChildReports/ChildReport[ChildReportId = $rwId]">
        <xsl:apply-templates select="ancestor::ReportContents/ChildReports/ChildReport[ChildReportId = $rwId]/PRIMEReport/ReportContents/Table" mode="ChildReport">
            <xsl:with-param name="treeDepth" select="$treeDepth +1" />
        </xsl:apply-templates>
    </xsl:if>
    <xsl:apply-templates select="Rows/Row">
        <xsl:with-param name="treeDepth" select="$treeDepth + 1" />
        <xsl:with-param name="colorStep" select="$colorStep" />
    </xsl:apply-templates>
</xsl:template>

<xsl:template match="Cell">
    <xsl:param name = "colorStep"/>
    <td>
         
         <xsl:choose>   
            
            <xsl:when test="Appearance">
                <xsl:attribute name="style">
                
                         <xsl:choose>     
                            <xsl:when test="Appearance/BkgColor">
                                    background-color: <!--rgb( 0, 255 ,255 )-->
                                        <xsl:call-template name="rgbfromint">
                                            <xsl:with-param name="rgbintval" select="Appearance/BkgColor"/>  
                                         </xsl:call-template>
                                         
                            </xsl:when>
                            <xsl:otherwise>
                                background-color: white
                            </xsl:otherwise>
                         </xsl:choose>    
                         
                        <xsl:choose>   
                            <xsl:when test="Appearance/TextColor">
                                    ;color: <!--rgb( 255, 0 ,255 )-->
                                           <xsl:call-template name="rgbfromint">
                                            <xsl:with-param name="rgbintval" select="Appearance/TextColor"/>  
                                         </xsl:call-template>
                            </xsl:when>
                            <xsl:otherwise>
                               ;color: black
                            </xsl:otherwise>
                        </xsl:choose>   
                
                </xsl:attribute>   
            </xsl:when>
            
            <xsl:otherwise>
                <xsl:if test="DefaultData and $colorStep > 0 and string(number(DefaultData)) !='NaN'">
                        <xsl:attribute name="style">background-color:
                                <xsl:call-template name="color">
                                        <xsl:with-param name="colorStep" select="$colorStep"/>
                                        <xsl:with-param name="value" select="DefaultData"/>
                                        
                                </xsl:call-template>
                        </xsl:attribute>
                </xsl:if>
            </xsl:otherwise>
            
        </xsl:choose>
        <xsl:choose>
                <xsl:when test="ValueType and DefaultData">
                        <acronym>
                                <xsl:attribute name="title">
                                        <xsl:value-of select="DefaultData"/>
                                </xsl:attribute>
                        <xsl:call-template name="CellData" />
                        </acronym>
                </xsl:when>
                <xsl:otherwise>
                        <xsl:call-template name="CellData" />
                </xsl:otherwise>
        </xsl:choose>
    </td>
</xsl:template>

<xsl:template name="CellData">
        <xsl:choose>
             
            <xsl:when test="FormattedData">
                <xsl:value-of select="FormattedData"/>
            </xsl:when>
            <xsl:when test="RawData">
                <xsl:choose>
                    <xsl:when test ="contains(RawData, 'http:') or contains(RawData, 'https:')">
                        <xsl:value-of select="RawData " disable-output-escaping="yes"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="RawData"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:when test="DefaultData">
                <xsl:choose>
                        <xsl:when test="ValueType">
                                <xsl:text>#</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                                <xsl:value-of select="DefaultData"/>
                        </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                  <xsl:message terminate="yes"><xsl:text>No dataformat turned on</xsl:text></xsl:message>
            </xsl:otherwise>
            
        </xsl:choose>
</xsl:template>

<xsl:template match="Settings">
    <table border="1px solid black">
    <tr border="1px solid black">
        <xsl:for-each select="Groups/Group">
            <xsl:if test="Label = 'Profit/Loss'">
                <tr class="tblhdr" border="1px solid black">
                <xsl:for-each select="Column">
                    <td class="row" width="{$cellWidth}" style="background-color : #ecf576"><b>
                    <xsl:choose>
                        <xsl:when test="Label != ''">
                            <xsl:value-of select="Label"/>
                        </xsl:when>
                        <xsl:otherwise>
                             <xsl:value-of select="ColumnId"/>
                        </xsl:otherwise>
                    </xsl:choose>
                    </b></td>
                </xsl:for-each>
                </tr>
                <tr class="row" depth="1" border="1px solid black">
                <xsl:for-each select="Cell">
                    <td class="cell1">
                        <xsl:call-template name="CellData" />
                    </td>
                </xsl:for-each>
                </tr>

            </xsl:if>
        </xsl:for-each>
        </tr>
    </table>
    <p/><p/>
</xsl:template>

<xsl:template match="/">
    <html>
        <head>
        <xsl:if test="$autoupdate = '1'">
                <meta http-equiv="REFRESH" content="10"></meta>
        </xsl:if>
        </head>
        <insertcss/>
        <body>
         <p class="headerImage">
            <headerImage/>
        </p>
        <xsl:if test="$clickable = '1'">
                <xsl:attribute name="onload">init()</xsl:attribute>
                <script src="portfolio_report.js" type="text/javascript"></script>
        </xsl:if>

        <!-- Table of contents, only viewed if more than one report -->

        <xsl:if test="/MultiReport">
            <table>
                <xsl:for-each select="/MultiReport/PRIMEReport">
                        <tr><td>
                            <!--<td><xsl:value-of select="Type"/></td>-->
                            <td><xsl:value-of select="Name"/></td>
                            <td><xsl:value-of select="substring(LocalTime,1,10)"/></td>
                        </td></tr>
               </xsl:for-each>
            </table>
        </xsl:if>

        <!-- Reports - ORIGINAL CODE-->
        <xsl:for-each select="/MultiReport/PRIMEReport|/PRIMEReport">
            <h3>
                <!--<xsl:value-of select="Type"/>:&nbsp;--><!--ORIGINAL LINE-->
                <xsl:value-of select="Name"/>&nbsp;
                <br><xsl:value-of select="substring(LocalTime,1,10)"/></br>
                <!--<xsl:value-of select="concat(substring(LocalTime,1,10),' ',substring(LocalTime,12,8),' (UTC', substring(LocalTime,20,6),')')"/>-->
             </h3>

             <xsl:apply-templates select="current()/ReportContents"/>
        </xsl:for-each>
        </body>
    </html>
</xsl:template>

<!-- derived from http://www.exslt.org/math/functions/max/index.html -->
<xsl:template name="max">
   <xsl:param name="nodes" select="/.." />
   <xsl:choose>
      <xsl:when test="not($nodes)">0</xsl:when>
      <xsl:otherwise>
         <xsl:for-each select="$nodes">
            <xsl:sort select="translate(.,'-','')" data-type="number" order="descending" />
            <xsl:if test="position( ) = 1">
               <xsl:value-of select="number(translate(.,'-',''))" />
            </xsl:if>
         </xsl:for-each>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

<xsl:template name="color">
   <xsl:param name="value"/>
   <xsl:param name = "colorStep"/>
   <xsl:variable name="rgbval">
       <xsl:choose>
          <xsl:when test="$value > 0" >
            <xsl:value-of select="255 - round($value div $colorStep)"/>
        </xsl:when>
        <xsl:otherwise>
            <xsl:value-of select="255 - round($value div $colorStep * -1)"/>
        </xsl:otherwise>
       </xsl:choose>

   </xsl:variable>
   <xsl:choose>
        <xsl:when test="$value > 0 and $rgbval &lt; 0">
            <xsl:text>rgb(255,0,0)</xsl:text>
            </xsl:when>
        <xsl:when test="$value &lt; 0 and $rgbval &lt; 0">
            <xsl:text>rgb(0,255,0)</xsl:text>
            </xsl:when>
        <xsl:when test="$value > 0">
            <xsl:value-of select="concat('rgb(',$rgbval,',255,',$rgbval,')')"/>
            </xsl:when>
      <xsl:otherwise>
            <xsl:value-of select="concat('rgb(255,',$rgbval,',',$rgbval,')')"/>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

<xsl:template name="rgbfromint">
        <xsl:param name="rgbintval"/>
        
        <xsl:variable name="redval">
                <xsl:value-of select="$rgbintval mod 256"/>
        </xsl:variable>
        <xsl:variable name="newvalue">
                <xsl:value-of select="floor($rgbintval div 256)"/>
        </xsl:variable>
        <xsl:variable name="greenval">
                <xsl:value-of select="$newvalue mod 256"/>
        </xsl:variable>
        <xsl:variable name="blueval">
                <xsl:value-of select="floor($newvalue div 256)"/>
        </xsl:variable>
        
        <xsl:value-of select="concat( 'rgb(',  $redval,  ',',   $greenval,    ',',   $blueval,  ')'    )"/>
        
        
</xsl:template>

</xsl:stylesheet>

...

  XlsTemplateBO60
<?xml version='1.0'?>
<!-- &copy; Copyright 2011 SunGard FRONT ARENA
       FStandardTemplate is able to produce colored output for RiskMatrixSheets when DefaultData is turned on
       Added support for Transhist output
-->
<!DOCTYPE xsl:stylesheet [
    <!ENTITY nbsp "<xsl:text>&#160;</xsl:text>">
]>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:param name="clickable" select="0"/>
<xsl:param name="autoupdate" select="0"/>
<xsl:output method="html"/>
<xsl:variable name="cellWidth" select="80"/>
<xsl:variable name="rowHeaderWidth" select="250"/>
<xsl:variable name="useLabelColumn" select="//PRIMEReport/Type !='ASQL Table'"/>

<xsl:template name="PrintSpaces">
  <xsl:param name="n" select="0"/>
  <xsl:if test="$n > 0">
    <xsl:call-template name="PrintSpaces">
      <xsl:with-param name="n" select="$n - 1" />
    </xsl:call-template>
    &nbsp;
  </xsl:if>
</xsl:template>

<xsl:template name="PrintSpace2">
  <xsl:param name="n" select="0"/>
  <xsl:if test="$n = 1">
    <xsl:call-template name="PrintSpaces">
      <xsl:with-param name="n" select="$n - 1" />
    </xsl:call-template>
    &nbsp;
  </xsl:if>
</xsl:template>

<xsl:template match="ReportContents">
     <xsl:apply-templates select="Table"/>
</xsl:template>

<xsl:template match="Table">
    
    <xsl:variable name="numberOfColumns" select="NumberOfColumns"/>
    <tr class="tblhdr" depth="{$treeDepth}" border="1px solid black">
       <xsl:if test="$useLabelColumn">
        <td width="{$rowHeaderWidth}">
            <xsl:call-template name="PrintSpaces">
                <xsl:with-param name="n" select="($treeDepth -1) * 6"/>
            </xsl:call-template>
        <img src="report_plus.gif" />&nbsp;</td>
        </xsl:if>
        <xsl:for-each select="Columns/Column">
            <xsl:choose>
            <xsl:when test="TemplateId != ''">
                <td width="{$cellWidth * 2}" style="background-color : #ecf576"><b>
                <xsl:value-of select="TemplateId"/><br />
                <xsl:value-of select="Label"/>
                </b></td>
            </xsl:when>
            <xsl:otherwise>
                <td width="{$cellWidth}" style="background-color : #ecf576"><b><xsl:value-of select="Label"/></b></td>
            </xsl:otherwise>
            </xsl:choose>
        </xsl:for-each>
    </tr>
    <xsl:apply-templates select="Rows/Row">
        <xsl:with-param name="treeDepth" select="$treeDepth"/>
        <xsl:with-param name="colorStep" select="0"/>
    </xsl:apply-templates>
</xsl:template>

<xsl:template match="Table">
    
    <xsl:variable name="numberOfColumns" select="NumberOfColumns"/>

    <xsl:variable name="colorStep" >
        <xsl:choose>
                <xsl:when test="(Type = 'RiskMatrixSheet') and current()//DefaultData">
                    <xsl:variable name="maxvalue">
                        <xsl:call-template name="max">
                                <xsl:with-param name="nodes" select="current()//DefaultData"/>
                        </xsl:call-template>
                    </xsl:variable>
                    <xsl:value-of select="$maxvalue div 255" ></xsl:value-of>
                </xsl:when>
                <xsl:otherwise>0</xsl:otherwise>
        </xsl:choose>
    </xsl:variable>

    <table width="{$numberOfColumns * ($cellWidth + 4) + $rowHeaderWidth + 6}" border="1px solid black">
        <tr class="tblhdr" border="1px solid black">
           <xsl:if test="$useLabelColumn">
            <td width="{$rowHeaderWidth}">&nbsp;</td>
            </xsl:if>
            <xsl:for-each select="Columns/Column">
                <xsl:choose>
                <xsl:when test="TemplateId != ''">
                    <td width="{$cellWidth * 2}" style="background-color : #ecf576"><b>
                    <xsl:value-of select="TemplateId"/><br />
                    <xsl:value-of select="Label"/>
                    </b></td>
                </xsl:when>
                <xsl:otherwise>
                    <td width="{$cellWidth}" style="background-color : #ecf576"><b><xsl:value-of select="Label"/></b></td>
                </xsl:otherwise>
                </xsl:choose>
            </xsl:for-each>
        </tr>
        <xsl:apply-templates select="Rows/Row">
            <xsl:with-param name="treeDepth" select="1"/>
            <xsl:with-param name="colorStep" select="$colorStep"/>
        </xsl:apply-templates>
    </table>
    <p/><p/>
</xsl:template>

<xsl:template match="Row">
    <xsl:param name = "treeDepth"/>
    <xsl:param name = "colorStep"/>
    <xsl:variable name="rwId" select="RowId"/>
    <xsl:if test="count(ancestor::Row) = 2">
        <tr class="{concat('cell', $treeDepth)}" depth="{$treeDepth}" border="1px solid black">
            <xsl:if test="$useLabelColumn">
                    <td class="row">
                    
                        <xsl:call-template name="PrintSpaces">
                                <xsl:with-param name="n" select="($treeDepth - 1) * 6"/>
                        </xsl:call-template>
                        
                        <xsl:if test="$clickable = '1'">
                                <img src="report_plus.gif"/>
                        </xsl:if>
                        <xsl:value-of select="Label"/>
                        
                    </td>
            </xsl:if>
        <xsl:apply-templates select="Cells/Cell">
            <xsl:with-param name="colorStep" select="$colorStep" />
        </xsl:apply-templates>
        </tr>
    </xsl:if>
    <xsl:if test="ancestor::ReportContents/ChildReports/ChildReport[ChildReportId = $rwId]">
        <xsl:apply-templates select="ancestor::ReportContents/ChildReports/ChildReport[ChildReportId = $rwId]/PRIMEReport/ReportContents/Table" mode="ChildReport">
            <xsl:with-param name="treeDepth" select="$treeDepth +1" />
        </xsl:apply-templates>
    </xsl:if>
    <xsl:apply-templates select="Rows/Row">
        <xsl:with-param name="treeDepth" select="$treeDepth + 1" />
        <xsl:with-param name="colorStep" select="$colorStep" />
    </xsl:apply-templates>
</xsl:template>

<xsl:template match="Cell">
    <xsl:param name = "colorStep"/>
    <td>
         
         <xsl:choose>   
            
            <xsl:when test="Appearance">
                <xsl:attribute name="style">
                
                         <xsl:choose>     
                            <xsl:when test="Appearance/BkgColor">
                                    background-color: <!--rgb( 0, 255 ,255 )-->
                                        <xsl:call-template name="rgbfromint">
                                            <xsl:with-param name="rgbintval" select="Appearance/BkgColor"/>  
                                         </xsl:call-template>
                                         
                            </xsl:when>
                            <xsl:otherwise>
                                background-color: white
                            </xsl:otherwise>
                         </xsl:choose>    
                         
                        <xsl:choose>   
                            <xsl:when test="Appearance/TextColor">
                                    ;color: <!--rgb( 255, 0 ,255 )-->
                                           <xsl:call-template name="rgbfromint">
                                            <xsl:with-param name="rgbintval" select="Appearance/TextColor"/>  
                                         </xsl:call-template>
                            </xsl:when>
                            <xsl:otherwise>
                               ;color: black
                            </xsl:otherwise>
                        </xsl:choose>   
                
                </xsl:attribute>   
            </xsl:when>
            
            <xsl:otherwise>
                <xsl:if test="DefaultData and $colorStep > 0 and string(number(DefaultData)) !='NaN'">
                        <xsl:attribute name="style">background-color:
                                <xsl:call-template name="color">
                                        <xsl:with-param name="colorStep" select="$colorStep"/>
                                        <xsl:with-param name="value" select="DefaultData"/>
                                        
                                </xsl:call-template>
                        </xsl:attribute>
                </xsl:if>
            </xsl:otherwise>
            
        </xsl:choose>
        <xsl:choose>
                <xsl:when test="ValueType and DefaultData">
                        <acronym>
                                <xsl:attribute name="title">
                                        <xsl:value-of select="DefaultData"/>
                                </xsl:attribute>
                        <xsl:call-template name="CellData" />
                        </acronym>
                </xsl:when>
                <xsl:otherwise>
                        <xsl:call-template name="CellData" />
                </xsl:otherwise>
        </xsl:choose>
    </td>
</xsl:template>

<xsl:template name="CellData">
        <xsl:choose>
             
            <xsl:when test="FormattedData">
                <xsl:value-of select="FormattedData"/>
            </xsl:when>
            <xsl:when test="RawData">
                <xsl:choose>
                    <xsl:when test ="contains(RawData, 'http:') or contains(RawData, 'https:')">
                        <xsl:value-of select="RawData " disable-output-escaping="yes"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="RawData"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:when test="DefaultData">
                <xsl:choose>
                        <xsl:when test="ValueType">
                                <xsl:text>#</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                                <xsl:value-of select="DefaultData"/>
                        </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                  <xsl:message terminate="yes"><xsl:text>No dataformat turned on</xsl:text></xsl:message>
            </xsl:otherwise>
            
        </xsl:choose>
</xsl:template>

<xsl:template match="Settings">
    <table border="1px solid black">
    <tr border="1px solid black">
        <xsl:for-each select="Groups/Group">
            <xsl:if test="Label = 'Profit/Loss'">
                <tr class="tblhdr" border="1px solid black">
                <xsl:for-each select="Column">
                    <td class="row" width="{$cellWidth}" style="background-color : #ecf576"><b>
                    <xsl:choose>
                        <xsl:when test="Label != ''">
                            <xsl:value-of select="Label"/>
                        </xsl:when>
                        <xsl:otherwise>
                             <xsl:value-of select="ColumnId"/>
                        </xsl:otherwise>
                    </xsl:choose>
                    </b></td>
                </xsl:for-each>
                </tr>
                <tr class="row" depth="1" border="1px solid black">
                <xsl:for-each select="Cell">
                    <td class="cell1">
                        <xsl:call-template name="CellData" />
                    </td>
                </xsl:for-each>
                </tr>

            </xsl:if>
        </xsl:for-each>
        </tr>
    </table>
    <p/><p/>
</xsl:template>

<xsl:template match="/">
    <html>
        <head>
        <xsl:if test="$autoupdate = '1'">
                <meta http-equiv="REFRESH" content="10"></meta>
        </xsl:if>
        </head>
        <insertcss/>
        <body>
         <p class="headerImage">
            <headerImage/>
        </p>
        <xsl:if test="$clickable = '1'">
                <xsl:attribute name="onload">init()</xsl:attribute>
                <script src="portfolio_report.js" type="text/javascript"></script>
        </xsl:if>

        <!-- Table of contents, only viewed if more than one report -->

        <xsl:if test="/MultiReport">
            <table>
                <xsl:for-each select="/MultiReport/PRIMEReport">
                        <tr><td>
                            <!--<td><xsl:value-of select="Type"/></td>-->
                            <td><xsl:value-of select="Name"/></td>
                            <td><xsl:value-of select="substring(LocalTime,1,10)"/></td>
                        </td></tr>
               </xsl:for-each>
            </table>
        </xsl:if>

        <!-- Reports - ORIGINAL CODE-->
        <xsl:for-each select="/MultiReport/PRIMEReport|/PRIMEReport">
            <h3>
                <!--<xsl:value-of select="Type"/>:&nbsp;--><!--ORIGINAL LINE-->
                <xsl:value-of select="Name"/>&nbsp;
                <br><xsl:value-of select="substring(LocalTime,1,10)"/></br>
                <!--<xsl:value-of select="concat(substring(LocalTime,1,10),' ',substring(LocalTime,12,8),' (UTC', substring(LocalTime,20,6),')')"/>-->
             </h3>

             <xsl:apply-templates select="current()/ReportContents"/>
        </xsl:for-each>
        </body>
    </html>
</xsl:template>

<!-- derived from http://www.exslt.org/math/functions/max/index.html -->
<xsl:template name="max">
   <xsl:param name="nodes" select="/.." />
   <xsl:choose>
      <xsl:when test="not($nodes)">0</xsl:when>
      <xsl:otherwise>
         <xsl:for-each select="$nodes">
            <xsl:sort select="translate(.,'-','')" data-type="number" order="descending" />
            <xsl:if test="position( ) = 1">
               <xsl:value-of select="number(translate(.,'-',''))" />
            </xsl:if>
         </xsl:for-each>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

<xsl:template name="color">
   <xsl:param name="value"/>
   <xsl:param name = "colorStep"/>
   <xsl:variable name="rgbval">
       <xsl:choose>
          <xsl:when test="$value > 0" >
            <xsl:value-of select="255 - round($value div $colorStep)"/>
        </xsl:when>
        <xsl:otherwise>
            <xsl:value-of select="255 - round($value div $colorStep * -1)"/>
        </xsl:otherwise>
       </xsl:choose>

   </xsl:variable>
   <xsl:choose>
        <xsl:when test="$value > 0 and $rgbval &lt; 0">
            <xsl:text>rgb(255,0,0)</xsl:text>
            </xsl:when>
        <xsl:when test="$value &lt; 0 and $rgbval &lt; 0">
            <xsl:text>rgb(0,255,0)</xsl:text>
            </xsl:when>
        <xsl:when test="$value > 0">
            <xsl:value-of select="concat('rgb(',$rgbval,',255,',$rgbval,')')"/>
            </xsl:when>
      <xsl:otherwise>
            <xsl:value-of select="concat('rgb(255,',$rgbval,',',$rgbval,')')"/>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

<xsl:template name="rgbfromint">
        <xsl:param name="rgbintval"/>
        
        <xsl:variable name="redval">
                <xsl:value-of select="$rgbintval mod 256"/>
        </xsl:variable>
        <xsl:variable name="newvalue">
                <xsl:value-of select="floor($rgbintval div 256)"/>
        </xsl:variable>
        <xsl:variable name="greenval">
                <xsl:value-of select="$newvalue mod 256"/>
        </xsl:variable>
        <xsl:variable name="blueval">
                <xsl:value-of select="floor($newvalue div 256)"/>
        </xsl:variable>
        
        <xsl:value-of select="concat( 'rgb(',  $redval,  ',',   $greenval,    ',',   $blueval,  ')'    )"/>
        
        
</xsl:template>

</xsl:stylesheet>

...

  XlsTemplateBO67

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    
</head>
<body>
    <table style="border-collapse: collapse; font-family: calibri ">
        <tr style="font-weight: bold; text-align: center;">
            <td colspan="9" >Bank Mandiri</td>
        </tr>
        <tr style="font-weight: bold; text-align: center;">
            <td colspan="9" >Bulan {{bulan}} Tahun {{tahun}}</td>
        </tr>
        <tr><td></td></tr>
        <tr>
            <td style="width: 1cm;"></td>
            <td style="width: 2cm"></td>
            <td style="width: 2cm;"></td>
            <td style="width: 2cm;"></td>
            <td style="width: 2cm;"></td>
            <td style="width: 2cm;"></td>
            <td style="width: 2cm;"></td>
            <td style="width: 2cm;"></td>
            <td style="width: 5cm; font-weight: bold; text-align: right;">Dalam Juta USD</td>
        </tr>

        <tr style="font-weight: bold; text-align: center;">
            <td rowspan="2" style="border: thin solid windowtext">No</td>
            <td rowspan="2" style="border: thin solid windowtext">Periode</td>
            <td colspan="6" style="border: thin solid windowtext">Jenis Instrument / Transaksi</td>
            <td rowspan="2" style="border: thin solid windowtext">Total Valuta Asing</td>
        </tr>
        <tr style="font-weight: bold; text-align: center;">
            <td style="border: thin solid windowtext">Spot*</td>
            <td style="border: thin solid windowtext">Forward</td>
            <td style="border: thin solid windowtext">Swap</td>
            <td style="border: thin solid windowtext">CSO</td>
            <td style="border: thin solid windowtext">DNDF</td>
            <td style="border: thin solid windowtext">Lainnya</td>
        </tr>
        <tr>
            <td style="text-align: center; border: thin solid windowtext">1</td>
            <td style="border: thin solid windowtext">Minggu I</td>
            <td style="text-align: right; border: thin solid windowtext">{{111}}</td>
            <td style="text-align: right; border: thin solid windowtext">{{112}}</td>
            <td style="text-align: right; border: thin solid windowtext">{{113}}</td>
            <td style="text-align: right; border: thin solid windowtext">{{114}}</td>
            <td style="text-align: right; border: thin solid windowtext">{{115}}</td>
            <td style="text-align: right; border: thin solid windowtext">{{116}}</td>
            <td style="text-align: right; border: thin solid windowtext">{{117}}</td>
        </tr>
        <tr>
            <td style="text-align: center; border: thin solid windowtext">2</td>
            <td style="border: thin solid windowtext">Minggu II</td>
            <td style="text-align: right; border: thin solid windowtext">{{121}}</td>
            <td style="text-align: right; border: thin solid windowtext">{{122}}</td>
            <td style="text-align: right; border: thin solid windowtext">{{123}}</td>
            <td style="text-align: right; border: thin solid windowtext">{{124}}</td>
            <td style="text-align: right; border: thin solid windowtext">{{125}}</td>
            <td style="text-align: right; border: thin solid windowtext">{{126}}</td>
            <td style="text-align: right; border: thin solid windowtext">{{127}}</td>
        </tr>
        <tr>
            <td style="text-align: center; border: thin solid windowtext">3</td>
            <td style="border: thin solid windowtext">Minggu III</td>
            <td style="text-align: right; border: thin solid windowtext">{{131}}</td>
            <td style="text-align: right; border: thin solid windowtext">{{132}}</td>
            <td style="text-align: right; border: thin solid windowtext">{{133}}</td>
            <td style="text-align: right; border: thin solid windowtext">{{134}}</td>
            <td style="text-align: right; border: thin solid windowtext">{{135}}</td>
            <td style="text-align: right; border: thin solid windowtext">{{136}}</td>
            <td style="text-align: right; border: thin solid windowtext">{{137}}</td>
        </tr>
        <tr>
            <td style="text-align: center; border: thin solid windowtext">4</td>
            <td style="border: thin solid windowtext">Minggu IV</td>
            <td style="text-align: right; border: thin solid windowtext">{{141}}</td>
            <td style="text-align: right; border: thin solid windowtext">{{142}}</td>
            <td style="text-align: right; border: thin solid windowtext">{{143}}</td>
            <td style="text-align: right; border: thin solid windowtext">{{144}}</td>
            <td style="text-align: right; border: thin solid windowtext">{{145}}</td>
            <td style="text-align: right; border: thin solid windowtext">{{146}}</td>
            <td style="text-align: right; border: thin solid windowtext">{{147}}</td>
        </tr>
        <tr>
            <td style="text-align: center; border: thin solid windowtext">5</td>
            <td style="border: thin solid windowtext">Minggu V</td>
            <td style="text-align: right; border: thin solid windowtext">{{151}}</td>
            <td style="text-align: right; border: thin solid windowtext">{{152}}</td>
            <td style="text-align: right; border: thin solid windowtext">{{153}}</td>
            <td style="text-align: right; border: thin solid windowtext">{{154}}</td>
            <td style="text-align: right; border: thin solid windowtext">{{155}}</td>
            <td style="text-align: right; border: thin solid windowtext">{{156}}</td>
            <td style="text-align: right; border: thin solid windowtext">{{157}}</td>
        </tr>
        <tr><td colspan="9">*) termasuk Tod, Tom, Spot</td></tr>

        <tr><td></td></tr>
        <tr><td></td></tr>
        <tr><td></td></tr>
        <tr style="font-weight: bold; text-align: center;">
            <td colspan="9" >Bank Mandiri</td>
        </tr>
        <tr style="font-weight: bold; text-align: center;">
            <td colspan="9" >Bulan Mei Tahun 2021</td>
        </tr>
        <tr><td></td></tr>
        <tr>
            <td style="width: 1cm;"></td>
            <td style="width: 2cm"></td>
            <td style="width: 2cm;"></td>
            <td style="width: 2cm;"></td>
            <td style="width: 2cm;"></td>
            <td style="width: 2cm;"></td>
            <td style="width: 2cm;"></td>
            <td style="width: 2cm;"></td>
            <td style="width: 5cm; font-weight: bold; text-align: right;">Dalam miliar rupiah</td>
        </tr>

        <tr style="font-weight: bold; text-align: center;">
            <td rowspan="2" style="border: thin solid windowtext">No</td>
            <td rowspan="2" style="border: thin solid windowtext">Periode</td>
            <td colspan="6" style="border: thin solid windowtext">Jenis Instrument / Transaksi</td>
            <td rowspan="2" style="border: thin solid windowtext">Total Rupiah</td>
        </tr>
        <tr style="font-weight: bold; text-align: center;">
            <td style="border: thin solid windowtext">SUN</td>
            <td style="border: thin solid windowtext">SBN</td>
            <td style="border: thin solid windowtext">SBK</td>
            <td style="border: thin solid windowtext">CP</td>
            <td style="border: thin solid windowtext">IRS</td>
            <td style="border: thin solid windowtext">Lainnya</td>
        </tr>
        <tr>
            <td style="text-align: center; border: thin solid windowtext">1</td>
            <td style="border: thin solid windowtext">Minggu I</td>
            <td style="text-align: right; border: thin solid windowtext">{{211}}</td>
            <td style="text-align: right; border: thin solid windowtext">{{212}}</td>
            <td style="text-align: right; border: thin solid windowtext">{{213}}</td>
            <td style="text-align: right; border: thin solid windowtext">{{214}}</td>
            <td style="text-align: right; border: thin solid windowtext">{{215}}</td>
            <td style="text-align: right; border: thin solid windowtext">{{216}}</td>
            <td style="text-align: right; border: thin solid windowtext">{{217}}</td>
        </tr>
        <tr>
            <td style="text-align: center; border: thin solid windowtext">2</td>
            <td style="border: thin solid windowtext">Minggu II</td>
            <td style="text-align: right; border: thin solid windowtext">{{221}}</td>
            <td style="text-align: right; border: thin solid windowtext">{{222}}</td>
            <td style="text-align: right; border: thin solid windowtext">{{223}}</td>
            <td style="text-align: right; border: thin solid windowtext">{{224}}</td>
            <td style="text-align: right; border: thin solid windowtext">{{225}}</td>
            <td style="text-align: right; border: thin solid windowtext">{{226}}</td>
            <td style="text-align: right; border: thin solid windowtext">{{227}}</td>
        </tr>
        <tr>
            <td style="text-align: center; border: thin solid windowtext">3</td>
            <td style="border: thin solid windowtext">Minggu III</td>
            <td style="text-align: right; border: thin solid windowtext">{{231}}</td>
            <td style="text-align: right; border: thin solid windowtext">{{232}}</td>
            <td style="text-align: right; border: thin solid windowtext">{{233}}</td>
            <td style="text-align: right; border: thin solid windowtext">{{234}}</td>
            <td style="text-align: right; border: thin solid windowtext">{{235}}</td>
            <td style="text-align: right; border: thin solid windowtext">{{236}}</td>
            <td style="text-align: right; border: thin solid windowtext">{{237}}</td>
        </tr>
        <tr>
            <td style="text-align: center; border: thin solid windowtext">4</td>
            <td style="border: thin solid windowtext">Minggu IV</td>
            <td style="text-align: right; border: thin solid windowtext">{{241}}</td>
            <td style="text-align: right; border: thin solid windowtext">{{242}}</td>
            <td style="text-align: right; border: thin solid windowtext">{{243}}</td>
            <td style="text-align: right; border: thin solid windowtext">{{244}}</td>
            <td style="text-align: right; border: thin solid windowtext">{{245}}</td>
            <td style="text-align: right; border: thin solid windowtext">{{246}}</td>
            <td style="text-align: right; border: thin solid windowtext">{{247}}</td>
        </tr>
        <tr>
            <td style="text-align: center; border: thin solid windowtext">5</td>
            <td style="border: thin solid windowtext">Minggu V</td>
            <td style="text-align: right; border: thin solid windowtext">{{251}}</td>
            <td style="text-align: right; border: thin solid windowtext">{{252}}</td>
            <td style="text-align: right; border: thin solid windowtext">{{253}}</td>
            <td style="text-align: right; border: thin solid windowtext">{{254}}</td>
            <td style="text-align: right; border: thin solid windowtext">{{255}}</td>
            <td style="text-align: right; border: thin solid windowtext">{{256}}</td>
            <td style="text-align: right; border: thin solid windowtext">{{257}}</td>
        </tr>
    </table>

    
</body>
</html>

...

  XlsTemplateBO6869
<?xml version='1.0'?>
<!DOCTYPE xsl:stylesheet [
    <!ENTITY nbsp "<xsl:text>&#160;</xsl:text>">
]>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:output method="html"/>

<xsl:variable name="useLabelColumn" select="//PRIMEReport/Type !='ASQL Table'"/>

<xsl:template match="ReportContents">
    <html>
    <head>
    </head>
    <body>
    <xsl:apply-templates select="Table"/>
    </body>
    </html>
</xsl:template>

<xsl:template match="Table">
    <table>
        <tr><td colspan="6" style="font-weight: bold; text-align: center;">Rincian Transaksi {{Condition}} Harian 20 Besar Nasabah</td></tr>
        <tr><td></td></tr>
        <tr>
            <td style="width:.5cm"></td>
            <td style="width:.5cm"></td>
            <td style="width:8.2cm"></td>
            <td style="width:8.2cm"></td>
            <td style="width:2.3cm; font-weight: bold; text-align: center;">Tanggal :</td>
            <td style="width:3.5cm; font-weight: bold;">{{tanggal}}</td>
        </tr>
        
        <tr style="font-weight: bold; text-align: center;">
            <td colspan="2" style="border: thin solid windowtext">No</td>
            <td style="border: thin solid windowtext">Nasabah Jual</td>
            <td style="border: thin solid windowtext">Jenis Instrument / Transaksi<br style="mso-data-placement:same-cell;" />(USD / IDR)</td>
            <td style="border: thin solid windowtext">Kurs</td>
            <td style="border: thin solid windowtext">Nominal<br style="mso-data-placement:same-cell;" />USD</td>
        </tr>
        
        
        <xsl:apply-templates select="Rows/Row">
            <xsl:with-param name="treeDepth" select="$treeDepth + 1" />
            <xsl:with-param name="colorStep" select="$colorStep" />
        </xsl:apply-templates>
        
        <tr><td></td></tr>
        <tr><td></td></tr>
        <tr><td></td></tr>
        
        <tr><td colspan="6" style="font-weight: bold; text-align: center;">Rincian Transaksi {{Condition}} Harian 20 Besar Nasabah</td></tr>
        <tr><td></td></tr>
        <tr>
            <td style="width:.5cm"></td>
            <td style="width:.5cm"></td>
            <td style="width:8.2cm"></td>
            <td style="width:8.2cm"></td>
            <td style="width:2.3cm; font-weight: bold; text-align: center;">Tanggal :</td>
            <td style="width:3.5cm; font-weight: bold;">{{tanggal}}</td>
        </tr>
        
        <tr style="font-weight: bold; text-align: center;">
            <td colspan="2" style="border: thin solid windowtext">No</td>
            <td style="border: thin solid windowtext">Nasabah Jual</td>
            <td style="border: thin solid windowtext">Jenis Instrument / Transaksi<br style="mso-data-placement:same-cell;" />(USD / IDR)</td>
            <td style="border: thin solid windowtext">Suku Bunga</td>
            <td style="border: thin solid windowtext">Nominal<br style="mso-data-placement:same-cell;" />(miliar rupiah)</td>
        </tr>
        
        <tr>
            <td style="border: thin solid windowtext"></td>
            <td style="border: thin solid windowtext"></td>
            <td style="border: thin solid windowtext"></td>
            <td style="border: thin solid windowtext"></td>
            <td style="border: thin solid windowtext"></td>
            <td style="border: thin solid windowtext"></td>
        </tr>
        
        <tr>
            <td style="border: thin solid windowtext"></td>
            <td style="border: thin solid windowtext"></td>
            <td style="border: thin solid windowtext"></td>
            <td style="border: thin solid windowtext"></td>
            <td style="border: thin solid windowtext"></td>
            <td style="border: thin solid windowtext"></td>
        </tr>
        
        
    </table>
</xsl:template>

<xsl:template match="Row">
    <xsl:variable name="chars" select="'abcdefghijklmnopqrstuvwxyz'" />
    <xsl:param name = "treeDepth"/>
    <xsl:param name = "colorStep"/>
    <xsl:variable name="rwId" select="RowId"/>
    
    <xsl:if test="count(ancestor::Row) = 1">
        <xsl:if test="position() &lt; 21">
            <tr style="font-weight: bold">
                <td style="border: thin solid windowtext; text-align: center;">
                    <xsl:value-of select="position()"/>
                </td>
                <td style="border: thin solid windowtext"></td>
                <td colspan="4" style="border: thin solid windowtext">
                    <xsl:value-of select="Label"/>
                </td>
            </tr>
                
            <xsl:apply-templates select="Rows/Row">
                <xsl:with-param name="treeDepth" select="$treeDepth + 1" />
                <xsl:with-param name="colorStep" select="$colorStep" />
            </xsl:apply-templates>
        </xsl:if>
    </xsl:if>
    
    <xsl:if test="count(ancestor::Row) = 2">
        <tr>
        <td style="border: thin solid windowtext"></td>
        <td style="border: thin solid windowtext"><xsl:value-of select="substring($chars, position(), 1)" /></td>
            <xsl:apply-templates select="Cells/Cell">
                <xsl:with-param name="colorStep" select="$colorStep" />
            </xsl:apply-templates>
        </tr>
    </xsl:if>
    
    <xsl:if test="count(ancestor::Row) = 0">
        <xsl:apply-templates select="Rows/Row">
            <xsl:with-param name="treeDepth" select="$treeDepth + 1" />
            <xsl:with-param name="colorStep" select="$colorStep" />
        </xsl:apply-templates>
    </xsl:if>
    
</xsl:template>

<xsl:template match="Cell">
    <xsl:param name = "colorStep"/>
    <td style="border: thin solid windowtext">
        <xsl:choose>
                <xsl:when test="ValueType and DefaultData">
                        <acronym>
                                <xsl:attribute name="title">
                                        <xsl:value-of select="DefaultData"/>
                                </xsl:attribute>
                        <xsl:call-template name="CellData" />
                        </acronym>
                </xsl:when>
                <xsl:otherwise>
                        <xsl:call-template name="CellData" />
                </xsl:otherwise>
        </xsl:choose>
    </td>
</xsl:template>

<xsl:template name="CellData">
        <xsl:choose>             
            <xsl:when test="FormattedData">
                <xsl:value-of select="FormattedData"/>
            </xsl:when>
            <xsl:when test="RawData">
                <xsl:choose>
                    <xsl:when test ="contains(RawData, 'http:') or contains(RawData, 'https:')">
                        <xsl:value-of select="RawData " disable-output-escaping="yes"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="RawData"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:when test="DefaultData">
                <xsl:choose>
                        <xsl:when test="ValueType">
                                <xsl:text>#</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                                <xsl:value-of select="DefaultData"/>
                        </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                  <xsl:message terminate="yes"><xsl:text>No dataformat turned on</xsl:text></xsl:message>
            </xsl:otherwise>
            
        </xsl:choose>
</xsl:template>

<!-- derived from http://www.exslt.org/math/functions/max/index.html -->
<xsl:template name="max">
   <xsl:param name="nodes" select="/.." />
   <xsl:choose>
      <xsl:when test="not($nodes)">0</xsl:when>
      <xsl:otherwise>
         <xsl:for-each select="$nodes">
            <xsl:sort select="translate(.,'-','')" data-type="number" order="descending" />
            <xsl:if test="position( ) = 1">
               <xsl:value-of select="number(translate(.,'-',''))" />
            </xsl:if>
         </xsl:for-each>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

</xsl:stylesheet>

...

  XlsTemplateBO71
<?xml version='1.0'?>
<!DOCTYPE xsl:stylesheet [
    <!ENTITY nbsp "<xsl:text>&#160;</xsl:text>">
]>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:output method="html"/>

<xsl:variable name="useLabelColumn" select="//PRIMEReport/Type !='ASQL Table'"/>

<xsl:template match="ReportContents">
    <html>
    <head>
    </head>
    <body>
    <xsl:apply-templates select="Table"/>
    </body>
    </html>
</xsl:template>

<xsl:template match="Table">
    <table>
        <tr style="font-weight: bold; text-align: center; vertical-align: middle;">
            <td rowspan="4" style="border: thin solid windowtext; background-color:#dad2cf">No</td>
            <td rowspan="4" style="border: thin solid windowtext; background-color:#dad2cf">Kode Komponen</td>
            <td rowspan="4" style="border: thin solid windowtext; background-color:#96d6e2">Nama Produk</td>
            <td rowspan="4" style="border: thin solid windowtext; background-color:#96d6e2">Jumlah Nasabah</td>
            <td colspan="6" style="border: thin solid windowtext; background-color:#96d6e2">Komponen Produk</td>
            <td rowspan="4" style="border: thin solid windowtext; background-color:#96d6e2">Karakteristik Produk</td>
            <td rowspan="4" style="border: thin solid windowtext; background-color:#96d6e2">Valuta Dasar</td>
            <td rowspan="4" style="border: thin solid windowtext; background-color:#96d6e2">Strike Price</td>
            <td rowspan="4" style="border: thin solid windowtext; background-color:#96d6e2">Nominal/Notional</td>
        </tr>
        
        <tr style="font-weight: bold; text-align: center; vertical-align: middle;">
            <td style="border: thin solid windowtext; background-color:#96d6e2">Komponen Non-Derivatif</td>
            <td colspan="5" style="border: thin solid windowtext; background-color:#96d6e2">Komponen Derivatif</td>
        </tr>
        
        <tr style="font-weight: bold; text-align: center; vertical-align: middle;">
            <td rowspan="2" style="border: thin solid windowtext; background-color:#96d6e2">Komponen Instrument</td>
            <td colspan="2" style="border: thin solid windowtext; background-color:#96d6e2">Opsi</td>
            <td colspan="2" style="border: thin solid windowtext; background-color:#96d6e2">Forward</td>
            <td style="border: thin solid windowtext; background-color:#96d6e2">Swap</td>
        </tr>
        
        <tr style="font-weight: bold; text-align: center; vertical-align: middle;">
            <td style="border: thin solid windowtext; background-color:#96d6e2">Posisi</td>
            <td style="border: thin solid windowtext; background-color:#96d6e2">Variabel Dasar</td>
            <td style="border: thin solid windowtext; background-color:#96d6e2">Posisi</td>
            <td style="border: thin solid windowtext; background-color:#96d6e2">Variabel Dasar</td>
            <td style="border: thin solid windowtext; background-color:#96d6e2">Variabel Dasar</td>
        </tr>
        
        <xsl:apply-templates select="Rows/Row">
            <xsl:with-param name="treeDepth" select="$treeDepth + 1" />
            <xsl:with-param name="colorStep" select="$colorStep" />
        </xsl:apply-templates>
        
    </table>
</xsl:template>

<xsl:template match="Row">
    <xsl:param name = "treeDepth"/>
    <xsl:param name = "colorStep"/>
    <xsl:variable name="rwId" select="RowId"/>
    
    <xsl:if test="count(ancestor::Row) = 2">
        <tr>
            <xsl:apply-templates select="Cells/Cell">
                <xsl:with-param name="colorStep" select="$colorStep" />
            </xsl:apply-templates>
        </tr>
    </xsl:if>
    
    <xsl:apply-templates select="Rows/Row">
        <xsl:with-param name="treeDepth" select="$treeDepth + 1" />
        <xsl:with-param name="colorStep" select="$colorStep" />
    </xsl:apply-templates>
    
</xsl:template>

<xsl:template match="Cell">
    <xsl:param name = "colorStep"/>
    <td style="border: thin solid windowtext; mso-number-format:'\@'">
        <xsl:choose>
                <xsl:when test="ValueType and DefaultData">
                        <acronym>
                                <xsl:attribute name="title">
                                        <xsl:value-of select="DefaultData"/>
                                </xsl:attribute>
                        <xsl:call-template name="CellData" />
                        </acronym>
                </xsl:when>
                <xsl:otherwise>
                        <xsl:call-template name="CellData" />
                </xsl:otherwise>
        </xsl:choose>
    </td>
</xsl:template>

<xsl:template name="CellData">
        <xsl:choose>             
            <xsl:when test="FormattedData">
                <xsl:value-of select="FormattedData"/>
            </xsl:when>
            <xsl:when test="RawData">
                <xsl:choose>
                    <xsl:when test ="contains(RawData, 'http:') or contains(RawData, 'https:')">
                        <xsl:value-of select="RawData " disable-output-escaping="yes"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="RawData"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:when test="DefaultData">
                <xsl:choose>
                        <xsl:when test="ValueType">
                                <xsl:text>#</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                                <xsl:value-of select="DefaultData"/>
                        </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                  <xsl:message terminate="yes"><xsl:text>No dataformat turned on</xsl:text></xsl:message>
            </xsl:otherwise>
            
        </xsl:choose>
</xsl:template>

<!-- derived from http://www.exslt.org/math/functions/max/index.html -->
<xsl:template name="max">
   <xsl:param name="nodes" select="/.." />
   <xsl:choose>
      <xsl:when test="not($nodes)">0</xsl:when>
      <xsl:otherwise>
         <xsl:for-each select="$nodes">
            <xsl:sort select="translate(.,'-','')" data-type="number" order="descending" />
            <xsl:if test="position( ) = 1">
               <xsl:value-of select="number(translate(.,'-',''))" />
            </xsl:if>
         </xsl:for-each>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

</xsl:stylesheet>

...

}

