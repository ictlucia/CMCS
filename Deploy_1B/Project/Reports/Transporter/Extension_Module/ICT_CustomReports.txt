#
# Front Arena exported extension module.
# source          ""
# timestamp (utc) "2024-10-18 09:59:33.5"
# ***** DO NOT EDIT! *****
#
name        "ICT_CustomReports"
description "$Id$"

groups {
}

decls[FColumnAppearance] {
}

clx FObject [FColumnAppearance] {
  AmountClosing =
  Flashing=Disabled
  Stripes=Disabled
  TextColumn=AmountClosing
  TextIntervals=Txt1;Txt2
  Txt1=Blue:0.1;Blue:100000000000
  Txt2=Red:-0.1;Red:-100000000000
  ValueTruncation=Disabled


  AmountClosingYesterday =
  Flashing=Disabled
  Stripes=Disabled
  TextColumn=AmountClosingYesterday
  TextIntervals=Txt1;Txt2
  Txt1=Blue:0.1;Blue:10000000000000
  Txt2=Red:-0.1;Red:-10000000000000
  ValueTruncation=Disabled


  background_NearLegNominal =
  Bkg1=Green:0.1;Green:1000000000
  Bkg2=Red:-0.1;Red:-100000000000
  BkgColumn=NearLeg Nominal
  BkgIntervals=Bkg1;Bkg2
  Flashing=Disabled
  Stripes=Disabled
  ValueTruncation=Disabled


  dynamic_background =
  Bkg1=Green:0.1;Green:1000000000
  Bkg2=Red:-0.1;Red:-100000000000
  BkgColumn=FTotal
  BkgIntervals=Bkg1;Bkg2
  Flashing=Disabled
  Stripes=Disabled
  ValueTruncation=Disabled


  ExpiryStatusColor_MO13 =
  Bkg1=Red:3;Red:3
  Bkg2=Green:0;Green:0
  BkgColumn=MO13_ExpiryStatus
  BkgExtensionAttribute=MO13_ExpiryStatus
  BkgIntervals=Bkg1;Bkg2;
  Flashing=Disabled
  Stripes=Disabled
  TextColumn=MO13_ExpiryStatus
  TextIntervals=Txt1;Txt2;
  Txt1=Red:3;Red:3
  Txt2=Green:0;Green:0
  ValueTruncation=Disabled


  LimitStatusColor_MO05 =
  Bkg1=Yellow:1;Yellow:1;
  Bkg2=Orange:2;Orange:2;
  Bkg3=Red:3;Red:3
  Bkg4=Green:0;Green:0
  BkgColumn=MO05_LimitStatus
  BkgExtensionAttribute=MO05_LimitInd
  BkgIntervals=Bkg1;Bkg2;Bkg3;Bkg4;
  Flashing=Disabled
  Stripes=Disabled
  TextColumn=MO05_LimitStatus
  TextIntervals=Txt1;Txt2;Txt3;Txt4;
  Txt1=Yellow:1;Yellow:1
  Txt2=Orange:2;Orange:2
  Txt3=Red:3;Red:3
  Txt4=Green:0;Green:0
  ValueTruncation=Disabled


  LimitStatusColor_MO07 =
  Bkg1=Yellow:1;Yellow:1;
  Bkg2=Orange:2;Orange:2;
  Bkg3=Red:3;Red:3
  Bkg4=Green:0;Green:0
  BkgColumn=MO07_LimitStatus
  BkgExtensionAttribute=MO07_LimitInd
  BkgIntervals=Bkg1;Bkg2;Bkg3;Bkg4;
  Flashing=Disabled
  Stripes=Disabled
  TextColumn=MO07_LimitStatus
  TextIntervals=Txt1;Txt2;Txt3;Txt4;
  Txt1=Yellow:1;Yellow:1
  Txt2=Orange:2;Orange:2
  Txt3=Red:3;Red:3
  Txt4=Green:0;Green:0
  ValueTruncation=Disabled


  LimitStatusColor_MO13 =
  Bkg1=Yellow:1;Yellow:1;
  Bkg2=Orange:2;Orange:2;
  Bkg3=Red:3;Red:3
  Bkg4=Green:0;Green:0
  BkgColumn=MO13_LimitStatus
  BkgExtensionAttribute=MO13_LimitInd
  BkgIntervals=Bkg1;Bkg2;Bkg3;Bkg4;
  Flashing=Disabled
  Stripes=Disabled
  TextColumn=MO13_LimitStatus
  TextIntervals=Txt1;Txt2;Txt3;Txt4;
  Txt1=Yellow:1;Yellow:1
  Txt2=Orange:2;Orange:2
  Txt3=Red:3;Red:3
  Txt4=Green:0;Green:0
  ValueTruncation=Disabled


  Movement =
  Flashing=Disabled
  Stripes=Disabled
  TextColumn=Movement
  TextIntervals=Txt1;Txt2
  Txt1=Blue:0.1;Blue:10000000000000000
  Txt2=Red:-0.1;Red:-10000000000000000
  ValueTruncation=Disabled


  MTD =
  Flashing=Disabled
  Stripes=Disabled
  TextColumn=MTD
  TextIntervals=Txt1;Txt2
  Txt1=Blue:0.1;Blue:100000000000
  Txt2=Red:-0.1;Red:-100000000000
  ValueTruncation=Disabled


  StatusBondCutLoss =
  Bkg1=Red:1;Red:1;
  Bkg2=Green:2;Green:2;
  Bkg3=Yellow:3;Yellow:3
  Bkg4=White:0;White:0
  BkgColumn=UtilizationStatus
  BkgExtensionAttribute=UtilizationStatus
  BkgIntervals=Bkg1;Bkg2;Bkg3;Bkg4;
  Flashing=Disabled
  Stripes=Disabled
  ValueTruncation=Disabled


  StatusBondCutLossClr =
  Bkg1=Green:1;Green:1
  Bkg2=Yellow:2;Yellow:2
  Bkg3=Red:3;Red:3
  BkgExtensionAttribute=StatusBondCutLossClr
  BkgIntervals=Bkg1;Bkg2;Bkg3
  Flashing=Disabled
  Stripes=Disabled
  ValueTruncation=Disabled


  StatusBondHolding =
  Bkg1=Green:-1000000;Green:85
  Bkg2=Yellow:85.000001;Yellow:100
  Bkg3=Red:100.000001;Red:1000000
  BkgExtensionAttribute=PercentageHolding
  BkgIntervals=Bkg1;Bkg2;Bkg3
  Flashing=Disabled
  Stripes=Disabled
  ValueTruncation=Disabled


  StatusDeltaFXClr =
  Bkg1=Red:1;Red:1;
  Bkg2=Green:2;Green:2;
  BkgColumn=PercentageStatusFXClr
  BkgExtensionAttribute=PercentageStatusFXClr
  BkgIntervals=Bkg1;Bkg2;
  Flashing=Disabled
  Stripes=Disabled
  ValueTruncation=Disabled


  StatusDeltaIRClr =
  Bkg1=Red:1;Red:1;
  Bkg2=Green:2;Green:2;
  BkgColumn=PercentageStatusIRClr
  BkgExtensionAttribute=PercentageStatusIRClr
  BkgIntervals=Bkg1;Bkg2;
  Flashing=Disabled
  Stripes=Disabled
  ValueTruncation=Disabled


  StatusExpiryBkg =
  Bkg1=Green:1;Green:100000000000
  Bkg2=Red:-100000000000;Red:0
  BkgColumn=StatusExpiry
  BkgIntervals=Bkg1;Bkg2
  Flashing=Disabled
  Stripes=Disabled
  ValueTruncation=Disabled


  Test =
  Bkg1=Pink:0.1;Pink:1000000000
  Bkg2=Red:-0.1;Red:-100000000000
  BkgColumn=Test
  BkgIntervals=Bkg1;Bkg2
  Flashing=Disabled
  Stripes=Disabled
  TextColumn=Test
  TextIntervals=Txt1;Txt2
  Txt1=Green:0.1;Green:1000000000
  Txt2=Red:-0.1;Red:-100000000000
  ValueTruncation=Disabled


  Total_background =
  Flashing=Disabled
  Stripes=Disabled
  TextColumn=NearAmount
  TextIntervals=Txt1;Txt2
  Txt1=Blue:0.1;Blue:1000000000
  Txt2=Red:-0.1;Red:-100000000000
  ValueTruncation=Disabled


  Total_background_FaceAmount =
  Flashing=Disabled
  Stripes=Disabled
  TextColumn=FaceAmount
  TextIntervals=Txt1;Txt2
  Txt1=Blue:0.1;Blue:1000000000
  Txt2=Red:-0.1;Red:-100000000000
  ValueTruncation=Disabled


  Total_background_FarAmount =
  Flashing=Disabled
  Stripes=Disabled
  TextColumn=FarAmount
  TextIntervals=Txt1;Txt2
  Txt1=Blue:0.1;Blue:1000000000
  Txt2=Red:-0.1;Red:-100000000000
  ValueTruncation=Disabled


  Total_background_FarAmount1 =
  Flashing=Disabled
  Stripes=Disabled
  TextColumn=FarAmount1
  TextIntervals=Txt1;Txt2
  Txt1=Blue:0.1;Blue:1000000000
  Txt2=Red:-0.1;Red:-100000000000
  ValueTruncation=Disabled


  Total_background_FarAmount2 =
  Flashing=Disabled
  Stripes=Disabled
  TextColumn=FarAmount2
  TextIntervals=Txt1;Txt2
  Txt1=Blue:0.1;Blue:1000000000
  Txt2=Red:-0.1;Red:-100000000000
  ValueTruncation=Disabled


  Total_background_NearAmount =
  Flashing=Disabled
  Stripes=Disabled
  TextColumn=NearAmount
  TextIntervals=Txt1;Txt2
  Txt1=Blue:0.1;Blue:1000000000
  Txt2=Red:-0.1;Red:-100000000000
  ValueTruncation=Disabled


  Total_background_NearAmount1 =
  Flashing=Disabled
  Stripes=Disabled
  TextColumn=NearAmount1
  TextIntervals=Txt1;Txt2
  Txt1=Blue:0.1;Blue:1000000000
  Txt2=Red:-0.1;Red:-100000000000
  ValueTruncation=Disabled


  Total_background_NearAmount2 =
  Flashing=Disabled
  Stripes=Disabled
  TextColumn=NearAmount2
  TextIntervals=Txt1;Txt2
  Txt1=Blue:0.1;Blue:1000000000
  Txt2=Red:-0.1;Red:-100000000000
  ValueTruncation=Disabled


  utilizationAppearancePercentCustom =
  Bkg1=LightRed:0.8;Red:1
  Bkg2=Red:1;infinity
  BkgExtensionAttribute=ruleValueUtilizationPercentCustom
  BkgIntervals=Bkg1;Bkg2


  YTD =
  Flashing=Disabled
  Stripes=Disabled
  TextColumn=YTD
  TextIntervals=Txt1;Txt2
  Txt1=Blue:0.1;Blue:100000000000
  Txt2=Red:-0.1;Red:-100000000000
  ValueTruncation=Disabled


}

decls[FColumnDefinition] {
  "10DExpiry" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "1DayChange_Convexity" ( "sheet columns.portfoliosheet" ) "";
  "1DayChange_CreditVaR" ( "sheet columns.portfoliosheet" ) "";
  "1DayChange_CS01" ( "sheet columns.portfoliosheet" ) "";
  "1DayChange_Delta" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "1DayChange_DeltaIR" ( "sheet columns.portfoliosheet" ) "";
  "1DayChange_FX" ( "sheet columns.portfoliosheet" ) "";
  "1DayChange_FXVaR" ( "sheet columns.portfoliosheet" ) "";
  "1DayChange_Gamma" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "1DayChange_GammaCash" ( "sheet columns.portfoliosheet" ) "";
  "1DayChange_HVaR" ( "sheet columns.portfoliosheet" ) "";
  "1DayChange_IncrementalVaR" ( "sheet columns.portfoliosheet" ) "";
  "1DayChange_IR" ( "sheet columns.portfoliosheet" ) "";
  "1DayChange_IRVaR" ( "sheet columns.portfoliosheet" ) "";
  "1DayChange_LeftCurve" ( "sheet columns.portfoliosheet" ) "";
  "1DayChange_MarginalVaR" ( "sheet columns.portfoliosheet" ) "";
  "1DayChange_MO12" ( "sheet columns.portfoliosheet" ) "";
  "1DayChange_MO13" ( "sheet columns.portfoliosheet" ) "";
  "1DayChange_PV01" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "1DayChange_RightCurve" ( "sheet columns.portfoliosheet" ) "";
  "1DayChange_ShortfallVaR" ( "sheet columns.portfoliosheet" ) "";
  "1DayChange_Trading" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "1DayChange_Vega" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "1DayChange_VegaIR" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "1DExpiry" ( "sheet columns.portfoliosheet" ) "";
  "2DExpiry" ( "sheet columns.portfoliosheet" ) "";
  "3DExpiry" ( "sheet columns.portfoliosheet" ) "";
  "4DExpiry" ( "sheet columns.portfoliosheet" ) "";
  "5DExpiry" ( "sheet columns.portfoliosheet" ) "";
  "6DExpiry" ( "sheet columns.portfoliosheet" ) "";
  "7DExpiry" ( "sheet columns.portfoliosheet" ) "";
  "8DExpiry" ( "sheet columns.portfoliosheet" ) "";
  "9DExpiry" ( "sheet columns.portfoliosheet" ) "";
  "AbsJournalAmount" ( "sheet columns.journalsheet" ) "";
  "AbsJournalAmountIdr" ( "sheet columns.journalsheet" ) "";
  "absNominal" ( "sheet columns.tradesheet" ) "";
  "ACCINT" ( "sheet columns.tradesheet" ) "";
  "AccountID" ( "sheet columns.tradesheet" ) "";
  "ACCROUTSTAMT" ( "sheet columns.tradesheet" ) "";
  "Accrued_Outstanding" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "AccruedInterestValue" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "ACCTTYPE" ( "sheet columns.tradesheet" ) "";
  "AccumulativeOrPerTransaction" ( "sheet columns.tradesheet" ) "";
  "AcquisitionIDR" ( "sheet columns.tradesheet" ) "";
  "AcquisitionPricePercent" ( "sheet columns.tradesheet" ) "";
  "AcquisitionRecord" ( "sheet columns.tradesheet" ) "";
  "AFS" ( "sheet columns.dealsheet" "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "AIP" ( "sheet columns.journalsheet" ) "";
  "AL" ( "sheet columns.tradesheet" ) "";
  "AllInRate2" ( "sheet columns.tradesheet" ) "";
  "AllowanceForLosses" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "Amendment" ( "sheet columns.tradesheet" ) "";
  "AmendmentDate" ( "sheet columns.tradesheet" ) "";
  "AmortisasiPrice" ( "sheet columns.tradesheet" ) "";
  "Amortized" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "Amortized010203" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "Amortized2004" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "AmortizedDiscPrem" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "Amount of Underlying" ( "sheet columns.tradesheet" ) "";
  "Amount_AllMM" ( "sheet columns.tradesheet" ) "";
  "AmountAccumulativePerMonth" ( "sheet columns.tradesheet" ) "";
  "AmountBuyAudit" ( "sheet columns.tradesheet" ) "";
  "AmountClosing" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "AmountClosingYesterday" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "AmountInIDRBonds" ( "sheet columns.tradesheet" ) "";
  "AmountJournal" ( "sheet columns.journalsheet" ) "";
  "AmountSellAudit" ( "sheet columns.tradesheet" ) "";
  "AmountToFund" ( "sheet columns.tradesheet" ) "";
  "ApprovalSystem" ( "sheet columns.settlementsheet" "sheet columns.tradesheet" ) "";
  "ARGNO" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "ASSETID" ( "sheet columns.journalsheet" ) "";
  "AveragePrice" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "AverageYield" ( "sheet columns.portfoliosheet" ) "";
  "Balance" ( "sheet columns.journalsheet" ) "";
  "BalanceCustom" ( "sheet columns.settlementsheet" ) "";
  "BaseCurrCR" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "BaseCurrDR" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "baseRateSpotPrice" ( "sheet columns.tradesheet" ) "";
  "BebanBunga" ( "sheet columns.tradesheet" ) "";
  "BeginningBalance" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "BEIND" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "Beneficiary" ( "sheet columns.journalsheet" ) "";
  "BIDHighestHierarchy" ( "sheet columns.portfoliosheet" ) "";
  "BidPriceBGN" ( "sheet columns.tradesheet" ) "";
  "BidPriceBVAL" ( "sheet columns.tradesheet" ) "";
  "BidPriceEXCH" ( "sheet columns.tradesheet" ) "";
  "BIDSourceBGN" ( "sheet columns.portfoliosheet" ) "";
  "BIDSourceBIS4" ( "sheet columns.portfoliosheet" ) "";
  "BIDSourceEXCH" ( "sheet columns.portfoliosheet" ) "";
  "BIDSourceIBPA" ( "sheet columns.portfoliosheet" ) "";
  "BIDSourceMarkToModel" ( "sheet columns.portfoliosheet" ) "";
  "BIDSourceNAV" ( "sheet columns.portfoliosheet" ) "";
  "BIDSourceVAL" ( "sheet columns.portfoliosheet" ) "";
  "BIS4" ( "sheet columns.tradesheet" ) "";
  "Blank1" ( "sheet columns.tradesheet" ) "";
  "Blank2" ( "sheet columns.tradesheet" ) "";
  "BMRISell" ( "sheet columns.journalsheet" ) "";
  "BookFilter" ( "sheet columns.tradesheet" ) "";
  "BookValueDeprec" ( "sheet columns.tradesheet" ) "";
  "BookValueIDR" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "BorrowerCode" ( "sheet columns.tradesheet" ) "";
  "BorrowerName" ( "sheet columns.tradesheet" ) "";
  "BranchCode" ( "sheet columns.journalsheet" "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "BreachTenor" ( "sheet columns.tradesheet" ) "";
  "BrokerCorrespondentBank" ( "sheet columns.confirmationsheet" ) "";
  "BrokerFeeIDR" ( "sheet columns.tradesheet" ) "";
  "BrokerFeeUSD" ( "sheet columns.tradesheet" ) "";
  "BRPRCINDTE" ( "sheet columns.confirmationsheet" "sheet columns.tradesheet" ) "";
  "BUC" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "BuyAmountCustom" ( "sheet columns.tradesheet" ) "";
  "BuyAmountCustom2" ( "sheet columns.tradesheet" ) "";
  "BuyerOrSeller" ( "sheet columns.tradesheet" ) "";
  "BuySellJournal" ( "sheet columns.journalsheet" ) "";
  "CancelOrAmendDate" ( "sheet columns.tradesheet" ) "";
  "CapitalGain" ( "sheet columns.tradesheet" ) "";
  "CapitalGainTax" ( "sheet columns.tradesheet" ) "";
  "CasfhlowFarAmount" ( "sheet columns" ) "";
  "Cashflow10m" ( "sheet columns.moneyflowsheet" ) "";
  "Cashflow11m" ( "sheet columns.moneyflowsheet" ) "";
  "Cashflow12m" ( "sheet columns.moneyflowsheet" ) "";
  "Cashflow1d" ( "sheet columns.moneyflowsheet" ) "";
  "Cashflow1m" ( "sheet columns.moneyflowsheet" ) "";
  "Cashflow2d" ( "sheet columns.moneyflowsheet" ) "";
  "Cashflow2m" ( "sheet columns.moneyflowsheet" ) "";
  "Cashflow2y" ( "sheet columns.moneyflowsheet" ) "";
  "Cashflow3d" ( "sheet columns.moneyflowsheet" ) "";
  "Cashflow3m" ( "sheet columns.moneyflowsheet" ) "";
  "Cashflow3y" ( "sheet columns.moneyflowsheet" ) "";
  "Cashflow4d" ( "sheet columns.moneyflowsheet" ) "";
  "Cashflow4m" ( "sheet columns.moneyflowsheet" ) "";
  "Cashflow4y" ( "sheet columns.moneyflowsheet" ) "";
  "Cashflow5d" ( "sheet columns.moneyflowsheet" ) "";
  "Cashflow5m" ( "sheet columns.moneyflowsheet" ) "";
  "Cashflow5y" ( "sheet columns.moneyflowsheet" ) "";
  "Cashflow6d" ( "sheet columns.moneyflowsheet" ) "";
  "Cashflow6m" ( "sheet columns.moneyflowsheet" ) "";
  "Cashflow6y" ( "sheet columns.moneyflowsheet" ) "";
  "Cashflow7d" ( "sheet columns.moneyflowsheet" ) "";
  "Cashflow7m" ( "sheet columns.moneyflowsheet" ) "";
  "Cashflow7y" ( "sheet columns.moneyflowsheet" ) "";
  "Cashflow8m" ( "sheet columns.moneyflowsheet" ) "";
  "Cashflow9m" ( "sheet columns.moneyflowsheet" ) "";
  "CashflowFA" ( "sheet columns.tradesheet" ) "";
  "CashflowFarAmountMoneyFlow" ( "sheet columns.moneyflowsheet" ) "";
  "CashflowToday" ( "sheet columns.moneyflowsheet" ) "";
  "CashY" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "CAT" ( "sheet columns.tradesheet" ) "";
  "CCS" ( "sheet columns.tradesheet" ) "";
  "CCYRate" ( "sheet columns.tradesheet" ) "";
  "CCYSACCT" ( "sheet columns.tradesheet" ) "";
  "CEM_Rule_Limit" ( "sheet columns.portfoliosheet" ) "";
  "CFCITZ" ( "sheet columns.tradesheet" ) "";
  "CFCOUN" ( "sheet columns.tradesheet" ) "";
  "CFRESD" ( "sheet columns.tradesheet" ) "";
  "ChargesDelay" ( "sheet columns.tradesheet" ) "";
  "Checker" ( "sheet columns.tradesheet" ) "";
  "ClassificationofSecurities" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "closedLots" ( "sheet columns.tradesheet" ) "";
  "ClosingBalance" ( "sheet columns.journalsheet" "sheet columns.settlementsheet" ) "";
  "Code" ( "sheet columns.tradesheet" ) "";
  "CODE" ( "sheet columns.tradesheet" ) "";
  "CodeDesc" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "Collateral" ( "sheet columns.tradesheet" ) "";
  "CollateralAmount_Custom" ( "sheet columns.tradesheet" ) "";
  "CollateralCurrency" ( "sheet columns.tradesheet" ) "";
  "CollateralDueDate" ( "sheet columns.tradesheet" ) "";
  "CollateralIssuer" ( "sheet columns.tradesheet" ) "";
  "CollateralStatus" ( "sheet columns.tradesheet" ) "";
  "CollateralType" ( "sheet columns.tradesheet" ) "";
  "CollateralYield" ( "sheet columns.tradesheet" ) "";
  "COMIDB" ( "sheet columns.tradesheet" ) "";
  "COMIDC" ( "sheet columns.tradesheet" ) "";
  "Commission" ( "sheet columns.tradesheet" ) "";
  "COMMPROCAMT" ( "sheet columns.tradesheet" ) "";
  "Conclusion" ( "sheet columns.tradesheet" ) "";
  "Conclusion2" ( "sheet columns.tradesheet" ) "";
  "ContractValNetAgree" ( "sheet columns.tradesheet" ) "";
  "CorpSpreadAmount" ( "sheet columns.tradesheet" ) "";
  "CostAmtRepo" ( "sheet columns.tradesheet" ) "";
  "CostBaseAmt" ( "sheet columns.tradesheet" ) "";
  "CounterAmount" ( "sheet columns.tradesheet" ) "";
  "CounterpartyCountryIND" ( "sheet columns.tradesheet" ) "";
  "CounterpartyCustom" ( "sheet columns.journalsheet" "sheet columns.settlementsheet" ) "";
  "CounterpartyType" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "CountryLimit" ( "sheet columns.tradesheet" ) "";
  "Coupon_SB_Dimiliki" ( "sheet columns.tradesheet" ) "";
  "CPMainCcy" ( "sheet columns.tradesheet" ) "";
  "CPMoneyCcy" ( "sheet columns.tradesheet" ) "";
  "CreateDateJournal" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "CreateTimeJournal" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "CreditAmount" ( "sheet columns.journalsheet" "sheet columns.settlementsheet" ) "";
  "CrEquivalent %Utilization" ( "sheet columns.rulesheet" ) "";
  "CrEquivalent 1DayChange" ( "sheet columns.rulesheet" ) "";
  "CrEquivalentLimit" ( "sheet columns.rulesheet" ) "";
  "CrEquivalentUtilization" ( "sheet columns.rulesheet" ) "";
  "CrossRateBM" ( "sheet columns.tradesheet" ) "";
  "crttime_adj" ( "sheet columns.tradesheet" ) "";
  "CTRSACCT" ( "sheet columns.tradesheet" ) "";
  "CurrAgainstSGD" ( "sheet columns.tradesheet" ) "";
  "CurrAgainstUSD" ( "sheet columns.tradesheet" ) "";
  "CurrBuyAudit" ( "sheet columns.journalsheet" "sheet columns.settlementsheet" "sheet columns.tradesheet" ) "";
  "Currency.adasdasdsaTest" ( "insert item field" ) "";
  "CurrencyCR" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "CurrencyDR" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "CurrencyMTMSB" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "CurrencyUpdateDate" ( "sheet columns.tradesheet" ) "";
  "CurrSellAudit" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "CustomerCategory" ( "sheet columns.tradesheet" ) "";
  "CustomerName" ( "sheet columns.rulesheet" ) "";
  "DailyInterest" ( "sheet columns.tradesheet" ) "";
  "DataType" ( "sheet columns.tradesheet" ) "";
  "DateNow" ( "sheet columns.tradesheet" ) "";
  "DateRange" ( "sheet columns.tradesheet" ) "";
  "DatesPosition" ( "sheet columns.journalsheet" "sheet columns.settlementsheet" ) "";
  "DaysDelay" ( "sheet columns.tradesheet" ) "";
  "DaysToMaturity" ( "sheet columns.tradesheet" ) "";
  "DayToExpired" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "DCIND" ( "sheet columns.tradesheet" ) "";
  "DebitAmount" ( "sheet columns.journalsheet" "sheet columns.settlementsheet" ) "";
  "Delta_ExchangeRate" ( "sheet columns.tradesheet" ) "";
  "DeltaCheck" ( "sheet columns.tradesheet" ) "";
  "DeltaThresholdValue" ( "sheet columns.portfoliosheet" ) "";
  "DeltaUtilizationPercentage" ( "sheet columns.portfoliosheet" ) "";
  "DENOM" ( "sheet columns.tradesheet" ) "";
  "Dept" ( "sheet columns.tradesheet" ) "";
  "DerivativesPayables" ( "sheet columns.tradesheet" ) "";
  "DerivativesReceivables" ( "sheet columns.tradesheet" ) "";
  "Desc" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "Descr" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "Descr_PBC" ( "sheet columns.tradesheet" ) "";
  "DescriptionUnderlying" ( "sheet columns.tradesheet" ) "";
  "DescUnd" ( "sheet columns.tradesheet" ) "";
  "DeskripsiSandi" ( "sheet columns.tradesheet" ) "";
  "DiaryText" ( "sheet columns.settlementsheet" ) "";
  "Diff1" ( "sheet columns.tradesheet" ) "";
  "Diff2" ( "sheet columns.tradesheet" ) "";
  "Difference" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "Difference_EndCash" ( "sheet columns.tradesheet" ) "";
  "differencePajak" ( "sheet columns.journalsheet" ) "";
  "DiffRate" ( "sheet columns.tradesheet" ) "";
  "DiffRate100" ( "sheet columns.tradesheet" ) "";
  "DiscountAmount" ( "sheet columns.tradesheet" ) "";
  "DoC" ( "sheet columns.journalsheet" ) "";
  "DRCRIND" ( "sheet columns.journalsheet" "sheet columns.settlementsheet" "sheet columns.tradesheet" ) "";
  "eFx" ( "sheet columns.tradesheet" ) "";
  "EMAS" ( "sheet columns.tradesheet" ) "";
  "EndAccrualFA" ( "sheet columns.tradesheet" ) "";
  "EndCashRepo" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "EndCashRepoString" ( "sheet columns.tradesheet" ) "";
  "enddate_adj" ( "sheet columns.tradesheet" ) "";
  "EndDateCF" ( "sheet columns.tradesheet" ) "";
  "EndDateRepo" ( "sheet columns.tradesheet" ) "";
  "EndInterest" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "EndInterestRepo" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "EndValue" ( "sheet columns.tradesheet" ) "";
  "EndValueFA" ( "sheet columns.tradesheet" ) "";
  "EquivalentAmountIDR" ( "sheet columns.journalsheet" "sheet columns.portfoliosheet" "sheet columns.settlementsheet" "sheet columns.tradesheet" ) "";
  "EquivalentAmountIDR_Yesterday" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "EquivalentAmountIDRnotAbs" ( "sheet columns.tradesheet" ) "";
  "EquivalentAmountIDRTradeTime" ( "sheet columns.tradesheet" ) "";
  "EquivalentAmountIDRValueDay" ( "sheet columns.tradesheet" ) "";
  "EquivalentAmountUSD" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "EquivalentAmountUSDTradeTime" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "EquivalentMarketIDR" ( "sheet columns.tradesheet" ) "";
  "ExchangeRateNTCS" ( "sheet columns.tradesheet" ) "";
  "ExcRate" ( "sheet columns.tradesheet" ) "";
  "ExcRateTradeTime" ( "sheet columns.tradesheet" ) "";
  "ExcRateValueDay" ( "sheet columns.tradesheet" ) "";
  "ExtractDate" ( "sheet columns.journalsheet" ) "";
  "ExtractFlag" ( "sheet columns.journalsheet" ) "";
  "FaceAmount" ( "sheet columns.tradesheet" ) "";
  "Facility" ( "sheet columns.tradesheet" ) "";
  "FacilityCollateral" ( "sheet columns.tradesheet" ) "";
  "Far/NearFlag" ( "sheet columns.tradesheet" ) "";
  "FarAmount" ( "sheet columns.moneyflowsheet" "sheet columns.tradesheet" ) "";
  "FarAmount1" ( "sheet columns.tradesheet" ) "";
  "FarAmount2" ( "sheet columns.tradesheet" ) "";
  "FarNear" ( "sheet columns.tradesheet" ) "";
  "FBIThisYear" ( "sheet columns.tradesheet" ) "";
  "FBIYesteryear" ( "sheet columns.tradesheet" ) "";
  "FDQ" ( "sheet columns.tradesheet" ) "";
  "FEECustody" ( "sheet columns.tradesheet" ) "";
  "FeeIDR" ( "sheet columns.tradesheet" ) "";
  "FITCHDataBloomberg" ( "sheet columns.dealsheet" ) "";
  "FITCHDataNTCS" ( "sheet columns.dealsheet" "sheet columns.tradesheet" ) "";
  "FITCHHasilMatch" ( "sheet columns.dealsheet" ) "";
  "FITCHINDODataBloomberg" ( "sheet columns.dealsheet" ) "";
  "FITCHINDODataNTCS" ( "sheet columns.dealsheet" "sheet columns.tradesheet" ) "";
  "FITCHINDOHasilMatch" ( "sheet columns.dealsheet" ) "";
  "FixedRatePercentage" ( "sheet columns.tradesheet" ) "";
  "FixingDate" ( "sheet columns.tradesheet" ) "";
  "FLAG" ( "sheet columns.journalsheet" ) "";
  "FloatPriceReference" ( "sheet columns.tradesheet" ) "";
  "ForwardRate" ( "sheet columns.tradesheet" ) "";
  "FreeText" ( "sheet columns.tradesheet" ) "";
  "FrekuensiPenjualan_Yesterday" ( "sheet columns.tradesheet" ) "";
  "Frequency" ( "sheet columns.settlementsheet" "sheet columns.tradesheet" ) "";
  "FTotal" ( "sheet columns.tradesheet" ) "";
  "FullYearAchievement" ( "sheet columns.portfoliosheet" ) "";
  "FVLevel" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "FWDRate" ( "sheet columns.tradesheet" ) "";
  "FXFW" ( "sheet columns.tradesheet" ) "";
  "GainOrLoss" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "GLNO" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "GMRAIdentification" ( "sheet columns.tradesheet" ) "";
  "GrandTotal" ( "sheet columns.tradesheet" ) "";
  "Group_ID" ( "sheet columns.portfoliosheet" ) "";
  "Haircut" ( "sheet columns.rulesheet" "sheet columns.tradesheet" ) "";
  "hargaSuratBerharga" ( "sheet columns.tradesheet" ) "";
  "HedgingFairValue" ( "sheet columns.tradesheet" ) "";
  "HedgingNotAmt" ( "sheet columns.tradesheet" ) "";
  "Holding Period" ( "sheet columns.tradesheet" ) "";
  "Holding Period ESPT" ( "sheet columns.tradesheet" ) "";
  "Holding Period Trade" ( "sheet columns.tradesheet" ) "";
  "HoldingInterestAmount" ( "sheet columns.tradesheet" ) "";
  "HTM" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "IBPA" ( "sheet columns.tradesheet" ) "";
  "IDays" ( "sheet columns.tradesheet" ) "";
  "IDNumber" ( "sheet columns.journalsheet" ) "";
  "idPelapor" ( "sheet columns.tradesheet" ) "";
  "IdPembeli" ( "sheet columns.tradesheet" ) "";
  "IdPenjual" ( "sheet columns.tradesheet" ) "";
  "IdPihakLawan" ( "sheet columns.tradesheet" ) "";
  "IDR" ( "sheet columns.tradesheet" ) "";
  "IDTypeCode" ( "sheet columns.journalsheet" ) "";
  "Indicator1" ( "sheet columns.tradesheet" ) "";
  "Indicator1.2" ( "sheet columns.tradesheet" ) "";
  "InitialCollateralPrice" ( "sheet columns.tradesheet" ) "";
  "InputDate" ( "sheet columns.tradesheet" ) "";
  "InputTime" ( "sheet columns.tradesheet" ) "";
  "Ins_Bond" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "Ins_Commodity" ( "sheet columns.tradesheet" ) "";
  "Ins_Curr" ( "sheet columns.tradesheet" ) "";
  "Ins_CurrSwap" ( "sheet columns" ) "";
  "Ins_Deposit" ( "sheet columns.tradesheet" ) "";
  "Ins_MM_IP" ( "sheet columns.tradesheet" ) "";
  "Ins_MM_IT" ( "sheet columns.tradesheet" ) "";
  "Ins_Option" ( "sheet columns.tradesheet" ) "";
  "Ins_Repo" ( "sheet columns.tradesheet" ) "";
  "Ins_Swap" ( "sheet columns.tradesheet" ) "";
  "InsBondPrice" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "InsBondPriceCollateral" ( "sheet columns.tradesheet" ) "";
  "InsExpiry_adj" ( "sheet columns.tradesheet" ) "";
  "InsExpiry_adj2" ( "sheet columns.tradesheet" ) "";
  "IntCalcRule" ( "sheet columns.tradesheet" ) "";
  "Interest_prime" ( "sheet columns.tradesheet" ) "";
  "InterestAccrued" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "InterestAmount" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "InterestIncome" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "InterestIncomeTax" ( "sheet columns.tradesheet" ) "";
  "InterestPayment" ( "sheet columns.tradesheet" ) "";
  "InterestPaymentMoneyFlow" ( "sheet columns.moneyflowsheet" ) "";
  "InterestProceed" ( "sheet columns.moneyflowsheet" "sheet columns.tradesheet" ) "";
  "InterestRate_PorS" ( "sheet columns.tradesheet" ) "";
  "InterestRateAtTradeTime" ( "sheet columns.tradesheet" ) "";
  "InterestReceived" ( "sheet columns.tradesheet" ) "";
  "InterestReceivedMoneyFlow" ( "sheet columns.moneyflowsheet" ) "";
  "Internalizer" ( "sheet columns.tradesheet" ) "";
  "InterofficeLongTerm" ( "sheet columns.tradesheet" ) "";
  "InterofficeShortTerm" ( "sheet columns.tradesheet" ) "";
  "INVSEQ" ( "sheet columns.tradesheet" ) "";
  "Invtype" ( "sheet columns.tradesheet" ) "";
  "IRS" ( "sheet columns.tradesheet" ) "";
  "Issuer_Rule_Limit" ( "sheet columns.portfoliosheet" ) "";
  "IssuerLimit" ( "sheet columns.rulesheet" ) "";
  "IssuerPercentUtilization" ( "sheet columns.rulesheet" ) "";
  "IssuerUtilization" ( "sheet columns.rulesheet" ) "";
  "jenisInstrumen" ( "sheet columns.tradesheet" ) "";
  "JenisTransaksi" ( "sheet columns.tradesheet" ) "";
  "jenisTransaksiAntarBank" ( "sheet columns.tradesheet" ) "";
  "JnsDokumenUnderlying" ( "sheet columns.tradesheet" ) "";
  "JournalAmountAbs" ( "sheet columns.journalsheet" ) "";
  "JournalDifference" ( "sheet columns.journalsheet" ) "";
  "Keterangan" ( "sheet columns.journalsheet" "sheet columns.settlementsheet" ) "";
  "KeteranganInsDokumenUnderlying" ( "sheet columns.tradesheet" ) "";
  "KodeFormFI" ( "sheet columns.tradesheet" ) "";
  "KodeFormMDS" ( "sheet columns.tradesheet" ) "";
  "KodeFormPasal26" ( "sheet columns.tradesheet" ) "";
  "KodeOption1" ( "sheet columns.tradesheet" ) "";
  "KodeOption2" ( "sheet columns.tradesheet" ) "";
  "KodeOption3" ( "sheet columns.tradesheet" ) "";
  "KodeOption4" ( "sheet columns.tradesheet" ) "";
  "KodeOption5" ( "sheet columns.tradesheet" ) "";
  "Kontrak" ( "sheet columns.tradesheet" ) "";
  "Kurs" ( "sheet columns.tradesheet" ) "";
  "KursBeli" ( "sheet columns.tradesheet" ) "";
  "KursJual" ( "sheet columns.tradesheet" ) "";
  "KursTengah" ( "sheet columns.tradesheet" ) "";
  "LastCFPeriod" ( "sheet columns.tradesheet" ) "";
  "LastCouponDate" ( "sheet columns.tradesheet" ) "";
  "LastFixingRate" ( "sheet columns.tradesheet" ) "";
  "LastPaymentPeriod" ( "sheet columns.rulesheet" "sheet columns.tradesheet" ) "";
  "LBU" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "LiabilitiesAmount" ( "sheet columns.tradesheet" ) "";
  "Limit" ( "sheet columns.portfoliosheet" "sheet columns.rulesheet" ) "";
  "Limit Available Alert" ( "sheet columns.alertsheet" "sheet columns.rulesheet" ) "";
  "Limit Holding Days" ( "sheet columns.tradesheet" ) "";
  "Limit_FX" ( "sheet columns.portfoliosheet" ) "";
  "Limit_IR" ( "sheet columns.portfoliosheet" ) "";
  "LimitAmtCurr" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "LimitEquivalenIDRCredit" ( "sheet columns.tradesheet" ) "";
  "LimitEquivalenIDRNotional" ( "sheet columns.tradesheet" ) "";
  "LimitExpiry" ( "sheet columns.appliedrulesheet" "sheet columns.rulesheet" "sheet columns.tradesheet" ) "";
  "LimitExposureCCYCredit" ( "sheet columns.tradesheet" ) "";
  "LimitExposureCCYNotional" ( "sheet columns.tradesheet" ) "";
  "LimitExposureUSDCredit" ( "sheet columns.tradesheet" ) "";
  "LimitExposureUSDNotional" ( "sheet columns.tradesheet" ) "";
  "LimitMO01" ( "sheet columns.tradesheet" ) "";
  "LimitMO10" ( "sheet columns.portfoliosheet" ) "";
  "LOB" ( "sheet columns.tradesheet" ) "";
  "LongTermFDQ" ( "sheet columns.tradesheet" ) "";
  "LossLimitMonthly" ( "sheet columns.portfoliosheet" ) "";
  "LossLimitYearly" ( "sheet columns.portfoliosheet" ) "";
  "LowerPrice" ( "sheet columns.portfoliosheet" ) "";
  "LowerRate" ( "sheet columns.tradesheet" ) "";
  "MarketYield" ( "sheet columns.tradesheet" ) "";
  "MarkToMarket" ( "sheet columns.tradesheet" ) "";
  "MarkToModel" ( "sheet columns.tradesheet" ) "";
  "MMDF" ( "sheet columns.tradesheet" ) "";
  "MMInterbankPlacement" ( "sheet columns.tradesheet" ) "";
  "MMInterbankTaken" ( "sheet columns.tradesheet" ) "";
  "MMLF" ( "sheet columns.tradesheet" ) "";
  "MO05_LimitStatus" ( "sheet columns.portfoliosheet" ) "";
  "MO05_RuleLimit" ( "sheet columns.portfoliosheet" ) "";
  "MO05_UtilizationPercentage" ( "sheet columns.portfoliosheet" ) "";
  "MO07_LimitStatus" ( "sheet columns.portfoliosheet" ) "";
  "MO07_RuleLimit" ( "sheet columns.portfoliosheet" ) "";
  "MO07_UtilizationPercentage" ( "sheet columns.portfoliosheet" ) "";
  "MO12_Utilization" ( "sheet columns.portfoliosheet" ) "";
  "MO13_ExpiryStatus" ( "sheet columns.portfoliosheet" ) "";
  "MO13_LastDiaryNote" ( "sheet columns.portfoliosheet" ) "";
  "MO13_LimitExpiry" ( "sheet columns.portfoliosheet" ) "";
  "MO13_LimitStatus" ( "sheet columns.portfoliosheet" ) "";
  "MO13_RuleLimit" ( "sheet columns.portfoliosheet" ) "";
  "MO13_Utilization" ( "sheet columns.portfoliosheet" ) "";
  "MO13_UtilizationPercentage" ( "sheet columns.portfoliosheet" ) "";
  "Money Flow Type" ( "sheet columns.tradesheet" ) "";
  "MoneyAmount" ( "sheet columns.tradesheet" ) "";
  "MoneyEndDate" ( "sheet columns.moneyflowsheet" ) "";
  "MoneyFlowAmount" ( "sheet columns.moneyflowsheet" ) "";
  "Month" ( "sheet columns.tradesheet" ) "";
  "Month_TradeTime" ( "sheet columns.tradesheet" ) "";
  "MonthlyLossLimitUse" ( "sheet columns.portfoliosheet" ) "";
  "MonthlyLossLimitUse2" ( "sheet columns.portfoliosheet" ) "";
  "MonthNow" ( "sheet columns.tradesheet" ) "";
  "MonthNumber" ( "sheet columns.tradesheet" ) "";
  "MonthToExpired" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "MOODYSDataBloomberg" ( "sheet columns.dealsheet" ) "";
  "MOODYSDataNTCS" ( "sheet columns.dealsheet" "sheet columns.tradesheet" ) "";
  "MOODYSHasilMatch" ( "sheet columns.dealsheet" ) "";
  "Movement" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "MTD" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "MTM" ( "sheet columns.tradesheet" ) "";
  "NasabahBeli" ( "sheet columns.tradesheet" ) "";
  "NasabahJual" ( "sheet columns.tradesheet" ) "";
  "NAV" ( "sheet columns.tradesheet" ) "";
  "NDFFixingPrice" ( "sheet columns.tradesheet" ) "";
  "NearAmount" ( "sheet columns.tradesheet" ) "";
  "NearAmount1" ( "sheet columns.tradesheet" ) "";
  "NearAmount2" ( "sheet columns.tradesheet" ) "";
  "NetAmount" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "NetPosition" ( "sheet columns.tradesheet" ) "";
  "NewCTPTYCIF" ( "sheet columns.tradesheet" ) "";
  "NewCTPTYReff" ( "sheet columns.tradesheet" ) "";
  "NextCFPeriod" ( "sheet columns.tradesheet" ) "";
  "NextCouponDate" ( "sheet columns.tradesheet" ) "";
  "NextPaymentDate" ( "sheet columns.tradesheet" ) "";
  "NextPaymentPeriod" ( "sheet columns.tradesheet" ) "";
  "NII" ( "sheet columns.tradesheet" ) "";
  "NIIThisYear" ( "sheet columns.tradesheet" ) "";
  "NIIYesteryear" ( "sheet columns.tradesheet" ) "";
  "NilaiBeliKembali" ( "sheet columns.tradesheet" ) "";
  "NilaiBuku" ( "sheet columns.journalsheet" ) "";
  "NilaiPasar" ( "sheet columns.tradesheet" ) "";
  "NilaiPasar2" ( "sheet columns.tradesheet" ) "";
  "NilaiPerolehan" ( "sheet columns.tradesheet" ) "";
  "NilaiPerolehan2" ( "sheet columns.tradesheet" ) "";
  "nilaiRepo1stLeg" ( "sheet columns.tradesheet" ) "";
  "nisbahBagiHasil" ( "sheet columns.tradesheet" ) "";
  "Nominal_AllMM" ( "sheet columns.tradesheet" ) "";
  "Nominal_onerep" ( "sheet columns.tradesheet" ) "";
  "nominalBondsIDR" ( "sheet columns.tradesheet" ) "";
  "nominalBondsValas" ( "sheet columns.tradesheet" ) "";
  "nominalCollateral" ( "sheet columns.tradesheet" ) "";
  "NominalCoupon" ( "sheet columns.tradesheet" ) "";
  "NominalCustom" ( "sheet columns.tradesheet" ) "";
  "nominalDokumenUnderlying" ( "sheet columns.tradesheet" ) "";
  "nominalRupiah" ( "sheet columns.tradesheet" ) "";
  "nominalValas" ( "sheet columns.tradesheet" ) "";
  "NominalValutaDasarPerUnderlying" ( "sheet columns.tradesheet" ) "";
  "NominativeList" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "NomorBuktiPotongFI" ( "sheet columns.tradesheet" ) "";
  "NomorBuktiPotongMDS" ( "sheet columns.tradesheet" ) "";
  "NomorBuktiPotongPasal26" ( "sheet columns.tradesheet" ) "";
  "nomorDokumenUnderlying" ( "sheet columns.tradesheet" ) "";
  "NomorIdentifikasi" ( "sheet columns.settlementsheet" "sheet columns.tradesheet" ) "";
  "nomorSuratBerharga" ( "sheet columns.tradesheet" ) "";
  "NOP Overnight" ( "sheet columns.portfoliosheet" ) "";
  "NOPLimit" ( "sheet columns.portfoliosheet" ) "";
  "NOPLimitUse" ( "sheet columns.portfoliosheet" ) "";
  "NOPThresholdValue" ( "sheet columns.portfoliosheet" ) "";
  "NOPUtilizationPercentage" ( "sheet columns.portfoliosheet" ) "";
  "NostroMirrorACName" ( "sheet columns.journalsheet" ) "";
  "NostroMirrorACNumber" ( "sheet columns.journalsheet" ) "";
  "Notional %Utilization" ( "sheet columns.rulesheet" ) "";
  "Notional 1DayChange" ( "sheet columns.rulesheet" ) "";
  "Notional Limit" ( "sheet columns.rulesheet" ) "";
  "Notional Utilization" ( "sheet columns.rulesheet" ) "";
  "NotionalPorSCustom" ( "sheet columns.tradesheet" ) "";
  "NPWPPotong" ( "sheet columns.tradesheet" ) "";
  "NTR" ( "sheet columns.tradesheet" ) "";
  "O/N" ( "sheet columns.tradesheet" ) "";
  "OBJID" ( "sheet columns.journalsheet" ) "";
  "OffShoreFunding" ( "sheet columns.tradesheet" ) "";
  "OneDayChange" ( "sheet columns.portfoliosheet" "sheet columns.rulesheet" "sheet columns.tradesheet" ) "";
  "OnShoreFunding" ( "sheet columns.tradesheet" ) "";
  "OnShoreLongTerm" ( "sheet columns.tradesheet" ) "";
  "OnShoreShortTerm" ( "sheet columns.tradesheet" ) "";
  "Optkey3JournalItem" ( "sheet columns.journalsheet" ) "";
  "Optkey4JournalItem" ( "sheet columns.journalsheet" ) "";
  "ORD" ( "sheet columns.tradesheet" ) "";
  "OthersFairValue" ( "sheet columns.tradesheet" ) "";
  "OthersNotAmt" ( "sheet columns.tradesheet" ) "";
  "OurCorrespondentBank" ( "sheet columns.confirmationsheet" ) "";
  "OutstandingAmount" ( "sheet columns.tradesheet" ) "";
  "OutstandingEqvUSD" ( "sheet columns.rulesheet" "sheet columns.tradesheet" ) "";
  "PayDate" ( "sheet columns.tradesheet" ) "";
  "PayDayCustom" ( "sheet columns.moneyflowsheet" "sheet columns.tradesheet" ) "";
  "PayLegEqvUSD" ( "sheet columns.tradesheet" ) "";
  "PaymentSystem" ( "sheet columns.tradesheet" ) "";
  "PayOrReceive" ( "sheet columns.tradesheet" ) "";
  "PEFINDODataBloomberg" ( "sheet columns.dealsheet" ) "";
  "PEFINDODataNTCS" ( "sheet columns.dealsheet" "sheet columns.tradesheet" ) "";
  "PEFINDOHasilMatch" ( "sheet columns.dealsheet" ) "";
  "Pemeringkat" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "Pemohon" ( "sheet columns.journalsheet" ) "";
  "Percentage_FX" ( "sheet columns.portfoliosheet" ) "";
  "Percentage_IR" ( "sheet columns.portfoliosheet" ) "";
  "Percentage_Yesterday" ( "sheet columns.tradesheet" ) "";
  "PercentageDeltaFX" ( "sheet columns.portfoliosheet" ) "";
  "PercentageDeltaIR" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "PercentageHolding" ( "sheet columns.tradesheet" ) "";
  "PercentageMO01RPL" ( "sheet columns.tradesheet" ) "";
  "PercentageMO01RPL_Yesterday" ( "sheet columns.tradesheet" ) "";
  "PercentageMO01UPL" ( "sheet columns.tradesheet" ) "";
  "PercentageMO01UPL_Yesterday" ( "sheet columns.tradesheet" ) "";
  "PercentageOfBuySell" ( "sheet columns.tradesheet" ) "";
  "PercentageVolumeYesterday" ( "sheet columns.tradesheet" ) "";
  "PercentNominal" ( "sheet columns.tradesheet" ) "";
  "PercentUtilization" ( "sheet columns.portfoliosheet" "sheet columns.rulesheet" ) "";
  "PercentUtilization__Trading" ( "sheet columns.portfoliosheet" ) "";
  "Peringkat" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "Period" ( "sheet columns.settlementsheet" "sheet columns.tradesheet" ) "";
  "Periode_Laporan" ( "sheet columns.tradesheet" ) "";
  "periodeData" ( "sheet columns.tradesheet" ) "";
  "PhysicalForeign" ( "sheet columns.tradesheet" ) "";
  "Placement/Borrowing" ( "sheet columns.tradesheet" ) "";
  "PnLIDR" ( "sheet columns.portfoliosheet" ) "";
  "PnLMonth" ( "sheet columns.portfoliosheet" ) "";
  "PnLYearly" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "PorSCustom" ( "sheet columns.tradesheet" ) "";
  "Portfolio Convex" ( "sheet columns.portfoliosheet" ) "";
  "Portfolio Total Profit and Loss Yearly" ( "sheet columns.portfoliosheet" ) "";
  "Portfolio Value at Risk From Scenario Custom" ( "sheet columns.portfoliosheet" ) "";
  "PortLimit" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "PortUtilPercent" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "PortUtilStatus" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "PosisiSaldoAkhirBulan" ( "sheet columns.tradesheet" ) "";
  "Position1To3Y" ( "sheet columns.portfoliosheet" ) "";
  "Position3To4Y" ( "sheet columns.portfoliosheet" ) "";
  "Position4To5Y" ( "sheet columns.portfoliosheet" ) "";
  "Position5To10Y" ( "sheet columns.portfoliosheet" ) "";
  "PositionEOD" ( "sheet columns.journalsheet" "sheet columns.settlementsheet" "sheet columns.tradesheet" ) "";
  "PositionHigh10Y" ( "sheet columns.portfoliosheet" ) "";
  "PositionLow1Y" ( "sheet columns.portfoliosheet" ) "";
  "PPhPotong1" ( "sheet columns.tradesheet" ) "";
  "PPhPotong2" ( "sheet columns.tradesheet" ) "";
  "PPlusI" ( "sheet columns.tradesheet" ) "";
  "PPlusIAboveOneYear" ( "sheet columns.tradesheet" ) "";
  "PPlusICurrent" ( "sheet columns.tradesheet" ) "";
  "PPlusINineMonthToTwelveMonth" ( "sheet columns.tradesheet" ) "";
  "PPlusIOneMonthToTwoMonth" ( "sheet columns.tradesheet" ) "";
  "PPlusIOneWeek" ( "sheet columns.tradesheet" ) "";
  "PPlusIOneWeekToOneMonth" ( "sheet columns.tradesheet" ) "";
  "PPlusISixMonthToNineMonth" ( "sheet columns.tradesheet" ) "";
  "PPlusIThreeMonthToSixMonth" ( "sheet columns.tradesheet" ) "";
  "PPlusITwoMonthToThreeMonth" ( "sheet columns.tradesheet" ) "";
  "premiOption" ( "sheet columns.tradesheet" ) "";
  "PremiumCustom" ( "sheet columns.tradesheet" ) "";
  "PrevEffDate" ( "sheet columns.tradesheet" ) "";
  "PrevPrevEffDate" ( "sheet columns.tradesheet" ) "";
  "PrevPrevPrice" ( "sheet columns.tradesheet" ) "";
  "PrevPrice" ( "sheet columns.tradesheet" ) "";
  "PriceYST" ( "sheet columns.tradesheet" ) "";
  "PRINPAYAMT" ( "sheet columns.tradesheet" ) "";
  "ProceedAmount" ( "sheet columns.journalsheet" ) "";
  "ProceedAmtRepo" ( "sheet columns.tradesheet" ) "";
  "ProcessFlag" ( "sheet columns.journalsheet" ) "";
  "Product" ( "sheet columns.journalsheet" ) "";
  "ProductCategoryCombination" ( "sheet columns.tradesheet" ) "";
  "PV01ThresholdValue" ( "sheet columns.portfoliosheet" ) "";
  "PV01UtilizationPercentage" ( "sheet columns.portfoliosheet" ) "";
  "PvFixedRate" ( "sheet columns.tradesheet" ) "";
  "QualityOfPlacement" ( "sheet columns.tradesheet" ) "";
  "QuantityCustom" ( "sheet columns.tradesheet" ) "";
  "QuantityUsed" ( "sheet columns.tradesheet" ) "";
  "RATE_8" ( "sheet columns.tradesheet" ) "";
  "RATE_VAL" ( "sheet columns.tradesheet" ) "";
  "RateCustom" ( "sheet columns.tradesheet" ) "";
  "RateNTRIDR" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "RealizedPnLCustom" ( "sheet columns.tradesheet" ) "";
  "ReferenceRate" ( "sheet columns.tradesheet" ) "";
  "Reff" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "Reksadana" ( "sheet columns.tradesheet" ) "";
  "Reksus" ( "sheet columns.tradesheet" ) "";
  "RemarkOutstanding" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "RemarkSellBuy" ( "sheet columns.tradesheet" ) "";
  "Repo" ( "sheet columns.tradesheet" ) "";
  "RepoBI" ( "sheet columns.tradesheet" ) "";
  "RepoCashAmount" ( "sheet columns.tradesheet" ) "";
  "RepoCleanPrice" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "RepoDirtyPrice" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "RepoHaircut" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "RepoInterbank" ( "sheet columns.tradesheet" ) "";
  "RepoRate" ( "sheet columns.journalsheet" ) "";
  "RepoUnderlyingName" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "RepoYield" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "RepurchaseAmount" ( "sheet columns.tradesheet" ) "";
  "RequiredAmountUnderlying" ( "sheet columns.tradesheet" ) "";
  "ReturnCoupon" ( "sheet columns.tradesheet" ) "";
  "RevalRate" ( "sheet columns.tradesheet" ) "";
  "RevaluationAmount" ( "sheet columns.tradesheet" ) "";
  "RevRepoBI" ( "sheet columns.tradesheet" ) "";
  "RevRepoInterbank" ( "sheet columns.tradesheet" ) "";
  "RiskWeight" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "RowNumber" ( "sheet columns.tradesheet" ) "";
  "RPL_Yesterday" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "Rule Value Utilization % Custom" ( "sheet columns.rulesheet" ) "";
  "Rule Value Utilization Custom" ( "sheet columns.rulesheet" ) "";
  "SA-CCR_RWA" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "SaldoRata2PerTahun" ( "sheet columns.tradesheet" ) "";
  "SaldoRata2PerTahun_v2" ( "sheet columns.tradesheet" ) "";
  "SaldoRata2PerTahun_v3" ( "sheet columns.tradesheet" ) "";
  "SandiBank" ( "sheet columns.journalsheet" ) "";
  "SB_Dimiliki" ( "sheet columns.tradesheet" ) "";
  "SB_Terbit" ( "sheet columns.tradesheet" ) "";
  "SCHED_Pay_Freq" ( "sheet columns.tradesheet" ) "";
  "Scttype" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "SECID" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "SecuritiesRating" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "SecuritiesRatingInstituition" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "SellAmountCustom" ( "sheet columns.tradesheet" ) "";
  "SellAmountCustom2" ( "sheet columns.tradesheet" ) "";
  "SEQNUM" ( "sheet columns.journalsheet" ) "";
  "SETTAVGCOST" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "SettBaseAmt" ( "sheet columns.tradesheet" ) "";
  "Settlement Type" ( "sheet columns.tradesheet" ) "";
  "ShortTermFDQ" ( "sheet columns.tradesheet" ) "";
  "SingleInterestPayment" ( "sheet columns.moneyflowsheet" "sheet columns.tradesheet" ) "";
  "SingleInterestReceived" ( "sheet columns.moneyflowsheet" "sheet columns.tradesheet" ) "";
  "SNPDataBloomberg" ( "sheet columns.dealsheet" ) "";
  "SNPDataNTCS" ( "sheet columns.dealsheet" "sheet columns.tradesheet" ) "";
  "SNPHasilMatch" ( "sheet columns.dealsheet" ) "";
  "SourceData" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "Sources" ( "sheet columns.tradesheet" ) "";
  "SourceUse" ( "sheet columns.portfoliosheet" ) "";
  "SpotAssets" ( "sheet columns.journalsheet" ) "";
  "SpotLiabilities" ( "sheet columns.journalsheet" ) "";
  "SRC_STM_ID" ( "sheet columns.journalsheet" ) "";
  "StandardYearlyLossThresholdValue" ( "sheet columns.portfoliosheet" ) "";
  "StandardYearlyLossUtilizationPercentage" ( "sheet columns.portfoliosheet" ) "";
  "StartAccrualFA" ( "sheet columns.tradesheet" ) "";
  "StartCouponDate" ( "sheet columns.tradesheet" ) "";
  "StartDateCF" ( "sheet columns.tradesheet" ) "";
  "StartValueFA" ( "sheet columns.tradesheet" ) "";
  "status_mt950" ( "sheet columns.settlementsheet" ) "";
  "Status_Utilization_FX" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "Status_Utilization_IR" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "StatusAntasena" ( "sheet columns.tradesheet" ) "";
  "StatusBondCutLoss" ( "sheet columns.portfoliosheet" ) "";
  "StatusBondCutLossNew" ( "sheet columns.portfoliosheet" ) "";
  "StatusBondHolding" ( "sheet columns.tradesheet" ) "";
  "StatusDeltaFX" ( "sheet columns.portfoliosheet" ) "";
  "StatusDeltaFXNew" ( "sheet columns.portfoliosheet" ) "";
  "StatusDeltaIR" ( "sheet columns.portfoliosheet" ) "";
  "StatusDeltaIRNew" ( "sheet columns.portfoliosheet" ) "";
  "StatusExpiry" ( "sheet columns.appliedrulesheet" "sheet columns.rulesheet" "sheet columns.rulevaluehistorysheet" ) "";
  "StatusLimit" ( "sheet columns.rulesheet" ) "";
  "StatusLimit_FX" ( "sheet columns.portfoliosheet" ) "";
  "StatusLimit_IR" ( "sheet columns.portfoliosheet" ) "";
  "StatusLimitExpiry" ( "sheet columns.rulesheet" ) "";
  "StatusLimitTrading" ( "sheet columns.portfoliosheet" ) "";
  "StatusMatchUnmatch" ( "sheet columns.journalsheet" ) "";
  "StatusNTCS" ( "sheet columns.tradesheet" ) "";
  "StatusRegistration" ( "sheet columns.tradesheet" ) "";
  "STDEV" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "strikePrice2" ( "sheet columns.tradesheet" ) "";
  "SUBLMTNAME" ( "sheet columns.tradesheet" ) "";
  "sukuBungaPersentaseImbalan" ( "sheet columns.tradesheet" ) "";
  "sukuBungaRepo" ( "sheet columns.tradesheet" ) "";
  "SWAP" ( "sheet columns.tradesheet" ) "";
  "SwapCounterparty" ( "sheet columns.moneyflowsheet" "sheet columns.tradesheet" ) "";
  "SwapFarAmount" ( "sheet columns.moneyflowsheet" "sheet columns.tradesheet" ) "";
  "SwapPortfolio" ( "sheet columns.moneyflowsheet" ) "";
  "SwapProceed" ( "sheet columns.moneyflowsheet" ) "";
  "SystemDate" ( "sheet columns.tradesheet" ) "";
  "TahunPajak" ( "sheet columns.tradesheet" ) "";
  "tanggalJatuhTempo" ( "sheet columns.tradesheet" ) "";
  "tanggalJatuhTempoDepo" ( "sheet columns.tradesheet" ) "";
  "tanggalJatuhTempoDokumenUnderlying" ( "sheet columns.tradesheet" ) "";
  "tanggalJatuhTempoRepo" ( "sheet columns.tradesheet" ) "";
  "tanggalJatuhTempoSuratBerharga" ( "sheet columns.tradesheet" ) "";
  "tanggalSettlement" ( "sheet columns.tradesheet" ) "";
  "tanggalValuta" ( "sheet columns.tradesheet" ) "";
  "TargetFullYear" ( "sheet columns.portfoliosheet" ) "";
  "TargetMonth" ( "sheet columns.portfoliosheet" ) "";
  "TargetMonthPercent" ( "sheet columns.portfoliosheet" ) "";
  "TargetMTD" ( "sheet columns.portfoliosheet" ) "";
  "TargetMTDPercent" ( "sheet columns.portfoliosheet" ) "";
  "TargetMTDPL" ( "sheet columns.portfoliosheet" ) "";
  "TargetMTDVol" ( "sheet columns.portfoliosheet" ) "";
  "TargetYear" ( "sheet columns.portfoliosheet" ) "";
  "TargetYearPercent" ( "sheet columns.portfoliosheet" ) "";
  "TargetYTD" ( "sheet columns.portfoliosheet" ) "";
  "TargetYTDPercent" ( "sheet columns.portfoliosheet" ) "";
  "TargetYTDPL" ( "sheet columns.portfoliosheet" ) "";
  "TargetYTDVol" ( "sheet columns.portfoliosheet" ) "";
  "Tarif1" ( "sheet columns.tradesheet" ) "";
  "Tarif2" ( "sheet columns.tradesheet" ) "";
  "TarifPajak" ( "sheet columns.tradesheet" ) "";
  "TaxDifferenceJournal" ( "sheet columns.journalsheet" ) "";
  "Tenor" ( "sheet columns.journalsheet" "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "tenorSuratBerharga" ( "sheet columns.tradesheet" ) "";
  "Term" ( "sheet columns.tradesheet" ) "";
  "Term_Deposit" ( "sheet columns.tradesheet" ) "";
  "TermofPeriod" ( "sheet columns.tradesheet" ) "";
  "testRhamdan" ( "sheet columns.tradesheet" ) "";
  "tglAwalForward" ( "sheet columns.tradesheet" ) "";
  "tglEfektifSWAPIRS" ( "sheet columns.tradesheet" ) "";
  "TheoreticalPnLYearly" ( "sheet columns.portfoliosheet" ) "";
  "ThresholdValue1" ( "sheet columns.tradesheet" ) "";
  "Time" ( "sheet columns.tradesheet" ) "";
  "tingkatIndikasiImbalan" ( "sheet columns.tradesheet" ) "";
  "ToleranceLimit" ( "sheet columns.tradesheet" ) "";
  "ToleranceLimit2" ( "sheet columns.tradesheet" ) "";
  "Total" ( "sheet columns.dealsheet" "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "Total_Cashflow" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "Total_Coupon" ( "sheet columns.settlementsheet" ) "";
  "Total_EndCash" ( "sheet columns.tradesheet" ) "";
  "TotalACCINT" ( "sheet columns.tradesheet" ) "";
  "TotalAdm" ( "sheet columns.tradesheet" ) "";
  "TotalBorrowing" ( "sheet columns.tradesheet" ) "";
  "TotalINTAMT" ( "sheet columns.tradesheet" ) "";
  "TotalInterest" ( "sheet columns.tradesheet" ) "";
  "TotalNasabah" ( "sheet columns.tradesheet" ) "";
  "TotalPaymentReceive" ( "sheet columns.tradesheet" "sheet columns.tradingactivitysheet" ) "";
  "TotalPlacement" ( "sheet columns.tradesheet" ) "";
  "TotalPnLCustom" ( "sheet columns.tradesheet" ) "";
  "TotalPrincipal" ( "sheet columns.tradesheet" ) "";
  "TotalTaxableIncome" ( "sheet columns.tradesheet" ) "";
  "TotalUSD" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "TPL" ( "sheet columns.journalsheet" ) "";
  "TPL_Yesterday" ( "sheet columns.tradesheet" ) "";
  "TradeFXExcRate" ( "sheet columns.tradesheet" ) "";
  "TradeNumber" ( "sheet columns.journalsheet" "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "TradeNumberCustom" ( "sheet columns.moneyflowsheet" ) "";
  "TradeNumberInstrument" ( "sheet columns.tradesheet" ) "";
  "TraderPrice" ( "sheet columns.tradesheet" ) "";
  "TradeTimeDateOnly" ( "sheet columns.journalsheet" "sheet columns.portfoliosheet" "sheet columns.settlementsheet" "sheet columns.tradesheet" ) "";
  "TradeTimeTimeOnly" ( "sheet columns.tradesheet" ) "";
  "TradeTypeDesc" ( "sheet columns.tradesheet" ) "";
  "TransactionBorrow" ( "sheet columns.tradesheet" ) "";
  "TransactionBorrow1Bio" ( "sheet columns.tradesheet" ) "";
  "TransactionLend" ( "sheet columns.tradesheet" ) "";
  "TransactionLend1Bio" ( "sheet columns.tradesheet" ) "";
  "TranslationAmount" ( "sheet columns.tradesheet" ) "";
  "TRD" ( "sheet columns.dealsheet" "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "TrdNbrMoneyFlow" ( "sheet columns.moneyflowsheet" ) "";
  "Trilyun" ( "sheet columns.journalsheet" ) "";
  "Type_Placement" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "TypeofFunding" ( "sheet columns.tradesheet" ) "";
  "TypeOfSecurities" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "TypeUtilization" ( "sheet columns.tradesheet" ) "";
  "Unamortized" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "UnamortizedDiscPrem" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "UnamortizedInterest" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "UnderlyingThreshold" ( "sheet columns.tradesheet" ) "";
  "UnderlyingTransaksi" ( "sheet columns.tradesheet" ) "";
  "UnrealizedPlusIncomeToday" ( "sheet columns.tradesheet" ) "";
  "UnrealizedPlusIncomeYesterday" ( "sheet columns.tradesheet" ) "";
  "UPL_Yesterday" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "UPLBonds" ( "sheet columns.tradesheet" ) "";
  "UpperPrice" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "UpperRate" ( "sheet columns.tradesheet" ) "";
  "UserCancelOrAmendBO" ( "sheet columns.tradesheet" ) "";
  "UserCancelOrAmendFO" ( "sheet columns.tradesheet" ) "";
  "Utilisasi" ( "sheet columns.rulesheet" ) "";
  "UtilisasiCreditEquivalent" ( "sheet columns.rulesheet" ) "";
  "UtilisasiDeltaFX" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "UtilisasiDeltaIR" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "Utilization_Delta_FX" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "Utilization_Delta_IR" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "UtilizationBond" ( "sheet columns.tradesheet" ) "";
  "ValueDay_adj" ( "sheet columns.tradesheet" ) "";
  "ValueDay_USDPrice" ( "sheet columns.tradesheet" ) "";
  "ValutaDasar" ( "sheet columns.tradesheet" ) "";
  "valutaDasarJnsSukuBungaAcuan" ( "sheet columns.tradesheet" ) "";
  "valutaDasarPremiumSukuBungaAcuan" ( "sheet columns.tradesheet" ) "";
  "valutaDasarSukuBungaTetap" ( "sheet columns.tradesheet" ) "";
  "valutaDasarTenorSukuBungaAcuan" ( "sheet columns.tradesheet" ) "";
  "valutaDokumenUnderlying" ( "sheet columns.tradesheet" ) "";
  "ValutaLawan" ( "sheet columns.tradesheet" ) "";
  "variabelMendasari" ( "sheet columns.tradesheet" ) "";
  "VarThresholdValue" ( "sheet columns.portfoliosheet" ) "";
  "VarUtilizationPercentage" ( "sheet columns.portfoliosheet" ) "";
  "VERIND" ( "sheet columns.tradesheet" ) "";
  "VoidCancelDate" ( "sheet columns.tradesheet" ) "";
  "Volume Yesterday" ( "sheet columns.tradesheet" ) "";
  "VolumeDaily" ( "sheet columns.portfoliosheet" ) "";
  "VolumeMonthly" ( "sheet columns.portfoliosheet" ) "";
  "VolumePenjualan" ( "sheet columns.tradesheet" ) "";
  "VolumeUSD" ( "sheet columns.tradesheet" ) "";
  "VolumeYearly" ( "sheet columns.portfoliosheet" ) "";
  "WeekNumber" ( "sheet columns.tradesheet" ) "";
  "WHT" ( "sheet columns.journalsheet" "sheet columns.tradesheet" ) "";
  "WHTText" ( "sheet columns.journalsheet" ) "";
  "WITHGAINAMT" ( "sheet columns.tradesheet" ) "";
  "WITHGAINAMTAFS" ( "sheet columns.tradesheet" ) "";
  "WITHGAINAMTTRD" ( "sheet columns.tradesheet" ) "";
  "WITHORIGCOSTAMT" ( "sheet columns.tradesheet" ) "";
  "WITHSETTDATE" ( "sheet columns.tradesheet" ) "";
  "Year" ( "sheet columns.tradesheet" ) "";
  "YearlyLossLimitUse" ( "sheet columns.portfoliosheet" ) "";
  "YearlyLossLimitUse2" ( "sheet columns.portfoliosheet" ) "";
  "YearNow" ( "sheet columns.tradesheet" ) "";
  "YesterdayPrice" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "YieldChange" ( "sheet columns.tradesheet" ) "";
  "yieldSuratBerharga" ( "sheet columns.tradesheet" ) "";
  "yieldValue" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "YieldYST" ( "sheet columns.tradesheet" ) "";
  "YourCorrespondentBank" ( "sheet columns.confirmationsheet" "sheet columns.journalsheet" ) "";
  "YTD" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "YTDAchievement" ( "sheet columns.portfoliosheet" ) "";
  "YTDandAccrued" ( "sheet columns.tradesheet" ) "";
}

clx FInstrumentAndTrades [FColumnDefinition] {
  MATPROCAMT =
  [ICT_CustomReports]FTradeRow:MATPROCAMT=;


}

clx FPhysicalPortfolio [FColumnDefinition] {
  Currency.adasdasdsaTest =
  ColumnName=Currency
  GroupLabel=
  Method=Currency.Name


}

clx FTradingSheet [FColumnDefinition] {
  10DExpiry =
  Description=Shows Instruments with Expiry 10 Day
  ExtensionAttribute=TenDayExpiry
  Format=
  GroupLabel=FieldCustom
  LabelList=10DExpiry
  Name=10DExpiry


  1DayChange_Convexity =
  ColumnAppearance=Total_background
  Description=Utilization today subtracted by utilization previous position
  ExtensionAttribute=DayChangeConvexity
  GroupLabel=FieldCustom
  Label=1 Day Change Convexity
  Name=1 Day Change Convexity


  1DayChange_CreditVaR =
  ColumnAppearance=Total_background
  Description=Utilization today subtracted by utilization previous position
  ExtensionAttribute=DayChangeCreditVaR
  GroupLabel=FieldCustom
  Label=1 Day Change CreditVaR
  Name=1 Day Change CreditVaR


  1DayChange_CS01 =
  ColumnAppearance=Total_background
  Description=Utilization today subtracted by utilization previous position
  ExtensionAttribute=DayChangeCS01
  GroupLabel=FieldCustom
  Label=1 Day Change CS01
  Name=1 Day Change CS01


  1DayChange_Delta =
  Description=Utilization today subtracted by utilization previous position
  ExtensionAttribute=DayChangeDelta
  GroupLabel=FieldCustom
  LabelList=1 Day Change Delta
  Name=1 Day Change Delta


  1DayChange_DeltaIR =
  Description=Utilization today subtracted by utilization previous position
  ExtensionAttribute=DayChangeDeltaIR
  Format=Imprecise
  GroupLabel=FieldCustom
  LabelList=1 Day Change Delta IR
  Name=1 Day Change Delta IR


  1DayChange_FX =
  ColumnAppearance=Total_background
  Description=Utilization today subtracted by utilization previous position (FX)
  ExtensionAttribute=OneDayChange_FX
  GroupLabel=FieldCustom
  Label=1 Day Change FX
  Name=1 Day Change FX


  1DayChange_FXVaR =
  ColumnAppearance=Total_background
  Description=Utilization today subtracted by utilization previous position
  ExtensionAttribute=DayChangeFXVaR
  GroupLabel=FieldCustom
  Label=1 Day Change FXVaR
  Name=1 Day Change FXVaR


  1DayChange_Gamma =
  Description=Utilization today subtracted by utilization previous position
  ExtensionAttribute=DayChangeGamma
  GroupLabel=FieldCustom
  Label=1 Day Change Gamma
  Name=1 Day Change Gamma


  1DayChange_GammaCash =
  Description=Utilization today subtracted by utilization previous position
  ExtensionAttribute=DayChangeGammaCash
  GroupLabel=FieldCustom
  Label=1 Day Change Gamma Cash
  Name=1 Day Change Gamma Cash


  1DayChange_HVaR =
  ColumnAppearance=Total_background
  Description=Utilization today subtracted by utilization previous position
  ExtensionAttribute=DayChangeHVaR
  GroupLabel=FieldCustom
  Label=1 Day Change HVaR
  Name=1 Day Change HVaR


  1DayChange_IncrementalVaR =
  ColumnAppearance=Total_background
  Description=Utilization today subtracted by utilization previous position
  ExtensionAttribute=DayChangeIncrementalVaR
  GroupLabel=FieldCustom
  Label=1 Day Change IncrementalVaR
  Name=1 Day Change IncrementalVaR


  1DayChange_IR =
  ColumnAppearance=Total_background
  Description=Utilization today subtracted by utilization previous position (IR)
  ExtensionAttribute=OneDayChange_IR
  GroupLabel=FieldCustom
  Label=1 Day Change IR
  Name=1 Day Change IR


  1DayChange_IRVaR =
  ColumnAppearance=Total_background
  Description=Utilization today subtracted by utilization previous position
  ExtensionAttribute=DayChangeIRVaR
  GroupLabel=FieldCustom
  Label=1 Day Change IRVaR
  Name=1 Day Change IRVaR


  1DayChange_LeftCurve =
  Description=Utilization today subtracted by utilization previous position
  ExtensionAttribute=DayChangeLeftCurve
  GroupLabel=FieldCustom
  Label=1 Day Change LeftCurve
  Name=1 Day Change LeftCurve


  1DayChange_MarginalVaR =
  ColumnAppearance=Total_background
  Description=Utilization today subtracted by utilization previous position
  ExtensionAttribute=DayChangeMarginalVaR
  GroupLabel=FieldCustom
  Label=1 Day Change MarginalVaR
  Name=1 Day Change MarginalVaR


  1DayChange_MO12 =
  ColumnAppearance=Total_background
  Description=Utilization today subtracted by utilization previous position (MO12)
  ExtensionAttribute=MO12_1DayChange
  GroupLabel=FieldCustom
  Label=1 Day Change
  Name=1 Day Change


  1DayChange_MO13 =
  ColumnAppearance=Total_background
  Description=Utilization today subtracted by utilization previous position (MO13)
  ExtensionAttribute=MO13_1DayChange
  GroupLabel=FieldCustom
  Label=1 Day Change MO13
  Name=1 Day Change MO13


  1DayChange_PV01 =
  Description=Utilization today subtracted by utilization previous position
  ExtensionAttribute=DayChangePV01
  Format=Imprecise
  GroupLabel=FieldCustom
  LabelList=1 Day Change PV01
  Name=1 Day Change PV01


  1DayChange_RightCurve =
  Description=Utilization today subtracted by utilization previous position
  ExtensionAttribute=DayChangeRightCurve
  GroupLabel=FieldCustom
  Label=1 Day Change RightCurve
  Name=1 Day Change RightCurve


  1DayChange_ShortfallVaR =
  ColumnAppearance=Total_background
  Description=Utilization today subtracted by utilization previous position
  ExtensionAttribute=DayChangeShortfallVaR
  GroupLabel=FieldCustom
  Label=1 Day Change ShortfallVaR
  Name=1 Day Change ShortfallVaR


  1DayChange_Trading =
  ColumnAppearance=Total_background
  Description=Utilization today subtracted by utilization previous position
  ExtensionAttribute=DayChangeTrading
  GroupLabel=FieldCustom
  Label=1 Day Change
  Name=1 Day Change


  1DayChange_Vega =
  Description=Utilization today subtracted by utilization previous position
  ExtensionAttribute=DayChangeVega
  GroupLabel=FieldCustom
  Label=1 Day Change Vega
  Name=1 Day Change Vega


  1DayChange_VegaIR =
  Description=Utilization today subtracted by utilization previous position
  ExtensionAttribute=DayChangeVegaIR
  GroupLabel=FieldCustom
  Label=1 Day Change Vega IR
  Name=1 Day Change Vega IR


  1DExpiry =
  Description=Shows Instruments with Expiry 1 Day
  ExtensionAttribute=OneDayExpiry
  Format=
  GroupLabel=FieldCustom
  LabelList=1DExpiry
  Name=1DExpiry


  2DExpiry =
  Description=Shows Instruments with Expiry 2 Day
  ExtensionAttribute=TwoDayExpiry
  Format=
  GroupLabel=FieldCustom
  LabelList=2DExpiry
  Name=2DExpiry


  3DExpiry =
  Description=Shows Instruments with Expiry 3 Day
  ExtensionAttribute=ThreeDayExpiry
  Format=
  GroupLabel=FieldCustom
  LabelList=3DExpiry
  Name=3DExpiry


  4DExpiry =
  Description=Shows Instruments with Expiry 4 Day
  ExtensionAttribute=FourDayExpiry
  Format=
  GroupLabel=FieldCustom
  LabelList=4DExpiry
  Name=4DExpiry


  5DExpiry =
  Description=Shows Instruments with Expiry 5 Day
  ExtensionAttribute=FiveDayExpiry
  Format=
  GroupLabel=FieldCustom
  LabelList=5DExpiry
  Name=5DExpiry


  6DExpiry =
  Description=Shows Instruments with Expiry 6 Day
  ExtensionAttribute=SixDayExpiry
  Format=
  GroupLabel=FieldCustom
  LabelList=6DExpiry
  Name=6DExpiry


  7DExpiry =
  Description=Shows Instruments with Expiry 7 Day
  ExtensionAttribute=SevenDayExpiry
  Format=
  GroupLabel=FieldCustom
  LabelList=7DExpiry
  Name=7DExpiry


  8DExpiry =
  Description=Shows Instruments with Expiry 8 Day
  ExtensionAttribute=EightDayExpiry
  Format=
  GroupLabel=FieldCustom
  LabelList=8DExpiry
  Name=8DExpiry


  9DExpiry =
  Description=Shows Instruments with Expiry 9 Day
  ExtensionAttribute=NineDayExpiry
  Format=
  GroupLabel=FieldCustom
  LabelList=9DExpiry
  Name=9DExpiry


  AbsJournalAmount =
  Description=Journal Amount that is absolute
  ExtensionAttribute=AbsJournalAmount
  GroupLabel=FieldCustom
  LabelList=Absolute Journal Amount
  Name=Absolute Journal Amount


  AbsJournalAmountIdr =
  Description=Journal Amount on IDR that is absolute
  ExtensionAttribute=AbsJournalAmountIdr
  GroupLabel=FieldCustom
  LabelList=Absolute Journal Amount IDR
  Name=Absolute Journal Amount IDR


  absNominal =
  Description=Absolute Nominal Amount
  ExtensionAttribute=absNominal
  Format=
  GroupLabel=FieldCustom
  LabelList=absNominal
  Name=absNominal


  ACCINT =
  Access=ReadOnly
  Description=
  ExtensionAttribute=ACCINT
  Format=
  GroupLabel=FieldCustom
  LabelList=ACCINT
  Name=ACCINT


  AccountID =
  ColumnAppearance=Total_background
  Description=<TradeNumber>_OPT_CON_<Bought/Sold>_<Call/Put>_TR
  ExtensionAttribute=AccountID
  Format=
  GroupLabel=FieldCustom
  Label=Account ID
  Name=Account ID


  ACCROUTSTAMT =
  Description=Shows trade number if buy.
  ExtensionAttribute=ACCROUTSTAMT
  Format=
  GroupLabel=FieldCustom
  LabelList=ACCROUTSTAMT
  Name=ACCROUTSTAMT


  Accrued_Outstanding =
  Description=The sum of amount which hasnÃ¢ÂÂt been received or paid.
  ExtensionAttribute=AccruedOutstanding
  Format=Imprecise
  GroupLabel=FieldCustom
  LabelList=Accrued Outstanding
  Name=Accrued Outstanding


  AccruedInterestValue =
  Description=The limit on Bond Cut Loss
  ExtensionAttribute=AccruedInterestValue
  Format=
  GroupLabel=FieldCustom
  LabelList=AccruedInterestValue
  Name=Accrued Interest


  ACCTTYPE =
  Description=Combination of <Trade Key 3> / <Trade Key 4>.
  ExtensionAttribute=ACCTTYPE
  Format=
  GroupLabel=FieldCustom
  LabelList=PRODTYPE
  Name=Product Type


  AccumulativeOrPerTransaction =
  ColumnAppearance=Total_background
  Description=Transaction type category (accumulative or per transaction), only spot can be accumulative
  ExtensionAttribute=AccumulativeOrPerTransaction
  GroupLabel=FieldCustom
  Label=Accumulative / Per Transaction
  Name=Accumulative / Per Transaction


  AcquisitionIDR =
  ColumnAppearance=Total_background
  Description=The acquisition cost of transaction (asset) equals in IDR.
  ExtensionAttribute=AcquisitionIDR
  Format=
  GroupLabel=FieldCustom
  Label=Acquisition IDR
  Name=Acquisition IDR


  AcquisitionPricePercent =
  Description=Realized Profit/Loss to Total Profit/Loss in Percentage
  ExtensionAttribute=AcquisitionPricePercent
  Format=
  GroupLabel=FieldCustom
  LabelList=Acquisition Price (%)
  Name=Acquisition Price %


  AcquisitionRecord =
  Description=Acquisition Record of Additional Payment.
  ExtensionAttribute=AcquisitionRecord
  Format=
  GroupLabel=FieldCustom
  LabelList=Acq. Price and Date Record
  Name=Acquisition Record


  AFS =
  Access=ReadOnly
  Description=Available for Sale
  ExtensionAttribute=AFS
  Format=
  GroupLabel=FieldCustom
  LabelList=AFS
  Name=AFS


  AgreedSellingPrice =
  Access=ReadOnly
  Description=Second leg price of reverse repo
  ExtensionAttribute=AgreedSellingPrice
  Format=
  GroupLabel=FieldCustom
  LabelList=Agreed Selling Price
  Name=Agreed Selling Price


  AIP =
  ColumnAppearance=Total_background
  Description=Automatic Investment
  ExtensionAttribute=AIP
  GroupLabel=FieldCustom
  Label=AIP
  Name=AIP


  AL =
  Access=ReadOnly
  Description=Asset or Liability indicator
  ExtensionAttribute=AL
  Format=
  GroupLabel=FieldCustom
  LabelList=AL
  Name=Asset Type


  allcurrencies =
  Description=nominal dokumen underlying
  ExtensionAttribute=allcurrencies
  GroupLabel=FieldCustom
  Label=Valuta Dokumen Underlying
  Name=Valuta Dokumen UNderlying


  AllInRate =
  Access=ReadOnly
  Description=Fixing rate + spread
  ExtensionAttribute=AllInRate
  Format=
  GroupLabel=FieldCustom
  LabelList=All In Rate
  Name=All In Rate


  AllInRate2 =
  Access=ReadOnly
  Description=The average of pay leg rate and receive leg rate
  ExtensionAttribute=AllInRate2
  Format=
  GroupLabel=FieldCustom
  LabelList=AllInRate
  Name=All In Rate (average)


  AllowanceForLosses =
  Access=ReadOnly
  Description=1% reserved of outstanding placement
  ExtensionAttribute=AllowanceForLosses
  Format=
  GroupLabel=FieldCustom
  LabelList=Allowance for Possible Losses
  Name=Allowance for Possible Losses


  Amendment =
  ColumnAppearance=Total_background
  Description=Amendment
  ExtensionAttribute=Amendment
  GroupLabel=FieldCustom
  Label=Amendment
  Name=Amendment


  AmendmentDate =
  ColumnAppearance=Total_background
  Description=Amendment Date
  ExtensionAttribute=AmendmentDate
  GroupLabel=FieldCustom
  Label=AmendmentDate
  Name=AmendmentDate


  AmortisasiPrice =
  Description=Book Value / Face Value
  ExtensionAttribute=AmortisasiPrice
  GroupLabel=FieldCustom
  Label=Amortized Price
  Name=AmortisasiPrice


  Amortized =
  Description=Premium - Nominal / Days to Maturity
  ExtensionAttribute=Amortized
  Format=
  GroupLabel=FieldCustom
  LabelList=Amortized
  Name=Amortized


  Amortized010203 =
  Access=ReadOnly
  Description=The paying off debt with fixed repayment schedule prior to 01/02/03 rules
  ExtensionAttribute=Amortized010203
  Format=
  GroupLabel=FieldCustom
  LabelList=Amortized Prior in 01/02/03
  Name=Amortized Prior in 01/02/03


  Amortized2004 =
  Access=ReadOnly
  Description=The paying off debt with fixed repayment schedule prior to 2004
  ExtensionAttribute=Amortized2004
  Format=
  GroupLabel=FieldCustom
  LabelList=Amortized Prior in 2004
  Name=Amortized Prior in 2004


  AmortizedDiscPrem =
  Access=ReadOnly
  Description=Amount of accrue interest from start period of repo transaction until report date generated
  ExtensionAttribute=AmortizedDiscPrem
  Format=
  GroupLabel=FieldCustom
  LabelList=Amortized Disc/Premium
  Name=Amortized Disc/Premium


  Amount of Underlying =
  Description=FIFO underlying used to cover the transaction
  ExtensionAttribute=AmountofUnderlying
  Format=
  GroupLabel=FieldCustom
  Label=Amount of Underlying
  Name=Amount of Underlying


  Amount_AllMM =
  Access=ReadOnly
  Description=Amount (end cash) for all MM (DL, REVREPO, BONDSREPO, SBI, BOND, TD)
  ExtensionAttribute=Amount_AllMM
  Format=
  GroupLabel=FieldCustom
  LabelList=Amount
  Name=Amount for all MM


  AmountAccumulativePerMonth =
  ColumnAppearance=Total_background
  Description=Accumulative amount refer to column (amount transaction)
  ExtensionAttribute=AmountAccumulativePerMonth
  GroupLabel=FieldCustom
  Label=Amount Accumulative Per Month
  Name=Amount Accumulative Per Month


  AmountBuyAudit =
  Access=ReadOnly
  Description=if FX and Buy will get Amount else Nominal
  ExtensionAttribute=AmountBuyAudit
  Format=
  GroupLabel=FieldCustom
  LabelList=Amount (1)
  Name=Amount (1)


  AmountClosing =
  ColumnAppearance=AmountClosing
  Description=Nominal * Rate From Value Day
  ExtensionAttribute=AmountClosing
  GroupLabel=FieldCustom
  Name=AmountClosing


  AmountClosingYesterday =
  Description=Nominal * Rate From Value Day - 1
  ExtensionAttribute=AmountClosingYesterday
  GroupLabel=FieldCustom
  Name=AmountClosingYesterday


  AmountInIDRBonds =
  Description=AmountInIDR
  ExtensionAttribute=AmountInIDRBonds
  Format=
  GroupLabel=FieldCustom
  LabelList=AmountInIDRBonds
  Name=AmountInIDRBonds


  AmountJournal =
  Description=Amount Journal Absolute
  ExtensionAttribute=AmountJournal
  GroupLabel=FieldCustom
  Label=Amount
  Name=Amount


  AmountSellAudit =
  Access=ReadOnly
  Description=if FX and Sell will get Amount else None
  ExtensionAttribute=AmountSellAudit
  Format=
  GroupLabel=FieldCustom
  LabelList=Amount (2)
  Name=Amount (2)


  AmountToFund =
  Access=ReadOnly
  Description=AVERAGECOST + PURCHASED INTEREST
  ExtensionAttribute=AmountToFund
  Format=
  GroupLabel=FieldCustom
  LabelList=AMOUNT TO FUND
  Name=Amount to Fund


  ApprovalSystem =
  ColumnAppearance=Total_background
  Description=Approval System
  ExtensionAttribute=ApprovalSystem
  GroupLabel=FieldCustom
  Label=ApprovalSystem
  Name=ApprovalSystem


  ARGNO =
  Access=ReadOnly
  Description=1 means Debit, 2 means Credit
  ExtensionAttribute=ARGNO
  Format=
  GroupLabel=FieldCustom
  LabelList=ARGNO
  Name=ARGNO


  AskValue =
  Access=ReadOnly
  Description=Ask Price from Price Entry (Latest)
  ExtensionAttribute=AskValue
  Format=
  GroupLabel=FieldCustom
  LabelList=Ask
  Name=Ask


  ASSETID =
  Access=ReadOnly
  Description=
  ExtensionAttribute=ASSETID
  Format=
  GroupLabel=FieldCustom
  LabelList=ASSETID
  Name=ASSETID


  AveragePrice =
  Access=ReadOnly
  Description=Average Price per Trader
  ExtensionAttribute=AveragePrice
  Format=
  GroupLabel=FieldCustom
  LabelList=Average Price
  Name=Average Price


  AverageYield =
  Description=Average Yield
  ExtensionAttribute=AverageYield
  Format=
  GroupLabel=FieldCustom
  LabelList=Average Yield
  Name=Average Yield


  Balance =
  ColumnAppearance=Total_background
  Description=The Balance Amount in Total of Amount + AIP
  ExtensionAttribute=Balance
  GroupLabel=FieldCustom
  Label=Balance
  Name=Balance


  BalanceCustom =
  ColumnAppearance=Total_background
  Description=The Balance Amount in Total of Amount + AIP
  ExtensionAttribute=BalanceCustom
  GroupLabel=FieldCustom
  Label=Balance
  Name=Balance


  BaseCurrCR =
  ColumnAppearance=Total_background
  Description=
  ExtensionAttribute=BaseCurrCR
  GroupLabel=FieldCustom
  Label=BaseCurrCR
  Name=BaseCurrCR


  BaseCurrDR =
  ColumnAppearance=Total_background
  Description=
  ExtensionAttribute=BaseCurrDR
  GroupLabel=FieldCustom
  Label=BaseCurrDR
  Name=BaseCurrDR


  baseRateSpotPrice =
  Description=Spot price for selected products
  ExtensionAttribute=baseRateSpotPrice
  GroupLabel=FieldCustom
  LabelList=baseRate
  Name=baseRate


  BebanBunga =
  Description=Beban Bunga (eqv. in IDR * Interest Rate) * (Jumlah Hari / 360) / 100
  ExtensionAttribute=BebanBunga
  GroupLabel=FieldCustom
  LabelList=Beban Bunga
  Name=Beban Bunga


  BeginningBalance =
  Access=ReadOnly
  Description=The amount of capital / asset at the start of new period
  ExtensionAttribute=BeginningBalance
  Format=
  GroupLabel=FieldCustom
  LabelList=Beginning Balance
  Name=Beginning Balance


  BEIND =
  Access=ReadOnly
  Description=Indicator original value or equivalent currency. 0 = IDR, which is Original Currency.
  ExtensionAttribute=BEIND
  Format=
  GroupLabel=FieldCustom
  LabelList=BEIND
  Name=BEIND


  Beneficiary =
  Access=ReadOnly
  Description=
  ExtensionAttribute=Beneficiary
  Format=
  GroupLabel=FieldCustom
  LabelList=Beneficiary
  Name=Beneficiary


  BIDHighestHierarchy =
  Description=BID Highest Hierarchy
  ExtensionAttribute=BIDHighestHierarchy
  GroupLabel=FieldCustom
  LabelList=BID Highest Hierarchy
  Name=BID Highest Hierarchy


  BidPriceBGN =
  ColumnAppearance=Total_background
  Description=Control Sheet MTM
  ExtensionAttribute=BidPriceBGN
  Format=
  GroupLabel=FieldCustom
  Label=Bid Price BGN
  Name=Bid Price BGN


  BidPriceBVAL =
  ColumnAppearance=Total_background
  Description=Control Sheet MTM
  ExtensionAttribute=BidPriceBVAL
  Format=
  GroupLabel=FieldCustom
  Label=Bid Price BVAL
  Name=Bid Price BVAL


  BidPriceEXCH =
  ColumnAppearance=Total_background
  Description=Control Sheet MTM
  ExtensionAttribute=BidPriceEXCH
  Format=
  GroupLabel=FieldCustom
  Label=Bid Price EXCH
  Name=Bid Price EXCH


  BIDSourceBGN =
  Description=BID Source BGN
  ExtensionAttribute=BIDSourceBGN
  GroupLabel=FieldCustom
  LabelList=BID Source BGN
  Name=BID Source BGN


  BIDSourceBIS4 =
  Description=BID Source BIS4
  ExtensionAttribute=BIDSourceBIS4
  GroupLabel=FieldCustom
  LabelList=BID Source BIS4
  Name=BID Source BIS4


  BIDSourceEXCH =
  Description=BID Source EXCH
  ExtensionAttribute=BIDSourceEXCH
  GroupLabel=FieldCustom
  LabelList=BID Source EXCH
  Name=BID Source EXCH


  BIDSourceIBPA =
  Description=BID Source IBPA
  ExtensionAttribute=BIDSourceIBPA
  GroupLabel=FieldCustom
  LabelList=BID Source IBPA
  Name=BID Source IBPA


  BIDSourceMarkToModel =
  Description=BID Source Mark to Model
  ExtensionAttribute=BIDSourceMarkToModel
  GroupLabel=FieldCustom
  LabelList=BID Source Mark to Model
  Name=BID Source Mark to Model


  BIDSourceNAV =
  Description=BID Source NAV
  ExtensionAttribute=BIDSourceNAV
  GroupLabel=FieldCustom
  LabelList=BID Source NAV
  Name=BID Source NAV


  BIDSourceVAL =
  Description=BID Source VAL
  ExtensionAttribute=BIDSourceBVAL
  GroupLabel=FieldCustom
  LabelList=BID Source VAL
  Name=BID Source VAL


  BidValue =
  Access=ReadOnly
  Description=Bid Price from Price Entry (Latest)
  ExtensionAttribute=BidValue
  Format=
  GroupLabel=FieldCustom
  LabelList=Bid
  Name=Bid


  BIS4 =
  Access=ReadOnly
  Description=The source of Mark to Market (bid price).
  ExtensionAttribute=BIS4
  Format=
  GroupLabel=FieldCustom
  LabelList=+BIS4
  Name=+BIS4


  Blank1 =
  ColumnAppearance=Total_background
  Description=Blank Field
  ExtensionAttribute=Blank1
  GroupLabel=FieldCustom
  Label=Blank1
  Name=Blank1


  Blank2 =
  ColumnAppearance=Total_background
  Description=Blank Field
  ExtensionAttribute=Blank2
  GroupLabel=FieldCustom
  Label=Blank2
  Name=Blank2


  BMRISell =
  Description=Bank Mandiri Sell amount
  ExtensionAttribute=BMRISell
  Format=
  GroupLabel=FieldCustom
  LabelList=BMRI Sell
  Name=BMRI Sell


  BookFilter =
  Access=ReadOnly
  Description=INLQINLQ, BBRSBBRS, BBCSBBCS
  ExtensionAttribute=BookFilter
  Format=
  GroupLabel=FieldCustom
  LabelList=Book
  Name=Book


  BookValueDeprec =
  Description=Original Cost - Deprec
  ExtensionAttribute=BookValueDeprec
  GroupLabel=FieldCustom
  Label=Book Value
  Name=BookValueDeprec


  BookValueIDR =
  Description=The price of book value that equals to IDR.
  ExtensionAttribute=BookValueIDR
  Format=float
  GroupLabel=FieldCustom
  Label=Book Value IDR
  Name=Book Value IDR


  BorrowerCode =
  Access=ReadOnly
  Description=
  ExtensionAttribute=BorrowerCode
  Format=
  GroupLabel=FieldCustom
  LabelList=Borrower Code
  Name=Borrower Code


  BorrowerName =
  Access=ReadOnly
  Description=
  ExtensionAttribute=BorrowerName
  Format=
  GroupLabel=FieldCustom
  LabelList=Borrower Name
  Name=Borrower Name


  BR_PartyType =
  Description=BR01 : else BR9: party type ""internal"
  ExtensionAttribute=BR_PartyType
  Format=
  GroupLabel=FieldCustom
  Label=BR_PartyType
  Name=BR_PartyType


  BranchCode =
  Access=ReadOnly
  Description=Debit or Credit Indicator
  ExtensionAttribute=BranchCode
  Format=
  GroupLabel=FieldCustom
  LabelList=BRANCH CODE
  Name=BRANCH CODE


  BreachTenor =
  ColumnAppearance=Total_background
  Description=Breach Tenor Yes/No
  ExtensionAttribute=BreachTenor
  GroupLabel=FieldCustom
  Label=BreachTenor
  Name=BreachTenor


  BrokerCorrespondentBank =
  Description=Broker Account (Acq)
  ExtensionAttribute=BrokerCorrespondentBank
  GroupLabel=FieldCustom
  Name=BrokerCorrespondentBank
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  BrokerFeeIDR =
  Description=Broker Fee IDR
  ExtensionAttribute=BrokerFeeIDR
  Format=
  GroupLabel=FieldCustom
  LabelList=Broker Fee IDR
  Name=Broker Fee IDR


  BrokerFeeUSD =
  Description=Broker Fee USD
  ExtensionAttribute=BrokerFeeUSD
  Format=
  GroupLabel=FieldCustom
  LabelList=Broker Fee USD
  Name=Broker Fee USD


  BRPRCINDTE =
  Access=ReadOnly
  Description=Create time date only
  ExtensionAttribute=BRPRCINDTE
  Format=
  GroupLabel=FieldCustom
  LabelList=BRPRCINDTE
  Name=BRPRCINDTE


  BUC =
  ColumnAppearance=Total_background
  Description=(Empty data record, but the fields still needed).
  ExtensionAttribute=BUC
  Format=
  GroupLabel=FieldCustom
  Label=BUC
  Name=BUC


  BuyAmountCustom =
  ColumnAppearance=
  Description=The amount of buy transaction.
  ExtensionAttribute=BuyAmountCustom
  GroupLabel=FieldCustom
  Name=Buy Amount


  BuyAmountCustom2 =
  ColumnAppearance=
  Description=The amount of buy transaction.
  ExtensionAttribute=BuyAmountCustom2
  GroupLabel=FieldCustom
  Name=Buy Amount 2


  BuyerOrSeller =
  Access=ReadOnly
  Description=Position as Seller/Buyer: Buy: Buyer, Sell: Seller.
  ExtensionAttribute=BuyerOrSeller
  Format=
  GroupLabel=FieldCustom
  LabelList=peranPelapor
  Name=Peran Pelapor


  BuySellJournal =
  Description=Buy or Sell for Journal Sheet.
  ExtensionAttribute=BuySellJournal
  Format=
  GroupLabel=FieldCustom
  LabelList=B/S
  Name=Bought or Sold Journal


  CancelOrAmendDate =
  Access=ReadOnly
  Description=The date of canceling/amending transaction
  ExtensionAttribute=CancelOrAmendDate
  Format=
  GroupLabel=FieldCustom
  LabelList=Cancel/Amend Date
  Name=Cancel/Amend Date


  CapitalGain =
  Description=(Face Value * Trade Price /100) - Acquisition Amount.
  ExtensionAttribute=CapitalGain
  Format=
  GroupLabel=FieldCustom
  LabelList=CapitalGain
  Name=Capital Gain


  CapitalGainTax =
  Description=Capital Gain Tax
  ExtensionAttribute=CapitalGainTax
  Format=
  GroupLabel=FieldCustom
  LabelList=CapitalGainTax
  Name=Capital Gain Tax


  CasfhlowFarAmount =
  ColumnAppearance=Total_background_FarAmount
  Description=Far Amount is the far amount of the transaction (Premium in FA)
  ExtensionAttribute=CashflowFarAmount
  Format=
  GroupLabel=FieldCustom
  Label=CashflowFarAmount
  Name=CashflowFarAmount


  Cashflow10m =
  Description=Show how much cashflow that falls 10m
  ExtensionAttribute=Cashflow10m
  Format=
  GroupLabel=FieldCustom
  LabelList=Cashflow10m
  Name=Cashflow10m


  Cashflow11m =
  Description=Show how much cashflow that falls 11m
  ExtensionAttribute=Cashflow11m
  Format=
  GroupLabel=FieldCustom
  LabelList=Cashflow11m
  Name=Cashflow11m


  Cashflow12m =
  Description=Show how much cashflow that falls 12m
  ExtensionAttribute=Cashflow12m
  Format=
  GroupLabel=FieldCustom
  LabelList=Cashflow12m
  Name=Cashflow12m


  Cashflow1d =
  Description=Show how much cashflow that falls 1d
  ExtensionAttribute=Cashflow1d
  Format=
  GroupLabel=FieldCustom
  LabelList=Cashflow1d
  Name=Cashflow1d


  Cashflow1m =
  Description=Show how much cashflow that falls 1m
  ExtensionAttribute=Cashflow1m
  Format=
  GroupLabel=FieldCustom
  LabelList=Cashflow1m
  Name=Cashflow1m


  Cashflow2d =
  Description=Show how much cashflow that falls 2d
  ExtensionAttribute=Cashflow2d
  Format=
  GroupLabel=FieldCustom
  LabelList=Cashflow2d
  Name=Cashflow2d


  Cashflow2m =
  Description=Show how much cashflow that falls 2m
  ExtensionAttribute=Cashflow2m
  Format=
  GroupLabel=FieldCustom
  LabelList=Cashflow2m
  Name=Cashflow2m


  Cashflow2y =
  Description=Show how much cashflow that falls 2y
  ExtensionAttribute=Cashflow2y
  Format=
  GroupLabel=FieldCustom
  LabelList=Cashflow2y
  Name=Cashflow2y


  Cashflow3d =
  Description=Show how much cashflow that falls 3d
  ExtensionAttribute=Cashflow3d
  Format=
  GroupLabel=FieldCustom
  LabelList=Cashflow3d
  Name=Cashflow3d


  Cashflow3m =
  Description=Show how much cashflow that falls 3m
  ExtensionAttribute=Cashflow3m
  Format=
  GroupLabel=FieldCustom
  LabelList=Cashflow3m
  Name=Cashflow3m


  Cashflow3y =
  Description=Show how much cashflow that falls 3y
  ExtensionAttribute=Cashflow3y
  Format=
  GroupLabel=FieldCustom
  LabelList=Cashflow3y
  Name=Cashflow3y


  Cashflow4d =
  Description=Show how much cashflow that falls 4d
  ExtensionAttribute=Cashflow4d
  Format=
  GroupLabel=FieldCustom
  LabelList=Cashflow4d
  Name=Cashflow4d


  Cashflow4m =
  Description=Show how much cashflow that falls 4m
  ExtensionAttribute=Cashflow4m
  Format=
  GroupLabel=FieldCustom
  LabelList=Cashflow4m
  Name=Cashflow4m


  Cashflow4y =
  Description=Show how much cashflow that falls 4y
  ExtensionAttribute=Cashflow4y
  Format=
  GroupLabel=FieldCustom
  LabelList=Cashflow4y
  Name=Cashflow4y


  Cashflow5d =
  Description=Show how much cashflow that falls 5d
  ExtensionAttribute=Cashflow5d
  Format=
  GroupLabel=FieldCustom
  LabelList=Cashflow5d
  Name=Cashflow5d


  Cashflow5m =
  Description=Show how much cashflow that falls 5m
  ExtensionAttribute=Cashflow5m
  Format=
  GroupLabel=FieldCustom
  LabelList=Cashflow5m
  Name=Cashflow5m


  Cashflow5y =
  Description=Show how much cashflow that falls 5y
  ExtensionAttribute=Cashflow5y
  Format=
  GroupLabel=FieldCustom
  LabelList=Cashflow5y
  Name=Cashflow5y


  Cashflow6d =
  Description=Show how much cashflow that falls 6d
  ExtensionAttribute=Cashflow6d
  Format=
  GroupLabel=FieldCustom
  LabelList=Cashflow6d
  Name=Cashflow6d


  Cashflow6m =
  Description=Show how much cashflow that falls 6m
  ExtensionAttribute=Cashflow6m
  Format=
  GroupLabel=FieldCustom
  LabelList=Cashflow6m
  Name=Cashflow6m


  Cashflow6y =
  Description=Show how much cashflow that falls 6y
  ExtensionAttribute=Cashflow6y
  Format=
  GroupLabel=FieldCustom
  LabelList=Cashflow6y
  Name=Cashflow6y


  Cashflow7d =
  Description=Show how much cashflow that falls 7d
  ExtensionAttribute=Cashflow7d
  Format=
  GroupLabel=FieldCustom
  LabelList=Cashflow7d
  Name=Cashflow7d


  Cashflow7m =
  Description=Show how much cashflow that falls 7m
  ExtensionAttribute=Cashflow7m
  Format=
  GroupLabel=FieldCustom
  LabelList=Cashflow7m
  Name=Cashflow7m


  Cashflow7y =
  Description=Show how much cashflow that falls 7y
  ExtensionAttribute=Cashflow7y
  Format=
  GroupLabel=FieldCustom
  LabelList=Cashflow7y
  Name=Cashflow7y


  Cashflow8m =
  Description=Show how much cashflow that falls 8m
  ExtensionAttribute=Cashflow8m
  Format=
  GroupLabel=FieldCustom
  LabelList=Cashflow8m
  Name=Cashflow8m


  Cashflow9m =
  Description=Show how much cashflow that falls 9m
  ExtensionAttribute=Cashflow9m
  Format=
  GroupLabel=FieldCustom
  LabelList=Cashflow9m
  Name=Cashflow9m


  CashflowFA =
  Access=ReadOnly
  Description=Debit or Credit Indicator
  ExtensionAttribute=CashflowFA
  Format=
  GroupLabel=FieldCustom
  LabelList=CashFlow
  Name=CashFlow


  CashflowFarAmountMoneyFlow =
  ColumnAppearance=Total_background_FarAmount
  Description=Far Amount is the far amount of the transaction (Premium in FA)
  ExtensionAttribute=CashflowFarAmountMoneyFlow
  Format=
  GroupLabel=FieldCustom
  Label=CashflowFarAmount
  Name=CashflowFarAmount


  CashflowToday =
  Description=Show how much cashflow that falls Today
  ExtensionAttribute=CashflowToday
  Format=
  GroupLabel=FieldCustom
  LabelList=CashflowToday
  Name=CashflowToday


  CashY =
  ColumnAppearance=Total_background
  Description=CashY
  ExtensionAttribute=CashY
  GroupLabel=FieldCustom
  Label=CashY
  Name=CashY


  CAT =
  Access=ReadOnly
  Description=
  ExtensionAttribute=CAT
  Format=
  GroupLabel=FieldCustom
  LabelList=CAT
  Name=CAT


  CCS =
  Description=
  ExtensionAttribute=CCS
  GroupLabel=FieldCustom
  Label=CCS
  Name=CCS


  CCYRate =
  ColumnAppearance=Total_background
  Description=CCY Rate
  ExtensionAttribute=CCYRate
  GroupLabel=FieldCustom
  Label=CCYRate
  Name=CCYRate


  CCYSACCT =
  Description=CCY acquirer account.
  ExtensionAttribute=CCYSACCT
  Format=
  GroupLabel=FieldCustom
  LabelList=CCYSACCT
  Name=CCYSACCT


  CEM_Rule_Limit =
  ColumnAppearance=Total_background
  Description=Counterparty CEM Rule Limit (From "Standard_CEM")
  ExtensionAttribute=LimitCpty
  GroupLabel=FieldCustom
  Label=Cpty CEM Rule Limit
  Name=Cpty CEM Rule Limit


  CFCITZ =
  Access=ReadOnly
  Description=
  ExtensionAttribute=CFCITZ
  Format=
  GroupLabel=FieldCustom
  LabelList=CFCITZ
  Name=CFCITZ


  CFCOUN =
  Access=ReadOnly
  Description=
  ExtensionAttribute=CFCOUN
  Format=
  GroupLabel=FieldCustom
  LabelList=CFCOUN
  Name=CFCOUN


  CFRESD =
  Access=ReadOnly
  Description=
  ExtensionAttribute=CFRESD
  Format=
  GroupLabel=FieldCustom
  LabelList=CFRESD
  Name=CFRESD


  ChargesDelay =
  ColumnAppearance=Total_background
  Description=The amount charged for the delay
  ExtensionAttribute=ChargesDelay
  GroupLabel=FieldCustom
  Label=Charges
  Name=Charges


  Checker =
  Access=ReadOnly
  Description=Calculation result, where value difference will be shown based on source used, compare to its factor, ex. When using BGN will compare to Price.
  ExtensionAttribute=Checker
  Format=
  GroupLabel=FieldCustom
  LabelList=Checker
  Name=Checker


  ClassificationofSecurities =
  ColumnAppearance=Total_background
  Description=The classification of securities: HTM, AFS, TRD.
  ExtensionAttribute=ClassificationofSecurities
  Format=
  GroupLabel=FieldCustom
  Label=Classification of Securities
  Name=Classification of Securities


  closedLots =
  Access=ReadOnly
  Description=closed Lots.
  ExtensionAttribute=closedLots
  Format=
  GroupLabel=FieldCustom
  LabelList=closed Lots
  Name=closed Lots


  ClosingBalance =
  Access=ReadOnly
  Description=if C10000, then 10000, Vice Versa.
  ExtensionAttribute=ClosingBalance
  Format=
  GroupLabel=FieldCustom
  LabelList=ClosingBalance
  Name=ClosingBalance


  Code =
  Access=ReadOnly
  Description=The code of the currency. Static data currency code.
  ExtensionAttribute=Code
  Format=
  GroupLabel=FieldCustom
  LabelList=Code
  Name=Code


  CODE =
  Access=ReadOnly
  Description=Accounting event code
  ExtensionAttribute=CODE
  Format=
  GroupLabel=FieldCustom
  LabelList=CODE
  Name=CODE


  CodeDesc =
  Access=ReadOnly
  Description=The description to describe the transaction
  ExtensionAttribute=CodeDesc
  Format=
  GroupLabel=FieldCustom
  LabelList=Code Desc
  Name=Code Desc


  Collateral =
  Access=ReadOnly
  Description=Securities ID of transaction from OPICS
  ExtensionAttribute=Collateral
  Format=
  GroupLabel=FieldCustom
  LabelList=Collateral
  Name=Collateral


  CollateralAmount_Custom =
  Description=The amount of collateral
  ExtensionAttribute=CollateralAmount
  Format=
  GroupLabel=FieldCustom
  LabelList=Collateral Amount
  Name=Collateral Amount


  CollateralCurrency =
  Access=ReadOnly
  Description=The currency of the collateral
  ExtensionAttribute=CollateralCurrency
  Format=
  GroupLabel=FieldCustom
  LabelList=Collateral Currency
  Name=Collateral Currency


  CollateralDueDate =
  Access=ReadOnly
  Description=The maturity of collateral
  ExtensionAttribute=CollateralDueDate
  Format=
  GroupLabel=FieldCustom
  LabelList=Collateral Due Date
  Name=Collateral Due Date


  CollateralIssuer =
  Description=Issuer of Collateral Or Bonds
  ExtensionAttribute=CollateralIssuer
  Format=
  GroupLabel=FieldCustom
  LabelList=Issuer
  Name=CollateralIssuer


  CollateralStatus =
  Access=ReadOnly
  Description=Available for Sale
  ExtensionAttribute=CollateralStatus
  Format=
  GroupLabel=FieldCustom
  LabelList=Collateral Status
  Name=Collateral Status


  CollateralType =
  Access=ReadOnly
  Description=Available for Sale
  ExtensionAttribute=CollateralType
  Format=
  GroupLabel=FieldCustom
  LabelList=Collateral Type
  Name=Collateral Type


  CollateralYield =
  Description=Yield of the Collateral
  ExtensionAttribute=CollateralYield
  Format=
  GroupLabel=FieldCustom
  LabelList=CollateralYield
  Name=CollateralYield


  COMIDB =
  Access=ReadOnly
  Description=
  ExtensionAttribute=COMIDB
  Format=
  GroupLabel=FieldCustom
  LabelList=COMIDB
  Name=COMIDB


  COMIDC =
  Access=ReadOnly
  Description=
  ExtensionAttribute=COMIDC
  Format=
  GroupLabel=FieldCustom
  LabelList=COMIDC
  Name=COMIDC


  Commission =
  Description=Commission from Additional Payment
  ExtensionAttribute=Commission
  Format=
  GroupLabel=FieldCustom
  LabelList=Commission
  Name=Commission


  COMMPROCAMT =
  Access=ReadOnly
  Description=
  ExtensionAttribute=COMMPROCAMT
  Format=
  GroupLabel=FieldCustom
  LabelList=COMMPROCAMT
  Name=COMMPROCAMT


  Conclusion =
  ColumnAppearance=Total_background
  Description=Conclusion
  ExtensionAttribute=Conclusion
  GroupLabel=FieldCustom
  Label=Conclusion
  Name=Conclusion


  Conclusion2 =
  ColumnAppearance=Total_background
  Description=Conclusion2
  ExtensionAttribute=Conclusion2
  GroupLabel=FieldCustom
  Label=Conclusion 2
  Name=Conclusion 2


  ContractValNetAgree =
  Access=ReadOnly
  Description=Fair value deducts market value
  ExtensionAttribute=ContractValNetAgree
  Format=
  GroupLabel=FieldCustom
  LabelList=Contract Val
  Name=Contract Val


  CorpSpreadAmount =
  Access=ReadOnly
  Description=Spread that equivalent to IDR.
  ExtensionAttribute=CorpSpreadAmount
  Format=
  GroupLabel=FieldCustom
  LabelList=CorpSpreadAmount
  Name=CorpSpreadAmount


  CostAmtRepo =
  Description=The end cash of the repo transaction.
  ExtensionAttribute=EndCashRepo
  Format=
  GroupLabel=FieldCustom
  LabelList=CostAmtRepo
  Name=CostAmtRepo


  CostBaseAmt =
  Description=End Cash Value on IDR Currency
  ExtensionAttribute=EndCashIdr
  Format=
  GroupLabel=FieldCustom
  LabelList=CostBaseAmt
  Name=CostBaseAmt


  CounterAmount =
  Description=The counter of amount.
  ExtensionAttribute=CounterAmount
  Format=
  GroupLabel=FieldCustom
  Label=Counter Amount
  Name=Counter Amount


  CounterpartyCountryIND =
  Access=ReadOnly
  Description=1 for non-ID, 2 for ID.
  ExtensionAttribute=CounterpartyCountryIND
  Format=
  GroupLabel=FieldCustom
  LabelList=transaksiPihakAsing
  Name=Transaksi Pihak Asing


  CounterpartyCustom =
  Access=ReadOnly
  Description=FullName + Account.
  ExtensionAttribute=CounterpartyCustom
  Format=
  GroupLabel=FieldCustom
  LabelList=CounterParty
  Name=CounterParty


  CounterpartyType =
  Access=ReadOnly
  Description=Third Party, Subsidiary, KS
  ExtensionAttribute=CounterpartyType
  GroupLabel=FieldCustom
  LabelList=CounterpartyType
  Name=CounterpartyType


  CountryLimit =
  Access=ReadOnly
  Description=
  ExtensionAttribute=CountryLimit
  Format=
  GroupLabel=FieldCustom
  LabelList=Country Limit
  Name=Country Limit


  Coupon_SB_Dimiliki =
  Description=
  ExtensionAttribute=Coupon_SB_Dimiliki
  GroupLabel=FieldCustom
  Label=Coupon SB Dimiliki
  Name=Coupon SB Dimiliki


  CPMainCcy =
  ColumnAppearance=Total_background
  Description=Face Call or Put Main Currency.
  ExtensionAttribute=CPMainCcy
  Format=
  GroupLabel=FieldCustom
  Label=C/P MainCcy
  Name=C/P MainCcy


  CPMoneyCcy =
  ColumnAppearance=Total_background
  Description=Face Call or Put Money Currency. Opposite to C/P Main Currency.
  ExtensionAttribute=CPMoneyCcy
  Format=
  GroupLabel=FieldCustom
  Label=C/P MoneyCcy
  Name=C/P MoneyCcy


  CreateDate =
  Access=ReadOnly
  Description=Create Date
  ExtensionAttribute=CreateDate
  Format=
  GroupLabel=FieldCustom
  LabelList=Create Date
  Name=Create Date


  CreateDateJournal =
  Access=ReadOnly
  Description=Available for Sale
  ExtensionAttribute=CreateDateJournal
  Format=
  GroupLabel=FieldCustom
  LabelList=Create Date Journal
  Name=Create Date Journal


  CreateTimeJournal =
  Access=ReadOnly
  Description=Available for Sale
  ExtensionAttribute=CreateTimeJournal
  Format=
  GroupLabel=FieldCustom
  LabelList=Create Time Journal
  Name=Create Time Journal


  CreditAmount =
  Access=ReadOnly
  Description=
  ExtensionAttribute=CreditAmount
  Format=
  GroupLabel=FieldCustom
  LabelList=Credit Amount
  Name=Credit Amount


  CrEquivalent %Utilization =
  Access=ReadOnly
  Description=The percebtage of utilization of credit equivalent limit
  ExtensionAttribute=CrEquivalentPercentageUtilization
  Format=
  GroupLabel=FieldCustom
  LabelList=Credit Equivalent % Utilization
  Name=Credit Equivalent % Utilization


  CrEquivalent 1DayChange =
  Access=ReadOnly
  Description=Utilization today subtracted by utilization previos position
  ExtensionAttribute=CrEquivalent1DayChange
  Format=
  GroupLabel=FieldCustom
  LabelList=Credit Equivalent 1 Day Change
  Name=Credit Equivalent 1 Day Change


  CrEquivalentLimit =
  Access=ReadOnly
  Description=The credit equivalent limit of customer
  ExtensionAttribute=CrEquivalentLimit
  Format=
  GroupLabel=FieldCustom
  LabelList=Credit Equivalent Limit
  Name=Credit Equivalent Limit


  CrEquivalentUtilization =
  Access=ReadOnly
  Description=The utilization of credit equivalent limit
  ExtensionAttribute=CrEquivalentUtilization
  Format=
  GroupLabel=FieldCustom
  LabelList=Credit Equivalent Utilization
  Name=Credit Equivalent Utilization


  CrossRateBM =
  Description=Calculation for cross rate BM
  ExtensionAttribute=CrossRateBM
  Format=
  GroupLabel=FieldCustom
  LabelList=CrossRateBM
  Name=CrossRateBM


  crttime_adj =
  Description=adjusted create time for one reporting
  ExtensionAttribute=crttime_adj
  Format=
  GroupLabel=FieldCustom
  LabelList=CrtTime
  Name=CrtTime


  CS01 =
  ColumnAppearance=Total_background
  Description=To inform the utilisation in CS01
  ExtensionAttribute=CS01
  GroupLabel=FieldCustom
  Label=CS01
  Name=CS01


  CTRSACCT =
  Description=CTR acquirer account.
  ExtensionAttribute=CTRSACCT
  Format=
  GroupLabel=FieldCustom
  LabelList=CTRSACCT
  Name=CTRSACCT


  CurrAgainstSGD =
  ColumnAppearance=Total_background
  Description=All rate in percentage for each currency against SGD
  ExtensionAttribute=CurrAgainstUSD
  GroupLabel=FieldCustom
  Label=Currency Against SGD
  Name=Currency Against SGD


  CurrAgainstUSD =
  ColumnAppearance=Total_background
  Description=All rate in percentage for each currency against USD
  ExtensionAttribute=CurrAgainstUSD
  GroupLabel=FieldCustom
  Label=Currency Against USD
  Name=Currency Against USD


  CurrBuyAudit =
  Access=ReadOnly
  Description=if FX and Buy will get currency
  ExtensionAttribute=CurrBuyAudit
  Format=
  GroupLabel=FieldCustom
  LabelList=Curr (1)
  Name=Curr (1)


  CurrencyCR =
  ColumnAppearance=Total_background
  Description=
  ExtensionAttribute=CurrencyCR
  GroupLabel=FieldCustom
  Label=CurrencyCR
  Name=CurrencyCR


  CurrencyDR =
  ColumnAppearance=Total_background
  Description=
  ExtensionAttribute=CurrencyDR
  GroupLabel=FieldCustom
  Label=CurrencyDR
  Name=CurrencyDR


  CurrencyMTMSB =
  Access=ReadOnly
  Description=Available for Sale
  ExtensionAttribute=CurrencyMTMSB
  Format=
  GroupLabel=FieldCustom
  LabelList=CURRENCY
  Name=CURRENCY


  CurrencyUpdateDate =
  Access=ReadOnly
  Description=
  ExtensionAttribute=CurrencyUpdateDate
  Format=
  GroupLabel=FieldCustom
  LabelList=Currency Update Date
  Name=Currency Update Date


  CurrSellAudit =
  Access=ReadOnly
  Description=if FX and Sell will get currency
  ExtensionAttribute=CurrSellAudit
  Format=
  GroupLabel=FieldCustom
  LabelList=Curr (2)
  Name=Curr (2)


  CustomerCategory =
  Access=ReadOnly
  Description=The name of customer category of transaction
  ExtensionAttribute=CustomerCategory
  Format=
  GroupLabel=FieldCustom
  LabelList=Customer Category
  Name=Customer Category


  CustomerName =
  Access=ReadOnly
  Description=The customerÃ¢ÂÂs name of transaction
  ExtensionAttribute=CustomerName
  Format=
  GroupLabel=FieldCustom
  LabelList=Customer Name
  Name=Customer Name


  DailyInterest =
  Description=If Days to Maturity is negative then 0. Else, return Face Value times Interest Rate at Trade Time divided by 100 and divided by 360.
  ExtensionAttribute=DailyInterest
  Format=SixDecimalDetailedPercent
  GroupLabel=FieldCustom
  LabelList=Daily Int
  Name=Daily Interest


  DataType =
  Description=If Buy, then Blank. If Sell, then 2.
  ExtensionAttribute=DataType
  Format=
  GroupLabel=FieldCustom
  LabelList=DataType
  Name=Data Type


  DateNow =
  Access=ReadOnly
  Description=
  ExtensionAttribute=DateNow
  Format=
  GroupLabel=FieldCustom
  LabelList=DateNow
  Name=DateNow


  DateRange =
  ColumnAppearance=Total_background
  Description=Date Range
  ExtensionAttribute=DateRange
  GroupLabel=FieldCustom
  Label=DateRange
  Name=Date


  DatesPosition =
  Access=ReadOnly
  Description=Dates using position Val.
  ExtensionAttribute=DatesPosition
  Format=
  GroupLabel=FieldCustom
  LabelList=Dates
  Name=Dates


  DaysDelay =
  Description=SettlementDate - TradeDate
  ExtensionAttribute=DaysDelay
  Format=
  GroupLabel=FieldCustom
  LabelList=Days Delay
  Name=Days Delay


  DaysToMaturity =
  Description=Date difference between End Date (Maturity Date) and Today.
  ExtensionAttribute=DaysToMaturity
  GroupLabel=FieldCustom
  LabelList=Days to Maturity
  Name=Days to Maturity


  DayToExpired =
  Access=ReadOnly
  Description=The length of time remaining before the transaction expires in days
  ExtensionAttribute=DayToExpired
  Format=
  GroupLabel=FieldCustom
  LabelList=Days to Expiration
  Name=Days to Expiration


  DCIND =
  Access=ReadOnly
  Description=Debet/Credit transaction: Default 'D'
  ExtensionAttribute=DCIND
  Format=
  GroupLabel=FieldCustom
  LabelList=DCIND
  Name=DCIND


  DebitAmount =
  Access=ReadOnly
  Description=
  ExtensionAttribute=DebitAmount
  Format=
  GroupLabel=FieldCustom
  LabelList=Debit Amount
  Name=Debit Amount


  Delta_ExchangeRate =
  Access=ReadOnly
  Description=The delta compared to previous exchange rate.
  ExtensionAttribute=Delta_ExchangeRate
  Format=
  GroupLabel=FieldCustom
  LabelList=Delta Exchange Rate
  Name=Delta Exchange Rate


  DeltaCheck =
  ColumnAppearance=Total_background
  Description=Check whether YDelta% has value or not.
  ExtensionAttribute=DeltaCheck
  Format=
  GroupLabel=FieldCustom
  Label=Delta Check
  Name=Delta Check


  DeltaThresholdValue =
  Access=ReadOnly
  Description=Delta Threshold Value
  ExtensionAttribute=DeltaThresholdValue
  Format=
  GroupLabel=FieldCustom
  LabelList=DeltaThresholdValue
  Name=DeltaThresholdValue


  DeltaUtilizationPercentage =
  Description=Standard Delta Utilization Percentage
  ExtensionAttribute=DeltaUtilizationPercentage
  Format=
  GroupLabel=FieldCustom
  LabelList=DeltaUtilizationPercentage
  Name=DeltaUtilizationPercentage


  DENOM =
  Access=ReadOnly
  Description=
  ExtensionAttribute=DENOM
  Format=
  GroupLabel=FieldCustom
  LabelList=DENOM
  Name=DENOM


  Dept =
  Access=ReadOnly
  Description=Treasury Department
  ExtensionAttribute=Dept
  Format=
  GroupLabel=FieldCustom
  LabelList=Dept
  Name=Dept


  DerivativesPayables =
  Access=ReadOnly
  Description=Type of Securities: The sum of the negative values
  ExtensionAttribute=DerivativesPayables
  Format=
  GroupLabel=FieldCustom
  LabelList=Derivatives Payables
  Name=Derivatives Payables


  DerivativesReceivables =
  Access=ReadOnly
  Description=Type of Securities: The sum of the positive replacement values of all itÃ¢ÂÂs over the-counter derivatives contracts
  ExtensionAttribute=DerivativesReceivables
  Format=
  GroupLabel=FieldCustom
  LabelList=Derivatives Receivables
  Name=Derivatives Receivables


  Desc =
  Access=ReadOnly
  Description=Combination of <product><.><Trade Id></><Product Type>/
  ExtensionAttribute=Desc
  Format=
  GroupLabel=FieldCustom
  LabelList=Desc
  Name=Desc


  Descr =
  Access=ReadOnly
  Description=BUNGA PINJAMAN LAINNYA DITM LAINNYA
  ExtensionAttribute=Descr
  Format=
  GroupLabel=FieldCustom
  LabelList=Descr
  Name=Descr


  Descr_PBC =
  Description=Descr For Bo01
  ExtensionAttribute=Descr_PBC
  GroupLabel=FieldCustom
  LabelList=Descr_PBC
  Name=Descr_PBC


  DescriptionUnderlying =
  ColumnAppearance=Total_background
  Description=Field custom to define underlying condition
  ExtensionAttribute=DescriptionUnderlying
  GroupLabel=FieldCustom
  Label=Description Underlying
  Name=Description Underlying


  DescUnd =
  Description=Description Underlying
  ExtensionAttribute=DescUnd
  Format=
  GroupLabel=FieldCustom
  LabelList=DescUnd
  Name=DescUnd


  DeskripsiSandi =
  Description=Deskripsi Sandi
  ExtensionAttribute=DeskripsiSandi
  Format=
  GroupLabel=FieldCustom
  LabelList=Deskripsi Sandi
  Name=Deskripsi Sandi


  DiaryReason =
  Access=ReadOnly
  Description=Reason From Diary Journal
  ExtensionAttribute=DiaryReason
  Format=
  GroupLabel=FieldCustom
  LabelList=REASON
  Name=REASON


  DiaryText =
  Access=ReadOnly
  Description=Text of Diary for Settlement
  ExtensionAttribute=DiaryText
  Format=
  GroupLabel=FieldCustom
  LabelList=REASON
  Name=REASON


  Diff1 =
  Access=ReadOnly
  Description=The difference from NTCS and Market Data Source.
  ExtensionAttribute=Diff1
  Format=
  GroupLabel=FieldCustom
  LabelList=Diff Exchange Rate 1
  Name=Diff Exchange Rate 1


  Diff2 =
  Access=ReadOnly
  Description=The difference from NTCS and EMAS Data Source.
  ExtensionAttribute=Diff2
  Format=
  GroupLabel=FieldCustom
  LabelList=Diff Exchange Rate 2
  Name=Diff Exchange Rate 2


  Difference =
  ColumnAppearance=Total_background
  Description=Premium - far sell amount
  ExtensionAttribute=Difference
  Format=
  GroupLabel=FieldCustom
  Label=Difference
  Name=Difference


  Difference_EndCash =
  Description=Difference of End Cash Buy + End Cash Sell
  ExtensionAttribute=Difference_EndCash
  GroupLabel=FieldCustom
  LabelList=Difference_EndCash
  Name=Difference End Cash


  differencePajak =
  Description=WHT - Tax Amount
  ExtensionAttribute=differencePajak
  Format=
  GroupLabel=FieldCustom
  Label=Difference
  Name=Difference


  DiffRate =
  ColumnAppearance=Total_background
  Description=The difference between CcyRate and Reval Rate
  ExtensionAttribute=DiffRate
  GroupLabel=FieldCustom
  Label=DiffRate
  Name=DiffRate


  DiffRate100 =
  ColumnAppearance=Total_background
  Description=The difference between CcyRate and Reval Rate in Percentage
  ExtensionAttribute=DiffRate100
  GroupLabel=FieldCustom
  Label=DiffRate100
  Name=DiffRate100


  DiscountAmount =
  Description=Proceed Amount (Premium) substracted by Face Amount.
  ExtensionAttribute=DiscountAmount
  Format=
  GroupLabel=FieldCustom
  LabelList=Discount Amount
  Name=Discount Amount


  DoC =
  Access=ReadOnly
  Description=Debit or Credit Indicator
  ExtensionAttribute=DoC
  Format=
  GroupLabel=FieldCustom
  LabelList=D/C
  Name=D/C


  DRCRIND =
  Access=ReadOnly
  Description=Debit or Credit Indicator
  ExtensionAttribute=DRCRIND
  Format=
  GroupLabel=FieldCustom
  LabelList=DRCRIND
  Name=DRCRIND


  EffectiveDateDealPackage =
  Description=date values for MMLD & MDCI
  ExtensionAttribute=EffectiveDateDP
  GroupLabel=FieldCustom
  LabelList=EffectiveDateDP
  Name=EffectiveDateDP


  eFx =
  Access=ReadOnly
  Description=Transaction Sources
  ExtensionAttribute=eFx
  Format=
  GroupLabel=FieldCustom
  LabelList=e-Fx
  Name=e-Fx


  EMAS =
  Access=ReadOnly
  Description=The exchange rate registered in EMAS.
  ExtensionAttribute=EMAS
  Format=
  GroupLabel=FieldCustom
  LabelList=EMAS
  Name=EMAS


  EndAccrualFA =
  Description=PV Value for Fixed Rate type
  ExtensionAttribute=EndAccrualFA
  Format=
  GroupLabel=FieldCustom
  LabelList=End Accrual
  Name=End Accrual


  EndCashRepo =
  Description=The end cash of the repo transaction.
  ExtensionAttribute=EndCashRepo
  Format=
  GroupLabel=FieldCustom
  LabelList=EndCashRepo
  Name=End Cash Repo


  EndCashRepoString =
  Description=The end cash of the repo transaction.
  ExtensionAttribute=EndCashRepoString
  Format=
  GroupLabel=FieldCustom
  LabelList=EndCashRepoString
  Name=EndCashRepoString


  enddate_adj =
  Description=adjusted end date for one reporting
  ExtensionAttribute=enddate_adj
  Format=
  GroupLabel=FieldCustom
  LabelList=EndDate
  Name=EndDate


  EndDateCF =
  Description=The current Cashflow End Date
  ExtensionAttribute=EndDateCF
  Format=
  GroupLabel=FieldCustom
  LabelList=End Date CF
  Name=End Date CF


  EndDateRepo =
  Description=End Date Column for Repo
  ExtensionAttribute=EndDateRepo
  Format=
  GroupLabel=FieldCustom
  LabelList=End Date
  Name=End Date


  EndInterest =
  Description=The end interest of the transaction.
  ExtensionAttribute=EndInterest
  Format=
  GroupLabel=FieldCustom
  LabelList=EndInterest
  Name=End Interest


  EndInterestRepo =
  Description=The end interest of the repo transaction.
  ExtensionAttribute=EndInterestRepo
  Format=
  GroupLabel=FieldCustom
  LabelList=EndInterestRepo
  Name=End Interest Repo


  EndValue =
  Access=ReadOnly
  Description=Notional + Accrual
  ExtensionAttribute=EndValue
  Format=
  GroupLabel=FieldCustom
  LabelList=EndValue
  Name=End Value


  EndValueFA =
  Description=PV Value for Fixed Rate type
  ExtensionAttribute=EndValueFA
  Format=
  GroupLabel=FieldCustom
  LabelList=End Value
  Name=End Value


  EquivalentAmountIDR =
  Access=ReadOnly
  Description=The amount that equivalent to IDR
  ExtensionAttribute=EquivalentAmountIDR
  Format=Imprecise
  GroupLabel=FieldCustom
  LabelList=Equivalent Amount IDR
  Name=Equivalent Amount IDR


  EquivalentAmountIDR_Yesterday =
  ColumnAppearance=
  Description=Ewquivalent amount IDR using EOD_MtM H-1
  ExtensionAttribute=EquivalentAmountIDR_Yesterday
  GroupLabel=FieldCustom
  Label=EquivalentAmountIDR NTR H-1
  Name=EquivalentAmountIDR NTR H-1


  EquivalentAmountIDRnotAbs =
  Access=ReadOnly
  Description=The amount that equivalent to IDR (not absolute)
  ExtensionAttribute=EquivalentAmountIDRnotAbs
  Format=Imprecise
  GroupLabel=FieldCustom
  LabelList=Equivalent Amount IDR (not absolute)
  Name=Equivalent Amount IDR (not absolute)


  EquivalentAmountIDRTradeTime =
  Access=ReadOnly
  Description=The amount that equivalent to IDR based on trade Time
  ExtensionAttribute=EquivalentAmountIDRTradeTime
  GroupLabel=FieldCustom
  LabelList=EquivalentAmountIDRTradeTime
  Name=EquivalentAmountIDRTradeTime


  EquivalentAmountIDRValueDay =
  Access=ReadOnly
  Description=The amount that equivalent to IDR based on Value Day
  ExtensionAttribute=EquivalentAmountIDRValueDay
  GroupLabel=FieldCustom
  LabelList=EquivalentAmountIDRValueDay
  Name=EquivalentAmountIDRValueDay


  EquivalentAmountUSD =
  Access=ReadOnly
  Description=The amount that equivalent to USD
  ExtensionAttribute=EquivalentAmountUSD
  Format=Imprecise
  GroupLabel=FieldCustom
  LabelList=Equivalent Amount USD
  Name=Equivalent Amount USD


  EquivalentAmountUSDTradeTime =
  Access=ReadOnly
  Description=The amount that equivalent to USD based on trade Time
  ExtensionAttribute=EquivalentAmountUSDTradeTime
  GroupLabel=FieldCustom
  LabelList=EquivalentAmountUSDTradeTime
  Name=EquivalentAmountUSDTradeTime


  EquivalentMarketIDR =
  Access=ReadOnly
  Description=Market value equivalent to IDR
  ExtensionAttribute=EquivalentMarketIDR
  Format=Imprecise
  GroupLabel=FieldCustom
  LabelList=Equivalent Market IDR
  Name=Equivalent Market IDR


  ExchangeRateNTCS =
  Access=ReadOnly
  Description=The exchange rate in NTCS.
  ExtensionAttribute=ExchangeRateNTCS
  Format=
  GroupLabel=FieldCustom
  LabelList=Exchange Rate NTCS
  Name=Exchange Rate NTCS


  ExcRate =
  Description=NTR
  ExtensionAttribute=ExcRate
  GroupLabel=FieldCustom
  Label=ExcRate
  Name=ExcRate


  ExcRateTradeTime =
  Description=NTR using Deal Time
  ExtensionAttribute=ExcRateTradeTime
  GroupLabel=FieldCustom
  Label=ExcRateTradeTime
  Name=ExcRateTradeTime


  ExcRateValueDay =
  Description=NTR using ValueDay
  ExtensionAttribute=ExcRateValueDay
  GroupLabel=FieldCustom
  Label=ExcRateValueDay
  Name=ExcRateValueDay


  ExtractDate =
  Access=ReadOnly
  Description=
  ExtensionAttribute=ExtractDate
  Format=
  GroupLabel=FieldCustom
  LabelList=Extract Date
  Name=Extract Date


  ExtractFlag =
  Access=ReadOnly
  Description=
  ExtensionAttribute=ExtractFlag
  Format=
  GroupLabel=FieldCustom
  LabelList=Extract Flag
  Name=Extract Flag


  FaceAmount =
  ColumnAppearance=Total_background_FaceAmount
  Description=Face Amount is the original amount of the transaction prior to discount.
  ExtensionAttribute=FaceAmount
  Format=
  GroupLabel=FieldCustom
  Label=Face Amount
  Name=Face Amount


  Facility =
  Access=ReadOnly
  Description=The type of facility (Bond, ZCO Bond, NCD - Bank, NCD - NonBank, Repo, CCS Repo, Cash Collateral and Loan) for LIQ20 and LIQ21
  ExtensionAttribute=Facility
  Format=
  GroupLabel=FieldCustom
  LabelList=Facility
  Name=Facility


  FacilityCollateral =
  Access=ReadOnly
  Description=The type of facility (Bond, ZCO Bond, NCD - Bank, NCD - NonBank, Repo, CCS Repo, Cash Collateral and Loan) for LIQ20 and LIQ21
  ExtensionAttribute=FacilityCollateral
  Format=
  GroupLabel=FieldCustom
  LabelList=Facility Collateral
  Name=Facility Collateral


  Far/NearFlag =
  Access=ReadOnly
  Description=
  ExtensionAttribute=Far/NearFlag
  Format=
  GroupLabel=FieldCustom
  LabelList=F/N
  Name=F/N


  FarAmount =
  ColumnAppearance=Total_background_FarAmount
  Description=Far Amount is the far amount of the transaction (Premium in FA)
  ExtensionAttribute=FarAmount
  Format=
  GroupLabel=FieldCustom
  Label=Far Amount
  Name=Far Amount


  FarAmount1 =
  ColumnAppearance=Total_background_FarAmount1
  Description=Far Amount is the far amount of the transaction
  ExtensionAttribute=FarAmount1
  Format=
  GroupLabel=FieldCustom
  Label=Far Amount 1
  Name=Far Amount 1


  FarAmount2 =
  ColumnAppearance=Total_background_FarAmount2
  Description=The total of Far Amount 1 * Far Rate.
  ExtensionAttribute=FarAmount2
  Format=
  GroupLabel=FieldCustom
  Label=Far Amount 2
  Name=Far Amount 2


  FarNear =
  Access=ReadOnly
  Description=
  ExtensionAttribute=FarNear
  Format=
  GroupLabel=FieldCustom
  LabelList=Far/Near
  Name=Far/Near


  FBI =
  ColumnAppearance=Total_background
  Description=Fee Based Income
  ExtensionAttribute=FBI
  Format=
  GroupLabel=FieldCustom
  Label=FBI
  Name=FBI


  FBIThisYear =
  Description=Fee Based Income in this year (0y).
  ExtensionAttribute=FBIThisYear
  Format=Imprecise
  GroupLabel=Profit & loss (fee based income & net interest income)
  Name=FBI 0y


  FBIYesteryear =
  Description=Fee Based Income a year before (-1y).
  ExtensionAttribute=FBIYesteryear
  Format=Imprecise
  GroupLabel=Profit & loss (fee based income & net interest income)
  Name=FBI -1y


  FDQ =
  Description=If China, then No FDQ. If not China and Long Term, then Long term FDQ. If not China and Short Term, then Short term FDQ.
  ExtensionAttribute=FDQ
  GroupLabel=FieldCustom
  LabelList=FDQ
  Name=FDQ


  FEECustody =
  Access=ReadOnly
  Description=Fee Custody in 2bps
  ExtensionAttribute=FEECustody
  Format=Imprecise
  GroupLabel=FieldCustom
  LabelList=FEE Custody
  Name=FEE Custody


  FeeIDR =
  ColumnAppearance=Total_background
  Description=The broker fee of transaction equals in IDR.
  ExtensionAttribute=FeeIDR
  Format=
  GroupLabel=FieldCustom
  Label=Fee IDR
  Name=Fee IDR


  FITCHDataBloomberg =
  Access=ReadOnly
  Description=The rating of FITCH in Bloomberg
  ExtensionAttribute=FITCHDataBloomberg
  Format=
  GroupLabel=FieldCustom
  LabelList=FITCH Data Bloomberg
  Name=FITCH Data Bloomberg


  FITCHDataNTCS =
  Access=ReadOnly
  Description=The rating of FITCH in NTCS
  ExtensionAttribute=FITCHDataNTCS
  Format=
  GroupLabel=FieldCustom
  LabelList=FITCH Data NTCS
  Name=FITCH Data NTCS


  FITCHHasilMatch =
  Access=ReadOnly
  Description=The match result of FITCH between NTCS and other sources
  ExtensionAttribute=FITCHHasilMatch
  Format=
  GroupLabel=FieldCustom
  LabelList=FITCH Hasil Match
  Name=FITCH Hasil Match


  FITCHINDODataBloomberg =
  Access=ReadOnly
  Description=The rating of FITCHINDO in Bloomberg
  ExtensionAttribute=FITCHINDODataBloomberg
  Format=
  GroupLabel=FieldCustom
  LabelList=FITCHINDO Data Bloomberg
  Name=FITCHINDO Data Bloomberg


  FITCHINDODataNTCS =
  Access=ReadOnly
  Description=The rating of FITCHINDO in NTCS
  ExtensionAttribute=FITCHINDODataNTCS
  Format=
  GroupLabel=FieldCustom
  LabelList=FITCHINDO Data NTCS
  Name=FITCHINDO Data NTCS


  FITCHINDOHasilMatch =
  Access=ReadOnly
  Description=The match result of FITCHINDO between NTCS and other sources
  ExtensionAttribute=FITCHINDOHasilMatch
  Format=
  GroupLabel=FieldCustom
  LabelList=FITCHINDO Hasil Match
  Name=FITCHINDO Hasil Match


  FixedRatePercentage =
  Description=Fixed Rate in Percentage.
  ExtensionAttribute=FixedRatePercentage
  GroupLabel=FieldCustom
  LabelList=Fixed Rate Percentage
  Name=Fixed Rate Percentage


  FixingDate =
  Description=The fixing date of trade in which cashflow type is Float Rate.
  ExtensionAttribute=FixingDate
  Format=DatePartOnly
  GroupLabel=FieldCustom
  LabelList=Fixing Date
  Name=Fixing Date


  FLAG =
  Access=ReadOnly
  Description=Indicator if amount is more than 1 trillion in IDR.
  ExtensionAttribute=FLAG
  Format=
  GroupLabel=FieldCustom
  LabelList=FLAG
  Name=FLAG


  FloatPriceReference =
  Description=FloatPriceReference for RO02
  ExtensionAttribute=FloatPriceReference
  GroupLabel=FieldCustom
  LabelList=FloatPriceReference
  Name=FloatPriceReference


  ForwardRate =
  Access=ReadOnly
  Description=
  ExtensionAttribute=ForwardRate
  Format=
  GroupLabel=FieldCustom
  LabelList=Forward Rate
  Name=Forward Rate


  FreeText =
  ColumnAppearance=Total_background
  Description=free text for column
  ExtensionAttribute=AtributText
  GroupLabel=FieldCustom
  Label=FreeText
  Name=FreeText


  FrekuensiPenjualan_Yesterday =
  ColumnAppearance=Total_background
  Description=The amount of all transaction where sale date minus buys date are less than 186 days.
  ExtensionAttribute=FrekuensiPenjualan_Yesterday
  GroupLabel=FieldCustom
  Label=Frekuensi Penjaualn Yesterday
  Name=Frekuensi Penjaualn Yesterday


  Frequency =
  Access=ReadOnly
  Description=Frequency
  ExtensionAttribute=Frequency
  Format=
  GroupLabel=FieldCustom
  LabelList=Frequency
  Name=Frequency


  FTotal =
  ColumnAppearance=dynamic_background
  ExtensionAttribute=FTotal
  GroupLabel=FieldCustom
  Name=FTotal


  FullYearAchievement =
  Access=ReadOnly
  Description=YTD Target - Full Year Target (in %).
  ExtensionAttribute=FullYearAchievement
  Format=
  GroupLabel=FieldCustom
  LabelList=FullYearAchievement
  Name=FullYearAchievement


  FVLevel =
  ColumnAppearance=Total_background
  Description=FVLevel
  ExtensionAttribute=FVLevel
  GroupLabel=FieldCustom
  Label=FVLevel
  Name=FVLevel


  FWDRate =
  ColumnAppearance=Total_background
  Description=FWDRate
  ExtensionAttribute=FWDRate
  GroupLabel=FieldCustom
  Label=FWDRate
  Name=FWDRate


  FXFW =
  Description=
  ExtensionAttribute=FXFW
  GroupLabel=FieldCustom
  Label=FX/FW
  Name=FX/FW


  GainOrLoss =
  ColumnAppearance=Total_background
  Description=Gain/Loss Amount
  ExtensionAttribute=GainOrLoss
  Format=
  GroupLabel=FieldCustom
  Label=Gain/Loss
  Name=Gain/Loss


  GLNO =
  Description=GL number of the transaction.
  ExtensionAttribute=GLNO
  Format=
  GroupLabel=FieldCustom
  LabelList=GLNO
  Name=GLNO


  GMRAIdentification =
  ColumnAppearance=Total_background
  Description=The identify which Rate will be used on transaction (Domestic or International)
  ExtensionAttribute=GMRAIdentification
  Format=
  GroupLabel=FieldCustom
  Label=GMRA Identification
  Name=GMRA Identification


  GrandTotal =
  ColumnAppearance=Total_background
  Description=The Grand Total of Buy Amount and Sell Amount.
  ExtensionAttribute=GrandTotal
  Format=
  GroupLabel=FieldCustom
  Label=Grand Total
  Name=Grand Total


  Group_ID =
  ColumnAppearance=Total_background
  Description=Host ID of Limit Party Target
  ExtensionAttribute=LimitPtyTarget_GrpId
  GroupLabel=FieldCustom
  Label=Group ID
  Name=Group ID


  Haircut =
  Access=ReadOnly
  Description=The haircut is accessed from the core system
  ExtensionAttribute=Haircut
  Format=
  GroupLabel=FieldCustom
  LabelList=Haircut
  Name=Haircut


  hargaSuratBerharga =
  Description=Price for Collateral or Bond
  ExtensionAttribute=hargaSuratBerharga
  Format=
  GroupLabel=FieldCustom
  LabelList=hargaSuratBerharga
  Name=hargaSuratBerharga


  HedgingFairValue =
  Access=ReadOnly
  Description=Hedged Fair Value
  ExtensionAttribute=HedgingFairValue
  Format=
  GroupLabel=FieldCustom
  LabelList=Hedging (Fair Value)
  Name=Hedging (Fair Value)


  HedgingNotAmt =
  Access=ReadOnly
  Description=Unamortized hedging
  ExtensionAttribute=HedgingNotAmt
  Format=
  GroupLabel=FieldCustom
  LabelList=Hedging (Not Amortized)
  Name=Hedging (Not Amortized)


  Holding Period =
  Access=ReadOnly
  Description=Remaining Position for Holding Period Limits
  ExtensionAttribute=holdingPeriod
  GroupLabel=FieldCustom
  LabelList=Holding Period
  Name=Holding Period


  Holding Period ESPT =
  Access=ReadOnly
  Description=Remaining Position for Holding Period Limits for ESPT.
  ExtensionAttribute=HoldingPeriodESPT
  GroupLabel=FieldCustom
  LabelList=Holding Period
  Name=Holding Period ESPT


  Holding Period Trade =
  Access=ReadOnly
  Description=Remaining Position for Holding Period Limits
  ExtensionAttribute=holdingPeriodTrade
  GroupLabel=FieldCustom
  LabelList=Holding Period Trade
  Name=Holding Period Trade


  HoldingInterestAmount =
  Description=Holding Interest Amount
  ExtensionAttribute=HoldingInterestAmount
  Format=
  GroupLabel=FieldCustom
  LabelList=HoldingInterestAmount
  Name=Holding Interest Amount


  HTM =
  Access=ReadOnly
  Description=Holding to Maturity
  ExtensionAttribute=HTM
  Format=
  GroupLabel=FieldCustom
  LabelList=HTM
  Name=HTM


  IBPA =
  Access=ReadOnly
  Description=The source of Mark to Market (bid price).
  ExtensionAttribute=IBPA
  Format=
  GroupLabel=FieldCustom
  LabelList=IBPA
  Name=IBPA


  IDays =
  Description=The day difference of start date and end date
  ExtensionAttribute=IDays
  GroupLabel=FieldCustom
  LabelList=IDays
  Name=IDays


  IDNumber =
  Description=The value of KTP or NPWP
  ExtensionAttribute=IDNumber
  GroupLabel=FieldCustom
  LabelList=ID Number
  Name=ID Number


  idPelapor =
  ColumnAppearance=Total_background
  Description=The ID of Pelapor (Bank Mandiri): "008"
  ExtensionAttribute=ID
  Format=
  GroupLabel=FieldCustom
  Label=ID Pelapor
  Name=ID Pelapor


  IdPembeli =
  Description=The ID of Pelapor (Bank Mandiri): "008"
  ExtensionAttribute=IdPembeli
  Format=
  GroupLabel=FieldCustom
  Label=ID Pembeli
  Name=ID Pembeli


  IdPenjual =
  Description=The ID of Pelapor (Bank Mandiri): "008"
  ExtensionAttribute=IdPenjual
  Format=
  GroupLabel=FieldCustom
  Label=ID Penjual
  Name=ID Penjual


  IdPihakLawan =
  Description=The ID of Pihak Lawan
  ExtensionAttribute=IdPihakLawan
  Format=
  GroupLabel=FieldCustom
  Label=IDPihakLawan
  Name=IDPihakLawan


  IDR =
  Access=ReadOnly
  Description=Result amount calculation to NTR rate for non IDR
  ExtensionAttribute=
  Format=
  GroupLabel=FieldCustom
  LabelList=IDR
  Name=IDR


  IDTypeCode =
  Description=KTP or NPWP
  ExtensionAttribute=IDTypeCode
  GroupLabel=FieldCustom
  LabelList=ID Type Code
  Name=ID Type Code


  Indicator1 =
  ColumnAppearance=Total_background
  Description=Indicator 1
  ExtensionAttribute=Indicator1
  GroupLabel=FieldCustom
  Label=Indicator1
  Name=Indicator1


  Indicator1.2 =
  ColumnAppearance=Total_background
  Description=Indicator 1 part 2
  ExtensionAttribute=Indicator1
  GroupLabel=FieldCustom
  Label=Indicator1.2
  Name=Indicator1.2


  InitialCollateralPrice =
  Description=The initial price of collateral
  ExtensionAttribute=InitialCollateralPrice
  Format=
  GroupLabel=FieldCustom
  LabelList=Initial Collateral Price
  Name=Initial Collateral Price


  InputDate =
  ColumnAppearance=Total_background
  Description=Input Date
  ExtensionAttribute=InputDate
  GroupLabel=FieldCustom
  Label=INPUTDATE
  Name=Input Date


  InputTime =
  ColumnAppearance=Total_background
  Description=Input Time
  ExtensionAttribute=InputTime
  GroupLabel=FieldCustom
  Label=INPUTTIME
  Name=Input Time


  Ins_Bond =
  Description=Untuk Report Cashflow Instrument, yang pertanggal
  ExtensionAttribute=Ins_Bond
  Format=
  GroupLabel=FieldCustom
  Label=Bond
  Name=Bond


  Ins_Commodity =
  Description=Untuk Report Cashflow Instrument, yang pertanggal
  ExtensionAttribute=Ins_Commodity
  Format=
  GroupLabel=FieldCustom
  Label=BANK NOTES
  Name=BANK NOTES


  Ins_Curr =
  Description=Untuk Report Cashflow Instrument, yang pertanggal
  ExtensionAttribute=Ins_Curr
  Format=
  GroupLabel=FieldCustom
  Label=FX
  Name=FX


  Ins_CurrSwap =
  Description=Untuk Report Cashflow Instrument, yang pertanggal
  ExtensionAttribute=Ins_CurrSwap
  Format=
  GroupLabel=FieldCustom
  Label=CCS
  Name=CCS


  Ins_Deposit =
  Description=Untuk Report Cashflow Instrument, yang pertanggal
  ExtensionAttribute=Ins_Deposit
  Format=
  GroupLabel=FieldCustom
  Label=Deposit
  Name=Deposit


  Ins_MM_IP =
  Description=Untuk Report Cashflow Instrument, yang pertanggal
  ExtensionAttribute=Ins_MM_IP
  Format=
  GroupLabel=FieldCustom
  Label=IP
  Name=IP


  Ins_MM_IT =
  Description=Untuk Report Cashflow Instrument, yang pertanggal
  ExtensionAttribute=Ins_MM_IT
  Format=
  GroupLabel=FieldCustom
  Label=IT
  Name=IT


  Ins_Option =
  Description=Untuk Report Cashflow Instrument, yang pertanggal
  ExtensionAttribute=Ins_Option
  Format=
  GroupLabel=FieldCustom
  Label=Option
  Name=Option


  Ins_Repo =
  Description=Untuk Report Cashflow Instrument, yang pertanggal
  ExtensionAttribute=Ins_Repo
  Format=
  GroupLabel=FieldCustom
  Label=Repo/Reverse
  Name=Repo/Reverse


  Ins_Swap =
  Description=Untuk Report Cashflow Instrument, yang pertanggal
  ExtensionAttribute=Ins_Swap
  Format=
  GroupLabel=FieldCustom
  Label=Swap
  Name=Swap


  InsBondPrice =
  Description=The Price for Bond Instrument.
  ExtensionAttribute=InsBondPrice
  GroupLabel=FieldCustom
  LabelList=EOD_MtM Bond Price
  Name=EOD_MtM Bond Price


  InsBondPriceCollateral =
  Description=The Price for Bond Instrument Collateral.
  ExtensionAttribute=InsBondPriceCollateral
  Format=
  GroupLabel=FieldCustom
  LabelList=EOD_MtM Bond Price Collateral
  Name=EOD_MtM Bond Price Collateral


  InsExpiry_adj =
  Description=adjusted Instrument Expiry date for one reporting
  ExtensionAttribute=InsExpiry_adj2
  Format=
  GroupLabel=FieldCustom
  LabelList=Expiry
  Name=Expiry


  InsExpiry_adj2 =
  Description=adjusted Instrument Expiry date for one reporting
  ExtensionAttribute=InsExpiry_adj2
  Format=
  GroupLabel=FieldCustom
  LabelList=ExpDate
  Name=ExpDate


  IntCalcRule =
  Description=Interest Calculation Rule
  ExtensionAttribute=IntCalcRule
  GroupLabel=Calc
  Name=IntCalcRule


  Interest_prime =
  Description=Interest but never blank.
  ExtensionAttribute=Interest_prime
  GroupLabel=FieldCustom
  LabelList=Interest
  Name=Interest


  InterestAccrued =
  Access=ReadOnly
  Description=The part of the interest that has been recognized and recorded but not paid since the as of a specific date
  ExtensionAttribute=InterestAccrued
  Format=
  GroupLabel=FieldCustom
  LabelList=Interest Accrued
  Name=Interest Accrued


  InterestAmount =
  Access=ReadOnly
  Description=The interest amount of transaction
  ExtensionAttribute=InterestAmount
  Format=
  GroupLabel=FieldCustom
  LabelList=Interest Amount
  Name=Interest Amount


  InterestIncome =
  Access=ReadOnly
  Description=The amount paid to an entity for lending its money or letting another entity use its asset
  ExtensionAttribute=InterestIncome
  Format=
  GroupLabel=FieldCustom
  LabelList=Interest Income
  Name=Interest Income


  InterestIncomeTax =
  Description=Interest Income Tax
  ExtensionAttribute=InterestIncomeTax
  Format=
  GroupLabel=FieldCustom
  LabelList=InterestIncomeTax
  Name=Interest Income Tax


  InterestPayment =
  Access=ReadOnly
  Description=The amount of Payment that BM received
  Format=
  GroupLabel=FieldCustom
  LabelList=Interest Payment
  Name=Interest Payment


  InterestPaymentMoneyFlow =
  Access=ReadOnly
  Description=The amount of interest that must be paid
  ExtensionAttribute=InterestPaymentMoneyFlow
  Format=
  GroupLabel=FieldCustom
  LabelList=Interest Payment
  Name=Interest Payment


  InterestProceed =
  Access=ReadOnly
  Description=Projection Receive + Projection Payment
  ExtensionAttribute=InterestProceed
  GroupLabel=FieldCustom
  LabelList=InterestProceed
  Name=InterestProceed


  InterestRate_PorS =
  Description=BOa08 Interest Rate, displayed based on PorS
  ExtensionAttribute=InterestRate_PORS
  GroupLabel=FieldCustom
  LabelList=Interest Rate (PORS)
  Name=Interest Rate (PORS)


  InterestRateAtTradeTime =
  Description=Interest rate of the instrument at trade time
  ExtensionAttribute=interestRateAtTradeTime
  Format=SixDecimalDetailedPercent
  GroupLabel=FieldCustom
  LabelList=InterestRateAtTradeTime
  Name=InterestRateAtTradeTime


  InterestReceived =
  Access=ReadOnly
  Description=The amount of interest that BM received
  ExtensionAttribute=InterestReceivedMoneyFlow
  Format=
  GroupLabel=FieldCustom
  LabelList=Interest Received
  Name=Interest Received


  InterestReceivedMoneyFlow =
  Access=ReadOnly
  Description=The amount of interest that BM received
  ExtensionAttribute=InterestReceivedMoneyFlow
  Format=
  GroupLabel=FieldCustom
  LabelList=Interest Received
  Name=Interest Received


  InterestReceiveMoneyFlow =
  Access=ReadOnly
  Description=The amount of interest that must be paid
  ExtensionAttribute=InterestReceiveMoneyFlow
  Format=
  GroupLabel=FieldCustom
  LabelList=Interest Receive
  Name=Interest Receive


  Internalizer =
  Description=Trader Price
  ExtensionAttribute=Internalizer
  Format=Imprecise
  GroupLabel=FieldCustom
  LabelList=Internalizer
  Name=Internalizer


  InterofficeLongTerm =
  Description=Shows Face Value if Counterparty Type is "Interbranch" and Term is "Long".
  ExtensionAttribute=InterofficeLongTerm
  GroupLabel=FieldCustom
  LabelList=Interoffice Long Term
  Name=Interoffice Long Term


  InterofficeShortTerm =
  Description=Shows Face Value if Counterparty Type is "Interbranch" and Term is "Short".
  ExtensionAttribute=InterofficeShortTerm
  GroupLabel=FieldCustom
  LabelList=Interoffice Short Term
  Name=Interoffice Short Term


  INVSEQ =
  Description=Number of Instrument Alias
  ExtensionAttribute=INVSEQ
  Format=
  GroupLabel=FieldCustom
  LabelList=INVSEQ
  Name=INVSEQ


  Invtype =
  Access=ReadOnly
  Description=A, H, T indicator
  ExtensionAttribute=Invtype
  Format=
  GroupLabel=FieldCustom
  LabelList=InvType
  Name=InvType


  IRS =
  Description=
  ExtensionAttribute=IRS
  GroupLabel=FieldCustom
  Label=IRS
  Name=IRS


  Issuer_Rule_Limit =
  ColumnAppearance=Total_background
  Description=Issuer Rule Limit (From "Standard_Issuer")
  ExtensionAttribute=LimitCpty
  GroupLabel=FieldCustom
  Label=Issuer Rule Limit
  Name=Issuer Rule Limit


  IssuerLimit =
  Access=ReadOnly
  Description=The issuer limit of the customer
  ExtensionAttribute=IssuerLimit
  Format=
  GroupLabel=FieldCustom
  LabelList=Issuer Limit
  Name=Issuer Limit


  IssuerPercentUtilization =
  Access=ReadOnly
  Description=The percentage of issuer limit utilization
  ExtensionAttribute=ruleValueUtilizationPercent
  Format=
  GroupLabel=FieldCustom
  LabelList=Issuer % Utilization
  Name=Issuer % Utilization


  IssuerUtilization =
  Access=ReadOnly
  Description=The utilization of issuer limit
  ExtensionAttribute=IssuerUtilization
  Format=
  GroupLabel=FieldCustom
  LabelList=Issuer Utilization
  Name=Issuer Utilization


  jenisInstrumen =
  Description=Additional Info Jenis Surat Berharga
  ExtensionAttribute=jenisInstrumen
  Format=
  GroupLabel=FieldCustom
  LabelList=jenisInstrumen
  Name=jenisInstrumen


  JenisTransaksi =
  Access=ReadOnly
  Description=Default "2" for outright
  ExtensionAttribute=JenisTransaksi
  Format=
  GroupLabel=FieldCustom
  LabelList=Jenis Transaksi
  Name=Jenis Transaksi


  jenisTransaksiAntarBank =
  Description=PUAS or PUAB
  ExtensionAttribute=jenisTransaksiAntarBank
  Format=
  GroupLabel=FieldCustom
  LabelList=jenisTransaksiAntarBank
  Name=jenisTransaksiAntarBank


  JnsDokumenUnderlying =
  Access=ReadOnly
  Description=-
  ExtensionAttribute=JnsDokumenUnderlying
  Format=
  GroupLabel=FieldCustom
  LabelList=JnsDokumenUnderlying
  Name=JnsDokumenUnderlying


  JournalAmountAbs =
  Access=ReadOnly
  Description=Amount Value of Journal with absolute value
  ExtensionAttribute=JournalAmountAbs
  Format=
  GroupLabel=FieldCustom
  LabelList=AMOUNT
  Name=AMOUNT


  JournalDifference =
  Description=Accruend Interest - Journal Amount
  ExtensionAttribute=JournalDifference
  Format=
  GroupLabel=FieldCustom
  Label=Journal Difference
  Name=Journal Difference


  Keterangan =
  Description=The journal of transaction for BO32
  ExtensionAttribute=Keterangan
  GroupLabel=FieldCustom
  Label=Keterangan
  Name=Keterangan


  KeteranganInsDokumenUnderlying =
  Access=ReadOnly
  Description=-
  ExtensionAttribute=KeteranganInsDokumenUnderlying
  Format=
  GroupLabel=FieldCustom
  LabelList=KeteranganInsDokumenUnderlying
  Name=KeteranganInsDokumenUnderlying


  KodeFormFI =
  Description=Kode Form Bukti Potong / Kode Form Input PPh Yang Dibayar Sendiri FI
  ExtensionAttribute=KodeFormFI
  Format=
  GroupLabel=FieldCustom
  LabelList=Kode Form Bukti Potong
  Name=Kode Form FI


  KodeFormMDS =
  Description=Kode Form Bukti Potong / Kode Form Input PPh Yang Dibayar Sendiri MDS
  ExtensionAttribute=KodeFormMDS
  Format=
  GroupLabel=FieldCustom
  LabelList=Kode Form Bukti Potong
  Name=Kode Form MDS


  KodeFormPasal26 =
  Description=Kode Form Bukti Potong / Kode Form Input PPh Yang Dibayar Sendiri Pasal 26
  ExtensionAttribute=KodeFormPasal26
  Format=
  GroupLabel=FieldCustom
  LabelList=Kode Form Bukti Potong
  Name=Kode Form Pasal 26


  KodeOption1 =
  Description=Kode Option Tempat Penyimpanan 1 (Khusus F113310)
  ExtensionAttribute=One
  Format=
  GroupLabel=FieldCustom
  LabelList=Kode Option Tempat Penyimpanan 1 (Khusus F113310)
  Name=Kode Option 1


  KodeOption2 =
  Description=Kode Option Tempat Penyimpanan 2
  ExtensionAttribute=One
  Format=
  GroupLabel=FieldCustom
  LabelList=Kode Option Tempat Penyimpanan 2
  Name=Kode Option 2


  KodeOption3 =
  Description=Kode Option Tempat Penyimpanan 3
  ExtensionAttribute=One
  Format=
  GroupLabel=FieldCustom
  LabelList=Kode Option Tempat Penyimpanan 3
  Name=Kode Option 3


  KodeOption4 =
  Description=Kode Option Tempat Penyimpanan 4 / Kode Option Perencanaan (1) atau Pengawasan (2) atau selainnya (0) untuk BP Jasa Konstruksi poin 4
  ExtensionAttribute=One
  Format=
  GroupLabel=FieldCustom
  LabelList=Kode Option Tempat Penyimpanan 4 / Kode Option Perencanaan (1) atau Pengawasan (2) atau selainnya (0) untuk BP Jasa Konstruksi poin 4
  Name=Kode Option 4


  KodeOption5 =
  Description=Kode Option Tempat Penyimpanan 5 / Kode Option Perencanaan (1) atau Pengawasan (2) atau selainnya (0) untuk BP Jasa Konstruksi poin 5
  ExtensionAttribute=One
  Format=
  GroupLabel=FieldCustom
  LabelList=Kode Option Tempat Penyimpanan 5 / Kode Option Perencanaan (1) atau Pengawasan (2) atau selainnya (0) untuk BP Jasa Konstruksi poin 5
  Name=Kode Option 5


  Kontrak =
  Description=Code for each Type and Category
  ExtensionAttribute=Kontrak
  Format=
  GroupLabel=FieldCustom
  Label=Kontrak
  Name=Kontrak


  Kurs =
  Access=ReadOnly
  Description=Foreign exchange rate against IDR used to calculate of "eqv amount Rupiah". Rate that used is closing rate a day before the report generated.
  ExtensionAttribute=Kurs
  Format=
  GroupLabel=FieldCustom
  LabelList=Kurs
  Name=Kurs


  KursBeli =
  ColumnAppearance=
  Description=Total jumlah kurs beli /buy
  ExtensionAttribute=KursBeli
  GroupLabel=FieldCustom
  Name=KursBeli


  KursJual =
  ColumnAppearance=
  Description=Total jumlah kurs jual /sell
  ExtensionAttribute=KursJual
  GroupLabel=FieldCustom
  Name=KursJual


  KursTengah =
  Access=ReadOnly
  Description=The exchange rate that is halfway between a currency's bid and ask rates.
  ExtensionAttribute=KursTengah
  Format=
  GroupLabel=FieldCustom
  LabelList=KursTengah
  Name=KursTengah


  LastCFPeriod =
  Description=The Last period of payment
  ExtensionAttribute=LastCFPeriod
  Format=
  GroupLabel=FieldCustom
  LabelList=Last Payment Period
  Name=Last Payment


  LastCouponDate =
  Access=ReadOnly
  Description=
  ExtensionAttribute=LastCouponDate
  Format=
  GroupLabel=FieldCustom
  LabelList=Last Coupon Date
  Name=Last Coupon Date


  LastFixingRate =
  Description=Last Fixing Rate
  ExtensionAttribute=LastFixingRate
  GroupLabel=FieldCustom
  Label=Last Fixing Rate
  Name=LastFixingRate


  LastPaymentPeriod =
  Access=ReadOnly
  Description=The day period starting with the date the first payment is issued and ended
  ExtensionAttribute=LastPaymentPeriod
  Format=
  GroupLabel=FieldCustom
  LabelList=Last Payment Period
  Name=Last Payment Period


  LBU =
  Description=
  ExtensionAttribute=LBU
  Format=float
  GroupLabel=FieldCustom
  Label=LBU
  Name=LBU


  LBUFieldCustom =
  Description=
  ExtensionAttribute=LBUFieldCustom
  Format=float
  GroupLabel=FieldCustom
  Label=LBU
  Name=LBU


  LiabilitiesAmount =
  ColumnAppearance=Total_background
  Description=LiabilitiesAmount
  ExtensionAttribute=LiabilitiesAmount
  GroupLabel=FieldCustom
  Label=LiabilitiesAmount
  Name=LiabilitiesAmount


  Limit =
  Access=ReadOnly
  Description=The Credit Equivalent Limit of customer
  ExtensionAttribute=Limit
  Format=
  GroupLabel=FieldCustom
  LabelList=Limit
  Name=Limit


  Limit Available Alert =
  Description=Threshold - currentValue.
  ExtensionAttribute=alertAvailableLimit
  GroupLabel=Mandiri Custome Colums
  LabelList=AVAILABLE LIMIT
  Name=Limit Available Alert


  Limit Holding Days =
  Access=ReadOnly
  Description=How long the position has been open (in days)
  ExtensionAttribute=LimitHolding
  Format=Imprecise
  GroupLabel=FieldCustom
  LabelList=Limit Holding;Limit Holding Days
  Name=Limit Holding


  Limit_FX =
  ColumnAppearance=Total_background
  Description=The value of PV01 limit (FX)
  ExtensionAttribute=Limit_FX
  GroupLabel=FieldCustom
  Label=Limit FX
  Name=Limit FX


  Limit_IR =
  ColumnAppearance=Total_background
  Description=The value of PV01 limit (IR)
  ExtensionAttribute=Limit_IR
  GroupLabel=FieldCustom
  Label=Limit IR
  Name=Limit IR


  LimitAmtCurr =
  Description=Limit Amount for Counterparty.Country
  ExtensionAttribute=LimitAmtCurr
  GroupLabel=FieldCustom
  Label=LimitAmtCurr
  Name=LimitAmtCurr


  LimitEquivalenIDRCredit =
  Description=The FComplianceRule Threshold Value of the Portfolio
  ExtensionAttribute=WCOLimitIDRCredit
  GroupLabel=FieldCustom
  LabelList=Limit Equivalen IDR Credit
  Name=Limit Equivalen IDR Credit


  LimitEquivalenIDRNotional =
  Description=The FComplianceRule Threshold Value of the Portfolio
  ExtensionAttribute=WCOLimitIDRNotional
  GroupLabel=FieldCustom
  LabelList=Limit Equivalen IDR Notional
  Name=Limit Equivalen IDR Notional


  LimitExpiry =
  ColumnAppearance=Total_background
  Description=The date of limit expiry
  ExtensionAttribute=LimitExpiry
  GroupLabel=FieldCustom
  Label=Limit Expiry
  Name=Limit Expiry


  LimitExposureCCYCredit =
  Description=The FComplianceRule Threshold Value of the Portfolio
  ExtensionAttribute=WCOLimitCCYCredit
  GroupLabel=FieldCustom
  LabelList=Limit CCY Credit
  Name=Limit CCY Credit


  LimitExposureCCYNotional =
  Description=The FComplianceRule Threshold Value of the Portfolio
  ExtensionAttribute=WCOLimitCCYNotional
  GroupLabel=FieldCustom
  LabelList=Limit CCY Notional
  Name=Limit CCY Notional


  LimitExposureUSDCredit =
  Description=The FComplianceRule Threshold Value of the Portfolio
  ExtensionAttribute=WCOLimitUSDCredit
  GroupLabel=FieldCustom
  LabelList=Limit USD Credit
  Name=Limit USD Credit


  LimitExposureUSDNotional =
  Description=The FComplianceRule Threshold Value of the Portfolio
  ExtensionAttribute=WCOLimitUSDNotional
  GroupLabel=FieldCustom
  LabelList=Limit USD Notional
  Name=Limit USD Notional


  LimitMO01 =
  Access=ReadOnly
  Description=The limit of unrelaized and relaized
  ExtensionAttribute=LimitMO01
  Format=
  GroupLabel=FieldCustom
  LabelList=Limit MO01
  Name=Limit MO01


  LimitMO10 =
  Access=ReadOnly
  Description=The limit on Bond Cut Loss
  ExtensionAttribute=LimitMO10
  Format=
  GroupLabel=FieldCustom
  LabelList=LimitMO10
  Name=LimitMO10


  LOB =
  ColumnAppearance=Total_background
  Description=LOB
  ExtensionAttribute=LOB
  GroupLabel=FieldCustom
  Label=LOB
  Name=LOB


  LongTermFDQ =
  Description=Face Value for Long term FDQ.
  ExtensionAttribute=LongTermFDQ
  GroupLabel=FieldCustom
  LabelList=Long Term FDQ
  Name=Long Term FDQ


  LossLimitMonthly =
  Description=Default 500000000/12
  ExtensionAttribute=LossLimitMonthly
  Format=
  GroupLabel=FieldCustom
  LabelList=Loss Limit Monthly
  Name=Loss Limit Monthly


  LossLimitYearly =
  Description=Default 500000000
  ExtensionAttribute=LossLimitYearly
  Format=
  GroupLabel=FieldCustom
  LabelList=Loss Limit Yearly
  Name=Loss Limit Yearly


  LowerPrice =
  ColumnAppearance=
  Description=The low price from latest mark to market
  ExtensionAttribute=LowerPrice
  Format=
  GroupLabel=FieldCustom
  Label=Lower Price
  Name=Lower Price


  LowerRate =
  ColumnAppearance=Total_background
  Description=The Lower Rate
  ExtensionAttribute=LowerRate
  Format=
  GroupLabel=FieldCustom
  Label=Lower Rate
  Name=Lower Rate


  MarketYield =
  Access=ReadOnly
  Description=
  ExtensionAttribute=MarketYield
  Format=
  GroupLabel=FieldCustom
  LabelList=Market Yield
  Name=Market Yield


  MarkToMarket =
  Access=ReadOnly
  Description=The latest mark to market (from collateral to bond) for LIQ21
  ExtensionAttribute=MarkToMarket
  Format=
  GroupLabel=FieldCustom
  LabelList=Mark To Market
  Name=Mark To Market


  MarkToModel =
  Access=ReadOnly
  Description=The source of Mark to Market (bid price).
  ExtensionAttribute=MarkToModel
  Format=
  GroupLabel=FieldCustom
  LabelList=Mark To Model
  Name=Mark To Model


  MATPROCAMT =
  Access=ReadOnly
  Description=
  ExtensionAttribute=MATPROCAMT
  Format=
  GroupLabel=FieldCustom
  LabelList=MATPROCAMT
  Name=MATPROCAMT


  maturitydate_adj =
  Description=adjusted Instrument maturity date for one reporting
  ExtensionAttribute=maturitydate_adj
  Format=
  GroupLabel=FieldCustom
  LabelList=MATURITY DATE
  Name=MATURITY DATE


  MaturityDateDealPackage =
  Description=maturity date values for MMLD & MDCI
  ExtensionAttribute=MaturityDateDP
  GroupLabel=FieldCustom
  LabelList=MaturityDateDP
  Name=MaturityDateDP


  MMDF =
  Description=FASBI
  ExtensionAttribute=MMDF
  GroupLabel=FieldCustom
  Label=DF
  Name=DF


  MMInterbank =
  Description=CL, MD, CMP, CMT, OVP, OVT, BLT, SHARI, BA
  ExtensionAttribute=MMInterbank
  GroupLabel=FieldCustom
  Label=MM - Interbank Placement & Taken
  Name=MM - Interbank Placement & Taken


  MMInterbankPlacement =
  Description=CL, MD, CMP, CMT, OVP, OVT, BLT, SHARI, BA
  ExtensionAttribute=MMInterbankPlacement
  GroupLabel=FieldCustom
  Label=MM - Interbank Placement
  Name=MM - Interbank Placement


  MMInterbankTaken =
  Description=CL, MD, CMP, CMT, OVP, OVT, BLT, SHARI, BA
  ExtensionAttribute=MMInterbankTaken
  GroupLabel=FieldCustom
  Label=MM - Interbank Taken
  Name=MM - Interbank Taken


  MMLF =
  Description=LF-FASBI
  ExtensionAttribute=MMLF
  GroupLabel=FieldCustom
  Label=LF
  Name=LF


  MO05_LimitStatus =
  ColumnAppearance=LimitStatusColor_MO05
  Description=MO05 Limit Status (From "NOP Limit - UAT (Tito)")
  ExtensionAttribute=MO05_LimitInd
  GroupLabel=FieldCustom
  Label=Status Limit MO05
  Name=Status Limit MO05


  MO05_RuleLimit =
  ColumnAppearance=Total_background
  Description=MO05 Rule Limit (From "NOP Limit - UAT (Tito)")
  ExtensionAttribute=MO05_RuleLimitValue
  GroupLabel=FieldCustom
  Label=Limit MO05
  Name=Limit MO05


  MO05_UtilizationPercentage =
  ColumnAppearance=Total_background
  Description=MO05 Utilization Percentage (From "NOP Limit - UAT (Tito)")
  ExtensionAttribute=MO05_UtilizationPercentage
  GroupLabel=FieldCustom
  Label=Utilization Percentage MO05
  Name=Utilization Percentage MO05


  MO07_LimitStatus =
  ColumnAppearance=LimitStatusColor_MO07
  Description=MO07 Limit Status (From "PV01 Limit - ADE")
  ExtensionAttribute=MO07_LimitInd
  GroupLabel=FieldCustom
  Label=Status Limit MO07
  Name=Status Limit MO07


  MO07_RuleLimit =
  ColumnAppearance=Total_background
  Description=MO07 Rule Limit (From "PV01 Limit - ADE")
  ExtensionAttribute=MO07_RuleLimitValue
  GroupLabel=FieldCustom
  Label=Limit MO07
  Name=Limit MO07


  MO07_UtilizationPercentage =
  ColumnAppearance=Total_background
  Description=MO07 Utilization Percentage (From "PV01 Limit - ADE")
  ExtensionAttribute=MO07_UtilizationPercentage
  GroupLabel=FieldCustom
  Label=Utilization Percentage MO07
  Name=Utilization Percentage MO07


  MO12_Utilization =
  ColumnAppearance=Total_background
  Description=Counterparty CEM Limit Display
  ExtensionAttribute=MO12Utilization
  GroupLabel=FieldCustom
  Label=Utilization
  Name=Utilization


  MO13_ExpiryStatus =
  ColumnAppearance=ExpiryStatusColor_MO13
  Description=MO13 Limit Expiry Status (From "Standard_Issuer")
  ExtensionAttribute=MO13_ExpiryStatus
  GroupLabel=FieldCustom
  Label=Status Limit Expiry MO13
  Name=Status Limit Expiry MO13


  MO13_LastDiaryNote =
  ColumnAppearance=Total_background
  Description=MO13 Last Diary Note (From "Standard_Issuer")
  ExtensionAttribute=MO13_LastDiaryNote
  GroupLabel=FieldCustom
  Label=Note MO13
  Name=Note MO13


  MO13_LimitExpiry =
  ColumnAppearance=Total_background
  Description=MO13 Limit Expiry (From "Standard_Issuer")
  ExtensionAttribute=MO13_LimitExpiry
  GroupLabel=FieldCustom
  Label=Limit Expiry MO13
  Name=Limit Expiry MO13


  MO13_LimitStatus =
  ColumnAppearance=LimitStatusColor_MO13
  Description=MO13 Limit Status (From "Standard_Issuer")
  ExtensionAttribute=MO13_LimitInd
  GroupLabel=FieldCustom
  Label=Status Limit MO13
  Name=Status Limit MO13


  MO13_RuleLimit =
  ColumnAppearance=Total_background
  Description=MO13 Rule Limit (From "Standard_Issuer")
  ExtensionAttribute=MO13_RuleLimitValue
  GroupLabel=FieldCustom
  Label=Limit MO13
  Name=Limit MO13


  MO13_Utilization =
  ColumnAppearance=Total_background
  Description=Issuer Limit Display
  ExtensionAttribute=MO13Utilization
  GroupLabel=FieldCustom
  Label=Utilization MO13
  Name=Utilization MO13


  MO13_UtilizationPercentage =
  ColumnAppearance=Total_background
  Description=MO13 Utilization Percentage (From "Standard_Issuer")
  ExtensionAttribute=MO13_UtilizationPercentage
  GroupLabel=FieldCustom
  Label=Utilization Percentage MO13
  Name=Utilization Percentage MO13


  MoneyAmount =
  ColumnAppearance=Total_background
  Description=The amount conversed. Calculation: Nominal * Exchange Rate
  ExtensionAttribute=MoneyAmount
  Format=
  GroupLabel=FieldCustom
  Label=Money Amount
  Name=Money Amount


  MoneyEndDate =
  Description=Money A Date
  ExtensionAttribute=MoneyEndDate
  GroupLabel=FieldCustom
  Label=A Date
  Name=A Date


  MoneyFlowAmount =
  Description=money flow ampunt according to type
  ExtensionAttribute=MoneyFlowAmount
  GroupLabel=FieldCustom
  Label=Amount
  Name=MoneyFlow Amount


  Month =
  ColumnAppearance=Total_background
  Description=Month
  ExtensionAttribute=Month
  Format=
  GroupLabel=FieldCustom
  Label=Month
  Name=Month


  Month_TradeTime =
  ColumnAppearance=
  Description=Month based on Trade Time
  ExtensionAttribute=Month_TradeTime
  Format=
  GroupLabel=FieldCustom
  Label=Month Trade Time
  Name=Month Trade Time


  MonthlyLossLimitUse =
  Description=theoretical p/l monthly * close rate IDR
  ExtensionAttribute=MonthlyLossLimitUse
  Format=
  GroupLabel=FieldCustom
  LabelList=MonthlyLossLimitUse
  Name=Monthly Loss Limit Use


  MonthlyLossLimitUse2 =
  Description=PnL Monthly / Loss Limit Monthly
  ExtensionAttribute=MonthlyLossLimitUse2
  Format=
  GroupLabel=FieldCustom
  LabelList=Monthly Loss Limit Use
  Name=Monthly Loss Limit Use 2


  MonthNow =
  Access=ReadOnly
  Description=
  ExtensionAttribute=MonthNow
  Format=
  GroupLabel=FieldCustom
  LabelList=MonthNow
  Name=MonthNow


  MonthNumber =
  ColumnAppearance=Total_background
  Description=Month in number.
  ExtensionAttribute=MonthNumber
  Format=
  GroupLabel=FieldCustom
  Label=Month Number
  Name=Month Number


  MonthToExpired =
  Access=ReadOnly
  Description=The length of time remaining before the transaction expires in month
  ExtensionAttribute=MonthToExpired
  Format=
  GroupLabel=FieldCustom
  LabelList=Month to Expired
  Name=Month to Expired


  MOODYSDataBloomberg =
  Access=ReadOnly
  Description=The rating of MOODYS in Bloomberg
  ExtensionAttribute=MOODYSDataBloomberg
  Format=
  GroupLabel=FieldCustom
  LabelList=MOODYS Data Bloomberg
  Name=MOODYS Data Bloomberg


  MOODYSDataNTCS =
  Access=ReadOnly
  Description=The rating of MOODYS in NTCS
  ExtensionAttribute=MOODYSDataNTCS
  Format=
  GroupLabel=FieldCustom
  LabelList=MOODYS Data NTCS
  Name=MOODYS Data NTCS


  MOODYSHasilMatch =
  Access=ReadOnly
  Description=The match result of MOODYS between NTCS and other sources
  ExtensionAttribute=MOODYSHasilMatch
  Format=
  GroupLabel=FieldCustom
  LabelList=MOODYS Hasil Match
  Name=MOODYS Hasil Match


  Movement =
  ColumnAppearance=Movement
  Description=The balance movement, obtained from the difference between Today's balance and the previouos day's difference
  ExtensionAttribute=Movement
  Format=Impercise
  GroupLabel=FieldCustom
  LabelList=Movement
  Name=Movement


  MTD =
  Access=ReadOnly
  ColumnAppearance=MTD
  Description=Get MTD Value from Hierarchy
  ExtensionAttribute=MTD
  GroupLabel=FieldCustom
  Name=MTD


  MTM =
  Access=ReadOnly
  Description=The mark to market price of Bond transaction
  ExtensionAttribute=MTM
  Format=
  GroupLabel=FieldCustom
  LabelList=MTM
  Name=MTM


  NasabahBeli =
  Access=ReadOnly
  Description=Equals to buy amount
  ExtensionAttribute=NasabahBeli
  Format=
  GroupLabel=FieldCustom
  LabelList=Nasabah Beli
  Name=Nasabah Beli


  NasabahJual =
  Access=ReadOnly
  Description=Equals to sell amount
  ExtensionAttribute=NasabahJual
  Format=
  GroupLabel=FieldCustom
  LabelList=Nasabah Jual
  Name=Nasabah Jual


  NAV =
  Access=ReadOnly
  Description=The source of Mark to Market (bid price).
  ExtensionAttribute=NAV
  Format=
  GroupLabel=FieldCustom
  LabelList=NAV
  Name=NAV


  NDFFixingPrice =
  Description=Price of NDF at Fixing Date
  ExtensionAttribute=NDFFixingPrice
  Format=
  GroupLabel=FieldCustom
  LabelList=NDFFixingPrice
  Name=NDF Fixing Price


  NearAmount =
  Description=Near Amount is the near money of the transaction (from Premium in FA)
  ExtensionAttribute=NearAmount
  Format=
  GroupLabel=FieldCustom
  Label=Near Amount
  Name=Near Amount


  NearAmount1 =
  ColumnAppearance=Total_background_NearAmount1
  Description=Near Amount is the near money of the transaction.
  ExtensionAttribute=NearAmount1
  Format=
  GroupLabel=FieldCustom
  Label=Near Amount 1
  Name=Near Amount 1


  NearAmount2 =
  ColumnAppearance=Total_background_NearAmount2
  Description=The total of Near Amount 1 * Near Rate.
  ExtensionAttribute=NearAmount2
  Format=
  GroupLabel=FieldCustom
  Label=Near Amount 2
  Name=Near Amount 2


  NetAmount =
  Access=ReadOnly
  Description=Amount of transaction deduct with allowance for possible losses.
  ExtensionAttribute=NetAmount
  Format=Imprecise
  GroupLabel=FieldCustom
  LabelList=Net Amount
  Name=Net Amount


  NetPosition =
  Description=Net Position
  ExtensionAttribute=NetPosition
  Format=
  GroupLabel=FieldCustom
  LabelList=Net Position
  Name=Net Position


  NewCTPTYCIF =
  ColumnAppearance=Total_background
  Description=New counterparty CIF/Host ID. Update time is today.
  ExtensionAttribute=NewCTPTYCIF
  Format=
  GroupLabel=FieldCustom
  Label=New CTPTY CIF
  Name=New CTPTY CIF


  NewCTPTYReff =
  ColumnAppearance=Total_background
  Description=New counterparty reff. Update time is today.
  ExtensionAttribute=NewCTPTYReff
  Format=
  GroupLabel=FieldCustom
  Label=New CTPTY Reff
  Name=New CTPTY Reff


  NextCFPeriod =
  Description=The next period of payment
  ExtensionAttribute=NextCFPeriod
  Format=
  GroupLabel=FieldCustom
  LabelList=Next Payment Period
  Name=Next Payment


  NextCouponDate =
  Access=ReadOnly
  Description=
  ExtensionAttribute=NextCouponDate
  Format=
  GroupLabel=FieldCustom
  LabelList=Next Coupon Date
  Name=Next Coupon Date


  NextPaymentDate =
  Access=ReadOnly
  Description=Next Cashflow Payment Date
  ExtensionAttribute=NextPaymentDate
  GroupLabel=FieldCustom
  LabelList=NextPaymentDate
  Name=NextPaymentDate


  NextPaymentPeriod =
  Access=ReadOnly
  Description=The next period of payment
  ExtensionAttribute=NextPaymentPeriod
  Format=
  GroupLabel=FieldCustom
  LabelList=Next Payment Period
  Name=Next Payment Period


  NII =
  ColumnAppearance=Total_background
  Description=Net Interest Income
  ExtensionAttribute=NII
  Format=
  GroupLabel=FieldCustom
  Label=NII
  Name=NII


  NIIThisYear =
  Description=Net Interest Income in this year (0y).
  ExtensionAttribute=NIIThisYear
  Format=Imprecise
  GroupLabel=Profit & loss (fee based income & net interest income)
  Name=NII 0y


  NIIYesteryear =
  Description=Net Interest Income a year before (-1y).
  ExtensionAttribute=NIIYesteryear
  Format=Imprecise
  GroupLabel=Profit & loss (fee based income & net interest income)
  Name=NII -1y


  NilaiBeliKembali =
  Access=ReadOnly
  Description=The re-sale value of transaction. The value of transaction at the end of a lease.
  ExtensionAttribute=NilaiBeliKembali
  Format=
  GroupLabel=FieldCustom
  LabelList=Nilai Beli Kembali
  Name=Nilai Beli Kembali


  NilaiBuku =
  Description=Trade Mark to Market Value.
  ExtensionAttribute=NilaiBuku
  GroupLabel=FieldCustom
  LabelList=Nilai Buku
  Name=Nilai Buku


  NilaiPasar =
  Access=ReadOnly
  Description=Nominal * MTM Monthly
  ExtensionAttribute=NilaiPasar
  Format=
  GroupLabel=FieldCustom
  LabelList=NILAI PASAR (ORIG CURR)
  Name=Nilai Pasar (Orig Curr)


  NilaiPasar2 =
  Access=ReadOnly
  Description=Nominal * MTM Monthly * FX Rate IDR
  ExtensionAttribute=NilaiPasar2
  Format=
  GroupLabel=FieldCustom
  LabelList=NILAI PASAR (RUPIAH)
  Name=Nilai Pasar (Rupiah)


  NilaiPerolehan =
  Access=ReadOnly
  Description=Nominal * Trade Price
  ExtensionAttribute=NilaiPerolehan
  Format=
  GroupLabel=FieldCustom
  LabelList=NILAI PEROLEHAN (ORIG CURR)
  Name=Nilai Perolehan (Orig Curr)


  NilaiPerolehan2 =
  Access=ReadOnly
  Description=Nominal * Trade Price * FX Rate Rupiah
  ExtensionAttribute=NilaiPerolehan2
  Format=
  GroupLabel=FieldCustom
  LabelList=NILAI PEROLEHAN (RUPIAH)
  Name=Nilai Perolehan (Rupiah)


  nilaiRepo1stLeg =
  Description=Security Value of Collateral
  ExtensionAttribute=nilaiRepo1stLeg
  Format=
  GroupLabel=FieldCustom
  LabelList=nilaiRepo1stLeg
  Name=nilaiRepo1stLeg


  nisbahBagiHasil =
  ColumnAppearance=Total_background
  Description=The nominal of transaction based on original currency, it is calculation in the beginning, when bank gives loans 65% and party 35%.
  ExtensionAttribute=nisbahBagiHasil
  Format=
  GroupLabel=FieldCustom
  Label=nisbahBagiHasil
  Name=Nisbah Bagi Hasil


  Nominal_AllMM =
  Access=ReadOnly
  Description=Quantity (nominal) for all MM (DL, REVREPO, BONDSREPO, SBI, BOND, TD)
  ExtensionAttribute=Nominal_AllMM
  Format=
  GroupLabel=FieldCustom
  LabelList=Nominal
  Name=Nominal for all MM


  Nominal_onerep =
  Description=nominal for one reporting so not 0
  ExtensionAttribute=Nominal_onerep
  GroupLabel=FieldCustom
  LabelList=Nominal
  Name=Nominal


  nominalBondsIDR =
  Description=Nominal of the Bonds in IDR
  ExtensionAttribute=nominalBondsIDR
  Format=
  GroupLabel=FieldCustom
  LabelList=nominalBondsIDR
  Name=nominalBondsIDR


  nominalBondsValas =
  Description=Nominal of the Bonds in Valas
  ExtensionAttribute=nominalBondsValas
  Format=
  GroupLabel=FieldCustom
  LabelList=nominalBondsValas
  Name=nominalBondsValas


  nominalCollateral =
  Description=Nominal Collateral
  ExtensionAttribute=nominalCollateral
  Format=
  GroupLabel=FieldCustom
  LabelList=Nominal
  Name=nominalCollateral


  NominalCoupon =
  Access=ReadOnly
  Description=The amount before any discount/cut
  ExtensionAttribute=NominalCoupon
  Format=
  GroupLabel=FieldCustom
  LabelList=Nominal Coupon
  Name=Nominal Coupon


  NominalCustom =
  Access=ReadOnly
  Description=Nominal
  ExtensionAttribute=NominalCustom
  Format=
  GroupLabel=FieldCustom
  LabelList=Nominal
  Name=Nominal


  nominalDokumenUnderlying =
  Description=If LCS Yes, AdditionalInfo - Underlying Nominal
  ExtensionAttribute=nominalDokumenUnderlying
  Format=
  GroupLabel=FieldCustom
  LabelList=nominalDokumenUnderlying
  Name=nominalDokumenUnderlying


  nominalRupiah =
  Description=Rupiah Nominal
  ExtensionAttribute=nominalRupiah
  GroupLabel=FieldCustom
  Label=nominalRupiah
  Name=nominalRupiah


  nominalValas =
  Description=Valas Nominal
  ExtensionAttribute=nominalValas
  GroupLabel=FieldCustom
  Label=nominalValas
  Name=nominalValas


  NominalValutaDasarPerUnderlying =
  Access=ReadOnly
  Description=-
  ExtensionAttribute=NominalValutaDasarPerUnderlying
  Format=
  GroupLabel=FieldCustom
  LabelList=NominalValutaDasarPerUnderlying
  Name=NominalValutaDasarPerUnderlying


  NominativeList =
  Access=ReadOnly
  Description=combination of insid and optkey4
  ExtensionAttribute=NominativeList
  Format=
  GroupLabel=FieldCustom
  LabelList=Nominative List
  Name=Nominative List


  NomorBuktiPotongFI =
  Description=Nomor Bukti Potong / NTPN FI
  ExtensionAttribute=NomorBuktiPotongFI
  Format=
  GroupLabel=FieldCustom
  LabelList=Nomor Bukti Potong / NTPN
  Name=Nomor Bukti Potong FI


  NomorBuktiPotongMDS =
  Description=Nomor Bukti Potong / NTPN MDS
  ExtensionAttribute=NomorBuktiPotongMDS
  Format=
  GroupLabel=FieldCustom
  LabelList=Nomor Bukti Potong / NTPN
  Name=Nomor Bukti Potong MDS


  NomorBuktiPotongPasal26 =
  Description=Nomor Bukti Potong / NTPN Pasal 26
  ExtensionAttribute=NomorBuktiPotongPasal26
  Format=
  GroupLabel=FieldCustom
  LabelList=Nomor Bukti Potong / NTPN
  Name=Nomor Bukti Potong Pasal 26


  nomorDokumenUnderlying =
  Description=If LCS Yes, AdditionalInfo - Underlying Ref
  ExtensionAttribute=nomorDokumenUnderlying
  Format=
  GroupLabel=FieldCustom
  LabelList=nomorDokumenUnderlying
  Name=nomorDokumenUnderlying


  NomorIdentifikasi =
  ColumnAppearance=Total_background
  Description=<InstrumentType>.<OptKey3>.<TradeNumber>
  ExtensionAttribute=NomorIdentifikasi
  Format=
  GroupLabel=FieldCustom
  Label=Nomor Identifikasi
  Name=Nomor Identifikasi


  nomorSuratBerharga =
  Description=ISIN code for Repo Collateral
  ExtensionAttribute=nomorSuratBerharga
  Format=
  GroupLabel=FieldCustom
  Label=nomorSuratBerharga
  Name=nomorSuratBerharga


  NOP Overnight =
  ColumnAppearance=Total_background
  Description=NOP Overnight
  ExtensionAttribute=NOP Overnight
  GroupLabel=FieldCustom
  Label=NOP Overnight
  Name=NOP Overnight


  NOPLimit =
  Description=NOP Limit
  ExtensionAttribute=NOPLimit
  Format=
  GroupLabel=FieldCustom
  LabelList=NOP Limit
  Name=NOP Limit


  NOPLimitUse =
  Description=
  ExtensionAttribute=NOPLimitUse
  Format=
  GroupLabel=FieldCustom
  LabelList=NOP Limit Use
  Name=NOP Limit Use


  NOPOvernight =
  ColumnAppearance=Total_background
  Description=NOP Overnight
  ExtensionAttribute=NOPOvernight
  GroupLabel=FieldCustom
  Label=NOP Overnight
  Name=NOP Overnight


  NOPThresholdValue =
  Access=ReadOnly
  Description=NOP Threshold Value
  ExtensionAttribute=NOPThresholdValue
  Format=
  GroupLabel=FieldCustom
  LabelList=NOPThresholdValue
  Name=NOPThresholdValue


  NOPUtilizationPercentage =
  Description=Standard NOP Utilization Percentage
  ExtensionAttribute=NOPUtilizationPercentage
  Format=
  GroupLabel=FieldCustom
  LabelList=NOPUtilizationPercentage
  Name=NOPUtilizationPercentage


  NostroMirrorACName =
  Description=Nostro mirror a/c name form Party Definition Accounts
  ExtensionAttribute=NostroMirrorACName
  Format=
  GroupLabel=FieldCustom
  LabelList=Nostro Mirror A/C Name
  Name=Nostro Mirror A/C Name


  NostroMirrorACNumber =
  Description=Nostro mirror a/c number form Party Definition Accounts
  ExtensionAttribute=NostroMirrorACNumber
  Format=
  GroupLabel=FieldCustom
  LabelList=Nostro Mirror A/C Number
  Name=Nostro Mirror A/C Number


  Notional %Utilization =
  Access=ReadOnly
  Description=The Percentage of utilization of Notional Limit
  ExtensionAttribute=NotionalPercentageUtilization
  Format=
  GroupLabel=FieldCustom
  LabelList=Notional % Utilization
  Name=Notional % Utilization


  Notional 1DayChange =
  Access=ReadOnly
  Description=Uti
  ExtensionAttribute=Notional1DayChange
  Format=
  GroupLabel=FieldCustom
  LabelList=Notional 1 Day Change
  Name=Notional 1 Day Change


  Notional Limit =
  Access=ReadOnly
  Description=The Notional Limit of Customer
  ExtensionAttribute=NotionalLimit
  Format=
  GroupLabel=FieldCustom
  LabelList=Notional Limit
  Name=Notional Limit


  Notional Utilization =
  Access=ReadOnly
  Description=The utilzation of Notional Limit
  ExtensionAttribute=NotionalUtilization
  Format=
  GroupLabel=FieldCustom
  LabelList=Notional Utilization
  Name=Notional Utilization


  NotionalPorSCustom =
  Description=BOa08 return positive value of nominalAmountAccountingCCS
  ExtensionAttribute=NotionalPorSCustom
  GroupLabel=FieldCustom
  LabelList=NotionalPorS
  Name=NotionalPorS


  NPWPPotong =
  Description=NPWP WP yang Dipotong
  ExtensionAttribute=NPWPPotong
  Format=
  GroupLabel=FieldCustom
  LabelList=NPWP WP yang Dipotong
  Name=NPWP WP yang Dipotong


  NTR =
  Access=ReadOnly
  Description=Non Tax Revenue (NTR) Rate
  ExtensionAttribute=AmountClosing
  Format=
  GroupLabel=FieldCustom
  LabelList=NTR
  Name=NTR


  O/N =
  Access=ReadOnly
  Description=
  ExtensionAttribute=O/N
  Format=
  GroupLabel=FieldCustom
  LabelList=O/N
  Name=O/N


  OBJID =
  Access=ReadOnly
  Description=
  ExtensionAttribute=OBJID
  Format=
  GroupLabel=FieldCustom
  LabelList=OBJID
  Name=OBJID


  OffShoreFunding =
  Description=Shows Face Value if Product is "IT/FB".
  ExtensionAttribute=OffShoreFunding
  GroupLabel=FieldCustom
  LabelList=Off Shore BA Funding
  Name=Off Shore BA Funding


  OneDayChange =
  Description=Utilization today subtracted by utilization yesterday
  ExtensionAttribute=DayChangeTrading
  Format=
  GroupLabel=FieldCustom
  InheritsFrom=Portfolio Position
  Label=1 Day Change
  Name=1 Day Change
  Parameters=TimeApportionmentType;PosCurrChoice;AggCurrChoice;FixedCurr
  Type=Bucket
  Vector=timeBucketsSetExternally


  OnShoreFunding =
  Description=Shows Face Value if Sources column is "On Shore" and Trade Key 4 is "IT".
  ExtensionAttribute=OnShoreFunding
  GroupLabel=FieldCustom
  LabelList=On Shore Funding
  Name=On Shore Funding


  OnShoreLongTerm =
  Description=Face Value for On Shore Long term.
  ExtensionAttribute=OnShoreLongTerm
  GroupLabel=FieldCustom
  LabelList=On Shore Long Term
  Name=On Shore Long Term


  OnShoreShortTerm =
  Description=Face Value for On Shore Short term.
  ExtensionAttribute=OnShoreShortTerm
  GroupLabel=FieldCustom
  LabelList=On Shore Short Term
  Name=On Shore Short Term


  Optkey3JournalItem =
  Access=ReadOnly
  Description=Optkey3 for Journal Item
  ExtensionAttribute=Optkey3JournalItem
  Format=
  GroupLabel=FieldCustom
  LabelList=PRODUCT
  Name=PRODUCT


  Optkey4JournalItem =
  Access=ReadOnly
  Description=Optkey4 for Journal Item
  ExtensionAttribute=Optkey4JournalItem
  Format=
  GroupLabel=FieldCustom
  LabelList=TYPE
  Name=TYPE


  ORD =
  Access=ReadOnly
  Description=
  ExtensionAttribute=ORD
  Format=
  GroupLabel=FieldCustom
  LabelList=ORD
  Name=ORD


  OthersFairValue =
  Access=ReadOnly
  Description=The fair value of transaction
  ExtensionAttribute=OthersFairValue
  Format=
  GroupLabel=FieldCustom
  LabelList=Others (Fair Value)
  Name=Others (Fair Value)


  OthersNotAmt =
  Access=ReadOnly
  Description=The unamortized of other to lend
  ExtensionAttribute=OthersNotAmt
  Format=
  GroupLabel=FieldCustom
  LabelList=Others (Not Amortized)
  Name=Others (Not Amortized)


  OurCorrespondentBank =
  Description=Our Account (Acq)
  ExtensionAttribute=OurCorrespondentBank
  GroupLabel=FieldCustom
  Name=OurCorrespondentBank
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  OutstandingAmount =
  Description=The outstanding amount of transaction.
  ExtensionAttribute=OutstandingAmount
  GroupLabel=FieldCustom
  Label=Outstanding Amount
  Name=Outstanding Amount


  OutstandingEqvUSD =
  ColumnAppearance=Total_background
  Description=The amount of transaction that equals to USD.
  ExtensionAttribute=OutstandingEqvUSD
  GroupLabel=FieldCustom
  Label=Outstanding Eqv USD
  Name=Outstanding Eqv USD


  Paramt =
  Access=ReadOnly
  Description=The par amount, where the Fund, Corporate Bond will be "100", then else "1000"
  ExtensionAttribute=Paramt
  Format=
  GroupLabel=FieldCustom
  LabelList=Paramt
  Name=Paramt


  PayDate =
  Access=ReadOnly
  Description=The date the payment is due
  ExtensionAttribute=PayDate
  Format=
  GroupLabel=FieldCustom
  LabelList=Pay Date
  Name=Pay Date


  PayDayCustom =
  Access=ReadOnly
  Description=Pay Day Custom
  ExtensionAttribute=PayDayCustom
  Format=
  GroupLabel=FieldCustom
  LabelList=Pay Day
  Name=Pay Day


  PayLegEqvUSD =
  ColumnAppearance=Total_background
  Description=PayLeg Eqv USD
  ExtensionAttribute=PayLegEqvUSD
  GroupLabel=FieldCustom
  Label=PayLegEqvUSD
  Name=PayLegEqvUSD


  PaymentSystem =
  Access=ReadOnly
  Description=The payment system of the transaction
  ExtensionAttribute=PaymentSystem
  Format=
  GroupLabel=FieldCustom
  LabelList=Payment System
  Name=Payment System


  PayOrReceive =
  Access=ReadOnly
  Description=Pay or receive bank's perspective
  ExtensionAttribute=PayOrReceive
  Format=
  GroupLabel=FieldCustom
  LabelList=PAY/RECEIVE (BANK PERSPECTIVE)
  Name=Pay or Receive


  PEFINDODataBloomberg =
  Access=ReadOnly
  Description=The rating of PEFINDO in Bloomberg
  ExtensionAttribute=PEFINDODataBloomberg
  Format=
  GroupLabel=FieldCustom
  LabelList=PEFINDO Data Bloomberg
  Name=PEFINDO Data Bloomberg


  PEFINDODataNTCS =
  Access=ReadOnly
  Description=The rating of PEFINDO in NTCS
  ExtensionAttribute=PEFINDODataNTCS
  Format=
  GroupLabel=FieldCustom
  LabelList=PEFINDO Data NTCS
  Name=PEFINDO Data NTCS


  PEFINDOHasilMatch =
  Access=ReadOnly
  Description=The match result of PEFINDO between NTCS and other sources
  ExtensionAttribute=PEFINDOHasilMatch
  Format=
  GroupLabel=FieldCustom
  LabelList=PEFINDO Hasil Match
  Name=PEFINDO Hasil Match


  Pemeringkat =
  Access=ReadOnly
  Description=Institution Name who gives rating
  ExtensionAttribute=Pemeringkat
  Format=
  GroupLabel=FieldCustom
  LabelList=Pemeringkat
  Name=Pemeringkat


  Pemohon =
  Description=Pemohon
  ExtensionAttribute=Pemohon
  GroupLabel=FieldCustom
  Label=Pemohon
  Name=Pemohon


  Percentage =
  ColumnAppearance=
  Description=The percentage on FO46
  ExtensionAttribute=Percentage
  GroupLabel=FieldCustom
  Label=Percentage
  Name=Percentage


  Percentage_FX =
  ColumnAppearance=Total_background
  Description=The value of total divided by limit in percentage (FX)
  ExtensionAttribute=Percentage_FX
  GroupLabel=FieldCustom
  Label=%
  Name=%


  Percentage_IR =
  ColumnAppearance=Total_background
  Description=The value of total divided by limit in percentage (IR)
  ExtensionAttribute=Percentage_IR
  GroupLabel=FieldCustom
  Label=%
  Name=%


  Percentage_Yesterday =
  ColumnAppearance=Total_background
  Description=The number of times the transaction has been done (yesterday)
  ExtensionAttribute=Percentage_Yesterday
  GroupLabel=FieldCustom
  Label=Percentage Yesterday
  Name=Percentage Yesterday


  PercentageDeltaFX =
  Description=PercentageDeltaFX
  ExtensionAttribute=PercentageDeltaFX
  GroupLabel=FieldCustom
  Label=% Delta FX
  Name=% Delta FX


  PercentageDeltaIR =
  Description=PercentageDeltaIR
  ExtensionAttribute=PercentageDeltaIR
  GroupLabel=FieldCustom
  Label=% Delta IR
  Name=% Delta IR


  PercentageHolding =
  Description=The percentage of the existing holding period with the limit.
  ExtensionAttribute=PercentageHolding
  GroupLabel=FieldCustom
  Label=% Holding Status
  Name=% Holding Status


  PercentageMO01RPL =
  ColumnAppearance=Total_background
  Description=Percentage calculation for RPL Today
  ExtensionAttribute=PercentageMO01RPL
  GroupLabel=FieldCustom
  Label=Percentage MO01 RPL
  Name=Percentage MO01 RPL


  PercentageMO01RPL_Yesterday =
  ColumnAppearance=Total_background
  Description=Percentage calculation for RPL Yesterday
  ExtensionAttribute=PercentageMO01RPL_Yesterday
  GroupLabel=FieldCustom
  Label=Percentage MO01 RPL Yesterday
  Name=Percentage MO01 RPL Yesterday


  PercentageMO01UPL =
  Access=ReadOnly
  Description=Percentage calculation for UPL Today
  ExtensionAttribute=PercentageMO01UPL
  Format=
  GroupLabel=FieldCustom
  LabelList=Percentage MO01 UPL
  Name=Percentage MO01 UPL


  PercentageMO01UPL_Yesterday =
  Access=ReadOnly
  Description=Percentage calculation for UPL Yesterday
  ExtensionAttribute=PercentageMO01UPL_Yesterday
  Format=
  GroupLabel=FieldCustom
  LabelList=Percentage MO01 UPL Yesterday
  Name=Percentage MO01 UPL Yesterday


  PercentageOfBuySell =
  Description=Percentage of volume transaction per wilayah (USD) based on bank beli and bank jual
  ExtensionAttribute=PercentageOfBuySell
  Format=
  GroupLabel=FieldCustom
  LabelList=Percentage
  Name=Percentage Of Buy Sell


  PercentageVolumeYesterday =
  ColumnAppearance=Total_background
  Description=Percentage calculation of volume yeseterday in MO Reports
  ExtensionAttribute=PercentageVolumeYesterday
  GroupLabel=FieldCustom
  Label=Percentage Volume Yesterday
  Name=Percentage Volume Yesterday


  PercentNominal =
  Description=Percentage nominal per group
  ExtensionAttribute=PercentNominal
  Format=
  GroupLabel=FieldCustom
  LabelList=PercentNominal
  Name=Percent Nominal


  PercentUtilization =
  Access=ReadOnly
  Description=The percentage of utilization of credit equivalent limit
  ExtensionAttribute=PercentUtilization
  Format=
  GroupLabel=FieldCustom
  LabelList=% Utilization
  Name=% Utilization


  PercentUtilization__Trading =
  Access=ReadOnly
  Description=The percentage of utilization of credit equivalent limit
  ExtensionAttribute=PercentUtilizationTrading
  Format=
  GroupLabel=FieldCustom
  LabelList=% Utilization
  Name=% Utilization


  Peringkat =
  Access=ReadOnly
  Description=Rating
  ExtensionAttribute=Peringkat
  Format=
  GroupLabel=FieldCustom
  LabelList=Peringkat
  Name=Peringkat


  Period =
  ColumnAppearance=Total_background
  Description=Period of interest coupon calculation.
  ExtensionAttribute=Period
  Format=
  GroupLabel=FieldCustom
  Label=Period
  Name=Period


  Periode_Laporan =
  Access=ReadOnly
  Description=create column default "D" DESCRIPTION name: default "D" for BO29 in the description
  ExtensionAttribute=Periode_Laporan
  Format=
  GroupLabel=FieldCustom
  LabelList=Periode Laporan
  Name=Periode Laporan


  periodeData =
  Description=Time Period
  ExtensionAttribute=periodeData
  Format=
  GroupLabel=FieldCustom
  LabelList=periodeData
  Name=periodeData


  PhysicalForeign =
  Access=ReadOnly
  Description=Indicator, N for Not Foreign (Indonesia), Y for Foreign
  ExtensionAttribute=PhysicalForeign
  Format=
  GroupLabel=FieldCustom
  LabelList=PhysicalForeign
  Name=Physical Foreign


  Placement/Borrowing =
  Access=ReadOnly
  Description=
  ExtensionAttribute=Placement/Borrowing
  Format=
  GroupLabel=FieldCustom
  LabelList=Placement/Borrowing
  Name=Placement/Borrowing


  PnLIDR =
  Description=PnL In IDR
  ExtensionAttribute=PnLIDR
  GroupLabel=FieldCustom
  Name=PnLIDR


  PnLMonth =
  Description=PnL Monthly
  ExtensionAttribute=PnLMonth
  Format=
  GroupLabel=P&L
  LabelList=P&L Monthly
  Name=PnLMonth


  PnLYearly =
  Description=ICT Custom. Change in the monetary value gained or lost for the position since the beginning of the current report year.
  ExtensionAttribute=PnLYearly
  GroupLabel=FieldCustom
  LabelList=TPLY;Total P/L Year;Total Profit and Loss Yearly
  Name=PnLYearly
  ParametersFixedValues=PortfolioProfitLossStartDate=First Of Year;PortfolioProfitLossStartDateCustom=1970-01-01


  PorSCustom =
  Description=BOa08 Buy or Sell
  ExtensionAttribute=PorSCustom
  GroupLabel=FieldCustom
  LabelList=PorS
  Name=PorS


  Portfolio Convex =
  Description=The convexity of the portfolio.
  ExtensionAttribute=portfolioConvexity
  Format=Detailed
  GroupLabel=FieldCustom
  LabelList=Portfolio Convexity
  Name=Convexity Portfolio


  Portfolio Total Profit and Loss Yearly =
  Description=ICT Custom. Change in the monetary value gained or lost for the position since the beginning of the current report year.
  GroupLabel=FieldCustom
  InheritsFrom=Portfolio Total Profit and Loss
  LabelList=TPLY;Total P/L Year;Total Profit and Loss Yearly
  ParametersFixedValues=PortfolioProfitLossStartDate=First Of Year;PortfolioProfitLossStartDateCustom=1970-01-01


  Portfolio Value at Risk From Scenario Custom =
  Description=Scenario Value at Risk based on a stored scenario. The stored scenario will be executed and the VaR will be calculated for the given percentile, and the given decay factor.
  ExtensionAttribute=valueAtRiskFromScenario
  GroupLabel=FieldCustom
  InheritsFrom=Portfolio Value at Risk Column
  InputColumnDefinition=Portfolio Value at Risk Base Scenario
  LabelList=VaR Custom;SVaR Custom
  Name=Scenario Value at Risk Custom
  Parameters=PortfolioValueAtRiskConfidenceInterval;PortfolioValueAtRiskDecayFactor


  PortLimit =
  Description=The FComplianceRule Threshold Value of the Portfolio
  ExtensionAttribute=PortLimit
  GroupLabel=FieldCustom
  LabelList=Portfolio Limit
  Name=Portfolio Limit


  PortUtilPercent =
  Description=The Utilization Percentage from FRuleValue
  ExtensionAttribute=PortUtilPercent
  GroupLabel=FieldCustom
  LabelList=Portfolio Utilization Percent
  Name=Portfolio Utilization Percent


  PortUtilStatus =
  Description=The Utilization Status from FRuleValue
  ExtensionAttribute=PortUtilStatus
  GroupLabel=FieldCustom
  LabelList=Portfolio Utilization Status
  Name=Portfolio Utilization Status


  PosisiSaldoAkhirBulan =
  Description=Posisi Saldo Akhir Bulan
  ExtensionAttribute=PosisiSaldoAkhirBulan
  Format=
  GroupLabel=FieldCustom
  LabelList=Posisi Saldo Akhir Bulan
  Name=Posisi Saldo Akhir Bulan


  Position1To3Y =
  Description=Position For Maturity Between 1 Year to 3 Year
  ExtensionAttribute=Position1To3Y
  Format=
  GroupLabel=FieldCustom
  LabelList=1-3Y
  Name=Position1To3Y


  Position3To4Y =
  Description=Position For Maturity Between 3 Year to 4 Year
  ExtensionAttribute=Position3To4Y
  Format=
  GroupLabel=FieldCustom
  LabelList=3-4Y
  Name=Position3To4Y


  Position4To5Y =
  Description=Position For Maturity Between 4 Year to 5 Year
  ExtensionAttribute=Position4To5Y
  Format=
  GroupLabel=FieldCustom
  LabelList=4-5Y
  Name=Position4To5Y


  Position5To10Y =
  Description=Position For Maturity Between 5 Year to 10 Year
  ExtensionAttribute=Position5To10Y
  Format=
  GroupLabel=FieldCustom
  LabelList=5-10Y
  Name=Position5To10Y


  PositionEOD =
  Description=The date of daily reporting as the position of EOD of data transaction.
  ExtensionAttribute=PositionEOD
  Format=
  GroupLabel=FieldCustom
  LabelList=Position
  Name=Position


  PositionHigh10Y =
  Description=Position For Maturity Higher than 10 Year
  ExtensionAttribute=PositionHigh10Y
  Format=
  GroupLabel=FieldCustom
  LabelList=>10Y
  Name=PositionHigh10Y


  PositionLow1Y =
  Description=Position For Maturity Lower than 1 Year
  ExtensionAttribute=PositionLow1Y
  Format=
  GroupLabel=FieldCustom
  LabelList=<1Y
  Name=PositionLow1Y


  PPhPotong1 =
  Description=Jumlah PPh Yang Dipotong
  ExtensionAttribute=WHT
  Format=
  GroupLabel=FieldCustom
  LabelList=Jumlah PPh Yang Dipotong
  Name=Jumlah PPh Yang Dipotong


  PPhPotong2 =
  Description=Jumlah PPh Yang Dipotong 2
  ExtensionAttribute=WHT
  Format=
  GroupLabel=FieldCustom
  LabelList=PPh Yang Dipotong 2
  Name=Jumlah PPh Yang Dipotong 2


  PPlusI =
  Description=Face Value plus Total Interest.
  ExtensionAttribute=PPlusI
  Format=SixDecimalDetailedPercent
  GroupLabel=FieldCustom
  LabelList=P+i
  Name=P+i


  PPlusIAboveOneYear =
  Description=P+i value with Days to Maturity > 360.
  ExtensionAttribute=PPlusIAboveOneYear
  Format=
  GroupLabel=P+i
  LabelList=Above 1 Year
  Name=Above 1 Year


  PPlusICurrent =
  Description=P+i value with Days to Maturity between > 0 and < 2.
  ExtensionAttribute=PPlusICurrent
  Format=
  GroupLabel=P+i
  LabelList=Current
  Name=Current


  PPlusINineMonthToTwelveMonth =
  Description=P+i value with Days to Maturity between > 274 and < 361.
  ExtensionAttribute=PPlusINineMonthToTwelveMonth
  Format=
  GroupLabel=P+i
  LabelList=9-12 Month
  Name=9-12 Month


  PPlusIOneMonthToTwoMonth =
  Description=P+i value with Days to Maturity between > 30 and < 62.
  ExtensionAttribute=PPlusIOneMonthToTwoMonth
  Format=
  GroupLabel=P+i
  LabelList=1-2 Month
  Name=1-2 Month


  PPlusIOneWeek =
  Description=P+i value with Days to Maturity between > 1 and < 8.
  ExtensionAttribute=PPlusIOneWeek
  Format=
  GroupLabel=P+i
  LabelList=in 1 week
  Name=in 1 week


  PPlusIOneWeekToOneMonth =
  Description=P+i value with Days to Maturity between > 7 and < 31.
  ExtensionAttribute=PPlusIOneWeekToOneMonth
  Format=
  GroupLabel=P+i
  LabelList=1wk - 1 month
  Name=1wk - 1 month


  PPlusISixMonthToNineMonth =
  Description=P+i value with Days to Maturity between > 183 and < 275.
  ExtensionAttribute=PPlusISixMonthToNineMonth
  Format=
  GroupLabel=P+i
  LabelList=6-9 Month
  Name=6-9 Month


  PPlusIThreeMonthToSixMonth =
  Description=P+i value with Days to Maturity between > 91 and < 184.
  ExtensionAttribute=PPlusIThreeMonthToSixMonth
  Format=
  GroupLabel=P+i
  LabelList=3-6 Month
  Name=3-6 Month


  PPlusITwoMonthToThreeMonth =
  Description=P+i value with Days to Maturity between > 61 and < 92.
  ExtensionAttribute=PPlusITwoMonthToThreeMonth
  Format=
  GroupLabel=P+i
  LabelList=2-3 Month
  Name=2-3 Month


  premiOption =
  Access=ReadOnly
  Description=-
  ExtensionAttribute=premiOption
  Format=
  GroupLabel=FieldCustom
  LabelList=premiOption
  Name=premiOption


  PremiumCustom =
  Description=Trade Premium.
  ExtensionAttribute=PremiumCustom
  GroupLabel=FieldCustom
  Label=Premium
  Name=Premium Custom


  PrevEffDate =
  ColumnAppearance=Total_background
  Description=Effective Date - 1
  ExtensionAttribute=PrevEffDate
  Format=
  GroupLabel=FieldCustom
  Label=Previous Effective Date
  Name=Previous Effective Date


  PrevPrevEffDate =
  ColumnAppearance=Total_background
  Description=Effective Date - 2
  ExtensionAttribute=PrevPrevEffDate
  Format=
  GroupLabel=FieldCustom
  Label=Previous Previous Effective Date
  Name=Previous Previous Effective Date


  PrevPrevPrice =
  ColumnAppearance=Total_background
  Description=Price on two days ago. Calculation: Price(Value Day - 2).
  ExtensionAttribute=PrevPrevPrice
  Format=
  GroupLabel=FieldCustom
  Label=Previous Previous Price
  Name=Previous Previous Price


  PrevPrice =
  ColumnAppearance=Total_background
  Description=Price on yesterday. Calculation: Price(Value Day - 1).
  ExtensionAttribute=PrevPrice
  Format=
  GroupLabel=FieldCustom
  Label=Previous Price
  Name=Previous Price


  PriceYST =
  Access=ReadOnly
  Description=Market price difference between today and tomorrow value
  ExtensionAttribute=PriceYST
  Format=
  GroupLabel=FieldCustom
  LabelList=PriceYST
  Name=PriceYST


  PRINPAYAMT =
  Access=ReadOnly
  Description=Face value multiplied by price.
  ExtensionAttribute=PRINPAYAMT
  Format=
  GroupLabel=FieldCustom
  LabelList=PRINPAYAMT
  Name=PRINPAYAMT


  ProceedAmount =
  Access=ReadOnly
  Description=The proceed amount of transaction
  ExtensionAttribute=ProceedAmount
  Format=
  GroupLabel=FieldCustom
  LabelList=Proceed Amount
  Name=Proceed Amount


  ProceedAmtRepo =
  Description=The end cash of the repo transaction.
  ExtensionAttribute=EndCashRepo
  Format=
  GroupLabel=FieldCustom
  LabelList=ProceedAmtRepo
  Name=ProceedAmtRepo


  ProcessFlag =
  Access=ReadOnly
  Description=
  ExtensionAttribute=ProcessFlag
  Format=
  GroupLabel=FieldCustom
  LabelList=Process Flag
  Name=Process Flag


  Product =
  Access=ReadOnly
  Description=Product
  ExtensionAttribute=Product
  Format=
  GroupLabel=FieldCustom
  LabelList=Product
  Name=Product


  ProductCategoryCombination =
  Access=ReadOnly
  Description=Product - Type - InsType combination for BO28
  ExtensionAttribute=ProductCategory
  Format=
  GroupLabel=FieldCustom
  LabelList=PRODUCT
  Name=Product/Type/InsType


  PV01ThresholdValue =
  Access=ReadOnly
  Description=PV01 Threshold Value
  ExtensionAttribute=PV01ThresholdValue
  Format=
  GroupLabel=FieldCustom
  LabelList=PV01ThresholdValue
  Name=PV01ThresholdValue


  PV01UtilizationPercentage =
  Description=Standard PV01 Utilization Percentage
  ExtensionAttribute=PV01UtilizationPercentage
  Format=
  GroupLabel=FieldCustom
  LabelList=PV01UtilizationPercentage
  Name=PV01UtilizationPercentage


  PvFixedRate =
  Description=PV Value for Fixed Rate type
  ExtensionAttribute=PvFixedRate
  Format=
  GroupLabel=FieldCustom
  LabelList=Proceed Amount
  Name=Proceed Amount


  QualityOfPlacement =
  Description=The Quality Of Placement
  ExtensionAttribute=QualityOfPlacement
  GroupLabel=FieldCustom
  LabelList=QualityOfPlacement
  Name=QualityOfPlacement


  QuantityCustom =
  Access=ReadOnly
  Description=Quantity
  ExtensionAttribute=QuantityCustom
  Format=
  GroupLabel=FieldCustom
  LabelList=Quantity
  Name=Quantity


  QuantityUsed =
  Description=Quantity of this Instrument is used in a Trade
  ExtensionAttribute=QuantityUsed
  GroupLabel=FieldCustom
  Name=QuantityUsed


  RATE_8 =
  Access=ReadOnly
  Description=1 for IDR
  ExtensionAttribute=RATE_8
  Format=
  GroupLabel=FieldCustom
  LabelList=RATE_8
  Name=RATE_8


  RATE_VAL =
  Access=ReadOnly
  Description=Rate for FX and BOND
  ExtensionAttribute=RATE_VAL
  Format=
  GroupLabel=FieldCustom
  LabelList=Rate
  Name=Rate


  RateCustom =
  Description=Custom rate
  ExtensionAttribute=RateCustom
  GroupLabel=RateC
  LabelList=RateC
  Name=RateC


  RateNTRIDR =
  Description=Rate of MtM EOD NTR
  ExtensionAttribute=RateNTRIDR
  GroupLabel=FieldCustom
  LabelList=Rate NTR IDR
  Name=Rate NTR IDR


  RealizedPnLCustom =
  Description=(sell price - buy price)/100 * nominal.
  ExtensionAttribute=RealizedPnLCustom
  GroupLabel=FieldCustom
  LabelList=Realized PnL Custom
  Name=Realized PnL Custom


  ReferenceRate =
  Description=Shows Fixed Rate or Rate Index
  ExtensionAttribute=ReferenceRate
  GroupLabel=FieldCustom
  Label=Reference Rate
  Name=ReferenceRate


  Reff =
  <ProdType>.=
  ColumnAppearance=Total_background
  Description=The combining number between TradeNo, Type and Prodcode. Format: <trx_trdnbr></><insType></><ProdType>.
  ExtensionAttribute=Reff
  Format=
  GroupLabel=FieldCustom
  Label=Reff
  Name=Reff


  Reksadana =
  Description=
  ExtensionAttribute=Reksadana
  GroupLabel=FieldCustom
  Label=Reksadana
  Name=Reksadana


  Reksus =
  Description=Reksus
  ExtensionAttribute=Reksus
  Format=
  GroupLabel=FieldCustom
  LabelList=Reksus
  Name=Reksus


  RemarkOutstanding =
  ColumnAppearance=Total_background
  Description=The description of transaction (outstanding or not).
  ExtensionAttribute=RemarkOutstanding
  Format=
  GroupLabel=FieldCustom
  Label=Remark Outstanding
  Name=Remark Outstanding


  RemarkSellBuy =
  ColumnAppearance=Total_background
  Description=The description of the transaction (Sell/Buy from CCY to CCY).
  ExtensionAttribute=RemarkSellBuy
  Format=
  GroupLabel=FieldCustom
  Label=Remark Sell Buy
  Name=Remark Sell Buy


  Repo =
  Description=
  ExtensionAttribute=Repo
  GroupLabel=FieldCustom
  LabelList=REPO
  Name=Repo


  RepoBI =
  Description=
  ExtensionAttribute=RepoBI
  GroupLabel=FieldCustom
  Label=Repo BI
  Name=Repo BI


  RepoCashAmount =
  Description=End Cash of Repo
  ExtensionAttribute=RepoCashAmount
  GroupLabel=FieldCustom
  Name=Repo Cash Amount


  RepoCleanPrice =
  Description=Display Clean Price of Repo Instrument
  ExtensionAttribute=RepoCleanPrice
  GroupLabel=FieldCustom
  LabelList=CleanPrice
  Name=Repo Clean Price


  RepoDirtyPrice =
  Description=Display Dirty Price of Repo Instrument
  ExtensionAttribute=RepoDirtyPrice
  GroupLabel=FieldCustom
  LabelList=DirtyPrice
  Name=Repo Dirty Price


  RepoHaircut =
  Description=Display the haircut value of Repo Transaction
  ExtensionAttribute=RepoHaircut
  GroupLabel=FieldCustom
  LabelList=Haircut
  Name=Repo Haircut


  RepoInterbank =
  Description=
  ExtensionAttribute=RepoInterbank
  GroupLabel=FieldCustom
  Label=Repo Interbank
  Name=Repo Interbank


  RepoRate =
  Description=
  ExtensionAttribute=RepoRate
  GroupLabel=FieldCustom
  LabelList=REPO RATE
  Name=REPO RATE


  RepoUnderlyingName =
  Description=Display the underlying name of Repo Transaction
  ExtensionAttribute=RepoUnderlyingName
  GroupLabel=FieldCustom
  LabelList=RepoUnderlyingName
  Name=Repo Underlying Name


  RepoYield =
  Description=Display Trade Yield of Repo Transaction
  ExtensionAttribute=RepoYield
  GroupLabel=FieldCustom
  LabelList=Repo Trade Yield
  Name=Repo Trade Yield


  RepurchaseAmount =
  Description=Start Cash + Interest(Total Projection in all fixed rate cashflow)
  ExtensionAttribute=RepurchaseAmount
  Format=
  GroupLabel=FieldCustom
  LabelList=Repurchase Amount
  Name=Repurchase Amount


  RequiredAmountUnderlying =
  Description=Underlying amount minus Amount Accumulative
  ExtensionAttribute=RequiredAmountUnderlying
  GroupLabel=FieldCustom
  Label=Required Amount Of Underlying
  Name=Required Amount Of Underlying


  ReturnCoupon =
  Description=days/360 x coupon x nominal.
  ExtensionAttribute=ReturnCoupon
  GroupLabel=FieldCustom
  LabelList=Return Coupon
  Name=Return Coupon


  RevalRate =
  ColumnAppearance=Total_background
  Description=Reval Rate
  ExtensionAttribute=RevalRate
  GroupLabel=FieldCustom
  Label=Reval Rate
  Name=Reval Rate


  RevaluationAmount =
  ColumnAppearance=Total_background
  Description=
  ExtensionAttribute=RevaluationAmount
  GroupLabel=FieldCustom
  Label=RevaluationAmount
  Name=RevaluationAmount


  RevRepoBI =
  Description=
  ExtensionAttribute=RevRepoBI
  GroupLabel=FieldCustom
  Label=RevRepo BI
  Name=RevRepo BI


  RevRepoInterbank =
  Description=IBBI, IBOB, OVBSBI, OVBGOV, OVBOTH, CCSBI, CCGOV, CCOTH
  ExtensionAttribute=RevRepoInterbank
  GroupLabel=FieldCustom
  Label=RevRepo Interbank
  Name=RevRepo Interbank


  RiskWeight =
  ColumnAppearance=Total_background
  Description=The value of Risk Weight and could be parameterized
  ExtensionAttribute=RiskWeight
  GroupLabel=FieldCustom
  Label=SA-CCR Risk Weight
  Name=SA-CCR Risk Weight


  RowNumber =
  Description=Nomor di baris report
  ExtensionAttribute=RowNumber
  GroupLabel=FieldCustom
  Label=No
  Name=No


  RPL_Yesterday =
  Description=Realized Profit Loss Yesterday
  ExtensionAttribute=RPL_Yesterday
  Format=
  GroupLabel=FieldCustom
  Label=RPL_Yesterday
  Name=RPL_Yesterday


  Rule Value Utilization % Custom =
  ColumnAppearance=utilizationAppearancePercentCustom
  ExtensionAttribute=ruleValueUtilizationPercentCustom
  Format=Percent
  GroupLabel=FieldCustom
  InitialWidth=70
  LabelList=Utilization %


  Rule Value Utilization Custom =
  ColumnAppearance=utilizationAppearanceCustom
  ExtensionAttribute=ruleValueUtilizationCustom
  GroupLabel=Rule
  LabelList=Utilization


  SA-CCR_RWA =
  ColumnAppearance=Total_background
  Description=The value of Risk Weighted Asset. The multiplication of Risk Weight and EAD.
  ExtensionAttribute=SACCR_RWA
  GroupLabel=FieldCustom
  InheritsFrom=Portfolio Risk Column Base
  Label=SA-CCR RWA
  Name=SA-CCR RWA


  SaldoRata2PerTahun =
  Description=saldo rata-rata per tahun untuk product type DL.
  ExtensionAttribute=SaldoRata2PerTahun
  Format=
  GroupLabel=FieldCustom
  LabelList=Saldo Rata-Rata Per Tahun
  Name=Saldo Rata-Rata Per Tahun


  SaldoRata2PerTahun_v2 =
  Description=nominal/360.
  ExtensionAttribute=SaldoRata2PerTahun_v2
  GroupLabel=FieldCustom
  LabelList=Saldo Rata-Rata Per Tahun v2
  Name=Saldo Rata-Rata Per Tahun v2


  SaldoRata2PerTahun_v3 =
  Description=-1 * original price * (mat date - end date)/360
  ExtensionAttribute=SaldoRata2PerTahun_v3
  GroupLabel=FieldCustom
  LabelList=Saldo Rata-Rata Per Tahun v3
  Name=Saldo Rata-Rata Per Tahun v3


  SandiBank =
  Description=Kode Sandi Bank
  ExtensionAttribute=SandiBank
  GroupLabel=FieldCustom
  LabelList=Sandi Bank
  Name=Sandi Bank


  SB_Dimiliki =
  Description=
  ExtensionAttribute=SB_Dimiliki
  GroupLabel=FieldCustom
  Label=Surat Berharga Dimiliki
  Name=Surat Berharga Dimiliki


  SB_Terbit =
  Description=
  ExtensionAttribute=SB_Terbit
  GroupLabel=FieldCustom
  Label=SB Terbit
  Name=SB Terbit


  SCHED_Pay_Freq =
  Access=ReadOnly
  Description=Available for Sale
  ExtensionAttribute=SCHED_Pay_Freq
  Format=
  GroupLabel=FieldCustom
  LabelList=SCHED_Pay_Freq
  Name=SCHED_Pay_Freq


  Scttype =
  Access=ReadOnly
  Description=AFS, HTM, TRD indicator
  ExtensionAttribute=Scttype
  Format=
  GroupLabel=FieldCustom
  LabelList=SctType
  Name=SctType


  SECID =
  Access=ReadOnly
  Description=Security ID for instrument
  ExtensionAttribute=SECID
  Format=
  GroupLabel=FieldCustom
  LabelList=SECID
  Name=Security ID


  SECIDPrice =
  Access=ReadOnly
  Description=The price of securities
  ExtensionAttribute=SECIDPrice
  Format=
  GroupLabel=FieldCustom
  LabelList=SECID Price
  Name=SECID Price


  SecuritiesRating =
  ColumnAppearance=Total_background
  Description=The rating of securities.
  ExtensionAttribute=SecuritiesRating
  Format=
  GroupLabel=FieldCustom
  Label=Securities Rating
  Name=Securities Rating


  SecuritiesRatingInstituition =
  ColumnAppearance=Total_background
  Description=The rating of securities.
  ExtensionAttribute=SecuritiesRatingInstituition
  Format=
  GroupLabel=FieldCustom
  Label=SSecurities Rating Instituition
  Name=Securities Rating Instituition


  SellAmountCustom =
  ColumnAppearance=
  Description=The amount of sell transaction.
  ExtensionAttribute=SellAmountCustom
  GroupLabel=FieldCustom
  Name=Sell Amount


  SellAmountCustom2 =
  ColumnAppearance=
  Description=The amount of sell transaction.
  ExtensionAttribute=SellAmountCustom2
  GroupLabel=FieldCustom
  Name=Sell Amount 2


  SEQNUM =
  Access=ReadOnly
  Description=
  ExtensionAttribute=SEQNUM
  Format=
  GroupLabel=FieldCustom
  LabelList=SEQNUM
  Name=SEQNUM


  SETTAVGCOST =
  Access=ReadOnly
  Description=
  ExtensionAttribute=SETTAVGCOST
  Format=
  GroupLabel=FieldCustom
  LabelList=SETTAVGCOST
  Name=SETTAVGCOST


  SettBaseAmt =
  Description=End Cash Value on IDR Currency
  ExtensionAttribute=EndCashIdr
  Format=
  GroupLabel=FieldCustom
  LabelList=SettBaseAmt
  Name=SettBaseAmt


  SettleValue =
  Access=ReadOnly
  Description=Settle Price from Price Entry (Latest)
  ExtensionAttribute=SettleValue
  Format=
  GroupLabel=FieldCustom
  LabelList=Settle
  Name=Settle


  ShortTermFDQ =
  Description=Face Value for Short term FDQ.
  ExtensionAttribute=ShortTermFDQ
  GroupLabel=FieldCustom
  LabelList=Short Term FDQ
  Name=Short Term FDQ


  SingleInterestPayment =
  Access=ReadOnly
  Description=The amount of Payment that BM received
  ExtensionAttribute=SingleInterestPayment
  Format=
  GroupLabel=FieldCustom
  LabelList=Single Interest Payment
  Name=Single Interest Payment


  SingleInterestReceived =
  Access=ReadOnly
  Description=The amount of interest that BM received
  ExtensionAttribute=SingleInterestReceived
  Format=
  GroupLabel=FieldCustom
  LabelList=Single Interest Received
  Name=Single Interest Received


  SNPDataBloomberg =
  Access=ReadOnly
  Description=The rating of SNP in Bloomberg
  ExtensionAttribute=SNPDataBloomberg
  Format=
  GroupLabel=FieldCustom
  LabelList=SNP Data Bloomberg
  Name=SNP Data Bloomberg


  SNPDataNTCS =
  Access=ReadOnly
  Description=The rating of SNP in NTCS
  ExtensionAttribute=SNPDataNTCS
  Format=
  GroupLabel=FieldCustom
  LabelList=SNP Data NTCS
  Name=SNP Data NTCS


  SNPHasilMatch =
  Access=ReadOnly
  Description=The match result of SNP between NTCS and other sources
  ExtensionAttribute=SNPHasilMatch
  Format=
  GroupLabel=FieldCustom
  LabelList=SNP Hasil Match
  Name=SNP Hasil Match


  SourceData =
  Access=ReadOnly
  Description=The source data used for this transaction
  ExtensionAttribute=SourceData
  Format=
  GroupLabel=FieldCustom
  LabelList=Source Data
  Name=Source Data


  Sources =
  Description=If China, then On Shore. Else, Off Shore.
  ExtensionAttribute=Sources
  GroupLabel=FieldCustom
  LabelList=Sources
  Name=Sources


  SourceUse =
  Description=BID Highest Hierarchy
  ExtensionAttribute=BIDHighestHierarchy
  GroupLabel=FieldCustom
  LabelList=Source Used
  Name=Source Used


  SpotAssets =
  Description=Trade Nominal for trades categorized as Assets
  ExtensionAttribute=SpotAssets
  Format=Imprecise
  GroupLabel=FieldCustom
  LabelList=SPOT ASSETS
  Name=Spot Assets


  SpotLiabilities =
  Description=Trade Nominal for trades categorized as Liabilities
  ExtensionAttribute=SpotLiabilities
  Format=Imprecise
  GroupLabel=FieldCustom
  LabelList=SPOT LIABILITIES
  Name=Spot Liabilities


  SRC_STM_ID =
  Access=ReadOnly
  Description=
  ExtensionAttribute=SRC_STM_ID
  Format=
  GroupLabel=FieldCustom
  LabelList=SRC_STM_ID
  Name=SRC_STM_ID


  StandardYearlyLossThresholdValue =
  Access=ReadOnly
  Description=Standard Yearly Loss Threshold Value
  ExtensionAttribute=StandardYearlyLossThresholdValue
  Format=
  GroupLabel=FieldCustom
  LabelList=StandardYearlyLossThresholdValue
  Name=StandardYearlyLossThresholdValue


  StandardYearlyLossUtilizationPercentage =
  Description=Standard Yearly Loss Utilization Percentage
  ExtensionAttribute=StandardYearlyLossUtilizationPercentage
  Format=
  GroupLabel=FieldCustom
  LabelList=StandardYearlyLossUtilizationPercentage
  Name=StandardYearlyLossUtilizationPercentage


  StartAccrualFA =
  Description=PV Value for Fixed Rate type
  ExtensionAttribute=StartAccrualFA
  Format=
  GroupLabel=FieldCustom
  LabelList=Start Accrual
  Name=Start Accrual


  StartCouponDate =
  Access=ReadOnly
  Description=Date coupon start
  ExtensionAttribute=StartCouponDate
  Format=
  GroupLabel=FieldCustom
  LabelList=Start Coupon Date
  Name=Start Coupon Date


  StartDateCF =
  Description=The current Cashflow Start Date
  ExtensionAttribute=StartDateCF
  Format=
  GroupLabel=FieldCustom
  LabelList=Start Date CF
  Name=Start Date CF


  StartValueFA =
  Description=PV Value for Fixed Rate type
  ExtensionAttribute=StartValueFA
  Format=
  GroupLabel=FieldCustom
  LabelList=Start Value
  Name=Start Value


  status_mt950 =
  Access=ReadOnly
  Description=Match and Unmatch based on Settlement Status
  ExtensionAttribute=status_mt950
  Format=
  GroupLabel=FieldCustom
  LabelList=STATUS IRS
  Name=STATUS IRS


  Status_Utilization_FX =
  ColumnAppearance=StatusBondCutLossClr
  Description=Status Utilization FX
  ExtensionAttribute=Status_Utilization_FX
  GroupLabel=FieldCustom
  Label=Status Utilization IR
  Name=Status Utilization IR


  Status_Utilization_IR =
  ColumnAppearance=StatusBondCutLossClr
  Description=Status Utilization IR
  ExtensionAttribute=Status_Utilization_IR
  GroupLabel=FieldCustom
  Label=Status Utilization IR
  Name=Status Utilization IR


  StatusAntasena =
  Access=ReadOnly
  Description=The status that explained if the report already generated or not
  ExtensionAttribute=StatusAntasena
  Format=
  GroupLabel=FieldCustom
  LabelList=Status Antasena
  Name=Status Antasena


  StatusBondCutLoss =
  ColumnAppearance=StatusBondCutLoss
  Description=Status of Bond Cut Loss Limit
  ExtensionAttribute=StatusBondCutLoss
  GroupLabel=FieldCustom
  Label=Status Bond Cut Loss
  Name=Status Bond Cut Loss


  StatusBondCutLossNew =
  ColumnAppearance=StatusBondCutLossClr
  Description=Status of Bond Cut Loss Limit
  ExtensionAttribute=StatusBondCutLossStr
  GroupLabel=FieldCustom
  Label=Status Bond Cut Loss
  Name=Status Bond Cut Loss


  StatusBondHolding =
  Access=ReadOnly
  ColumnAppearance=StatusBondHolding
  Description=To inform the status of the percentage of Bon Holding Period
  ExtensionAttribute=StatusBondHolding
  Format=
  GroupLabel=FieldCustom
  LabelList=Status Bond Holding
  Name=Status Bond Holding


  StatusDeltaFX =
  ColumnAppearance=StatusDeltaFXClr
  Description=Status of Bond Cut Loss Limit
  ExtensionAttribute=
  GroupLabel=FieldCustom
  Label=Status Delta FX
  Name=Status Delta FX


  StatusDeltaFXNew =
  ColumnAppearance=StatusDeltaFXClr
  Description=Status of Delta Limit
  ExtensionAttribute=StatusDeltaFXStr
  GroupLabel=FieldCustom
  Label=Status Delta FX
  Name=Status Delta FX


  StatusDeltaIR =
  ColumnAppearance=StatusDeltaIRClr
  Description=Status of Bond Cut Loss Limit
  ExtensionAttribute=
  GroupLabel=FieldCustom
  Label=Status Delta IR
  Name=Status Delta IR


  StatusDeltaIRNew =
  ColumnAppearance=StatusDeltaIRClr
  Description=Status of Bond Cut Loss Limit
  ExtensionAttribute=StatusDeltaIRStr
  GroupLabel=FieldCustom
  Label=Status Delta IR
  Name=Status Delta IR


  StatusExpiry =
  Access=ReadOnly
  ColumnAppearance=StatusExpiryBkg
  Description=End date - Date Today. If <0 days, then green. If >0 days then red.
  ExtensionAttribute=StatusExpiry
  Format=
  GroupLabel=FieldCustom
  LabelList=Status Expiry
  Name=Status Expiry


  StatusLimit =
  Access=ReadOnly
  Description=To inform the status of the percentage of issuer limit utilization
  ExtensionAttribute=StatusLimit
  Format=
  GroupLabel=FieldCustom
  LabelList=Status Limit
  Name=Status Limit


  StatusLimit_FX =
  ColumnAppearance=Total_background
  Description=To inform the status limit (FX)
  ExtensionAttribute=StatusLimit_FX
  GroupLabel=FieldCustom
  Label=Status Limit FX
  Name=Status Limit FX


  StatusLimit_IR =
  ColumnAppearance=Total_background
  Description=To inform the status limit (IR)
  ExtensionAttribute=StatusLimit_IR
  GroupLabel=FieldCustom
  Label=Status Limit IR
  Name=Status Limit IR


  StatusLimitExpiry =
  Access=ReadOnly
  Description=The status of limit expiry
  ExtensionAttribute=StatusLimitExpiry
  Format=
  GroupLabel=FieldCustom
  LabelList=Status Limit Expiry
  Name=Status Limit Expiry


  StatusLimitTrading =
  Access=ReadOnly
  Description=To inform the status of the percentage of issuer limit utilization
  ExtensionAttribute=StatusLimitTrading
  Format=
  GroupLabel=FieldCustom
  LabelList=Status Limit
  Name=Status Limit


  StatusMatchUnmatch =
  ColumnAppearance=Total_background
  Description=FO-13 The information of status of each transaction, whether it matches, or not, and can give reasons for the dissimilarity.
  ExtensionAttribute=StatusMatchUnmatch
  GroupLabel=FieldCustom
  Label=Status
  Name=StatusMatchUnmatch


  StatusNTCS =
  Access=ReadOnly
  Description=The status of list coustomer whether has succeed sent to NTCS from eMAS or not.
  ExtensionAttribute=StatusNTCS
  Format=
  GroupLabel=FieldCustom
  LabelList=Status NTCS
  Name=Status NTCS


  StatusRegistration =
  Access=ReadOnly
  Description=The status that described whether the counterparty has registered or not.
  ExtensionAttribute=StatusRegistration
  Format=
  GroupLabel=FieldCustom
  LabelList=Registration Status;Status Registrasi
  Name=Registration Status


  STDEV =
  Access=ReadOnly
  Description=Standard Deviation
  ExtensionAttribute=STDEV
  Format=
  GroupLabel=FieldCustom
  LabelList=STDEV
  Name=STDEV


  strikePrice2 =
  Access=ReadOnly
  Description=-
  ExtensionAttribute=strikePrice2
  Format=
  GroupLabel=FieldCustom
  LabelList=strikePrice2
  Name=strikePrice2


  SUBLMTNAME =
  Access=ReadOnly
  Description=
  ExtensionAttribute=SUBLMTNAME
  Format=
  GroupLabel=FieldCustom
  LabelList=SUBLMTNAME
  Name=SUBLMTNAME


  sukuBungaPersentaseImbalan =
  Description=Rate
  ExtensionAttribute=sukuBungaPersentaseImbalan
  GroupLabel=FieldCustom
  Label=sukuBungaPersentaseImbalan
  Name=sukuBungaPersentaseImbalan


  sukuBungaRepo =
  Description=Suku Bunga Repo Float and Fixed
  ExtensionAttribute=sukuBungaRepo
  GroupLabel=FieldCustom
  Label=sukuBungaRepo
  Name=sukuBungaRepo


  SWAP =
  Description=
  ExtensionAttribute=SWAP
  GroupLabel=FieldCustom
  Label=SWAP
  Name=SWAP


  SwapCounterparty =
  Description=Specific Columns for Counterparty when using Swap
  ExtensionAttribute=SwapCounterparty
  GroupLabel=FieldCustom
  Label=Swap Counterparty
  Name=Swap Counterparty


  SwapFarAmount =
  Description=Specific Columns for Far Amount when using Swap
  ExtensionAttribute=SwapFarAmount
  GroupLabel=FieldCustom
  Label=Swap Far Amount
  Name=Swap Far Amount


  SwapPortfolio =
  Description=Specific Columns for Portfolio when using Swap
  ExtensionAttribute=SwapPortfolio
  GroupLabel=FieldCustom
  Label=Swap Portfolio
  Name=Swap Portfolio


  SwapProceed =
  Description=Specific Columns for Proceed Amount when using Swap
  ExtensionAttribute=SwapProceed
  GroupLabel=FieldCustom
  Label=Swap Proceed
  Name=Swap Proceed


  SystemDate =
  Description=Date today.
  ExtensionAttribute=SystemDate
  GroupLabel=FieldCustom
  LabelList=System Date
  Name=System Date


  TahunPajak =
  Description=Year based on Value Day
  ExtensionAttribute=TahunPajak
  Format=
  GroupLabel=FieldCustom
  LabelList=Tahun Pajak
  Name=Tahun Pajak


  tanggalJatuhTempo =
  Description=Instrument End Date (Custom Format)
  ExtensionAttribute=tanggalJatuhTempo
  Format=
  GroupLabel=FieldCustom
  LabelList=tanggalJatuhTempo
  Name=tanggalJatuhTempo


  tanggalJatuhTempoDepo =
  Description=End Date for Depo/Loan
  ExtensionAttribute=tanggalJatuhTempoDepo
  GroupLabel=FieldCustom
  LabelList=tanggalJatuhTempo
  Name=tanggalJatuhTempoDepo


  tanggalJatuhTempoDokumenUnderlying =
  Description=If LCS Yes, AdditionalInfo - Underlying Mat Date
  ExtensionAttribute=tanggalJatuhTempoDokumenUnderlying
  Format=
  GroupLabel=FieldCustom
  LabelList=tanggalJatuhTempoDokumenUnderlying
  Name=tanggalJatuhTempoDokumenUnderlying


  tanggalJatuhTempoRepo =
  Description=Repo End Date
  ExtensionAttribute=tanggalJatuhTempoRepo
  Format=
  GroupLabel=FieldCustom
  LabelList=tanggalJatuhTempoRepo
  Name=tanggalJatuhTempoRepo


  tanggalJatuhTempoSuratBerharga =
  Description=Maturity Date of the Bonds (Collateral)
  ExtensionAttribute=tanggalJatuhTempoSuratBerharga
  Format=
  GroupLabel=FieldCustom
  LabelList=tanggalJatuhTempoSuratBerharga
  Name=tanggalJatuhTempoSuratBerharga


  tanggalSettlement =
  Description=Instrument Start Date (Custom Format)
  ExtensionAttribute=tanggalSettlement
  Format=
  GroupLabel=FieldCustom
  LabelList=tanggalSettlement
  Name=tanggalSettlement


  tanggalValuta =
  Description=Trade.TradeTime for SWAP-IRS only
  ExtensionAttribute=tanggalValutaSWAPIRS
  Format=DatePartOnly
  GroupLabel=FieldCustom
  LabelList=tanggalValuta
  Name=tanggalValuta


  TargetFullYear =
  Access=ReadOnly
  Description=Target PnL on Full Year in IDR.
  ExtensionAttribute=TargetFullYear
  Format=
  GroupLabel=FieldCustom
  LabelList=TargetFullYear
  Name=TargetFullYear


  TargetMonth =
  Description=Target PnL on Month to Date in IDR.
  ExtensionAttribute=TargetMonth
  Format=
  GroupLabel=P&L
  LabelList=TargetMonth
  Name=TargetMonth


  TargetMonthPercent =
  Description=Target PnL on Month to Date in IDR.
  ExtensionAttribute=TargetMonthPercent
  Format=
  GroupLabel=P&L
  LabelList=TargetMonthPercent
  Name=TargetMonthPercent


  TargetMTD =
  Access=ReadOnly
  Description=Target PnL on Month to Date in IDR.
  ExtensionAttribute=TargetMTD
  Format=
  GroupLabel=FieldCustom
  LabelList=TargetMTD
  Name=TargetMTD


  TargetMTDPercent =
  Description=Target MTD %
  ExtensionAttribute=TargetMTDPercent
  Format=
  GroupLabel=FieldCustom
  Label=TargetMTD%
  Name=TargetMTD%


  TargetMTDPL =
  Description=Target MTD PL in FO47
  ExtensionAttribute=TargetMTDPL
  Format=
  GroupLabel=FieldCustom
  LabelList=TargetMTDPL
  Name=TargetMTDPL


  TargetMTDVol =
  Description=Target MTD Volume in FO47
  ExtensionAttribute=TargetMTDVol
  Format=
  GroupLabel=FieldCustom
  LabelList=TargetMTDVol
  Name=TargetMTDVol


  TargetYear =
  Description=Target PnL on Year to Date in IDR.
  ExtensionAttribute=TargetYear
  Format=
  GroupLabel=P&L
  LabelList=TargetYear
  Name=TargetYear


  TargetYearPercent =
  Description=Target PnL on Year to Date in IDR.
  ExtensionAttribute=TargetYearPercent
  Format=
  GroupLabel=P&L
  LabelList=TargetYearPercent
  Name=TargetYearPercent


  TargetYTD =
  Access=ReadOnly
  Description=Target PnL on Year to Date in IDR.
  ExtensionAttribute=TargetYTD
  Format=
  GroupLabel=FieldCustom
  LabelList=TargetYTD
  Name=TargetYTD


  TargetYTDPercent =
  Description=Target YTD %
  ExtensionAttribute=TargetYTDPercent
  Format=
  GroupLabel=FieldCustom
  Label=TargetYTD%
  Name=TargetYTD%


  TargetYTDPL =
  Description=Target YTD PL in FO47
  ExtensionAttribute=TargetYTDPL
  Format=
  GroupLabel=FieldCustom
  LabelList=TargetYTDPL
  Name=TargetYTDPL


  TargetYTDVol =
  Description=Target YTD Volume in FO47
  ExtensionAttribute=TargetYTDVol
  Format=
  GroupLabel=FieldCustom
  LabelList=TargetYTDVol
  Name=TargetYTDVol


  Tarif1 =
  Access=ReadOnly
  Description=Accrued Interest / Holding Period ESPT.
  ExtensionAttribute=Tarif1
  GroupLabel=FieldCustom
  LabelList=Tarif 1 / Tingkat Bunga per Tahun
  Name=Tarif 1


  Tarif2 =
  Access=ReadOnly
  Description=Accrued Interest / Holding Period ESPT.
  ExtensionAttribute=Tarif2
  GroupLabel=FieldCustom
  LabelList=Tarif 2 / Tingkat Bunga per Tahun
  Name=Tarif 2


  TarifPajak =
  Description=Tarif Pajak 20%
  ExtensionAttribute=TarifPajak
  Format=
  GroupLabel=FieldCustom
  LabelList=Tarif Pajak
  Name=Tarif Pajak


  TaxDifferenceJournal =
  Description=Journal Trade Tax - Trade Tax in Absolute
  ExtensionAttribute=TaxDifferenceJournal
  Format=
  GroupLabel=FieldCustom
  Label=Tax Difference
  Name=Tax Difference


  Tenor =
  Description=EndDate - ValueDay
  ExtensionAttribute=Tenor
  Format=
  GroupLabel=FieldCustom
  LabelList=Tenor
  Name=Tenor


  tenorSuratBerharga =
  Description=Listing Date to Maturity Date
  ExtensionAttribute=tenorSuratBerharga
  Format=
  GroupLabel=FieldCustom
  LabelList=tenorSuratBerharga
  Name=tenorSuratBerharga


  TenorTahun =
  Description=EndDate - ValueDay
  ExtensionAttribute=TenorTahun
  Format=
  GroupLabel=FieldCustom
  LabelList=Tenor
  Name=TenorTahun


  Term =
  Description=Short or Long
  ExtensionAttribute=Term
  GroupLabel=FieldCustom
  LabelList=Term
  Name=Term


  Term_Deposit =
  Description=
  ExtensionAttribute=Term_Deposit
  GroupLabel=FieldCustom
  Label=Term Deposit
  Name=Term Deposit


  TermofPeriod =
  ColumnAppearance=
  Description=Transaction term of period. Internal Code not feed from FA
  ExtensionAttribute=TermofPeriod
  Format=
  GroupLabel=FieldCustom
  Label=Term of Period
  Name=Term of Period


  testRhamdan =
  Description=Utilization today subtracted by utilization previous position
  ExtensionAttribute=testRhamdan
  GroupLabel=FieldCustom
  Label=1 testRhamdan
  Name=1 testRhamdan


  tglAwalForward =
  Description=BO27 tanggal awal forward
  ExtensionAttribute=tglAwalForward
  GroupLabel=FieldCustom
  LabelList=TanggalAwalForward
  Name=TanggalAwalForward


  tglEfektifSWAPIRS =
  Description=determine higher date for SWAP-IRS
  ExtensionAttribute=tglEfektifSWAPIRS
  Format=DatePartOnly
  GroupLabel=FieldCustom
  LabelList=TanggalEfektif
  Name=TanggalEfektif


  TheoreticalPnLYearly =
  Description=ICT Custom. Change in the monetary value gained or lost for the position since the beginning of the current report year.
  GroupLabel=FieldCustom
  InheritsFrom=Portfolio Theoretical Total Profit and Loss
  LabelList=ThTPLY;Th Total P/L Year;Theoretical Total Profit and Loss Yearly
  Name=TheoreticalPnLYearly
  ParametersFixedValues=PortfolioProfitLossStartDate=First Of Year;PortfolioProfitLossStartDateCustom=1970-01-01


  ThresholdValue1 =
  ColumnAppearance=Total_background
  Description=Threshold Value
  ExtensionAttribute=thresholdValue1
  Format=
  GroupLabel=FieldCustom
  Label=Threshold Value
  Name=Threshold Value


  Time =
  Description=Trade Time Time Only
  ExtensionAttribute=TradeTimeTimeOnly
  Format=
  GroupLabel=FieldCustom
  LabelList=jamTransaksi
  Name=Trade Time


  tingkatIndikasiImbalan =
  ColumnAppearance=Total_background
  Description=
  ExtensionAttribute=tingkatIndikasiImbalan
  GroupLabel=FieldCustom
  Label=tingkatIndikasiImbalan
  Name=tingkatIndikasiImbalan


  Today =
  ColumnAppearance=
  Description=Field Today equals to date system today, for cashflow projection (LIQ)
  ExtensionAttribute=Today
  Format=
  GroupLabel=FieldCustom
  Label=Today
  Name=Today


  TodayPrice =
  ColumnAppearance=
  Description=The today price from latest mark to market
  ExtensionAttribute=TodayPrice
  Format=
  GroupLabel=FieldCustom
  Label=Today Price
  Name=Today Price


  ToleranceLimit =
  ColumnAppearance=Total_background
  Description=Tolerance Limit
  ExtensionAttribute=ToleranceLimit
  GroupLabel=FieldCustom
  Label=Tolerance Limit
  Name=Tolerance Limit


  ToleranceLimit2 =
  ColumnAppearance=Total_background
  Description=Tolerance Limit 2
  ExtensionAttribute=ToleranceLimit2
  GroupLabel=FieldCustom
  Label=Tolerance Limit 2
  Name=Tolerance Limit 2


  Total =
  Access=ReadOnly
  Description=The total amount of the transaction
  ExtensionAttribute=Total
  Format=
  GroupLabel=FieldCustom
  LabelList=Total
  Name=Total


  Total_Cashflow =
  ColumnAppearance=
  ExtensionAttribute=Total_Cashflow
  GroupLabel=FieldCustom
  Name=Sub Total


  Total_Coupon =
  ColumnAppearance=
  ExtensionAttribute=Total_coupon
  GroupLabel=FieldCustom
  Name=Nominal Coupon


  Total_EndCash =
  Description=Sum of End Cash Buy + End Cash Sell
  ExtensionAttribute=Total_EndCashDisplay
  GroupLabel=FieldCustom
  LabelList=Total_EndCash
  Name=Total End Cash


  TotalACCINT =
  Access=ReadOnly
  Description=
  ExtensionAttribute=TotalACCINT
  Format=
  GroupLabel=FieldCustom
  LabelList=Total ACCINT
  Name=Total ACCINT


  TotalAdm =
  Description=Total Adm
  ExtensionAttribute=TotalAdm
  Format=
  GroupLabel=FieldCustom
  LabelList=Total Adm
  Name=Total Adm


  TotalBorrowing =
  Description=Shows Face Value if Trade Key 3 is "IT".
  ExtensionAttribute=TotalBorrowing
  GroupLabel=FieldCustom
  LabelList=Total Borrowing
  Name=Total Borrowing


  TotalINTAMT =
  Access=ReadOnly
  Description=
  ExtensionAttribute=TotalINTAMT
  Format=
  GroupLabel=FieldCustom
  LabelList=Total INTAMT
  Name=Total INTAMT


  TotalInterest =
  Description=Face Value times Interest Rate at Trade Time divided by 100. Then the value multiplied by IDays divided by 360.
  ExtensionAttribute=TotalInterest
  Format=SixDecimalDetailedPercent
  GroupLabel=FieldCustom
  LabelList=Tot Int
  Name=Total Interest


  TotalNasabah =
  Access=ReadOnly
  Description=Nasabah Jual + Nasabah Beli
  ExtensionAttribute=TotalNasabah
  Format=
  GroupLabel=FieldCustom
  LabelList=TOTAL
  Name=Total Nasabah


  TotalPaymentReceive =
  Access=ReadOnly
  Description=
  ExtensionAttribute=TotalPayment/Receive
  Format=
  GroupLabel=FieldCustom
  LabelList=Total Payment/Receive
  Name=Total Payment/Receive


  TotalPlacement =
  Description=Shows Face Value if Trade Key 3 is "IP".
  ExtensionAttribute=TotalPlacement
  GroupLabel=FieldCustom
  LabelList=Total Placement
  Name=Total Placement


  TotalPnLCustom =
  Description=((price sell (%)-price  buy(%)) x nominal) + Return  Coupon.
  ExtensionAttribute=TotalPnLCustom
  GroupLabel=FieldCustom
  LabelList=Total PnL Custom
  Name=Total PnL Custom


  TotalPrincipal =
  Access=ReadOnly
  Description=
  ExtensionAttribute=TotalPrincipal
  Format=
  GroupLabel=FieldCustom
  LabelList=Total Principal
  Name=Total Principal


  TotalTaxableIncome =
  Description=Total Taxable Income
  ExtensionAttribute=TotalTaxableIncome
  Format=
  GroupLabel=FieldCustom
  LabelList=TotalTaxableIncome
  Name=Total Taxable Income


  TotalUSD =
  Access=ReadOnly
  Description=The total amount of the transaction in USD
  ExtensionAttribute=TotalUSD
  Format=
  GroupLabel=FieldCustom
  LabelList=Total USD
  Name=Total USD


  TPL =
  ColumnAppearance=Total_background
  Description=TPL
  ExtensionAttribute=TPL
  Format=
  GroupLabel=FieldCustom
  Label=TPL
  Name=TPL


  TPL_Yesterday =
  Description=Total Profit Loss Yesterday
  ExtensionAttribute=TPL_Yesterday
  Format=
  GroupLabel=FieldCustom
  Label=TPL_Yesterday
  Name=TPL_Yesterday


  TradeFXExcRate =
  Description=formatted Trade FX Exchange Rate for one reporting
  ExtensionAttribute=TradeFXExcRate
  GroupLabel=FieldCustom
  LabelList=Exchange Rate
  Name=Exchange Rate


  TradeNumber =
  ColumnAppearance=Total_background
  Description=Trade Number in Portofolio Sheet
  ExtensionAttribute=TradeNumber
  GroupLabel=FieldCustom
  Label=TradeNumber
  Name=TradeNumber


  TradeNumberCustom =
  Access=ReadOnly
  Description=Trade Number Custom
  ExtensionAttribute=TradeNumberCustom
  Format=
  GroupLabel=FieldCustom
  LabelList=Trade Number
  Name=Trade Number


  TradeNumberInstrument =
  ExtensionAttribute=TradeNumberInstrument
  GroupLabel=FieldCustom
  Name=TradeNumberInstrument


  TraderPrice =
  Description=Trader price in FX
  ExtensionAttribute=TraderPrice
  Format=
  GroupLabel=FieldCustom
  LabelList=Trader Price
  Name=Trader Price


  TradeTimeCustom =
  Access=ReadOnly
  Description=
  ExtensionAttribute=TradeTimeCustom
  Format=
  GroupLabel=FieldCustom
  LabelList=TradeTimeCustom
  Name=TradeTimeCustom


  TradeTimeDateOnly =
  Access=ReadOnly
  Description=Trade Time Date Only
  ExtensionAttribute=TradeTimeDateOnly
  Format=
  GroupLabel=FieldCustom
  LabelList=Trade Date
  Name=Trade Date


  TradeTimeTimeOnly =
  Description=Trade Time Time Only
  ExtensionAttribute=TradeTimeTimeOnly
  Format=TimeOnlyNoSeconds
  GroupLabel=FieldCustom
  LabelList=Trade Time
  Name=Trade Time


  TradeTypeDesc =
  ColumnAppearance=Total_background
  Description=Description of Trade Type
  ExtensionAttribute=TradeTypeDesc
  GroupLabel=FieldCustom
  Label=TradeTypeDesc
  Name=TradeTypeDesc


  TransactionBorrow =
  Description=Borrow Amount of Transaction Divided by 1Mio
  ExtensionAttribute=TransactionBorrow
  GroupLabel=FieldCustom
  Name=Transaction Borrow 1mio


  TransactionBorrow1Bio =
  Description=Borrow Amount of Transaction Divided by 1Bio
  ExtensionAttribute=TransactionBorrow1Bio
  GroupLabel=FieldCustom
  Name=Transaction Borrow 1bio


  TransactionLend =
  Description=Lend Amount of Transaction Divided by 1Mio
  ExtensionAttribute=TransactionLend
  GroupLabel=FieldCustom
  Name=Transaction Lend 1mio


  TransactionLend1Bio =
  Description=Lend Amount of Transaction Divided by 1Bio
  ExtensionAttribute=TransactionLend1Bio
  GroupLabel=FieldCustom
  Name=Transaction Lend 1bio


  TranslationAmount =
  Access=ReadOnly
  Description=The difference between Prior Balance and Current Value of Balance
  ExtensionAttribute=TranslationAmount
  Format=
  GroupLabel=FieldCustom
  LabelList=Translation Amount
  Name=Translation Amount


  TRD =
  Access=ReadOnly
  Description=Trading
  ExtensionAttribute=TRD
  Format=
  GroupLabel=FieldCustom
  LabelList=TRD
  Name=TRD


  TrdNbrMoneyFlow =
  Description=TrdNbrMoneyFlow
  ExtensionAttribute=TrdNbrMoneyFlow
  GroupLabel=FieldCustom
  LabelList=Trade Nbr
  Name=Trade Nbr


  Trilyun =
  Access=ReadOnly
  Description=Trilyun
  ExtensionAttribute=Trilyun
  Format=
  GroupLabel=FieldCustom
  LabelList=TRILYUN
  Name=Trilyun


  Type_Placement =
  ExtensionAttribute=Type_Placement
  GroupLabel=FieldCustom
  Name=Type of Placement


  TypeofFunding =
  Access=ReadOnly
  Description=The type of contractual used on transaction (Internation as Offshore and Domestic as Onshore)
  ExtensionAttribute=TypeofFunding
  Format=
  GroupLabel=FieldCustom
  LabelList=Type of Funding
  Name=Type of Funding


  TypeOfSecurities =
  Access=ReadOnly
  Description=Type of Securities: Securities classification (TRD/AFS/HTM)
  ExtensionAttribute=TypeOfSecurities
  Format=
  GroupLabel=FieldCustom
  LabelList=Type of Securities
  Name=Type of Securities


  TypeUtilization =
  Access=ReadOnly
  Description=
  ExtensionAttribute=TypeUtilization
  Format=
  GroupLabel=FieldCustom
  LabelList=Type Utilization
  Name=Type Utilization


  Unamortized =
  Description=Premium - Nominal - Amortized
  ExtensionAttribute=Unamortized
  GroupLabel=FieldCustom
  LabelList=Unamortized
  Name=Unamortized


  UnamortizedDiscPrem =
  Access=ReadOnly
  Description=Amount that havenÃ¢ÂÂt been accrued yet of interest of repo
  ExtensionAttribute=UnamortizedDiscPrem
  Format=
  GroupLabel=FieldCustom
  LabelList=Unamortized Disc/Premium
  Name=Unamortized Disc/Premium


  UnamortizedInterest =
  Access=ReadOnly
  Description=The rest of interest amount that not yet accrued
  ExtensionAttribute=UnamortizedInterest
  Format=
  GroupLabel=FieldCustom
  LabelList=Unamortized Interest
  Name=Unamortized Interest


  UnderlyingThreshold =
  ColumnAppearance=Total_background
  Description=Hardcode on threshold based on buy or sell
  ExtensionAttribute=UnderlyingThreshold
  GroupLabel=FieldCustom
  Label=Underlying Threshold
  Name=Underlying Threshold


  UnderlyingTransaksi =
  Description=Underlying Transaksi
  ExtensionAttribute=UnderlyingTransaksi
  GroupLabel=FieldCustom
  Label=UnderlyingTransaksi
  Name=UnderlyingTransaksi


  UnrealizedPlusIncomeToday =
  ColumnAppearance=Total_background
  Description=Unrealized Today + Income Today
  ExtensionAttribute=UnrealizedPlusIncomeToday
  Format=
  GroupLabel=FieldCustom
  Label=Unrealized + Income Today
  Name=Unrealized + Income Today


  UnrealizedPlusIncomeYesterday =
  ColumnAppearance=Total_background
  Description=Unrealized Yesterday + Income Yesterday
  ExtensionAttribute=UnrealizedPlusIncomeYesterday
  Format=
  GroupLabel=FieldCustom
  Label=Unrealized + Income Yesterday
  Name=Unrealized + Income Yesterday


  UPL_Yesterday =
  Description=Unrealized Profit Loss Yesterday
  ExtensionAttribute=UPL_Yesterday
  Format=
  GroupLabel=FieldCustom
  Label=UPL_Yesterday
  Name=UPL_Yesterday


  UPLBonds =
  Description=MTM Price - Amortisasi Price
  ExtensionAttribute=UPLBonds
  GroupLabel=FieldCustom
  Label=UPL
  Name=UPLBonds


  UpperPrice =
  ColumnAppearance=
  Description=The high price from latest mark to market
  ExtensionAttribute=UpperPrice
  Format=
  GroupLabel=FieldCustom
  Label=Upper Price
  Name=Upper Price


  UpperRate =
  ColumnAppearance=Total_background
  Description=The upper rate
  ExtensionAttribute=UpperRate
  Format=
  GroupLabel=FieldCustom
  Label=Upper Rate
  Name=Upper Rate


  UserCancelOrAmendBO =
  Access=ReadOnly
  Description=Name of the user
  ExtensionAttribute=UserCancelOrAmendBO
  Format=
  GroupLabel=FieldCustom
  LabelList=User Cancel/Amend (BO)
  Name=User Cancel/Amend (BO)


  UserCancelOrAmendFO =
  Access=ReadOnly
  Description=Name of the user
  ExtensionAttribute=UserCancelOrAmendFO
  Format=
  GroupLabel=FieldCustom
  LabelList=User Cancel/Amend (FO)
  Name=User Cancel/Amend (FO)


  Utilisasi =
  ColumnAppearance=Total_background
  Description=The utilization of issuer limit
  ExtensionAttribute=Utilisasi
  GroupLabel=FieldCustom
  Label=Utilisasi
  Name=Utilisasi


  UtilisasiCreditEquivalent =
  Access=ReadOnly
  Description=The utilization of credit equivalent limit
  ExtensionAttribute=UtilisasiCreditEquivalent
  Format=
  GroupLabel=FieldCustom
  LabelList=Utilisasi Credit Equivalent
  Name=Utilisasi Credit Equivalent


  UtilisasiDeltaFX =
  Access=ReadOnly
  Description=Utilisasi For Delta FX
  ExtensionAttribute=UtilisasiDeltaFX
  Format=
  GroupLabel=FieldCustom
  LabelList=Utilisasi Delta FX
  Name=Utilisasi Delta FX


  UtilisasiDeltaIR =
  Access=ReadOnly
  Description=Utilisasi For Delta IR
  ExtensionAttribute=UtilisasiDeltaIR
  Format=
  GroupLabel=FieldCustom
  LabelList=Utilisasi Delta IR
  Name=Utilisasi Delta IR


  Utilization_Delta_FX =
  ColumnAppearance=Total_background
  Description=Utilization Delta FX
  ExtensionAttribute=Utilization_FX
  GroupLabel=FieldCustom
  Label=Utilization Delta FX
  Name=Utilization Delta FX


  Utilization_Delta_IR =
  ColumnAppearance=Total_background
  Description=Utilization Delta IR
  ExtensionAttribute=Utilization_IR
  GroupLabel=FieldCustom
  Label=Utilization Delta IR
  Name=Utilization Delta IR


  UtilizationBond =
  ColumnAppearance=Total_background
  Description=Utilization for bond cut loss limit
  ExtensionAttribute=UtilizationBond
  GroupLabel=FieldCustom
  Label=Utilization Bond
  Name=Utilization Bond


  UtilizationBondMO10 =
  ColumnAppearance=Total_background
  Description=Utilization for bond cut loss limit
  ExtensionAttribute=UtilizationBond
  GroupLabel=FieldCustom
  Label=Utilization Bond
  Name=Utilization Bond MO 10


  ValueDay_adj =
  Description=value day adjusted to onereporting format
  ExtensionAttribute=ValueDay_adj
  GroupLabel=FieldCustom
  LabelList=Value Day
  Name=Value Day


  ValueDay_USDPrice =
  Description=get price of USD from trade's value day
  ExtensionAttribute=ValueDay_USDPrice
  GroupLabel=FieldCustom
  LabelList=NTR USD/ID
  Name=NTR USD/IDR


  ValutaDasar =
  Description=BO27 currency valuta dasar
  ExtensionAttribute=valuta_dasar
  GroupLabel=FieldCustom
  LabelList=ValutaDasar
  Name=ValutaDasar


  valutaDasarJnsSukuBungaAcuan =
  Access=ReadOnly
  Description=-
  ExtensionAttribute=valutaDasarJnsSukuBungaAcuan
  Format=
  GroupLabel=FieldCustom
  LabelList=valutaDasarJnsSukuBungaAcuan
  Name=valutaDasarJnsSukuBungaAcuan


  valutaDasarPremiumSukuBungaAcuan =
  Access=ReadOnly
  Description=-
  ExtensionAttribute=valutaDasarPremiumSukuBungaAcuan
  Format=
  GroupLabel=FieldCustom
  LabelList=valutaDasarPremiumSukuBungaAcuan
  Name=valutaDasarPremiumSukuBungaAcuan


  valutaDasarSukuBungaTetap =
  Access=ReadOnly
  Description=-
  ExtensionAttribute=valutaDasarSukuBungaTetap
  Format=
  GroupLabel=FieldCustom
  LabelList=valutaDasarSukuBungaTetap
  Name=valutaDasarSukuBungaTetap


  valutaDasarTenorSukuBungaAcuan =
  Access=ReadOnly
  Description=-
  ExtensionAttribute=valutaDasarTenorSukuBungaAcuan
  Format=
  GroupLabel=FieldCustom
  LabelList=valutaDasarTenorSukuBungaAcuan
  Name=valutaDasarTenorSukuBungaAcuan


  valutaDokumenUnderlying =
  Description=BO30 Currency
  ExtensionAttribute=valutaDokumenUnderlying
  GroupLabel=FieldCustom
  LabelList=valutaDokumenUnderlying
  Name=valutaDokumenUnderlying


  ValutaLawan =
  Description=BO27 currency valuta lawan
  ExtensionAttribute=valuta_lawan
  GroupLabel=FieldCustom
  LabelList=ValutaLawan
  Name=ValutaLawan


  variabelMendasari =
  Access=ReadOnly
  Description=-
  ExtensionAttribute=variabelMendasari
  Format=
  GroupLabel=FieldCustom
  LabelList=variabelMendasari
  Name=variabelMendasari


  VarThresholdValue =
  Access=ReadOnly
  Description=Var Threshold Value
  ExtensionAttribute=VarThresholdValue
  Format=
  GroupLabel=FieldCustom
  LabelList=VarThresholdValue
  Name=VarThresholdValue


  VarUtilizationPercentage =
  Description=Standard Var Utilization Percentage
  ExtensionAttribute=VarUtilizationPercentage
  Format=
  GroupLabel=FieldCustom
  LabelList=VarUtilizationPercentage
  Name=VarUtilizationPercentage


  VERIND =
  Description=Verification Indicator. Shows 1 if BO Confirmed, shows 0 if not BO Confirmed.
  ExtensionAttribute=VERIND
  Format=
  GroupLabel=FieldCustom
  LabelList=VERIND
  Name=VERIND


  VoidCancelDate =
  Description=BOa08 cancel date for Voided trades
  ExtensionAttribute=VoidCancelDate
  Format=DatePartOnly
  GroupLabel=FieldCustom
  LabelList=CancelDate
  Name=CancelDate


  Volume Yesterday =
  ColumnAppearance=Total_background
  Description=The amount of all transaction where sale date minus buys date are less than 186 days
  ExtensionAttribute=VolumeYesterday
  GroupLabel=FieldCustom
  Label=Volume Yesterday
  Name=Volume Yesterday


  VolumeDaily =
  Description=Volume in a Day (USD)
  ExtensionAttribute=VolumeDaily
  Format=
  GroupLabel=Volume in USD
  LabelList=Volume Daily
  Name=VolumeDaily


  VolumeinUSD =
  Description=The amount that equivalent to USD
  ExtensionAttribute=VolumeinUSD
  GroupLabel=FieldCustom
  LabelList=Volume in USD
  Name=Volume in USD


  VolumeMonthly =
  Description=Volume in a Month (USD)
  ExtensionAttribute=VolumeMonthly
  Format=
  GroupLabel=Volume in USD
  LabelList=Volume Monthly
  Name=VolumeMonthly


  VolumePenjualan =
  Access=ReadOnly
  Description=The amount of all transaction where sale date minus buys date are less than 186 days
  ExtensionAttribute=VolumePenjualan
  Format=
  GroupLabel=FieldCustom
  LabelList=Volume Penjualan
  Name=Volume Penjualan


  VolumeUSD =
  Description=Volume in a Day (USD)
  ExtensionAttribute=VolumeUSD
  Format=
  GroupLabel=FieldCustom
  LabelList=Volume in USD
  Name=VolumeUSD


  VolumeYearly =
  Description=Volume in a Year (USD)
  ExtensionAttribute=VolumeYearly
  Format=
  GroupLabel=Volume in USD
  LabelList=Volume Yearly
  Name=VolumeYearly


  WeekNumber =
  ColumnAppearance=Total_background
  Description=Week in number.
  ExtensionAttribute=WeekNumber
  Format=
  GroupLabel=FieldCustom
  Label=Week Number
  Name=Week Number


  WHT =
  Description=Witholding Tax
  ExtensionAttribute=WHT
  Format=
  GroupLabel=FieldCustom
  LabelList=WHT
  Name=WHT


  WHTText =
  Description=Witholding Tax Text
  ExtensionAttribute=WHTText
  Format=
  GroupLabel=FieldCustom
  LabelList=WHT Text
  Name=WHT Text


  WITHGAINAMT =
  Description=Buy Price - Sell Price.
  ExtensionAttribute=WITHGAINAMT
  GroupLabel=FieldCustom
  LabelList=WITHGAINAMT
  Name=WITHGAINAMT


  WITHGAINAMTAFS =
  Description=Amount (GLNO : 46011102)
  ExtensionAttribute=WITHGAINAMTAFS
  GroupLabel=FieldCustom
  LabelList=WITHGAINAMTAFS
  Name=WITHGAINAMTAFS


  WITHGAINAMTTRD =
  Description=Amount (GLNO : 46011102)
  ExtensionAttribute=WITHGAINAMTTRD
  GroupLabel=FieldCustom
  LabelList=WITHGAINAMTTRD
  Name=WITHGAINAMTTRD


  WITHORIGCOSTAMT =
  Description=Premium plus Witholding Tax
  ExtensionAttribute=WITHORIGCOSTAMT
  Format=
  GroupLabel=FieldCustom
  LabelList=WITHORIGCOSTAMT
  Name=WITHORIGCOSTAMT


  WITHSETTDATE =
  Description=Settlement Date.
  ExtensionAttribute=WITHSETTDATE
  Format=DatePartOnly
  GroupLabel=FieldCustom
  LabelList=WITHSETTDATE
  Name=WITHSETTDATE


  Year =
  ColumnAppearance=Total_background
  Description=Year
  ExtensionAttribute=Year
  Format=
  GroupLabel=FieldCustom
  Label=Year
  Name=Year


  YearlyLossLimitUse =
  Description=theoretical p/l yearly * close rate IDR
  ExtensionAttribute=YearlyLossLimitUse
  Format=
  GroupLabel=FieldCustom
  LabelList=YearlyLossLimitUse
  Name=Yearly Loss Limit Use


  YearlyLossLimitUse2 =
  Description=Default 500000000.
  ExtensionAttribute=YearlyLossLimitUse2
  Format=
  GroupLabel=FieldCustom
  LabelList=Yearly Loss Limit Use
  Name=Yearly Loss Limit Use 2


  YearNow =
  Access=ReadOnly
  Description=
  ExtensionAttribute=YearNow
  Format=
  GroupLabel=FieldCustom
  LabelList=YearNow
  Name=YearNow


  YesterdayPrice =
  Access=ReadOnly
  Description=
  ExtensionAttribute=YesterdayPrice
  Format=
  GroupLabel=FieldCustom
  LabelList=Yesterday Price
  Name=Yesterday Price


  YieldChange =
  Access=ReadOnly
  Description=
  ExtensionAttribute=YieldChange
  Format=
  GroupLabel=FieldCustom
  LabelList=Yield Change
  Name=Yield Change


  yieldSuratBerharga =
  Description=Yield from the Collateral
  ExtensionAttribute=yieldSuratBerharga
  Format=
  GroupLabel=FieldCustom
  LabelList=yieldSuratBerharga
  Name=yieldSuratBerharga


  yieldValue =
  Access=ReadOnly
  Description=Available for Sale
  ExtensionAttribute=yieldValueCustom
  Format=
  GroupLabel=FieldCustom
  LabelList=YIELD
  Name=YIELD


  YieldYST =
  Access=ReadOnly
  Description=Yesterday yield of transaction, if provided from the securities info
  ExtensionAttribute=YieldYST
  Format=
  GroupLabel=FieldCustom
  LabelList=YieldYST
  Name=YieldYST


  YourCorrespondentBank =
  Description=Your Account (Cpty)
  ExtensionAttribute=YourCorrespondentBank
  GroupLabel=FieldCustom
  Name=YourCorrespondentBank
  ShowSimulItalic=Disabled
  ShowSimulState=Disabled


  YTD =
  Access=ReadOnly
  ColumnAppearance=YTD
  Description=Get YTD Value from Hierarchy
  ExtensionAttribute=YTD
  GroupLabel=FieldCustom
  Name=YTD


  YTDAchievement =
  Access=ReadOnly
  Description=YTD Target - PnL Yearly (in %).
  ExtensionAttribute=YTDAchievement
  Format=
  GroupLabel=FieldCustom
  LabelList=YTDAchievement
  Name=YTDAchievement


  YTDandAccrued =
  Access=ReadOnly
  Description=YTD Profit Loss + Accrued
  ExtensionAttribute=YTDAndAccrued
  Format=
  GroupLabel=FieldCustom
  LabelList=YTD PL + Accrued
  Name=YTD PL + Accrued


}

decls[FCustomMethod] {
}

clx FTrade [FCustomMethod] {
  AssetOrLiabilityGrouper =
  Definition=AssetOrLiabilityGrouper:string read
  Function=CustomizedGrouper.AssetOrLiability1


  BuySellGrouper =
  Definition=BuySellGrouper:string read
  Function=CustomizedGrouper.tradeGrouper


  InvtypeGrouper =
  Definition=InvtypeGrouper:string read
  Function=CustomizedGrouper.invtype


  MonthDealDoneGrouper =
  Definition=MonthDealDoneGrouper:string read
  Function=CustomizedGrouper.monthDealDone


  MonthGrouper =
  Definition=MonthGrouper:string read
  Function=CustomizedGrouper.month


  YearDealDoneGrouper =
  Definition=YearDealDoneGrouper:string read
  Function=CustomizedGrouper.yearDealDone


}

decls[FDateTimeFormatter] {
}

clx FObject [FDateTimeFormatter] {
  DateMMDDYYYY =
  DateType=
  Format=%m/%d/%Y
  Option=
  ParsePeriodAs=
  ShowFractionOfSeconds=


}

decls[FDocString] {
  "FXSLTemplate:NFTABTemplate" ( "aef.public" ) "";
}

clx FExtensionDefinition [FDocString] {
  FXSLTemplate:NFTABTemplate
Secondary report template, tab separated.
...

}

decls[FExtensionAttribute] {
  "AcquisitionIDR" ( "sheet columns.tradesheet" ) "";
  "AmountAccumulativePerMonth" ( "sheet columns.tradesheet" ) "";
  "BeginningBalance" ( "sheet columns.tradesheet" ) "";
  "BUC" ( "sheet columns.tradesheet" ) "";
  "CashflowFarAmount" ( "sheet columns.moneyflowsheet" ) "";
  "DayToExpired" ( "sheet columns.journalsheet" ) "";
  "DeltaCheck" ( "sheet columns.tradesheet" ) "";
  "EndInterest" ( "sheet columns.journalsheet" ) "";
  "LBU" ( "sheet columns.journalsheet" ) "";
  "MonthToExpired" ( "sheet columns.journalsheet" ) "";
  "NetAmount" ( "sheet columns.tradesheet" ) "";
  "NomorIdentifikasi" ( "sheet columns.settlementsheet" ) "";
  "OnShoreShortTerm" ( "sheet columns.tradesheet" ) "";
  "PercentageMO01RPL" ( "sheet columns.tradesheet" ) "";
  "RemarkOutstanding" ( "sheet columns.journalsheet" ) "";
  "SECID" ( "sheet columns.journalsheet" ) "";
  "StatusBondCutLoss" ( "sheet columns.portfoliosheet" "sheet columns.tradesheet" ) "";
  "TenorTahun" ( "sheet columns.tradesheet" ) "";
  "VolumeDaily" ( "sheet columns.portfoliosheet" ) "";
  "VolumeMonthly" ( "sheet columns.portfoliosheet" ) "";
  "VolumeYearly" ( "sheet columns.portfoliosheet" ) "";
  "WHTText" ( "sheet columns.journalsheet" ) "";
}

clx FAccount [FExtensionAttribute] {
  accountCorrespondentBank = object.CorrespondentBank;
  Depository1 = object.Depository;
  Depository2 = object.Depository2;
}

clx FAggregateSubResults [FExtensionAttribute] {
  saccrExposureAtDefault = saccrAlpha * sumOf(flattenAndRemoveNil([saccrReplacementCost, saccrPotentialFutureExposure]));
}

clx FAlert [FExtensionAttribute] {
  alertAvailableLimit = py("Total_Trade", context).count_available_limit(object, ["Alert Threshold Value", "Current Value"]);
}

clx FAppliedRule [FExtensionAttribute] {
  StatusExpiry = dateDifference(object.EndDate, dateToday);
}

clx FASQLQueryFolder [FExtensionAttribute] {
  Total_coupon = py("Total_Trade", context).total_coupon(object.Query);
}

clx FBreach [FExtensionAttribute] {
  breachValue = object.WatermarkValue;
}

clx FColumnAppearance [FExtensionAttribute] {
  StatusBondHolding = StatusBondHolding;
}

clx FComplianceRule [FExtensionAttribute] {
  IssuerPercentUtilization = ruleValue;
  LimitExpiry = py("Total_Trade", context).limitexpiry(object.AppliedRules);
  StatusExpiry = dateDifference(LimitExpiry, dateToday);
  thresholdValue = switch(object.Thresholds.Size == 1, 
  true->object.Thresholds.First.Value, 
  false->nil);
}

clx FConfirmation [FExtensionAttribute] {
  accountAcquirerConf = object.Trade.Acquirer.Accounts;
  accountBrokerConf = object.Trade.Broker.Accounts;
  accountCounterpartyConf = object.Trade.Counterparty.Accounts;
  BrokerCorrespondentBank = select(count(accountBrokerConf :* "accountCorrespondentBank") > 0, 
  true->(accountBrokerConf :* "accountCorrespondentBank").At(0), 
  false->nil);
  OurCorrespondentBank = select(count(accountAcquirerConf :* "accountCorrespondentBank") > 0, 
  true->(accountAcquirerConf :* "accountCorrespondentBank").At(0), 
  false->nil);
  YourCorrespondentBank = select(count(accountCounterpartyConf :* "accountCorrespondentBank") > 0, 
  true->(accountCounterpartyConf :* "accountCorrespondentBank").At(0).Fullname, 
  false->nil);
}

clx FCurrency [FExtensionAttribute] {
  interestRateAtTradeTime = fxDiscountCurve.DiscountRate(currencyPairSpotDate, valueDay, daycountMethod);
}

clx FFra [FExtensionAttribute] {
  interestRateAtTradeTime = currency :* "interestRateAtTradeTime" [currencyPairSpotDate = valueDay, valueDay = startDate];
}

clx FFuture [FExtensionAttribute] {
  interestRateAtTradeTime = currency :* "interestRateAtTradeTime" [currencyPairSpotDate = instrumentSpotDate, valueDay = settlementDate];
}

clx FGridCellInfo [FExtensionAttribute] {
  ColumnValue = object.Value;
  Difference = object.Trade.Premium - tradeFXAttrFarSellAmount;
}

clx FInstrument [FExtensionAttribute] {
  CurrencyMTMSB = object.Trades.AsArray.First.Currency.Name;
  interestRateAtTradeTime = currency :* "interestRateAtTradeTime" [currencyPairSpotDate = instrumentSpotDate, valueDay = valueDay];
  portfolioConvexity = select(convexityCalculationValid, 
  true->convexityCalculation, 
  false->nil);
  Tenor = Object.EndDate;
  TenorTahun = Object.EndDate;
}

clx FInstrumentAndTrades [FExtensionAttribute] {
  ACCINT = ;
  AccountID = ;
  AccumulativeOrPerTransaction = ;
  AcquisitionIDR = 1;
  AgreedSellingPrice = ;
  AIP = ;
  AllInRate = ;
  AllowanceForLosses = ;
  Amortized010203 = ;
  Amortized2004 = ;
  AmortizedDiscPrem = ;
  AmountAccumulativePerMonth = ;
  AmountClosing = ;
  AmountClosingYesterday = ;
  AmountToFund = ;
  ApprovalSystem = "NTCS";
  ARGNO = ;
  ASSETID = ;
  AveragePrice = ;
  BalanceCustom = ;
  BaseCurrCR = ;
  BaseCurrDR = ;
  BeginningBalance = ;
  BEIND = ;
  Beneficiary = ;
  BidPriceBGN = ;
  BidPriceBVAL = ;
  BidPriceEXCH = ;
  BIDSourceBGN = ;
  BIS4 = ;
  blank = ;
  BookFilter = ;
  BookValueIDR = py("Total_Trade", context).calculate_bookvalueidr(object.Trades);
  BorrowerCode = ;
  BorrowerName = ;
  BUC = 1;
  BuyAmountCustom = ;
  BuyAmountCustom2 = ;
  BuyerOrSeller = ;
  CancelOrAmendDate = ;
  CAT = ;
  CCYRate = ;
  CFCITZ = ;
  CFCOUN = ;
  CFRESD = ;
  ChargersDelay = ;
  Checker = ;
  ClassificationofSecurities = ;
  Code = ;
  CODE = ;
  CodeDesc = ;
  Collateral = ;
  CollateralAmount = ;
  CollateralCurrency = ;
  CollateralDueDate = ;
  COMIDB = ;
  COMIDC = ;
  COMMPROCAMT = ;
  Conclusion = ;
  Conclusion2 = ;
  ContractValNetAgree = ;
  CounterpartyCountryIND = ;
  CountryLimit = ;
  CPMainCcy = ;
  CPMoneyCcy = ;
  CreateDate = ;
  CreditAmount = ;
  CrEquivalent1DayChange = ;
  CrEquivalentLimit = ;
  CrEquivalentPercentageUtilization = ;
  CrEquivalentUtilization = ;
  CS01 = ;
  CurrAgainstSGD = ;
  CurrAgainstUSD = ;
  CurrencyCR = ;
  CurrencyDR = ;
  CurrencyUpdateDate = ;
  CustomerCategory = ;
  CustomerName = ;
  DateNow = ;
  DateRange = ;
  DayChange = scenarioaxis(aggregateRiskPosition, <["timeDistributionBucket"], , , timeBucketsSetExternally>) - riskPositionDisplay;
  DayChangeConvexity = PrevDayConvexity;
  DayChangeCreditVaR = ;
  DayChangeCS01 = PrevDayCS01;
  DayChangeFXVaR = ;
  DayChangeGamma = priceGammaInstrument - scenarioaxis(priceGammaInstrument, <["valuationDate"], , , [[dateToday() + 1]]>);
  DayChangeGammaCash = priceGammaCash - scenarioaxis(priceGammaCash, <["valuationDate"], , , [[dateToday() + 1]]>);
  DayChangeHVaR = ;
  DayChangeIncrementalVaR = ;
  DayChangeIRVaR = ;
  DayChangeLeftCurve = leftCurvatureShift - scenarioaxis(leftCurvatureShift, <["valuationDate"], , , [[dateToday() + 1]]>);
  DayChangeMarginalVaR = priceGammaInstrument - scenarioaxis(priceGammaInstrument, <["valuationDate"], , , [[dateToday() + 1]]>);
  DayChangeMarginalVAR = ;
  DayChangePV01 = interestRateDelta - scenarioaxis(interestRateDelta, <["valuationDate"], , , [[dateToday() + 1]]>);
  DayChangeRightCurve = rightCurvatureShift - scenarioaxis(rightCurvatureShift, <["valuationDate"], , , [[dateToday() + 1]]>);
  DayChangeShortfallVaR = ;
  DayChangeTrading = scenarioaxis(aggregateRiskPosition, <["timeDistributionBucket"], , , timeBucketsSetExternally>) - riskPositionDisplay;
  DayChangeVega = vega - scenarioaxis(vega, <["valuationDate"], , , [[dateToday() + 1]]>);
  DayChangeVegaIR = vegaInstrument - scenarioaxis(vegaInstrument, <["valuationDate"], , , [[dateToday() + 1]]>);
  DayToExpired = ;
  DCIND = ;
  DebitAmount = ;
  Delta_ExchangeRate = ;
  DeltaCheck = ;
  DeltaThresholdValue = ;
  DeltaUtilizationPercentage = ;
  DENOM = ;
  Dept = ;
  DerivativesPayables = ;
  DerivativesReceivables = ;
  DescriptionUnderlying = ;
  Diff1 = ;
  Diff2 = ;
  Difference = 1;
  DiffRate = ;
  DiffRate100 = ;
  DRCRIND = ;
  eFx = ;
  EMAS = ;
  EndValue = ;
  EquivalentAmountIDR = object.trade.nominal * object.trade.instrument.FxRate;
  EquivalentAmountIDRnotAbs = object.trade.nominal * object.trade.instrument.FxRate;
  EquivalentMarketIDR = marketPeriodValue * object.trade.instrument.FxRate;
  ExchangeRateNTCS = ;
  ExtractDate = ;
  ExtractFlag = ;
  FaceAmount = py("Total_Trade", context).remove_bg(object.Trade.FaceValue);
  Facility = ;
  FacilityCollateral = ;
  FarAmount = object.Trade.EndCash;
  FarAmount1 = select(object.Trade.IsFxSwapNearLeg, 
  true->object.Trade.Premium, 
  false->object.Trade.FxSwapNearLeg.Premium);
  FarAmount2 = select(object.Trade.IsFxSwapFarLeg, 
  true->object.Trade.Premium, 
  false->object.Trade.FxSwapFarLeg.Premium);
  FarNear = ;
  FBI = "Hello Luci";
  FeeIDR = 1;
  FITCHDataBloomberg = ;
  FITCHDataNTCS = ;
  FITCHHasilMatch = ;
  FITCHINDODataBloomberg = ;
  FITCHINDODataNTCS = ;
  FITCHINDOHasilMatch = ;
  FLAG = ;
  ForwardRate = ;
  FrekuensiPenjualan = ;
  FrekuensiPenjualan_Yesterday = ;
  Frequency = object.Trades.Size;
  FTotal = py("Report_Python", context).remove_bg(object.Trade.Premium);
  FTotal_Premium = py("Total_Trade", context).remove_bg(object.Trade.Premium);
  GainOrLoss = ;
  GMRAIdentification = ;
  GrandTotal = ;
  GroupID = ;
  Haircut = ;
  HedgingFairValue = ;
  HedgingNotAmt = ;
  holdingPeriod = ;
  IBPA = ;
  ID = ;
  Indicator1 = ;
  InitialCollateralPrice = ;
  InputDate = ;
  InputTime = ;
  Ins_Bond = ;
  Ins_Commodity = ;
  Ins_Curr = ;
  Ins_CurrSwap = ;
  Ins_Deposit = ;
  Ins_MM_IP = ;
  Ins_MM_IT = ;
  Ins_Option = ;
  Ins_Repo = ;
  Ins_Swap = ;
  Interest_prime = 0;
  InterestAccrued = ;
  InterestAmount = ;
  InterestIncome = ;
  InterestPayment = ;
  InterestProceed = ;
  InterestReceived = ;
  IssuerLimit = ;
  IssuerPercentUtilization = ;
  IssuerUtilization = ;
  Kurs = ;
  KursBeli = ;
  KursJual = ;
  KursTengah = ;
  LastCouponDate = ;
  LastFixingRate = ;
  LastPaymentPeriod = py("Report_Python", context).get_start_date_cashflow(object.Trade);
  Limit = 500000000;
  Limit_FX = ;
  Limit_IR = py("Python_MO_Custom_Fields", context).get_compliance_rule_by_name("Limit IR Delta - Vania").Thresholds.First.Value;
  LimitCountryTarget = object.Trades.AsArray.First.AdditionalInfo.LimitPartyTarget.RiskCountry;
  LimitHolding = shunt(holdingPeriodGrouperReference, 
  nil->nil, 
  default->dateToday - holdingPeriodGrouperReference);
  LimitMO01 = ;
  LimitPortfolioTarget = object.Trades.AsArray.First.Portfolio;
  LimitPtyTarget = object.Trades.AsArray.First.AdditionalInfo.LimitPartyTarget;
  LimitPtyTarget_GrpId = object.Trades.AsArray.First.AdditionalInfo.LimitPartyTarget.Id;
  LowerPrice = py("Report_Python", context).lower_price_yesterday(object.Instrument.Name);
  LowerRate = ;
  MarketYield = ;
  MarkToMarket = ;
  MarkToModel = ;
  MO05_RuleName = "NOP Limit - UAT (Tito)";
  MO05Utilization = nil;
  MO07_RuleName = "PV01 Limit - ADE";
  MO07Utilization = nil;
  MO12_RuleName = "Standard_CEM";
  MO12Utilization = nil;
  MO13_RuleName = "Standard_Issuer";
  MO13Utilization = nil;
  MoneyAmount = ;
  Month = ;
  Month_TradeTime = ;
  MonthNow = ;
  MonthNumber = 1;
  MonthToExpired = ;
  MOODYSDataBloomberg = ;
  MOODYSDataNTCS = ;
  MOODYSHasilMatch = ;
  MTD = ;
  MTM = ;
  NasabahBeli = sumOf(children :* "NasabahBeli");
  NasabahJual = sumOf(children :* "NasabahJual");
  NAV = ;
  NearAmount = py("Total_Trade", context).remove_bg(object.Trade.Premium);
  NearAmount1 = select(object.Trade.IsFxSwapNearLeg, 
  true->object.Trade.Quantity, 
  false->object.Trade.FxSwapNearLeg.Quantity);
  NearAmount2 = select(object.Trade.IsFxSwapFarLeg, 
  true->object.Trade.Quantity, 
  false->object.Trade.FxSwapFarLeg.Quantity);
  NetAmount = ;
  NextCouponDate = ;
  NextPaymentPeriod = py("Report_Python", contex).get_end_date_cashflow(object.Trade);
  NII = ;
  NilaiBeliKembali = ;
  NilaiPasar = ;
  NilaiPasar2 = ;
  NilaiPerolehan = ;
  NilaiPerolehan2 = ;
  nisbahBagiHasil = ;
  NominalCoupon = ;
  NominativeList = ;
  NomorIdentifikasi = 1;
  NOPOvernight = ;
  NOPThresholdValue = ;
  NOPUtilizationPercentage = ;
  Notional1DayChange = ;
  NotionalLimit = ;
  NotionalPercentageUtilization = ;
  NotionalUtilization = ;
  OBJID = ;
  OneDayChange = ;
  OneDayChange_FX = ;
  OneDayChange_IR = vegaInstrument - scenarioaxis(vegaInstrument, <["valuationDate"], , , [[dateToday() + 1]]>);
  ORD = ;
  OthersFairValue = ;
  OthersNotAmt = ;
  OutstandingEqvUSD = ;
  PayDate = ;
  PaymentSystem = ;
  PayOrReceive = ;
  PEFINDODataBloomberg = ;
  PEFINDODataNTCS = ;
  PEFINDOHasilMatch = ;
  Pemeringkat = pemeringkat_dan_peringkat.At(0);
  pemeringkat_dan_peringkat = py("Report_Python", context).pemeringkat_dan_peringkat(object.Instrument);
  Percentage = ;
  Percentage_FX = ;
  Percentage_Yesterday = ;
  PercentageHolding = ;
  PercentageMO01RPL = ;
  PercentageMO01RPL_Yesterday = ;
  PercentageMO01UPL = ;
  PercentageMO01UPL_Yesterday = ;
  PercentageVolumeYesterday = ;
  PercentUtilization = ;
  PercentUtilizationTrading = ;
  Peringkat = pemeringkat_dan_peringkat.At(1);
  Period = 1;
  PhysicalForeign = ;
  portfolioConvexity = instrument :* "portfolioConvexity" [isSplitAllGrouped, priceSource];
  PortLimit = ;
  PositionEOD = py("Total_Trade", context).positionEOD;
  PrevDayConvexity = scenarioaxis(portfolioConvexity, <["valuationBaseDateTime"], , , dateToday() - 1>);
  PrevDayCS01 = scenarioaxis(creditSpreadDelta, <["valuationBaseDateTime"], , , dateToday() - 1>);
  PrevDayPV01 = scenarioaxis(interestRateDelta, <["valuationBaseDateTime"], , , dateToday() - 1>);
  PrevEffDate = 1;
  PrevPrevEffDate = 1;
  PrevPrevPrice = 1;
  PrevPrice = 1;
  PriceYST = ;
  ProceedAmount = ;
  ProcessFlag = ;
  Product = ;
  ProductCategory = ;
  PV01Threshold = ;
  PV01ThresholdValue = ;
  PV01UtilizationPercentage = ;
  PV01WatermarkValue = ;
  RATE_8 = ;
  Reff = ;
  RemarkOutstanding = ;
  RemarkSellBuy = 1;
  RevalRate = ;
  RevaluationAmount = ;
  RiskWeight = ;
  saccrCappedExposureAtDefault = min(saccrExposureAtDefault, saccrUnmarginedExposureAtDefault);
  saccrExposureAtDefault = saccrAlpha * (saccrReplacementCost + saccrPotentialFutureExposure);
  SECID = ;
  SECIDPrice = ;
  SecuritiesRating = ;
  SecuritiesRatingInstituition = ;
  SellAmountCustom = ;
  SellAmountCustom2 = ;
  SEQNUM = ;
  SETTAVGCOST = ;
  SNPDataBloomberg = ;
  SNPDataNTCS = ;
  SNPHasilMatch = ;
  SourceData = ;
  SRC_STM_ID = ;
  StandardYearlyLossThresholdValue = ;
  StandardYearlyLossUtilizationPercentage = ;
  StartValue = ;
  Status_Utilization_FX = py("Python_MO_Custom_Fields", context).is_violated_MO10_new(object.Trades, "Limit FX Delta - Vania");
  Status_Utilization_IR = py("Python_MO_Custom_Fields", context).is_violated_MO10_new(object.Trades, "Limit IR Delta - Vania");
  StatusAntasena = ;
  StatusBondHolding = ;
  StatusExpiry = ;
  StatusLimit = ;
  StatusLimit_FX = ;
  StatusLimit_IR = ;
  StatusLimitExpiry = ;
  StatusLimitTrading = ;
  StatusMatchUnmatch = ;
  StatusNTCS = ;
  StatusRegistration = ;
  STDEV = ;
  SUBLMTNAME = ;
  SystemDate = acm.Time.DateToday;
  TenorTahun = Object.Trade.EndDate;
  TermofPeriod = ;
  tingkatIndikasiImbalan = ;
  TodayPrice = py("Report_Python", context).today_price(object.Instrument.Name);
  ToleranceLimit = ;
  ToleranceLimit2 = ;
  Total_Cashflow = ;
  Total_coupon = ;
  TotalACCINT = ;
  TotalINTAMT = ;
  TotalNasabah = sumOf(children :* "TotalNasabah");
  TotalPaymentReceive = ;
  TotalPrincipal = ;
  TotalUSD = float(convertProjectedPaymentsToInstrumentAndQuotation(projectedCashInventoryFlatNonNormalized, displayInstrumentRatesForProjectedCashInventory, displayInstrumentsForVectorColumn = "USD", instrumentsForVectorColumn = "USD", selectedQuotation = "Per Unit")) + (float(fxDisplayToBase) * (float(convertProjectedPaymentsToInstrumentAndQuotation(projectedCashInventoryFlatNonNormalized, displayInstrumentRatesForProjectedCashInventory, displayInstrumentsForVectorColumn = "SGD", instrumentsForVectorColumn = "SGD", selectedQuotation = "Per Unit")) + float(convertProjectedPaymentsToInstrumentAndQuotation(projectedCashInventoryFlatNonNormalized, displayInstrumentRatesForProjectedCashInventory, displayInstrumentsForVectorColumn = "EUR", instrumentsForVectorColumn = "EUR", selectedQuotation = "Per Unit")) + float(convertProjectedPaymentsToInstrumentAndQuotation(projectedCashInventoryFlatNonNormalized, displayInstrumentRatesForProjectedCashInventory, displayInstrumentsForVectorColumn = "IDR", instrumentsForVectorColumn = "IDR", selectedQuotation = "Per Unit"))));
  TradeNumberInstrument = ;
  TradeTimeDateOnly = ;
  TranslationAmount = ;
  Trilyun = ;
  Type_Placement = ;
  TypeofFunding = ;
  TypeOfSecurities = ;
  TypeUtilization = ;
  Unamortized = ;
  UnamortizedDiscPrem = ;
  UnamortizedInterest = ;
  UnderlyingThreshold = ;
  UnrealizedPlusIncomeToday = ;
  UnrealizedPlusIncomeYesterday = ;
  UpperPrice = py("Report_Python", context).upper_price_yesterday(object.Instrument.Name);
  UpperRate = ;
  UserCancelOrAmendBO = ;
  UserCancelOrAmendFO = ;
  Utilisasi = ;
  UtilisasiCreditEquivalent = ;
  Utilization_FX = string((interestRateDelta / Limit_FX) * 100) + "%";
  Utilization_IR = string((interestRateDelta / Limit_IR) * 100) + "%";
  VarThresholdValue = ;
  VarUtilizationPercentage = ;
  VolumePenjualan = ;
  VolumeYesterday = ;
  WeekNumber = ;
  Year = ;
  YearNow = ;
  YesterdayPrice = py("Report_Python", context).instrument_price(object.Instrument.Name);
  YieldChange = ;
  YieldYST = ;
  YTD = ;
  YTDAndAccrued = ;
}

clx FJournal [FExtensionAttribute] {
  AbsJournal = abs(object.Trade.Nominal);
  AbsJournalAmount = abs(object.Amount);
  AbsJournalAmountIdr = abs(object.BaseAmount);
  AbsNominal = abs(object.Trade.Nominal);
  AccruedInterestValue = select(object.Trade, 
  default->py("Report_Python", context).trd_accruedinterest(object.Trade).Number, 
  nil->nil);
  AccruedOutstanding = object.Trade.EndCash - object.Trade.Nominal;
  Amortized = (object.Trade.Premium - object.Trade.Nominal) / dateDifference(object.Instrument.EndDate, dateToday);
  AmortizedDiscPrem = select(object.Trade, 
  nil->nil, 
  default->py("Report_Python", context).trd_amortized(object.Trade));
  AmountClosing = py("Report_Python", context).calculate_amount_closing(object.Trade, true);
  AmountClosingYesterday = py("Report_Python", context).calculate_amount_closing_journal(object);
  AmountJournal = select(journalAmount < 0, 
  true->"(" + string(abs(journalAmount).Value.Number) + ")", 
  false->string(journalAmount));
  ARGNO = select(journalDebitOrCredit, 
  "Debit"->"1", 
  "Credit"->"2");
  BEIND = select(object.Currency, 
  "IDR"->0);
  BMRISell = select(journalAmount > 0, 
  true->nil, 
  default->journalAmount);
  BranchCode = "99120";
  BuyAmountCustom = ;
  BuyAmountCustom2 = ;
  BuySellJournal = select(journalAmount > 0, 
  true->"Buy", 
  default->"Sell");
  closedLots = py("Report_Python", context).closedLots(object);
  ClosingBalance = object.CounterpartyAccountRef.AdditionalInfo.ClosingBalance;
  CODE = select(journalDebitOrCredit, 
  "Debit"->"3350", 
  "Credit"->"3335");
  CodeDesc = object.AdditionalInfo.JournalNarrative1 + " " + object.AdditionalInfo.JournalNarrative2 + " " + object.AdditionalInfo.JournalNarrative3 + " " + object.AdditionalInfo.JournalNarrative4 + " " + object.AdditionalInfo.JournalNarrative5;
  CounterpartyCustom = object.CorrespondentBankName + " " + object.CounterpartyAccName;
  CounterpartyType = select(object.Trade.Counterparty.Swift, 
  "BMRIGB2L"->"Subsidiary", 
  default->"Third Party");
  CreateDateJournal = py("Report_Python", context).createDateTimeJournal(object.CreateTime, true);
  CreateTimeJournal = py("Report_Python", context).createDateTimeJournal(object.CreateTime, false);
  CurrBuyAudit = py("Report_Python", context).GetCurrJournal(object, true);
  CurrSellAudit = py("Report_Python", context).GetCurrJournal(object, false);
  DatesPosition = py("Total_Trade", context).positionEOD(false);
  DayToExpired = int(dateDifference(object.Instrument.EndDate, journalValueDate) - 30 * MonthToExpired);
  DCIND = select(journalDebitOrCredit, 
  "Debit"->"D", 
  "Credit"->"C");
  DerivativesPayables = 0;
  Descr = "BUNGA PINJAMAN LAINNYA DITM LAINNYA";
  DiaryReason = py("Report_Python", context).JournalDiary(object);
  dictPaymentTypeText = createDictionary(paymentTypeArray, paymentTextArray);
  Difference = AccruedInterestValue - journalAmount;
  differencePajak = py("Report_Python", context).differencePajak(object);
  DoC = select(object.DebitOrCredit, 
  "Debit"->"D", 
  "Credit"->"C");
  DRCRIND = select(journalDebitOrCredit, 
  "Debit"->"DR", 
  "Credit"->"CR");
  EndCashRepo = object.Trade.FaceValue + py("Report_Python", context).get_cashflow_proj_interest_amt(object.Trade);
  EndInterest = object.Trade.EndCash + object.Trade.StartCash;
  EndInterestRepo = select(object.Trade <> nil, 
  true->py("Report_Python", context).get_cashflow_proj_interest_amt(object.Trade), 
  false->select(object.JournalTrade <> nil, 
    true->py("Report_Python", context).get_cashflow_proj_interest_amt(object.JournalTrade), 
    false->select(object.ContractTrade <> nil, 
      true->py("Report_Python", context).get_cashflow_proj_interest_amt(object.ContractTrade))));
  EquivalentAmountIDR = select(object.Currency.Name, 
  "IDR"->object.Amount, 
  default->py("Report_Python", context).journalidramount(object.Currency.Name, object.Amount));
  EquivalentAmountIDRnotAbs = select(object.Currency.Name, 
  "IDR"->object.Amount, 
  default->py("Report_Python", context).journalidramount(object.Currency.Name, object.Amount));
  FLAG = select(abs(object.BaseAmount) >= 1000000000000.0, 
  true->"NOK", 
  false->"Y");
  GrandTotal = ;
  IDNumber = select(object.Counterparty.AdditionalInfo.KTP, 
  default->object.Counterparty.AdditionalInfo.KTP, 
  nil->select(object.Counterparty.AdditionalInfo.NPWP, 
    default->object.Counterparty.AdditionalInfo.NPWP, 
    nil->nil));
  IDTypeCode = select(object.Counterparty.AdditionalInfo.KTP, 
  default->"KTP", 
  nil->select(object.Counterparty.AdditionalInfo.NPWP, 
    default->"NPWP", 
    nil->nil));
  JournalAmountAbs = abs(object.Amount);
  JournalDifference = AccruedInterestValue - float(journalAmount);
  Keterangan = "";
  KursBeli = ;
  KursJual = ;
  LBU = object.Amount * py("Report_Python", context).idr_price_mtm_curr(object.Currency.Name);
  LBUFieldCustom = py("Report_Python", context).LBUValue(object.Amount, object.Trade.Currency.Name);
  MonthToExpired = int(dateDifference(object.Instrument.EndDate, journalValueDate) / 30);
  Movement = abs(object.BaseAmount - AmountClosingYesterday);
  NilaiBuku = select(object.Trade, 
  default->py("Report_Python", context).trd_marktomarket(object.Trade), 
  nil->nil);
  NominativeList = 1234;
  NostroMirrorACName = select(object.Counterparty.Accounts.Size > 0, 
  true->select(object.Counterparty.Accounts.First.Depository <> "", 
    true->(object.Counterparty.Accounts) :* "Depository1"), 
  false->nil);
  NostroMirrorACNumber = select(object.Counterparty.Accounts.Size > 0, 
  true->select(object.Counterparty.Accounts.First.Depository2 <> "", 
    true->(object.Counterparty.Accounts) :* "Depository2"), 
  false->nil);
  Payment = object.Trade.Payments;
  paymentTextArray = Payment :* "paymentText";
  paymentTypeArray = string(Payment :* "paymentType");
  PayOrReceive = select(journalDebitOrCredit, 
  "Debit"->"RECEIVE", 
  "Credit"->"PAY");
  Pemohon = "";
  PositionEOD = py("Total_Trade", context).positionEOD;
  ProceedAmount = select(object.Trade.Premium, 
  0->abs(object.Trade.Nominal), 
  default->abs(object.Trade.Premium));
  Product = py("Report_Python", context).journal_product(object);
  RateNTRIDR = select(object.Currency.Name, 
  "IDR"->"1", 
  default->py("Report_Python", context).idr_price_mtm_yesterday(object.Trade));
  Reff = py("Total_Trade", context).reffjournal(object.Trade, ["Trade Number", "Trade Instrument", "Trade Optional Key 3", "Trade Optional Key 4"]);
  RepoRate = py("Report_Python", context).repo_rate(object.Trade);
  SandiBank = py("Report_Python", context).get_sandi_bank(object.Counterparty.AdditionalInfo.LBUT_SANDI_BANK);
  Scttype = select(object.Trade.Portfolio <> nil, 
  true->select(object.Trade <> nil, 
    true->select(object.Trade.Portfolio.TypeChlItem, 
      "Amortised Cost"->"HTM", 
      "FVOCI"->"AFS", 
      "FVTPL"->"TRD"), 
    false->nil), 
  false->nil);
  SellAmountCustom = ;
  SellAmountCustom2 = ;
  SpotAssets = select(object.Trade.OptKey4, 
  "TOD"->object.Trade.Nominal, 
  "TOM"->object.Trade.Nominal, 
  "SPOT"->object.Trade.Nominal, 
  default->0);
  status_mt950 = select(object.Status == "Closed", 
  true->"Match", 
  false->"Unmatch");
  sukuBungaPersentaseImbalan = py("Report_Python", context).get_rate_deposit(object);
  TaxDifferenceJournal = abs(WHT) - abs(JournalAmountAbs);
  Tenor = int(object.Instrument.EndDate - journalValueDate);
  trade = object.Trade;
  TradeTimeDateOnly = asDate(object.Trade.TradeTime);
  Trilyun = int(abs(object.BaseAmount / 1000000000000.0));
  Unamortized = object.Trade.Premium - object.Trade.Nominal - Amortized;
  WHT = py("Report_Python", context).taxWht(object);
  WHTText = dictPaymentTypeText.At("WHT");
}

clx FJournalMultiItem [FExtensionAttribute] {
  AbsJournalAmount = sumOf((object.Journals.AsArray) :* "AbsJournalAmount");
  AbsJournalAmountIdr = sumOf((object.Journals.AsArray) :* "AbsJournalAmountIdr");
  AmountClosingYesterday = sumOf((object.Journals.AsArray) :* "AmountClosingYesterday");
  Movement = sumOf((object.Journals.AsArray) :* "Movement");
  Optkey3JournalItem = object.Journals.AsArray.First.Trade.OptKey3.Name;
  Optkey4JournalItem = object.Journals.AsArray.First.Trade.OptKey4.Name;
  Product = py("Report_Python", context).journal_product(object);
}

clx FJournalSheet [FExtensionAttribute] {
  LBUFieldCustom = object.Trade.Amount;
}

clx FLeg [FExtensionAttribute] {
  fixedRateCustom = object.FixedRate;
}

clx FLegAndTrades [FExtensionAttribute] {
  saccrCappedExposureAtDefault = nil;
  saccrExposureAtDefault = nil;
}

clx FMoneyFlowAndTrades [FExtensionAttribute] {
  Cashflow10m = py("Report_Python", context).get_Cashflows(object.MoneyFlow, "10", "m");
  Cashflow11m = py("Report_Python", context).get_Cashflows(object.MoneyFlow, "11", "m");
  Cashflow12m = py("Report_Python", context).get_Cashflows(object.MoneyFlow, "12", "m");
  Cashflow1d = py("Report_Python", context).get_Cashflows(object.MoneyFlow, "1", "d");
  Cashflow1m = py("Report_Python", context).get_Cashflows(object.MoneyFlow, "1", "m");
  Cashflow2d = py("Report_Python", context).get_Cashflows(object.MoneyFlow, "2", "d");
  Cashflow2m = py("Report_Python", context).get_Cashflows(object.MoneyFlow, "2", "m");
  Cashflow2y = py("Report_Python", context).get_Cashflows(object.MoneyFlow, "2", "y");
  Cashflow3d = py("Report_Python", context).get_Cashflows(object.MoneyFlow, "3", "d");
  Cashflow3m = py("Report_Python", context).get_Cashflows(object.MoneyFlow, "3", "m");
  Cashflow3y = py("Report_Python", context).get_Cashflows(object.MoneyFlow, "3", "y");
  Cashflow4d = py("Report_Python", context).get_Cashflows(object.MoneyFlow, "4", "d");
  Cashflow4m = py("Report_Python", context).get_Cashflows(object.MoneyFlow, "4", "m");
  Cashflow4y = py("Report_Python", context).get_Cashflows(object.MoneyFlow, "4", "y");
  Cashflow5d = py("Report_Python", context).get_Cashflows(object.MoneyFlow, "5", "d");
  Cashflow5m = py("Report_Python", context).get_Cashflows(object.MoneyFlow, "5", "m");
  Cashflow5y = py("Report_Python", context).get_Cashflows(object.MoneyFlow, "5", "y");
  Cashflow6d = py("Report_Python", context).get_Cashflows(object.MoneyFlow, "6", "d");
  Cashflow6m = py("Report_Python", context).get_Cashflows(object.MoneyFlow, "6", "m");
  Cashflow6y = py("Report_Python", context).get_Cashflows(object.MoneyFlow, "6", "y");
  Cashflow7d = py("Report_Python", context).get_Cashflows(object.MoneyFlow, "7", "d");
  Cashflow7m = py("Report_Python", context).get_Cashflows(object.MoneyFlow, "7", "m");
  Cashflow7y = py("Report_Python", context).get_Cashflows(object.MoneyFlow, "7", "y");
  Cashflow8m = py("Report_Python", context).get_Cashflows(object.MoneyFlow, "8", "m");
  Cashflow9m = py("Report_Python", context).get_Cashflows(object.MoneyFlow, "9", "m");
  CashflowToday = py("Report_Python", context).get_Cashflows(object.MoneyFlow, "0", "d");
  FarAmount = ;
  InterestPayment = py("Report_Python", context).InterestPayment(object);
  InterestPaymentMoneyFlow = py("Report_Python", context).InterestPayment(object);
  InterestProceed = InterestProceed = projectedMoneyFlow;
  InterestReceived = py("Report_Python", context).InterestReceive(object);
  InterestReceivedMoneyFlow = py("Report_Python", context).InterestReceive(object);
  MoneyEndDate = select(object.MoneyFlow.CashFlowType, 
  "Float Rate"->object.MoneyFlow.EndDate, 
  "Fixed Rate"->"");
  MoneyFlowAmount = py("MoneyFlow_PyFunctions", context).getAmount(object, object.Instruments.First.Trades.First.Oid);
  PayDayCustom = payDate;
  SingleInterestPayment = select(object.InstrumentAndTrades, 
  "Reset"->"", 
  default->select(object.MoneyFlow.CashFlow.Leg.PayType, 
    "Pay"->select(object.MoneyFlow.CashFlowType, 
      "Fixed Rate"->py("Report_Python", context).SingleInterestPayment(object.Instruments.First.FirstReceiveLeg.NominalFactor, object.Instruments.First.FirstPayLeg.NominalFactor, object.Instruments.First.ContractSize, cashAnalysisFixedRate, periodDays, object.MoneyFlow.CashFlow.Leg.DayCountMethod, SwapProceed), 
      "Float Rate"->py("Report_Python", context).SingleInterestPayment(object.Instruments.First.FirstReceiveLeg.NominalFactor, object.Instruments.First.FirstPayLeg.NominalFactor, object.Instruments.First.ContractSize, cashAnalysisForwardRate * 100, periodDays, object.MoneyFlow.CashFlow.Leg.DayCountMethod, SwapProceed)), 
    default->""));
  SingleInterestReceived = select(object.InstrumentAndTrades, 
  "Reset"->"", 
  default->select(object.MoneyFlow.CashFlow.Leg.PayType, 
    "Receive"->select(object.MoneyFlow.CashFlowType, 
      "Fixed Rate"->py("Report_Python", context).SingleInterestReceive(object.Instruments.First.FirstReceiveLeg.NominalFactor, object.Instruments.First.FirstPayLeg.NominalFactor, object.Instruments.First.ContractSize, cashAnalysisFixedRate, periodDays, object.MoneyFlow.CashFlow.Leg.DayCountMethod, SwapProceed), 
      "Float Rate"->py("Report_Python", context).SingleInterestReceive(object.Instruments.First.FirstReceiveLeg.NominalFactor, object.Instruments.First.FirstPayLeg.NominalFactor, object.Instruments.First.ContractSize, cashAnalysisForwardRate, periodDays, object.MoneyFlow.CashFlow.Leg.DayCountMethod, SwapProceed)), 
    default->""));
  SwapCounterparty = object.Instruments.First.Trades.First.Counterparty.Name;
  SwapFarAmount = select(object.InstrumentAndTrades, 
  "Reset"->"", 
  default->object.Instruments.First.Trades.First.Nominal * object.MoneyFlow.CashFlow.Leg.NominalFactor);
  SwapPortfolio = object.Instruments.First.Trades.First.Portfolio.Name;
  SwapProceed = select(object.InstrumentAndTrades, 
  "Reset"->"", 
  default->object.Instruments.First.Trades.First.Position * object.MoneyFlow.CashFlow.Leg.NominalFactor);
  TrdNbrMoneyFlow = object.Instruments.First.Trades.First.Oid;
}

clx FMultiInstrumentAndTrades [FExtensionAttribute] {
  AccountID = ;
  AccumulativeOrPerTransaction = ;
  AcquisitionIDR = 1;
  AFS = sumOf(children :* "AFS");
  AIP = ;
  AL = py("Total_Trade", context).totalMultiInstrumentAndTradesClass(object.Trades);
  AmountAccumulativePerMonth = ;
  AmountInIDRBonds = sumOf(children :* "AmountInIDRBonds");
  ApprovalSystem = "NTCS";
  AveragePrice = averageOf(trades :* "price");
  AverageYield = averageOf(children :* "AverageYield");
  BalanceCustom = ;
  BidPriceBGN = ;
  BidPriceBVAL = ;
  BidPriceEXCH = ;
  BIDSourceBGN = ;
  BookValueIDR = py("Total_Trade", context).calculate_bookvalueidr(object.Trades);
  BUC = 1;
  BuyAmountCustom = sumOf((object.Children) :* "BuyAmountCustom");
  BuyAmountCustom2 = sumOf((object.Children) :* "BuyAmountCustom2");
  CCS = py("Report_Python", context).TotalMMInterbankLIQ19(object.Trades, "ALL", ["CCS"]);
  ClassificationofSecurities = ;
  Coupon_SB_Dimiliki = py("Report_Python", context).TotalMMInterbankLIQ19(object.Trades, "ALL", ["CBIDR", "CBUSD", "CBVALAS", "UST", "BILLS", "ROI", "ORI", "SR", "SBBI", "SBK", "SPN", "SPNS", "FR", "VR", "INDOIS", "PBS", "NCD"]);
  CPMainCcy = ;
  CPMoneyCcy = ;
  CrEquivalent1DayChange = ;
  CrEquivalentLimit = ;
  CrEquivalentPercentageUtilization = ;
  CrEquivalentUtilization = ;
  CS01 = ;
  CurrencyMTMSB = object.Trades.AsArray.First.Currency.Name;
  DayChangeConvexity = PrevDayConvexity;
  DayChangeCS01 = PrevDayCS01;
  DayChangeDelta = priceDeltaCash - scenarioaxis(priceDeltaCash, <["valuationBaseDateTime"], , , dateToday() + 1>);
  DayChangeDeltaIR = interestRateDelta - scenarioaxis(interestRateDelta, <["valuationBaseDateTime"], , , dateToday() + 1>);
  DayChangeGamma = priceGammaInstrument - scenarioaxis(priceGammaInstrument, <["valuationDate"], , , [[dateToday() + 1]]>);
  DayChangeGammaCash = priceGammaCash - scenarioaxis(priceGammaCash, <["valuationDate"], , , [[dateToday() + 1]]>);
  DayChangeIRVaR = ;
  DayChangeLeftCurve = leftCurvatureShift - scenarioaxis(leftCurvatureShift, <["valuationDate"], , , [[dateToday() + 1]]>);
  DayChangeMarginalVaR = priceGammaInstrument - scenarioaxis(priceGammaInstrument, <["valuationDate"], , , [[dateToday() + 1]]>);
  DayChangeMarginalVAR = ;
  DayChangePV01 = interestRateDelta - scenarioaxis(interestRateDelta, <["valuationDate"], , , [[dateToday() + 1]]>);
  DayChangeRightCurve = rightCurvatureShift - scenarioaxis(rightCurvatureShift, <["valuationDate"], , , [[dateToday() + 1]]>);
  DayChangeVega = vega - scenarioaxis(vega, <["valuationDate"], , , [[dateToday() + 1]]>);
  DayChangeVegaIR = vegaInstrument - scenarioaxis(vegaInstrument, <["valuationDate"], , , [[dateToday() + 1]]>);
  DeltaCheck = ;
  DeltaThresholdValue = ;
  DeltaUtilizationPercentage = ;
  Difference = 1;
  Difference_EndCash = select(object.GrouperOnLevel, 
  "Currency"->py("Total_Trade", context).sumEndCash(object.Trades));
  Difference_EndCashDisplay = select(object.GrouperOnLevel, 
  "Asset or Liability Grouper"->nil, 
  default->Difference_EndCash);
  EightDayExpiry = ;
  EquivalentAmountIDR = sumOf(children :* "EquivalentAmountIDR");
  EquivalentAmountIDR_Yesterday = sumOf(children :* "EquivalentAmountIDR_Yesterday");
  EquivalentAmountIDRnotAbs = sumOf(children :* "EquivalentAmountIDRnotAbs");
  EquivalentAmountUSDTradeTime = sumOf(children :* "EquivalentAmountUSDTradeTime");
  FaceAmount = py("Total_Trade", context).sum_FaceValue(object.Trades);
  FarAmount = sumOf((object.Trades.First.Trade) :* "FarAmountEndCash");
  FarAmount1 = sumOf(children :* "FarAmount1");
  FarAmount2 = sumOf(children :* "FarAmount2");
  FBIThisYear = sumOf(children :* "FBIThisYear");
  FBIYesteryear = sumOf(children :* "FBIYesteryear");
  FEECustody = sumOf(children :* "FEECustody");
  FeeIDR = 1;
  FiveDayExpiry = ;
  FourDayExpiry = ;
  FrekuensiPenjualan_Yesterday = ;
  FTotal = py("Report_Python", context).sum_column(object.Trades);
  FTotal_Premium = py("Total_Trade", context).sum_column(object.Trades);
  FXFW = py("Report_Python", context).TotalMMInterbankLIQ19(object.Trades, "ALL", ["TOD", "TOM", "SPOT", "FWD"]);
  GainOrLoss = ;
  GMRAIdentification = ;
  GroupID = ;
  HTM = sumOf(children :* "HTM");
  ID = ;
  Ins_Bond = py("Report_Python", context).Instrument_Total_Cashflow("Bond", object.Trades);
  Ins_Commodity = py("Report_Python", context).Instrument_Total_Cashflow("Commodity", object.Trades);
  Ins_Curr = py("Report_Python", context).Instrument_Total_Cashflow("Curr", object.Trades);
  Ins_CurrSwap = py("Report_Python", context).Instrument_Total_Cashflow("CurrSwap", object.Trades);
  Ins_Deposit = py("Report_Python", context).Instrument_Total_Cashflow("Deposit", object.Trades);
  Ins_MM_IP = py("Report_Python", context).Product_Total_Cashflow("IP", object.Trades);
  Ins_MM_IT = py("Report_Python", context).Product_Total_Cashflow("IT", object.Trades);
  Ins_Option = py("Report_Python", context).Instrument_Total_Cashflow("Option", object.Trades);
  Ins_Repo = py("Report_Python", context).Instrument_Total_Cashflow("Repo", object.Trades);
  Ins_Swap = py("Report_Python", context).Instrument_Total_Cashflow("Swap", object.Trades);
  InsBondPrice = sumOf(children :* "InsBondPrice");
  IRS = py("Report_Python", context).TotalMMInterbankLIQ19(object.Trades, "ALL", ["IRS"]);
  Limit_FX = py("Python_MO_Custom_Fields", context).get_compliance_rule_by_name("Limit FX Delta - Vania").Thresholds.First.Value;
  Limit_IR = py("Python_MO_Custom_Fields", context).get_compliance_rule_by_name("Limit IR Delta - Vania").Thresholds.First.Value;
  LimitCountryTarget = object.Trades.AsArray.First.AdditionalInfo.LimitPartyTarget.RiskCountry;
  LimitCpty = py("Python_MO_Custom_Fields", context).get_threshold_limit_by_rule_name(LimitPtyTarget, MO12_RuleName);
  LimitIssuer = py("Python_MO_Custom_Fields", context).get_threshold_limit_by_rule_name(LimitPtyTarget, MO13_RuleName);
  LimitMO01 = ;
  LimitPortfolioTarget = object.Trades.AsArray.First.Portfolio;
  LimitPtyTarget = object.Trades.AsArray.First.AdditionalInfo.LimitPartyTarget;
  LimitPtyTarget_GrpId = object.Trades.AsArray.First.AdditionalInfo.LimitPartyTarget.Id;
  LowerRate = ;
  MMDF = py("Report_Python", context).TotalMMInterbankLIQ19(object.Trades, "Sell", ["FASBI"]);
  MMInterbankPlacement = py("Report_Python", context).TotalMMInterbankLIQ19(object.Trades, "Sell", ["CL", "MD", "CMP", "CMT", "OVP", "OVT", "BLT", "SHARI", "BA"]);
  MMInterbankTaken = py("Report_Python", context).TotalMMInterbankLIQ19(object.Trades, "Buy", ["CL", "MD", "CMP", "CMT", "OVP", "OVT", "BLT", "SHARI", "BA"]);
  MMLF = py("Report_Python", context).TotalMMInterbankLIQ19(object.Trades, "Buy", ["FASBI"]);
  MO05_LimitInd = py("Python_MO_Custom_Fields", context).limit_indicator(MO05_RuleLimit, MO05Utilization.Value.Number);
  MO05_RuleLimit = py("Python_MO_Custom_Fields", context).get_threshold_value_by_rule_name(LimitPortfolioTarget, MO05_RuleName);
  MO05_RuleLimitValue = py("Python_MO_Custom_Fields", context).get_threshold_limit_by_rule_name(LimitPortfolioTarget, MO05_RuleName);
  MO05_RuleName = "NOP Limit - UAT (Tito)";
  MO05_UtilizationPercentage = py("Python_MO_Custom_Fields", context).get_utilization_percentage_by_rule_name(MO05_RuleLimit, MO05Utilization.Value.Number) + "%";
  MO05Utilization = finalNOP3;
  MO07_LimitInd = py("Python_MO_Custom_Fields", context).limit_indicator(MO07_RuleLimit, MO07Utilization.Value.Number);
  MO07_RuleLimit = py("Python_MO_Custom_Fields", context).get_threshold_value_by_rule_name(LimitPortfolioTarget, MO07_RuleName);
  MO07_RuleLimitValue = py("Python_MO_Custom_Fields", context).get_threshold_limit_by_rule_name(LimitPortfolioTarget, MO07_RuleName);
  MO07_RuleName = "PV01 Limit - ADE";
  MO07_UtilizationPercentage = py("Python_MO_Custom_Fields", context).get_utilization_percentage_by_rule_name(MO07_RuleLimit, MO07Utilization.Value.Number) + "%";
  MO07Utilization = interestRateDelta;
  MO12_1DayChange = 0.0 - MO12_LastHistoricalValue;
  MO12_LastHistoricalValue = py("Python_MO_Custom_Fields", context).get_utilization_val_by_rule_name(LimitPtyTarget, MO12_RuleName);
  MO12_RuleName = "Standard_CEM";
  MO12Utilization = createAggregateSubResults(array(object.ValueDomain), cemLimitSubResultsInput);
  MO13_1DayChange = MO13Utilization.Value.Number - MO13_LastHistoricalValue;
  MO13_ExpiryStatus = py("Python_MO_Custom_Fields", context).get_expiry_status_by_rule_name(LimitPtyTarget, MO13_RuleName);
  MO13_LastDiaryNote = py("Python_MO_Custom_Fields", context).get_last_diary_note_by_rule_name(LimitPtyTarget, MO13_RuleName);
  MO13_LastHistoricalValue = py("Python_MO_Custom_Fields", context).get_utilization_val_by_rule_name(LimitPtyTarget, MO13_RuleName);
  MO13_LimitExpiry = py("Python_MO_Custom_Fields", context).get_end_date_by_rule_name(LimitPtyTarget, MO13_RuleName);
  MO13_LimitInd = py("Python_MO_Custom_Fields", context).limit_indicator(MO13_RuleLimit, MO13Utilization.Value.Number);
  MO13_RuleLimit = py("Python_MO_Custom_Fields", context).get_threshold_value_by_rule_name(LimitPtyTarget, MO13_RuleName);
  MO13_RuleLimitValue = py("Python_MO_Custom_Fields", context).get_threshold_limit_by_rule_name(LimitPtyTarget, MO13_RuleName);
  MO13_RuleName = "Standard_Issuer";
  MO13_UtilizationPercentage = py("Python_MO_Custom_Fields", context).get_utilization_percentage_by_rule_name(MO13_RuleLimit, MO13Utilization.Value.Number) + "%";
  MO13Utilization = issuerLimit + issuerLimitFund;
  MoneyAmount = ;
  Month = ;
  Month_TradeTime = ;
  MonthNumber = 1;
  MTD = py("Report_Python", context).get_value_from_hierarchy("Target", "MTD", object.InstrumentAndTrades.AsString);
  NearAmount = py("Total_Trade", context).sum_NearAmount(object.Trades);
  NearAmount1 = sumOf(children :* "NearAmount1");
  NearAmount2 = sumOf(children :* "NearAmount2");
  NII = ;
  NIIThisYear = sumOf(children :* "NIIThisYear");
  NIIYesteryear = sumOf(children :* "NIIYesteryear");
  NineDayExpiry = ;
  nisbahBagiHasil = ;
  NominalCustom = sumOf(children :* "NominalCustom");
  NomorIdentifikasi = 1;
  NOPThresholdValue = ;
  NOPUtilizationPercentage = ;
  Notional1DayChange = ;
  NotionalLimit = ;
  NotionalPercentageUtilization = ;
  NotionalUtilization = ;
  OneDayChange_IR = vegaInstrument - scenarioaxis(vegaInstrument, <["valuationDate"], , , [[dateToday() + 1]]>);
  OneDayExpiry = ;
  OutstandingEqvUSD = ;
  parent = object.Parent;
  Percentage_Yesterday = ;
  PercentageDeltaFX = abs(UtilisasiDeltaFX / Limit_FX * 100);
  PercentageDeltaIR = abs(UtilisasiDeltaIR / Limit_IR * 100);
  PercentageHolding = ;
  PercentageOfBuySell = string(round(EquivalentAmountUSDTradeTime / parent:EquivalentAmountUSDTradeTime * 100)) + " %";
  PercentageStatusFXClr = select(PercentageDeltaFX > 85, 
  true->1, 
  false->2);
  PercentageStatusIRClr = select(PercentageDeltaIR > 85, 
  true->1, 
  false->2);
  PercentageVolumeYesterday = ;
  PercentNominal = NominalCustom / parent:NominalCustom * 100;
  PercentUtilization = nil;
  Period = 1;
  portfolioConvexity = sumOf(children :* "portfolioConvexity");
  PortLimit = py("Python_MO_Custom_Fields", context).get_compliance_rule_by_name("VaR_FXT2").Thresholds.First.Value;
  Position1To3Y = sumOf(children :* "Position1To3Y");
  Position3To4Y = sumOf(children :* "Position3To4Y");
  Position4To5Y = sumOf(children :* "Position4To5Y");
  Position5To10Y = sumOf(children :* "Position5To10Y");
  PositionEOD = py("Total_Trade", context).positionEOD;
  PositionHigh10Y = sumOf(children :* "PositionHigh10Y");
  PositionLow1Y = sumOf(children :* "PositionLow1Y");
  PremiumCustom = sumOf(children :* "PremiumCustom");
  PrevDayConvexity = scenarioaxis(portfolioConvexity, <["valuationBaseDateTime"], , , dateToday() - 1>);
  PrevDayCS01 = scenarioaxis(creditSpreadDelta, <["valuationBaseDateTime"], , , dateToday() - 1>);
  PrevDayPV01 = scenarioaxis(interestRateDelta, <["valuationBaseDateTime"], , , dateToday() - 1>);
  PrevEffDate = 1;
  PrevPrevEffDate = 1;
  PrevPrevPrice = 1;
  PrevPrice = 1;
  PV01Threshold = ;
  PV01ThresholdValue = ;
  PV01UtilizationPercentage = ;
  PV01WatermarkValue = ;
  QuantityCustom = sumOf(children :* "QuantityCustom");
  Reff = object.Trade.Oid + "/" + object.Trade.Instrument.Name + "/" + object.Trade.OptKey3 + object.Trade.OptKey4;
  Reksadana = py("Report_Python", context).TotalMMInterbankLIQ19(object.Trades, "ALL", ["RDPU", "RDPT"]);
  RemarkOutstanding = ;
  RemarkSellBuy = 1;
  RepoBI = py("Report_Python", context).TotalMMInterbankLIQ19(object.Trades, "Sell", ["BISBI", "BIGOV", "BIDIS", "BINON", "BIOTH"]);
  RepoInterbank = py("Report_Python", context).TotalMMInterbankLIQ19(object.Trades, "Sell", ["IWFSBI", "IWFGOV", "IWFDIS", "IWFNON", "IWFOTH", "CWFSBI", "CWFGOV", "CWFDIS", "CWFNON", "CWFOTH", "IBSBI", "IBGOV", "IBDIS", "IBNON", "IBOTH", "CCBI", "CCGV", "CCDC", "CCOH", "OVBSBI", "OVBGOV", "OVBDIS", "OVBNON", "OVBOTH", "NEGSBI", "NEGGOV", "NEGDIS", "NEGNON", "NEGOTH"]);
  RevRepoBI = py("Report_Python", context).TotalMMInterbankLIQ19(object.Trades, "Buy", ["BISBI", "BIOB", "BIOH"]);
  RevRepoInterbank = py("Report_Python", context).TotalMMInterbankLIQ19(object.Trades, "Buy", ["IBBI", "IBOB", "OVBSBI", "OVBGOV", "OVBOTH", "CCSBI", "CCGOV", "CCOTH"]);
  RiskWeight = string(py("Report_Python", context).RiskWeight(object.Trades.AsArray.First.Counterparty)) + " %";
  SACCR_RWA = select(RiskWeight <> "NaN", 
  true->py("Report_Python", context).get_RWA(object.Instruments, RiskWeight), 
  false->"");
  saccrCappedExposureAtDefault = nil;
  SB_Dimiliki = py("Report_Python", context).TotalMMInterbankLIQ19(object.Trades, "ALL", ["IDBI", "SUKBI"]);
  SB_Terbit = py("Report_Python", context).TotalMMInterbankLIQ19(object.Trades, "ALL", ["BOND", "ZCO", "NCD"]);
  SecuritiesRating = ;
  SecuritiesRatingInstituition = ;
  SellAmountCustom = sumOf((object.Children) :* "SellAmountCustom");
  SellAmountCustom2 = sumOf((object.Children) :* "SellAmountCustom2");
  SevenDayExpiry = ;
  SixDayExpiry = ;
  StandardYearlyLossThresholdValue = ;
  StandardYearlyLossUtilizationPercentage = ;
  Status_Utilization_FX = py("Python_MO_Custom_Fields", context).is_violated_MO10_new(object.Trades, "Limit FX Delta - Vania");
  Status_Utilization_IR = py("Python_MO_Custom_Fields", context).is_violated_MO10_new(object.Trades, "Limit IR Delta - Vania");
  StatusDeltaFXClr = py("Python_MO_Custom_Fields", context).is_violated_MO10_new(object.Trades, "Limit FX Delta - Vania", false);
  StatusDeltaFXStr = select(PercentageDeltaFX > 85, 
  true->"bcg_red", 
  false->"bcg_green");
  StatusDeltaIRStr = select(PercentageDeltaIR > 85, 
  true->"bcg_red", 
  false->"bcg_green");
  StatusMatchUnmatch = ;
  SWAP = py("Report_Python", context).TotalMMInterbankLIQ19(object.Trades, "ALL", ["SWAP"]);
  TargetMonth = TargetMonth;
  TargetYear = TargetYear;
  TenDayExpiry = ;
  Term_Deposit = py("Report_Python", context).TotalMMInterbankLIQ19(object.Trades, "ALL", ["FASBI", "BI"]);
  TermofPeriod = ;
  ThreeDayExpiry = ;
  tingkatIndikasiImbalan = ;
  Total = sumOf(children :* "Total");
  Total_Cashflow = py("Report_Python", context).Total_Cashflow(object.Trades);
  Total_coupon = ;
  Total_EndCash = sumOf(children :* "Total_EndCash");
  Total_EndCashDisplay = select(object.GrouperOnLevel, 
  "Asset or Liability Grouper"->nil, 
  default->Total_EndCash);
  trades = object.Trades;
  TransactionBorrow = select(object.Children.Size > 0, 
  true->sumOf(children :* "TransactionBorrow"), 
  false->nil);
  TransactionBorrow1Bio = select(object.Children.Size > 0, 
  true->sumOf(children :* "TransactionBorrow1Bio"), 
  false->nil);
  TransactionLend = select(object.Children.Size > 0, 
  true->sumOf(children :* "TransactionLend"), 
  false->nil);
  TransactionLend1Bio = select(object.Children.Size > 0, 
  true->sumOf(children :* "TransactionLend1Bio"), 
  false->nil);
  TRD = sumOf(children :* "TRD");
  TwoDayExpiry = ;
  UnderlyingThreshold = ;
  UpperRate = ;
  Utilisasi = ;
  UtilisasiDeltaFX = sumOf(children :* "UtilisasiDeltaFX");
  UtilisasiDeltaIR = sumOf(children :* "UtilisasiDeltaIR");
  Utilization_FX = string((interestRateDelta / Limit_FX) * 100) + "%";
  Utilization_IR = string((interestRateDelta / Limit_IR) * 100) + "%";
  UtilizationStatus = select(object.Instrument.Trades.First.Currency.Name, 
  "IDR"->py("Python_MO_Custom_Fields", context).is_violated_MO10(object, "Bond Cut Loss Limit IDR - Vania", 0, UtilizationBond), 
  "USD"->py("Python_MO_Custom_Fields", context).is_violated_MO10(object, "Bond Cut Loss Limit USD - Vania", 0, UtilizationBond));
  VarThresholdValue = ;
  VarUtilizationPercentage = ;
  VolumeUSD = ;
  VolumeYesterday = ;
  WeekNumber = ;
  Year = ;
  yieldValueCustom = sumOf(children :* "yieldValueCustom");
  YTD = py("Report_Python", context).get_value_from_hierarchy("Target", "YTD", object.InstrumentAndTrades.AsString);
  YTDAndAccrued = sumOf(float(children :* "YTDAndAccrued"));
}

clx FMultiMoneyFlowAndTrades [FExtensionAttribute] {
  Cashflow10m = py("Report_Python", context).get_Cashflows_Sum(object.MoneyFlows, "10", "m");
  Cashflow11m = py("Report_Python", context).get_Cashflows_Sum(object.MoneyFlows, "11", "m");
  Cashflow12m = py("Report_Python", context).get_Cashflows_Sum(object.MoneyFlows, "12", "m");
  Cashflow1d = py("Report_Python", context).get_Cashflows_Sum(object.MoneyFlows, "1", "d");
  Cashflow1m = py("Report_Python", context).get_Cashflows_Sum(object.MoneyFlows, "1", "m");
  Cashflow2d = py("Report_Python", context).get_Cashflows_Sum(object.MoneyFlows, "2", "d");
  Cashflow2m = py("Report_Python", context).get_Cashflows_Sum(object.MoneyFlows, "2", "m");
  Cashflow2y = py("Report_Python", context).get_Cashflows_Sum(object.MoneyFlows, "2", "y");
  Cashflow3d = py("Report_Python", context).get_Cashflows_Sum(object.MoneyFlows, "3", "d");
  Cashflow3m = py("Report_Python", context).get_Cashflows_Sum(object.MoneyFlows, "3", "m");
  Cashflow3y = py("Report_Python", context).get_Cashflows_Sum(object.MoneyFlows, "3", "y");
  Cashflow4d = py("Report_Python", context).get_Cashflows_Sum(object.MoneyFlows, "4", "d");
  Cashflow4m = py("Report_Python", context).get_Cashflows_Sum(object.MoneyFlows, "4", "m");
  Cashflow4y = py("Report_Python", context).get_Cashflows_Sum(object.MoneyFlows, "4", "y");
  Cashflow5d = py("Report_Python", context).get_Cashflows_Sum(object.MoneyFlows, "5", "d");
  Cashflow5m = py("Report_Python", context).get_Cashflows_Sum(object.MoneyFlows, "5", "m");
  Cashflow5y = py("Report_Python", context).get_Cashflows_Sum(object.MoneyFlows, "5", "y");
  Cashflow6d = py("Report_Python", context).get_Cashflows_Sum(object.MoneyFlows, "6", "d");
  Cashflow6m = py("Report_Python", context).get_Cashflows_Sum(object.MoneyFlows, "6", "m");
  Cashflow6y = py("Report_Python", context).get_Cashflows_Sum(object.MoneyFlows, "6", "y");
  Cashflow7d = py("Report_Python", context).get_Cashflows_Sum(object.MoneyFlows, "7", "d");
  Cashflow7m = py("Report_Python", context).get_Cashflows_Sum(object.MoneyFlows, "7", "m");
  Cashflow7y = py("Report_Python", context).get_Cashflows_Sum(object.MoneyFlows, "7", "y");
  Cashflow8m = py("Report_Python", context).get_Cashflows_Sum(object.MoneyFlows, "8", "m");
  Cashflow9m = py("Report_Python", context).get_Cashflows_Sum(object.MoneyFlows, "9", "m");
  CashflowFarAmount = ;
  CashflowToday = py("Report_Python", context).get_Cashflows_Sum(moneyFlows, "0", "d");
  FarAmount = 1;
  InterestProceed = py("Total_Trade", context).interestproceed2(object.Trades);
  PayDayCustom = py("Total_Trade", context).payday(object.Trades);
  TradeNumberCustom = averageOf([1, 2, 3, 4]);
}

clx FObject [FExtensionAttribute] {
  SACCR_RWA = ;
}

clx FPayment [FExtensionAttribute] {
  paymentAmount = object.Amount;
  paymentCurrency = object.Currency;
  paymentText = object.Text;
  paymentType = object.Type;
}

clx FPortfolio [FExtensionAttribute] {
  CurrencyMTMSB = object.Trades.AsArray.First.Currency.Name;
}

clx FPortfolioInstrumentAndTrades [FExtensionAttribute] {
  AccountID = ;
  AccumulativeOrPerTransaction = ;
  AcquisitionIDR = 1;
  AcquisitionPricePercent = notANumberIsZero(rPLColumn / tPL * 100);
  AFS = sumOf(children :* "AFS");
  AIP = ;
  AL = py("Total_Trade", context).totalPortfolioInstrumentAndTradesClass(object.Trades);
  AmountAccumulativePerMonth = ;
  ApprovalSystem = "NTCS";
  AveragePrice = averageOf(trades :* "price");
  BalanceCustom = ;
  BidPriceBGN = ;
  BidPriceBVAL = ;
  BidPriceEXCH = ;
  BIDSourceBGN = ;
  BookValueIDR = py("Total_Trade", context).calculate_bookvalueidr(object.Trades);
  BUC = 1;
  BuyAmountCustom = sumOf((object.Children) :* "BuyAmountCustom");
  BuyAmountCustom2 = sumOf((object.Children) :* "BuyAmountCustom2");
  CCS = ;
  ClassificationofSecurities = ;
  Coupon_SB_Dimiliki = ;
  CPMainCcy = ;
  CPMoneyCcy = ;
  CrEquivalent1DayChange = ;
  CrEquivalentLimit = ;
  CrEquivalentPercentageUtilization = ;
  CrEquivalentUtilization = ;
  CS01 = ;
  DayChangeDelta = priceDeltaCash - scenarioaxis(priceDeltaCash, <["valuationBaseDateTime"], , , dateToday() + 1>);
  DayChangeDeltaIR = interestRateDelta - scenarioaxis(interestRateDelta, <["valuationBaseDateTime"], , , dateToday() + 1>);
  DayChangeGamma = priceGammaInstrument - scenarioaxis(priceGammaInstrument, <["valuationDate"], , , [[dateToday() + 1]]>);
  DayChangeGammaCash = priceGammaCash - scenarioaxis(priceGammaCash, <["valuationDate"], , , [[dateToday() + 1]]>);
  DayChangeIRVaR = ;
  DayChangeLeftCurve = leftCurvatureShift - scenarioaxis(leftCurvatureShift, <["valuationDate"], , , [[dateToday() + 1]]>);
  DayChangeMarginalVaR = priceGammaInstrument - scenarioaxis(priceGammaInstrument, <["valuationDate"], , , [[dateToday() + 1]]>);
  DayChangeMarginalVAR = ;
  DayChangePV01 = interestRateDelta - scenarioaxis(interestRateDelta, <["valuationDate"], , , [[dateToday() + 1]]>);
  DayChangeRightCurve = rightCurvatureShift - scenarioaxis(rightCurvatureShift, <["valuationDate"], , , [[dateToday() + 1]]>);
  DayChangeVega = vega - scenarioaxis(vega, <["valuationDate"], , , [[dateToday() + 1]]>);
  DayChangeVegaIR = vegaInstrument - scenarioaxis(vegaInstrument, <["valuationDate"], , , [[dateToday() + 1]]>);
  DaysDelay = ;
  DeltaCheck = ;
  DeltaThresholdValue = py("Python_Custom_Fields", context).port_threshold_limit(object.Portfolio, "Portfolio Delta Cash", "Exposure", "Pre-Deal", 1);
  DeltaUtilizationPercentage = py("Python_Custom_Fields", context).port_utilization_percentage(object.Portfolio, "Portfolio Delta Cash", "Exposure", "Pre-Deal", 1);
  Difference = 1;
  Difference_EndCash = ;
  Difference_EndCashDisplay = ;
  EquivalentAmountIDR_Yesterday = sumOf(children :* "EquivalentAmountIDR_Yesterday");
  EquivalentAmountUSDTradeTime = sumOf((object.Trades.AsArray) :* "EquivalentAmountUSDTradeTime");
  FaceAmount = py("Total_Trade", context).sum_FaceValue(object.Trades);
  FarAmount = select(object.Portfolio.Name, 
  "LIQ16 - Interest Rate Swap Settlement"->nil, 
  default->sumOf((object.Trades) :* "FarAmountEndCash"));
  FarAmount1 = sumOf(children :* "FarAmount1");
  FarAmount2 = sumOf(children :* "FarAmount2");
  FeeIDR = 1;
  FrekuensiPenjualan_Yesterday = ;
  FTotal = py("Report_Python", context).sum_column(object.Trades);
  FTotal_Premium = py("Total_Trade", context).sum_column(object.Trades);
  FullYearAchievement = (py("Total_Trade", context).to_number(TargetYTD) - object.Portfolio.AdditionalInfo.Full_Year_Target) / 100;
  FXFW = ;
  GainOrLoss = ;
  GMRAIdentification = ;
  GrandTotal = BuyAmountCustom + SellAmountCustom;
  GroupID = ;
  HTM = sumOf(children :* "HTM");
  ID = ;
  Ins_Bond = ;
  Ins_Commodity = ;
  Ins_Curr = ;
  Ins_CurrSwap = ;
  Ins_Deposit = ;
  Ins_MM_IP = ;
  Ins_MM_IT = ;
  Ins_Option = ;
  Ins_Repo = ;
  Ins_Swap = ;
  InsBondPriceCollateral = sumOf(children :* "InsBondPriceCollateral");
  IRS = ;
  KursBeli = py("Total_Trade", context).sumkursbeli(object.Trades, ["KursBeli"]);
  KursJual = py("Total_Trade", context).sumkursjual(object.Trades, ["KursJual"]);
  LimitMO01 = ;
  LossLimitMonthly = py("Python_MO_Custom_Fields", context).get_compliance_rule_by_name("Limit Monthly Loss - Vania").Thresholds.First.Value;
  LossLimitYearly = py("Python_MO_Custom_Fields", context).get_compliance_rule_by_name("Limit Yearly Loss - Vania").Thresholds.First.Value;
  LowerPrice = ;
  LowerRate = ;
  MMDF = ;
  MMInterbankPlacement = ;
  MMInterbankTaken = ;
  MMLF = ;
  MoneyAmount = ;
  Month = ;
  Month_TradeTime = ;
  MonthlyLossLimitUse = sumOf(children :* "MonthlyLossLimitUse");
  MonthlyLossLimitUse2 = tPL;
  MonthNumber = ;
  MTD = ;
  NearAmount = py("Total_Trade", context).sum_NearAmount(object.Trades);
  NearAmount1 = sumOf(children :* "NearAmount1");
  NearAmount2 = sumOf(children :* "NearAmount2");
  NII = ;
  nisbahBagiHasil = ;
  NominalCustom = ;
  NomorIdentifikasi = 1;
  NOPLimit = py("Python_MO_Custom_Fields", context).get_compliance_rule_by_name("NOP Limit - UAT (Tito)").Thresholds.First.Value;
  NOPLimitUse = select(finalNOP2 <> nil, 
  true->string(floor(float(finalNOP2 / NOPLimit * 100))) + " %", 
  false->nil);
  NOPThresholdValue = py("Python_Custom_Fields", context).port_threshold_limit(object.Portfolio, "Final NOP Portfolio(PV)", "Exposure", "Compliance", 2);
  NOPUtilizationPercentage = py("Python_Custom_Fields", context).port_utilization_percentage(object.Portfolio, "Final NOP Portfolio(PV)", "Exposure", "Compliance", 2);
  Notional1DayChange = ;
  NotionalLimit = ;
  NotionalPercentageUtilization = ;
  NotionalUtilization = ;
  OneDayChange = 1;
  OneDayChange_IR = vegaInstrument - scenarioaxis(vegaInstrument, <["valuationDate"], , , [[dateToday() + 1]]>);
  OutstandingEqvUSD = ;
  Percentage_Yesterday = ;
  PercentageHolding = ;
  PercentageOfBuySell = nil;
  PercentageVolumeYesterday = ;
  PercentUtilization = nil;
  Period = 1;
  PnLMonth = thTPL * 30;
  PnLYearly = select(tPL >= 0, 
  true->tPL, 
  false->select(tPL < 0, 
    true->tPL, 
    false->0));
  PortLimit = py("MO_Column_Helpers", context).get_threshold_value_by_port(object.Portfolio);
  PortUtilPercent = py("MO_Column_Helpers", context).get_util_percent_by_port(object.Portfolio);
  PortUtilStatus = py("MO_Column_Helpers", context).get_appropriate_threshold_type_by_port(object.Portfolio);
  PositionEOD = py("Total_Trade", context).positionEOD;
  PrevEffDate = 1;
  PrevPrevEffDate = 1;
  PrevPrevPrice = 1;
  PrevPrice = 1;
  PV01Threshold = py("Python_MO_Custom_Fields", context).get_threshold_value_by_rule_name(object.Portfolio, "PV01_Treasury HO");
  PV01ThresholdValue = py("Python_MO_Custom_Fields", context).get_threshold_limit_by_rule_name(object.Portfolio, "PV01_Treasury HO");
  PV01UtilizationPercentage = py("Python_MO_Custom_Fields", context).trading_manager_utilization_percentage(object, "PV01_Treasury HO");
  PV01WatermarkValue = py("Python_MO_Custom_Fields", context).get_utilization_val_by_rule_name(object.Portfolio, "PV01_Treasury HO");
  Reff = object.Trade.Oid + "/" + object.Trade.Instrument.Name + "/" + object.Trade.OptKey3 + object.Trade.OptKey4;
  Reksadana = ;
  RemarkOutstanding = ;
  RemarkSellBuy = ;
  RepoBI = ;
  RepoInterbank = ;
  RevRepoBI = ;
  RiskWeight = ;
  RPL_Yesterday = py("Report_Python", context).sum_PL_yesterday(object.Trades, "RPL");
  RRevRepoInterbank = ;
  SACCR_RWA = sumOf((object.Children) :* "SACCR_RWA");
  SB_Dimiliki = ;
  SB_Terbit = ;
  SecuritiesRating = ;
  SecuritiesRatingInstituition = ;
  SellAmountCustom = sumOf((object.Children) :* "SellAmountCustom");
  SellAmountCustom2 = sumOf((object.Children) :* "SellAmountCustom2");
  StandardYearlyLossThresholdValue = py("Python_Custom_Fields", context).port_threshold_limit(object.Portfolio, "Portfolio Total Profit and Loss", "Exposure", "Pre-Deal", 0);
  StandardYearlyLossUtilizationPercentage = py("Python_Custom_Fields", context).port_utilization_percentage(object.Portfolio, "Portfolio Total Profit and Loss", "Exposure", "Pre-Deal", 0);
  StatusMatchUnmatch = ;
  SWAP = ;
  TargetFullYear = denominatedvalue(100000000, "IDR", , );
  TargetMonth = 0;
  TargetMonthPercent = (PnLMonth / TargetMonth) * 100;
  TargetMTD = denominatedvalue(100000000, "IDR", , );
  TargetMTDPercent = py("Total_Trade", context).targetmtdpercent(object);
  TargetMTDPL = py("Report_Python", context).get_Target_BN(object.Portfolio.Name, "PL", "MTD");
  TargetMTDVol = py("Report_Python", context).get_Target_BN(object.Portfolio.Name, "Vol", "MTD");
  TargetYear = 0;
  TargetYearPercent = (PnLYear / TargetYear) * 100;
  TargetYTD = py("Report_Python", context).get_Target(object);
  TargetYTDPercent = py("Total_Trade", context).targetytdpercent(object);
  TargetYTDPL = py("Report_Python", context).get_Target_BN(object.Portfolio.Name, "PL", "YTD");
  TargetYTDVol = py("Report_Python", context).get_Target_BN(object.Portfolio.Name, "Vol", "YTD");
  Term_Deposit = ;
  TermofPeriod = ;
  tingkatIndikasiImbalan = ;
  TodayPrice = ;
  Total_Cashflow = ;
  Total_coupon = ;
  Total_EndCashDisplay = ;
  TPL_Yesterday = py("Report_Python", context).sum_PL_yesterday(object.Trades, "TPL");
  trades = object.Trades;
  TRD = sumOf(children :* "TRD");
  UnderlyingThreshold = ;
  UPL_Yesterday = py("Report_Python", context).sum_PL_yesterday(object.Trades, "UPL");
  UpperPrice = ;
  UpperRate = ;
  Utilisasi = ;
  VarThresholdValue = py("Python_Custom_Fields", context).port_threshold_limit(object.Portfolio, "Portfolio Value at Risk From Scenario", "Exposure", "Periodic", 0);
  VarUtilizationPercentage = py("Python_Custom_Fields", context).port_utilization_percentage(object.Portfolio, "Portfolio Value at Risk From Scenario", "Exposure", "Periodic", 0);
  VolumeDaily = sumOf(children :* "VolumeDaily");
  VolumeMonthly = sumOf(children :* "VolumeMonthly");
  VolumeYearly = sumOf(children :* "VolumeYearly");
  VolumeYesterday = ;
  WeekNumber = ;
  Year = ;
  YearlyLossLimitUse = sumOf(children :* "YearlyLossLimitUse");
  YearlyLossLimitUse2 = select(tPL >= 0, 
  true->string(floor(float(tPL / LossLimitYearly * 100))) + " %", 
  false->select(tPL < 0, 
    true->string(floor(float(tPL / LossLimitYearly * 100))) + " %", 
    false->0));
  YTD = ;
  YTDAchievement = (py("Total_Trade", context).to_number(TargetYTD) - py("Total_Trade", context).PnLYearly(object.Portfolio)) / 100;
  YTDAndAccrued = sumOf(float(children :* "YTDAndAccrued"));
}

clx FRuleValue [FExtensionAttribute] {
  ruleValueUtilizationCustom = float(thresholdValue) - float(ruleValue);
  ruleValueUtilizationPercentCustom = float(ruleValue) / float(thresholdValue);
  thresholdValue = select(thresholdValueObj, 
  nil->0, 
  default->thresholdValueObj.Value);
  thresholdValueObj = getThresholdValue(object.AppliedRule, object);
}

clx FRuleValueHistory [FExtensionAttribute] {
  StatusExpiry = dateDifference(object.End, dateToday);
}

clx FSettlement [FExtensionAttribute] {
  ApprovalSystem = "NTCS";
  BalanceCustom = ClosingBalance + select(Keterangan, 
  nil->0, 
  default->Keterangan);
  ClosingBalance = py("Report_Python", context).closingBalanceSettlement(object);
  CounterpartyCustom = object.CorrespondentBankName + " " + object.CounterpartyAccName;
  CurrBuyAudit = py("Report_Python", context).GetCurrJournal(object, true);
  DatesPosition = py("Total_Trade", context).positionEOD(false);
  DiaryText = py("Report_Python", context).getDiaryText(object.Settlement);
  DRCRIND = select(settlementAmount > 0, 
  true->"DR", 
  false->"CR");
  EquivalentAmountIDR = select(object.Currency.Name == "IDR", 
  true->object.Amount, 
  false->py("Report_Python", context).SettlementAmount(object.Currency.Name, object.Amount));
  EquivalentAmountIDRnotAbs = select(object.Currency.Name == "IDR", 
  true->object.Amount, 
  false->py("Report_Python", context).SettlementAmount(object.Currency.Name, object.Amount));
  Frequency = 1;
  Keterangan = "";
  PositionEOD = py("Total_Trade", context).positionEOD;
  status_mt950 = select(object.Status == "Closed", 
  true->"Match", 
  false->"Unmatch");
  Total_coupon = object.Amount;
  trade = object.Trade;
  TradeTimeDateOnly = asDate(object.Trade.TradeTime);
}

clx FSettlementMultiItem [FExtensionAttribute] {
  Frequency = object.Settlements.Size;
  PositionEOD = py("Total_Trade", context).positionEOD;
}

clx FSingleInstrumentAndTrades [FExtensionAttribute] {
  AFS = sumOf((object.Trades) :* "AFS");
  AveragePrice = averageOf(trades :* "price");
  AverageYield = abs(averagePriceYieldToMaturity) * 100;
  BIDHighestHierarchy = select(BIDSourceBGN, 
  default->"BGN", 
  nil->select(BIDSourceEXCH, 
    default->"EXCH", 
    nil->select(BIDSourceBVAL, 
      default->"BVAL", 
      nil->select(BIDSourceIBPA, 
        default->"IBPA", 
        nil->select(BIDSourceBIS4, 
          default->"BIS4", 
          nil->select(BIDSourceMarkToModel, 
            default->"Mark To Model", 
            nil->select(BIDSourceNAV, 
              default->"NAV", 
              nil->nil)))))));
  BIDSourceBGN = py("Report_Python", context).bid(object, "BB_BGN");
  BIDSourceBIS4 = py("Report_Python", context).bid(object, "BI-SSSS");
  BIDSourceBVAL = py("Report_Python", context).bid(object, "BB_BVAL");
  BIDSourceEXCH = py("Report_Python", context).bid(object, "BB_EXCH");
  BIDSourceIBPA = py("Report_Python", context).bid(object, "BB_IBPA");
  BIDSourceMarkToModel = py("Report_Python", context).bid(object, "Mark To Model");
  BIDSourceNAV = py("Report_Python", context).bid(object, "NAV");
  CurrencyMTMSB = object.Trades.AsArray.First.Currency.Name;
  DayChangeDelta = priceDeltaCash - scenarioaxis(priceDeltaCash, <["valuationBaseDateTime"], , , dateToday() + 1>);
  DayChangeDeltaIR = interestRateDelta - scenarioaxis(interestRateDelta, <["valuationBaseDateTime"], , , dateToday() + 1>);
  EightDayExpiry = py("Report_Python", context).get_expiry(object.Instrument.ExpiryDateOnly, "8", object.Instrument.Trades.AsList);
  EquivalentAmountIDR_Yesterday = profitAndLossPositionDisplay.Value.Number * py("Report_Python", context).idr_price_mtm_curr(object.Instrument.Currency.Name);
  EquivalentAmountUSDTradeTime = sumOf((object.Trades) :* "EquivalentAmountUSDTradeTime");
  FiveDayExpiry = py("Report_Python", context).get_expiry(object.Instrument.ExpiryDateOnly, "5", object.Instrument.Trades.AsList);
  FourDayExpiry = py("Report_Python", context).get_expiry(object.Instrument.ExpiryDateOnly, "4", object.Instrument.Trades.AsList);
  HTM = sumOf((object.Trades) :* "HTM");
  InsBondPrice = py("Report_Python", context).getBondPrice(object.Instrument.Name);
  Limit_FX = py("Python_MO_Custom_Fields", context).get_compliance_rule_by_name("Limit FX Delta - Vania").Thresholds.First.Value;
  Limit_IR = py("Python_MO_Custom_Fields", context).get_compliance_rule_by_name("Limit IR Delta - Vania").Thresholds.First.Value;
  LimitCountryTarget = object.Trades.AsArray.First.AdditionalInfo.LimitPartyTarget.RiskCountry;
  LimitMO10 = select(object.Instrument.Currency.Name, 
  "IDR"->py("Python_MO_Custom_Fields", context).get_compliance_rule_by_name("Bond Cut Loss Limit IDR - Vania").Thresholds.First.Value, 
  "USD"->py("Python_MO_Custom_Fields", context).get_compliance_rule_by_name("Bond Cut Loss Limit USD - Vania").Thresholds.First.Value);
  LimitPortfolioTarget = object.Trades.AsArray.First.Portfolio;
  LimitPtyTarget = object.Trades.AsArray.First.AdditionalInfo.LimitPartyTarget;
  LimitPtyTarget_GrpId = object.Trades.AsArray.First.AdditionalInfo.LimitPartyTarget.Id;
  LossLimitMonthly = py("Python_MO_Custom_Fields", context).get_compliance_rule_by_name("Limit Monthly Loss - Vania").Thresholds.First.Value;
  LossLimitYearly = py("Python_MO_Custom_Fields", context).get_compliance_rule_by_name("Limit Yearly Loss - Vania").Thresholds.First.Value;
  LowerPrice = py("Report_Python", context).lower_price_yesterday(object.Instrument.Name);
  MonthlyLossLimitUse = py("Total_Trade", context).monthlylosslimituse(object);
  MonthlyLossLimitUse2 = tPL;
  NineDayExpiry = py("Report_Python", context).get_expiry(object.Instrument.ExpiryDateOnly, "9", object.Instrument.Trades.AsList);
  NOPLimit = py("Python_MO_Custom_Fields", context).get_compliance_rule_by_name("NOP Limit - UAT (Tito)").Thresholds.First.Value;
  OneDayExpiry = py("Report_Python", context).get_expiry(object.Instrument.ExpiryDateOnly, "1", object.Instrument.Trades.AsList);
  Pemeringkat = pemeringkat_dan_peringkat.At(0);
  pemeringkat_dan_peringkat = py("Report_Python", context).pemeringkat_dan_peringkat(object.Instrument);
  PercentageDeltaFX = abs(UtilisasiDeltaFX / Limit_FX * 100);
  PercentageDeltaIR = abs(UtilisasiDeltaIR / Limit_IR * 100);
  PercentageStatusFXClr = select(PercentageDeltaFX > 85, 
  true->1, 
  false->2);
  PercentageStatusIRClr = select(PercentageDeltaIR > 85, 
  true->1, 
  false->2);
  PercentUtilization = string((cutLossRatio / LimitMO10) * 100) + "%";
  Peringkat = pemeringkat_dan_peringkat.At(1);
  PnLYear = select(tPL <> nil, 
  true->tPL, 
  false->0);
  PnLYearly = select(tPL >= 0, 
  true->tPL, 
  false->select(tPL < 0, 
    true->tPL, 
    false->0));
  PortLimit = py("Python_MO_Custom_Fields", context).get_compliance_rule_by_name("VaR_FXT2").Thresholds.First.Value;
  Position1To3Y = py("Report_Python", context).get_Position(object.Instrument.EndDate, object.Trades.AsList, "1-3Y");
  Position3To4Y = py("Report_Python", context).get_Position(object.Instrument.EndDate, object.Trades.AsList, "3-4Y");
  Position4To5Y = py("Report_Python", context).get_Position(object.Instrument.EndDate, object.Trades.AsList, "4-5Y");
  Position5To10Y = py("Report_Python", context).get_Position(object.Instrument.EndDate, object.Trades.AsList, "5-10Y");
  PositionHigh10Y = py("Report_Python", context).get_Position(object.Instrument.ExpiryDateOnly, object.Trades.AsList, ">10Y");
  PositionLow1Y = py("Report_Python", context).get_Position(object.Instrument.EndDate, object.Trades.AsList, "<1Y");
  RiskWeight = ;
  SACCR_RWA = ;
  SevenDayExpiry = py("Report_Python", context).get_expiry(object.Instrument.ExpiryDateOnly, "7", object.Instrument.Trades.AsList);
  SixDayExpiry = py("Report_Python", context).get_expiry(object.Instrument.ExpiryDateOnly, "6", object.Instrument.Trades.AsList);
  Status_Utilization_FX = py("Python_MO_Custom_Fields", context).is_violated_MO10_new(object.Trades, "Limit FX Delta - Vania");
  Status_Utilization_IR = py("Python_MO_Custom_Fields", context).is_violated_MO10_new(object.Trades, "Limit IR Delta - Vania");
  StatusBondCutLossClr = select(object.Instrument.Currency.Name == "IDR", 
  true->py("Python_MO_Custom_Fields", context).is_violated_MO10_new(object.Trades, "Limit Yearly Loss - Vania", false), 
  false->py("Python_MO_Custom_Fields", context).is_violated_MO10_new(object.Trades, "Limit Yearly Loss - Vania", false));
  StatusBondCutLossStr = select(object.Instrument.Currency.Name == "IDR", 
  true->py("Python_MO_Custom_Fields", context).is_violated_MO10_new(object.Trades, "Limit Yearly Loss - Vania"), 
  false->py("Python_MO_Custom_Fields", context).is_violated_MO10_new(object.Trades, "Limit Yearly Loss - Vania"));
  StatusDeltaFXClr = py("Python_MO_Custom_Fields", context).is_violated_MO10_new(object.Trades, "Limit FX Delta - Vania", false);
  StatusDeltaFXStr = select(PercentageDeltaFX > 85, 
  true->"bcg_red", 
  false->"bcg_green");
  StatusDeltaIRClr = py("Python_MO_Custom_Fields", context).is_violated_MO10_new(object.Trades, "Limit IR Delta - Vania", false);
  StatusDeltaIRStr = select(PercentageDeltaIR > 85, 
  true->"bcg_red", 
  false->"bcg_green");
  STDEV = select(UpperPrice > 0, 
  ""->"", 
  default->int(markToMarketPrice.Value.Number) - int(UpperPrice));
  TenDayExpiry = py("Report_Python", context).get_expiry(object.Instrument.ExpiryDateOnly, "10", object.Instrument.Trades.AsList);
  Tenor = dateDifference(object.Instrument.EndDate, object.Instrument.StartDate);
  ThreeDayExpiry = py("Report_Python", context).get_expiry(object.Instrument.ExpiryDateOnly, "3", object.Instrument.Trades.AsList);
  Total = sumOf((object.Trades) :* "Total");
  trades = object.Trades;
  TRD = sumOf((object.Trades) :* "TRD");
  TwoDayExpiry = py("Report_Python", context).get_expiry(object.Instrument.ExpiryDateOnly, "2", object.Instrument.Trades.AsList);
  UpperPrice = py("Report_Python", context).upper_price_yesterday(object.Instrument.Name);
  UpperRate = select(object.Trade.Currency.Prices.Size > 0, 
  true->py("Report_Python", context).price(object.Trade).High, 
  false->nil);
  UtilisasiDeltaFX = py("Python_MO_Custom_Fields", context).UtilisasiDelta(object, "FX");
  UtilisasiDeltaIR = py("Python_MO_Custom_Fields", context).UtilisasiDelta(object, "IR");
  Utilization_FX = string((interestRateDelta / Limit_FX) * 100) + "%";
  Utilization_IR = string((interestRateDelta / Limit_IR) * 100) + "%";
  UtilizationBond = (mtmPriceSuggest.Number / weightedAverageLife) - 1;
  UtilizationStatus = select(object.Instrument.Trades.First.Currency.Name, 
  "IDR"->py("Python_MO_Custom_Fields", context).is_violated_MO10(object, "Bond Cut Loss Limit IDR - Vania", 0, UtilizationBond), 
  "USD"->py("Python_MO_Custom_Fields", context).is_violated_MO10(object, "Bond Cut Loss Limit USD - Vania", 0, UtilizationBond));
  VolumeDaily = py("Report_Python", context).get_Volume_Range(object.Trades.AsList, "D");
  VolumeMonthly = py("Report_Python", context).get_Volume_Range(object.Trades.AsList, "M");
  VolumeYearly = py("Report_Python", context).get_Volume_Range(object.Trades.AsList, "Y");
  YearlyLossLimitUse = py("Total_Trade", context).yearlylosslimituse(object);
  YearlyLossLimitUse2 = select(tPL >= 0, 
  true->string(floor(float(tPL / LossLimitYearly * 100))) + " %", 
  false->select(tPL < 0, 
    true->string(floor(float(tPL / LossLimitYearly * 100))) + " %", 
    false->0));
  yieldValueCustom = sumOf((object.Trades) :* "yieldValueCustom");
}

clx FTrade [FExtensionAttribute] {
  AFS = select(object.Trade.Portfolio.TypeChlItem.Name == "FVOCI", 
  true->object.Trade.Nominal, 
  false->0.0);
  CollateralType = 1;
  DerivativesPayables = 0;
  dictPaymentTypeAmount = createDictionary(paymentTypeArray, paymentAmountArray);
  dictPaymentTypeCurrency = createDictionary(paymentTypeArray, paymentCurrencyArray);
  FarAmountEndCash = select(object.IsFxSwapFarLeg, 
  true->0, 
  false->object.EndCash);
  FarAmountPremium1 = select(object.IsFxSwapNearLeg, 
  true->object.Quantity, 
  false->0);
  FarAmountPremium2 = select(object.IsFxSwapFarLeg, 
  true->object.Premium, 
  false->0);
  HTM = select(object.Trade.Portfolio.TypeChlItem.Name == "Amortised Cost", 
  true->object.Trade.Nominal, 
  false->0.0);
  interestRateAtTradeTime = instrument :* "interestRateAtTradeTime" [valuationBaseDateTimeInput = object.TradeTime, valueDay = object.ValueDay, fxToCurrency = currency];
  Movement = 0;
  NearAmountQuantity1 = select(object.IsFxSwapNearLeg, 
  true->object.Quantity, 
  false->0);
  NearAmountQuantity2 = select(object.IsFxSwapFarLeg, 
  true->object.Quantity, 
  false->0);
  Payment = object.Trade.Payments;
  paymentAmountArray = Payment :* "paymentAmount";
  paymentCurrencyArray = Payment :* "paymentCurrency";
  paymentTypeArray = string(Payment :* "paymentType");
  PnLMonth = ;
  price = object.Trade.Price;
  Reff = object.Trade.Oid + "/" + object.Trade.Instrument.Name + "/" + object.Trade.OptKey3 + object.Trade.OptKey4;
  TargetMonth = ;
  TargetMonthPercent = (PnLMonth / TargetMonth) * 100;
  TargetYear = ;
  Total = HTM + AFS + TRD;
  TradeNumberInstrument = object.Trade.Oid + "_" + object.Trade.Instrument.Name;
  TRD = select(object.Trade.Portfolio.TypeChlItem.Name == "FVTPL", 
  true->object.Trade.Nominal, 
  false->0.0);
  variabelMendasari = select(object.Trade.OptKey3AsEnum, 
  "SWAP"->select(object.Trade.OptKey4AsEnum, 
    "CCS"->"Ci", 
    "IRS"->"i", 
    "OIS"->"i"), 
  "SP"->select(object.Trade.OptKey4AsEnum, 
    "MCS"->"C"), 
  "BOND"->select(object.Trade.OptKey4AsEnum, 
    "FWD"->"C", 
    default->"x"));
  VolumeDaily = ;
  VolumeMonthly = ;
  VolumeYearly = ;
  WHT = dictPaymentTypeAmount.At("WHT");
  WHTCurrency = dictPaymentTypeCurrency.At("WHT");
  yieldValueCustom = py("Report_Python", context).getYieldVal(object.Trade);
}

clx FTradeRow [FExtensionAttribute] {
  absNominal = abs(object.Trade.Nominal);
  AbsNominal = abs(object.Trade.Nominal);
  ACCINT = ;
  AccountID = py("Total_Trade", context).accountid(object.Trade, ["Trade Number", "Bought or Sold", "Call or Put"]);
  ACCROUTSTAMT = select(object.Trade.BoughtAsString, 
  "Buy"->object.Trade.Oid);
  AccruedInterestValue = py("Report_Python", context).get_AccruedInterest(object.Trade);
  AccruedOutstanding = "summ";
  ACCTTYPE = string(object.Trade.OptKey3AsEnum) + "/" + string(object.Trade.OptKey4AsEnum);
  AccumulativeOrPerTransaction = select(object.Trade.BoughtAsString, 
  "Buy"->"ACCUMULATIVE", 
  "Sell"->"PER TRANSACTION");
  AcquisitionIDR = ;
  AcquisitionPricePercent = notANumberIsZero(rPLColumn / tPL * 100);
  AcquisitionRecord = dictPaymentTypeAmount.At("Acq. Price and Date Record");
  AFS = select(object.Trade.Portfolio.TypeChlItem.Name == "FVOCI", 
  true->object.Trade.Nominal, 
  false->0.0);
  AgreedSellingPrice = ;
  AIP = ;
  AL = select(object.Trade.OptKey4, 
  "CMP"->"A", 
  "CMT"->"L");
  allcurrencies = select(object.Trade.OptKey3AsEnum, 
  "SP"->select(object.Trade.OptKey4AsEnum, 
    "MDS"->"F030299", 
    "MCS"->"F03060301", 
    "MPF"->"F030299", 
    "MDCI"->"F03060399", 
    "MMLD"->"F030503"), 
  "FX"->select(object.Trade.OptKey4AsEnum, 
    "TOD"->"F030101", 
    "SPOT"->"F030103", 
    "TOM"->"F030102", 
    "NS"->"F030201", 
    "SWAP"->"F0303", 
    "FWD"->"F030299", 
    "OPT"->select(object.Instrument.OptionType, 
      "Put"->"F030501", 
      "Call"->"F030502")), 
  "SWAP"->select(object.Trade.OptKey4AsEnum, 
    "CCS"->"F03060101", 
    "IRS"->"F0306020101", 
    "OIS"->"F0306020102"), 
  "BOND"->select(object.Trade.OptKey4AsEnum, 
    "FWD"->"F0306020299"), 
  default->"");
  AllInRate = int(fixedRate);
  AllInRate2 = averageOf(legs :* "fixedRateCustom");
  AllowanceForLosses = object.Trade.StartCash * 0.01;
  Amendment = ;
  AmendmentDate = py("Report_Python", context).AmendmentDate(object.Trade.LastUpdateTime);
  AmortisasiPrice = string(abs(BookValueDeprec / object.Trade.FaceValue * 100));
  Amortized = (object.Trade.Premium - object.Trade.Nominal) / dateDifference(object.Instrument.EndDate, dateToday);
  Amortized010203 = 1000000;
  Amortized2004 = 1000000;
  AmortizedDiscPrem = py("CalculateAmortizedPythonCode", context).get_amortized_value(object.Trade);
  Amount_AllMM = select(object.Trade.OptKey3AsEnum, 
  "BOND"->object.Trade.Premium, 
  "SBI"->object.Trade.Premium, 
  "TD"->object.Trade.Premium, 
  "BONDSREPO"->py("Report_Python", context).get_Repo_Amount(object.Trade), 
  "DL"->object.Trade.EndCash, 
  "REPO"->object.Trade.FaceValue + py("Report_Python", context).get_cashflow_proj_interest_amt(object.Trade), 
  "REVREPO"->object.Trade.FaceValue + py("Report_Python", context).get_cashflow_proj_interest_amt(object.Trade));
  AMOUNT2_CUSTOM = select(object.Trade.OptKey3AsEnum, 
  "BOND"->object.Trade.ForwardPremium, 
  "REPO"->py("BOa10UtilPythonCode", context).get_endCash(object.Trade), 
  "REVREPO"->"-", 
  "DL"->object.Trade.EndCash, 
  "FX"->select(object.Trade.OptKey4AsEnum, 
    "SWAP"->object.Trade.ConnectedTrade.Premium, 
    "OPT"->(object.Trade.FaceValue * object.Instrument.StrikePrice), 
    default->object.Trade.ForwardPremium), 
  "SWAP"->object.Trade.FaceValue * object.Instrument.RecLeg.NominalFactor);
  AmountAccumulativePerMonth = ;
  AmountBuyAudit = py("Report_Python", context).getAuditConfirmationVal(trade, true, false);
  AmountClosing = py("Report_Python", context).calculate_amount_closing(object.Trade, false);
  AmountClosingYesterday = py("Report_Python", context).calculate_amount_closing(object.Trade, true);
  AmountInIDRBonds = select(object.Trade.Currency.Name, 
  "IDR"->object.Trade.Nominal, 
  default->py("Report_Python", context).idr_price_mtm_yesterday(object.Trade) * object.Trade.Nominal);
  AmountofUnderlying = ;
  AmountSellAudit = py("Report_Python", context).getAuditConfirmationVal(trade, false, false);
  AmountToFund = float(object.Trade.Nominal) + float(accrued);
  ApprovalSystem = "NTCS";
  ARGNO = select(object.Trade.Nominal > 0, 
  true->"1", 
  false->"2");
  AskValue = py("Report_Python", context).get_price_info(object.Trade, "ask");
  ASSETID = ;
  AtributText = ;
  AveragePrice = object.Trade.Price;
  BalanceCustom = ;
  BaseCurrCR = ;
  BaseCurrDR = ;
  baseRateSpotPrice = select(object.Trade.OptKey3AsEnum, 
  "SP"->select(object.Trade.OptKey4AsEnum, 
    "MDS"->object.Trade.Price, 
    "MPF"->object.Trade.Price), 
  "FX"->select(object.Trade.OptKey4AsEnum, 
    "FWD"->object.Trade.Price));
  BebanBunga = ((EquivalentAmountIDR * object.Instrument.FirstLeg.FirstRate) * (IDays / 360)) / 100;
  BeginningBalance = ;
  BEIND = select(object.Trade.Currency, 
  "IDR"->0);
  Beneficiary = ;
  BidPriceBGN = ;
  BidPriceBVAL = ;
  BidPriceEXCH = ;
  BIDSourceBGN = ;
  BidValue = py("Report_Python", context).get_price_info(object.Trade, "bid");
  BIS4 = ;
  blank = ;
  Blank1 = ;
  Blank2 = ;
  BookFilter = ;
  BookValueDeprec = abs(originalCost) - abs(deprecRPLColumn.Value.Number);
  BookValueIDR = object.Trade.Price * bookValue;
  BorrowerCode = ;
  BorrowerName = ;
  BR_PartyType = select(object.Trade.Counterparty.Type == "Internal", 
  true->"BR99", 
  false->"BR01");
  BranchCode = "99120";
  BreachTenor = ;
  BrokerFeeIDR = py("Report_Python", context).brokerfee(object.Trade, "IDR");
  BrokerFeeUSD = py("Report_Python", context).brokerfee(object.Trade, "USD");
  BRPRCINDTE = asDate(object.Trade.CreateTime);
  BUC = ;
  BuyAmountCustom = select(object.Trade.BoughtAsString, 
  "Buy"->object.Trade.Nominal, 
  default->0) / 1000000;
  BuyAmountCustom2 = select(object.Trade.BoughtAsString, 
  "Buy"->object.Trade.Nominal, 
  default->0);
  BuyerOrSeller = select(object.Trade.BoughtAsString, 
  "Buy"->select(object.Trade.OptKey3AsEnum, 
    "DL"->"LN", 
    default->"BY"), 
  "Sell"->select(object.Trade.OptKey3AsEnum, 
    "DL"->"BR", 
    default->"SL"));
  CancelOrAmendDate = ;
  CapitalGain = (object.Trade.FaceValue * object.Trade.Price / 100) - object.Trade.AllInPrice;
  CapitalGainTax = ;
  CashflowFA = StartAccrualFA - EndAccrualFA;
  CashY = ;
  CAT = ;
  CCS = ;
  CCYRate = ;
  CCYSACCT = py("Report_Python", context).trd_acc(object.Trade, tradeCurr1);
  CFCITZ = ;
  CFCOUN = ;
  CFRESD = ;
  Checker = ;
  ClassificationofSecurities = ;
  closedLots = py("Report_Python", context).closedLots(object);
  Code = ;
  CODE = select(object.Trade.Nominal > 0, 
  true->"3350", 
  false->"3335");
  CodeDesc = ;
  Collateral = py("Report_Python", context).get_Collateral_Instrument(object.Trade);
  CollateralAmount = py("Report_Python", context).get_Collateral_Amounts(object.Trade);
  CollateralCurrency = ;
  CollateralDueDate = ;
  CollateralIssuer = select(object.Trade.OptKey3AsEnum, 
  "REVREPO"->py("Report_Python", context).get_Collateral_Instrument_Issuer(object.Trade), 
  "REPO"->py("Report_Python", context).get_Collateral_Instrument_Issuer(object.Trade), 
  "BOND"->object.Instrument.Issuer);
  CollateralStatus = select(object.Trade.TrxTrade <> nil, 
  true->select(object.Trade.TrxTrade.AdditionalInfo.EMASHoldAmount == nil, 
    true->select(object.Trade.TrxTrade.AdditionalInfo.EMASHoldAmountSeqNo == nil, 
      true->select(object.Trade.TrxTrade.AdditionalInfo.EMASHoldAmountSeqNo == nil, 
        true->"Unhold", 
        false->"Hold"), 
      false->"Hold"), 
    false->"Hold"), 
  false->"Unhold");
  CollateralType = select(object.Trade.AdditionalInfo.Jaminan_Tunai, 
  true->"Jaminan Tunai");
  CollateralYield = py("Report_Python", context).get_Collateral_Yield(object.Trade);
  COMIDB = ;
  COMIDC = ;
  Commission = dictPaymentTypeAmount.At("Commission");
  COMMPROCAMT = ;
  Conclusion = ;
  Conclusion2 = ;
  ContractValNetAgree = py("Report_Python", context).HedgeTrade(object.Trade, true, true);
  CorpSpreadAmount = (legs :* "floatSpread").At(0) * longFormAttrExchangeRate;
  CounterAmount = object.Trade.Premium;
  CounterpartyCountryIND = select(object.Trade.Counterparty.Country, 
  "Indonesia"->2, 
  default->1);
  CounterpartyType = select(object.Trade.Counterparty.Swift, 
  "BMRIGB2L"->"Subsidiary", 
  default->"Third Party");
  CountryLimit = ;
  Coupon_SB_Dimiliki = ;
  CPMainCcy = py("Total_Trade", context).cpmainccy(object.Trade, ["Call or Put"]);
  CPMoneyCcy = py("Total_Trade", context).cpmoneyccy(object.Trade, ["Call or Put"]);
  CreateDate = ;
  CreditAmount = ;
  CrEquivalent1DayChange = ;
  CrEquivalentLimit = ;
  CrEquivalentPercentageUtilization = ;
  CrEquivalentUtilization = ;
  CrossRateBM = py("Report_Python", context).get_cross_rate(object.CurrencyPair.Currency1.Name, object.Trade.TradeTimeDateOnly);
  crttime_adj = py("Report_Python", context).reformat_fulldate(object.Trade.CreateTime);
  CS01 = ;
  CTRSACCT = py("Report_Python", context).trd_acc(object.Trade, tradeCurr2);
  CurrAgainstSGD = ;
  CurrAgainstUSD = ;
  CurrBuyAudit = py("Report_Python", context).getAuditConfirmationVal(trade, true);
  CurrencyCR = ;
  CurrencyDR = ;
  CurrencyUpdateDate = ;
  CurrSellAudit = py("Report_Python", context).getAuditConfirmationVal(trade, false);
  CustomerCategory = ;
  CustomerName = ;
  DailyInterest = select(DaysToMaturity < 0, 
  true->0, 
  false->object.Trade.FaceValue * trade:interestRateAtTradeTime / 100 / 360);
  DataType = select(object.Trade.BoughtAsString, 
  "Buy"->nil, 
  "Sell"->2);
  DateNow = ;
  DateRange = ;
  DaysDelay = int(date(longFormAttrSettlementDate) - date(object.Trade.Trade.TradeTimeDateOnly));
  DaysToMaturity = dateDifference(endDate, dateToday());
  DayToExpired = int(dateDifference(endDate, startDate) - 30 * MonthToExpired);
  DCIND = select(object.Trade.Nominal > 0, 
  true->"D", 
  false->"C");
  DebitAmount = ;
  Delta_ExchangeRate = ;
  DeltaCheck = py("Total_Trade", context).deltacheck(object.Trade, ["Portfolio Rho"]);
  DeltaThresholdValue = py("Python_Custom_Fields", context).port_threshold_limit(object.Portfolio, "Portfolio Delta Cash", "Exposure", "Pre-Deal", 1);
  DeltaUtilizationPercentage = py("Python_Custom_Fields", context).port_utilization_percentage(object.Portfolio, "Portfolio Delta Cash", "Exposure", "Pre-Deal", 1);
  DENOM = 1.0;
  Dept = ;
  DerivativesPayables = py("Report_Python", context).getJournalAmountTrade(object.Trade, "Credit");
  DerivativesReceivables = py("Report_Python", context).getJournalAmountTrade(object.Trade, "Debit");
  Desc = "BUNGA PINJAMAN LAINNYA DITM LAINNYA";
  Descr = "BUNGA PINJAMAN LAINNYA DITM LAINNYA";
  Descr_PBC = "DL" + object.Trade.Oid + "/" + object.Trade.OptKey3AsEnum + "/" + object.Trade.OptKey4AsEnum;
  DescriptionUnderlying = ;
  DescUnd = py("Report_Python", context).get_Underlying_desc(object.Trade.AdditionalInfo.UnderlyingMatDate, AccumulativeOrPerTransaction);
  Diff1 = ;
  Diff2 = ;
  Difference = select(object.Trade.Premium - tradeFXAttrFarSellAmount == nil, 
  true->object.Trade.Premium, 
  false->object.Trade.Premium - tradeFXAttrFarSellAmount);
  Difference_EndCash = ;
  DiffRate = ;
  DiffRate100 = ;
  DiscountAmount = object.Trade.Premium - object.Trade.FaceValue;
  DRCRIND = select(object.Trade.Nominal > 0, 
  true->"DR", 
  false->"CR");
  EffectiveDateDP = select(object.Trade.OptKey3AsEnum, 
  "SP"->select(object.Trade.OptKey4AsEnum, 
    "MMLD"->object.Trade.LongFormGetSettlementDate, 
    "MDS"->"", 
    "MDCI"->object.Trade.LongFormGetSettlementDate));
  eFx = ;
  EightDayExpiry = py("Report_Python", context).get_expiry(object.Instrument.EndDate, "8");
  EMAS = ;
  EndAccrualFA = py("Report_Python", context).EndAccrual(object.Trade);
  EndCashIdr = py("Report_Python", context).EndCashIdr(object.Trade);
  EndCashRepo = select(object.Trade.OptKey3AsEnum, 
  "REPO"->object.Trade.FaceValue + py("Report_Python", context).get_cashflow_proj_interest_amt(object.Trade), 
  "REVREPO"->object.Trade.FaceValue + py("Report_Python", context).get_cashflow_proj_interest_amt(object.Trade), 
  "DL"->object.Trade.EndCash, 
  default->nil);
  EndCashRepoString = select(object.Trade.OptKey3AsEnum, 
  "REPO"->string(abs(object.Trade.FaceValue + py("Report_Python", context).get_cashflow_proj_interest_amt(object.Trade))), 
  "REVREPO"->string(abs(object.Trade.FaceValue + py("Report_Python", context).get_cashflow_proj_interest_amt(object.Trade))), 
  default->nil);
  enddate_adj = select(object.Instrument.Cid, 
  "Stock"->"-", 
  "Fx Rate"->"-", 
  "Option"->"-", 
  "Future/Forward"->"-", 
  default->py("Report_Python", context).reformat_date(object.Instrument.EndDate));
  EndDateBO17 = select(object.Trade.InstrumentSubType, 
  "Basket Repo/Reverse"->object.Instrument.EndDate, 
  "Collateral"->object.Trade.ReAcquireDay);
  EndDateCF = StartEndDateCF.At(1);
  EndDateRepo = select(object.Trade.InstrumentSubType, 
  "Basket Repo/Reverse"->object.Instrument.EndDate, 
  "Collateral"->object.Trade.ReAcquireDay);
  EndInterest = object.Trade.EndCash + object.Trade.StartCash;
  EndInterestRepo = py("Report_Python", context).get_cashflow_proj_interest_amt(object.Trade);
  EndValue = float(object.Trade.Nominal) + float(accruedOpenValueColumn);
  EndValueFA = py("Report_Python", context).EndValue(object.Trade);
  EquivalentAmountIDR = select(object.Trade.Currency, 
  "IDR"->abs(object.Trade.Nominal), 
  default->abs(object.Trade.Nominal * py("Report_Python", context).idr_price_mtm(object.Trade)));
  EquivalentAmountIDR_Yesterday = select(object.Trade.Currency, 
  "IDR"->abs(object.Trade.Nominal), 
  default->abs(object.Trade.Nominal * py("Report_Python", context).idr_price_mtm_yesterday(object.Trade)));
  EquivalentAmountIDRnotAbs = select(object.Trade.Currency, 
  "IDR"->(object.Trade.Nominal), 
  default->(object.Trade.Nominal * py("Report_Python", context).idr_price_mtm_today(object.Trade)));
  EquivalentAmountIDRTradeTime = py("Report_Python", context).get_Volume_IDR_trade_time(object.Trade);
  EquivalentAmountIDRValueDay = ExcRateValueDay * object.Trade.Nominal;
  EquivalentAmountUSD = py("Report_Python", context).get_Volume_USD(object.Trade);
  EquivalentAmountUSDTradeTime = select(object.CurrencyPair.Currency1.Name, 
  "USD"->abs(object.Trade.Nominal), 
  default->select(object.CurrencyPair.Currency2.Name, 
    "USD"->abs(object.Trade.Premium), 
    default->abs(object.Trade.Nominal * CrossRateBM)));
  EquivalentMarketIDR = object.Trade.Price * marketPeriodValue;
  ExchangeRateNTCS = ;
  ExcRate = py("Report_Python", context).idr_price_mtm(object.Trade);
  ExcRateTradeTime = py("Report_Python", context).idr_price_mtm_tradetime(object.Trade);
  ExcRateValueDay = py("Report_Python", context).idr_price_mtm_valueday(object.Trade);
  ExtractDate = ;
  ExtractFlag = ;
  FaceAmount = object.Trade.FaceValue;
  Facility = select(object.Trade.Portfolio.Name, 
  "ALM Bonds Issued"->select(object.Trade.OptKey3AsEnum, 
    "DEBT"->select(object.Trade.OptKey4AsEnum, 
      "BOND"->"Bond", 
      "ZCO"->"ZCO Bond", 
      "NCD"->"NCD - Bank", 
      "NCN"->"NCD - NonBank")), 
  "ALM Repo"->select(object.Trade.OptKey3AsEnum, 
    "REPO"->select(object.Trade.OptKey4AsEnum, 
      "IWFSBI"->"Repo", 
      "IWFGOV"->"Repo", 
      "IWFDIS"->"Repo", 
      "IWFNON"->"Repo", 
      "IWFOTH"->"Repo", 
      "CWFSBI"->"Cross Currency Repo", 
      "CWFGOV"->"Cross Currency Repo", 
      "CWFDIS"->"Cross Currency Repo", 
      "CWFNON"->"Cross Currency Repo", 
      "CWFOTH"->"Cross Currency Repo")), 
  "ALM Bilateral Loans"->select(object.Trade.OptKey3AsEnum, 
    "DL"->select(object.Trade.OptKey4AsEnum, 
      "CL"->"Cash Collateral", 
      "MD"->"Loan")), 
  default->"");
  FacilityCollateral = py("Report_Python", context).get_facility_collateral(object.Trade);
  FarAmount = select(object.Portfolio.Name, 
  "LIQ16 - Interest Rate Swap Settlement"->py("Report_Python", context).PVPayRec(object.Trade), 
  default->object.Trade.EndCash);
  FarAmount1 = select(object.Trade.IsFxSwapNearLeg, 
  true->object.Trade.Premium, 
  false->object.Trade.FxSwapNearLeg.Premium);
  FarAmount2 = select(object.Trade.IsFxSwapFarLeg, 
  true->object.Trade.Premium, 
  false->object.Trade.FxSwapFarLeg.Premium);
  FarNear = ;
  FBIThisYear = select(dateToYMD(object.Trade.ValueDay).At(0) == dateToYMD(dateToday()).At(0), 
  true->fees, 
  false->denominatedvalue(0.0, "IDR", , ));
  FBIYesteryear = select(dateToYMD(object.Trade.ValueDay).At(0) == dateToYMD(dateToday()).At(0) - 1, 
  true->fees, 
  false->denominatedvalue(0.0, "IDR", , ));
  FDQ = select(object.Trade.Counterparty <> nil, 
  true->select(object.Trade.Counterparty.Country, 
    "China"->"No FDQ", 
    default->select(Term, 
      "Short"->"Short Term FDQ", 
      "Long"->"Long Term FDQ")), 
  false->nil);
  FEECustody = abs(object.Trade.Nominal) * 20 / 10000;
  FeeIDR = object.Trade.Fee * longFormAttrExchangeRate;
  FITCHDataBloomberg = ;
  FITCHDataNTCS = ;
  FITCHHasilMatch = ;
  FITCHINDODataBloomberg = ;
  FITCHINDODataNTCS = ;
  FITCHINDOHasilMatch = ;
  FiveDayExpiry = py("Report_Python", context).get_expiry(object.Instrument.EndDate, "5");
  FixedRatePercentage = select(object.Trade.Instrument.Legs.Size > 0, 
  false->nil, 
  true->string(object.Trade.Instrument.MainLeg.FixedRate) + "%");
  FixingDate = py("Report_Python", context).fixingdate(object.Trade.Instrument);
  FLAG = select(abs(object.Journal.BaseAmount) >= 1000000000000.0, 
  true->"NOK", 
  false->"Y");
  FloatPriceReference = py("PriceReference", context).get_Price_Ref_Name(object.Trade);
  ForwardRate = ;
  FourDayExpiry = py("Report_Python", context).get_expiry(object.Instrument.EndDate, "4");
  FrekuensiPenjualan = ;
  FrekuensiPenjualan_Yesterday = ;
  Frequency = object.Trades.Size;
  FTotal = py("Report_Python", context).remove_bg(object.Trade.Premium);
  FTotal_Premium = py("Total_Trade", context).remove_bg(object.Trade.Premium);
  FVLevel = ;
  FWDRate = ;
  FXFW = ;
  GainOrLoss = py("Report_Python", context).GainorLoss(object.Trade);
  GLNO = select(object.Trade.Journals, 
  ""->"No Journal", 
  default->py("Report_Python", context).listofjournals(object.Trade.Journals.AsList));
  GMRAIdentification = object.Trade.MasterAgreement.Name;
  GrandTotal = ;
  GroupID = ;
  Haircut = py("Report_Python", context).get_Collateral_Haircut(object.Trade);
  hargaSuratBerharga = select(object.Trade.OptKey3AsEnum, 
  "REPO"->nil, 
  "REVREPO"->nil, 
  "BOND"->string(object.Trade.Price));
  HedgingFairValue = py("Report_Python", context).HedgeTrade(object.Trade, true, false);
  HedgingNotAmt = py("Report_Python", context).HedgeTradeStr(object.Trade, true);
  HoldingInterestAmount = 0;
  holdingPeriod = dateDifference(dateToday, object.Trade.TradeTime);
  HoldingPeriodESPT = dateDifference(TradeTimeDateOnly, object.Trade.AcquireDay);
  HTM = select(object.Trade.Portfolio.TypeChlItem.Name == "Amortised Cost", 
  true->object.Trade.Nominal, 
  false->0.0);
  IBPA = ;
  ID = "008000000";
  IDays = dateDifference(endDate, startDate);
  IdPembeli = select(object.Trade.BoughtAsString, 
  "Buy"->"008", 
  default->string(py("Report_Python", context).get_idPihakLawan(object.Trade.Counterparty.AdditionalInfo.LBUT_SANDI_BANK, object.Trade.Counterparty.Swift, object.Trade.Counterparty.HostId)));
  IdPenjual = select(object.Trade.BoughtAsString, 
  "Sell"->"008", 
  default->string(py("Report_Python", context).get_idPihakLawan(object.Trade.Counterparty.AdditionalInfo.LBUT_SANDI_BANK, object.Trade.Counterparty.Swift, object.Trade.Counterparty.HostId)));
  IdPihakLawan = string(py("Report_Python", context).get_idPihakLawan(object.Trade.Counterparty.AdditionalInfo.LBUT_SANDI_BANK, object.Trade.Counterparty.Swift, object.Trade.Counterparty.HostId));
  Indicator1 = 1;
  InitialCollateralPrice = py("Report_Python", context).get_Collateral_Trade_Price(object.Trade);
  InputDate = asDate(object.Trade.UpdateTime);
  InputTime = py("Report_Python", context).getTime(object.Trade.UpdateTime);
  Ins_Bond = ;
  Ins_Commodity = ;
  Ins_Curr = ;
  Ins_CurrSwap = ;
  Ins_Deposit = ;
  Ins_MM_IP = ;
  Ins_MM_IT = ;
  Ins_Option = ;
  Ins_Repo = ;
  Ins_Swap = ;
  InsBondPrice = select(py("Report_Python", context).getBondPrice(object.Trade.Instrument.Name), 
  0->0.0, 
  default->py("Report_Python", context).getBondPrice(object.Trade.Instrument.Name));
  InsBondPriceCollateral = select(py("Report_Python", context).get_Collateral(object.Trade, true) <> nil, 
  true->py("Report_Python", context).get_Collateral(object.Trade, true).Price, 
  false->0);
  InsExpiry_adj = py("Report_Python", context).reformat_fulldate2(object.Instrument.ExpiryDate);
  InsExpiry_adj2 = py("Report_Python", context).reformat_fulldate2(object.Instrument.ExpiryDate);
  IntCalcRule = "OFC";
  Interest_prime = select(interest, 
  default->interest, 
  nil->0.0, 
  0->0.0, 
  0.0->0.0);
  InterestAccrued = ;
  InterestAmount = ;
  InterestIncome = ;
  InterestIncomeTax = ;
  InterestPayment = ;
  InterestProceed = py("Total_Trade", context).interestproceed2(object.Trades);
  InterestRate_PORS = py("BOa08PythonCode", context).getRate(nominalAmountAccountingCCSCurrOne, object);
  InterestReceived = ;
  Internalizer = object.Trade.Price - object.Trade.SalesMargin;
  InterofficeLongTerm = select(object.Trade.Counterparty.Type, 
  "Interbranch"->select(Term, 
    "Long"->object.Trade.FaceValue), 
  default->"-");
  InterofficeShortTerm = select(object.Trade.Counterparty.Type, 
  "Interbranch"->select(Term, 
    "Short"->object.Trade.FaceValue), 
  default->"-");
  INVSEQ = py("Total_Trade", context).invseq(parent:trades).At(object.Instrument.InstrumentAlias.SERIES);
  Invtype = select(object.Trade.Portfolio <> nil, 
  true->select(object.Trade.Portfolio.TypeChlItem, 
    "Amortised Cost"->"H", 
    "FVOCI"->"A", 
    "FVTPL"->"T"), 
  false->nil);
  IRS = ;
  IssuerLimit = ;
  IssuerPercentUtilization = 1;
  IssuerUtilization = ;
  jenisInstrumen = py("Report_Python", context).get_jenis_sb(object.Trade);
  JenisTransaksi = select(object.Trade.OptKey3AsEnum, 
  "REPO"->"1", 
  "REVREPO"->"1", 
  default->"2");
  jenisTransaksiAntarBank = "PUAB";
  JnsDokumenUnderlying = py("Report_Python", context).get_document_type(object.Trade.AdditionalInfo.DocumentType);
  KodeFormFI = "F113317";
  KodeFormMDS = "F113310";
  KodeFormPasal26 = "F113308";
  Kontrak = select(object.Trade.OptKey3AsEnum, 
  "SP"->select(object.Trade.OptKey4AsEnum, 
    "MDS"->"F030299", 
    "MCS"->"F03060301", 
    "MPF"->"F030299", 
    "MDCI"->"F03060399", 
    "MMLD"->"F030503"), 
  "FX"->select(object.Trade.OptKey4AsEnum, 
    "TOD"->"F030101", 
    "SPOT"->"F030103", 
    "TOM"->"F030102", 
    "NS"->"F030201", 
    "SWAP"->"F0303", 
    "FWD"->"F030299", 
    "OPT"->select(object.Instrument.OptionType, 
      "Put"->"F030501", 
      "Call"->"F030502")), 
  "SWAP"->select(object.Trade.OptKey4AsEnum, 
    "CCS"->"F03060101", 
    "IRS"->"F0306020101", 
    "OIS"->"F0306020102"), 
  "BOND"->select(object.Trade.OptKey4AsEnum, 
    "FWD"->"F0306020299"), 
  default->"");
  Kurs = ;
  KursBeli = py("Total_Trade", context).calculate_kursbeli(object.Trade, ["Bought or Sold", "Exchange Rate"]);
  KursJual = py("Total_Trade", context).calculate_kursjual(object.Trade, ["Bought or Sold", "Exchange Rate"]);
  KursTengah = ;
  LastCFPeriod = py("Report_Python", context).get_last_payment_period(object.Trade.MoneyFlows);
  LastCouponDate = ;
  LastFixingRate = select(object.FirstReceiveLeg.LegType, 
  "Fixed"->"", 
  default->py("Report_Python", context).get_last_fixing_rate(object.FirstReceiveLeg.FloatRateReference.Name));
  LastPaymentPeriod = py("Report_Python", context).get_start_date_cashflow(object.Trade);
  LBU = py("Total_Trade", context).staticmonth;
  LBUFieldCustom = object.Trade.Amount;
  legs = object.Trade.Instrument.Legs;
  Limit = 500000000;
  LimitAmtCurr = 
# <ERROR> expected method name, got '(' (at pos 45)
py("python_module", context).python_function.(input_object);
  LimitHolding = "186";
  LimitMO01 = "Rp 162,85T";
  LimitMO10 = select(object.Trade.Currency.Name, 
  "IDR"->py("Python_MO_Custom_Fields", context).get_compliance_rule_by_name("Bond Cut Loss Limit IDR - Vania").Thresholds.First.Value, 
  "USD"->py("Python_MO_Custom_Fields", context).get_compliance_rule_by_name("Bond Cut Loss Limit USD - Vania").Thresholds.First.Value);
  LOB = ;
  LongTermFDQ = select(FDQ, 
  "Long Term FDQ"->object.Trade.FaceValue, 
  default->"-");
  LowerPrice = ;
  LowerRate = select(object.Trade.Currency.Prices.Size > 0, 
  true->py("Report_Python", context).price(object.Trade).Low, 
  false->nil);
  MarketYield = ;
  MarkToMarket = py("Report_Python", context).get_mark_to_market_collateral(object.Instrument.Name);
  MarkToModel = ;
  maturitydate_adj = 
# <ERROR> expected ')', got ',' (at pos 16)
("Report_Python", context).reformat_date(object.Instrument.EndDate));
  MaturityDateDP = select(object.Trade.OptKey3AsEnum, 
  "SP"->select(object.Trade.OptKey4AsEnum, 
    "MMLD"->object.Trade.Instrument.ExpiryDateOnly, 
    "MDS"->object.Trade.Instrument.ExpiryDateOnly, 
    "MDCI"->object.Trade.Instrument.ExpiryDateOnly));
  MMDF = ;
  MMInterbank = py("Report_Python", context).MMInterbankLIQ19(object.Trade, ["CL", "MD", "CMP", "CMT", "OVP", "OVT", "BLT", "SHARI", "BA"]);
  MMInterbankPlacement = ;
  MMInterbankTaken = ;
  MMLF = ;
  MO10_is_over_utilization = UtilizationBond > LimitMO10;
  MoneyAmount = py("Total_Trade", context).moneyamount(object.Trade, ["Trade Nominal", "Exchange Rate"]);
  Month = py("Total_Trade", context).month(object.Trade.ValueDay);
  Month_TradeTime = py("Total_Trade", context).month(object.Trade.TradeTimeDateOnly);
  MonthNow = ;
  MonthNumber = py("Total_Trade", context).monthnumber(object.Trade.ValueDay);
  MonthToExpired = int(dateDifference(endDate, startDate) / 30);
  MOODYSDataBloomberg = ;
  MOODYSDataNTCS = ;
  MOODYSHasilMatch = ;
  Movement = py("Report_Python", context).calculate_amount_movement(object.Trade);
  MTD = ;
  MTM = ;
  NasabahBeli = longFormAttrBuyAmount;
  NasabahJual = longFormAttrSellAmount;
  NAV = ;
  NDFFixingPrice = select(py("Total_Trade", context).NDFInstrument(object.Trade.Instrument.Name), 
  true->object.Instrument.Trades.Last.Price, 
  false->nil);
  NearAmount = object.Trade.Premium;
  NearAmount1 = select(object.Trade.IsFxSwapNearLeg, 
  true->object.Trade.Quantity, 
  false->object.Trade.FxSwapNearLeg.Quantity);
  NearAmount2 = select(object.Trade.IsFxSwapFarLeg, 
  true->object.Trade.Quantity, 
  false->object.Trade.FxSwapFarLeg.Quantity);
  NetAmount = EquivalentAmountIDR - AllowanceForLosses;
  NewCTPTYCIF = shunt(acm.Time.DateToday == object.Trade.UpdateTime, 
  true->object.Trade.Counterparty.HostID, 
  false->nil);
  NewCTPTYReff = shunt(acm.Time.DateToday == object.Trade.UpdateTime, 
  true->object.Trade.Counterparty, 
  false->nil);
  NextCFPeriod = py("Report_Python", context).get_next_payment_period(object.Trade.MoneyFlows);
  NextCouponDate = ;
  NextPaymentDate = py("Report_Python", context).get_projected_and_paydate_from_cashflow(object.Trade, "PayDate");
  NextPaymentPeriod = py("Report_Python", context).get_end_date_cashflow(object.Trade);
  NII = ;
  NIIThisYear = select(dateToYMD(object.Trade.ValueDay).At(0) == dateToYMD(dateToday()).At(0), 
  true->interest, 
  false->denominatedvalue(0.0, "IDR", , ));
  NIIYesteryear = select(dateToYMD(object.Trade.ValueDay).At(0) == dateToYMD(dateToday()).At(0) - 1, 
  true->interest, 
  false->denominatedvalue(0.0, "IDR", , ));
  NilaiBeliKembali = ;
  NilaiPasar = object.Trade.Nominal * markToMarketPeriodValue;
  NilaiPasar2 = object.Trade.Nominal * markToMarketPeriodValue * object.Trade.Quantity;
  NilaiPerolehan = object.Trade.Nominal * object.Trade.Price;
  NilaiPerolehan2 = object.Trade.Nominal * object.Trade.Price * object.Trade.Quantity;
  nilaiRepo1stLeg = select(object.Trade.OptKey3AsEnum, 
  "REPO"->string(abs(object.Trade.Nominal)), 
  "REVREPO"->string(abs(object.Trade.Nominal)), 
  default->nil);
  NineDayExpiry = py("Report_Python", context).get_expiry(object.Instrument.EndDate, "9");
  nisbahBagiHasil = ;
  Nominal_AllMM = select(object.Trade.OptKey3AsEnum, 
  "BOND"->object.Trade.Nominal, 
  "SBI"->object.Trade.Nominal, 
  "TD"->object.Tarde.Nominal, 
  "BONDSREPO"->py("Report_Python", context).get_Collateral_Amounts(object.Trade), 
  "DL"->object.Trade.Nominal, 
  "REPO"->object.Trade.FaceValue, 
  "REVREPO"->object.Trade.FaceValue);
  Nominal_onerep = select(object.Trade.Nominal, 
  nil->0.0, 
  ""->0.0, 
  0->0.0, 
  default->object.Trade.Nominal);
  nominalBondsIDR = select(object.Trade.OptKey3AsEnum, 
  "BOND"->select(object.Trade.Currency.Name, 
    "IDR"->string(abs(object.Trade.Nominal)), 
    default->string(abs(py("Report_Python", context).idr_price_mtm_today(object.Trade) * object.Trade.Nominal))), 
  "REPO"->select(object.Trade.Currency.Name, 
    "IDR"->string(abs(py("Report_Python", context).get_Collateral_Amounts(object.Trade))), 
    default->string(abs(py("Report_Python", context).idr_price_mtm_today(object.Trade) * py("Report_Python", context).get_Collateral_Amounts(object.Trade)))), 
  "REVREPO"->select(object.Trade.Currency.Name, 
    "IDR"->string(abs(py("Report_Python", context).get_Collateral_Amounts(object.Trade))), 
    default->string(abs(py("Report_Python", context).idr_price_mtm_today(object.Trade) * py("Report_Python", context).get_Collateral_Amounts(object.Trade)))));
  nominalBondsValas = select(object.Trade.OptKey3AsEnum, 
  "BOND"->select(object.Trade.Currency.Name, 
    "IDR"->nil, 
    default->string(abs(object.Trade.Nominal))), 
  "REPO"->select(py("Report_Python", context).get_Collateral_Currency(object.Trade), 
    "IDR"->nil, 
    default->string(py("Report_Python", context).get_Collateral_Amounts(object.Trade))), 
  "REVREPO"->select(py("Report_Python", context).get_Collateral_Currency(object.Trade), 
    "IDR"->nil, 
    default->string(py("Report_Python", context).get_Collateral_Amounts(object.Trade))));
  nominalCollateral = select(object.Trade.OptKey3AsEnum, 
  "REPO"->nil, 
  "REVREPO"->nil, 
  "BOND"->select(object.Trade.Currency.Name, 
    "IDR"->object.Trade.Nominal));
  NominalCoupon = py("Report_Python", context).coupon_interest(object.Trade);
  NominalCustom = object.Trade.Nominal;
  nominalDokumenUnderlying = select(object.Trade.AdditionalInfo.LCS, 
  "Yes"->object.Trade.AdditionalInfo.UnderlyingNominal, 
  default->nil);
  nominalRupiah = select(object.Trade.Currency.Name, 
  "IDR"->string(abs(object.Trade.Nominal)), 
  default->0);
  nominalValas = select(object.Trade.Currency.Name, 
  "IDR"->0, 
  default->string(abs(object.Trade.Nominal)));
  NominativeList = string(object.Trade.Instrument) + "/" + string(object.Trade.OptKey4AsEnum);
  NomorBuktiPotongFI = "TRO/TAX/" + string(ValueDay_Month_Roman) + "/" + string(object.Trade.Oid) + "/" + string(TahunPajak);
  NomorBuktiPotongMDS = "TRO/TAX/" + string(ValueDay_Month_Roman) + "/TO" + string(object.Trade.Oid) + "MDS/" + string(TahunPajak);
  NomorBuktiPotongPasal26 = "TRO/TAX/" + string(ValueDay_Month_Roman) + "/" + string(object.Instrument) + "/" + string(TahunPajak);
  nomorDokumenUnderlying = select(object.Trade.AdditionalInfo.LCS, 
  "Yes"->object.Trade.AdditionalInfo.UnderlyingRef, 
  default->nil);
  NomorIdentifikasi = py("Total_Trade", context).noid(object.Trade, ["Instrument Type", "Trade Optional Key 3", "Trade Number"]);
  nomorSuratBerharga = select(object.Trade.OptKey3AsEnum, 
  "REPO"->py("Report_Python", context).get_ISIN_collateral(object.Trade, object.Trade.OptKey3AsEnum), 
  "REVREPO"->py("Report_Python", context).get_ISIN_collateral(object.Trade, object.Trade.OptKey3AsEnum), 
  default->object.Instrument.Isin);
  NOPOvernight = ;
  NOPThresholdValue = py("Python_Custom_Fields", context).port_threshold_limit(object.Portfolio, "Final NOP Portfolio(PV)", "Exposure", "Compliance", 2);
  NOPUtilizationPercentage = py("Python_Custom_Fields", context).port_utilization_percentage(object.Portfolio, "Final NOP Portfolio(PV)", "Exposure", "Compliance", 2);
  Notional1DayChange = ;
  NotionalLimit = ;
  NotionalPercentageUtilization = ;
  NotionalPorSCustom = py("BOa08PythonCode", context).getPositive(nominalAmountAccountingCCSCurrOne, nominalAmountAccountingCCSCurrTwo);
  NotionalUtilization = ;
  NPWPPotong = 93000;
  NTR_MTM = py("Report_Python", context).get_ntr_mtm(object.Trade);
  OBJID = ;
  OffShoreFunding = select(ACCTTYPE, 
  "IT/FB"->object.Trade.FaceValue, 
  default->"-");
  One = 1;
  OneDayChange = ;
  OneDayExpiry = py("Report_Python", context).get_expiry(object.Instrument.EndDate, "1");
  OnShoreFunding = select(Sources, 
  "On Shore"->select(object.Trade.OptKey3AsEnum, 
    "IT"->object.Trade.FaceValue), 
  default->"-");
  OnShoreLongTerm = select(Sources, 
  "On Shore"->select(Term, 
    "Long"->object.Trade.FaceValue), 
  default->"-");
  OnShoreShortTerm = select(Sources, 
  "On Shore"->select(Term, 
    "Short"->object.Trade.FaceValue), 
  default->"-");
  ORD = ;
  OthersFairValue = py("Report_Python", context).HedgeTrade(object.Trade, false, false);
  OthersNotAmt = py("Report_Python", context).HedgeTradeStr(object.Trade, false);
  OutstandingAmount = py("Report_Python", context).sum_cashflow_forward(object.Trade.MoneyFlows);
  OutstandingEqvUSD = select(object.Trade.Currency, 
  "USD"->object.Trade.Nominal, 
  default->object.Trade.Nominal * py("Report_Python", context).usd_price_mtm(object.Trade));
  parent = object.Parent;
  PayDate = py("Total_Trade", context).paydate(object.Trade.MoneyFlows);
  PayDayCustom = py("Total_Trade", context).payday(object.Trades);
  PayLegEqvUSD = select(currency, 
  "USD"->object.Trade.Nominal, 
  "IDR"->object.Trade.Nominal);
  Payment = object.Trade.Payments;
  paymentAmountArray = Payment :* "paymentAmount";
  PaymentSystem = py("Report_Python", context).paymentsystem(object.Trade.MoneyFlows);
  paymentTypeArray = string(Payment :* "paymentType");
  PayOrReceive = select(object.Trade.Nominal > 0, 
  true->"RECEIVE", 
  false->"PAY");
  PEFINDODataBloomberg = ;
  PEFINDODataNTCS = ;
  PEFINDOHasilMatch = ;
  Pemeringkat = pemeringkat_dan_peringkat.At(0);
  pemeringkat_dan_peringkat = py("Report_Python", context).pemeringkat_dan_peringkat(object.Instrument);
  Percentage_Yesterday = ;
  PercentageHolding = (holdingPeriod / LimitHolding) * 100;
  PercentageMO01RPL = (rPLColumn / 162850000000000.0) * 100;
  PercentageMO01RPL_Yesterday = (RPL_Yesterday / 162850000000000.0) * 100;
  PercentageMO01UPL = (uPLColumn / 162850000000000.0) * 100;
  PercentageMO01UPL_Yesterday = (UPL_Yesterday / 162850000000000.0) * 100;
  PercentageVolumeYesterday = ;
  PercentUtilization = ;
  PercentUtilizationTrading = ;
  Peringkat = pemeringkat_dan_peringkat.At(1);
  Period = ;
  Periode_Laporan = "D";
  periodeData = string(py("Report_Python", context).date_converter(object.Trade.TradeTimeDateOnly));
  PhysicalForeign = select(object.Trade.Counterparty.Country, 
  "Indonesia"->"N", 
  default->"Y");
  PorSCustom = py("BOa08PythonCode", context).getPorS(nominalAmountAccountingCCSCurrOne);
  PortLimit = py("MO_Column_Helpers", context).get_threshold_value_by_port(object.Trade.Portfolio);
  PortUtilPercent = py("MO_Column_Helpers", context).get_util_percent_by_port(object.Trade.Portfolio);
  PortUtilStatus = py("MO_Column_Helpers", context).get_appropriate_threshold_type_by_port(object.Trade.Portfolio);
  Position1To3Y = py("Report_Python", context).get_Position(object.Instrument.EndDate, object.Instrument.Trades, "1-3Y");
  Position3To4Y = py("Report_Python", context).get_Position(object.Instrument.EndDate, object.Instrument.Trades, "3-4Y");
  Position4To5Y = py("Report_Python", context).get_Position(object.Instrument.EndDate, object.Instrument.Trades, "4-5Y");
  Position5To10Y = py("Report_Python", context).get_Position(object.Instrument.EndDate, object.Instrument.Trades, "5-10Y");
  PositionEOD = py("Total_Trade", context).positionEOD;
  PositionHigh10Y = py("Report_Python", context).get_Position(object.Instrument.ExpiryDateOnly, object.Instrument.Trades, ">10Y");
  PositionLow1Y = py("Report_Python", context).get_Position(object.Instrument.EndDate, object.Instrument.Trades, "<1Y");
  PPlusI = object.Trade.FaceValue + TotalInterest;
  PPlusIAboveOneYear = select(DaysToMaturity > 360, 
  true->PPlusI, 
  false->"-");
  PPlusICurrent = select(DaysToMaturity > 0, 
  true->select(DaysToMaturity < 2, 
    true->PPlusI, 
    false->"-"), 
  false->"-");
  PPlusINineMonthToTwelveMonth = select(DaysToMaturity > 274, 
  true->select(DaysToMaturity < 361, 
    true->PPlusI, 
    false->"-"), 
  false->"-");
  PPlusIOneMonthToTwoMonth = select(DaysToMaturity > 30, 
  true->select(DaysToMaturity < 62, 
    true->PPlusI, 
    false->"-"), 
  false->"-");
  PPlusIOneWeek = select(DaysToMaturity > 1, 
  true->select(DaysToMaturity < 8, 
    true->PPlusI, 
    false->"-"), 
  false->"-");
  PPlusIOneWeekToOneMonth = select(DaysToMaturity > 7, 
  true->select(DaysToMaturity < 31, 
    true->PPlusI, 
    false->"-"), 
  false->"-");
  PPlusISixMonthToNineMonth = select(DaysToMaturity > 183, 
  true->select(DaysToMaturity < 275, 
    true->PPlusI, 
    false->"-"), 
  false->"-");
  PPlusIThreeMonthToSixMonth = select(DaysToMaturity > 91, 
  true->select(DaysToMaturity < 184, 
    true->PPlusI, 
    false->"-"), 
  false->"-");
  PPlusITwoMonthToThreeMonth = select(DaysToMaturity > 61, 
  true->select(DaysToMaturity < 92, 
    true->PPlusI, 
    false->"-"), 
  false->"-");
  PremiumCustom = object.Trade.Premium;
  PrevEffDate = py("Total_Trade", context).yesterdayfunc(object.Trade.ValueDay);
  PrevPrevEffDate = py("Total_Trade", context).yesterdayfunc2(object.Trade.ValueDay);
  PrevPrevPrice = py("Total_Trade", context).prevprice(object.Trade, ["PrevPrevEffDate"]);
  PrevPrice = py("Total_Trade", context).prevprice(object.Trade, ["PrevEffDate"]);
  PriceYST = ;
  PRINPAYAMT = object.Trade.FaceValue * object.Trade.Price;
  ProceedAmount = ;
  ProcessFlag = ;
  Product = ;
  ProductCategory = string(object.Trade.OptKey3AsEnum) + " - " + string(object.Trade.OptKey4AsEnum) + " - " + string(object.Instrument.InsType);
  PV01Threshold = py("Python_MO_Custom_Fields", context).get_threshold_value_by_rule_name(object.Portfolio, "PV01_Treasury HO");
  PV01ThresholdValue = py("Python_MO_Custom_Fields", context).get_threshold_limit_by_rule_name(object.Portfolio, "PV01_Treasury HO");
  PV01UtilizationPercentage = py("Python_MO_Custom_Fields", context).trading_manager_utilization_percentage(object.Portfolio, "PV01_Treasury HO");
  PV01WatermarkValue = py("Python_MO_Custom_Fields", context).get_utilization_val_by_rule_name(object.Portfolio, "PV01_Treasury HO");
  PvFixedRate = py("FO4342", context).PvFixedRate(object.Trade);
  QualityOfPlacement = "K1";
  QuantityCustom = object.Trade.Quantity;
  QuantityUsed = object.Instrument.Trades.Size;
  RATE_8 = select(object.Trade.Currency, 
  "IDR"->1);
  RATE_VAL = py("Report_Python", context).getAuditConfirmationVal(trade, true, false, true);
  RateCustom = select(object.Trade.OptKey3AsEnum, 
  "BOND"->select(object.Trade.OptKey4AsEnum, 
    "OPT"->object.Trade.Instrument.RecLeg.FirstRate, 
    "BOND"->object.Trade.Price, 
    "NCD"->object.Trade.Price, 
    "BILLS"->object.Trade.Price, 
    "FR"->object.Trade.Price), 
  "FX"->object.Trade.Price, 
  "SWAP"->select(object.Trade.OptKey4AsEnum, 
    "CCS"->object.Trade.Instrument.RecLeg.FirstRate, 
    "IRS"->object.Trade.Instrument.RecLeg.FirstRate, 
    "OIS"->object.Trade.Instrument.RecLeg.FirstRate), 
  "REPO"->object.Trade.Instrument.RecLeg.FirstRate, 
  "REVREPO"->object.Trade.Instrument.RecLeg.FirstRate, 
  "SP"->object.Trade.Instrument.RecLeg.FirstRate, 
  "DL"->object.Trade.Instrument.RecLeg.FirstRate);
  RateNTRIDR = select(object.Trade.Currency.Name, 
  "IDR"->"1", 
  default->py("Report_Python", context).idr_price_mtm_yesterday(object.Trade));
  RealizedPnLCustom = (object.Trade.Premium - object.Trade.FaceValue) / 100 * object.Trade.Nominal;
  ReferenceRate = select(object.FirstReceiveLeg.LegType, 
  "Fixed"->object.FirstReceiveLeg.FixedRate, 
  default->object.FirstReceiveLeg.FloatRateReference.Name);
  Reff = object.Trade.Name + "/" + object.Trade.Instrument.Name + "/" + object.Trade.OptKey3 + object.Trade.OptKey4;
  Reksadana = ;
  RemarkOutstanding = py("Total_Trade", context).cek_tanggal_outstanding(object.Trade.ValueDay);
  RemarkSellBuy = py("Total_Trade", context).remarksellbuy(object.Trade, ["Bought or Sold", "Call or Put", "Currency1", "CPMoneyCcy", "Currency2"]);
  Repo = instrumentRepoRate * object.Trade.Nominal / 100;
  RepoBI = ;
  RepoCleanPrice = select(object.Instrument.InsType, 
  "Repo/Reverse"->object.Trade.Price - RepoHaircut, 
  "BasketRepo/Reverse"->py("Report_Python", context).get_Collateral_Trade(object.Trade).Price - RepoHaircut, 
  default->nil);
  RepoDirtyPrice = select(object.Instrument.InsType, 
  "Repo/Reverse"->RepoCleanPrice + py("Report_Python", context).get_AccruedInterest(object.Trade), 
  "BasketRepo/Reverse"->RepoCleanPrice + py("Report_Python", context).get_AccruedInterest(object.Trade), 
  default->nil);
  RepoHaircut = select(object.Instrument.InsType, 
  "Repo/Reverse"->object.Trade.Haircut, 
  "BasketRepo/Reverse"->py("Report_Python", context).get_Repo_Haircut(object.Trade), 
  default->nil);
  RepoInterbank = ;
  RepoUnderlyingName = select(object.Instrument.InsType, 
  "Repo/Reverse"->object.Instrument.Underlying.Name, 
  "BasketRepo/Reverse"->py("Report_Python", context).get_Collateral_Instrument(object.Trade), 
  default->nil);
  RepoYield = py("Report_Python", context).Repo_Trade_Yield(object.Trade);
  RepurchaseAmount = select(dateDifference(object.Instrument.EndDate, object.Instrument.StartDate) > 365, 
  true->py("Report_Python", context).get_Repurchase_Amount(object.Trade), 
  false->object.Trade.Nominal + py("Report_Python", context).get_cashflow_proj_interest_amt(object.Trade));
  RequiredAmountUnderlying = py("Report_Python", context).get_required_amount(object.Trade.AdditionalInfo.UnderlyingNominal, NominalCustom);
  ReturnCoupon = IDays / 360 * object.Trade.Nominal * float(uniqueCouponInTheoreticalPrice);
  RevalRate = ;
  RevaluationAmount = ;
  RevRepoBI = ;
  RevRepoInterbank = ;
  RiskWeight = ;
  RowNumber = py("Report_Python", context).generate_row_number(object.Trade.Oid, "BO46", object.Trade.OptKey2AsEnum);
  RPL_Yesterday = py("Report_Python", context).calculate_PL_yesterday(object.Trade, "RPL");
  SACCR_RWA = ;
  SaldoRata2PerTahun = py("Report_Python", context).saldorata2pertahun * select(object.Trade.OptKey3, 
  "DL"->EquivalentAmountIDR);
  SaldoRata2PerTahun_v2 = object.Trade.Nominal / 360;
  SaldoRata2PerTahun_v3 = "(" + py("Report_Python", context).num_separator((abs(object.Trade.Nominal * IDays / 360))) + ")";
  SB_Dimiliki = ;
  SB_Terbit = ;
  SCHED_Pay_Freq = select(object.Instrument.Legs.First.PayType, 
  "Receive"->select(object.Instrument.Legs.First.RollingPeriod, 
    "3m"->"Q", 
    "6m"->"S", 
    "12m"->"Y"), 
  "Pay"->select(object.Instrument.Legs.Last.RollingPeriod, 
    "3m"->"Q", 
    "6m"->"S", 
    "12m"->"Y"));
  Scttype = select(object.Trade.Portfolio <> nil, 
  true->select(object.Trade.Portfolio.TypeChlItem, 
    "Amortised Cost"->"HTM", 
    "FVOCI"->"AFS", 
    "FVTPL"->"TRD"), 
  false->nil);
  SECID = select(object.Trade.OptKey3AsEnum, 
  "BOND"->object.Instrument.Name, 
  default->py("Report_Python", context).get_Collateral_Instrument(object.Trade));
  SECIDPrice = ;
  SecuritiesRating = ;
  SecuritiesRatingInstituition = ;
  SellAmountCustom = select(object.Trade.BoughtAsString, 
  "Sell"->object.Trade.Nominal, 
  default->0) / 1000000;
  SellAmountCustom2 = select(object.Trade.BoughtAsString, 
  "Sell"->object.Trade.Nominal, 
  default->0);
  SEQNUM = ;
  SETTAVGCOST = ;
  SettleValue = py("Report_Python", context).get_price_info(object.Trade, "settle");
  SevenDayExpiry = py("Report_Python", context).get_expiry(object.Instrument.EndDate, "7");
  ShortTermFDQ = select(FDQ, 
  "Short Term FDQ"->object.Trade.FaceValue, 
  default->"-");
  SingleInterestPayment = py("Report_Python", context).InterestPayment(object.Trade);
  SingleInterestReceived = py("Report_Python", context).InterestReceive(object.Trade);
  SixDayExpiry = py("Report_Python", context).get_expiry(object.Instrument.EndDate, "6");
  SNPDataBloomberg = ;
  SNPDataNTCS = ;
  SNPHasilMatch = ;
  SourceData = ;
  Sources = select(object.Trade.Counterparty <> nil, 
  true->select(object.Trade.Counterparty.Country, 
    "China"->"On Shore", 
    default->"Off Shore"), 
  false->nil);
  SpotLiabilities = select(object.Trade.OptKey4, 
  "FWD"->object.Trade.Nominal, 
  "NDF"->object.Trade.Nominal, 
  "NS"->object.Trade.Nominal, 
  "SWAP"->object.Trade.Nominal, 
  "OPT"->object.Trade.Nominal, 
  default->0);
  SRC_STM_ID = ;
  StandardYearlyLossThresholdValue = py("Python_Custom_Fields", context).port_threshold_limit(object.Portfolio, "Portfolio Total Profit and Loss", "Exposure", "Pre-Deal", 0);
  StandardYearlyLossUtilizationPercentage = py("Python_Custom_Fields", context).port_utilization_percentage(object.Portfolio, "Portfolio Total Profit and Loss", "Exposure", "Pre-Deal", 0);
  StartAccrualFA = py("Report_Python", context).StartAccrual(object.Trade);
  StartCouponDate = py("Report_Python", context).couponDate(trade);
  StartDateCF = StartEndDateCF.At(0);
  StartEndDateCF = py("Report_Python", context).get_current_start_and_end_date(object.Trade);
  StartValue = float(object.Trade.Nominal) * float(uniqueCouponInTheoreticalPrice);
  StartValueFA = py("Report_Python", context).StartValue(object.Trade);
  StatusAntasena = ;
  StatusBondCutLoss = nil;
  StatusBondHolding = ;
  StatusLimit = ;
  StatusLimitExpiry = ;
  StatusLimitTrading = ;
  StatusMatchUnmatch = ;
  StatusNTCS = ;
  StatusRegistration = ;
  STDEV = ;
  SUBLMTNAME = ;
  sukuBungaPersentaseImbalan = select(object.FirstReceiveLeg.LegType, 
  "Fixed"->string(object.FirstReceiveLeg.FixedRate), 
  default->py("Report_Python", context).get_float_rate_and_spread(object));
  sukuBungaRepo = select(object.Trade.OptKey3AsEnum, 
  "REPO"->select(object.FirstReceiveLeg.LegType, 
    "Fixed"->string(object.FirstReceiveLeg.FixedRate), 
    default->string(py("Report_Python", context).get_float_rate_and_spread(object))), 
  "REVREPO"->select(object.FirstReceiveLeg.LegType, 
    "Fixed"->string(object.FirstReceiveLeg.FixedRate), 
    default->string(py("Report_Python", context).get_float_rate_and_spread(object))), 
  default->nil);
  SWAP = ;
  SystemDate = acm.Time.DateToday;
  TahunPajak = string(dateToYMD(object.Trade.ValueDay)[0]);
  tanggalJatuhTempo = string(py("Report_Python", context).date_converter(object.Instrument.EndDate));
  tanggalJatuhTempoDepo = string(py("Report_Python", context).date_converter(object.Instrument.EndDate));
  tanggalJatuhTempoDokumenUnderlying = select(object.Trade.AdditionalInfo.LCS, 
  "Yes"->object.Trade.AdditionalInfo.UnderlyingMatDate, 
  default->nil);
  tanggalJatuhTempoRepo = select(object.Trade.OptKey3AsEnum, 
  "REPO"->string(py("Report_Python", context).date_converter(object.Instrument.EndDate)), 
  "REVREPO"->string(py("Report_Python", context).date_converter(object.Instrument.EndDate)), 
  default->"");
  tanggalJatuhTempoSuratBerharga = string(py("Report_Python", context).get_Collateral_EndDate(object.Trade, object.Trade.OptKey3AsEnum));
  tanggalJatuhTempoSWAPIRS = select(object.Trade.OptKey3AsEnum, 
  "SWAP"->select(object.Trade.OptKey4AsEnum, 
    "IRS"->object.Instrument.EndDate), 
  "BOND"->select(object.Trade.OptKey4AsEnum, 
    "FWD"->object.Trade.ValueDay));
  tanggalSettlement = select(object.Trade.OptKey3AsEnum, 
  "REPO"->string(py("Report_Python", context).date_converter(object.Instrument.StartDate)), 
  "REVREPO"->string(py("Report_Python", context).date_converter(object.Instrument.StartDate)), 
  default->string(py("Report_Python", context).date_converter(object.Trade.ValueDay)));
  tanggalValutaSWAPIRS = select(object.Trade.OptKey3AsEnum, 
  "SWAP"->select(object.Trade.OptKey4AsEnum, 
    "IRS"->object.Trade.TradeTimeDateOnly), 
  "BOND"->select(object.Trade.OptKey4AsEnum, 
    "FWD"->object.Trade.ValueDay));
  Tarif1 = accrued / HoldingPeriodESPT;
  Tarif2 = accrued / HoldingPeriodESPT / 2;
  TarifPajak = 20;
  TenDayExpiry = py("Report_Python", context).get_expiry(object.Instrument.EndDate, "10");
  Tenor = select(int((endDate - object.Trade.ValueDay) / 365) < 1, 
  true->select(int((endDate - object.Trade.ValueDay) / 30) < 1, 
    true->string(int(endDate - object.Trade.ValueDay)) + " D", 
    false->string(int((endDate - object.Trade.ValueDay) / 30)) + " M"), 
  false->string(int((endDate - object.Trade.ValueDay) / 365)) + " Y");
  tenorSuratBerharga = py("Report_Python", context).get_tenor_surat_berharga(object);
  TenorTahun = py("Report_Python", context).get_year_difference(object.Trade.Instrument.EndDate, object.Trade.ValueDay);
  Term = select(IDays <= 365, 
  true->"Short", 
  default->"Long");
  Term_Deposit = ;
  TermofPeriod = ;
  testRhamdan = DateToday;
  tglAwalForward = select(object.Trade.OptKey3AsEnum, 
  "BOND"->select(object.Trade.OptKey4AsEnum, 
    "FWD"->object.Trade.TradeTimeDateOnly), 
  default->"");
  tglEfektifSWAPIRS = select(object.Trade.OptKey3AsEnum, 
  "SWAP"->select(object.Trade.OptKey4AsEnum, 
    "IRS"->py("BO27PythonFunctions", context).getDate(object)), 
  "BOND"->select(object.Trade.OptKey4AsEnum, 
    "FWD"->object.Trade.TradeTimeDateOnly));
  ThreeDayExpiry = py("Report_Python", context).get_expiry(object.Instrument.EndDate, "3");
  tingkatIndikasiImbalan = ;
  TodayPrice = ;
  ToleranceLimit = ;
  ToleranceLimit2 = ;
  Total = HTM + AFS + TRD;
  Total_Cashflow = ;
  Total_coupon = ;
  Total_EndCash = select(object.Trade.BoughtAsString, 
  "Buy"->object.Trade.EndCash, 
  "Sell"->-1 * object.Trade.EndCash);
  TotalACCINT = ;
  TotalBorrowing = select(object.Trade.OptKey3AsEnum, 
  "IT"->object.Trade.FaceValue, 
  default->"-");
  TotalINTAMT = ;
  TotalInterest = object.Trade.FaceValue * trade:interestRateAtTradeTime / 100 * IDays / 360;
  TotalNasabah = NasabahJual + NasabahBeli;
  TotalPaymentReceive = ;
  TotalPlacement = select(object.Trade.OptKey3AsEnum, 
  "IP"->object.Trade.FaceValue, 
  default->"-");
  TotalPnLCustom = RealizedPnLCustom + ReturnCoupon;
  TotalPrincipal = ;
  TotalTaxableIncome = 0;
  TPL_Yesterday = py("Report_Python", context).calculate_PL_yesterday(object.Trade, "TPL");
  TradeFXExcRate = select(longFormAttrExchangeRate, 
  0->0.0, 
  default->longFormAttrExchangeRate);
  TradeNumber = Trade.No;
  TradeNumberInstrument = object.Trade.Name + " " + object.Trade.Instrument.Name;
  TraderPrice = abs(object.Trade.SalesMargin - object.Trade.Price);
  TradeTimeDateOnly = asDate(object.Trade.TradeTime);
  TradeTimeTimeOnly = py("Report_Python", context).get_time(object.Trade);
  TradeTypeDesc = ;
  TransactionBorrow = select(object.Trade.BoughtAsString, 
  "Sell"->object.Trade.Nominal, 
  default->0) / 1000000 * (-1);
  TransactionBorrow1Bio = select(object.Trade.BoughtAsString, 
  "Sell"->object.Trade.Nominal, 
  default->0) / 1000000000 * (-1);
  TransactionLend = select(object.Trade.BoughtAsString, 
  "Buy"->object.Trade.Nominal, 
  default->0) / 1000000 * (-1);
  TransactionLend1Bio = select(object.Trade.BoughtAsString, 
  "Buy"->object.Trade.Nominal, 
  default->0) / 1000000000 * (-1);
  TranslationAmount = ;
  TRD = select(object.Trade.Portfolio.TypeChlItem.Name == "FVTPL", 
  true->object.Trade.Nominal, 
  false->0.0);
  TwoDayExpiry = py("Report_Python", context).get_expiry(object.Instrument.EndDate, "2");
  Type_Placement = py("Total_Trade", context).get_BoughtorSold(object);
  TypeofFunding = py("Report_Python", context).get_typeoffunding(object.Trade.Counterparty.AdditionalInfo.LLD_SANDI_NEGARA);
  TypeOfSecurities = ;
  TypeUtilization = ;
  Unamortized = object.Trade.Premium - object.Trade.Nominal - Amortized;
  UnamortizedDiscPrem = ;
  UnamortizedInterest = ;
  UnderlyingThreshold = select(object.Trade.BoughtAsString, 
  "Buy"->100000, 
  "Sell"->5000000);
  UnderlyingTransaksi = py("Report_Python", context).get_transaction_purpose(object.Trade.AdditionalInfo.TransactionPurpose);
  UnrealizedPlusIncomeToday = uPLColumn + rPLColumn;
  UnrealizedPlusIncomeYesterday = UPL_Yesterday + RPL_Yesterday;
  UPL_Yesterday = py("Report_Python", context).calculate_PL_yesterday(object.Trade, "UPL");
  UPLBonds = object.Trade.FaceValue * (mtmPriceSuggest.Value.Number - AmortisasiPrice) / 100;
  UpperPrice = ;
  UpperRate = ;
  UserCancelOrAmendBO = ;
  UserCancelOrAmendFO = ;
  Utilisasi = object.Trade.Amount;
  UtilisasiCreditEquivalent = ;
  UtilizationBond = (mtmPriceSuggest.Number / weightedAverageLife) - 1;
  UtilizationStatus = select(object.Trade.Currency.Name, 
  "IDR"->py("Python_MO_Custom_Fields", context).is_violated_MO10(object, "Bond Cut Loss Limit IDR - Vania", LimitMO10, UtilizationBond), 
  "USD"->py("Python_MO_Custom_Fields", context).is_violated_MO10(object, "Bond Cut Loss Limit USD - Vania", LimitMO10, UtilizationBond));
  ValueDay_adj = py("Report_Python", context).reformat_date(object.Trade.ValueDay);
  ValueDay_Month_Roman = select(dateToYMD(object.Trade.ValueDay).At(1), 
  1->"I", 
  2->"II", 
  3->"III", 
  4->"IV", 
  5->"V", 
  6->"VI", 
  7->"VII", 
  8->"VIII", 
  9->"IX", 
  10->"X", 
  11->"XI", 
  12->"XII");
  ValueDay_USDPrice = select(object.Trade.InstrumentSubType, 
  "Fund"->py("ValueDayUSDPrice", context).getCollateralValueDay(object.Trade), 
  "Basket Repo/Reverse"->py("ValueDayUSDPrice", context).getCollateralValueDay(object.Trade), 
  default->py("ValueDayUSDPrice", context).getValueDaySettle(object.Trade));
  valuta_dasar = select(object.Trade.OptKey3AsEnum, 
  "FX"->object.Trade.CurrencyPair.Currency1, 
  default->object.Trade.Currency);
  valuta_lawan = select(object.Trade.OptKey3AsEnum, 
  "FX"->object.Trade.CurrencyPair.Currency2, 
  default->"");
  valutaDokumenUnderlying = select(object.Trade.Instrument.InsType, 
  "Curr"->object.Trade.Instrument.Name, 
  default->object.Trade.Currency.Name);
  variabelMendasari = select(object.Trade.OptKey3AsEnum, 
  "SWAP"->select(object.Trade.OptKey4AsEnum, 
    "CCS"->"Ci", 
    "IRS"->"i", 
    "OIS"->"i"), 
  "SP"->select(object.Trade.OptKey4AsEnum, 
    "MCS"->"C"), 
  "BOND"->select(object.Trade.OptKey4AsEnum, 
    "FWD"->"C", 
    default->"x"));
  VarThresholdValue = py("Python_Custom_Fields", context).port_threshold_limit(object.Portfolio, "Portfolio Value at Risk From Scenario", "Exposure", "Periodic", 0);
  VarUtilizationPercentage = py("Python_Custom_Fields", context).port_utilization_percentage(object.Portfolio, "Portfolio Value at Risk From Scenario", "Exposure", "Periodic", 0);
  VERIND = select(object.Trade.Status, 
  "BO Confirmed"->1, 
  default->0);
  VoidCancelDate = select(object.Trade.Status, 
  "Void"->object.Trade.UpdateTime, 
  "Void Input"->object.Trade.UpdateTime, 
  default->"");
  VolumeDaily = ;
  VolumePenjualan = ;
  VolumeUSD = tPL * py("Report_Python", context).usd_price_mtm_tradetime(object.Trade);
  VolumeYesterday = ;
  WCOLimitCCYCredit = py("WCO_Column_Helpers", context).get_limit_by_port_and_cr(object.Trade.Portfolio, "Exposure Original CCY (credit)");
  WCOLimitCCYNotional = py("WCO_Column_Helpers", context).get_limit_by_port_and_cr(object.Trade.Portfolio, "Exposure Original CCY (notional)");
  WCOLimitIDRCredit = py("WCO_Column_Helpers", context).get_limit_by_port_and_cr(object.Trade.Portfolio, "Exposure EQV IDR (credit)");
  WCOLimitIDRNotional = py("WCO_Column_Helpers", context).get_limit_by_port_and_cr(object.Trade.Portfolio, "Exposure EQV IDR (notional)");
  WCOLimitUSDCredit = py("WCO_Column_Helpers", context).get_limit_by_port_and_cr(object.Trade.Portfolio, "Exposure USD (credit)");
  WCOLimitUSDNotional = py("WCO_Column_Helpers", context).get_limit_by_port_and_cr(object.Trade.Portfolio, "Exposure USD (notional)");
  WeekNumber = py("Total_Trade", context).weeknumber(object.Trade.ValueDay);
  WHT = py("Report_Python", context).taxWht(object);
  WITHGAINAMT = object.Trade.Nominal + object.Trade.Premium;
  WITHGAINAMTAFS = py("Report_Python", context).getJournalAmountTradeAfsTrd(object.Trade, "AFS");
  WITHGAINAMTTRD = py("Report_Python", context).getJournalAmountTradeAfsTrd(object.Trade, "TRD");
  WITHORIGCOSTAMT = select(WHT, 
  nil->object.Trade.Premium, 
  default->object.Trade.Premium + WHT);
  WITHSETTDATE = longFormAttrSettlementDate;
  Year = py("Total_Trade", context).year(object.Trade.TradeTime);
  YearNow = ;
  YesterdayPrice = ;
  YieldChange = ;
  yieldSuratBerharga = select(object.Trade.OptKey3AsEnum, 
  "REPO"->nil, 
  "REVREPO"->nil, 
  default->string(py("Report_Python", context).getYieldVal(object.Trade) / 100));
  yieldValueCustom = py("Report_Python", context).getYieldVal(object.Trade);
  YieldYST = ;
  YTD = ;
  YTDAndAccrued = float(thTPL.Value) + float(accrued.Value);
}

clx FTradeSheet [FExtensionAttribute] {
  AbsJournal = abs(object.Trade.Nominal);
}

clx FTradingSheet [FExtensionAttribute] {
  RateCustom = select(object.Trade.OptKey3AsEnum, 
  "FX"->object.Trade.Instrument.RecLeg.FirstRate);
  SpotLiabilities = 
# <ERROR> unexpected extra input, got 'Nominal' (at pos 18)
Description=Trade Nominal for trades categorized as Liabilities
  ExtensionAttribute=SpotLiabilities
  Format=Imprecise
  GroupLabel=FieldCustom
  LabelList=SPOT LIABILITIES
  Name=Spot Liabilities;
}

decls[FExtensionValue] {
  "Asset or Liability Grouper" ( "standard groupers.favorite groupers" ) "";
  "Buy Sell Grouper" ( "standard groupers.favorite groupers" ) "";
  "Cashflow Trade Grouper" ( "standard groupers.favorite groupers" ) "";
  "Invtype / Currency Grouper" ( "standard groupers.favorite groupers" ) "";
  "Invtype Grouper" ( "standard groupers.favorite groupers" ) "";
  "Month Deal Done Grouper" ( "standard groupers.favorite groupers" ) "";
  "Month Grouper" ( "standard groupers.favorite groupers" ) "";
  "Year / Month Deal Done Grouper" ( "standard groupers" ) "";
  "Year Deal Done Grouper" ( "standard groupers.favorite groupers" ) "";
}

clx FInstrumentAndTradesGrouperSubject [FExtensionValue] {
  Asset or Liability Grouper
MethodSplit;Trade.AssetOrLiabilityGrouper
...

  Buy Sell Grouper
MethodSplit;Trade.BuySellGrouper
...

  Invtype / Currency Grouper
Chained;Invtype Grouper, Currency 
...

  Invtype Grouper
MethodSplit;Trade.InvtypeGrouper
...

  Month Deal Done Grouper
MethodSplit;Trade.MonthDealDoneGrouper
...

  Month Grouper
MethodSplit;Trade.MonthGrouper
...

  Year / Month Deal Done Grouper
MethodSplit;Trade.YearDealDoneGrouper, Trade.MonthDealDoneGrouper
...

  Year Deal Done Grouper
MethodSplit;Trade.YearDealDoneGrouper
...

}

clx FMoneyFlowGrouperSubject [FExtensionValue] {
  Cashflow Trade Grouper
Attribute;MoneyFlow.Instrument.Trades.First.Oid
...

}

clx FObject [FExtensionValue] {
  NReportingSettings_default
ambAddress=127.0.0.1:9137
ambSender=AMBA_SENDER
ambSubject=AMBA/XMLREPORT
ambXmlMessage=True
clearSheetContent=False
compressXmlOutput=False
createDirectoryWithDate=True
dateFormat=%d%m%y
expiredPositions=True
fileName=
filePath=c:\
function=
gcInterval=10000
grouping=Default
htmlToFile=True
htmlToPrinter=False
htmlToScreen=True
includeFormattedData=True
includeRawData=True
includeFullData=False
includeDefaultData=False
instrumentParts=True
instrumentRows=True
maxNrOfFilesInDir=1000
multiThread=False
numberOfReports=1
orders=
overridePortfolioSheetSettings=
overrideTimeSheetSettings=
overrideTradeSheetSettings=
overwriteIfFileExists=True
param=
performanceStrategy=Periodic full GC to save memory
portfolios=
portfolioReportName=
portfolioRowOnly=False
preProcessXml=
printStyleSheet=FStandardCSS
printTemplate=FStandardTemplateClickable
reportName=
secondaryFileExtension=.csv
secondaryOutput=False
secondaryTemplate=NFTABTemplate
sheetSettings={}
snapshot=True
storedASQLQueries=
template=
timeBuckets=
tradeFilters=
tradeRowsOnly=True
trades=
updateInterval=60
workbook=
xmlToAmb=False
xmlToFile=False
zeroPositions=True
...

}

decls[FNumFormatter] {
}

clx FObject [FNumFormatter] {
  SixDecimalDetailedPercent =
  DenominatedValueDateTimeFormatter=
  DigitGrouping=
  DigitGroupingSymbol=
  Epsilon=1e-06
  Expression=
  Format=
  Fractions=
  InputScaleFactor=
  InputScaleFactorLimit=
  Inverse=
  MaximumSignificantDigits=
  MinimumSignificantDigits=
  Mnemonic='B'=1000000000.0:Input;'G'=1000000000.0:Input;'K'=1000.0:Input;'M'=1000000.0:Input;''=0.0:Output
  NumDecimals=6
  ScaleFactor=100.0
  ShowInf=false
  Tick=
  TruncateTrailingZeros=false
  USTreasuryInput=


  TwoDecimalDetailedPercent =
  DenominatedValueDateTimeFormatter=
  DigitGrouping=
  DigitGroupingSymbol=
  Epsilon=1e-06
  Expression=
  Format=
  Fractions=
  InputScaleFactor=
  InputScaleFactorLimit=
  Inverse=
  MaximumSignificantDigits=
  MinimumSignificantDigits=
  Mnemonic='B'=1000000000.0:Input;'G'=1000000000.0:Input;'K'=1000.0:Input;'M'=1000000.0:Input;''=0.0:Output
  NumDecimals=2
  ScaleFactor=100.0
  ShowInf=false
  Tick=
  TruncateTrailingZeros=false
  USTreasuryInput=


}

decls[FParameters] {
}

clx FObject [FParameters] {
  CustomReportSMTPParameters =
  EmailSender=ntcs_uat@devmandiri.co.id
  EmailUserName=ntcs_uat
  SecureSMTPConnection=True
  SMTPPassword=aaSF4c7j!
  SMTPPort=587
  SMTPServer=webmail.supporting.devmandiri.co.id


  CustomReportSMTPParameters_ict =
  EmailSender=felic0403@gmail.com
  EmailUserName=felic0403@gmail.com
  SecureSMTPConnection=True
  SMTPPassword=afezvvdipxctcbrl
  SMTPPort=587
  SMTPServer=smtp.gmail.com


}

decls[FPythonCode] {
  "Report_Python" ( "sheet columns.tradesheet" ) "";
}

clx FObject [FPythonCode] {
  BO27PythonFunctions

import acm

def testret():
    return "honey"

def getDate(obj):
    date_format = "%Y-%m-%d"
    from datetime import datetime
    try:
        Start_date = datetime.strptime(obj.Trade().Instrument().StartDate(), date_format)
    except:
        return obj.Trade().TradeTimeDateOnly()
    Trade_time = datetime.strptime(obj.Trade().TradeTimeDateOnly(), date_format)
    
    if Start_date > Trade_time:
        return obj.Trade().Instrument().StartDate()
    elif Start_date < Trade_time:
        return obj.Trade().TradeTimeDateOnly()
    else:
        return obj.Trade().Instrument().StartDate()

...

  BOa08PythonCode

import acm

def getPorS(obj):
    try:
        if obj > 0:
            return "Buy" 
        elif obj < 0:
            return "Sell"
        else:
            return ""
    except:
        return ""

def getPositive(a,b):
    try:
    
        if a > b:
            return a
        elif b > a:
            return b
        else:
            return None

    except:
        return None

def getRate(ccs, obj):
    try:
        mode = getPorS(ccs)
        
        if mode == "Buy":
            return obj.Trade().Instrument().RecLeg().LegType()
        if mode == "Sell":
            return obj.Trade().Instrument().PayLeg().LegType()
        else:
            return ""
    except:
        return ""

...

  CalculateAmortizedPythonCode

def get_amortized_value(trade):
    days = 0
    start = trade.AcquireDay()
    end = trade.Instrument().EndDate()
    diff = -(acm.Time.DateDifference(start, end))
    if "360" in trade.Instrument().RecLeg().AmortDaycountMethod():
        days = 360
    elif "365" in trade.Instrument().RecLeg().AmortDaycountMethod():
        days = 365
    elif "364" in trade.Instrument().RecLeg().AmortDaycountMethod():
        days = 364
    else:
        days = diff
    return trade.FaceValue() + (trade.FaceValue() * trade.Instrument().CouponRate() / 100 * diff/ days)

...

  codeFO43

import acm
import re
import datetime
from Report_Python import usd_price_mtm, idr_price_mtm

def get_leg_used(trade, isStart):
    start_leg, end_leg = None, None
    legs = trade.Instrument().Legs().AsArray()
    
    isBuy = float(trade.Instrument().NominalAmount()) >= 0
    for leg in legs:
        if (isBuy == True and leg.PayType() == "Receive") or (isBuy == False and leg.PayType() == "Pay"):
            start_leg = str(leg.Oid())
        else :
            end_leg = str(leg.Oid())
    
    leg_val = start_leg if isStart == True else end_leg
    return leg_val

def get_proj_val(trade, isStart=True, forAccrual=False):
    now_year = datetime.date.today().year
    year_used = now_year if forAccrual == False else now_year + 1
    
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    columnIdProj, columnIdDate, columnIdLegnbr, columnIdDays = ['Cash Analysis Projected', 'Cash Analysis Pay Day', 'Cash Analysis Leg Number', "Cash Analysis Period Days"]
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    
    leg_val  = get_leg_used(trade, isStart)
    leg_proj = []
    
    for mf in trade.MoneyFlows():
        date = str(calcSpace.CreateCalculation(mf, columnIdDate).Value()).split(" ")[0]
        year = date.split("-")[0]
        legnbr = str(calcSpace.CreateCalculation(mf, columnIdLegnbr).Value())
        
        if legnbr == leg_val and int(year) == year_used:
            proj = str(calcSpace.CreateCalculation(mf, columnIdProj).Value())
            days = str(calcSpace.CreateCalculation(mf, columnIdDays).Value())
            new_proj = round(float(re.findall("(\-*\d+\.*\d*)", proj)[0]), 2)
            leg_proj.append([date, new_proj, days])
    
    leg_proj.sort(key=lambda x:x[0])
    total_days = leg_proj[0][2]
    value = leg_proj[0][1]
    calcSpace.Clear()
    if forAccrual == False :
        return value 
    else : 
        return value, total_days

def get_value(trade, isStart):
    proj_val = get_proj_val(trade, isStart)
    
    try:
        return f'{proj_val:,}'
    except : 
        return "0"

def get_accrual(trade, isStart=True):
    proj_val, total_days = get_proj_val(trade, isStart, True)
    acrual_idr = round(float(proj_val) / float(total_days), 2)
    acrual_idr = f'{acrual_idr:,}'
    
    return acrual_idr

def get_cashflow(trade):
    start_val = get_proj_val(trade)
    end_val = get_proj_val(trade, False)
    cashflow = start_val + end_val
    
    return f'{cashflow:,}'

...

  CustomizedGrouper

import acm

def month(trade):
    
    createYMD = acm.Time.DateToYMD(trade.ValueDay())
    monthArray=["", "01. Januari", "02. Februari", "03. Maret", "04. April", "05. Mei", "06. Juni", "07. Juli", "08. Agustus", "09. September", "10. Oktober", "11. November", "12. Desember"]
    return monthArray[createYMD[1]]
    
def invtype(trade):
    
    type = trade.Portfolio().TypeChlItem().Name()
    if type == "FVOCI":
        return "AFS"
    elif type == "Amortised Cost":
        return "HTM"
    elif type == "FVTPL":
        return "TRD"
    else: return type

def monthDealDone(trade):
    
    if trade.Status()=="FO Confirmed":
        createTime = acm.Time.DateTimeFromTime(trade.CreateTime())
        createYMD = acm.Time.DateToYMD(createTime)
        monthArray=["", "01. Januari", "02. Februari", "03. Maret", "04. April", "05. Mei", "06. Juni", "07. Juli", "08. Agustus", "09. September", "10. Oktober", "11. November", "12. Desember"]
        return monthArray[createYMD[1]]
    else: return "Not FO Confirmed"

def yearDealDone(trade):
    
    if trade.Status()=="FO Confirmed":
        createTime = acm.Time.DateTimeFromTime(trade.CreateTime())
        createYMD = acm.Time.DateToYMD(createTime)
        return str(createYMD[0])
    else: return "Not FO Confirmed"

def AssetOrLiability1(trade):
    
    if trade.OptKey4().Name()=="CMT" or trade.OptKey3().Name()=="REVREPO":
        return "Assets"
    elif trade.OptKey4().Name()=="CMP" or trade.OptKey3().Name()=="REPO":
        return "Liabilities"

def AssetOrLiability(trade):
    asset_list = ["SUKBI", "SBBI", "REVREPO", "TD", "DF"]
    
    loan_optkey4_list = ["CMP", "OVP"]
    
    if trade.OptKey3().Name() in asset_list:
        return "Assets"
    
    elif trade.OptKey3().Name() == "SBI" and trade.OptKey4().Name() == "IDSV": # SBBI Valas
        return "Assets"
        
    elif trade.OptKey3().Name() == "TD" and trade.OptKey4().Name() == "BI":
        return "Assets"

    elif trade.OptKey3().Name() == "DL" and trade.OptKey4().Name() == "FASBI":
        return "Assets"
    
    elif trade.OptKey4().Name() == "LF":
        return "Liabilities"

    elif trade.OptKey3().Name() == "DL" and trade.OptKey4().Name() in loan_optkey4_list:
        return "Liabilities"
    
    elif trade.OptKey3().Name() == "REPO":
        return "Liabilities"
    elif trade.OptKey3().Name() == "DL":
        return "Assets"
    
    # FASBI --> DL FASBI
    
def tradeGrouper(trade):
    """ 
    Grouping sell trade and buy trades in local language
    """

    if trade.BoughtAsString() == "Buy":
        #Using core method to identify buy/sell
        return "Beli"
    else: return "Jual"

...

  FO16_ReportGenerator

from ICTMODULES_FOR_HTML_AND_XSLFO_GENERATOR import *
from datetime import datetime
import acm
import locale

locale.setlocale(locale.LC_ALL, '')  # Sets the thousand separator to be from Windows settings

acm_time = acm.Time
dateToday = acm_time.DateToday()
#dateToday = acm_time.DateFromYMD(2024, 8, 13)
firstDate = acm_time.FirstDayOfYear(dateToday)
lastDate = acm_time.LastDayOfYear(dateToday)
CURRENT_YEAR = acm_time.DateToYMD(dateToday).First()

calendar = acm.FCalendar['Jakarta']
workingDays = calendar.BankingDaysBetween(firstDate, lastDate)
currentWorkingDays = calendar.BankingDaysBetween(firstDate, dateToday)

html_gen = HTMLGenerator()
div_side_by_side = '<tr>'
end_div_side_by_side = '</tr>'
additional_style = """
table {
        margin-left: 10px;
    }
#title {
    padding: 0px 20px 0px 20px;
    width: 100%;
    margin: 0px 0px 20px 50px;
    font-size: 24pt;
    font-weight: bold;
    background:#002060;
    color:white;
}
.blue-table {
    background: #ddebf7;
    color: black;
    border: 0px;
    margin: 0px;        
}
.green-table {
    background: #e2efda;
    color: black;
    border: 0px;
    margin: 0px;
}
.data-table {
    border: 1px black double;
    border-bottom: 1px black double;
    border-collapse: none;
}
"""

'''
def get_price_in_idr(val,curr):
    if curr == 'USD':
        return val
    else:
        price = acm.FPrice.Select(f"currency={curr} and market='REFINITIV_SPOT' and instrument='USD'")
        if len(price) > 0:
            nominal = val * price.First().Settle()
            if str(nominal) == 'nan':
                return 0
            return nominal  
        else:
            for price in acm.FPrice.Select(f"instrument='USD' and currency={curr}"):
                nominal = val * price.Settle() 
                if str(nominal) == 'nan':
                    return 0
                return nominal
            return 0
'''  
            
def get_trader_data(csv_path):
    trader_data = {}
    csv_file = open(csv_path, "r").readlines()
    sheets = iter(['YTD', 'Today'])
    sheet, skipped_line = next(sheets), 1
    for line_num, line in enumerate(csv_file, start = 1):
        if skipped_line < 4:
            skipped_line += 1
            continue 
        if line == "\n" and line_num != 1: # Reset Numbering
            sheet = next(sheets)
            skipped_line = 1
            skipped_line += 1
            continue
        header, trader, optkey3, currency, nominal, fbi, _ = line.split(";")
        # Define the FBI for Today and YTD        
        if trader == '' and optkey3 == '' and acm.FUser[header]: # If YTD
            fbi = fbi if fbi != '' else "0" 
            fbi = float(fbi.replace(",", ""))
            sum_nominal = nominal if nominal != '' else "0" 
            sum_nominal = float(sum_nominal.replace(",", ""))
            if header not in trader_data.keys(): #If came up with new Trader 
                trader_data[header] = {
                    'FX_YTD': 0, 
                    'MDS_YTD': 0, 
                    'frequency_YTD': 0, 
                    'FX_TOD': 0, 
                    'MDS_TOD': 0, 
                    'frequency_TOD': 0, 
                    'FBI_YTD': fbi, 
                    'FBI_TOD': 0, 
                    'TOTAL_YTD': sum_nominal, 
                    'TOTAL_TOD': 0, 
                    'TARGET_YTD': 0, 
                    'TARGET_TOD': 0, 
                    'REAL_YTD': 0, 
                    'REAL_TOD': 0,
                    'TARGET_YEAR': 0
                }
            elif (header in trader_data.keys()) and (sheet == 'Today'):
                trader_data[header]['FBI_TOD'] = fbi
                trader_data[header]['TOTAL_TOD'] = sum_nominal
        else:
            nominal = nominal if nominal != '' else "0"
            nominal = float(nominal.replace(",", ""))
            if (sheet == 'Today') and (optkey3 == "FX"):
                trader_data[trader]['FX_TOD'] += nominal
                trader_data[trader]['frequency_TOD'] += 1
            elif (sheet == 'Today') and (optkey3 == "SP"):
                trader_data[trader]['MDS_TOD'] += nominal
                trader_data[trader]['frequency_TOD'] += 1
            elif (optkey3 == "FX") and (sheet == 'YTD'):
                trader_data[trader]['FX_YTD'] += nominal
                trader_data[trader]['frequency_YTD'] += 1
            elif (optkey3 == "SP") and (sheet == 'YTD'):
                trader_data[trader]['MDS_YTD'] += nominal
                trader_data[trader]['frequency_YTD'] += 1
    
    hierarchy = acm.FHierarchy["Annual Target Trader HO"]
    for node in hierarchy.HierarchyNodes():
        if len(node.HierarchyDataValues()) > 0:
            data_values = node.HierarchyDataValues()
            trader_name = data_values[0].DataValue()
            target_year = data_values[1].DataValue()
            if not acm.FUser[trader_name]:
                trader_name = target_year
                target_year = trader_name
            if trader_data.get(trader_name, -1) == -1:
                continue
            
            target_year = int(target_year)
            trader_data[trader_name]['TARGET_YEAR'] = target_year
            trader_data[trader_name]['TARGET_YTD'] = target_year * currentWorkingDays / workingDays
            trader_data[trader_name]['TARGET_TOD'] = (target_year - ( trader_data[trader_name]['TOTAL_YTD'] - trader_data[trader_name]['TOTAL_TOD'] )) / (workingDays - currentWorkingDays)
            trader_data[trader_name]['REAL_YTD'] = 100 * trader_data[trader_name]['TOTAL_YTD'] / trader_data[trader_name]['TARGET_YTD'] 
            trader_data[trader_name]['REAL_TOD'] = 100 * trader_data[trader_name]['TOTAL_TOD'] / trader_data[trader_name]['TARGET_TOD'] 

    return trader_data
    
    
def prepare_title(html_content):
    html_content += "<td style='border:0px;'>"
    header_list = [""]
    html_content = html_gen.prepare_html_table(html_content,header_list, '', "style='border:0px;'")
    row_data = [["DASHBOARD PERFORMANCE CLIENT DEALING"]]
    html_content = html_gen.add_data_row(html_content, row_data, "id='title'", "colspan='20'")
    hhtml_content = html_gen.close_html_table(html_content) 
    html_content += "</td>"
    return html_content
    
    
def prepare_workdays_table(html_content):
    header_list = ["Today", get_current_date("/")]
    row_data = [[f"WD {CURRENT_YEAR}", workingDays], ["Current WD",  currentWorkingDays]]  
    html_content += "<td colspan='2' style='border:0px;' colspan='2'>"
    html_content = html_gen.prepare_html_table(html_content, header_list, table_styling="class='blue-table'")
    html_content = html_gen.add_data_row(html_content, row_data)
    html_content = html_gen.close_html_table(html_content)
    html_content += "</td>"
    return html_content
    
    
def prepare_vol_today_table(html_content):
    #TODO: VOLUME TODAY, FREQ TODAY
    header_list = ["Volume Today", "VOLUME_TOD"]
    row_data = [["Target Volume Today", "TARGET_VOLUME_TODAY"], ["Freq Today", "FREQ_TOD"]]
    html_content += "<td colspan='2' style='border:0px;'>"
    html_content = html_gen.prepare_html_table(html_content, header_list, table_styling="class='blue-table'")
    html_content = html_gen.add_data_row(html_content, row_data)
    html_content = html_gen.close_html_table(html_content)
    html_content += "</td>"
    return html_content
    
    
def prepare_vol_yearly_table(html_content):
    header_list = [f"Target Vol {CURRENT_YEAR}", "TARGET_VOLUME_YEAR"]
    row_data = [["Target Volume YTD", "TARGET_VOLUME_YTD"], ["Volume YTD", "VOLUME_YTD"]]
    html_content += "<td colspan='2' style='border:0px;'>"
    html_content = html_gen.prepare_html_table(html_content, header_list, table_styling="class='green-table'")
    html_content = html_gen.add_data_row(html_content, row_data)
    html_content = html_gen.close_html_table(html_content)
    html_content += "</td>"
    return html_content    
    
    
def prepare_percent_yearly_table(html_content):
    header_list = [f"% Target {CURRENT_YEAR}", "PCT_TARGET_YEAR"]
    row_data = [["% Target YTD", "PCT_TARGET_YTD"]]
    html_content += "<td colspan='2' style='border:0px;'>"
    html_content = html_gen.prepare_html_table(html_content, header_list, table_styling="class='green-table'")
    html_content = html_gen.add_data_row(html_content, row_data)
    html_content = html_gen.close_html_table(html_content)
    html_content += "</td>"
    return html_content   

 
def prepare_data_table(html_content, csv_path):
    trader_data = get_trader_data(csv_path)
    traders_row = []    
    ytd_fx_row_data = []
    ytd_mds_row_data = []
    ytd_total_row_data = []
    ytd_frequency_row_data = []
    today_fx_row_data = []
    today_mds_row_data = []
    today_total_row_data = []
    today_frequency_row_data = []
    fbi_tod_row_data = []    
    fbi_ytd_row_data = []
    target_tod_row_data = []    
    target_ytd_row_data = []
    realisasi_tod_row_data = []
    realisasi_ytd_row_data = []
    target_year_row_data = []
    for keys, value in trader_data.items():
        traders_row.append(keys)
        ytd_fx_row_data.append(abs(value['FX_YTD']))
        ytd_mds_row_data.append(abs(value['MDS_YTD']))
        ytd_total_row_data.append(abs(value['TOTAL_YTD']))
        ytd_frequency_row_data.append(abs(value['frequency_YTD']))
        today_fx_row_data.append(abs(value['FX_TOD']))
        today_mds_row_data.append(abs(value['MDS_TOD']))
        today_total_row_data.append(abs(value['TOTAL_TOD']))
        today_frequency_row_data.append(value['frequency_TOD'])
        fbi_ytd_row_data.append(value['FBI_YTD'])
        fbi_tod_row_data.append(value['FBI_TOD'])
        target_ytd_row_data.append(value['TARGET_YTD'])
        target_tod_row_data.append(value['TARGET_TOD'])
        realisasi_ytd_row_data.append(value['REAL_YTD'])
        realisasi_tod_row_data.append(value['REAL_TOD'])
        target_year_row_data.append(value['TARGET_YEAR'])
    effective_from = firstDate
    effective_to = dateToday
    formatted_from = datetime.strptime(effective_from, '%Y-%m-%d').strftime('%d-%b-%y')
    formatted_to = datetime.strptime(effective_to, '%Y-%m-%d').strftime('%d-%b-%y')
    header_list = [""]
    header_list.extend(traders_row)
    html_content = html_gen.prepare_html_table(html_content, header_list, header_style="colspan='2' style='text-align:left'", table_styling="class='data-table'")
    date_from = ["Effective Date From"]
    date_from.extend(formatted_from for _ in range(len(traders_row)))
    date_to = ["Effective Date To"]
    date_to.extend(formatted_to for _ in range(len(traders_row)))
    row_data = [date_from, date_to]
    html_content = html_gen.add_data_row(html_content, row_data, "style='text-align:right'", "colspan='2'")
    row_data = [locale.format_string("%.2f", x, grouping=True) if str(x) != "nan" else 0 for x in ytd_fx_row_data]
    row_data = [["YTD", "FX"] + row_data]
    html_content = html_gen.add_data_row(html_content, row_data, '', "colspan='2'")
    html_content = html_content.replace("<td colspan='2'>YTD</td>", "<td rowspan='7'>YTD</td>")
    html_content = html_content.replace("<td colspan='2'>FX</td>", "<td>FX</td>")
    row_data = [locale.format_string("%.2f", x, grouping=True) if str(x) != "nan" else 0 for x in ytd_mds_row_data]
    row_data = [["MDS"] + row_data]
    html_content = html_gen.add_data_row(html_content, row_data, '', "colspan='2'")
    html_content = html_content.replace("<td colspan='2'>MDS</td>", "<td>MDS</td>")
    row_data = ["Total"]
    row_data = [locale.format_string("%.2f", x, grouping=True) if str(x) != "nan" else 0 for x in ytd_total_row_data]
    row_data = [["Total"] + row_data]
    html_content = html_gen.add_data_row(html_content, row_data, '', "colspan='2'")
    html_content = html_content.replace("<td colspan='2'>Total</td>", "<td>Total</td>")
    row_data = [locale.format_string("%.2f", x, grouping=True) if str(x) != "NaN" else 0 for x in target_ytd_row_data]
    row_data = [["Target"] + row_data]
    html_content = html_gen.add_data_row(html_content, row_data, '', "colspan='2'")
    html_content = html_content.replace("<td colspan='2'>Target</td>", "<td>Target</td>")
    row_data = [locale.format_string("%.2f", x, grouping=True) + "%" if str(x) != "nan" else "0.00%" for x in realisasi_ytd_row_data]
    row_data = [["Realisasi (%)"] + row_data]
    html_content = html_gen.add_data_row(html_content, row_data, '', "colspan='2'")
    html_content = html_content.replace("<td colspan='2'>Realisasi (%)</td>", "<td>Realisasi (%)</td>")
    row_data = [locale.format_string("%.0f", x, grouping=True) if str(x) != "nan" else 0 for x in ytd_frequency_row_data]
    row_data = [["Frequency"] + row_data]
    html_content = html_gen.add_data_row(html_content, row_data, '', "colspan='2'")
    html_content = html_content.replace("<td colspan='2'>Frequency</td>", "<td>Frequency</td>")
    row_data = [locale.format_string("%.2f", x, grouping=True) if str(x) != "NaN" else 0 for x in fbi_ytd_row_data]
    row_data = [["FBI"] + row_data]
    html_content = html_gen.add_data_row(html_content, row_data, '', "colspan='2'")
    html_content = html_content.replace("<td colspan='2'>FBI</td>", "<td>FBI</td>")
    """ Today section of data table """
    row_data = [locale.format_string("%.2f", x, grouping=True) if str(x) != "nan" else 0 for x in today_fx_row_data]
    row_data = [["Today", "FX"] + row_data]
    html_content = html_gen.add_data_row(html_content, row_data, '', "colspan='2'")
    html_content = html_content.replace("<td colspan='2'>Today</td>", "<td rowspan='7'>Today</td>")
    html_content = html_content.replace("<td colspan='2'>FX</td>", "<td>FX</td>")
    row_data = [locale.format_string("%.2f", x, grouping=True) if str(x) != "nan" else 0 for x in today_mds_row_data]
    row_data = [["MDS"] + row_data]
    html_content = html_gen.add_data_row(html_content, row_data, '', "colspan='2'")
    html_content = html_content.replace("<td colspan='2'>MDS</td>", "<td>MDS</td>")
    row_data = [locale.format_string("%.2f", x, grouping=True) if str(x) != "nan" else 0 for x in today_total_row_data]
    row_data = [["Total"] + row_data]
    html_content = html_gen.add_data_row(html_content, row_data, '', "colspan='2'")
    html_content = html_content.replace("<td colspan='2'>Total</td>", "<td>Total</td>")
    row_data = [locale.format_string("%.2f", x, grouping=True) if str(x) != "NaN" else 0 for x in target_tod_row_data]
    row_data = [["Target"] + row_data]
    html_content = html_gen.add_data_row(html_content, row_data, '', "colspan='2'")
    html_content = html_content.replace("<td colspan='2'>Target</td>", "<td>Target</td>")
    row_data = [locale.format_string("%.2f", x, grouping=True) + "%" if str(x) != "nan" else "0.00%" for x in realisasi_tod_row_data]
    row_data = [["Realisasi (%)"] + row_data]
    html_content = html_gen.add_data_row(html_content, row_data, '', "colspan='2'")
    html_content = html_content.replace("<td colspan='2'>Realisasi (%)</td>", "<td>Realisasi (%)</td>")
    row_data = [locale.format_string("%.0f", x, grouping=True) if str(x) != "nan" else 0 for x in today_frequency_row_data]
    row_data = [["Frequency"] + row_data]
    html_content = html_gen.add_data_row(html_content, row_data, '', "colspan='2'")
    html_content = html_content.replace("<td colspan='2'>Frequency</td>", "<td>Frequency</td>")
    row_data = [locale.format_string("%.2f", x, grouping=True) if str(x) != "nan" else 0 for x in fbi_tod_row_data]
    row_data = [["FBI"] + row_data]
    html_content = html_gen.add_data_row(html_content, row_data, '', "colspan='2'")
    html_content = html_content.replace("<td colspan='2'>FBI</td>", "<td>FBI</td>")
    row_data = [f"Target {CURRENT_YEAR} (USD)"]
    row_data.extend([locale.format_string("%.0f", x, grouping=True) if str(x) != "nan" else 0 for x in target_year_row_data])
    row_data = [[x if str(x) != "nan" else 0 for x in row_data]]
    html_content = html_gen.add_data_row(html_content, row_data, '', "colspan='2'")
    html_content = html_gen.close_html_table(html_content)
    
    html_content = html_content.replace("<th >VOLUME_TOD</th>", f"<th>{locale.format_string('%.2f', sum(today_total_row_data), grouping=True)}</th>")
    html_content = html_content.replace("<td >TARGET_VOLUME_TODAY</td>", f"<td>{locale.format_string('%.2f', sum(target_tod_row_data), grouping=True)}</td>")
    html_content = html_content.replace("<td >FREQ_TOD</td>", f"<td>{locale.format_string('%.0f', sum(today_frequency_row_data), grouping=True)}</td>")  
 
    html_content = html_content.replace("<th >TARGET_VOLUME_YEAR</th>", f"<th>{locale.format_string('%.2f', sum(target_year_row_data), grouping=True)}</th>")
    html_content = html_content.replace("<td >TARGET_VOLUME_YTD</td>", f"<td>{locale.format_string('%.2f', sum(target_ytd_row_data), grouping=True)}</td>")
    html_content = html_content.replace("<td >VOLUME_YTD</td>", f"<td>{locale.format_string('%.2f', sum(ytd_total_row_data), grouping=True)}</td>")
    
    html_content = html_content.replace("<th >PCT_TARGET_YEAR</th>", f"<th>{locale.format_string('%.2f', 100 * sum(target_ytd_row_data) / sum(target_year_row_data), grouping=True) + '%'}</th>")
    html_content = html_content.replace("<td >PCT_TARGET_YTD</td>", f"<td>{locale.format_string('%.2f', 100 * sum(ytd_total_row_data) / sum(target_ytd_row_data), grouping=True) + '%'}</td>")
    
    return html_content
    
    
def main(csv_path, report_name):
    title_style = """
        .title {
            color: #800000;
            text-align: left;   
        }
        .subtitle-1 {
            color: #0000FF;
            font-size: 20px;
            text-align: left;   
        }
        .subtitle-2 {
            color: #000080;
            font-size: 16px;
            text-align: left;   
        }
    """    
    titles = ["Trade Number", "Trader/Dealer", "New CTPTY Reff", "New CTPTY CIF", "Registration Status"]
    file_path = csv_path.split(".")[:-1]
    file_path = ".".join(file_path)
    file_path = file_path.split("\\")[:-2]
    file_path = "\\".join(file_path)
    html_content = html_gen.create_base_html_content("", additional_styles=additional_style)
    html_content += "<table>"
    html_content += "<tr></tr>"
    html_content += div_side_by_side
    html_content = prepare_title(html_content)
    html_content += "<td colspan='20' style='border:0px;'></td>"
    html_content += end_div_side_by_side
    html_content += div_side_by_side
    html_content = prepare_workdays_table(html_content)
    html_content += "<td style='border:0px;' colspan='2'></td>"
    html_content = prepare_vol_today_table(html_content)
    html_content += "<td style='border:0px;' colspan='2'></td>"
    html_content = prepare_vol_yearly_table(html_content)
    html_content += "<td style='border:0px;' colspan='2'></td>"
    html_content = prepare_percent_yearly_table(html_content)
    html_content += end_div_side_by_side
    html_content += "<tr><td colspan='20' style='border:0px;'></td></tr>"
    html_content = prepare_data_table(html_content, csv_path)
    html_content += "</table>"
    html_content = html_content.replace("nan", "0")    
    html_content = html_gen.close_html_table(html_content)
    current_date = get_current_date("")
    current_hour = get_current_hour("")
    report_name = "FO16_TAS_Report_Dashboard_Performance_Client"
    file_url = html_gen.create_html_file(html_content, file_path, report_name+" "+current_date+current_hour, current_date, True)
    generate_file_for_other_extension(file_url , ".xls")


...

  FO47_Target_Monitoring
import acm,csv
from ICTMODULES_FOR_HTML_AND_XSLFO_GENERATOR import *

current_date = get_current_date("")
current_hour = get_current_hour("")
date_today = acm.Time.DateToday()
date,month,year = current_date[:2],current_date[2:4],current_date[4:]



def get_items(csvpath,list_port):
    current_port = None
    items = {
            'Banknotes Interbank':[],
            'Banknotes Branch Settlement':[]
            }
    with open(csvpath, 'r') as csvfile:
        lines = csvfile.readlines()
        for line in lines:
            # Splitting each line by comma, assuming CSV format
            row = line.strip().split(',')
            if row:
                for portname in items:
                    if row[0].startswith(portname):
                        current_port = row[0]
                        items[current_port].append(row)
                        
    
    return items
        


def main(csv_path, report_name):
    html_gen = HTMLGenerator()
    xsl_gen = XSLFOGenerator()

    style = """
    .title {
        color:black;
        text-align:left;
    }
    .bold {
        font-weight:bold;
    }
    """

    portnames = ['Banknotes Interbank','Banknotes Branch Settlement']
    csv_file = get_items(csv_path,portnames)
    
    html_content = html_gen.create_base_html_content('TRC BN Report - Target Monitoring as per. '+ date_today,style)
    xsl_fo_content = xsl_gen.prepare_xsl_fo_content('TRC BN Report - Target Monitoring as per. '+ date_today)    
    
    html_content = html_gen.prepare_html_table(html_content,'')
    xsl_fo_content += """<fo:table margin-bottom="50px" text-align="center" display-align="center" inline-progression-dimension="auto" table-layout="auto"><fo:table-body>"""

    html_content = html_gen.open_table_row(html_content)
    xsl_fo_content = xsl_gen.prepare_xsl_row(xsl_fo_content)
        
    html_content = html_gen.add_cell_data(html_content,'P&L','colspan=8 class="bold"')
    xsl_fo_content = xsl_gen.add_xsl_column(xsl_fo_content,'P&#38;L','number-columns-spanned="8" font-weight="bold"')
    
    html_content = html_gen.add_cell_data(html_content,'Volume in USD (in million USD)','colspan=8 class="bold"')
    xsl_fo_content = xsl_gen.add_xsl_column(xsl_fo_content,'Volume in USD (in million USD)','number-columns-spanned="8" font-weight="bold"')

    html_content = html_gen.close_table_row(html_content)
    xsl_fo_content = xsl_gen.close_xsl_row(xsl_fo_content)

    list_subtitle = ['Portfolio', 'Today','MTD','YTD','Target MTD','Target MTD%','Target YTD','Target YTD%','Today','MTD','YTD','Target MTD','Target MTD%','TargetYTD','Target YTD%']
    
    html_content = html_gen.add_data_row(html_content,[list_subtitle])
    xsl_fo_content = xsl_gen.add_xsl_data_row(xsl_fo_content,[list_subtitle])
    
    for each_port,all_items in csv_file.items():
        portfolio = each_port
        todaypnl,mtdpnl,ytdpnl,targetMTDPnL,targetYTDPnL,mtdpnlpercent,ytdpnlpercent = 0,0,0,0,0,0,0
        todayvol,mtdvol,ytdvol,targetMTDVolume,targetYTDVolume,mtdvolpercent,ytdvolpercent = 0,0,0,0,0,0,0
        for each_item in all_items:
            if each_item[1].lower() != 'nan':
                todaypnl += float(each_item[1])/1000000
            if each_item[2].lower() != 'nan':
                mtdpnl += float(each_item[2])/1000000
            if each_item[3]:
                targetMTDPnL = int(each_item[3].split('.')[0])
            if each_item[4].lower() != 'nan':
                ytdpnl += float(each_item[4])/1000000
            if each_item[5]:
                targetYTDPnL = int(each_item[5].split('.')[0])
            if each_item[6].lower() != 'nan':
                todayvol += float(each_item[6])/1000000
            if each_item[7].lower() != 'nan':
                mtdvol += float(each_item[7])/1000000
            if each_item[8]:
                targetMTDVolume = int(each_item[8].split('.')[0])
            if each_item[9].lower() != 'nan':
                ytdvol += float(each_item[9])/1000000
            if each_item[10]:
                targetYTDVolume = int(each_item[10].split('.')[0])
                
        if abs(targetMTDPnL) > 0:
            mtdpnlpercent = abs(mtdpnl/targetMTDPnL*100)
        if abs(targetYTDPnL) > 0:
            ytdpnlpercent = abs(ytdpnl/targetYTDPnL*100)
        if abs(targetMTDVolume) > 0:
            mtdvolpercent = abs(mtdvol/targetMTDVolume*100)
        if abs(targetYTDVolume) > 0:
            ytdvolpercent = abs(ytdvol/targetYTDVolume*100)
        
        html_content = html_gen.open_table_row(html_content)
        xsl_fo_content = xsl_gen.prepare_xsl_row(xsl_fo_content)
            
        html_content = html_gen.add_cell_data(html_content,portfolio)
        xsl_fo_content = xsl_gen.add_xsl_column(xsl_fo_content,portfolio)
        
        html_content = html_gen.add_cell_data(html_content,f"{round(todaypnl,2):,}")
        xsl_fo_content = xsl_gen.add_xsl_column(xsl_fo_content,f"{round(todaypnl,2):,}")
        
        html_content = html_gen.add_cell_data(html_content,f"{round(mtdpnl,2):,}")
        xsl_fo_content = xsl_gen.add_xsl_column(xsl_fo_content,f"{round(mtdpnl,2):,}")
        
        html_content = html_gen.add_cell_data(html_content,f"{round(ytdpnl,2):,}")
        xsl_fo_content = xsl_gen.add_xsl_column(xsl_fo_content,f"{round(ytdpnl,2):,}")
        
        html_content = html_gen.add_cell_data(html_content,f"{targetMTDPnL:,}")
        xsl_fo_content = xsl_gen.add_xsl_column(xsl_fo_content,f"{targetMTDPnL:,}")
        
        html_content = html_gen.add_cell_data(html_content,f"{round(mtdpnlpercent,2):,}")
        xsl_fo_content = xsl_gen.add_xsl_column(xsl_fo_content,f"{round(mtdpnlpercent,2):,}")
        
        html_content = html_gen.add_cell_data(html_content,f"{targetYTDPnL:,}")
        xsl_fo_content = xsl_gen.add_xsl_column(xsl_fo_content,f"{targetYTDPnL:,}")
        
        html_content = html_gen.add_cell_data(html_content,f"{round(ytdpnlpercent,2):,}")
        xsl_fo_content = xsl_gen.add_xsl_column(xsl_fo_content,f"{round(ytdpnlpercent,2):,}")
        
        html_content = html_gen.add_cell_data(html_content,f"{round(todayvol,2):,}")
        xsl_fo_content = xsl_gen.add_xsl_column(xsl_fo_content,f"{round(todayvol,2):,}")
        
        html_content = html_gen.add_cell_data(html_content,f"{round(mtdvol,2):,}")
        xsl_fo_content = xsl_gen.add_xsl_column(xsl_fo_content,f"{round(mtdvol,2):,}")
        
        html_content = html_gen.add_cell_data(html_content,f"{round(ytdvol,2):,}")
        xsl_fo_content = xsl_gen.add_xsl_column(xsl_fo_content,f"{round(ytdvol,2):,}")
        
        html_content = html_gen.add_cell_data(html_content,f"{targetMTDVolume:,}")
        xsl_fo_content = xsl_gen.add_xsl_column(xsl_fo_content,f"{targetMTDVolume:,}")
        
        html_content = html_gen.add_cell_data(html_content,f"{round(mtdvolpercent,2):,}")
        xsl_fo_content = xsl_gen.add_xsl_column(xsl_fo_content,f"{round(mtdvolpercent,2):,}")
        
        html_content = html_gen.add_cell_data(html_content,f"{targetYTDVolume:,}")
        xsl_fo_content = xsl_gen.add_xsl_column(xsl_fo_content,f"{targetYTDVolume:,}")
        
        html_content = html_gen.add_cell_data(html_content,f"{round(ytdvolpercent,2):,}")
        xsl_fo_content = xsl_gen.add_xsl_column(xsl_fo_content,f"{round(ytdvolpercent,2):,}")
        
        html_content = html_gen.close_table_row(html_content)
        xsl_fo_content = xsl_gen.close_xsl_row(xsl_fo_content)
        
        
    html_content = html_gen.close_html_table(html_content)
    xsl_fo_content = xsl_gen.close_xsl_table(xsl_fo_content)
    
    file_path = csv_path.split("\\report")[0]
    
    html_file = html_gen.create_html_file(html_content, file_path, report_name+" "+current_date+current_hour, current_date, True)
    xsl_fo_file = xsl_gen.create_xsl_fo_file(report_name+" "+current_date+current_hour,file_path, xsl_fo_content, current_date)
    
    output_file = ['.xls','.pdf']
    for each_output in output_file:
        if each_output != '.pdf':
            generate_file_for_other_extension(html_file, '.pdf')
        else:
            generate_pdf_from_fo_file(xsl_fo_file)
    

...

  HoldingPeriodCalculation

import acm
from FLogger import FLogger
from collections import deque

configNotification = (
    acm.GetDefaultContext()
    .GetExtension(acm.FParameters, acm.FObject, "NotificationSettings")
    .Value()
)
SMTP_SERVER = configNotification["SMTP_SERVER"]

HoldingPeriodSetting = (
    acm.GetDefaultContext()
    .GetExtension(acm.FParameters, acm.FObject, "HoldingPeriodParameters")
    .Value()
)

# INFO/LOG: 1, DEBUG/DLOG: 2, WARN: 3, ERROR/ELOG: 4
LOG_LEVEL = int(HoldingPeriodSetting["logger_level"].Text())
MAIL_SENDER = HoldingPeriodSetting["mail_sender"].Text()
MAIL_SERVER = HoldingPeriodSetting["mail_server"].Text()
MAIL_SUBJECT_PREFIX = HoldingPeriodSetting["mail_subject"].Text()
MINHOLDING_TASK = HoldingPeriodSetting["minhold_task"].Text()
STATUS_LIST = "('FO Confirmed', 'BO Confirmed', 'BO-BO Confirmed')"

logger = FLogger.GetLogger("HoldingPeriodUtils")
logger.Reinitialize(level=LOG_LEVEL)

remPosHoldingPeriod = dict()


def remainingPositionHoldingPeriod(singleInsTrades):
    """
    Function for column "Holding Period Remaining Position"
    
    Parameters
    ----------
    singleInsTrades : FSingleInstrumentAndTrades
    
    Returns
    -------
    None, (Re)Build the dictionary of position of Port/Ins per buy trade date.
    And fetch relevant position per FSingleInstrumentAndTrades line.
    
    """
    if singleInsTrades.Class() == acm.FSingleInstrumentAndTrades:
        global remPosHoldingPeriod
        buyTradeDate = singleInsTrades.Grouping().GroupingValue()
        port = singleInsTrades.Portfolio()
        ins = singleInsTrades.Instrument()
        positionKey = f"{port.Name()}-{ins.Name()}"
        logger.DLOG("-"*80)
        logger.DLOG(f"remainingPositionHoldingPeriod::calculate position for {positionKey}")
        if positionKey in remPosHoldingPeriod:
            if buyTradeDate in remPosHoldingPeriod[positionKey]:
                pass
            else:
                _calculatePosDict(remPosHoldingPeriod, port, ins, positionKey)
        else:
            _calculatePosDict(remPosHoldingPeriod, port, ins, positionKey)
            
        if buyTradeDate in remPosHoldingPeriod[positionKey]:
            return remPosHoldingPeriod[positionKey][buyTradeDate]
    
    return None
    

def _calculatePosDict(remPosHoldingPeriod, portfolio, instrument, positionKey):
    """ 
    Build the dictionary of position of Port/Ins per buy trade date.
    
    Parameters
    ----------
    remPosHoldingPeriod : dict, global variable containing pos per trade date
    portfolio : FPortfolio
    instrument : FInstrument
    positionKey : String
        defining part of the position "port-ins"

    Returns
    -------
    None, it is modifying the content of global dict remPosHoldingPeriod
    
    """
    tradeCollectionQuery = f"portfolio = '{portfolio.Oid()}' AND instrument = '{instrument.Oid()}' AND status in {STATUS_LIST}"
    tradeCollection = acm.FTrade.Select(tradeCollectionQuery).SortByProperty("TradeTime", ascending=True)
    buyTradesInCollection = [t for t in tradeCollection if t.Quantity() > 0]
    sellTradesInCollection = [t for t in tradeCollection if t.Quantity() < 0]
    remPosHoldingPeriod[positionKey] = dict()
    for t in buyTradesInCollection:
        d = tradeTimeDateOnly(t)
        if d in remPosHoldingPeriod[positionKey]:
            remPosHoldingPeriod[positionKey][d] += t.Position()
        else:
            remPosHoldingPeriod[positionKey][d] = t.Position()
    logger.DLOG(f"_calculatePosDict::initial position dictionary with no sell tradeds:\n{remPosHoldingPeriod}")
    
    for st in sellTradesInCollection:
        logger.DLOG(f"_calculatePosDict::finding matches buy trade for sell trade {st.Oid()}, for calculation")
        matchedBT, partialMatchedBTPos = _findMatchesForSellTrade(st)
        logger.DLOG(f"_calculatePosDict::trade {st.Oid()} closing trade {[t.Oid() for t in matchedBT]}")
        if partialMatchedBTPos:
            logger.DLOG(f"_calculatePosDict::remaining partially matched position {partialMatchedBTPos[1]}")
            for bt in matchedBT:
                d = tradeTimeDateOnly(bt)
                if bt == partialMatchedBTPos[0]:
                    remPosHoldingPeriod[positionKey][d] -= partialMatchedBTPos[1]
                else:
                    remPosHoldingPeriod[positionKey][d] -= bt.Position()
                remPosHoldingPeriod[positionKey][d] = max(remPosHoldingPeriod[positionKey][d], 0.0)
        else:
            for bt in matchedBT:
                d = tradeTimeDateOnly(bt)
                remPosHoldingPeriod[positionKey][d] -= bt.Position()
                remPosHoldingPeriod[positionKey][d] = max(remPosHoldingPeriod[positionKey][d], 0.0)
    logger.DLOG(f"_calculatePosDict::updated position dictionary including sell trades:\n{remPosHoldingPeriod}")
                    

def tradeTimeDateOnly(trade):
    """ 
    Get the date part from FTrade
    
    Parameters
    ----------
    trade : FTrade

    Returns
    -------
    TradeDate : TradeTime method returning "DATE TIME", take the DATE part only
    
    """
    
    return trade.TradeTime().split(" ")[0]


def tradeHoldingPeriodGrouper(trade):
    """ 
    Grouping sell trade and matched buy trades into one trade date group
    
    Parameters
    ----------
    trade : FTrade

    Returns
    -------
    list : for sell trade, collection of buy trade date that it matched. 
           buy trade return the trade date, and zero position return "No Position"
           
    """
    
    pos = _calculatePosition(trade)
    if pos == 0:
        logger.DLOG(f"No position on trade {trade.Oid()}")
        return ["No Position"]
        
    if trade.BoughtAsString() == "Buy":
        return [tradeTimeDateOnly(trade)]
        
    logger.DLOG(f"tradeHoldingPeriodGrouper::finding matches trade for trade {trade.Oid()}, for grouper")
    matchedBuyTrades, _ = _findMatchesForSellTrade(trade)
    
    return [tradeTimeDateOnly(t) for t in matchedBuyTrades]
    

def _calculatePosition(trade):
    tradeQuery = f"portfolio = '{trade.Portfolio().Oid()}' AND instrument = '{trade.Instrument().Name()}'"
    trades = acm.FTrade.Select(tradeQuery)
    
    return sum([t.Position() for t in trades if t.Status() not in ("Void", "Void Input", "Simulated")])
    
    
def _findMatchesForSellTrade(trade):
    """ 
    Get matching Trades for sell trade using FIFO method
    
    Parameters
    ----------
    trade : FTrade
        sell trade used to match

    Returns
    -------
    matchedTrades : list, collection of trades that are matched by the sell trade
    tuplePartialPos : tuple, index[0] trade that's partially matched
                             index[1] remaining sell position to be used to reduce the total position in place of the partially matched trade
                             index[2] remaining sell position to be used to reduce the next sell trade

    """
    
    if trade.Quantity() > 0:
        return None
    
    ins = trade.Instrument()
    prevSellTradesQuery = f"quantity < 0 AND tradeTime < '{trade.TradeTime()}' AND portfolio = '{trade.Portfolio().Oid()}' AND instrument = '{ins.Name()}' AND status in {STATUS_LIST}"
    prevSellTrades = acm.FTrade.Select(prevSellTradesQuery)
    prevSellTrades = prevSellTrades.SortByProperty("TradeTime", ascending=True)
    if trade.StorageId() < 0: # extra condition for pre-deal validation
        prevSellTrades.AddLast(trade)
    logger.DLOG(f"_findMatchesForSellTrade::sell trade before {trade.Oid()} prevSellTrades {prevSellTrades}")
    
    buyTradesCollectionQuery = f"quantity > 0 AND portfolio = '{trade.Portfolio().Oid()}' AND instrument = '{ins.Name()}' AND status in {STATUS_LIST}"
    buyTrades = acm.FTrade.Select(buyTradesCollectionQuery)
    buyTrades = buyTrades.SortByProperty("TradeTime", ascending=True)
    
    buyTradesQueue = deque()
    for bt in buyTrades:
        buyTradesQueue.append(bt)
    
    matchedTrades = dict()
    tuplePartialPos = tuple()
    for t in prevSellTrades:
        if t.TradeTime() > trade.TradeTime():
            # sometime query prevSellTradesQuery still include trade with later time!
            logger.DLOG(f"_findMatchesForSellTrade::ignore trade {t.Oid()} because trade time is later than {trade.Oid()}")
            continue
        else:
            logger.DLOG(f"_findMatchesForSellTrade::finding matches for sell trade {t.Oid()}")
            matchedTrades[t] = list()
            sellPos = t.Position()
            if not tuplePartialPos:
                while sellPos < 0 and buyTradesQueue:
                    bt = buyTradesQueue.popleft()
                    matchedTrades[t].append(bt)
                    sellPos += bt.Position()
                    if sellPos == 0:
                        tuplePartialPos = tuple()
                        break
                    elif sellPos > 0:
                        tuplePartialPos = (bt, bt.Position() - sellPos, sellPos)
                        break
            else:
                sellPos += tuplePartialPos[2]
                matchedTrades[t].append(tuplePartialPos[0])
                if sellPos == 0:
                    tuplePartialPos = tuple()
                    pass
                elif sellPos > 0:
                    tuplePartialPos = (bt, -t.Position(), sellPos)
                    pass
                while sellPos < 0 and buyTradesQueue:
                    bt = buyTradesQueue.popleft()
                    matchedTrades[t].append(bt)
                    sellPos += bt.Position()
                    if sellPos == 0:
                        tuplePartialPos = tuple()
                        break
                    elif sellPos > 0:
                        tuplePartialPos = (bt, bt.Position() - sellPos, sellPos)
                        break
        
        logger.DLOG(f"_findMatchesForSellTrade::trade {t.Oid()} closing {[bt.Oid() for bt in matchedTrades[t]]}")
        logger.DLOG(f"_findMatchesForSellTrade::partial position on trade {tuplePartialPos[0].Oid() if tuplePartialPos else None}, remaining sell {tuplePartialPos[1] if tuplePartialPos else None}")

    return matchedTrades[trade], tuplePartialPos

...

  ICTCustomFEmailTransfer
import acm, FEmailTransfer, ssl
import collections
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.application import MIMEApplication
from email.mime.base import MIMEBase
from email import encoders
from pathlib import Path

"""
ICT Custom FEmailTransfer for file attachments.
"""

class ICTCustomFEmailTransfer(FEmailTransfer.FEmailTransfer):
    
    class Message(FEmailTransfer.FEmailTransfer.Message):
        """Stores common email message details."""
        def __init__(self, to, subject, sender, body, cc = None, attachments = []):
            super().__init__(to, subject, sender, body, cc = cc)
            self.attachments = attachments
    
    def Send(self):
        import smtplib
        if self._server.tls_mode:
            server = smtplib.SMTP(self._server.hostname, self._server.port)  # Somehow not putting host name here will result in value error
            server.ehlo() 
            server.starttls(context = ssl._create_unverified_context())
        
        else:
            server = smtplib.SMTP()
            server.connect(self._server.hostname, self._server.port)
            server.ehlo()
        
        if self._server.username:
            server.login(self._server.username, self._server.password)
        server.verify(self._message.recipients)
        msg = self._GetEmailMessage(self._message)
        server.sendmail(self._message.sender, self._message.recipients, msg.as_string())
        server.quit()
        
    @staticmethod
    def _GetEmailMessage(message):
        msg = MIMEMultipart()
        msg['To'] = ', '.join(message.to)
        msg['Cc'] = ', '.join(message.cc)
        msg['Subject'] = message.subject
        msg['From'] = message.sender
        msg.attach(MIMEText(message.body, 'html'))
        
        # For file attachments
        for path in message.attachments:
            part = MIMEBase('application', "octet-stream")
            with open(path, 'rb') as file:
                part.set_payload(file.read())
                encoders.encode_base64(part)
                part.add_header('Content-Disposition',
                                'attachment; filename={}'.format(Path(path).name))
                msg.attach(part)
        return msg

...

  KeywordCheckPython

import acm

def checkKeywords(obj):
    try:
        name = obj.Counterparty().FullName()
    except:
        return "Third Party"
    name = name.upper()
    if "MANDIRI" in name:
        pass
    else:
        return "Third Party"
    
    if "LONDON" in name:
        return "Subsidiary"
        
    keywords = ["HK","HONG KONG", "SHANGHAI", "CAYMAN ISLANDS", "DILI", "SINGAPORE", "SG"]
    is_KS = False
    
    for keyword in keywords:
        if keyword in name:
            is_KS = True
            break
        else:
            continue
    
    return "KS" if is_KS else "Third Party"

...

  LIQ18_Cashflow_Projection
import acm,csv
from ICTMODULES_FOR_HTML_AND_XSLFO_GENERATOR import *

current_date = get_current_date("")
current_hour = get_current_hour("")
date_today = acm.Time.DateToday()
date,month,year = current_date[:2],current_date[2:4],current_date[4:]



def get_items(csvpath,csvname):
    with open(csvpath, 'r') as csvfile:
        reader = csv.reader(csvfile)
        for _ in range(8):
            next(reader)
        
        # Read the remaining lines into a list
        data = list(reader)
    return data
    
def sort_items(each_data,currency):
    trade_set_categories = {
    "LIQ18_LIQ19_MM_IP":[],	
    "LIQ18_LIQ19_MM_IT":[],
    "LIQ18_LIQ19_FX_FW":[],
    "LIQ18_LIQ19_FX_SWAP":[],
    "LIQ18_LIQ19_TD_BI":[],
    "LIQ18_LIQ19_REPO_BI":[],
    "LIQ18_LIQ19_REVREPO_BI":[],
    "LIQ18_LIQ19_REPO_INTERBANK":[],
    "LIQ18_LIQ19_REVREPO_INTERBANK":[],	
    "LIQ18_LIQ19_SB_DIMILIKI":[],
    "LIQ18_LIQ19_SB_TERBIT":[],
    "LIQ18_LIQ19_CCS":[],
    "LIQ18_LIQ19_IRS":[],
    "LIQ18_LIQ19_SBBI_VALAS":[],
    }

    product = [
    "LIQ18_LIQ19_MM_IP",	
    "LIQ18_LIQ19_MM_IT",
    "LIQ18_LIQ19_FX_FW",
    "LIQ18_LIQ19_FX_SWAP",
    "LIQ18_LIQ19_TD_BI",
    "LIQ18_LIQ19_REPO_BI",
    "LIQ18_LIQ19_REVREPO_BI",
    "LIQ18_LIQ19_REPO_INTERBANK",
    "LIQ18_LIQ19_REVREPO_INTERBANK",	
    "LIQ18_LIQ19_SB_DIMILIKI",
    "LIQ18_LIQ19_SB_TERBIT",
    "LIQ18_LIQ19_CCS",
    "LIQ18_LIQ19_IRS",
    "LIQ18_LIQ19_SBBI_VALAS",
    ]
    current_category = None
    for i in range(len(each_data)):
        if each_data[i][0] in product:
            current_category = each_data[i][0]
        if current_category:
            if each_data[i][0].startswith(currency):
                trade_set_categories[current_category].append(each_data[i])
    
    return trade_set_categories
    


def main(csv_path, report_name,currency):
    all_data = get_items(csv_path,report_name)
    html_gen = HTMLGenerator()
    xsl_gen = XSLFOGenerator()

    title_style = """
            .title {
                color: #800000;
                text-align: center;   
            }

            .subtitle-1 {
                color: #0000FF;
                font-size: 20px;
                text-align: left;
                font-weight: bold;

            }

            .subtitle-2 {
                color: #000080;
                font-size: 16px;
                text-align: left;
            }
            
            .bold {
                font-weight: bold;
            }
            
            .red {
                background-color:red;
            }
        
            .green {
                background-color:green;
            }
            
            .yellow {
                background-color:yellow;
            }

        """

    html_content = html_gen.create_base_html_content("Cashflow Projection (NON IDR) - "+currency, title_style)
    xsl_fo_content = xsl_gen.prepare_xsl_fo_content("Cashflow Projection (NON IDR) - "+currency)

    html_content = html_gen.prepare_html_table(html_content,'')
    xsl_fo_content += """<fo:table margin-bottom="50px" text-align="center" display-align="center" inline-progression-dimension="auto" table-layout="auto"><fo:table-body>"""

    title = 'Date','Cashflow'

    subtitle = ['Interbank Placement','Interbank Taken','FX/FW','SWAP','Term Deposit',
                'Repo BI','Reverse Repo BI','Repo Interbank','Reverse Repo Interbank','Surat Berharga Dimiliki',
                'Surat Berharga Terbit','CCS','IRS','SBBI Valas'
                ]
                
    html_content = html_gen.open_table_row(html_content)
    xsl_fo_content = xsl_gen.prepare_xsl_row(xsl_fo_content)

    html_content = html_gen.add_cell_data(html_content,'Date','rowspan=2 class="bold"')
    xsl_fo_content = xsl_gen.add_xsl_column(xsl_fo_content,'Date','number-rows-spanned="2" font-weight="bold"')

    html_content = html_gen.add_cell_data(html_content,'Cashflow','colspan=14 class="bold"')
    xsl_fo_content = xsl_gen.add_xsl_column(xsl_fo_content,'Cashflow','number-columns-spanned="14" font-weight="bold"')

    html_content = html_gen.add_cell_data(html_content,'Total','rowspan=2 class="bold"')
    xsl_fo_content = xsl_gen.add_xsl_column(xsl_fo_content,'Total','number-rows-spanned="2" font-weight="bold"')

    html_content = html_gen.add_cell_data(html_content,'Cumulative','rowspan=2 class="bold"')
    xsl_fo_content = xsl_gen.add_xsl_column(xsl_fo_content,'Cumulative','number-rows-spanned="2" font-weight="bold"')

    html_content = html_gen.close_table_row(html_content)
    xsl_fo_content = xsl_gen.close_xsl_row(xsl_fo_content)

    html_content = html_gen.add_data_row(html_content,[subtitle])
    xsl_fo_content = xsl_gen.add_xsl_data_row(xsl_fo_content,[subtitle])
    
    date = all_data[0]
    each_data = all_data[1:]
    
    tsa_item = sort_items(each_data,currency)
    
    cumulative = 0
    for i in range(len(date)):
        subtotal = 0
        if date[i] == "" or date[i] == "Rest" or date[i] == "Total":
            continue
        else:
            html_content = html_gen.open_table_row(html_content)
            xsl_fo_content = xsl_gen.prepare_xsl_row(xsl_fo_content)
            
            html_content = html_gen.add_cell_data(html_content,date[i])
            xsl_fo_content = xsl_gen.add_xsl_column(xsl_fo_content,date[i])
            
            for category, items in tsa_item.items():
                if items:
                    for each_items in items:
                        if each_items == currency:
                            continue
                        else:
                            if each_items[i] == "-0.0":
                                val = float(0)
                            else:
                                val = round(float(each_items[i]),2)
                                
                            subtotal += val
                            
                            html_content = html_gen.add_cell_data(html_content,f"{val:,}")
                            xsl_fo_content = xsl_gen.add_xsl_column(xsl_fo_content,f"{val:,}")
                else:
                    html_content = html_gen.add_cell_data(html_content,0)
                    xsl_fo_content = xsl_gen.add_xsl_column(xsl_fo_content,0)
                 
            cumulative += subtotal
            html_content = html_gen.add_cell_data(html_content,f"{subtotal:,}")
            xsl_fo_content = xsl_gen.add_xsl_column(xsl_fo_content,f"{subtotal:,}")
            
            html_content = html_gen.add_cell_data(html_content,f"{cumulative:,}")
            xsl_fo_content = xsl_gen.add_xsl_column(xsl_fo_content,f"{cumulative:,}")
                    
            html_content = html_gen.close_table_row(html_content)
            xsl_fo_content = xsl_gen.close_xsl_row(xsl_fo_content)
    
    html_content = html_gen.close_html_table(html_content)
    xsl_fo_content = xsl_gen.close_xsl_table(xsl_fo_content)
    
    file_path = csv_path.split("\\report")[0]
    
    html_file = html_gen.create_html_file(html_content, file_path, report_name+" "+currency+current_date+current_hour, current_date, True)
    xsl_fo_file = xsl_gen.create_xsl_fo_file(report_name+" "+currency+current_date+current_hour,file_path, xsl_fo_content, current_date)
    
    output_file = ['.xls','.pdf']
    for each_output in output_file:
        if each_output != '.pdf':
            generate_file_for_other_extension(html_file, each_output)
        else:
            generate_pdf_from_fo_file(xsl_fo_file)
    

...

  LIQ19_Cashflow_Projection
import acm,csv
from ICTMODULES_FOR_HTML_AND_XSLFO_GENERATOR import *

current_date = get_current_date("")
current_hour = get_current_hour("")
date_today = acm.Time.DateToday()
date,month,year = current_date[:2],current_date[2:4],current_date[4:]



def get_items(csvpath,csvname):
    with open(csvpath, 'r') as csvfile:
        reader = csv.reader(csvfile)
        for _ in range(8):
            next(reader)
        
        # Read the remaining lines into a list
        data = list(reader)
    return data
    
def sort_items(each_data,currency):
    trade_set_categories = {
    "LIQ18_LIQ19_MM_IP":[],	
    "LIQ18_LIQ19_MM_IT":[],
    "LIQ18_LIQ19_DF":[],
    "LIQ18_LIQ19_LF":[],
    "LIQ18_LIQ19_FX_FW":[],
    "LIQ18_LIQ19_FX_SWAP":[],
    "LIQ18_LIQ19_TD_BI":[],
    "LIQ18_LIQ19_REPO_BI":[],
    "LIQ18_LIQ19_REVREPO_BI":[],
    "LIQ18_LIQ19_REPO_INTERBANK":[],
    "LIQ18_LIQ19_REVREPO_INTERBANK":[],	
    "LIQ18_LIQ19_SB_DIMILIKI":[],
    "LIQ18_LIQ19_SB_TERBIT":[],
    "LIQ18_LIQ19_REKSADANA":[],
    "LIQ18_LIQ19_CCS":[],
    "LIQ18_LIQ19_IRS":[],
    "LIQ18_LIQ19_SRBI":[]
    }

    product = [
    "LIQ18_LIQ19_MM_IP",	
    "LIQ18_LIQ19_MM_IT",
    "LIQ18_LIQ19_DF",
    "LIQ18_LIQ19_LF",
    "LIQ18_LIQ19_FX_FW",
    "LIQ18_LIQ19_FX_SWAP",
    "LIQ18_LIQ19_TD_BI",
    "LIQ18_LIQ19_REPO_BI",
    "LIQ18_LIQ19_REVREPO_BI",
    "LIQ18_LIQ19_REPO_INTERBANK",
    "LIQ18_LIQ19_REVREPO_INTERBANK",	
    "LIQ18_LIQ19_SB_DIMILIKI",
    "LIQ18_LIQ19_SB_TERBIT",
    "LIQ18_LIQ19_REKSADANA",
    "LIQ18_LIQ19_CCS",
    "LIQ18_LIQ19_IRS",
    "LIQ18_LIQ19_SRBI"
    ]
    current_category = None
    for i in range(len(each_data)):
        if each_data[i][0] in product:
            current_category = each_data[i][0]
        if current_category:
            if each_data[i][0].startswith(currency):
                trade_set_categories[current_category].append(each_data[i])
                
    return trade_set_categories


def main(csv_path, report_name,currency):
    all_data = get_items(csv_path,report_name)
    html_gen = HTMLGenerator()
    xsl_gen = XSLFOGenerator()

    title_style = """
            .title {
                color: #800000;
                text-align: center;   
            }

            .subtitle-1 {
                color: #0000FF;
                font-size: 20px;
                text-align: left;
                font-weight: bold;

            }

            .subtitle-2 {
                color: #000080;
                font-size: 16px;
                text-align: left;
            }
            
            .bold {
                font-weight: bold;
            }
            
            .red {
                background-color:red;
            }
        
            .green {
                background-color:green;
            }
            
            .yellow {
                background-color:yellow;
            }

        """

    html_content = html_gen.create_base_html_content("Cashflow Projection - "+currency, title_style)
    xsl_fo_content = xsl_gen.prepare_xsl_fo_content("Cashflow Projection - "+currency)

    html_content = html_gen.prepare_html_table(html_content,'')
    xsl_fo_content += """<fo:table margin-bottom="50px" text-align="center" display-align="center" inline-progression-dimension="auto" table-layout="auto"><fo:table-body>"""

    title = 'Date','Cashflow'

    subtitle = ['Interbank Placement','Interbank Taken','DF','LF','FX/FW','SWAP','Term Deposit',
                'Repo BI','Reverse Repo BI','Repo Interbank','Reverse Repo Interbank','Surat Berharga Dimiliki',
                'Surat Berharga Terbit','Reksadana','CCS','IRS','SRBI'
                ]
                
    html_content = html_gen.open_table_row(html_content)
    xsl_fo_content = xsl_gen.prepare_xsl_row(xsl_fo_content)

    html_content = html_gen.add_cell_data(html_content,'Date','rowspan=2 class="bold"')
    xsl_fo_content = xsl_gen.add_xsl_column(xsl_fo_content,'Date','number-rows-spanned="2" font-weight="bold"')

    html_content = html_gen.add_cell_data(html_content,'Cashflow','colspan=17 class="bold"')
    xsl_fo_content = xsl_gen.add_xsl_column(xsl_fo_content,'Cashflow','number-columns-spanned="17" font-weight="bold"')

    html_content = html_gen.add_cell_data(html_content,'Total','rowspan=2 class="bold"')
    xsl_fo_content = xsl_gen.add_xsl_column(xsl_fo_content,'Total','number-rows-spanned="2" font-weight="bold"')

    html_content = html_gen.add_cell_data(html_content,'Cumulative','rowspan=2 class="bold"')
    xsl_fo_content = xsl_gen.add_xsl_column(xsl_fo_content,'Cumulative','number-rows-spanned="2" font-weight="bold"')

    html_content = html_gen.close_table_row(html_content)
    xsl_fo_content = xsl_gen.close_xsl_row(xsl_fo_content)

    html_content = html_gen.add_data_row(html_content,[subtitle])
    xsl_fo_content = xsl_gen.add_xsl_data_row(xsl_fo_content,[subtitle])
    
    date = all_data[0]
    each_data = all_data[1:]
    
    tsa_item = sort_items(each_data,currency)
    
    
    cumulative = 0
    for i in range(len(date)):
        subtotal = 0
        if date[i] == "" or date[i] == "Rest" or date[i] == "Total":
            continue
        else:
            html_content = html_gen.open_table_row(html_content)
            xsl_fo_content = xsl_gen.prepare_xsl_row(xsl_fo_content)
            
            html_content = html_gen.add_cell_data(html_content,date[i])
            xsl_fo_content = xsl_gen.add_xsl_column(xsl_fo_content,date[i])
            
            for category, items in tsa_item.items():
                if items:
                    for each_items in items:
                        if each_items == currency:
                            continue
                        else:
                            val = round(float(each_items[i]),2)
                            subtotal += val
                            html_content = html_gen.add_cell_data(html_content,f"{val:,}")
                            xsl_fo_content = xsl_gen.add_xsl_column(xsl_fo_content,f"{val:,}")
                
                 
            cumulative += subtotal
            html_content = html_gen.add_cell_data(html_content,f"{subtotal:,}")
            xsl_fo_content = xsl_gen.add_xsl_column(xsl_fo_content,f"{subtotal:,}")
            
            html_content = html_gen.add_cell_data(html_content,f"{cumulative:,}")
            xsl_fo_content = xsl_gen.add_xsl_column(xsl_fo_content,f"{cumulative:,}")
                    
            html_content = html_gen.close_table_row(html_content)
            xsl_fo_content = xsl_gen.close_xsl_row(xsl_fo_content)
    
    html_content = html_gen.close_html_table(html_content)
    xsl_fo_content = xsl_gen.close_xsl_table(xsl_fo_content)
    
    file_path = csv_path.split("\\report")[0]
    
    html_file = html_gen.create_html_file(html_content, file_path, report_name+" "+currency+current_date+current_hour, current_date, True)
    xsl_fo_file = xsl_gen.create_xsl_fo_file(report_name+" "+currency+current_date+current_hour,file_path, xsl_fo_content, current_date)
    
    output_file = ['.xls','.pdf']
    for each_output in output_file:
        if each_output != '.pdf':
            generate_file_for_other_extension(html_file, each_output)
        else:
            generate_pdf_from_fo_file(xsl_fo_file)
    

...

  MarktraGenerator

import ael, os, time, webbrowser

def get_top_buyer_and_sellers(data_dict):
    query = ael.asql(""" 
    SELECT p.ptyid, SUM(t.quantity) 'Quantity'
    FROM Trade t, instrument i, Party p
    WHERE t.insaddr =  i.insaddr
    AND i.instype = 'Option'
    AND t.counterparty_ptynbr = p.ptynbr
    AND t.quantity > 0
    GROUP BY p.ptyid
    ORDER BY 2 DESC

    UNION 

    SELECT p.ptyid, SUM(t.quantity) 'Quantity'
    FROM Trade t, instrument i, Party p
    WHERE t.insaddr =  i.insaddr
    AND i.instype = 'Option'
    AND t.counterparty_ptynbr = p.ptynbr
    AND t.quantity < 0
    GROUP BY p.ptyid
    ORDER BY 2 ASC
    """
    )
    
    query_data = query[1]
    data_dict["top_buyers"] = query_data[0]
    data_dict["top_sellers"] = query_data[1]
    
    return data_dict
    
def create_buyer_and_seller_tag(data_dict, tag_dict):
    tr_open_tag = "<tr>"
    tr_close_tag = "</tr>"
    tag_dict["top_buyers"] = ""
    tag_dict["top_sellers"] = ""
    for i in range(len(data_dict["top_buyers"])):
        number = "<td>" + str(i + 1) + "</td>"
        counterparty_name = "<td>" + data_dict["top_buyers"][i][0] + "</td>"
        quantity = "<td style='text-align:right'>" + str(data_dict["top_buyers"][i][1]) + "</td>"
        tag_dict["top_buyers"] += tr_open_tag + number + counterparty_name + quantity + tr_close_tag
    
    for i in range(len(data_dict["top_sellers"])):
        number = "<td>" + str(i + 1) + "</td>"
        counterparty_name = "<td>" + data_dict["top_sellers"][i][0] + "</td>"
        quantity = "<td style='text-align:right'>" + str(data_dict["top_sellers"][i][1]) + "</td>"
        tag_dict["top_sellers"] += tr_open_tag + number + counterparty_name + quantity + tr_close_tag
        
    return tag_dict

def get_marktra_template_style():
    marktra_style_string = """
    #header, #body{
    display: flex;
    align-items: flex-start;
    justify-content: center;
    align-content: center;
    gap: 100px;
    }
    #date_section > p {
        margin: 0;
        border: 1px solid black;
        border-collapse: collapse;
    }

    #left, #date_section {
        flex: 2;
        margin: 0px 50px 10px 0px;
    }

    #right{
        flex: 8;
        display: flex;
        gap: 10px;
        justify-content: space-between;
    }

    #date_title {
        background-color: #3F6AC1;
        color: whitesmoke;
    }

    #date {
        background-color: #8db7fb;
        color: black;
    }
    #title {
        display: flex;
        flex: 8;
        font-size: 20pt;
        border: 2px solid black;
        justify-content: center;
    }

    table {
        border: 1px solid black;
        margin: 0px 0px 10px 0px;
        width: 100%;
    }
    """
    return marktra_style_string
    
def prepare_marktra_string(tag_dict, style_string):
    date_today = time.strftime("%d-%m-%Y", time.localtime())
    marktra_string = f"""
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta http-equiv="X-UA-Compatible" content="IE=edge">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <style>
            {style_string}
            </style>
            <title>Dashboard Marktra</title>
        </head>
        <body>
            <div id="header">
                <div id="date_section">
                    <p id="date_title">Tanggal hari ini</p>
                    <p id="date">{date_today}</p>
                </div>
                <div id="title" style="display: flex;flex: 8;font-size: 20pt;border: 2px solid black;justify-content: center;">Dashboard Marktra</div>
            </div>
            <div id="body" style="display: flex;align-items: flex-start;justify-content: center;align-content: center;gap: 100px;">
                <div id="left" style="flex: 2;margin-right: 50px;">
                    <table style="border: 1px solid black;">
                        <thead>
                            <tr>
                                <th></th>
                                <th style="text-align:right">Sum of Vol (USD)</th>
                            </tr>
                        </thead>
                        <tbody id="sum_of_vol">
                            <tr>
                                <td>Jual Beli Non Idr</td>
                                <td id="jual_beli_non_idr" style="text-align:right">123456</td>
                            </tr>
                            <tr>
                                <td>MDS</td>
                                <td style="text-align:right">1234</td>
                            </tr>
                        </tbody>
                    </table>
                    <table style="border: 1px solid black;">
                        <thead>
                            <tr>
                                <th>P/S</th>
                                <th style="text-align:right">Average Rate</th>
                            </tr>
                        </thead>
                        <tbody id="ps_average_body">
                            <tr>
                                <td>P</td>
                                <td style="text-align:right"> Avg Nasabah Sell USDIDR</td>
                            </tr>
                            <tr>
                                <td>S</td>
                                <td style="text-align:right">Avg Nasabah Buy USDIDR</td>
                            </tr>
                        </tbody>
                        <tfoot id="ps_average_foot">
                            <tr>
                                <td>Spread</td>
                                <td style="text-align:right">Something</td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
                <div id="right" style="flex: 8;display: flex; gap: 10px;">
                    <div id="general">
                        <table style="border: 1px solid black;">
                            <thead>
                                <tr>
                                    <th></th>
                                    <th style="text-align:right">Sum of Vol (USD)</th>
                                </tr>
                            </thead>
                            <tbody id="sum_of_vol">
                                <tr>
                                    <td>Bank Notes</td>
                                    <td style="text-align:right">123456</td>
                                </tr>
                                <tr>
                                    <td>Retail</td>
                                    <td style="text-align:right">1234</td>
                                </tr>
                            </tbody>
                        </table>
                        <table style="border: 1px solid black;">
                            <caption>Outstanding Nasabah Buy Sell Forward</caption>
                            <thead>
                                <tr>
                                    <th>Row Labels</th>
                                    <th style="text-align:right">Sum of AMOUNT</th>
                                </tr>
                            </thead>
                            <tbody id="sum_of_amount">
                                <tr>
                                    <td>&lt; 7 Days</td>
                                    <td style="text-align:right">100</td>
                                </tr>
                                <tr>
                                    <td>2. 7 days - &lt; 14 days</td>
                                    <td style="text-align:right">200</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    <div id="buy">
                        <table style="border: 1px solid black;">
                            <thead>
                                <th>No</th>
                                <th>Nasabah Beli</th>
                                <th style="text-align:right">Volume Amount</th>
                            </thead>
                            <tbody id="top_nasabah_beli">
                            {tag_dict["top_buyers"]}
                            </tbody>
                        </table>
                    </div>
                    <div id="sell">
                        <table style="border: 1px solid black;">
                            <thead>
                                <th>No</th>
                                <th>Nasabah Jual</th>
                                <th style="text-align:right">Volume Amount</th>
                            </thead>
                            <tbody id="top_nasabah_jual">
                            {tag_dict["top_sellers"]}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </body>
        </html>
        """
        
    return marktra_string
    

def generate_marktra_dashboard(file_name, file_path, folder_with_file_name=False, open_html=True):
    data_dict = {}
    tag_dict = {}
    current_date = time.strftime("%d-%m-%Y", time.localtime())
    
    data_dict = get_top_buyer_and_sellers(data_dict)
    tag_dict = create_buyer_and_seller_tag(data_dict, tag_dict)
    style_string = get_marktra_template_style()
    marktra_string = prepare_marktra_string(tag_dict, style_string)
    
    if folder_with_file_name:
        folder_path = file_path + "\\" + file_name + "\\" + current_date
    else:
        folder_path = file_path + "\\report" + current_date
        
    try:
        os.makedirs(folder_path)
    except:
        pass
    
    file_url = folder_path+"\\"+file_name+".html"
    f = open(file_url, "w")
    f.write(marktra_string)
    f.close()
    url = "file://" + file_url
    
    if open_html:
        webbrowser.open(file_url,new=2)
    
    return file_url

...

  MO_Column_Helpers
import acm, math
from decimal import Decimal, getcontext

COMPLIANCE_RULES = ['Standard_HVaR_TRC', 'Standard_HVaR']

def get_threshold_value_by_port(port):
    value = None
    for comp_rule in COMPLIANCE_RULES:
        comp_rule = acm.FComplianceRule[comp_rule]
        for applied_rule in comp_rule.AppliedRules():
            if port.Name() == applied_rule.Target().Name():
                value = applied_rule.ThresholdValues().First().Value()
    return value

def get_threshold_by_port(port):
    value = None
    for comp_rule in COMPLIANCE_RULES:
        comp_rule = acm.FComplianceRule[comp_rule]
        for applied_rule in comp_rule.AppliedRules():
            if port.Name() == applied_rule.Target().Name():
                value = applied_rule.ThresholdValues().First()
    return value

def get_appropriate_threshold_type_by_port(port):
    type = ""
    threshold_values = get_threshold_values_by_port(port)
    try:
        for threshold in threshold_values:
            threshold_obj = threshold.Threshold()
            threshold_comparison = threshold_obj.ComparisonType()
            threshold_value = threshold_obj.ValueAdjusted()
            rule_value = threshold.ResultsHistory().First().ValuesHistory().First().WatermarkValue()
            
            if threshold_comparison == 'Greater or Equal':
                type = threshold_obj.Type().Name() if threshold_value >= rule_value else "Safe"
                
            elif threshold_comparison == 'Greater':
                type = threshold_obj.Type().Name() if threshold_value > rule_value else "Safe"
                
            elif threshold_comparison == 'Less or Equal':
                type = threshold_obj.Type().Name() if threshold_value <= rule_value else "Safe"
                
            elif threshold_comparison == 'Less':
                type = threshold_obj.Type().Name() if threshold_value < rule_value else "Safe"
        
        type = map_threshold_type_to_display(type)
        return type
    except:
        type = map_threshold_type_to_display(type)
        return type
        
def map_threshold_type_to_display(type):
    if type == "":
        return "N/A"
    
    if type == "Violation":
        return "RED"
    
    if type == "Warning":
        return "YELLOW"
    
    if type == "Safe":
        return "GREEN"
    
def get_threshold_values_by_port(port):
    value = None
    for comp_rule in COMPLIANCE_RULES:
        comp_rule = acm.FComplianceRule[comp_rule]
        for applied_rule in comp_rule.AppliedRules():
            if port.Name() == applied_rule.Target().Name():
                value = applied_rule.ThresholdValues()
    
    return value

def get_util_percent_by_port(port):
    threshold = get_threshold_by_port(port)
    try:
        utilization = utilization_calculation(threshold.Threshold(), threshold.ResultsHistory().First().ValuesHistory().First())
        return "{:,.2f}".format(utilization).replace('.',',') + '%'        
    except Exception as e:
        return "{:,.2f}".format(0.0).replace('.',',') + '%'
    return "{:,.2f}".format(0.0).replace('.',',') + '%'

def utilization_calculation(threshold, rule_value):
    getcontext().prec = 21
    if threshold.ComparisonType() == 'Greater or Equal' or threshold.ComparisonType() == 'Greater':
        util_num1 = float( Decimal(rule_value) / Decimal( threshold_val.ValueAdjusted() ) )
        util_num2 = util_num1 * 100.0
        util_num = round_half_up(util_num2, jumlah_desimal=2)
    elif threshold.ComparisonType() == 'Less or Equal' or threshold.ComparisonType() == 'Less':
        util_num1 = float( Decimal( threshold_val.ValueAdjusted() ) / Decimal(rule_value) )
        util_num2 = util_num1 * 100.0
        util_num = round_half_up(util_num2, jumlah_desimal=2)
    else:
        util_num = 0.0
    
    return util_num

def round_half_up(angka, jumlah_desimal=0):
    if math.isnan(angka):
        return angka
    # https://realpython.com/python-rounding/
    multiplier = 10 ** jumlah_desimal
    result = math.ceil( angka*multiplier) / multiplier
    return result
    
    

...

  MoneyFlow_PyFunctions


import acm

def getAmount(obj, trdnbr):

    trade = acm.FTrade[trdnbr]

    if trade.Instrument().PayLeg().LegType() == "Float" or trade.Instrument().RecLeg().LegType() == "Float":
        return obj.MoneyFlow().CashFlow().Spread()
    else:
        return trade.Instrument().RecLeg().FixedRate()
    

    

...

  NFOutputSettingsTab
"""-------------------------------------------------------------------------------------------------------
MODULE
    FOutputSettingsTab - General output settings

    (c) Copyright 2011 by SunGard FRONT ARENA. All rights reserved.

DESCRIPTION

    This is a GUI tab in the FWorksheetReport GUI which contains settings
    which are changed frequently, e.g. name of the report.

-------------------------------------------------------------------------------------------------------"""
import acm
import FRunScriptGUI
import FReportSettings

trueFalse = ['False','True']

def getDateFormats():
    return ['%d%m%y', '%y%m%d', '%d%m%y%H%M', '%y%m%d%H%M', '%d%m%y%H%M%S', '%y%m%d%H%M%S']

def getListFromExtensions(extensions):
    str = extensions.AsString().replace(']','').replace('[','').replace(' ','')
    extensionsList = str.split(',')
    extensionsList.sort()
    return extensionsList

def getPrintTemplateNames():
    ctx = acm.GetDefaultContext()
    extensions = ctx.GetAllExtensions('FXSLTemplate','FObject',True, True, 'aef reporting', 'print templates')
    return getListFromExtensions(extensions)

def getSecondaryTemplateNames(ext = ''):
    if ext != '':
        ext = ' ' + ext.replace('.','')
    ctx = acm.GetDefaultContext()
    extensions = ctx.GetAllExtensions('FXSLTemplate','FObject',True, True, 'aef reporting', 'secondary templates' + ext)
    return getListFromExtensions(extensions)

def getCSSNames():
    ctx = acm.GetDefaultContext()
    extensions = ctx.GetAllExtensions('FXSLTemplate','FObject',True, True, 'aef reporting', 'style sheets')
    return getListFromExtensions(extensions)

class OutputSettingsTab(FRunScriptGUI.AelVariablesHandler):

    def appendDateToFileNameCB(self,index, fieldValues):
        self.File_date_beginning.enable( fieldValues[index] != '' )
        return fieldValues

    def createDirectoryWithDatesCB(self,index, fieldValues):
        self.Date_format.enable(trueFalse.index(fieldValues[index]))
        return fieldValues

    def htmlToFileCB(self,index, fieldValues):
        self.HTML_to_File.enable(fieldValues[index] != 'True')
        if fieldValues[index] == 'True':
            fieldValues[index - 1] = 'True'
        return fieldValues

    def secondaryOutputCB(self,index, fieldValues):
        for i in (1, 2, 3):
            if (self.ael_variables) and (len(self.ael_variables) >= index+i):
                self.ael_variables[index + i][FRunScriptGUI.Controls.ENABLED] = (fieldValues[index] == 'True')
        return fieldValues
        
    def addHeadImageCB(self, index, fieldValues):
        if (self.ael_variables) and (len(self.ael_variables) >= index+1):
            self.ael_variables[index + 1][FRunScriptGUI.Controls.ENABLED] = (fieldValues[index] == 'True')
        return fieldValues

    def setFileExtensionCB(self,index, fieldValues):
        """ Set file extension depending on which group the template belongs to """
        secTempl = fieldValues[index]

        for ext in FReportSettings.FILE_EXTENSIONS:
            list = getSecondaryTemplateNames(ext)
            if secTempl in list:
                fieldValues[index+1] = ext
        return fieldValues
    
    def __init__(self):
        directorySelection=FRunScriptGUI.DirectorySelection()
        file_selection = FRunScriptGUI.InputFileSelection()
        vars =[
                ['HTML to File', 'HTML to File_Output settings', 'string', trueFalse, 'True', 1, 0, 'Is the HTML wanted on file?', None, 1],
                ['HTML to Screen', 'HTML to Screen_Output settings', 'string', trueFalse, 'True', 1, 0, 'Is the HTML wanted on screen in a browser?', self.htmlToFileCB, 1],
                ['HTML to Printer', 'HTML to Printer_Output settings', 'string', trueFalse, 'False', 1, 0, 'Is printing of the HTML wanted?',None,0],                
                ['File Path', 'File Path_Output settings', directorySelection, None, directorySelection, 0, 1, 'The file path to the directory where the report should be put. Environment variables can be specified for Windows (%VAR%) or Unix ($VAR).', None, 1],
                ['File Name', 'File Name_Output settings', 'string', None, '', 0, 0, 'The file name of the output'],
                ['File date format', 'Format of Date Added to File Name_Output settings', 'string', getDateFormats(), '', 0, 0, 'Format of the date added to the file name. No date is added to the file name if this field is empty. As default, it is appended at the end of the file name. Toggle checkbox Date at Beginning of File Name to insert the date at the beginning of the file name.', self.appendDateToFileNameCB, 1],
                ['Year with century', 'Year with century_Output settings', 'string', trueFalse, 'False', 1, 0, 'When using dates for filename and directory, year will be with or without century'],
                ['File date beginning', 'Date at Beginning of File Name_Output settings', 'string', trueFalse, 'False', 1, 0, 'Append date at beginning of file name'],
                ['Create directory with date', 'Create Directory with Date_Output settings', 'string', trueFalse, 'True', 1, 0, 'Create a directory with the date included in the directory name', self.createDirectoryWithDatesCB, 1],
                ['Date format', 'Directory Date Format_Output settings', 'string', getDateFormats(), '%d%m%y', 0, 0, 'Date format', None, 1],
                ['Overwrite if file exists', 'Overwrite if File Exists_Output settings', 'string', trueFalse, 'True', 1, 0, 'If a file with the same name and path already exist, overwrite it?'],
                ['Print template (XSL)','HTML Template (XSL)_Output settings','string', getPrintTemplateNames(),'FStandardTemplate', 0, 0, 'Choose which XSL template to use in the transformation from XML. Templates must be added to group aef reporting/print templates to be visible here.'],
                ['Print style sheet (CSS)','HTML Style Sheet (CSS)_Output settings','string', getCSSNames(), 'FStandardCSS', 0, 0, 'If wanted, choose a Cascading Style Sheet'],
                ['Include header image','Add Header Image to HTML_Output settings','string', trueFalse, 'False', 1, 0, 'If wanted, choose a header image to add to HTML output', self.addHeadImageCB, 1],
                ['Header image path', 'Header Image Path_Output settings', 'FFileSelection', None, None, 0, 1, 'The file path to the header image. Environment variables can be specified for Windows (%VAR%) or Unix ($VAR).', None, 0],
                ['Secondary output', 'Secondary Output_Output settings', 'string', trueFalse, 'False', 1, 0, 'Is a secondary output wanted?', self.secondaryOutputCB, 1],
                ['Secondary template', 'Secondary Template_Output settings','string', getSecondaryTemplateNames(), 'NFTABTemplate', 0, 0, 'Choose a secondary output template. Templates must be added to group aef reporting/secondary templates [ext] to be visible here.', self.setFileExtensionCB, 0],
                ['Secondary file extension', 'Secondary File Extension_Output settings', 'string', FReportSettings.FILE_EXTENSIONS, '.csv', 0, 0, 'Which file extension should the secondary output have?', None, 0],
                ['Utf8 BOM', 'Enforce UTF-8 encoded output_Output settings', 'string', trueFalse, 'False', 0, 0, 'Add a Byte Order Mark to UTF-8 encoded output files. Some application, such as Excel, need the Byte Order Mark to be able to open the file correctly. Only applicable for templates with UTF-8 encoding.', None, 0],
                ]
        FRunScriptGUI.AelVariablesHandler.__init__(self,vars,__name__)

def getAelVariables():
    outtab=OutputSettingsTab()
    outtab.LoadDefaultValues(__name__)
    return outtab

...

  NFReportOutput
from builtins import range
"""-------------------------------------------------------------------------------------------------------
MODULE
    FReportOutput - Output reports to paper, file or screen

    Given XML data this module will transofrm it using print templates and output the result
    to file, show it in a web browseer and/or print it to paper.

    (c) Copyright 2011 by SunGard FRONT ARENA. All rights reserved.

DESCRIPTION

    Use produceOutput function to print XML data, append result of getAelCariables to the ael_variables
    in the calling script.
    
    If called from a noninteractive script, produceOutputInternal may be called    

-------------------------------------------------------------------------------------------------------"""

import acm
import ael
import os
import webbrowser
import time
import os.path
import platform
import re
import FFileUtils
import FReportUtils
import FReportSettings
import FXMLReportWriter
import FPictures
from string import Template

try:
    import zipfile
except ImportError:
    print ("Failed to import zipfile, compressed XML output will not be available")

ael_variables = None #Must be overridden by parent module in order for call backs to work
trueFalse = ['False','True']

import amb
amb_address_default = '127.0.0.1:9137'
amb_sender_default  = 'AMBA_SENDER'
amb_subject_default = 'AMBA/XMLREPORT'

def xmlToAmbCB(index, fieldValues):
    for i in (1, 2, 3, 4):
        if (ael_variables) and (len(ael_variables) >= index+i):
            ael_variables[index + i][9] = (fieldValues[index] == 'True')
    return fieldValues

def htmlToFileCB(index, fieldValues):
    if (ael_variables) and (len(ael_variables) > index):
        ael_variables[index - 1][9] = (fieldValues[index] != 'True')
        if fieldValues[index] == 'True':
            fieldValues[index - 1] = 'True'
    return fieldValues
    
def secondaryOutputCB(index, fieldValues):
    for i in (1, 2, 3):
        if (ael_variables) and (len(ael_variables) >= index+i):
            ael_variables[index + i][9] = (fieldValues[index] == 'True')
    return fieldValues

def getFilePathSelection():
    """ Directory selector dialog """
    selection = acm.FFileSelection()
    selection.PickDirectory(True)
    selection.SelectedDirectory = 'c:\\'
    return selection   
    
def createDirectoryWithDatesCB(index, fieldValues):    
    ael_variables[index + 1][9] = trueFalse.index(fieldValues[index])
    return fieldValues  

def getDateFormats():    
    return ['%d%m%y', '%y%m%d', '%d%m%y%H%M', '%y%m%d%H%M']

def setFileExtension(index, fieldValues):    
    """ Set file extension depending on which group the template belongs to """
    secTempl = fieldValues[index]        
        
    for ext in FReportSettings.FILE_EXTENSIONS:
        list = getSecondaryTemplateNames(ext)
        if secTempl in list:
            fieldValues[index+1] = ext            
    return fieldValues      

def getAelVariables():
    """ Get ael_variables that need to be suplied to produceOutput, scripts outputing
        reports should extend their ael_variables with this list
    """
    return     [['Include Raw Data', 'Include Raw Data_Output settings', 'string', trueFalse, 'True', 1, 0, 'Is the raw data needed in the report?'],
                ['Include Formatted Data', 'Include Formatted Data_Output settings', 'string', trueFalse, 'True', 1, 0, 'Is the formatted data needed in the report? Must be checked when using FStandardTemplate.'],
                ['HTML to File', 'HTML to File_Output settings', 'string', trueFalse, 'True', 1, 0, 'Is the HTML wanted on file?', None, 1],
                ['HTML to Screen', 'HTML to Screen_Output settings', 'string', trueFalse, 'True', 1, 0, 'Is the HTML wanted on screen in a browser?', htmlToFileCB, 1],
                ['HTML to Printer', 'HTML to Printer_Output settings', 'string', trueFalse, 'False', 1, 0, 'Is printing of the HTML wanted?'],
                ['XML to File', 'XML to File_Output settings', 'string', trueFalse, 'True', 1, 0, 'Is the XML wanted on file?'],                              
                ['File Path', 'File Path_Output settings', getFilePathSelection(), None, getFilePathSelection(), 0, 1, 'The file path to the directory where the report should be put. Environment variables can be specified for Windows (%VAR%) or Unix ($VAR).', None, 1],                
                ['File Name', 'File Name_Output settings', 'string', None, '', 0, 0, 'The file name of the output'],
                ['Compress Output', 'Compress XML output (.zip)_Output settings', 'string', trueFalse, 'False', 1, 0, 'Compress the .xml outpt with zip', None, 1],
                ['Create directory with date', 'Create directory with date_Output settings', 'string', trueFalse, 'True', 1, 0, 'Create a directory with the date included in the directory name', createDirectoryWithDatesCB, 1],                                
                ['Date format', 'Date format_Output settings', 'string', getDateFormats(), '%d%m%y', 0, 0, 'Date format', None, 1],
                ['Overwrite if file exists', 'Overwrite if file exists_Output settings', 'string', trueFalse, 'True', 1, 0, 'If a file with the same name and path already exist, overwrite it?'],
                ['Print template (XSL)','Print template (XSL)_Output settings','string', getPrintTemplateNames(),'FStandardTemplate', 0, 0, 'Choose which XSL template to use in the transformation from XML. Templates must be added to group aef reporting/print templates to be visible here.'],
                ['Print style sheet (CSS)','Print style sheet (CSS)_Output settings','string', getCSSNames(), 'FStandardCSS', 0, 0, 'If wanted, choose a Cascading Style Sheet'],
                ['Secondary output', 'Secondary output_Output settings', 'string', trueFalse, 'False', 1, 0, 'Is a secondary output wanted?', secondaryOutputCB, 1],
                ['Secondary template', 'Secondary template_Output settings','string', getSecondaryTemplateNames(), 'NFTABTemplate', 0, 0, 'Choose a secondary output template. Templates must be added to group aef reporting/secondary templates [ext] to be visible here.', setFileExtension, 0],
                ['Secondary file extension', 'Secondary file extension_Output settings', 'string', FReportSettings.FILE_EXTENSIONS, '.csv', 0, 0, 'Which file extension should the secondary output have?', None, 0],
                ['Send XML File to AMB', 'Send XML File to AMB_Output settings', 'string', trueFalse, 'False', 1, 0, 'Send XML File to ARENA Message Broker?', xmlToAmbCB, 1],
                ['AMB XML Message', 'AMB XML Message_Output settings', 'string', trueFalse, 'True', 0, 0, 'XML Message or Front Arena internal format?', None, 1],
                ['AMB Address', 'AMB Address_Output settings', 'string', '', amb_address_default, 0, 0, 'Address to ARENA Message Broker on format host:port', None, 0],
                ['AMB Sender Name', 'AMB Sender Name_Output settings', 'string', '', amb_sender_default, 0, 0, 'Name on Sender to ARENA Message Broker (Must exist in AMB system table!)', None, 0],
                ['AMB Subject', 'AMB Subject_Output settings', 'string', '', amb_subject_default, 0, 0, 'Subject on Messages Sent to ARENA Message Broker', None, 0],
                ] 


def produceOutput(inputXML,fileName, ael_variables):
    """ Produce reports as described in ael_variables """
    fileHTML = trueFalse.index(ael_variables['HTML to File'])
    screenHTML = trueFalse.index(ael_variables['HTML to Screen'])
    printHTML = trueFalse.index(ael_variables['HTML to Printer'])    
    fileXML = trueFalse.index(ael_variables['XML to File'])
    compressXML = trueFalse.index(ael_variables['Compress Output'])
    if isinstance(ael_variables['File Path'], str):
        outputDir = ael_variables['File Path']
    else:
        outputDir = ael_variables['File Path'].AsString()    
    dateDirectory = trueFalse.index(ael_variables['Create directory with date'])
    overwrite = trueFalse.index(ael_variables['Overwrite if file exists'])
    printTemplate = ael_variables['Print template (XSL)']
    printCSS = ael_variables['Print style sheet (CSS)']
    secondOutput = trueFalse.index(ael_variables['Secondary output'])
    secondOutputTemplate = ael_variables['Secondary template']
    secondOutputFileExtension = ael_variables['Secondary file extension']
    dateFormat = ael_variables['Date format']
    
    if dateDirectory:
        outputDir = os.path.join(outputDir, 'report'+ time.strftime(dateFormat)+ os.sep )
    produceOutputInternal(inputXML, printTemplate, printCSS, fileHTML, screenHTML, printHTML, fileXML, outputDir,\
                          overwrite, fileName, secondOutput, secondOutputTemplate, secondOutputFileExtension,compressXML)
    # Send XML File to AMB
    xmlToAmb = trueFalse.index(ael_variables['Send XML File to AMB'])
    ambAddress = ael_variables['AMB Address']
    ambSender  = ael_variables['AMB Sender Name']
    ambSubject = ael_variables['AMB Subject']
    ambXmlMessage = trueFalse.index(ael_variables['AMB XML Message'])
    sendXMLToAMB(inputXML, xmlToAmb, ambAddress, ambSender, ambSubject, ambXmlMessage)

def getListFromExtensions(extensions):
    str = extensions.AsString().replace(']','').replace('[','').replace(' ','')
    extensionsList = str.split(',')
    return extensionsList    

def getPrintTemplateNames():
    ctx = acm.GetDefaultContext()
    extensions = ctx.GetAllExtensions('FXSLTemplate','FObject',True, True, 'aef reporting', 'print templates')    
    return getListFromExtensions(extensions)        

def getSecondaryTemplateNames(ext = ''):
    if ext != '':        
        ext = ' ' + ext.replace('.','')
    ctx = acm.GetDefaultContext()
    extensions = ctx.GetAllExtensions('FXSLTemplate','FObject',True, True, 'aef reporting', 'secondary templates' + ext)
    return getListFromExtensions(extensions)
    
def getCSSNames():
    ctx = acm.GetDefaultContext()
    extensions = ctx.GetAllExtensions('FXSLTemplate','FObject',True, True, 'aef reporting', 'style sheets')
    return getListFromExtensions(extensions)


''' Not used '''
def transformXML(inputXML, printTemplate, printCSS, context):
    if not printTemplate:
        raise Exception("Need to supply an XSL template if printing to HTML")
    # Retrieve stylesheet to use
    pt = context.GetExtension('FXSLTemplate', 'FObject', printTemplate)       
    if not pt:
        raise Exception("Failed to find printTemplate " + printTemplate + " report output not completed")
    xsl = pt.Value()

    # Retrieve CSS to use if any and substitute into XSL
    if printCSS:
        cssObject = context.GetExtension('FXSLTemplate', 'FObject', printCSS)  
        if not cssObject:
            print ("Failed to find CSS ",printCSS, " Proceeding without it, output may be malformed")
        else:
            css = cssObject.Value()
            xsl = xsl.replace('<insertcss/>',css)

    # Perform transformation
    transformer = acm.CreateWithParameter('FXSLTTransform',xsl)
    return transformer.Transform(inputXML)

def produceOutputInternal(inputXML, printTemplate, printCSS, fileHTML, screenHTML, printHTML, fileXML, outputDir,\
                          overwrite, fileName, secondOutput, secondOutputTemplate, secondOutputFileExtension, compressXML, \
                           pictures=[]):
    inputXML = str(inputXML)
    ctx = acm.GetDefaultContext()
    outputDir=FFileUtils.expandEnvironmentVar(outputDir)
    
    if fileHTML or secondOutput or fileXML or screenHTML:
        createPath(outputDir)

    outputDir = os.path.abspath(outputDir)
    
    if fileXML:
        if compressXML:
            filePath = getFileName(outputDir, overwrite, fileName, '.zip')
            innerFileName = fileName + ".xml"
            f = zipfile.ZipFile(filePath,'w',zipfile.ZIP_DEFLATED).writestr( innerFileName, inputXML ) 
            print ("Wrote compressed XML to : " + filePath)
        else:
            filePath = getFileName(outputDir, overwrite, fileName, '.xml')
            open(filePath,'w').write(inputXML)
            print ("Wrote XML to : " + filePath)

    if fileHTML or screenHTML or printHTML:
        extraParams = acm.FDictionary()
        extraParams.AtPut('outputDir', outputDir)
        html = FReportUtils.transformXML(inputXML, printTemplate, printCSS, extraParams)
        #Special treatment of FStandardTemplateClickable
        if printTemplate.find('Clickable') != -1:
            import FHTMLJavaScript
            open(outputDir + 'portfolio_report.js','w').write(FHTMLJavaScript.javaScript)
            pictures = ['report_plus', 'report_minus', 'report_end']

        # Decode any pictures included.
        for pic in pictures:
            FPictures.decodePicture(pic, outputDir)
        # Output as specified
        if fileHTML or screenHTML:
            filePath = getFileName(outputDir, overwrite, fileName, '.html')
            open(filePath,'w').write(html)
            print ("Wrote report output to " + filePath)
            if screenHTML:
                webbrowser.open(filePath)
        if printHTML:
            acm.PrintToDefaultPrinter(html," ", "Page &p of &P  &b At date &d &t &b")

    if secondOutput:
        secondOut = FReportUtils.transformXML(inputXML, secondOutputTemplate)

        fileName = fileName.replace(" ", "_")         
        filePath = getFileName(outputDir, overwrite, fileName, secondOutputFileExtension)
        if secondOutputFileExtension == '.pdf':        
            foFilePath = filePath.replace(".pdf",".fo")
            open(foFilePath,'w').write(secondOut)
            print ("Wrote .fo to ", foFilePath)

            foFilePath = foFilePath.replace(".fo","")
            command = Template(FReportSettings.FOP_BAT)
            command = command.substitute({'extension':'pdf', 'filename':foFilePath})
            ret = os.system(command)
            if ret:
                logger.ELOG("PDF creation ERROR. Check that necessary third party software is installed.\nCommand: " + command)
            else:
                logger.LOG("PDF generated to " + filePath)
        else:
            open(filePath,'wb').write(secondOut.encode())
            print ("Wrote secondary output to :", filePath)
    

def createPath(outputDir):
    if not os.path.exists(outputDir):
        try:
            os.makedirs(outputDir)
            print ('Created report output directory:', outputDir)
        except:
            print ('Failed to create report directory:' + outputDir)
            raise
                        
def getFileName(outputDir, overwrite, fileName, ext):
    for i in range(1,100):
        if i == 1:
            numbering = ''
        else:
            numbering = '_' + str(i)
        testFile = os.path.join(outputDir, fileName + numbering + ext)
        if overwrite or not os.path.exists(testFile):
            return testFile
    print ('Error! Directory full')
    return 0

def make_xmlreportwriter(aelvardict):
    """Create a suitable FXMLREportWriter object for report output.

    Arguments:
        aelvardict -- dict from ael_variables should contain the values
                      from getAelVariables() in this module.
    """
    return FXMLReportWriter.FXMLReportWriter.make_iostring_writer()

def event_cb(channel, event_p, *arg_p):
    """Callback function"""
    etype=amb.mb_event_type_to_string(event_p.event_type)
    if etype == 'Status':
        ael.log('AMB Last Acknowledge Status = %s' % event_p.status.status)
        print ('AMB Last Acknowledge Status = %s' % event_p.status.status)
    elif etype == 'Message':
        ael.log('AMB Message Id      : %s' % str(event_p.message.id))
        ael.log('AMB Message Subject : %s' % str(event_p.message.subject))
        ael.log('AMB Message Time    : %s' % str(event_p.message.time))
        ael.log('AMB Message Size    : %s' % str(event_p.message.size))
        ael.log('AMB Message Type    : %s' % str(event_p.message.event_type))
        
        print ('AMB Message Id      : %s' % str(event_p.message.id))
        print ('AMB Message Subject : %s' % str(event_p.message.subject))
        print ('AMB Message Time    : %s' % str(event_p.message.time))
        print ('AMB Message Size    : %s' % str(event_p.message.size))
        print ('AMB Message Type    : %s' % str(event_p.message.event_type))
        buffer = amb.mbf_create_buffer_from_data(event_p.message.data_p)
        message = buffer.mbf_read().mbf_object_to_string_xml()
        ael.log('AMB Message Data XML: \n%s' % message)
        print ('AMB Message Data XML: \n%s' % message)
        amb.mb_queue_accept(channel, event_p.message, time.strftime("%Y-%m-%d %H:%M:%S"))
    elif etype == 'Disconnect':
        ael.log("Event Disconnect")
        print ("Event Disconnect")
    elif etype == 'End of Data':
        ael.log('AMB End of Data')
        print ('AMB End of Data')
    else:
        ael.log('AMB Unknown event type =' % etype)
        print ('AMB Unknown event type =' % etype)

def sendXMLToAMB(inputXML, xmlToAmb, ambAddress, ambSender, ambSubject, ambXmlMessage):
    """ Send xml data file to AMB """
    if xmlToAmb:
        # connect to AMB
        try:
            amb.mb_init(ambAddress)
        except Exception as err:
            ael.log('ERROR: ' + str(err) + '\nOccured when trying to connect to AMB at %s' % ambAddress)
            print ('ERROR: ', err,'\nOccured when trying to connect to AMB at %s' % ambAddress)
            return
        # create writer channel
        try:
            writer = amb.mb_queue_init_writer(ambSender, event_cb, None)
        except Exception as err:
            ael.log('ERROR: ' + str(err) + '\nOccured when trying to create writer channel for sender %s' % ambSender)
            print ('ERROR: ', err, '\nOccured when trying to create writer channel for sender %s' % ambSender)
            return
            
        try:
            # Create XML Report AMB messages
            message = amb.mbf_start_message( None, "INSERT_XMLREPORT", "1.0", None, ambSender )
    
            # Start XMLREPORT list
            mb_msg = message.mbf_start_list("XMLREPORT")
    
            # Insert XML Report as REPORT_DATA
            mb_msg.mbf_add_string("REPORT_DATA", inputXML)
    
            # End XMLREPORT list
            mb_msg.mbf_end_list()
    
            # End XML Report AMB message
            message.mbf_end_message()
        except Exception as err:
            ael.log('ERROR: ' + str(err) + '\nOccured when trying to create AMBA message')
            print ('ERROR: ', err, '\nOccured when trying to create AMBA message')
            return

        try:
            # Create AMB Buffer
            buffer = amb.mbf_create_buffer()
        except Exception as err:
            ael.log('ERROR: ' + str(err) + '\nOccured when trying to create buffer for the XML message')
            print ('ERROR: ', err, '\nOccured when trying to create buffer for the XML message')
            return
            
        try:
            # mbf_generate(buffer) will compress the message if it's greater than 64Kb in size        
            type = 'AMB'
            if ambXmlMessage:
                # mbf_generate_xml generates messages on XML format
                message.mbf_generate_xml(buffer) 
                type = 'XML' 
            else:
                # mbf_generate generates messages on FRONT internal AMB format
                message.mbf_generate(buffer)           
        except Exception as err:
            ael.log('ERROR: ' + str(err) + '\nOccured when trying to generate the ' + type + ' message')
            print ('ERROR: ', err, '\nOccured when trying to generate ' + type + ' message')
            return

        # send the XML message to the AMB
        status = amb.mb_queue_write(writer, ambSubject, buffer.mbf_get_buffer_data(), buffer.mbf_get_buffer_data_size(), time.strftime("%Y-%m-%d %H:%M:%S"))
        # check the status
        if status:
            ael.log("ERROR: ould not send the XML message to the AMB")
            print ("ERROR: could not send the XML message to the AMB")
        else:
            ael.log("XML report sent to AMB %s" % ambAddress)
            print ("XML report sent to AMB %s" % ambAddress)


...

  PriceReference

import acm

def get_Price_Ref_Name(trade):
    try:
        
        if trade.Instrument().RecLeg().FloatPriceReference() != None :
            return trade.Instrument().RecLeg().FloatPriceReference().Name()
        elif trade.Instrument().PayLeg().FloatPriceReference() != None:
            return trade.Instrument().PayLeg().FloatPriceReference().Name()
        else:
            return None
    except:
        return None

...

  ProcessCSVReport
import acm
import importlib
import os

def post_process_report(reportObj, params, ReportXML):
    generated_reports = reportObj.generatedFilePaths
    generator_name = params
    
    for report in generated_reports:
        if str(report).split(".")[-1] == "csv":  # We want the csv data generated
            report_generator = importlib.import_module(generator_name)
            report_generator.main(report, reportObj.params.fileName)
            #os.remove(report)  # Removing the CSV created by the FWorksheet report

...

  ProcessCSVReportWithParams
import acm
import importlib
import os

def post_process_report(reportObj, params, ReportXML):
    generated_reports = reportObj.generatedFilePaths
    generator_name = params.split(",")[0]
    all_currency = params.split(",")[1]
    currency = all_currency.split("/")
    for report in generated_reports:
        if str(report).split(".")[-1] == "csv":  # We want the csv data generated
            report_generator = importlib.import_module(generator_name)
            for each_currency in currency:
                report_generator.main(report, reportObj.params.fileName,each_currency)
            #os.remove(report)  # Removing the CSV created by the FWorksheet report

...

  PvFixedRate

import acm

def PvFixedRate(trade):
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    columnIdPv = 'Portfolio Present Value'
    columnIdType = 'Settlement Type'
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    
    pv_value = 0
    for mf in trade.MoneyFlows():
        result = str(calcSpace.CreateCalculation(mf, columnIdPv).Value())
        type = calcSpace.CreateCalculation(mf, columnIdType).Value()
        if type == 'Fixed Rate':
            print(result)
            if '.' in result:
                number_string = ''.join(filter(str.isdigit, result.split('.')[0])) + '.' + ''.join(filter(str.isdigit, result.split('.')[1]))
            print(number_string )
            number = float(number_string)
            pv_value += number
    
    calcSpace.Clear()
    str_number = "{:,.2f}".format(pv_value)
    fix_number = str_number.split('.')[0].replace(',', '.') + "," + str_number.split('.')[1]
    return fix_number

def ProjFixedRate(trade):
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    columnIdProj = 'Cash Analysis Projected'
    columnIdType = 'Settlement Type'
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    
    proj_value = 0
    for mf in trade.MoneyFlows():
        result = str(calcSpace.CreateCalculation(mf, columnIdProj).Value())
        type = calcSpace.CreateCalculation(mf, columnIdType).Value()
        if type == 'Fixed Rate':
            if '.' in result:
                number_string = ''.join(filter(str.isdigit, result.split('.')[0])) + '.' + ''.join(filter(str.isdigit, result.split('.')[1]))
            number = float(number_string)
            proj_value += number
            
    calcSpace.Clear()
    return proj_value

def EndCash(trade):
    startCash = trade.StartCash()
    interest = ProjFixedRate(trade)
    endCash = abs(startCash) + interest
    
    str_number = "{:,.2f}".format(endCash)
    fix_number = str_number.split('.')[0].replace(',', '.') + "," + str_number.split('.')[1]
    
    return fix_number if trade.BoughtAsString() == "Buy" else "-"+fix_number

...

  Python_Custom_Fields

import acm, math, traceback, re
import FLogger
import os
from decimal import Decimal, getcontext

logger = FLogger.FLogger(__name__)

def get_compliance_rule_by_rules(obj, calculation, rule_type, rule_category, keyword):
    compliance_rules = []
    for rule in acm.FComplianceRule.Select(''):
        if  rule.DefinitionInfo() == rule_type and rule.RuleCategory().Description() == rule_category and rule.Definition() is not None:
            if rule.Definition().Column() is not None:
                if rule.Definition().Column().OriginalColumnId().AsString() == calculation:
                    compliance_rules.append(rule)
    filtered_compliance_rules = filter_compliance_rules_by_target(obj, compliance_rules)
    try:
        if len(filtered_compliance_rules) > 1:
            for filtered_rule in filtered_compliance_rules:
                if filtered_rule.Definition().FilterQuery() is None and keyword == '':
                    return filtered_rule
                else:
                    if keyword == '' and filtered_rule.Definition().FilterQuery().Size() == 0:
                        return filtered_rule
                    elif keyword != '' and filtered_rule.Definition().FilterQuery().Size() > 0:
                        if keyword in filtered_rule.Definition().FilterQuery()[0].Name():
                            return filtered_rule
        else:
            return filtered_compliance_rules[0]
    except:
        return None

def filter_compliance_rules_by_target(obj, compliance_rules):
    filtered_compliance_rules = []
    for rule in compliance_rules:
        for apply in rule.AppliedRules():
            if apply.Target().Oid() == obj.Oid() and rule not in filtered_compliance_rules:
                filtered_compliance_rules.append(rule)
    return filtered_compliance_rules

def round_half_up(angka, jumlah_desimal=0):
    # https://realpython.com/python-rounding/
    multiplier = 10 ** jumlah_desimal
    result = math.ceil( angka*multiplier) / multiplier
    return result

def port_threshold_limit(obj, calculation, rule_type, rule_category, keyword):
    #complianceRules = acm.FComplianceRule.Select('')
    complianceRule = get_compliance_rule_by_rules(obj, calculation, rule_type, rule_category, keyword)

    try:
        applied_rule = get_applied_rule(obj, complianceRule.AppliedRules())
    
        if applied_rule.Target().Oid() == obj.Oid():
            return applied_rule.ThresholdValues().First().ValueAdjusted()
        else:
            return 0.0
    except:
        return 0.0
        
def get_applied_rule(obj, applied_rules):
    applied_rule = None
    for rule in applied_rules:
        if rule.Target().Oid() == obj.Oid():
            applied_rule = rule
            break
    return applied_rule

def utilization_calculation(threshold, rule_value):
    getcontext().prec = 21
    if threshold.ComparisonType() == 'Greater or Equal' or threshold.ComparisonType() == 'Greater':
        #return Decimal( float(rule_value.WatermarkValue()) / float(threshold.ValueAdjusted()) )
        util_num = float( Decimal(rule_value.WatermarkValue()) / Decimal(threshold.ValueAdjusted()) / 10**19 )
        util_num = round_half_up(util_num, jumlah_desimal=2)
    elif threshold.ComparisonType() == 'Less or Equal' or threshold.ComparisonType() == 'Less':
        #return Decimal( float(threshold.ValueAdjusted()) / float(rule_value.WatermarkValue()) )
        util_num = float( Decimal(threshold.ValueAdjusted()) / Decimal(rule_value.WatermarkValue()) / 10**19 )
        util_num = round_half_up(util_num, jumlah_desimal=2)
    else:
        util_num = 0.0
    return util_num

def port_utilization_percentage(obj, calculation, rule_type, rule_category, keyword):
    complianceRule = get_compliance_rule_by_rules(obj, calculation, rule_type, rule_category, keyword)
    
    try:
        applied_rule = get_applied_rule(obj, complianceRule.AppliedRules())
    
        if applied_rule.Target().Oid() == obj.Oid():
            threshold = applied_rule.ThresholdValues().First().Threshold()
            rule_value = None
            for rule_val in acm.FRuleValueHistory.Select(''):
                if rule_val.ResultHistory().Threshold() is threshold:
                    rule_value = rule_val
                    break
            return "{:,.2f}".format(utilization_calculation(threshold, rule_value)).replace('.',',') + '%'
        else:
            return "{:,.2f}".format(0.0).replace('.',',') + '%'
        
        
        
    except:
        return "{:,.2f}".format(0.0).replace('.',',') + '%'

def port_utilization_val(obj, calculation, rule_type, rule_category, keyword):
    complianceRule = get_compliance_rule_by_rules(obj, calculation, rule_type, rule_category, keyword)
    
    rule_val = get_rule_value_history_by_target(obj, calculation, rule_type, rule_category, keyword)
    if rule_val is not None:
        return rule_val.WatermarkValue()
    else:
        return 0.0
        
def get_rule_value_history_by_target(obj, calculation, rule_type, rule_category, keyword):
    complianceRule = get_compliance_rule_by_rules(obj, calculation, rule_type, rule_category, keyword)
    
    try:
        applied_rule = get_applied_rule(obj, complianceRule.AppliedRules())
    
        if applied_rule.Target().Oid() == obj.Oid():
            threshold = applied_rule.ThresholdValues().First().Threshold()
            rule_value = None
            for rule_val in acm.FRuleValueHistory.Select(''):
                if rule_val.ResultHistory().Threshold() is threshold:
                    rule_value = rule_val
                    break
            return rule_value
        else:
            return None
        
    except:
        return None

def get_end_date(obj, calculation, rule_type, rule_category, keyword):
    complianceRule = get_compliance_rule_by_rules(obj, calculation, rule_type, rule_category, keyword)

    try:
        applied_rule = get_applied_rule(obj, complianceRule.AppliedRules())
    
        if applied_rule.Target().Oid() == obj.Oid():
            return applied_rule.EndDate()
        else:
            return '-'
    except:
        return '-'

...

  Python_MO_Custom_Fields

import ael, acm, math, traceback, re
import FLogger
import os
from decimal import Decimal, getcontext
from time import strftime, strptime

logger = FLogger.FLogger(__name__)
today_date = acm.Time.DateToday()

def get_compliance_rule_by_name(rule_name):
    try:
        return acm.FComplianceRule[rule_name]
    except:
        return None

def round_half_up(angka, jumlah_desimal=0):
    # https://realpython.com/python-rounding/
    multiplier = 10 ** jumlah_desimal
    result = math.ceil( angka*multiplier) / multiplier
    return result
        
def utilization_calculation(threshold_val, rule_value, cross_rate):
    getcontext().prec = 21
    compa_type = threshold_val.Threshold().ComparisonType()
    threshold_val_limit = threshold_val.ValueAdjusted() * cross_rate
    if compa_type == 'Greater or Equal' or compa_type == 'Greater':
        #return Decimal( float(rule_value.WatermarkValue()) / float(threshold.ValueAdjusted()) )
        #util_num = float( Decimal(rule_value.WatermarkValue()) / Decimal(threshold.ValueAdjusted()) / 10**19 )
        util_num = float( Decimal(rule_value) / Decimal( threshold_val_limit ) ) * 100.0
        util_num = round_half_up(util_num, jumlah_desimal=2)
    elif compa_type == 'Less or Equal' or compa_type == 'Less':
        #return Decimal( float(threshold.ValueAdjusted()) / float(rule_value.WatermarkValue()) )
        #util_num = float( Decimal(threshold.ValueAdjusted()) / Decimal(rule_value.WatermarkValue()) / 10**19 )
        util_num = float( Decimal( threshold_val_limit ) / Decimal(rule_value) ) * 100.0
        util_num = round_half_up(util_num, jumlah_desimal=2)
    else:
        util_num = 0.0
    return util_num
    
def get_alert_by_rule_name(obj, rule_name):
    threshold_val = get_threshold_value_by_rule_name(obj, rule_name)
    try:
        threshold_val_id = threshold_val.Oid()
        alerts = acm.FAlert.Select( "subjectId=" + str( obj.Oid() ) + " and thresholdValue="+str(threshold_val_id) )
        rule_res_hists = acm.FRuleResultHistory.Select( "subjectId=" + str( obj.Oid() ) + " and thresholdValue="+str(threshold_val_id) )
    except:
        alerts = []
        rule_res_hists = []
    if len(rule_res_hists) > 0:
        return ( rule_res_hists[-1], 'Rule Result History' )
    else:
        if len(alerts) > 0:
            return ( alerts[-1], 'Alert' )
        else:
            return ( None, 'Not Alert and Rule Result History' )

def get_last_diary_note_by_rule_name(obj, rule_name):
    threshold_val = get_threshold_value_by_rule_name(obj, rule_name)
    try:
        a = threshold_val.Alerts().Last()
    except:
        a = None
    if a is not None:
        return a.LastDiaryEntryNotesAsString()
    else:
        return '-'

    
def get_rule_value_by_rule_name(obj, rule_name):
    alert_set = get_alert_by_rule_name(obj, rule_name)
    try:
        alert_id = alert_set[0].Oid()
        alert_type = alert_set[1]
        if alert_type == 'Rule Result History':
            breaches = acm.FRuleValueHistory.Select( "resultHistory=" + str(alert_id) )
        elif alert_type == 'Alert':
            breaches = acm.FBreach.Select( "alert=" + str(alert_id) )
        else:
            breaches = []
    except:
        breaches = []
    if len(breaches) > 0:
        latest_breach = breaches[-1]
        temp_date = strftime('%Y-%m-%d', strptime( latest_breach.Start(), '%Y-%m-%d %H:%M:%S' ) )
        if temp_date == today_date:
            return latest_breach
        else:
            return None
    else:
        return None
        
def get_end_date_by_rule_name(obj, rule_name):
    applied_rule = get_applied_rule_by_target(obj, rule_name)

    try:
        return applied_rule.EndDate()
    except:
        return '-'

def get_utilization_val_by_rule_name(obj, rule_name):
    rule_val = get_rule_value_by_rule_name(obj, rule_name)
    if rule_val is not None:
        return rule_val.WatermarkValue()
    else:
        return 0.0
        
def get_utilization_percentage_by_rule_name(threshold_val, utilization, cross_rate=1.0):
    try:
        calc_val = utilization_calculation(threshold_val, utilization, cross_rate)
        '''
        if abs(calc_val) >= 1000.0:
            return "{:,.2f}".format(calc_val).replace(',',' ').replace('.',',').replace(' ','')
        else:
            return "{:,.2f}".format(calc_val).replace('.',',')
        '''    
        if abs(calc_val) >= 1000.0:
            return "{:,.2f}".format(calc_val).replace(',','')
        else:
            return "{:,.2f}".format(calc_val)
        #return "{:,.2f}".format(utilization_calculation(threshold, rule_value)).replace('.',',') + '%'
        #return "{:,.2f}".format(calc_val).replace('.',',')
    except:
        #return "{:,.2f}".format(0.0).replace('.',',')
        return "{:,.2f}".format(0.0)

def get_threshold_value_by_rule_name(obj, rule_name):
    threshold_values = get_threshold_values_by_rule_name(obj, rule_name)
    if len(threshold_values) > 0:
        rep_threshold_values = [ tv1 for tv1 in threshold_values if tv1.Threshold().Type().Name() == 'Reporting' ]
        if len(rep_threshold_values) > 0:
            return rep_threshold_values[-1]
        else:
            return None
    else:
        return None

def get_vio_threshold_value_by_rule_name(obj, rule_name):
    threshold_values = get_threshold_values_by_rule_name(obj, rule_name)
    if len(threshold_values) > 0:
        vio_threshold_values = [ tv2 for tv2 in threshold_values if tv2.Threshold().Type().Name() == 'Violation' ]
        if len(vio_threshold_values) > 0:
            return vio_threshold_values[-1]
        else:
            return None
    else:
        return None

def get_war_threshold_value_by_rule_name(obj, rule_name):
    threshold_values = get_threshold_values_by_rule_name(obj, rule_name)
    if len(threshold_values) > 0:
        war_threshold_values = [ tv3 for tv3 in threshold_values if tv3.Threshold().Type().Name() == 'Warning' ]
        if len(war_threshold_values) > 0:
            return war_threshold_values[-1]
        else:
            return None
    else:
        return None

def get_threshold_limit_by_rule_name(obj, rule_name):
    threshold_value = get_vio_threshold_value_by_rule_name(obj, rule_name)
    if threshold_value is not None:
        return threshold_value.ValueAdjusted()
    else:
        threshold_value = get_war_threshold_value_by_rule_name(obj, rule_name)
        if threshold_value is not None:
            return threshold_value.ValueAdjusted()
        else:
            return 0.0

def get_applied_rule_by_target(obj, rule_name):
    try:
        appliedRules = acm.FAppliedRule.Select("targetId="+str(obj.Oid())+" and complianceRule='"+rule_name+"'")
        return appliedRules[0]
    except:
        return None

def get_threshold_values_by_rule_name(obj, rule_name):
    applied_rule = get_applied_rule_by_target(obj, rule_name)
    try:
        return applied_rule.ThresholdValues()
    except:
        return []

def get_rule_type_by_rule_name(rule_name):
    try:
        complianceRule = get_compliance_rule_by_name(rule_name)
        return complianceRule.DefinitionInfo()
    except:
        return ''

def get_threshold_by_rule_name(rule_name):
    complianceRule = get_compliance_rule_by_name(rule_name)
    
    try:
        threshold = complianceRule.Threshold().First()
        return threshold
    except:
        return None

def get_threshold_limit_by_rule_name2(rule_name):
    threshold = get_threshold_by_rule_name(rule_name)
    try:
        return threshold.ValueAdjusted()
    except:
        return 0.0
        

def get_status_color_by_threshold_type(threshold_val):
    if threshold_val.Threshold().Type().Name() == 'Warning':
        return 1
    elif threshold_val.Threshold().Type().Name() == 'Violation':
        return 3
    else:
        return 2

def get_comparison_result_from_threshold_and_util_value(threshold_val, util_val):
    comparison_type = threshold_val.Threshold().ComparisonType()
    threshold_limit = threshold_val.ValueAdjusted()
    if comparison_type == 'Greater':
        return threshold_limit < util_val
    elif comparison_type == 'Greater or Equal':
        return threshold_limit <= util_val
    elif comparison_type == 'Less':
        return threshold_limit > util_val
    elif comparison_type == 'Less or Equal':
        return threshold_limit >= util_val
    elif comparison_type == 'Equal':
        return threshold_limit == util_val
    elif comparison_type == 'Not Equal':
        return threshold_limit != util_val
    else:
        return None

def get_date_difference(date1, date2):
    return acm.Time.DateDifference(date1, date2)

    
def get_expiry_status(end_date, today):
    date_diff = get_date_difference(end_date, today)
    if date_diff > 0:
        return 0
    else:
        if end_date in ['', '-']:
            return 0
        else:
            return 3

def get_expiry_status_by_rule_name(obj, rule_name):
    try:
        end_date = get_end_date_by_rule_name(obj, rule_name)
        today = acm.Time.DateToday()
        status_num = get_expiry_status(end_date, today)
    except:
        status_num = 0
    return status_num
    
def limit_indicator(threshold_val, util_val):
    try:
        compa_result = get_comparison_result_from_threshold_and_util_value(threshold_val, util_val)
        if compa_result:
            return get_status_color_by_threshold_type(threshold_val)
        else:
            return 0
    except:
        return 0


def trading_manager_utilization_percentage(obj, rule_name):
    threshold_val = get_threshold_value_by_rule_name(obj, rule_name)
    rule_value = get_utilization_val_by_rule_name(obj, rule_name)
    
    res_value = utilization_calculation(threshold_val, rule_value)
    return res_value
    
    
def map_threshold_type_to_display(type, forstr=False):
    if type == "":
        return 0 if forstr == False else "bcg white"
    
    if type == "Violation":
        return 1 if forstr == False else "bcg red"
    
    if type == "Safe":
        return 2 if forstr == False else "bcg green"
        
    if type == "Warning":
        return 3 if forstr == False else "bcg yellow"
    
    
    
def is_violated_MO10(obj, cr_name, value, utilization, forstr=False):
    threshold_obj = get_compliance_rule_by_name(cr_name).Thresholds().First()
    threshold_comparison = threshold_obj.ComparisonType()
    threshold_value = value
    rule_value = utilization
    
    if threshold_comparison == 'Greater or Equal':
        return map_threshold_type_to_display(threshold_obj.Type().Name(), forstr) if rule_value >= threshold_value else map_threshold_type_to_display("Safe", forstr)
        
    elif threshold_comparison == 'Greater':
        return map_threshold_type_to_display(threshold_obj.Type().Name(), forstr) if rule_value > threshold_value else map_threshold_type_to_display("Safe", forstr)
        
    elif threshold_comparison == 'Less or Equal':
        return map_threshold_type_to_display(threshold_obj.Type().Name(), forstr) if rule_value <= threshold_value else map_threshold_type_to_display("Safe", forstr)
        
    elif threshold_comparison == 'Less':
        return map_threshold_type_to_display(threshold_obj.Type().Name(), forstr) if rule_value < threshold_value else map_threshold_type_to_display("Safe", forstr)

def is_violated_MO10_new(trades_instrument_list, cr_name, isStr=True):
    try :
        threshold_obj = acm.FComplianceRule[cr_name].Thresholds().First().Value()
    except :
        return 0
    
    #trades_instrument_list = acm.FInstrument['FR0071'].Trades()
    
    cut_loss_ins = 0
    for trade in trades_instrument_list:
        context = acm.GetDefaultContext()
        sheetType = 'FTradeSheet'
        calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)         
        
        cut_loss_val_str = calcSpace.CreateCalculation(trade, "Cut Loss Ratio").FormattedValue()
        cut_loss_val = float(cut_loss_val_str) if cut_loss_val_str else 0
        
        cut_loss_ins += cut_loss_val
    
    calcSpace.Clear()
    
    if float(threshold_obj) > cut_loss_ins:
        return "bcg_green" if isStr == True else 1
    elif float(threshold_obj) == cut_loss_ins:
        return "bcg_yellow" if isStr == True else 2
    elif float(threshold_obj) < cut_loss_ins:
        return "bcg_red" if isStr == True else 3
    else :
        return [float(threshold_obj), cut_loss_in]


def UtilisasiDelta(object, WhatVal):
    trade = object.Trades().AsArray().First()
    context = acm.GetDefaultContext()
    sheetType = 'FTradeSheet'
    columnId = 'Portfolio Delta Cash' if WhatVal == "FX" else "Portfolio Delta Yield"

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    calculation = calcSpace.CreateCalculation(trade, columnId).FormattedValue() 
    utilisasiVal = "".join([x for x in calculation if x.isdigit() or x == "-"])
    
    calcSpace.Clear()
    return float(utilisasiVal) if utilisasiVal != "" else 0
    

def PercentageDelta(object, WhatVal):
    ins = object.Instrument()
    thresholdFirstVal = get_compliance_rule_by_name("Limit FX Delta - Vania").Thresholds().First().Value()
    
    calculation = UtilisasiDelta(object, WhatVal)
    
    if calculation != 0 :
        percentage_val = calculation / thresholdFirstVal
    else :
        percentage_val = 0
    
    return abs(percentage_val)
        

def PercentageDelta_multi(object):
    thresholdFirstVal = get_compliance_rule_by_name("Limit FX Delta - Vania").Thresholds().First().Value()
    
    utilisasiVal_all = 0
    
    try :
        list_ins = object.Instruments.AsArray
    except :
        return 0
    
    for ins in list_ins :
        utilisasiVal = UtilisasiDelta(ins)
        utilisasiVal_all += utilisasiVal
    
    if float(thresholdFirstVal) > 0:
        percentage_val = float(utilisasiVal_all) / float(thresholdFirstVal)
    else :
        percentage_val = 0
    
    return percentage_val

...

  Report_Python

import acm
import ael
import math
import traceback
import FLogger
import os
import re
import locale

from datetime import datetime, timedelta

logger = FLogger.FLogger(__name__)

context = acm.GetDefaultContext( )
stand_calc = acm.FStandardCalculationsSpaceCollection()


def string_format_to_float(numberString):
    if numberString == "":
        num = 0
    else:
        for i in numberString[::-1]:
            if (i == ".") | (i == ","):
                dec = i
                break
        if dec == ".":
            num = float(numberString.replace(",",""))
        elif dec == ",":    
            num = float(numberString.replace(".","").replace(",","."))
    return num
    
def port_threshold_limit(obj, compliance_rule_name):
    #complianceRules = acm.FComplianceRule.Select('')
    complianceRule = acm.FComplianceRule[compliance_rule_name]
    '''
    applied_rule = None
    for compliance in complianceRules:
        if compliance   .AppliedRules().Size() != 0:
            if compliance.AppliedRules().Last().Target() is object and compliance.Name() == compliance_rule_name:
                applied_rule = compliance.AppliedRules().Last()
                break
    '''
    try:
        applied_rule = complianceRule.AppliedRules().Last()
    
        if applied_rule.Target() is obj.Portfolio():
            return applied_rule.ThresholdValues().First().ValueAdjusted()
        else:
            return 0
    except:
        return 0

def get_year_difference(end_date, value_day):
    dateDiff = abs(acm.Time.DateDifference(end_date, value_day));
    hari_per_tahun = 365
    looper = True
    logger.LOG(dateDiff)

    count = 0
    while looper:
        dateDiff = dateDiff - hari_per_tahun

        if dateDiff < 0:
            break
        else:
            count += 1
    
    return count
    #return value_day
    
def combine_string(text1, text2, text3, text4, text5):
    return str(text1) + str(text2) + str(text3) + str(text4) + str(text5)

def sum_column(list_trade):
    
    total = 0
    list_trade = list(list_trade)
    
    for i in list_trade:
        total += int(i.Premium())
    
    return total

def remove_bg(nominal_premium):
    nominal_premium = str(nominal_premium)
    return nominal_premium
    
def multiply_value(value1, value2, trade):
    logger.LOG('==========')
    logger.LOG(trade.Trade().Oid())
    logger.LOG(trade.Value())
    logger.LOG(value1)
    logger.LOG('============')
    return value1 * value2

def calculate_end_interest(rate, start_date, end_date, amount):
    selisih_tanggal = acm.Time.DateDifference(end_date, start_date)
    end_interest = (amount * rate * selisih_tanggal)/365
    
    return end_interest/100
    
def get_cashflow_proj_interest_amt(trd):
    
    mfs = trd.MoneyFlows()
    
    try:
        total_proj = 0.0
        for mf in mfs:
            if mf.Type() in ['Fixed Rate', 'Float Rate']:
                proj = float( mf.Calculation().Projected(stand_calc) )
                total_proj += proj 
        return total_proj
    except:
        return 0.0
    
def calculate_rate(trade, column_name):

    context = acm.GetDefaultContext( )
    sheet_type = 'FTradeSheet'
    column_id = column_name
    ins = trade
    
    #Create CalculationSpace (a virtual Trading Manager)
    calc_space = acm.Calculations( ).CreateCalculationSpace( context, sheet_type )
    #Get raw value
    value = calc_space.CalculateValue( ins, column_id)
    #Get formatted data
    calculation = calc_space.CreateCalculation( ins, column_id )
    
    try:
        result = float(calculation.FormattedValue()) * ins.Nominal()
    except Exception as e:
        #traceback.logger.LOG_exc()
        logger.LOG(e)
        result = ''
    
    return result

def calculate_amount_closing(trade, check_yesterday):
    ins_obj = trade.Instrument()
    value_day = trade.ValueDay()
    curr = trade.Currency()
    nominal = trade.Nominal()
    
    if check_yesterday:
        yesterday = acm.Time.DateAddDelta(value_day, 0, 0, -1)
        rate = ins_obj.MtMPrice(yesterday, curr)
    else:
        rate = ins_obj.MtMPrice(value_day, curr)
        
        
    return nominal * rate

def calculate_amount_closing_journal(object, isMovement=False):
    curr = object.Currency().Name()
    baseCurr = object.BaseCurrency().Name()
    amount = object.Amount()
    
    if curr != baseCurr:
        try :
            prices = acm.FPrice.Select(f"instrument = '{curr}' and currency = '{baseCurr}' and market = 'EOD_MtM' and day = YESTERDAY").Last().Settle()
        except:
            prices = 10000
        
        return amount * prices
    else :
        return amount
            

def calculate_amount_movement(trade):
    amount_closing = calculate_amount_closing(trade, False)
    amount_closing_yesterday = calculate_amount_closing(trade, True)
    return amount_closing - amount_closing_yesterday
    
def get_current_start_and_end_date(trade):
    start_date, end_date = None, None
    today = acm.Time.DateNow()
    
    for cf in trade.Instrument().Legs()[0].CashFlows():
        start_date = cf.StartDate()
        end_date = cf.EndDate()
        if today >= start_date and today <= end_date:
            return [start_date, end_date]
    
    return start_date, end_date
    
def get_start_date_cashflow(trade):
    x = trade.Instrument().Legs()[0].CashFlows()

    list_diff, list_start_date = [], []
    
    for i in x:
        today = acm.Time.DateToday()
        difference = acm.Time.DateDifference(today, i.StartDate())
        list_diff.append(difference)
        list_start_date.append(i.StartDate())
        
    min_day = min(list_diff)
    index = list_diff.index(min_day)
   
    return list_start_date[index]

def get_end_date_cashflow(trade):
    x = trade.Instrument().Legs()[0].CashFlows()

    list_diff, list_end_date = [], []
    
    for i in x:
        today = acm.Time.DateToday()
        difference = acm.Time.DateDifference(today, i.StartDate())
        list_diff.append(difference)
        list_end_date.append(i.EndDate())
        
    min_day = min(list_diff)
    index = list_diff.index(min_day)

    return list_end_date[index]

def testButton():
    logger.LOG('aaaa')

def testInputHooks(row, col, calcval, str, operation):
    logger.LOG('bbb')
    logger.LOG(str)
    logger.LOG(row)
    logger.LOG(col)
    logger.LOG(calcval)
    logger.LOG(operation)
    x = row.Trade()
    
    if len(str) > 0:
        x.Text2 = 'Test_Input_Tanggal : ' + str
    else:
        logger.LOG('masukk')
        x.Text2 = x.ValueDay()
        
    x.Commit()

def dynamic_rate(trade, column_id):
    ins_obj = trade.Instrument()
    text2 = trade.Text2().replace('Test_Input_Tanggal : ', '')

    rate = ins_obj.MtMPrice(text2, trade.Currency().Name())
    return rate

def calculate_PL_yesterday(value, type):
    
    cs = acm.Calculations().CreateStandardCalculationsSpaceCollection()
    today = acm.Time.DateToday()
    yesterday = acm.Time.DateAddDelta(today, 0, 0, -1)
    trade_calc = value.Calculation()
    
    try:
        if type == "TPL" :
            pv = trade_calc.TotalProfitLoss(cs, value.Instrument().StartDate(), yesterday).Number()
        
        elif type == "UPL" :
            pv = trade_calc.UnrealizedProfitLoss(cs, value.Instrument().StartDate(), yesterday).Number()
            
        elif type == "RPL" :
            pv = trade_calc.RealizedProfitLoss(cs, value.Instrument().StartDate(), yesterday).Number()
        else:
            pv = None
            
    except Exception as e:
        #traceback.logger.LOG_exc()
        logger.LOG(e)
        pv = None
    
    return pv

def sum_PL_yesterday(trades, type):
    
    cs = acm.Calculations().CreateStandardCalculationsSpaceCollection()
    result = 0
    today = acm.Time.DateToday()
    yesterday = acm.Time.DateAddDelta(today, 0, 0, -1)
        
    for i in trades:
        trade_calc = i.Calculation()
        
        try:
            if type == "TPL" :
                pv = trade_calc.TotalProfitLoss(cs, i.Instrument().StartDate(), yesterday).Number()
            
            elif type == "UPL" :
                pv = trade_calc.UnrealizedProfitLoss(cs, i.Instrument().StartDate(), yesterday).Number()
                
            elif type == "RPL" :
                pv = trade_calc.RealizedProfitLoss(cs, i.Instrument().StartDate(), yesterday).Number()
                
            else:
                pv = 0.00
                
        except Exception as e:
            #traceback.logger.LOG_exc()
            logger.LOG(e)
            pv = 0.00
            
        if math.isnan(pv):
            pv = 0
            
        result += pv
    
    return result

def get_value_from_hierarchy(hierarchy_name, node_name, ins_name):
    instrument_dict = {
        "Stock" : "-",
        "Future/Forward" : "-",
        "Option" : "Option",
        "Bond" : "Bond",
        "Deposit" : "MMLD",
        "Swap" : "IRS",
        "CurrSwap" : "CCS",
        "FxSwap" : "-",
        "BasketRepo/Reverse" : "Repo",
        "FXOptionDatedFwd" : "-",
        "Fx Rate" : "Fx Cash"
    }
    
    ins_name = ins_name.replace("'","")
    
    try:
        hierarchy = acm.FHierarchy[hierarchy_name]
        column_names = hierarchy.HierarchyType().HierarchyColumnSpecifications()
        list_nodes = hierarchy.HierarchyNodes()
        node_value = list_nodes[list_nodes.FindString(node_name)].HierarchyDataValues()
        index_column = column_names.FindString(instrument_dict[ins_name])
        
        if index_column == -1:
            index_column = "Not Found"
            
        result = float(node_value[index_column].DataValue())
    except Exception as e:
        #traceback.logger.LOG_exc()
        logger.LOG(e)
        #result = "'" + str(ins_name) + "' not found in " + str(hierarchy_name) + "."
        result = ""
    
    return result

def Total_Cashflow(list_trade):
    
    total = 0
    list_trade = list(list_trade)
    
    for i in list_trade:
        total += int(i.FaceValue())
    
    return total

def Instrument_Total_Cashflow(ins_type, list_trade):
    
    total = 0
    
    for i in list_trade:
        if i.Instrument().InsType().lower() == ins_type.lower():
            total += int(i.FaceValue())
    
    if total == 0 :
        total = None
        
    return total

def Product_Total_Cashflow(product_type, list_trade):
    
    total = 0
    
    for i in list_trade:
    
        try:
            if i.OptKey3().Name().lower() == product_type.lower() :
                total += int(i.FaceValue())
        except Exception as e:
            #traceback.logger.LOG_exc()calculate_amount_closing_journal
            logger.LOG(e)
            continue
    
    if total == 0 :
        total = None
        
    return total

def MMInterbankLIQ19(trade, nominal_type, list_category): # Buat FTradeRow
    result = None
    
    try:
        if trade.OptKey4().Name() in list_category:

            if nominal_type == "Buy" and trade.Nominal() >= 0 :
                result = trade.Nominal()
            elif nominal_type == "Sell" and trade.Nominal() < 0 :
                result =  trade.Nominal()
                
            elif nominal_type == "All" : 
                result =  trade.Nominal()
    except:
        pass
    
    return result

def TotalMMInterbankLIQ19(list_trade, nominal_type, list_category):
    result = 0

    for i in list_trade:
        temp_result = MMInterbankLIQ19(i, nominal_type, list_category)
        try:
            result += temp_result
        except:
            result += 0
    
    if result == 0 :
        result = None
        
    return result
    
reports_rows = {}

def generate_row_number(trade_id, report_key, group):

    global reports_rows

    if report_key not in reports_rows:
        reports_rows[report_key] = []
            
    try :
        index = reports_rows[report_key].index(trade_id)
        row_number = index + 1
    except:
        reports_rows[report_key].append(trade_id)
        row_number = len(reports_rows[report_key])

    return row_number

def get_date_from_cashflow_for_nominal_value(all_cashflow):

    date_input = acm.Time.DateToday()
    
    for cf in all_cashflow:
        time_range = bool(cf.StartDate() <= date_input and cf.EndDate() >= date_input)
        cashflow_type = cf.CashFlowType()
            
        if time_range and 'Rate' in cashflow_type :
            return cf.PayDate()
            
def get_projected_from_money_flow(trade, pay_date, cashflow_type):
    moneyflows = trade.MoneyFlows()
    total = 0
    
    try:
        for i in moneyflows:
            if i.Type() == "Premium" :
                continue
            
            proj_value = i.Calculation().Projected(stand_calc)
            result = proj_value.Number()
            nominal = trade.Nominal()
            
            time_range = acm.Time.DateDifference(pay_date, i.PayDate())

            if time_range == 0 and "Amount" not in cashflow_type and result != nominal :
                total += result
                break
            elif time_range == 0 and "Amount" in cashflow_type:
                total += nominal
                break
    except:
        pass
        
    return total

def get_projected_and_paydate_from_cashflow(trade, tipe_kolom):
    moneyflows = trade.MoneyFlows()
    legs = trade.Instrument().Legs()
    interest_date,interest_payment, interest_receive = '', 0, 0
    for i in legs:
        all_cashflow = i.CashFlows()
        leg_currency = i.Currency().Name()
        pay_date = get_date_from_cashflow_for_nominal_value(all_cashflow)
        
        if i.IsLocked():
            interest_date = pay_date
            
        for j in moneyflows:
            if j.Currency().Name() == leg_currency and j.PayDate() == pay_date and 'Rate' in j.Type(): 
                
                temp_nominal = get_projected_from_money_flow(trade, pay_date, j.Type())
                
                try:
                    temp_nominal = float(temp_nominal)
                except:
                    temp_nominal = 0
                    
                if i.PayLeg() :
                    interest_payment = temp_nominal
                else:
                    interest_receive = temp_nominal 
                    if trade.Oid() == 11343:
                        logger.LOG(temp_nominal)
                    
    
    if tipe_kolom == 'Proceed' :
        return interest_payment + interest_receive
    else:
    
        if interest_date == '':
            return pay_date
        else:
            return interest_date
            

def get_ctp_report_type(trade):
    cpty = trade.Counterparty()
    
    ctp_participants = cpty.AddInfoValue('CTPParticipants')
    result_group = ""
    
    try:
        #if "TQA" in cpty.Name() or "Sekuritas" in cpty.Name():
        
        if ctp_participants.lower() == 'yes' :
            cpty.AddInfoValue('CTPParticipants','Yes')
            result_group = "TWO"
        else:
            cpty.AddInfoValue('CTPParticipants','No')
            result_group = "ONE"
    
    except Exception as e: 
        logger.LOG(e)
    
    cpty.Commit()
    return result_group
    
def ctp_TransactionType(trade):
    
    type_result = ""
    ins_type = str(trade.InstrumentSubType())
    
    if 'repo' in ins_type.lower() :
        type_result = "R"
    elif acm.Time.AsDate(trade.TradeTime()) == trade.Instrument().StartDate() :
        type_result = "W"
    else:
        type_result = "O"
    
    trade.AddInfoValue('TransactionType', type_result)
    trade.Commit()
    
    return type_result

def ctp_FileGenerationStatus(trade, CTPStateStatus):
    context = acm.GetDefaultContext()
    sheetType = 'FTradeSheet'
    input = trade
    columnId_BoS = 'Bought or Sold'

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    calculation_BoS = calcSpace.CreateCalculation(input, columnId_BoS)
    buyorsell = calculation_BoS.FormattedValue().upper()
    
    statestatus = CTPStateStatus.upper() if CTPStateStatus != 'Amend' else 'AMD'
    
    calcSpace.Clear()
    
    if CTPStateStatus.lower() == 'success':
        return 'SUCCESS'
    else:
        trdnbr = str(trade.Oid())
        from CTP_Mandiri_Export_CSV import exportPath
        exportPath += '\\{}\\'.format(buyorsell)
        os.chdir(str(exportPath))
        regex = '[0-9]{12}'
        filename = 'CTP_{}_{}_{}.csv'.format(trdnbr, regex, statestatus)
        found = False
        for file in os.listdir():
            if re.search(filename, file):
                found = True
                break
            else:
                continue
                
        if found == True:
            return 'SUCCESS'
        else:
            return 'FAILED_{}'.format(statestatus)

def get_Mandiri_SID():
    mandiri = acm.FParty['Mandiri TRS HO']
    return mandiri.AdditionalInfo().SID()

def get_repurchase_value(trade):

    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    input = trade.MoneyFlows()
    columnId = 'Cash Analysis Projected'
    
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    
    sum = 0
    list = []
    
    for mf in input:
        if mf.MoneyFlowType() != "Trade Premium":
            calculation = calcSpace.CreateCalculation(mf, columnId).FormattedValue()
            num=float(calculation.replace(",",""))
            sum+=num
            list.append(mf.MoneyFlowType())
            
    calcSpace.Clear()
    return sum

def get_Collateral(trade, justTrade=False):
    try:
        agl = trade.AgreementLinks()[0]
        mag = agl.MasterAgreement().Name()
        ms = agl.MarginingSet().Name()
        query = """
            select al.trdnbr, mag.name, ms.name 
            from TradeAgreementLink al, MarginingSet ms, MasterAgreement mag
            where al.margining_set_seqnbr = ms.seqnbr
            and al.master_agreement_seqnbr = mag.seqnbr
            and mag.name = '{master_agreement}'
            and ms.name = '{margining_set}'
            """.format(master_agreement = mag, margining_set = ms)
        for i in ael.asql(query)[1][0]:
            trd_no = i[0]
            t = acm.FTrade[trd_no]
            if (trd_no != trade.Oid()) & (t.Instrument().InsType().lower() in ('collateral', 'bond', 'bill', 'frn', 'mbs/abs')):
                return t if justTrade else [t, t.Instrument().Name()]
    except Exception as e:
        #print(get_Collateral.__name__, str(trade.Oid()), str(e))
        #logger.LOG("%s of %s : %s" %(get_Collateral.__name__, str(trade.Oid()), str(e)))
        return None

def get_Repo(trade, justTrade=False):
    try:
        agl = trade.AgreementLinks()[0]
        mag = agl.MasterAgreement().Name()
        ms = agl.MarginingSet().Name()
        query = """
            select al.trdnbr, mag.name, ms.name 
            from TradeAgreementLink al, MarginingSet ms, MasterAgreement mag
            where al.margining_set_seqnbr = ms.seqnbr
            and al.master_agreement_seqnbr = mag.seqnbr
            and mag.name = '{master_agreement}'
            and ms.name = '{margining_set}'
            """.format(master_agreement = mag, margining_set = ms)
        for i in ael.asql(query)[1][0]:
            trd_no = i[0]
            t = acm.FTrade[trd_no]
            if (trd_no != trade.Oid()) & (t.Instrument().InsType().lower() in ('basketrepo/reverse')):
                return t if justTrade else [t, t.Instrument().Name()]
    except Exception as e:
        #print(get_Collateral.__name__, str(trade.Oid()), str(e))
        #logger.LOG("%s of %s : %s" %(get_Collateral.__name__, str(trade.Oid()), str(e)))
        return None

def get_Collateral_Currency(trade):
    coll = get_Collateral(trade)
    if coll:
        curr = coll[0].Instrument().Currency().Name()
        return curr
    else:
        return None


def get_Collateral_Instrument(trade):
    coll = get_Collateral(trade)
    if coll != None:
        return coll[1]
    else:
        return None
    

def get_Collateral_Instrument_Issuer(trade):
    coll = get_Collateral(trade)
    if coll != None:
        ins = acm.FInstrument[coll[1]]
        return ins.Issuer()
    else:
        return None

def get_Collateral_Trade(trade):
    coll = get_Collateral(trade)
    if coll != None:
        return coll[0]
    else:
        return None
        
def get_Collateral_Amounts(trade):
    coll_trade = get_Collateral(trade)
    if coll_trade != None:
        amount = coll_trade[0].Quantity()*coll_trade[0].Instrument().ContractSize()
        return amount
    else:
        return None
        
def get_Collateral_Haircut(trade):
    coll_trade = get_Collateral(trade)
    if coll_trade != None:
        haircut = coll_trade[0].MarginingSet().HaircutRules()[0].Haircut()
        return haircut
    else:
        return None

def get_Collateral_Trade_Price(trade):
    coll = get_Collateral(trade)
    if coll != None:
        return coll[0].Price()
    else:
        return None

def get_Collateral_Yield(trade):
    coll = get_Collateral(trade)
    if coll:
        trade = coll[0]
        context = acm.GetDefaultContext()
        sheetType = 'FTradeSheet'
        columnId = 'Trade Yield'
        
        calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
        calculation = calcSpace.CreateCalculation(trade, columnId).Value().Number()*100
        
        calcSpace.Clear()
        return calculation
        
def get_Collateral_EndDate(trade,optkey3):
    if optkey3:
        if optkey3== "REPO" or optkey3 == "REVREPO":
            collateral = get_Collateral(trade)
            if collateral:
                return collateral[0].Instrument().EndDate()
        else:
            return trade.Instrument().EndDate()

def get_AccruedInterest(trade):
    cs = acm.Calculations().CreateStandardCalculationsSpaceCollection()
    if trade.OptKey3AsEnum() == "REPO" or trade.OptKey3AsEnum() == "REVREPO":
        trade = get_Collateral(trade)
        if trade:
            trade = trade[0]
    tradeCalcs = trade.Calculation()
    accInt = tradeCalcs.AccruedInterestAsPriceSource(cs).FormattedValue()
    cs.Clear()
    return accInt

def get_Repo_Haircut(trade):
    coll = get_Collateral(trade)
    if coll != None:
        return coll[0].Haircut()
    else:
        return 0.0

def get_Repo_Yield(trade):
    if trade != None:
        context = acm.GetDefaultContext()
        sheetType = 'FTradeSheet'
        columnId = 'Trade Yield'
        
        calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
        calculation = calcSpace.CreateCalculation(trade, columnId).FormattedValue()
        num = string_format_to_float(calculation)
        
        calcSpace.Clear()
        return num

def Repo_Trade_Yield(trade):
    if trade.Instrument().InsType() != 'BasketRepo/Reverse':
        return get_Repo_Yield(trade)
    else:
        trade = get_Collateral_Trade(trade)
        return get_Repo_Yield(trade)
        
def sort(list):
    for i in range(0,len(list)):
        for j in range(i+1,len(list)):
            if list[i]>=list[j]:
                list[i],list[j] = list[j],list[i]
    return list
        
def RiskWeight(counterparty):

    ead_category = counterparty.AdditionalInfo().EAD_Categories()
    all_rating=[]
    nominal_rating=[]
    moodys = counterparty.Rating1()
    snp = counterparty.Rating2()
    fitch  = counterparty.Rating3()
    fitchindo = counterparty.AdditionalInfo().Fitch_Indonesia_Rtg()
    pefindo = counterparty.AdditionalInfo().Pefindo_Rtg()

    if moodys:
        all_rating.append(moodys.Name())

    if snp:
        all_rating.append(snp.Name())

    if fitch:
        all_rating.append(fitch.Name())

    if fitchindo:
        all_rating.append(fitchindo.replace("(idn)",""))

    if pefindo:
        all_rating.append(pefindo.replace("id",""))

    

    

    if ead_category == "1.a. EAD To Indonesia Government":
        return 0

    elif ead_category == "1.b. EAD To Sovereign":
    
        if len(all_rating)==0:
                return 100
                
        for rating in all_rating:

            if rating in ['AAA','AA+','AA','AA-','Aaa','Aa1','Aa2','Aaa3']:
                nominal_rating.append(0)

            elif rating in ['A+','A','A-','A1','A2','A3']:
                nominal_rating.append(20)

            elif rating in ['BBB+','BBB','BBB-','Baa1','Baa2','Baa3']:
                nominal_rating.append(50)

            elif rating in ['BB+','BB','BB-','B+','B','B-','Ba1','Ba2','Ba3','B','B2','B3']:
                nominal_rating.append(100)

            else:
                nominal_rating.append(150)

            

    

    elif ead_category == "2. EAD To Public Sector Entity":
    
        if len(all_rating)==0:
                return 50
                
        for rating in all_rating:

            if rating in ['AAA','AA+','AA','AA-','Aaa','Aa1','Aa2','Aaa3']:
                nominal_rating.append(20)

            elif rating in ['A+','A','A-','A1','A2','A3','BBB+','BBB','BBB-','Baa1','Baa2','Baa3']:
                nominal_rating.append(50)

            elif rating in ['BB+','BB','BB-','B+','B','B-','Ba1','Ba2','Ba3','B','B2','B3']:
                nominal_rating.append(100)

            else:
                nominal_rating.append(150)

            

                

    elif ead_category == "3. EAD To Multilateral Development Bank":
     
        if len(all_rating)==0:
                return 50
                
        for rating in all_rating:     

            if rating in ['AAA','AA+','AA','AA-','Aaa','Aa1','Aa2','Aaa3']:
                nominal_rating.append(20)

            elif rating in ['A+','A','A-','A1','A2','A3','BBB+','BBB','BBB-','Baa1','Baa2','Baa3']:
                nominal_rating.append(50)

            elif rating in ['BB+','BB','BB-','B+','B','B-','Ba1','Ba2','Ba3','B','B2','B3']:
                nominal_rating.append(100)

            else:
                nominal_rating.append(150)

            

    elif ead_category == "4.a. EAD To Other Bank - Short Term":
    
        if len(all_rating)==0:
                return 20
        
        for rating in all_rating:

            if rating in ['AAA','AA+','AA','AA-','Aaa','Aa1','Aa2','Aaa3','A+','A','A-','A1','A2','A3','BBB+','BBB','BBB-','Baa1','Baa2','Baa3']:
                nominal_rating.append(20)

            elif rating in ['BB+','BB','BB-','B+','B','B-','Ba1','Ba2','Ba3','B','B2','B3']:
                nominal_rating.append(50)

            else:
                nominal_rating.append(150)

            

                

    elif ead_category == "4.b. EAD To Other Bank - Long Term":
    
        if len(all_rating)==0:
            return 50
            
        for rating in all_rating:

            if rating in ['AAA','AA+','AA','AA-','Aaa','Aa1','Aa2','Aaa3']:
                nominal_rating.append(20)

            elif rating in ['A+','A','A-','A1','A2','A3','BBB+','BBB','BBB-','Baa1','Baa2','Baa3']:
                nominal_rating.append(50)

            elif rating in ['BB+','BB','BB-','B+','B','B-','Ba1','Ba2','Ba3','B','B2','B3']:
                nominal_rating.append(100)

            else:
                nominal_rating.append(150)


                

    elif ead_category == "5. EAD To SME Counterparty & Retail":
        return 75

        

    elif ead_category == "6. EAD To Corporate Counterparty":
        if len(all_rating)==0:
                return 100
                
        for rating in all_rating:

            if rating in ['AAA','AA+','AA','AA-','Aaa','Aa1','Aa2','Aaa3']:
                nominal_rating.append(20)

            elif rating in ['A+','A','A-','A1','A2','A3']:
                nominal_rating.append(50)

            elif rating in ['BBB+','BBB','BBB-','Baa1','Baa2','Baa3','BB+','BB','BB-','Ba1','Ba2','Ba3']:
                nominal_rating.append(100)

            else:
                nominal_rating.append(150)

            

    if len(nominal_rating)==1:
        sorted_list = sort(nominal_rating)
        return sorted_list[0]
    elif len(nominal_rating)==2:
        sorted_list = sort(nominal_rating)
        return sorted_list[1]
    elif len(nominal_rating)>=3:
        sorted_list = sort(nominal_rating)
        return sorted_list[1]

def get_RWA(insobject,riskweight):
    riskweight = int(riskweight.replace(' %',''))
    context = acm.GetDefaultContext()
    sheetType = 'FPortfolioSheet'
    columnId = "SA-CCR Exposure At Default"
    sum_rwa = 0
    total = 0
    for each_instrument in insobject:
        ins = acm.FInstrument[each_instrument.Name()]
        calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
        result = calcSpace.CreateCalculation(ins, columnId).Value()
        if result.Number() or result != 'NaN':
            sum_rwa = sum_rwa+result.Number()
            
    calcSpace.Clear()
    return sum_rwa * riskweight /100

def sum_cashflow_forward(mfs):
    sum_fwd = 0
    list = []
    
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    columnId = 'Cash Analysis Forward Rate'
    
    for mf in mfs:
        calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
        calculation = calcSpace.CreateCalculation(mf, columnId).Value()
        if type(calculation)==float and str(calculation)!='nan':
            sum_fwd += calculation
        
    return sum_fwd*100

def get_last_fixing_rate(rate_name):
    jakarta = acm.FCalendar['Jakarta']
    today = acm.Time.DateToday()
    yesterday = acm.Time.DateAdjustPeriod(today,'-1d',jakarta,2)
    prices = acm.FPrice.Select(f"instrument = '{rate_name}' and day='{today}'")
    if prices:
        return prices[0].Settle()
    else:
        prices = acm.FPrice.Select(f"instrument = '{rate_name}' and day = '{yesterday}'")
        if prices:
            return prices[0].Settle()
            
def get_next_payment_period(mfs):
    today = acm.Time.DateToday()
    for each_mf in mfs:
        if today >= each_mf.StartDate() and today <= each_mf.EndDate():
            return each_mf.StartDate() + " - " + each_mf.EndDate()
        else:
            continue

def get_last_payment_period(mfs):
    today = acm.Time.DateToday()
    for i in range(len(mfs)):
        if today >= mfs[i].StartDate() and today <= mfs[i].EndDate():
            if i==0:
                return mfs[i].StartDate() + " - " + mfs[i].EndDate()
            else:
                return mfs[i-1].StartDate() + " - " + mfs[i-1].EndDate()
        else:
            continue
    
def get_Volume_USD(trade):
    if trade.Instrument().Name() != "USD":
        if trade.Currency().Name() != "USD":
            price = usd_price_mtm(trade)
            if price:
                if trade.Premium() > 0:
                    return abs(trade.Premium() * price)
                else:
                    return abs(trade.Nominal() * price)
            else:
                price = usd_price_mtm_yesterday(trade)
                if price:
                    if trade.Premium() > 0:
                        return abs(trade.Premium()* price)
                    else:
                        return abs(trade.Nominal()* price)
        else:
            return abs(trade.Premium())
    else:
        return abs(trade.Nominal())

def get_Volume_USD_trade_time(trade):
    if trade.Instrument().Name() != "USD":
        if trade.Currency().Name() != "USD":
            price = usd_price_mtm_tradetime(trade)
            if price:
                if trade.Premium() > 0:
                    return abs(trade.Premium() * price)
                else:
                    return abs(trade.Nominal() * price)
        else:
            return abs(trade.Premium())
    else:
        return abs(trade.Nominal())
    
def get_Volume_IDR_trade_time(trade):
    if trade.Instrument().Name() != "IDR":
        if trade.Currency().Name() != "IDR":
            price = idr_price_mtm_tradetime(trade)
            if price:
                if trade.Premium() > 0:
                    return abs(trade.Premium() * price)
                else:
                    return abs(trade.Nominal() * price)
        else:
            return abs(trade.Premium())
    else:
        return abs(trade.Nominal())
        
def listofjournals(journals):
    list_acc_number = []
    for each_journal in journals:
        list_acc_number.append(each_journal.AccountNumber())
    return list_acc_number


def usd_price(trade):

    prices = acm.FPrice.Select('market = EOD')
    
    for p in prices:
        if p.Instrument():
            if p.Instrument().InsType()=='Curr' and p.Instrument().Name()=='USD':
                if p.Currency().Name() == trade.Currency().Name():
                    return p.Settle()

def idr_price_mtm_curr(currname):
    if currname == "IDR":
        return 1
    today = acm.Time.DateToday()
    prices = acm.FPrice.Select(f"instrument = '{currname}' and currency = 'IDR' and market = 'EOD_MtM' and day = '{today}'")
    if prices:
        return prices[0].Settle()
    else:
        jakarta = acm.FCalendar['Jakarta']
        yesterday = acm.Time.DateAdjustPeriod(today,'-1d',jakarta,2)
        prices = acm.FPrice.Select(f"instrument = '{currname}' and currency = 'IDR' and market = 'EOD_MtM' and day = '{yesterday}'")
        if prices:
            return prices[0].Settle()
        else:
            return 1

def idr_price_mtm_yesterday(trade):

    jakarta = acm.FCalendar['Jakarta']
    today = acm.Time.DateToday()
    yesterday = acm.Time.DateAdjustPeriod(today,'-1d',jakarta,2)
    if trade.Currency().Name() == "IDR":
        return 1
    prices = acm.FPrice.Select(f"instrument = '{trade.Currency().Name()}' and currency = 'IDR' and market = 'EOD_MtM' and day = '{yesterday}'")
    for p in prices:
        if p:
            return p.Settle()
        else:
            continue

def idr_price_mtm_today(trade):

    today = acm.Time.DateToday()
    if trade.Currency().Name() == "IDR":
        return 1
    prices = acm.FPrice.Select(f"instrument = '{trade.Currency().Name()}' and currency = 'IDR' and market = 'EOD_MtM' and day = '{today}'")
    for p in prices:
        if p:
            return p.Settle()
        else:
            return 1


def usd_price_mtm(trade):
    today = acm.Time.DateToday()
    strongerusd = ['CHF','KYD','GBP','JOD','OMR','BHD','KWD','EUR']
    if trade.Currency().Name() in strongerusd:
        prices = acm.FPrice.Select(f"instrument = '{trade.Currency().Name()}' and currency = 'USD' and market = 'EOD_MtM' and day = '{today}'")
        if prices:
            return prices[0].Settle()
    else:
        prices = acm.FPrice.Select(f"instrument = 'USD' and currency = '{trade.Currency().Name()}' and market = 'EOD_MtM' and day = '{today}'")
        if prices:
            return 1/prices[0].Settle()
    
    

def usd_price_mtm_yesterday(trade):
    jakarta = acm.FCalendar['Jakarta']
    today = acm.Time.DateToday()
    yesterday = acm.Time.DateAdjustPeriod(today,'-1d',jakarta,2)
    strongerusd = ['CHF','KYD','GBP','JOD','OMR','BHD','KWD','EUR']
    if trade.Currency().Name() in strongerusd:
        prices = acm.FPrice.Select(f"instrument = '{trade.Currency().Name()}' and currency = 'USD' and market = 'EOD_MtM' and day = '{yesterday}'")
        if prices:
            return prices[0].Settle()
    else:
        prices = acm.FPrice.Select(f"instrument = 'USD' and currency = '{trade.Currency().Name()}' and market = 'EOD_MtM' and day = '{yesterday}'")
        if prices:
            return 1/prices[0].Settle()
    
    

def usd_price_mtm_tradetime(trade):
    jakarta = acm.FCalendar['Jakarta']
    strongerusd = ['CHF','KYD','GBP','JOD','OMR','BHD','KWD','EUR']
    trade_time = trade.TradeTimeDateOnly()
    trade_time_yesterday = acm.Time.DateAdjustPeriod(trade_time,'-1d',jakarta,2)
    if trade.Currency().Name() in strongerusd:
        prices = acm.FPrice.Select(f"instrument = '{trade.Currency().Name()}' and currency = 'USD' and market = 'EOD_MtM' and day = '{trade_time}'")
        if prices:
            return prices[0].Settle()
        else:
            prices = acm.FPrice.Select(f"instrument = '{trade.Currency().Name()}' and currency = 'USD' and market = 'EOD_MtM' and day = '{trade_time_yesterday}'")
            if prices:
                return prices[0].Settle()
    else:
        prices = acm.FPrice.Select(f"instrument= 'USD' and currency = '{trade.Currency().Name()}' and market = 'EOD_MtM' and day = '{trade_time}'")
        if prices:
            return 1/prices[0].Settle()
        else:
            prices = acm.FPrice.Select(f"instrument= 'USD' and currency = '{trade.Currency().Name()}' and market = 'EOD_MtM' and day = '{trade_time_yesterday}'")
            if prices:
                return 1/prices[0].Settle()
        

def idr_price_mtm(trade):
    list = []
    prices = acm.FPrice.Select(f"instrument = '{trade.Instrument().Currency().Name()}' and market = 'EOD_MtM'")
    for p in prices:
        if p.Instrument():
            if p.Currency().Name() == 'IDR':
                list.append(p.Settle())
    return list[-1]


def idr_price_mtm_tradetime(trade):
    jakarta = acm.FCalendar['Jakarta']
    trade_time = trade.TradeTimeDateOnly()
    trade_time_yesterday = acm.Time.DateAdjustPeriod(trade_time,'-1d',jakarta,2)
    prices = acm.FPrice.Select(f"instrument = '{trade.Currency().Name()}' and currency = 'IDR' and market = 'EOD_MtM' and day = '{trade_time}'")
    if prices:
        return prices[0].Settle()
    else:
        prices = acm.FPrice.Select(f"instrument = '{trade.Currency().Name()}' and currency = 'IDR' and market = 'EOD_MtM' and day = '{trade_time_yesterday}'")
        if prices:
            return prices[0].Settle()
            
def idr_price_mtm_valueday(trade):
    jakarta = acm.FCalendar['Jakarta']
    value_day = trade.ValueDay()
    value_day_yesterday = acm.Time.DateAdjustPeriod(value_day,'-1d',jakarta,2)
    prices = acm.FPrice.Select(f"instrument = '{trade.Currency().Name()}' and currency = 'IDR' and market = 'EOD_MtM' and day = '{value_day}'")
    if prices:
        return prices[0].Settle()
    else:
        prices = acm.FPrice.Select(f"instrument = '{trade.Currency().Name()}' and currency = 'IDR' and market = 'EOD_MtM' and day = '{value_day_yesterday}'")
        if prices:
            return prices[0].Settle()

    
def journalidramount(currname,amount):
    price = idr_price_mtm_yesterday(currname)
    return price*amount

def get_sandi_bank(name):
    all_bank = acm.FChoiceList.Select("list=LBUT_SANDI BANK")
    for each in all_bank:
        if each.Name() == name:
            return each.Description()
            
def get_sandi_negara(country):
    all_bank = acm.FChoiceList.Select("list=UCCODE")
    for each in all_bank:
        if each.Name() == country:
            return each.Description()

def get_jenis_sb(trade):
    additionalinfo = ""
    collateral = get_Collateral(trade)
    if collateral:
        additionalinfo = collateral[0].Instrument().AdditionalInfo().LBUT_JENIS_SB()
    all_jenis_sb = acm.FChoiceList.Select("list=LBUT_JENIS SB")
    if additionalinfo:
        for each in all_jenis_sb:
            if each.Name() == additionalinfo:
                return each.Description()
    else:
        return None

def get_typeoffunding(country):
    code = get_sandi_negara(country)
    if code == "ID":
        return "Onshore"
    else:
        return "Offshore"

def get_idPihakLawan(cpname,swift,hostid):
    sandi_bank = get_sandi_bank(cpname)
    if sandi_bank:
        return str(sandi_bank)
    if swift:
        return str(swift)
    if hostid:
        return str(hostid)
   
def get_Underlying_desc(und_matdate,typeund):
    stringresult = ""
    today = acm.Time.DateToday()
    if typeund == "ACCUMULATIVE":
        stringresult += "Underlying Used "
    if und_matdate:
        if today >= acm.Time.DateAddDelta(und_matdate,0,3,0):
            stringresult+= "Underlying Expired"
        
  
    return stringresult
        
def get_required_amount(undamount,accumulativeamount):
    if undamount:
        if accumulativeamount:
            return undamount-accumulativeamount
        else:
            return None
    else:
        return None
        
def get_ISIN_collateral(trade,optkey3):
    if trade.MarginingSet():
        if optkey3 == "REPO" or optkey3 == "REVREPO":
            collateral = get_Collateral(trade)
            if collateral:
                return collateral[0].Instrument().Isin()
        elif optkey3 == "BOND":
            return trade.Instrument().Isin()
    else:
        return None

def date_converter(datetime):
    return str(datetime)


def get_tenor_surat_berharga(object):
    trade = object.Trade()
    optkey3 = trade.OptKey3AsEnum()
    if optkey3:
        if optkey3 == "REPO" or optkey3 == "REVREPO":
            bond_trade = get_Collateral(trade)[0]
        else:
            bond_trade = trade
            
    if bond_trade:
        listing_date = bond_trade.Instrument().AdditionalInfo().LISTING_DATE()
        end_date = acm.Time.DateAddDelta(bond_trade.Instrument().EndDate(),0,0,1)
        if listing_date:
            return str(acm.Time.DateDifference(end_date,listing_date)) + 'd'
        else:
            issue_date = bond_trade.Instrument().IssueDay()
            if issue_date:
                return str(acm.Time.DateDifference(end_date,issue_date)) + 'd'
            else:
                start_date = bond_trade.Instrument().StartDate()
                return str(acm.Time.DateDifference(end_date,start_date)) + 'd'
            
                        
        
def get_float_rate_and_spread(object):
    today = acm.Time.DateToday()
    instrument = object.Instrument()
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    columnId_Rate = "Cash Analysis Forward Rate"
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)

    for legs in instrument.Legs():
        for cf in legs.CashFlows():
            if today>=cf.StartDate() and today <=cf.EndDate():
                result_rate = calcSpace.CreateCalculation(cf, columnId_Rate).Value()*100
                
                calcSpace.Clear()
                return result_rate
            else:
                continue
        else:
            continue
            
    calcSpace.Clear()
    return None
    
def get_cross_rate(curr,tradedate):
    currency1 = curr
    currency2 = "USD"
    trade_time = tradedate
    jakarta = acm.FCalendar['Jakarta']
    trade_time_yesterday = acm.Time.DateAdjustPeriod(trade_time,'-1d',jakarta,2)
    
    price = acm.FPrice.Select(f"instrument = '{currency1}' and currency = '{currency2}' and market = 'EOD_MtM' and day = '{trade_time}'")
    if price:
        return price[0].Settle()
    else:
        price_yesterday = acm.FPrice.Select(f"instrument = '{currency1}' and currency = '{currency2}' and market = 'EOD_MtM' and day = '{trade_time_yesterday}'")
        if price_yesterday:
            return price_yesterday[0].Settle()
        else:
            price_inv = acm.FPrice.Select(f"instrument = '{currency2}' and currency = '{currency1}' and market = 'EOD_MtM' and day = '{trade_time}'")
            if price_inv:
                return 1/price_inv[0].Settle()
            else:
                price_inv_yesterday = acm.FPrice.Select(f"instrument = '{currency2}' and currency = '{currency1}' and market = 'EOD_MtM' and day = '{trade_time_yesterday}'")
                if price_inv_yesterday:
                    return 1/price_inv_yesterday[0].Settle()
                else:
                    rate1 = acm.FPrice.Select(f"instrument = '{currency1}' and currency = 'IDR' and market = 'EOD_MtM' and day = '{trade_time}'")
                    
                    rate2 = acm.FPrice.Select(f"instrument = 'USD' and currency = 'IDR' and market = 'EOD_MtM' and day = '{trade_time}'")
                    if rate1 and rate2:
                        return rate1[0].Settle()/rate2[0].Settle()
                    else:
                        rate1 = acm.FPrice.Select(f"instrument = '{currency1}' and currency = 'IDR' and market = 'EOD_MtM' and day = '{trade_time_yesterday}'")
                    
                        rate2 = acm.FPrice.Select(f"instrument = 'USD' and currency = 'IDR' and market = 'EOD_MtM' and day = '{trade_time_yesterday}'")
                        if rate1 and rate2:
                            return rate1[0].Settle()/rate2[0].Settle()
                        else:
                            return None
            
            
def get_security_value(trade,optkey3):
    if trade.MarginingSet():
        collateral = get_Collateral(trade)
        if collateral:
            if optkey3 == "REPO" or optkey3 == "REVREPO":
                context = acm.GetDefaultContext()
                sheetType = 'FTradeSheet'
                columnId = "Margining Security Value"
                calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
                result = calcSpace.CreateCalculation(collateral[0],columnId).FormattedValue()
                calcSpace.Clear()
                return result

def get_Repurchase_Amount(trade):
    all_moneyflow = trade.MoneyFlows()
    cs = acm.Calculations().CreateStandardCalculationsSpaceCollection()
    filtered_mf = [each_mf for each_mf in all_moneyflow if 'Fixed Rate' in str(each_mf.Type()) or 'Float Rate' in str(each_mf.Type())]
    count = len(filtered_mf)-1
    if filtered_mf:
        proj = filtered_mf[count].Calculation().Projected(cs).Value().Number()
        cs.Clear()
        return trade.Nominal()+ proj

def get_Target(obj):
    hierarchy = acm.FHierarchy['Portfolio Target']
    for node in hierarchy.HierarchyNodes():
        if len(node.HierarchyDataValues())>0:
            if node.HierarchyDataValues()[0].DataValue() == obj.StringKey():
                return node.HierarchyDataValues()[1].DataValue()
                
def get_Target_BN(portname,type,timeframe):
    hierarchy = acm.FHierarchy['FO47 - Target Portfolio']
    acm_time = acm.Time
    dateToday = acm_time.DateToday()
    firstDate = acm_time.FirstDayOfYear(dateToday)
    lastDate = acm_time.LastDayOfYear(dateToday)
    
    firstDate_monthly = acm_time.FirstDayOfMonth(dateToday)
    lastDate_monthly = acm_time.LastDayOfMonth(dateToday)
    CURRENT_YEAR = acm_time.DateToYMD(dateToday).First()

    calendar = acm.FCalendar['Jakarta']
    workingDays = calendar.BankingDaysBetween(firstDate, lastDate)
    currentWorkingDays = calendar.BankingDaysBetween(firstDate, dateToday)
    
    workingDaysMonthly = calendar.BankingDaysBetween(firstDate_monthly, lastDate_monthly)
    currentWorkingDaysMonthly = calendar.BankingDaysBetween(firstDate_monthly, dateToday)
    
    for node in hierarchy.HierarchyNodes():
        if len(node.HierarchyDataValues())>0:
            if node.HierarchyDataValues()[0].DataValue() == portname:
                if type == "PL":
                    target_annual_pl = int(node.HierarchyDataValues()[1].DataValue())
                    if timeframe == "MTD":
                        return target_annual_pl * (currentWorkingDaysMonthly/workingDaysMonthly)
                        
                    elif timeframe == "YTD":
                        return target_annual_pl * (currentWorkingDays/workingDays)
                        
                    else:
                        return None
                        
                elif type == "Vol":
                    target_annual_vol = int(node.HierarchyDataValues()[2].DataValue())
                    if timeframe == "MTD":
                        return target_annual_vol * (currentWorkingDaysMonthly/workingDaysMonthly)
                    elif timeframe == "YTD":
                        return target_annual_vol * (currentWorkingDays/workingDays)
                    else:
                        return None
                        
                else:
                    return None

def get_transaction_purpose(trans_purp):
    all_purpose = acm.FChoiceList.Select('list = TransactionPurpose')
    for each_purpose in all_purpose:
        if each_purpose.Name() == trans_purp:
            return each_purpose.Description()

def get_document_type(doctype):
    all_document = acm.FChoiceList.Select('list = DocumentType')
    for each_document in all_document:
        if each_document.Name() == doctype:
            return each_document.Description()



def SingleInterestPayment(nom_rec,nom_pay,contr_size,rate,days,method,proceed):
    receiveamount=nom_rec*contr_size
    payamount = nom_pay * contr_size
    interest = 0
    if rate!= None and days >= 1 and method!= None and proceed != None:
        interest = ((proceed * rate /100) * days)
        if '360' in method:
            interest = interest/360
            if receiveamount > 0 and payamount>0:
                return abs(interest)*-1
            elif receiveamount <0 and payamount <0:
                return abs(interest)
            elif receiveamount<0 and payamount>0:
                return abs(interest)*-1
            elif receiveamount > 0 and payamount <0:
                return abs(interest)
        else:
            interest = interest/365
            if receiveamount > 0 and payamount>0:
                return abs(interest)*-1
            elif receiveamount <0 and payamount <0:
                return abs(interest)
            elif receiveamount<0 and payamount>0:
                return abs(interest)*-1
            elif receiveamount > 0 and payamount <0:
                return abs(interest)
           

def SingleInterestReceive(nom_rec,nom_pay,contr_size,rate,days,method,proceed):
    receiveamount=nom_rec*contr_size
    payamount = nom_pay * contr_size
    interest = 0
    if rate!= None and days >= 1 and method!= None and proceed != None:
        interest = ((proceed * rate /100) * days)
        if '360' in method:
            interest = interest/360
            if receiveamount > 0 and payamount>0:
                return abs(interest)
            elif receiveamount <0 and payamount <0:
                return abs(interest)*-1
            elif receiveamount<0 and payamount>0:
                return abs(interest)*-1
            elif receiveamount > 0 and payamount <0:
                return abs(interest)
        else:
            interest = interest/365
            if receiveamount > 0 and payamount>0:
                return abs(interest)
            elif receiveamount <0 and payamount <0:
                return abs(interest)*-1
            elif receiveamount<0 and payamount>0:
                return abs(interest)*-1
            elif receiveamount > 0 and payamount <0:
                return abs(interest)


def InterestPayment(trade):
    
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    columnId = "Cash Analysis Projected"
    
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
        

    for mf in trade.MoneyFlows():
        if mf.PayDate() >= acm.Time.DateToday() and mf.CashFlow().Leg().PayType()=="Pay":
            result = calcSpace.CreateCalculation(mf, columnId)
            if result.FormattedValue()=="NaN":
                calcSpace.Clear()
                return 0
            else:
                value = result.Value()
                calcSpace.Clear()
                return value
    
def InterestReceive(trade):
    
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    columnId = "Cash Analysis Projected"
    
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    
    for mf in trade.MoneyFlows():
        if mf.PayDate() >= acm.Time.DateToday() and mf.CashFlow().Leg().PayType()=="Receive":
            result = calcSpace.CreateCalculation(mf, columnId)
            if result.FormattedValue()=="NaN":
                calcSpace.Clear()
                return 0
            
            else:
                value = result.Value()
                calcSpace.Clear()
                return value

def PVPayRec(trade):

    dir = trade.Direction()
    
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    columnId = "Portfolio Present Value"
    
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    
    for mf in trade.MoneyFlows():
        if mf.PayDate() > acm.Time.DateToday() and mf.CashFlow().Leg().PayType() in dir:
            result = calcSpace.CreateCalculation(mf, columnId).Value()
            calcSpace.Clear()
            return result


def StartAccrual(trade):
    calendar = acm.FCalendar['Jakarta']
    today = acm.Time.DateToday()
    endofyear = acm.Time.FirstDayOfYear(today)
    endofyear = acm.Time.DateAdjustPeriod(endofyear,'-1d',calendar,2)
    recrate = 0
    payrate = 0
    
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    columnId_Rate = "Cash Analysis Forward Rate"
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    
    for mf in trade.MoneyFlows():
        if endofyear >= mf.StartDate() and endofyear <= mf.EndDate():
            if mf.CashFlow().Leg().PayType() == "Receive":
            
                if mf.CashFlowType() == "Fixed Rate":
                
                    datediff = abs(acm.Time.DateDifference(mf.StartDate(),endofyear))
                    rate = trade.Instrument().CouponRate()
                    interest = (trade.Nominal()*rate)/100
                    recrate = interest*(datediff/360)
                    
                elif mf.CashFlowType() == "Float Rate":
                    result_rate = calcSpace.CreateCalculation(mf, columnId_Rate)
                    if abs(result_rate.Value())>0:
                        rate = result_rate.Value()*100
                        interest = (trade.Nominal()*rate)/100
                        recrate = interest*(datediff/360)
                        
                else:
                    continue
                    
            elif mf.CashFlow().Leg().PayType() == "Pay":
            
                if mf.CashFlowType() == "Float Rate":
                
                    datediff = abs(acm.Time.DateDifference(mf.StartDate(),endofyear))
                    result_rate = calcSpace.CreateCalculation(mf, columnId_Rate)
                    if abs(result_rate.Value())>0:
                        rate = result_rate.Value()*100
                        interest = (trade.Nominal()*rate)/100
                        payrate = (interest*datediff)/360
                        
                elif mf.CashFlowType() == "Fixed Rate":
                
                    datediff = abs(acm.Time.DateDifference(mf.StartDate(),endofyear))
                    rate = trade.Instrument().CouponRate()
                    interest = (trade.Nominal()*rate)/100
                    payrate = (interest*datediff)/360
                    
                else:
                    continue
        else:
            continue
    
    calcSpace.Clear()
    return (payrate*-1)-recrate
                

def EndAccrual(trade):
    today = acm.Time.DateToday()
    recrate = 0
    payrate = 0
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    columnId_Rate = "Cash Analysis Forward Rate"
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    
    for mf in trade.MoneyFlows():
        if today >= mf.StartDate() and today <= mf.EndDate():
            if mf.CashFlow().Leg().PayType() == "Receive":
            
                if mf.CashFlowType() == "Fixed Rate":
                
                    datediff = abs(acm.Time.DateDifference(mf.StartDate(),today))
                    rate = trade.Instrument().CouponRate()
                    interest = (trade.Nominal()*rate)/100
                    recrate = interest*(datediff/360)
                    
                elif mf.CashFlowType() == "Float Rate":
                    datediff = abs(acm.Time.DateDifference(mf.StartDate(),today))
                    result_rate = calcSpace.CreateCalculation(mf, columnId_Rate)
                    if abs(result_rate.Value())>0:
                        rate = result_rate.Value()*100
                        interest = (trade.Nominal()*rate)/100
                        recrate = interest*(datediff/360)
                        
                else:
                    continue
                    
            elif mf.CashFlow().Leg().PayType() == "Pay":
            
                if mf.CashFlowType() == "Float Rate":
                
                    datediff = abs(acm.Time.DateDifference(mf.StartDate(),today))
                    result_rate = calcSpace.CreateCalculation(mf, columnId_Rate)
                    if abs(result_rate.Value())>0:
                        rate = result_rate.Value()*100
                        interest = (trade.Nominal()*rate)/100
                        payrate = (interest*datediff)/360
                        
                elif mf.CashFlowType() == "Fixed Rate":
                
                    datediff = abs(acm.Time.DateDifference(mf.StartDate(),today))
                    rate = trade.Instrument().CouponRate()
                    interest = (trade.Nominal()*rate)/100
                    payrate = (interest*datediff)/360
                    
                else:
                    continue
        else:
            continue
    calcSpace.Clear()
    return (payrate*-1)-recrate

def StartValue(trade):
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    columnId_proj = "Cash Analysis Projected"
    columnId_type = "Money Flow Type"
    today = acm.Time.DateToday()
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    for mf in trade.MoneyFlows():
        if today >= mf.StartDate() and today <= mf.EndDate() and mf.CashFlow().Leg().PayType()== "Receive":
            result_type = calcSpace.CreateCalculation(mf, columnId_type).FormattedValue()
            if str(result_type) == "Fixed Rate" or str(result_type) == "Float Rate":
                result_proj = calcSpace.CreateCalculation(mf, columnId_proj)
                if result_proj.FormattedValue()=="NaN":
                    return 0
                else:
                    accr = result_proj.Value()
                    price = idr_price_mtm_tradetime(trade)
                    if price:
                        calcSpace.Clear()
                        return accr*price
                    else:
                        calcSpace.Clear()
                        return accr
            else:
                continue
    calcSpace.Clear()
    return None
    
def EndValue(trade):
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    columnId_proj = "Cash Analysis Projected"
    columnId_type = "Money Flow Type"
    today = acm.Time.DateToday()
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    for mf in trade.MoneyFlows():
        if today >= mf.StartDate() and today <= mf.EndDate() and mf.CashFlow().Leg().PayType()== "Pay":
            result_type = calcSpace.CreateCalculation(mf, columnId_type).FormattedValue()
            if str(result_type) == "Fixed Rate" or str(result_type) == "Float Rate":
                result_proj = calcSpace.CreateCalculation(mf, columnId_proj)
                if result_proj.FormattedValue()=="NaN":
                    calcSpace.Clear()
                    return 0
                else:
                    accr = result_proj.Value()
                    price = idr_price_mtm_tradetime(trade)
                    if price:
                        calcSpace.Clear()
                        return accr*price
                        
                    else:
                        calcSpace.Clear()
                        return accr
                        
            else:
                continue
                
    calcSpace.Clear()
    return None
    
def get_Position(end_date,trades,time):
    
    today = acm.Time.DateToday()
        
    tenor = acm.Time.DateDifference(end_date,today)/360
    if tenor < 1 and time == "<1Y":
        position = 0
        for each_trade in trades:
            position = position + each_trade.Position()
        return position
    elif tenor >= 1 and tenor <3 and time == "1-3Y":
        position = 0
        for each_trade in trades:
            position = position + each_trade.Position()
        return position
    elif tenor >=3 and tenor < 4 and time == "3-4Y":
        position = 0
        for each_trade in trades:
            position = position + each_trade.Position()
        return position
    elif tenor >=4 and tenor < 5 and time == "4-5Y":
        position = 0
        for each_trade in trades:
            position = position + each_trade.Position()
        return position
    elif tenor >=5 and tenor <10 and time == "5-10Y":
        position = 0
        for each_trade in trades:
            position = position + each_trade.Position()
        return position
    elif tenor >=10 and time == ">10Y":
        position = 0
        for each_trade in trades:
            position = position + each_trade.Position()
        return position
    else:
        return None

def get_Volume_Range(trades,timeframe):
    today = acm.Time.DateToday()
    vol = 0
    if timeframe == "D":
        for each_trade in trades:
            if each_trade.TradeTimeDateOnly() == today:
                if each_trade.Instrument().InsType() == "Commodity":
                    if each_trade.Instrument().Currency() == "USD":
                        vol += abs(each_trade.Nominal())
                    else:
                        vol += get_cross_rate(each_trade.Instrument().Currency().Name(),each_trade.TradeTimeDateOnly())*abs(each_trade.Nominal())
                elif each_trade.Instrument().InsType() == "Curr":
                    if each_trade.Instrument().Name() == "USD":
                        vol += abs(each_trade.Nominal())
                    else:
                        vol += get_cross_rate(each_trade.Instrument().Name(),each_trade.TradeTimeDateOnly())*abs(each_trade.Nominal())
            else:
                continue
    elif timeframe == "M":
        mtd = acm.Time.FirstDayOfMonth(today)
        for each_trade in trades:
            if each_trade.TradeTimeDateOnly() >= mtd and each_trade.TradeTimeDateOnly() <= today:
                if each_trade.Instrument().InsType() == "Commodity":
                    if each_trade.Instrument().Currency() == "USD":
                        vol += abs(each_trade.Nominal())
                    else:
                        vol += get_cross_rate(each_trade.Instrument().Currency().Name(),each_trade.TradeTimeDateOnly())*abs(each_trade.Nominal())
                elif each_trade.Instrument().InsType() == "Curr":
                    if each_trade.Instrument().Name() == "USD":
                        vol += abs(each_trade.Nominal())
                    else:
                        vol += get_cross_rate(each_trade.Instrument().Name(),each_trade.TradeTimeDateOnly())*abs(each_trade.Nominal())
                
    elif timeframe == "Y":
        ytd = acm.Time.FirstDayOfYear(today)
        for each_trade in trades:
            if each_trade.TradeTimeDateOnly() >= ytd and each_trade.TradeTimeDateOnly() <= today:
                if each_trade.Instrument().InsType() == "Commodity":
                    if each_trade.Instrument().Currency() == "USD":
                        vol += abs(each_trade.Nominal())
                    else:
                        vol += get_cross_rate(each_trade.Instrument().Currency().Name(),each_trade.TradeTimeDateOnly())*abs(each_trade.Nominal())
                elif each_trade.Instrument().InsType() == "Curr":
                    if each_trade.Instrument().Name() == "USD":
                        vol += abs(each_trade.Nominal())
                    else:
                        vol += get_cross_rate(each_trade.Instrument().Name(),each_trade.TradeTimeDateOnly())*abs(each_trade.Nominal())
    
    return vol

                
def get_expiry(end_date,datetenor,trades):
    today = acm.Time.DateToday()
    adjusted_day = acm.Time.DateAddDelta(today,0,0,datetenor)
    position = 0
    if end_date == adjusted_day:
        for each_trade in trades:
            position = position + each_trade.Position()
        return position
    else:
        return None
        
def get_Cashflows(mf,days,unit):
    today = acm.Time.DateToday()
    if unit == "d":
        date_modified = acm.Time.DateAddDelta(today,0,0,days)
    elif unit == "m":
        date_modified = acm.Time.DateAddDelta(today,0,days,0)
    elif unit == "y":
        date_modified = acm.Time.DateAddDelta(today,days,0,0)
    else:
        date_modified = today
    if mf.PayDate()==date_modified:
        context = acm.GetDefaultContext()
        sheetType = 'FMoneyFlowSheet'
        columnId = "Cash Analysis Projected"
        calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
        result = calcSpace.CreateCalculation(mf, columnId)
        if "nan" in result.FormattedValue().lower():
            calcSpace.Clear()
            return None
        else:
            result2 = result.Value().Number()
            calcSpace.Clear()
            return result2
    else:
        return None

def get_Cashflows_Sum(mfs,days,unit):
    sum = 0
    for mf in mfs:
        if mf.Type()=="Premium" or mf.Type() =="Premium 2":
            try:
                sum+=get_Cashflows(mf,days,unit)
            except:
                sum+=0
    if sum == 0:
        return None
    
    return sum


def saldorata2pertahun():
    trds=acm.FTrade.Select('optKey3 = DL')
    return len(trds)/360

def LBUValue(amount, curr):
    idr_price = idr_price_mtm_curr(curr)
    return float(amount) * idr_price

def TRDInstrumentTrades(array_trade, port_child):
    nominal = 0
    
    for trade in array_trade:
        try :
            port_type = trade.Portfolio().TypeChlItem().Name()
        except :
            port_type = ""
            
        if port_type in port_child:
            nominal += float(trade.Nominal())
            
    return nominal
    
def price(trade):
    list=[]
    for p in trade.Currency().Prices():
        list.append(p)
    if len(list)>0:
        return list[-1]

def differencePajak(jurnal):
    try :
        payment_list = jurnal.Trade().Payments()
    except :
        payment_list = jurnal.JournalTrade().Payments()
    
    wht = 0
    for payment in payment_list:
        if payment.Type() == "WHT":
            payment_amount = payment.Amount()
        
            wht += float(payment_amount)
    
    return abs(wht - float(jurnal.Amount()))

def taxWht(object):
    try :
        payment_list = object.Trade().Payments()
    except :
        payment_list = object.JournalTrade().Payments()
    
    wht = 0
    for payment in payment_list:
        if payment.Type() == "WHT":
            payment_amount = payment.Amount()
        
            wht += float(payment_amount)
    
    return wht


def get_time(trade):
    return trade.TradeTime().split(" ")[1]

def repo_rate(trade):
    context = acm.GetDefaultContext()
    sheetType = 'FTradeSheet'
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    
    try:
        rate = calcSpace.CreateCalculation(trade, "Fixed Rate").FormattedValue()
    except :
        rate = 0
    
    calcSpace.Clear()
    return rate

def get_price_info(trade, price_type):
    ccy = trade.Currency().Name()

    price_list = acm.FPrice.Select(f'currency="{ccy}" and historical=False market="EOD_MtM"')

    if len(price_list) > 0:
        last_price = price_list.Last()
        
        if price_type == "bid" : return last_price.Bid()
        elif price_type == "ask" : return last_price.Ask()
        elif price_type == "settle" : return last_price.Settle()

def pemeringkat_dan_peringkat(instrument):
    SNP_RATING = ["AAA", "AA+", "AA", "AA-", "A+", "A", "A-", "BBB+", "BBB", "BBB-", "BB+", "BB", "BB-", "B+", "B", "B-"]
    MIS_RATING = ["Aaa", "Aa1", "Aa2", "Aa3", "A1", "A2", "A3", "Baa1", "Baa2", "Baa3", "Ba1", "Ba2", "Ba3", "B1", "B2", "B3"]
    
    currency = instrument.Currency().Name()
    if currency == "IDR":
        full_fitch_rating = instrument.AdditionalInfo().RATING_FITCHINDO()     
        full_pefindo_rating = instrument.AdditionalInfo().RATING_PEFINDO()
        
        if full_fitch_rating is None and full_pefindo_rating is None:
            return None, None
            
        if full_fitch_rating is None:
            full_fitch_rating = "-"
            fitch_rating = None
        else:
            fitch_rating = full_fitch_rating.lower().split("(idn)")[0].upper()

        if full_pefindo_rating is None:
            full_pefindo_rating = "-"
            pefindo_rating = None
        else:
            pefindo_rating = full_pefindo_rating.lower().split("id")[1].upper()

        fitch_index = SNP_RATING.index(fitch_rating) if SNP_RATING.count(fitch_rating) > 0 else 999
        pefindo_index = SNP_RATING.index(pefindo_rating) if SNP_RATING.count(pefindo_rating) > 0 else 999
        
        if pefindo_index <= fitch_index:
            return "PEFINDO", full_pefindo_rating
            
        else:
            return "FITCH INDONESIA", full_fitch_rating
            
    else:
        moody_rating = instrument.Rating1ChlItem().Name() if instrument.Rating1ChlItem() is not None else "-"
        snp_rating = instrument.Rating2ChlItem().Name() if instrument.Rating2ChlItem() is not None else "-"
        fitch_rating = instrument.Rating3ChlItem().Name() if instrument.Rating3ChlItem() is not None else "-"
        
        moody_index = MIS_RATING.index(moody_rating) if MIS_RATING.count(moody_rating) > 0 else 999
        snp_index = SNP_RATING.index(snp_rating) if SNP_RATING.count(snp_rating) > 0 else 999
        fitch_index= SNP_RATING.index(fitch_rating) if SNP_RATING.count(fitch_rating) > 0 else 999
        
        if moody_rating is None and snp_rating is None and fitch_rating is None:
            return None, None
            
        if fitch_index <= moody_index and fitch_index <= snp_index:
            return "FITCH", fitch_rating
            
        elif snp_index <= moody_index and snp_index <= fitch_index:
            return "STANDARD & POOR'S", snp_rating
            
        elif moody_index <= fitch_index and moody_index <= snp_index:
            return "MOODYS", moody_rating

def trade_eqvidr(trd):
    context = acm.GetDefaultContext()
    sheetType = 'FTradeSheet'
    columnId = "EquivalentAmountIDR"
    
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    result = calcSpace.CreateCalculation(trd,columnId)
    calcSpace.Clear()
    return result.FormattedValue()

def trd_marktomarket(trd):
    context = acm.GetDefaultContext()
    sheetType = 'FTradeSheet'
    columnId = "Portfolio Value"
    
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    result = calcSpace.CreateCalculation(trd,columnId)
    calcSpace.Clear()
    return result.Value().Number()

def trd_accruedinterest(trd):
    context = acm.GetDefaultContext()
    sheetType = 'FTradeSheet'
    columnId = "AccruedInterestValue"
    
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    result = calcSpace.CreateCalculation(trd,columnId).Value()
    calcSpace.Clear()
    return float(result)

def trd_amortized(trd):
    context = acm.GetDefaultContext()
    sheetType = 'FTradeSheet'
    columnId = "Nominal Amount Amortized"
    
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    result = calcSpace.CreateCalculation(trd,columnId)
    if result.Value():
        calcSpace.Clear()
        return result.Value()
        
    calcSpace.Clear()
    return None

def AmendmentDate(date):
    year, month, day = date.split(" ")[0].split("-")
    return f"{day}/{month}/{year}"
    
def HedgeTrade(trade, for_hedge, isContract):
    local_sep = locale.localeconv()["decimal_point"]
    
    context = acm.GetDefaultContext()
    sheetType = 'FTradeSheet'
    
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)         
    
    try :
        premium_str = calcSpace.CreateCalculation(trade, "PSAK Bond Fair Value").FormattedValue()
    except :
        premium_str = 0
    
    try :
        get_val_hedge = premium_str if premium_str != "NaN" else 0
    except :
        get_val_hedge = premium_str if premium_str != "NaN" else 0
    
    hedge_info = trade.HedgeTrade()
    
    if hedge_info :
        hedge_oid, hedge_other = hedge_info.Oid(), hedge_info.GetDeltaHedgeTrade().Oid()
    elif for_hedge == False:
        calcSpace.Clear()
        return get_val_hedge
    elif for_hedge == True and isContract == False:
        calcSpace.Clear()
        return 0
    else :
        hedge_oid = None
        
    
    if trade.Oid() != hedge_oid and for_hedge == True:
        premium = get_val_hedge
    elif trade.Oid() == hedge_oid and for_hedge == False:
        premium = get_val_hedge
    else :
        premium = 0
    
    if isContract:
        context = acm.GetDefaultContext()
        sheetType = 'FTradeSheet'
        calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)         
        
        market_val_str = calcSpace.CreateCalculation(trade, "Portfolio PL Market Value").FormattedValue()
        market_val_str = "".join(x for x in market_val_str if x.isdigit() or x in ["-", "."])
        
        try :
            market_val = float(market_val_str) if market_val_str not in ["NaN", ""] else 0
        except :
            market_val = float(market_val_str.replace(".", "").replace(",", ".")) if market_val_str not in ["NaN", ""] else 0
        
        try :
            get_val_hedge = "".join(x for x in get_val_hedge if x.isdigit() or x in ["-", local_sep])
        except :
            get_val_hedge = 0    
        
        try :
            get_val_hedge = float(get_val_hedge)
        except :
            get_val_hedge = float(get_val_hedge.replace(".", "").replace(",", "."))
        
        calcSpace.Clear()
        return get_val_hedge - market_val
    else :
        calcSpace.Clear()
        return premium

def HedgeTradeStr(trade, ishedge):
    hedge_info = trade.HedgeTrade()
    
    if hedge_info:
        return "yes" if ishedge else "no"
    else :
        return "no" if ishedge else "yes"

def journal_product(obj):
    return str(obj)

def getDiaryText(settlement_id):
    try :
        diary_result = settlement_id.Diary().Text().split("\n")
        return diary_result[-1]
    except:
        return ""

def fixingdate(ins):
    today = acm.Time.DateToday()
    list = []
    reset = ins.PayLeg().Resets()
    if reset:
        for r in reset:
            if r.ResetType()=='Compound' and r.FixingDate()>=today:
                list.append(r.FixingDate())
        if list:
            return sort(list)[0]

def getSecIdBond(object):
    if object.Trade():
        try :
            ins_subType = str(object.Trade().InstrumentSubType()).lower()
        except :
            ins_subType = None
        
        try :
            optkey3 = str(object.Trade().OptKey3().Name()).lower()
        except :
            optkey3 = None
        
        if ins_subType or optkey3 :        
            if "bond" in [ins_subType, optkey3]:
                return object.Instrument().Name()
            elif "repo/reverse" in ins_subType or "revrepo" in optkey3:
                try :
                    return get_Collateral_Instrument(object.Trade())
                except :
                    pass
            elif "Basket Repo/Reverse" in [ins_subType, optkey3]:
                try :
                    return get_Collateral_Instrument(object.Trade())
                except :
                    pass


def JournalDiary(object):
    try :
        return object.Diary().Text.split("\n")[-1]
    except :
        return ""

def GainorLoss(trade):
    premium = float(trade.Premium()) if trade.Premium() != None else 0
    faceVal = float(trade.FaceValue()) if trade.FaceValue() != None else 0
    AcqPrice = float(trade.AdditionalInfo().AcquisitionPrice()) if trade.AdditionalInfo().AcquisitionPrice() != None else 0
    return (premium - (faceVal * AcqPrice))
        
def lower_price_yesterday(name):

    today = acm.Time.DateToday()
    jakarta = acm.FCalendar['Jakarta']
    yesterday = acm.Time.DateAdjustPeriod(today,'-1d',jakarta,2)
    prices = acm.FPrice.Select(f"instrument = '{name}' and market = 'EOD_MtM' and day = '{yesterday}'")
    for p in prices:
        return p.Bid()

def upper_price_yesterday(name):
    
    today = acm.Time.DateToday()
    jakarta = acm.FCalendar['Jakarta']
    yesterday = acm.Time.DateAdjustPeriod(today,'-1d',jakarta,2)
    prices = acm.FPrice.Select(f"instrument = '{name}' and market = 'EOD_MtM' and day = '{yesterday}'")
    for p in prices:
        return p.Ask()


def EndCashIdr(trade):
    currency = trade.Currency().Name()
    try :
        faceValue = float(trade.FaceValue())
    except :
        faceValue = float("".join(x for x in trade.FaceValue() if x.isdigit() or x == "."))
    
    EndCashVal = faceValue + get_cashflow_proj_interest_amt(trade)
    
    if currency == "IDR" :
        return round(EndCashVal, 2)
    else :
        try :
            try :
                idr_price = float(acm.FPrice.Select(f"instrument = '{currency}' and currency = 'IDR' and market = 'EOD_MtM' and day = TODAY").Last().Settle())
            except :
                idr_price_str = acm.FPrice.Select(f"instrument = '{currency}' and currency = 'IDR' and market = 'EOD_MtM' and day = TODAY").Last().Settle()
                idr_price = float("".join(x for x in idr_price_str if x.isdigit() or x == "."))
        except :
            return round(EndCashVal, 2)
        
        return round(EndCashVal * idr_price, 2)
    
def getTime(time):
    return str(datetime.utcfromtimestamp(time) + timedelta(hours=7)).split(" ")[1]

def getBondPrice(instrument):
    try :
        try :
            ins_price = float(acm.FPrice.Select(f"instrument = '{instrument}' and market = 'EOD_MtM' and day = TODAY").Last().Settle())
        except :
            ins_price_str = acm.FPrice.Select(f"instrument = '{instrument}' and market = 'EOD_MtM' and day = TODAY").Last().Settle()
            ins_price = float(x for x in ins_price_str if x.isdigit() or x == ".")
        
        return ins_price if ins_price > 0 else "0.00"
    
    except : return "0.0"
    
def bid(obj, market):
    curr = obj.Instrument().Currency().Name()
    ins = obj. Instrument().Name()
    prices = acm.FPrice.Select('')
    list = []
    for p in prices:
        if p.Instrument().Name()==ins and p.Market().Name()==market:
            list.append(p.Bid())
    return list[-1]

def paymentsystem(mfs):
    for mf in mfs:
        if mf.Type()=='Premium':
            if mf.CounterpartyAccount():
                return mf.CounterpartyAccount().NetworkAliasType()


def getJournalAmountTrade(trade, debitOrCredit):
    glno_head_need = "2301" if debitOrCredit == "Credit" else "1451"
    journals_list = trade.Journals().AsArray()
    
    amountVal = 0
    for journal in journals_list:
        try :
            glno = journal.ChartOfAccount().TAccount().Number()
        except :
            glno = None
        
        amount_type = journal.DebitOrCredit()
        
        if str(glno[:4]) == glno_head_need and amount_type == debitOrCredit:
            journalAmount = float(journal.BaseAmount())
            amountVal += abs(journalAmount)
    
    return amountVal 

def getJournalAmountTrade(trade, AfsOrTrd):
    glno_head_need = "46011101" if AfsOrTrd == "TRD" else "46011101"    
    
    journals_list = query_journal_on_trade(trade.Oid())
    
    amountVal = 0
    for journal_no in journals_list:
        journal = acm.FJournal[journal_no]
        
        try :
            glno = journal.ChartOfAccount().TAccount().Number()
        except :
            glno = None
            
        amount_type = journal.DebitOrCredit()
        
        if str(glno) == glno_head_need and amount_type == debitOrCredit:
            journalAmount = float(journal.BaseAmount())
            amountVal += abs(journalAmount)
    
    return amountVal

def getJournalAmountTrade(trade, AfsOrTrd):
    glno_head_need = "46011101" if AfsOrTrd == "TRD" else "46011101"
    journals_list = trade.Journals().AsArray()
        
    amountVal = 0
    for journal in journals_list:
        try :
            glno = journal.ChartOfAccount().TAccount().Number()
        except :
            glno = None
        
        
        amount_type = journal.DebitOrCredit()
        
        if str(glno) == glno_head_need and amount_type == debitOrCredit:
            journalAmount = float(journal.BaseAmount())
            amountVal += abs(journalAmount)
    
    return amountVal 

def getYieldVal(trade):
    context = acm.GetDefaultContext()
    sheetType = 'FTradeSheet'
    columnId = 'Trade Yield'
    
    try :
        calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
        calculation = calcSpace.CreateCalculation(trade, columnId).FormattedValue()
    except :
        return 0
    
    yield_str = "".join(x for x in calculation if x.isdigit() or x in ["-", "."])
        
    try :
        yield_val = float(yield_str) if yield_str not in ["NaN", ""] else 0
    except :
        yield_val = float(yield_str.replace(".", "").replace(",", ".")) if yield_str not in ["NaN", ""] else 0
    
    calcSpace.Clear()
    return yield_val

def instrument_price(instrument_name):

    jakarta = acm.FCalendar['Jakarta']
    today = acm.Time.DateToday()
    yesterday = jakarta.AdjustBankingDays(today, -1)

    prices = acm.FPrice.Select(f"instrument = '{instrument_name}' and currency = 'IDR' and market = 'EOD_MtM' and day = '{yesterday}'")
    for p in prices:
        if p:
            return p.Settle()
        else:
            continue
        

def getAuditConfirmationVal(trade, isBuy=True, getCurr=True, isRate=False):
    
    if trade.CurrencyPair() == None:
        if isRate :
            return trade.Instrument().RecLeg().FixedPrice()
        else :
            if getCurr and isBuy:
                return trade.Currency().Name()
            elif getCurr and isBuy == False:
                pass
            else :
                return trade.Nominal()
        
    else :
        if isRate :
            return trade.Price()
        else :
            curr1, curr2 = trade.CurrencyPair().Name().split("/")
            
            if getCurr:
                if trade.Direction() == "Buy":
                    return curr1 if isBuy else curr2
                else :
                    return curr2 if isBuy else curr1
            else :
                if trade.Direction() == "Buy":
                    return trade.Premium() if isBuy else trade.Nominal()
                else :
                    return trade.Nominal() if isBuy else trade.Premium()
    

def GetCurrJournal(object, isBuy=True):
    trade = object.Trade()
    JournalTrade = object.JournalTrade()
    
    if trade == None and JournalTrade == None:
        return None
    elif trade == None:
        trade = JournalTrade
    
    if trade.CurrencyPair() == None:
        if isBuy:
            return trade.Currency().Name()
    else :
        curr1, curr2 = trade.CurrencyPair().Name().split("/")
        
        if trade.Direction() == "Buy":
            return curr1 if isBuy else curr2
        else :
            return curr2 if isBuy else curr1

def brokerfee(trd, curr):
    if trd.Payments().Size():
        for p in trd.Payments():
            if p.Currency().Name() == curr:
                if p.Type() == 'Broker Fee':
                    return p.Amount()

def coupon_interest(trade):
    list=[]
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    columnId_proj = "Cash Analysis Projected"
    columnId_type = "Money Flow Type"
    today = acm.Time.DateToday()
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)

    for mf in trade.MoneyFlows():
        if mf.Type()=='Coupon':
            result_proj = calcSpace.CreateCalculation(mf, columnId_proj).Value().Number()
            if result_proj!=0:
                calcSpace.Clear()
                return result_proj
                
    calcSpace.Clear()
    return None

def couponDate(trade):
    today_date = acm.Time().DateToday()
    cashflow_list = trade.Instrument().RecLeg().CashFlows()
    
    min_delta = []
    for i in cashflow_list:
        deltaDate = acm.Time().DateDifference(i.PayDate(), today_date)
        if deltaDate > 0:
            min_delta.append([deltaDate, i.StartDate()])
    
    min_delta.sort(key=lambda x: x[0])
    year, month, day = str(min_delta[0][1]).split("-")
    return f"{day}/{month}/{year}"

def SettlementAmount(curr, totalAmount):
    try :
        prices = acm.FPrice.Select(f"instrument = '{curr}' and currency = 'IDR' and market = 'EOD_MtM' and day = YESTERDAY").Last().Settle()
    except:
        prices = 10000
    
    return totalAmount * prices

def closingBalanceSettlement(object):
    try :
        closingAmount = object.CounterpartyAccountRef().AdditionalInfo().ClosingBalance()
        return float(closingAmount.replace("C", "").replace("D", "-"))
    except :
        return 0
        
def createDateTimeJournal(date, isDate=True):
    date_format = (datetime.utcfromtimestamp(date) + timedelta(hours=7)).strftime("%m/%d/%Y %H:%M:%S")
    date, time = date_format.split(" ")
    return date if isDate else time


def closedLots(object) :
    trade = object.Trade()
    context = acm.GetDefaultContext()
    sheetType = 'FTradeSheet'
    columnId = 'Portfolio Closed Tax Lots'

    if trade.Bought() :
        all_trades = object.Parent().Trades().AsArray()
        trade_sells = [trade for trade in all_trades if trade.Bought() == False]
        trade_oid = trade.Oid()
        
        buy_info = []
        for trade_sell in trade_sells:
            calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
            sell_infos = str(calcSpace.CreateCalculation(trade_sell, columnId).Value())[1:-1].split(", ")
            trade_sell_oid = trade_sell.Oid()
            
            for sell_info in sell_infos:
                if f"[{trade_oid}]" in sell_info:
                    buy_info.append(sell_info.replace(f"[{trade_oid}]", f"[{trade_sell_oid}]"))
        
        calcSpace.Clear()
        return buy_info
        
    else :
        calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
        sell_info = str(calcSpace.CreateCalculation(trade, columnId).Value())[1:-1].split(", ")
        calcSpace.Clear()
        return sell_info
    
def trd_acc(trd, curr):
    list = []
    for a in trd.Acquirer().Accounts():
        if a.Currency() == curr:
            list.append(a.Name())
    return list[-1]

def num_separator(num):
    num = round(num, 2)
    return f'{num:,}'

def get_facility_collateral(trade):
    temp_repo = get_Repo(trade)
    if temp_repo:
        repo = temp_repo[0]
        if repo.OptKey3AsEnum() == "REPO" and repo.OptKey4AsEnum() == "IWFSBI":
            return "Repo"
        elif repo.OptKey3AsEnum() == "REPO" and repo.OptKey4AsEnum() == "IWFGOV":
            return "Repo"
        elif repo.OptKey3AsEnum() == "REPO" and repo.OptKey4AsEnum()== "IWFDIS":
            return "Repo"
        elif repo.OptKey3AsEnum() == "REPO" and repo.OptKey4AsEnum() == "IWFNON":
            return "Repo"
        elif repo.OptKey3AsEnum() == "REPO" and repo.OptKey4AsEnum() == "IWFOTH":
            return "Repo"
        elif repo.OptKey3AsEnum() == "REPO" and repo.OptKey4AsEnum() == "CWFSBI":
            return "Cross Currency Repo"
        elif repo.OptKey3AsEnum() == "REPO" and repo.OptKey4AsEnum() == "CWFGOV":
            return "Cross Currency Repo"
        elif repo.OptKey3AsEnum() == "REPO" and repo.OptKey4AsEnum() == "CWFDIS":
            return "Cross Currency Repo"
        elif repo.OptKey3AsEnum() == "REPO" and repo.OptKey4AsEnum() == "CWFNON":
            return "Cross Currency Repo"
        elif repo.OptKey3AsEnum() == "REPO" and repo.OptKey4AsEnum() == "CWFOTH":
            return "Cross Currency Repo"
        else:
            return None
    else:
        return None
        

def get_mark_to_market_collateral(name):
    today = acm.Time.DateToday()
    jakarta = acm.FCalendar['Jakarta']
    yesterday = acm.Time.DateAdjustPeriod(today,'-1d',jakarta,2)
    prices = acm.FPrice.Select(f"instrument = '{name}' and market = 'EOD_MtM' and day = '{yesterday}'")
    for p in prices:
        return p.Settle()

def StrTonumber(object):
    try :
        object1 = object.replace(",", "")
        return object1
    except :
        try :
            object1 = object.replace(".", "")
            object2 = object.replace(",", ".")
        except :
            object1 = object.replace(" ", "")
            object2 = object.replace(",", ".")
        
        return object2 if object2 != "NaN" else 0

def PnLYearly(ins):
    try :
        trades = ins.Trades().AsArray()
        context = acm.GetDefaultContext()
        sheetType = 'FTradeSheet'
        columnId = 'Portfolio Total Profit and Loss'
        
        calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
        result_str = calcSpace.CreateCalculation(ins, columnId).FormattedValue()
        
        total = 0
        if result_str != "NaN":
            result = float(StrTonumber(result_str))
            total += result
        
        calcSpace.Clear()
        return total if total != "NaN" else 0
    except :
        calcSpace.Clear()
        return 0

def get_Repo_Amount(trade):
    repo = get_Repo(trade)
    today = acm.Time.DateToday()
    if repo != None:
        repo_trade = repo[0]
        return repo_trade.Nominal()
    else:
        return None
        
    
def reformat_date(date):
    from datetime import datetime
    ori_date = datetime.strptime(date, '%Y-%m-%d')
    return ori_date.strftime('%m/%d/%Y')

def reformat_fulldate(timestamp):
    from datetime import datetime
    ori_date = datetime.fromtimestamp(timestamp)
    return ori_date.strftime('%m/%d/%Y %I:%M:%S %p')
    
def reformat_fulldate2(date):
    from datetime import datetime
    ori_date = datetime.strptime(date, '%Y-%m-%d %H:%M:%S')
    return ori_date.strftime('%m/%d/%Y')

...

  SendReportToEmail
import acm
import FParameterUtils
from ICTCustomFEmailTransfer import ICTCustomFEmailTransfer

def process_subject(subject_string):
    subject_string = subject_string.replace("<Date>", acm.Time.DateToday())
    return subject_string

def pre_process_XML(reportObj, params, ReportXML):
    print(ReportXML)
    return ReportXML

def post_process_XML(reportObj, params, ReportXML):
    SMTPParameters = FParameterUtils.GetFParameters(acm.GetDefaultContext(), 'CustomReportSMTPParameters')
    hostname = str(SMTPParameters.At('SMTPServer'))
    port = int(SMTPParameters.At('SMTPPort').Text())
    username = SMTPParameters.At('EmailUserName').Text()
    password = SMTPParameters.At('SMTPPassword').Text()
    tls_mode = bool(SMTPParameters.At('SecureSMTPConnection').Text())

    # Setup SMTPServer Object
    SMTPServer = ICTCustomFEmailTransfer.SMTPServer(hostname=hostname, port=port, username=username, password=password, tls_mode=tls_mode)
    
    # Get Reports
    generated_reports = reportObj.generatedFilePaths
    
    # Setup Message Object
    split_params = params.split("\\ ")
    recipients = split_params[0].split(", ")
    subject = process_subject(split_params[1])
    sender = SMTPParameters.At('EmailSender').Text()
    body = split_params[2]
    cc = None if len(split_params) <= 3 else split_params[3].split(", ")
    
    MessageObject = ICTCustomFEmailTransfer.Message(recipients, subject, sender, body, cc, generated_reports)
    
    # Send email
    EmailTransfer = ICTCustomFEmailTransfer(SMTPServer, MessageObject)
    
    try:
        EmailTransfer.Send()
        print("Email transfer successful for", reportObj.params.fileName)
    except Exception as e:
        print("Email Transfer failed:", e)

...

  Total_Trade

import acm, traceback
from Report_Python import get_cashflow_proj_interest_amt

def get_year_difference(end_date, value_day):
    jarak_hari = abs(acm.Time.DateDifference(end_date, value_day));
    hari_per_tahun = 365
    looper = True

    count = 0
    while looper:
        jarak_hari = jarak_hari - hari_per_tahun

        if jarak_hari < 0:
            break
        else:
            count += 1
    
    return count
    #return value_day
    
def combine_string(text1, text2, text3, text4, text5):
    return str(text1) + str(text2) + str(text3) + str(text4) + str(text5)

def sum_NearAmount(list_trade):
    
    total = 0
    list_trade = list(list_trade)
    
    for i in list_trade:
        total += int(i.Premium())
    
    return total

def sum_FarAmount(list_trade):
    
    total = 0
    list_trade = list(list_trade)
    
    for i in list_trade:
        total += int(i.Premium())
    
    return total

def remove_bg(nominal_premium):
    nominal_premium = str(nominal_premium)
    return nominal_premium
    
def sum_FaceValue(list_trade):
    
    total = 0
    list_trade = list(list_trade)
    
    for i in list_trade:
        total += int(i.FaceValue())
    
    return total

def sum_NearAmount2(list_trade):
    
    total = 0
    list_trade = list(list_trade)
    
    for i in list_trade:
        if i.IsFxSwapFarLeg() == False:
            total += int(i.Premium())

    return float(total)
    
def remove_NearAmount2(FxSwapNearLegPremium):
    
    if type(FxSwapNearLegPremium) != float:
        return ''
    else:
        return FxSwapNearLegPremium

def sum_NearAmount1(list_trade):
    
    total = 0
    list_trade = list(list_trade)
    
    for i in list_trade:
        if i.IsFxSwapFarLeg() == False:
            total += int(i.Nominal())

    return float(total)
    
def remove_NearAmount1(NearAmount1):
    
    if type(NearAmount1) != float:
        return ''
    else:
        return NearAmount1

def sum_FarAmount1(list_trade):
    
    total = 0
    list_trade = list(list_trade)
    
    for i in list_trade:
        if i.IsFxSwapFarLeg() == True:
            total += int(i.Nominal())

    return float(total)
    
def remove_FarAmount1(FarAmount1):
    
    if type(FarAmount1) != float:
        return ''
    else:
        return FarAmount1


def sum_FarAmount2(list_trade):
    
    total = 0
    list_trade = list(list_trade)
    
    for i in list_trade:
        if i.IsFxSwapFarLeg() == True:
            total += int(i.Premium())

    return float(total)
    
def remove_FarAmount2(FarAmount2):
    
    if type(FarAmount2) != float:
        return ''
    else:
        return FarAmount2

def sum_FarAmount(list_trade):
    
    total = 0
    list_trade = list(list_trade)
    
    for i in list_trade:
        if i.IsFxSwapFarLeg() == False:
            total += int(i.Nominal())

    return float(total)

def remove_FarAmount(FarAmount):
    if type(FarAmount) != float:
        return ''
    else:
        return FarAmount

def get_BoughtorSold(trade):
    if trade.Trade().Bought():
        return "Call Money"

def cek_tanggal_outstanding(tanggal):
    today = acm.Time.DateToday()
    difference = acm.Time.DateDifference(tanggal, today)
    result = ''
    
    if difference >= 0 :
        result = 'Outstanding'
    else:
        result = 'Not Outstanding'
        
    return result

def remarksellbuy(trade, list_columns):
    context = acm.GetDefaultContext( )
    sheet_type = 'FTradeSheet'
    ins = trade
        
    calc_space = acm.Calculations( ).CreateCalculationSpace( context, sheet_type )
    list_text = []
    
    
    for i in list_columns:
        column_id = i
        value = calc_space.CalculateValue( ins, column_id)
        calculation = calc_space.CreateCalculation( ins, column_id )
        list_text.append(calculation.FormattedValue())
        
    return list_text[0] + ' ' + list_text[1] + ' ' + list_text[2] + ' ' + list_text[3] + ' ' + list_text[4]
    #return trade
    
def moneyamount(trade, list_columns):
    context = acm.GetDefaultContext( )
    sheet_type = 'FTradeSheet'
    ins = trade
        
    calc_space = acm.Calculations( ).CreateCalculationSpace( context, sheet_type )
    list_text = []
    
    
    for i in list_columns:
        column_id = i
        value = calc_space.CalculateValue( ins, column_id)
        calculation = calc_space.CreateCalculation(ins, column_id)
        list_text.append(calculation.FormattedValue().replace(",", ""))
        
    return float(list_text[0]) * float(list_text[1]) 

def calculate_bookvalueidr(list_trade):
    ins_obj=trade.instrument()
    book_value = trade.Premium()
    rate = 14500
    
    return book_value * rate

def positionEOD(isYesterday=True):
    jakarta = acm.FCalendar['Jakarta']
    today=acm.Time.DateToday()
    yesterday = acm.Time.DateAdjustPeriod(today,'-1d',jakarta,2)
    
    yearToday, monthToday, dayToday = today.split("-")
    
    return yesterday if isYesterday else f"{dayToday}/{monthToday}/{yearToday}"

def closingBalance(amountInfo):
    amountInfo = amountInfo.replace("C", "")
    amountInfo = amountInfo.replace("D", "-")
    
    return amountInfo
    
def reffjournal(trade, list_columns):
    context = acm.GetDefaultContext( )
    sheet_type = 'FTradeSheet'
    ins = trade
        
    calc_space = acm.Calculations( ).CreateCalculationSpace( context, sheet_type )
    list_text = []
    
    
    for i in list_columns:
        column_id = i
        value = calc_space.CalculateValue( ins, column_id)
        calculation = calc_space.CreateCalculation(ins, column_id)
        list_text.append(calculation.FormattedValue())
        
    return list_text[0] + "/" + list_text[1] + "/" + list_text[2] + list_text[3]
    
def netamount(trade, list_columns):
    context = acm.GetDefaultContext( )
    sheet_type = 'FTradeSheet'
    ins = trade
        
    calc_space = acm.Calculations( ).CreateCalculationSpace( context, sheet_type )
    list_text = []
    
    
    for i in list_columns:
        column_id = i
        value = calc_space.CalculateValue( ins, column_id)
        calculation = calc_space.CreateCalculation(ins, column_id)
        list_text.append(calculation.FormattedValue().replace(",", ""))
        
    return float(list_text[0]) - float(list_text[1])

def yesterdayfunc(date):
    date2=acm.Time.DateAddDelta(date, 0, 0, -1)
    firstday=acm.Time.FirstDayOfWeek(date2)
    difference=acm.Time.DateDifference(date2, firstday)
    if difference == 5:
        yesterday=acm.Time.DateAddDelta(date2, 0, 0, -1)
    if difference == 6:
        yesterday=acm.Time.DateAddDelta(date2, 0, 0, -2)
    else:
        yesterday=date2
    return yesterday

def yesterdayfunc2(date):
    step1=yesterdayfunc(date)
    step2=yesterdayfunc(step1)
    return step2

def month(date):
    date=acm.Time.DateToYMD(date)
    month=['','Januari', 'Februari', 'Maret', 'April', 'Mei', 'Juni', 'Juli', 'Agustus', 'September', 'Oktober', 'November', 'Desember']
    index=date[1]
    return month[index];

def monthnumber(date):
    date=acm.Time.DateToYMD(date)
    return date[1];
    
def monthexpired(trade, list_columns):
    context = acm.GetDefaultContext( )
    sheet_type = 'FJournalSheet'
    ins = trade
        
    calc_space = acm.Calculations( ).CreateCalculationSpace( context, sheet_type )
    list_text = []
    
    for i in list_columns:
        column_id = i
        value = calc_space.CalculateValue( ins, column_id)
        calculation = calc_space.CreateCalculation( ins, column_id )
        list_text.append(calculation.FormattedValue())
        
    return list_text[0];
    
def weeknumber(date):
    day=acm.Time.DayOfMonth(date)
    firstsunday=acm.Time.DayOfMonth(acm.Time.LastDayOfWeek(acm.Time.FirstDayOfMonth(date)))
    if day <= firstsunday:
        result = "I"
    if day > firstsunday and day <= firstsunday+7:
            result = "II"
    if day > firstsunday+7 and day <= firstsunday+14:
            result = "III"
    if day > firstsunday+14 and day <= firstsunday+21:
            result = "IV"
    if day > firstsunday+21 and day <= firstsunday+28:
            result = "V"
    if day > firstsunday+28:
        result = "VI"    
    return result;
    
def year(date):
    date=acm.Time.DateToYMD(date)
    return str(date[0]);
    
def noid(trade,list_columns):
    context = acm.GetDefaultContext( )
    sheet_type = 'FTradeSheet'
    ins = trade
        
    calc_space = acm.Calculations( ).CreateCalculationSpace( context, sheet_type )
    list_text = []
    
    
    for i in list_columns:
        column_id = i
        value = calc_space.CalculateValue( ins, column_id)
        calculation = calc_space.CreateCalculation( ins, column_id )
        list_text.append(calculation.FormattedValue())
        
    if list_text[1] =='':
        list_text[1] = '000'
        
    return list_text[0] + '.' + list_text[1] + '.' + list_text[2]
    
def prevprice(trade, list_columns):
    
    context = acm.GetDefaultContext( )
    sheet_type = 'FTradeSheet'
    ins = trade
        
    calc_space = acm.Calculations( ).CreateCalculationSpace( context, sheet_type )
    list_text = []
    
    
    for i in list_columns:
        column_id = i
        value = calc_space.CalculateValue( ins, column_id)
        calculation = calc_space.CreateCalculation( ins, column_id )
        list_text.append(calculation.FormattedValue())
    
    instrument_name = trade.Instrument().Name()
    
    try:
        price_obj = acm.FPrice.Select('instrument = "'+instrument_name+'" and day = "'+list_text[0]+'"')[0]
    except Exception:
        traceback.print_exc()
        return 'None'

    if type(price_obj.Settle()) != int:
        return price_obj.Last()
    else:
        return price_obj.Settle()
   
    
def takevalue(value, list_columns):
    context = acm.GetDefaultContext( )
    sheet_type = 'FTradeSheet'
    ins = value
        
    calc_space = acm.Calculations( ).CreateCalculationSpace( context, sheet_type )
    list_text = []
    
    
    for i in list_columns:
        column_id = i
        value = calc_space.CalculateValue(ins, column_id)
        calculation = calc_space.CreateCalculation( ins, column_id )
        list_text.append(calculation.FormattedValue())
        
    return list_text[0]
    
def testfunc(price, date):
    
    price_list = list(price_list)
    
    return price_list
    

def count_available_limit(alert, list_columns):
    
    context = acm.GetDefaultContext( )
    sheet_type = 'FAlertSheet'
    ins = alert
        
    calc_space = acm.Calculations( ).CreateCalculationSpace( context, sheet_type )
    list_text = []
    
    
    for i in list_columns:
        column_id = i
        value = calc_space.CalculateValue(ins, column_id)
        calculation = calc_space.CreateCalculation( ins, column_id )
        list_text.append(value)
    
    print(list_text[0])
    print(type(list_text[0]))
    print(list_text[1])
    print(type(list_text[1]))
    print("==========")
    
    try:
        result = list_text[1] - list_text[0]
        return result
    except Exception:
        traceback.print_exc()
        return list_text[0]
        
    
def accountid(value, list_columns):
    context = acm.GetDefaultContext( )
    sheet_type = 'FTradeSheet'
    ins = value
        
    calc_space = acm.Calculations( ).CreateCalculationSpace( context, sheet_type )
    list_text = []
    
    
    for i in list_columns:
        column_id = i
        value = calc_space.CalculateValue(ins, column_id)
        calculation = calc_space.CreateCalculation( ins, column_id )
        list_text.append(calculation.FormattedValue())
        
    accid = list_text[0] + '_OPT_CON_' + list_text[1] + '_' + list_text[2] + '_TR'
        
    return accid
    
def cpmainccy(value, list_columns):
    context = acm.GetDefaultContext( )
    sheet_type = 'FTradeSheet'
    ins = value
        
    calc_space = acm.Calculations( ).CreateCalculationSpace( context, sheet_type )
    list_text = []
    
    
    for i in list_columns:
        column_id = i
        value = calc_space.CalculateValue(ins, column_id)
        calculation = calc_space.CreateCalculation( ins, column_id )
        list_text.append(calculation.FormattedValue())
        
    cp = list_text[0]
    if cp == 'Put':
        cp = 'P'
    if cp == 'Call':
        cp = 'C'
        
    return cp
    
def cpmoneyccy(value, list_columns):
    context = acm.GetDefaultContext( )
    sheet_type = 'FTradeSheet'
    ins = value
        
    calc_space = acm.Calculations( ).CreateCalculationSpace( context, sheet_type )
    list_text = []
    
    
    for i in list_columns:
        column_id = i
        value = calc_space.CalculateValue(ins, column_id)
        calculation = calc_space.CreateCalculation( ins, column_id )
        list_text.append(calculation.FormattedValue())
        
    cp = list_text[0]
    if cp == 'Put':
        cp = 'Call'
    else:
        cp = 'Put'
        
    return cp

def deltacheck(value, list_columns):
    context = acm.GetDefaultContext( )
    sheet_type = 'FTradeSheet'
    ins = value
        
    calc_space = acm.Calculations( ).CreateCalculationSpace( context, sheet_type )
    list_text = []
    
    
    for i in list_columns:
        column_id = i
        value = calc_space.CalculateValue(ins, column_id)
        calculation = calc_space.CreateCalculation( ins, column_id )
        list_text.append(calculation.FormattedValue())
        
    check = list_text[0]
    if check == '':
        check = 'N'
    else:
        check = 'Y'
        
    return check
    
def staticmonth():
    month=['Januari', 'Februari', 'Maret', 'April', 'Mei', 'Juni', 'Juli', 'Agustus', 'September', 'Oktober', 'November', 'Desember']
    return month

def calculate_kursjual(value, list_columns):
    context = acm.GetDefaultContext( )
    sheet_type = 'FTradeSheet'
    ins = value
        
    calc_space = acm.Calculations( ).CreateCalculationSpace( context, sheet_type )
    list_text = []
    
    
    for i in list_columns:
        column_id = i
        value = calc_space.CalculateValue(ins, column_id)
        calculation = calc_space.CreateCalculation( ins, column_id )
        list_text.append(calculation.FormattedValue().replace(",", ""))
    
    bs = list_text[0]
    exrate = list_text[1]
    
    if bs == 'Buy':
        exrate = ''
    
    return exrate
    
def sumkursjual(value, list_columns):
    context = acm.GetDefaultContext( )
    sheet_type = 'FTradeSheet'
    total = 0
    
    for i in value:
        ins = i
            
        calc_space = acm.Calculations( ).CreateCalculationSpace( context, sheet_type )
        list_text = []
        
        for j in list_columns:
            column_id = j
            value = calc_space.CalculateValue(ins, column_id)
            calculation = calc_space.CreateCalculation(ins, column_id )
            
            try:
                total += float(calculation.FormattedValue())
            except Exception:
                traceback.print_exc()
                continue
                
            list_text.append(calculation.FormattedValue())
    
    return total;

def calculate_kursbeli(value, list_columns):
    context = acm.GetDefaultContext( )
    sheet_type = 'FTradeSheet'
    ins = value
        
    calc_space = acm.Calculations( ).CreateCalculationSpace( context, sheet_type )
    list_text = []
    
    
    for i in list_columns:
        column_id = i
        value = calc_space.CalculateValue(ins, column_id)
        calculation = calc_space.CreateCalculation( ins, column_id )
        list_text.append(calculation.FormattedValue().replace(",", ""))
    
    bs = list_text[0]
    exrate = list_text[1]
    
    if bs == 'Sell':
        exrate = ''
    
    return exrate
    
def sumkursbeli(value, list_columns):
    context = acm.GetDefaultContext( )
    sheet_type = 'FTradeSheet'
    total = 0
    
    for i in value:
        ins = i
            
        calc_space = acm.Calculations( ).CreateCalculationSpace( context, sheet_type )
        list_text = []
        
        for j in list_columns:
            column_id = j
            value = calc_space.CalculateValue(ins, column_id)
            calculation = calc_space.CreateCalculation(ins, column_id )
            
            try:
                total += float(calculation.FormattedValue())
            except Exception:
                traceback.print_exc()
                continue
                
            list_text.append(calculation.FormattedValue())
    
    return total

def percent(value, list_columns):
    context = acm.GetDefaultContext( )
    sheet_type = 'FTradeSheet'
    ins = value
        
    calc_space = acm.Calculations( ).CreateCalculationSpace( context, sheet_type )
    list_text = []
    
    
    for i in list_columns:
        column_id = i
        value = calc_space.CalculateValue(ins, column_id)
        calculation = calc_space.CreateCalculation( ins, column_id )
        list_text.append(calculation.FormattedValue().replace(",", ""))
        
    avgprice = float(list_text[0])
    mtm = list_text[1]
    if mtm == '' or mtm == None or mtm == 0:
        return None
        
    else:
        mtm = float(mtm)
        
    result = ((avgprice - mtm)/mtm)
     
    if result <= 0:
        result = (result/-0.05)
    
    return result

def total_coupon(query_folder):

    total = 0
    list_settlement = query_folder.Select()
    
    for i in list_settlement:
        total += float(i.Amount())
    
    return total
    
def avgPrice1(list_trade):
    
    total = 0
    count = 0
    list_trade = list(list_trade)
    
    for i in list_trade:
        total += i.Price()
        count += 1
    
    return total
    
def payday(trade):
    
    try :
        x = trade[0].Instrument().Legs()

        date_list=[]

        for i in x:
            all_cf = i.CashFlows()
            for i in all_cf:
                if i.PayDate() > acm.DateToday():
                    date_list.append(i.PayDate())

        mini = min(date_list)
        year, month, day = str(mini).split("-")
        
        return f"{day}/{month}/{year}"
    except :
        pass

def interestproceed(trade):
    
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    ins = trade
    columnId = 'InterestProceed'

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    calculation = calcSpace.CreateCalculation(ins, columnId)
    result = calculation.FormattedValue()
    calcSpace.Clear()
    return result
    
def interestproceed2(trade):

    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    ins = trade[0].Instrument().Legs()
    columnId = "Cash Analysis Projected"

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)

    date_list=[]
    int_list=[]
    result_list=[]

    for i in ins:
        all_cf = i.CashFlows()
        for i in all_cf:
            if i.PayDate() > acm.DateToday():
                date_list.append(i.PayDate())
                int_list.append(calcSpace.CreateCalculation(i, columnId).FormattedValue())

    count=0
    for date in date_list:
        if date == min(date_list):
            result_list.append(int_list[count])
            count+=1
    
    calcSpace.Clear()
    return result_list[-1]
    
def limitexpiry(apprules):

    context = acm.GetDefaultContext() # Nama Context, e.g.: ICT_CustomReports
    sheetType = 'FAppliedRuleSheet'
    ins = apprules
    columnId = 'Applied Rule End Date'

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType) #FCalculationSpace
    calculation = calcSpace.CreateCalculation(ins, columnId)
    result = calculation.FormattedValue()
    calcSpace.Clear()
    return result
    
    
def premiumacqacc(trade):
    
    context = acm.GetDefaultContext()
    sheetType = 'FMoneyFlowSheet'
    ins = trade
    columnId = "Account Allocation Acquirer Account"

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    
    for flow in trade.MoneyFlows():
        type = flow.Type()
        if type == "Premium":
            acqacc = calcSpace.CreateCalculation(flow, columnId).FormattedValue()
    
    calcSpace.Clear()
    return acqacc

def targetmtdpercent(portfolio):
    
    context = acm.GetDefaultContext()
    sheetType = 'FPortfolioSheet'
    ins = portfolio
    columnId = "Portfolio Total Profit and Loss Monthly"

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    result1 = calcSpace.CreateCalculation(ins, columnId).FormattedValue()
    result2 = result1.replace("#","")
    result3 = result2.replace(",","")
    calcSpace.Clear()
    return float(result3)/100000000.00

def targetytdpercent(portfolio):
    
    context = acm.GetDefaultContext()
    sheetType = 'FPortfolioSheet'
    ins = portfolio
    columnId = "PnLYearly"

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    result1 = calcSpace.CreateCalculation(ins, columnId).FormattedValue()
    result2 = result1.replace("#","")
    result3 = result2.replace(",","")
    calcSpace.Clear()
    return float(result3)/100000000.00

def yearlylosslimituse(object):
    
    context = acm.GetDefaultContext()
    sheetType = 'FPortfolioSheet'
    ins = object
    columnId = "TheoreticalPnLYearly"

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    result1 = calcSpace.CreateCalculation(ins, columnId).FormattedValue()
    result2 = result1.replace("#","")
    result3 = result2.replace(",","")
    
    if object.Instrument().Prices():
        close_rate_IDR = object.Instrument().Prices().First().Settle()
        calcSpace.Clear()
        return float(result3) * close_rate_IDR
    calcSpace.Clear()
    return None
    
def monthlylosslimituse(object):
    
    context = acm.GetDefaultContext()
    sheetType = 'FPortfolioSheet'
    ins = object
    columnId = "Portfolio Theoretical Total Profit and Loss Monthly"

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    result1 = calcSpace.CreateCalculation(ins, columnId).FormattedValue()
    result2 = result1.replace("#","")
    result3 = result2.replace(",","")
    
    if object.Instrument().Prices():
        close_rate_IDR = object.Instrument().Prices().First().Settle()
        calcSpace.Clear()
        return float(result3) * close_rate_IDR

    calcSpace.Clear()
    return None
    
def daychangehvar(object):

    context = acm.GetDefaultContext()
    sheetType = 'FPortfolioSheet'
    ins = object
    columnId = "Portfolio Value at Risk From Scenario Custom"

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    result1 = calcSpace.CreateCalculation(ins, columnId).FormattedValue()
    calcSpace.Clear()
    return result1

def invseq(trades):
    
    count=0
    unique_dict={}
    
    
    for trd in trades:
        if trd.Status()!="Void":
            series = trd.Instrument().InstrumentAlias().SERIES()
            if series not in unique_dict:
                unique_dict[series]=1
            else:
                unique_dict[series]+=1
            count+=1
    
    return unique_dict

def totalPortfolioInstrumentAndTradesClass(trades):
    
    count=0 
    
    for trd in trades:
        if trd.Status()!="Void":
            count+=1
    
    return count

def totalMultiInstrumentAndTradesClass(trades):
    
    count=0
    
    for trd in trades:
        if trd.Status()!="Void" and trd.Instrument().EndDate() > acm.Time.DateToday():
            count+=1
    
    return count

def totalMultiInstrumentAndTradesClass2(trades):
    
    count=0
    
    for trd in trades:
        if trd.Status()!="Void":
            count+=1
    
    return count

def repo(trade):
    
    type_result = ""
    ins_type = str(trade.InstrumentSubType())
    
    if 'repo' in ins_type.lower() :
        type_result = "R"
    elif acm.Time.AsDate(trade.TradeTime()) == trade.Instrument().StartDate() :
        type_result = "W"
    else:
        type_result = "O"
    
    return type_result

def PnLYearly(portfolio):
    
    context = acm.GetDefaultContext()
    sheetType = 'FPortfolioSheet'
    ins = portfolio
    columnId = "PnLYearly"

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    result = calcSpace.CreateCalculation(ins, columnId).Value().Number()
    calcSpace.Clear()
    return result

def PnLMonthly(portfolio):
    
    context = acm.GetDefaultContext()
    sheetType = 'FPortfolioSheet'
    ins = portfolio
    columnId = "Portfolio Total Profit and Loss Monthly"

    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    result1 = calcSpace.CreateCalculation(ins, columnId).FormattedValue()
    result2 = result1.replace("#","")
    result3 = result2.replace(",","")
    calcSpace.Clear()
    return float(result3)

def sumEndCash(trades):
    
    sum = 0
    for trd in trades:
        if trd.Status()!="Void" and trd.Instrument().EndDate() > acm.DateToday():
            if trd.OptKey3AsEnum()=="REPO" or trd.OptKey3AsEnum()=="REVREPO":
                sum += (trd.Nominal() + get_cashflow_proj_interest_amt(trd))
            else:
                sum += trd.EndCash()

    return sum

def NDFInstrument(ins):
    if "NDF" in ins:
        return True
    else: False

def to_number(ext):
    if type(ext)==str:
        return float(ext.replace(".",""))

def trd_eqvidr(trd):
    context = acm.GetDefaultContext()
    sheetType = 'FTradeSheet'
    columnId = "EquivalentAmountIDR"
    
    calcSpace = acm.Calculations().CreateCalculationSpace(context, sheetType)
    result = calcSpace.CreateCalculation(trd,columnId)
    calcSpace.Clear()
    return result.FormattedValue()

def paydate(mfs):
    list = []
    try:
        for mf in mfs:
            if mf.PayDate() >= acm.Time.DateToday():
                list.append(mf.PayDate())
            list.sort()
            mini = min(list)
            y, m, d = mini.split("-")
            return f"{d}/{m}/{y}"
            break
    except:
        pass

...

  ValueDayUSDPrice

import acm
import ael

def getCollateralValueDay(trade):
    collat_trade = get_Collateral(trade)
    if collat_trade is None:
        return None
    else:
        p = getValueDaySettle(collat_trade)
        return p
        
def getValueDaySettle(trade):
    date = trade.ValueDay()
    if trade.Currency().Name() == 'IDR':
        return 1
    prices = acm.FPrice.Select(f"instrument = '{trade.Currency().Name()}' and currency = 'IDR' and market = 'EOD_MtM' and day = '{date}'")
    if prices:
        return prices[0].Settle()
    else:
        return None

def get_Collateral(trade):
    print(trade)
    try:
        agl = trade.AgreementLinks()[0]
        mag = agl.MasterAgreement().Name()
        ms = agl.MarginingSet().Name()
        query = """             
            select al.trdnbr, mag.name, ms.name 
            from TradeAgreementLink al, MarginingSet ms, MasterAgreement mag
            where al.margining_set_seqnbr = ms.seqnbr
            and al.master_agreement_seqnbr = mag.seqnbr
            and mag.name = '{master_agreement}'
            and ms.name = '{margining_set}'
            """.format(master_agreement = mag, margining_set = ms)
        for i in ael.asql(query)[1][0]:
            trd_no = i[0]
            t = acm.FTrade[trd_no]
            if (trd_no != trade.Oid()) and (t.Instrument().InsType().lower() in ('collateral', 'bond', 'bill', 'frn', 'mbs/abs')):
                return t
    except Exception as e:
        #print(get_Collateral.__name__, str(trade.Oid()), str(e))
        #logger.LOG("%s of %s : %s" %(get_Collateral.__name__, str(trade.Oid()), str(e)))
        return None
        


...

  WCO_Column_Helpers
import acm

def get_limit_by_port_and_cr(port, cr_name = ''):
    value = None
    comp_rule = acm.FComplianceRule[cr_name]
    for applied_rule in comp_rule.AppliedRules():
        if port.Name() == applied_rule.Target().Name():
            value = applied_rule.ThresholdValues().First().Value()
    return value
    

...

}

decls[FXSLTemplate] {
  "BM_BackOfficeReport" ( "aef reporting.secondary templates" ) "";
  "BM_BackOfficeReport(BO01-BO13:PBC)" ( "aef reporting.print templates" "aef reporting.secondary templates" ) "";
  "BM_BackOfficeReport(BO21-BO22:MTM_Nasabah)" ( "aef reporting.secondary templates" ) "";
  "BM_BackOfficeReport(BO32:HighNominalJournalEntris)" ( "aef reporting.secondary templates" ) "";
  "BM_BackOfficeReport(BO33:RekonsiliasiPajak)" ( "aef reporting.secondary templates" ) "";
  "BM_BackOfficeReport(BO40-BO41:Streamline)" ( "aef reporting.secondary templates" ) "";
  "BM_BackOfficeReport(BO42:ListCoupon)" ( "aef reporting.secondary templates" ) "";
  "BM_BackOfficeReport(BO45:NominalEqvIDR500)" ( "aef reporting.secondary templates" ) "";
  "BM_BackOfficeReport(BO46:NominalEqvIDR1000)" ( "aef reporting.secondary templates" ) "";
  "BM_BackOfficeReport(BO53:txtTAX)" ( "aef reporting.print templates" "aef reporting.secondary templates" "aef reporting.secondary templates txt" ) "";
  "BM_BackOfficeReport(BO62:PPAP)" ( "aef reporting.secondary templates" ) "";
  "BM_CustomBackOfficeReportCSV" ( "aef reporting.secondary templates" ) "";
  "BM_LiquidityReport" ( "aef reporting.secondary templates" ) "";
  "BM_ReconciliationReport" ( "aef reporting.secondary templates" ) "";
  "BM_WCOReport" ( "aef reporting.secondary templates" ) "";
  "CSVDataTemplate" ( "aef reporting.secondary templates" "aef reporting.secondary templates csv" ) "";
  "FTABTemplate_Custom_ICT" ( "aef reporting.secondary templates" "aef reporting.secondary templates csv" ) "";
  "FTABTemplate_Custom_ICT_Punya_Joshua" ( "aef reporting.secondary templates" "aef reporting.secondary templates csv" ) "";
  "FTABTemplate_Custom_ICTNOGRUP" ( "aef reporting.secondary templates" "aef reporting.secondary templates csv" ) "";
  "Generate_PDF" ( "aef reporting.secondary templates" "aef reporting.secondary templates pdf" ) "";
  "NFTABTemplate" ( "aef reporting.secondary templates" "aef reporting.secondary templates csv" ) "";
  "PDFTemplateBO4041" ( "aef reporting.secondary templates" "aef reporting.secondary templates pdf" ) "";
  "XlsTemplate2Depth" ( "aef reporting.secondary templates" "aef reporting.secondary templates xls" ) "";
  "XlsTemplateBO19" ( "aef reporting.secondary templates" "aef reporting.secondary templates xls" ) "";
  "XlsTemplateBO4041" ( "aef reporting.secondary templates" "aef reporting.secondary templates xls" ) "";
  "XlsTemplateBOa03" ( "aef reporting.secondary templates" "aef reporting.secondary templates xls" ) "";
  "XlsTemplateBOa32" ( "aef reporting.secondary templates" "aef reporting.secondary templates xls" ) "";
  "XlsTemplateBOa33" ( "aef reporting.secondary templates" "aef reporting.secondary templates xls" ) "";
}

clx FObject [FXSLTemplate] {
  BM_BackOfficeReport
<?xml version='1.0'?>
<!-- &copy; Copyright 2011 SunGard FRONT ARENA
       FStandardTemplate is able to produce colored output for RiskMatrixSheets when DefaultData is turned on
       Added support for Transhist output
-->
<!DOCTYPE xsl:stylesheet [
    <!ENTITY nbsp "<xsl:text>&#160;</xsl:text>">
]>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:param name="clickable" select="0"/>
<xsl:param name="autoupdate" select="0"/>
<xsl:output method="html"/>
<xsl:variable name="cellWidth" select="80"/>
<xsl:variable name="rowHeaderWidth" select="250"/>
<xsl:variable name="useLabelColumn" select="//PRIMEReport/Type !='ASQL Table'"/>

<xsl:template name="PrintSpaces">
  <xsl:param name="n" select="0"/>
  <xsl:if test="$n > 0">
    <xsl:call-template name="PrintSpaces">
      <xsl:with-param name="n" select="$n - 1" />
    </xsl:call-template>
    &nbsp;
  </xsl:if>
</xsl:template>

<xsl:template match="ReportContents">
     <xsl:apply-templates select="Table"/>
</xsl:template>

<xsl:template match="Table">
    
    <xsl:variable name="numberOfColumns" select="NumberOfColumns"/>
    <tr class="tblhdr" depth="{$treeDepth}" border="1px solid black">
       <xsl:if test="$useLabelColumn">
        <td width="{$rowHeaderWidth}">
            <xsl:call-template name="PrintSpaces">
                <xsl:with-param name="n" select="($treeDepth -1) * 6"/>
            </xsl:call-template>
        <img src="report_plus.gif" />&nbsp;</td>
        </xsl:if>
        <xsl:for-each select="Columns/Column">
            <xsl:choose>
            <xsl:when test="TemplateId != ''">
                <td width="{$cellWidth * 2}" style="background-color : #ecf576"><b>
                <xsl:value-of select="TemplateId"/><br />
                <xsl:value-of select="Label"/>
                </b></td>
            </xsl:when>
            <xsl:otherwise>
                <td width="{$cellWidth}" style="background-color : #ecf576"><b><xsl:value-of select="Label"/></b></td>
            </xsl:otherwise>
            </xsl:choose>
        </xsl:for-each>
    </tr>
    <xsl:apply-templates select="Rows/Row">
        <xsl:with-param name="treeDepth" select="$treeDepth"/>
        <xsl:with-param name="colorStep" select="0"/>
    </xsl:apply-templates>
</xsl:template>

<xsl:template match="Table">
    
    <xsl:variable name="numberOfColumns" select="NumberOfColumns"/>

    <xsl:variable name="colorStep" >
        <xsl:choose>
                <xsl:when test="(Type = 'RiskMatrixSheet') and current()//DefaultData">
                    <xsl:variable name="maxvalue">
                        <xsl:call-template name="max">
                                <xsl:with-param name="nodes" select="current()//DefaultData"/>
                        </xsl:call-template>
                    </xsl:variable>
                    <xsl:value-of select="$maxvalue div 255" ></xsl:value-of>
                </xsl:when>
                <xsl:otherwise>0</xsl:otherwise>
        </xsl:choose>
    </xsl:variable>

    <table width="{$numberOfColumns * ($cellWidth + 4) + $rowHeaderWidth + 6}" border="1px solid black">
        <tr class="tblhdr" border="1px solid black">
           <xsl:if test="$useLabelColumn">
            <td width="{$rowHeaderWidth}">&nbsp;</td>
            </xsl:if>
            <xsl:for-each select="Columns/Column">
                <xsl:choose>
                <xsl:when test="TemplateId != ''">
                    <td width="{$cellWidth * 2}" style="background-color : #ecf576"><b>
                    <xsl:value-of select="TemplateId"/><br />
                    <xsl:value-of select="Label"/>
                    </b></td>
                </xsl:when>
                <xsl:otherwise>
                    <td width="{$cellWidth}" style="background-color : #ecf576"><b><xsl:value-of select="Label"/></b></td>
                </xsl:otherwise>
                </xsl:choose>
            </xsl:for-each>
        </tr>
        <xsl:apply-templates select="Rows/Row">
            <xsl:with-param name="treeDepth" select="1"/>
            <xsl:with-param name="colorStep" select="$colorStep"/>
        </xsl:apply-templates>
    </table>
    <p/><p/>
</xsl:template>

<xsl:template match="Row">
    <xsl:param name = "treeDepth"/>
    <xsl:param name = "colorStep"/>
    <xsl:variable name="rwId" select="RowId"/>
    <tr class="{concat('cell', $treeDepth)}" depth="{$treeDepth}" border="1px solid black">
        <xsl:if test="$useLabelColumn">
                <td class="row">
                <xsl:call-template name="PrintSpaces">
                        <xsl:with-param name="n" select="($treeDepth - 1) * 6"/>
                </xsl:call-template>
                <xsl:if test="$clickable = '1'">
                        <img src="report_plus.gif"/>
                </xsl:if>
                <xsl:value-of select="Label"/>
                </td>
        </xsl:if>
    <xsl:apply-templates select="Cells/Cell">
        <xsl:with-param name="colorStep" select="$colorStep" />
    </xsl:apply-templates>
    </tr>
    <xsl:if test="ancestor::ReportContents/ChildReports/ChildReport[ChildReportId = $rwId]">
        <xsl:apply-templates select="ancestor::ReportContents/ChildReports/ChildReport[ChildReportId = $rwId]/PRIMEReport/ReportContents/Table" mode="ChildReport">
            <xsl:with-param name="treeDepth" select="$treeDepth +1" />
        </xsl:apply-templates>
    </xsl:if>
    <xsl:apply-templates select="Rows/Row">
        <xsl:with-param name="treeDepth" select="$treeDepth + 1" />
        <xsl:with-param name="colorStep" select="$colorStep" />
    </xsl:apply-templates>
</xsl:template>

<xsl:template match="Cell">
    <xsl:param name = "colorStep"/>
    <td>
         
         <xsl:choose>   
            
            <xsl:when test="Appearance">
                <xsl:attribute name="style">
                
                         <xsl:choose>     
                            <xsl:when test="Appearance/BkgColor">
                                    background-color: <!--rgb( 0, 255 ,255 )-->
                                        <xsl:call-template name="rgbfromint">
                                            <xsl:with-param name="rgbintval" select="Appearance/BkgColor"/>  
                                         </xsl:call-template>
                                         
                            </xsl:when>
                            <xsl:otherwise>
                                background-color: white
                            </xsl:otherwise>
                         </xsl:choose>    
                         
                        <xsl:choose>   
                            <xsl:when test="Appearance/TextColor">
                                    ;color: <!--rgb( 255, 0 ,255 )-->
                                           <xsl:call-template name="rgbfromint">
                                            <xsl:with-param name="rgbintval" select="Appearance/TextColor"/>  
                                         </xsl:call-template>
                            </xsl:when>
                            <xsl:otherwise>
                               ;color: black
                            </xsl:otherwise>
                        </xsl:choose>   
                
                </xsl:attribute>   
            </xsl:when>
            
            <xsl:otherwise>
                <xsl:if test="DefaultData and $colorStep > 0 and string(number(DefaultData)) !='NaN'">
                        <xsl:attribute name="style">background-color:
                                <xsl:call-template name="color">
                                        <xsl:with-param name="colorStep" select="$colorStep"/>
                                        <xsl:with-param name="value" select="DefaultData"/>
                                        
                                </xsl:call-template>
                        </xsl:attribute>
                </xsl:if>
            </xsl:otherwise>
            
        </xsl:choose>
        <xsl:choose>
                <xsl:when test="ValueType and DefaultData">
                        <acronym>
                                <xsl:attribute name="title">
                                        <xsl:value-of select="DefaultData"/>
                                </xsl:attribute>
                        <xsl:call-template name="CellData" />
                        </acronym>
                </xsl:when>
                <xsl:otherwise>
                        <xsl:call-template name="CellData" />
                </xsl:otherwise>
        </xsl:choose>
    </td>
</xsl:template>

<xsl:template name="CellData">
        <xsl:choose>
             
            <xsl:when test="FormattedData">
                <xsl:value-of select="FormattedData"/>
            </xsl:when>
            <xsl:when test="RawData">
                <xsl:choose>
                    <xsl:when test ="contains(RawData, 'http:') or contains(RawData, 'https:')">
                        <xsl:value-of select="RawData " disable-output-escaping="yes"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="RawData"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:when test="DefaultData">
                <xsl:choose>
                        <xsl:when test="ValueType">
                                <xsl:text>#</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                                <xsl:value-of select="DefaultData"/>
                        </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                  <xsl:message terminate="yes"><xsl:text>No dataformat turned on</xsl:text></xsl:message>
            </xsl:otherwise>
            
        </xsl:choose>
</xsl:template>

<xsl:template match="Settings">
    <table border="1px solid black">
    <tr border="1px solid black">
        <xsl:for-each select="Groups/Group">
            <xsl:if test="Label = 'Profit/Loss'">
                <tr class="tblhdr" border="1px solid black">
                <xsl:for-each select="Column">
                    <td class="row" width="{$cellWidth}" style="background-color : #ecf576"><b>
                    <xsl:choose>
                        <xsl:when test="Label != ''">
                            <xsl:value-of select="Label"/>
                        </xsl:when>
                        <xsl:otherwise>
                             <xsl:value-of select="ColumnId"/>
                        </xsl:otherwise>
                    </xsl:choose>
                    </b></td>
                </xsl:for-each>
                </tr>
                <tr class="row" depth="1" border="1px solid black">
                <xsl:for-each select="Cell">
                    <td class="cell1">
                        <xsl:call-template name="CellData" />
                    </td>
                </xsl:for-each>
                </tr>

            </xsl:if>
        </xsl:for-each>
        </tr>
    </table>
    <p/><p/>
</xsl:template>

<xsl:template match="/">
    <html>
        <head>
        <xsl:if test="$autoupdate = '1'">
                <meta http-equiv="REFRESH" content="10"></meta>
        </xsl:if>
        </head>
        <insertcss/>
        <body>
         <p class="headerImage">
            <headerImage/>
        </p>
        <xsl:if test="$clickable = '1'">
                <xsl:attribute name="onload">init()</xsl:attribute>
                <script src="portfolio_report.js" type="text/javascript"></script>
        </xsl:if>

        <!-- Table of contents, only viewed if more than one report -->

        <xsl:if test="/MultiReport">
            <table>
                <xsl:for-each select="/MultiReport/PRIMEReport">
                        <tr><td>
                            <!--<td><xsl:value-of select="Type"/></td>-->
                            <td><xsl:value-of select="Name"/></td>
                            <td><xsl:value-of select="substring(LocalTime,1,10)"/></td>
                        </td></tr>
               </xsl:for-each>
            </table>
        </xsl:if>

        <!-- Reports - ORIGINAL CODE-->
        <xsl:for-each select="/MultiReport/PRIMEReport|/PRIMEReport">
            <h3>
                <!--<xsl:value-of select="Type"/>:&nbsp;--><!--ORIGINAL LINE-->
                <xsl:value-of select="Name"/>&nbsp;
                <br><xsl:value-of select="substring(LocalTime,1,10)"/></br>
                <!--<xsl:value-of select="concat(substring(LocalTime,1,10),' ',substring(LocalTime,12,8),' (UTC', substring(LocalTime,20,6),')')"/>-->
             </h3>

             <xsl:apply-templates select="current()/ReportContents"/>
        </xsl:for-each>
        </body>
    </html>
</xsl:template>

<!-- derived from http://www.exslt.org/math/functions/max/index.html -->
<xsl:template name="max">
   <xsl:param name="nodes" select="/.." />
   <xsl:choose>
      <xsl:when test="not($nodes)">0</xsl:when>
      <xsl:otherwise>
         <xsl:for-each select="$nodes">
            <xsl:sort select="translate(.,'-','')" data-type="number" order="descending" />
            <xsl:if test="position( ) = 1">
               <xsl:value-of select="number(translate(.,'-',''))" />
            </xsl:if>
         </xsl:for-each>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

<xsl:template name="color">
   <xsl:param name="value"/>
   <xsl:param name = "colorStep"/>
   <xsl:variable name="rgbval">
       <xsl:choose>
          <xsl:when test="$value > 0" >
            <xsl:value-of select="255 - round($value div $colorStep)"/>
        </xsl:when>
        <xsl:otherwise>
            <xsl:value-of select="255 - round($value div $colorStep * -1)"/>
        </xsl:otherwise>
       </xsl:choose>

   </xsl:variable>
   <xsl:choose>
        <xsl:when test="$value > 0 and $rgbval &lt; 0">
            <xsl:text>rgb(255,0,0)</xsl:text>
            </xsl:when>
        <xsl:when test="$value &lt; 0 and $rgbval &lt; 0">
            <xsl:text>rgb(0,255,0)</xsl:text>
            </xsl:when>
        <xsl:when test="$value > 0">
            <xsl:value-of select="concat('rgb(',$rgbval,',255,',$rgbval,')')"/>
            </xsl:when>
      <xsl:otherwise>
            <xsl:value-of select="concat('rgb(255,',$rgbval,',',$rgbval,')')"/>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

<xsl:template name="rgbfromint">
        <xsl:param name="rgbintval"/>
        
        <xsl:variable name="redval">
                <xsl:value-of select="$rgbintval mod 256"/>
        </xsl:variable>
        <xsl:variable name="newvalue">
                <xsl:value-of select="floor($rgbintval div 256)"/>
        </xsl:variable>
        <xsl:variable name="greenval">
                <xsl:value-of select="$newvalue mod 256"/>
        </xsl:variable>
        <xsl:variable name="blueval">
                <xsl:value-of select="floor($newvalue div 256)"/>
        </xsl:variable>
        
        <xsl:value-of select="concat( 'rgb(',  $redval,  ',',   $greenval,    ',',   $blueval,  ')'    )"/>
        
        
</xsl:template>

</xsl:stylesheet>

...

  BM_BackOfficeReport(BO01-BO13:PBC)
<?xml version='1.0'?>
<!-- &copy; Copyright 2011 SunGard FRONT ARENA
       FStandardTemplate is able to produce colored output for RiskMatrixSheets when DefaultData is turned on
       Added support for Transhist output
-->
<!DOCTYPE xsl:stylesheet [
    <!ENTITY nbsp "<xsl:text>&#160;</xsl:text>">
]>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:param name="clickable" select="0"/>
<xsl:param name="autoupdate" select="0"/>
<xsl:output method="html"/>
<xsl:variable name="cellWidth" select="80"/>
<xsl:variable name="rowHeaderWidth" select="250"/>
<xsl:variable name="useLabelColumn" select="//PRIMEReport/Type !='ASQL Table'"/>

<xsl:template name="PrintSpaces">
  <xsl:param name="n" select="0"/>
  <xsl:if test="$n > 0">
    <xsl:call-template name="PrintSpaces">
      <xsl:with-param name="n" select="$n - 1" />
    </xsl:call-template>
    &nbsp;
  </xsl:if>
</xsl:template>

<xsl:template match="ReportContents">
     <xsl:apply-templates select="Table"/>
</xsl:template>

<xsl:template match="Table">
    
    <xsl:variable name="numberOfColumns" select="NumberOfColumns"/>
    <tr class="tblhdr" depth="{$treeDepth}" border="1px solid black">
       <xsl:if test="$useLabelColumn">
        <td width="{$rowHeaderWidth}">
            <xsl:call-template name="PrintSpaces">
                <xsl:with-param name="n" select="($treeDepth -1) * 6"/>
            </xsl:call-template>
        <img src="report_plus.gif" />&nbsp;</td>
        </xsl:if>
        <xsl:for-each select="Columns/Column">
            <xsl:choose>
            <xsl:when test="TemplateId != ''">
                <td width="{$cellWidth * 2}" style="background-color : #ecf576"><b>
                <xsl:value-of select="TemplateId"/><br />
                <xsl:value-of select="Label"/>
                </b></td>
            </xsl:when>
            <xsl:otherwise>
                <td width="{$cellWidth}" style="background-color : #ecf576"><b><xsl:value-of select="Label"/></b></td>
            </xsl:otherwise>
            </xsl:choose>
        </xsl:for-each>
    </tr>
    <xsl:apply-templates select="Rows/Row">
        <xsl:with-param name="treeDepth" select="$treeDepth"/>
        <xsl:with-param name="colorStep" select="0"/>
    </xsl:apply-templates>
</xsl:template>

<xsl:template match="Table">
    
    <xsl:variable name="numberOfColumns" select="NumberOfColumns"/>

    <xsl:variable name="colorStep" >
        <xsl:choose>
                <xsl:when test="(Type = 'RiskMatrixSheet') and current()//DefaultData">
                    <xsl:variable name="maxvalue">
                        <xsl:call-template name="max">
                                <xsl:with-param name="nodes" select="current()//DefaultData"/>
                        </xsl:call-template>
                    </xsl:variable>
                    <xsl:value-of select="$maxvalue div 255" ></xsl:value-of>
                </xsl:when>
                <xsl:otherwise>0</xsl:otherwise>
        </xsl:choose>
    </xsl:variable>

    <table width="{$numberOfColumns * ($cellWidth + 4) + $rowHeaderWidth + 6}" border="1px solid black">
        <tr class="tblhdr" border="1px solid black">
           <xsl:if test="$useLabelColumn">
            <td width="{$rowHeaderWidth}">&nbsp;</td>
            </xsl:if>
            <xsl:for-each select="Columns/Column">
                <xsl:choose>
                <xsl:when test="TemplateId != ''">
                    <td width="{$cellWidth * 2}" style="background-color : #ecf576"><b>
                    <xsl:value-of select="TemplateId"/><br />
                    <xsl:value-of select="Label"/>
                    </b></td>
                </xsl:when>
                <xsl:otherwise>
                    <td width="{$cellWidth}" style="background-color : #ecf576"><b><xsl:value-of select="Label"/></b></td>
                </xsl:otherwise>
                </xsl:choose>
            </xsl:for-each>
        </tr>
        <xsl:apply-templates select="Rows/Row">
            <xsl:with-param name="treeDepth" select="1"/>
            <xsl:with-param name="colorStep" select="$colorStep"/>
        </xsl:apply-templates>
    </table>
    <p/><p/>
</xsl:template>

<xsl:template match="Row">
    <xsl:param name = "treeDepth"/>
    <xsl:param name = "colorStep"/>
    <xsl:variable name="rwId" select="RowId"/>
    <tr class="{concat('cell', $treeDepth)}" depth="{$treeDepth}" border="1px solid black">
        <xsl:if test="$useLabelColumn">
                <td class="row">
                <xsl:call-template name="PrintSpaces">
                        <xsl:with-param name="n" select="($treeDepth - 1) * 6"/>
                </xsl:call-template>
                <xsl:if test="$clickable = '1'">
                        <img src="report_plus.gif"/>
                </xsl:if>
                <xsl:value-of select="Label"/>
                </td>
        </xsl:if>
    <xsl:apply-templates select="Cells/Cell">
        <xsl:with-param name="colorStep" select="$colorStep" />
    </xsl:apply-templates>
    </tr>
    <xsl:if test="ancestor::ReportContents/ChildReports/ChildReport[ChildReportId = $rwId]">
        <xsl:apply-templates select="ancestor::ReportContents/ChildReports/ChildReport[ChildReportId = $rwId]/PRIMEReport/ReportContents/Table" mode="ChildReport">
            <xsl:with-param name="treeDepth" select="$treeDepth +1" />
        </xsl:apply-templates>
    </xsl:if>
    <xsl:apply-templates select="Rows/Row">
        <xsl:with-param name="treeDepth" select="$treeDepth + 1" />
        <xsl:with-param name="colorStep" select="$colorStep" />
    </xsl:apply-templates>
</xsl:template>

<xsl:template match="Cell">
    <xsl:param name = "colorStep"/>
    <td>
         
         <xsl:choose>   
            
            <xsl:when test="Appearance">
                <xsl:attribute name="style">
                
                         <xsl:choose>     
                            <xsl:when test="Appearance/BkgColor">
                                    background-color: <!--rgb( 0, 255 ,255 )-->
                                        <xsl:call-template name="rgbfromint">
                                            <xsl:with-param name="rgbintval" select="Appearance/BkgColor"/>  
                                         </xsl:call-template>
                                         
                            </xsl:when>
                            <xsl:otherwise>
                                background-color: white
                            </xsl:otherwise>
                         </xsl:choose>    
                         
                        <xsl:choose>   
                            <xsl:when test="Appearance/TextColor">
                                    ;color: <!--rgb( 255, 0 ,255 )-->
                                           <xsl:call-template name="rgbfromint">
                                            <xsl:with-param name="rgbintval" select="Appearance/TextColor"/>  
                                         </xsl:call-template>
                            </xsl:when>
                            <xsl:otherwise>
                               ;color: black
                            </xsl:otherwise>
                        </xsl:choose>   
                
                </xsl:attribute>   
            </xsl:when>
            
            <xsl:otherwise>
                <xsl:if test="DefaultData and $colorStep > 0 and string(number(DefaultData)) !='NaN'">
                        <xsl:attribute name="style">background-color:
                                <xsl:call-template name="color">
                                        <xsl:with-param name="colorStep" select="$colorStep"/>
                                        <xsl:with-param name="value" select="DefaultData"/>
                                        
                                </xsl:call-template>
                        </xsl:attribute>
                </xsl:if>
            </xsl:otherwise>
            
        </xsl:choose>
        <xsl:choose>
                <xsl:when test="ValueType and DefaultData">
                        <acronym>
                                <xsl:attribute name="title">
                                        <xsl:value-of select="DefaultData"/>
                                </xsl:attribute>
                        <xsl:call-template name="CellData" />
                        </acronym>
                </xsl:when>
                <xsl:otherwise>
                        <xsl:call-template name="CellData" />
                </xsl:otherwise>
        </xsl:choose>
    </td>
</xsl:template>

<xsl:template name="CellData">
        <xsl:choose>
             
            <xsl:when test="FormattedData">
                <xsl:value-of select="FormattedData"/>
            </xsl:when>
            <xsl:when test="RawData">
                <xsl:choose>
                    <xsl:when test ="contains(RawData, 'http:') or contains(RawData, 'https:')">
                        <xsl:value-of select="RawData " disable-output-escaping="yes"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="RawData"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:when test="DefaultData">
                <xsl:choose>
                        <xsl:when test="ValueType">
                                <xsl:text>#</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                                <xsl:value-of select="DefaultData"/>
                        </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                  <xsl:message terminate="yes"><xsl:text>No dataformat turned on</xsl:text></xsl:message>
            </xsl:otherwise>
            
        </xsl:choose>
</xsl:template>

<xsl:template match="Settings">
    <table border="1px solid black">
    <tr border="1px solid black">
        <xsl:for-each select="Groups/Group">
            <xsl:if test="Label = 'Profit/Loss'">
                <tr class="tblhdr" border="1px solid black">
                <xsl:for-each select="Column">
                    <td class="row" width="{$cellWidth}" style="background-color : #ecf576"><b>
                    <xsl:choose>
                        <xsl:when test="Label != ''">
                            <xsl:value-of select="Label"/>
                        </xsl:when>
                        <xsl:otherwise>
                             <xsl:value-of select="ColumnId"/>
                        </xsl:otherwise>
                    </xsl:choose>
                    </b></td>
                </xsl:for-each>
                </tr>
                <tr class="row" depth="1" border="1px solid black">
                <xsl:for-each select="Cell">
                    <td class="cell1">
                        <xsl:call-template name="CellData" />
                    </td>
                </xsl:for-each>
                </tr>

            </xsl:if>
        </xsl:for-each>
        </tr>
    </table>
    <p/><p/>
</xsl:template>

<xsl:template match="/">
    <html>
        <head>
        <xsl:if test="$autoupdate = '1'">
                <meta http-equiv="REFRESH" content="10"></meta>
        </xsl:if>
        </head>
        <insertcss/>
        <body>
         <p class="headerImage">
            <headerImage/>
        </p>
        <xsl:if test="$clickable = '1'">
                <xsl:attribute name="onload">init()</xsl:attribute>
                <script src="portfolio_report.js" type="text/javascript"></script>
        </xsl:if>
        
         <xsl:if test="/MultiReport">
                <xsl:for-each select="/MultiReport/PRIMEReport">
                    <xsl:value-of select="Type"/>
                    <xsl:value-of select="Name"/>
                    <xsl:value-of select="substring(LocalTime,1,10)"/>
                </xsl:for-each>
            </xsl:if>
            
        <xsl:for-each select="/MultiReport/PRIMEReport|/PRIMEReport">
            <h3>
                <xsl:value-of select="Type"/>:&nbsp;
                <xsl:value-of select="Name"/>&nbsp;
                <xsl:value-of select="substring(LocalTime,1,10)"/> 
             </h3>
        </xsl:for-each>
        
        <table>
          <tr>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <th style="background-color : #ecf576; border: 1px solid black">Prepare By</th>
            <th style="background-color : #ecf576; border: 1px solid black">Review By</th>
          </tr>
          <tr>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td style="border: 1px solid black"></td>
            <td style="border: 1px solid black"></td>
          </tr>
          <tr>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td style="border: 1px solid black"></td>
            <td style="border: 1px solid black"></td>
          </tr>
        </table>
        <br></br>
        
        
        <xsl:for-each select="/MultiReport/PRIMEReport|/PRIMEReport">
            <xsl:apply-templates select="current()/ReportContents[last()]"/>
        </xsl:for-each>
        
        <xsl:for-each select="/MultiReport/PRIMEReport|/PRIMEReport">
            <table>
              <tr>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td><b>Jakarta, <xsl:value-of select="substring(LocalTime,1,10)"/></b></td>
              </tr>
              <tr>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td><b>Treasury Operations Department</b></td>
              </tr>
            </table>
        </xsl:for-each>
        
        </body>
    </html>
</xsl:template>

<!-- derived from http://www.exslt.org/math/functions/max/index.html -->
<xsl:template name="max">
   <xsl:param name="nodes" select="/.." />
   <xsl:choose>
      <xsl:when test="not($nodes)">0</xsl:when>
      <xsl:otherwise>
         <xsl:for-each select="$nodes">
            <xsl:sort select="translate(.,'-','')" data-type="number" order="descending" />
            <xsl:if test="position( ) = 1">
               <xsl:value-of select="number(translate(.,'-',''))" />
            </xsl:if>
         </xsl:for-each>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

<xsl:template name="color">
   <xsl:param name="value"/>
   <xsl:param name = "colorStep"/>
   <xsl:variable name="rgbval">
       <xsl:choose>
          <xsl:when test="$value > 0" >
            <xsl:value-of select="255 - round($value div $colorStep)"/>
        </xsl:when>
        <xsl:otherwise>
            <xsl:value-of select="255 - round($value div $colorStep * -1)"/>
        </xsl:otherwise>
       </xsl:choose>

   </xsl:variable>
   <xsl:choose>
        <xsl:when test="$value > 0 and $rgbval &lt; 0">
            <xsl:text>rgb(255,0,0)</xsl:text>
            </xsl:when>
        <xsl:when test="$value &lt; 0 and $rgbval &lt; 0">
            <xsl:text>rgb(0,255,0)</xsl:text>
            </xsl:when>
        <xsl:when test="$value > 0">
            <xsl:value-of select="concat('rgb(',$rgbval,',255,',$rgbval,')')"/>
            </xsl:when>
      <xsl:otherwise>
            <xsl:value-of select="concat('rgb(255,',$rgbval,',',$rgbval,')')"/>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

<xsl:template name="rgbfromint">
        <xsl:param name="rgbintval"/>
        
        <xsl:variable name="redval">
                <xsl:value-of select="$rgbintval mod 256"/>
        </xsl:variable>
        <xsl:variable name="newvalue">
                <xsl:value-of select="floor($rgbintval div 256)"/>
        </xsl:variable>
        <xsl:variable name="greenval">
                <xsl:value-of select="$newvalue mod 256"/>
        </xsl:variable>
        <xsl:variable name="blueval">
                <xsl:value-of select="floor($newvalue div 256)"/>
        </xsl:variable>
        
        <xsl:value-of select="concat( 'rgb(',  $redval,  ',',   $greenval,    ',',   $blueval,  ')'    )"/>
        
        
</xsl:template>

</xsl:stylesheet>

...

  BM_BackOfficeReport(BO21-BO22:MTM_Nasabah)
<?xml version='1.0'?>
<!-- &copy; Copyright 2011 SunGard FRONT ARENA
       FStandardTemplate is able to produce colored output for RiskMatrixSheets when DefaultData is turned on
       Added support for Transhist output
-->
<!DOCTYPE xsl:stylesheet [
    <!ENTITY nbsp "<xsl:text>&#160;</xsl:text>">
]>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:param name="clickable" select="0"/>
<xsl:param name="autoupdate" select="0"/>
<xsl:output method="html"/>
<xsl:variable name="cellWidth" select="80"/>
<xsl:variable name="rowHeaderWidth" select="250"/>
<xsl:variable name="useLabelColumn" select="//PRIMEReport/Type !='ASQL Table'"/>

<xsl:template name="PrintSpaces">
  <xsl:param name="n" select="0"/>
  <xsl:if test="$n > 0">
    <xsl:call-template name="PrintSpaces">
      <xsl:with-param name="n" select="$n - 1" />
    </xsl:call-template>
    &nbsp;
  </xsl:if>
</xsl:template>

<xsl:template match="ReportContents">
     <xsl:apply-templates select="Table"/>
</xsl:template>

<xsl:template match="Table">
    
    <xsl:variable name="numberOfColumns" select="NumberOfColumns"/>
    <tr class="tblhdr" depth="{$treeDepth}" border="1px solid black">
       <xsl:if test="$useLabelColumn">
        <td width="{$rowHeaderWidth}">
            <xsl:call-template name="PrintSpaces">
                <xsl:with-param name="n" select="($treeDepth -1) * 6"/>
            </xsl:call-template>
        <img src="report_plus.gif" />&nbsp;</td>
        </xsl:if>
        <xsl:for-each select="Columns/Column">
            <xsl:choose>
            <xsl:when test="TemplateId != ''">
                <td width="{$cellWidth * 2}" style="background-color : #ecf576"><b>
                <xsl:value-of select="TemplateId"/><br />
                <xsl:value-of select="Label"/>
                </b></td>
            </xsl:when>
            <xsl:otherwise>
                <td width="{$cellWidth}" style="background-color : #ecf576"><b><xsl:value-of select="Label"/></b></td>
            </xsl:otherwise>
            </xsl:choose>
        </xsl:for-each>
    </tr>
    <xsl:apply-templates select="Rows/Row">
        <xsl:with-param name="treeDepth" select="$treeDepth"/>
        <xsl:with-param name="colorStep" select="0"/>
    </xsl:apply-templates>
</xsl:template>

<xsl:template match="Table">
    
    <xsl:variable name="numberOfColumns" select="NumberOfColumns"/>

    <xsl:variable name="colorStep" >
        <xsl:choose>
                <xsl:when test="(Type = 'RiskMatrixSheet') and current()//DefaultData">
                    <xsl:variable name="maxvalue">
                        <xsl:call-template name="max">
                                <xsl:with-param name="nodes" select="current()//DefaultData"/>
                        </xsl:call-template>
                    </xsl:variable>
                    <xsl:value-of select="$maxvalue div 255" ></xsl:value-of>
                </xsl:when>
                <xsl:otherwise>0</xsl:otherwise>
        </xsl:choose>
    </xsl:variable>

    <table width="{$numberOfColumns * ($cellWidth + 4) + $rowHeaderWidth + 6}" border="1px solid black">
        <tr class="tblhdr" border="1px solid black">
           <xsl:if test="$useLabelColumn">
            <td width="{$rowHeaderWidth}">&nbsp;</td>
            </xsl:if>
            <xsl:for-each select="Columns/Column">
                <xsl:choose>
                <xsl:when test="TemplateId != ''">
                    <td width="{$cellWidth * 2}" style="background-color : #ecf576"><b>
                    <xsl:value-of select="TemplateId"/><br />
                    <xsl:value-of select="Label"/>
                    </b></td>
                </xsl:when>
                <xsl:otherwise>
                    <td width="{$cellWidth}" style="background-color : #ecf576"><b><xsl:value-of select="Label"/></b></td>
                </xsl:otherwise>
                </xsl:choose>
            </xsl:for-each>
        </tr>
        <xsl:apply-templates select="Rows/Row">
            <xsl:with-param name="treeDepth" select="1"/>
            <xsl:with-param name="colorStep" select="$colorStep"/>
        </xsl:apply-templates>
    </table>
    <p/><p/>
</xsl:template>

<xsl:template match="Row">
    <xsl:param name = "treeDepth"/>
    <xsl:param name = "colorStep"/>
    <xsl:variable name="rwId" select="RowId"/>
    <tr class="{concat('cell', $treeDepth)}" depth="{$treeDepth}" border="1px solid black">
        <xsl:if test="$useLabelColumn">
                <td class="row">
                <xsl:call-template name="PrintSpaces">
                        <xsl:with-param name="n" select="($treeDepth - 1) * 6"/>
                </xsl:call-template>
                <xsl:if test="$clickable = '1'">
                        <img src="report_plus.gif"/>
                </xsl:if>
                <xsl:value-of select="Label"/>
                </td>
        </xsl:if>
    <xsl:apply-templates select="Cells/Cell">
        <xsl:with-param name="colorStep" select="$colorStep" />
    </xsl:apply-templates>
    </tr>
    <xsl:if test="ancestor::ReportContents/ChildReports/ChildReport[ChildReportId = $rwId]">
        <xsl:apply-templates select="ancestor::ReportContents/ChildReports/ChildReport[ChildReportId = $rwId]/PRIMEReport/ReportContents/Table" mode="ChildReport">
            <xsl:with-param name="treeDepth" select="$treeDepth +1" />
        </xsl:apply-templates>
    </xsl:if>
    <xsl:apply-templates select="Rows/Row">
        <xsl:with-param name="treeDepth" select="$treeDepth + 1" />
        <xsl:with-param name="colorStep" select="$colorStep" />
    </xsl:apply-templates>
</xsl:template>

<xsl:template match="Cell">
    <xsl:param name = "colorStep"/>
    <td>
         
         <xsl:choose>   
            
            <xsl:when test="Appearance">
                <xsl:attribute name="style">
                
                         <xsl:choose>     
                            <xsl:when test="Appearance/BkgColor">
                                    background-color: <!--rgb( 0, 255 ,255 )-->
                                        <xsl:call-template name="rgbfromint">
                                            <xsl:with-param name="rgbintval" select="Appearance/BkgColor"/>  
                                         </xsl:call-template>
                                         
                            </xsl:when>
                            <xsl:otherwise>
                                background-color: white
                            </xsl:otherwise>
                         </xsl:choose>    
                         
                        <xsl:choose>   
                            <xsl:when test="Appearance/TextColor">
                                    ;color: <!--rgb( 255, 0 ,255 )-->
                                           <xsl:call-template name="rgbfromint">
                                            <xsl:with-param name="rgbintval" select="Appearance/TextColor"/>  
                                         </xsl:call-template>
                            </xsl:when>
                            <xsl:otherwise>
                               ;color: black
                            </xsl:otherwise>
                        </xsl:choose>   
                
                </xsl:attribute>   
            </xsl:when>
            
            <xsl:otherwise>
                <xsl:if test="DefaultData and $colorStep > 0 and string(number(DefaultData)) !='NaN'">
                        <xsl:attribute name="style">background-color:
                                <xsl:call-template name="color">
                                        <xsl:with-param name="colorStep" select="$colorStep"/>
                                        <xsl:with-param name="value" select="DefaultData"/>
                                        
                                </xsl:call-template>
                        </xsl:attribute>
                </xsl:if>
            </xsl:otherwise>
            
        </xsl:choose>
        <xsl:choose>
                <xsl:when test="ValueType and DefaultData">
                        <acronym>
                                <xsl:attribute name="title">
                                        <xsl:value-of select="DefaultData"/>
                                </xsl:attribute>
                        <xsl:call-template name="CellData" />
                        </acronym>
                </xsl:when>
                <xsl:otherwise>
                        <xsl:call-template name="CellData" />
                </xsl:otherwise>
        </xsl:choose>
    </td>
</xsl:template>

<xsl:template name="CellData">
        <xsl:choose>
             
            <xsl:when test="FormattedData">
                <xsl:value-of select="FormattedData"/>
            </xsl:when>
            <xsl:when test="RawData">
                <xsl:choose>
                    <xsl:when test ="contains(RawData, 'http:') or contains(RawData, 'https:')">
                        <xsl:value-of select="RawData " disable-output-escaping="yes"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="RawData"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:when test="DefaultData">
                <xsl:choose>
                        <xsl:when test="ValueType">
                                <xsl:text>#</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                                <xsl:value-of select="DefaultData"/>
                        </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                  <xsl:message terminate="yes"><xsl:text>No dataformat turned on</xsl:text></xsl:message>
            </xsl:otherwise>
            
        </xsl:choose>
</xsl:template>

<xsl:template match="Settings">
    <table border="1px solid black">
    <tr border="1px solid black">
        <xsl:for-each select="Groups/Group">
            <xsl:if test="Label = 'Profit/Loss'">
                <tr class="tblhdr" border="1px solid black">
                <xsl:for-each select="Column">
                    <td class="row" width="{$cellWidth}" style="background-color : #ecf576"><b>
                    <xsl:choose>
                        <xsl:when test="Label != ''">
                            <xsl:value-of select="Label"/>
                        </xsl:when>
                        <xsl:otherwise>
                             <xsl:value-of select="ColumnId"/>
                        </xsl:otherwise>
                    </xsl:choose>
                    </b></td>
                </xsl:for-each>
                </tr>
                <tr class="row" depth="1" border="1px solid black">
                <xsl:for-each select="Cell">
                    <td class="cell1">
                        <xsl:call-template name="CellData" />
                    </td>
                </xsl:for-each>
                </tr>

            </xsl:if>
        </xsl:for-each>
        </tr>
    </table>
    <p/><p/>
</xsl:template>

<xsl:template match="/">
    <html>
        <head>
        <xsl:if test="$autoupdate = '1'">
                <meta http-equiv="REFRESH" content="10"></meta>
        </xsl:if>
        </head>
        <insertcss/>
        <body>
         <p class="headerImage">
            <headerImage/>
        </p>
        <xsl:if test="$clickable = '1'">
                <xsl:attribute name="onload">init()</xsl:attribute>
                <script src="portfolio_report.js" type="text/javascript"></script>
        </xsl:if>
        
        <p>Dear Sir/Madam,</p>
        <p>This is a valuation advice of Outstanding Transaction between PT Bank Mandiri (Persero) Tbk and Client. The Valuation, include accrued interest (if any), is viewed from Client's perspective.
        </p>
        <br></br>

        <!-- Table of contents, only viewed if more than one report -->
        
        <!-- 
            <xsl:if test="/MultiReport">
                <xsl:for-each select="/MultiReport/PRIMEReport">
                    <xsl:value-of select="Type"/>
                    <xsl:value-of select="Name"/>
                    <xsl:value-of select="concat(substring(LocalTime,1,10),' ',substring(LocalTime,12,8),' (UTC', substring(LocalTime,20,6),')')"/>
                </xsl:for-each>
            </xsl:if>
        -->

        <!-- Reports -->
        
        
        <xsl:for-each select="/MultiReport/PRIMEReport|/PRIMEReport">
            <!--<h3>
                <xsl:value-of select="Type"/>:&nbsp;
                <xsl:value-of select="Name"/>&nbsp;
                <xsl:value-of select="concat(substring(LocalTime,1,10),' ',substring(LocalTime,12,8),' (UTC', substring(LocalTime,20,6),')')"/> 
             </h3>-->
            <xsl:apply-templates select="current()/ReportContents[last()]"/>
        </xsl:for-each>
        
        
        <p>The Valuation as of the valuation date indicates and represents an estimated valuation derived from market quotation or from proprietary models that take into considerations estimates about relevant present and future market conditions, as well as the size and liquidity of the position and any related actual or potential hedging transaction. The information is derived from sources believed to be reliable, nevertheless we do not presume any responsibility to independently verify the same. Valuation based upon other models or assumptions or calculated as of another date and time may yield significantly different results. The Valuation is provided for information purposes only as an accommodation without charge and intended solely for your expediency.</p>
        <p>We expressly disclaim any responsibility for (i) the accuracy of the models, market data input into such models or estimates used in deriving the Valuation, (ii) any errors or omissions in computing or disseminating the Valuation and (iii) any uses to which the Valuation is put. </p>
        <p>Further, the Valuation does not represent (i) the actual prices at which new transactions could be entered into, (ii) the actual prices at which the existing transaction could be liquidated or unwound or (iii) an estimated amount that would be paid following the early termination date any transactions.</p>
        <xsl:for-each select="/MultiReport/PRIMEReport|/PRIMEReport">
            <table>
              <tr>
                <td><p>Yours faithfully,</p></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td><b>Jakarta, <xsl:value-of select="substring(LocalTime,1,10)"/></b></td>
              </tr>
              <tr>
                <td><h3>PT. Bank Mandiri (Persero) Tbk.</h3></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td><b>Treasury Operations Department</b></td>
              </tr>
            </table>
        </xsl:for-each>
        
        </body>
    </html>
</xsl:template>

<!-- derived from http://www.exslt.org/math/functions/max/index.html -->
<xsl:template name="max">
   <xsl:param name="nodes" select="/.." />
   <xsl:choose>
      <xsl:when test="not($nodes)">0</xsl:when>
      <xsl:otherwise>
         <xsl:for-each select="$nodes">
            <xsl:sort select="translate(.,'-','')" data-type="number" order="descending" />
            <xsl:if test="position( ) = 1">
               <xsl:value-of select="number(translate(.,'-',''))" />
            </xsl:if>
         </xsl:for-each>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

<xsl:template name="color">
   <xsl:param name="value"/>
   <xsl:param name = "colorStep"/>
   <xsl:variable name="rgbval">
       <xsl:choose>
          <xsl:when test="$value > 0" >
            <xsl:value-of select="255 - round($value div $colorStep)"/>
        </xsl:when>
        <xsl:otherwise>
            <xsl:value-of select="255 - round($value div $colorStep * -1)"/>
        </xsl:otherwise>
       </xsl:choose>

   </xsl:variable>
   <xsl:choose>
        <xsl:when test="$value > 0 and $rgbval &lt; 0">
            <xsl:text>rgb(255,0,0)</xsl:text>
            </xsl:when>
        <xsl:when test="$value &lt; 0 and $rgbval &lt; 0">
            <xsl:text>rgb(0,255,0)</xsl:text>
            </xsl:when>
        <xsl:when test="$value > 0">
            <xsl:value-of select="concat('rgb(',$rgbval,',255,',$rgbval,')')"/>
            </xsl:when>
      <xsl:otherwise>
            <xsl:value-of select="concat('rgb(255,',$rgbval,',',$rgbval,')')"/>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

<xsl:template name="rgbfromint">
        <xsl:param name="rgbintval"/>
        
        <xsl:variable name="redval">
                <xsl:value-of select="$rgbintval mod 256"/>
        </xsl:variable>
        <xsl:variable name="newvalue">
                <xsl:value-of select="floor($rgbintval div 256)"/>
        </xsl:variable>
        <xsl:variable name="greenval">
                <xsl:value-of select="$newvalue mod 256"/>
        </xsl:variable>
        <xsl:variable name="blueval">
                <xsl:value-of select="floor($newvalue div 256)"/>
        </xsl:variable>
        
        <xsl:value-of select="concat( 'rgb(',  $redval,  ',',   $greenval,    ',',   $blueval,  ')'    )"/>
        
        
</xsl:template>

</xsl:stylesheet>

...

  BM_BackOfficeReport(BO32:HighNominalJournalEntris)
<?xml version='1.0'?>
<!-- &copy; Copyright 2011 SunGard FRONT ARENA
       FStandardTemplate is able to produce colored output for RiskMatrixSheets when DefaultData is turned on
       Added support for Transhist output
-->
<!DOCTYPE xsl:stylesheet [
    <!ENTITY nbsp "<xsl:text>&#160;</xsl:text>">
]>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:param name="clickable" select="0"/>
<xsl:param name="autoupdate" select="0"/>
<xsl:output method="html"/>
<xsl:variable name="cellWidth" select="80"/>
<xsl:variable name="rowHeaderWidth" select="250"/>
<xsl:variable name="useLabelColumn" select="//PRIMEReport/Type !='ASQL Table'"/>

<xsl:template name="PrintSpaces">
  <xsl:param name="n" select="0"/>
  <xsl:if test="$n > 0">
    <xsl:call-template name="PrintSpaces">
      <xsl:with-param name="n" select="$n - 1" />
    </xsl:call-template>
    &nbsp;
  </xsl:if>
</xsl:template>

<xsl:template match="ReportContents">
     <xsl:apply-templates select="Table"/>
</xsl:template>

<xsl:template match="Table">
    
    <xsl:variable name="numberOfColumns" select="NumberOfColumns"/>
    <tr class="tblhdr" depth="{$treeDepth}" border="1px solid black">
       <xsl:if test="$useLabelColumn">
        <td width="{$rowHeaderWidth}">
            <xsl:call-template name="PrintSpaces">
                <xsl:with-param name="n" select="($treeDepth -1) * 6"/>
            </xsl:call-template>
        <img src="report_plus.gif" />&nbsp;</td>
        </xsl:if>
        <xsl:for-each select="Columns/Column">
            <xsl:choose>
            <xsl:when test="TemplateId != ''">
                <td width="{$cellWidth * 2}" style="background-color : #ecf576"><b>
                <xsl:value-of select="TemplateId"/><br />
                <xsl:value-of select="Label"/>
                </b></td>
            </xsl:when>
            <xsl:otherwise>
                <td width="{$cellWidth}" style="background-color : #ecf576"><b><xsl:value-of select="Label"/></b></td>
            </xsl:otherwise>
            </xsl:choose>
        </xsl:for-each>
    </tr>
    <xsl:apply-templates select="Rows/Row">
        <xsl:with-param name="treeDepth" select="$treeDepth"/>
        <xsl:with-param name="colorStep" select="0"/>
    </xsl:apply-templates>
</xsl:template>

<xsl:template match="Table">
    
    <xsl:variable name="numberOfColumns" select="NumberOfColumns"/>

    <xsl:variable name="colorStep" >
        <xsl:choose>
                <xsl:when test="(Type = 'RiskMatrixSheet') and current()//DefaultData">
                    <xsl:variable name="maxvalue">
                        <xsl:call-template name="max">
                                <xsl:with-param name="nodes" select="current()//DefaultData"/>
                        </xsl:call-template>
                    </xsl:variable>
                    <xsl:value-of select="$maxvalue div 255" ></xsl:value-of>
                </xsl:when>
                <xsl:otherwise>0</xsl:otherwise>
        </xsl:choose>
    </xsl:variable>

    <table width="{$numberOfColumns * ($cellWidth + 4) + $rowHeaderWidth + 6}" border="1px solid black">
        <tr class="tblhdr" border="1px solid black">
           <xsl:if test="$useLabelColumn">
            <td width="{$rowHeaderWidth}">&nbsp;</td>
            </xsl:if>
            <xsl:for-each select="Columns/Column">
                <xsl:choose>
                <xsl:when test="TemplateId != ''">
                    <td width="{$cellWidth * 2}" style="background-color : #ecf576"><b>
                    <xsl:value-of select="TemplateId"/><br />
                    <xsl:value-of select="Label"/>
                    </b></td>
                </xsl:when>
                <xsl:otherwise>
                    <td width="{$cellWidth}" style="background-color : #ecf576"><b><xsl:value-of select="Label"/></b></td>
                </xsl:otherwise>
                </xsl:choose>
            </xsl:for-each>
        </tr>
        <xsl:apply-templates select="Rows/Row">
            <xsl:with-param name="treeDepth" select="1"/>
            <xsl:with-param name="colorStep" select="$colorStep"/>
        </xsl:apply-templates>
    </table>
    <p/><p/>
</xsl:template>

<xsl:template match="Row">
    <xsl:param name = "treeDepth"/>
    <xsl:param name = "colorStep"/>
    <xsl:variable name="rwId" select="RowId"/>
    <tr class="{concat('cell', $treeDepth)}" depth="{$treeDepth}" border="1px solid black">
        <xsl:if test="$useLabelColumn">
                <td class="row">
                <xsl:call-template name="PrintSpaces">
                        <xsl:with-param name="n" select="($treeDepth - 1) * 6"/>
                </xsl:call-template>
                <xsl:if test="$clickable = '1'">
                        <img src="report_plus.gif"/>
                </xsl:if>
                <xsl:value-of select="Label"/>
                </td>
        </xsl:if>
    <xsl:apply-templates select="Cells/Cell">
        <xsl:with-param name="colorStep" select="$colorStep" />
    </xsl:apply-templates>
    </tr>
    <xsl:if test="ancestor::ReportContents/ChildReports/ChildReport[ChildReportId = $rwId]">
        <xsl:apply-templates select="ancestor::ReportContents/ChildReports/ChildReport[ChildReportId = $rwId]/PRIMEReport/ReportContents/Table" mode="ChildReport">
            <xsl:with-param name="treeDepth" select="$treeDepth +1" />
        </xsl:apply-templates>
    </xsl:if>
    <xsl:apply-templates select="Rows/Row">
        <xsl:with-param name="treeDepth" select="$treeDepth + 1" />
        <xsl:with-param name="colorStep" select="$colorStep" />
    </xsl:apply-templates>
</xsl:template>

<xsl:template match="Cell">
    <xsl:param name = "colorStep"/>
    <td>
         
         <xsl:choose>   
            
            <xsl:when test="Appearance">
                <xsl:attribute name="style">
                
                         <xsl:choose>     
                            <xsl:when test="Appearance/BkgColor">
                                    background-color: <!--rgb( 0, 255 ,255 )-->
                                        <xsl:call-template name="rgbfromint">
                                            <xsl:with-param name="rgbintval" select="Appearance/BkgColor"/>  
                                         </xsl:call-template>
                                         
                            </xsl:when>
                            <xsl:otherwise>
                                background-color: white
                            </xsl:otherwise>
                         </xsl:choose>    
                         
                        <xsl:choose>   
                            <xsl:when test="Appearance/TextColor">
                                    ;color: <!--rgb( 255, 0 ,255 )-->
                                           <xsl:call-template name="rgbfromint">
                                            <xsl:with-param name="rgbintval" select="Appearance/TextColor"/>  
                                         </xsl:call-template>
                            </xsl:when>
                            <xsl:otherwise>
                               ;color: black
                            </xsl:otherwise>
                        </xsl:choose>   
                
                </xsl:attribute>   
            </xsl:when>
            
            <xsl:otherwise>
                <xsl:if test="DefaultData and $colorStep > 0 and string(number(DefaultData)) !='NaN'">
                        <xsl:attribute name="style">background-color:
                                <xsl:call-template name="color">
                                        <xsl:with-param name="colorStep" select="$colorStep"/>
                                        <xsl:with-param name="value" select="DefaultData"/>
                                        
                                </xsl:call-template>
                        </xsl:attribute>
                </xsl:if>
            </xsl:otherwise>
            
        </xsl:choose>
        <xsl:choose>
                <xsl:when test="ValueType and DefaultData">
                        <acronym>
                                <xsl:attribute name="title">
                                        <xsl:value-of select="DefaultData"/>
                                </xsl:attribute>
                        <xsl:call-template name="CellData" />
                        </acronym>
                </xsl:when>
                <xsl:otherwise>
                        <xsl:call-template name="CellData" />
                </xsl:otherwise>
        </xsl:choose>
    </td>
</xsl:template>

<xsl:template name="CellData">
        <xsl:choose>
             
            <xsl:when test="FormattedData">
                <xsl:value-of select="FormattedData"/>
            </xsl:when>
            <xsl:when test="RawData">
                <xsl:choose>
                    <xsl:when test ="contains(RawData, 'http:') or contains(RawData, 'https:')">
                        <xsl:value-of select="RawData " disable-output-escaping="yes"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="RawData"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:when test="DefaultData">
                <xsl:choose>
                        <xsl:when test="ValueType">
                                <xsl:text>#</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                                <xsl:value-of select="DefaultData"/>
                        </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                  <xsl:message terminate="yes"><xsl:text>No dataformat turned on</xsl:text></xsl:message>
            </xsl:otherwise>
            
        </xsl:choose>
</xsl:template>

<xsl:template match="Settings">
    <table border="1px solid black">
    <tr border="1px solid black">
        <xsl:for-each select="Groups/Group">
            <xsl:if test="Label = 'Profit/Loss'">
                <tr class="tblhdr" border="1px solid black">
                <xsl:for-each select="Column">
                    <td class="row" width="{$cellWidth}" style="background-color : #ecf576"><b>
                    <xsl:choose>
                        <xsl:when test="Label != ''">
                            <xsl:value-of select="Label"/>
                        </xsl:when>
                        <xsl:otherwise>
                             <xsl:value-of select="ColumnId"/>
                        </xsl:otherwise>
                    </xsl:choose>
                    </b></td>
                </xsl:for-each>
                </tr>
                <tr class="row" depth="1" border="1px solid black">
                <xsl:for-each select="Cell">
                    <td class="cell1">
                        <xsl:call-template name="CellData" />
                    </td>
                </xsl:for-each>
                </tr>

            </xsl:if>
        </xsl:for-each>
        </tr>
    </table>
    <p/><p/>
</xsl:template>

<xsl:template match="/">
    <html>
        <head>
        <xsl:if test="$autoupdate = '1'">
                <meta http-equiv="REFRESH" content="10"></meta>
        </xsl:if>
        </head>
        <insertcss/>
        <body>
         <p class="headerImage">
            <headerImage/>
        </p>
        <xsl:if test="$clickable = '1'">
                <xsl:attribute name="onload">init()</xsl:attribute>
                <script src="portfolio_report.js" type="text/javascript"></script>
        </xsl:if>
        
        <xsl:for-each select="/MultiReport/PRIMEReport|/PRIMEReport">
        <p>Kepada &nbsp; :</p>
        <p>Dari &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; : Treasury dan Cash Operation Departement</p>
        <p>Perihal &nbsp; &nbsp; : Persetujuan Eksekusi Transaksi>eqv IDR 500 Milyar </p>
        <p>Tanggal &nbsp; &nbsp;: <xsl:value-of select="substring(LocalTime,1,10)"/></p>
        </xsl:for-each>
        <table>
          <tr>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <th style="background-color : #ecf576; border: 1px solid black">Prepare By</th>
            <th style="background-color : #ecf576; border: 1px solid black">Review By</th>
          </tr>
          <tr>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td style="border: 1px solid black"></td>
            <td style="border: 1px solid black"></td>
          </tr>
          <tr>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td style="border: 1px solid black"></td>
            <td style="border: 1px solid black"></td>
          </tr>
        </table>
        <br></br>

        <!-- Table of contents, only viewed if more than one report -->
        
        <!-- 
            <xsl:if test="/MultiReport">
                <xsl:for-each select="/MultiReport/PRIMEReport">
                    <xsl:value-of select="Type"/>
                    <xsl:value-of select="Name"/>
                    <xsl:value-of select="concat(substring(LocalTime,1,10),' ',substring(LocalTime,12,8),' (UTC', substring(LocalTime,20,6),')')"/>
                </xsl:for-each>
            </xsl:if>
        -->

        <!-- Reports -->
        
        
        <xsl:for-each select="/MultiReport/PRIMEReport|/PRIMEReport">
            <!--<h3>
                <xsl:value-of select="Type"/>:&nbsp;
                <xsl:value-of select="Name"/>&nbsp;
                <xsl:value-of select="concat(substring(LocalTime,1,10),' ',substring(LocalTime,12,8),' (UTC', substring(LocalTime,20,6),')')"/> 
             </h3>-->
            <xsl:apply-templates select="current()/ReportContents[last()]"/>
        </xsl:for-each>
        
        </body>
    </html>
</xsl:template>

<!-- derived from http://www.exslt.org/math/functions/max/index.html -->
<xsl:template name="max">
   <xsl:param name="nodes" select="/.." />
   <xsl:choose>
      <xsl:when test="not($nodes)">0</xsl:when>
      <xsl:otherwise>
         <xsl:for-each select="$nodes">
            <xsl:sort select="translate(.,'-','')" data-type="number" order="descending" />
            <xsl:if test="position( ) = 1">
               <xsl:value-of select="number(translate(.,'-',''))" />
            </xsl:if>
         </xsl:for-each>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

<xsl:template name="color">
   <xsl:param name="value"/>
   <xsl:param name = "colorStep"/>
   <xsl:variable name="rgbval">
       <xsl:choose>
          <xsl:when test="$value > 0" >
            <xsl:value-of select="255 - round($value div $colorStep)"/>
        </xsl:when>
        <xsl:otherwise>
            <xsl:value-of select="255 - round($value div $colorStep * -1)"/>
        </xsl:otherwise>
       </xsl:choose>

   </xsl:variable>
   <xsl:choose>
        <xsl:when test="$value > 0 and $rgbval &lt; 0">
            <xsl:text>rgb(255,0,0)</xsl:text>
            </xsl:when>
        <xsl:when test="$value &lt; 0 and $rgbval &lt; 0">
            <xsl:text>rgb(0,255,0)</xsl:text>
            </xsl:when>
        <xsl:when test="$value > 0">
            <xsl:value-of select="concat('rgb(',$rgbval,',255,',$rgbval,')')"/>
            </xsl:when>
      <xsl:otherwise>
            <xsl:value-of select="concat('rgb(255,',$rgbval,',',$rgbval,')')"/>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

<xsl:template name="rgbfromint">
        <xsl:param name="rgbintval"/>
        
        <xsl:variable name="redval">
                <xsl:value-of select="$rgbintval mod 256"/>
        </xsl:variable>
        <xsl:variable name="newvalue">
                <xsl:value-of select="floor($rgbintval div 256)"/>
        </xsl:variable>
        <xsl:variable name="greenval">
                <xsl:value-of select="$newvalue mod 256"/>
        </xsl:variable>
        <xsl:variable name="blueval">
                <xsl:value-of select="floor($newvalue div 256)"/>
        </xsl:variable>
        
        <xsl:value-of select="concat( 'rgb(',  $redval,  ',',   $greenval,    ',',   $blueval,  ')'    )"/>
        
        
</xsl:template>

</xsl:stylesheet>

...

  BM_BackOfficeReport(BO33:RekonsiliasiPajak)
<?xml version='1.0'?>
<!-- &copy; Copyright 2011 SunGard FRONT ARENA
       FStandardTemplate is able to produce colored output for RiskMatrixSheets when DefaultData is turned on
       Added support for Transhist output
-->
<!DOCTYPE xsl:stylesheet [
    <!ENTITY nbsp "<xsl:text>&#160;</xsl:text>">
]>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:param name="clickable" select="0"/>
<xsl:param name="autoupdate" select="0"/>
<xsl:output method="html"/>
<xsl:variable name="cellWidth" select="80"/>
<xsl:variable name="rowHeaderWidth" select="250"/>
<xsl:variable name="useLabelColumn" select="//PRIMEReport/Type !='ASQL Table'"/>

<xsl:template name="PrintSpaces">
  <xsl:param name="n" select="0"/>
  <xsl:if test="$n > 0">
    <xsl:call-template name="PrintSpaces">
      <xsl:with-param name="n" select="$n - 1" />
    </xsl:call-template>
    &nbsp;
  </xsl:if>
</xsl:template>

<xsl:template match="ReportContents">
     <xsl:apply-templates select="Table"/>
</xsl:template>

<xsl:template match="Table">
    
    <xsl:variable name="numberOfColumns" select="NumberOfColumns"/>
    <tr class="tblhdr" depth="{$treeDepth}" border="1px solid black">
       <xsl:if test="$useLabelColumn">
        <td width="{$rowHeaderWidth}">
            <xsl:call-template name="PrintSpaces">
                <xsl:with-param name="n" select="($treeDepth -1) * 6"/>
            </xsl:call-template>
        <img src="report_plus.gif" />&nbsp;</td>
        </xsl:if>
        <xsl:for-each select="Columns/Column">
            <xsl:choose>
            <xsl:when test="TemplateId != ''">
                <td width="{$cellWidth * 2}" style="background-color : #ecf576"><b>
                <xsl:value-of select="TemplateId"/><br />
                <xsl:value-of select="Label"/>
                </b></td>
            </xsl:when>
            <xsl:otherwise>
                <td width="{$cellWidth}" style="background-color : #ecf576"><b><xsl:value-of select="Label"/></b></td>
            </xsl:otherwise>
            </xsl:choose>
        </xsl:for-each>
    </tr>
    <xsl:apply-templates select="Rows/Row">
        <xsl:with-param name="treeDepth" select="$treeDepth"/>
        <xsl:with-param name="colorStep" select="0"/>
    </xsl:apply-templates>
</xsl:template>

<xsl:template match="Table">
    
    <xsl:variable name="numberOfColumns" select="NumberOfColumns"/>

    <xsl:variable name="colorStep" >
        <xsl:choose>
                <xsl:when test="(Type = 'RiskMatrixSheet') and current()//DefaultData">
                    <xsl:variable name="maxvalue">
                        <xsl:call-template name="max">
                                <xsl:with-param name="nodes" select="current()//DefaultData"/>
                        </xsl:call-template>
                    </xsl:variable>
                    <xsl:value-of select="$maxvalue div 255" ></xsl:value-of>
                </xsl:when>
                <xsl:otherwise>0</xsl:otherwise>
        </xsl:choose>
    </xsl:variable>

    <table width="{$numberOfColumns * ($cellWidth + 4) + $rowHeaderWidth + 6}" border="1px solid black">
        <tr class="tblhdr" border="1px solid black">
           <xsl:if test="$useLabelColumn">
            <td width="{$rowHeaderWidth}">&nbsp;</td>
            </xsl:if>
            <xsl:for-each select="Columns/Column">
                <xsl:choose>
                <xsl:when test="TemplateId != ''">
                    <td width="{$cellWidth * 2}" style="background-color : #ecf576"><b>
                    <xsl:value-of select="TemplateId"/><br />
                    <xsl:value-of select="Label"/>
                    </b></td>
                </xsl:when>
                <xsl:otherwise>
                    <td width="{$cellWidth}" style="background-color : #ecf576"><b><xsl:value-of select="Label"/></b></td>
                </xsl:otherwise>
                </xsl:choose>
            </xsl:for-each>
        </tr>
        <xsl:apply-templates select="Rows/Row">
            <xsl:with-param name="treeDepth" select="1"/>
            <xsl:with-param name="colorStep" select="$colorStep"/>
        </xsl:apply-templates>
    </table>
    <p/><p/>
</xsl:template>

<xsl:template match="Row">
    <xsl:param name = "treeDepth"/>
    <xsl:param name = "colorStep"/>
    <xsl:variable name="rwId" select="RowId"/>
    <tr class="{concat('cell', $treeDepth)}" depth="{$treeDepth}" border="1px solid black">
        <xsl:if test="$useLabelColumn">
                <td class="row">
                <xsl:call-template name="PrintSpaces">
                        <xsl:with-param name="n" select="($treeDepth - 1) * 6"/>
                </xsl:call-template>
                <xsl:if test="$clickable = '1'">
                        <img src="report_plus.gif"/>
                </xsl:if>
                <xsl:value-of select="Label"/>
                </td>
        </xsl:if>
    <xsl:apply-templates select="Cells/Cell">
        <xsl:with-param name="colorStep" select="$colorStep" />
    </xsl:apply-templates>
    </tr>
    <xsl:if test="ancestor::ReportContents/ChildReports/ChildReport[ChildReportId = $rwId]">
        <xsl:apply-templates select="ancestor::ReportContents/ChildReports/ChildReport[ChildReportId = $rwId]/PRIMEReport/ReportContents/Table" mode="ChildReport">
            <xsl:with-param name="treeDepth" select="$treeDepth +1" />
        </xsl:apply-templates>
    </xsl:if>
    <xsl:apply-templates select="Rows/Row">
        <xsl:with-param name="treeDepth" select="$treeDepth + 1" />
        <xsl:with-param name="colorStep" select="$colorStep" />
    </xsl:apply-templates>
</xsl:template>

<xsl:template match="Cell">
    <xsl:param name = "colorStep"/>
    <td>
         
         <xsl:choose>   
            
            <xsl:when test="Appearance">
                <xsl:attribute name="style">
                
                         <xsl:choose>     
                            <xsl:when test="Appearance/BkgColor">
                                    background-color: <!--rgb( 0, 255 ,255 )-->
                                        <xsl:call-template name="rgbfromint">
                                            <xsl:with-param name="rgbintval" select="Appearance/BkgColor"/>  
                                         </xsl:call-template>
                                         
                            </xsl:when>
                            <xsl:otherwise>
                                background-color: white
                            </xsl:otherwise>
                         </xsl:choose>    
                         
                        <xsl:choose>   
                            <xsl:when test="Appearance/TextColor">
                                    ;color: <!--rgb( 255, 0 ,255 )-->
                                           <xsl:call-template name="rgbfromint">
                                            <xsl:with-param name="rgbintval" select="Appearance/TextColor"/>  
                                         </xsl:call-template>
                            </xsl:when>
                            <xsl:otherwise>
                               ;color: black
                            </xsl:otherwise>
                        </xsl:choose>   
                
                </xsl:attribute>   
            </xsl:when>
            
            <xsl:otherwise>
                <xsl:if test="DefaultData and $colorStep > 0 and string(number(DefaultData)) !='NaN'">
                        <xsl:attribute name="style">background-color:
                                <xsl:call-template name="color">
                                        <xsl:with-param name="colorStep" select="$colorStep"/>
                                        <xsl:with-param name="value" select="DefaultData"/>
                                        
                                </xsl:call-template>
                        </xsl:attribute>
                </xsl:if>
            </xsl:otherwise>
            
        </xsl:choose>
        <xsl:choose>
                <xsl:when test="ValueType and DefaultData">
                        <acronym>
                                <xsl:attribute name="title">
                                        <xsl:value-of select="DefaultData"/>
                                </xsl:attribute>
                        <xsl:call-template name="CellData" />
                        </acronym>
                </xsl:when>
                <xsl:otherwise>
                        <xsl:call-template name="CellData" />
                </xsl:otherwise>
        </xsl:choose>
    </td>
</xsl:template>

<xsl:template name="CellData">
        <xsl:choose>
             
            <xsl:when test="FormattedData">
                <xsl:value-of select="FormattedData"/>
            </xsl:when>
            <xsl:when test="RawData">
                <xsl:choose>
                    <xsl:when test ="contains(RawData, 'http:') or contains(RawData, 'https:')">
                        <xsl:value-of select="RawData " disable-output-escaping="yes"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="RawData"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:when test="DefaultData">
                <xsl:choose>
                        <xsl:when test="ValueType">
                                <xsl:text>#</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                                <xsl:value-of select="DefaultData"/>
                        </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                  <xsl:message terminate="yes"><xsl:text>No dataformat turned on</xsl:text></xsl:message>
            </xsl:otherwise>
            
        </xsl:choose>
</xsl:template>

<xsl:template match="Settings">
    <table border="1px solid black">
    <tr border="1px solid black">
        <xsl:for-each select="Groups/Group">
            <xsl:if test="Label = 'Profit/Loss'">
                <tr class="tblhdr" border="1px solid black">
                <xsl:for-each select="Column">
                    <td class="row" width="{$cellWidth}" style="background-color : #ecf576"><b>
                    <xsl:choose>
                        <xsl:when test="Label != ''">
                            <xsl:value-of select="Label"/>
                        </xsl:when>
                        <xsl:otherwise>
                             <xsl:value-of select="ColumnId"/>
                        </xsl:otherwise>
                    </xsl:choose>
                    </b></td>
                </xsl:for-each>
                </tr>
                <tr class="row" depth="1" border="1px solid black">
                <xsl:for-each select="Cell">
                    <td class="cell1">
                        <xsl:call-template name="CellData" />
                    </td>
                </xsl:for-each>
                </tr>

            </xsl:if>
        </xsl:for-each>
        </tr>
    </table>
    <p/><p/>
</xsl:template>

<xsl:template match="/">
    <html>
        <head>
        <xsl:if test="$autoupdate = '1'">
                <meta http-equiv="REFRESH" content="10"></meta>
        </xsl:if>
        </head>
        <insertcss/>
        <body>
         <p class="headerImage">
            <headerImage/>
        </p>
        <xsl:if test="$clickable = '1'">
                <xsl:attribute name="onload">init()</xsl:attribute>
                <script src="portfolio_report.js" type="text/javascript"></script>
        </xsl:if>
        
        
        <br></br>

        <!-- Table of contents, only viewed if more than one report -->
        
            <xsl:if test="/MultiReport">
                <xsl:for-each select="/MultiReport/PRIMEReport">
                    <xsl:value-of select="Type"/>
                    <xsl:value-of select="Name"/>
                    <xsl:value-of select="substring(LocalTime,1,10)"/>
                </xsl:for-each>
            </xsl:if>
        
        
        <xsl:for-each select="/MultiReport/PRIMEReport|/PRIMEReport">
            <h3>
                <xsl:value-of select="Type"/>:&nbsp;
                <xsl:value-of select="Name"/>&nbsp;
                <xsl:value-of select="substring(LocalTime,1,10)"/> 
             </h3>
            <xsl:apply-templates select="current()/ReportContents[last()]"/>
        </xsl:for-each>
        
        <table>
          <tr>
            <th style="background-color : #ecf576; border: 1px solid black">Prepare By</th>
            <th style="background-color : #ecf576; border: 1px solid black">Review By</th>
            <th style="background-color : #ecf576; border: 1px solid black">Accepted By</th>
          </tr>
          <tr>
            <td style="border: 1px solid black"></td>
            <td style="border: 1px solid black"></td>
            <td style="border: 1px solid black"></td>
          </tr>
          <tr>
            <td style="border: 1px solid black"></td>
            <td style="border: 1px solid black"></td>
            <td style="border: 1px solid black"></td>
          </tr>
        </table>
        
        <xsl:for-each select="/MultiReport/PRIMEReport|/PRIMEReport">
    
        </xsl:for-each>
        </body>
    </html>
</xsl:template>

<!-- derived from http://www.exslt.org/math/functions/max/index.html -->
<xsl:template name="max">
   <xsl:param name="nodes" select="/.." />
   <xsl:choose>
      <xsl:when test="not($nodes)">0</xsl:when>
      <xsl:otherwise>
         <xsl:for-each select="$nodes">
            <xsl:sort select="translate(.,'-','')" data-type="number" order="descending" />
            <xsl:if test="position( ) = 1">
               <xsl:value-of select="number(translate(.,'-',''))" />
            </xsl:if>
         </xsl:for-each>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

<xsl:template name="color">
   <xsl:param name="value"/>
   <xsl:param name = "colorStep"/>
   <xsl:variable name="rgbval">
       <xsl:choose>
          <xsl:when test="$value > 0" >
            <xsl:value-of select="255 - round($value div $colorStep)"/>
        </xsl:when>
        <xsl:otherwise>
            <xsl:value-of select="255 - round($value div $colorStep * -1)"/>
        </xsl:otherwise>
       </xsl:choose>

   </xsl:variable>
   <xsl:choose>
        <xsl:when test="$value > 0 and $rgbval &lt; 0">
            <xsl:text>rgb(255,0,0)</xsl:text>
            </xsl:when>
        <xsl:when test="$value &lt; 0 and $rgbval &lt; 0">
            <xsl:text>rgb(0,255,0)</xsl:text>
            </xsl:when>
        <xsl:when test="$value > 0">
            <xsl:value-of select="concat('rgb(',$rgbval,',255,',$rgbval,')')"/>
            </xsl:when>
      <xsl:otherwise>
            <xsl:value-of select="concat('rgb(255,',$rgbval,',',$rgbval,')')"/>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

<xsl:template name="rgbfromint">
        <xsl:param name="rgbintval"/>
        
        <xsl:variable name="redval">
                <xsl:value-of select="$rgbintval mod 256"/>
        </xsl:variable>
        <xsl:variable name="newvalue">
                <xsl:value-of select="floor($rgbintval div 256)"/>
        </xsl:variable>
        <xsl:variable name="greenval">
                <xsl:value-of select="$newvalue mod 256"/>
        </xsl:variable>
        <xsl:variable name="blueval">
                <xsl:value-of select="floor($newvalue div 256)"/>
        </xsl:variable>
        
        <xsl:value-of select="concat( 'rgb(',  $redval,  ',',   $greenval,    ',',   $blueval,  ')'    )"/>
        
        
</xsl:template>

</xsl:stylesheet>

...

  BM_BackOfficeReport(BO40-BO41:Streamline)
<?xml version='1.0'?>
<!-- &copy; Copyright 2011 SunGard FRONT ARENA
       FStandardTemplate is able to produce colored output for RiskMatrixSheets when DefaultData is turned on
       Added support for Transhist output
-->
<!DOCTYPE xsl:stylesheet [
    <!ENTITY nbsp "<xsl:text>&#160;</xsl:text>">
]>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:param name="clickable" select="0"/>
<xsl:param name="autoupdate" select="0"/>
<xsl:output method="html"/>
<xsl:variable name="cellWidth" select="80"/>
<xsl:variable name="rowHeaderWidth" select="250"/>
<xsl:variable name="useLabelColumn" select="//PRIMEReport/Type !='ASQL Table'"/>

<xsl:template name="PrintSpaces">
  <xsl:param name="n" select="0"/>
  <xsl:if test="$n > 0">
    <xsl:call-template name="PrintSpaces">
      <xsl:with-param name="n" select="$n - 1" />
    </xsl:call-template>
    &nbsp;
  </xsl:if>
</xsl:template>

<xsl:template match="ReportContents">
     <xsl:apply-templates select="Table"/>
</xsl:template>

<xsl:template match="Table">
    
    <xsl:variable name="numberOfColumns" select="NumberOfColumns"/>
    <tr class="tblhdr" depth="{$treeDepth}" border="1px solid black">
       <xsl:if test="$useLabelColumn">
        <td width="{$rowHeaderWidth}">
            <xsl:call-template name="PrintSpaces">
                <xsl:with-param name="n" select="($treeDepth -1) * 6"/>
            </xsl:call-template>
        <img src="report_plus.gif" />&nbsp;</td>
        </xsl:if>
        <xsl:for-each select="Columns/Column">
            <xsl:choose>
            <xsl:when test="TemplateId != ''">
                <td width="{$cellWidth * 2}" style="background-color : #ecf576"><b>
                <xsl:value-of select="TemplateId"/><br />
                <xsl:value-of select="Label"/>
                </b></td>
            </xsl:when>
            <xsl:otherwise>
                <td width="{$cellWidth}" style="background-color : #ecf576"><b><xsl:value-of select="Label"/></b></td>
            </xsl:otherwise>
            </xsl:choose>
        </xsl:for-each>
    </tr>
    <xsl:apply-templates select="Rows/Row">
        <xsl:with-param name="treeDepth" select="$treeDepth"/>
        <xsl:with-param name="colorStep" select="0"/>
    </xsl:apply-templates>
</xsl:template>

<xsl:template match="Table">
    
    <xsl:variable name="numberOfColumns" select="NumberOfColumns"/>

    <xsl:variable name="colorStep" >
        <xsl:choose>
                <xsl:when test="(Type = 'RiskMatrixSheet') and current()//DefaultData">
                    <xsl:variable name="maxvalue">
                        <xsl:call-template name="max">
                                <xsl:with-param name="nodes" select="current()//DefaultData"/>
                        </xsl:call-template>
                    </xsl:variable>
                    <xsl:value-of select="$maxvalue div 255" ></xsl:value-of>
                </xsl:when>
                <xsl:otherwise>0</xsl:otherwise>
        </xsl:choose>
    </xsl:variable>

    <table width="{$numberOfColumns * ($cellWidth + 4) + $rowHeaderWidth + 6}" border="1px solid black">
        <tr class="tblhdr" border="1px solid black">
           <xsl:if test="$useLabelColumn">
            <td width="{$rowHeaderWidth}">&nbsp;</td>
            </xsl:if>
            <xsl:for-each select="Columns/Column">
                <xsl:choose>
                <xsl:when test="TemplateId != ''">
                    <td width="{$cellWidth * 2}" style="background-color : #ecf576"><b>
                    <xsl:value-of select="TemplateId"/><br />
                    <xsl:value-of select="Label"/>
                    </b></td>
                </xsl:when>
                <xsl:otherwise>
                    <td width="{$cellWidth}" style="background-color : #ecf576"><b><xsl:value-of select="Label"/></b></td>
                </xsl:otherwise>
                </xsl:choose>
            </xsl:for-each>
        </tr>
        <xsl:apply-templates select="Rows/Row">
            <xsl:with-param name="treeDepth" select="1"/>
            <xsl:with-param name="colorStep" select="$colorStep"/>
        </xsl:apply-templates>
    </table>
    <p/><p/>
</xsl:template>

<xsl:template match="Row">
    <xsl:param name = "treeDepth"/>
    <xsl:param name = "colorStep"/>
    <xsl:variable name="rwId" select="RowId"/>
    <tr class="{concat('cell', $treeDepth)}" depth="{$treeDepth}" border="1px solid black">
        <xsl:if test="$useLabelColumn">
                <td class="row">
                <xsl:call-template name="PrintSpaces">
                        <xsl:with-param name="n" select="($treeDepth - 1) * 6"/>
                </xsl:call-template>
                <xsl:if test="$clickable = '1'">
                        <img src="report_plus.gif"/>
                </xsl:if>
                <xsl:value-of select="Label"/>
                </td>
        </xsl:if>
    <xsl:apply-templates select="Cells/Cell">
        <xsl:with-param name="colorStep" select="$colorStep" />
    </xsl:apply-templates>
    </tr>
    <xsl:if test="ancestor::ReportContents/ChildReports/ChildReport[ChildReportId = $rwId]">
        <xsl:apply-templates select="ancestor::ReportContents/ChildReports/ChildReport[ChildReportId = $rwId]/PRIMEReport/ReportContents/Table" mode="ChildReport">
            <xsl:with-param name="treeDepth" select="$treeDepth +1" />
        </xsl:apply-templates>
    </xsl:if>
    <xsl:apply-templates select="Rows/Row">
        <xsl:with-param name="treeDepth" select="$treeDepth + 1" />
        <xsl:with-param name="colorStep" select="$colorStep" />
    </xsl:apply-templates>
</xsl:template>

<xsl:template match="Cell">
    <xsl:param name = "colorStep"/>
    <td>
         
         <xsl:choose>   
            
            <xsl:when test="Appearance">
                <xsl:attribute name="style">
                
                         <xsl:choose>     
                            <xsl:when test="Appearance/BkgColor">
                                    background-color: <!--rgb( 0, 255 ,255 )-->
                                        <xsl:call-template name="rgbfromint">
                                            <xsl:with-param name="rgbintval" select="Appearance/BkgColor"/>  
                                         </xsl:call-template>
                                         
                            </xsl:when>
                            <xsl:otherwise>
                                background-color: white
                            </xsl:otherwise>
                         </xsl:choose>    
                         
                        <xsl:choose>   
                            <xsl:when test="Appearance/TextColor">
                                    ;color: <!--rgb( 255, 0 ,255 )-->
                                           <xsl:call-template name="rgbfromint">
                                            <xsl:with-param name="rgbintval" select="Appearance/TextColor"/>  
                                         </xsl:call-template>
                            </xsl:when>
                            <xsl:otherwise>
                               ;color: black
                            </xsl:otherwise>
                        </xsl:choose>   
                
                </xsl:attribute>   
            </xsl:when>
            
            <xsl:otherwise>
                <xsl:if test="DefaultData and $colorStep > 0 and string(number(DefaultData)) !='NaN'">
                        <xsl:attribute name="style">background-color:
                                <xsl:call-template name="color">
                                        <xsl:with-param name="colorStep" select="$colorStep"/>
                                        <xsl:with-param name="value" select="DefaultData"/>
                                        
                                </xsl:call-template>
                        </xsl:attribute>
                </xsl:if>
            </xsl:otherwise>
            
        </xsl:choose>
        <xsl:choose>
                <xsl:when test="ValueType and DefaultData">
                        <acronym>
                                <xsl:attribute name="title">
                                        <xsl:value-of select="DefaultData"/>
                                </xsl:attribute>
                        <xsl:call-template name="CellData" />
                        </acronym>
                </xsl:when>
                <xsl:otherwise>
                        <xsl:call-template name="CellData" />
                </xsl:otherwise>
        </xsl:choose>
    </td>
</xsl:template>

<xsl:template name="CellData">
        <xsl:choose>
             
            <xsl:when test="FormattedData">
                <xsl:value-of select="FormattedData"/>
            </xsl:when>
            <xsl:when test="RawData">
                <xsl:choose>
                    <xsl:when test ="contains(RawData, 'http:') or contains(RawData, 'https:')">
                        <xsl:value-of select="RawData " disable-output-escaping="yes"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="RawData"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:when test="DefaultData">
                <xsl:choose>
                        <xsl:when test="ValueType">
                                <xsl:text>#</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                                <xsl:value-of select="DefaultData"/>
                        </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                  <xsl:message terminate="yes"><xsl:text>No dataformat turned on</xsl:text></xsl:message>
            </xsl:otherwise>
            
        </xsl:choose>
</xsl:template>

<xsl:template match="Settings">
    <table border="1px solid black">
    <tr border="1px solid black">
        <xsl:for-each select="Groups/Group">
            <xsl:if test="Label = 'Profit/Loss'">
                <tr class="tblhdr" border="1px solid black">
                <xsl:for-each select="Column">
                    <td class="row" width="{$cellWidth}" style="background-color : #ecf576"><b>
                    <xsl:choose>
                        <xsl:when test="Label != ''">
                            <xsl:value-of select="Label"/>
                        </xsl:when>
                        <xsl:otherwise>
                             <xsl:value-of select="ColumnId"/>
                        </xsl:otherwise>
                    </xsl:choose>
                    </b></td>
                </xsl:for-each>
                </tr>
                <tr class="row" depth="1" border="1px solid black">
                <xsl:for-each select="Cell">
                    <td class="cell1">
                        <xsl:call-template name="CellData" />
                    </td>
                </xsl:for-each>
                </tr>

            </xsl:if>
        </xsl:for-each>
        </tr>
    </table>
    <p/><p/>
</xsl:template>

<xsl:template match="/">
    <html>
        <head>
        <xsl:if test="$autoupdate = '1'">
                <meta http-equiv="REFRESH" content="10"></meta>
        </xsl:if>
        </head>
        <insertcss/>
        <body>
         <p class="headerImage">
            <headerImage/>
        </p>
        <xsl:if test="$clickable = '1'">
                <xsl:attribute name="onload">init()</xsl:attribute>
                <script src="portfolio_report.js" type="text/javascript"></script>
        </xsl:if>
        
        
        <br></br>

        <!-- Table of contents, only viewed if more than one report -->
        
            <xsl:if test="/MultiReport">
                <xsl:for-each select="/MultiReport/PRIMEReport">
                    <xsl:value-of select="Type"/>
                    <xsl:value-of select="Name"/>
                    <xsl:value-of select="substring(LocalTime,1,10)"/>
                </xsl:for-each>
            </xsl:if>
        
        
        <xsl:for-each select="/MultiReport/PRIMEReport|/PRIMEReport">
            <h3>
                <xsl:value-of select="Type"/>:&nbsp;
                <xsl:value-of select="Name"/>&nbsp;
                <xsl:value-of select="substring(LocalTime,1,10)"/> 
             </h3>
            <xsl:apply-templates select="current()/ReportContents[last()]"/>
        </xsl:for-each>
        
        <h5>
        <p>NOTES:</p>
        <p>SP &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;STRUCTURE PRODUCT<br></br>MCS &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; MANDIRI CALL SPREAD<br></br>DL &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; DEPOSIT LOAN<br></br>REASON &nbsp; &nbsp; &nbsp; &nbsp;Reason for payment if there is message error/pending/process from payment system<br></br>APPROVAL &nbsp; Approval payment on FA (it can be user FA/STP by system)</p>
        </h5>
        
        <p></p>
        
        <h5><p>GENERATE REPORT JAM 18.00<br></br>KRITERIA YANG DITAMPILKAN DI REPORT</p>
        <p>a.All Product<br></br>b. show result for payment and incoming fund h+1 value date /maturity date from IRS rekons result<br></br>c. report can filtering per trade id, settlement ID, product, product type, customer, ccy, valuta date/maturity, trade date, system, approval (All Field)<br></br>d. report on demand (back dated)</p></h5>
        
        <xsl:for-each select="/MultiReport/PRIMEReport|/PRIMEReport">
    
        </xsl:for-each>
        </body>
    </html>
</xsl:template>

<!-- derived from http://www.exslt.org/math/functions/max/index.html -->
<xsl:template name="max">
   <xsl:param name="nodes" select="/.." />
   <xsl:choose>
      <xsl:when test="not($nodes)">0</xsl:when>
      <xsl:otherwise>
         <xsl:for-each select="$nodes">
            <xsl:sort select="translate(.,'-','')" data-type="number" order="descending" />
            <xsl:if test="position( ) = 1">
               <xsl:value-of select="number(translate(.,'-',''))" />
            </xsl:if>
         </xsl:for-each>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

<xsl:template name="color">
   <xsl:param name="value"/>
   <xsl:param name = "colorStep"/>
   <xsl:variable name="rgbval">
       <xsl:choose>
          <xsl:when test="$value > 0" >
            <xsl:value-of select="255 - round($value div $colorStep)"/>
        </xsl:when>
        <xsl:otherwise>
            <xsl:value-of select="255 - round($value div $colorStep * -1)"/>
        </xsl:otherwise>
       </xsl:choose>

   </xsl:variable>
   <xsl:choose>
        <xsl:when test="$value > 0 and $rgbval &lt; 0">
            <xsl:text>rgb(255,0,0)</xsl:text>
            </xsl:when>
        <xsl:when test="$value &lt; 0 and $rgbval &lt; 0">
            <xsl:text>rgb(0,255,0)</xsl:text>
            </xsl:when>
        <xsl:when test="$value > 0">
            <xsl:value-of select="concat('rgb(',$rgbval,',255,',$rgbval,')')"/>
            </xsl:when>
      <xsl:otherwise>
            <xsl:value-of select="concat('rgb(255,',$rgbval,',',$rgbval,')')"/>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

<xsl:template name="rgbfromint">
        <xsl:param name="rgbintval"/>
        
        <xsl:variable name="redval">
                <xsl:value-of select="$rgbintval mod 256"/>
        </xsl:variable>
        <xsl:variable name="newvalue">
                <xsl:value-of select="floor($rgbintval div 256)"/>
        </xsl:variable>
        <xsl:variable name="greenval">
                <xsl:value-of select="$newvalue mod 256"/>
        </xsl:variable>
        <xsl:variable name="blueval">
                <xsl:value-of select="floor($newvalue div 256)"/>
        </xsl:variable>
        
        <xsl:value-of select="concat( 'rgb(',  $redval,  ',',   $greenval,    ',',   $blueval,  ')'    )"/>
        
        
</xsl:template>

</xsl:stylesheet>

...

  BM_BackOfficeReport(BO42:ListCoupon)
<?xml version='1.0'?>
<!-- &copy; Copyright 2011 SunGard FRONT ARENA
       FStandardTemplate is able to produce colored output for RiskMatrixSheets when DefaultData is turned on
       Added support for Transhist output
-->
<!DOCTYPE xsl:stylesheet [
    <!ENTITY nbsp "<xsl:text>&#160;</xsl:text>">
]>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:param name="clickable" select="0"/>
<xsl:param name="autoupdate" select="0"/>
<xsl:output method="html"/>
<xsl:variable name="cellWidth" select="80"/>
<xsl:variable name="rowHeaderWidth" select="250"/>
<xsl:variable name="useLabelColumn" select="//PRIMEReport/Type !='ASQL Table'"/>

<xsl:template name="PrintSpaces">
  <xsl:param name="n" select="0"/>
  <xsl:if test="$n > 0">
    <xsl:call-template name="PrintSpaces">
      <xsl:with-param name="n" select="$n - 1" />
    </xsl:call-template>
    &nbsp;
  </xsl:if>
</xsl:template>

<xsl:template match="ReportContents">
     <xsl:apply-templates select="Table"/>
</xsl:template>

<xsl:template match="Table">
    
    <xsl:variable name="numberOfColumns" select="NumberOfColumns"/>
    <tr class="tblhdr" depth="{$treeDepth}" border="1px solid black">
       <xsl:if test="$useLabelColumn">
        <td width="{$rowHeaderWidth}">
            <xsl:call-template name="PrintSpaces">
                <xsl:with-param name="n" select="($treeDepth -1) * 6"/>
            </xsl:call-template>
        <img src="report_plus.gif" />&nbsp;</td>
        </xsl:if>
        <xsl:for-each select="Columns/Column">
            <xsl:choose>
            <xsl:when test="TemplateId != ''">
                <td width="{$cellWidth * 2}" style="background-color : #ecf576"><b>
                <xsl:value-of select="TemplateId"/><br />
                <xsl:value-of select="Label"/>
                </b></td>
            </xsl:when>
            <xsl:otherwise>
                <td width="{$cellWidth}" style="background-color : #ecf576"><b><xsl:value-of select="Label"/></b></td>
            </xsl:otherwise>
            </xsl:choose>
        </xsl:for-each>
    </tr>
    <xsl:apply-templates select="Rows/Row">
        <xsl:with-param name="treeDepth" select="$treeDepth"/>
        <xsl:with-param name="colorStep" select="0"/>
    </xsl:apply-templates>
</xsl:template>

<xsl:template match="Table">
    
    <xsl:variable name="numberOfColumns" select="NumberOfColumns"/>

    <xsl:variable name="colorStep" >
        <xsl:choose>
                <xsl:when test="(Type = 'RiskMatrixSheet') and current()//DefaultData">
                    <xsl:variable name="maxvalue">
                        <xsl:call-template name="max">
                                <xsl:with-param name="nodes" select="current()//DefaultData"/>
                        </xsl:call-template>
                    </xsl:variable>
                    <xsl:value-of select="$maxvalue div 255" ></xsl:value-of>
                </xsl:when>
                <xsl:otherwise>0</xsl:otherwise>
        </xsl:choose>
    </xsl:variable>

    <table width="{$numberOfColumns * ($cellWidth + 4) + $rowHeaderWidth + 6}" border="1px solid black">
        <tr class="tblhdr" border="1px solid black">
           <xsl:if test="$useLabelColumn">
            <td width="{$rowHeaderWidth}">&nbsp;</td>
            </xsl:if>
            <xsl:for-each select="Columns/Column">
                <xsl:choose>
                <xsl:when test="TemplateId != ''">
                    <td width="{$cellWidth * 2}" style="background-color : #ecf576"><b>
                    <xsl:value-of select="TemplateId"/><br />
                    <xsl:value-of select="Label"/>
                    </b></td>
                </xsl:when>
                <xsl:otherwise>
                    <td width="{$cellWidth}" style="background-color : #ecf576"><b><xsl:value-of select="Label"/></b></td>
                </xsl:otherwise>
                </xsl:choose>
            </xsl:for-each>
        </tr>
        <xsl:apply-templates select="Rows/Row">
            <xsl:with-param name="treeDepth" select="1"/>
            <xsl:with-param name="colorStep" select="$colorStep"/>
        </xsl:apply-templates>
    </table>
    <p/><p/>
</xsl:template>

<xsl:template match="Row">
    <xsl:param name = "treeDepth"/>
    <xsl:param name = "colorStep"/>
    <xsl:variable name="rwId" select="RowId"/>
    <tr class="{concat('cell', $treeDepth)}" depth="{$treeDepth}" border="1px solid black">
        <xsl:if test="$useLabelColumn">
                <td class="row">
                <xsl:call-template name="PrintSpaces">
                        <xsl:with-param name="n" select="($treeDepth - 1) * 6"/>
                </xsl:call-template>
                <xsl:if test="$clickable = '1'">
                        <img src="report_plus.gif"/>
                </xsl:if>
                <xsl:value-of select="Label"/>
                </td>
        </xsl:if>
    <xsl:apply-templates select="Cells/Cell">
        <xsl:with-param name="colorStep" select="$colorStep" />
    </xsl:apply-templates>
    </tr>
    <xsl:if test="ancestor::ReportContents/ChildReports/ChildReport[ChildReportId = $rwId]">
        <xsl:apply-templates select="ancestor::ReportContents/ChildReports/ChildReport[ChildReportId = $rwId]/PRIMEReport/ReportContents/Table" mode="ChildReport">
            <xsl:with-param name="treeDepth" select="$treeDepth +1" />
        </xsl:apply-templates>
    </xsl:if>
    <xsl:apply-templates select="Rows/Row">
        <xsl:with-param name="treeDepth" select="$treeDepth + 1" />
        <xsl:with-param name="colorStep" select="$colorStep" />
    </xsl:apply-templates>
</xsl:template>

<xsl:template match="Cell">
    <xsl:param name = "colorStep"/>
    <td>
         
         <xsl:choose>   
            
            <xsl:when test="Appearance">
                <xsl:attribute name="style">
                
                         <xsl:choose>     
                            <xsl:when test="Appearance/BkgColor">
                                    background-color: <!--rgb( 0, 255 ,255 )-->
                                        <xsl:call-template name="rgbfromint">
                                            <xsl:with-param name="rgbintval" select="Appearance/BkgColor"/>  
                                         </xsl:call-template>
                                         
                            </xsl:when>
                            <xsl:otherwise>
                                background-color: white
                            </xsl:otherwise>
                         </xsl:choose>    
                         
                        <xsl:choose>   
                            <xsl:when test="Appearance/TextColor">
                                    ;color: <!--rgb( 255, 0 ,255 )-->
                                           <xsl:call-template name="rgbfromint">
                                            <xsl:with-param name="rgbintval" select="Appearance/TextColor"/>  
                                         </xsl:call-template>
                            </xsl:when>
                            <xsl:otherwise>
                               ;color: black
                            </xsl:otherwise>
                        </xsl:choose>   
                
                </xsl:attribute>   
            </xsl:when>
            
            <xsl:otherwise>
                <xsl:if test="DefaultData and $colorStep > 0 and string(number(DefaultData)) !='NaN'">
                        <xsl:attribute name="style">background-color:
                                <xsl:call-template name="color">
                                        <xsl:with-param name="colorStep" select="$colorStep"/>
                                        <xsl:with-param name="value" select="DefaultData"/>
                                        
                                </xsl:call-template>
                        </xsl:attribute>
                </xsl:if>
            </xsl:otherwise>
            
        </xsl:choose>
        <xsl:choose>
                <xsl:when test="ValueType and DefaultData">
                        <acronym>
                                <xsl:attribute name="title">
                                        <xsl:value-of select="DefaultData"/>
                                </xsl:attribute>
                        <xsl:call-template name="CellData" />
                        </acronym>
                </xsl:when>
                <xsl:otherwise>
                        <xsl:call-template name="CellData" />
                </xsl:otherwise>
        </xsl:choose>
    </td>
</xsl:template>

<xsl:template name="CellData">
        <xsl:choose>
             
            <xsl:when test="FormattedData">
                <xsl:value-of select="FormattedData"/>
            </xsl:when>
            <xsl:when test="RawData">
                <xsl:choose>
                    <xsl:when test ="contains(RawData, 'http:') or contains(RawData, 'https:')">
                        <xsl:value-of select="RawData " disable-output-escaping="yes"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="RawData"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:when test="DefaultData">
                <xsl:choose>
                        <xsl:when test="ValueType">
                                <xsl:text>#</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                                <xsl:value-of select="DefaultData"/>
                        </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                  <xsl:message terminate="yes"><xsl:text>No dataformat turned on</xsl:text></xsl:message>
            </xsl:otherwise>
            
        </xsl:choose>
</xsl:template>

<xsl:template match="Settings">
    <table border="1px solid black">
    <tr border="1px solid black">
        <xsl:for-each select="Groups/Group">
            <xsl:if test="Label = 'Profit/Loss'">
                <tr class="tblhdr" border="1px solid black">
                <xsl:for-each select="Column">
                    <td class="row" width="{$cellWidth}" style="background-color : #ecf576"><b>
                    <xsl:choose>
                        <xsl:when test="Label != ''">
                            <xsl:value-of select="Label"/>
                        </xsl:when>
                        <xsl:otherwise>
                             <xsl:value-of select="ColumnId"/>
                        </xsl:otherwise>
                    </xsl:choose>
                    </b></td>
                </xsl:for-each>
                </tr>
                <tr class="row" depth="1" border="1px solid black">
                <xsl:for-each select="Cell">
                    <td class="cell1">
                        <xsl:call-template name="CellData" />
                    </td>
                </xsl:for-each>
                </tr>

            </xsl:if>
        </xsl:for-each>
        </tr>
    </table>
    <p/><p/>
</xsl:template>

<xsl:template match="/">
    <html>
        <head>
        <xsl:if test="$autoupdate = '1'">
                <meta http-equiv="REFRESH" content="10"></meta>
        </xsl:if>
        </head>
        <insertcss/>
        <body>
         <p class="headerImage">
            <headerImage/>
        </p>
        <xsl:if test="$clickable = '1'">
                <xsl:attribute name="onload">init()</xsl:attribute>
                <script src="portfolio_report.js" type="text/javascript"></script>
        </xsl:if>

        <!-- Table of contents, only viewed if more than one report -->

        <xsl:if test="/MultiReport">
            <table>
                <xsl:for-each select="/MultiReport/PRIMEReport">
                        <tr><td>
                            <!--<td><xsl:value-of select="Type"/></td>-->
                            <td><xsl:value-of select="Name"/></td>
                             <p>
                                Pay|BMRI Issuing Bond  dan Recording Date
                            </p>
                            <p>
                                Received|BRI Hold Bond
                            </p>
                            <td><xsl:value-of select="substring(LocalTime,1,10)"/></td>
                        </td></tr>
               </xsl:for-each>
            </table>
        </xsl:if>

        <!-- Reports - ORIGINAL CODE-->
        <xsl:for-each select="/MultiReport/PRIMEReport|/PRIMEReport">
            <h3>
                <!--<xsl:value-of select="Type"/>:&nbsp;--><!--ORIGINAL LINE-->
                <xsl:value-of select="Name"/>&nbsp;
                <br><xsl:value-of select="substring(LocalTime,1,10)"/></br>
                <!--<xsl:value-of select="concat(substring(LocalTime,1,10),' ',substring(LocalTime,12,8),' (UTC', substring(LocalTime,20,6),')')"/>-->
             </h3>

             <xsl:apply-templates select="current()/ReportContents"/>
        </xsl:for-each>
        </body>
    </html>
</xsl:template>

<!-- derived from http://www.exslt.org/math/functions/max/index.html -->
<xsl:template name="max">
   <xsl:param name="nodes" select="/.." />
   <xsl:choose>
      <xsl:when test="not($nodes)">0</xsl:when>
      <xsl:otherwise>
         <xsl:for-each select="$nodes">
            <xsl:sort select="translate(.,'-','')" data-type="number" order="descending" />
            <xsl:if test="position( ) = 1">
               <xsl:value-of select="number(translate(.,'-',''))" />
            </xsl:if>
         </xsl:for-each>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

<xsl:template name="color">
   <xsl:param name="value"/>
   <xsl:param name = "colorStep"/>
   <xsl:variable name="rgbval">
       <xsl:choose>
          <xsl:when test="$value > 0" >
            <xsl:value-of select="255 - round($value div $colorStep)"/>
        </xsl:when>
        <xsl:otherwise>
            <xsl:value-of select="255 - round($value div $colorStep * -1)"/>
        </xsl:otherwise>
       </xsl:choose>

   </xsl:variable>
   <xsl:choose>
        <xsl:when test="$value > 0 and $rgbval &lt; 0">
            <xsl:text>rgb(255,0,0)</xsl:text>
            </xsl:when>
        <xsl:when test="$value &lt; 0 and $rgbval &lt; 0">
            <xsl:text>rgb(0,255,0)</xsl:text>
            </xsl:when>
        <xsl:when test="$value > 0">
            <xsl:value-of select="concat('rgb(',$rgbval,',255,',$rgbval,')')"/>
            </xsl:when>
      <xsl:otherwise>
            <xsl:value-of select="concat('rgb(255,',$rgbval,',',$rgbval,')')"/>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

<xsl:template name="rgbfromint">
        <xsl:param name="rgbintval"/>
        
        <xsl:variable name="redval">
                <xsl:value-of select="$rgbintval mod 256"/>
        </xsl:variable>
        <xsl:variable name="newvalue">
                <xsl:value-of select="floor($rgbintval div 256)"/>
        </xsl:variable>
        <xsl:variable name="greenval">
                <xsl:value-of select="$newvalue mod 256"/>
        </xsl:variable>
        <xsl:variable name="blueval">
                <xsl:value-of select="floor($newvalue div 256)"/>
        </xsl:variable>
        
        <xsl:value-of select="concat( 'rgb(',  $redval,  ',',   $greenval,    ',',   $blueval,  ')'    )"/>
        
        
</xsl:template>

</xsl:stylesheet>

...

  BM_BackOfficeReport(BO45:NominalEqvIDR500)
<?xml version='1.0'?>
<!-- &copy; Copyright 2011 SunGard FRONT ARENA
       FStandardTemplate is able to produce colored output for RiskMatrixSheets when DefaultData is turned on
       Added support for Transhist output
-->
<!DOCTYPE xsl:stylesheet [
    <!ENTITY nbsp "<xsl:text>&#160;</xsl:text>">
]>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:param name="clickable" select="0"/>
<xsl:param name="autoupdate" select="0"/>
<xsl:output method="html"/>
<xsl:variable name="cellWidth" select="80"/>
<xsl:variable name="rowHeaderWidth" select="250"/>
<xsl:variable name="useLabelColumn" select="//PRIMEReport/Type !='ASQL Table'"/>

<xsl:template name="PrintSpaces">
  <xsl:param name="n" select="0"/>
  <xsl:if test="$n > 0">
    <xsl:call-template name="PrintSpaces">
      <xsl:with-param name="n" select="$n - 1" />
    </xsl:call-template>
    &nbsp;
  </xsl:if>
</xsl:template>

<xsl:template match="ReportContents">
     <xsl:apply-templates select="Table"/>
</xsl:template>

<xsl:template match="Table">
    
    <xsl:variable name="numberOfColumns" select="NumberOfColumns"/>
    <tr class="tblhdr" depth="{$treeDepth}" border="1px solid black">
       <xsl:if test="$useLabelColumn">
        <td width="{$rowHeaderWidth}">
            <xsl:call-template name="PrintSpaces">
                <xsl:with-param name="n" select="($treeDepth -1) * 6"/>
            </xsl:call-template>
        <img src="report_plus.gif" />&nbsp;</td>
        </xsl:if>
        <xsl:for-each select="Columns/Column">
            <xsl:choose>
            <xsl:when test="TemplateId != ''">
                <td width="{$cellWidth * 2}" style="background-color : #ecf576"><b>
                <xsl:value-of select="TemplateId"/><br />
                <xsl:value-of select="Label"/>
                </b></td>
            </xsl:when>
            <xsl:otherwise>
                <td width="{$cellWidth}" style="background-color : #ecf576"><b><xsl:value-of select="Label"/></b></td>
            </xsl:otherwise>
            </xsl:choose>
        </xsl:for-each>
    </tr>
    <xsl:apply-templates select="Rows/Row">
        <xsl:with-param name="treeDepth" select="$treeDepth"/>
        <xsl:with-param name="colorStep" select="0"/>
    </xsl:apply-templates>
</xsl:template>

<xsl:template match="Table">
    
    <xsl:variable name="numberOfColumns" select="NumberOfColumns"/>

    <xsl:variable name="colorStep" >
        <xsl:choose>
                <xsl:when test="(Type = 'RiskMatrixSheet') and current()//DefaultData">
                    <xsl:variable name="maxvalue">
                        <xsl:call-template name="max">
                                <xsl:with-param name="nodes" select="current()//DefaultData"/>
                        </xsl:call-template>
                    </xsl:variable>
                    <xsl:value-of select="$maxvalue div 255" ></xsl:value-of>
                </xsl:when>
                <xsl:otherwise>0</xsl:otherwise>
        </xsl:choose>
    </xsl:variable>

    <table width="{$numberOfColumns * ($cellWidth + 4) + $rowHeaderWidth + 6}" border="1px solid black">
        <tr class="tblhdr" border="1px solid black">
           <xsl:if test="$useLabelColumn">
            <td width="{$rowHeaderWidth}">&nbsp;</td>
            </xsl:if>
            <xsl:for-each select="Columns/Column">
                <xsl:choose>
                <xsl:when test="TemplateId != ''">
                    <td width="{$cellWidth * 2}" style="background-color : #ecf576"><b>
                    <xsl:value-of select="TemplateId"/><br />
                    <xsl:value-of select="Label"/>
                    </b></td>
                </xsl:when>
                <xsl:otherwise>
                    <td width="{$cellWidth}" style="background-color : #ecf576"><b><xsl:value-of select="Label"/></b></td>
                </xsl:otherwise>
                </xsl:choose>
            </xsl:for-each>
        </tr>
        <xsl:apply-templates select="Rows/Row">
            <xsl:with-param name="treeDepth" select="1"/>
            <xsl:with-param name="colorStep" select="$colorStep"/>
        </xsl:apply-templates>
    </table>
    <p/><p/>
</xsl:template>

<xsl:template match="Row">
    <xsl:param name = "treeDepth"/>
    <xsl:param name = "colorStep"/>
    <xsl:variable name="rwId" select="RowId"/>
    <tr class="{concat('cell', $treeDepth)}" depth="{$treeDepth}" border="1px solid black">
        <xsl:if test="$useLabelColumn">
                <td class="row">
                <xsl:call-template name="PrintSpaces">
                        <xsl:with-param name="n" select="($treeDepth - 1) * 6"/>
                </xsl:call-template>
                <xsl:if test="$clickable = '1'">
                        <img src="report_plus.gif"/>
                </xsl:if>
                <xsl:value-of select="Label"/>
                </td>
        </xsl:if>
    <xsl:apply-templates select="Cells/Cell">
        <xsl:with-param name="colorStep" select="$colorStep" />
    </xsl:apply-templates>
    </tr>
    <xsl:if test="ancestor::ReportContents/ChildReports/ChildReport[ChildReportId = $rwId]">
        <xsl:apply-templates select="ancestor::ReportContents/ChildReports/ChildReport[ChildReportId = $rwId]/PRIMEReport/ReportContents/Table" mode="ChildReport">
            <xsl:with-param name="treeDepth" select="$treeDepth +1" />
        </xsl:apply-templates>
    </xsl:if>
    <xsl:apply-templates select="Rows/Row">
        <xsl:with-param name="treeDepth" select="$treeDepth + 1" />
        <xsl:with-param name="colorStep" select="$colorStep" />
    </xsl:apply-templates>
</xsl:template>

<xsl:template match="Cell">
    <xsl:param name = "colorStep"/>
    <td>
         
         <xsl:choose>   
            
            <xsl:when test="Appearance">
                <xsl:attribute name="style">
                
                         <xsl:choose>     
                            <xsl:when test="Appearance/BkgColor">
                                    background-color: <!--rgb( 0, 255 ,255 )-->
                                        <xsl:call-template name="rgbfromint">
                                            <xsl:with-param name="rgbintval" select="Appearance/BkgColor"/>  
                                         </xsl:call-template>
                                         
                            </xsl:when>
                            <xsl:otherwise>
                                background-color: white
                            </xsl:otherwise>
                         </xsl:choose>    
                         
                        <xsl:choose>   
                            <xsl:when test="Appearance/TextColor">
                                    ;color: <!--rgb( 255, 0 ,255 )-->
                                           <xsl:call-template name="rgbfromint">
                                            <xsl:with-param name="rgbintval" select="Appearance/TextColor"/>  
                                         </xsl:call-template>
                            </xsl:when>
                            <xsl:otherwise>
                               ;color: black
                            </xsl:otherwise>
                        </xsl:choose>   
                
                </xsl:attribute>   
            </xsl:when>
            
            <xsl:otherwise>
                <xsl:if test="DefaultData and $colorStep > 0 and string(number(DefaultData)) !='NaN'">
                        <xsl:attribute name="style">background-color:
                                <xsl:call-template name="color">
                                        <xsl:with-param name="colorStep" select="$colorStep"/>
                                        <xsl:with-param name="value" select="DefaultData"/>
                                        
                                </xsl:call-template>
                        </xsl:attribute>
                </xsl:if>
            </xsl:otherwise>
            
        </xsl:choose>
        <xsl:choose>
                <xsl:when test="ValueType and DefaultData">
                        <acronym>
                                <xsl:attribute name="title">
                                        <xsl:value-of select="DefaultData"/>
                                </xsl:attribute>
                        <xsl:call-template name="CellData" />
                        </acronym>
                </xsl:when>
                <xsl:otherwise>
                        <xsl:call-template name="CellData" />
                </xsl:otherwise>
        </xsl:choose>
    </td>
</xsl:template>

<xsl:template name="CellData">
        <xsl:choose>
             
            <xsl:when test="FormattedData">
                <xsl:value-of select="FormattedData"/>
            </xsl:when>
            <xsl:when test="RawData">
                <xsl:choose>
                    <xsl:when test ="contains(RawData, 'http:') or contains(RawData, 'https:')">
                        <xsl:value-of select="RawData " disable-output-escaping="yes"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="RawData"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:when test="DefaultData">
                <xsl:choose>
                        <xsl:when test="ValueType">
                                <xsl:text>#</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                                <xsl:value-of select="DefaultData"/>
                        </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                  <xsl:message terminate="yes"><xsl:text>No dataformat turned on</xsl:text></xsl:message>
            </xsl:otherwise>
            
        </xsl:choose>
</xsl:template>

<xsl:template match="Settings">
    <table border="1px solid black">
    <tr border="1px solid black">
        <xsl:for-each select="Groups/Group">
            <xsl:if test="Label = 'Profit/Loss'">
                <tr class="tblhdr" border="1px solid black">
                <xsl:for-each select="Column">
                    <td class="row" width="{$cellWidth}" style="background-color : #ecf576"><b>
                    <xsl:choose>
                        <xsl:when test="Label != ''">
                            <xsl:value-of select="Label"/>
                        </xsl:when>
                        <xsl:otherwise>
                             <xsl:value-of select="ColumnId"/>
                        </xsl:otherwise>
                    </xsl:choose>
                    </b></td>
                </xsl:for-each>
                </tr>
                <tr class="row" depth="1" border="1px solid black">
                <xsl:for-each select="Cell">
                    <td class="cell1">
                        <xsl:call-template name="CellData" />
                    </td>
                </xsl:for-each>
                </tr>

            </xsl:if>
        </xsl:for-each>
        </tr>
    </table>
    <p/><p/>
</xsl:template>

<xsl:template match="/">
    <html>
        <head>
        <xsl:if test="$autoupdate = '1'">
                <meta http-equiv="REFRESH" content="10"></meta>
        </xsl:if>
        </head>
        <insertcss/>
        <body>
         <p class="headerImage">
            <headerImage/>
        </p>
        <xsl:if test="$clickable = '1'">
                <xsl:attribute name="onload">init()</xsl:attribute>
                <script src="portfolio_report.js" type="text/javascript"></script>
        </xsl:if>
        
        
        <br></br>

        <!-- Table of contents, only viewed if more than one report -->
        
            <xsl:if test="/MultiReport">
                <xsl:for-each select="/MultiReport/PRIMEReport">
                    <xsl:value-of select="Type"/>
                    <xsl:value-of select="Name"/>
                    <xsl:value-of select="substring(LocalTime,1,10)"/>
                </xsl:for-each>
            </xsl:if>
        
        
        <xsl:for-each select="/MultiReport/PRIMEReport|/PRIMEReport">
            <h3>
                <xsl:value-of select="Type"/>:&nbsp;
                <xsl:value-of select="Name"/>&nbsp;
                <xsl:value-of select="substring(LocalTime,1,10)"/> 
             </h3>
            <xsl:apply-templates select="current()/ReportContents[last()]"/>
        </xsl:for-each>
        <table>
            <tr>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td>Mengetahui</td>
                <td>Nama Pegawai</td>
            </tr>
            <tr>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
            </tr>
            <tr>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
            </tr>
            <tr>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
            </tr>
            <tr>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td>Department Head</td>
                <td>Section Head</td>
            </tr>
          <tr></tr>
        </table>
        <xsl:for-each select="/MultiReport/PRIMEReport|/PRIMEReport">
    
        </xsl:for-each>
        </body>
    </html>
</xsl:template>

<!-- derived from http://www.exslt.org/math/functions/max/index.html -->
<xsl:template name="max">
   <xsl:param name="nodes" select="/.." />
   <xsl:choose>
      <xsl:when test="not($nodes)">0</xsl:when>
      <xsl:otherwise>
         <xsl:for-each select="$nodes">
            <xsl:sort select="translate(.,'-','')" data-type="number" order="descending" />
            <xsl:if test="position( ) = 1">
               <xsl:value-of select="number(translate(.,'-',''))" />
            </xsl:if>
         </xsl:for-each>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

<xsl:template name="color">
   <xsl:param name="value"/>
   <xsl:param name = "colorStep"/>
   <xsl:variable name="rgbval">
       <xsl:choose>
          <xsl:when test="$value > 0" >
            <xsl:value-of select="255 - round($value div $colorStep)"/>
        </xsl:when>
        <xsl:otherwise>
            <xsl:value-of select="255 - round($value div $colorStep * -1)"/>
        </xsl:otherwise>
       </xsl:choose>

   </xsl:variable>
   <xsl:choose>
        <xsl:when test="$value > 0 and $rgbval &lt; 0">
            <xsl:text>rgb(255,0,0)</xsl:text>
            </xsl:when>
        <xsl:when test="$value &lt; 0 and $rgbval &lt; 0">
            <xsl:text>rgb(0,255,0)</xsl:text>
            </xsl:when>
        <xsl:when test="$value > 0">
            <xsl:value-of select="concat('rgb(',$rgbval,',255,',$rgbval,')')"/>
            </xsl:when>
      <xsl:otherwise>
            <xsl:value-of select="concat('rgb(255,',$rgbval,',',$rgbval,')')"/>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

<xsl:template name="rgbfromint">
        <xsl:param name="rgbintval"/>
        
        <xsl:variable name="redval">
                <xsl:value-of select="$rgbintval mod 256"/>
        </xsl:variable>
        <xsl:variable name="newvalue">
                <xsl:value-of select="floor($rgbintval div 256)"/>
        </xsl:variable>
        <xsl:variable name="greenval">
                <xsl:value-of select="$newvalue mod 256"/>
        </xsl:variable>
        <xsl:variable name="blueval">
                <xsl:value-of select="floor($newvalue div 256)"/>
        </xsl:variable>
        
        <xsl:value-of select="concat( 'rgb(',  $redval,  ',',   $greenval,    ',',   $blueval,  ')'    )"/>
        
        
</xsl:template>

</xsl:stylesheet>

...

  BM_BackOfficeReport(BO46:NominalEqvIDR1000)
<?xml version='1.0'?>
<!-- &copy; Copyright 2011 SunGard FRONT ARENA
       FStandardTemplate is able to produce colored output for RiskMatrixSheets when DefaultData is turned on
       Added support for Transhist output
-->
<!DOCTYPE xsl:stylesheet [
    <!ENTITY nbsp "<xsl:text>&#160;</xsl:text>">
]>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:param name="clickable" select="0"/>
<xsl:param name="autoupdate" select="0"/>
<xsl:output method="html"/>
<xsl:variable name="cellWidth" select="80"/>
<xsl:variable name="rowHeaderWidth" select="250"/>
<xsl:variable name="useLabelColumn" select="//PRIMEReport/Type !='ASQL Table'"/>

<xsl:template name="PrintSpaces">
  <xsl:param name="n" select="0"/>
  <xsl:if test="$n > 0">
    <xsl:call-template name="PrintSpaces">
      <xsl:with-param name="n" select="$n - 1" />
    </xsl:call-template>
    &nbsp;
  </xsl:if>
</xsl:template>

<xsl:template match="ReportContents">
     <xsl:apply-templates select="Table"/>
</xsl:template>

<xsl:template match="Table">
    
    <xsl:variable name="numberOfColumns" select="NumberOfColumns"/>
    <tr class="tblhdr" depth="{$treeDepth}" border="1px solid black">
       <xsl:if test="$useLabelColumn">
        <td width="{$rowHeaderWidth}">
            <xsl:call-template name="PrintSpaces">
                <xsl:with-param name="n" select="($treeDepth -1) * 6"/>
            </xsl:call-template>
        <img src="report_plus.gif" />&nbsp;</td>
        </xsl:if>
        <xsl:for-each select="Columns/Column">
            <xsl:choose>
            <xsl:when test="TemplateId != ''">
                <td width="{$cellWidth * 2}" style="background-color : #ecf576"><b>
                <xsl:value-of select="TemplateId"/><br />
                <xsl:value-of select="Label"/>
                </b></td>
            </xsl:when>
            <xsl:otherwise>
                <td width="{$cellWidth}" style="background-color : #ecf576"><b><xsl:value-of select="Label"/></b></td>
            </xsl:otherwise>
            </xsl:choose>
        </xsl:for-each>
    </tr>
    <xsl:apply-templates select="Rows/Row">
        <xsl:with-param name="treeDepth" select="$treeDepth"/>
        <xsl:with-param name="colorStep" select="0"/>
    </xsl:apply-templates>
</xsl:template>

<xsl:template match="Table">
    
    <xsl:variable name="numberOfColumns" select="NumberOfColumns"/>

    <xsl:variable name="colorStep" >
        <xsl:choose>
                <xsl:when test="(Type = 'RiskMatrixSheet') and current()//DefaultData">
                    <xsl:variable name="maxvalue">
                        <xsl:call-template name="max">
                                <xsl:with-param name="nodes" select="current()//DefaultData"/>
                        </xsl:call-template>
                    </xsl:variable>
                    <xsl:value-of select="$maxvalue div 255" ></xsl:value-of>
                </xsl:when>
                <xsl:otherwise>0</xsl:otherwise>
        </xsl:choose>
    </xsl:variable>

    <table width="{$numberOfColumns * ($cellWidth + 4) + $rowHeaderWidth + 6}" border="1px solid black">
        <tr class="tblhdr" border="1px solid black">
           <xsl:if test="$useLabelColumn">
            <td width="{$rowHeaderWidth}">&nbsp;</td>
            </xsl:if>
            <xsl:for-each select="Columns/Column">
                <xsl:choose>
                <xsl:when test="TemplateId != ''">
                    <td width="{$cellWidth * 2}" style="background-color : #ecf576"><b>
                    <xsl:value-of select="TemplateId"/><br />
                    <xsl:value-of select="Label"/>
                    </b></td>
                </xsl:when>
                <xsl:otherwise>
                    <td width="{$cellWidth}" style="background-color : #ecf576"><b><xsl:value-of select="Label"/></b></td>
                </xsl:otherwise>
                </xsl:choose>
            </xsl:for-each>
        </tr>
        <xsl:apply-templates select="Rows/Row">
            <xsl:with-param name="treeDepth" select="1"/>
            <xsl:with-param name="colorStep" select="$colorStep"/>
        </xsl:apply-templates>
    </table>
    <p/><p/>
</xsl:template>

<xsl:template match="Row">
    <xsl:param name = "treeDepth"/>
    <xsl:param name = "colorStep"/>
    <xsl:variable name="rwId" select="RowId"/>
    <tr class="{concat('cell', $treeDepth)}" depth="{$treeDepth}" border="1px solid black">
        <xsl:if test="$useLabelColumn">
                <td class="row">
                <xsl:call-template name="PrintSpaces">
                        <xsl:with-param name="n" select="($treeDepth - 1) * 6"/>
                </xsl:call-template>
                <xsl:if test="$clickable = '1'">
                        <img src="report_plus.gif"/>
                </xsl:if>
                <xsl:value-of select="Label"/>
                </td>
        </xsl:if>
    <xsl:apply-templates select="Cells/Cell">
        <xsl:with-param name="colorStep" select="$colorStep" />
    </xsl:apply-templates>
    </tr>
    <xsl:if test="ancestor::ReportContents/ChildReports/ChildReport[ChildReportId = $rwId]">
        <xsl:apply-templates select="ancestor::ReportContents/ChildReports/ChildReport[ChildReportId = $rwId]/PRIMEReport/ReportContents/Table" mode="ChildReport">
            <xsl:with-param name="treeDepth" select="$treeDepth +1" />
        </xsl:apply-templates>
    </xsl:if>
    <xsl:apply-templates select="Rows/Row">
        <xsl:with-param name="treeDepth" select="$treeDepth + 1" />
        <xsl:with-param name="colorStep" select="$colorStep" />
    </xsl:apply-templates>
</xsl:template>

<xsl:template match="Cell">
    <xsl:param name = "colorStep"/>
    <td>
         
         <xsl:choose>   
            
            <xsl:when test="Appearance">
                <xsl:attribute name="style">
                
                         <xsl:choose>     
                            <xsl:when test="Appearance/BkgColor">
                                    background-color: <!--rgb( 0, 255 ,255 )-->
                                        <xsl:call-template name="rgbfromint">
                                            <xsl:with-param name="rgbintval" select="Appearance/BkgColor"/>  
                                         </xsl:call-template>
                                         
                            </xsl:when>
                            <xsl:otherwise>
                                background-color: white
                            </xsl:otherwise>
                         </xsl:choose>    
                         
                        <xsl:choose>   
                            <xsl:when test="Appearance/TextColor">
                                    ;color: <!--rgb( 255, 0 ,255 )-->
                                           <xsl:call-template name="rgbfromint">
                                            <xsl:with-param name="rgbintval" select="Appearance/TextColor"/>  
                                         </xsl:call-template>
                            </xsl:when>
                            <xsl:otherwise>
                               ;color: black
                            </xsl:otherwise>
                        </xsl:choose>   
                
                </xsl:attribute>   
            </xsl:when>
            
            <xsl:otherwise>
                <xsl:if test="DefaultData and $colorStep > 0 and string(number(DefaultData)) !='NaN'">
                        <xsl:attribute name="style">background-color:
                                <xsl:call-template name="color">
                                        <xsl:with-param name="colorStep" select="$colorStep"/>
                                        <xsl:with-param name="value" select="DefaultData"/>
                                        
                                </xsl:call-template>
                        </xsl:attribute>
                </xsl:if>
            </xsl:otherwise>
            
        </xsl:choose>
        <xsl:choose>
                <xsl:when test="ValueType and DefaultData">
                        <acronym>
                                <xsl:attribute name="title">
                                        <xsl:value-of select="DefaultData"/>
                                </xsl:attribute>
                        <xsl:call-template name="CellData" />
                        </acronym>
                </xsl:when>
                <xsl:otherwise>
                        <xsl:call-template name="CellData" />
                </xsl:otherwise>
        </xsl:choose>
    </td>
</xsl:template>

<xsl:template name="CellData">
        <xsl:choose>
             
            <xsl:when test="FormattedData">
                <xsl:value-of select="FormattedData"/>
            </xsl:when>
            <xsl:when test="RawData">
                <xsl:choose>
                    <xsl:when test ="contains(RawData, 'http:') or contains(RawData, 'https:')">
                        <xsl:value-of select="RawData " disable-output-escaping="yes"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="RawData"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:when test="DefaultData">
                <xsl:choose>
                        <xsl:when test="ValueType">
                                <xsl:text>#</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                                <xsl:value-of select="DefaultData"/>
                        </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                  <xsl:message terminate="yes"><xsl:text>No dataformat turned on</xsl:text></xsl:message>
            </xsl:otherwise>
            
        </xsl:choose>
</xsl:template>

<xsl:template match="Settings">
    <table border="1px solid black">
    <tr border="1px solid black">
        <xsl:for-each select="Groups/Group">
            <xsl:if test="Label = 'Profit/Loss'">
                <tr class="tblhdr" border="1px solid black">
                <xsl:for-each select="Column">
                    <td class="row" width="{$cellWidth}" style="background-color : #ecf576"><b>
                    <xsl:choose>
                        <xsl:when test="Label != ''">
                            <xsl:value-of select="Label"/>
                        </xsl:when>
                        <xsl:otherwise>
                             <xsl:value-of select="ColumnId"/>
                        </xsl:otherwise>
                    </xsl:choose>
                    </b></td>
                </xsl:for-each>
                </tr>
                <tr class="row" depth="1" border="1px solid black">
                <xsl:for-each select="Cell">
                    <td class="cell1">
                        <xsl:call-template name="CellData" />
                    </td>
                </xsl:for-each>
                </tr>

            </xsl:if>
        </xsl:for-each>
        </tr>
    </table>
    <p/><p/>
</xsl:template>

<xsl:template match="/">
    <html>
        <head>
        <xsl:if test="$autoupdate = '1'">
                <meta http-equiv="REFRESH" content="10"></meta>
        </xsl:if>
        </head>
        <insertcss/>
        <body>
         <p class="headerImage">
            <headerImage/>
        </p>
        <xsl:if test="$clickable = '1'">
                <xsl:attribute name="onload">init()</xsl:attribute>
                <script src="portfolio_report.js" type="text/javascript"></script>
        </xsl:if>
        
        
        <br></br>

        <!-- Table of contents, only viewed if more than one report -->
        
            <xsl:if test="/MultiReport">
                <xsl:for-each select="/MultiReport/PRIMEReport">
                    <xsl:value-of select="Type"/>
                    <xsl:value-of select="Name"/>
                    <xsl:value-of select="substring(LocalTime,1,10)"/>
                </xsl:for-each>
            </xsl:if>
               
        <xsl:for-each select="/MultiReport/PRIMEReport|/PRIMEReport">
            <h3>
                <xsl:value-of select="Type"/>:&nbsp;
                <xsl:value-of select="Name"/>&nbsp;
                <xsl:value-of select="substring(LocalTime,1,10)"/> 
             </h3>
              <xsl:for-each select "/MultiReprot/PRIMEReport">
                    <h5>
                    Kepada &nbsp; &nbsp; : 
                    Dari &nbsp; &nbsp; &nbsp;
                    Perihal &nbsp; &nbsp;
                    Tanggal &nbsp; &nbsp; <xsl:value-of select="substring(LocalTime,1,10)"/>
                    </h5>
                </xsl:for-each>
            <xsl:apply-templates select="current()/ReportContents[last()]"/>
        </xsl:for-each>
        <table>
            <tr>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td>Mengetahui</td>
                <td>Nama Pegawai</td>
            </tr>
            <tr>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
            </tr>
            <tr>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
            </tr>
            <tr>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
            </tr>
            <tr>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td>Department Head</td>
                <td>Section Head</td>
            </tr>
          <tr></tr>
        </table>
        <xsl:for-each select="/MultiReport/PRIMEReport|/PRIMEReport">
    
        </xsl:for-each>
        </body>
    </html>
</xsl:template>

<!-- derived from http://www.exslt.org/math/functions/max/index.html -->
<xsl:template name="max">
   <xsl:param name="nodes" select="/.." />
   <xsl:choose>
      <xsl:when test="not($nodes)">0</xsl:when>
      <xsl:otherwise>
         <xsl:for-each select="$nodes">
            <xsl:sort select="translate(.,'-','')" data-type="number" order="descending" />
            <xsl:if test="position( ) = 1">
               <xsl:value-of select="number(translate(.,'-',''))" />
            </xsl:if>
         </xsl:for-each>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

<xsl:template name="color">
   <xsl:param name="value"/>
   <xsl:param name = "colorStep"/>
   <xsl:variable name="rgbval">
       <xsl:choose>
          <xsl:when test="$value > 0" >
            <xsl:value-of select="255 - round($value div $colorStep)"/>
        </xsl:when>
        <xsl:otherwise>
            <xsl:value-of select="255 - round($value div $colorStep * -1)"/>
        </xsl:otherwise>
       </xsl:choose>

   </xsl:variable>
   <xsl:choose>
        <xsl:when test="$value > 0 and $rgbval &lt; 0">
            <xsl:text>rgb(255,0,0)</xsl:text>
            </xsl:when>
        <xsl:when test="$value &lt; 0 and $rgbval &lt; 0">
            <xsl:text>rgb(0,255,0)</xsl:text>
            </xsl:when>
        <xsl:when test="$value > 0">
            <xsl:value-of select="concat('rgb(',$rgbval,',255,',$rgbval,')')"/>
            </xsl:when>
      <xsl:otherwise>
            <xsl:value-of select="concat('rgb(255,',$rgbval,',',$rgbval,')')"/>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

<xsl:template name="rgbfromint">
        <xsl:param name="rgbintval"/>
        
        <xsl:variable name="redval">
                <xsl:value-of select="$rgbintval mod 256"/>
        </xsl:variable>
        <xsl:variable name="newvalue">
                <xsl:value-of select="floor($rgbintval div 256)"/>
        </xsl:variable>
        <xsl:variable name="greenval">
                <xsl:value-of select="$newvalue mod 256"/>
        </xsl:variable>
        <xsl:variable name="blueval">
                <xsl:value-of select="floor($newvalue div 256)"/>
        </xsl:variable>
        
        <xsl:value-of select="concat( 'rgb(',  $redval,  ',',   $greenval,    ',',   $blueval,  ')'    )"/>
        
        
</xsl:template>

</xsl:stylesheet>

...

  BM_BackOfficeReport(BO53:txtTAX)
<?xml version='1.0'?>
<!-- &copy; Copyright 2011 SunGard FRONT ARENA
       FStandardTemplate is able to produce colored output for RiskMatrixSheets when DefaultData is turned on
       Added support for Transhist output
-->
<!DOCTYPE xsl:stylesheet [
    <!ENTITY nbsp "<xsl:text>&#160;</xsl:text>">
]>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:param name="clickable" select="0"/>
<xsl:param name="autoupdate" select="0"/>
<xsl:output method="html"/>
<xsl:variable name="cellWidth" select="80"/>
<xsl:variable name="rowHeaderWidth" select="250"/>
<xsl:variable name="useLabelColumn" select="//PRIMEReport/Type !='ASQL Table'"/>

<xsl:template name="PrintSpaces">
  <xsl:param name="n" select="0"/>
  <xsl:if test="$n > 0">
    <xsl:call-template name="PrintSpaces">
      <xsl:with-param name="n" select="$n - 1" />
    </xsl:call-template>
    &nbsp;
  </xsl:if>
</xsl:template>

<xsl:template match="ReportContents">
     <xsl:apply-templates select="Table"/>
</xsl:template>

<xsl:template match="Table">
    
    <xsl:variable name="numberOfColumns" select="NumberOfColumns"/>
    <tr class="tblhdr" depth="{$treeDepth}" border="1px solid black">
       <xsl:if test="$useLabelColumn">
        <td width="{$rowHeaderWidth}">
            <xsl:call-template name="PrintSpaces">
                <xsl:with-param name="n" select="($treeDepth -1) * 6"/>
            </xsl:call-template>
        <img src="report_plus.gif" />&nbsp;</td>
        </xsl:if>
        <xsl:for-each select="Columns/Column">
            <xsl:choose>
            <xsl:when test="TemplateId != ''">
                <td width="{$cellWidth * 2}" style="background-color : #ecf576"><b>
                <xsl:value-of select="TemplateId"/><br />
                <xsl:value-of select="Label"/>
                </b></td>
            </xsl:when>
            <xsl:otherwise>
                <td width="{$cellWidth}" style="background-color : #ecf576"><b><xsl:value-of select="Label"/></b></td>
            </xsl:otherwise>
            </xsl:choose>
        </xsl:for-each>
    </tr>
    <xsl:apply-templates select="Rows/Row">
        <xsl:with-param name="treeDepth" select="$treeDepth"/>
        <xsl:with-param name="colorStep" select="0"/>
    </xsl:apply-templates>
</xsl:template>

<xsl:template match="Table">
    
    <xsl:variable name="numberOfColumns" select="NumberOfColumns"/>

    <xsl:variable name="colorStep" >
        <xsl:choose>
                <xsl:when test="(Type = 'RiskMatrixSheet') and current()//DefaultData">
                    <xsl:variable name="maxvalue">
                        <xsl:call-template name="max">
                                <xsl:with-param name="nodes" select="current()//DefaultData"/>
                        </xsl:call-template>
                    </xsl:variable>
                    <xsl:value-of select="$maxvalue div 255" ></xsl:value-of>
                </xsl:when>
                <xsl:otherwise>0</xsl:otherwise>
        </xsl:choose>
    </xsl:variable>

    <table width="{$numberOfColumns * ($cellWidth + 4) + $rowHeaderWidth + 6}" border="1px solid black">
        <tr class="tblhdr" border="1px solid black">
           <xsl:if test="$useLabelColumn">
            <td width="{$rowHeaderWidth}">&nbsp;</td>
            </xsl:if>
            <xsl:for-each select="Columns/Column">
                <xsl:choose>
                <xsl:when test="TemplateId != ''">
                    <td width="{$cellWidth * 2}" style="background-color : #ecf576"><b>
                    <xsl:value-of select="TemplateId"/><br />
                    <xsl:value-of select="Label"/>
                    </b></td>
                </xsl:when>
                <xsl:otherwise>
                    <td width="{$cellWidth}" style="background-color : #ecf576"><b><xsl:value-of select="Label"/></b></td>
                </xsl:otherwise>
                </xsl:choose>
            </xsl:for-each>
        </tr>
        <xsl:apply-templates select="Rows/Row">
            <xsl:with-param name="treeDepth" select="1"/>
            <xsl:with-param name="colorStep" select="$colorStep"/>
        </xsl:apply-templates>
    </table>
    <p/><p/>
</xsl:template>

<xsl:template match="Row">
    <xsl:param name = "treeDepth"/>
    <xsl:param name = "colorStep"/>
    <xsl:variable name="rwId" select="RowId"/>
    <tr class="{concat('cell', $treeDepth)}" depth="{$treeDepth}" border="1px solid black">
        <xsl:if test="$useLabelColumn">
                <td class="row">
                <xsl:call-template name="PrintSpaces">
                        <xsl:with-param name="n" select="($treeDepth - 1) * 6"/>
                </xsl:call-template>
                <xsl:if test="$clickable = '1'">
                        <img src="report_plus.gif"/>
                </xsl:if>
                <xsl:value-of select="Label"/>
                </td>
        </xsl:if>
    <xsl:apply-templates select="Cells/Cell">
        <xsl:with-param name="colorStep" select="$colorStep" />
    </xsl:apply-templates>
    </tr>
    <xsl:if test="ancestor::ReportContents/ChildReports/ChildReport[ChildReportId = $rwId]">
        <xsl:apply-templates select="ancestor::ReportContents/ChildReports/ChildReport[ChildReportId = $rwId]/PRIMEReport/ReportContents/Table" mode="ChildReport">
            <xsl:with-param name="treeDepth" select="$treeDepth +1" />
        </xsl:apply-templates>
    </xsl:if>
    <xsl:apply-templates select="Rows/Row">
        <xsl:with-param name="treeDepth" select="$treeDepth + 1" />
        <xsl:with-param name="colorStep" select="$colorStep" />
    </xsl:apply-templates>
</xsl:template>

<xsl:template match="Cell">
    <xsl:param name = "colorStep"/>
    <td>
         
         <xsl:choose>   
            
            <xsl:when test="Appearance">
                <xsl:attribute name="style">
                
                         <xsl:choose>     
                            <xsl:when test="Appearance/BkgColor">
                                    background-color: <!--rgb( 0, 255 ,255 )-->
                                        <xsl:call-template name="rgbfromint">
                                            <xsl:with-param name="rgbintval" select="Appearance/BkgColor"/>  
                                         </xsl:call-template>
                                         
                            </xsl:when>
                            <xsl:otherwise>
                                background-color: white
                            </xsl:otherwise>
                         </xsl:choose>    
                         
                        <xsl:choose>   
                            <xsl:when test="Appearance/TextColor">
                                    ;color: <!--rgb( 255, 0 ,255 )-->
                                           <xsl:call-template name="rgbfromint">
                                            <xsl:with-param name="rgbintval" select="Appearance/TextColor"/>  
                                         </xsl:call-template>
                            </xsl:when>
                            <xsl:otherwise>
                               ;color: black
                            </xsl:otherwise>
                        </xsl:choose>   
                
                </xsl:attribute>   
            </xsl:when>
            
            <xsl:otherwise>
                <xsl:if test="DefaultData and $colorStep > 0 and string(number(DefaultData)) !='NaN'">
                        <xsl:attribute name="style">background-color:
                                <xsl:call-template name="color">
                                        <xsl:with-param name="colorStep" select="$colorStep"/>
                                        <xsl:with-param name="value" select="DefaultData"/>
                                        
                                </xsl:call-template>
                        </xsl:attribute>
                </xsl:if>
            </xsl:otherwise>
            
        </xsl:choose>
        <xsl:choose>
                <xsl:when test="ValueType and DefaultData">
                        <acronym>
                                <xsl:attribute name="title">
                                        <xsl:value-of select="DefaultData"/>
                                </xsl:attribute>
                        <xsl:call-template name="CellData" />
                        </acronym>
                </xsl:when>
                <xsl:otherwise>
                        <xsl:call-template name="CellData" />
                </xsl:otherwise>
        </xsl:choose>
    </td>
</xsl:template>

<xsl:template name="CellData">
        <xsl:choose>
             
            <xsl:when test="FormattedData">
                <xsl:value-of select="FormattedData"/>
            </xsl:when>
            <xsl:when test="RawData">
                <xsl:choose>
                    <xsl:when test ="contains(RawData, 'http:') or contains(RawData, 'https:')">
                        <xsl:value-of select="RawData " disable-output-escaping="yes"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="RawData"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:when test="DefaultData">
                <xsl:choose>
                        <xsl:when test="ValueType">
                                <xsl:text>#</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                                <xsl:value-of select="DefaultData"/>
                        </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                  <xsl:message terminate="yes"><xsl:text>No dataformat turned on</xsl:text></xsl:message>
            </xsl:otherwise>
            
        </xsl:choose>
</xsl:template>

<xsl:template match="Settings">
    <table border="1px solid black">
    <tr border="1px solid black">
        <xsl:for-each select="Groups/Group">
            <xsl:if test="Label = 'Profit/Loss'">
                <tr class="tblhdr" border="1px solid black">
                <xsl:for-each select="Column">
                    <td class="row" width="{$cellWidth}" style="background-color : #ecf576"><b>
                    <xsl:choose>
                        <xsl:when test="Label != ''">
                            <xsl:value-of select="Label"/>
                        </xsl:when>
                        <xsl:otherwise>
                             <xsl:value-of select="ColumnId"/>
                        </xsl:otherwise>
                    </xsl:choose>
                    </b></td>
                </xsl:for-each>
                </tr>
                <tr class="row" depth="1" border="1px solid black">
                <xsl:for-each select="Cell">
                    <td class="cell1">
                        <xsl:call-template name="CellData" />
                    </td>
                </xsl:for-each>
                </tr>

            </xsl:if>
        </xsl:for-each>
        </tr>
    </table>
    <p/><p/>
</xsl:template>

<xsl:template match="/">
    <html>
        <head>
        <xsl:if test="$autoupdate = '1'">
                <meta http-equiv="REFRESH" content="10"></meta>
        </xsl:if>
        </head>
        <insertcss/>
        <body>
         <p class="headerImage">
            <headerImage/>
        </p>
        <xsl:if test="$clickable = '1'">
                <xsl:attribute name="onload">init()</xsl:attribute>
                <script src="portfolio_report.js" type="text/javascript"></script>
        </xsl:if>
        
        
        <br></br>

        <!-- Table of contents, only viewed if more than one report -->
        
            <xsl:if test="/MultiReport">
                <xsl:for-each select="/MultiReport/PRIMEReport">
                </xsl:for-each>
            </xsl:if>
               
        <xsl:for-each select="/MultiReport/PRIMEReport|/PRIMEReport">
              <xsl:for-each select "/MultiReprot/PRIMEReport">

                </xsl:for-each>
            <xsl:apply-templates select="current()/ReportContents[last()]"/>
        </xsl:for-each>
       
        <xsl:for-each select="/MultiReport/PRIMEReport|/PRIMEReport">
    
        </xsl:for-each>
        </body>
    </html>
</xsl:template>

<!-- derived from http://www.exslt.org/math/functions/max/index.html -->
<xsl:template name="max">
   <xsl:param name="nodes" select="/.." />
   <xsl:choose>
      <xsl:when test="not($nodes)">0</xsl:when>
      <xsl:otherwise>
         <xsl:for-each select="$nodes">
            <xsl:sort select="translate(.,'-','')" data-type="number" order="descending" />
            <xsl:if test="position( ) = 1">
               <xsl:value-of select="number(translate(.,'-',''))" />
            </xsl:if>
         </xsl:for-each>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

<xsl:template name="color">
   <xsl:param name="value"/>
   <xsl:param name = "colorStep"/>
   <xsl:variable name="rgbval">
       <xsl:choose>
          <xsl:when test="$value > 0" >
            <xsl:value-of select="255 - round($value div $colorStep)"/>
        </xsl:when>
        <xsl:otherwise>
            <xsl:value-of select="255 - round($value div $colorStep * -1)"/>
        </xsl:otherwise>
       </xsl:choose>

   </xsl:variable>
   <xsl:choose>
        <xsl:when test="$value > 0 and $rgbval &lt; 0">
            <xsl:text>rgb(255,0,0)</xsl:text>
            </xsl:when>
        <xsl:when test="$value &lt; 0 and $rgbval &lt; 0">
            <xsl:text>rgb(0,255,0)</xsl:text>
            </xsl:when>
        <xsl:when test="$value > 0">
            <xsl:value-of select="concat('rgb(',$rgbval,',255,',$rgbval,')')"/>
            </xsl:when>
      <xsl:otherwise>
            <xsl:value-of select="concat('rgb(255,',$rgbval,',',$rgbval,')')"/>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

<xsl:template name="rgbfromint">
        <xsl:param name="rgbintval"/>
        
        <xsl:variable name="redval">
                <xsl:value-of select="$rgbintval mod 256"/>
        </xsl:variable>
        <xsl:variable name="newvalue">
                <xsl:value-of select="floor($rgbintval div 256)"/>
        </xsl:variable>
        <xsl:variable name="greenval">
                <xsl:value-of select="$newvalue mod 256"/>
        </xsl:variable>
        <xsl:variable name="blueval">
                <xsl:value-of select="floor($newvalue div 256)"/>
        </xsl:variable>
        
        <xsl:value-of select="concat( 'rgb(',  $redval,  ',',   $greenval,    ',',   $blueval,  ')'    )"/>
        
        
</xsl:template>

</xsl:stylesheet>

...

  BM_BackOfficeReport(BO62:PPAP)
<?xml version='1.0'?>
<!-- &copy; Copyright 2011 SunGard FRONT ARENA
       FStandardTemplate is able to produce colored output for RiskMatrixSheets when DefaultData is turned on
       Added support for Transhist output
-->
<!DOCTYPE xsl:stylesheet [
    <!ENTITY nbsp "<xsl:text>&#160;</xsl:text>">
]>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:param name="clickable" select="0"/>
<xsl:param name="autoupdate" select="0"/>
<xsl:output method="html"/>
<xsl:variable name="cellWidth" select="80"/>
<xsl:variable name="rowHeaderWidth" select="250"/>
<xsl:variable name="useLabelColumn" select="//PRIMEReport/Type !='ASQL Table'"/>

<xsl:template name="PrintSpaces">
  <xsl:param name="n" select="0"/>
  <xsl:if test="$n > 0">
    <xsl:call-template name="PrintSpaces">
      <xsl:with-param name="n" select="$n - 1" />
    </xsl:call-template>
    &nbsp;
  </xsl:if>
</xsl:template>

<xsl:template match="ReportContents">
     <xsl:apply-templates select="Table"/>
</xsl:template>

<xsl:template match="Table">
    
    <xsl:variable name="numberOfColumns" select="NumberOfColumns"/>
    <tr class="tblhdr" depth="{$treeDepth}" border="1px solid black">
       <xsl:if test="$useLabelColumn">
        <td width="{$rowHeaderWidth}">
            <xsl:call-template name="PrintSpaces">
                <xsl:with-param name="n" select="($treeDepth -1) * 6"/>
            </xsl:call-template>
        <img src="report_plus.gif" />&nbsp;</td>
        </xsl:if>
        <xsl:for-each select="Columns/Column">
            <xsl:choose>
            <xsl:when test="TemplateId != ''">
                <td width="{$cellWidth * 2}" style="background-color : #ecf576"><b>
                <xsl:value-of select="TemplateId"/><br />
                <xsl:value-of select="Label"/>
                </b></td>
            </xsl:when>
            <xsl:otherwise>
                <td width="{$cellWidth}" style="background-color : #ecf576"><b><xsl:value-of select="Label"/></b></td>
            </xsl:otherwise>
            </xsl:choose>
        </xsl:for-each>
    </tr>
    <xsl:apply-templates select="Rows/Row">
        <xsl:with-param name="treeDepth" select="$treeDepth"/>
        <xsl:with-param name="colorStep" select="0"/>
    </xsl:apply-templates>
</xsl:template>

<xsl:template match="Table">
    
    <xsl:variable name="numberOfColumns" select="NumberOfColumns"/>

    <xsl:variable name="colorStep" >
        <xsl:choose>
                <xsl:when test="(Type = 'RiskMatrixSheet') and current()//DefaultData">
                    <xsl:variable name="maxvalue">
                        <xsl:call-template name="max">
                                <xsl:with-param name="nodes" select="current()//DefaultData"/>
                        </xsl:call-template>
                    </xsl:variable>
                    <xsl:value-of select="$maxvalue div 255" ></xsl:value-of>
                </xsl:when>
                <xsl:otherwise>0</xsl:otherwise>
        </xsl:choose>
    </xsl:variable>

    <table width="{$numberOfColumns * ($cellWidth + 4) + $rowHeaderWidth + 6}" border="1px solid black">
        <tr class="tblhdr" border="1px solid black">
           <xsl:if test="$useLabelColumn">
            <td width="{$rowHeaderWidth}">&nbsp;</td>
            </xsl:if>
            <xsl:for-each select="Columns/Column">
                <xsl:choose>
                <xsl:when test="TemplateId != ''">
                    <td width="{$cellWidth * 2}" style="background-color : #ecf576"><b>
                    <xsl:value-of select="TemplateId"/><br />
                    <xsl:value-of select="Label"/>
                    </b></td>
                </xsl:when>
                <xsl:otherwise>
                    <td width="{$cellWidth}" style="background-color : #ecf576"><b><xsl:value-of select="Label"/></b></td>
                </xsl:otherwise>
                </xsl:choose>
            </xsl:for-each>
        </tr>
        <xsl:apply-templates select="Rows/Row">
            <xsl:with-param name="treeDepth" select="1"/>
            <xsl:with-param name="colorStep" select="$colorStep"/>
        </xsl:apply-templates>
    </table>
    <p/><p/>
</xsl:template>

<xsl:template match="Row">
    <xsl:param name = "treeDepth"/>
    <xsl:param name = "colorStep"/>
    <xsl:variable name="rwId" select="RowId"/>
    <tr class="{concat('cell', $treeDepth)}" depth="{$treeDepth}" border="1px solid black">
        <xsl:if test="$useLabelColumn">
                <td class="row">
                <xsl:call-template name="PrintSpaces">
                        <xsl:with-param name="n" select="($treeDepth - 1) * 6"/>
                </xsl:call-template>
                <xsl:if test="$clickable = '1'">
                        <img src="report_plus.gif"/>
                </xsl:if>
                <xsl:value-of select="Label"/>
                </td>
        </xsl:if>
    <xsl:apply-templates select="Cells/Cell">
        <xsl:with-param name="colorStep" select="$colorStep" />
    </xsl:apply-templates>
    </tr>
    <xsl:if test="ancestor::ReportContents/ChildReports/ChildReport[ChildReportId = $rwId]">
        <xsl:apply-templates select="ancestor::ReportContents/ChildReports/ChildReport[ChildReportId = $rwId]/PRIMEReport/ReportContents/Table" mode="ChildReport">
            <xsl:with-param name="treeDepth" select="$treeDepth +1" />
        </xsl:apply-templates>
    </xsl:if>
    <xsl:apply-templates select="Rows/Row">
        <xsl:with-param name="treeDepth" select="$treeDepth + 1" />
        <xsl:with-param name="colorStep" select="$colorStep" />
    </xsl:apply-templates>
</xsl:template>

<xsl:template match="Cell">
    <xsl:param name = "colorStep"/>
    <td>
         
         <xsl:choose>   
            
            <xsl:when test="Appearance">
                <xsl:attribute name="style">
                
                         <xsl:choose>     
                            <xsl:when test="Appearance/BkgColor">
                                    background-color: <!--rgb( 0, 255 ,255 )-->
                                        <xsl:call-template name="rgbfromint">
                                            <xsl:with-param name="rgbintval" select="Appearance/BkgColor"/>  
                                         </xsl:call-template>
                                         
                            </xsl:when>
                            <xsl:otherwise>
                                background-color: white
                            </xsl:otherwise>
                         </xsl:choose>    
                         
                        <xsl:choose>   
                            <xsl:when test="Appearance/TextColor">
                                    ;color: <!--rgb( 255, 0 ,255 )-->
                                           <xsl:call-template name="rgbfromint">
                                            <xsl:with-param name="rgbintval" select="Appearance/TextColor"/>  
                                         </xsl:call-template>
                            </xsl:when>
                            <xsl:otherwise>
                               ;color: black
                            </xsl:otherwise>
                        </xsl:choose>   
                
                </xsl:attribute>   
            </xsl:when>
            
            <xsl:otherwise>
                <xsl:if test="DefaultData and $colorStep > 0 and string(number(DefaultData)) !='NaN'">
                        <xsl:attribute name="style">background-color:
                                <xsl:call-template name="color">
                                        <xsl:with-param name="colorStep" select="$colorStep"/>
                                        <xsl:with-param name="value" select="DefaultData"/>
                                        
                                </xsl:call-template>
                        </xsl:attribute>
                </xsl:if>
            </xsl:otherwise>
            
        </xsl:choose>
        <xsl:choose>
                <xsl:when test="ValueType and DefaultData">
                        <acronym>
                                <xsl:attribute name="title">
                                        <xsl:value-of select="DefaultData"/>
                                </xsl:attribute>
                        <xsl:call-template name="CellData" />
                        </acronym>
                </xsl:when>
                <xsl:otherwise>
                        <xsl:call-template name="CellData" />
                </xsl:otherwise>
        </xsl:choose>
    </td>
</xsl:template>

<xsl:template name="CellData">
        <xsl:choose>
             
            <xsl:when test="FormattedData">
                <xsl:value-of select="FormattedData"/>
            </xsl:when>
            <xsl:when test="RawData">
                <xsl:choose>
                    <xsl:when test ="contains(RawData, 'http:') or contains(RawData, 'https:')">
                        <xsl:value-of select="RawData " disable-output-escaping="yes"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="RawData"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:when test="DefaultData">
                <xsl:choose>
                        <xsl:when test="ValueType">
                                <xsl:text>#</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                                <xsl:value-of select="DefaultData"/>
                        </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                  <xsl:message terminate="yes"><xsl:text>No dataformat turned on</xsl:text></xsl:message>
            </xsl:otherwise>
            
        </xsl:choose>
</xsl:template>

<xsl:template match="Settings">
    <table border="1px solid black">
    <tr border="1px solid black">
        <xsl:for-each select="Groups/Group">
            <xsl:if test="Label = 'Profit/Loss'">
                <tr class="tblhdr" border="1px solid black">
                <xsl:for-each select="Column">
                    <td class="row" width="{$cellWidth}" style="background-color : #ecf576"><b>
                    <xsl:choose>
                        <xsl:when test="Label != ''">
                            <xsl:value-of select="Label"/>
                        </xsl:when>
                        <xsl:otherwise>
                             <xsl:value-of select="ColumnId"/>
                        </xsl:otherwise>
                    </xsl:choose>
                    </b></td>
                </xsl:for-each>
                </tr>
                <tr class="row" depth="1" border="1px solid black">
                <xsl:for-each select="Cell">
                    <td class="cell1">
                        <xsl:call-template name="CellData" />
                    </td>
                </xsl:for-each>
                </tr>

            </xsl:if>
        </xsl:for-each>
        </tr>
    </table>
    <p/><p/>
</xsl:template>

<xsl:template match="/">
    <html>
        <head>
        <xsl:if test="$autoupdate = '1'">
                <meta http-equiv="REFRESH" content="10"></meta>
        </xsl:if>
        </head>
        <insertcss/>
        <body>
         <p class="headerImage">
            <headerImage/>
        </p>
        <xsl:if test="$clickable = '1'">
                <xsl:attribute name="onload">init()</xsl:attribute>
                <script src="portfolio_report.js" type="text/javascript"></script>
        </xsl:if>

                
        <!-- Table of contents, only viewed if more than one report -->

        <xsl:if test="/MultiReport">
            <table>
                <xsl:for-each select="/MultiReport/PRIMEReport">
                        <tr><td>
                            <!--<td><xsl:value-of select="Type"/></td>-->
                            <td><xsl:value-of select="Name"/></td>
                            <td><xsl:value-of select="substring(LocalTime,1,10)"/></td>
                        </td></tr>
               </xsl:for-each>
            </table>
        </xsl:if>

        <!-- Reports - ORIGINAL CODE-->
        <xsl:for-each select="/MultiReport/PRIMEReport|/PRIMEReport">
        <h3>
        <p>CCY &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;IDR</p>
        <p>TRX &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Surat Berharga Valuta IDR &nbsp; (<xsl:value-of select="Name"/>) </p>
        <p>PERIODE &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <xsl:value-of select="substring(LocalTime,1,10)"/></p>
                
                <!--<xsl:value-of select="concat(substring(LocalTime,1,10),' ',substring(LocalTime,12,8),' (UTC', substring(LocalTime,20,6),')')"/>-->
             </h3>

             <xsl:apply-templates select="current()/ReportContents"/>
        </xsl:for-each>
        </body>
    </html>
</xsl:template>

<!-- derived from http://www.exslt.org/math/functions/max/index.html -->
<xsl:template name="max">
   <xsl:param name="nodes" select="/.." />
   <xsl:choose>
      <xsl:when test="not($nodes)">0</xsl:when>
      <xsl:otherwise>
         <xsl:for-each select="$nodes">
            <xsl:sort select="translate(.,'-','')" data-type="number" order="descending" />
            <xsl:if test="position( ) = 1">
               <xsl:value-of select="number(translate(.,'-',''))" />
            </xsl:if>
         </xsl:for-each>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

<xsl:template name="color">
   <xsl:param name="value"/>
   <xsl:param name = "colorStep"/>
   <xsl:variable name="rgbval">
       <xsl:choose>
          <xsl:when test="$value > 0" >
            <xsl:value-of select="255 - round($value div $colorStep)"/>
        </xsl:when>
        <xsl:otherwise>
            <xsl:value-of select="255 - round($value div $colorStep * -1)"/>
        </xsl:otherwise>
       </xsl:choose>

   </xsl:variable>
   <xsl:choose>
        <xsl:when test="$value > 0 and $rgbval &lt; 0">
            <xsl:text>rgb(255,0,0)</xsl:text>
            </xsl:when>
        <xsl:when test="$value &lt; 0 and $rgbval &lt; 0">
            <xsl:text>rgb(0,255,0)</xsl:text>
            </xsl:when>
        <xsl:when test="$value > 0">
            <xsl:value-of select="concat('rgb(',$rgbval,',255,',$rgbval,')')"/>
            </xsl:when>
      <xsl:otherwise>
            <xsl:value-of select="concat('rgb(255,',$rgbval,',',$rgbval,')')"/>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

<xsl:template name="rgbfromint">
        <xsl:param name="rgbintval"/>
        
        <xsl:variable name="redval">
                <xsl:value-of select="$rgbintval mod 256"/>
        </xsl:variable>
        <xsl:variable name="newvalue">
                <xsl:value-of select="floor($rgbintval div 256)"/>
        </xsl:variable>
        <xsl:variable name="greenval">
                <xsl:value-of select="$newvalue mod 256"/>
        </xsl:variable>
        <xsl:variable name="blueval">
                <xsl:value-of select="floor($newvalue div 256)"/>
        </xsl:variable>
        
        <xsl:value-of select="concat( 'rgb(',  $redval,  ',',   $greenval,    ',',   $blueval,  ')'    )"/>
        
        
</xsl:template>

</xsl:stylesheet>

...

  BM_CustomBackOfficeReportCSV
<?xml version='1.0'?>
<!-- &copy; Copyright 2011 SunGard FRONT ARENA
       FStandardTemplate is able to produce colored output for RiskMatrixSheets when DefaultData is turned on
       Added support for Transhist output
-->
<!DOCTYPE xsl:stylesheet [
  <!ENTITY tab "<xsl:text>,</xsl:text>">
  <!ENTITY lf "<xsl:text>&#10;</xsl:text>">
]>

<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:output method="text" encoding="UTF-8"/>
<xsl:strip-space elements="*"/>

<xsl:template match="/">
        
<!-- Reports -->
    <xsl:for-each select="//PRIMEReport">                         
            Type:&tab;<xsl:value-of select="current()/Type"/>&lf;
            Name:&tab;<xsl:value-of select="current()/Name"/>&lf;
            Time:&tab;<xsl:value-of select="concat(substring(LocalTime,1,10),' ',substring(LocalTime,12,8),' (UTC', substring(LocalTime,20,6),')')"/>&lf;
            <xsl:apply-templates select="current()/ReportContents"/>             
     </xsl:for-each>     
</xsl:template>

<xsl:template match="Table">
Table name:&tab;<xsl:value-of select="Name"/>&lf;
&tab;
<xsl:for-each select="Columns/Column">
    <xsl:value-of select="Label"/>&tab;
</xsl:for-each>
&lf;
<xsl:apply-templates select="Rows/Row"/>
</xsl:template>

<xsl:template match="Row">
    <xsl:value-of select="Label"/>&tab;
    <xsl:for-each select="Cells/Cell">
        <xsl:call-template name="CellData" />&tab; 
    </xsl:for-each>
    &lf;
    <xsl:apply-templates select="Rows/Row"/>
</xsl:template>

<xsl:template name="CellData">
        <xsl:choose>
            <xsl:when test="RawData">
                <xsl:value-of select="RawData"/>
            </xsl:when>
            <xsl:when test="FormattedData">
                <xsl:value-of select="FormattedData"/>
            </xsl:when>
            <xsl:when test="DefaultData">
                <xsl:choose>
                        <xsl:when test="ValueType">
                                <xsl:text>#</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                                <xsl:value-of select="DefaultData"/>
                        </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                  <xsl:message terminate="yes"><xsl:text>No dataformat turned on</xsl:text></xsl:message>
            </xsl:otherwise>
        </xsl:choose>
</xsl:template>

</xsl:stylesheet>

...

  BM_LiquidityReport
<?xml version='1.0'?>
<!-- &copy; Copyright 2011 SunGard FRONT ARENA
       FStandardTemplate is able to produce colored output for RiskMatrixSheets when DefaultData is turned on
       Added support for Transhist output
-->
<!DOCTYPE xsl:stylesheet [
    <!ENTITY nbsp "<xsl:text>&#160;</xsl:text>">
]>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:param name="clickable" select="0"/>
<xsl:param name="autoupdate" select="0"/>
<xsl:output method="html"/>
<xsl:variable name="cellWidth" select="80"/>
<xsl:variable name="rowHeaderWidth" select="250"/>
<xsl:variable name="useLabelColumn" select="//PRIMEReport/Type !='ASQL Table'"/>

<xsl:template name="PrintSpaces">
  <xsl:param name="n" select="0"/>
  <xsl:if test="$n > 0">
    <xsl:call-template name="PrintSpaces">
      <xsl:with-param name="n" select="$n - 1" />
    </xsl:call-template>
    &nbsp;
  </xsl:if>
</xsl:template>

<xsl:template match="ReportContents">
     <xsl:apply-templates select="Table"/>
</xsl:template>

<xsl:template match="Table">
    
    <xsl:variable name="numberOfColumns" select="NumberOfColumns"/>
    <tr class="tblhdr" depth="{$treeDepth}" border="1px solid black">
       <xsl:if test="$useLabelColumn">
        <td width="{$rowHeaderWidth}">
            <xsl:call-template name="PrintSpaces">
                <xsl:with-param name="n" select="($treeDepth -1) * 6"/>
            </xsl:call-template>
        <img src="report_plus.gif" />&nbsp;</td>
        </xsl:if>
        <xsl:for-each select="Columns/Column">
            <xsl:choose>
            <xsl:when test="TemplateId != ''">
                <td width="{$cellWidth * 2}" style="background-color : #ecf576"><b>
                <xsl:value-of select="TemplateId"/><br />
                <xsl:value-of select="Label"/>
                </b></td>
            </xsl:when>
            <xsl:otherwise>
                <td width="{$cellWidth}" style="background-color : #ecf576"><b><xsl:value-of select="Label"/></b></td>
            </xsl:otherwise>
            </xsl:choose>
        </xsl:for-each>
    </tr>
    <xsl:apply-templates select="Rows/Row">
        <xsl:with-param name="treeDepth" select="$treeDepth"/>
        <xsl:with-param name="colorStep" select="0"/>
    </xsl:apply-templates>
</xsl:template>

<xsl:template match="Table">
    
    <xsl:variable name="numberOfColumns" select="NumberOfColumns"/>

    <xsl:variable name="colorStep" >
        <xsl:choose>
                <xsl:when test="(Type = 'RiskMatrixSheet') and current()//DefaultData">
                    <xsl:variable name="maxvalue">
                        <xsl:call-template name="max">
                                <xsl:with-param name="nodes" select="current()//DefaultData"/>
                        </xsl:call-template>
                    </xsl:variable>
                    <xsl:value-of select="$maxvalue div 255" ></xsl:value-of>
                </xsl:when>
                <xsl:otherwise>0</xsl:otherwise>
        </xsl:choose>
    </xsl:variable>

    <table width="{$numberOfColumns * ($cellWidth + 4) + $rowHeaderWidth + 6}" border="1px solid black">
        <tr class="tblhdr" border="1px solid black">
           <xsl:if test="$useLabelColumn">
            <td width="{$rowHeaderWidth}">&nbsp;</td>
            </xsl:if>
            <xsl:for-each select="Columns/Column">
                <xsl:choose>
                <xsl:when test="TemplateId != ''">
                    <td width="{$cellWidth * 2}" style="background-color : #ecf576"><b>
                    <xsl:value-of select="TemplateId"/><br />
                    <xsl:value-of select="Label"/>
                    </b></td>
                </xsl:when>
                <xsl:otherwise>
                    <td width="{$cellWidth}" style="background-color : #ecf576"><b><xsl:value-of select="Label"/></b></td>
                </xsl:otherwise>
                </xsl:choose>
            </xsl:for-each>
        </tr>
        <xsl:apply-templates select="Rows/Row">
            <xsl:with-param name="treeDepth" select="1"/>
            <xsl:with-param name="colorStep" select="$colorStep"/>
        </xsl:apply-templates>
    </table>
    <p/><p/>
</xsl:template>

<xsl:template match="Row">
    <xsl:param name = "treeDepth"/>
    <xsl:param name = "colorStep"/>
    <xsl:variable name="rwId" select="RowId"/>
    <tr class="{concat('cell', $treeDepth)}" depth="{$treeDepth}" border="1px solid black">
        <xsl:if test="$useLabelColumn">
                <td class="row">
                <xsl:call-template name="PrintSpaces">
                        <xsl:with-param name="n" select="($treeDepth - 1) * 6"/>
                </xsl:call-template>
                <xsl:if test="$clickable = '1'">
                        <img src="report_plus.gif"/>
                </xsl:if>
                <xsl:value-of select="Label"/>
                </td>
        </xsl:if>
    <xsl:apply-templates select="Cells/Cell">
        <xsl:with-param name="colorStep" select="$colorStep" />
    </xsl:apply-templates>
    </tr>
    <xsl:if test="ancestor::ReportContents/ChildReports/ChildReport[ChildReportId = $rwId]">
        <xsl:apply-templates select="ancestor::ReportContents/ChildReports/ChildReport[ChildReportId = $rwId]/PRIMEReport/ReportContents/Table" mode="ChildReport">
            <xsl:with-param name="treeDepth" select="$treeDepth +1" />
        </xsl:apply-templates>
    </xsl:if>
    <xsl:apply-templates select="Rows/Row">
        <xsl:with-param name="treeDepth" select="$treeDepth + 1" />
        <xsl:with-param name="colorStep" select="$colorStep" />
    </xsl:apply-templates>
</xsl:template>

<xsl:template match="Cell">
    <xsl:param name = "colorStep"/>
    <td>
         
         <xsl:choose>   
            
            <xsl:when test="Appearance">
                <xsl:attribute name="style">
                
                         <xsl:choose>     
                            <xsl:when test="Appearance/BkgColor">
                                    background-color: <!--rgb( 0, 255 ,255 )-->
                                        <xsl:call-template name="rgbfromint">
                                            <xsl:with-param name="rgbintval" select="Appearance/BkgColor"/>  
                                         </xsl:call-template>
                                         
                            </xsl:when>
                            <xsl:otherwise>
                                background-color: white
                            </xsl:otherwise>
                         </xsl:choose>    
                         
                        <xsl:choose>   
                            <xsl:when test="Appearance/TextColor">
                                    ;color: <!--rgb( 255, 0 ,255 )-->
                                           <xsl:call-template name="rgbfromint">
                                            <xsl:with-param name="rgbintval" select="Appearance/TextColor"/>  
                                         </xsl:call-template>
                            </xsl:when>
                            <xsl:otherwise>
                               ;color: black
                            </xsl:otherwise>
                        </xsl:choose>   
                
                </xsl:attribute>   
            </xsl:when>
            
            <xsl:otherwise>
                <xsl:if test="DefaultData and $colorStep > 0 and string(number(DefaultData)) !='NaN'">
                        <xsl:attribute name="style">background-color:
                                <xsl:call-template name="color">
                                        <xsl:with-param name="colorStep" select="$colorStep"/>
                                        <xsl:with-param name="value" select="DefaultData"/>
                                        
                                </xsl:call-template>
                        </xsl:attribute>
                </xsl:if>
            </xsl:otherwise>
            
        </xsl:choose>
        <xsl:choose>
                <xsl:when test="ValueType and DefaultData">
                        <acronym>
                                <xsl:attribute name="title">
                                        <xsl:value-of select="DefaultData"/>
                                </xsl:attribute>
                        <xsl:call-template name="CellData" />
                        </acronym>
                </xsl:when>
                <xsl:otherwise>
                        <xsl:call-template name="CellData" />
                </xsl:otherwise>
        </xsl:choose>
    </td>
</xsl:template>

<xsl:template name="CellData">
        <xsl:choose>
             
            <xsl:when test="FormattedData">
                <xsl:value-of select="FormattedData"/>
            </xsl:when>
            <xsl:when test="RawData">
                <xsl:choose>
                    <xsl:when test ="contains(RawData, 'http:') or contains(RawData, 'https:')">
                        <xsl:value-of select="RawData " disable-output-escaping="yes"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="RawData"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:when test="DefaultData">
                <xsl:choose>
                        <xsl:when test="ValueType">
                                <xsl:text>#</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                                <xsl:value-of select="DefaultData"/>
                        </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                  <xsl:message terminate="yes"><xsl:text>No dataformat turned on</xsl:text></xsl:message>
            </xsl:otherwise>
            
        </xsl:choose>
</xsl:template>

<xsl:template match="Settings">
    <table border="1px solid black">
    <tr border="1px solid black">
        <xsl:for-each select="Groups/Group">
            <xsl:if test="Label = 'Profit/Loss'">
                <tr class="tblhdr" border="1px solid black">
                <xsl:for-each select="Column">
                    <td class="row" width="{$cellWidth}" style="background-color : #ecf576"><b>
                    <xsl:choose>
                        <xsl:when test="Label != ''">
                            <xsl:value-of select="Label"/>
                        </xsl:when>
                        <xsl:otherwise>
                             <xsl:value-of select="ColumnId"/>
                        </xsl:otherwise>
                    </xsl:choose>
                    </b></td>
                </xsl:for-each>
                </tr>
                <tr class="row" depth="1" border="1px solid black">
                <xsl:for-each select="Cell">
                    <td class="cell1">
                        <xsl:call-template name="CellData" />
                    </td>
                </xsl:for-each>
                </tr>

            </xsl:if>
        </xsl:for-each>
        </tr>
    </table>
    <p/><p/>
</xsl:template>

<xsl:template match="/">
    <html>
        <head>
        <xsl:if test="$autoupdate = '1'">
                <meta http-equiv="REFRESH" content="10"></meta>
        </xsl:if>
        </head>
        <insertcss/>
        <body>
         <p class="headerImage">
            <headerImage/>
        </p>
        <xsl:if test="$clickable = '1'">
                <xsl:attribute name="onload">init()</xsl:attribute>
                <script src="portfolio_report.js" type="text/javascript"></script>
        </xsl:if>

        <!-- Table of contents, only viewed if more than one report -->

        <xsl:if test="/MultiReport">
            <table>
                <xsl:for-each select="/MultiReport/PRIMEReport">
                        <tr><td>
                            <!--<td><xsl:value-of select="Type"/></td>-->
                            <td><xsl:value-of select="Name"/></td>
                            <td><xsl:value-of select="substring(LocalTime,1,10)"/></td>
                        </td></tr>
               </xsl:for-each>
            </table>
        </xsl:if>

        <!-- Reports - ORIGINAL CODE-->
        <xsl:for-each select="/MultiReport/PRIMEReport|/PRIMEReport">
            <h3>
                <!--<xsl:value-of select="Type"/>:&nbsp;--><!--ORIGINAL LINE-->
                <xsl:value-of select="Name"/>&nbsp;
                <br><xsl:value-of select="substring(LocalTime,1,10)"/></br>
                <!--<xsl:value-of select="concat(substring(LocalTime,1,10),' ',substring(LocalTime,12,8),' (UTC', substring(LocalTime,20,6),')')"/>-->
             </h3>

             <xsl:apply-templates select="current()/ReportContents"/>
        </xsl:for-each>
        </body>
    </html>
</xsl:template>

<!-- derived from http://www.exslt.org/math/functions/max/index.html -->
<xsl:template name="max">
   <xsl:param name="nodes" select="/.." />
   <xsl:choose>
      <xsl:when test="not($nodes)">0</xsl:when>
      <xsl:otherwise>
         <xsl:for-each select="$nodes">
            <xsl:sort select="translate(.,'-','')" data-type="number" order="descending" />
            <xsl:if test="position( ) = 1">
               <xsl:value-of select="number(translate(.,'-',''))" />
            </xsl:if>
         </xsl:for-each>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

<xsl:template name="color">
   <xsl:param name="value"/>
   <xsl:param name = "colorStep"/>
   <xsl:variable name="rgbval">
       <xsl:choose>
          <xsl:when test="$value > 0" >
            <xsl:value-of select="255 - round($value div $colorStep)"/>
        </xsl:when>
        <xsl:otherwise>
            <xsl:value-of select="255 - round($value div $colorStep * -1)"/>
        </xsl:otherwise>
       </xsl:choose>

   </xsl:variable>
   <xsl:choose>
        <xsl:when test="$value > 0 and $rgbval &lt; 0">
            <xsl:text>rgb(255,0,0)</xsl:text>
            </xsl:when>
        <xsl:when test="$value &lt; 0 and $rgbval &lt; 0">
            <xsl:text>rgb(0,255,0)</xsl:text>
            </xsl:when>
        <xsl:when test="$value > 0">
            <xsl:value-of select="concat('rgb(',$rgbval,',255,',$rgbval,')')"/>
            </xsl:when>
      <xsl:otherwise>
            <xsl:value-of select="concat('rgb(255,',$rgbval,',',$rgbval,')')"/>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

<xsl:template name="rgbfromint">
        <xsl:param name="rgbintval"/>
        
        <xsl:variable name="redval">
                <xsl:value-of select="$rgbintval mod 256"/>
        </xsl:variable>
        <xsl:variable name="newvalue">
                <xsl:value-of select="floor($rgbintval div 256)"/>
        </xsl:variable>
        <xsl:variable name="greenval">
                <xsl:value-of select="$newvalue mod 256"/>
        </xsl:variable>
        <xsl:variable name="blueval">
                <xsl:value-of select="floor($newvalue div 256)"/>
        </xsl:variable>
        
        <xsl:value-of select="concat( 'rgb(',  $redval,  ',',   $greenval,    ',',   $blueval,  ')'    )"/>
        
        
</xsl:template>

</xsl:stylesheet>

...

  BM_MiddleOfficeReport
<?xml version='1.0'?>
<!-- &copy; Copyright 2011 SunGard FRONT ARENA
       FStandardTemplate is able to produce colored output for RiskMatrixSheets when DefaultData is turned on
       Added support for Transhist output
-->
<!DOCTYPE xsl:stylesheet [
    <!ENTITY nbsp "<xsl:text>&#160;</xsl:text>">
]>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:param name="clickable" select="0"/>
<xsl:param name="autoupdate" select="0"/>
<xsl:output method="html"/>
<xsl:variable name="cellWidth" select="80"/>
<xsl:variable name="rowHeaderWidth" select="250"/>
<xsl:variable name="useLabelColumn" select="//PRIMEReport/Type !='ASQL Table'"/>

<xsl:template name="PrintSpaces">
  <xsl:param name="n" select="0"/>
  <xsl:if test="$n > 0">
    <xsl:call-template name="PrintSpaces">
      <xsl:with-param name="n" select="$n - 1" />
    </xsl:call-template>
    &nbsp;
  </xsl:if>
</xsl:template>

<xsl:template match="ReportContents">
     <xsl:apply-templates select="Table"/>
</xsl:template>

<xsl:template match="Table">
    
    <xsl:variable name="numberOfColumns" select="NumberOfColumns"/>
    <tr class="tblhdr" depth="{$treeDepth}" border="1px solid black">
       <xsl:if test="$useLabelColumn">
        <td width="{$rowHeaderWidth}">
            <xsl:call-template name="PrintSpaces">
                <xsl:with-param name="n" select="($treeDepth -1) * 6"/>
            </xsl:call-template>
        <img src="report_plus.gif" />&nbsp;</td>
        </xsl:if>
        <xsl:for-each select="Columns/Column">
            <xsl:choose>
            <xsl:when test="TemplateId != ''">
                <td width="{$cellWidth * 2}" style="background-color : #ecf576"><b>
                <xsl:value-of select="TemplateId"/><br />
                <xsl:value-of select="Label"/>
                </b></td>
            </xsl:when>
            <xsl:otherwise>
                <td width="{$cellWidth}" style="background-color : #ecf576"><b><xsl:value-of select="Label"/></b></td>
            </xsl:otherwise>
            </xsl:choose>
        </xsl:for-each>
    </tr>
    <xsl:apply-templates select="Rows/Row">
        <xsl:with-param name="treeDepth" select="$treeDepth"/>
        <xsl:with-param name="colorStep" select="0"/>
    </xsl:apply-templates>
</xsl:template>

<xsl:template match="Table">
    
    <xsl:variable name="numberOfColumns" select="NumberOfColumns"/>

    <xsl:variable name="colorStep" >
        <xsl:choose>
                <xsl:when test="(Type = 'RiskMatrixSheet') and current()//DefaultData">
                    <xsl:variable name="maxvalue">
                        <xsl:call-template name="max">
                                <xsl:with-param name="nodes" select="current()//DefaultData"/>
                        </xsl:call-template>
                    </xsl:variable>
                    <xsl:value-of select="$maxvalue div 255" ></xsl:value-of>
                </xsl:when>
                <xsl:otherwise>0</xsl:otherwise>
        </xsl:choose>
    </xsl:variable>

    <table width="{$numberOfColumns * ($cellWidth + 4) + $rowHeaderWidth + 6}" border="1px solid black">
        <tr class="tblhdr" border="1px solid black">
           <xsl:if test="$useLabelColumn">
            <td width="{$rowHeaderWidth}">&nbsp;</td>
            </xsl:if>
            <xsl:for-each select="Columns/Column">
                <xsl:choose>
                <xsl:when test="TemplateId != ''">
                    <td width="{$cellWidth * 2}" style="background-color : #ecf576"><b>
                    <xsl:value-of select="TemplateId"/><br />
                    <xsl:value-of select="Label"/>
                    </b></td>
                </xsl:when>
                <xsl:otherwise>
                    <td width="{$cellWidth}" style="background-color : #ecf576"><b><xsl:value-of select="Label"/></b></td>
                </xsl:otherwise>
                </xsl:choose>
            </xsl:for-each>
        </tr>
        <xsl:apply-templates select="Rows/Row">
            <xsl:with-param name="treeDepth" select="1"/>
            <xsl:with-param name="colorStep" select="$colorStep"/>
        </xsl:apply-templates>
    </table>
    <p/><p/>
</xsl:template>

<xsl:template match="Row">
    <xsl:param name = "treeDepth"/>
    <xsl:param name = "colorStep"/>
    <xsl:variable name="rwId" select="RowId"/>
    <tr class="{concat('cell', $treeDepth)}" depth="{$treeDepth}" border="1px solid black">
        <xsl:if test="$useLabelColumn">
                <td class="row">
                <xsl:call-template name="PrintSpaces">
                        <xsl:with-param name="n" select="($treeDepth - 1) * 6"/>
                </xsl:call-template>
                <xsl:if test="$clickable = '1'">
                        <img src="report_plus.gif"/>
                </xsl:if>
                <xsl:value-of select="Label"/>
                </td>
        </xsl:if>
    <xsl:apply-templates select="Cells/Cell">
        <xsl:with-param name="colorStep" select="$colorStep" />
    </xsl:apply-templates>
    </tr>
    <xsl:if test="ancestor::ReportContents/ChildReports/ChildReport[ChildReportId = $rwId]">
        <xsl:apply-templates select="ancestor::ReportContents/ChildReports/ChildReport[ChildReportId = $rwId]/PRIMEReport/ReportContents/Table" mode="ChildReport">
            <xsl:with-param name="treeDepth" select="$treeDepth +1" />
        </xsl:apply-templates>
    </xsl:if>
    <xsl:apply-templates select="Rows/Row">
        <xsl:with-param name="treeDepth" select="$treeDepth + 1" />
        <xsl:with-param name="colorStep" select="$colorStep" />
    </xsl:apply-templates>
</xsl:template>

<xsl:template match="Cell">
    <xsl:param name = "colorStep"/>
    <td>
         
         <xsl:choose>   
            
            <xsl:when test="Appearance">
                <xsl:attribute name="style">
                
                         <xsl:choose>     
                            <xsl:when test="Appearance/BkgColor">
                                    background-color: <!--rgb( 0, 255 ,255 )-->
                                        <xsl:call-template name="rgbfromint">
                                            <xsl:with-param name="rgbintval" select="Appearance/BkgColor"/>  
                                         </xsl:call-template>
                                         
                            </xsl:when>
                            <xsl:otherwise>
                                background-color: white
                            </xsl:otherwise>
                         </xsl:choose>    
                         
                        <xsl:choose>   
                            <xsl:when test="Appearance/TextColor">
                                    ;color: <!--rgb( 255, 0 ,255 )-->
                                           <xsl:call-template name="rgbfromint">
                                            <xsl:with-param name="rgbintval" select="Appearance/TextColor"/>  
                                         </xsl:call-template>
                            </xsl:when>
                            <xsl:otherwise>
                               ;color: black
                            </xsl:otherwise>
                        </xsl:choose>   
                
                </xsl:attribute>   
            </xsl:when>
            
            <xsl:otherwise>
                <xsl:if test="DefaultData and $colorStep > 0 and string(number(DefaultData)) !='NaN'">
                        <xsl:attribute name="style">background-color:
                                <xsl:call-template name="color">
                                        <xsl:with-param name="colorStep" select="$colorStep"/>
                                        <xsl:with-param name="value" select="DefaultData"/>
                                        
                                </xsl:call-template>
                        </xsl:attribute>
                </xsl:if>
            </xsl:otherwise>
            
        </xsl:choose>
        <xsl:choose>
                <xsl:when test="ValueType and DefaultData">
                        <acronym>
                                <xsl:attribute name="title">
                                        <xsl:value-of select="DefaultData"/>
                                </xsl:attribute>
                        <xsl:call-template name="CellData" />
                        </acronym>
                </xsl:when>
                <xsl:otherwise>
                        <xsl:call-template name="CellData" />
                </xsl:otherwise>
        </xsl:choose>
    </td>
</xsl:template>

<xsl:template name="CellData">
        <xsl:choose>
             
            <xsl:when test="FormattedData">
                <xsl:value-of select="FormattedData"/>
            </xsl:when>
            <xsl:when test="RawData">
                <xsl:choose>
                    <xsl:when test ="contains(RawData, 'http:') or contains(RawData, 'https:')">
                        <xsl:value-of select="RawData " disable-output-escaping="yes"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="RawData"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:when test="DefaultData">
                <xsl:choose>
                        <xsl:when test="ValueType">
                                <xsl:text>#</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                                <xsl:value-of select="DefaultData"/>
                        </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                  <xsl:message terminate="yes"><xsl:text>No dataformat turned on</xsl:text></xsl:message>
            </xsl:otherwise>
            
        </xsl:choose>
</xsl:template>

<xsl:template match="Settings">
    <table border="1px solid black">
    <tr border="1px solid black">
        <xsl:for-each select="Groups/Group">
            <xsl:if test="Label = 'Profit/Loss'">
                <tr class="tblhdr" border="1px solid black">
                <xsl:for-each select="Column">
                    <td class="row" width="{$cellWidth}" style="background-color : #ecf576"><b>
                    <xsl:choose>
                        <xsl:when test="Label != ''">
                            <xsl:value-of select="Label"/>
                        </xsl:when>
                        <xsl:otherwise>
                             <xsl:value-of select="ColumnId"/>
                        </xsl:otherwise>
                    </xsl:choose>
                    </b></td>
                </xsl:for-each>
                </tr>
                <tr class="row" depth="1" border="1px solid black">
                <xsl:for-each select="Cell">
                    <td class="cell1">
                        <xsl:call-template name="CellData" />
                    </td>
                </xsl:for-each>
                </tr>

            </xsl:if>
        </xsl:for-each>
        </tr>
    </table>
    <p/><p/>
</xsl:template>

<xsl:template match="/">
    <html>
        <head>
        <xsl:if test="$autoupdate = '1'">
                <meta http-equiv="REFRESH" content="10"></meta>
        </xsl:if>
        </head>
        <insertcss/>
        <body>
         <p class="headerImage">
            <headerImage/>
        </p>
        <xsl:if test="$clickable = '1'">
                <xsl:attribute name="onload">init()</xsl:attribute>
                <script src="portfolio_report.js" type="text/javascript"></script>
        </xsl:if>

        <!-- Table of contents, only viewed if more than one report -->

        <xsl:if test="/MultiReport">
            <table>
                <xsl:for-each select="/MultiReport/PRIMEReport">
                        <tr><td>
                            <!--<td><xsl:value-of select="Type"/></td>-->
                            <td><xsl:value-of select="Name"/></td>
                            <td><xsl:value-of select="substring(LocalTime,1,10)"/></td>
                        </td></tr>
               </xsl:for-each>
            </table>
        </xsl:if>

        <!-- Reports - ORIGINAL CODE-->
        <xsl:for-each select="/MultiReport/PRIMEReport|/PRIMEReport">
            <h3>
                <!--<xsl:value-of select="Type"/>:&nbsp;--><!--ORIGINAL LINE-->
                <xsl:value-of select="Name"/>&nbsp;
                <br><xsl:value-of select="substring(LocalTime,1,10)"/></br>
                <!--<xsl:value-of select="concat(substring(LocalTime,1,10),' ',substring(LocalTime,12,8),' (UTC', substring(LocalTime,20,6),')')"/>-->
             </h3>

             <xsl:apply-templates select="current()/ReportContents"/>
        </xsl:for-each>
        </body>
    </html>
</xsl:template>

<!-- derived from http://www.exslt.org/math/functions/max/index.html -->
<xsl:template name="max">
   <xsl:param name="nodes" select="/.." />
   <xsl:choose>
      <xsl:when test="not($nodes)">0</xsl:when>
      <xsl:otherwise>
         <xsl:for-each select="$nodes">
            <xsl:sort select="translate(.,'-','')" data-type="number" order="descending" />
            <xsl:if test="position( ) = 1">
               <xsl:value-of select="number(translate(.,'-',''))" />
            </xsl:if>
         </xsl:for-each>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

<xsl:template name="color">
   <xsl:param name="value"/>
   <xsl:param name = "colorStep"/>
   <xsl:variable name="rgbval">
       <xsl:choose>
          <xsl:when test="$value > 0" >
            <xsl:value-of select="255 - round($value div $colorStep)"/>
        </xsl:when>
        <xsl:otherwise>
            <xsl:value-of select="255 - round($value div $colorStep * -1)"/>
        </xsl:otherwise>
       </xsl:choose>

   </xsl:variable>
   <xsl:choose>
        <xsl:when test="$value > 0 and $rgbval &lt; 0">
            <xsl:text>rgb(255,0,0)</xsl:text>
            </xsl:when>
        <xsl:when test="$value &lt; 0 and $rgbval &lt; 0">
            <xsl:text>rgb(0,255,0)</xsl:text>
            </xsl:when>
        <xsl:when test="$value > 0">
            <xsl:value-of select="concat('rgb(',$rgbval,',255,',$rgbval,')')"/>
            </xsl:when>
      <xsl:otherwise>
            <xsl:value-of select="concat('rgb(255,',$rgbval,',',$rgbval,')')"/>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

<xsl:template name="rgbfromint">
        <xsl:param name="rgbintval"/>
        
        <xsl:variable name="redval">
                <xsl:value-of select="$rgbintval mod 256"/>
        </xsl:variable>
        <xsl:variable name="newvalue">
                <xsl:value-of select="floor($rgbintval div 256)"/>
        </xsl:variable>
        <xsl:variable name="greenval">
                <xsl:value-of select="$newvalue mod 256"/>
        </xsl:variable>
        <xsl:variable name="blueval">
                <xsl:value-of select="floor($newvalue div 256)"/>
        </xsl:variable>
        
        <xsl:value-of select="concat( 'rgb(',  $redval,  ',',   $greenval,    ',',   $blueval,  ')'    )"/>
        
        
</xsl:template>

</xsl:stylesheet>

...

  BM_ReconciliationReport
<?xml version='1.0'?>
<!-- &copy; Copyright 2011 SunGard FRONT ARENA
       FStandardTemplate is able to produce colored output for RiskMatrixSheets when DefaultData is turned on
       Added support for Transhist output
-->
<!DOCTYPE xsl:stylesheet [
    <!ENTITY nbsp "<xsl:text>&#160;</xsl:text>">
]>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:param name="clickable" select="0"/>
<xsl:param name="autoupdate" select="0"/>
<xsl:output method="html"/>
<xsl:variable name="cellWidth" select="80"/>
<xsl:variable name="rowHeaderWidth" select="250"/>
<xsl:variable name="useLabelColumn" select="//PRIMEReport/Type !='ASQL Table'"/>

<xsl:template name="PrintSpaces">
  <xsl:param name="n" select="0"/>
  <xsl:if test="$n > 0">
    <xsl:call-template name="PrintSpaces">
      <xsl:with-param name="n" select="$n - 1" />
    </xsl:call-template>
    &nbsp;
  </xsl:if>
</xsl:template>

<xsl:template match="ReportContents">
     <xsl:apply-templates select="Table"/>
</xsl:template>

<xsl:template match="Table">
    
    <xsl:variable name="numberOfColumns" select="NumberOfColumns"/>
    <tr class="tblhdr" depth="{$treeDepth}" border="1px solid black">
       <xsl:if test="$useLabelColumn">
        <td width="{$rowHeaderWidth}">
            <xsl:call-template name="PrintSpaces">
                <xsl:with-param name="n" select="($treeDepth -1) * 6"/>
            </xsl:call-template>
        <img src="report_plus.gif" />&nbsp;</td>
        </xsl:if>
        <xsl:for-each select="Columns/Column">
            <xsl:choose>
            <xsl:when test="TemplateId != ''">
                <td width="{$cellWidth * 2}" style="background-color : #ecf576"><b>
                <xsl:value-of select="TemplateId"/><br />
                <xsl:value-of select="Label"/>
                </b></td>
            </xsl:when>
            <xsl:otherwise>
                <td width="{$cellWidth}" style="background-color : #ecf576"><b><xsl:value-of select="Label"/></b></td>
            </xsl:otherwise>
            </xsl:choose>
        </xsl:for-each>
    </tr>
    <xsl:apply-templates select="Rows/Row">
        <xsl:with-param name="treeDepth" select="$treeDepth"/>
        <xsl:with-param name="colorStep" select="0"/>
    </xsl:apply-templates>
</xsl:template>

<xsl:template match="Table">
    
    <xsl:variable name="numberOfColumns" select="NumberOfColumns"/>

    <xsl:variable name="colorStep" >
        <xsl:choose>
                <xsl:when test="(Type = 'RiskMatrixSheet') and current()//DefaultData">
                    <xsl:variable name="maxvalue">
                        <xsl:call-template name="max">
                                <xsl:with-param name="nodes" select="current()//DefaultData"/>
                        </xsl:call-template>
                    </xsl:variable>
                    <xsl:value-of select="$maxvalue div 255" ></xsl:value-of>
                </xsl:when>
                <xsl:otherwise>0</xsl:otherwise>
        </xsl:choose>
    </xsl:variable>

    <table width="{$numberOfColumns * ($cellWidth + 4) + $rowHeaderWidth + 6}" border="1px solid black">
        <tr class="tblhdr" border="1px solid black">
           <xsl:if test="$useLabelColumn">
            <td width="{$rowHeaderWidth}">&nbsp;</td>
            </xsl:if>
            <xsl:for-each select="Columns/Column">
                <xsl:choose>
                <xsl:when test="TemplateId != ''">
                    <td width="{$cellWidth * 2}" style="background-color : #ecf576"><b>
                    <xsl:value-of select="TemplateId"/><br />
                    <xsl:value-of select="Label"/>
                    </b></td>
                </xsl:when>
                <xsl:otherwise>
                    <td width="{$cellWidth}" style="background-color : #ecf576"><b><xsl:value-of select="Label"/></b></td>
                </xsl:otherwise>
                </xsl:choose>
            </xsl:for-each>
        </tr>
        <xsl:apply-templates select="Rows/Row">
            <xsl:with-param name="treeDepth" select="1"/>
            <xsl:with-param name="colorStep" select="$colorStep"/>
        </xsl:apply-templates>
    </table>
    <p/><p/>
</xsl:template>

<xsl:template match="Row">
    <xsl:param name = "treeDepth"/>
    <xsl:param name = "colorStep"/>
    <xsl:variable name="rwId" select="RowId"/>
    <tr class="{concat('cell', $treeDepth)}" depth="{$treeDepth}" border="1px solid black">
        <xsl:if test="$useLabelColumn">
                <td class="row">
                <xsl:call-template name="PrintSpaces">
                        <xsl:with-param name="n" select="($treeDepth - 1) * 6"/>
                </xsl:call-template>
                <xsl:if test="$clickable = '1'">
                        <img src="report_plus.gif"/>
                </xsl:if>
                <xsl:value-of select="Label"/>
                </td>
        </xsl:if>
    <xsl:apply-templates select="Cells/Cell">
        <xsl:with-param name="colorStep" select="$colorStep" />
    </xsl:apply-templates>
    </tr>
    <xsl:if test="ancestor::ReportContents/ChildReports/ChildReport[ChildReportId = $rwId]">
        <xsl:apply-templates select="ancestor::ReportContents/ChildReports/ChildReport[ChildReportId = $rwId]/PRIMEReport/ReportContents/Table" mode="ChildReport">
            <xsl:with-param name="treeDepth" select="$treeDepth +1" />
        </xsl:apply-templates>
    </xsl:if>
    <xsl:apply-templates select="Rows/Row">
        <xsl:with-param name="treeDepth" select="$treeDepth + 1" />
        <xsl:with-param name="colorStep" select="$colorStep" />
    </xsl:apply-templates>
</xsl:template>

<xsl:template match="Cell">
    <xsl:param name = "colorStep"/>
    <td>
         
         <xsl:choose>   
            
            <xsl:when test="Appearance">
                <xsl:attribute name="style">
                
                         <xsl:choose>     
                            <xsl:when test="Appearance/BkgColor">
                                    background-color: <!--rgb( 0, 255 ,255 )-->
                                        <xsl:call-template name="rgbfromint">
                                            <xsl:with-param name="rgbintval" select="Appearance/BkgColor"/>  
                                         </xsl:call-template>
                                         
                            </xsl:when>
                            <xsl:otherwise>
                                background-color: white
                            </xsl:otherwise>
                         </xsl:choose>    
                         
                        <xsl:choose>   
                            <xsl:when test="Appearance/TextColor">
                                    ;color: <!--rgb( 255, 0 ,255 )-->
                                           <xsl:call-template name="rgbfromint">
                                            <xsl:with-param name="rgbintval" select="Appearance/TextColor"/>  
                                         </xsl:call-template>
                            </xsl:when>
                            <xsl:otherwise>
                               ;color: black
                            </xsl:otherwise>
                        </xsl:choose>   
                
                </xsl:attribute>   
            </xsl:when>
            
            <xsl:otherwise>
                <xsl:if test="DefaultData and $colorStep > 0 and string(number(DefaultData)) !='NaN'">
                        <xsl:attribute name="style">background-color:
                                <xsl:call-template name="color">
                                        <xsl:with-param name="colorStep" select="$colorStep"/>
                                        <xsl:with-param name="value" select="DefaultData"/>
                                        
                                </xsl:call-template>
                        </xsl:attribute>
                </xsl:if>
            </xsl:otherwise>
            
        </xsl:choose>
        <xsl:choose>
                <xsl:when test="ValueType and DefaultData">
                        <acronym>
                                <xsl:attribute name="title">
                                        <xsl:value-of select="DefaultData"/>
                                </xsl:attribute>
                        <xsl:call-template name="CellData" />
                        </acronym>
                </xsl:when>
                <xsl:otherwise>
                        <xsl:call-template name="CellData" />
                </xsl:otherwise>
        </xsl:choose>
    </td>
</xsl:template>

<xsl:template name="CellData">
        <xsl:choose>
             
            <xsl:when test="FormattedData">
                <xsl:value-of select="FormattedData"/>
            </xsl:when>
            <xsl:when test="RawData">
                <xsl:choose>
                    <xsl:when test ="contains(RawData, 'http:') or contains(RawData, 'https:')">
                        <xsl:value-of select="RawData " disable-output-escaping="yes"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="RawData"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:when test="DefaultData">
                <xsl:choose>
                        <xsl:when test="ValueType">
                                <xsl:text>#</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                                <xsl:value-of select="DefaultData"/>
                        </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                  <xsl:message terminate="yes"><xsl:text>No dataformat turned on</xsl:text></xsl:message>
            </xsl:otherwise>
            
        </xsl:choose>
</xsl:template>

<xsl:template match="Settings">
    <table border="1px solid black">
    <tr border="1px solid black">
        <xsl:for-each select="Groups/Group">
            <xsl:if test="Label = 'Profit/Loss'">
                <tr class="tblhdr" border="1px solid black">
                <xsl:for-each select="Column">
                    <td class="row" width="{$cellWidth}" style="background-color : #ecf576"><b>
                    <xsl:choose>
                        <xsl:when test="Label != ''">
                            <xsl:value-of select="Label"/>
                        </xsl:when>
                        <xsl:otherwise>
                             <xsl:value-of select="ColumnId"/>
                        </xsl:otherwise>
                    </xsl:choose>
                    </b></td>
                </xsl:for-each>
                </tr>
                <tr class="row" depth="1" border="1px solid black">
                <xsl:for-each select="Cell">
                    <td class="cell1">
                        <xsl:call-template name="CellData" />
                    </td>
                </xsl:for-each>
                </tr>

            </xsl:if>
        </xsl:for-each>
        </tr>
    </table>
    <p/><p/>
</xsl:template>

<xsl:template match="/">
    <html>
        <head>
        <xsl:if test="$autoupdate = '1'">
                <meta http-equiv="REFRESH" content="10"></meta>
        </xsl:if>
        </head>
        <insertcss/>
        <body>
         <p class="headerImage">
            <headerImage/>
        </p>
        <xsl:if test="$clickable = '1'">
                <xsl:attribute name="onload">init()</xsl:attribute>
                <script src="portfolio_report.js" type="text/javascript"></script>
        </xsl:if>

        <!-- Table of contents, only viewed if more than one report -->

        <xsl:if test="/MultiReport">
            <table>
                <xsl:for-each select="/MultiReport/PRIMEReport">
                        <tr><td>
                            <!--<td><xsl:value-of select="Type"/></td>-->
                            <td><xsl:value-of select="Name"/></td>
                            <td><xsl:value-of select="substring(LocalTime,1,10)"/></td>
                        </td></tr>
               </xsl:for-each>
            </table>
        </xsl:if>

        <!-- Reports - ORIGINAL CODE-->
        <xsl:for-each select="/MultiReport/PRIMEReport|/PRIMEReport">
            <h3>
                <!--<xsl:value-of select="Type"/>:&nbsp;--><!--ORIGINAL LINE-->
                <xsl:value-of select="Name"/>&nbsp;
                <br><xsl:value-of select="substring(LocalTime,1,10)"/></br>
                <!--<xsl:value-of select="concat(substring(LocalTime,1,10),' ',substring(LocalTime,12,8),' (UTC', substring(LocalTime,20,6),')')"/>-->
             </h3>

             <xsl:apply-templates select="current()/ReportContents"/>
        </xsl:for-each>
        </body>
    </html>
</xsl:template>

<!-- derived from http://www.exslt.org/math/functions/max/index.html -->
<xsl:template name="max">
   <xsl:param name="nodes" select="/.." />
   <xsl:choose>
      <xsl:when test="not($nodes)">0</xsl:when>
      <xsl:otherwise>
         <xsl:for-each select="$nodes">
            <xsl:sort select="translate(.,'-','')" data-type="number" order="descending" />
            <xsl:if test="position( ) = 1">
               <xsl:value-of select="number(translate(.,'-',''))" />
            </xsl:if>
         </xsl:for-each>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

<xsl:template name="color">
   <xsl:param name="value"/>
   <xsl:param name = "colorStep"/>
   <xsl:variable name="rgbval">
       <xsl:choose>
          <xsl:when test="$value > 0" >
            <xsl:value-of select="255 - round($value div $colorStep)"/>
        </xsl:when>
        <xsl:otherwise>
            <xsl:value-of select="255 - round($value div $colorStep * -1)"/>
        </xsl:otherwise>
       </xsl:choose>

   </xsl:variable>
   <xsl:choose>
        <xsl:when test="$value > 0 and $rgbval &lt; 0">
            <xsl:text>rgb(255,0,0)</xsl:text>
            </xsl:when>
        <xsl:when test="$value &lt; 0 and $rgbval &lt; 0">
            <xsl:text>rgb(0,255,0)</xsl:text>
            </xsl:when>
        <xsl:when test="$value > 0">
            <xsl:value-of select="concat('rgb(',$rgbval,',255,',$rgbval,')')"/>
            </xsl:when>
      <xsl:otherwise>
            <xsl:value-of select="concat('rgb(255,',$rgbval,',',$rgbval,')')"/>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

<xsl:template name="rgbfromint">
        <xsl:param name="rgbintval"/>
        
        <xsl:variable name="redval">
                <xsl:value-of select="$rgbintval mod 256"/>
        </xsl:variable>
        <xsl:variable name="newvalue">
                <xsl:value-of select="floor($rgbintval div 256)"/>
        </xsl:variable>
        <xsl:variable name="greenval">
                <xsl:value-of select="$newvalue mod 256"/>
        </xsl:variable>
        <xsl:variable name="blueval">
                <xsl:value-of select="floor($newvalue div 256)"/>
        </xsl:variable>
        
        <xsl:value-of select="concat( 'rgb(',  $redval,  ',',   $greenval,    ',',   $blueval,  ')'    )"/>
        
        
</xsl:template>

</xsl:stylesheet>

...

  BM_WCOReport
<?xml version='1.0'?>
<!-- &copy; Copyright 2011 SunGard FRONT ARENA
       FStandardTemplate is able to produce colored output for RiskMatrixSheets when DefaultData is turned on
       Added support for Transhist output
-->
<!DOCTYPE xsl:stylesheet [
    <!ENTITY nbsp "<xsl:text>&#160;</xsl:text>">
]>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:param name="clickable" select="0"/>
<xsl:param name="autoupdate" select="0"/>
<xsl:output method="html"/>
<xsl:variable name="cellWidth" select="80"/>
<xsl:variable name="rowHeaderWidth" select="250"/>
<xsl:variable name="useLabelColumn" select="//PRIMEReport/Type !='ASQL Table'"/>

<xsl:template name="PrintSpaces">
  <xsl:param name="n" select="0"/>
  <xsl:if test="$n > 0">
    <xsl:call-template name="PrintSpaces">
      <xsl:with-param name="n" select="$n - 1" />
    </xsl:call-template>
    &nbsp;
  </xsl:if>
</xsl:template>

<xsl:template match="ReportContents">
     <xsl:apply-templates select="Table"/>
</xsl:template>

<xsl:template match="Table">
    
    <xsl:variable name="numberOfColumns" select="NumberOfColumns"/>
    <tr class="tblhdr" depth="{$treeDepth}" border="1px solid black">
       <xsl:if test="$useLabelColumn">
        <td width="{$rowHeaderWidth}">
            <xsl:call-template name="PrintSpaces">
                <xsl:with-param name="n" select="($treeDepth -1) * 6"/>
            </xsl:call-template>
        <img src="report_plus.gif" />&nbsp;</td>
        </xsl:if>
        <xsl:for-each select="Columns/Column">
            <xsl:choose>
            <xsl:when test="TemplateId != ''">
                <td width="{$cellWidth * 2}" style="background-color : #ecf576"><b>
                <xsl:value-of select="TemplateId"/><br />
                <xsl:value-of select="Label"/>
                </b></td>
            </xsl:when>
            <xsl:otherwise>
                <td width="{$cellWidth}" style="background-color : #ecf576"><b><xsl:value-of select="Label"/></b></td>
            </xsl:otherwise>
            </xsl:choose>
        </xsl:for-each>
    </tr>
    <xsl:apply-templates select="Rows/Row">
        <xsl:with-param name="treeDepth" select="$treeDepth"/>
        <xsl:with-param name="colorStep" select="0"/>
    </xsl:apply-templates>
</xsl:template>

<xsl:template match="Table">
    
    <xsl:variable name="numberOfColumns" select="NumberOfColumns"/>

    <xsl:variable name="colorStep" >
        <xsl:choose>
                <xsl:when test="(Type = 'RiskMatrixSheet') and current()//DefaultData">
                    <xsl:variable name="maxvalue">
                        <xsl:call-template name="max">
                                <xsl:with-param name="nodes" select="current()//DefaultData"/>
                        </xsl:call-template>
                    </xsl:variable>
                    <xsl:value-of select="$maxvalue div 255" ></xsl:value-of>
                </xsl:when>
                <xsl:otherwise>0</xsl:otherwise>
        </xsl:choose>
    </xsl:variable>

    <table width="{$numberOfColumns * ($cellWidth + 4) + $rowHeaderWidth + 6}" border="1px solid black">
        <tr class="tblhdr" border="1px solid black">
           <xsl:if test="$useLabelColumn">
            <td width="{$rowHeaderWidth}">&nbsp;</td>
            </xsl:if>
            <xsl:for-each select="Columns/Column">
                <xsl:choose>
                <xsl:when test="TemplateId != ''">
                    <td width="{$cellWidth * 2}" style="background-color : #ecf576"><b>
                    <xsl:value-of select="TemplateId"/><br />
                    <xsl:value-of select="Label"/>
                    </b></td>
                </xsl:when>
                <xsl:otherwise>
                    <td width="{$cellWidth}" style="background-color : #ecf576"><b><xsl:value-of select="Label"/></b></td>
                </xsl:otherwise>
                </xsl:choose>
            </xsl:for-each>
        </tr>
        <xsl:apply-templates select="Rows/Row">
            <xsl:with-param name="treeDepth" select="1"/>
            <xsl:with-param name="colorStep" select="$colorStep"/>
        </xsl:apply-templates>
    </table>
    <p/><p/>
</xsl:template>

<xsl:template match="Row">
    <xsl:param name = "treeDepth"/>
    <xsl:param name = "colorStep"/>
    <xsl:variable name="rwId" select="RowId"/>
    <tr class="{concat('cell', $treeDepth)}" depth="{$treeDepth}" border="1px solid black">
        <xsl:if test="$useLabelColumn">
                <td class="row">
                <xsl:call-template name="PrintSpaces">
                        <xsl:with-param name="n" select="($treeDepth - 1) * 6"/>
                </xsl:call-template>
                <xsl:if test="$clickable = '1'">
                        <img src="report_plus.gif"/>
                </xsl:if>
                <xsl:value-of select="Label"/>
                </td>
        </xsl:if>
    <xsl:apply-templates select="Cells/Cell">
        <xsl:with-param name="colorStep" select="$colorStep" />
    </xsl:apply-templates>
    </tr>
    <xsl:if test="ancestor::ReportContents/ChildReports/ChildReport[ChildReportId = $rwId]">
        <xsl:apply-templates select="ancestor::ReportContents/ChildReports/ChildReport[ChildReportId = $rwId]/PRIMEReport/ReportContents/Table" mode="ChildReport">
            <xsl:with-param name="treeDepth" select="$treeDepth +1" />
        </xsl:apply-templates>
    </xsl:if>
    <xsl:apply-templates select="Rows/Row">
        <xsl:with-param name="treeDepth" select="$treeDepth + 1" />
        <xsl:with-param name="colorStep" select="$colorStep" />
    </xsl:apply-templates>
</xsl:template>

<xsl:template match="Cell">
    <xsl:param name = "colorStep"/>
    <td>
         
         <xsl:choose>   
            
            <xsl:when test="Appearance">
                <xsl:attribute name="style">
                
                         <xsl:choose>     
                            <xsl:when test="Appearance/BkgColor">
                                    background-color: <!--rgb( 0, 255 ,255 )-->
                                        <xsl:call-template name="rgbfromint">
                                            <xsl:with-param name="rgbintval" select="Appearance/BkgColor"/>  
                                         </xsl:call-template>
                                         
                            </xsl:when>
                            <xsl:otherwise>
                                background-color: white
                            </xsl:otherwise>
                         </xsl:choose>    
                         
                        <xsl:choose>   
                            <xsl:when test="Appearance/TextColor">
                                    ;color: <!--rgb( 255, 0 ,255 )-->
                                           <xsl:call-template name="rgbfromint">
                                            <xsl:with-param name="rgbintval" select="Appearance/TextColor"/>  
                                         </xsl:call-template>
                            </xsl:when>
                            <xsl:otherwise>
                               ;color: black
                            </xsl:otherwise>
                        </xsl:choose>   
                
                </xsl:attribute>   
            </xsl:when>
            
            <xsl:otherwise>
                <xsl:if test="DefaultData and $colorStep > 0 and string(number(DefaultData)) !='NaN'">
                        <xsl:attribute name="style">background-color:
                                <xsl:call-template name="color">
                                        <xsl:with-param name="colorStep" select="$colorStep"/>
                                        <xsl:with-param name="value" select="DefaultData"/>
                                        
                                </xsl:call-template>
                        </xsl:attribute>
                </xsl:if>
            </xsl:otherwise>
            
        </xsl:choose>
        <xsl:choose>
                <xsl:when test="ValueType and DefaultData">
                        <acronym>
                                <xsl:attribute name="title">
                                        <xsl:value-of select="DefaultData"/>
                                </xsl:attribute>
                        <xsl:call-template name="CellData" />
                        </acronym>
                </xsl:when>
                <xsl:otherwise>
                        <xsl:call-template name="CellData" />
                </xsl:otherwise>
        </xsl:choose>
    </td>
</xsl:template>

<xsl:template name="CellData">
        <xsl:choose>
             
            <xsl:when test="FormattedData">
                <xsl:value-of select="FormattedData"/>
            </xsl:when>
            <xsl:when test="RawData">
                <xsl:choose>
                    <xsl:when test ="contains(RawData, 'http:') or contains(RawData, 'https:')">
                        <xsl:value-of select="RawData " disable-output-escaping="yes"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="RawData"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:when test="DefaultData">
                <xsl:choose>
                        <xsl:when test="ValueType">
                                <xsl:text>#</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                                <xsl:value-of select="DefaultData"/>
                        </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                  <xsl:message terminate="yes"><xsl:text>No dataformat turned on</xsl:text></xsl:message>
            </xsl:otherwise>
            
        </xsl:choose>
</xsl:template>

<xsl:template match="Settings">
    <table border="1px solid black">
    <tr border="1px solid black">
        <xsl:for-each select="Groups/Group">
            <xsl:if test="Label = 'Profit/Loss'">
                <tr class="tblhdr" border="1px solid black">
                <xsl:for-each select="Column">
                    <td class="row" width="{$cellWidth}" style="background-color : #ecf576"><b>
                    <xsl:choose>
                        <xsl:when test="Label != ''">
                            <xsl:value-of select="Label"/>
                        </xsl:when>
                        <xsl:otherwise>
                             <xsl:value-of select="ColumnId"/>
                        </xsl:otherwise>
                    </xsl:choose>
                    </b></td>
                </xsl:for-each>
                </tr>
                <tr class="row" depth="1" border="1px solid black">
                <xsl:for-each select="Cell">
                    <td class="cell1">
                        <xsl:call-template name="CellData" />
                    </td>
                </xsl:for-each>
                </tr>

            </xsl:if>
        </xsl:for-each>
        </tr>
    </table>
    <p/><p/>
</xsl:template>

<xsl:template match="/">
    <html>
        <head>
        <xsl:if test="$autoupdate = '1'">
                <meta http-equiv="REFRESH" content="10"></meta>
        </xsl:if>
        </head>
        <insertcss/>
        <body>
         <p class="headerImage">
            <headerImage/>
        </p>
        <xsl:if test="$clickable = '1'">
                <xsl:attribute name="onload">init()</xsl:attribute>
                <script src="portfolio_report.js" type="text/javascript"></script>
        </xsl:if>

        <!-- Table of contents, only viewed if more than one report -->

        <xsl:if test="/MultiReport">
            <table>
                <xsl:for-each select="/MultiReport/PRIMEReport">
                        <tr><td>
                            <!--<td><xsl:value-of select="Type"/></td>-->
                            <td><xsl:value-of select="Name"/></td>
                            <td><xsl:value-of select="substring(LocalTime,1,10)"/></td>
                        </td></tr>
               </xsl:for-each>
            </table>
        </xsl:if>

        <!-- Reports - ORIGINAL CODE-->
        <xsl:for-each select="/MultiReport/PRIMEReport|/PRIMEReport">
            <h3>
                <!--<xsl:value-of select="Type"/>:&nbsp;--><!--ORIGINAL LINE-->
                <xsl:value-of select="Name"/>&nbsp;
                <br><xsl:value-of select="substring(LocalTime,1,10)"/></br>
                <!--<xsl:value-of select="concat(substring(LocalTime,1,10),' ',substring(LocalTime,12,8),' (UTC', substring(LocalTime,20,6),')')"/>-->
             </h3>

             <xsl:apply-templates select="current()/ReportContents"/>
        </xsl:for-each>
        </body>
    </html>
</xsl:template>

<!-- derived from http://www.exslt.org/math/functions/max/index.html -->
<xsl:template name="max">
   <xsl:param name="nodes" select="/.." />
   <xsl:choose>
      <xsl:when test="not($nodes)">0</xsl:when>
      <xsl:otherwise>
         <xsl:for-each select="$nodes">
            <xsl:sort select="translate(.,'-','')" data-type="number" order="descending" />
            <xsl:if test="position( ) = 1">
               <xsl:value-of select="number(translate(.,'-',''))" />
            </xsl:if>
         </xsl:for-each>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

<xsl:template name="color">
   <xsl:param name="value"/>
   <xsl:param name = "colorStep"/>
   <xsl:variable name="rgbval">
       <xsl:choose>
          <xsl:when test="$value > 0" >
            <xsl:value-of select="255 - round($value div $colorStep)"/>
        </xsl:when>
        <xsl:otherwise>
            <xsl:value-of select="255 - round($value div $colorStep * -1)"/>
        </xsl:otherwise>
       </xsl:choose>

   </xsl:variable>
   <xsl:choose>
        <xsl:when test="$value > 0 and $rgbval &lt; 0">
            <xsl:text>rgb(255,0,0)</xsl:text>
            </xsl:when>
        <xsl:when test="$value &lt; 0 and $rgbval &lt; 0">
            <xsl:text>rgb(0,255,0)</xsl:text>
            </xsl:when>
        <xsl:when test="$value > 0">
            <xsl:value-of select="concat('rgb(',$rgbval,',255,',$rgbval,')')"/>
            </xsl:when>
      <xsl:otherwise>
            <xsl:value-of select="concat('rgb(255,',$rgbval,',',$rgbval,')')"/>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

<xsl:template name="rgbfromint">
        <xsl:param name="rgbintval"/>
        
        <xsl:variable name="redval">
                <xsl:value-of select="$rgbintval mod 256"/>
        </xsl:variable>
        <xsl:variable name="newvalue">
                <xsl:value-of select="floor($rgbintval div 256)"/>
        </xsl:variable>
        <xsl:variable name="greenval">
                <xsl:value-of select="$newvalue mod 256"/>
        </xsl:variable>
        <xsl:variable name="blueval">
                <xsl:value-of select="floor($newvalue div 256)"/>
        </xsl:variable>
        
        <xsl:value-of select="concat( 'rgb(',  $redval,  ',',   $greenval,    ',',   $blueval,  ')'    )"/>
        
        
</xsl:template>

</xsl:stylesheet>

...

  CSVDataTemplate
<?xml version='1.0'?>
<!DOCTYPE xsl:stylesheet [
  <!ENTITY comma "<xsl:text>&#59;</xsl:text>">
  <!ENTITY lf "<xsl:text>&#10;</xsl:text>">
]>


<!-- First line of every sheet would be an empty line -->
<!-- Followed by column names (No group labels)  -->
<!-- Format would closely resemble Trading manager screen -->

<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:output method="text" encoding="UTF-8"/>
<xsl:strip-space elements="*"/>

<xsl:template match="/">
    <xsl:for-each select="//PRIMEReport">                         
            &lf;
            <xsl:apply-templates select="current()/ReportContents"/>             
     </xsl:for-each>     
</xsl:template>

<xsl:template match="Table">
    <xsl:for-each select="Columns/Column">
        <xsl:value-of select="Label"/>&comma;
    </xsl:for-each>
    &lf;
    <xsl:apply-templates select="Rows/Row"/>
</xsl:template>

<xsl:template match="Row">
    <xsl:value-of select="Label"/>&comma;
    <xsl:for-each select="Cells/Cell">
        <xsl:call-template name="CellData" />&comma;
    </xsl:for-each>
    &lf;
    <xsl:apply-templates select="Rows/Row"/>
</xsl:template>


<xsl:template name="CellData">
        <xsl:choose>
            <xsl:when test="FormattedData">
                <xsl:value-of select="FormattedData"/>
            </xsl:when>
            <xsl:when test="RawData">
                <xsl:value-of select="RawData"/>
            </xsl:when>
            <xsl:when test="DefaultData">
                <xsl:value-of select="DefaultData"/>
            </xsl:when>
            <xsl:otherwise>
            <xsl:message terminate="yes"><xsl:text>No dataformat turned on</xsl:text></xsl:message>
            </xsl:otherwise>
        </xsl:choose>
</xsl:template>

</xsl:stylesheet>


...

  FLandscapePDF
<?xml version="1.0"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:FA="http://www.frontarena.com/arena/primereport">                
                <!-- If there are more columns than this value they will not be included in the output document -->
                <xsl:output encoding="US-ASCII"/> 
                <xsl:variable name="maxNrOfColumns" select="30"/>   
                <xsl:variable name="numberOfColumns" select="30"/>
                <xsl:variable name="isMultiReport" select="count(/MultiReport)"/> 
                <xsl:variable name="colWidth" select="3"/>
                <xsl:variable name="colWidth2" select="9 - (($maxNrOfColumns - 1)*0.1)"/>
                <xsl:variable name="page-width" select="($colWidth * ($numberOfColumns +1))"/>
                    
    <xsl:template match="/">
        <fo:root>
            <fo:layout-master-set>
                <fo:simple-page-master margin-right="1cm" margin-left="1cm" margin-bottom="1.3cm" margin-top="1cm" page-width="300cm" page-height="21cm" master-name="first">
                    <fo:region-body margin-top="1.5cm" margin-bottom="1.5cm"/>
                    <fo:region-before extent="2cm"/>
                    <fo:region-after extent="1.5cm"/>
                </fo:simple-page-master>
            </fo:layout-master-set>
            <fo:page-sequence master-reference="first">
                <fo:static-content flow-name="xsl-region-before">
                    <fo:block text-align-last="justify" font-size="10pt">
                        <xsl:choose>
                        <!-- Multiple reports in document -->
                        <xsl:when test="$isMultiReport = '1'">
                            <fo:inline>
                                    Multiple Report
                            </fo:inline>
                            <fo:leader/>
                        </xsl:when>
                        <!-- Only one report in document -->
                        <xsl:otherwise>      
                            <fo:inline>
                                <xsl:value-of select="//Type"/>
                            </fo:inline>
                            <fo:leader/>
                            <fo:inline>
                                    <xsl:value-of select="//Name"/>
                            </fo:inline>    
                        </xsl:otherwise>
                        </xsl:choose>                                                                       
                    </fo:block>
                    <fo:block>
                        <fo:leader leader-length="100%" leader-pattern="rule" rule-thickness="1pt"/>
                    </fo:block>
                </fo:static-content>
                
                <fo:static-content flow-name="xsl-region-after">
                    <fo:block>
                        <fo:leader leader-length="100%" leader-pattern="rule" rule-thickness="1pt"/>
                    </fo:block>
                    <fo:block text-align-last="justify" font-size="10pt">                                                                                                 
                        <!-- Only one report in document -->
                        <xsl:if test="$isMultiReport = '0'">
                            <fo:inline>
                                <xsl:value-of select="concat(substring(//LocalTime[1],1,10),' ',substring(//LocalTime[1],12,8),' (UTC', substring(//LocalTime[1],20,6),')')"/>
                            </fo:inline>
                        </xsl:if>
                        <fo:leader/>
                        <fo:inline>
                            Page <fo:page-number/>                          
                        </fo:inline>                        
                    </fo:block>                                     
                </fo:static-content>
                                                                
                <fo:flow flow-name="xsl-region-body">
                     
                    <xsl:if test="$isMultiReport = '1'">                                                                     
                        <!-- Multiple reports in document -->
                        <!-- List of reports -->                                                                                                                                                                                                                                                                                       
                        <fo:table table-layout="fixed" width="100%">
                        <fo:table-column column-width="6cm"/>         
                        <fo:table-column column-width="12cm"/>         
                        <fo:table-column column-width="6cm"/>                                                                             
                        <fo:table-body>
                        <xsl:for-each select="//PRIMEReport">                                                                        
                            <fo:table-row>                                                                                    
                                <fo:table-cell>
                                    <fo:block line-height="14pt" font-size="8pt"><xsl:value-of select="Type"/></fo:block>
                                </fo:table-cell>
                                <fo:table-cell>
                                    <fo:block line-height="14pt" font-size="8pt"><xsl:value-of select="Name"/></fo:block>
                                </fo:table-cell>
                                <fo:table-cell>
                                    <fo:block line-height="14pt" font-size="8pt"><xsl:value-of select="concat(substring(LocalTime,1,10),' ',substring(LocalTime,12,8),' (UTC', substring(LocalTime,20,6),')')"/></fo:block>
                                </fo:table-cell>
                            </fo:table-row>
                        </xsl:for-each> 
                        </fo:table-body>                                                                                   
                        </fo:table>                                                                    
                    </xsl:if>
                    
                    <xsl:apply-templates/>
                </fo:flow>
            </fo:page-sequence>
        </fo:root>
    </xsl:template>
    <xsl:template match="Table">
        <xsl:comment> Variables used to set columns widths, depending on how many columns there are. </xsl:comment>
        <xsl:variable name="numberOfColumns" select="count(Columns/Column)"/>                                   
        <!-- <xsl:variable name="colWidth" select="3.5 - (($numberOfColumns - 1)*0.15)"/> -->
        <!-- <xsl:variable name="colWidth2" select="3.5 - (($maxNrOfColumns - 1)*0.15)"/> -->

        <fo:block space-before="1cm"/>
                
        <xsl:if test="$isMultiReport = '1'"> 
        <!-- Multiple reports in document -->
            <fo:block line-height="14pt" font-size="8pt">
               <!-- Report header -->
                <xsl:value-of select="./../../Type"/>
                <xsl:text>:   </xsl:text>
                <xsl:value-of select="./../../Name"/> 
                <xsl:text>   </xsl:text>
                <xsl:value-of select="concat(substring(../../LocalTime,1,10),' ',substring(../../LocalTime,12,8),' (UTC', substring(../../LocalTime,20,6),')')"/>                                        
            </fo:block>                                                                
        </xsl:if>
        
        <fo:table table-layout="fixed" width="100%">
            <fo:table-column column-width="3.5cm"/>
            <xsl:for-each select="Columns/Column[position()]">
               <xsl:choose>
                    <xsl:when test="$numberOfColumns > $maxNrOfColumns">                                                                    
                        <fo:table-column column-width="{$colWidth2}cm"/>
                    </xsl:when>
                    <xsl:otherwise>                                                                    
                        <fo:table-column column-width="{$colWidth}cm"/>
                    </xsl:otherwise>
                    </xsl:choose>                                                                
            </xsl:for-each>
            <fo:table-header>
                <fo:table-row>
                    <fo:table-cell background-color="#cccccc">
                        <fo:block font-weight="bold" text-align="center" vertical-align="middle" border-width="1pt" border-color="black" background-color="#cccccc">
                        
                        </fo:block>
                    </fo:table-cell>
                    <xsl:for-each select="Columns/Column[position()]">                                                                                                
                        <fo:table-cell>
                            <fo:block font-size="8pt" font-weight="bold" text-align="right" vertical-align="middle" border-width="1pt" border-color="black" background-color="#cccccc">                                                                                                                    
                                                                                                                    <xsl:if test="position() &lt;= $maxNrOfColumns">
                                                                                                                        <xsl:value-of select="Label"/>
                                                                                                                    </xsl:if>                                                                                                                    
                            </fo:block>
                        </fo:table-cell>
                    </xsl:for-each>
                </fo:table-row>
            </fo:table-header>
            <fo:table-body>
                <xsl:apply-templates select="Rows/Row">
                    <xsl:with-param name="treeDepth" select="1"/>
                </xsl:apply-templates>
            </fo:table-body>
        </fo:table>
    </xsl:template>
    <xsl:template match="Row">                      
        <xsl:param name="treeDepth"/>
        <xsl:if test="$treeDepth='1'">
            <fo:table-row>
                <fo:table-cell>
                    <fo:block>
                         <fo:leader/>
                    </fo:block>
                </fo:table-cell>    
            </fo:table-row>
        </xsl:if>
        <fo:table-row>
            <xsl:if test="$treeDepth='1'">
                <xsl:attribute name="font-weight">bold</xsl:attribute>
            </xsl:if>
            <fo:table-cell>
                <xsl:attribute name="padding-left"><xsl:value-of select="($treeDepth - 1) * 6"/>pt
                </xsl:attribute>
                <fo:block font-weight="bold" border-right-width="0.5pt" text-align="left" vertical-align="middle" font-size="8pt">
                    <xsl:value-of select="Label"/>
                </fo:block>
            </fo:table-cell>
            <xsl:for-each select="Cells/Cell">
                                                        <xsl:if test="position() &lt;= $maxNrOfColumns">
                <fo:table-cell>
                    <fo:block border-right-width="0.5pt" text-align="right" vertical-align="middle" font-size="8pt">
                        <xsl:if test="$treeDepth='1'">
                            <xsl:attribute name="font-weight">bold</xsl:attribute>
                        </xsl:if>
                        <xsl:value-of select="FormattedData"/>
                    </fo:block>
                </fo:table-cell>
                                                        </xsl:if>
            </xsl:for-each>
        </fo:table-row>
        <xsl:apply-templates select="Rows/Row">
            <xsl:with-param name="treeDepth" select="$treeDepth + 1"/>
        </xsl:apply-templates>
    </xsl:template>
</xsl:stylesheet>

...

  FTABTemplate_Custom_ICT
<?xml version='1.0'?>
<!DOCTYPE xsl:stylesheet [
  <!ENTITY tab "<xsl:text>&#9;</xsl:text>">
  <!ENTITY lf "<xsl:text>&#10;</xsl:text>">
]>

<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:output method="text" encoding="UTF-8"/>
<xsl:strip-space elements="*"/>

<xsl:template match="/">
        
<!-- Reports -->
    <xsl:for-each select="//PRIMEReport">                         
            Type:&tab;<xsl:value-of select="current()/Type"/>&lf;
            Name:&tab;<xsl:value-of select="current()/Name"/>&lf;
            Time:&tab;<xsl:value-of select="concat(substring(LocalTime,1,10),' ',substring(LocalTime,12,8),' (UTC', substring(LocalTime,20,6),')')"/>&lf;
            <xsl:apply-templates select="current()/ReportContents"/>             
     </xsl:for-each>     
</xsl:template>

<xsl:template match="Table">
Table name:&tab;<xsl:value-of select="Name"/>&lf;
&tab;
<xsl:for-each select="Columns/Column">
    <xsl:value-of select="Label"/>&tab;
</xsl:for-each>
&lf;
<xsl:apply-templates select="Rows/Row"/>
</xsl:template>

<xsl:template match="Row">
    <xsl:value-of select="Label"/>&tab;
    <xsl:for-each select="Cells/Cell">
        <xsl:call-template name="CellData" />&tab;
    </xsl:for-each>
    &lf;
    <xsl:apply-templates select="Rows/Row"/>
</xsl:template>

<xsl:template name="CellData">
        <xsl:choose>
            <xsl:when test="FormattedData">
                <xsl:value-of select="FormattedData"/>
            </xsl:when>
            <xsl:when test="RawData">
                <xsl:value-of select="RawData"/>
            </xsl:when>
            <xsl:when test="DefaultData">
                <xsl:value-of select="DefaultData"/>
            </xsl:when>
            <xsl:otherwise>
            <xsl:message terminate="yes"><xsl:text>No dataformat turned on</xsl:text></xsl:message>
            </xsl:otherwise>
        </xsl:choose>
</xsl:template>

</xsl:stylesheet>

...

  FTABTemplate_Custom_ICT_Punya_Joshua
<?xml version='1.0'?>
<!DOCTYPE xsl:stylesheet [
  <!ENTITY tab "<xsl:text>&#9;</xsl:text>">
  <!ENTITY lf "<xsl:text>&#10;</xsl:text>">
]>

<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:output method="text" encoding="UTF-8"/>
<xsl:strip-space elements="*"/>

<xsl:template match="/">
        
<!-- Reports -->
    <xsl:for-each select="//PRIMEReport">                         
            Type:&tab;<xsl:value-of select="current()/Type"/>&lf;
            Names:&tab;<xsl:value-of select="current()/Name"/>&lf;
            Time:&tab;<xsl:value-of select="concat(substring(LocalTime,1,10),' ',substring(LocalTime,12,8),' (UTC', substring(LocalTime,20,6),')')"/>&lf;
            <xsl:apply-templates select="current()/ReportContents"/>             
     </xsl:for-each>     
</xsl:template>

<xsl:template match="Table">
Table name:&tab;<xsl:value-of select="Name"/>&lf;
&tab;
<xsl:for-each select="Columns/Column">
    <xsl:value-of select="Label"/>&tab;
</xsl:for-each>
&lf;
    <xsl:apply-templates select="Rows/Row"/>
</xsl:template>

<xsl:template match="Row">
    <xsl:if test="count(ancestor::Row) = 1">
        <xsl:value-of select="Label"/>&tab;
        <xsl:for-each select="Cells/Cell">
            <xsl:call-template name="CellData" />&tab;
        </xsl:for-each>
        &lf;
    </xsl:if>
        <xsl:apply-templates select="Rows/Row"/>
</xsl:template>

<xsl:template name="CellData">
        <xsl:choose>
            <xsl:when test="FormattedData">
                <xsl:value-of select="FormattedData"/>
            </xsl:when>
            <xsl:when test="RawData">
                <xsl:value-of select="RawData"/>
            </xsl:when>
            <xsl:when test="DefaultData">
                <xsl:value-of select="DefaultData"/>
            </xsl:when>
            <xsl:otherwise>
            <xsl:message terminate="yes"><xsl:text>No dataformat turned on</xsl:text></xsl:message>
            </xsl:otherwise>
        </xsl:choose>
</xsl:template>

</xsl:stylesheet>

...

  FTABTemplate_Custom_ICTNOGRUP
<?xml version='1.0'?>
<!DOCTYPE xsl:stylesheet [
  <!ENTITY tab "<xsl:text>&#9;</xsl:text>">
  <!ENTITY lf "<xsl:text>&#10;</xsl:text>">
]>

<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:output method="text" encoding="UTF-8"/>
<xsl:strip-space elements="*"/>

<xsl:template match="/">
        
<!-- Reports -->
    <xsl:for-each select="//PRIMEReport">                         
            Type:&tab;<xsl:value-of select="current()/Type"/>&lf;
            Names:&tab;<xsl:value-of select="current()/Name"/>&lf;
            Time:&tab;<xsl:value-of select="concat(substring(LocalTime,1,10),' ',substring(LocalTime,12,8),' (UTC', substring(LocalTime,20,6),')')"/>&lf;
            <xsl:apply-templates select="current()/ReportContents"/>             
     </xsl:for-each>     
</xsl:template>

<xsl:template match="Table">
Table name:&tab;<xsl:value-of select="Name"/>&lf;
&tab;
<xsl:for-each select="Columns/Column">
    <xsl:value-of select="Label"/>&tab;
</xsl:for-each>
&lf;
    <xsl:apply-templates select="Rows/Row"/>
</xsl:template>

<xsl:template match="Row">
    <xsl:if test="count(ancestor::Row) = 1">
        <xsl:value-of select="Label"/>&tab;
        <xsl:for-each select="Cells/Cell">
            <xsl:call-template name="CellData" />&tab;
        </xsl:for-each>
        &lf;
    </xsl:if>
        <xsl:apply-templates select="Rows/Row"/>
</xsl:template>

<xsl:template name="CellData">
        <xsl:choose>
            <xsl:when test="FormattedData">
                <xsl:value-of select="FormattedData"/>
            </xsl:when>
            <xsl:when test="RawData">
                <xsl:value-of select="RawData"/>
            </xsl:when>
            <xsl:when test="DefaultData">
                <xsl:value-of select="DefaultData"/>
            </xsl:when>
            <xsl:otherwise>
            <xsl:message terminate="yes"><xsl:text>No dataformat turned on</xsl:text></xsl:message>
            </xsl:otherwise>
        </xsl:choose>
</xsl:template>

</xsl:stylesheet>

...

  Generate_PDF
<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:xalan="http://xml.apache.org/xalan" exclude-result-prefixes="xalan">

    <!-- If there are more columns than this value they will not be included in the output document -->
    <xsl:output encoding="US-ASCII"/>
    <xsl:variable name="maxNrOfColumns" select="100"/>
    <xsl:variable name="isMultiReport" select="count(/MultiReport)"/>

    <xsl:template match="/">
        <fo:root>
            <fo:layout-master-set>
                <!-- numberOfColumns ini harus di dalem xsl:template, entah itu match="Table" ataupun match="/" -->
                <xsl:variable name="numberOfColumns" select="count(//Column)"/>
                <xsl:choose>
                <!-- KALO JUMLAH KOLOMNYA KURANG DARI ATAU SAMA DENGAN 10 -->
                <xsl:when test="$numberOfColumns &lt;= 10">
                    <fo:simple-page-master margin-right="1cm" margin-left="1cm" margin-bottom="1.3cm" margin-top="1cm" page-width="30cm" page-height="29.7cm" master-name="first">
                    <fo:region-body margin-top="1.5cm" margin-bottom="1.5cm"/>
                    <fo:region-before extent="2cm"/>
                    <fo:region-after extent="1.5cm"/>
                </fo:simple-page-master>
                </xsl:when>
                <!-- KALO JUMLAH KOLOMNYA KURANG DARI ATAU SAMA DENGAN 20 -->
                <xsl:when test="$numberOfColumns &lt;= 20">
                    <fo:simple-page-master margin-right="1cm" margin-left="1cm" margin-bottom="1.3cm" margin-top="1cm" page-width="60cm" page-height="29.7cm" master-name="first">
                    <fo:region-body margin-top="1.5cm" margin-bottom="1.5cm"/>
                    <fo:region-before extent="2cm"/>
                    <fo:region-after extent="1.5cm"/>
                </fo:simple-page-master>
                </xsl:when>
                <!-- KALO JUMLAH KOLOMNYA LEBIH DARI 20 -->
                <xsl:otherwise>
                    <fo:simple-page-master margin-right="1cm" margin-left="1cm" margin-bottom="1.3cm" margin-top="1cm" page-width="125cm" page-height="29.7cm" master-name="first">
                    <fo:region-body margin-top="1.5cm" margin-bottom="1.5cm"/>
                    <fo:region-before extent="2cm"/>
                    <fo:region-after extent="1.5cm"/>
                </fo:simple-page-master>
                </xsl:otherwise>
               </xsl:choose>

            </fo:layout-master-set>
            <fo:page-sequence master-reference="first">
                <fo:static-content flow-name="xsl-region-before">
                    <fo:block text-align-last="justify" font-size="10pt">
                        <xsl:choose>
                        <!-- Multiple reports in document -->
                        <xsl:when test="$isMultiReport = '1'">
                            <fo:inline>
                                    Multiple Report
                            </fo:inline>
                            <fo:leader/>
                        </xsl:when>
                        <!-- Only one report in document -->
                        <xsl:otherwise>
                        <fo:inline>
                            <xsl:value-of select="//Type"/>
                                </fo:inline>
                                <fo:leader/>
                                <fo:inline>
                                        <xsl:value-of select="//Name"/>
                                </fo:inline>
                        </xsl:otherwise>
                        </xsl:choose>
                    </fo:block>
                    <fo:block>
                        <fo:leader leader-length="100%" leader-pattern="rule" rule-thickness="1pt"/>
                    </fo:block>
                </fo:static-content>

                <fo:static-content flow-name="xsl-region-after">
                    <fo:block>
                        <fo:leader leader-length="100%" leader-pattern="rule" rule-thickness="1pt"/>
                    </fo:block>
                    <fo:block text-align-last="justify" font-size="10pt">
                        <!-- Only one report in document -->
                        <xsl:if test="$isMultiReport = '0'">
                            <fo:inline>
                                    <xsl:value-of select="concat(substring(//LocalTime[1],1,10),' ',substring(//LocalTime[1],12,8),' (UTC', substring(//LocalTime[1],20,6),')')"/>
                            </fo:inline>
                        </xsl:if>
                        <fo:leader/>
                        <fo:inline>
                            Page <fo:page-number/>
                        </fo:inline>
                    </fo:block>
                </fo:static-content>

                <fo:flow flow-name="xsl-region-body">

                    <xsl:if test="$isMultiReport = '1'">
                        <!-- Multiple reports in document -->
                        <!-- List of reports -->
                        <fo:table margin-bottom="50px" text-align="center" display-align="center" inline-progression-dimension="auto" table-layout="auto">
                        <fo:table-body>
                        <xsl:for-each select="//PRIMEReport">
                            <fo:table-row>
                                <fo:table-cell>
                                    <fo:block line-height="14pt" font-size="8pt"><xsl:value-of select="Type"/></fo:block>
                                </fo:table-cell>
                                <fo:table-cell>
                                    <fo:block line-height="14pt" font-size="8pt"><xsl:value-of select="Name"/></fo:block>
                                </fo:table-cell>
                                <fo:table-cell>
                                    <fo:block line-height="14pt" font-size="8pt"><xsl:value-of select="concat(substring(LocalTime,1,10),' ',substring(LocalTime,12,8),' (UTC', substring(LocalTime,20,6),')')"/></fo:block>
                                </fo:table-cell>
                            </fo:table-row>
                        </xsl:for-each>
                        </fo:table-body>
                        </fo:table>
                    </xsl:if>

                    <xsl:apply-templates/>
                </fo:flow>
            </fo:page-sequence>
        </fo:root>
    </xsl:template>
    <xsl:template match="Table">

        <xsl:comment> Variables used to set columns widths, depending on how many columns there are. </xsl:comment>
        <fo:block space-before="1cm"/>

        <xsl:if test="$isMultiReport = '1'">
        <!-- Multiple reports in document -->
            <fo:block line-height="14pt" font-size="8pt">
               <!-- Report header -->
                <xsl:value-of select="./../../Type"/>
                <xsl:text>:   </xsl:text>
                <xsl:value-of select="./../../Name"/>
                <xsl:text>   </xsl:text>
                <xsl:value-of select="concat(substring(../../LocalTime,1,10),' ',substring(../../LocalTime,12,8),' (UTC', substring(../../LocalTime,20,6),')')"/>
            </fo:block>
        </xsl:if>

        <fo:table margin-bottom="50px" text-align="center" display-align="center" inline-progression-dimension="auto" table-layout="auto">
            <fo:table-header>
                <fo:table-row>
                    <fo:table-cell background-color="#cccccc">
                        <fo:block font-weight="bold" text-align="left" vertical-align="middle" border-width="1pt" border-color="black" background-color="#cccccc">

                        </fo:block>
                    </fo:table-cell>
                    <xsl:for-each select="Columns/Column[position()]">
                        <fo:table-cell>
                            <fo:block font-size="6pt" font-weight="bold" text-align="left" vertical-align="middle" border-width="1pt" border-color="black" background-color="#cccccc">
                                <xsl:if test="position() &lt;= $maxNrOfColumns">
                                    <xsl:value-of select="Label"/>
                                </xsl:if>
                            </fo:block>
                        </fo:table-cell>
                    </xsl:for-each>
                </fo:table-row>
            </fo:table-header>
            <fo:table-body>
                <xsl:apply-templates select="Rows/Row">
                    <xsl:with-param name="treeDepth" select="1"/>
                </xsl:apply-templates>
            </fo:table-body>
        </fo:table>
    </xsl:template>
    <xsl:template match="Row">
        <xsl:param name="treeDepth"/>
        <xsl:if test="$treeDepth='1'">
            <fo:table-row>
                <fo:table-cell>
                    <fo:block>
                         <fo:leader/>
                    </fo:block>
                </fo:table-cell>
            </fo:table-row>
        </xsl:if>
        <fo:table-row>
            <xsl:if test="$treeDepth='1'">
                <xsl:attribute name="font-weight">bold</xsl:attribute>
            </xsl:if>
            <fo:table-cell>
                <xsl:attribute name="padding-left"><xsl:value-of select="($treeDepth - 1) * 6"/>pt
                </xsl:attribute>
                <fo:block font-weight="bold" border-right-width="0.5pt" text-align="left" vertical-align="middle" font-size="6pt">
                    <xsl:value-of select="Label"/>
                </fo:block>
            </fo:table-cell>
            <xsl:for-each select="Cells/Cell">
                <xsl:if test="position() &lt;= $maxNrOfColumns">
                    <fo:table-cell>
                        <xsl:choose>
                        <xsl:when test="FormattedData = 'bcg_green'">
                            <fo:block background-color="#95F987" border-right-width="0.5pt" text-align="left" vertical-align="middle" font-size="6pt">
                                    <xsl:if test="$treeDepth='1'">
                                            <xsl:attribute name="font-weight">bold</xsl:attribute>
                                    </xsl:if>
                                    &#160;
                            </fo:block>
                        </xsl:when>
                        <xsl:when test="FormattedData = 'bcg_red'">
                            <fo:block background-color="#e06666" border-right-width="0.5pt" text-align="left" vertical-align="middle" font-size="6pt">
                                    <xsl:if test="$treeDepth='1'">
                                            <xsl:attribute name="font-weight">bold</xsl:attribute>
                                    </xsl:if>
                                    &#160;
                            </fo:block>
                        </xsl:when>
                        <xsl:when test="FormattedData = 'bcg_yellow'">
                            <fo:block background-color="#ffd966" border-right-width="0.5pt" text-align="left" vertical-align="middle" font-size="6pt">
                                    <xsl:if test="$treeDepth='1'">
                                            <xsl:attribute name="font-weight">bold</xsl:attribute>
                                    </xsl:if>
                                    &#160;
                            </fo:block>
                        </xsl:when>
                        <xsl:otherwise>
                            <fo:block border-right-width="0.5pt" text-align="left" vertical-align="middle" font-size="6pt">
                                    <xsl:if test="$treeDepth='1'">
                                            <xsl:attribute name="font-weight">bold</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="FormattedData"/>
                            </fo:block>
                        </xsl:otherwise>
                        </xsl:choose>
                    </fo:table-cell>
                </xsl:if>
            </xsl:for-each>
        </fo:table-row>
        <xsl:apply-templates select="Rows/Row">
            <xsl:with-param name="treeDepth" select="$treeDepth + 1"/>
        </xsl:apply-templates>
    </xsl:template>
</xsl:stylesheet>

...

  NFTABTemplate
<?xml version='1.0'?>
<!DOCTYPE xsl:stylesheet [
  <!ENTITY tab "<xsl:text>&#9;</xsl:text>">
  <!ENTITY lf "<xsl:text>&#10;</xsl:text>">
]>

<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:output method="text" encoding="UTF-8"/>
<xsl:strip-space elements="*"/>

<xsl:template match="/">
        
<!-- Reports -->
    <xsl:for-each select="//PRIMEReport">                         
            Type:&tab;<xsl:value-of select="current()/Type"/>&lf;
            Name:&tab;<xsl:value-of select="current()/Name"/>&lf;
            Time:&tab;<xsl:value-of select="concat(substring(LocalTime,1,10),' ',substring(LocalTime,12,8),' (UTC', substring(LocalTime,20,6),')')"/>&lf;
            <xsl:apply-templates select="current()/ReportContents"/>             
     </xsl:for-each>     
</xsl:template>

<xsl:template match="Table">
Table name:&tab;<xsl:value-of select="Name"/>&lf;
&tab;
<xsl:for-each select="Columns/Column">
    <xsl:value-of select="Label"/>&tab;
</xsl:for-each>
&lf;

    <xsl:apply-templates select="Rows/Row"/>

</xsl:template>

<xsl:template match="Row">
    <xsl:value-of select="Label"/>&tab;
    <xsl:for-each select="Cells/Cell">
        <xsl:call-template name="CellData" />&tab;
    </xsl:for-each>
    &lf;
    <xsl:apply-templates select="Rows/Row"/>
</xsl:template>

</xsl:stylesheet>

...

  PDFTemplateBO4041
<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:xalan="http://xml.apache.org/xalan" exclude-result-prefixes="xalan">

    <!-- If there are more columns than this value they will not be included in the output document -->
    <xsl:output encoding="US-ASCII"/>
    <xsl:variable name="maxNrOfColumns" select="100"/>
    <xsl:variable name="isMultiReport" select="count(/MultiReport)"/>

    <xsl:template match="/">
        <fo:root>
            <fo:layout-master-set>
                <!-- numberOfColumns ini harus di dalem xsl:template, entah itu match="Table" ataupun match="/" -->
                <xsl:variable name="numberOfColumns" select="count(//Column)"/>
                <xsl:choose>
                <!-- KALO JUMLAH KOLOMNYA KURANG DARI ATAU SAMA DENGAN 10 -->
                <xsl:when test="$numberOfColumns &lt;= 10">
                    <fo:simple-page-master margin-right="1cm" margin-left="1cm" margin-bottom="1.3cm" margin-top="1cm" page-width="30cm" page-height="29.7cm" master-name="first">
                    <fo:region-body margin-top="1.5cm" margin-bottom="1.5cm"/>
                    <fo:region-before extent="2cm"/>
                    <fo:region-after extent="1.5cm"/>
                </fo:simple-page-master>
                </xsl:when>
                <!-- KALO JUMLAH KOLOMNYA KURANG DARI ATAU SAMA DENGAN 20 -->
                <xsl:when test="$numberOfColumns &lt;= 20">
                    <fo:simple-page-master margin-right="1cm" margin-left="1cm" margin-bottom="1.3cm" margin-top="1cm" page-width="60cm" page-height="29.7cm" master-name="first">
                    <fo:region-body margin-top="1.5cm" margin-bottom="1.5cm"/>
                    <fo:region-before extent="2cm"/>
                    <fo:region-after extent="1.5cm"/>
                </fo:simple-page-master>
                </xsl:when>
                <!-- KALO JUMLAH KOLOMNYA LEBIH DARI 20 -->
                <xsl:otherwise>
                    <fo:simple-page-master margin-right="1cm" margin-left="1cm" margin-bottom="1.3cm" margin-top="1cm" page-width="125cm" page-height="29.7cm" master-name="first">
                    <fo:region-body margin-top="1.5cm" margin-bottom="1.5cm"/>
                    <fo:region-before extent="2cm"/>
                    <fo:region-after extent="1.5cm"/>
                </fo:simple-page-master>
                </xsl:otherwise>
               </xsl:choose>

            </fo:layout-master-set>
            <fo:page-sequence master-reference="first">
                <fo:static-content flow-name="xsl-region-before">
                    <fo:block text-align-last="justify" font-size="10pt">
                        <xsl:choose>
                        <!-- Multiple reports in document -->
                        <xsl:when test="$isMultiReport = '1'">
                            <fo:inline>
                                    Multiple Report
                            </fo:inline>
                            <fo:leader/>
                        </xsl:when>
                        <!-- Only one report in document -->
                        <xsl:otherwise>
                        <fo:inline>
                            <xsl:value-of select="//Type"/>
                                </fo:inline>
                                <fo:leader/>
                                <fo:inline>
                                        <xsl:value-of select="//Name"/>
                                </fo:inline>
                        </xsl:otherwise>
                        </xsl:choose>
                    </fo:block>
                    <fo:block>
                        <fo:leader leader-length="100%" leader-pattern="rule" rule-thickness="1pt"/>
                    </fo:block>
                </fo:static-content>

                <fo:static-content flow-name="xsl-region-after">
                    <fo:block>
                        <fo:leader leader-length="100%" leader-pattern="rule" rule-thickness="1pt"/>
                    </fo:block>
                    <fo:block text-align-last="justify" font-size="10pt">
                        <!-- Only one report in document -->
                        <xsl:if test="$isMultiReport = '0'">
                            <fo:inline>
                                    <xsl:value-of select="concat(substring(//LocalTime[1],1,10),' ',substring(//LocalTime[1],12,8),' (UTC', substring(//LocalTime[1],20,6),')')"/>
                            </fo:inline>
                        </xsl:if>
                        <fo:leader/>
                        <fo:inline>
                            Page <fo:page-number/>
                        </fo:inline>
                    </fo:block>
                </fo:static-content>

                <fo:flow flow-name="xsl-region-body">

                    <xsl:if test="$isMultiReport = '1'">
                        <!-- Multiple reports in document -->
                        <!-- List of reports -->
                        <fo:table margin-bottom="50px" text-align="center" display-align="center" inline-progression-dimension="auto" table-layout="auto">
                        <fo:table-body>
                        <xsl:for-each select="//PRIMEReport">
                            <fo:table-row>
                                <fo:table-cell>
                                    <fo:block line-height="14pt" font-size="8pt"><xsl:value-of select="Type"/></fo:block>
                                </fo:table-cell>
                                <fo:table-cell>
                                    <fo:block line-height="14pt" font-size="8pt"><xsl:value-of select="Name"/></fo:block>
                                </fo:table-cell>
                                <fo:table-cell>
                                    <fo:block line-height="14pt" font-size="8pt"><xsl:value-of select="concat(substring(LocalTime,1,10),' ',substring(LocalTime,12,8),' (UTC', substring(LocalTime,20,6),')')"/></fo:block>
                                </fo:table-cell>
                            </fo:table-row>
                        </xsl:for-each>
                        </fo:table-body>
                        </fo:table>
                    </xsl:if>

                    <xsl:apply-templates/>
                </fo:flow>
            </fo:page-sequence>
        </fo:root>
    </xsl:template>
    <xsl:template match="Table">

        <xsl:comment> Variables used to set columns widths, depending on how many columns there are. </xsl:comment>
        <fo:block space-before="1cm"/>

        <xsl:if test="$isMultiReport = '1'">
        <!-- Multiple reports in document -->
            <fo:block line-height="14pt" font-size="8pt">
               <!-- Report header -->
                <xsl:value-of select="./../../Type"/>
                <xsl:text>:   </xsl:text>
                <xsl:value-of select="./../../Name"/>
                <xsl:text>   </xsl:text>
                <xsl:value-of select="concat(substring(../../LocalTime,1,10),' ',substring(../../LocalTime,12,8),' (UTC', substring(../../LocalTime,20,6),')')"/>
            </fo:block>
        </xsl:if>

        <fo:table margin-bottom="50px" text-align="center" display-align="center" inline-progression-dimension="auto" table-layout="auto">
            <fo:table-header>
                <fo:table-row>
                    <fo:table-cell background-color="#ffe599" height="15px">
                        <fo:block font-weight="bold" text-align="left" vertical-align="middle" background-color="#ffe599">

                        </fo:block>
                    </fo:table-cell>
                    <xsl:for-each select="Columns/Column[position()]">
                        <fo:table-cell background-color="#ffe599" height="15px">
                            <fo:block font-size="6pt" font-weight="bold" text-align="left" vertical-align="middle" background-color="#ffe599">
                                <xsl:if test="position() &lt;= $maxNrOfColumns">
                                    <xsl:value-of select="Label"/>
                                </xsl:if>
                            </fo:block>
                        </fo:table-cell>
                    </xsl:for-each>
                </fo:table-row>
            </fo:table-header>
            <fo:table-body>
                <xsl:apply-templates select="Rows/Row">
                    <xsl:with-param name="treeDepth" select="1"/>
                </xsl:apply-templates>
            </fo:table-body>
        </fo:table>
    </xsl:template>
    <xsl:template match="Row">
        <xsl:param name="treeDepth"/>
        <!--
        <xsl:if test="$treeDepth='1'">
            <fo:table-row>
                <fo:table-cell>
                    <fo:block>
                         <fo:leader/>
                    </fo:block>
                </fo:table-cell>
            </fo:table-row>
        </xsl:if>
        -->
        <xsl:if test="count(ancestor::Row) = 6">
        <fo:table-row>
            <xsl:if test="$treeDepth='1'">
                <xsl:attribute name="font-weight">bold</xsl:attribute>
            </xsl:if>
            <fo:table-cell padding-top="2px" padding-bottom="2px" border-bottom-width="1px" border-bottom-color="black" border-bottom-style="solid">
                <xsl:attribute name="padding-left"><xsl:value-of select="($treeDepth - 1) * 6"/>pt
                </xsl:attribute>
                <fo:block font-weight="bold" border-right-width="0.5pt" text-align="left" vertical-align="middle" font-size="6pt">
                    <xsl:value-of select="Label"/>
                </fo:block>
            </fo:table-cell>
            <xsl:for-each select="Cells/Cell">
                <xsl:if test="position() &lt;= $maxNrOfColumns">
                    <fo:table-cell padding-top="2px" padding-bottom="2px" border-bottom-width="1px" border-bottom-color="black" border-bottom-style="solid">
                        <xsl:choose>
                        <xsl:when test="FormattedData = 'bcg_green'">
                            <fo:block background-color="#95F987" border-right-width="0.5pt" text-align="left" vertical-align="middle" font-size="6pt">
                                    <xsl:if test="$treeDepth='1'">
                                            <xsl:attribute name="font-weight">bold</xsl:attribute>
                                    </xsl:if>
                                    &#160;
                            </fo:block>
                        </xsl:when>
                        <xsl:when test="FormattedData = 'bcg_red'">
                            <fo:block background-color="#e06666" border-right-width="0.5pt" text-align="left" vertical-align="middle" font-size="6pt">
                                    <xsl:if test="$treeDepth='1'">
                                            <xsl:attribute name="font-weight">bold</xsl:attribute>
                                    </xsl:if>
                                    &#160;
                            </fo:block>
                        </xsl:when>
                        <xsl:when test="FormattedData = 'bcg_yellow'">
                            <fo:block background-color="#ffd966" border-right-width="0.5pt" text-align="left" vertical-align="middle" font-size="6pt">
                                    <xsl:if test="$treeDepth='1'">
                                            <xsl:attribute name="font-weight">bold</xsl:attribute>
                                    </xsl:if>
                                    &#160;
                            </fo:block>
                        </xsl:when>
                        <xsl:otherwise>
                            <fo:block border-right-width="0.5pt" text-align="left" vertical-align="middle" font-size="6pt">
                                    <xsl:if test="$treeDepth='1'">
                                            <xsl:attribute name="font-weight">bold</xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="FormattedData"/>
                            </fo:block>
                        </xsl:otherwise>
                        </xsl:choose>
                    </fo:table-cell>
                </xsl:if>
            </xsl:for-each>
        </fo:table-row>
        </xsl:if>
        <xsl:apply-templates select="Rows/Row">
            <xsl:with-param name="treeDepth" select="$treeDepth + 1"/>
        </xsl:apply-templates>
    </xsl:template>
</xsl:stylesheet>

...

  XlsTemplate2Depth
<?xml version='1.0'?>
<!-- &copy; Copyright 2011 SunGard FRONT ARENA
       FStandardTemplate is able to produce colored output for RiskMatrixSheets when DefaultData is turned on
       Added support for Transhist output
-->
<!DOCTYPE xsl:stylesheet [
    <!ENTITY nbsp "<xsl:text>&#160;</xsl:text>">
]>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:param name="clickable" select="0"/>
<xsl:param name="autoupdate" select="0"/>
<xsl:output method="html"/>
<xsl:variable name="cellWidth" select="80"/>
<xsl:variable name="rowHeaderWidth" select="250"/>
<xsl:variable name="useLabelColumn" select="//PRIMEReport/Type !='ASQL Table'"/>

<xsl:template name="PrintSpaces">
  <xsl:param name="n" select="0"/>
  <xsl:if test="$n > 0">
    <xsl:call-template name="PrintSpaces">
      <xsl:with-param name="n" select="$n - 1" />
    </xsl:call-template>
    &nbsp;
  </xsl:if>
</xsl:template>

<xsl:template name="PrintSpace2">
  <xsl:param name="n" select="0"/>
  <xsl:if test="$n = 1">
    <xsl:call-template name="PrintSpaces">
      <xsl:with-param name="n" select="$n - 1" />
    </xsl:call-template>
    &nbsp;
  </xsl:if>
</xsl:template>

<xsl:template match="ReportContents">
     <xsl:apply-templates select="Table"/>
</xsl:template>

<xsl:template match="Table">
    
    <xsl:variable name="numberOfColumns" select="NumberOfColumns"/>
    <tr class="tblhdr" depth="{$treeDepth}" border="1px solid black">
       <xsl:if test="$useLabelColumn">
        <td width="{$rowHeaderWidth}">
            <xsl:call-template name="PrintSpaces">
                <xsl:with-param name="n" select="($treeDepth -1) * 6"/>
            </xsl:call-template>
        <img src="report_plus.gif" />&nbsp;</td>
        </xsl:if>
        <xsl:for-each select="Columns/Column">
            <xsl:choose>
            <xsl:when test="TemplateId != ''">
                <td width="{$cellWidth * 2}" style="background-color : #ecf576"><b>
                <xsl:value-of select="TemplateId"/><br />
                <xsl:value-of select="Label"/>
                </b></td>
            </xsl:when>
            <xsl:otherwise>
                <td width="{$cellWidth}" style="background-color : #ecf576"><b><xsl:value-of select="Label"/></b></td>
            </xsl:otherwise>
            </xsl:choose>
        </xsl:for-each>
    </tr>
    <xsl:apply-templates select="Rows/Row">
        <xsl:with-param name="treeDepth" select="$treeDepth"/>
        <xsl:with-param name="colorStep" select="0"/>
    </xsl:apply-templates>
</xsl:template>

<xsl:template match="Table">
    
    <xsl:variable name="numberOfColumns" select="NumberOfColumns"/>

    <xsl:variable name="colorStep" >
        <xsl:choose>
                <xsl:when test="(Type = 'RiskMatrixSheet') and current()//DefaultData">
                    <xsl:variable name="maxvalue">
                        <xsl:call-template name="max">
                                <xsl:with-param name="nodes" select="current()//DefaultData"/>
                        </xsl:call-template>
                    </xsl:variable>
                    <xsl:value-of select="$maxvalue div 255" ></xsl:value-of>
                </xsl:when>
                <xsl:otherwise>0</xsl:otherwise>
        </xsl:choose>
    </xsl:variable>

    <table width="{$numberOfColumns * ($cellWidth + 4) + $rowHeaderWidth + 6}" border="1px solid black">
        <tr class="tblhdr" border="1px solid black">
           <xsl:if test="$useLabelColumn">
            <td width="{$rowHeaderWidth}">&nbsp;</td>
            </xsl:if>
            <xsl:for-each select="Columns/Column">
                <xsl:choose>
                <xsl:when test="TemplateId != ''">
                    <td width="{$cellWidth * 2}" style="background-color : #ecf576"><b>
                    <xsl:value-of select="TemplateId"/><br />
                    <xsl:value-of select="Label"/>
                    </b></td>
                </xsl:when>
                <xsl:otherwise>
                    <td width="{$cellWidth}" style="background-color : #ecf576"><b><xsl:value-of select="Label"/></b></td>
                </xsl:otherwise>
                </xsl:choose>
            </xsl:for-each>
        </tr>
        <xsl:apply-templates select="Rows/Row">
            <xsl:with-param name="treeDepth" select="1"/>
            <xsl:with-param name="colorStep" select="$colorStep"/>
        </xsl:apply-templates>
    </table>
    <p/><p/>
</xsl:template>

<xsl:template match="Row">
    <xsl:param name = "treeDepth"/>
    <xsl:param name = "colorStep"/>
    <xsl:variable name="rwId" select="RowId"/>
    <xsl:if test="count(ancestor::Row) = 2">
        <tr class="{concat('cell', $treeDepth)}" depth="{$treeDepth}" border="1px solid black">
            <xsl:if test="$useLabelColumn">
                    <td class="row">
                    
                        <xsl:call-template name="PrintSpaces">
                                <xsl:with-param name="n" select="($treeDepth - 1) * 6"/>
                        </xsl:call-template>
                        
                        <xsl:if test="$clickable = '1'">
                                <img src="report_plus.gif"/>
                        </xsl:if>
                        <xsl:value-of select="Label"/>
                        
                    </td>
            </xsl:if>
        <xsl:if test="count(ancestor::Row) = 2">
        <xsl:apply-templates select="Cells/Cell">
            <xsl:with-param name="colorStep" select="$colorStep" />
        </xsl:apply-templates>
        </xsl:if>
        </tr>
    </xsl:if>
    <xsl:if test="ancestor::ReportContents/ChildReports/ChildReport[ChildReportId = $rwId]">
        <xsl:apply-templates select="ancestor::ReportContents/ChildReports/ChildReport[ChildReportId = $rwId]/PRIMEReport/ReportContents/Table" mode="ChildReport">
            <xsl:with-param name="treeDepth" select="$treeDepth +1" />
        </xsl:apply-templates>
    </xsl:if>
    <xsl:apply-templates select="Rows/Row">
        <xsl:with-param name="treeDepth" select="$treeDepth + 1" />
        <xsl:with-param name="colorStep" select="$colorStep" />
    </xsl:apply-templates>
</xsl:template>

<xsl:template match="Cell">
    <xsl:param name = "colorStep"/>
    <td>
         
         <xsl:choose>   
            
            <xsl:when test="Appearance">
                <xsl:attribute name="style">
                
                         <xsl:choose>     
                            <xsl:when test="Appearance/BkgColor">
                                    background-color: <!--rgb( 0, 255 ,255 )-->
                                        <xsl:call-template name="rgbfromint">
                                            <xsl:with-param name="rgbintval" select="Appearance/BkgColor"/>  
                                         </xsl:call-template>
                                         
                            </xsl:when>
                            <xsl:otherwise>
                                background-color: white
                            </xsl:otherwise>
                         </xsl:choose>    
                         
                        <xsl:choose>   
                            <xsl:when test="Appearance/TextColor">
                                    ;color: <!--rgb( 255, 0 ,255 )-->
                                           <xsl:call-template name="rgbfromint">
                                            <xsl:with-param name="rgbintval" select="Appearance/TextColor"/>  
                                         </xsl:call-template>
                            </xsl:when>
                            <xsl:otherwise>
                               ;color: black
                            </xsl:otherwise>
                        </xsl:choose>   
                
                </xsl:attribute>   
            </xsl:when>
            
            <xsl:otherwise>
                <xsl:if test="DefaultData and $colorStep > 0 and string(number(DefaultData)) !='NaN'">
                        <xsl:attribute name="style">background-color:
                                <xsl:call-template name="color">
                                        <xsl:with-param name="colorStep" select="$colorStep"/>
                                        <xsl:with-param name="value" select="DefaultData"/>
                                        
                                </xsl:call-template>
                        </xsl:attribute>
                </xsl:if>
            </xsl:otherwise>
            
        </xsl:choose>
        <xsl:choose>
                <xsl:when test="ValueType and DefaultData">
                        <acronym>
                                <xsl:attribute name="title">
                                        <xsl:value-of select="DefaultData"/>
                                </xsl:attribute>
                        <xsl:call-template name="CellData" />
                        </acronym>
                </xsl:when>
                <xsl:otherwise>
                        <xsl:call-template name="CellData" />
                </xsl:otherwise>
        </xsl:choose>
    </td>
</xsl:template>

<xsl:template name="CellData">
        <xsl:choose>
             
            <xsl:when test="FormattedData">
                <xsl:value-of select="FormattedData"/>
            </xsl:when>
            <xsl:when test="RawData">
                <xsl:choose>
                    <xsl:when test ="contains(RawData, 'http:') or contains(RawData, 'https:')">
                        <xsl:value-of select="RawData " disable-output-escaping="yes"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="RawData"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:when test="DefaultData">
                <xsl:choose>
                        <xsl:when test="ValueType">
                                <xsl:text>#</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                                <xsl:value-of select="DefaultData"/>
                        </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                  <xsl:message terminate="yes"><xsl:text>No dataformat turned on</xsl:text></xsl:message>
            </xsl:otherwise>
            
        </xsl:choose>
</xsl:template>

<xsl:template match="Settings">
    <table border="1px solid black">
    <tr border="1px solid black">
        <xsl:for-each select="Groups/Group">
            <xsl:if test="Label = 'Profit/Loss'">
                <tr class="tblhdr" border="1px solid black">
                <xsl:for-each select="Column">
                    <td class="row" width="{$cellWidth}" style="background-color : #ecf576"><b>
                    <xsl:choose>
                        <xsl:when test="Label != ''">
                            <xsl:value-of select="Label"/>
                        </xsl:when>
                        <xsl:otherwise>
                             <xsl:value-of select="ColumnId"/>
                        </xsl:otherwise>
                    </xsl:choose>
                    </b></td>
                </xsl:for-each>
                </tr>
                <tr class="row" depth="1" border="1px solid black">
                <xsl:for-each select="Cell">
                    <td class="cell1">
                        <xsl:call-template name="CellData" />
                    </td>
                </xsl:for-each>
                </tr>

            </xsl:if>
        </xsl:for-each>
        </tr>
    </table>
    <p/><p/>
</xsl:template>

<xsl:template match="/">
    <html>
        <head>
        <xsl:if test="$autoupdate = '1'">
                <meta http-equiv="REFRESH" content="10"></meta>
        </xsl:if>
        </head>
        <insertcss/>
        <body>
         <p class="headerImage">
            <headerImage/>
        </p>
        <xsl:if test="$clickable = '1'">
                <xsl:attribute name="onload">init()</xsl:attribute>
                <script src="portfolio_report.js" type="text/javascript"></script>
        </xsl:if>

        <!-- Table of contents, only viewed if more than one report -->

        <xsl:if test="/MultiReport">
            <table>
                <xsl:for-each select="/MultiReport/PRIMEReport">
                        <tr><td>
                            <!--<td><xsl:value-of select="Type"/></td>-->
                            <td><xsl:value-of select="Name"/></td>
                            <td><xsl:value-of select="substring(LocalTime,1,10)"/></td>
                        </td></tr>
               </xsl:for-each>
            </table>
        </xsl:if>

        <!-- Reports - ORIGINAL CODE-->
        <xsl:for-each select="/MultiReport/PRIMEReport|/PRIMEReport">
            <h3>
                <!--<xsl:value-of select="Type"/>:&nbsp;--><!--ORIGINAL LINE-->
                <xsl:value-of select="Name"/>&nbsp;
                <br><xsl:value-of select="substring(LocalTime,1,10)"/></br>
                <!--<xsl:value-of select="concat(substring(LocalTime,1,10),' ',substring(LocalTime,12,8),' (UTC', substring(LocalTime,20,6),')')"/>-->
             </h3>

             <xsl:apply-templates select="current()/ReportContents"/>
        </xsl:for-each>
        </body>
    </html>
</xsl:template>

<!-- derived from http://www.exslt.org/math/functions/max/index.html -->
<xsl:template name="max">
   <xsl:param name="nodes" select="/.." />
   <xsl:choose>
      <xsl:when test="not($nodes)">0</xsl:when>
      <xsl:otherwise>
         <xsl:for-each select="$nodes">
            <xsl:sort select="translate(.,'-','')" data-type="number" order="descending" />
            <xsl:if test="position( ) = 1">
               <xsl:value-of select="number(translate(.,'-',''))" />
            </xsl:if>
         </xsl:for-each>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

<xsl:template name="color">
   <xsl:param name="value"/>
   <xsl:param name = "colorStep"/>
   <xsl:variable name="rgbval">
       <xsl:choose>
          <xsl:when test="$value > 0" >
            <xsl:value-of select="255 - round($value div $colorStep)"/>
        </xsl:when>
        <xsl:otherwise>
            <xsl:value-of select="255 - round($value div $colorStep * -1)"/>
        </xsl:otherwise>
       </xsl:choose>

   </xsl:variable>
   <xsl:choose>
        <xsl:when test="$value > 0 and $rgbval &lt; 0">
            <xsl:text>rgb(255,0,0)</xsl:text>
            </xsl:when>
        <xsl:when test="$value &lt; 0 and $rgbval &lt; 0">
            <xsl:text>rgb(0,255,0)</xsl:text>
            </xsl:when>
        <xsl:when test="$value > 0">
            <xsl:value-of select="concat('rgb(',$rgbval,',255,',$rgbval,')')"/>
            </xsl:when>
      <xsl:otherwise>
            <xsl:value-of select="concat('rgb(255,',$rgbval,',',$rgbval,')')"/>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

<xsl:template name="rgbfromint">
        <xsl:param name="rgbintval"/>
        
        <xsl:variable name="redval">
                <xsl:value-of select="$rgbintval mod 256"/>
        </xsl:variable>
        <xsl:variable name="newvalue">
                <xsl:value-of select="floor($rgbintval div 256)"/>
        </xsl:variable>
        <xsl:variable name="greenval">
                <xsl:value-of select="$newvalue mod 256"/>
        </xsl:variable>
        <xsl:variable name="blueval">
                <xsl:value-of select="floor($newvalue div 256)"/>
        </xsl:variable>
        
        <xsl:value-of select="concat( 'rgb(',  $redval,  ',',   $greenval,    ',',   $blueval,  ')'    )"/>
        
        
</xsl:template>

</xsl:stylesheet>

...

  XlsTemplateBO19
<?xml version='1.0'?>
<!-- &copy; Copyright 2011 SunGard FRONT ARENA
       FStandardTemplate is able to produce colored output for RiskMatrixSheets when DefaultData is turned on
       Added support for Transhist output
-->
<!DOCTYPE xsl:stylesheet [
    <!ENTITY nbsp "<xsl:text>&#160;</xsl:text>">
]>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:param name="clickable" select="0"/>
<xsl:param name="autoupdate" select="0"/>
<xsl:output method="html"/>
<xsl:variable name="cellWidth" select="80"/>
<xsl:variable name="rowHeaderWidth" select="250"/>
<xsl:variable name="useLabelColumn" select="//PRIMEReport/Type !='ASQL Table'"/>

<xsl:template name="PrintSpaces">
  <xsl:param name="n" select="0"/>
  <xsl:if test="$n > 0">
    <xsl:call-template name="PrintSpaces">
      <xsl:with-param name="n" select="$n - 1" />
    </xsl:call-template>
    &nbsp;
  </xsl:if>
</xsl:template>

<xsl:template name="PrintSpace2">
  <xsl:param name="n" select="0"/>
  <xsl:if test="$n = 1">
    <xsl:call-template name="PrintSpaces">
      <xsl:with-param name="n" select="$n - 1" />
    </xsl:call-template>
    &nbsp;
  </xsl:if>
</xsl:template>

<xsl:template match="ReportContents">
     <xsl:apply-templates select="Table"/>
</xsl:template>

<xsl:template match="Table">
    
    <xsl:variable name="numberOfColumns" select="NumberOfColumns"/>

    <xsl:variable name="colorStep" >
        <xsl:choose>
                <xsl:when test="(Type = 'RiskMatrixSheet') and current()//DefaultData">
                    <xsl:variable name="maxvalue">
                        <xsl:call-template name="max">
                                <xsl:with-param name="nodes" select="current()//DefaultData"/>
                        </xsl:call-template>
                    </xsl:variable>
                    <xsl:value-of select="$maxvalue div 255" ></xsl:value-of>
                </xsl:when>
                <xsl:otherwise>0</xsl:otherwise>
        </xsl:choose>
    </xsl:variable>

    <table width="{$numberOfColumns * ($cellWidth + 4) + $rowHeaderWidth + 6}" border="1px solid black">
        <tr class="tblhdr" border="1px solid black">
           <xsl:if test="$useLabelColumn">
            <td width="{$rowHeaderWidth}">&nbsp;</td>
            </xsl:if>
            <xsl:for-each select="Columns/Column">
                <xsl:choose>
                <xsl:when test="TemplateId != ''">
                    <td width="{$cellWidth * 2}" style="background-color : #ecf576"><b>
                    <xsl:value-of select="TemplateId"/><br />
                    <xsl:value-of select="Label"/>
                    </b></td>
                </xsl:when>
                <xsl:otherwise>
                    <td width="{$cellWidth}" style="background-color : #ecf576"><b><xsl:value-of select="Label"/></b></td>
                </xsl:otherwise>
                </xsl:choose>
            </xsl:for-each>
        </tr>
        <xsl:apply-templates select="Rows/Row">
            <xsl:with-param name="treeDepth" select="1"/>
            <xsl:with-param name="colorStep" select="$colorStep"/>
        </xsl:apply-templates>
        
    </table>
    <p/><p/>
</xsl:template>

<xsl:template match="Row">
    <xsl:param name = "treeDepth"/>
    <xsl:param name = "colorStep"/>
    <xsl:variable name="rwId" select="RowId"/>
        
        <xsl:if test="count(ancestor::Row) = 1 and ancestor::Row[1]/Label = 'BO19b'">
        
            <xsl:if test="position( ) = 1">

                <tr><td colspan="9" style="background-color:#DFE2EC; font-weight:bold; text-align:left">SMCL</td></tr>
            </xsl:if>
        
            <tr class="{concat('cell', 1)}" depth="{$treeDepth}" border="1px solid black">
                <xsl:if test="$useLabelColumn">
                        <td class="row">
                        
                            <xsl:call-template name="PrintSpaces">
                                    <xsl:with-param name="n" select="($treeDepth - 1) * 6"/>
                            </xsl:call-template>
                            
                            <xsl:if test="$clickable = '1'">
                                    <img src="report_plus.gif"/>
                            </xsl:if>
                            <xsl:value-of select="Label"/>
                            
                        </td>
                </xsl:if>

            <xsl:apply-templates select="Cells/Cell">
                <xsl:with-param name="colorStep" select="$colorStep" />
            </xsl:apply-templates>
            </tr>

        </xsl:if>
        
        <xsl:if test="count(ancestor::Row) = 1 and ancestor::Row[1]/Label = 'BO19a'">
        
            <xsl:if test="position( ) = 1">
                <tr><td colspan="9" rowspan="3">&nbsp;</td></tr>
                <tr></tr>
                <tr></tr>
                <tr><td colspan="9" style="background-color:#DFE2EC; font-weight:bold; text-align:left">SUMMARY</td></tr>
            </xsl:if>
        
            <tr class="{concat('cell', 1)}" depth="{$treeDepth}" border="1px solid black">
                <xsl:if test="$useLabelColumn">
                        <td class="row">
                        
                            <xsl:call-template name="PrintSpaces">
                                    <xsl:with-param name="n" select="($treeDepth - 1) * 6"/>
                            </xsl:call-template>
                            
                            <xsl:if test="$clickable = '1'">
                                    <img src="report_plus.gif"/>
                            </xsl:if>
                            <xsl:value-of select="Label"/>
                            
                        </td>
                </xsl:if>

            <xsl:apply-templates select="Cells/Cell">
                <xsl:with-param name="colorStep" select="$colorStep" />
            </xsl:apply-templates>
            </tr>

        </xsl:if>
    
    
    <xsl:if test="ancestor::ReportContents/ChildReports/ChildReport[ChildReportId = $rwId]">
        <xsl:apply-templates select="ancestor::ReportContents/ChildReports/ChildReport[ChildReportId = $rwId]/PRIMEReport/ReportContents/Table" mode="ChildReport">
            <xsl:with-param name="treeDepth" select="$treeDepth +1" />
        </xsl:apply-templates>
    </xsl:if>
    <xsl:apply-templates select="Rows/Row">
        <xsl:with-param name="treeDepth" select="$treeDepth + 1" />
        <xsl:with-param name="colorStep" select="$colorStep" />
    </xsl:apply-templates>
</xsl:template>

<xsl:template match="Cell">
    <xsl:param name = "colorStep"/>
    <td>
         
         <xsl:choose>   
            
            <xsl:when test="Appearance">
                <xsl:attribute name="style">
                
                         <xsl:choose>     
                            <xsl:when test="Appearance/BkgColor">
                                    background-color: <!--rgb( 0, 255 ,255 )-->
                                        <xsl:call-template name="rgbfromint">
                                            <xsl:with-param name="rgbintval" select="Appearance/BkgColor"/>  
                                         </xsl:call-template>
                                         
                            </xsl:when>
                            <xsl:otherwise>
                                background-color: white
                            </xsl:otherwise>
                         </xsl:choose>    
                         
                        <xsl:choose>   
                            <xsl:when test="Appearance/TextColor">
                                    ;color: <!--rgb( 255, 0 ,255 )-->
                                           <xsl:call-template name="rgbfromint">
                                            <xsl:with-param name="rgbintval" select="Appearance/TextColor"/>  
                                         </xsl:call-template>
                            </xsl:when>
                            <xsl:otherwise>
                               ;color: black
                            </xsl:otherwise>
                        </xsl:choose>   
                
                </xsl:attribute>   
            </xsl:when>
            
            <xsl:otherwise>
                <xsl:if test="DefaultData and $colorStep > 0 and string(number(DefaultData)) !='NaN'">
                        <xsl:attribute name="style">background-color:
                                <xsl:call-template name="color">
                                        <xsl:with-param name="colorStep" select="$colorStep"/>
                                        <xsl:with-param name="value" select="DefaultData"/>
                                        
                                </xsl:call-template>
                        </xsl:attribute>
                </xsl:if>
            </xsl:otherwise>
            
        </xsl:choose>
        <xsl:choose>
                <xsl:when test="ValueType and DefaultData">
                        <acronym>
                                <xsl:attribute name="title">
                                        <xsl:value-of select="DefaultData"/>
                                </xsl:attribute>
                        <xsl:call-template name="CellData" />
                        </acronym>
                </xsl:when>
                <xsl:otherwise>
                        <xsl:call-template name="CellData" />
                </xsl:otherwise>
        </xsl:choose>
    </td>
</xsl:template>

<xsl:template name="CellData">
        <xsl:choose>
             
            <xsl:when test="FormattedData">
                <xsl:value-of select="FormattedData"/>
            </xsl:when>
            <xsl:when test="RawData">
                <xsl:choose>
                    <xsl:when test ="contains(RawData, 'http:') or contains(RawData, 'https:')">
                        <xsl:value-of select="RawData " disable-output-escaping="yes"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="RawData"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:when test="DefaultData">
                <xsl:choose>
                        <xsl:when test="ValueType">
                                <xsl:text>#</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                                <xsl:value-of select="DefaultData"/>
                        </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                  <xsl:message terminate="yes"><xsl:text>No dataformat turned on</xsl:text></xsl:message>
            </xsl:otherwise>
            
        </xsl:choose>
</xsl:template>

<xsl:template match="Settings">
    <table border="1px solid black">
    <tr border="1px solid black">
        <xsl:for-each select="Groups/Group">
            <xsl:if test="Label = 'Profit/Loss'">
                <tr class="tblhdr" border="1px solid black">
                <xsl:for-each select="Column">
                    <td class="row" width="{$cellWidth}" style="background-color : #ecf576"><b>
                    <xsl:choose>
                        <xsl:when test="Label != ''">
                            <xsl:value-of select="Label"/>
                        </xsl:when>
                        <xsl:otherwise>
                             <xsl:value-of select="ColumnId"/>
                        </xsl:otherwise>
                    </xsl:choose>
                    </b></td>
                </xsl:for-each>
                </tr>
                <tr class="row" depth="1" border="1px solid black">
                <xsl:for-each select="Cell">
                    <td class="cell1">
                        <xsl:call-template name="CellData" />
                    </td>
                </xsl:for-each>
                </tr>

            </xsl:if>
        </xsl:for-each>
        </tr>
    </table>
    <p/><p/>
</xsl:template>

<xsl:template match="/">
    <html>
        <head>
        <xsl:if test="$autoupdate = '1'">
                <meta http-equiv="REFRESH" content="10"></meta>
        </xsl:if>
        </head>
        <insertcss/>
        <body>
         <p class="headerImage">
            <headerImage/>
        </p>
        <xsl:if test="$clickable = '1'">
                <xsl:attribute name="onload">init()</xsl:attribute>
                <script src="portfolio_report.js" type="text/javascript"></script>
        </xsl:if>

        <!-- Table of contents, only viewed if more than one report -->

        <xsl:if test="/MultiReport">
            <table>
                <xsl:for-each select="/MultiReport/PRIMEReport">
                        <tr><td>
                            <!--<td><xsl:value-of select="Type"/></td>-->
                            <td><xsl:value-of select="Name"/></td>
                            <td><xsl:value-of select="substring(LocalTime,1,10)"/></td>
                        </td></tr>
               </xsl:for-each>
            </table>
        </xsl:if>

        <!-- Reports - ORIGINAL CODE-->
        <xsl:for-each select="/MultiReport/PRIMEReport|/PRIMEReport">
            <h3>
                <!--<xsl:value-of select="Type"/>:&nbsp;--><!--ORIGINAL LINE-->
                <xsl:value-of select="Name"/>&nbsp;
                <br><xsl:value-of select="substring(LocalTime,1,10)"/></br>
                <!--<xsl:value-of select="concat(substring(LocalTime,1,10),' ',substring(LocalTime,12,8),' (UTC', substring(LocalTime,20,6),')')"/>-->
             </h3>

             <xsl:apply-templates select="current()/ReportContents"/>
        </xsl:for-each>
        </body>
    </html>
</xsl:template>

<!-- derived from http://www.exslt.org/math/functions/max/index.html -->
<xsl:template name="max">
   <xsl:param name="nodes" select="/.." />
   <xsl:choose>
      <xsl:when test="not($nodes)">0</xsl:when>
      <xsl:otherwise>
         <xsl:for-each select="$nodes">
            <xsl:sort select="translate(.,'-','')" data-type="number" order="descending" />
            <xsl:if test="position( ) = 1">
               <xsl:value-of select="number(translate(.,'-',''))" />
            </xsl:if>
         </xsl:for-each>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

<xsl:template name="color">
   <xsl:param name="value"/>
   <xsl:param name = "colorStep"/>
   <xsl:variable name="rgbval">
       <xsl:choose>
          <xsl:when test="$value > 0" >
            <xsl:value-of select="255 - round($value div $colorStep)"/>
        </xsl:when>
        <xsl:otherwise>
            <xsl:value-of select="255 - round($value div $colorStep * -1)"/>
        </xsl:otherwise>
       </xsl:choose>

   </xsl:variable>
   <xsl:choose>
        <xsl:when test="$value > 0 and $rgbval &lt; 0">
            <xsl:text>rgb(255,0,0)</xsl:text>
            </xsl:when>
        <xsl:when test="$value &lt; 0 and $rgbval &lt; 0">
            <xsl:text>rgb(0,255,0)</xsl:text>
            </xsl:when>
        <xsl:when test="$value > 0">
            <xsl:value-of select="concat('rgb(',$rgbval,',255,',$rgbval,')')"/>
            </xsl:when>
      <xsl:otherwise>
            <xsl:value-of select="concat('rgb(255,',$rgbval,',',$rgbval,')')"/>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

<xsl:template name="rgbfromint">
        <xsl:param name="rgbintval"/>
        
        <xsl:variable name="redval">
                <xsl:value-of select="$rgbintval mod 256"/>
        </xsl:variable>
        <xsl:variable name="newvalue">
                <xsl:value-of select="floor($rgbintval div 256)"/>
        </xsl:variable>
        <xsl:variable name="greenval">
                <xsl:value-of select="$newvalue mod 256"/>
        </xsl:variable>
        <xsl:variable name="blueval">
                <xsl:value-of select="floor($newvalue div 256)"/>
        </xsl:variable>
        
        <xsl:value-of select="concat( 'rgb(',  $redval,  ',',   $greenval,    ',',   $blueval,  ')'    )"/>
        
        
</xsl:template>

</xsl:stylesheet>

...

  XlsTemplateBO4041
<?xml version='1.0'?>
<!-- &copy; Copyright 2011 SunGard FRONT ARENA
       FStandardTemplate is able to produce colored output for RiskMatrixSheets when DefaultData is turned on
       Added support for Transhist output
-->
<!DOCTYPE xsl:stylesheet [
    <!ENTITY nbsp "<xsl:text>&#160;</xsl:text>">
]>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:param name="clickable" select="0"/>
<xsl:param name="autoupdate" select="0"/>
<xsl:output method="html"/>
<xsl:variable name="cellWidth" select="80"/>
<xsl:variable name="rowHeaderWidth" select="250"/>
<xsl:variable name="useLabelColumn" select="//PRIMEReport/Type !='ASQL Table'"/>

<xsl:template name="PrintSpaces">
  <xsl:param name="n" select="0"/>
  <xsl:if test="$n > 0">
    <xsl:call-template name="PrintSpaces">
      <xsl:with-param name="n" select="$n - 1" />
    </xsl:call-template>
    &nbsp;
  </xsl:if>
</xsl:template>

<xsl:template name="PrintSpace2">
  <xsl:param name="n" select="0"/>
  <xsl:if test="$n = 1">
    <xsl:call-template name="PrintSpaces">
      <xsl:with-param name="n" select="$n - 1" />
    </xsl:call-template>
    &nbsp;
  </xsl:if>
</xsl:template>

<xsl:template match="ReportContents">
     <xsl:apply-templates select="Table"/>
</xsl:template>

<xsl:template match="Table">
    
    <xsl:variable name="numberOfColumns" select="NumberOfColumns"/>
    <tr class="tblhdr" depth="{$treeDepth}" border="1px solid black">
        <!--
       <xsl:if test="$useLabelColumn">
        <td width="{$rowHeaderWidth}">
            <xsl:call-template name="PrintSpaces">
                <xsl:with-param name="n" select="($treeDepth -1) * 6"/>
            </xsl:call-template>
        <img src="report_plus.gif" />&nbsp;</td>
        </xsl:if>
        -->
        <xsl:for-each select="Columns/Column">
            <xsl:choose>
            <xsl:when test="TemplateId != ''">
                <td width="{$cellWidth * 2}" style="background-color : #ecf576"><b>
                <xsl:value-of select="TemplateId"/><br />
                <xsl:value-of select="Label"/>
                </b></td>
            </xsl:when>
            <xsl:otherwise>
                <td width="{$cellWidth}" style="background-color : #ecf576"><b><xsl:value-of select="Label"/></b></td>
            </xsl:otherwise>
            </xsl:choose>
        </xsl:for-each>
    </tr>
    <xsl:apply-templates select="Rows/Row">
        <xsl:with-param name="treeDepth" select="$treeDepth"/>
        <xsl:with-param name="colorStep" select="0"/>
    </xsl:apply-templates>
</xsl:template>

<xsl:template match="Table">
    
    <xsl:variable name="numberOfColumns" select="NumberOfColumns"/>

    <xsl:variable name="colorStep" >
        <xsl:choose>
                <xsl:when test="(Type = 'RiskMatrixSheet') and current()//DefaultData">
                    <xsl:variable name="maxvalue">
                        <xsl:call-template name="max">
                                <xsl:with-param name="nodes" select="current()//DefaultData"/>
                        </xsl:call-template>
                    </xsl:variable>
                    <xsl:value-of select="$maxvalue div 255" ></xsl:value-of>
                </xsl:when>
                <xsl:otherwise>0</xsl:otherwise>
        </xsl:choose>
    </xsl:variable>

    <table width="{$numberOfColumns * ($cellWidth + 4) + $rowHeaderWidth + 6}" border="1px solid black">
        <tr class="tblhdr" border="1px solid black">
            <!--
           <xsl:if test="$useLabelColumn">
            <td width="{$rowHeaderWidth}">&nbsp;</td>
            </xsl:if>
            -->
            <xsl:for-each select="Columns/Column">
                <xsl:choose>
        
                <xsl:when test="TemplateId != ''">
                    <td width="{$cellWidth * 2}" style="background-color : #ecf576"><b>
                    <xsl:value-of select="TemplateId"/><br />
                    <xsl:value-of select="Label"/>
                    </b></td>
                </xsl:when>
                <xsl:otherwise>
                    <td width="{$cellWidth}" style="background-color : #ecf576"><b><xsl:value-of select="Label"/></b></td>
                </xsl:otherwise>
                </xsl:choose>
            </xsl:for-each>
        </tr>
        <xsl:apply-templates select="Rows/Row">
            <xsl:with-param name="treeDepth" select="1"/>
            <xsl:with-param name="colorStep" select="$colorStep"/>
        </xsl:apply-templates>
    </table>
    <p/><p/>
</xsl:template>

<xsl:template match="Row">
    <xsl:param name = "treeDepth"/>
    <xsl:param name = "colorStep"/>
    <xsl:variable name="rwId" select="RowId"/>
    <xsl:if test="count(ancestor::Row) = 6">
        <tr class="{concat('cell', $treeDepth)}" depth="{$treeDepth}" border="1px solid black">
        <!--
            <xsl:if test="$useLabelColumn">
                    <td class="row">
                    
                        <xsl:call-template name="PrintSpaces">
                                <xsl:with-param name="n" select="($treeDepth - 1) * 6"/>
                        </xsl:call-template>
                        
                        <xsl:if test="$clickable = '1'">
                                <img src="report_plus.gif"/>
                        </xsl:if>
                         <xsl:value-of select="Label"/> 
                        
                    </td>
            </xsl:if>
            -->
        <xsl:apply-templates select="Cells/Cell">
            <xsl:with-param name="colorStep" select="$colorStep" />
        </xsl:apply-templates>
        </tr>
    </xsl:if>
    <xsl:if test="ancestor::ReportContents/ChildReports/ChildReport[ChildReportId = $rwId]">
        <xsl:apply-templates select="ancestor::ReportContents/ChildReports/ChildReport[ChildReportId = $rwId]/PRIMEReport/ReportContents/Table" mode="ChildReport">
            <xsl:with-param name="treeDepth" select="$treeDepth +1" />
        </xsl:apply-templates>
    </xsl:if>
    <xsl:apply-templates select="Rows/Row">
        <xsl:with-param name="treeDepth" select="$treeDepth + 1" />
        <xsl:with-param name="colorStep" select="$colorStep" />
    </xsl:apply-templates>
</xsl:template>

<xsl:template match="Cell">
    <xsl:param name = "colorStep"/>
    <td>
         
         <xsl:choose>   
            
            <xsl:when test="Appearance">
                <xsl:attribute name="style">
                
                         <xsl:choose>     
                            <xsl:when test="Appearance/BkgColor">
                                    background-color: <!--rgb( 0, 255 ,255 )-->
                                        <xsl:call-template name="rgbfromint">
                                            <xsl:with-param name="rgbintval" select="Appearance/BkgColor"/>  
                                         </xsl:call-template>
                                         
                            </xsl:when>
                            <xsl:otherwise>
                                background-color: white
                            </xsl:otherwise>
                         </xsl:choose>    
                         
                        <xsl:choose>   
                            <xsl:when test="Appearance/TextColor">
                                    ;color: <!--rgb( 255, 0 ,255 )-->
                                           <xsl:call-template name="rgbfromint">
                                            <xsl:with-param name="rgbintval" select="Appearance/TextColor"/>  
                                         </xsl:call-template>
                            </xsl:when>
                            <xsl:otherwise>
                               ;color: black
                            </xsl:otherwise>
                        </xsl:choose>   
                
                </xsl:attribute>   
            </xsl:when>
            
            <xsl:otherwise>
                <xsl:if test="DefaultData and $colorStep > 0 and string(number(DefaultData)) !='NaN'">
                        <xsl:attribute name="style">background-color:
                                <xsl:call-template name="color">
                                        <xsl:with-param name="colorStep" select="$colorStep"/>
                                        <xsl:with-param name="value" select="DefaultData"/>
                                        
                                </xsl:call-template>
                        </xsl:attribute>
                </xsl:if>
            </xsl:otherwise>
            
        </xsl:choose>
        <xsl:choose>
                <xsl:when test="ValueType and DefaultData">
                        <acronym>
                                <xsl:attribute name="title">
                                        <xsl:value-of select="DefaultData"/>
                                </xsl:attribute>
                        <xsl:call-template name="CellData" />
                        </acronym>
                </xsl:when>
                <xsl:otherwise>
                        <xsl:call-template name="CellData" />
                </xsl:otherwise>
        </xsl:choose>
    </td>
</xsl:template>

<xsl:template name="CellData">
        <xsl:choose>
             
            <xsl:when test="FormattedData">
                <xsl:value-of select="FormattedData"/>
            </xsl:when>
            <xsl:when test="RawData">
                <xsl:choose>
                    <xsl:when test ="contains(RawData, 'http:') or contains(RawData, 'https:')">
                        <xsl:value-of select="RawData " disable-output-escaping="yes"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="RawData"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:when test="DefaultData">
                <xsl:choose>
                        <xsl:when test="ValueType">
                                <xsl:text>#</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                                <xsl:value-of select="DefaultData"/>
                        </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                  <xsl:message terminate="yes"><xsl:text>No dataformat turned on</xsl:text></xsl:message>
            </xsl:otherwise>
            
        </xsl:choose>
</xsl:template>

<xsl:template match="Settings">
    <table border="1px solid black">
    <tr border="1px solid black">
        <xsl:for-each select="Groups/Group">
            <xsl:if test="Label = 'Profit/Loss'">
                <tr class="tblhdr" border="1px solid black">
                <xsl:for-each select="Column">
                    <td class="row" width="{$cellWidth}" style="background-color : #ecf576"><b>
                    <xsl:choose>
                        <xsl:when test="Label != ''">
                            <xsl:value-of select="Label"/>
                        </xsl:when>
                        <xsl:otherwise>
                             <xsl:value-of select="ColumnId"/>
                        </xsl:otherwise>
                    </xsl:choose>
                    </b></td>
                </xsl:for-each>
                </tr>
                <tr class="row" depth="1" border="1px solid black">
                <xsl:for-each select="Cell">
                    <td class="cell1">
                        <xsl:call-template name="CellData" />
                    </td>
                </xsl:for-each>
                </tr>

            </xsl:if>
        </xsl:for-each>
        </tr>
    </table>
    <p/><p/>
</xsl:template>

<xsl:template match="/">
    <html>
        <head>
        <xsl:if test="$autoupdate = '1'">
                <meta http-equiv="REFRESH" content="10"></meta>
        </xsl:if>
        </head>
        <insertcss/>
        <body>
         <p class="headerImage">
            <headerImage/>
        </p>
        <xsl:if test="$clickable = '1'">
                <xsl:attribute name="onload">init()</xsl:attribute>
                <script src="portfolio_report.js" type="text/javascript"></script>
        </xsl:if>

        <!-- Table of contents, only viewed if more than one report -->

        <xsl:if test="/MultiReport">
            <table>
                <xsl:for-each select="/MultiReport/PRIMEReport">
                        <tr><td>
                            <!--<td><xsl:value-of select="Type"/></td>-->
                            <td><xsl:value-of select="Name"/></td>
                            <td><xsl:value-of select="substring(LocalTime,1,10)"/></td>
                        </td></tr>
               </xsl:for-each>
            </table>
        </xsl:if>

        <!-- Reports - ORIGINAL CODE-->
        <xsl:for-each select="/MultiReport/PRIMEReport|/PRIMEReport">
            <h3>
                <!--<xsl:value-of select="Type"/>:&nbsp;--><!--ORIGINAL LINE-->
                <xsl:value-of select="Name"/>&nbsp;
                <br><xsl:value-of select="substring(LocalTime,1,10)"/></br>
                <!--<xsl:value-of select="concat(substring(LocalTime,1,10),' ',substring(LocalTime,12,8),' (UTC', substring(LocalTime,20,6),')')"/>-->
             </h3>

             <xsl:apply-templates select="current()/ReportContents"/>
        </xsl:for-each>
        </body>
    </html>
</xsl:template>

<!-- derived from http://www.exslt.org/math/functions/max/index.html -->
<xsl:template name="max">
   <xsl:param name="nodes" select="/.." />
   <xsl:choose>
      <xsl:when test="not($nodes)">0</xsl:when>
      <xsl:otherwise>
         <xsl:for-each select="$nodes">
            <xsl:sort select="translate(.,'-','')" data-type="number" order="descending" />
            <xsl:if test="position( ) = 1">
               <xsl:value-of select="number(translate(.,'-',''))" />
            </xsl:if>
         </xsl:for-each>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

<xsl:template name="color">
   <xsl:param name="value"/>
   <xsl:param name = "colorStep"/>
   <xsl:variable name="rgbval">
       <xsl:choose>
          <xsl:when test="$value > 0" >
            <xsl:value-of select="255 - round($value div $colorStep)"/>
        </xsl:when>
        <xsl:otherwise>
            <xsl:value-of select="255 - round($value div $colorStep * -1)"/>
        </xsl:otherwise>
       </xsl:choose>

   </xsl:variable>
   <xsl:choose>
        <xsl:when test="$value > 0 and $rgbval &lt; 0">
            <xsl:text>rgb(255,0,0)</xsl:text>
            </xsl:when>
        <xsl:when test="$value &lt; 0 and $rgbval &lt; 0">
            <xsl:text>rgb(0,255,0)</xsl:text>
            </xsl:when>
        <xsl:when test="$value > 0">
            <xsl:value-of select="concat('rgb(',$rgbval,',255,',$rgbval,')')"/>
            </xsl:when>
      <xsl:otherwise>
            <xsl:value-of select="concat('rgb(255,',$rgbval,',',$rgbval,')')"/>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

<xsl:template name="rgbfromint">
        <xsl:param name="rgbintval"/>
        
        <xsl:variable name="redval">
                <xsl:value-of select="$rgbintval mod 256"/>
        </xsl:variable>
        <xsl:variable name="newvalue">
                <xsl:value-of select="floor($rgbintval div 256)"/>
        </xsl:variable>
        <xsl:variable name="greenval">
                <xsl:value-of select="$newvalue mod 256"/>
        </xsl:variable>
        <xsl:variable name="blueval">
                <xsl:value-of select="floor($newvalue div 256)"/>
        </xsl:variable>
        
        <xsl:value-of select="concat( 'rgb(',  $redval,  ',',   $greenval,    ',',   $blueval,  ')'    )"/>
        
        
</xsl:template>

</xsl:stylesheet>

...

  XlsTemplateBOa03
<?xml version='1.0'?>
<!-- &copy; Copyright 2011 SunGard FRONT ARENA
       FStandardTemplate is able to produce colored output for RiskMatrixSheets when DefaultData is turned on
       Added support for Transhist output
-->
<!DOCTYPE xsl:stylesheet [
    <!ENTITY nbsp "<xsl:text>&#160;</xsl:text>">
]>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:param name="clickable" select="0"/>
<xsl:param name="autoupdate" select="0"/>
<xsl:output method="html"/>
<xsl:variable name="cellWidth" select="80"/>
<xsl:variable name="rowHeaderWidth" select="250"/>
<xsl:variable name="useLabelColumn" select="//PRIMEReport/Type !='ASQL Table'"/>

<xsl:template name="PrintSpaces">
  <xsl:param name="n" select="0"/>
  <xsl:if test="$n > 0">
    <xsl:call-template name="PrintSpaces">
      <xsl:with-param name="n" select="$n - 1" />
    </xsl:call-template>
    &nbsp;
  </xsl:if>
</xsl:template>

<xsl:template name="PrintSpace2">
  <xsl:param name="n" select="0"/>
  <xsl:if test="$n = 1">
    <xsl:call-template name="PrintSpaces">
      <xsl:with-param name="n" select="$n - 1" />
    </xsl:call-template>
    &nbsp;
  </xsl:if>
</xsl:template>

<xsl:template match="ReportContents">
     <xsl:apply-templates select="Table"/>
</xsl:template>

<xsl:template match="Table">
    
    <xsl:variable name="numberOfColumns" select="NumberOfColumns"/>
    <tr class="tblhdr" depth="{$treeDepth}" border="1px solid black">
       <xsl:if test="$useLabelColumn">
        <td width="{$rowHeaderWidth}">
            <xsl:call-template name="PrintSpaces">
                <xsl:with-param name="n" select="($treeDepth -1) * 6"/>
            </xsl:call-template>
        <img src="report_plus.gif" />&nbsp;</td>
        </xsl:if>
        <xsl:for-each select="Columns/Column">
            <xsl:choose>
            <xsl:when test="TemplateId != ''">
                <td width="{$cellWidth * 2}" style="background-color : #ecf576"><b>
                <xsl:value-of select="TemplateId"/><br />
                <xsl:value-of select="Label"/>
                </b></td>
            </xsl:when>
            <xsl:otherwise>
                <td width="{$cellWidth}" style="background-color : #ecf576"><b><xsl:value-of select="Label"/></b></td>
            </xsl:otherwise>
            </xsl:choose>
        </xsl:for-each>
    </tr>
    <xsl:apply-templates select="Rows/Row">
        <xsl:with-param name="treeDepth" select="$treeDepth"/>
        <xsl:with-param name="colorStep" select="0"/>
    </xsl:apply-templates>
</xsl:template>

<xsl:template match="Table">
    
    <xsl:variable name="numberOfColumns" select="NumberOfColumns"/>

    <xsl:variable name="colorStep" >
        <xsl:choose>
                <xsl:when test="(Type = 'RiskMatrixSheet') and current()//DefaultData">
                    <xsl:variable name="maxvalue">
                        <xsl:call-template name="max">
                                <xsl:with-param name="nodes" select="current()//DefaultData"/>
                        </xsl:call-template>
                    </xsl:variable>
                    <xsl:value-of select="$maxvalue div 255" ></xsl:value-of>
                </xsl:when>
                <xsl:otherwise>0</xsl:otherwise>
        </xsl:choose>
    </xsl:variable>

    <table width="{$numberOfColumns * ($cellWidth + 4) + $rowHeaderWidth + 6}" border="1px solid black">
        <tr class="tblhdr" border="1px solid black">
           <xsl:if test="$useLabelColumn">
            <td width="{$rowHeaderWidth}">&nbsp;</td>
            </xsl:if>
            <xsl:for-each select="Columns/Column">
                <xsl:choose>
                <xsl:when test="TemplateId != ''">
                    <td width="{$cellWidth * 2}" style="background-color : #ecf576"><b>
                    <xsl:value-of select="TemplateId"/><br />
                    <xsl:value-of select="Label"/>
                    </b></td>
                </xsl:when>
                <xsl:otherwise>
                    <td width="{$cellWidth}" style="background-color : #ecf576"><b><xsl:value-of select="Label"/></b></td>
                </xsl:otherwise>
                </xsl:choose>
            </xsl:for-each>
        </tr>
        <xsl:apply-templates select="Rows/Row">
            <xsl:with-param name="treeDepth" select="1"/>
            <xsl:with-param name="colorStep" select="$colorStep"/>
        </xsl:apply-templates>
    </table>
    <p/><p/>
</xsl:template>

<xsl:template match="Row">
    <xsl:param name = "treeDepth"/>
    <xsl:param name = "colorStep"/>
    <xsl:variable name="rwId" select="RowId"/>
    <xsl:if test="count(ancestor::Row) = 1">
        <tr class="{concat('cell', $treeDepth)}" depth="{$treeDepth}" border="1px solid black">
            <xsl:if test="$useLabelColumn">
                    <td class="row">
                    
                        <xsl:call-template name="PrintSpaces">
                                <xsl:with-param name="n" select="($treeDepth - 1) * 6"/>
                        </xsl:call-template>
                        
                        <xsl:if test="$clickable = '1'">
                                <img src="report_plus.gif"/>
                        </xsl:if>
                        <xsl:value-of select="Label"/>
                        
                    </td>
            </xsl:if>
        <xsl:if test="count(ancestor::Row) = 1">
        <xsl:apply-templates select="Cells/Cell">
            <xsl:with-param name="colorStep" select="$colorStep" />
        </xsl:apply-templates>
        </xsl:if>
        </tr>
    </xsl:if>
    <xsl:if test="ancestor::ReportContents/ChildReports/ChildReport[ChildReportId = $rwId]">
        <xsl:apply-templates select="ancestor::ReportContents/ChildReports/ChildReport[ChildReportId = $rwId]/PRIMEReport/ReportContents/Table" mode="ChildReport">
            <xsl:with-param name="treeDepth" select="$treeDepth +1" />
        </xsl:apply-templates>
    </xsl:if>
    <xsl:apply-templates select="Rows/Row">
        <xsl:with-param name="treeDepth" select="$treeDepth + 1" />
        <xsl:with-param name="colorStep" select="$colorStep" />
    </xsl:apply-templates>
</xsl:template>

<xsl:template match="Cell">
    <xsl:param name = "colorStep"/>
    <td>
         
         <xsl:choose>   
            
            <xsl:when test="Appearance">
                <xsl:attribute name="style">
                
                         <xsl:choose>     
                            <xsl:when test="Appearance/BkgColor">
                                    background-color: <!--rgb( 0, 255 ,255 )-->
                                        <xsl:call-template name="rgbfromint">
                                            <xsl:with-param name="rgbintval" select="Appearance/BkgColor"/>  
                                         </xsl:call-template>
                                         
                            </xsl:when>
                            <xsl:otherwise>
                                background-color: white
                            </xsl:otherwise>
                         </xsl:choose>    
                         
                        <xsl:choose>   
                            <xsl:when test="Appearance/TextColor">
                                    ;color: <!--rgb( 255, 0 ,255 )-->
                                           <xsl:call-template name="rgbfromint">
                                            <xsl:with-param name="rgbintval" select="Appearance/TextColor"/>  
                                         </xsl:call-template>
                            </xsl:when>
                            <xsl:otherwise>
                               ;color: black
                            </xsl:otherwise>
                        </xsl:choose>   
                
                </xsl:attribute>   
            </xsl:when>
            
            <xsl:otherwise>
                <xsl:if test="DefaultData and $colorStep > 0 and string(number(DefaultData)) !='NaN'">
                        <xsl:attribute name="style">background-color:
                                <xsl:call-template name="color">
                                        <xsl:with-param name="colorStep" select="$colorStep"/>
                                        <xsl:with-param name="value" select="DefaultData"/>
                                        
                                </xsl:call-template>
                        </xsl:attribute>
                </xsl:if>
            </xsl:otherwise>
            
        </xsl:choose>
        <xsl:choose>
                <xsl:when test="ValueType and DefaultData">
                        <acronym>
                                <xsl:attribute name="title">
                                        <xsl:value-of select="DefaultData"/>
                                </xsl:attribute>
                        <xsl:call-template name="CellData" />
                        </acronym>
                </xsl:when>
                <xsl:otherwise>
                        <xsl:call-template name="CellData" />
                </xsl:otherwise>
        </xsl:choose>
    </td>
</xsl:template>

<xsl:template name="CellData">
        <xsl:choose>
             
            <xsl:when test="FormattedData">
                <xsl:value-of select="FormattedData"/>
            </xsl:when>
            <xsl:when test="RawData">
                <xsl:choose>
                    <xsl:when test ="contains(RawData, 'http:') or contains(RawData, 'https:')">
                        <xsl:value-of select="RawData " disable-output-escaping="yes"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="RawData"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:when test="DefaultData">
                <xsl:choose>
                        <xsl:when test="ValueType">
                                <xsl:text>#</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                                <xsl:value-of select="DefaultData"/>
                        </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                  <xsl:message terminate="yes"><xsl:text>No dataformat turned on</xsl:text></xsl:message>
            </xsl:otherwise>
            
        </xsl:choose>
</xsl:template>

<xsl:template match="Settings">
    <table border="1px solid black">
    <tr border="1px solid black">
        <xsl:for-each select="Groups/Group">
            <xsl:if test="Label = 'Profit/Loss'">
                <tr class="tblhdr" border="1px solid black">
                <xsl:for-each select="Column">
                    <td class="row" width="{$cellWidth}" style="background-color : #ecf576"><b>
                    <xsl:choose>
                        <xsl:when test="Label != ''">
                            <xsl:value-of select="Label"/>
                        </xsl:when>
                        <xsl:otherwise>
                             <xsl:value-of select="ColumnId"/>
                        </xsl:otherwise>
                    </xsl:choose>
                    </b></td>
                </xsl:for-each>
                </tr>
                <tr class="row" depth="1" border="1px solid black">
                <xsl:for-each select="Cell">
                    <td class="cell1">
                        <xsl:call-template name="CellData" />
                    </td>
                </xsl:for-each>
                </tr>

            </xsl:if>
        </xsl:for-each>
        </tr>
    </table>
    <p/><p/>
</xsl:template>

<xsl:template match="/">
    <html>
        <head>
        <xsl:if test="$autoupdate = '1'">
                <meta http-equiv="REFRESH" content="10"></meta>
        </xsl:if>
        </head>
        <insertcss/>
        <body>
         <p class="headerImage">
            <headerImage/>
        </p>
        <xsl:if test="$clickable = '1'">
                <xsl:attribute name="onload">init()</xsl:attribute>
                <script src="portfolio_report.js" type="text/javascript"></script>
        </xsl:if>

        <!-- Table of contents, only viewed if more than one report -->

        <xsl:if test="/MultiReport">
            <table>
                <xsl:for-each select="/MultiReport/PRIMEReport">
                        <tr><td>
                            <!--<td><xsl:value-of select="Type"/></td>-->
                            <td><xsl:value-of select="Name"/></td>
                            <td><xsl:value-of select="substring(LocalTime,1,10)"/></td>
                        </td></tr>
               </xsl:for-each>
            </table>
        </xsl:if>

        <!-- Reports - ORIGINAL CODE-->
        <xsl:for-each select="/MultiReport/PRIMEReport|/PRIMEReport">
            <h3>
                <!--<xsl:value-of select="Type"/>:&nbsp;--><!--ORIGINAL LINE-->
                <xsl:value-of select="Name"/>&nbsp;
                <br><xsl:value-of select="substring(LocalTime,1,10)"/></br>
                <!--<xsl:value-of select="concat(substring(LocalTime,1,10),' ',substring(LocalTime,12,8),' (UTC', substring(LocalTime,20,6),')')"/>-->
             </h3>

             <xsl:apply-templates select="current()/ReportContents"/>
        </xsl:for-each>
        </body>
    </html>
</xsl:template>

<!-- derived from http://www.exslt.org/math/functions/max/index.html -->
<xsl:template name="max">
   <xsl:param name="nodes" select="/.." />
   <xsl:choose>
      <xsl:when test="not($nodes)">0</xsl:when>
      <xsl:otherwise>
         <xsl:for-each select="$nodes">
            <xsl:sort select="translate(.,'-','')" data-type="number" order="descending" />
            <xsl:if test="position( ) = 1">
               <xsl:value-of select="number(translate(.,'-',''))" />
            </xsl:if>
         </xsl:for-each>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

<xsl:template name="color">
   <xsl:param name="value"/>
   <xsl:param name = "colorStep"/>
   <xsl:variable name="rgbval">
       <xsl:choose>
          <xsl:when test="$value > 0" >
            <xsl:value-of select="255 - round($value div $colorStep)"/>
        </xsl:when>
        <xsl:otherwise>
            <xsl:value-of select="255 - round($value div $colorStep * -1)"/>
        </xsl:otherwise>
       </xsl:choose>

   </xsl:variable>
   <xsl:choose>
        <xsl:when test="$value > 0 and $rgbval &lt; 0">
            <xsl:text>rgb(255,0,0)</xsl:text>
            </xsl:when>
        <xsl:when test="$value &lt; 0 and $rgbval &lt; 0">
            <xsl:text>rgb(0,255,0)</xsl:text>
            </xsl:when>
        <xsl:when test="$value > 0">
            <xsl:value-of select="concat('rgb(',$rgbval,',255,',$rgbval,')')"/>
            </xsl:when>
      <xsl:otherwise>
            <xsl:value-of select="concat('rgb(255,',$rgbval,',',$rgbval,')')"/>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

<xsl:template name="rgbfromint">
        <xsl:param name="rgbintval"/>
        
        <xsl:variable name="redval">
                <xsl:value-of select="$rgbintval mod 256"/>
        </xsl:variable>
        <xsl:variable name="newvalue">
                <xsl:value-of select="floor($rgbintval div 256)"/>
        </xsl:variable>
        <xsl:variable name="greenval">
                <xsl:value-of select="$newvalue mod 256"/>
        </xsl:variable>
        <xsl:variable name="blueval">
                <xsl:value-of select="floor($newvalue div 256)"/>
        </xsl:variable>
        
        <xsl:value-of select="concat( 'rgb(',  $redval,  ',',   $greenval,    ',',   $blueval,  ')'    )"/>
        
        
</xsl:template>

</xsl:stylesheet>

...

  XlsTemplateBOa32
<?xml version='1.0'?>
<!-- &copy; Copyright 2011 SunGard FRONT ARENA
       FStandardTemplate is able to produce colored output for RiskMatrixSheets when DefaultData is turned on
       Added support for Transhist output
-->
<!DOCTYPE xsl:stylesheet [
    <!ENTITY nbsp "<xsl:text>&#160;</xsl:text>">
]>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:param name="clickable" select="0"/>
<xsl:param name="autoupdate" select="0"/>
<xsl:output method="html"/>
<xsl:variable name="cellWidth" select="80"/>
<xsl:variable name="rowHeaderWidth" select="250"/>
<xsl:variable name="useLabelColumn" select="//PRIMEReport/Type !='ASQL Table'"/>

<xsl:template name="PrintSpaces">
  <xsl:param name="n" select="0"/>
  <xsl:if test="$n > 0">
    <xsl:call-template name="PrintSpaces">
      <xsl:with-param name="n" select="$n - 1" />
    </xsl:call-template>
    &nbsp;
  </xsl:if>
</xsl:template>

<xsl:template name="PrintSpace2">
  <xsl:param name="n" select="0"/>
  <xsl:if test="$n = 1">
    <xsl:call-template name="PrintSpaces">
      <xsl:with-param name="n" select="$n - 1" />
    </xsl:call-template>
    &nbsp;
  </xsl:if>
</xsl:template>

<xsl:template match="ReportContents">
     <xsl:apply-templates select="Table"/>
</xsl:template>

<xsl:template match="Table">
    
    <xsl:variable name="numberOfColumns" select="NumberOfColumns"/>
    <tr class="tblhdr" depth="{$treeDepth}" border="1px solid black">
       <xsl:if test="$useLabelColumn">
        <td width="{$rowHeaderWidth}">
            <xsl:call-template name="PrintSpaces">
                <xsl:with-param name="n" select="($treeDepth -1) * 6"/>
            </xsl:call-template>
        <img src="report_plus.gif" />&nbsp;</td>
        </xsl:if>
        <xsl:for-each select="Columns/Column">
            <xsl:choose>
            <xsl:when test="TemplateId != ''">
                <td width="{$cellWidth * 2}" style="background-color : #ecf576"><b>
                <xsl:value-of select="TemplateId"/><br />
                <xsl:value-of select="Label"/>
                </b></td>
            </xsl:when>
            <xsl:otherwise>
                <td width="{$cellWidth}" style="background-color : #ecf576"><b><xsl:value-of select="Label"/></b></td>
            </xsl:otherwise>
            </xsl:choose>
        </xsl:for-each>
    </tr>
    <xsl:apply-templates select="Rows/Row">
        <xsl:with-param name="treeDepth" select="$treeDepth"/>
        <xsl:with-param name="colorStep" select="0"/>
    </xsl:apply-templates>
</xsl:template>

<xsl:template match="Table">
    
    <xsl:variable name="numberOfColumns" select="NumberOfColumns"/>

    <xsl:variable name="colorStep" >
        <xsl:choose>
                <xsl:when test="(Type = 'RiskMatrixSheet') and current()//DefaultData">
                    <xsl:variable name="maxvalue">
                        <xsl:call-template name="max">
                                <xsl:with-param name="nodes" select="current()//DefaultData"/>
                        </xsl:call-template>
                    </xsl:variable>
                    <xsl:value-of select="$maxvalue div 255" ></xsl:value-of>
                </xsl:when>
                <xsl:otherwise>0</xsl:otherwise>
        </xsl:choose>
    </xsl:variable>

    <table width="{$numberOfColumns * ($cellWidth + 4) + $rowHeaderWidth + 6}" border="1px solid black">
        <tr class="tblhdr" border="1px solid black">
           <xsl:if test="$useLabelColumn">
            <td width="{$rowHeaderWidth}">&nbsp;</td>
            </xsl:if>
            <xsl:for-each select="Columns/Column">
                <xsl:choose>
                <xsl:when test="TemplateId != ''">
                    <td width="{$cellWidth * 2}" style="background-color : #ecf576"><b>
                    <xsl:value-of select="TemplateId"/><br />
                    <xsl:value-of select="Label"/>
                    </b></td>
                </xsl:when>
                <xsl:otherwise>
                    <td width="{$cellWidth}" style="background-color : #ecf576"><b><xsl:value-of select="Label"/></b></td>
                </xsl:otherwise>
                </xsl:choose>
            </xsl:for-each>
        </tr>
        <xsl:apply-templates select="Rows/Row">
            <xsl:with-param name="treeDepth" select="1"/>
            <xsl:with-param name="colorStep" select="$colorStep"/>
        </xsl:apply-templates>
    </table>
    <p/><p/>
</xsl:template>

<xsl:template match="Row">
    <xsl:param name = "treeDepth"/>
    <xsl:param name = "colorStep"/>
    <xsl:variable name="rwId" select="RowId"/>
    <xsl:if test="count(ancestor::Row) = 4">
        <tr class="{concat('cell', $treeDepth)}" depth="{$treeDepth}" border="1px solid black">
            <xsl:if test="$useLabelColumn">
                    <td class="row">
                    
                        <xsl:call-template name="PrintSpaces">
                                <xsl:with-param name="n" select="($treeDepth - 1) * 6"/>
                        </xsl:call-template>
                        
                        <xsl:if test="$clickable = '1'">
                                <img src="report_plus.gif"/>
                        </xsl:if>
                        <xsl:value-of select="Label"/>
                        
                    </td>
            </xsl:if>
        <xsl:apply-templates select="Cells/Cell">
            <xsl:with-param name="colorStep" select="$colorStep" />
        </xsl:apply-templates>
        </tr>
    </xsl:if>
    <xsl:if test="ancestor::ReportContents/ChildReports/ChildReport[ChildReportId = $rwId]">
        <xsl:apply-templates select="ancestor::ReportContents/ChildReports/ChildReport[ChildReportId = $rwId]/PRIMEReport/ReportContents/Table" mode="ChildReport">
            <xsl:with-param name="treeDepth" select="$treeDepth +1" />
        </xsl:apply-templates>
    </xsl:if>
    <xsl:apply-templates select="Rows/Row">
        <xsl:with-param name="treeDepth" select="$treeDepth + 1" />
        <xsl:with-param name="colorStep" select="$colorStep" />
    </xsl:apply-templates>
</xsl:template>

<xsl:template match="Cell">
    <xsl:param name = "colorStep"/>
    <td>
         
         <xsl:choose>   
            
            <xsl:when test="Appearance">
                <xsl:attribute name="style">
                
                         <xsl:choose>     
                            <xsl:when test="Appearance/BkgColor">
                                    background-color: <!--rgb( 0, 255 ,255 )-->
                                        <xsl:call-template name="rgbfromint">
                                            <xsl:with-param name="rgbintval" select="Appearance/BkgColor"/>  
                                         </xsl:call-template>
                                         
                            </xsl:when>
                            <xsl:otherwise>
                                background-color: white
                            </xsl:otherwise>
                         </xsl:choose>    
                         
                        <xsl:choose>   
                            <xsl:when test="Appearance/TextColor">
                                    ;color: <!--rgb( 255, 0 ,255 )-->
                                           <xsl:call-template name="rgbfromint">
                                            <xsl:with-param name="rgbintval" select="Appearance/TextColor"/>  
                                         </xsl:call-template>
                            </xsl:when>
                            <xsl:otherwise>
                               ;color: black
                            </xsl:otherwise>
                        </xsl:choose>   
                
                </xsl:attribute>   
            </xsl:when>
            
            <xsl:otherwise>
                <xsl:if test="DefaultData and $colorStep > 0 and string(number(DefaultData)) !='NaN'">
                        <xsl:attribute name="style">background-color:
                                <xsl:call-template name="color">
                                        <xsl:with-param name="colorStep" select="$colorStep"/>
                                        <xsl:with-param name="value" select="DefaultData"/>
                                        
                                </xsl:call-template>
                        </xsl:attribute>
                </xsl:if>
            </xsl:otherwise>
            
        </xsl:choose>
        <xsl:choose>
                <xsl:when test="ValueType and DefaultData">
                        <acronym>
                                <xsl:attribute name="title">
                                        <xsl:value-of select="DefaultData"/>
                                </xsl:attribute>
                        <xsl:call-template name="CellData" />
                        </acronym>
                </xsl:when>
                <xsl:otherwise>
                        <xsl:call-template name="CellData" />
                </xsl:otherwise>
        </xsl:choose>
    </td>
</xsl:template>

<xsl:template name="CellData">
        <xsl:choose>
             
            <xsl:when test="FormattedData">
                <xsl:value-of select="FormattedData"/>
            </xsl:when>
            <xsl:when test="RawData">
                <xsl:choose>
                    <xsl:when test ="contains(RawData, 'http:') or contains(RawData, 'https:')">
                        <xsl:value-of select="RawData " disable-output-escaping="yes"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="RawData"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:when test="DefaultData">
                <xsl:choose>
                        <xsl:when test="ValueType">
                                <xsl:text>#</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                                <xsl:value-of select="DefaultData"/>
                        </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                  <xsl:message terminate="yes"><xsl:text>No dataformat turned on</xsl:text></xsl:message>
            </xsl:otherwise>
            
        </xsl:choose>
</xsl:template>

<xsl:template match="Settings">
    <table border="1px solid black">
    <tr border="1px solid black">
        <xsl:for-each select="Groups/Group">
            <xsl:if test="Label = 'Profit/Loss'">
                <tr class="tblhdr" border="1px solid black">
                <xsl:for-each select="Column">
                    <td class="row" width="{$cellWidth}" style="background-color : #ecf576"><b>
                    <xsl:choose>
                        <xsl:when test="Label != ''">
                            <xsl:value-of select="Label"/>
                        </xsl:when>
                        <xsl:otherwise>
                             <xsl:value-of select="ColumnId"/>
                        </xsl:otherwise>
                    </xsl:choose>
                    </b></td>
                </xsl:for-each>
                </tr>
                <tr class="row" depth="1" border="1px solid black">
                <xsl:for-each select="Cell">
                    <td class="cell1">
                        <xsl:call-template name="CellData" />
                    </td>
                </xsl:for-each>
                </tr>

            </xsl:if>
        </xsl:for-each>
        </tr>
    </table>
    <p/><p/>
</xsl:template>

<xsl:template match="/">
    <html>
        <head>
        <xsl:if test="$autoupdate = '1'">
                <meta http-equiv="REFRESH" content="10"></meta>
        </xsl:if>
        </head>
        <insertcss/>
        <body>
         <p class="headerImage">
            <headerImage/>
        </p>
        <xsl:if test="$clickable = '1'">
                <xsl:attribute name="onload">init()</xsl:attribute>
                <script src="portfolio_report.js" type="text/javascript"></script>
        </xsl:if>

        <!-- Table of contents, only viewed if more than one report -->

        <xsl:if test="/MultiReport">
            <table>
                <xsl:for-each select="/MultiReport/PRIMEReport">
                        <tr><td>
                            <!--<td><xsl:value-of select="Type"/></td>-->
                            <td><xsl:value-of select="Name"/></td>
                            <td><xsl:value-of select="substring(LocalTime,1,10)"/></td>
                        </td></tr>
               </xsl:for-each>
            </table>
        </xsl:if>

        <!-- Reports - ORIGINAL CODE-->
        <xsl:for-each select="/MultiReport/PRIMEReport|/PRIMEReport">
            <h3>
                <!--<xsl:value-of select="Type"/>:&nbsp;--><!--ORIGINAL LINE-->
                <xsl:value-of select="Name"/>&nbsp;
                <br><xsl:value-of select="substring(LocalTime,1,10)"/></br>
                <!--<xsl:value-of select="concat(substring(LocalTime,1,10),' ',substring(LocalTime,12,8),' (UTC', substring(LocalTime,20,6),')')"/>-->
             </h3>

             <xsl:apply-templates select="current()/ReportContents"/>
        </xsl:for-each>
        </body>
    </html>
</xsl:template>

<!-- derived from http://www.exslt.org/math/functions/max/index.html -->
<xsl:template name="max">
   <xsl:param name="nodes" select="/.." />
   <xsl:choose>
      <xsl:when test="not($nodes)">0</xsl:when>
      <xsl:otherwise>
         <xsl:for-each select="$nodes">
            <xsl:sort select="translate(.,'-','')" data-type="number" order="descending" />
            <xsl:if test="position( ) = 1">
               <xsl:value-of select="number(translate(.,'-',''))" />
            </xsl:if>
         </xsl:for-each>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

<xsl:template name="color">
   <xsl:param name="value"/>
   <xsl:param name = "colorStep"/>
   <xsl:variable name="rgbval">
       <xsl:choose>
          <xsl:when test="$value > 0" >
            <xsl:value-of select="255 - round($value div $colorStep)"/>
        </xsl:when>
        <xsl:otherwise>
            <xsl:value-of select="255 - round($value div $colorStep * -1)"/>
        </xsl:otherwise>
       </xsl:choose>

   </xsl:variable>
   <xsl:choose>
        <xsl:when test="$value > 0 and $rgbval &lt; 0">
            <xsl:text>rgb(255,0,0)</xsl:text>
            </xsl:when>
        <xsl:when test="$value &lt; 0 and $rgbval &lt; 0">
            <xsl:text>rgb(0,255,0)</xsl:text>
            </xsl:when>
        <xsl:when test="$value > 0">
            <xsl:value-of select="concat('rgb(',$rgbval,',255,',$rgbval,')')"/>
            </xsl:when>
      <xsl:otherwise>
            <xsl:value-of select="concat('rgb(255,',$rgbval,',',$rgbval,')')"/>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

<xsl:template name="rgbfromint">
        <xsl:param name="rgbintval"/>
        
        <xsl:variable name="redval">
                <xsl:value-of select="$rgbintval mod 256"/>
        </xsl:variable>
        <xsl:variable name="newvalue">
                <xsl:value-of select="floor($rgbintval div 256)"/>
        </xsl:variable>
        <xsl:variable name="greenval">
                <xsl:value-of select="$newvalue mod 256"/>
        </xsl:variable>
        <xsl:variable name="blueval">
                <xsl:value-of select="floor($newvalue div 256)"/>
        </xsl:variable>
        
        <xsl:value-of select="concat( 'rgb(',  $redval,  ',',   $greenval,    ',',   $blueval,  ')'    )"/>
        
        
</xsl:template>

</xsl:stylesheet>

...

  XlsTemplateBOa33
<?xml version='1.0'?>
<!-- &copy; Copyright 2011 SunGard FRONT ARENA
       FStandardTemplate is able to produce colored output for RiskMatrixSheets when DefaultData is turned on
       Added support for Transhist output
-->
<!DOCTYPE xsl:stylesheet [
    <!ENTITY nbsp "<xsl:text>&#160;</xsl:text>">
]>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:param name="clickable" select="0"/>
<xsl:param name="autoupdate" select="0"/>
<xsl:output method="html"/>
<xsl:variable name="cellWidth" select="80"/>
<xsl:variable name="rowHeaderWidth" select="250"/>
<xsl:variable name="useLabelColumn" select="//PRIMEReport/Type !='ASQL Table'"/>

<xsl:template name="PrintSpaces">
  <xsl:param name="n" select="0"/>
  <xsl:if test="$n > 0">
    <xsl:call-template name="PrintSpaces">
      <xsl:with-param name="n" select="$n - 1" />
    </xsl:call-template>
    &nbsp;
  </xsl:if>
</xsl:template>

<xsl:template name="PrintSpace2">
  <xsl:param name="n" select="0"/>
  <xsl:if test="$n = 1">
    <xsl:call-template name="PrintSpaces">
      <xsl:with-param name="n" select="$n - 1" />
    </xsl:call-template>
    &nbsp;
  </xsl:if>
</xsl:template>

<xsl:template match="ReportContents">
     <xsl:apply-templates select="Table"/>
</xsl:template>

<xsl:template match="Table">
    
    <xsl:variable name="numberOfColumns" select="NumberOfColumns"/>
    <tr class="tblhdr" depth="{$treeDepth}" border="1px solid black">
       <xsl:if test="$useLabelColumn">
        <td width="{$rowHeaderWidth}">
            <xsl:call-template name="PrintSpaces">
                <xsl:with-param name="n" select="($treeDepth -1) * 6"/>
            </xsl:call-template>
        <img src="report_plus.gif" />&nbsp;</td>
        </xsl:if>
        <xsl:for-each select="Columns/Column">
            <xsl:choose>
            <xsl:when test="TemplateId != ''">
                <td width="{$cellWidth * 2}" style="background-color : #ecf576"><b>
                <xsl:value-of select="TemplateId"/><br />
                <xsl:value-of select="Label"/>
                </b></td>
            </xsl:when>
            <xsl:otherwise>
                <td width="{$cellWidth}" style="background-color : #ecf576"><b><xsl:value-of select="Label"/></b></td>
            </xsl:otherwise>
            </xsl:choose>
        </xsl:for-each>
    </tr>
    <xsl:apply-templates select="Rows/Row">
        <xsl:with-param name="treeDepth" select="$treeDepth"/>
        <xsl:with-param name="colorStep" select="0"/>
    </xsl:apply-templates>
</xsl:template>

<xsl:template match="Table">
    
    <xsl:variable name="numberOfColumns" select="NumberOfColumns"/>

    <xsl:variable name="colorStep" >
        <xsl:choose>
                <xsl:when test="(Type = 'RiskMatrixSheet') and current()//DefaultData">
                    <xsl:variable name="maxvalue">
                        <xsl:call-template name="max">
                                <xsl:with-param name="nodes" select="current()//DefaultData"/>
                        </xsl:call-template>
                    </xsl:variable>
                    <xsl:value-of select="$maxvalue div 255" ></xsl:value-of>
                </xsl:when>
                <xsl:otherwise>0</xsl:otherwise>
        </xsl:choose>
    </xsl:variable>

    <table width="{$numberOfColumns * ($cellWidth + 4) + $rowHeaderWidth + 6}" border="1px solid black">
        <tr class="tblhdr" border="1px solid black">
           <xsl:if test="$useLabelColumn">
            <td width="{$rowHeaderWidth}">&nbsp;</td>
            </xsl:if>
            <xsl:for-each select="Columns/Column">
                <xsl:choose>
                <xsl:when test="TemplateId != ''">
                    <td width="{$cellWidth * 2}" style="background-color : #ecf576"><b>
                    <xsl:value-of select="TemplateId"/><br />
                    <xsl:value-of select="Label"/>
                    </b></td>
                </xsl:when>
                <xsl:otherwise>
                    <td width="{$cellWidth}" style="background-color : #ecf576"><b><xsl:value-of select="Label"/></b></td>
                </xsl:otherwise>
                </xsl:choose>
            </xsl:for-each>
        </tr>
        <xsl:apply-templates select="Rows/Row">
            <xsl:with-param name="treeDepth" select="1"/>
            <xsl:with-param name="colorStep" select="$colorStep"/>
        </xsl:apply-templates>
    </table>
    <p/><p/>
</xsl:template>

<xsl:template match="Row">
    <xsl:param name = "treeDepth"/>
    <xsl:param name = "colorStep"/>
    <xsl:variable name="rwId" select="RowId"/>
    
        <xsl:if test="count(ancestor::Row) = 0 or count(ancestor::Row) = 2 or (count(ancestor::Row) = 3 and not(ancestor::Row[3]/Label = 'BOa33 - Yesterday'))">

        
            <tr class="{concat('cell', $treeDepth)}" depth="{$treeDepth}" border="1px solid black">
                <xsl:if test="$useLabelColumn">
                        <td class="row">
                        
                            <xsl:call-template name="PrintSpaces">
                                    <xsl:with-param name="n" select="($treeDepth - 1) * 6"/>
                            </xsl:call-template>
                            
                            <xsl:if test="$clickable = '1'">
                                    <img src="report_plus.gif"/>
                            </xsl:if>
                            <xsl:value-of select="Label"/>
                            
                        </td>
                </xsl:if>

            <xsl:apply-templates select="Cells/Cell">
                <xsl:with-param name="colorStep" select="$colorStep" />
            </xsl:apply-templates>
            </tr>

        </xsl:if>
    
    
    <xsl:if test="ancestor::ReportContents/ChildReports/ChildReport[ChildReportId = $rwId]">
        <xsl:apply-templates select="ancestor::ReportContents/ChildReports/ChildReport[ChildReportId = $rwId]/PRIMEReport/ReportContents/Table" mode="ChildReport">
            <xsl:with-param name="treeDepth" select="$treeDepth +1" />
        </xsl:apply-templates>
    </xsl:if>
    <xsl:apply-templates select="Rows/Row">
        <xsl:with-param name="treeDepth" select="$treeDepth + 1" />
        <xsl:with-param name="colorStep" select="$colorStep" />
    </xsl:apply-templates>
</xsl:template>

<xsl:template match="Cell">
    <xsl:param name = "colorStep"/>
    <td>
         
         <xsl:choose>   
            
            <xsl:when test="Appearance">
                <xsl:attribute name="style">
                
                         <xsl:choose>     
                            <xsl:when test="Appearance/BkgColor">
                                    background-color: <!--rgb( 0, 255 ,255 )-->
                                        <xsl:call-template name="rgbfromint">
                                            <xsl:with-param name="rgbintval" select="Appearance/BkgColor"/>  
                                         </xsl:call-template>
                                         
                            </xsl:when>
                            <xsl:otherwise>
                                background-color: white
                            </xsl:otherwise>
                         </xsl:choose>    
                         
                        <xsl:choose>   
                            <xsl:when test="Appearance/TextColor">
                                    ;color: <!--rgb( 255, 0 ,255 )-->
                                           <xsl:call-template name="rgbfromint">
                                            <xsl:with-param name="rgbintval" select="Appearance/TextColor"/>  
                                         </xsl:call-template>
                            </xsl:when>
                            <xsl:otherwise>
                               ;color: black
                            </xsl:otherwise>
                        </xsl:choose>   
                
                </xsl:attribute>   
            </xsl:when>
            
            <xsl:otherwise>
                <xsl:if test="DefaultData and $colorStep > 0 and string(number(DefaultData)) !='NaN'">
                        <xsl:attribute name="style">background-color:
                                <xsl:call-template name="color">
                                        <xsl:with-param name="colorStep" select="$colorStep"/>
                                        <xsl:with-param name="value" select="DefaultData"/>
                                        
                                </xsl:call-template>
                        </xsl:attribute>
                </xsl:if>
            </xsl:otherwise>
            
        </xsl:choose>
        <xsl:choose>
                <xsl:when test="ValueType and DefaultData">
                        <acronym>
                                <xsl:attribute name="title">
                                        <xsl:value-of select="DefaultData"/>
                                </xsl:attribute>
                        <xsl:call-template name="CellData" />
                        </acronym>
                </xsl:when>
                <xsl:otherwise>
                        <xsl:call-template name="CellData" />
                </xsl:otherwise>
        </xsl:choose>
    </td>
</xsl:template>

<xsl:template name="CellData">
        <xsl:choose>
             
            <xsl:when test="FormattedData">
                <xsl:value-of select="FormattedData"/>
            </xsl:when>
            <xsl:when test="RawData">
                <xsl:choose>
                    <xsl:when test ="contains(RawData, 'http:') or contains(RawData, 'https:')">
                        <xsl:value-of select="RawData " disable-output-escaping="yes"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="RawData"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:when test="DefaultData">
                <xsl:choose>
                        <xsl:when test="ValueType">
                                <xsl:text>#</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                                <xsl:value-of select="DefaultData"/>
                        </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                  <xsl:message terminate="yes"><xsl:text>No dataformat turned on</xsl:text></xsl:message>
            </xsl:otherwise>
            
        </xsl:choose>
</xsl:template>

<xsl:template match="Settings">
    <table border="1px solid black">
    <tr border="1px solid black">
        <xsl:for-each select="Groups/Group">
            <xsl:if test="Label = 'Profit/Loss'">
                <tr class="tblhdr" border="1px solid black">
                <xsl:for-each select="Column">
                    <td class="row" width="{$cellWidth}" style="background-color : #ecf576"><b>
                    <xsl:choose>
                        <xsl:when test="Label != ''">
                            <xsl:value-of select="Label"/>
                        </xsl:when>
                        <xsl:otherwise>
                             <xsl:value-of select="ColumnId"/>
                        </xsl:otherwise>
                    </xsl:choose>
                    </b></td>
                </xsl:for-each>
                </tr>
                <tr class="row" depth="1" border="1px solid black">
                <xsl:for-each select="Cell">
                    <td class="cell1">
                        <xsl:call-template name="CellData" />
                    </td>
                </xsl:for-each>
                </tr>

            </xsl:if>
        </xsl:for-each>
        </tr>
    </table>
    <p/><p/>
</xsl:template>

<xsl:template match="/">
    <html>
        <head>
        <xsl:if test="$autoupdate = '1'">
                <meta http-equiv="REFRESH" content="10"></meta>
        </xsl:if>
        </head>
        <insertcss/>
        <body>
         <p class="headerImage">
            <headerImage/>
        </p>
        <xsl:if test="$clickable = '1'">
                <xsl:attribute name="onload">init()</xsl:attribute>
                <script src="portfolio_report.js" type="text/javascript"></script>
        </xsl:if>

        <!-- Table of contents, only viewed if more than one report -->

        <xsl:if test="/MultiReport">
            <table>
                <xsl:for-each select="/MultiReport/PRIMEReport">
                        <tr><td>
                            <!--<td><xsl:value-of select="Type"/></td>-->
                            <td><xsl:value-of select="Name"/></td>
                            <td><xsl:value-of select="substring(LocalTime,1,10)"/></td>
                        </td></tr>
               </xsl:for-each>
            </table>
        </xsl:if>

        <!-- Reports - ORIGINAL CODE-->
        <xsl:for-each select="/MultiReport/PRIMEReport|/PRIMEReport">
            <h3>
                <!--<xsl:value-of select="Type"/>:&nbsp;--><!--ORIGINAL LINE-->
                <xsl:value-of select="Name"/>&nbsp;
                <br><xsl:value-of select="substring(LocalTime,1,10)"/></br>
                <!--<xsl:value-of select="concat(substring(LocalTime,1,10),' ',substring(LocalTime,12,8),' (UTC', substring(LocalTime,20,6),')')"/>-->
             </h3>

             <xsl:apply-templates select="current()/ReportContents"/>
        </xsl:for-each>
        </body>
    </html>
</xsl:template>

<!-- derived from http://www.exslt.org/math/functions/max/index.html -->
<xsl:template name="max">
   <xsl:param name="nodes" select="/.." />
   <xsl:choose>
      <xsl:when test="not($nodes)">0</xsl:when>
      <xsl:otherwise>
         <xsl:for-each select="$nodes">
            <xsl:sort select="translate(.,'-','')" data-type="number" order="descending" />
            <xsl:if test="position( ) = 1">
               <xsl:value-of select="number(translate(.,'-',''))" />
            </xsl:if>
         </xsl:for-each>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

<xsl:template name="color">
   <xsl:param name="value"/>
   <xsl:param name = "colorStep"/>
   <xsl:variable name="rgbval">
       <xsl:choose>
          <xsl:when test="$value > 0" >
            <xsl:value-of select="255 - round($value div $colorStep)"/>
        </xsl:when>
        <xsl:otherwise>
            <xsl:value-of select="255 - round($value div $colorStep * -1)"/>
        </xsl:otherwise>
       </xsl:choose>

   </xsl:variable>
   <xsl:choose>
        <xsl:when test="$value > 0 and $rgbval &lt; 0">
            <xsl:text>rgb(255,0,0)</xsl:text>
            </xsl:when>
        <xsl:when test="$value &lt; 0 and $rgbval &lt; 0">
            <xsl:text>rgb(0,255,0)</xsl:text>
            </xsl:when>
        <xsl:when test="$value > 0">
            <xsl:value-of select="concat('rgb(',$rgbval,',255,',$rgbval,')')"/>
            </xsl:when>
      <xsl:otherwise>
            <xsl:value-of select="concat('rgb(255,',$rgbval,',',$rgbval,')')"/>
      </xsl:otherwise>
   </xsl:choose>
</xsl:template>

<xsl:template name="rgbfromint">
        <xsl:param name="rgbintval"/>
        
        <xsl:variable name="redval">
                <xsl:value-of select="$rgbintval mod 256"/>
        </xsl:variable>
        <xsl:variable name="newvalue">
                <xsl:value-of select="floor($rgbintval div 256)"/>
        </xsl:variable>
        <xsl:variable name="greenval">
                <xsl:value-of select="$newvalue mod 256"/>
        </xsl:variable>
        <xsl:variable name="blueval">
                <xsl:value-of select="floor($newvalue div 256)"/>
        </xsl:variable>
        
        <xsl:value-of select="concat( 'rgb(',  $redval,  ',',   $greenval,    ',',   $blueval,  ')'    )"/>
        
        
</xsl:template>

</xsl:stylesheet>

...

}

