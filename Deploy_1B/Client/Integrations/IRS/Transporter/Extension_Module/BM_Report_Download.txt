#
# Front Arena exported extension module.
# source          ""
# timestamp (utc) "2024-09-04 07:25:36"
# ***** DO NOT EDIT! *****
#
name        "BM_Report_Download"
description "$Id$"

groups {
}

decls[FMenuExtension] {
}

clx FSessionManagerFrame [FMenuExtension] {
  Reporting =
  Function=Report_Downloader.StartApplication
  MenuType=Application
  ModuleName=Reporting
  ParentMenu=Tools
  RibbonPosition=Reporting Menu


}

decls[FParameters] {
}

clx FObject [FParameters] {
  ReportPar =
  IrsProfile=Back Office
  passwd='UEBzc3cwcmQ='
  Profile=Front Office, Middle Office, Back Office
  server=10.243.243.44
  user=FTP_NTCS


}

decls[FPythonCode] {
}

clx FObject [FPythonCode] {
  Report_Downloader
"""----------------------------------------------------------------------------------------------------
MODULE:
    Report_Downloader

DESCRIPTION:
    Module to download all report for FO, MO. BO from server by using FTP with SSL

-------------------------------------------------------------------------------------------------------"""
import ftplib
import os
import ParametersReader
import FRunScriptGUI
import socket
import pyodbc
import base64
import acm
import io
import sys
import UserProfileUtils as up
import re
from datetime import datetime

folderPicker = FRunScriptGUI.DirectorySelection()
    
ael_gui_parameters = {
  'windowCaption' : 'Report Downloader',
  'runButtonLabel':'&&Go',
  'runButtonTooltip':'Execute',
  'hideExtraControls':True,
  'closeWhenFinished':False,
  'InsertItemsShowExpired':False
}

listdata = []
file = []
run = False
selectedDate = None
selectedReport = None
groupProfile = None
groupnm = None

DB = ParametersReader.get_params("DBParam") 
ftpPar = ParametersReader.get_params("ReportPar")



def getfolder(profile, isProfile):
    global listdata, groupnm
    paswrd = base64.b64decode(DB['PWD']).decode("utf-8")
    cnxn = pyodbc.connect('DRIVER='+DB['DRIVER'] + ';SERVER='+DB['SERVER'] + ';DATABASE='+DB['DATABASE'] + ';UID='+DB['UID']  +';PWD='+ paswrd)
    cursor = cnxn.cursor()
    query = """SET NOCOUNT ON; EXEC SP_GetFolderReport @list=?, @profile=?"""
    param = (profile, isProfile)
    cursor.execute(query, param)
    data = cursor.fetchall()
    if isProfile == 0:
        for row in data:
            listdata += row
    else:
        for row in data:
            groupnm = row[0]
    
def getreportname(index, fieldValues):
    global selectedReport
    if run:
        selectedReport = fieldValues[index]
        return fieldValues

def getfile(index, fieldValues):
    global run
    if run:
        selectedDate = fieldValues[2]
        getfolder(selectedReport,1)
        ael_variables[3][3] = ftp(selectedReport, selectedDate)
        return fieldValues
    run = True

def detect_dates(text):
    date_formats = [
        r'\d{1,2}/\d{1,2}/\d{2,4}',         # 12/31/2024 or 12/31/24
        r'\d{1,2}-\d{1,2}-\d{2,4}',         # 12-31-2024 or 12-31-24
        r'\d{4}-\d{1,2}-\d{1,2}',           # 2024-12-31
        r'\d{1,2}\s(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s\d{2,4}', # 31 Dec 2024 or 31 Dec 24
        r'(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s\d{1,2},\s\d{2,4}', # Dec 31, 2024
        r'(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s\d{1,2}\s\d{2,4}',   # Dec 31 2024
        r'\d{1,2}\s(?:January|February|March|April|May|June|July|August|September|October|November|December)\s\d{2,4}', # 31 December 2024
        r'(?:January|February|March|April|May|June|July|August|September|October|November|December)\s\d{1,2},\s\d{2,4}', # December 31, 2024
        r'(?:January|February|March|April|May|June|July|August|September|October|November|December)\s\d{1,2}\s\d{2,4}',   # December 31 2024
        r'\d{1,2}-(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-\d{2}',   # 12-May-24
    ]

    detected_dates = []
    for date_format in date_formats:
        dates = re.findall(date_format, text)
        detected_dates.extend(dates)

    return detected_dates

def convert_to_yyyymmdd(dates):
    converted_dates = []
    for date_str in dates:
        date_obj = None
        if re.match(r'\d{1,2}/\d{1,2}/\d{2,4}', date_str):
            try:
                date_obj = datetime.strptime(date_str, "%m/%d/%Y")
            except ValueError:
                date_obj = datetime.strptime(date_str, "%d/%m/%Y")
        elif re.match(r'\d{4}-\d{1,2}-\d{1,2}', date_str):
            date_obj = datetime.strptime(date_str, "%Y-%m-%d")
        elif re.match(r'\d{1,2}\s(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s\d{2,4}', date_str):
            date_obj = datetime.strptime(date_str, "%d %b %Y")
        elif re.match(r'(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s\d{1,2},\s\d{2,4}', date_str):
            date_obj = datetime.strptime(date_str, "%b %d, %Y")
        elif re.match(r'(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s\d{1,2}\s\d{2,4}', date_str):
            date_obj = datetime.strptime(date_str, "%b %d %Y")
        elif re.match(r'\d{1,2}\s(?:January|February|March|April|May|June|July|August|September|October|November|December)\s\d{2,4}', date_str):
            date_obj = datetime.strptime(date_str, "%d %B %Y")
        elif re.match(r'(?:January|February|March|April|May|June|July|August|September|October|November|December)\s\d{1,2},\s\d{2,4}', date_str):
            date_obj = datetime.strptime(date_str, "%B %d, %Y")
        elif re.match(r'(?:January|February|March|April|May|June|July|August|September|October|November|December)\s\d{1,2}\s\d{2,4}', date_str):
            date_obj = datetime.strptime(date_str, "%B %d %Y")
        elif re.match(r'\d{1,2}-(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-\d{2}', date_str):
            date_obj = datetime.strptime(date_str, "%d-%b-%y")
        
        if date_obj:
            converted_dates.append(date_obj.strftime("%Y%m%d"))
    return converted_dates

def ftp(selectedReport, selectedDate):
    session = ftplib.FTP_TLS(ftpPar['server'])
    #session.set_debuglevel(2)
    session.login(ftpPar['user'], base64.b64decode(ftpPar['passwd']).decode("utf-8"))
    #session.login(user,passwd)
    session.prot_p()
    session.af = socket.AF_INET6
    session.cwd(groupnm)
    session.cwd(selectedReport)
    dateformat = datetime.strptime(selectedDate, '%Y-%m-%d').strftime('%Y%m%d') 
    try:
        try:
            session.nlst()
            datename = 'report' + dateformat
            session.cwd(datename)
            file = session.nlst()
        except:
            session.nlst()
            datename = 'report' + dateformat[2:]
            session.cwd(datename)
            file = session.nlst()
    except:
        print('Data For ' + selectedDate + ' is Not Found!')    
    return file
    
def getprofile():
    pfldata = ParametersReader.get_params("ReportPar")
    profile = pfldata['Profile'].split(", ")
    profilenm = []  
    for x in profile:
        isallow = up.is_component_in_user_profile(str(x))        
        if isallow == 1:
            profilenm.append(x)
    getfolder(str(profilenm),0)
    return profilenm

getprofile()




def StartApplication(param):
    shell = acm.UX.SessionManager().Shell()
    dataprofile = getprofile()
    if len(dataprofile) != 0: 
        acm.RunModuleWithParameters("Report_Downloader", acm.GetDefaultContext())        
    else :
        acm.UX().Dialogs().MessageBoxInformation(shell, "user doesn't have access right for this menu")    

ael_variables = [
        ['inputFolder', 'Folder Path', folderPicker, None, folderPicker, 1, 1, 'The file path from where the files will be picked.', None, 1],
        ['ReportName', 'Report Name', 'string', listdata, None, 1, None, 'Rekon Name', getreportname, 1, ''],
        ['Date','Date (YYYY-MM-DD)','date',None,acm.Time.DateNow(),1, None, 'Date Of Rekon', getfile, 1, ''],
        ['File','File','string',file,None,1, None, 'Folder Name', None, 1, ''],
        ]

def ael_main(var):
    reportnm = var["ReportName"]
    getfolder(var["ReportName"], 0)
    DownloadFTP(var["inputFolder"], var["ReportName"], var["Date"], var["File"])


def DownloadFTP(inputFolder, ReportName, date, File):
    with ftplib.FTP_TLS(ftpPar['server']) as session:                    #Connect to FTP
        session.login(ftpPar['user'], base64.b64decode(ftpPar['passwd']).decode("utf-8"))                            #Input User and Password
        #session.set_debuglevel(2)
        session.prot_p()
        session.af = socket.AF_INET6
        session.set_pasv(True)                                         #Set Secure Connection
        session.cwd(groupnm)
        #print(groupnm)
        #print(ReportName)
        session.cwd(ReportName)                                         #Change Folder Rekon
        dates = detect_dates(str(date))
        converted_dates = convert_to_yyyymmdd(dates)
        try:
            datename = 'report' + ''.join(converted_dates)
            #print(str(datename))
            session.cwd(datename)
        except:
            dateformat = ''.join(converted_dates)
            #print(str(dateformat))
            datename = 'report' + str(dateformat[2:])
            #print(str(datename))
            session.cwd(datename)
        '''
        try:
            dateformat = datetime.strptime(str(date), '%m/%d/%Y').strftime('%Y%m%d')
        except:
            dateformat = datetime.strptime(str(date), '%d/%m/%Y').strftime('%Y%m%d')
        try:
            datename = 'report' + dateformat
            session.cwd(datename)
        except:
            dateformat=str(dateformat).strip('-')
            datename = 'report' + dateformat[2:]
            session.cwd(datename)'''
        filename = os.path.join(str(inputFolder),str(File))                                                  
        with open( filename, 'wb') as my_file:                          #Open a local file to store the downloaded file
            session.retrbinary('RETR ' + str(File), my_file.write, 1024)#Download File

...

}

